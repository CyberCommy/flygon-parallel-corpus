- en: Working with Angular Material
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Welcome to the chapter on Angular Material. I must say, I'm impressed. Statistics
    show that most of the people who buy tech books don't get very far into them.
    You are a little more than halfway through the book—a job well done, Angular Jedi!
  prefs: []
  type: TYPE_NORMAL
- en: This will be a short chapter for a couple of reasons. First, this book is heavily
    intended to be used for building applications, primarily using Angular and Bootstrap.
    So think of this chapter as an added bonus for us. The other reason is this chapter
    is only intended to be an introduction to an alternative **user interface** (**UI**)
    component library, to Bootstrap when working with Angular. There should be a separate
    book on Angular Material alone, but this chapter will cover a lot of ground in
    terms of showing you the capabilities and components that the library offers.
  prefs: []
  type: TYPE_NORMAL
- en: We will learn about navigation and menu components, layout components, form
    field elements, buttons, dialog and pop-up components, and lots of fun elements
    that you will definitely appreciate, and possibly consider for the framework in
    your next project.
  prefs: []
  type: TYPE_NORMAL
- en: 'By summarizing, the topics we will be covering in this chapter are:'
  prefs: []
  type: TYPE_NORMAL
- en: What is Angular Material?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing Angular Material
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Categories of components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Okay, let's get right to it by starting with the description of what Angular
    Material is.
  prefs: []
  type: TYPE_NORMAL
- en: What is Angular Material?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Angular Material is a rich collection of components, which can be easily plugged
    into Angular applications, and also works on web, mobile, and desktop applications.
    Material Design comes from Google, the makers of Angular, which essentially means
    that there is a lot of native support, optimization, and performance tuning done
    for the components, as well as for the new ones that will be rolled out in future.
    The following list shows some of the benefits we get when we consider using Material
    Design in our applications:'
  prefs: []
  type: TYPE_NORMAL
- en: The UI components are ready to be used right away, without any extra development
    efforts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We can selectively choose to use the components individually, rather than being
    forced to import all the modules in one go
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The rendering of the components is extremely fast
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is easy to plug data into components via a two-way or one-way data binding
    functionality, which is an extremely powerful feature of Angular
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The components have the same look, feel, and behavior across web, mobile, and
    desktop applications, which solves a lot of cross-browser and cross-device issues
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The performance is tuned and optimized for integration with Angular applications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can find all the required documentation about Angular Material on the official website
    at: [http://material.angular.com](https://material.angular.io/).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we proceed any further in this chapter, let''s quickly generate the
    application where we will implement all of the Angular Material components. Run
    the following `ng` command in order to generate a new application named `AngularMaterial`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the command has been successfully executed, we should see the output shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/c0174b28-d32b-40aa-a72a-d5587896fc8b.png)'
  prefs: []
  type: TYPE_IMG
- en: Now that our application has been generated, let's learn how to install the
    Angular Material library in our project.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Angular Material
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By now, you will have a strong gut feeling that when we want to install anything
    in Angular applications, we have a powerful **command-line interface** (**CLI**)
    tool. We will continue to use the same CLI, and with the help of `npm`, we will
    install Angular Material.
  prefs: []
  type: TYPE_NORMAL
- en: You can also choose to install Angular Material via the YARN command—different
    packaging systems, same outcome.
  prefs: []
  type: TYPE_NORMAL
- en: 'Angular Material has a core dependency and prerequisite to install two packages—CDK
    and Animations. So, let''s install these first, and then we will install Angular
    Material:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'After successfully running the preceding commands, we should see the output
    shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/2432176e-e0d9-4615-a0c9-7b7481accdee.png)'
  prefs: []
  type: TYPE_IMG
- en: Open the `package.json` file; we should see the packages that have been installed,
    and the corresponding version numbers listed alongside them. If you see the three
    packages that we have recently installed, it means we are ready to start creating
    some awesome UI screens using Angular Material.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once we have installed Angular Material, we will need to import all the required
    modules into our `app.module.ts` file. There are a lot of modules provided by
    Material, each for a specific purpose. For example, we will need to import `MatCardModule`
    if we plan to use Material cards. Similarly, we need to import `MatChipsModule`
    if we want to use Material chips in our application. While we can definitely import
    only the required modules into `AppModule`, in most applications using Material
    UI, we will need all the modules. Now, let''s quickly learn how to import all
    the modules in one go. We can import all the modules into a generic module, and
    then use the newly created generic module in the `app.module.ts` file. First,
    let''s create a file in our project structure and name it `material-module.ts`,
    then we can add the following code to in order import all the modules into this
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding code, we imported all the required modules into the file.
    Don''t worry about categorizing the previously listed modules just yet. We learn
    about the modules when we learn about the components that are provided by Material.
    The next step is pretty obvious—we will need to import this newly created module
    into our `app.module.ts` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Once we have imported the module, don't forget to add it to the imports of `AppModule`.
    That's it. We are all set to start learning and implementing the components that
    are provided by Angular Material.
  prefs: []
  type: TYPE_NORMAL
- en: Did you know? Google has also released a lightweight CSS- and JavaScript-based,
    Lite library, Material Design Lite, which starts by using the components in the
    same way as in any other UI library. However, there may be some components that
    do not have full support. Learn more about it at [https://getmdl.io/](https://getmdl.io/).
  prefs: []
  type: TYPE_NORMAL
- en: Let's jump right into learning about the components of Angular Material.
  prefs: []
  type: TYPE_NORMAL
- en: Categories of components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As a frontend developer, you will have used a lot of UI components, or even
    better, you might have created your own custom components in past projects. As
    previously mentioned, Angular Material provides a lot of components that can be
    readily and easily used in our applications. The UI components provided by Angular
    Material can be categorized under the following categories:'
  prefs: []
  type: TYPE_NORMAL
- en: Layouts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Material cards
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Form controls
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Navigation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Buttons and indicators
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Modals and popups
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tables
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It's a good idea to generate components for each of these categories, so that
    the placeholders will be available when we start implementing our application.
    These components will host all the components in a clearly categorized manner,
    and they will become your one-stop components that you can use to refer to any
    of the component implementations in the Material library.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let''s generate the components for our categories. Run the following
    `ng` commands one after another:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Following the successful running of the commands, we should see that the components
    are generated and added to our project structure, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/5e3af425-e7e2-41d1-a6b6-d0721ace3089.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Great. We have generated our application; we have installed Angular Material.
    We have also imported all the required modules into our `AppModule` file, and
    finally, we have generated the components for each category in the UI components
    of Material. The last thing we need to do before we start implementing the Material
    components is to add the routes for each of the previously listed categories.
    Open the `app-routing.module.ts` file, import all the newly created components,
    and add the routes to the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, we imported all the newly created components and created
    route paths for each of the them. So far, so good. Now, the big stage is all set
    and ready to be rocked. Let's start with our layouts first.
  prefs: []
  type: TYPE_NORMAL
- en: Navigation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the most common and basic necessities of any web application is a navigational
    menu or toolbar. Angular Material provides us with multiple options, with which
    we can choose the type of menu that is most suitable for our application.
  prefs: []
  type: TYPE_NORMAL
- en: Navigation components using schematics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will start with the simplest and fastest way to get the navigation added
    to our apps by using schematics. That''s right, we are just a command away from
    getting our menu up and running. Angular CLI provides schematics in order to get
    a wide range of components. To install the navigation menu in our app, run the
    following command in the Angular CLI command prompt:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding command, we used schematics to generate a new menu component
    called `myMenu`. Upon the successful running of the command, we should see the
    output shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/319b20ae-4874-400b-bb44-b6b52d48bb54.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Run the app using the `ng serve` command, and we should see the output shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/05466c30-f141-438f-9d69-6fa346e37940.png)'
  prefs: []
  type: TYPE_IMG
- en: Isn't that a really cool navigation menu? It comes with a top header toolbar,
    and a sidebar menu that is collapsible . This component is autogenerated by the
    schematics. If you are not a big fan of autogenerated components, it's okay, we
    developers can be picky about these things. Let's see how we can create our own
    menu.
  prefs: []
  type: TYPE_NORMAL
- en: Custom Material menus and navigation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Angular Material provides a `MatMenuModule` module, which provides directives,
    `<mat-menu>`, and `MatToolBarModule`. Also provided is `<mat-toolbar>`, which
    will be used to implement the menu and the header in our application. Open the
    `material-navigation.component.html` file and add the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding code, we implemented the toolbar directive using `<mat-toolbar>` as
    a wrapper, and we added a heading title using `<h1>`. We also added some links
    to the header sections. Run the app using `ng serve`, and we should see the output
    shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/88e74315-d203-4418-a9bb-9ecfd0e0e0d9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'That''s wonderful. Let''s enhance it a little more. We want to add a drop-down
    menu our header toolbar. Remember I told you that we have the `<mat-menu>` directive
    provided by the `MatMenuModule` module? Let''s add the menu directive to the header
    toolbar in the preceding code as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Notice that we have added a button using the `mat-button` attribute, and we
    are binding the `matMenuTriggerFor` attribute. This will show the drop-down menu
    defined with `<mat-menu>` directives. Now let''s run the app using the `ng serve`
    command, and we should see the output as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/2ee0cf78-0bdf-45fd-bcb4-196931da3229.png)'
  prefs: []
  type: TYPE_IMG
- en: Custom sidebar menus
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Awesome. So, now we have our custom-made menu ready to use. I know you want
    more, don''t you? You want to add a sidebar too? Let''s do it. To add the sidebar
    to our application, Angular Material provides us with a `MatSidenavModule` module,
    which provides the `<mat-sidenav>` directive that we can use in our application.
    So, let''s continue to modify the preceding code as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Don''t get scared by looking at the number of lines of code. We have just made
    a few changes, such as adding the `<mat-sidenav>` directive, which will contain
    the content of the sidebar. Finally, we are wrapping the entire content inside
    the `<mat-sidenav-container>` directive; this is important, as the sidebar will
    overlay on the content. Run the app using the `ng serve` command, and we should
    see the output shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/3468908b-0cf1-42c8-b0b3-5dd7b59ae589.png)'
  prefs: []
  type: TYPE_IMG
- en: If you see the output shown in the preceding screenshot, give yourself a pat
    on the back. Kudos! You are doing absolutely wonderfully. So, we have learned
    two ways to implement the navigation and the menu in our applications. We can
    either use schematics to generate the navigation component, or we can write a
    custom menu navigation component. Either way, **user experience** (**UX**) wins!
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have our navigational menu component, let's learn about the other
    components of the Angular Material library.
  prefs: []
  type: TYPE_NORMAL
- en: Cards and layout
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will learn about Angular Material cards and layouts. The
    basic layout component of Angular Material is a card. The card wrapper layout
    component can also include lists, accordions or expansion panels, tabs, steppers,
    and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Material cards
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A card is a content container for text, images, links, and actions that are
    used to group the data of a single subject. Cards can have a header, a body, an
    image, or links, which can be displayed to the user based on their availability
    and functionality. Angular Material provides a module named `MatCardModule`, which
    provides the `<mat-card>` directive. We will use this to group the content of
    our application.
  prefs: []
  type: TYPE_NORMAL
- en: 'A basic example of creating a card is given as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, we made use of the directives provided by `MatCardModule`.
    We will use `<mat-card>` as a wrapper directive in order to group the content.
    By using the `<mat-card-title>` directive, we are setting the title of the card.
    We are setting a subtitle by using the  `<mat-card-subtitle>` directive inside
    the `<mat-card>` directive. Inside `<mat-card-content>`, we place all the content
    that we need to display to the user. Each card may have the actions that we want
    the user to perform, such as sharing, editing, approving, and so on. We can display
    the card actions using the `<mat-card-actions>` directive.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the app using the `ng serve` command, and we should see the output shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/323a6edf-28da-483d-a148-e126f0335576.png)'
  prefs: []
  type: TYPE_IMG
- en: Notice that we have added some content inside the Angular Material card. Are
    you wondering what kind of content can be displayed inside the cards? You name
    it, and we can use it. We can add links, images, lists, accordions, steppers,
    and more. In the next section, we will learn how to add lists to our cards.
  prefs: []
  type: TYPE_NORMAL
- en: Lists
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Lists are collections of items grouped together. We can have either ordered
    list, or unordered in our applications. In this section, we will learn how to
    add different types of lists inside the cards. Take a look at the following sample
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding code, we added a list of a few cities. We used the `<mat-list>`
    and `<mat-list-item>` directives provided inside `MatListModule`, in order to
    create and display the list of cities inside the cards. The output of the preceding
    code is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/fcc17b3f-51e2-4b64-84c7-7463058f3630.png)'
  prefs: []
  type: TYPE_IMG
- en: Lists with dividers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can also easily add a `divider` class for the list items in order to visually
    separate them into rows. We need to add the `<mat-divider>` directive in order
    to achieve that functionality. Take a look at the updated code as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Navigation lists
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can extend the lists to make them clickable, and therefore make them into
    navigational links. To make the list items clickable, we will need to use the
    `<mat-nav-list>` directive. Take a look at the sample code as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding code, we created a navigation type of list and the list items
    inside our cards, using the `<mat-nav-list>` and `<mat-list-item>` directives
    that are provided in the `MatListModule` module. The output of the preceding code
    is given as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/823821fa-d49d-4c3f-ad0f-c6244e57222f.png)'
  prefs: []
  type: TYPE_IMG
- en: Accordions and expansion panels
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'One other very cool UI component is accordions, or expansion panels. It''s
    very handy to use when we need to group data together. We will need to use `<mat-accordion>`
    and `<mat-expansion-panel>`, which are provided in the `MatExpansionModule` module,
    to implement the accordion functionality in our application. Take a look at the
    following sample code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Each `<mat-expansion-panel>` will have a `<mat-expansion-panel-header>`, where
    we can provide the title and description for the expansion panel, and we place
    the content inside the `<mat-expansion-panel>` directive itself. The output of
    the preceding code is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/2048cc2a-8f6c-4e4f-9c97-fe337655a8e6.png)'
  prefs: []
  type: TYPE_IMG
- en: There will be use cases where we need to walk the user through a series of steps.
    That's where our next component comes into the picture. It's called a stepper.
    As the name suggests, this will be used to design steps either horizontally or
    vertically, and will group a series of steps that the user can navigate to.
  prefs: []
  type: TYPE_NORMAL
- en: Steppers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Similar to what we learned in the *Accordions and expansion panels* section,
    we will need to add a `wrapper`, and a `<mat-horizontal-stepper>` directive, and
    inside that, we will create `<mat-step>` directives. For each step that we want
    to add, we will need to create a new `<mat-step>` directive for our application.
    We can also create a vertical stepper. For that, the `wrapper` class we will use
    is the `<mat-vertical-stepper>` directive. Take a look at the following code;
    we are creating a horizontal stepper:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding code, we created a horizontal stepper with three steps. To
    define the stepper, we have used `<mat-horizontal-stepper>`, and for defining
    the actual steps, we have used the `<mat-step>` directive. The output of the preceding
    code is given as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/69a83ba5-3466-4b3f-94e7-47e98d94707b.png)'
  prefs: []
  type: TYPE_IMG
- en: Tabs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The last layout component that we are going to learn about is tabs. Angular
    Material provides a module called `MatTabsModule`, which provides the `<mat-tab-group>`
    and `<mat-tab>` directives so that we can easily create a tabs component in our
    application. Take a look at the following sample code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding code, we used the `<mat-tab-group>` wrapper directive, and
    inside this, we use the `<mat-tab>` directive for each specific tab. Each tab
    will have a label that will be displayed at the top of the tab. Inside `<mat-tab>`,
    we will display the content of each tab. Take a look at the output of the preceding
    code in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/27a9c3bf-23ed-49f3-963f-f591dea8cb06.png)'
  prefs: []
  type: TYPE_IMG
- en: In the next section, we will learn about Angular Material forms. Read on.
  prefs: []
  type: TYPE_NORMAL
- en: Form controls
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Forms are the main ingredient in any interactive and dynamic application. Angular
    Material natively supports forms and form controls that can easily be integrated
    into our applications. In this section, we will learn how to put together forms
    using Angular Material.
  prefs: []
  type: TYPE_NORMAL
- en: Forms, in general, have evolved a lot in terms of UX/UI. Angular Material supports
    basic form field elements that involve text fields, textareas, drop-down select
    options, radio buttons, and checkbox elements. Angular Material also provides
    advanced form elements, such as autocomplete, the datepicker, slide toggles, and
    so on. We will learn how to add all of this to our form as we work through our
    hands-on examples.
  prefs: []
  type: TYPE_NORMAL
- en: 'Angular Material provides a lot of modules that are related to forms and form
    field elements, including the following listed modules:'
  prefs: []
  type: TYPE_NORMAL
- en: '`MatFormFieldModule`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MatInputField`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MatRadioModule`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MatChipModule`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MatProgressBarModule`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MatSelectModule`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MatSlideModule`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MatSlideToggleModule`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '``MatListModule``'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MatDatePickerModule`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MatAutocompleteModule`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MatCheckboxModule`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'As previously mentioned, we can import these individually, or all in one go,
    as we did in the previous section in our `MaterialModule` file. We have our modules
    imported in `AppModule`; we are good to start implementing the form fields into
    our form. We will wrap each of the `input` and `textarea` form elements in a `<mat-form-field>`
    wrapper directive. To implement the input textbox, we will make use of the `matInput`
    attribute, along with our `HTML` input tag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'That was very simple and straightforward, right? You bet it is. Now, similarly,
    we can easily add a `textarea` field to our form:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Okay, so it wasn''t rocket science to add the `Input` and `Textarea` form elements.
    Next, we are going to implement a radio button and checkbox field element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'To implement a radio button in our form, we will use the `<mat-radio-button>` directive. In
    most cases, we will also use multiple radio buttons in order to provide different
    options. That''s where we will use a `<mat-radio-group>` wrapper directive. Similar
    to the radio button, Material provides a directive that we can easily use to integrate
    checkboxes into our application. We will make use of the `<mat-checkbox>` directive
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: The directive is provided by the `MatCheckboxModule` module, and provides a
    lot of properties that can we use to extend or process the data.
  prefs: []
  type: TYPE_NORMAL
- en: 'To implement the drop-down options in our form, we will need to use the HTML
    `<select>` and `<option>` tags. The Material library provides directives that
    we can easily use to extend the is capability in our form:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, for using the `<select>` and `<option>` tags, we'll be
    using the `<mat-select>` and `<mat-option>` directives. We are making very good
    progress here. Let's keep the momentum going. The next form field element that
    we are going to implement is a slider component.
  prefs: []
  type: TYPE_NORMAL
- en: 'Sliders can be really helpful when the user wants to specify a start value
    and an end value. It improves the user''s experience when they can just start
    scrolling through the range, and the data gets filtered based on the selected
    range. To add a slider to our form, we will need to add the `<mat-slider>` directive:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'That was very simple. The `MatSliderModule` API provides a lot of options to
    extend and use the directive in many useful ways. We can specify maximum and minimum
    ranges. We can set interval values, and much more. Talking about slider functionality
    in the UI, there is a component that we can use, called a slide toggle. We can
    implement a slide toggle using the `<mat-slide-toggle>` directive:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: We made use of the `<mat-slide-toggle>` directive that was provided by the `MatSlideToggleModule`
    module. The API provides a lot of properties, such as `dragChange`, `toggleChange`,
    setting color or validation as required, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have put together all of the preceding form field elements in our
    template file, let''s run the app to see the output. Run the app using the `ng
    serve` command, and we should see the output shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/50f8506a-1761-4ec3-965a-cde69e7e0120.png)'
  prefs: []
  type: TYPE_IMG
- en: In the next section, we will learn about the buttons and indicator components
    that are provided by Angular Material.
  prefs: []
  type: TYPE_NORMAL
- en: Buttons and indicators
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A quick bit of trivia here—ave you seen any website or application without any
    sort of buttons? If you have, please write to me.
  prefs: []
  type: TYPE_NORMAL
- en: As far as my experience goes, buttons are an integral part of web applications. In
    this section, we will learn all about buttons, button groups, and indicators.
  prefs: []
  type: TYPE_NORMAL
- en: 'Angular Material provides a lot of useful and easy attributes that we can attach
    to the button tags, and, voila. Magic happens. The simplest way to start using
    an Angular Material button is by adding a `mat-button` attribute to the `<button>`
    tag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding code, we added the `mat-button` attribute to all the buttons
    that we have added to our `material-button.component.html` template file. We also
    customized the look, feel, and the behavior of the buttons using properties such
    as `color` and `disabled`. The output of the preceding code is displayed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/cf352d5c-b16c-4dea-b9b9-7110f6ca895b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The buttons in the preceding screenshot appear more like links and not buttons,
    right? Let''s customize them to make them look more like buttons. We can easily
    do this by adding the  `mat-raised-button` attribute. Notice that in the previous
    example, we used the `mat-button` attribute, and in this example, we are adding
    `mat-raised-button`. The updated code is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of the preceding code is as follows. Notice the difference in the
    look and feel of the buttons now that the new attribute has been added:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/b38f8db1-2cea-4752-b7b4-38a0159cff3d.png)'
  prefs: []
  type: TYPE_IMG
- en: They are pretty buttons! Using the predefined attributes allows us to maintain
    the uniformity of the buttons across the application.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we are going to explore the indicators provided by Angular Material. We
    will learn about badges and progress bar components as part of the indicator components.
  prefs: []
  type: TYPE_NORMAL
- en: Badges are a way to highlight some data along with other UI elements. We may
    come across use cases where we want to use badges along with buttons. You must
    already be thinking, can we also add some UX for the buttons to design some functionality,
    too? Yes, we can!
  prefs: []
  type: TYPE_NORMAL
- en: 'Angular Material provides a module called `MatBadgeModule`, which has implementations
    for the `matBadge`, `matBadgePosition`, and `matBadgeColor` attributes, which
    can easily be used to set badges to the buttons. Take a look at the following sample
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding code, we added a button element, and we specified the attributes,
    such as `matBadge`, `matBadgePosition`, and `matBadgeColor`. The output of the
    preceding code is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/c852e365-4b85-4b14-89d8-9bdb9817a597.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This was a button with badges. There is another UI component called chips.
    We can easily use these in order to enhance the UX as well. Think of material
    chips as *tags* in any other application you have used previously. Angular Material
    provides a module called `MatChipModule`, which provides the `<mat-chip-list>`
    and `<mat-chip>` directives, which we can easily integrate into our application.
    Take a look at the following sample code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding code, we used the directives resulting from `MatChipModule`,
    and from putting together the tags. The output of the preceding code is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/469aa4f0-551d-46f9-b52a-dbeabb2312a6.png)'
  prefs: []
  type: TYPE_IMG
- en: That was neat. The next indicator that we will learn to implement is a very
    important one; the progress bar. We need to show and inform our users about actions
    that are being performed in the background, or show the progress of processing
    some user data. In such situations, we will need to clearly show this using a
    progress bar.
  prefs: []
  type: TYPE_NORMAL
- en: 'Angular Material provides modules named `MatProgressBarModule` and `MatProgressSpinnerModule`,
    using which, we can easily add a loading icon or spinner to our web application.
    Using the API properties and events, we can easily capture and process the data
    as well. Take a look at the following sample code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'That''s it? Really? Are we kidding? No, we are not. Just by using this module,
    we should see the spinning wheel displayed in our application. Take a look at
    the output of the preceding code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/68f67a97-e278-4a6a-9539-937327e36fa2.png)'
  prefs: []
  type: TYPE_IMG
- en: In the next section, we will learn all about the modals and dialog windows that
    are provided by Angular Material.
  prefs: []
  type: TYPE_NORMAL
- en: Popups and modals
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Modern web applications have introduced a lot of innovative UX features and
    functionalities. One feature that really stands out has to be modal windows. Take
    any major web application; it will have some flavor of modal window implemented
    in it. The Angular Material library, too, provides us with an easy way to implement
    modal or dialog pop-up windows.
  prefs: []
  type: TYPE_NORMAL
- en: 'Angular Material has a module named `MatDialogModule`, which provides various
    classes that we can use in our component classes. Unlike other UI components,
    there are no directives that you can directly use in the template file; instead,
    we need to achieve this functionality programmatically. Before we get into creating
    our dialog window implementation, we will need a component in which we can store
    the modal window content. Run the following command and generate a component.
    Let''s call it the `addDialog` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'When the command is executed successfully, we should see the output shown in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/70d10286-0b19-48e2-b30c-233f38def789.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, open the newly created `add-dialog.component.html` file, and add some content.
    Even *Hello World* is just fine for now.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, let''s start modifying our `MaterialModalComponent` class, and add the
    following code into it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Let's analyze the preceding code. We imported all the required modules into
    the file. We then imported `VERSION`, `MatDialogRef`, and `MatDialog` into our
    component class. We also imported `AddNewComponent`, which we want to display
    in the modal window. Since we imported `MatDialog` into the class, we need to
    inject it into our constructor method, and then create an instance of it. We will
    then create another method, named `openDialog`. In this method, by using the `MatDialog`
    instance, we are calling the method open and passing `AddNewComponent` as the
    parameter. We have implemented the functionality of the modal window, but this
    won't work until we actually call the `openDialog` method.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, let''s open our `material-modal.component.html` template file, and add
    the following line to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'There''s not much to describe here. We just added a button and attached an
    `onclick` event in order to call the `openDialog` method: simple and sweet. Let''s
    run the app using the `ng serve` command, and we should see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/82648a01-8f32-4ba5-9ff1-f0da8ca80696.png)'
  prefs: []
  type: TYPE_IMG
- en: In my `AddDialogComponent`, I have added some text and a button. You can add
    or design your own template as well. The API provides a lot of properties and
    events that we can associate with the dialog window.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will learn about the data tables feature that is provided
    by Angular Material.
  prefs: []
  type: TYPE_NORMAL
- en: Data tables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Tables are one of the key aspects of designing complex behind-the-login screen
    functionalities. I say behind the login screen, because that way, the search engine
    optimization debate won''t come into the picture. The problem with traditional
    tables is that we need to map the data, rows, and columns ourselves, along with
    implementing pagination and responsiveness. Thanks to Angular Material, we can
    now have all of that generated for us with just one line of command. That''s right,
    you read it correctly—with only one command, when we use schematics. Run the following
    command, and we should have our data table ready in no time:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'We use the `ng` command to specify to the schematics with which we want to
    generate the table from Angular Material, and that it should be created in a new
    component named `issueList`. Upon the successful running of the command, we should
    see the output shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/e0be43c4-5d3e-4aeb-b5c4-7598cc5a125c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Run the app using the `ng serve` command, and navigate to the route of the
    table. We should see the output shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/4b274d70-640f-435b-a8f4-8b8a7cfe7007.png)'
  prefs: []
  type: TYPE_IMG
- en: Voila! We now have our dynamic table ready to use. We can customize the data
    source values and the columns that we need to display and update the pagination
    just using the configurations in our `component` class. Go ahead and give it a
    try.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We started this chapter by creating the placeholder components for each of the
    main categories of the UI components. The components are categorized under various
    category layouts, material cards, form controls, navigations, buttons and indicators,
    modals and popups, and tables.
  prefs: []
  type: TYPE_NORMAL
- en: We started by creating the navigation menu component. We learned how to autogenerate
    the navigation menu component using schematics. We then also learned how to implement
    a custom menu for our apps. Next, we started learning and implementing the layout
    components that are provided by Angular Material. In the layout components, we
    learned about Material cards. We learned how to include various content inside
    the Material cards. We learned about various lists that are supported by Material.
    We learned about lists with dividers, and navigation lists. We also learned how
    to implement accordions and expansion panels to better group and arrange the data.
    We also explored how to use the stepper component, which is very useful when designing
    UX for data that requires various steps. Along the same lines, we learned about
    grouping things using tabs.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we explored Material forms and learned how to implement form field elements
    including input, textarea, radio and checkbox buttons, sliders, and slide toggles. We
    also learned about different types of buttons and indicators, including badges
    and tags that are provided by Material. We then learned about and implemented
    the modals and pop-up windows that are provided by Angular Material.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we learned about data tables, and how schematics help us to set up
    data tables quickly in our applications.
  prefs: []
  type: TYPE_NORMAL
- en: A separate book is required if we want to cover every nook and hook of the Angular
    Material components. We have tried to give you an overview of the different components
    available, and why you might consider Material in your next project when it makes
    sense to do so and suits you/your clients.  It's definitely worth a try!
  prefs: []
  type: TYPE_NORMAL
