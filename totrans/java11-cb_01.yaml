- en: Installation and a Sneak Peek into Java 11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing JDK 18.9 on Windows and setting up the PATH variable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing JDK 18.9 on Linux (Ubuntu, x64) and configuring the PATH variable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compiling and running a Java application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What's new in JDK 18.9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using application class-data sharing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Every quest for learning a programming language begins with setting up the environment
    to experiment with our learning. Keeping in sync with this philosophy, in this
    chapter, we will show you how to set up your development environment and then
    run a simple modular application to test our installation. After that, we'll give
    you an introduction to the new features and tools in JDK 18.9\. Then, we will
    compare JDK 9, 18.3, and 18.9\. We'll end the chapter with a new feature introduced
    in JDK 18.3 that allows application-class-data sharing.
  prefs: []
  type: TYPE_NORMAL
- en: Installing JDK 18.9 on Windows and setting up the PATH variable
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will look at installing JDK on Windows and how to set up
    the `PATH` variable to be able to access the Java executables (such as `javac`,
    `java`, and `jar`) from anywhere within the command shell.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Visit [http://jdk.java.net/11/](http://jdk.java.net/11/) and accept the early-adopter
    license agreement, which looks like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/7f7dc193-5003-47d7-bd7e-fb5fcab5076c.png)'
  prefs: []
  type: TYPE_IMG
- en: After accepting the license, you will get a grid of the available JDK bundles
    based on the OS and architecture (32/64-bit). Click to download the relevant JDK
    executable (`.exe`) for your Windows platform.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the JDK executable (`.exe`) and follow the onscreen instructions to install
    JDK on your system.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you have chosen all the defaults during the installation, you will find JDK
    installed in `C:/Program Files/Java` for 64 bit and `C:/Program Files (x86)/Java`
    for 32 bit.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that we have finished installing JDK, let's see how we can set the `PATH`
    variable.
  prefs: []
  type: TYPE_NORMAL
- en: 'The tools provided with JDK, namely `javac`, `java`, `jconsole`, and `jlink`,
    are available in the bin directory of your JDK installation. There are two ways
    you could run these tools from the Command Prompt:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Navigate to the directory where the tools are installed and run them, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Export the path to the directory so that the tools are available from any directory in
    the command prompt. To achieve this, we have to add the path to the JDK tools
    in the `PATH` environment variable. The command prompt will search for the relevant
    tool in all the locations declared in the `PATH` environment variable.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s see how you can add the JDK bin directory to the `PATH` variable:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Right-click on My Computer and then click on Properties. You will see your
    system information. Search for Advanced system settings and click on it to get
    a window, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/761194d9-a941-4080-864e-860966d3d79e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on Environment Variables to view the variables defined in your system.
    You will see that there are quite a few environment variables already defined,
    as shown in the following screenshot (the variables will differ across systems;
    in the following screenshot, there are a few predefined variables and a few variables
    added by me):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ef3fbf36-9efa-4da2-9d6f-2d6952ce7015.png)'
  prefs: []
  type: TYPE_IMG
- en: The variables defined under System variables are available across all the users
    of the system, and those defined under User variables for <user name> are available
    only to the specific user.
  prefs: []
  type: TYPE_NORMAL
- en: 'A new variable, with the name `JAVA_HOME`, and its value as the location of
    the JDK 9 installation. For example, it would be `C:\Program Files\Java\jdk-11` (for
    64 bit) or `C:\Program Files (x86)\Java\jdk-11` (for 32 bit):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/82b23ee9-7eb9-45d6-9893-92849060dbd1.png)'
  prefs: []
  type: TYPE_IMG
- en: Update the `PATH` environment variable with the location of the bin directory
    of your JDK installation (defined in the `JAVA_HOME` environment variable). If
    you already see the `PATH` variable defined in the list, then you need to select
    that variable and click on Edit. If the `PATH` variable is not seen, click on
    New.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Any of the actions in the previous step will give you a popup, as shown in
    the following screenshot (on Windows 10):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2e7ae014-01ed-45e7-84aa-09cb0ec41743.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The following screenshot shows the other Windows versions:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/477d1f7a-76ac-485e-911b-a73cc7fd0e37.png)'
  prefs: []
  type: TYPE_IMG
- en: You can either click on New in the first screenshot and insert the `%JAVA_HOME%\bin` value,
    or you can append the value against the Variable value field by adding `; %JAVA_HOME%\bin`.
    The semicolon (`;`) in Windows is used to separate multiple values for a given
    variable name.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After setting the values, open the command prompt and run `javac -version`.
    You should be able to see `javac 11-ea` as the output. If you don't see it, it
    means that the bin directory of your JDK installation has not been correctly added
    to the `PATH` variable.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Installing JDK 18.9 on Linux (Ubuntu, x64) and configuring the PATH variable
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will look at installing JDK on Linux (Ubuntu, x64), and how
    to configure the `PATH` variable to make the JDK tools (such as `javac`, `java`,
    and `jar`) available from any location within the Terminal.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Follow steps 1 and 2 of the *Installing JDK 18.9 on Windows and setting up the
    PATH variable* recipe to reach the downloads page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the download link (`tar.gz`) for the JDK for the Linux x64 platform from
    the downloads page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Download the JDK by using `$> wget <copied link>`, for example, `$> wget https://download.java.net/java/early_access/jdk11/26/BCL/jdk-11-ea+26_linux-x64_bin.tar.gz`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the download completes, you should have the relevant JDK available, for
    example, `jdk-11-ea+26_linux-x64_bin.tar.gz`. You can list the contents by using
    `$> tar -tf jdk-11-ea+26_linux-x64_bin.tar.gz`. You can even pipe it to `more`
    to paginate the output: `$> tar -tf jdk-11-ea+26_linux-x64_bin.tar.gz | more`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Extract the contents of the `tar.gz` file under `/usr/lib` by using `$> tar
    -xvzf jdk-11-ea+26_linux-x64_bin.tar.gz -C /usr/lib`. This will extract the contents
    into a directory, `/usr/lib/jdk-11`. You can then list the contents of JDK 11
    by using `$> ls /usr/lib/jdk-11`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Update the `JAVA_HOME` and `PATH` variables by editing the `.bash_aliases`
    file in your Linux home directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Source the `.bashrc` file to apply the new aliases:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: All the examples in this book are run against JDK installed on Linux (Ubuntu,
    x64), except for places where we have specifically mentioned that these are run
    on Windows. We have tried to provide run scripts for both platforms.
  prefs: []
  type: TYPE_NORMAL
- en: Compiling and running a Java application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will write a very simple modular `Hello world` program to
    test our JDK installation. This simple example prints `Hello world` in XML; after
    all, it's the world of web services.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You should have JDK installed and the `PATH` variable updated to point to the
    JDK installation.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s define the model object with the relevant properties and annotations
    that will be serialized into XML:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, `@XmlRootElement` is used to define the root tag, `@XmlAccessorType` is
    used to define the type of source for the tag name and tag values, and `@XmlElement`
    is used to identify the sources that become the tag name and tag values in the
    XML.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s serialize an instance of the `Message` class into XML using JAXB:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'We will now create a module named `com.packt`. To create a module, we need
    to create a file named `module-info.java`, which contains the module definition. The
    module definition contains the dependencies of the module and the packages exported
    by the module to other modules:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: We will explain modules in detail in [Chapter 3](1b2f25bd-aef0-4b6f-a9e7-144ee4f8d6e1.xhtml),
    *Modular Programming*. But this example is just to give you a taste of modular
    programming and to test your JDK installation.
  prefs: []
  type: TYPE_NORMAL
- en: 'The directory structure with the preceding files is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c74606e0-ea0b-4bb3-b8ed-a8f2cc8cf30f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s compile and run the code. From the `hellowordxml` directory, create
    a new directory in which to place your compiled class files:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Compile the source, `HelloWorldXml.java` and `module-info.java`, into the `mods/com.packt` directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the compiled code using `java --module-path mods -m com.packt/com.packt.HelloWorldXml`.
    You will see the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Don't worry if you are not able to understand the options passed with the `java`
    or `javac` commands. You will learn about them in [Chapter 3](1b2f25bd-aef0-4b6f-a9e7-144ee4f8d6e1.xhtml),
    *Modular Programming*.
  prefs: []
  type: TYPE_NORMAL
- en: What's new in Java 11?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The release of Java 9 was a milestone in the Java ecosystem. The modular framework
    developed under Project Jigsaw became part of Java SE release. Another major feature
    was the JShell tool, which is a REPL tool for Java. Many other new features introduced
    with Java 9 are listed in the release notes: [http://www.oracle.com/technetwork/java/javase/9all-relnotes-3704433.html](http://www.oracle.com/technetwork/java/javase/9all-relnotes-3704433.html).
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will enumerate and discuss some of the new features introduced
    with JDK 18.3 and 18.9 (Java 10 and 11).
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Java 10 release (JDK 18.3) started a six-month release cycle—every March
    and every September—and a new release numbering system. It also introduced many
    new features, the most significant of which (for application developers) are the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: Local variable type inference that allows the declaration of a variable using
    the reserved `var` type (see [Chapter 15](96b2e30f-7c28-4869-8064-eeedb9646b12.xhtml),
    *The New Way of Coding with Java 10 and Java 11*)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Parallel full garbage collection for the G1 garbage collector, which improves
    worst-case latencies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A new method, `Optional.orElseThrow()`, that is now the preferred alternative
    to the existing `get()` method
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'New APIs for creating unmodifiable collections: The `List.copyOf()`, `Set.copyOf()`,
    and `Map.copyOf()` methods of the `java.util` package and new methods of the `java.util.stream.Collectors` class: `toUnmodifiableList()`,
    `toUnmodifiableSet()`, and `toUnmodifiableMap()` (see [Chapter 5](eaa70333-8e9d-453d-a9b6-063152fcc1e1.xhtml),
    *Streams and Pipelines*)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A default set of root Certification Authorities, making OpenJDK builds more
    appealing to developers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A new Javadoc command-line option, `--add-stylesheet`, provides support for
    the use of multiple stylesheets in the generated documentation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Extending the existing class-data sharing feature to allow application classes
    to be placed in the shared archive that improves startup time and reduces the
    footprint (see the *Using application class-data sharing* recipe)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An experimental just-in-time compiler, Graal, can be used on the Linux/x64 platform
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A clean garbage-collector (GC) interface that makes it simpler to add a new
    GC to HotSpot without perturbing the current code base and makes it easier to
    exclude a GC from a JDK build
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enabling HotSpot to allocate the object heap on an alternative memory device,
    such as an NVDIMM memory module, specified by the user
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Thread-local handshakes, for executing a callback on threads without performing
    a global VM safepoint
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Docker awareness: JVM will know whether it is running in a Docker container
    on a Linux system and can extract container-specific configuration information
    instead of querying the operating system'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Three new JVM options, to give Docker container users greater control over the
    system memory
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See the full list of Java 10's new features in the release notes: [https://www.oracle.com/technetwork/java/javase/10-relnote-issues-4108729.html](https://www.oracle.com/technetwork/java/javase/10-relnote-issues-4108729.html).
  prefs: []
  type: TYPE_NORMAL
- en: We will discuss the new features of JDK 18.9 in more detail in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have picked a few features that we feel are the most important and useful
    for an application developer.
  prefs: []
  type: TYPE_NORMAL
- en: JEP 318 – Epsilon
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Epsilon is a so-called no-op garbage collector that basically does nothing.
    Its use cases include testing for performance, memory pressure, and the virtual
    machine interface. It also could be used for short-lived jobs or the jobs that
    do not consume much memory and do not require garbage collection.
  prefs: []
  type: TYPE_NORMAL
- en: We discussed this feature in more details in the recipe *Understand Epsilon,
    a low-overhead garbage collector* recipe in [Chapter 11](d8d77bf4-a30b-4474-95ca-0a166aef48c0.xhtml), *Memory
    Management and Debugging*.
  prefs: []
  type: TYPE_NORMAL
- en: JEP 321 – HTTP Client (Standard)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: JDK 18.9 standardizes the incubated HTTP API client introduced in JDK 9 and
    updated in JDK 10\. Based on CompleteableFuture, it supports nonblocking requests
    and responses. The new implementation is asynchronous and provides a better traceable data
    flow.
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 10](8cb83861-fd84-4819-9f1f-188258daf864.xhtml), *Networking*, explains
    this feature in more detail in several recipes.'
  prefs: []
  type: TYPE_NORMAL
- en: JEP 323 – Local-Variable Syntax for Lambda Parameters
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A local-variable syntax for lambda parameters has the same syntax as a local-variable-declaration
    using the reserved `var` type introduced in Java 11\. See the *Using local variable
    syntax for lambda parameters* recipe in [Chapter 15](96b2e30f-7c28-4869-8064-eeedb9646b12.xhtml), *The
    New Way of Coding with Java 10 and Java 11*, for more details.
  prefs: []
  type: TYPE_NORMAL
- en: JEP 333 – ZGC
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The **Z Garbage Collector** (**ZGC**) is an experimental low-latency garbage
    collector. Its pause times should not exceed 10 ms and there should be no more
    than 15% application throughput reduction compared to using the G1 collector.
    ZGC also lays a foundation for future features and optimizations. Linux/x64 will
    be the first platform to get ZGC support.
  prefs: []
  type: TYPE_NORMAL
- en: New API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are several additions to the standard Java API:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Character.toString(int codePoint)`: Returns a `String` object representing
    the character specified by the provided Unicode code point:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '`CharSequence.compare(CharSequence s1, CharSequence s2)`: Compares two `CharSequence`
    instances lexicographically. Returns the difference between the position of the
    second parameter and the position of the first parameter in the ordered list:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The `repeat(int count)` method of the `String` class: Returns a `String` value
    composed of `count` times repeated in the `String` source value:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The `isBlank()` method of the `String` class: Returns `true` if the `String` value
    is empty or contains only white spaces, otherwise `false`. In our example, we
    have contrasted it with the `isEmpty()` method, which returns `true` if, and only
    if, `length()` is zero:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The `lines()` method of the `String` class: Returns a `Stream` object that
    emits lines extracted from the source `String` value, separated by line terminators – `\n`,
    `\r`, or `\r\n`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Three methods of the `String` class that remove leading space, trailing space,
    or both from the source `String` value:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Two `Path.of()` methods that construct a `java.nio.file.Path` object:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The `asMatchPredicate()` method of the `java.util.regex.Pattern` class, which
    creates an object of the `java.util.function.Predicate` functional interface,
    which then allows us to test a `String` value for matching the compiled pattern.
    In the following example, we test whether a `String` value starts with the `a` character
    and ends with the `b` character:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are quite a few other changes  introduced in JDK 18.9:'
  prefs: []
  type: TYPE_NORMAL
- en: The Java EE and CORBA modules are removed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JavaFX is separated and removed from the Java standard libraries
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Pack200 and Unpack200 tools and the Pack200 API in `util.jar` are deprecated
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Nashorn JavaScript engine, along with the JJS tool, are deprecated with
    the intent to remove them in the future
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Java class file format is extended to support a new constant pool form,
    `CONSTANT_Dynamic`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Aarch64 intrinsics are improved, with the implementation of new intrinsics for
    the `java.lang.Math` sin, cos, and log functions, on Aarch64 processorsJEP 309—Dynamic
    Class-File Constants
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Flight Recorder provides a low-overhead data-collection framework for troubleshooting
    both Java applications and the HotSpot JVM
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Java launcher can now run a program supplied as a single file of Java source
    code, so these programs can run directly from the source
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A low-overhead heap profiling, providing a way to sample Java heap allocations,
    is accessible via JVM Tool Interface
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Transport Layer Security** (**TLS**) 1.3 increases security and improves
    performance'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Support of Unicode version 10.0 in the `java.lang.Character`, `java.lang.String`,
    `java.awt.font.NumericShaper`, `java.text.Bidi,java.text.BreakIterator`, and `java.text.Normalizer`
    classes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Read the Java 11 (JDK 18.9) release notes for more details and other changes.
  prefs: []
  type: TYPE_NORMAL
- en: Using application class-data sharing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This feature has existed in Java since Java 5\. It was extended in Java 9 as
    a commercial feature by allowing not only bootstrap classes but also application
    classes to be placed in the archive shared by JVMs. In Java 10, this feature became
    part of the open JDK. It decreases startup time and, when several JVMs are running
    on the same machine with the same application being deployed, reduces memory consumption.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The advantages of loading classes from the shared archive became possible for
    two reasons:'
  prefs: []
  type: TYPE_NORMAL
- en: The classes stored in the archive are preprocessed, which means that the JVM
    memory mapping is stored in the archive too. It reduces the overhead of class-loading
    when a JVM instance starts.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The memory region can even be shared between the JVM instances running on the
    same computer, which reduces overall memory consumption by eliminating the need
    to replicate the same information in each instance.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The new JVM functionality allows us to create a list of classes to be shared,
    then use this list to create a shared archive, and use the shared archive to fast-load
    archived classes into memory.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'By default, JVM can create an archive using the list of classes that comes
    with JDK. For example, run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'It will create the shared archive as a `classes.jsa` file. On a Linux system,
    this file is placed in the following folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'On a Windows system, it is placed in the following folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: If this folder is accessible by the system admin only, run the command as an
    admin.
  prefs: []
  type: TYPE_NORMAL
- en: Please notice that not all classes can be shared. For example, the `.class`
    files located in the directory on the classpath and classes loaded by custom class
    loaders cannot be added to the shared archive.
  prefs: []
  type: TYPE_NORMAL
- en: 'To tell the JVM to use the default shared archive, use the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: The preceding command maps the content of the archive at a fixed address. This
    memory-mapping operation may occasionally fail when the required address space
    is not available. If that happens when the `-Xshare:on` option is used, the JVM
    exits with an error. Alternatively, the `-Xshare:auto` option can be used, which
    just disables the feature and loads the classes from the classpath if the shared
    archive cannot be used for whatever reason.
  prefs: []
  type: TYPE_NORMAL
- en: 'The simplest way to create a list of loaded application classes is by using
    the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: The preceding command records all the loaded classes in the `classes.txt` file.
    If you would like to make your application load faster, stop the JVM just after
    the application has been started. If you need it to load certain classes faster
    but these classes are not loaded at the application startup automatically, make
    sure that the use cases that require these classes are executed.
  prefs: []
  type: TYPE_NORMAL
- en: Alternatively, you can manually edit the `classes.txt` file and add/remove any
    classes you need to put in the shared archive. Create this file once automatically
    and see the format. It is a simple text file that lists one class in each line.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once the list is created, use the following command to generate the shared
    archive:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Notice that the shared archive file has a name other than `classes.jsa`, so
    the default shared archive is not overwritten.
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the created archive by executing the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Again, you can use the `-Xshare:auto` option to avoid an unexpected exit of
    the JVM.
  prefs: []
  type: TYPE_NORMAL
- en: The effect of the shared archive usage depends on the number of classes in it
    and other particulars of the application. So, we recommend you experiment and
    test various configurations before committing to a certain list of classes in
    production.
  prefs: []
  type: TYPE_NORMAL
