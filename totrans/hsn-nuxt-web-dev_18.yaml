- en: Writing End-to-End Tests
  prefs: []
  type: TYPE_NORMAL
- en: Writing tests is part of web development. The more complex and the bigger your
    app gets, the more you need to test the app, otherwise, it will break at some
    point and you will spend lots of time fixing bugs and patching things up. In this
    chapter, you will write end-to-end tests with AVA and jsdom for Nuxt apps, and
    also get hands-on experience of browser automated testing with Nightwatch. You
    will learn how to install these tools and set up the testing environment – so
    let's get started.
  prefs: []
  type: TYPE_NORMAL
- en: 'The topics we will cover in this chapter are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: End-to-end testing versus unit testing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: End-to-end testing tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing tests with `jsdomn` and AVA for Nuxt apps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introducing Nightwatch
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing tests with Nightwatch for Nuxt apps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: End-to-end testing versus unit testing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are two types of tests commonly practiced for web applications: unit
    testing and end-to-end testing. You might have heard a lot about unit testing
    and have done some (or loads) in the past. Unit testing is used to test the small
    and individual parts of your app, while in contrast, end-to-end testing is to
    test the overall functions of your app. End-to-end testing involves ensuring the
    integrated components of an app function as expected. In other words, the entire
    app is tested in a real-world scenario similar to how a real user would interact
    with your app. For example, the simplified end-to-end testing of your user login
    page might involve the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Load the login page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Provide valid details to the inputs in the login form.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Submit button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Log in to the page successfully and see a greeting message.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Log out of the system.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What about unit testing? Unit testing runs fast and allows us to precisely identify
    exact problems and bugs. The main downside of unit testing is that it is time-consuming
    to write tests for every aspect of your app. And despite the fact that your app
    has passed the unit tests, the app as a whole may still break.
  prefs: []
  type: TYPE_NORMAL
- en: End-to-end testing can implicitly test many things at once and assure you that
    you have a working system. End-to-end testing runs slowly compared to unit testing
    and it can't explicitly point you to the root of the failure of your app. A small
    change in seemingly insignificant parts of your app can break your entire testing
    suite.
  prefs: []
  type: TYPE_NORMAL
- en: Combining unit and end-to-end tests for an app can be ideal and compelling because
    that gives you a more thorough test of your app, but again it can be time-consuming
    and costly. In this book, we focus on **end-to-end testing** because by default,
    Nuxt is configured seamlessly with the end-to-end testing tools that you will
    discover in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: End-to-end testing tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Nuxt makes end-to-end testing very easy and fun by using the AVA and jsdom Node.js
    modules together. But before implementing and combining them for the tests in
    a Nuxt app, let's dive into each of these Node.js modules to see how they work
    separately so you have a solid basic understanding of these tools. Let's start
    with jsdom in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: jsdom
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In a nutshell, `jsdom` is a JavaScript-based implementation of the W3C Document
    Object Model (DOM) for Node.js. But, what does it mean? What do we need it for?
    Imagine you need to manipulate DOM from a raw HTML on the server side in a Node.js
    app, such as Express and Koa apps, but there is no DOM on the server side and
    hence there isn''t much you can do. This is when jsdom comes to our rescue. It
    turns the raw HTML into a DOM fragment that works like the DOM on the client side,
    but inside Node.js. And then, you can use a client-side JavaScript library such
    as jQuery to manipulate the DOM on Node.js like a charm. The following is an example
    of basic usage of this for server-side apps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Import jsdom on a server-side app:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Pass in a string of any raw HTML to the `JSDOM` constructor and you will get
    back a DOM object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The DOM object you get from the preceding code snippet has many useful properties,
    notably the `window` object, and then you can start manipulating the HTML string
    you pass in just like on the client side. Now let''s apply this tool on the **Koa
    API**, which you learned about in the previous chapter and which can be found
    in `/chapter-12/nuxt-universal/cross-domain/jwt/axios-module/backend/` in our
    GitHub repository, to print the `Hello world` message. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install `jsdom` and jQuery via npm:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Import `jsdom` and pass an HTML string, just like we did in the preceding basic
    usage example:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Output the `text` to the endpoint:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see the "Hello world" message in JSON format (shown in the following
    snippet) at `localhost:4000/public` when you run `npm run dev` on your terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a `movie` module in our API and use Axios to fetch an HTML page from
    the IMDb website, pass the HTML to the JSDOM constructor, import jQuery, and then
    apply it to the DOM window object created by jsdom as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Note that Axios must be installed in your project directory via npm, which you
    do with `npm i axios`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Apply the jQuery object to all movies with the `list_item` class and extract
    the data (the name and showtime of each movie) as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Output the `list` to the endpoint:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see a similar list of movies in the following JSON format at `localhost:4000/public/movies`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: You can find these examples in `/chapter-13/jsdom/` in our GitHub repository.
    For more information about this npm package, visit [https://github.com/jsdom/jsdom](https://github.com/jsdom/jsdom).
  prefs: []
  type: TYPE_NORMAL
- en: You can see how useful this tool is on the server side. It gives us the ability
    to manipulate the raw HTML as if we were on the client side. Now let's move on
    to AVA and learn some basic usage of it in the next section before using it together
    with **jsdom** in our Nuxt app.
  prefs: []
  type: TYPE_NORMAL
- en: AVA
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In short, AVA (not Ava or ava, pronounced `/ˈeɪvə/`) is a JavaScript test runner
    for Node.js. There are a lot of test runners out there: Mocha, Jasmine, and tape,
    among others. AVA is another alternative to the existing list. First of all, AVA
    is simple. It is really easy to set up. Besides, it runs the test in parallel
    by default, which means your tests will run fast. It works for both frontend and
    backend Javascript apps. All in all, it''s certainly worth a try. Let''s get started
    by creating a simple and basic Node.js app in the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install AVA via npm and save it to the `devDependencies` option in the `package.json`
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Install Babel core and other Babel packages for us to write ES6 code in our
    tests for the app:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Configure the `test` script in the `package.json` file as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a `setup.js` file in the root directory with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Create the following class and function that we want to test later in these
    two separate files in our app:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a `hello.js` test in the `/test/` directory for testing `/src/hello.js`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Create another test in a separate file in the `/test/` directory again for
    testing `/src/add.js` :'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Run all the tests on your terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'You also can run the test with the `--watch` flag to enable AVA''s watch mode:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'You should get the following result if the tests pass:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: You can find the preceding examples in `/chapter-13/ava/` in our GitHub repository.
    For more information about this npm package, visit [https://github.com/avajs/ava](https://github.com/avajs/ava).
  prefs: []
  type: TYPE_NORMAL
- en: That is easy and fun, isn't it? It is always rewarding to see our code pass
    its tests. Now you have a basic understanding of this tool, so it is time to implement
    it with jsdom in the Nuxt app. Let's get to it in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Writing tests with jsdomn and AVA for Nuxt apps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You have learned about jsdom and AVA independently and have done some simple
    tests. Now, we can bring these two packages together into our Nuxt apps. Let''s
    install them in our Nuxt app, which you created in the previous chapter, in `/chapter-12/nuxt-universal/cross-domain/jwt/axios-module/frontend/`
    using the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install these two tools via npm and save them to the `devDependencies` option
    in the `package.json` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Install Babel core and other Babel packages for us to write ES6 code in our
    tests in the app:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the AVA configuration to the `package.json` file as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a `setup.js` file in the root directory, just like you did in the previous
    section, but using the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Prepare the following test template for writing tests in the `/test/` directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: The tests will run on `localhost:5000` (or any port you like). You should test
    on the production build, so turn development mode off in the `config.dev` key
    and use `universal` in the `config.mode` key if your app was developed for both
    server and client sides. Then, make sure to close the Nuxt server after the test
    process is finished.
  prefs: []
  type: TYPE_NORMAL
- en: 'Write the first test to test our home page to ensure that we have correct HTML
    rendered on this page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Write the second test for the `/about` route to ensure that we have correct
    HTML rendered on this page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Write the third test for the `/about` page to ensure the text content, class
    name, and style are as expected via DOM manipulation on the server side with `jsdom`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'You should get the following result if the tests pass with `npm run test`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'You can see that in our third test, we created a `hexify` function to convert
    a decimal code (R, G, B), computed by the `Window.getComputedStyle` method, to
    a hex code. For example, you will get `rgb(255, 255, 255)` for the colour you
    set as `color: white` in your CSS style. So, you will get `rgb(0, 0, 255)` for
    `0000ff` and the app must convert that to pass the test.'
  prefs: []
  type: TYPE_NORMAL
- en: You can find these tests in `/chapter-13/nuxt-universal/ava/` in our GitHub
    repository.
  prefs: []
  type: TYPE_NORMAL
- en: Well done. You have managed to write simple tests for Nuxt apps. We hope you
    find it easy and fun to write tests in Nuxt. The complexity of your test depends
    on what you want to test. Hence, it is very important to first understand what
    you want to test. Then, you can start writing a test that is sensible, meaningful,
    and relevant.
  prefs: []
  type: TYPE_NORMAL
- en: However, using jsdom with AVA to test the Nuxt app has some limitations because
    it does not involve a browser. Remember that jsdom is meant for turning the raw
    HTML into the DOM on the server side, hence we use the async/await statement to
    request a page asynchronously for our tests in the preceding exercise. If you
    want to use a browser to test your Nuxt app, Nightwatch can be a good solution,
    so we will take a look at it in the next section. Let's move on.
  prefs: []
  type: TYPE_NORMAL
- en: Introducing Nightwatch
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Nightwatch is an automated testing framework that provides an end-to-end testing
    solution for web-based apps. It uses the W3C WebDriver API (it was called Selenium
    WebDriver formerly) behind the scenes to open the **web browser** to perform operations
    and assertions on DOM elements. It is a great tool if you want to use a browser
    to test your Nuxt apps. But before using it in a Nuxt app, let''s use it on its
    own in the following steps to write some simple tests so that you have a basic
    idea of how it works:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install Nightwatch via npm and save it to the `devDependencies` option in the
    `package.json` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Install GeckoDriver via npm and also save it to the `devDependencies` option
    in the `package.json` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Nightwatch relies on WebDriver, so we need to install a specific WebDriver server
    depending on your **target browser** – for example, if you want to write tests
    against Firefox only, then you will need to install GeckoDriver.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this book, we focus on writing tests against a single browser. But if you
    want to target multiple browsers such as Chrome, Edge, Safari, and Firefox in
    parallel, then you will need to install the **Selenium Standalone Server** (also
    known as Selenium Grid), as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Note that we will be testing on Firefox and Chrome in this book, so this `selenium-server`
    package will not be used.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add `nightwatch` to the `test` script in the `package.json` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a `nightwatch.json` file to configure Nightwatch as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: In this simple exercise, we want to test the repository search function of github.com
    on a specific contributor called **Lau Tiam Kok**, so we set `https://github.com/lautiamkok`
    in the `launch_url` option in this configuration.
  prefs: []
  type: TYPE_NORMAL
- en: We will write tests in the `/tests/` directory, so we indicate the directory
    location in the `src_folders` option. We will test against Firefox only at `4444`
    (the server port) so we set this information in the `webdriver` and `test_settings`
    options.
  prefs: []
  type: TYPE_NORMAL
- en: You can find the options for the rest of test settings such as `output_folder`
    at [https://nightwatchjs.org/gettingstarted/configuration/](https://nightwatchjs.org/gettingstarted/configuration/).
    If you want to find out the test settings for the Selenium Server, please visit
    [https://nightwatchjs.org/gettingstarted/configuration/selenium-server-settings](https://nightwatchjs.org/gettingstarted/configuration/#selenium-server-settings)[.](https://nightwatchjs.org/gettingstarted/configuration/#selenium-server-settings)
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a `nightwatch.conf.js` file in the project root for setting the driver
    path **dynamically** to the server path:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Prepare the following Nightwatch test template in a `.js` file (for example,
    `demo.js`) in the `/tests/` directory, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a `github.js` file in the `/tests/` directory with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'In this test, we want to assert that the repository search function is working
    as expected so we need to make sure that certain elements and text contents exist
    and are visible, such as the `<body>` and `<input>` elements, and the text for
    `nuxt` and `lautiamkok (LAU TIAM KOK) · GitHub`. You should get the following
    result (assuming the test passes) when you run it with `npm run test`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: You can find the preceding test in `/chapter-13/nightwatch/` in our GitHub repository.
    For more information on Nightwatch, please visit [https://nightwatchjs.org/](https://nightwatchjs.org/).
  prefs: []
  type: TYPE_NORMAL
- en: Compared to AVA, Nightwatch is not as minimal as it requires some configuration
    that can be lengthy and complex, but if you follow the simplest `nightwatch.json`
    file, it should get you started with Nightwatch quite quickly. So, let's apply
    what you just have learned in this section to the Nuxt app in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Writing tests with Nightwatch for Nuxt apps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this exercise, we want to test the user login authentication that we created
    in the previous chapter, [Chapter 12](8e574c51-68dc-45e2-8a1d-4c04d9c38df5.xhtml),
    *Creating User Logins and API Authentication*, against the **Chrome browser**.
    We want to make sure the user can log in with their credentials and obtain their
    user data as expected. We will write the tests in the `/frontend/` directory where
    we kept the Nuxt app, so we will need to modify the `package.json` file accordingly
    and write the tests in the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install ChromeDriver via npm and save it to the `devDependencies` option in
    the `package.json` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Change the launch URL to `localhost:3000` and other settings as shown in the
    following code block in the `nightwatch.json` file for testing against Chrome
    in the Nightwatch configuration file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a `nightwatch.conf.js` file in the project root for setting the driver
    path **dynamically** to the server path:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a `login.js` file in the `/tests/` directory with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: The logic of this test is the same as the test in the previous section. We want
    to make sure that certain elements and texts are present on the login page before
    and after logging in.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before running the test, run the Nuxt and API apps at `localhost:3000` and
    `localhost:4000` on your terminal and then open another terminal with `npm run
    test` in the `/frontend/` directory. You should get the following result if the
    test passes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Note that you must run the Nuxt app and the API concurrently before running
    the tests. You can find the preceding test in `/chapter-13/nuxt-universal/nightwatch/`
    in our GitHub repository.
  prefs: []
  type: TYPE_NORMAL
- en: Well done. You have finished this short chapter on writing tests for Nuxt apps.
    The steps and exercises in this chapter have provided you with the basic foundation
    to expand your tests as your app gets larger and complicated. Let's summarize
    what you have learned in this chapter in the final section.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you have learned to use jsdom for server-side DOM manipulation
    and for writing simple tests with AVA and Nightwatch separately, and then tried
    using these tools together to run end-to-end tests on our Nuxt app. You also have
    learned the difference between end-to-end testing and unit testing and their respective
    pros and cons. Last but not least, you have learned from the exercises in this
    chapter that Nuxt is configured perfectly by default for you to write end-to-end
    tests with jsdom and AVA with much less effort.
  prefs: []
  type: TYPE_NORMAL
- en: In the coming chapter, we will cover how to keep our code clean with linters
    such as ESLint, Prettier, and StandardJS, integrating and mixing them for Vue
    and Nuxt apps. Finally, you will learn the Nuxt deployment commands and use them
    to deploy your app to a live server. So, stay tuned.
  prefs: []
  type: TYPE_NORMAL
