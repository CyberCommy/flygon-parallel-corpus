- en: Mastering Webpack 4.x
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, the following recipes will be covered:'
  prefs: []
  type: TYPE_NORMAL
- en: Webpack 4 Zero Configuration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding React to Webpack 4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding Webpack Dev Server and Sass, Stylus, or LessCSS with React
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Webpack 4 Optimization – Splitting Bundles
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing Node.js with React/Redux and Webpack 4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'From the Webpack 4 official website ([https://webpack.js.org](https://webpack.js.org)):'
  prefs: []
  type: TYPE_NORMAL
- en: '"Webpack is a *static module bundler* for modern JavaScript applications. When
    webpack processes your application, it internally builds a dependency graph which
    maps every module your project needs and generates one or more bundles. Since
    version 4, webpack does not require a configuration file to bundle your project.
    Nevertheless, it is incredibly configurable to fit your needs better."'
  prefs: []
  type: TYPE_NORMAL
- en: Webpack 4 Zero Configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Webpack 4 does not need a configuration file by default. In the older versions,
    you had to have a configuration file. If you need to customize Webpack 4 to your
    project's needs, you can still create a configuration file, which will be much
    easier to configure.
  prefs: []
  type: TYPE_NORMAL
- en: Getting Ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For this recipe, you need to create a new folder and install the following
    packages:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'In your Webpack folder, you need to create a `package.json` file, and for this,
    you can use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s now start the configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `package.json`, and add a new `build` script:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: File: package.json
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the build script in your terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'You will see this error:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/721d0b30-cbc6-4a67-9104-b072e2f2ec3e.png)*The error you get in the
    terminal will look like this***:** *ERROR in Entry module not found: Error: Can''t
    resolver''./src'' in ''/Users/czantany/projects/React16Cookbook/Chapter9/Recipe1/webpack-zero-configuration''*'
  prefs: []
  type: TYPE_NORMAL
- en: 'Because we''re now in Webpack 4, by the default, the main entry point is `src/index.js`.
    Let''s create this file to be able to build our first bundle:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/index.js'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you re-run the build script, you will see that Webpack creates a new bundle
    file called `main.js` io the `dist` folder (again, this is by default):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/48a422a9-37fd-4fca-9fa9-800767e1dff8.png)The warning let us know
    that we can choose the mode between production or development'
  prefs: []
  type: TYPE_NORMAL
- en: 'There is a Warning message in the terminal: the `mode` option has not been
    set, webpack will fallback to production for this value. Set `mode` to `development`
    or `production` to enable defaults for each environment. You can also set it to
    `none` to disable any default behavior. You can learn more at https://webpack.js.org/concepts/mode/*.*
    By default, production mode is enabled, and that''s why our bundle (`dist/main.js`)
    is minified and obfuscated, similar to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'File: dist/main.js'
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Webpack 4 has two modes: production and development. In Webpack 3, you needed
    to create a config file for each one; now you can get the same result just with
    a single line. Let''s add a script to get our application to start using the development
    mode:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'File: package.json'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you run the `npm run build-development` command, now you will see that the
    bundle is not compressed at all:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/de001572-73d6-41c9-b4f0-78e20e0a0dd2.png)File: dist/main.js'
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, by default, Webpack 4 using production minifies the code and
    performs some optimizations for this environment, in Webpack 3, this configuration
    had to be done manually in a config file.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you want to implement Babel with Webpack 4 to transpile ES6 code, you need
    to use `babel-loader`, and you may need to install the following packages:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a .babelrc file at the root of your project and then add this code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'File: .babelrc'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add our `babel-loader` using a `webpack.config.js` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'File: webpack.config.js'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a file called `src/numbers.js` and import it to our `src/index.js` to
    test our `babel-loader`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/numbers.js'
  prefs: []
  type: TYPE_NORMAL
- en: 'In our `index.js` file, do the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/index.js'
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the `npm run build` script, and if everything works fine, you should get
    this result:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/b0d0c4c8-5054-4234-b47d-bfcda3ec7467.png)'
  prefs: []
  type: TYPE_IMG
- en: 'It is also possible to use `babel-loader` directly in the terminal without
    a config file, for this, we need to use the `--module-bind` flag to bind an extension
    to a loader:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'There are more flags to bind modules (if you want to learn more about Webpack
    CLI, you can visit the official site at [https://webpack.js.org/api/cli/](https://webpack.js.org/api/cli/)):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`--module-bind-post`: Bind an extension to a post-loader'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--module-bind-pre`: Bind an extension to a pre-loader'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding React to Webpack 4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we are going to implement React with Webpack 4, but we will
    use a plugin called `html-webpack-plugin` to generate our `index.html` file to
    render our React application. In the next recipe, we will integrate Node.js to
    have more flexibility in our server-side before rendering the HTML code.
  prefs: []
  type: TYPE_NORMAL
- en: Getting Ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For this recipe, you will need to install the following packages:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here are the steps to add React to Webpack 4:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the same code of the last recipe, create a `.babelrc` file and add some
    presets:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'File: .babelrc'
  prefs: []
  type: TYPE_NORMAL
- en: 'In our `webpack.config.js` file, where we have our `babel-loader`, we need
    to add the `.jsx` extension beside the `.js` extension to be able to apply `babel-loader`
    to our React components:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'File: webpack.config.js'
  prefs: []
  type: TYPE_NORMAL
- en: 'After we added the `.jsx` extension to our `babel-loader`, we need to create
    the `src/components/App.jsx` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/components/App.jsx'
  prefs: []
  type: TYPE_NORMAL
- en: 'Creating the `Home` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/components/Home/index.jsx'
  prefs: []
  type: TYPE_NORMAL
- en: 'In our main `index.js` file, we need to include `react`, the `render` method
    from `react-dom` and our `App` component, and render the application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/index.jsx'
  prefs: []
  type: TYPE_NORMAL
- en: 'You may wonder where the `#root` div is since we have not created `index.html`
    yet. In this specific recipe, we are going to use the `html-webpack-plugin` plugin
    to process our HTML:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Open your `webpack.config.js` file. We need to add our `html-webpack-plugin`
    and create a plugins node in our config file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'File: webpack.config.js'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the `index.html` template at your `src` directory level:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/index.html'
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As you can see, we can inject variables from the plugin using the `htmlWebpackPlugin.options` object
    between the `<%=` and `%>` delimiters. Now it''s time to test our application,
    try to run the `npm run build` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/71380885-1299-430e-91f7-a4594befd844.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Big red error:** Can''t resolve `./src` directory, but what does it mean?
    Do you remember how we used the `.jsx` extension in our files? Even we added that
    extension to our `babel-loader` rule so why is not working? It''s because we had
    to add a resolve node to our configuration and specified the file extensions we
    want to support. Otherwise, we have to use only the `.js` extension:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'File: webpack.config.js'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you run `npm run build` again, now it should work:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/afbdb184-f9c5-416b-a57d-79ef55b6632d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After you run that command, you will see that you have two files in your dist
    directory: `index.html` and `main.js`. If you open your `index.html` file with
    Chrome, you should see the following result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/a72a556c-7626-41f3-9359-6d330141d5ea.png)'
  prefs: []
  type: TYPE_IMG
- en: We can build our bundle, but it is 100% static. In the next recipe, we are going
    to add Webpack Dev Server to run our React Application in an actual server and
    refresh the server every time we make a change.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'I prefer to use ES6 code in all my projects, even in the configurations, and
    I like to break my Webpack configuration into separate files for better organization
    and an easier understanding of the configurations. If you have worked with Webpack
    before, you are aware that a `webpack.config.js` file can be huge and very hard
    to maintain, so let me explain how to do that:'
  prefs: []
  type: TYPE_NORMAL
- en: Rename the `webpack.config.js` file to `webpack.config.babel.js`. When you add
    the `.babel` suffix on a `.js` file, this will be handled by Babel automatically.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s migrate our current ES5 code to ES6:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'File: webpack.config.babel.js'
  prefs: []
  type: TYPE_NORMAL
- en: Create a folder called `webpack` and inside other called `configuration`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create an individual file for each node of our Webpack configuration and export
    it. For example, let''s start by creating a file for our node module, so you should
    call `module.js`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'File: webpack/configuration/module.js'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create a file for our plugins (`plugins.js`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'File: webpack/configuration/plugins.js'
  prefs: []
  type: TYPE_NORMAL
- en: It's very useful to add our array of plugins into a constant because then we
    can add more plugins based on the environment (development or production), so
    now you can add plugins in a conditional way (using push).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The last node is resolve:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'File: webpack/configuration/resolve.js'
  prefs: []
  type: TYPE_NORMAL
- en: 'We can import our files directly, but I prefer to use an `index.js` file and
    export all of them. This way, we only import the objects we need into our `webpack.config.babel.js`
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'File: webpack/configuration/index.js'
  prefs: []
  type: TYPE_NORMAL
- en: 'Our `webpack.config.babel.js` will be very clean:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'File: webpack.config.babel.js'
  prefs: []
  type: TYPE_NORMAL
- en: Adding Webpack Dev Server and Sass, Stylus, or LessCSS with React
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the last recipe, we added React to Webpack 4, and we split our Webpack configuration,
    but in the end, we were just able to build our bundle and run the application
    as a static page. In this recipe, we are going to add the Webpack Dev Server to
    run our React Application in an actual server and restart the server every time
    we make a change. Also, we are going to implement CSS preprocessors such as Sass,
    Stylus, and LessCSS.
  prefs: []
  type: TYPE_NORMAL
- en: Getting Ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For this recipe, you will need to install the following packages:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'If you want to use Sass in your project, you have to install:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'If you prefer Stylus, you''ll need the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Or if you like LessCSS, install this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will first add the Webpack Dev Server:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you installed the `webpack-dev-server` dependency, we need to add a new
    script to start the application in our `package.json`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'File: package.json'
  prefs: []
  type: TYPE_NORMAL
- en: 'As you know, the `--mode` flag specifies the mode we want (the default is production),
    and the `--open` flag opens the browser when we start the application. Now you
    can run the application with the `npm start` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/f0f811ad-3f7d-43c8-a88b-9c7a0e370673.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Your application was opened using port 8080, which is the default port of `webpack-dev-server`.
    If you want to change it, you can use the `--port` flag to specify which port
    you want to use:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'The cool thing about `webpack-dev-server` is that if you update any component,
    you will see the change reflected instantaneously. For example, let''s modify
    our `Home` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/components/Home/index.jsx'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can see the reflected change in the same page without refreshing the page
    manually:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/8e5b2601-19ec-412d-8c22-5b4c4fa8a0f2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s add Sass, Stylus, or LessCSS to our project to have some styles in the
    application. You have to edit the file located at `webpack/configuration/module.js`
    and add `style-loader`, `css-loader`, and the loader we want for sass (`sass-loader`),
    stylus (`stylus-loader`), or less (`less-loader`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'File: webpack/configuration/module.js'
  prefs: []
  type: TYPE_NORMAL
- en: 'Using Sass, we can create the Home.scss file to add some styles:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/components/Home/Home.scss'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the Home component, you can import the Sass file like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/component/Home/index.jsx'
  prefs: []
  type: TYPE_NORMAL
- en: 'Each import line is for a different preprocessor. Use the line you want and
    remove the others. Sass generates this style:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/c996de0f-aebd-49cb-9905-7fe3b43fb541.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If you want to use Stylus, create the `Home.styl` file and change the configuration
    in the `module.js` file from the Webpack configuration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/components/Home/Home.styl![](assets/1c2d56f6-71dc-4fcd-bfe4-cb7981aa1d40.png)'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to use Less CSS, do the necessary changes on the Webpack configuration
    and then use this file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/components/Home/Home.less![](assets/039be0c1-f666-4167-a687-08c6d919cf96.png)'
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you are curious, you probably already tried to see how it''s rendering the
    stylesheet and how is the class name in our HTML. If you inspect the site, you
    will see something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/8161cb69-8dfd-4ed0-9f5c-65802f84caf3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Dynamically is being inject a `<link>` tag with a temporal URL that contains
    our compiled css, and then our class name is "Home_Home_2kP..." this is because
    our configuration: `localIdentName: ''[name]_[local]_[hash:base64]''`. With this,
    we are creating isolated styles, which means that we will never affect any other
    class if we use the same name.'
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s implement CSS preprocessors such as Sass, Stylus, and LessCSS:'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to extract your CSS code to a `style.css` file and compress the
    code for production mode, you can use the `extract-text-webpack-plugin` package:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'We need to add this to our Webpack plugins:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'File: webpack/configuration/plugins.js'
  prefs: []
  type: TYPE_NORMAL
- en: 'As you can see, I''m pushing to the plugins array only if is production. This
    means we need to create a new script into our package.json to specify when we
    are going to use production:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: Run `npm run start-production` in your terminal, and you will be able to start
    in production mode.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You will probably get some errors because we also need to add a rule for the
    Extract Text Plugin to our module node:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'We are using Extract Text Plugin just for production. For any other environment,
    we use `style-loader`, `css-loader`, and `sass-loader` directly as before. That''s
    why I love splitting the Webpack configuration into smaller files, as you can
    see, some of the files can be huge, so this helps us to be more organized. If
    you start the production mode with `npm run start-production`, you will see this
    CSS:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/74a0055c-2388-4f99-9465-7f59989ce7cb.png)'
  prefs: []
  type: TYPE_IMG
- en: Webpack 4 Optimization – Splitting Bundles
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Webpack 4 already has some optimizations presets for production mode, such as
    the code minification (before it was made with UglifyJS), but there are more things
    we can use to improve the performance of our application. In this recipe, we are
    going to learn how to split bundles (vendors and application bundles), add source
    maps, and implement the *BundleAnalyzerPlugin*.
  prefs: []
  type: TYPE_NORMAL
- en: Getting Ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For this recipe, we need to install the following packages:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s add a source map to our Webpack:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the `webpack/configuration/devtool.js` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'File: webpack/configuration/devtool.js'
  prefs: []
  type: TYPE_NORMAL
- en: 'Split the bundles (using the new "optimization" Webpack node): one for our
    `/node_modules/` which will be the biggest one, and one for our React Application.
    You need to create the `optimization.js` file and add this code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'File: webpack/configuration/optimization.js'
  prefs: []
  type: TYPE_NORMAL
- en: 'Remember that you need to add those new files into `index.js`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'File: webpack/configuration/index.js'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the nodes to `webpack.config.babel.js`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'File: webpack.config.babel.js'
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s test this:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Just run the application with `npm start`. If you look at the HTML, you will
    see that it''s automatically being injected into the `vendor.js` and `main.js` bundles:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/d92a9b8e-50e9-4084-81e7-7dc87d4f1229.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If you look at the Network tab, you can see the size of the files:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/060c76da-55b9-4c94-acc6-4affbbddf8e6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If you run the application with the production mode, you will notice that the
    bundles are smaller. Run the `npm run start-production` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/6f0cc143-f0e0-47e1-a109-6c9aefb9ef1f.png)'
  prefs: []
  type: TYPE_IMG
- en: With this optimization, we are reducing the bundle sizes by 40%. In the next
    recipe, we are going to implement Node.js with Webpack and React, and we will
    be able to apply a GZip compression, which will help us to reduce the bundle sizes
    even more.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The `BundleAnalyzer` plugin can help us to see all the packages (`node_modules`)
    and our components sizes; this will give us an image of the bundles organizing
    by size (big squares mean big size and small squares mean small size). We can
    also implement the `WebpackNotifierPlugin` plugin, which is just a notification
    we can display every time our Webpack does a build:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'File: webpack/configuration/plugins.js'
  prefs: []
  type: TYPE_NORMAL
- en: '`BundleAnalyzerPlugin` will be executed only on development mode; if you start
    the application (`npm start`), you will see that a new page is open and displays
    all the installed packages, specifying the size of each one:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/cd259291-c437-4244-bde3-283d54187fc3.png)The purpose of this image
    is to show the sizes of the installed packages'
  prefs: []
  type: TYPE_NORMAL
- en: 'The biggest one, of course, will be the vendor.js file, but we can also see
    our main.js components:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/8734e5a2-2dbb-4bf8-b7c5-7a0aa1854ba8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You can see the fancy notification when you start your application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/4475abf7-6a7f-4fb8-9c4a-3d7170092db2.png)'
  prefs: []
  type: TYPE_IMG
- en: Implementing Node.js with React/Redux and Webpack 4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, in all the recipes, we have used React directly with `create-react-app`
    or Webpack 4\. In this recipe, we are going to implement React and Redux using
    Node.js and Webpack 4; this will help us to have more robust applications.
  prefs: []
  type: TYPE_NORMAL
- en: Getting Ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Using the same code of the last recipe, you will need to install all these
    packages:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s get started with the implementation:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Include the `react-hot-loader` plugin in our `.babelrc` file just for the development
    environment:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'File: .babelrc'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create an Express Server; you need to create a file at `src/server/index.js`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/server/index.js'
  prefs: []
  type: TYPE_NORMAL
- en: 'We included a device detection with Node.js to use in our `initialState` for
    Redux. we can create this util file for this purpose:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/shared/utils/device.js'
  prefs: []
  type: TYPE_NORMAL
- en: 'You will need the device reducer as well:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/shared/reducers/deviceReducer.js'
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to create `index.js` in our reducers folders, in the place where we
    are going to combine our reducers:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/shared/reducers/index.js'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create our initialState file. This is where we are going to get the
    device information from the `req` object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'Redux needs a store to save all our reducers and our `initialState`; this will
    be our `configureStore`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/shared/redux/configureStore.js'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the last recipes, we were using the `html-webpack-plugin` package to render
    the initial HTML template; now we have to do that in Node. For this, you need
    to create the `src/server/render/html.js` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/server/render/html.js'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a function to render the HTML; I called this the `clientRender.js` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/server/render/clientRender.js'
  prefs: []
  type: TYPE_NORMAL
- en: 'After we''ve created our server files, we need to add our main entry file for
    the client. In this file, we are going to wrap our main `App` component inside
    the React Hot Loader App Container:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/index.jsx'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create a directory for our client files. The first file we need to create
    is `App.jsx`, where we are going to include our component''s routes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/client/App.jsx'
  prefs: []
  type: TYPE_NORMAL
- en: 'To test our routes and our Redux state (`isMobile`), let''s create the `About`
    component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/client/components/About/index.jsx'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add basic styles for this component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/client/components/About/About.scss'
  prefs: []
  type: TYPE_NORMAL
- en: 'When we want to use the React Hot Loader to refresh the page every time we
    make a change, we need to add an entry for our `webpack-hot-middleware` and one
    for `react-hot-loader` to connect to the **HMR** (**Hot Module Replacement**):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: 'File: webpack/configuration/entry.js'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the `output.js` file to specify where our Webpack should save the files:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: 'You need to import these files into our `index.js`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: 'File: webpack/configuration/index.js'
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to create a `mode.js` file as well, and handle the environment mode
    from our JS file because we are going to change our start script and we won''t
    specify the mode directly anymore:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: 'File: webpack/configuration/mode.js'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add `HotModuleReplacementPlugin` into our plugins file for development and `CompressionPlugin`
    for production:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: 'File: webpack/configuration/plugins.js'
  prefs: []
  type: TYPE_NORMAL
- en: 'In `package.json`, the new start script should look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: 'File: package.jsonIf you use Windows, you have to use the `SET` keyword to
    specify `NODE_ENV`. For example, `*SET NODE_ENV=development*` or *`SET NODE_ENV=production`*
    otherwise won''t work in your machine.'
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We''ll now see how it works:'
  prefs: []
  type: TYPE_NORMAL
- en: Start the application with `npm start`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You should see this page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/588f5d7a-e8dd-459a-9224-cf6556e1502f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If you open the console of your browser, you will see that the HMR is now connected:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/5545f6e0-fe39-4935-8ce2-dbb9369ff4ec.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You can do a change in the `Home` component to see how the content is being
    updated without refresh:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/4af7e2e3-9e84-44ae-bc88-b51ac68dcc40.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As you can see in the console, the HMR specify each event is occurring and
    give you the updated modules. If you open the Network tab, you will see the massive
    size of our bundles (*vendor.js = 1MB* and *main.js = 46.3KB*):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/57beef3a-38f8-4329-b02a-5a2677ad0243.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If you hit the `http://localhost:3000/about` URL, you will see the `About`
    component with the Redux state connected (`isMobile`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/19798efe-1fbf-4bab-ba38-8aaf6876a5b0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If you want to run your application in production mode, execute `npm run start-production`.
    If everything works fine, you should see the same site but with smaller bundles
    (vendor.js: 262KB - 74% less and main.js: 5.2KB - 88% less):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/ca8686e9-1e7d-4337-8ef7-61be67e654ff.png)'
  prefs: []
  type: TYPE_IMG
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'I don''t like to use relative paths in the imports, sometimes can be very difficult
    to calculate the depth of certain files. The `babel-plugin-module-resolver` package
    can help us to add a custom alias for our directories. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, using an alias is more consistent, and it does not matter in
    which path you are importing the util always will be the same path using the alias,
    it's cool, isn't it?
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to install the package:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: 'Then in our `.babelrc`, we can add our aliases for each path we want:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: 'The `*@*` character is not necessary, but I like to use it to quickly identify
    whether I''m using an alias. Now you can modify some of the files we made in this
    recipe and replace the paths with the new aliases:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/79829c9f-0c8e-4344-8fd8-f20ac676e3e8.png)File: src/client/App.jsx![](assets/17b7fd10-71b9-4176-ae6b-4ac68ca2eace.png)File: src/index.jsx![](assets/9291db28-809f-457e-a928-25c95e4660a4.png)File: src/server/index.js'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/228eba43-aa88-455d-9bc1-c0f0a9658c84.png)'
  prefs: []
  type: TYPE_IMG
- en: File: src/shared/redux/configureStore.js
  prefs: []
  type: TYPE_NORMAL
