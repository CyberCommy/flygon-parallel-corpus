- en: Chapter 6. Redux Architecture
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In previous chapters, we have learnt about how to create custom components,
    DOM interaction with React, and how to use JSX with React, which would have given
    you enough clarity on React and it's variations with different platforms with
    practical examples such as the Add Ticket form application. Now we are going to
    go to an advanced level which will give you further understanding about state
    management in a JavaScript application.
  prefs: []
  type: TYPE_NORMAL
- en: What is Redux?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As we know, in **Single Page Applications** (**SPAs**) when we have to contract
    with state and time, it would be difficult to handgrip state over time. Here,
    Redux helps a lot. How? Because in a JavaScript application, Redux is handling
    two states: one is the data state and the other is the UI state and it''s a standard
    option for SPAs. Moreover, bear in mind that Redux can be used with AngularJS,
    jQuery, or with React JS libraries or frameworks.'
  prefs: []
  type: TYPE_NORMAL
- en: What does Redux mean? In short, Redux is a helping hand to play with states
    while developing JavaScript applications.
  prefs: []
  type: TYPE_NORMAL
- en: We have seen in our previous examples that data flows in one direction only
    from the parent level to the child level and it is known as *unidirectional data
    flow*. React has the same flow direction from the data to components so in this
    case it would be very difficult for two components in React to properly communicate.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can see it clearly in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![What is Redux?](graphics/B05743_06_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As we can see in the preceding diagram, React is not following the direct communication
    of two components, although it has a feature to provide provision for that tactic.
    However, this is deemed as bad practice because it can result in inaccuracies
    and it's a very old way of writing, which is hard to comprehend.
  prefs: []
  type: TYPE_NORMAL
- en: But that doesn't mean it's impossible to achieve it in React, as it gives an
    alternative way to do so but, according to your logic and within React standards,
    you have to manipulate it.
  prefs: []
  type: TYPE_NORMAL
- en: To achieve the same with two components that do not have the relationship of
    parent and child, you have to define a global event system where they communicate;
    Flux could be the best example of this.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here Redux comes into the picture, as it provides a way to store your all states
    into a place from where components can access it and that place is called the
    **STORE**. In simple words, whenever any component finds any changes, it has to
    dispatch to the store first and if other components require access, it has to
    **Subscribe** from the store. It cannot directly authorize communication with
    that component, as shown in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![What is Redux?](graphics/B05743_06_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding diagram, we can see that the **STORE** is pretending to be
    an *intermediary* for all kinds of state modifications within the application
    and Redux is controlling direct communication between two components through the
    **STORE**, with a single point of communication.
  prefs: []
  type: TYPE_NORMAL
- en: 'You might think that communication between components is possible with other
    strategies but it''s not recommended as either it will cause faulty code or it
    will be hard to follow:'
  prefs: []
  type: TYPE_NORMAL
- en: '![What is Redux?](graphics/B05743_06_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: So now it's very clear how Redux makes life easier by dispatching all state
    changes to the **STORE** rather than communicating within components. Now components
    have only to think about dispatching state changes; all other responsibilities
    will belong to the **STORE**.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Flux pattern does the same thing. You might have heard that Redux is inspired
    by Flux so, let''s see how they are similar:'
  prefs: []
  type: TYPE_NORMAL
- en: Comparing Redux and Flux, Redux is a tool whereas Flux is just a pattern that
    you can't use to plug and play, and you can't download it. I'm not denying that
    Redux has some similarities to the Flux pattern but it's not 100% the same as
    Flux.
  prefs: []
  type: TYPE_NORMAL
- en: Let's look at a few differences.
  prefs: []
  type: TYPE_NORMAL
- en: Redux follows three guiding principles, as shown in the following descriptions,
    which will also cover the differences between Redux and Flux.
  prefs: []
  type: TYPE_NORMAL
- en: Single store approach
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have seen in the earlier diagrams that the store is pretending to be an *intermediary* for
    all kinds of state modifications within the application and Redux controls direct
    communication between two components through the store, acting as a single point
    of communication.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here the difference between Redux and Flux is: Flux has multiple store approaches
    and Redux has a single store approach.'
  prefs: []
  type: TYPE_NORMAL
- en: Read-only state
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the React application, components cannot change state directly but they have
    to dispatch changes to the store through *actions*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, the `store` is an object and it is has four methods as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`store.dispatch` (action)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`store.subscribe` (listener)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`store.getState()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`replaceReducer` (next Reducer)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You might be aware about `get` and `set` properties in JavaScript: a `set`
    property sets the object and a `get` property gets the object. But with `store`
    methods, there is only the `get` method so there is only one way to set the state
    which dispatches a change through *actions*.'
  prefs: []
  type: TYPE_NORMAL
- en: 'An example of JavaScript Redux is shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Here, an action means `dispatch()`, where the `store` method will send an object
    to update the state. In the preceding code snippet, the `action` takes `type`
    data to update the state. You can have different designs to set your action according
    to your component's needs.
  prefs: []
  type: TYPE_NORMAL
- en: Reducer functions to change the state
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Reducer functions will handle `dispatch` actions to change the state as the
    Redux tool doesn't allow direct communication between two components, so it will
    also not change the state but the `dispatch` action will be described for the
    state change.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following code snippet, you will see how the `Reducer` changes the `state`
    by allowing for the current state as an argument and returning a new state:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Reducers here can be considered as pure functions. The following are a few
    characteristics to write `Reducer` functions:'
  prefs: []
  type: TYPE_NORMAL
- en: No outside database or network calls
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returns values based on their parameters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Arguments are *immutable*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The same argument returns the same value
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reducer functions are called pure functions because they do nothing except purely
    return a value based on their set parameters; they have no other consequences.
  prefs: []
  type: TYPE_NORMAL
- en: Architecture of Redux
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we have discussed, Redux is inspired by the Flux pattern, so it also follows
    its architecture. That means that state changes will be sent to the store and
    the store will handle actions to communicate between components.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s see how the data and logic work through the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Architecture of Redux](graphics/image_06_004.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Observe the following points to get an understanding of the Redux architecture:'
  prefs: []
  type: TYPE_NORMAL
- en: You can see in the preceding diagram, at the bottom right-side, the component's
    trigger actions.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: State mutation will happen the same way as it works in a Flux request and it
    might have an **API** request as another effect.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Here **Middlewares** play an important role, such as handling actions for listening
    promise statuses as well as taking new actions.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **Reducers** take care of actions as a middleware.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **Reducer** as a middleware gets all the action requests and it is also
    associated with the data. It has rights to globally change the state within the
    application store by defining a new state.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When we say state changes, this relates to reselecting its selector and transforming
    data and passing through components.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As components get the change request, accordingly, it renders the HTML to the
    DOM elements.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Before we move ahead, we have to understand the flow to have a smooth structure.
  prefs: []
  type: TYPE_NORMAL
- en: Redux's architectural benefits
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Compared to other frameworks, Redux has more benefits:'
  prefs: []
  type: TYPE_NORMAL
- en: It might not have any other side effects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As we know, binding is not needed because components cannot interact directly
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: States are managed globally so there is less possibility of mismanagement
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sometimes, for middleware, it would be difficult to manage other side effects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: From the aforementioned points, it's very clear that Redux's architecture is
    very powerful and it has reusability as well. Let's look at a practical example
    to see how Redux works with React.
  prefs: []
  type: TYPE_NORMAL
- en: We will create our Add Ticket form application in Redux.
  prefs: []
  type: TYPE_NORMAL
- en: Redux setup
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's start with a `UserList` example in Redux. First, create a directory with
    the application. We are using the Node.js server and npm package for this example
    because the Redux module is not available independently.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Node.js
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First, we have to download and install Node.js, if we have not already installed
    it in the system. We can download Node.js from [http://nodejs.org](http://nodejs.org)
    . It includes the npm package manager.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the setup is done, we can check whether Node.js was set up properly or
    not. Open the command prompt window and run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: You should be able to see the version information, which ensures that the installation
    was successful.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the application
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'First we need to create a `package.json` file for our project which includes
    the project information and dependencies. Now, open the command prompt/console
    and navigate to the directory you have created. Run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'This command will initialize our app and ask several questions to create a
    JSON file named `package.json`. The utility will ask questions about the project
    name, description, entry point, version, author name, dependencies, license information,
    and so on. Once the command is executed, it will generate a `package.json` file
    in the root directory of your project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'OK, let me explain to you some of the major tools before we start:'
  prefs: []
  type: TYPE_NORMAL
- en: '`webpack-dev-server`: This is a server for live reload of our application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`babel-loader`: This is the compiler for our JavaScript.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`redux-devtools`: This is a powerful tool for Redux development. Using this
    tool in development will help us to monitor the updates in the DOM UI.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`classnames`: This is amodule that will help us to apply the classes on condition.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`eslint`: This is a tool similar to JSHint and JSLint for parsing the JavaScript.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Development tool setup
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, we need to create `webpack.config.js` and add the following code to
    enable the `redux-devtools`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, create a directory with the name of `src`. Inside this we need to create
    some folders, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Development tool setup](graphics/image_06_005.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Redux application setup
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In every Redux application, we have actions, reducers, stores, and components.
    Let's start with creating some actions for our application.
  prefs: []
  type: TYPE_NORMAL
- en: Actions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Actions are the part of the information that sends data from our application
    to our store.
  prefs: []
  type: TYPE_NORMAL
- en: 'First we need to create the `UsersActions.js` file inside the actions folder
    and put the following code inside it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding code, we created two actions: `addUser` and `deleteUser`.
    Now we need to create `ActionTypes.js` inside the `constants` folder that defines
    the `type`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Reducers
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Reducers handle the actions which describe the fact that something happened,
    but managing the state of the application is the responsibility of the reducers.
    They store the previous `state` and `action` and `return` the next `state`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Store
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We have defined the actions and reducers that represent the facts about *what
    happened* and when we need to update the state according to those actions.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `store` is the object that combines the actions and reducers. The store
    has the following responsibilities:'
  prefs: []
  type: TYPE_NORMAL
- en: Holds the application state
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Allows access and updates the state through `getState()` and `dispatch` (action)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Registers and unregisters listeners through `subscribe` (listener)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here is the code of `UserListApp.js` inside the container folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, we are initializing the state of the component with the
    static JSON data of `UserList` and using the `getstate`, `dispatch` (action),
    and we will update the store information.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We'll only have a single store in a Redux application. When we need to split
    our data handling logic, we'll use the reducer composition instead of multiple
    stores.
  prefs: []
  type: TYPE_NORMAL
- en: Components
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'These are the normal React JSX components, so we don''t need to go into detail
    about them. We have added some functional stateless components that we''ll use
    unless we need to use local state or the life cycle methods:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this (`AddUserInput.js`) file, we are creating a JSX input component from
    where we take the user input:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'In `UserList.js` we are creating a list component where we iterate the value
    of the `Input` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'After iterating the value in the `UserList` component, we are displaying that
    list in the Bootstrap `media` layout:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we need to wrap our components in `UserListApp.js` inside the container
    folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s wrap this `UserListApp` component to the Redux store in `App.js`
    inside the container folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Now go to the root directory, open the CMD, and run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To install the packages that we need for this app, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Once it''s complete, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Observe the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Components](graphics/image_06_006.jpg)'
  prefs: []
  type: TYPE_IMG
- en: That looks amazing. In the right-side panel is the Redux DevTool which gives
    the update of the UI. We can easily see the updates for deleting or adding the
    user in this list.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the deletion of a user from `UserList`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Components](graphics/image_06_007.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The following screenshot shows the addition of a user:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Components](graphics/image_06_008.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Please see the source code for [Chapter 6](ch06.html "Chapter 6. Redux Architecture"),
    *Redux Architecture* to get a proper understanding about the flow of the application.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We can now see the importance of the Redux architecture and its role in the
    React application. We have also learnt about the state management in this chapter,
    looking at how the store globally handles state change requests and Redux helps
    to avoid direct interaction between components.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter is all about Redux architecture and its details. To clarify, we
    have seen diagrams that provide an understanding of the flow of data and logic
    in the Redux architecture. The Redux architecture is inspired by Flux but it has
    its own identity and benefits. We hope that the diagrams and practical examples
    have helped to give you an understanding of the Redux architecture.
  prefs: []
  type: TYPE_NORMAL
- en: Now, we are going to move on to the next chapter, dealing with how we can do
    routing with React.
  prefs: []
  type: TYPE_NORMAL
