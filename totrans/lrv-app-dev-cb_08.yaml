- en: Chapter 8. Using Ajax and jQuery
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Getting data from another page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up a controller to return JSON data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating an Ajax search function
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating and validating a user using Ajax
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Filtering data based on checkbox selection
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Making an Ajax newsletter sign-up box
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sending an e-mail using Laravel and jQuery
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a sortable table using jQuery and Laravel
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Many modern web applications rely on JavaScript to add dynamic user interactions.
    Using the jQuery library and Laravel's built-in functions, we can create these
    interactions with ease in our own application.
  prefs: []
  type: TYPE_NORMAL
- en: We'll begin by receiving data asynchronously from other pages and proceed to
    send data that can be saved in a database.
  prefs: []
  type: TYPE_NORMAL
- en: Getting data from another page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In our application, there may be times when we need to access some HTML from
    another page. Using Laravel and jQuery, we can accomplish this easily.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we just need a standard Laravel installation.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To complete this recipe, follow the given steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `routes.php` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `views` directory, create a file named `tab1.php`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `views` directory, create a file named `tab2.php`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `views` directory, create a file named `getting-data.php`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: View the page at `http://{yourserver}/getting-data` and click on the links to
    load the content.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We start by setting up our routes. Our first route is going to display links,
    and when we click on them, content will be loaded into the page. Our next two
    routes will hold the actual content to display on the main page. To make sure
    that these pages can't be accessed directly, we use the `Request::ajax()` method
    to make sure that only Ajax requests are accepted. If someone tries to access
    the page directly, it will send them to an error page.
  prefs: []
  type: TYPE_NORMAL
- en: Our two view files will hold a couple of excerpts from books. Since this will
    be loaded into another page, we don't need the full HTML. Our main page, however,
    is a full HTML page. We begin by loading jQuery using the **Content Delivery Network**
    (**CDN**) from Google. Then, we have a list of the books we want to use. To make
    things a little easier, the ID of the link will correspond to the routes we created.
  prefs: []
  type: TYPE_NORMAL
- en: When someone clicks on the link, the script will use the ID and get the content
    from the route with the same name. The results will be loaded into our `container`
    div.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a controller to return JSON data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When we access data using JavaScript, one of the easiest ways is to use JSON-formatted
    data. In Laravel, we can return JSON from one of our controllers to be used by
    our JavaScript on another page.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we need a standard Laravel installation.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For this recipe, follow the given steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `controllers` directory, create a file named `BooksController.php`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: In `routes.php`, register the books controller
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `views` directory, create a folder named `books`, and in that folder,
    create a file named `index.php`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We begin by creating a RESTful controller for our book list which extends our
    `BaseController` class. Our controller has two methods: one to display the list
    and one to return the formatted list. Our `getBooks()` method uses an array as
    our data source, and we use Laravel''s `Response::json()` method to automatically
    do the correct formatting for us.'
  prefs: []
  type: TYPE_NORMAL
- en: On our main page, we do a `get` request to the page in JavaScript, receive the
    JSON, and loop through the results. As we loop, we add the books to a JavaScript
    variable and then add the list to our `book-list` div.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Our list could come from any data source. We could add in database functionality
    or even call an API. When we use the JSON response from Laravel, that value is
    correctly formatted with the correct headers.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an Ajax search function
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If we want to search for information in our application, it might be useful
    to perform the search asynchronously. That way, the user won't have to be taken
    to a new page and have all the assets refreshed. Using Laravel and JavaScript,
    we can perform this search in a very simple manner.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we'll need a working installation of Laravel.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To complete this recipe, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `controllers` directory, create a file named `SearchController.php`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `routes.php` file, register the controller:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `views` directory, create a folder named `search`, and in that folder,
    create a file named `index.php`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We first create a RESTful controller that holds two methods: one for our main
    page and one to process the search. On our main page, we have a single `text`
    field and a `submit` button. When the form is submitted, our JavaScript will post
    the form to our search page. If there are results, it will loop through them and
    display them in our `results` div.'
  prefs: []
  type: TYPE_NORMAL
- en: For our `postSearch()` method, we use an array as our data source. When a search
    is posted, we then loop through the array to see if the string matches any of
    our titles. If so, the value is added to an array and that array is returned as
    a JSON.
  prefs: []
  type: TYPE_NORMAL
- en: Creating and validating a user using Ajax
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When a user comes to our application, we may want them to register or login
    without the need to navigate to another page. Using Ajax within Laravel, we can
    submit the user's form and run the validation asynchronously.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For this recipe, we''ll need a working installation of Laravel as well as a
    properly configured MySQL database. We also need to add a user table to our database,
    which we can do with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To complete this recipe, follow the given steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `controllers` directory, create a `UsersController.php` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Register the controller in `routes.php:`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `views` directory, create a folder named `users`, and in that folder,
    create a file named `index.php`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To begin this recipe, we create our main page which will hold our user registration
    form. When the form is submitted, it will post to our `postRegister()` method
    and return any results to the `results` div.
  prefs: []
  type: TYPE_NORMAL
- en: The `postRegister()` method begins by setting up the rules for our validation.
    In this case, we want to make sure both fields have a value, the e-mail must be
    valid, and the password must be at least 6 characters. If the validation fails,
    we send the error back as a JSON-encoded string and our main page will display
    the error. If everything is valid, we then save everything to the database and
    return a success message.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If we don't want any other pages to post data to our method, we could add a
    `Request::ajax()` conditional. This would mean that only Ajax calls would be processed
    by our method.
  prefs: []
  type: TYPE_NORMAL
- en: Filtering data based on checkbox selection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When displaying data to a user, it could be convenient to allow them to filter
    the data. So we don't have to make the user click on submit and reload the page
    every time, we can do all the filtering using Ajax. For this recipe, we'll make
    a book list and allow the user to filter it based on the genre.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For this recipe, we need a standard Laravel installation that''s configured
    to work with a database. We''ll need to set up a table to use by running this
    SQL statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To complete this recipe, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `controllers` directory, create a new file named `BooksController.php`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Register the `books` controller in the `routes.php` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `views` directory, create a new folder named `books`, and in that folder,
    create a file named `index.php`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `models` directory, create a file named `Book.php`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: In the browser, go to `http://{my-server}/books` and click on a few checkboxes
    to see the result.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: With our database set up, we begin with our main list page. This page has a
    number of checkboxes, with the value of each corresponding to a genre in our books
    table. When a box is checked, the form is submitted asynchronously to our `postBooks()`
    method. We use those results, loop through them, and display them in our `books`
    div.
  prefs: []
  type: TYPE_NORMAL
- en: Our `postBooks()` method begins by making sure a genre was actually submitted.
    If not, that means everything is unchecked and it will return all the books. If
    something is checked, we get everything from the database that matches the checked
    values. Since Laravel provides us with the raw returned data in JSON format, we
    then return the results, and in our index, the results are displayed correctly.
  prefs: []
  type: TYPE_NORMAL
- en: Making an Ajax newsletter sign-up box
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One way to have users added to our e-mail list is to have them sign-up through
    our website. In this recipe, we'll be using MailChimp's API and a modal window
    to show a sign-up form and have it sent through an Ajax call.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we'll need a standard Laravel installation. We'll also be using
    the MailChimp API for the newsletter; a free account and API key can be created
    at [www.mailchimp.com](http://www.mailchimp.com).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To complete this recipe, follow the given steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `composer.json` file and update the `require` section to resemble
    the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'In the command-line window, where the artisan file is located, update Composer
    with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `app/config` directory, create a file named `mailchimp.php`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `views` directory, create a file named `signup.php`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `routes.php` file, add the routes we need with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We start by installing the MailChimp package into our application using a composer
    version of the MailChimp SDK. We then need to create a configuration file to hold
    our API key and the list ID we want to use.
  prefs: []
  type: TYPE_NORMAL
- en: Our sign-up page will utilize jQuery and Bootstrap for our processing and display.
    Since we only want to display the form when the user wants to sign-up, we have
    a single button that, when clicked on, will display a modal window with our form.
    The form will take out first name, last name, and e-mail address.
  prefs: []
  type: TYPE_NORMAL
- en: When the sign-up form is submitted, we serialize the data and send it to our
    `signup-submit` route. Once we get a response, we hide the modal and display the
    results on our page.
  prefs: []
  type: TYPE_NORMAL
- en: In our `signup-submit` route, we attempt to subscribe the user with the information
    entered. If we get a response, we check if the response includes an error. If
    there is an error, we display that to the user, and if not, we show our success
    message.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Our `signup-submit` route isn't doing any validation on the form input. To include
    that, look at the an example in the *Creating and validating a user using Ajax*
    recipe.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Creating and validating a user using Ajax* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sending an e-mail using Laravel and jQuery
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When creating a contact form, we may choose to let the user send the form asynchronously.
    Using Laravel and jQuery, we can have the form submitted without needing the user
    to go to a different page.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we need a standard Laravel installation and our mail client
    properly configured. We can update our mail configuration in the `app/config/mail.php`
    file.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To complete this recipe, follow the given steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `views` directory, create a file named `emailform.php` as shown in the
    following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `views` folder, create our e-mail template view file named `ajaxemail.php`
    with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `routes.php` file, create the routes as given in the following code
    snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we need to have our e-mail client properly configured. We have
    many options to choose from, including PHP's `mail()` method, sendmail, and SMTP.
    We could even use a third-party e-mail service such as mailgun or postmark.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our e-mail form is a regular HTML form with four fields: the `to` and `from`
    e-mail addresses, the `subject` line, and the actual e-mail message. When the
    form is submitted, the fields are serialized and posted to our `email-send` route.'
  prefs: []
  type: TYPE_NORMAL
- en: The `email-send` route first validates all of the posted input. If there are
    any validation errors, they are returned back as a string. If everything checks
    out, we send our values to the `Mail::send` method and then send it.
  prefs: []
  type: TYPE_NORMAL
- en: Back in our `e-mail-form` route JavaScript, we check if `email-send` returned
    `FALSE`, and if so, we display an error. If not, we need to check if the response
    was a number or not. If it wasn't a number, that means there were validation errors
    and we display them. If it is a number, that means the e-mail was sent successfully,
    so we display a success message.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a sortable table using jQuery and Laravel
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When handling large amounts of data, it can be helpful to display it in a table
    view. To manipulate the data, such as for sorting or searching, we can use the
    data tables JavaScript library. This way, we don't need to keep making database
    calls every time we want to change the view.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we need a standard installation of Laravel and a properly configured
    MySQL database.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow the given steps to complete this recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In our database, create a new table and add some example data using the following
    commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `app/models` directory, create a file named `Bookprices.php` with the
    following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `routes.php` file, add our route as given in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `views` directory, create a file named `table.php` with the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To start this recipe, we create a table to hold our book price data. We then
    insert the data into the table. Next, we create an `Eloquent` model so we can
    interact with the data. We then pass that data into our view.
  prefs: []
  type: TYPE_NORMAL
- en: In our view, we load in jQuery and the `dataTables` plugin. Then, we create
    a table to hold our data and then loop through the data, putting each record into
    a new row. When we add the `dataTable` plugin to our table, it will automatically
    add sorting to our table for each of our columns.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`Datatables` is a powerful jQuery plugin to manipulate tabular data. For much
    more information, view the documentation at [http://www.datatables.net](http://www.datatables.net).'
  prefs: []
  type: TYPE_NORMAL
