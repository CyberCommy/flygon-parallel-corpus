- en: Chapter 6. Mobile Rich Media
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Playing audio from a mobile browser
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Streaming video on the go
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Appcache for offline viewing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Web Storage for feed or e-mail applications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using web workers for heavy computation work
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating Flash-like navigation with session and history API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With HTML5, you can build rich media applications to display for mobile devices.
    There are unlimited ways to use HTML5; the only limit is one's imagination.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the previous chapters, we have covered semantic naming, CSS3, and Device
    Access categories of HTML5\. In this chapter, we will go through three more categories:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Multimedia**—More and more people are playing video and audio on the go,
    we will see how to embed these elements on mobile devices.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Offline and Storage**—Offline is an important feature for mobile as the connectivity
    isn''t consistent on a mobile device. Storage is useful for mobile to store data
    on the device to reduce fetching each time the user revisits the page.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Performance and Integration**—With support of web workers on iOS and Blackberry,
    we could achieve better performance on mobile browsers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Playing audio on mobile
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Target browsers: iOS, Android, Blackberry, webOS, Opera Mobile, Firefox Mobile'
  prefs: []
  type: TYPE_NORMAL
- en: Multimedia consists of audio and video. Playing audio on mobile can be tricky.
    There are a few supported audio formats on mobile browsers—Ogg Vorbis, MP3, and
    WAV. One issue with these formats is that all of them are not supported by all
    browsers.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create an HTML document and name it `ch06r01.html`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Enter the following code in the document:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Now when rendering it in the browser, you will see a music player displayed
    as follows, and when you press play, the music should stream:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/1963_06_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Using the audio tag is fairly simple. The audio is enclosed in the`<audio></audio>`
    tags.
  prefs: []
  type: TYPE_NORMAL
- en: '`controls` tells the audio element to show visual controls such as pause, play,
    and so on.'
  prefs: []
  type: TYPE_NORMAL
- en: '`autobuffer` lets the browser handle the buffering and streaming. The `autobuffer`
    attribute has Boolean value. If it is in audio tag; audio will buffer automatically.
    `preload=auto` makes the stream preload even before playing.'
  prefs: []
  type: TYPE_NORMAL
- en: 'A problem with audio streaming on mobile is the format support. Here is a table
    showing the support comparison:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Browser | Ogg Vorbis | MP3 | WAV |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Android WebKit | Yes | Yes |   |'
  prefs: []
  type: TYPE_TB
- en: '| Opera Mobile |   | Yes |   |'
  prefs: []
  type: TYPE_TB
- en: '| Firefox Mobile | Yes |   | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| iOS Safari |   | Yes | Yes |'
  prefs: []
  type: TYPE_TB
- en: As shown in the table, the support has been largely inconsistent. This can be
    quite troublesome for cross-browser audio streaming. One way you can do it is
    to use multiple tracks. If a browser can't recognize a track in the first source
    tags, it will just try the next one. As we can see from the preceding table, the
    most widely supported format is MP3.
  prefs: []
  type: TYPE_NORMAL
- en: 'It is supported by most mobile browsers except Firefox. For Firefox, we can
    use Ogg, so the following code is more cross-mobile browser compatible:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You may ask, ''What about browsers that don''t support HTML5 audio tags?''
    There are audio polyfills, but generally, I don''t see the point of using polyfills
    for mobile audio. One reason is because these polyfills are made using Flash,
    and Flash Lite is only supported on limited mobile devices such as Symbian. One
    solution is to simply include a link within the audio tags. It won''t be rendered
    by browsers that support audio tags, but it will show on browsers that don''t
    support audio tags. You can do so by adding a download link inside just before
    the closing audio tags:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Now if you render this in Windows Phone, the following will be displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![There''s more...](img/1963_06_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'And if you click on the link, it will simply be opened by the system''s default
    music player:'
  prefs: []
  type: TYPE_NORMAL
- en: '![There''s more...](img/1963_06_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: W3C Audio Working Group
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The current audio element lacks a client-side API. W3C Audio Working Group
    ([http://www.w3.org/2011/audio/](http://www.w3.org/2011/audio/)) was set up to
    address this issue. The API will support the features required by advanced interactive
    applications including the ability to process and synthesize audio streams directly
    in script. You can subscribe to participate in the discussion at: `<[public-audio-request@w3.org](mailto:public-audio-request@w3.org)>`.'
  prefs: []
  type: TYPE_NORMAL
- en: Streaming video on your mobile
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Target browsers: iOS, Android, Blackberry, webOS, Opera Mobile, Firefox Mobile'
  prefs: []
  type: TYPE_NORMAL
- en: Some of the most visited websites from desktop platforms are video sites such
    as [http://www.youtube.com](http://www.youtube.com) and [http://www.vimeo.com](http://www.vimeo.com).
    They have a version optimized for mobiles. Video streaming is an important part
    of mobile. People enjoy watching videos on the go, especially short videos such
    as those on YouTube. They take less time to buffer and it doesn't take much time
    to finish watching. So how does the video work on a mobile device? Let's first
    create an example.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create an HTML document named `ch06r02.html`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Enter the following code in to the HTML document:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Now if you open it in a mobile browser, you should see the video player rendered.
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/1963_06_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Part of the code is taken from *Mark Pilgrim's Dive into HTML5*. You must be
    thinking, that's a hell of a lot of work to get video working! Here let's see
    what each part does. Both iOS and Android support H.264 (`mp4`) format, `webm`
    and `ogv` versions are added to make sure it will also render in other desktop
    and mobile devices.
  prefs: []
  type: TYPE_NORMAL
- en: If you have multiple`<source>` elements, iOS will only recognize the first one.
    Since iOS devices only support H.264+AAC+MP4, you have to always list your MP4
    first. This bug is fixed in iOS 4.0\. So in the example, we listed `test.mp4`
    as the first one.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The following Flash fallback is added to make sure sites don''t support HTML5
    video could play the video:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Mark Pilgrim''s Dive into HTML5* has detailed information about issues that
    are faced while rendering a video on different browsers. You can have a read at:
    [http://diveintohtml5.info/video.html](http://diveintohtml5.info/video.html)'
  prefs: []
  type: TYPE_NORMAL
- en: Versions of Android before 2.3 had a couple of issues with HTML5 video. The
    type attribute on`<source>` elements confused earlier versions of Android greatly.
    The only way to get it to recognize a video source is, ironically, to omit the
    type attribute altogether and ensure that your H.264+AAC+MP4 video file's name
    ends with a `.mp4` extension. You can still include the type attribute on your
    other video sources, as H.264 is the only video format that Android 2.2 supports.
    This bug is fixed in Android 2.3.
  prefs: []
  type: TYPE_NORMAL
- en: The `controls` attribute was not supported. There are no ill effects to including
    it, but Android will not display any user interface controls for a video. You
    will need to provide your own user interface controls. As a minimum, you should
    provide a script that starts playing the video when the user clicks it. This bug
    is also fixed in Android 2.3.
  prefs: []
  type: TYPE_NORMAL
- en: Using offline caching
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Target browsers: iOS, Android, Opera Mobile, webOS, Firefox Mobile'
  prefs: []
  type: TYPE_NORMAL
- en: Apart from Device Access, offline caching is one of the most important features
    for mobile devices. One of the biggest differences between desktop browsing and
    mobile browsing is that mobile users are always on the go. Unlike desktop browsing,
    which typically uses a single stable connection, mobile browsing may take place
    in transit, switching between 3G and WiFi and going offline entirely in such places
    as tunnels. Offline caching can help with issues caused by disconnection from
    the Internet.
  prefs: []
  type: TYPE_NORMAL
- en: '| Devices | Supported |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| iOS | Yes (3.2+) |'
  prefs: []
  type: TYPE_TB
- en: '| Android | Yes (2.1+) |'
  prefs: []
  type: TYPE_TB
- en: '| Windows Mobile | No |'
  prefs: []
  type: TYPE_TB
- en: '| Blackberry v6.0 and above | No |'
  prefs: []
  type: TYPE_TB
- en: '| Symbian 60 | No |'
  prefs: []
  type: TYPE_TB
- en: '| Palm webOS | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| Opera Mobile | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| Firefox Mobile | Yes |'
  prefs: []
  type: TYPE_TB
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's create a text file and name it `default.appcache`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the `default.appcache` file we''ve just created, type in the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Now create an HTML document and name it `ch06r03.html:`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Now if you load the page, disable the Internet connection and load the page
    again. You can see the page still loads.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Anything under the `CACHE MANIFEST` comprises the files that will be cached
    for offline viewing. The file that includes the cache manifest file will automatically
    be included and that means:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The `NETWORK` section lists all the URLs you DON''T want to be cached. These
    are the files that should be loaded each time the page is reloaded. An example
    of such a file is API calls. You don''t want the browser to cache dynamic API
    returns. If all your API calls are from the same prefix, you don''t have to include
    them all. Instead, you only have to include the **prefix**. For example, if you
    have a list of URLs as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Instead of adding them one by one to the list, you can just add one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The `FALLBACK` section is a place to list page URL replacements for network
    URLs to be used when the browser is offline or the remote server is not available.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One question you might be asking is why do we use `.appcache` instead of `.manifest`
    as the extension? It is because `.appcache` is recommended by WHATWG. As it is
    a standard and there is no issue with browser support, it is best to use `.appcache`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another thing you might be wondering is whether these extensions are recognized
    by the browsers. No worries, the following `AddType` will help both `.appcache`
    and `.manifest` render with the proper MIME type. Add the following to the `.htaccess`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Appcache facts
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To know more about Appcache, one can go over to the *Appcache Facts* site ([http://appcachefacts.info/](http://appcachefacts.info/)).
    It has much useful and valuable information about Appcache. It also maintains
    a list of links to sites exploring Appcache:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Dive Into HTML5 Let''s Take This Offline: ([http://diveintohtml5.info/offline.html](http://diveintohtml5.info/offline.html))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Google Code blog Using AppCache to Launch Offline: ([http://googlecode.blogspot.com/2009/04/gmail-for-mobile-html5-series-using.html](http://googlecode.blogspot.com/2009/04/gmail-for-mobile-html5-series-using.html))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'HTML5 Rocks A Beginner''s Guide to Using the Application Cache: ([http://www.html5rocks.com/tutorials/appcache/beginner/](http://www.html5rocks.com/tutorials/appcache/beginner/))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'MDN Doc Center Offline resources in Firefox: ([https://developer.mozilla.org/en/offline_resources_in_firefox](https://developer.mozilla.org/en/offline_resources_in_firefox))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Safari Developer Library Storing Data on the Client: ([http://developer.apple.com/library/safari/#documentation/appleapplications/reference/SafariWebContent/Client-SideStorage/Client-SideStorage.html](http://developer.apple.com/library/safari/#documentation/appleapplications/reference/SafariWebContent/Client-SideStorage/Client-SideStorage.html))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Cache Manifest Validator Online validator, JSON(P) validation API, and `TextMate`
    bundle: [(http://manifest-validator.com/)](http://(http://manifest-validator.com/))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: WHATWG's official description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you want to dig deeper into specs, read the official description of the
    HTML Living Standard at:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.whatwg.org/specs/web-apps/current-work/multipage/ offline.html](http://www.whatwg.org/specs/web-apps/current-work/multipage/)'
  prefs: []
  type: TYPE_NORMAL
- en: Using Web Storage on mobile
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Target browsers: cross-browser'
  prefs: []
  type: TYPE_NORMAL
- en: Web Storage is very useful for offline applications, especially news feeds or
    e-mail web apps. When people talk about Web Storage, they usually mean the `localStorage`
    part. It is a key/value persistence system. Apart from web storage, there are
    two more HTML5 storage features; they are **Indexed Database API** and **Web SQL
    Database**.
  prefs: []
  type: TYPE_NORMAL
- en: So let's see the pros and cons of Web Storage, Indexed Database, and Web SQL
    Database.
  prefs: []
  type: TYPE_NORMAL
- en: '| Storage type | Pros | Cons |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| *Web Storage* | *Simple, easy to use API**Supported by major browsers* |
    *No data privacy* |'
  prefs: []
  type: TYPE_TB
- en: '| *Indexed Database* | *No SQL-like structured storage* | *Not yet supported
    by most mobile browsers**No SQL (obviously)* |'
  prefs: []
  type: TYPE_TB
- en: '| *Web SQL Database* | *Fast**Feature-rich SQL implementation**Supported by
    major new mobile browsers* | *W3C working group has put in on hold on the standard*
    |'
  prefs: []
  type: TYPE_TB
- en: From a mobile browser support perspective, Web Storage is the most widely supported,
    followed by Web SQL Database.
  prefs: []
  type: TYPE_NORMAL
- en: Web SQL Database has a better feature set than Web Storage. So in this recipe,
    we will focus on Web Storage and Web SQL Database, and not on Indexed Database
    (at least for now).
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create an HTML document and name it `ch06r04.html`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, enter the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we are adding in the JavaScript portion:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Now at the end of the file, let''s close the HTML document:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '`localStorage` even works in Dolphin, a browser used by Samsung and that can
    be installed on any Android device. When rendering the page using the Dolphin
    browser, you can enter any words. For this case, if you enter "hullo world", once
    you hit refresh, it will display this information:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/1963_06_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As mentioned, it is really as simple as value/key pair, and you can store data
    using `set` and `get` methods.
  prefs: []
  type: TYPE_NORMAL
- en: 'To set data, you use `setItem` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'To get data, you use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Looking for a polyfill? jQuery Offline is a nice offline storage plugin. It
    uses the HTML5 `localStorage` API for persistence. You can use the same API for
    browsers that do not support `localStorage`. jQuery Offline will simply fall back
    to making a request to the server each time. You can learn more about it at [https://github.com/wycats/jquery-offline](http://github.com/wycats/jquery-offline).
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Web SQL Database is an alternative to `localStorage`, and it''s loved by people
    who use SQL. *Remy Sharp* has a very good demo on github that shows how to use
    Web SQL Database. You can learn more about it at: [http://html5demos.com/database](http://html5demos.com/database).'
  prefs: []
  type: TYPE_NORMAL
- en: Web Storage portability layer
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Web Storage Portability Layer library allows you to write offline storage
    code easily for browsers that support either HTML5 databases or Gears.
  prefs: []
  type: TYPE_NORMAL
- en: Gears is an earlier offline storage system developed by Google. It is supported
    on browsers like IE6 and IE Mobile 4.0.1, but it is no longer under development.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can learn more about this library at: [http://google-opensource.blogspot.com/2009/05/web-storage-portability-layer-common.html](http://google-opensource.blogspot.com/2009/05/web-storage-portability-layer-common.html).'
  prefs: []
  type: TYPE_NORMAL
- en: HTML5 storage wars
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can read more about localStorage vs. IndexedDB vs. Web SQL at: [http://csimms.botonomy.com/2011/05/html5-storage-wars-localstorage-vs-indexeddb-vs-web-sql.html](http://csimms.botonomy.com/2011/05/html5-storage-wars-localstorage-vs-indexeddb-vs-web-sql.html).'
  prefs: []
  type: TYPE_NORMAL
- en: Using web workers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Target browsers: Opera Mobile, Firefox Mobile, iOS5, Blackberry'
  prefs: []
  type: TYPE_NORMAL
- en: Most programmers with Java/Python/.NET backgrounds should be familiar with multi-threaded
    or concurrent programming. JavaScript was once laughed at for its lack of high-level
    threading, but with the advent of HTML5 its API has been expanded to allow concurrency,
    substantially increasing its effective power! JavaScript is no longer just a scripting
    language. With more and more sophisticated tasks created using JavaScript, it
    has to perform more while dealing with heavy frontend computing.
  prefs: []
  type: TYPE_NORMAL
- en: '| Devices | Supported |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| iOS | Yes (5.0+) |'
  prefs: []
  type: TYPE_TB
- en: '| Android | No |'
  prefs: []
  type: TYPE_TB
- en: '| Windows Mobile | No |'
  prefs: []
  type: TYPE_TB
- en: '| Blackberry | Yes (6.0+) |'
  prefs: []
  type: TYPE_TB
- en: '| Symbian | No |'
  prefs: []
  type: TYPE_TB
- en: '| Palm webOS | No |'
  prefs: []
  type: TYPE_TB
- en: '| Opera Mobile | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| Firefox Mobile | Yes |'
  prefs: []
  type: TYPE_TB
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's create a JavaScript file and name it `math.js`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Enter the following code into the document:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s create an HTML document and name it `ch06r05.html`. Enter the following
    code into the HTML file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'While rendering this page in a mobile browser, we can see three fields and
    two buttons for calculation. In the following example screenshot, I entered 6
    and 3 and pressed the **Add** button to see 9 shown as the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/1963_06_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can break `math.js` into three parts:'
  prefs: []
  type: TYPE_NORMAL
- en: The actual math functions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`get` event from master (HTML document)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`post` event to master (HTML document)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The actual math functions are fairly easy to understand, `addNumbers` is a
    function to add numbers and `minNumbers` is for deduction:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'The next is the `onmessage`. This is the information the `math.js` gets from
    the HTML document:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Once the `math.js` worker gets the information from the master (HTML document),
    it will start to do the math and post back to the master by using `postMessage:`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'In the HTML document also, there are three parts as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a worker
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`post` information to worker to do the math'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`get` the math done by worker'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is fairly easy to create a worker. It's created by calling `new Worker("math.js"):`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'For posting information to the worker, you can use the same `postMessage` method
    as explained in `math.js`. The message itself can be an object with name/value
    pairs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: For getting the information back once the math is done by the worker, we use
    the same `onmessage` method explained in `math.js:`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Creating Flash-like navigation with session and history API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Target browsers: cross-browser'
  prefs: []
  type: TYPE_NORMAL
- en: In the past, people had to use hash-tag to fake URL as a compromise between
    SEO and smooth page transition. Now, with the history API, that hack is no longer
    needed. With the history API together with Ajax calls, one can dynamically update
    a URL.
  prefs: []
  type: TYPE_NORMAL
- en: '| Device platform | Supported |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| iOS | Yes (4.2+) |'
  prefs: []
  type: TYPE_TB
- en: '| Android | Yes (2.2+) |'
  prefs: []
  type: TYPE_TB
- en: '| Windows Mobile | No |'
  prefs: []
  type: TYPE_TB
- en: '| Blackberry | No |'
  prefs: []
  type: TYPE_TB
- en: '| Symbian | Yes (5.2+) |'
  prefs: []
  type: TYPE_TB
- en: '| Palm webOS | No |'
  prefs: []
  type: TYPE_TB
- en: '| Opera Mobile | No |'
  prefs: []
  type: TYPE_TB
- en: '| Firefox Mobile | Yes |'
  prefs: []
  type: TYPE_TB
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's create an HTML document and name it `ch06r06.html`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Enter the following code in the HTML document:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let''s create another document and name it `ch06r06_a.html`. Enter the
    following code into it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let''s create yet another document and name it `ch06r06_b.html`. Enter
    the following code to the document:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let''s create a JavaScript file and enter the following code. Replace the
    URL in the following code with your own URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let''s render the page in a mobile browser. When you click on the **Previous**
    or **Next** buttons, the pages will not refresh. But if you take a look at the
    URLs, they are updated:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/1963_06_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`history.pushState` is used to push the new URL to the browser address bar:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'The actual page navigation is an Ajax request to the server, so the page never
    reloads. But the URL is updated with the following function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To learn more about history API, you can dig into the specification at: [http://www.whatwg.org/specs/web-apps/current-work/multipage/history.html](http://www.whatwg.org/specs/web-apps/current-work/multipage/history.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '*Mark Pilgrim* has a great detailed explanation at *Dive into HTML5:*[http://diveintohtml5.info/history.html](http://diveintohtml5.info/history.html)'
  prefs: []
  type: TYPE_NORMAL
- en: You can also learn more at *Mozilla's MDC Docs:*[https://developer.mozilla.org/en/DOM/Manipulating_the_browser_history](https://developer.mozilla.org/en/DOM/Manipulating_the_browser_history)
  prefs: []
  type: TYPE_NORMAL
- en: Place Kitten
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Wondering where the kitten pictures have come from? It's from a site called
    [http://placekitten.com/](http://placekitten.com/). A quick and simple service
    for getting pictures of kittens for using them as placeholders in your designs
    or code.
  prefs: []
  type: TYPE_NORMAL
