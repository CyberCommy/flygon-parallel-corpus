- en: The Future of Kubernetes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we look at the future of Kubernetes from multiple angles. We'll
    start with the roadmap and forthcoming product features, including diving into
    the design process of Kubernetes. Then, we'll cover the momentum of Kubernetes
    since its inception, including dimensions such as community, ecosystem, and mindshare.
    A big part of Kubernetes' future will be determined by how it fares against its
    competition. Education will play a major role too, as container orchestration
    is new, fast-moving, and not a well-understood domain. Then, we'll discuss a capability
    at the top of my wish list—dynamic plugins.
  prefs: []
  type: TYPE_NORMAL
- en: 'The covered topics are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The road ahead
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Competition
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Kubernetes momentum
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Education and training
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Modularization and out-of-tree plugins
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Service meshes and serverless frameworks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The road ahead
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Kubernetes is a large open source project. Let's look at some of the planned
    features and upcoming releases, as well the various special interest groups that
    focus on specific areas.
  prefs: []
  type: TYPE_NORMAL
- en: Kubernetes releases and milestones
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Kubernetes has fairly regular releases. The current release, as of April 2018,
    is 1.10\. The next release, 1.11, is currently 33% complete. Here are a couple
    of issues from the 1.11 releases to give you a taste of the work being done:'
  prefs: []
  type: TYPE_NORMAL
- en: Update to Go 1.10.1 and default `etcd` server to 3.2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Support out-of-tree authentication providers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Migrate kublet flags to `kublet.config.k8s.io`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add support of Azure Standard Load Balancer and public IP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add kubectl `api-resources` command
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Minor releases are released every 3 months, and patch releases plug holes and
    issues until the next minor release. Here are the release dates of the three most
    recent releases:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 10.0 released on March 26, 2018, and 1.9.6 released on March, 21 2018
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 9.0 released on Dec 15, 2017, and 1.8.5 released on December, 7 2017
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 8.0 and 1.7.7 released on Sep 28, 2017 (my birthday!)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Another good way to look at what is coming is to look at the work being done
    on the alpha and beta releases. You can check the change log here: [https://github.com/kubernetes/kubernetes/blob/master/CHANGELOG.md](https://github.com/kubernetes/kubernetes/blob/master/CHANGELOG.md).
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are some of the major themes of the 1.10 release:'
  prefs: []
  type: TYPE_NORMAL
- en: Node
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Network
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Storage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Windows
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OpenStack
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: API machinery
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Auth
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CLI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kubernetes special interest and working groups
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As a large open source community project, most of the development work on Kubernetes
    takes place in multiple working groups. The complete list is here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/kubernetes/community/blob/master/sig-list.md](https://github.com/kubernetes/community/blob/master/sig-list.md)'
  prefs: []
  type: TYPE_NORMAL
- en: The planning for future releases is done mostly within these SIGs and working
    groups because Kubernetes is too big to handle it all centrally. SIGs meet regularly
    and discuss.
  prefs: []
  type: TYPE_NORMAL
- en: Competition
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The first edition of *Mastering Kubernetes* was published in May 2017\. The
    competitive landscape of Kubernetes was very different then. Here is what I wrote
    back then:'
  prefs: []
  type: TYPE_NORMAL
- en: '"Kubernetes operates in one of the hottest technology areas of container orchestration.
    The future of Kubernetes must be considered as part of the whole market. As you
    will see, some of the possible competitors may also be partners that promote both
    their own offering as well as Kubernetes (or at least, Kubernetes can run on their
    platform)."'
  prefs: []
  type: TYPE_NORMAL
- en: In less than a year, the situation has changed drastically. In short, Kubernetes
    won. All the cloud providers offer managed Kubernetes services. IBM provides support
    for Kubernetes on bare metal clusters. Companies that develop software and add-ons
    for container orchestration focus on Kubernetes as opposed to creating products
    that support multiple orchestration solutions.
  prefs: []
  type: TYPE_NORMAL
- en: The value of bundling
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Container orchestration platforms such as Kubernetes compete directly and indirectly
    with larger and smaller scopes. For example, Kubernetes may be available on a
    particular Cloud platform, such as AWS, but may not be the default/go-to solution.
    On the other hand, Kubernetes is at the core of GKE on the Google Cloud Platform.
    Developers who choose a higher level of abstraction, such as a cloud platform
    or even PaaS, will more often than not go with the default solution. But some
    developers or organizations worry about vendor lock-in or need to run on multiple
    cloud platforms or a hybrid public/private. Kubernetes has a strong advantage
    here. Bundling was a potential serious threat to Kubernetes adoption, but the
    momentum was too great, and now every major player offers Kubernetes directly
    on their platform or solution.
  prefs: []
  type: TYPE_NORMAL
- en: Docker Swarm
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Docker is currently the de facto standard for containers (although CoreOS rkt
    is gathering steam), and often people say Docker when they mean containers. Docker
    wants to get a piece of the orchestration cake and released the Docker Swarm product.
    The main benefit of Docker Swarm is that it comes as part of the Docker installation
    and uses standard Docker APIs. So, the learning curve is not as steep, and it's
    easier to get started. However, Docker Swarm is way behind Kubernetes in terms
    of capabilities and maturity. In addition, Docker's reputation is not great when
    it comes to high-quality engineering and security. Organizations and developers
    that are concerned with the stability of their systems may shy away from Docker
    Swarm. Docker is aware of the problem and is taking steps to address it. It released
    an Enterprise offering and also reworked Docker's internals as a set of independent
    components through the Moby project. But, recently Docker acknowledged the prominent
    place of Kubernetes as the container orchestration platform. Docker now supports
    Kubernetes directly side-by-side with Docker swarm. My guess is that Docker swarm
    will fizzle out, and it will be used just for very small prototyping.
  prefs: []
  type: TYPE_NORMAL
- en: Mesos/Mesosphere
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Mesosphere is the company behind the open source Apache Mesos, and the DC/OS
    product is the incumbent that runs containers and big data in the cloud. The technology
    is mature and Mesosphere evolves it, but they don't have the resources and momentum
    that Kubernetes has. I believe that Mesosphere will do very well because it is
    a big market, but it will not threaten Kubernetes as the number one container
    orchestration solution. In addition, Mesosphere also recognized that they can't
    beat Kubernetes and opted to join it. In DC/OS 1.11, you get Kubernetes-as-a-Service.
    The DC/OS offering is a highly available, easy to set up, and secure by default
    deployment of Kubernetes that was tested on Google, AWS, and Azure.
  prefs: []
  type: TYPE_NORMAL
- en: Cloud platforms
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A large contingent of organizations and developers flock to public cloud platforms
    to avoid the headaches of low-level management of their infrastructure. Those
    companies' primary motivation is often to move fast and focus on their core competency.
    As such, they'll often go with the default deployment solution offered by their
    Cloud provider because the integration is the most seamless and streamlined.
  prefs: []
  type: TYPE_NORMAL
- en: AWS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Kubernetes runs very well on AWS through the official Kubernetes Kops project:
    [https://github.com/kubernetes/kops](https://github.com/kubernetes/kops).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Some of Kops, features are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Automate the provisioning of Kubernetes clusters in AWS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploy highly-available Kubernetes masters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The ability to generate Terraform configurations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: However, Kops is not an official AWS solution. If you manage your infrastructure
    through the AWS console and APIs, the path of least resistance used to be AWS
    **Elastic Container Service** (**ECS**)—a built-in container orchestration solution
    that is not based on Kubernetes.
  prefs: []
  type: TYPE_NORMAL
- en: Now, AWS is fully committed to Kubernetes and is in the process of releasing
    **Elastic Kubernetes Service** (**EKS**), which is a fully managed and highly
    available upstream Kubernetes cluster, with no modifications, but with tight integration
    through add-ons and plugins to AWS services.
  prefs: []
  type: TYPE_NORMAL
- en: I speculated in the first edition that AWS would stick to its guns and stand
    behind ECS, but I was wrong. Even the mighty AWS deferred to Kubernetes; ECS will
    stick around because a lot of organizations invested in it and might not want
    to migrate to Kubernetes. However, over time, I predict that ECS will be relegated
    to legacy service status, maintained to support organizations that don't have
    enough incentive to move to Kubernetes.
  prefs: []
  type: TYPE_NORMAL
- en: Azure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Azure provides the Azure container service, and they don't pick favorites. You
    can choose if you want to use Kubernetes, Docker Swarm, or DC/OS. This is interesting
    because, initially, Azure was based on Mesosphere DC/OS and they added Kubernetes
    and Docker Swarm as orchestration options later. As Kubernetes pulls forward in
    capabilities, maturity, and mindshare, I believe it will become the number one
    orchestration option on Azure too.
  prefs: []
  type: TYPE_NORMAL
- en: In the second half of 2017, Azure officially released **Azure Kubernetes Service**
    (**AKS**) and Microsoft got fully behind Kubernetes as the container orchestration
    solution. It is very active in the Kubernetes community, acquired Deis (the Helm
    developers), and contributes a lot of tools, code fixes, and integrations. The
    Windows support for Kubernetes keeps improving as well as integration with Azure.
  prefs: []
  type: TYPE_NORMAL
- en: Alibaba Cloud
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Alibaba Cloud is the Chinese AWS in more ways than one. Their APIs are intentionally
    very much like AWS APIs. Alibaba Cloud used to provide a container management
    service based on Docker Swarm. I've deployed some applications at a small scale
    on Alibaba Cloud, and they seem to be able to keep up with the changes in the
    field and quickly follow the big players. Over the past year, Alibaba Cloud (Aliyun)
    joined the ranks of Kubernetes supporters. There are several resources for deploying
    and managing Kubernetes clusters on the Alibaba cloud including an implementation
    on GitHub of the cloud provider interface.
  prefs: []
  type: TYPE_NORMAL
- en: The Kubernetes momentum
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Kubernetes has tremendous momentum behind it; the community is super strong.
    Users flock to Kubernetes as its mindshare increases, the technical press acknowledges
    its number one leadership position, the ecosystem is sizzling, and a lot of big
    corporations and companies (in addition to Google) actively support it and many
    more evaluate it and run it in production.
  prefs: []
  type: TYPE_NORMAL
- en: Community
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Kubernetes community is one of its greatest assets. Kubernetes recently
    became the first project to graduate from the **Cloud Native Computing Foundation**
    (**CNCF**).
  prefs: []
  type: TYPE_NORMAL
- en: GitHub
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Kubernetes is developed on GitHub and is one of the top projects on GitHub.
    It is in the top 0.01 percent in stars and number one in terms of activity. Note
    that over the past year, Kubernetes became more modular, and many pieces of the
    puzzle are now developed separately.
  prefs: []
  type: TYPE_NORMAL
- en: More professionals list Kubernetes in their LinkedIn profile than any other
    comparable offering by a wide margin.
  prefs: []
  type: TYPE_NORMAL
- en: A year ago, Kubernetes had ~1,100 contributors and ~34,000 commits. Now, the
    number exploded to more than 1,600 contributors and more than 63,000 commits.
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/3049dab5-3928-40d0-b592-31b4a3b5c29d.png)'
  prefs: []
  type: TYPE_IMG
- en: Conferences and meetups
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Another indication of Kubernetes momentum is the number of conferences, meetups,
    and attendees. KubeCon is growing quickly and new Kubernetes meetups open up every
    day.
  prefs: []
  type: TYPE_NORMAL
- en: Mindshare
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Kubernetes is getting a lot of attention and deployments. Large and small companies
    that get into the containers/DevOps/microservices arena adopt Kubernetes and the
    trend is clear. One interesting metric is the number of stack overflow questions
    over time. The community steps in to answer questions and foster collaboration.
    The growth dwarfs its rivals, and the trend is very clear:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/62235821-3472-4bbe-a083-b717554cb87b.png)'
  prefs: []
  type: TYPE_IMG
- en: Ecosystem
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Kubernetes ecosystem is very impressive, from cloud providers to PaaS platforms
    and startups that offer a streamlined environment.
  prefs: []
  type: TYPE_NORMAL
- en: Public cloud providers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: All the major cloud providers support Kubernetes directly. Obviously, Google
    is leading the pack with GKE, which is the native container engine on the Google
    Cloud Platform. The Kops project, mentioned earlier, is a well-supported, maintained,
    and documented solution on AWS, and EKS is just around the corner. Azure offers
    AKS. The IBM container cloud service is powered by Kubernetes. Oracle tracks Kubernetes
    closely and offers Oracle container services for Kubernetes based on upstream
    Kubernetes and Kubeadm.
  prefs: []
  type: TYPE_NORMAL
- en: OpenShift
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: OpenShift is RedHat's container application product that's built on top of the
    open source OpenShift origin, which is based on Kubernetes. OpenShift adds application
    life cycle management and DevOps tooling on top of Kubernetes and contributes
    a lot to Kubernetes (such as autoscaling). This type of interaction is very healthy
    and encouraging. RedHat recently acquired CoreOS and the merging of CoreOS Tectonic
    with OpenShift may provide great synergy.
  prefs: []
  type: TYPE_NORMAL
- en: OpenStack
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: OpenStack is the open source private cloud platform, and it has recently decided
    to standardize on Kubernetes as the underlying orchestration platform. This is
    a big deal because large enterprises that want to deploy across a mix of public
    and private Clouds will have a much better integration with Kubernetes cloud federation
    on one end and OpenStack as a private cloud platform using Kubernetes under the
    hood.
  prefs: []
  type: TYPE_NORMAL
- en: 'The latest OpenStack survey from November 2017 shows that Kubernetes is by
    far the most popular solution for container orchestration:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/a3b5d029-22b3-400d-8ad3-9f111be3bdcf.png)'
  prefs: []
  type: TYPE_IMG
- en: Other players
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are a number of other companies that use Kubernetes as a foundation, such
    as Rancher and Apprenda. A large number of startups develop add-ons and services
    that run inside the Kubernetes cluster. The future is bright.
  prefs: []
  type: TYPE_NORMAL
- en: Education and training
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Education will be critical. As the early adopters of Kubernetes make way to
    the majority, it is very important to have the right resources for organizations
    and developers to pick up Kubernetes and be productive quickly. There are already
    some pretty good resources, and, in the future, I predict that the number and
    quality will just increase. Of course, the book you're reading right now is part
    of this drive.
  prefs: []
  type: TYPE_NORMAL
- en: 'The official Kubernetes documentation is getting better and better. The online
    tutorials are great for getting started:'
  prefs: []
  type: TYPE_NORMAL
- en: The CNCF has a free introductory Kubernetes course (as well as more advanced
    paid courses), at [https://www.cncf.io/certification/training/](https://www.cncf.io/certification/training/).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Google has created a few Udacity courses on Kubernetes. Check them out at [https://www.udacity.com/course/scalable-microservices-with-kubernetes--ud615](https://www.udacity.com/course/scalable-microservices-with-kubernetes--ud615).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Another excellent resource is KataCoda, which provides a completely free Kubernetes
    playground, where you can get a private cluster within seconds, in addition to
    multiple hands-on tutorials on advanced topics, at [https://www.katacoda.com/courses/kubernetes](https://www.katacoda.com/courses/kubernetes).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are also a lot of paid training options for Kubernetes. As the popularity
    of Kubernetes grows even further, more and more options will be available.
  prefs: []
  type: TYPE_NORMAL
- en: Modularization and out-of-tree plugins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Kubernetes has made great strides toward modularization since the first edition.
    Kubernetes was always a paragon of flexibility and extensibility. However, originally
    you had to build and link your code into the Kubernetes API server or the Kublet
    (with the exception of CNI plugins). You also had to get your code vetted and
    integrated with the main Kubernetes codebase to make it available to other developers.
    At the time, I was very excited about Go 1.8 dynamic plugins and how they could
    be used to extend Kubernetes in a much more agile way. The Kubernetes developers
    and community took a different path and decided to make Kubernetes proper a general-purpose
    and versatile engine where almost every aspect can be customized or extended from
    the outside through standard interfaces. You''ve seen many examples in [Chapter
    12](93b13cf6-2008-496d-b698-63b93a72cba7.xhtml), *Customizing Kubernetes - APIs
    and Plugins*. The out-of-tree approach means that you integrate a plugin or extension
    with Kubernetes that lives outside of the Kubernetes code tree on GitHub. There
    are several mechanisms in use:'
  prefs: []
  type: TYPE_NORMAL
- en: CNI plugins use standard input and out through a separate executables
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CSI plugins use pods gRPC
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kubectl plugins use YAML descriptors and binary commands
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: API aggregators use custom API servers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Webhooks use remote HTTP interfaces
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Various other plugins can be deployed as pods
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: External credential providers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Service meshes and serverless frameworks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Kubernetes helps with a lot of the heavy lifting involved in container orchestration
    and cost reduction due to efficient scheduling. But, there are two trends that
    gain momentum in cloud native world. Service meshes fit Kubernetes like a glove,
    and running a serverless framework plays to Kubernetes strengths as well.
  prefs: []
  type: TYPE_NORMAL
- en: Service meshes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A service mesh operates at a higher level than container orchestration. A service
    mesh manages services. The service mesh provides various capabilities that are
    very necessary when running systems with hundreds and thousands different services
    such as:'
  prefs: []
  type: TYPE_NORMAL
- en: Dynamic routing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Latency-aware east-west load balancing (inside the cluster)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Auto retries of idempotent requests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Operational metrics
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the past, applications had to address those responsibilities on top of their
    core functionality. Now, service meshes take the load off and provide an infrastructure
    layer so that applications can focus on their primary goals.
  prefs: []
  type: TYPE_NORMAL
- en: The most well-known service mesh is Linkered by Buoyant. Linkered supports Kubernetes
    as well as other orchestrators. But, given the momentum of Kubernetes.
  prefs: []
  type: TYPE_NORMAL
- en: Buoyant decided to develop a new Kubernetes-only service mesh named Conduit
    (in Rust). This is another testament to the traction of Kubernetes where all the
    innovation takes place. Another Kubernetes service mesh is Istio. Istio was founded
    by teams from Google, IBM, and Lyft. It's built on top of Lyft's Envoy and it's
    moving fast.
  prefs: []
  type: TYPE_NORMAL
- en: Serverless frameworks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Serverless computing is an exciting new trend in the cloud native landscape.
    AWS Lambda functions are the most popular, but all cloud platforms provide them
    now. The idea is that you don''t have to provision hardware, instances, and storage.
    Instead you just write your code, package it (often in a container), and invoke
    it whenever you want. The cloud platform takes care of allocating resources to
    run your code at invocation time and deallocate the resources when the code finished
    running. This can save a lot of costs (you only pay for the resources you use)
    and eliminate the need to provision and manage infrastructure. However, the serverless
    capabilities provided by cloud providers often come with strings attached (runtime
    and memory limits), or they are not flexible enough (can''t control the hardware
    your code will run on). Kubernetes can also provide serverless capabilities once
    your cluster is provisioned. There are multiple frameworks at different levels
    of maturity available, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Fast-netes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Nuclio.io
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Apache OpenWhisk
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Platform9 Fission
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kubless.io
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This is great news for people running Kubernetes on bare metal or who need more
    flexibility than cloud platforms provide.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we looked at the future of Kubernetes, and it looks great!
    The technical foundation, the community, the broad support, and the momentum are
    all very impressive. Kubernetes is still young, but the pace of innovation and
    stabilization is very encouraging. The modularization and extensibility principles
    of Kubernetes let it become the universal foundation for modern cloud native applications.
  prefs: []
  type: TYPE_NORMAL
- en: At this point, you should have a clear idea of where Kubernetes is right now
    and where it's going from here. You should have confidence that Kubernetes is
    not just here to stay but that it will be the leading container orchestration
    platform for many years to come and will integrate with larger offerings and environments.
  prefs: []
  type: TYPE_NORMAL
- en: Now, it's up to you to use what you have learned and build amazing things with
    Kubernetes!
  prefs: []
  type: TYPE_NORMAL
