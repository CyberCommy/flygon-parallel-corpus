- en: Chapter 1. Setting Up and Installing Laravel
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing Laravel as a git submodule
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up a virtual host and development environment in Apache
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating "clean" URLs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring Laravel
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Laravel with Sublime Text 2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up your IDE to autocomplete Laravel's namespaces
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Autoloader to map a class name to its file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating advanced Autoloaders with namespaces and directories
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we'll learn how to get Laravel up-and-running with ease and
    make sure it's simple to update when any core changes are made. We'll also get
    our development and coding environment set up to be very efficient so we can focus
    on writing great code and not have to worry about issues not related to our applications.
    Finally, we'll look at some ways to get Laravel to automatically do some work
    for us so we'll be able to extend our application in very little time.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Laravel as a git submodule
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There may be a time when we want to have our Laravel installation separate from
    the rest of our public files. In this case, installing Laravel as a git submodule
    would be a solution. This will allow us to update our Laravel files through git
    without touching our application code.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To get started, we should have our development server running as well as have
    git installed. In the server's web directory, create a `myapp` directory to hold
    our files. Installation will all be done in the command line.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To complete this recipe, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In your terminal or command line, navigate to the root of `myapp`. The first
    step is to initialize git and download our project files:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Since all we need is the `public` directory, move to `/laravel` and delete
    everything else:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, move back to the root directory, create a `framework` directory, and
    add Laravel as a submodule:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we need to run Composer to install the framework:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: More information about installing Composer can be found at [http://getcomposer.org/doc/00-intro.md](http://getcomposer.org/doc/00-intro.md).
    The rest of the book will assume we're using `composer.phar`, but we could also
    add it globally and simply call it by typing `composer`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, open `/laravel/public/index.php` and find the following lines:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Change the preceding lines to:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For many, simply running `git clone` would be enough to get their project going.
    However, since we want to have our framework act as a submodule, we need to separate
    those files from our project.
  prefs: []
  type: TYPE_NORMAL
- en: First, we download the files from GitHub, and since we don't need any of the
    framework files, we can delete everything but our public folder. Then, we create
    our submodule in the `framework` directory and download everything there. When
    that's complete, we run `composer install` to get all our vendor packages installed.
  prefs: []
  type: TYPE_NORMAL
- en: To get the framework connected to our application, we modify `/laravel/public/index.php`
    and change the `require` paths to our framework directory. That will let our application
    know exactly where the framework files are located.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One alternative solution is to move the `public` directory to our server's root.
    Then, while updating our `index.php` file, we'll use `__DIR__ . '/../framework/laravel/bootstrap'`
    to include everything correctly.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a virtual host and development environment in Apache
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When developing our Laravel app, we'll need a web server to run everything.
    In PHP 5.4 and up, we can use the built-in web server, but if we need some more
    functionality, we'll need a full web stack. In this recipe, we'll be using an
    Apache server on Windows, but any OS with Apache will be similar.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe requires a recent version of WAMP server, available at [http://wampserver.com](http://wampserver.com),
    though the basic principle applies to any Apache configuration on Windows.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To complete this recipe, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the WAMP Apache `httpd.conf` file. It is often located in `C:/wamp/bin/apache/Apach2.#.#/conf`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Locate the line `#Include conf/extra/httpd-vhosts.conf` and remove the first
    `#`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Move to the `extra` directory, open the `httpd-vhosts.conf` file, and add the
    following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Restart the Apache service.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the Windows hosts file, often in `C:/Windows/System32/drivers/etc`, and
    open the file `hosts` in a text editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At the bottom of the file, add the line `127.0.0.1 myapp.dev`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First, in the Apache config file `httpd.conf`, we uncomment the line to allow
    the file to include the `vhosts` configuration files. You can include the code
    directly in the `httpd.conf` file, but this method keeps things more organized.
  prefs: []
  type: TYPE_NORMAL
- en: In the `httpd-vhosts.conf` file, we add our VirtualHost code. `DocumentRoot`
    tells the server where the files are located and `ServerName` is the base URL
    that the server will look for. Since we only want to use this for our local development,
    we make sure to only allow access to the localhost with the IP `127.0.0.1`.
  prefs: []
  type: TYPE_NORMAL
- en: In the `hosts` file, we need to tell Windows which IP to use for the `myapp.dev`
    URL. After restarting Apache and our browser, we should be able to go to `http://myapp.dev`
    and view our application.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: While this recipe is specific to Windows and WAMP, the same idea can be applied
    to most Apache installations. The only difference will be the location of the
    `httpd.conf` file (in Linux Ubuntu, it's in `/etc/apache2`) and the path to the
    `public` directory for DocumentRoot (in Ubuntu, it might be something like `/var/www/myapp/public`).
    The `hosts` file for Linux and Mac OS X will be located in `/etc/hosts`.
  prefs: []
  type: TYPE_NORMAL
- en: Creating "clean" URLs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When installing Laravel, the default URL we will use is `http://{your-server}/public`.
    If we decide to remove `/public`, we can use Apache's `mod_rewrite` to change
    the URL.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we just need a fresh installation of Laravel and everything
    running on a properly configured Apache server.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To complete this recipe, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In our app''s root directory, add a `.htaccess` file and use this code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Go to `http://{your-server}` and view your application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This simple bit of code will take anything we add in the URL and direct it to
    the `public` directory. That way, we don't need to manually type in `/public`.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If we decide to move this application to a production environment, this is not
    the best way to accomplish the task. In that case, we would just move our files
    outside the web root and make `/public` our root directory.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring Laravel
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After installing Laravel, it's pretty much ready to go without much need for
    configuration. However, there are a few settings we want to make sure to update.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we need a regular installation of Laravel.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To complete this recipe, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `/app/config/app.php` and update these lines:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Open `app/config/database.php` and choose your preferred database:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'In the command line, go to the root of the app and make sure the `storage`
    folder is writable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Most of the configuration will happen in the `/app/config/app.php` file. While
    setting the URL isn't required, and Laravel does a great job figuring it out without
    setting it, it's always good to remove any work from the framework that we can.
    Next, we set our location. If we choose to provide **localization** in our app,
    this setting will be our default. Then, we set our application key, since it's
    best to not keep the default.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we set which database driver we''ll be using. Laravel comes with four
    drivers out of the box: mysql, sqlite, sqlsrv (MS SQL Server), and pgsql (Postgres).'
  prefs: []
  type: TYPE_NORMAL
- en: Finally, our `app/storage` directory will be used for keeping any temporary
    data, such as sessions or cache, if we choose. To allow this, we need to make
    sure the app can write to the directory.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For an easy way to create a secure application key, remove the default key
    and leave it empty. Then, in your command line, navigate to your application root
    directory and type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: That will create a unique and secure key and automatically save it in your configuration
    file.
  prefs: []
  type: TYPE_NORMAL
- en: Using Laravel with Sublime Text 2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the most popular text editors used for coding is Sublime Text. Sublime
    has many features that make coding fun, and with plugins, we can add in Laravel-specific
    features to help with our app.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Sublime Text 2 is a popular code editor that is very extensible and makes writing
    code effortless. An evaluation version can be downloaded from [http://www.sublimetext.com/2](http://www.sublimetext.com/2).
  prefs: []
  type: TYPE_NORMAL
- en: We also need to have the Package Control package installed and enabled in Sublime,
    and that can be found at [http://wbond.net/sublime_packages/package_control/installation](http://wbond.net/sublime_packages/package_control/installation).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For this recipe, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: In your menu bar, go to **Preferences** then **Package Control**:![How to do
    it...](graphics/2827OS_01_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose **Install Package**:![How to do it...](graphics/2827OS_01_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Search for `laravel` to see the listing. Choose **Laravel 4 Snippets** and let
    it install. After it's complete, choose **Laravel-Blade** and install it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Laravel snippets in Sublime Text 2 greatly simplify writing common code,
    and it includes pretty much everything we'll need for application development.
    For example, when creating a route, simply start typing `Route` and a list will
    pop up allowing us to choose which route we want, which then automatically completes
    the rest of the code we need.
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](graphics/2827OS_01_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Installing the Laravel-Blade package is helpful if we use the Blade template
    system that comes with Laravel. It recognizes Blade code in the files and will
    automatically highlight the syntax.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up your IDE to autocomplete Laravel's namespaces
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Most **IDEs** (**Integrated Development Environment**) have some form of code
    completion as part of the program. To get Laravel's namespaces to autocomplete,
    we may need to help it recognize what the namespaces are.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we'll be adding namespaces to the NetBeans IDE, but the process
    will be similar with others.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to complete this recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Download the following pre-made file that lists the Laravel namespaces: [https://gist.github.com/barryvdh/5227822](https://gist.github.com/barryvdh/5227822).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a folder anywhere on your computer to hold this file. For our purposes,
    we'll add the file to `C:/ide_helper/ide_helper.php`:![How to do it...](graphics/2827OS_01_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After creating a project with the Laravel framework, navigate to **File** |
    **Project Properties** | **PHP Include Path**:![How to do it...](graphics/2827OS_01_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Add Folder…** and then add the folder at `C:/ide_helper`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now when we start typing the code, the IDE will automatically suggest code to
    complete:![How to do it...](graphics/2827OS_01_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Some IDEs need help understanding the syntax of a framework. To get NetBeans
    to understand, we download a list of all the Laravel classes and options. Then,
    when we add it to the Include Path, NetBeans will automatically check the file
    and show us the autocomplete options.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We can have the documents downloaded and updated automatically using Composer.
    For installation instructions, visit [https://github.com/barryvdh/laravel-ide-helper](https://github.com/barryvdh/laravel-ide-helper).
  prefs: []
  type: TYPE_NORMAL
- en: Using Autoloader to map a class name to its file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using Laravel's ClassLoader, we can easily include any of our custom class libraries
    in our code and have them readily available.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we need to set up a standard Laravel installation.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To complete this recipe, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: In the Laravel `/app` directory, create a new directory named `custom`, which
    will hold our custom classes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `custom` directory, create a file named `MyShapes.php` and add this
    simple code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `/app/start` directory, open `global.php` and update `ClassLoader` so
    it looks like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we can use that class in any part of our application. For example, if we
    create a route:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Most of the time, we will use Composer to add packages and libraries to our
    app. However, there may be libraries that aren't available through Composer or
    custom libraries that we want to keep separate. To accomplish this, we need to
    dedicate a spot to hold our class libraries; in this case, we create a directory
    named `custom` and put it in our `app` directory.
  prefs: []
  type: TYPE_NORMAL
- en: Then we add our class files, making sure the class names and filenames are the
    same. This could either be classes we create ourselves or maybe even a legacy
    class that we need to use.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we add the directory to Laravel's ClassLoader. When that's complete,
    we'll be able to use those classes anywhere in our application.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Creating advanced Autoloaders with namespaces and directories* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating advanced Autoloaders with namespaces and directories
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If we want to be sure that our custom classes don't conflict with any other
    class in our app, we will need to add them to a namespace. Using the PSR-0 standard
    and Composer, we can easily autoload these classes into Laravel.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we need to set up a standard Laravel installation.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To complete this recipe, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Inside the `/app` directory, create a new directory named `custom`, and inside
    of `custom`, create a directory named `Custom`, and in `Custom`, create a directory
    named `Shapes`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Inside the `/app/custom/Custom/Shapes` directory, create a file named `MyShapes.php`
    and add this code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'In the root of the application, open the `composer.json` file and locate the
    `autoload` section. Update it so it looks like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Open the command line and run `dump-autoload` on Composer:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we can call that class by using its namespace. For example, if we create
    a route:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Namespaces are a powerful addition to PHP, and they allow our classes to be
    used without us having to worry about their class names interfering with other
    class names. By autoloading namespaces in Laravel, we could create a complex group
    of classes and never have to worry about class names conflicting with other namespaces.
  prefs: []
  type: TYPE_NORMAL
- en: For our purposes, we're loading the custom class through composer, and the PSR-0
    standard of autoloading.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To further extend the use of our namespaced class, we could use the **IoC**
    to bind it to our app. More information can be found in the Laravel documentation
    at [http://laravel.com/docs/ioc](http://laravel.com/docs/ioc).
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Using Autoloader to map a class name to its file* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
