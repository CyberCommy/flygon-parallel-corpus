- en: Chapter 12. Educating the Customer and Finishing Up
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you have made it so far, thank you! You have done it â�� you've learned with
    me how to tackle web penetration testing, to treat it with the focus and detail
    needed to improve your customers' security posture. Web penetration testing is
    a beast Â and worthy of specialization and mastery. As we've seen in this book,
    there is a bewildering variety of vulnerability types, and the fact that they
    are easy to exploit can make them very easy to take advantage of. Enterprises
    have significant concerns across the entire enterprise, but in a way, their web
    applications are necessarily the most vulnerable aspect. How can they best secure
    the very tools that engage most with users outside their control?
  prefs: []
  type: TYPE_NORMAL
- en: 'Many web application developers and their employers have purchased tools to
    provide safe and secure operations. Good intentions often meet the harsh realities
    of real-world pressures and constraints, and the tool is no sooner purchased before
    its proper operation, maintenance, and upkeep fall by the wayside. Business velocity--the
    speed with which the business adapts and delivers new capabilities â�� pressures
    IT organizations and application teams to move fast; and with inadequate security
    practices there is often a false choice: be secure or be productive. Businesses
    inevitably choose the latter, as it is what pays the bills. Security becomes the
    victim of a false trade-off. Until we can convince teams to bake security in,
    rather than bolt it on, we''ll continue to read about failures at an alarming
    rate.'
  prefs: []
  type: TYPE_NORMAL
- en: Some cynically believe that this is what keeps us in business. If users and
    their employers never clicked on suspicious links, always patched and maintained
    their systems, and only conducted valid business with verified partners, customers,
    and vendors, we'd see a lot less action. We all know this to be a pipe dream.
    The internet is many things, but tidy, orderly, and safe are not some of them.
    As penetration testers, we are uniquely suited to help drive a more holistic strategy
    toward security. We can both ascertain the current state while providing recommendations
    and guidance toward a safer end. Doing this isn't easy â�� it forces us to engage
    many skills we all would likely rather forget, but communications skills, oral
    and written, are what deliver the findings and recommendations with impact.
  prefs: []
  type: TYPE_NORMAL
- en: 'The end report is certainly what most of us will focus on, but predictable
    and informative status reports to the customer make or break the process. I will
    do my best to arm you with some resources that can help frame best practices and
    craft your reports. We''ll discuss how we can use both status reports as well
    as deliverables to tell the right story and help our customers find peace. We''ll
    cover some other aspects as well, such as offering advice, delivering bad news,
    and even when to repeat these assessments or how to drive a pen test plan for
    diligent, continuous improvement. In this chapter, we will go through the following
    topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Weighing methods of validating configurations ,and maintaining their relevance
    in spite of fluid business requirements.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Providing guidance as to how to audit code versions and configuration health.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Discussing segmentation, role-based access control, and change management.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Discussing the presentation and follow-up steps to any good web penetration
    test. We will also discuss the competitive landscape and complementary tools in
    relation to Kali Linux.Â
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Comparing some competitive products to Kali Linux that may, in fact, be helpful
    in assessing web application security.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finishing up
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: All the best work in the world won't mean anything to the customer unless it
    is turned into comprehensive, actionable, and insightful guidance. Many technical
    professions have been ended prematurely or stunted due to an inability to communicate
    the work. Besides permission and intent, the other thing that separates us from
    the black-hat hackers is our communication with the customer. We must be teachers
    and coaches â�� for many of our customers, this will be a scary and gut-wrenching
    process, but we need to deliver guidance that they can use to improve.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: What about clean-up? Well, web application pen testing is (for the most part)
    devoid of permanent changes to the environment. In most of the exploits that we
    have used, a simple cache wipe of the browser or scrub of the fields on the web
    frontend will return the application to its normal operating state.
  prefs: []
  type: TYPE_NORMAL
- en: Every parent utters the phrase *It's not what you say but how you say it*Â at
    least a few times a week to their children. Kids need to tune their intuition
    for the crowd, and parents are the tuners. Very similarly, we must *know our audience*.Â Much
    of the content and level of detail will be dictated not just by the scope outlined
    in the **Statement of Work** (**SOW**) but by the aptitude of the customer's own
    team. Talking over their head will alienate and offend their staff, and render
    your chances of a follow-on test or repeat business slim-to-none. Some customers
    will also be quite defensive or untrustworthy, and we must remember that their
    own careers may hinge on these findings. It is for these reasons that we want
    to ensure that nothing delivered in the final report is a surprise. We want our
    customers and stakeholders to be well prepared for the findings and ready to take
    on the constructive criticism without fear. We can do this by delivering the news,
    good and bad, in a few different ways and throughout the process.
  prefs: []
  type: TYPE_NORMAL
- en: Pen testers would be well advised to provide a measured and level-headed approach.
    Some may be tempted to find problems where they may not exist, in order to appear
    to add value. Â Others may try to *ramp up* the urgency to instill fear in the
    customer and make themselves appear indespensible. I would encourage you to focus
    on real issues, present a calm and consistent demeaner, and work toward quality
    findings versus quantity when reporting back to the target customer. In the end,
    this measured and meaningful interaction will help the customer and both instill
    confidence and garner trust in your abilities.
  prefs: []
  type: TYPE_NORMAL
- en: Avoiding surprises with constant contact
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The first thing we should plan on and commit to with the customer is a cadence
    of status reports and tag-up meetings. Even in black-box tests, we can usually
    give progress reports with an advanced set of findings to help apprise them of
    our progress. This can be presented according to the milestones included in a
    SOW, in terms of any turns or adaptations to the plan as dictated by the target
    environment. However it is done, reports should include significant results or
    impressions, both good and bad. In black-box testing especially, the entire stakeholder
    community (us and them) should be prepared for some variability, as each prior
    phase of testing will often dictate the scope of the next phase.
  prefs: []
  type: TYPE_NORMAL
- en: In general, you should consider both planned and unplanned communications, and
    ideally, craft templates and establish channels for delivering each. Much like
    a doctor's follow-up phone call, we want the customers to know that you and your
    team will reach out at set, times as well as to disclose any worth findings, both
    critical and complimentary of the target environment. Once they know what to expect,
    it can help demystify the process for them and encourage their participation and
    review.
  prefs: []
  type: TYPE_NORMAL
- en: White-box testing running within an organization may not have the same explicitly
    defined contractual documents, but it does not mean that communications should
    fall off. Even internal testing performed on applications throughout the **Software
    Development Life Cycle** (**SDLC**) can reveal critical vulnerabilities, active
    attacks or breaches, and improper behavior. It is critical that the management
    provides a trusted and objective process for internal testers to use to raise
    these concerns. Fostering this conduit maintains an open culture and results in
    a more secure and robust application.
  prefs: []
  type: TYPE_NORMAL
- en: Establishing periodic updates
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Periodic updates are essential to help us establish a rapport and craft a positive,
    constructive narrative with the customer. Our focus should be on helping them
    secure their web applications, and waiting till the end of the process may put
    the customer''s stakeholders on the defensive.Â  We need to be receptive to what
    they are going to see in that final report, to look to it for immediate guidance
    and value. If the leadership already has been prepared with periodic reports that
    key them into the major findings, they will have time to work through any defensive
    instincts they may have and instead look forward to the report for next steps.
    These reports do not need to be highly detailed, but rather should highlight key
    findings, the status against the SOW, recap any ad-hoc reports that we generate
    for critical findings, and provide a look-ahead.Â  A rough outline of this process
    may include the following sections:'
  prefs: []
  type: TYPE_NORMAL
- en: Highlighted findings
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Status update/progress of testing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Praise (what the customer is doing right)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Suggestions (make them aware of issues)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Schedule and budget status
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The way forward/what to expect
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Your own team's templates will vary and may even be custom-tailored based on
    the needs of the customer, but presenting this information to them in a digestible
    form helps them see the value in the test, begin planning their remediation, and
    helps to avoid any surprises â�� everything in the final review and debrief should
    be just that, a review.
  prefs: []
  type: TYPE_NORMAL
- en: White-box testing reports will often be included in a formal deliverable just
    as any other verification and validation testing artifacts would. If those deliverables
    are not established standards, then one should be created to ensure the consistent
    application of testing principles. Consistency, in all forms of pen testing and
    reporting, will be essential in helping to train the sponsoring organization and
    their developers on how to prioritize and respond to findings.
  prefs: []
  type: TYPE_NORMAL
- en: When to hit the big red button
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Even with periodic reports to the customer, there will be times when a finding
    or result requires immediate disclosure and a work stoppage until given the go-ahead.
    Critical flaws that could result in data exfiltration, the discovery of an active
    attack, or even human resources related events (the discovery of a mole, insider
    threat, inappropriate content, and so on) should be disclosed immediately. In
    the course of developing the rules of engagement, you or the customer may add
    additional conditions based on the target environment's importance or role that
    also kicks off an immediate notification.
  prefs: []
  type: TYPE_NORMAL
- en: A **non-disclosure agreement** (**NDA**) obliges you to keep the test entirely
    within strict confidence, but it is these critical, real-time notifications that
    will require you to be at your best and most diligent. The issues that would initiate
    a disclosure and test-stoppage are typically critical enough, and confidentiality
    is of paramount concern. While planned correspondence may be provided via e-mail
    and secure file shares, depending on the customer's business, it may be necessary
    to establish even more secure processes with them. I would recommend that this
    process be established before final approval to help all sides securely deliver
    this sort of news, whether by in-person meetings, encrypted e-mail or messaging,
    or a bonded courier.
  prefs: []
  type: TYPE_NORMAL
- en: Liability is our next consideration. Timely and complete disclosure to the sponsoring
    customer is important because the implications are often threatening or damaging
    to their business, employees, or clients. In dire situations, your customer may
    also be looking for reasons to project their fear or hold someone else responsible.
    Immediate, complete, and thoughtful disclosure ensures that we are not legally
    liable. They may lash out, but a calm and consistent demeanor can help defuse
    these situations. We need to clearly communicate the difference between facts
    and stated opinions, and in these cases, focus more on what is known than on our
    own perspectives. Once the customer has cooled down or assimilated the information,
    they can prompt us for our interpretation and expert opinions.
  prefs: []
  type: TYPE_NORMAL
- en: Weaving optimism with your action plan
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Writing the capstone penetration testing report for your assessment of the web
    application is the most important phase of the job. You might be thinking, *But
    Mike, you just told us there should be no surprises, what could be left?* While
    you are correct in that, no findings with major implications should be news; here
    in this report your team's recommendations can finally be captured. These recommendations
    are your assessments of the risks and priorities, which are not only welcome here,
    but expected. Your expertise is why you were hired for the gig, and rightfully
    so â�� this insight will help them climb into a more mature, rigorous security
    practice.
  prefs: []
  type: TYPE_NORMAL
- en: Good guidance on what the content of your final report should look like can
    be gleaned by looking over onto some of the repositories of publicly available
    pen test reports. While most of the reports listed at sites such asÂ [https://github.com/juliocesarfort/public-pentesting-reports](https://github.com/juliocesarfort/public-pentesting-reports)
    are not explicitly for web applications alone, the sections and general flow are
    instructive and can help in preparing your own team's templates. SomeÂ web application-specific
    ones are the automated test reports provided by **Dynamic Application Security
    Test** (**DAST**) vendor **Veracode** ([www.veracode.com](http://www.veracode.com),
    seen in the following screenshot) and consulting firms such asÂ **CST** ([http://www.cstl.com/CST/Penetration-Test/CST-Web-Application-Testing-Report.pdf](http://www.cstl.com/CST/Penetration-Test/CST-Web-Application-Testing-Report.pdf)).
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B03918_12_01.png)'
  prefs: []
  type: TYPE_IMG
- en: Sample web application Pen Test report
  prefs: []
  type: TYPE_NORMAL
- en: The sections in the report may be a bundling of automated outputs from scanners
    such asÂ **Arachni**, **Burp Suite**, or **OWASP ZAP**; or they may be an amalgamation
    of outputs from multiple testers and their collaboration. Tools such asÂ Apache
    OpenOffice and Microsoft Office are still the standard for pulling inputs together.Â
  prefs: []
  type: TYPE_NORMAL
- en: 'A typical outline may look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Cover page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Executive summary
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Table of contents
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Background of test
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Methodology
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Test team
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Highlights, scoring, and risk recap
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Risk register
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Guidance/action plan
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Detailed findings
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Appendices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Definitions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Vulnerability References
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tools and resources
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Recon, scanning, and enumeration data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Code used
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Linked files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The executive summary
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The executive summary should do a good job of providing a high-level, quantifiable
    assessment (overall score and major metrics) while giving the management the high-level,
    impactful summary it needs to communicate the test's findings and way forward
    to all of the non-technical folks.
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Information on the test methodology can help the customer frame the findings
    and will reinforce that your team's testing was in accordance with the SOW and
    rules of engagement more explicitly captured in the contract phase. This is an
    opportunity to summarize and outline any deviations or expansions of the scope,
    helping ensure they understand what was actually performed.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This is also a fine place to discuss the team (if applicable) and ensure that
    the customer knows who contributed to the testing and report, and who is bound
    by the terms of the contract.
  prefs: []
  type: TYPE_NORMAL
- en: Highlights, scoring, and risk recap
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Several of the tools we've discussed will do a pretty good job of assessing
    the severity of a vulnerability as compared to common test frameworks or ranked
    lists (such as the OWASP Top 10 that has helped to guide our work here). Some
    of those artifacts, such as the sample Arachni report output shown in the following
    screenshot, can help provide an objective ranking of the vulnerabilities and guide
    further testing. What these rankings cannot provide, however, is the target environment's
    context. Some highly rated risks, for instance, may have limited impact in a particular
    target due to the sparing use of that technology or the fact that it is only deployed
    in a low-privilege function or sub-portal. While it may be tempting to lead with
    these ready-made artifacts, more should be done to ensure that the customer understands
    their significance to their circumstances.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B03918_12_02.png)'
  prefs: []
  type: TYPE_IMG
- en: Sample Arachni Output â�� Good Starter
  prefs: []
  type: TYPE_NORMAL
- en: More on risk
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'Presenting risks and Risk Management is a topic by itself. I have helped implement
    Risk Management efforts in the US Department of Defense development programs and
    in those we prescribed to the Office of the Deputy Assistant Secretary of Defense
    for Systems Engineering''s Risk, Issue, and Opportunity Management Guide for Defense
    Acquisition Programs ([http://bbp.dau.mil/docs/RIO-Guide-Jun2015.pdf](http://bbp.dau.mil/docs/RIO-Guide-Jun2015.pdf)).
    This is far from the only acceptable methodology â�� there are many that exist,
    and you''d be well served to research a RM approach that is akin to the one used
    by a consensus of your typical customers. The general flow that the DoD uses is
    shown in the following screenshot, with portions of the cycle that we have the
    opportunity, as testers, internal or external, to impact:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B03918_12_03.png)'
  prefs: []
  type: TYPE_IMG
- en: US DoD Risk Management Flow
  prefs: []
  type: TYPE_NORMAL
- en: 'If anything, I have learned that risk management is worthy of the focus that
    many universities have now given it. In managing risk (and issues or opportunities,
    for that matter), it is beneficial to have a well-defined definition of each grade
    of both potential impact and likelihood. That being said, most risk methodologies
    in IT and applications in particular focus on two major criteria:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Potential impact**: Some organizations will measure this in terms of damage,
    mitigation cost, a percentage of the cost of being affected, or some other quantifiable
    effect. This is what most people without RM experience will focus on. This is
    the pain involved with an event happening, as in: *Getting struck by lightning
    can be very harmful, most often fatal â�� ouch!*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Probability of occurrence**: Overlooked by many without appropriate focus
    and an aware process, the chance of the pain actually being felt is its probability
    of occurrence. This can be measured as a percentage or frequency (chance per occurrence)
    of some other event (per *x* connections, per account, and so on).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding RM in your customer's eyes is not just a nice way to show you
    care, but essential to understanding how to frame your report. If you can help
    present the findings in a language and context they understand, they will be much
    more likely to bring the constructive criticism onboard and view the input as
    helpful.
  prefs: []
  type: TYPE_NORMAL
- en: Guidance - earning your keep
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Professional penetration testing may be more fun when we're hacking a target
    and pivoting through a particularly challenging environment, but we don't get
    paid for the fun. We get paid to deliver guidance and actionable intelligence.
    Customers hire us because they, or someone compelling them to hire us, realize
    that they cannot hope to be secure without independent verification. The guidance
    we provide should be factually grounded and is best presented as a summary of
    impressions followed by an action plan. Some customers may dictate how that should
    be presented, but in the absence of that you will need to consider how best to
    present the findings.Â
  prefs: []
  type: TYPE_NORMAL
- en: More comprehensive testing for a new customer with a heavy load of vulnerabilities
    may benefit from a time-phased action plan that recommends tackling areas of the
    application in order of greatest need. In these cases, it is helpful to refer
    them to remediation options and expected levels of effort. Customers will vary
    greatly, but in general, you'll want to refrain from recommending staffing-related
    issues unless they can be viewed as constructive or will help justify better preparation
    of the staff. Some customers may request the staff to be part of the evaluation,
    however, so your mileage may vary.
  prefs: []
  type: TYPE_NORMAL
- en: Lighter or periodic tests may simply present findings from highest perceived
    severity to lowest, without regard to their interdependence.Â  This might be more
    acceptable in cases where this is a follow-on to a previous test or where the
    results will be factored into another planning effort. White-box testing results
    will often match directly to a larger verification and validation approach or
    document, so it is quite possible that guidance in this case will only be warranted
    if the overarching specification that the pen test is being run against requires
    modification or clarity.
  prefs: []
  type: TYPE_NORMAL
- en: Detailed findings
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Depending on the scope of the report, this section may or may not be present,
    but is almost a given for a black box or Red Team testing. You will want to ensure
    that you explain the vectors chosen, the results gleaned, and the relevance to
    the scoring given. Screenshots and code snippets may be required for customers
    who desire to repeat tests and verify remediation, so you'll want to be certain
    to capture copious logs, screenshots, and catalog any scripts and configurations.
    To that end, there are some tools that can assist and are built right into Kali's
    distribution image or are available with minimal effort to get you up-and-running.
  prefs: []
  type: TYPE_NORMAL
- en: A good note application along the lines of Evernote or the included Keepnote
    will go a long way toward helping you document anything the other tools leave
    out. I find that these tool choices and the workflows they support are as varied
    as the people deploying them, so I am in no way going to judge if you decide on
    something else. What matters in the end is that the report can be both printed
    and delivered electronically in formats our customers can consume. For these reasons,
    most testers will still find that Apache OpenOffice ([https://www.openoffice.org/download/other.html](https://www.openoffice.org/download/other.html))
    for Kali,or the Microsoft Office suite on a Mac or Windows PC will be best suited
    for assembling the final report, and that printing to PDF can be accomplished
    withÂ Adobe or the user's favorite office suite.
  prefs: []
  type: TYPE_NORMAL
- en: The Dradis framework
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Collaboration and documentation tools such as the Ruby-based **Dradis****Framework**Â are
    shown in the following screenshotÂ ([https://dradisframework.com/ce/](https://dradisframework.com/ce/)).
    Dradis can be a huge help to us in tying all of the tool sets we employ in our
    testing together, as well as providing an Evernote-like documentation interface.
    Using tools like this keeps us organized, which both ensures complete coverage
    and helps craft a professional report.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Community Edition is free for use and powerful in its own right, but the
    professional edition (priced at $79/month at the time of this writing) includes
    some fantastic features that help manage multiple projects at a time, take advantage
    of templates and automated tool imports, and technical support (a comparison can
    be seen here between the free and premium versions: [https://dradisframework.com/pro/editions.html](https://dradisframework.com/pro/editions.html)).
    Templates, methodologies, and sample reports for OSCP, OWASP, PTES, and HIPAA
    are available here for Dradis, with some features only becoming usable in the
    Pro version: [https://dradisframework.com/academy/industry/compliance/](https://dradisframework.com/academy/industry/compliance/).'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B03918_12_04.png)'
  prefs: []
  type: TYPE_IMG
- en: Dradis Framework with OWASP Template
  prefs: []
  type: TYPE_NORMAL
- en: Dradis is a fantastic alternative, but far from the only tool available, even
    within Kali itself!
  prefs: []
  type: TYPE_NORMAL
- en: MagicTree
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Along the same lines as Dradis is a Java application called **MagicTree** ([http://www.gremwell.com/magictreedoc](http://www.gremwell.com/magictreedoc)
    ) from Gremwell. MagicTree is actually a great tool for centrally delivering many
    of the tests you learned about in earlier chapters from a central data collection
    application. As a tool, MagicTree has a lot of great features, but I found that
    it can be a little picky when delivering commands normally run outside. It also
    requires an export to see what produced artifacts will look like, so unless you
    are able to grasp how the X-Path variable insertion and raw data collected are
    going to look intuitively, you are going to need to use trial and error to determine
    what works best within MagicTree to you. Unlike Dradis, MagicTree is not open
    source but is available fully featured for free:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B03918_12_05.png)'
  prefs: []
  type: TYPE_IMG
- en: Â MagicTree by Gremwell
  prefs: []
  type: TYPE_NORMAL
- en: Other documentation and organization tools
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Other niche and even manual documentation approaches are certainly out there,
    and I would encourage you to look into using a few of them to help round out your
    report and documentation processes. I have always enjoyed working with **Maltego**,
    for instance, and I find it indispensable for helping organize and present the
    **Open Source Intelligence** (**OSINT**) I deliver in reports. **Maltego Casefile**
    is a wonderful way to present fused OSINT and Social Engineering results, and
    even provides fields to capture likely passwords and similar ones. In the following
    screenshot, we can see that I am highlighting a person within the company and
    seeing how they are interrelated to other entities (locations, hosts, other people,
    and so on). Like a crime movie's yarn chart showing how the mafia soldiers report
    to the boss, this can help our customers visualize quickly how easily and accurately
    a hacker can map the organization.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B03918_12_06.png)'
  prefs: []
  type: TYPE_IMG
- en: Maltego Casefile organizes SET and OSINT outputs.
  prefs: []
  type: TYPE_NORMAL
- en: Graphics for your reports
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It is likely that you will be using Kali as a virtual machine, but on the off-chance
    you have a barebones installation, you may need to look into screenshot tools
    to assist you in gathering the visual proof of your conquests in pen testing.
  prefs: []
  type: TYPE_NORMAL
- en: Kali Linux has limited options built in, includingÂ **recordmydesktop** and
    **cutycapt**. I prefer tools such asÂ **Screenshot** and **Shutter**. Screenshot
    or a similar tool such asÂ **Scrot** are pretty basic, butÂ Shutter gives you
    some options and a fancier management interface. If I need to work with the picture
    I leverage,Â GIMP ([https://www.gimp.org)](https://www.gimp.org) is a fully-featured
    editor that has installs for most platforms, Kali included. Again, this is where
    your own background and style will come into play, so by all means chart your
    own course!
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Keep in mind, these skills will also pay off in crafting your rogue honeypots
    and water-cooler attacks, allowing you to forge realistic yet malicious portals
    to help you compromise targeted users and further your testing â�� talk about
    dual use!
  prefs: []
  type: TYPE_NORMAL
- en: Bringing best practices
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: One of the best parts of being involved in cyber security, offensive in particular,
    is that we get to bring experience and know-how from our training and past body
    of work. All the blood, sweat, and tears aren't for naught; those scars actually
    will come in handy. Our test's sponsors are in a tough spot. Working in the target
    environment, they don't often have the perspective that comes with seeing environments
    across verticals, architecture types, and sizes. Their staff, in many cases, will
    not have current training in application security that can help them keep up with
    the trends and upcoming threats.
  prefs: []
  type: TYPE_NORMAL
- en: 'So now, for the fun part, we need to maintain our certifications, continually
    refresh our knowledge base, and find ways to bring lessons learned from earlier
    engagements. Conferences through SANS, ISSA, OWASP, and others are well worth
    attending â�� most provide training and exposure to many new tools and techniques.
    Keeping up online should go without saying: Twitter, LinkedIn, and a huge collection
    of blogs can be great sources of intel on zero-day vulnerabilities and the most
    pressing news that spooks our customers and justifies our existence.'
  prefs: []
  type: TYPE_NORMAL
- en: So how do we provide the help they seek? Where do we interject the experience
    that got us hired? Let's take a look at some ideas for how we can make our report
    and briefs more useful to the team.
  prefs: []
  type: TYPE_NORMAL
- en: Baking in security
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Application teams and IT organizations in general have been faced with an impossible
    trade-off: be secure or be productive. A lot of this stems from the good old days,
    where security was bolted onto an architecture or application long after it was
    developed and deployed. As applications have become more complex, and their importance
    has skyrocketed, bolt-on security approaches are no longer cutting it. When the
    application is unaware of security and the security solutions are simply layered
    over the top, that disconnect hampers visibility and forces someone to actually
    identify issues manually before adjustments are made. As seen in theÂ following
    screenshotÂ (sourced from [https://blogs.msdn.microsoft.com/usisvde/2012/03/09/windows-azure-security-best-practices-part-3-identifying-your-security-frame/](https://blogs.msdn.microsoft.com/usisvde/2012/03/09/windows-azure-security-best-practices-part-3-identifying-your-security-frame/)),
    even a straightforward web application has too many points of enforcement not
    to have the application''s security baked into the architecture. Not shown in
    this illustration is the simultaneous need to actually sense and correlate events
    at each step, and to combine those with intel gleaned from other components in
    the architecture to identify when attacks are occurring.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B03918_12_07-1.png)'
  prefs: []
  type: TYPE_IMG
- en: Points of Enforcement for an application, according to Microsoft
  prefs: []
  type: TYPE_NORMAL
- en: Different frameworks and hosting paradigms will have different needs and strengths,
    but the customer should understand what additional measures need to be developed
    alongside the business requirements to address any gaps in the coverage. Depending
    on your relationship with the customer, it may be necessary to drive them towards
    this understanding, or to work within their understanding to help them view their
    application objectively.
  prefs: []
  type: TYPE_NORMAL
- en: Honing the SDLC
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: White box testing can and should occur throughout the **Software Development
    Life Cycle** (**SDLC**), issues discovered early in the requirements or design
    phases can be corrected much more cheaply and rapidly than late in the SDLC, and
    in some programs that can be a 100x increase in remediation costs. Closely coupled
    with the RM process discussed earlier, the Security SDLC in theÂ following screenshotÂ is
    championed and documented by OWASP ([https://www.owasp.org/index.php/Secure_SDLC_Cheat_Sheet](https://www.owasp.org/index.php/Secure_SDLC_Cheat_Sheet))[Â and
    should be a standard practice:](https://www.owasp.org/index.php/Secure_SDLC_Cheat_Sheet))
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B03918_12_08.png)'
  prefs: []
  type: TYPE_IMG
- en: The Security SDLC from OWASP
  prefs: []
  type: TYPE_NORMAL
- en: Obviously, this needs to me more than a written policy; it requires that security-focused
    developers, or better yet, penetration testers, are on staff to assist throughout.
    The security SDLC can lay out the extent to which the white-box testing coverage
    exists, and it should also include any external gray or black box test *gates*
    as appropriate to ensure security is driven into the application.
  prefs: []
  type: TYPE_NORMAL
- en: The most mature processes can even include continuous testing and always-on
    dashboards when integrated within the greater development environment. We should
    also keep in mind that the tools we use as a potential outside consultant will
    likely differ from the tools their development team or in-house penetration testers
    are using, and that is almost, always a good thing.
  prefs: []
  type: TYPE_NORMAL
- en: Some companies such as Veracode ([http://www.veracode.com](http://www.veracode.com))
    provide extensive detail around how they see testing best conducted within their
    product's workflow. In their high-level methodology shown in theÂ following screenshot,
    you can see that they have tried to wrangle all of the different aspects of training--people,
    development phase, roles, the components of the application, and so on. While
    these templates do offer some value, especially early in your practice, they are,
    by no means, exhaustive and compulsory; you can craft and modify your own internal
    process, and it is likely that your customers have done the same to keep us on
    our toes. The key here is to match our customer's processes with the tools they
    are deploying. They will find that their toolsets are much more productive when
    operating as the developers intended.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B03918_12_09.png)'
  prefs: []
  type: TYPE_IMG
- en: Veracode's own Testing Lifecycle
  prefs: []
  type: TYPE_NORMAL
- en: Role-play - enabling the team
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: While engaged in the process of testing and educating the customer on their
    environment, you also have a chance to mentor and share insights. The staff developing,
    maintaining, and operating the application often does not receive the training
    required to bear such a burden. Roles may also be fuzzy, I quite commonly run
    into customers who, despite operating an environment for many years, still do
    not have a clear separation of powers and responsibilities. This last point is
    far and away the biggest indicator of systemic inefficiencies and security gaps
    that I encounter. For these reasons, it is important that you understand the hierarchy
    as it exists today, and that you help the customer fill in those blanks, as you
    identify additional areas or disciplines requiring their attention.
  prefs: []
  type: TYPE_NORMAL
- en: 'Their own response to events is something that is helpful to understand. I
    get a lot of mileage out of the **RACI Matrix** (**Responsible**, **Accountable**,
    **Consulted**, andÂ **Informed** - [http://racichart.org](http://racichart.org))
    in helping customers to understand where an event or process might fall apart.
    We''re most concerned with the remediation of our findings, but we can deploy
    this technique for any IT process to assist them in getting their heads wrapped
    around the general flow and roles. In theÂ following screenshot, we see an Incident
    Response flow, but Business Continuity, Disaster Recovery, vulnerability remediation,
    and many others can be articulated using this sort of quick-and-dirty exercise:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B03918_12_10.png)'
  prefs: []
  type: TYPE_IMG
- en: Sample RACI Matrix for IR
  prefs: []
  type: TYPE_NORMAL
- en: Roles are also needed to ensure that proper administrative, audit, and user
    access are defined and enforced within the environment. Many of the findings you
    will reveal can be mitigated with conscientious **Role-based Access Control**
    (**RBAC**) and segmentation of responsibilities to ensure the environment benefits
    from the concept of least privilege. If the customer's environment does not yet
    implement RBAC, this should always be offered as a best-practice in your recommendations.
  prefs: []
  type: TYPE_NORMAL
- en: Picking a winner
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Each of our recommendations needs to steer us clear of ambiguity, or we should
    not offer it at all. These recommendations can come from our experience, but we
    should bolster them whenever possible with the recommendations of the software
    component''s creators, authorities, and any other validated intelligence from
    security analysts who have provided peer-reviewed guidance. The abundance of security
    research teams can be bewildering, but the most highly regarded teams have world-wide
    breadth and well-understood track-records that help to guide the industry towards
    better policy and architecture.Â  Some of the best sites to monitor and check
    with during breaches are listed here:'
  prefs: []
  type: TYPE_NORMAL
- en: 'NIST: [https://nvd.nist.gov](https://nvd.nist.gov)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'MITRE: [https://cve.mitre.org](https://cve.mitre.org)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'US CERT: [https://www.us-cert.gov/ncas](https://www.us-cert.gov/ncas)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Google: [https://research.google.com/pubs/SecurityPrivacyandAbusePrevention.html](https://research.google.com/pubs/SecurityPrivacyandAbusePrevention.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Dark Reading: [http://www.darkreading.com/vulnerabilities-threats.asp](http://www.darkreading.com/vulnerabilities-threats.asp)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'ThreatPost: [https://threatpost.com/category/web-security/](https://threatpost.com/category/web-security/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When presenting options to the customer to resolve a finding, we should strive
    to be as unambiguous as possible. Architectural changes in particular demand clear
    and concise justification and an action plan. You may find that your customers
    are looking for less of a recommendation and more awareness; you should clarify
    the desired response up front. I would also recommend internal peer review of
    your report with the rest of your team, if applicable, as the more eyes on the
    final product, the better the end result will be.
  prefs: []
  type: TYPE_NORMAL
- en: Plans and programs
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Our customers would all benefit greatly from having a standard process understood
    by all that helps them not only test for and detect vulnerabilities but also allows
    them to prioritize, address, and document their responses. Smaller application
    groups will be unable to dedicate resources to this particular endeavor, and so,
    in many ways, they need to seek out ways in which they can combine several necessary
    but resource-demanding processes into a single program. OWASP addresses this with
    its program called the **Comprehesive, Lightweight Application Security Process**
    (**CLASP**, [https://www.owasp.org/index.php/CLASP_Concepts](https://www.owasp.org/index.php/CLASP_Concepts)).
    OWASP envisioned this as an *activity-driven, role-based set of process components
    whose core contains formalized best practices for building security into your
    existing or new-start software development lifecycles in a structured, repeatable,
    and measurable way*.
  prefs: []
  type: TYPE_NORMAL
- en: As seen in the following screenshot, this process is structured around ever-deeper
    views into aspects of a company's SDLC and integrate Risk Management, change management,
    resource planning, and role assignments while they are at it.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B03918_12_11.png)'
  prefs: []
  type: TYPE_IMG
- en: OWASP's CLASP Framework for Vulnerability Management
  prefs: []
  type: TYPE_NORMAL
- en: OWASP has more recently focused on the development of general guides rather
    than prescriptive programs, noting that more detailed and rigid programs can be
    harder to adopt, and has ignored the installed processes already in place. The
    **Application Security Guide** for CISOs ([https://www.owasp.org/index.php/Application_Security_Guide_For_CISOs](https://www.owasp.org/index.php/Application_Security_Guide_For_CISOs))
    is the culmination of those efforts, and it provides guidance across people, processes,
    and technology for a more security-aware business. Along with these guidelines,
    the **Software Engineering Institute's Capability Maturity Model** (**SEI CMM**,
    [http://cmmiinstitute.com](https://www.sei.cmu.edu/cmmi/)), the **Build Security
    In Maturity Model** (**BSIMM**, [https://www.bsimm.com](https://www.bsimm.com)),
    and the **Open Software Assurance Maturity Model** (**SAMM**, [http://www.opensamm.org](http://www.opensamm.org))
    are all compatible with the new guide, giving CISOs and their applications, networks,
    and security teams the freedom to implement these best practices and assimilate
    these ideas as they see fit.
  prefs: []
  type: TYPE_NORMAL
- en: More on change management
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '**Change Management** (**CM**) is one of those processes that anyone in IT
    loves to hate, but it serves a critical role. CMÂ provides a structure that all
    changes to an operational or production environment must be conducted within.
    With this process in place,Â all stakeholders theoretically are aware of changes
    and able to weigh in appropriately. We have all been in situations where that
    process was either too lax (and things were missed) or too rigid (people looked
    to avoid it or progress ground to a halt). I think we can all agree that CM is
    needed, and that vulnerability remediation and breach response are no exceptions.
    That being said, we need to ensure that CM processes are agile enough to allow
    for decisive actions to be taken in the name of security, while ensuring that
    all affected parties have bought in.'
  prefs: []
  type: TYPE_NORMAL
- en: Automate and adapt
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Proactive security policies are something we should encourage, but haven't caught
    on with enough customers. This is an issue with smaller customer groups. Organizations
    that invest in automated toolsets and vulnerability remediation are one step ahead
    of the game, and many commercial vendors offer solution sets that can be integrated
    automatically within an application's environment, and provide continual analysis
    with intelligence feeds.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open source tools also help in this regard, but there are several ways in which
    automated tools actually get deployed:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Static Application Security Testing**Â (**SAST**) usually focuses on the
    earlier phases of the SDLC and concentrates on code and module use as more of
    a white-box testing tool. Source Code Analysis is the most-prevalent of the SAST
    methods, and because it is so closely linked to the code itself, these tools are
    usually integrated within the development environment and sometimes provided by
    the same software vendor. These tools actually inspect the code against known
    vulnerabilities and best practices, flagging the offending snippets. Again, heavy-hitters
    such as IBM, HPE, and Veracode help in finding the issues earlier, which makes
    fixing them cheaper and faster. A great list can be found atÂ [https://www.owasp.org/index.php/Source_Code_Analysis_Tools](https://www.owasp.org/index.php/Source_Code_Analysis_Tools).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Dynamic Application Security Testing**Â (**DAST**) is focused on the latter
    portions of the SDLC, where a near-representative application is in place and
    can be probed and assessed much like what we accomplished with Arachni for black-box
    testing. These tools, much like the bulk of our Kali-based suite, work on the
    fringes of the application to scan, enumerate, and manipulate the requests and
    responses to diagnose issues. Because of that, these tools don''t have the potential
    to catch quite as much as SAST, but they better emulate an outsider threat. We''ve
    used some of these already; Tenable and Rapid7 seem to be the market leaders here,
    but some additional options are listed atÂ [https://www.owasp.org/index.php/Category:Vulnerability_Scanning_Tools](https://www.owasp.org/index.php/Category:Vulnerability_Scanning_Tools).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Interactive Application Security Testing**Â (**IAST**) is a relative newcomer
    to the arena, and uses agents in the application itself to help identify vulnerabilities
    in the real-time use. The unique positioning of the tool''s sensing agents make
    it able to address much of what both SAST and DAST do in one suite. DAST and SAST,
    when used, are often used together to ensure both spectrums of flaws are unmasked,
    while IAST is already accomplishing this. Many of the established SAST/DAST vendors
    are entering into this market or quickly migrating their solutions to provide
    this sort of capability, while trying to minimize the performance impact that
    is implicit in running these agents.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Mobile Application Security Testing**Â (**MAST**) is like IAST for mobile
    devices, and the agents are distributed among some or all of the mobile clients
    to help provide telemetry.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Run-time Application Security Protection**Â (**RASP**) is also much like
    IAST, except that the agents actually act as a real-time distributed enforcement
    point, helping to heal or patch breached systems in real-time. This technology
    is very new, and the jury is still out on whether they are in general a good thing
    or if they cause a false sense of security. Stalwarts such as HPE, Whitehat Security,
    Veracode ,and IBM have offerings here, but new companies such as Immunio and Contrast
    are also making waves in this area.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Our testing should not take these tools for granted, but should complement them
    and verify their efficacy when both toolsets are implemented correctly. Some of
    these vendors are even branching out into automation with other elements in the
    environment, with companies like Imperva now touting that their **Web Application
    Filtering** (**WAF**) products work in real time with vulnerability scanners to
    stop threats in their tracks.
  prefs: []
  type: TYPE_NORMAL
- en: Assessing the competition
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Many of the DAST tools we discussed are available and can challenge those we've
    used in Kali (Arachni, Nikto, Burp, ZAP, and so on) for use in our preferred pen
    testing toolkit. I would assume everyone reading this book is accustomed to making
    their own choices based on how best they like to work, so in addition to all of
    the tool options out there, I thought it would be helpful to discuss some of the
    alternate operating systems and tool suites that you may want to evaluate before
    going back to Kali â�� after all, it is always nice to see how good we have it.
  prefs: []
  type: TYPE_NORMAL
- en: Backbox Linux
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Backbox ([https://backbox.org/linux](https://backbox.org/linux), as shown in
    theÂ following screenshot) is an Ubuntu-based pen testing and security distribution
    from some Italian folks that may be easier to use than Kali as a general desktop
    with a security slant. It includes many of the same tools, so it really comes
    down to whether you prefer Kali's Debian/XFCE look and feel or that of Backbox's
    more polished Ubuntu layout.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B03918_12_12.png)'
  prefs: []
  type: TYPE_IMG
- en: Backbox Linux home screen
  prefs: []
  type: TYPE_NORMAL
- en: Samurai web testing framework
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Samurai WFT as it is known (as shown in the following screenshot, [http://samurai.inguardians.com](http://samurai.inguardians.com))
    is a Live-CD based version of Ubuntu Linux that focuses all of your efforts on
    their four-phase approach (Recon, Mapping, Discovery, and Exploitation) to web
    app pen testing. Other capabilities are on the backburner, and they weave the
    entire process into their built-in wiki, which acts very much like their Dradis
    stand-in.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B03918_12_13.png)'
  prefs: []
  type: TYPE_IMG
- en: Samurai WTF Menu
  prefs: []
  type: TYPE_NORMAL
- en: Fedora Security Spin
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A lot of attention in the pen testing realm is given to the Ubuntu/Debian fork
    of Linux, and this is probably due to their place as the most widely used desktop
    Linux distributions. That doesn't mean you can't use some classic Red Hat/Fedora
    stuff too! Fedora Security Lab is a Spin (customized branch) of Fedora that blends
    in many of the tools we have grown to love and cherish in Kali, but recompiled
    and managed in an RPM-based world.Â  If Red Hat, Centos, or Fedora are your thing,
    you can easily get up-and-running on Fedora Security Spin ([https://labs.fedoraproject.org/en/security/](https://labs.fedoraproject.org/en/security/),
    as shownÂ next).
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B03918_12_14.png)'
  prefs: []
  type: TYPE_IMG
- en: Fedora Security Spin/Lab
  prefs: []
  type: TYPE_NORMAL
- en: Other Linux pen test distros
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If the preceding options don''t meet your needs, there are a slew of others
    to choose from. Here is a small list:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Knoppix-STD: [https://s-t-d.org](https://s-t-d.org)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bugtraq:Â [https://archiveos.org/bugtraq/](https://archiveos.org/bugtraq/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Weakerth4n: [http://www.weaknetlabs.com](http://www.weaknetlabs.com)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'CAINE: [http://www.caine-live.net](http://www.caine-live.net)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What About Windows and macOS?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Well, this book was all about using Kali for web app pen testing, but I would
    be remiss if I didn't mention that both the Windows and macOS platforms are capable
    of running many of the tools we have discussed, or running something similar.
    Burp Suite, Metasploit, Arachni, and so on, all have ports to both platforms,
    as do standard tools such as Nmap and Nikto. In short, if you just can't bear
    to run Linux, or need something in a pinch, these operating systems will do. Don't
    expect a lot of love at Defcon or Blackhat conferences though â�� they tend to
    be purists.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Web application penetration testing is deep, complex, and always changing. On
    the other hand, it is also essential and of high value to all businesses deploying
    web applications these days (that is, all businesses). It is for these reasons
    that we must be ready to help our customers tackle their application's security
    and avoid becoming front-page news. Remember, we're not only testing the platform,
    but we are often clients of other applications, and I would hope that the web
    applications I am using are being tested rigorously and that the findings are
    being treated with proper care.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we took a step back from the testing itself and discussed how
    we can present the findings to move our customers one step closer to that most
    noble of goals, *being secure*. We saw how not only our reports and communications
    can help, but the establishment of a security program and processes that clearly
    define *well, what happens now?* Â By doing our job well, we can help ward off
    the breaches and compromises that plague society today. No one in the world can
    escape potential harm, so it falls to us to make a difference and when it comes
    to protection.
  prefs: []
  type: TYPE_NORMAL
- en: It should go without saying, but the tools and techniques you are learning in
    this book and your continued practice have two very opposed uses. We need to ensure
    we are using our skills and resources for the betterment of our customers' environments,
    and not for inflicting damage or to hack with malice. Permission and intent should
    both be clear, understood, and documented.
  prefs: []
  type: TYPE_NORMAL
- en: I have truly enjoyed working through this book with you folks â�� it has been
    a wonderful learning experience, as we have gone from conducting general penetration
    testing to now delving into the web application discipline. As we've seen, it
    is a worthy and noble cause, and I hope that this book has helped you improve
    or even master skills that can be used. If anything, I hope you are all left with
    the curiosity to learn and master more, and to go forth and act as an advocate
    for your field. Happy hacking, and good luck!
  prefs: []
  type: TYPE_NORMAL
