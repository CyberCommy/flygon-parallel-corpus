- en: Your First VR App
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Well, four chapters of background. Hopefully you just skimmed the last chapter,
    although I expect you'll be looking at it quite a bit, or the online documentation,
    as you build each of your worlds. Now that you have this background, we are well
    prepared to build the first React VR app. We will start by diving deep into React
    VR components, props, and states.
  prefs: []
  type: TYPE_NORMAL
- en: 'You''ll learn the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Initial world creation/laying down the React VR framework
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up a good background image
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to fix background images so they are truly equirectangular
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding VR components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating new VR keywords (class construction)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Moving beyond hello world - our first VR world
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This actually isn't out first VR app, although we didn't really make the first
    app, the npm installer did. In [Chapter 2](28991838-e243-402c-8dbe-c5be520790b8.xhtml), *Flatland
    and Beyond – VR Programming*, in the *Post Node.JS installation - installing React
    VR* section*,* we installed a simple `Hello World` example.
  prefs: []
  type: TYPE_NORMAL
- en: We will start by creating a new application (directory). But first, let's talk
    about what we are creating, and for that, you get a special prize!
  prefs: []
  type: TYPE_NORMAL
- en: VR world design - or, congrats, you are the new Astronomy Museum curator!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Any project should start, even if informally, with a design. In this case, you've
    received an email telling you "*Congratulations, you have been chosen as the new
    European Space Agency outdoor Museum Curator!*" For your prize, you don't worry,
    no astronomer's night vision will be harmed during this visit. As the museum curator,
    you may pick different art items than I will; in fact, you could go about creating
    a completely new location as well.
  prefs: []
  type: TYPE_NORMAL
- en: If we do a good job at that, we will then move into outer space, and be able
    to be the first art museum in orbit. As we're the first, we'll be the best museum
    in orbit.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the base React VR components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: React VR has a number of base components and code that has to be installed.
    Nearly 19,987 files and 8,111 directories. You don't have to install all of those
    by hand (and the browser won't download all of them, much of this is framework
    that may or may not be packaged). So, how do we install all this?
  prefs: []
  type: TYPE_NORMAL
- en: 'To install everything takes only one step. We will open a Node.js command prompt,
    navigate to whatever directory you want to place your application in, and create
    a new React VR template. Type the following code once you are in the correct directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'This will install a fresh application called `SpaceGallery`. It''ll start installing
    things:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/2a7908aa-f726-4d77-a4bb-babb3578c521.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Note the line:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/d39e5356-6ff7-4f25-8743-159fc829c619.png)These commands frequently
    take a long time to run, but some of the information they show is important.'
  prefs: []
  type: TYPE_NORMAL
- en: In this case, while I was writing the book some of the tools upgraded, and the
    system told me. I generally recommend upgrading as soon as you get one of these
    notices; if you don't, any bugs you submit won't get quite the attention you would
    like, and new features and bug fixes are frequently added.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes, however, you'll get warnings about stuff you don't really have control
    over, like the note about `connect@2.30.2`.
  prefs: []
  type: TYPE_NORMAL
- en: The React VR init command will process through everything it needs to install,
    including dependencies (and there's a bunch) and then get it all installed. When
    it's done, it'll list out everything and then exit. Don't worry, not all of this
    code will be delivered to the client. The actual download is fairly small, compared
    to a VR game engine such as Unity or Unreal.
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/2a03fa16-315c-4086-90b6-ed4be8a21c29.png)'
  prefs: []
  type: TYPE_IMG
- en: The React VR init command will even tell you what to do to start your world.
    If we start this up, we will see essentially the same *hello world* app that we
    saw in [Chapter 2](28991838-e243-402c-8dbe-c5be520790b8.xhtml), *Flatland and
    Beyond – VR Programming*.
  prefs: []
  type: TYPE_NORMAL
- en: First, make sure you've stopped the hello world app that was already running--use
    *Ctrl*+*C*, then `Y` to stop the batch file. Then, using the `cd` command (change
    directory) go into the new `SpaceGallery` directory you created.
  prefs: []
  type: TYPE_NORMAL
- en: If nothing you do seems to change your application, no matter what you try,
    it's quite possible you left an npm package running in some other directory. Kill
    all npm sessions and restart it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Go ahead and start it up:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/4b43f174-48d9-493d-98d4-b664374a70a2.png)If you get the error `yarn
    is not recognized as an internal or external command, operable program or batch
    file`*, *you can ignore this error; Yarn is similar to npm. Advanced users can
    use either one you want; as npm is used in the React VR examples, I''ll use that
    in the course of this book.'
  prefs: []
  type: TYPE_NORMAL
- en: Welcome to open source, sometimes the land of too many options. DuckDuckGo is
    your friend.
  prefs: []
  type: TYPE_NORMAL
- en: Let's change the background to get us in the mood.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the larger world - background image
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is a *do it* chapter - the previous chapters covered the general background
    of VR. However, now we're actually going to change the background (image).
  prefs: []
  type: TYPE_NORMAL
- en: 'The *chess world* you see in the hello world app is actually a panoramic image used
    in the `Pano` statement (in the `index.vr.js ` file). When I first installed React
    VR, for a second I thought it was some of the geometry included in the default
    world. Here is our view of the `SpaceGallery` app (2D browser view):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/d3c5bb0d-db65-4fc4-a228-18f91d9c7ef7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Everything except the hello textbox comes from the `<Pano>` object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This is a specially constructed **spherical panorama** or **equirectangular
    projection**.It is warped to display properly in 360 degrees left/right and 180
    degrees top/bottom (just like latitude and longitude covers +/- 90 and +/- 180,
    a 360x180 spherical image covers an entire sphere).
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is `chess-world.jpg`, which is the file that is included as the background
    every time you make a VR world:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/403f719a-6847-4f89-b9cd-2901d8ff1baa.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'A few things to note:'
  prefs: []
  type: TYPE_NORMAL
- en: This is a very large file. It is 4096x2048 in pixels. Even so, when you look
    around in 3D it will occasionally look grainy. This is because when you look at
    an item on say a fifteen-inch laptop, let's say about 35 centimeters wide, at
    roughly a half a meter distance from your eyes, you are looking at a 1920 pixel
    image and it looks sharp. When you spread that image 360 around you, that equates
    to over 17,000 pixels (2*pi*.5m * 1920 / .35m).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Large files will make for slow downloads, even in today's world.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now imagine if that background was a video. VR has very high bandwidth requirements.
    It's the price of admission.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The file looks warped, but when it is displayed in the browser and in your favorite
    HMD, it will look straight.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This particular image is great for testing due to the straight lines; if you
    look straight down or straight up, everything will match up.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can find 360 degree panoramic photos all over the web, but make sure they
    are spherical 360 by 180 panoramic photos. If they were made by a camera, typically
    things will get weird at the very top and very bottom of the image; many people
    assume you won't look straight down or straight up.
  prefs: []
  type: TYPE_NORMAL
- en: Map projections are also equirectangular images, so you are probably familiar
    with them and how stretched out things are at the poles. If you use a map projection
    as your background it will look like you are inside a globe.
  prefs: []
  type: TYPE_NORMAL
- en: That might be a little weird.
  prefs: []
  type: TYPE_NORMAL
- en: It is a good idea to put some geometry that is part of your world directly underneath
    the viewpoint to cover any discontinuities or aberrations in your spherical panoramas.
  prefs: []
  type: TYPE_NORMAL
- en: It also helps avoid a floating feeling; because the `Pano` is 2D and infinitely
    far away, stereoscopic depth perception wouldn't show how far away the `Pano`
    is. Objects will seem to move oddly against the floor if you move your point of
    view around in the VR world. Physical geometry through the primitives or model
    statements underneath the point of view may help avoid this and make your world
    look more virtually real.
  prefs: []
  type: TYPE_NORMAL
- en: 'As we''re talking about a gallery in space, before we get into orbit let''s
    investigate a few new panoramic photos, and use them to prepare our background.
    Feel free to search the web with your favorite search engine for more panoramic
    photos. Here are the steps I followed:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s go to the **European Space Agency** (**ESO**) and copy a fantastic space
    panoramic image from [http://bit.ly/PanoESO](http://bit.ly/PanoESO).  If you want
    to experiment with different resolutions, they have a range of resolutions on
    this download page. This image is great:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/7a831c5b-921a-4f16-92c7-037350eb686d.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Download this to the `static_assets` folder underneath where we created the
    new application, and then open up `index.vr.js`. In that file, make the change
    to the `Pano` statement:`<Pano source={asset('uhd_vlt_circular_cc_eq.jpg')}/>`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now refresh your browser and we''re already seeing space:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/a2151c2c-4f55-425c-9583-761a1d6a2123.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'You''ll notice the buildings look a little weird. If we continue to look down,
    the background image looks even stranger:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/d66d260e-1841-4dc6-aa3f-d621238789db.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This is because, if you look closely at the original background image, it's
    actually not 360x180 degrees, but more like 360x90. This is very common with cell
    phones taking panoramic images; very few people capture the top and bottom to
    make it a true 360x180\. A true panoramic picture looks just as warped at the
    bottom as at the top. For example, look at the flat chess world image we saw previously.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This is fixable. The fix is to just add a black strip (or background color)
    to the bottom of the original 360x90 panormaic photo, like this:![](Images/499200ee-2f3b-4b99-9c20-af922cfc0b34.jpg)Using
    this technique, you can more or less fix any panoramic image, as long as it's
    at least 360x90; these are fairly common even if not marked as such. Now if we
    put this panoramic image in our `Pano` statement, or VR app looks much better:![](Images/047d68ba-4481-4109-a3fd-72751797a96f.jpg)To
    do this, I used a freeware image viewing/editing program called **Irfanview**, although
    you can use Photoshop or any other image editing software. I would highly recommend
    Inkscape or Gimp; they are full featured and free/open source.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'When we view this in VR and examine the console, we can see an error:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Let's fix that by resizing. Irfanview has a nice fairly fast resize that will
    preserve most of the detail. Just resize (*Ctrl*+*R*) and make it be 2048x2048
    or 2048x1024\. As we added the black stripe to the bottom, we can resize the image
    without stretching it. If you have to, you should clip or extend the bottom of
    the image; it's hard to tell with these 360 projections, but if you alter the
    aspect ratio of the image, the world will look squished when you view it.
  prefs: []
  type: TYPE_NORMAL
- en: If you get a blank or incorrect background, check the image format and size.
  prefs: []
  type: TYPE_NORMAL
- en: Cluttering up the world - adding our first VR components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Okay, now let's start adding our objects.
  prefs: []
  type: TYPE_NORMAL
- en: In our description at the beginning of the chapter, we mentioned moving to orbit.
    You might wonder why we didn't start with a space background. We will, after we
    create a world on the ground. I found space images as backgrounds can be disorienting,
    without a floor, and we needed to discuss equirectangular images before we float
    about in orbit and up and down become meaningless. So, for now, you've got to
    do a great job at the earth bound gallery before we end up in space.
  prefs: []
  type: TYPE_NORMAL
- en: This brings up an important point. The `<Pano>` statement is usually described
    as a background. A better way to think of the `<Pano>` statement and background
    images are of the *rest of the world* or the part of the world you can't reach
    out and touch. Whatever your background image is, without any VR objects, it will
    place you *there*. The `<Pano>` really isn't just a background, it's really the
    whole world except for the objects you place.
  prefs: []
  type: TYPE_NORMAL
- en: This is why your choice of background is important for a sense of presence.
    If you have a weird, or disorienting background, people will feel disoriented.
    This may or may not be what you want; it can also spoil the sense of immersion.
    Also, they can never touch what is in the `Pano`, so if there are objects that
    are close, it may be disorienting.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, let''s add a `Plane` for the outdoor gallery floor so that we''re not floating
    against our background. After the first `<View>` statement generated by the code
    generator in `index.vr.js`, add the following `Plane` and `Box` elements:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Before we save and view the world, we'll need the `DeckPlate.jpg` file. You'll
    need to download this file from [http://bit.ly/VR_Chap5](http://bit.ly/VR_Chap5) inside
    the `static_assets` folder and copy it to the `static_assets` folder inside of
    `SpaceGallery`. I created the `DeckPlate.JPG` file with a program called *Substance
    Designer*, by Allegorithmic, located at [http://bit.ly/AllegSub](http://bit.ly/AllegSub)
    via their material sharing site. I found this material [http://bit.ly/MatSciFi01](http://bit.ly/MatSciFi01).
    As you may not have substance player, I exported this image for you as `DeckPlate.jpg`.
    Later on, we will build more complicated models and use other textures to build
    an actual material. You can also use Quixel.se for good effect, if you use Photoshop.
    See the site at [http://bit.ly/QuixelSuite](http://bit.ly/QuixelSuite).
  prefs: []
  type: TYPE_NORMAL
- en: After we've done this, what happens? We hit refresh and we get a blank screen.
    Open up your web developer console. If you're in Firefox, click on Tools | Web
    Developer | Toggle Tools (or *Ctrl*+*Shift*+*I* on a PC).
  prefs: []
  type: TYPE_NORMAL
- en: 'The console will open and we see lots of errors, followed by:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'This is a clue that we forgot to add to the `import` directive. When we generated
    the object, it put all the React VR JSX imports that we needed for the hello world.
    Whenever we add a new object or API, we need to make sure React VR knows about
    it. Insert the following lines in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: In a large project, you may forget this on occasion. Check the console in your
    browser if your scene doesn't change. I also recommend using some code organization
    by adding your `import` declarations either in alphabetical order, or in the order
    you use them. Alphabetical order is easier to quickly scan. You could just import
    everything, but that may add some overhead you don't need.
  prefs: []
  type: TYPE_NORMAL
- en: Lighting up the world
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once we add the import statement, we'll notice the world is somewhat dark; it
    may be hard to see the box and plane we added. To light things up, we'll add both
    an `AmbientLight` and a `DirectionalLight` (sun or moon light) to the image. We're
    going a little unreal in this app as we've got an obviously night time image background,
    but our objects will be lit. Adding an `AmbientLight` as well as a `DirectionalLight`
    is an easy way to fake the natural world. In the real world, objects take on light
    from light reflected off of objects near them. An `AmbientLight` can simulate
    this gentle glow (this is often referred to as global illumination on other rendering
    systems). The direction light simulates either overhead room lighting (many lights,
    like in a classroom) or the light of the sun or moon.
  prefs: []
  type: TYPE_NORMAL
- en: Put your lighting statements at the top of the `render()` statement in your
    app, so that you can easily find them. I would make them the first statements
    after the top level `<View>`.
  prefs: []
  type: TYPE_NORMAL
- en: If lighting is part of an object, such as a desk lamp, keep that light near
    the object (or as a child of the object).
  prefs: []
  type: TYPE_NORMAL
- en: This will allow you to quickly modify scene lighting.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our `AmbientLight` statement is simple; the `DirectionalLight` takes a little
    more thought but is also pretty straightforward. Code them this way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: You should be able to see the platforms now, although they look small.
  prefs: []
  type: TYPE_NORMAL
- en: Don't forget the import statements!
  prefs: []
  type: TYPE_NORMAL
- en: Why did I have you paste in both a Plane and a Box?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: They both become the floor of our world, so why did we do both? If you look
    to the right in the VR View, you'll see that the `Box` has a funny looking edge.
    The texture map is equally applied to all six sides, and may look funny when stretched
    for boxes that aren't close in overall dimension. That is one disadvantage to
    the `Box`. The `Plane` doesn't have this problem, but if you get the `Plane` tilted
    the wrong way, you may not see it; the `Plane` is one sided so will be invisible
    if tilted away from the current camera. The `Plane` is also infinitely thin. I
    included both so you could see how they look.
  prefs: []
  type: TYPE_NORMAL
- en: In the section on transforms, I mentioned how important the order of transforms
    are. This is particularly important with the `Plane` object; if you rotate, then
    translate, the image may be oriented completely wrong, and in the case of a `Plane`,
    invisible.
  prefs: []
  type: TYPE_NORMAL
- en: 'To build the entire gallery, we''ll need to include several squares for the
    platforms. Add a little bit of a gap between them. Now, we could do this by copying
    and pasting each `Box` or `Plane` (use whichever one you like!) and updating the
    `translate` statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: There is a better way though; React VR is not just a hardcoded geometry file, but
    rather an actual object-oriented JSX file, and we can make use of that.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s define a new object that is one of our deck plates. We will put everything
    but the position in as components of that object. First (and I pounded my head
    against the table for a while on this), change the first line of your code from:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'To:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Note that this is a different `import` statement than what we're using on the
    second line (and easy to overlook).
  prefs: []
  type: TYPE_NORMAL
- en: If you don't see an object you created, or get an error that a keyword that
    you know is valid isn't recognized, don't forget the `import` directive at the
    top of the file!
  prefs: []
  type: TYPE_NORMAL
- en: Got Class - consolidating objects as new keywords
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Once we''ve importing the React Component, we can define an object as a `class`.
    For this version, we''ll use individual numbers as props (like parameters) and
    then instantiate them as often as we need to. We can paste this code anywhere;
    for now, you can put it in the `index.vr.js` file above the the `export default
    class SpaceGallery extends React.Component` line. Your new `class` is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'To instantiate copies of this, inside your `<View>` use this code (in your
    `SpaceGallery` class):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: This is the most direct way to make prefabs or classes so that you don't have
    to cut and paste endless declarations of `Box` components to make your floor.
  prefs: []
  type: TYPE_NORMAL
- en: If you're familiar with the React concept of state, don't use state at this
    time. You should use state for values that change over time; we will discuss this
    more in [Chapter 7](c3188254-ca3b-4b7d-af85-97b2c11439a0.xhtml), *Breathe Life
    in Your World*, and especially [Chapter 11](707dc6f5-9666-4f49-952b-fbcf20fc8afc.xhtml),
    *Take a Walk on the Wild Side*. Since this is a static version of the app, you
    don't need it. We will build the platform in the right place with props.
  prefs: []
  type: TYPE_NORMAL
- en: 'You might think instead of two named parameters, you could make a vector, but
    JavaScript doesn''t have the concept of a vector. You can, with the `{ }` operators,
    paste in the appropriate code, however. An alternative way of creating our slab
    floor segments is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Notice that the `translate` statement does not have square brackets around
    `this.props.MyPos` as it would have with a literal. You then instantiate it like
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Note the extra `{ }` braces and the missing braces in the `translate` statement
    as mentioned. In this case, you need it to create the vector (array).
  prefs: []
  type: TYPE_NORMAL
- en: Putting it all together
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We now have a basic platform to put our art on, you've learned how to create
    objects that we can instantiate, we've put basic lighting into the scene--now
    let's add some objects.
  prefs: []
  type: TYPE_NORMAL
- en: You find out from the powers that be, that you have done a fantastic job and
    can now move the Space Gallery into space. From the link to GitHub, you can download
    a few new files, including `BabbageStation_v6_r5.jpg` . Once we change the `Pano`
    statement with this file, we'll blip right into orbit--none of that shaking in
    your acceleration chair stuff. Nice and quiet.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s get back to building the gallery. First, let''s consolidate and use
    the `Platform`; your new `index.vr.js` file should be the following once you''ve
    downloaded the new `static_assets`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Note that your code will be considerably shorter if you used either `Platform`
    or `VecPlat` as your object.
  prefs: []
  type: TYPE_NORMAL
- en: Note that I used `MyX='-5.1'` instead of `MyX={5.1}`. This works, but it is
    really incorrect. `{}` is used to insert JS into the code. Basically, if you want
    `MyX` to be a number, use `{'`s in the initialization list. JavaScript will covert,
    but sometimes lead to weird behaviors if you don't pass a number as a number.
  prefs: []
  type: TYPE_NORMAL
- en: You may have noticed that the basic primitives that React VR includes are a
    bit sparse. Without constructive solid geometry, often called Boolean operations,
    or native three.js, there's a limit on what you can create.
  prefs: []
  type: TYPE_NORMAL
- en: Fortunately, you can import files from other CAD programs. We will cover this
    more in [Chapter 6](3b913e8b-342f-4ffb-b938-c996b41c1ab8.xhtml), *Working with
    Poly and the Gon Family* but for now, you can import a few models that I've included
    in the files for the book at [http://bit.ly/VR_Chap5](http://bit.ly/VR_Chap5).
  prefs: []
  type: TYPE_NORMAL
- en: Adding the pedestals
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we put the art in the world, we need to build a pedestal. To make it
    easier to line up, we can create an object as we did before. Let's make a square
    pedestal and put a cap on the top and bottom.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you broke for the day in triumph, go ahead and restart the React VR server;
    to make it easy on ourselves we can copy the URL so that we can paste it into
    our web browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/de8ffea0-8bb3-4b7d-9405-44dedfc33d75.png)'
  prefs: []
  type: TYPE_IMG
- en: If you have selected the preceding text to paste into your browser, you are
    going to be waiting a long time. Notice in the address bar where it says Select
    npm.
  prefs: []
  type: TYPE_NORMAL
- en: When you are using the console to start your app, if you "select" any text,
    and keep it selected, it may block the web browser from serving up the content.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, instead of a simple cube we used for the floor, we''ll create a square
    `Pedestal` with a top and bottom:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, when you try this, you will get an error:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Remember, this is React VR; with regular React, you would enclose any multiple
    tags in a `<div>` statement. This won''t work here as we are are not dealing with
    HTML; the closest thing is React-Native. So, for VR, we want to wrap multiple
    elements/objects in a `<View>` statement. The correct code is thus:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: If you got the error `Expected a component class, got [object Object]` in your
    web console, you may have accidentally typed view instead of `View`
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we''ve set up the `Pedestal` object, paste it into your `index.vr.js`,
    underneath all the platforms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Now, we have a nice series of `Pedestal`s. The other thing we did was, by careful
    scaling, every object is at the same location, [5.1 ... 0 ... -5.1], in two dimensions.
    This will make it easier to import the various art objects.
  prefs: []
  type: TYPE_NORMAL
- en: As we've seen with creating additional classes or components, item composition
    is a bit difficult in React VR. It is not intended to be a full blown 3D modeler;
    it is a VR presentation system. Therefore, any really complicated object should
    be created in a CAD system. There, you will have some type of visual modeling
    that is a lot easier than trying to estimate what the `<Box>` offset will be when
    stacking them.
  prefs: []
  type: TYPE_NORMAL
- en: We will use the Model statement. In Chapter 4, *The React VR Library*, we detailed
    the Model keyword. Time to use it! Add the following lines inside the `<View>`
    statement in the main code, underneath the `Pedestal` it'll be on. Don't forget
    to change the `import` line!
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: I've created a version of the Utah teapot from internet sources and some of
    my own UV editing in Blender; this is the `'teapot2.obj'` object. Creating objects
    in Blender could be the subject of a whole book, and probably is, so for now,
    you can just download the teapot from the files from the book. They are at [http://bit.ly/VR_Chap5](http://bit.ly/VR_Chap5),
    in the `static_assets` folder.
  prefs: []
  type: TYPE_NORMAL
- en: This one is a little different as it has a rubber handle, blue enamel, and a
    copper spigot. For now, the material file (the .mtl file) has just simple colors,
    but in the next chapter, we will find out how to make these be richly detailed
    with texture maps.
  prefs: []
  type: TYPE_NORMAL
- en: If you get `Model is not defined` it means you forgot to add `Model` to your
    `import` line at the top of your file.
  prefs: []
  type: TYPE_NORMAL
- en: Go ahead and save that, and you'll see we've added a teapot! However, there
    are a few issues - the deckplates look a bit boring and weird on the edges, and
    we'd like to see the teapot looking a little different. We can do this by creating
    our own models, in the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Congrats! Your gallery is now finished, with one simple object. You've learned
    how to modify our world, change the background to make it look like we're anywhere
    we want, and you've learned how to create groups of objects and instantiate them.
    Next, you will learn how to populate it with more models; read the next chapter
    to find out how!
  prefs: []
  type: TYPE_NORMAL
