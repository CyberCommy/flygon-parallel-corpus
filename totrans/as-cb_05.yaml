- en: Chapter 5. Size Does Matter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This chapter is about building apps that will be running on a wide variety
    of devices: phones, phablets, tablets, and TVs. We will connect to YouTube to
    get some data and videos to display.'
  prefs: []
  type: TYPE_NORMAL
- en: Size and context actually do matter. We could of course scale up everything
    but that does not really make it a better app. Tablets offer more space than phones,
    and when it comes to user interaction, TV differs from a smart phone. How do we
    make the layout scale and look smooth on each device? How do we find the right
    approach for each type of device?
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, you will learn from the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Size and context
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Phone, phablet, and tablet layouts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Media playback
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TV and media centre
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Size and context
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Devices such as phones, phablets, tablets, and TVs come with screens of all
    sizes and shapes. How can we benefit from a larger screen or how can we provide
    smart navigation for smaller screens and maintain the same functionality and code
    within one app? That is what this first recipe is about.
  prefs: []
  type: TYPE_NORMAL
- en: What about the various kinds of devices? With the introduction of wearable devices,
    we saw that the user behavior for these types of devices is quite different. The
    same thing applies to TVs. As always, let's do first things first. Let's examine
    an app that runs on both a phone and tablet.
  prefs: []
  type: TYPE_NORMAL
- en: Phone, phablet, and tablet
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A well-known pattern for phones is the list or the recycler view that show you
    some details when you click on any of the rows. On a small screen, the app will
    navigate you to a different view. This pattern simply exists because of the lack
    of space on the screen of a phone. If you run the same app on a device that has
    sufficient space, we can show the list on the left-hand side of the screen and
    the details on the right-hand side.
  prefs: []
  type: TYPE_NORMAL
- en: Multiple layouts are what we need, combined with multiple fragments. If we do
    this, we can reduce the amount of code we need to write. We just do not want to
    repeat ourselves, do we?
  prefs: []
  type: TYPE_NORMAL
- en: Fragments are a powerful but also an often misunderstood component of Android
    development. Fragments are (little) pieces of functionality and most of the time
    do have their own layouts. Using fragment containers, a fragment may reside in
    multiple places and on multiple activity-related layouts. This is how we can reuse
    functionality and layouts.
  prefs: []
  type: TYPE_NORMAL
- en: Fragments should be used carefully though. Without a proper strategy, an app
    that uses fragments can cause you a lot of trouble. Code within a fragment frequently
    refers to an activity. While this code may still be running, the fragment may
    be detached from the activity in between (for example, because the user has pressed
    the back button). This could result in a crash of your app.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To go through this recipe, you need to have Android Studio up and running, and
    a phone, phablet, and/or tablet device (physical ones are recommended as always;
    however, you can use Genymotion to create virtual ones).
  prefs: []
  type: TYPE_NORMAL
- en: Since we will be using the YouTube Android API, you need to have the latest
    YouTube Android app installed on your device as well. Check on your device whether
    it is there, or install or update it using the Google Play app in case it is not
    on your device or an update for it is available.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, you need to have a developer's account. In case you do not have one
    yet, you need to create one first from [http://developer.android.com/distribute/googleplay/start.html](http://developer.android.com/distribute/googleplay/start.html).
  prefs: []
  type: TYPE_NORMAL
- en: In addition to buying this book, getting yourself a developer's account is a
    very good investment, and I strongly recommend you to get one. You will need one
    in order to be able to submit your app to the Google Play store anyway!
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s see how we can create our own wearable app and make it run on a device:'
  prefs: []
  type: TYPE_NORMAL
- en: Start a new Android Studio project. Name your application `YouTubeMediaApp`
    and enter `packt.com` in the **Company Domain** field. Click on the **Next** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the following dialog, only check the **Phone and Tablet** option and click
    on the **Next** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the next dialog, choose **Blank activity** and click on the **Next** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Customize the Activity** dialog, click on the **Finish** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Android Studio will create the new project for you. From the **Project** view
    on the left-hand side of Android Studio, locate `build.gradle` within the `app`
    folder and open it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the `build.gradle` file within the `app` folder and add a dependency to
    the `dependencies` section for the YouTube services API. We are going to use this
    API to search for videos on YouTube:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Synchronize the project (click on the **Sync now** link or use the **Sync project
    with Gradle files** button from the toolbar).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the `activity_main.xml` layout. Create a frame layout that will act as
    a container for the fragment that we want to display here later. We will give
    it a nice background color for demonstration purposes. Let''s pick orange:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Add a new layout and name it `fragment_list.xml`. Create a list view within
    a container. This list will contain the title and other information about the
    videos that we will find on YouTube:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Add a new Java class, name it `ListFragment`, and click on the **OK** button
    to continue.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Make the new class a `Fragment` descendant and override the `onCreate` method.
    Create a private member for the list view and add a reference to the list view
    in the layout as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Besides `ListActivity`, there is also a `ListFragment` class that you can descend
    from. For demo purposes, we will descend from `Fragment` class here and do some
    things ourselves.
  prefs: []
  type: TYPE_NORMAL
- en: 'While adding the correct import statements (using the *Alt* + *Enter* shortcut
    or otherwise) you will be able to choose which package to import. You can choose
    between the `android.app.Fragment` and `android.support.v4.app.Fragment` packages.
    The last one is for backward compatibility purposes only. Since we will be using
    the latest SDK for our app, choose this import statement if asked:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Add another private member for YouTube and a YouTube list and create a method
    named `loadVideos`. First, we will initialize the YouTube member:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we will tell YouTube what we are looking for and what information we
    want the API to return. We need to wrap our code in a try catch construction as
    we do not know in advance whether we will be able to connect to YouTube. Add this
    to the end of the `loadVideos` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: To use the YouTube API, you must register your app first. To do so, navigate
    your browser to [https://console.developers.google.com/project](https://console.developers.google.com/project).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Create** a project button. Enter `YouTubeApp` as the project
    name and click on the **Create** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the project is created, the dashboard will be shown on the webpage. On
    the left-hand side, expand **APIs and auth** and click on **APIs**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the right-hand side of the page, click on YouTube Data API. Click on the
    **Enable API** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the left-hand side again, click on **Credentials** just after APIs. Under
    Public API access, click on the **Create new Key** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the **Create new key** popup dialog box, click on the **Android key** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Since this app is for demo purposes only, we do not need to look up the requested
    **SHA1** value. Just click on the **Create** button.![How to do it...](img/B04299_05_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, an API key will be created for you. Copy the value for API key.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `AndroidManifest.xml` file, add a permission to access the Internet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Glue it together!
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now back in the `ListFragment` class, tell the API about your key that is just
    next to the `search` call on the YouTube object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new `VideoItem` class and add members to hold the requested information
    for each video. Note that we are using getters and setters here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new layout and name it `adapter_video.xml`. Then, add text views to
    display the video information:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new `VideoAdapter` class and make it an `ArrayAdapter` descendant
    that will be holding entries of the `VideoItem` type. A view holder will help
    us fill the text views with the properties of the listed `VideoItem` object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Now back to the `ListFragment` class. Add two more private members in it, one
    for the list of videos that we have found and one for the adapter that we have
    just created:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Add a `search` method to the `ListFragment` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Toward the end of the `loadVideos` method, add the implementation to call the
    `search` method and initialize the adapter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Tell the list view about the adapter and call the `notifyDataSetChanged` method
    of the adapter to inform that new entries are available to be shown. For this,
    we will use a `Runnable` instance that will be running on the UI thread:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we will load the video information asynchronously, as we do want the app
    to be responsive while getting data from the Internet. Create a new thread and
    call `loadVideos` inside within the `run` method. Let''s assume we want to look
    at *Android development* videos:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new layout and name it `fragment_details.xml`. In this fragment, we
    will display a thumbnail and the description of a video that the user has selected
    from the list. Since we are here anyway, let''s add a play button as well. We
    will need it in the next recipe:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Create the `DetailsFragment` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the `showDetails` private method to `DetailsFragment` class. In this method,
    we will set the text for the description and create a new runnable instance to
    load the thumbnail for the video. Also, add the `setVideo` method and override
    the `onResume` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, add the `loadThumbnail` method to `DetailsFragment` class and the implementation
    to load the thumbnail image from the given URL:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'If the user selects an item from the list view in the `ListFragment` class,
    we need to tell `DetailFragment` to display the corresponding details. In the
    `onCreateView` method of the `ListFragment` class, add the onItemClick handler:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `MainActivity` class, add two static members that will represent the
    tags for both the `ListFragment` and `DetailsFragment` classes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Create the `onVideoClicked` method in the `ListFragment` class. If `DetailsFragment`
    exists (there is a fragment out there with the `DETAILS` tag), it will call the
    `showDetails` method of `DetailsFragment`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'We are almost done. In the `activity_main.xml` layout, we created a container
    for our fragment. Now we will add some code to show the content for `ListFragment`
    in that container. In the `MainActivity` class, add two private members for both
    the fragments:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Create `ListFragment` and add it to the container:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Let's create another layout for the main activity but this time it will be one
    for the large screens, let's say tablets. To the `res`folder, add a new Android
    resource directory by right-clicking on the `res` item. Choose **layout** for
    **resource** **type**, name the directory `layout-large`, and click on the To
    button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Within the new `layout-large` directory, add a new layout and name it `activity_main`
    as well. A tablet device is big enough to hold both our fragments so for this
    layout, we will create two containers: one for the list and one for the details:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Modify the `onCreate` implementation for `MainActivity`. If the container is
    available, we will load the details fragment as well. Move the `commit` call to
    the end:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'One more thing, if you''ll allow me to explain. Well, a couple of things actually.
    If the app is running on a phone, we need to have some kind of navigation from
    the list fragment view to the details fragment view. Modify the `onVideoClicked`
    method in the `MainActivity` file so that in case it does not exist yet, the detail
    fragment will be created there:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'The call to `addToBackStack` that we added in the previous step informs the
    fragment manager about all fragments being on stack, so we can provide a way of
    navigation. We need to tell our activity how to behave in case the back button
    is being pressed: do we want to leave the activity or do we want to pop a fragment
    from stack? We will override the `onBackPressed` method of the `MainActivity`,
    just like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: And we are done! We had some work to do but now we have got an app that will
    work on a phone with navigation and that will display both the fragments if there
    is sufficient space as is the case with a tablet.
  prefs: []
  type: TYPE_NORMAL
- en: 'To see the differences, run the app on a smart phone and on a tablet as well.
    On a phone, it will look similar to the following screenshot. On a tablet (you
    can use Genymotion for that if you do not have one available) both the list and
    details are shown in a single view:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Glue it together!](img/B04299_05_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The next recipe will show how to implement the functionality that allows us
    to watch the video that we have just found. After all, playing videos is what
    we want!
  prefs: []
  type: TYPE_NORMAL
- en: Media playback
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous recipe, we retrieved search results from YouTube and displayed
    them in a list and detail fragment. The entries found represent videos, so it
    would be nice if we were able to play them as well in our app. Let's find a way
    to do this.
  prefs: []
  type: TYPE_NORMAL
- en: Since we do know the video ID, it is not that difficult to compose a URL for
    it and load them in a web view; however, Google provides an easier solution for
    this and offers the YouTube Android Player API for this purpose. It has a couple
    of limitations but is interesting enough to explore.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To go through this recipe, you need to complete the previous recipe as this
    one picks up where we left off. While I recommend you to test the app on a physical
    phone and tablet, you can, of course, use Genymotion as well.
  prefs: []
  type: TYPE_NORMAL
- en: If you are using virtual devices, then Google apps (and the YouTube app on which
    the API and the player depend) will be missing, and the app will fail for that
    reason. You need to download and install them on the virtual device first.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s see how we can extend the app using the following steps, so it can play
    back a video for us:'
  prefs: []
  type: TYPE_NORMAL
- en: Download the YouTube Player API from [https://developers.google.com/youtube/android/player/downloads](https://developers.google.com/youtube/android/player/downloads).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the downloaded file, find the `YouTubeAndroidPlayerApi.jar` file in the `libs`
    folder and copy it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the project from the previous recipe.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Find the `libs` folder within the `app` module and paste the `YouTubeAndroidPlayerApi.jar`
    file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The dependencies in the `build.gradle` file may have already been prepared
    to include any files in the `lib` file; however if it is not, add the dependency:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Click on the Sync now link, or in case it does not appear, click on the **Sync
    project with Gradle files** button on the toolbar.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `MainActivity` class, add a static tag for the player fragment that
    we are going to create. Also add the private member for `YouTubePlayerFragment`
    and a public member to store the YouTube player if the initialization succeeds:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Open `activity_main.xml` in the `layout-large` directory, change the height
    of the detail fragment to `300dp`, and add `YouTubePlayerFragment` to it. The
    preview might complain as it is not aware of how things should be rendered, but
    that is not really an issue as long as the package is being recognized, which
    will be the case if you have completed steps 5 and 6 successfully:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'In `onCreateView`, just before `ft.commit`, find the container for the player
    fragment and initialize `YouTuberPlayer`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'In `DetailFragment`, add an on click handler for the Play button in the `onCreateView`
    method, just before returning the view object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Create the `playVideo` method in `DetailFragment`. If the player fragment is
    there (on devices with large screens) and has been initialized, it will play the
    video; if it is not there (on devices with smaller screens), we will create a
    player fragment, initialize it, and add it to the stack:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: And with that, we have added a simple but fully functional implementation to
    play the selected video.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are many options available to play a video, such as fullscreen or in place,
    with or without buttons, and so on. Using Chrome Cast, media can also be sent
    to your TV or as we will see in the final recipe, we can create an app for an
    Android TV.
  prefs: []
  type: TYPE_NORMAL
- en: TV and media centre
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Boring! Again there is nothing to see on the TV! At least not something that
    seems to be interesting enough. Smart TVs running on Android create a whole new
    interesting world for developers. Finally, we get the screen size we deserve!
  prefs: []
  type: TYPE_NORMAL
- en: However, it also comes with a different type of audience. Users interact with
    their phones and tablets to a very large extent. When it comes to watching TV,
    the focus is much more on consuming.
  prefs: []
  type: TYPE_NORMAL
- en: Well, what is there on the TV? Have a cup of tea and start watching the show.
    Occasionally, users might be interested in some interaction (a phenomenon that
    mostly appears as a second screen app since not anyone does own a smart TV already),
    but most of the time, TV watchers just want to lean back.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe requires Android Studio up and running and the latest SDKs installed.
    In this recipe, we will provide you a brief introduction to a TV app. In only
    a few steps, we will create a media centre app. Don't worry, you do not need to
    have an Android TV. We will create a virtual one.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s see what we need to do to develop an Android TV app:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new project in Android Studio. Name it `PersonalTeeVee` and click on
    the Next button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the TV option and click on the **Next** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose Android TV Activity and click on Next.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `TeeVeeActivity` in the **Activity Name** field and `Personal Tee Vee`
    in the **Title** field and click on the **Finish** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Android Studio creates a phone and a TV module for you. Change the configuration
    to TV. You will see something as shown in the following figure:![How to do it...](img/B04299_05_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Check out the `AndroidManifest.xml` file in the tv module. Note the lean back
    feature requirement (which tells us that this is a TV app with fullscreen experience
    without any heavy interaction and basically is about consuming content such as
    watching a video). Also note that we do not require a touch screen. The TV screen
    is too far away to touch. Besides, nobody likes smears on their TV screens:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: To test the TV app, we need to have a virtual TV device. Open the **AVD manager**
    option from the **Tools** | **Android** menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Create Virtual Device** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select TV from the category list and choose a TV device (1080p or better). Click
    on the Next button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Pick a system image. I chose, for example, **API level 22 x86**. Click on **Next**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Modify the name of the AVD to whatever you think suits best and click on the
    **Finish** button. A new virtual TV device will be created for you.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start your TV device by clicking on the play button. If it says that **Google
    Play Services has stopped**, you may ignore this message for now (although you
    will need it if you want to play a video).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the device is booted, run your TV app from Android Studio. By default,
    it looks like this:![How to do it...](img/B04299_05_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Wow, this is a fully functional media centre app already!
  prefs: []
  type: TYPE_NORMAL
- en: This was just a brief introduction to building an Android TV app. Play with
    it and tweak it.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'While the app in this recipe is dedicated to a TV, I see no reason why you
    couldn''t make it an app for any kind of device: phone, phablet, and TV. If you
    want, you can combine all the recipes in this chapter into a single app. That''s
    a nice challenge, isn''t it?'
  prefs: []
  type: TYPE_NORMAL
- en: 'Besides YouTube, there are also interesting media-related APIs to investigate.
    On [www.programmableweb.com](http://www.programmableweb.com), for example, you
    can find some interesting APIs. Some of them are listed here:'
  prefs: []
  type: TYPE_NORMAL
- en: '| API | Navigation |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| YouTube | http://www.programmableweb.com/api/youtube-live-streaming |'
  prefs: []
  type: TYPE_TB
- en: '| Vimeo | http://www.programmableweb.com/api/vimeo |'
  prefs: []
  type: TYPE_TB
- en: '| Hey! Spread | http://www.programmableweb.com/api/heyspread |'
  prefs: []
  type: TYPE_TB
- en: '| Pirateplay | http://www.programmableweb.com/api/pirateplay |'
  prefs: []
  type: TYPE_TB
- en: '| Tinysong | http://www.programmableweb.com/api/tinysong |'
  prefs: []
  type: TYPE_TB
- en: '| TwitVid | http://www.programmableweb.com/api/twitvid |'
  prefs: []
  type: TYPE_TB
- en: Well, now we know where to get media items from, how to play them, and how to
    automagically create a media centre app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Coming up next: let''s create some media ourselves by capturing some images.
    See you at the next chapter!'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Chapter 6](ch06.html "Chapter 6. Capture and Share"), *Capture and Share*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
