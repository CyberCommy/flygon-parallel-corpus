- en: Vue CLI 3 and Routing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the previous chapter, we saw how to work with some testing suites such as
    Jest and Cypress in Vue. In this chapter, we''ll look at working with vue-router
    and use it with Vue CLI 3\. We''ll look at some practical tasks such as lazy-loading
    components. We''ll look at using the Vue add command to add vue-router and why
    that''s not the best strategy, and steps to take to mitigate it. Understanding
    routing in Vue is beneficial if you want to build larger and more complex apps.
    The following a list of subjects covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Adding a new Vue project with vue-router and vuex
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring preset options through VS Code's command line
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding vue-router routes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using named routes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a dynamic route
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Navigating to a route from the methods option in a Vue instance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with nested (child) routes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lazy-loading routes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We'll begin by adding a new project.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a new Vue project with vue-router and vuex
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's begin by creating a new folder in our file system. Let's call this folder
    `vueclichapter5`.
  prefs: []
  type: TYPE_NORMAL
- en: Open the `vueclichapter5` folder from Windows Explorer, right-click anywhere
    on the whitespace inside the `vueclichapter5` folder, and click on the Git Bash
    here command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once Git Bash opens, type `code .` and press the *Enter* key. This will open
    a brand-new instance of VS Code, with no files or tabs inside other than the welcome
    tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, we''ll be adding a new Vue project right from VS Code''s integrated Terminal.
    To access this Terminal, click on the VS Code window (to get it in focus), and
    press the following shortcut key: *Ctrl* + *`*.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We've already mentioned the ***Ctrl* backtick shortcut** earlier in the book.
    As a reminder, the *`* character can be found when you press the key above the
    *Tab* key on your keyboard.
  prefs: []
  type: TYPE_NORMAL
- en: Using the *Ctrl* + *`* keyboard shortcut will open the Terminal inside VS Code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we''ll run the `vue create` command with a dot, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Doing so will generate a Vue project in the existing folder, that is, it will
    not make a subfolder for our new Vue project, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/a8a439f6-4869-42f5-96f3-0939caa5afee.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.1: Generating a project in the current directory from VS Code''s Terminal'
  prefs: []
  type: TYPE_NORMAL
- en: Press the *Y* key to confirm that we'll be generating our project in the current
    directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configuring preset options through VS Code's command line
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Next, we''ll pick the Manually select features option by pressing the down
    arrow key once, followed by the *Enter* key, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/2bfff656-09c8-4bd2-9eda-27f1c7ade9ff.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.2: Generating a project in the current directory from VS Code''s Terminal'
  prefs: []
  type: TYPE_NORMAL
- en: Adding vue-router and vuex
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Next, we''ll use the down arrow key and the spacebar key to select Router and
    Vuex as additional features for use in our project, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/7be8a39d-e27e-4633-9983-18e2ca398eb6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.3: Adding the vue-router and vuex plugins to our project'
  prefs: []
  type: TYPE_NORMAL
- en: A prompt will ask us if we want to use the History mode for the router.
  prefs: []
  type: TYPE_NORMAL
- en: We don't want to use it now, so we'll just type `n` and press *Enter*.
  prefs: []
  type: TYPE_NORMAL
- en: Later on in this chapter, we'll discuss what the History mode does and how it
    works.
  prefs: []
  type: TYPE_NORMAL
- en: Adding ESLint and Prettier
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Another prompt asks us about our linter or formatter preferences. We''ll be
    using ESLint and Prettier as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/29763fc3-ed26-4ecf-893b-d55e05221821.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.4: Choosing ESLint and Prettier as or linter / formatter configuration'
  prefs: []
  type: TYPE_NORMAL
- en: Finishing the configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Finally, we''ll accept the default Lint on save feature, and opt to place the
    config for Babel, PostCSS, ESLint, and so on in dedicated config files as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/93cc85fa-70b7-44ca-916c-597ff4a53ac6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.5: Choosing to save configs in dedicated config files'
  prefs: []
  type: TYPE_NORMAL
- en: Finally the Vue CLI will ask us if we'd like to save this as a preset for future
    projects. We'll say no to this for the time being.
  prefs: []
  type: TYPE_NORMAL
- en: Installing all the plugins for our new project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Finally, the Vue CLI installs all the plugins as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/24449c9c-85df-4486-a99b-3c20096f7935.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.6: Vue CLI installing our project''s plugins'
  prefs: []
  type: TYPE_NORMAL
- en: Once this installation is complete, we'll have a working Vue project installed
    with vue-router and vuex, ESLint, and Prettier set up and ready to use.
  prefs: []
  type: TYPE_NORMAL
- en: Serving our project from the Vue CLI UI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Once our project is installed, we could use the `npm run serve` command to
    run it. However, we''ll use the Vue CLI UI for this, so let''s run it with `vue
    ui` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/01b17519-548d-468e-a5c2-ca0da636f35d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.7: Serving our project via vue UI command from VS Code command line'
  prefs: []
  type: TYPE_NORMAL
- en: As expected, our Vue CLI UI will automatically open in a browser window at `http://localhost:8000/dashboard`.
    At this point, the old project might be loaded in the dashboard, so we need to
    click on the Home icon and import our new `vueclichapter5` project.
  prefs: []
  type: TYPE_NORMAL
- en: Note that we could have installed a new app using the Vue CLI UI from the very
    beginning, but it is interesting to know that you can switch between the command
    line and the UI without issues.
  prefs: []
  type: TYPE_NORMAL
- en: Once the project is loaded, we can click on the Plugins link to see the installed
    plugins. Notice the absence of the Add vue-router and Add vuex buttons. They are
    not present since we've already installed them.
  prefs: []
  type: TYPE_NORMAL
- en: Running the serve task from the UI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Finally, we''ll click on the Tasks icon to open a list of available tasks,
    then click the serve task to compile and serve our project. Just like before,
    a Run task panel will appear on the right-hand side of the dashboard as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/48f3aaff-94ae-4b60-9406-436adceb33a0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.8: Run task for the npm run serve script'
  prefs: []
  type: TYPE_NORMAL
- en: 'On the preceding screenshot, we can see a zoomed-in portion of the serve task
    screen. Clicking the Run task button will start building the app, and we''ll get
    notified on the Windows Start bar that our app was successfully built. Looking
    at the available tabs, we can see that the current view shows our serve task''s
    dashboard. Clicking on the Output button to the left of the currently active serve
    task''s dashboard button will show us logging information, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Of course, the specific port that the `vue-cli-service` will be serving our
    Vue app from will depend on what other ports are already in use. To open our running
    Vue app in the browser, all that is needed now is to click on either the `Local`
    or the `Network` URLs listed in the output log.
  prefs: []
  type: TYPE_NORMAL
- en: Working with routes in vue-router
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the section that follows, we'll be looking into how routes in vue-router
    work and how to add pages and routes using them. We'll begin by inspecting existing
    routes, and after that we'll be adding additional routes and their corresponding
    components.
  prefs: []
  type: TYPE_NORMAL
- en: Inspecting the two default routes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This will open a familiar starting project with the Vue logo, with a slight
    addition: a link on top to the About page as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/d35aaef5-d3a5-41e4-9077-a0c1385cb1fe.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.9: Default navigation of the project with vue-router installed'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you click on the About link, you''ll be greeted with another page that has
    an `h1` tag and inside it, the following text:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Notice that the route to the About page has a pound sign in front of the page
    name. In our example app, it looks like this: `http://localhost:8082/#/about.`
    How do we get rid of the pound sign? In other words, how to we set the address
    to `http://localhost:8082/about`?
  prefs: []
  type: TYPE_NORMAL
- en: 'The answer is simple, we just need to set up our server to always return the
    `index.html` page, and then we''re going to add another setting, the `mode` setting,
    for the vue-router, such as the following: `mode: ''history''`'
  prefs: []
  type: TYPE_NORMAL
- en: You need to add the preceding code right under the `export default new Router({`
    line in `router.js`. Doing this will get rid of the pound symbol.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we'll inspect the contents of the project that comes preinstalled with
    vue-router and vuex.
  prefs: []
  type: TYPE_NORMAL
- en: Inspecting project files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Go back to VS Code and look at the project structure. You''ll see some differences
    from what we had before. The following is the contents of our `src` folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/9a64b06c-5bcf-4935-8626-096f4a5c7c4b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.10: The contents of the src folder with vue-router and vuex pre-installed'
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside the `src` folder, we can see a folder that we haven''t seen before:
    the `views` folder, which holds two view files: `Home.vue`, and `About.vue`. In
    the root of our project, we can see some additional files as well: `router.js`,
    `store.js`, `.browserslistrc`, `eslintrc.js`, `postcss.config.js`, and `README.md`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `router.js` file is what vue-router uses to set up the paths in our app.
    The `routes` array is an array of objects: one object for a single route. Since
    we have two routes in the default installation, we have two objects inside the
    `routes` array. The `store.js` file is what vuex uses to keep track of our app''s
    state, mutations, and actions; these are all referred to as the **vuex store**.
    The `README.md` file lists common npm commands for use with our app, and the other
    files at the root of our project are configuration files; this convention, at
    this point in our journey through Vue CLI 3, should be expected.'
  prefs: []
  type: TYPE_NORMAL
- en: The contents of main.js
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Just like we''ve seen before, the `main.js` file inside our `src` folder imports
    all the following dependencies:'
  prefs: []
  type: TYPE_NORMAL
- en: The Vue library from `node_modules`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The root component, `App.vue`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The router file to set up vue-router routes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The store file to set up the vuex store
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The App.vue file and router-link navigation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'By inspecting the contents of the root component, `App.vue`, we can see that
    the file looks different from before: there is no `script` section!'
  prefs: []
  type: TYPE_NORMAL
- en: Also, the template tag inside `App.vue` holds the so-called *navigation components*.
    Each navigation item is enclosed inside the `router-link` tag.
  prefs: []
  type: TYPE_NORMAL
- en: Why not use just an anchor tag instead of the `router-link` tag? Because an
    anchor tag would go on and send a server request. With the `router-link` tag,
    this behavior is avoided.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we inspect the compiled HTML code in the `dist` folder, we''ll see that
    the bundled HTML indeed ends up being an anchor tag, as can be seen in the following
    compiled production code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Going back to the `Home.vue` and `About.vue` files inside the `view` folder,
    we can also see the `router-view` tag (below the `div` with the `id` of `nav`).
    This is what actually renders either the `Home view` or the `About view`. The
    component that will be rendered will be determined by whatever is mapped with
    the `to` prop.
  prefs: []
  type: TYPE_NORMAL
- en: 'Rendering a Vue instance and mounting it into #app'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Finally, a new instance of Vue is called and passed an argument in the form
    of an options object. The object receives the following key-value pairs: `router:
    router`, `store: store`, and `render: h => h(App)`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Written in ES5 code, that code would look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Our `main.js` file, is luckily, written in a more modern syntax, so when all
    these things are put together, it looks as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The render method will take all the different parts of our app, combine them,
    and get them ready to be mounted. Finally, our Vue app will be mounted into the
    `div` with the `id` of the app inside our `./public/index.html`.
  prefs: []
  type: TYPE_NORMAL
- en: You might notice that our current app's directory doesn't contain a `dist` folder.
    As we've learned in [Chapter 2](cd533fca-589a-475b-b0ff-da2f7fb52251.xhtml)*,
    Webpack in Vue CLI 3*, the dist folder is the product of webpack building our
    site. So let's run the build task in our Vue CLI 3 UI next, to see the `dist`
    folder being created and served.
  prefs: []
  type: TYPE_NORMAL
- en: Running the build task from the UI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To run the build task from the Vue CLI 3 UI, all we need to do is go to `http://localhost:8000/tasks/`,
    and from there click on Build task, and then click the Run task button.
  prefs: []
  type: TYPE_NORMAL
- en: 'The output tab of the build task we ran will log out the following information:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: What are these different JavaScript files inside the `./dist/js/` folder? They
    are the result of webpack bundling our assets from our Vue app's single-file components,
    the router, and the store, into deployment-ready bundles. These bundles are now
    added to the compiled and minified `index.html` page inside our `dist` folder,
    so this is how they end up on our production-ready web page.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, let's see our updated app. For that, we'll click on the serve task,
    and stop the task by clicking the Stop task button.
  prefs: []
  type: TYPE_NORMAL
- en: Serving the app in production mode from the UI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To serve the app in production mode, we need to click on the Parameters button
    inside the Run task panel with the serve task selected.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once we click the Parameters button, we''ll see the following dialog:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/03355705-9e7e-4f7f-b307-7b7ac114a4a5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.11: Specifying the env mode in serve task''s parameters dialog inside
    the Vue CLI 3 UI'
  prefs: []
  type: TYPE_NORMAL
- en: In the Specify env modesetting, click on the drop-down and select production.
    Save the changes, and you'll see the serve task dashboard again. Now, click on
    the Run task button. Finally, to make sure everything still works, point your
    browser to whatever port your Vue app is being served on. In this example, the
    proper address is `http://localhost:8082/`.  Next, click on the About link.
  prefs: []
  type: TYPE_NORMAL
- en: 'Back in VS Code, change the `About.vue` page''s `h1` tag to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Save the file and see your About page get an HMR update.
  prefs: []
  type: TYPE_NORMAL
- en: Some basics of working with routes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Although this book is about Vue CLI 3, we will take this opportunity to quickly
    list some features of vue-router. This is by no means an extensive list: it is
    just a quick overview of certain features you need to be aware:'
  prefs: []
  type: TYPE_NORMAL
- en: Using named routes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a dynamic route
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Navigating to a route from the methods option in a Vue instance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with nested (child) routes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lazy-loading routes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We'll begin by understanding that the `router-view` tag needs to be nested.
  prefs: []
  type: TYPE_NORMAL
- en: The router-view tag needs to be nested
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before we begin, let''s look at the `App.vue` template tag as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Notice that the `router-view` element (the third line from the bottom), is
    wrapped inside a parent `div` tag, which is then wrapped inside a `template` tag.
    This is important, because you can''t have the `router-view` tag as the direct
    child of the `template` tag. In other words, the following is not possible:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Now that we know that this approach will not work, we can go on discussing named
    routes.
  prefs: []
  type: TYPE_NORMAL
- en: Using named routes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To use a named route, you just pass an object to the `to` prop inside the `router-link`
    tag, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Notice the `:` before the `to` prop. This `:` is added whenever we want to add
    a named route.
  prefs: []
  type: TYPE_NORMAL
- en: With the `name` key inside the object we passed in to the `to` prop, vue-router
    will check the `routes` array inside `router.js`. It will look for an object that
    has a name key with the value specified, and if it finds it, it will re-route
    it to the specific view component.
  prefs: []
  type: TYPE_NORMAL
- en: Navigating to a route by triggering a method of a Vue instance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Every component in Vue is a stand-alone Vue instance. We''ll be working in
    the `HelloWorld.vue` component. To navigate to a route from the `methods` option
    of `HelloWorld.vue`, you can use the following code inside the `scripts` section
    of the component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'To make this work, we need to add a `v-*` directive to determine when a method
    that has the preceding code will be triggered. Thus, still inside `HelloWorld.vue`, update
    the `template` tag to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Obviously, the preceding `template` tag is incomplete. We''re focusing on the
    important part: the `p` tag with the text colored red and the font size of `50`
    pixels. You can''t miss it on the screen! You can find this line of code inside
    `vuecli3chapter5/HelloWorld.vue`, starting on line 4.'
  prefs: []
  type: TYPE_NORMAL
- en: When you hover over the preceding paragraph, Vue will immediately take you to
    the About page.
  prefs: []
  type: TYPE_NORMAL
- en: Let's now add the same functionality we have on the home page to the about page.
    Thus, once you are on the about page, you can hover over the prominent Hover to
    see the Home Page link, which will take you back to the home page.
  prefs: []
  type: TYPE_NORMAL
- en: 'To make things less jumpy, we can also use the good-old plain, browser facade
    function: `setTimeout`. Here''s the updated code for the `About.vue` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: What are we doing in the preceding code? We're simply adding another method
    to our `methods` option. We're naming this new method:  `goToHomePageSlowly`.
    Then, we're calling this method inside our about component's template tag.
  prefs: []
  type: TYPE_NORMAL
- en: The `goToHomePagesSlowly` uses the `setTimeout` facade function for the browser's
    `setTimeout` functionality. The `setTimeout` function calls our `goToHomePage`
    function with a delay of `1000` milliseconds, and once it's run, it will use the
    `$router` to go back to the home page.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we'll discuss nested routes.
  prefs: []
  type: TYPE_NORMAL
- en: Working with nested routes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before we start working with nested routes, we will add the Cars component,
    inside the `src/views` folder as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'To work with nested routes, you need to add a `children` array to the `path`
    object inside `router.js`, as in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Each of these child components also needs routing. Since they are nested routes,
    they need to be called from their respective parent component. In our case, this
    is the `HelloCars` component. We will add the `HelloCars.vue` component inside
    the `components` folder, using the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Now all we have to do is add additional child components that our parent `HelloCars.vue`
    component will call.
  prefs: []
  type: TYPE_NORMAL
- en: 'The default child component, available from the `/cars` route, is the `CarsHome.vue`
    component as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'As mentioned earlier, one of the `HelloCars.vue` component''s children is the
    `CarsNew.vue` component as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Another child of the `HelloCars.vue` component is `CarsOld.vue` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Now that we understand how nested routing works, we'll shift our focus and briefly
    discuss lazy-loading routes.
  prefs: []
  type: TYPE_NORMAL
- en: Lazy- loading routes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sometimes, webpack produces JavaScript bundles that are too large. This will
    slow down the time it takes to load our web apps, which is, of course, undesirable.
  prefs: []
  type: TYPE_NORMAL
- en: 'To avoid this scenario, we can think back to how vue-router works: each route
    is a separate Vue component.'
  prefs: []
  type: TYPE_NORMAL
- en: We've already seen earlier that webpack produces **chunks** when bundling our
    Vue apps. This behavior can be used to our advantage, so that each component gets
    bundled into a separate chunk. This is achieved with Vue's **async components**
    and **code-splitting** in webpack.
  prefs: []
  type: TYPE_NORMAL
- en: Working with dynamic routes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'What is a dynamic route? Let''s imagine a shopping platform, in which the URL
    structure of any item for sale is listed in a link that looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'The `:id` section is what''s called a **dynamic segment**.  To work with dynamic
    segments, you first need to list them, just like any other route, inside `router.js` in
    the route''s array of objects as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Obviously, in the preceding code, we're using the three dots to save space.
  prefs: []
  type: TYPE_NORMAL
- en: 'Back inside the `Item.vue` view component''s template tag, we''ll need to add
    the following syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: The state of our active route is stored inside `$route`.
  prefs: []
  type: TYPE_NORMAL
- en: At least an entire chapter could be written about dynamic routes alone, so at
    this time, we'll need to continue our discussion by looking at triggering routes
    from the `methods` option in Vue instances.
  prefs: []
  type: TYPE_NORMAL
- en: With this, we conclude this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we looked at how to add a new Vue project with vue-router and
    vuex. We also configured preset options through VS Code's command line. We discussed vue-router
    routes, and we saw how to use named routes, add a dynamic route, navigate to a
    route from the methods option in a Vue instance, and work with nested (child)
    routes.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we'll see how to work with ESLint and Prettier in Vue CLI
    3.
  prefs: []
  type: TYPE_NORMAL
