- en: '*Chapter 5*: Beautiful Layouts with CardView and ScrollView'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This is the last chapter on layouts before we spend some time focusing more
    on Java and object-oriented programming. We will formalize our learning of some
    of the different attributes we have already met, and we will also introduce two
    more cool layouts: `ScrollView` and `CardView`. To finish the chapter off, we
    will run the `CardView` project on a tablet emulator.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following:'
  prefs: []
  type: TYPE_NORMAL
- en: A quick summary of UI attributes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Build our neatest layout so far using `ScrollView` and `CardView`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create and use a tablet emulator
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's start by recapping some attributes.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can find the code files present in this chapter on GitHub at [https://github.com/PacktPublishing/Android-Programming-for-Beginners-Third-Edition/tree/main/chapter%2005](https://github.com/PacktPublishing/Android-Programming-for-Beginners-Third-Edition/tree/main/chapter%2005).
  prefs: []
  type: TYPE_NORMAL
- en: Attributes quick summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the last few chapters, we used and discussed quite a few different attributes.
    I thought it would be worth a quick summary and further investigation of a few
    of the more common attributes.
  prefs: []
  type: TYPE_NORMAL
- en: Sizing using dp
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As we know, there are thousands of different Android devices. To try and have
    a system of measurement that works across different devices, Android uses **density-independent**
    **pixels**, or **dp**, as a unit of measurement. The way this works is by first
    calculating the density of the pixels on the device an app is running on.
  prefs: []
  type: TYPE_NORMAL
- en: Important Note
  prefs: []
  type: TYPE_NORMAL
- en: We can calculate density by dividing the horizontal resolution by the horizontal
    size in inches of the screen. This is all done on the fly, on the device on which
    our app is running.
  prefs: []
  type: TYPE_NORMAL
- en: All we must do is use `dp` in conjunction with a number when setting the size
    of the various attributes of our widgets. Using density-independent measurements,
    we can design layouts that scale to create a uniform appearance on as many different
    screens as possible.
  prefs: []
  type: TYPE_NORMAL
- en: So, does that mean problem solved then? We just use `dp` everywhere and our
    layouts will work everywhere? Unfortunately, density independence is only part
    of the solution. We will see more of how we can make our apps look great on a
    range of different screens throughout the rest of the book.
  prefs: []
  type: TYPE_NORMAL
- en: 'As an example, we can affect the height and width of a widget by adding the
    following code to its attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Alternatively, we can use the attributes window and add them through the comfort
    of the appropriate edit boxes.
  prefs: []
  type: TYPE_NORMAL
- en: We can also use the same `dp` units to set other attributes, such as margin
    and padding. We will look more closely at margin and padding in a minute.
  prefs: []
  type: TYPE_NORMAL
- en: Sizing fonts using sp
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Another device-dependent unit of measurement used for sizing Android fonts is
    `sp` unit of measurement is used for fonts and is pixel density-dependent in the
    exact same way that `dp` is.
  prefs: []
  type: TYPE_NORMAL
- en: The extra calculation that an Android device will use when deciding how big
    your font will be, based on the value of `sp` you use, is the user's own font
    size settings. So, if you test your app on devices and emulators with normal-sized
    fonts, then a user who has a sight impairment (or just likes big fonts) and has
    the font setting on large will see something different from what you saw during
    testing.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to try playing around with your Android device''s font size settings,
    you can do so on the emulator or a real device by selecting **Settings** | **Display**
    | **Advanced** | **Font size** and try adjusting the slider highlighted in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.1 – Sizing fonts using sp'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.01_B16773.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.1 – Sizing fonts using sp
  prefs: []
  type: TYPE_NORMAL
- en: 'We can set the size of fonts using `sp` in any widget that has text. This includes
    `Button`, `TextView`, and all the UI elements under the `textSize` property like
    so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: As usual, we can also use the attributes window to achieve the same thing.
  prefs: []
  type: TYPE_NORMAL
- en: Determining size with wrap or match
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We can also decide how the size of UI elements, and many other UI elements,
    behave in relation to the containing/parent element. We can do so by setting the
    `layoutWidth` and `layoutHeight` attributes to either `wrap_content` or `match_parent`.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, say we set the attributes of a lone button on a layout to the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, the button will expand in both height and width to **match** the **parent**.
    We can see that the button in the next screenshot fills the entire screen:'
  prefs: []
  type: TYPE_NORMAL
- en: Important Note
  prefs: []
  type: TYPE_NORMAL
- en: I added the button on a new layout to the project from the previous chapter.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.2 – The button expanded in both height and width to match the parent'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.02_B16773.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.2 – The button expanded in both height and width to match the parent
  prefs: []
  type: TYPE_NORMAL
- en: 'More common for a button is `wrap_content`, as shown next:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This causes the button to be as big as it needs to `dp` and text in `sp`).
  prefs: []
  type: TYPE_NORMAL
- en: Using padding and margin
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you have ever done any web design, then you will be very familiar with the
    next two attributes. **Padding** is the space from the edge of the widget to the
    start of the content in the widget. **Margin** is the space outside of the widget
    that is left between other widgets – including the margins of other widgets, should
    they have any. Here is a visual representation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.3 – Padding and margin used'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.03_B16773.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.3 – Padding and margin used
  prefs: []
  type: TYPE_NORMAL
- en: 'We can set the padding and margin in a straightforward way, equally for all
    sides, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Look at the slight difference in naming convention for the margin and padding.
    The padding is just called `padding` but the margin is referred to as `layout_margin`.
    This reflects the fact that the padding only affects the UI element itself, but
    the margin can affect other widgets in the layout.
  prefs: []
  type: TYPE_NORMAL
- en: 'Alternatively, we can specify different top, bottom, left, and right margins
    and paddings, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Specifying margin and padding values for a widget is optional and a value of
    0 will be assumed if nothing is specified. We can also choose to specify some
    of the different sides' margins and paddings but not others, as in the earlier
    example.
  prefs: []
  type: TYPE_NORMAL
- en: It is probably becoming obvious that the way we design our layouts is extremely
    flexible, but also that it is going to take some practice to achieve precise results
    with this many options. We can even specify negative margin values to create overlapping
    widgets.
  prefs: []
  type: TYPE_NORMAL
- en: Let's look at a few more attributes, and then we will go ahead and play around
    with a stylish layout – `CardView`.
  prefs: []
  type: TYPE_NORMAL
- en: Using the layout_weight property
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Weight refers to a relative amount compared to other UI elements. So, for `layout_weight`
    to be useful, we need to assign a value to the `layout_weight` property on two
    or more elements.
  prefs: []
  type: TYPE_NORMAL
- en: We can then assign portions that add up to 100% in total. This is especially
    useful for dividing up screen space between parts of the UI where we want the
    relative space they occupy to remain the same regardless of screen size.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using `layout_weight` in conjunction with `sp` and `dp` units can make for
    a simple and flexible layout. For example, look at this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is what this code will do:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.4 – The UI with the layout_weight property in use'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.04_B16773.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.4 – The UI with the layout_weight property in use
  prefs: []
  type: TYPE_NORMAL
- en: Notice that all the `layout_height` attributes are set to `0dp`. Effectively,
    `layout_weight` is replacing the `layout_height` property. The context in which
    we use `layout_weight` is important or it won't work. Also note that we don't
    have to use fractions of 1; we can use whole numbers, percentages, or any other
    number; as long as they are relative to each other, they will probably achieve
    the effect you are after. Note that `layout_weight` only works in certain contexts.
  prefs: []
  type: TYPE_NORMAL
- en: Using gravity
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Gravity** can be our friend and can be used in so many ways in our layouts.
    Just like gravity in the solar system, it affects the position of items by moving
    them in a given direction, as if they were being acted upon by gravity. The best
    way to see what gravity can do is to look at some example code and pictures.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Say we set the `gravity` property on a button (or another widget) to `left|center_vertical`
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'This will have an effect that looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.5 – Setting the gravity property on a widget'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.05_B16773.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.5 – Setting the gravity property on a widget
  prefs: []
  type: TYPE_NORMAL
- en: Notice that the contents of the widget (in this case the button's text) are
    indeed aligned left and centrally vertical.
  prefs: []
  type: TYPE_NORMAL
- en: 'In addition, a widget can influence its own position within a layout element
    with the `layout_gravity` element, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'This would set the widget within its layout, as expected, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.6 – Setting the gravity layout to left'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.06_B16773.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.6 – Setting the gravity layout to left
  prefs: []
  type: TYPE_NORMAL
- en: The previous code allows different widgets within the same layout to be affected
    as if the layout has multiple different gravities.
  prefs: []
  type: TYPE_NORMAL
- en: 'The contents of all the widgets in a layout can be affected by the `gravity`
    property of their parent layout by using the same code as a widget:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: There are in fact many more attributes than those we have discussed. Many we
    won't need in this book and some are quite obscure, and you might never need them
    in your entire Android career. But others are quite commonly used, such as `background`,
    `textColor`, `alignment`, `typeface`, `visibility`, and `shadowColor`. Let's explore
    some more attributes and layouts now.
  prefs: []
  type: TYPE_NORMAL
- en: Building a UI with CardView and ScrollView
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Create a new project in the usual way and choose the `CardView Layout`.
  prefs: []
  type: TYPE_NORMAL
- en: We will design our `CardView` masterpiece inside a `ScrollView` layout, which,
    as the name suggests, allows the user to scroll through the contents of the layout.
  prefs: []
  type: TYPE_NORMAL
- en: Expand the folders in the project explorer window so you can see the `res` folder.
    Expand the `res` folder to see the `layout` folder.
  prefs: []
  type: TYPE_NORMAL
- en: Right-click the **layout** folder and select **New**. Notice there is an option
    for **Layout** **resource file**. Select **Layout resource file** and you will
    see the **New Resource File** dialog window.
  prefs: []
  type: TYPE_NORMAL
- en: In the `main_layout`. The name is arbitrary, but this layout is going to be
    our main layout, so the name makes that plain.
  prefs: []
  type: TYPE_NORMAL
- en: Notice it is set to `ScrollView`. This layout type appears to work just like
    `LinearLayout`; the difference is that when there is too much content to display
    onscreen, it will allow the user to scroll through the content by swiping with
    their finger.
  prefs: []
  type: TYPE_NORMAL
- en: Click the `ScrollView` in an XML file called `main_layout` and place it in the
    `layout` folder ready for us to build our `CardView`-based UI.
  prefs: []
  type: TYPE_NORMAL
- en: Android Studio will open the UI designer ready for action.
  prefs: []
  type: TYPE_NORMAL
- en: Setting the view with Java code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As we have done before, we will now load the `main_layout.xml` file as the layout
    for our app by calling the `setContentView` method in the `MainActivity.java`
    file.
  prefs: []
  type: TYPE_NORMAL
- en: Select the `app/java/your_package_name`, where `your_package_name` is equal
    to the package name that was auto-generated when you created the project.
  prefs: []
  type: TYPE_NORMAL
- en: 'Amend the code in the `onCreate` method to look exactly like this next code.
    I have highlighted the line that you need to add:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: You could now run the app but there is nothing to see except an empty `ScrollView`.
  prefs: []
  type: TYPE_NORMAL
- en: Adding image resources
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We are going to need some images for this project. This is so that we can demonstrate
    how to add them into the project (this section) and neatly display and format
    them in a `CardView` widget (next section).
  prefs: []
  type: TYPE_NORMAL
- en: It doesn't really matter where you get your images from; it is the practical,
    hands-on experience that is the purpose of this exercise. To avoid copyright and
    royalty problems, I am going to use some book images from the Packt Publishing
    website. This also makes it easy for me to provide you with all the resources
    you need to complete the project and should relieve the bother of you acquiring
    your own images. Feel free to swap the images in the [*Chapter 5*](B16773_05_ePub_RK.xhtml#_idTextAnchor101)`/res/drawable`
    folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are three images: `image_1.png`, `image_2.png`, and `image_3.png`. To
    add them to the project, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Find the picture files using your operating system's file browser.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Highlight them all and press *Ctrl* + *C* to copy them.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Android Studio project explorer, select the **res/drawable** folder by
    left-clicking it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click the **drawable** folder and select **Paste**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the pop-up window that asks `drawable` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **OK** again to **Copy Specified Files**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You should now be able to see your images in the `drawable` folder along with
    a couple of other files that Android Studio placed there when the project was
    created, as shown in this next screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.7 – Expanding the drawable folder'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.07_B16773.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.7 – Expanding the drawable folder
  prefs: []
  type: TYPE_NORMAL
- en: Before we move on to the `CardView` widget itself, let's design what we will
    put inside our cards.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the contents for the cards
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The next thing we need to do is create the contents for our cards. It makes
    sense to separate the content from the layout. What we will do is create three
    separate layouts, called `card_contents_1`, `card_contents_2`, and `card_contents_3`.
    They will each contain a `LinearLayout`, which itself will contain an image and
    some text.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create three more layouts with a `LinearLayout` layout at their root:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click the **layout** folder and select **New layout resource file**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name the file `card_contents_1` and change **…ConstraintLayout** to **LinearLayout**
    for the root element.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click `layout` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Repeat *steps 1* through *3* two more times, changing the filename each time
    to `card_contents_2` and then `card_contents_3`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, select the `sp`, `dp`, and `gravity` attributes to make them look nice:'
  prefs: []
  type: TYPE_NORMAL
- en: Drag a `TextView` onto the top of the layout.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag an `ImageView` onto the layout below the `TextView`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Resources** pop-up window, select **Project** | **image_1**, then click
    **OK**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag another two `TextView` below the image.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This is what your layout should look like now:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.8 – Making the layout look nicer by adding sp, dp, and gravity attributes'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.08_B16773.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.8 – Making the layout look nicer by adding sp, dp, and gravity attributes
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s use some Material Design guidelines to make the layout look more
    appealing:'
  prefs: []
  type: TYPE_NORMAL
- en: Important Note
  prefs: []
  type: TYPE_NORMAL
- en: It is possible that as you proceed through these modifications the UI elements
    on the bottom of the layout might disappear off the bottom of the design view.
    If this happens to you, remember you can always select any UI element from the
    **Component Tree** window underneath the palette.
  prefs: []
  type: TYPE_NORMAL
- en: Set the `textSize` attribute for the `TextView` widget at the top to `24sp`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Still working on the `TextView` widget at the top, set the `16dp`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the `text` attribute to `Learning Java by Building Android Games` (or whatever
    title suits your image).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the `ImageView` widget, set the `layout_width` and `layout_height` attributes
    to `wrap_content`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Still working on the `ImageView` widget, set the `layout_gravity` attribute
    to `center_horizontal`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the `TextView` widget below `ImageView`, set `textSize` to `16sp`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the same `TextView` widget, set `16dp`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the same `TextView` widget, set the `text` attribute to `Learn Java` `and
    Android from scratch by building 6 playable games` (or something that describes
    your image).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the bottom `TextView` widget, change the `text` attribute to `BUY NOW`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the same `TextView` widget, set `16dp`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the same `TextView` widget, set the `textSize` attribute to `24sp`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the same `TextView` widget, set the `textColor` attribute to `@color/` `teal_200`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the `LinearLayout` layout holding all the other elements, set `15dp`. Note
    that it is easiest to select `LinearLayout` from the **Component Tree** window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'At this point, your layout will look very similar to as in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.9 – Enhancing the appeal of the layout using some Material Design
    guidelines'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.09_B16773.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.9 – Enhancing the appeal of the layout using some Material Design guidelines
  prefs: []
  type: TYPE_NORMAL
- en: Now lay out the other two files (`card_contents_2` and `card_contents_3`) with
    the exact same dimensions and colors. When you get the `image_2` and `image_3`,
    respectively. Also, change all the `text` attributes on the first two `TextView`
    elements so that the titles and descriptions are unique. The titles and descriptions
    don't really matter; it is the layout and appearance we are learning about.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that all the sizes and colors were derived from the Material Design website
    here: [https://material.io/design/introduction](https://material.io/design/introduction)
    and the Android-specific UI guidelines here: [https://developer.android.com/guide/topics/ui/look-and-feel](https://developer.android.com/guide/topics/ui/look-and-feel).
    These are well worth studying alongside or soon after you complete this book.'
  prefs: []
  type: TYPE_NORMAL
- en: Now we can move on to the `CardView` widgets.
  prefs: []
  type: TYPE_NORMAL
- en: Defining dimensions for CardView
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Right-click the `dimens` (short for dimensions) and click `dimens.xml`. We will
    use this file to create some common values that our `CardView` will use by referring
    to them.
  prefs: []
  type: TYPE_NORMAL
- en: 'To achieve this, we will edit the XML directly in the `dimens.xml` file to
    be the same as the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Be sure to make it exactly the same because a small omission could cause an
    error and prevent the project from working.
  prefs: []
  type: TYPE_NORMAL
- en: We have defined two resources, the first called `card_corner_radius` with a
    value of `16dp` and the second called `card_margin` with a value of `10dp`.
  prefs: []
  type: TYPE_NORMAL
- en: We will refer to these resources from the `main_layout` file and use them to
    consistently configure our three `CardView` elements.
  prefs: []
  type: TYPE_NORMAL
- en: Adding CardView to our layout
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Switch to the `ScrollView` that will scroll the contents of our app, rather
    like how a web browser scrolls the contents of a web page that doesn't fit on
    one screen.
  prefs: []
  type: TYPE_NORMAL
- en: '`ScrollView` has a limitation – it can only have one direct child layout. We
    want it to contain three `CardView` widgets.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To overcome this problem, drag a `LinearLayout` layout from the `Layouts` category
    of the palette. Be sure to pick **LinearLayout (vertical)**, as represented by
    this icon in the palette:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.10 – The LinearLayout (vertical) icon'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.10_B16773.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.10 – The LinearLayout (vertical) icon
  prefs: []
  type: TYPE_NORMAL
- en: We will add our three `CardView` inside the `LinearLayout`, and then the whole
    thing will scroll nice and smoothly without any errors.
  prefs: []
  type: TYPE_NORMAL
- en: The `CardView` widget can be found in the `CardView`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Drag a `CardView` onto the `LinearLayout` on the design and you might or might
    not get a pop-up message in Android Studio. This is the message:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.11 – The popup asking for permission to add CardView'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.11_B16773.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.11 – The popup asking for permission to add CardView
  prefs: []
  type: TYPE_NORMAL
- en: If you do get this message, click the `CardView` features to older versions
    of Android that wouldn't otherwise have them.
  prefs: []
  type: TYPE_NORMAL
- en: You should now have a `CardView` on the design. Until there are some contents
    in it, the `CardView` is only easily visible in the **Component Tree** window.
  prefs: []
  type: TYPE_NORMAL
- en: 'Select the `CardView` via **Component Tree** and configure the following attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: Set `layout_width` to `wrap_content`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set `layout_gravity` to `center`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set `@dimen/card_margin` to use the value for a margin that we defined in the
    `dimens.xml` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the `cardCornerRadius` attribute to `@dimen/card_corner_radius` to use the
    value for a radius that we defined in the `dimens.xml` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set `cardElevation` to `2dp`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now switch to the **Code** tab and you will find you have something like this
    next code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: The previous code listing only shows the code for `CardView`.
  prefs: []
  type: TYPE_NORMAL
- en: The problem at the moment is that our `CardView` is empty. Let's fix that by
    adding the contents of `card_contents_1.xml`. Here is how to do it.
  prefs: []
  type: TYPE_NORMAL
- en: Including layout files inside another layout
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We need to edit the code very slightly and here is why. We need to add an `include`
    element to the code. The `include` element is the code that will insert the contents
    from the `card_contents_1.xml` layout. The problem is that to add this code, we
    need to slightly alter the format of the `CardView` XML. The current format starts
    and concludes `CardView` with one single tag, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'We need to change the format to a separate opening and closing tag like this
    (don''t change anything just yet):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'This change in format will enable us to add the `include…` code and our first
    `CardView` widget will be complete. With this in mind, edit the code of the `CardView`
    to be exactly the same as the following code. I have highlighted the two new lines
    of code but note that the forward slash that was after the `cardElevation` attribute
    has also been removed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'You can now view the `main_layout` file in the visual designer and see the
    layout inside the `CardView` element. The visual designer does not reveal the
    real aesthetics of `CardView`, however. We will see all the `CardView` widgets
    together scrolling nicely in the completed app shortly. Here is a screenshot of
    the screen in the emulator showing where we are up to so far:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.12 – The layout inside the CardView element'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.12_B16773.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.12 – The layout inside the CardView element
  prefs: []
  type: TYPE_NORMAL
- en: Add two more `CardView` widgets to the layout and configure them the same as
    the first with one exception. On the second `CardView`, set `cardElevation` to
    `22dp` and on the third `CardView`, set `cardElevation` to `42dp`. Change the
    `include` code to reference `card_contents_2` and `card_contents_3`, respectively.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: You could do this very quickly by copy and pasting the `CardView` XML and simply
    amending the elevation and the `include` code as mentioned in the previous paragraph.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is what the `CardView`-related code inside the `LinearLayout` code will
    look like when you are done:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we can run the app and see our three beautiful, elevated `CardView` widgets
    in action. In this next screenshot, I have captured it so that you can see the
    effect the elevation setting has on creating a very pleasing depth with shadow
    effect:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.13 – A pleasing depth with shadow effect'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.13_B16773.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.13 – A pleasing depth with shadow effect
  prefs: []
  type: TYPE_NORMAL
- en: Important Note
  prefs: []
  type: TYPE_NORMAL
- en: The screenshot will likely be slightly unclear in the black and white printed
    version of this book. Be sure to build and run the app for yourself to see this
    cool effect.
  prefs: []
  type: TYPE_NORMAL
- en: Let's explore our latest app on a tablet emulator.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a tablet emulator
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will often want to test our apps on multiple different devices. Fortunately,
    Android Studio makes it easy to create as many different emulators as we like.
    Follow these next steps to make a tablet emulator.
  prefs: []
  type: TYPE_NORMAL
- en: 'Select **Tools** | **AVD Manager** and then click the **Create Virtual Device…**
    button on the **Your Virtual Devices** window. You will see the **Select Hardware**
    window pictured next:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.14 – The Select Hardware window'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.14_B16773.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.14 – The Select Hardware window
  prefs: []
  type: TYPE_NORMAL
- en: Select the **Tablet** option from the **Category** list, and then highlight
    the **Pixel C** tablet from the choice of available tablets.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: If you are reading this sometime in the future, the Pixel C option might have
    been updated. The choice of tablet is less important than practicing this process
    of creating a tablet emulator and then testing our apps.
  prefs: []
  type: TYPE_NORMAL
- en: Click the **Next** button. On the **System Image** window that follows, just
    click **Next** because this will select the default system image. It is possible
    that choosing your own image will cause the emulator not to work properly.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, on the **Android Virtual Device** screen, you can leave all the default
    options. Feel free to change the **AVD Name** option for your emulator or the
    **Startup Orientation** (portrait or landscape) option if you want to. Click the
    **Finish** button when you are ready.
  prefs: []
  type: TYPE_NORMAL
- en: 'Shut down the phone emulator if you have it running. Now, whenever you run
    one of your apps from Android Studio, you will be given the option to choose Pixel
    C (or whatever tablet you created). Here is a screenshot of my Pixel C emulator
    running the `CardView` app:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.15 – Pixel C emulator running the CardView app'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.15_B16773.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.15 – Pixel C emulator running the CardView app
  prefs: []
  type: TYPE_NORMAL
- en: Not too bad, but there is quite a large amount of wasted space and it looks
    a bit odd. Let's try it in landscape mode. If you try running the app with the
    tablet in landscape mode, the results are worse. What we can learn from this is
    that we are going to have to design our layouts for different-sized screens and
    different orientations. Sometimes they will be clever designs that scale to suit
    different sizes or orientations, but often they will be completely different designs
    in separate layout files.
  prefs: []
  type: TYPE_NORMAL
- en: Frequently asked question
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Do I need to master all this stuff about Material Design?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: No, not unless you want to be a professional designer. If you just want to make
    your own apps and sell them or give them away on the Play Store, then knowing
    just the basics is good enough.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we built aesthetically pleasing `CardView` layouts and put
    them in a `ScrollView` so the user can swipe through the contents of the layout
    a bit like browsing a web page. To finish the chapter off, we launched a tablet
    emulator and saw that we are going to need to get smart with how we design our
    layouts if we want to cater to different device sizes and orientations. In [*Chapter
    24*](B16773_24_ePub_RK.xhtml#_idTextAnchor411)*, Design Patterns, Multiple Layouts,
    and Fragments*, we will begin to take our layouts to the next level and learn
    how to cope with such a diverse array of devices using fragments.
  prefs: []
  type: TYPE_NORMAL
- en: Before we do, however, it will serve us well to learn more Java and how we can
    use it to control our UI and interact with the user. That will be the focus of
    the next seven chapters.
  prefs: []
  type: TYPE_NORMAL
- en: Of course, the elephant in the room at this point is that despite learning a
    lot about layouts, project structure, the connection between Java and XML, and
    much more besides, our UIs, no matter how pretty, don't actually do anything!
    We need to seriously upgrade our Java skills while also learning more about how
    to apply them in an Android context. In the next chapter, we will do exactly that.
    We will see how to add Java code that executes at exactly the moment we need it
    to by working with the **Android Activity life cycle**.
  prefs: []
  type: TYPE_NORMAL
