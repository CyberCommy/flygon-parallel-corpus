- en: '*Chapter 2*: Dnotebook - An Interactive Computing Environment for JavaScript'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The idea of making our code expressive enough for humans to read and not just
    for machines to consume was well pioneered by Donald Knuth, who also wrote a book
    about it called *Literate Programming* ([https://www.amazon.com/Literate-Programming-byKnuth-Knuth/dp/B004WKFC4S](https://www.amazon.com/Literate-Programming-byKnuth-Knuth/dp/B004WKFC4S)).
    Tools such as Jupyter Notebook give equal weight to prose and code, hence programmers
    and researchers are free to express themselves extensively through code and text
    (including images and workflows).
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you're going to learn about **Dnotebook** – an interactive
    coding environment for JavaScript. You will learn how to install Dnotebook locally.
    You will also learn how to write code and Markdown in it. In addition, you will
    learn how to save and import the saved notebook.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to Dnotebook
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setup and installation of Dnotebook
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Basic concepts behind interactive computing in Dnotebook
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing interactive code
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with Markdown cells
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Saving notebooks
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To successfully follow along in this chapter, you need to have **Node.js** and
    a modern browser such as Chrome, Safari, Firefox, or Opera installed on your computer.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: 'To install Node.js, you can follow the official guide here: [https://nodejs.org/en/](https://nodejs.org/en/).'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: The code for this chapter is available and can be cloned from GitHub at [https://github.com/PacktPublishing/Building-Data-Driven-Applications-with-Danfo.js/tree/main/Chapter02](https://github.com/PacktPublishing/Building-Data-Driven-Applications-with-Danfo.js/tree/main/Chapter02)
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to Dnotebook
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Over the past few years in the field of data science, interactive computing
    environments such as Jupyter Notebook and JupyterLab have actually made a huge
    impact in terms of how code is shared, and this has enhanced fast and rapid iterations
    of ideas.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: In recent times, data science is moving towards the browser side, in order to
    support diverse users such as web developers. This means that a lot of mature
    data science tooling available in the Python ecosystem needed to be ported or
    made available in JavaScript as well. Following this line of reasoning, we, the
    authors of this book, as well as the creators of Danfo.js, decided to create a
    new version of the Jupyter Notebook specifically targeted at the JavaScript ecosystem.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: 'Dnotebook, as we have called it, helps you to perform quick and interactive
    experimentation/prototyping in JavaScript. That means you can write code and view
    the results instantly in an interactive and notebook-like manner as seen in the
    following screenshot:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.1 – Sample Interactive coding using Dnotebook'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17076_02_01.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.1 – Sample Interactive coding using Dnotebook
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: 'Dnotebook can be used in numerous areas and for different things such as the
    following:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: '**Data science/analysis**: It can help you easily perform interactive data
    exploration and analysis using efficient JavaScript packages such as *Danfo.js*,
    *Plotly.js*, *Vega*, *Imagecook*, and so on.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Machine learning**: It can help you easily build, train, and prototype machine
    learning models using machine learning libraries such as *Tensorflow.js*.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Learning JavaScript interactively**: It can help you learn or teach JavaScript
    in an interactive and visual style. This can foster learning and understanding.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Plain experimentation/prototyping**: Any experimentation that can be written
    in JavaScript can run on Dnotebook, hence this can aid quick experimentation with
    ideas.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now that you have an idea of what Dnotebook is, let's learn how to set up and
    use it locally.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: Setup and installation of Dnotebook
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To get Dnotebook installed and running locally, you need to ensure that Node.js
    is installed. Once Node.js is installed, you can easily install Dnotebook by running
    the following command in your terminal:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The preceding command installs Dnotebook globally. This is the recommended way
    of installing it, as it ensures that the Dnotebook server can be started from
    anywhere on our computer.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: You can also use Dnotebook online without installing it; check out the Dnotebook
    playground ([https://playnotebook.jsdata.org/demo](https://playnotebook.jsdata.org/demo)).
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: 'After installation, you can start the server by running the following in a
    terminal/command prompt:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This command will open up a tab as shown in the following screenshot in your
    default browser at port http://localhost:4400:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.2 – Dnotebook home page'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17076_02_02.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.2 – Dnotebook home page
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: The opened page is the default page for the Dnotebook interface, and from here
    you can start writing JavaScript and Markdown.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: We are currently using **Dnotebook version 0.1.1**, and as such, when using
    this book in the future, you might notice some minor changes, especially in the
    UI.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: Basic concepts behind interactive computing in Dnotebook
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to write interactive code/Markdown in Dnotebook, you need to understand
    some concepts such as cells and persistency/state. We start this section by explaining
    these concepts.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: Cells
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A cell in Dnotebook is a unit block where code or text can be written in order
    to be executed. The following is an example screenshot showing code and Markdown
    cells:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.3 – Empty code and Markdown cells in Dnotebook'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17076_02_03.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.3 – Empty code and Markdown cells in Dnotebook
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: 'Each cell has edit buttons that can be used for different purposes, as you''ll
    see in the following screenshot:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.4 – Action buttons available in each cell'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17076_02_04.jpg)'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.4 – Action buttons available in each cell
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s understand what these buttons do:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: '**Run**: The **Run** button can be used to execute a cell in order to show
    the output.'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Add Code**: The add code button has two variants (up and down) specified
    by the arrow direction. They can be used to add a code cell above or below the
    current cell.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Add Markdown**: The add markdown button, like the add code button, has two
    variants to add Markdown cells either below or above the current cell.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Delete**: As the name suggests, this button can be used to delete a cell.'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are two types of cells, namely code cells and markdown cells.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: Code cells
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A **code cell** is a cell where any JavaScript code can be written and executed.
    The first cell in a new notebook is always a code cell, and we can test this out
    with the classic hello world example.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: 'In your open Dnotebook, write the following command and click the **Run** button:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Note
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: Hovering over a code cell reveals the **Run** button. Alternatively, you can
    use the shortcut *Ctrl* + *Enter* in Windows or *Command* + *Enter* in Mac to
    run a code cell.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: 'The hello world code and output should be similar to the following screenshot:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.5 – A code cell and executed output in Dnotebook'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17076_02_05.jpg)'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.5 – A code cell and executed output in Dnotebook
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: Next, let's understand Markdown cells.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: Markdown cells
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Markdown cells** are similar to code cells except for the fact that they
    can only execute Markdown or text. This means that Markdown text can compile any
    text written with Markdown syntax.'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: 'A Markdown cell in Dnotebook is typically white and can be opened by clicking
    the **Text** button in an open cell. The **Text** button is typically available
    for each cell, as shown in the following screenshot:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.6 – Opening a Markdown cell in Dnotebook'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17076_02_06.jpg)'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.6 – Opening a Markdown cell in Dnotebook
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: 'Clicking on the **Text** button opens a Markdown cell, as shown in the following
    screenshot:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.7 – Writing Markdown text in a Markdown cell'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17076_02_07.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.7 – Writing Markdown text in a Markdown cell
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, you can write any Markdown-flavored text, and when executed, the result
    is compiled to text and shown in place of the Markdown cell as follows:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.8 – Output of a Markdown cell'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17076_02_08.jpg)'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.8 – Output of a Markdown cell
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's talk about another important concept in interactive programming,
    called **persistence**/**state**.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: Persistence/state
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Persistence or state in interactive computing is the ability of environment
    variables or data to outlive (persist) the cell that created it. This means variables
    declared/created in one cell are available to another irrespective of the position
    of the cell.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: Each instance of a Dnotebook runs a persistent state, and variables declared
    in a cell without the `let` and `const` declarations are available to all cells.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: There are two main ways we encourage you to declare variables when working in
    Dnotebook.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: 'Option 1 – Without a declaration keyword (preferred method):'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: '`food_price = 100`'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: '`clothing_price = 200`'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: '`total = food_price + clothing_price`'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: 'Option 2 – With the `var` global keyword (this works but is not preferable):'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: '`var food_price = 100`'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: '`var clothing_price = 200`'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: '`var total = food_price + clothing_price`'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: Using keywords such as `let` or `const` makes the variables inaccessible in
    a new cell.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: 'To understand this better, let''s declare some variables and try to access
    them in multiple cells created after or before:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new cell in your open notebook and add the following code:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Run this code cell and you''ll see the sum printed just below the cell, as
    seen in the following screenshot:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.9 – Simple code to add two numbers'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17076_02_09.jpg)'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.9 – Simple code to add two numbers
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, create a new cell following your first cell, by clicking on a code cell
    button, and try to use the `sum` variable as shown in the following code block:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'By executing the preceding cell, you get the output of `85`. This means that
    the variable sum from the first cell persists to the second cell as well as any
    other cell you''ll create, as seen in the following screenshot:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.10 – Two code cells sharing a persistent state'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17076_02_10.jpg)'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.10 – Two code cells sharing a persistent state
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: Markdown cells do not persist variables, as they do not execute JavaScript code.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: Now that you understand what cells and persistency are, you can now easily write
    interactive code in Dnotebook, and in the next section, we'll show you how to
    do that.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: Writing interactive code
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we'll highlight some important things to know when writing
    interactive code in Dnotebook.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: Loading external packages
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Importing external packages into your notebook is very important when writing
    JavaScript, and as such, Dnotebook has an inbuilt function called `load_package`
    for doing this.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: 'The `load_package` method helps you to easily add external packages/libraries
    to your notebook via their CDN links. For instance, to load `Tensorflow.js` and
    `Plotly.js`, you can pass their CDN links to the `load_package` function, as shown
    in the following code:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This loads the packages and adds them to the notebook state so they can be accessed
    from any cell. In the following section, we use the `Plotly` library we just imported.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following code to a new cell in your notebook:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Executing the code cell in the preceding section will display a plot, as shown
    in the following screenshot:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.11 – Making a plot with an external package'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17076_02_11.jpg)'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.11 – Making a plot with an external package
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: Hence, by using `load_package`, you can add any external JavaScript package
    of your choice and work with it interactively in Dnotebook.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: Loading CSV files
  id: totrans-129
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Getting data into your notebook, especially into DataFrames, is very important.
    As such, another built-in function we introduce here is `load_csv`.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: DataFrames represent data in rows and columns. They are analogous to a spreadsheet
    or a database collection of rows and columns. We'll cover DataFrames and Series
    in depth in [*Chapter 3*](B17076_03_ePub_RK.xhtml#_idTextAnchor066), *Getting
    Started with Danfo.js*.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: The `load_csv` function helps you load CSV files over the internet into the
    `Danfo.js` DataFrame asynchronously. You should use this instead of Danfo's built-in
    `read_csv` function when reading big files and you want to track the progress.
    This is because `load_csv` displays a spinner on the navbar to indicate the progress.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s understand this better with an example. In a new code cell, add the
    following code:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: On executing the cell, if you look at the top-right corner, you'll notice a
    spinner that indicates the progress of the data loading.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: After executing the cell, you can interact with the dataset as you would with
    a Danfo DataFrame. For instance, you can use another built-in function `table`
    to easily display the data in tabular format.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: 'In a new cell, add the following code:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'On executing, you should see a table of your data, as shown in the following
    screenshot:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.12 – Loading and displaying a CSV file'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17076_02_12.jpg)'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.12 – Loading and displaying a CSV file
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
- en: Next, we'll briefly look at another built-in function that aids the displaying
    of plots in your notebook.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
- en: Getting a div container for plots
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In order to display plots, most plotting libraries need some sort of container
    or HTML `div`. This is required for plotting using Danfo.js and the Plotly.js
    libraries. In order to make it easier to access an output `div`, Dnotebook comes
    with the `this_div` function built in.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
- en: 'The `this_div` function will return the HTML ID of the current code cell''s
    output. For example, in the following code, we pass the `this_div` value to the
    `plot` method of a DataFrame:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'This will pass the current cell''s `div` ID to the `plot` method of the DataFrame,
    and when executed, will display the resulting plot, as shown in the following
    screenshot:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.13 – Plotting a DataFrame'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17076_02_13.jpg)'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.13 – Plotting a DataFrame
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
- en: Finally, in the following section, we'll talk briefly about printing values
    inside a `for` loop. This does not work as expected, and we'll explain why.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
- en: Gotchas when using a for loop
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When you write a `for` loop and try to print each element in a Dnotebook code
    cell, you get the last element only. This issue has to do with the way the console
    works in the browser. For instance, try executing the following code and observe
    the output:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'If you want to see all output when you run a `for` loop, especially when debugging
    in Dnotebook, you can use Dnotebook''s built-in `forlog` method. This method has
    been appended to the default console object, and can be used as shown in the following
    code block:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Executing the preceding code cell returns all values as shown in the following
    screenshot:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.14 – Comparing the for and forlog methods'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17076_02_14.jpg)'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.14 – Comparing the for and forlog methods
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: You'll notice that when using the `console.forlog` method, each output gets
    printed on a new line, just like the default behavior of `console.log` in a scripting
    environment.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we have covered some important functions and features that
    will be useful when writing interactive code in a Dnotebook environment. In the
    next section, we'll take a look at working with Markdown cells.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
- en: Working with Markdown cells
  id: totrans-165
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Dnotebook supports Markdown, which gives the ability to mix your code with text
    and multimedia, hence enabling easy understanding for people who have access to
    the notebook.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
- en: Markdown is a markup language for creating formatted text using a plain-text
    editor. It is widely used in blogging, documentation pages, and README files.
    If you work with tools such as GitHub, then you have probably used Markdown.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
- en: Like many other tools, Dnotebook supports all Markdown syntax, image importing,
    the adding of links, and more.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
- en: In the following sections, we will see some important features you can leverage
    when using Markdown in Dnotebook.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Markdown cell
  id: totrans-170
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In order to write Markdown in the Dnotebook environment, you need to add a
    Markdown cell by clicking the **Text** button (either up or down). This action
    adds a new Markdown cell to your notebook. The following screenshot shows example
    text written in the Markdown cell:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
- en: '![Fig 2.15 – Writing simple text in a Markdown cell'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17076_02_15.jpg)'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
- en: Fig 2.15 – Writing simple text in a Markdown cell
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
- en: After writing Markdown text in a Markdown cell, you can click the **Run** button
    to execute it. This replaces the cell with the transpiled text in read mode. Double-clicking
    on the text reveals the Markdown cell again in edit mode.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
- en: Adding images
  id: totrans-176
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In order to add images to Markdown cells, you can use the image syntax shown
    in the following snippet:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The following is the output:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
- en: '![Fig 2.16 – Adding images'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17076_02_16.jpg)'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
- en: Fig 2.16 – Adding images
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, in the preceding screenshot, we add a link to an image available
    on the internet. The code is shown here:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The link provided is a link to a dog image. The **Run** button needs to be
    clicked to view the result of the image as shown here:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
- en: '![Fig 2.17 – Markdown image result'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17076_02_17.jpg)'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
- en: Fig 2.17 – Markdown image result
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
- en: In the following sections, you'll learn some basic Markdown syntax that you
    can also add to your notebook. To see a comprehensive guide, you can visit the
    site [https://www.markdownguide.org/basic-syntax/](https://www.markdownguide.org/basic-syntax/).
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
- en: Headings
  id: totrans-190
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To create a heading, you just need to add the pound symbol `(#)` in front of
    a word or phrase:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'If we were to paste the previous texts into the Markdown and click the **Run**
    button, we would get the following output:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
- en: '![Fig 2.18 – Adding header text'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17076_02_18.jpg)'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
- en: Fig 2.18 – Adding header text
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
- en: In the result, you'll notice that a different number of pound signs in front
    of text results in a different size.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
- en: Lists
  id: totrans-198
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Lists are important for enumerating objects and can be added by placing a star
    symbol (*****) in front of text. We provide an example in the following section:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The preceding example creates an unordered list of the items **Food**, **Cat**,
    and **Dog**, with **kitten** as a sub-list of **Cat**.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to create a number list, just add numbers in front of the text, as
    shown here:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
- en: '**First item**'
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Second Item**'
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Lot more**'
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The preceding text when input into the Markdown input field should output the
    following:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
- en: '![Fig 2.19 – List'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17076_02_19.jpg)'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
- en: Fig 2.19 – List
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
- en: In the following section, we will cover an important part of Dnotebook – saving.
    This is extremely important in order to reuse and share your notebooks with other
    people.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
- en: Saving notebooks
  id: totrans-211
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Dnotebook supports the saving and importing of saved notebooks. Saving and importing
    a notebook gives you/others the ability to reuse your notebooks.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
- en: 'To save and import a notebook, click on the **File** menu, and select either
    the **Download Notebook** or **Upload Notebook** button depending on what you
    want to do. The options are displayed in the following screenshot:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
- en: '![Fig 2.20 – Saving and importing a notebook'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17076_02_20.jpg)'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
- en: Fig 2.20 – Saving and importing a notebook
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
- en: Clicking **Download Notebook** saves the notebook in JSON format, and this can
    be easily shared or reloaded.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
- en: Saving and importing
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
- en: To test this feature, go to [https://playnotebook.jsdata.org/demo](https://playnotebook.jsdata.org/demo).
    Try saving the demo notebook. Then open up a new notebook, [https://playnotebook.jsdata.org](https://playnotebook.jsdata.org),
    and import the saved file.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-220
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we introduced Dnotebook, an interactive library that supports
    text and multimedia. First, we covered the installation of Dnotebook locally and
    also pointed out that you can run a deployed version for free online. Next, we
    introduced some base concepts and gotchas when working with code and Markdown,
    and finally, we showed you how to save notebooks for sharing and reuse.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will get started with Danfo.js and introduce some of
    the underlying concepts of this awesome library.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将开始使用Danfo.js，并介绍这个令人惊叹的库的一些基本概念。
