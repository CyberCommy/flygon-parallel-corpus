- en: Memory Forensics with Volatility
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapters, we looked at the various types of memory. This included
    RAM and the swap, or paging, file, which is an area of the hard disk drive which,
    although slower, functions as RAM. We also discussed the issue of RAM being volatile,
    meaning that the data in the RAM is easily lost when there is no longer electrical
    charge or current to the RAM chip. With the data on RAM being the most volatile,
    it ranks high in the *order of volatility* and must be forensically acquired and
    preserved as a matter of high priority.
  prefs: []
  type: TYPE_NORMAL
- en: Many types of data and forensic artifacts reside in RAM and the paging file.
    As discussed earlier, login passwords, user information, running and hidden processes,
    and even encrypted passwords are just some of the many types of interesting data
    that can be found when performing RAM analysis, further compounding the need for
    memory forensics.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will look at the very powerful Volatility Framework and
    its many uses in memory forensics.
  prefs: []
  type: TYPE_NORMAL
- en: About the Volatility Framework
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Volatility Framework is an open source, cross-platform, incident response
    framework that comes with many useful plugins that provide the investigator with
    a wealth of information from a snapshot of memory, also known as a **memory dump**.
    The concept of Volatility has been around for a decade, and apart from analyzing
    running and hidden processes, is also a very popular choice for malware analysis.
  prefs: []
  type: TYPE_NORMAL
- en: To create a memory dump, several tools such as FTK imager, CAINE, Helix, and **LiME**
    (an acronym for **Linux Memory Extractor**) can be used to acquire the memory
    image, or memory dump, and then be investigated and analyzed by the tools within
    the Volatility Framework.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Volatility Framework can be run on any  operating system (32- and 64-bit)
    that supports Python, including:'
  prefs: []
  type: TYPE_NORMAL
- en: Windows XP, 7, 8,8.1, and Windows 10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Windows Server 2003, 2008, 2012/R2, and 2016
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Linux 2.6.11 - 4.2.3 (including Kali, Debian, Ubuntu, CentOS, and more)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: macOS Leopard (10.5.x) and Snow Leopard (10.12.x)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Volatility supports several memory dump formats (both 32- and 64-bit), including:'
  prefs: []
  type: TYPE_NORMAL
- en: Windows crash and hibernation dumps (Windows 7 and earlier)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: VirtualBox
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: VMWare `.vmem` dump
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: VMware saved state and suspended dumps—`.vmss`/`.vmsn`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Raw physical memory—`.dd`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Direct physical memory dump over IEEE 1394 FireWire
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Expert Witness Format** (**EWF**)—`.E01`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**QEMU** (**Quick Emulator**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Volatility even allows for conversion between these formats and boasts of being
    able to accomplish everything similar tools can.
  prefs: []
  type: TYPE_NORMAL
- en: Downloading test images for use with Volatility
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this chapter, we'll be using a Windows XP image named `cridex.vmem`, which
    can be downloaded directly from  [https://github.com/volatilityfoundation/volatility/wiki/Memory-Samples](https://github.com/volatilityfoundation/volatility/wiki/Memory-Samples).
  prefs: []
  type: TYPE_NORMAL
- en: 'Select the link with the Description column, Malware - Cridex to download the
    `cridex.vmem` image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4ad0bf37-39a4-419e-b510-2dd83de2c04b.png)'
  prefs: []
  type: TYPE_IMG
- en: There are many other images on this page that are also publicly available for
    analysis. To practice working with the Volatility Framework and further enhance
    your analytical skills, you may wish to download as many as you like and use the
    various plugins available in Volatility.
  prefs: []
  type: TYPE_NORMAL
- en: Image location
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As we''ll soon see, all plugins in the Volatility Framework are used through
    the Terminal. To make access to the image file easier by not having to specify
    a lengthy path to the image, we have moved the `cridex.vmem` image to the `Desktop`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/341f9fda-2e37-4130-9e17-330c8938cd31.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can also change the directory to the `Desktop` and then run the Volatility
    Framework and its plugins from there. To do this, we open a new Terminal and type
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'We can also view the contents of the `Desktop` to ensure that the `cridex.vmem`
    file is present by typing `ls -l`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b5e7f575-480d-4d95-8822-1d1588210831.png)'
  prefs: []
  type: TYPE_IMG
- en: Using Volatility in Kali Linux
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To start the Volatility Framework, click on the All Applications button at
    the bottom of the sidebar and type `volatility` in the search bar:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a4f58b6a-0d2b-4cbe-9735-f968bfbf8d08.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Clicking on the volatility icon starts the program in a Terminal. When Volatility
    starts, we see that the version being used is `2.6` and also presents us with
    options for use:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5b957c49-2094-4dfa-b57e-63446ea1b0f7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'For a complete list of all plugins at your fingertips, open a separate Terminal
    and run the `volatility -h` command, rather than having to scroll to the top of
    the Terminal that you are using to run Volatility plugin commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/72e86bfa-2f68-4d4e-a749-1bddcb4a60b1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The following screenshot shows a snippet of some of the many plugins within
    the Volatility Framework:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/faf6f1c7-46da-4c72-a2a0-3f29963eae96.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This list comes in handy when performing analysis as each plugin comes with
    its own short description. The following screenshot shows a snippet of the `help`
    command, which gives a description of the `imageinfo` plugin:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/578d5e2d-0111-4db0-8b69-9dd3003dd6c8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The format for using plugins in Volatility is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'As seen in the previous section, to use the `imageinfo` plugin, we would type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Choosing a profile in Volatility
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: All operating systems store information in RAM, however, they may be situated
    in different locations within the memory, according to the operating system used.
    In Volatility, we must choose a profile that best identifies the type of operating
    system and service pack that helps Volatility in identifying locations that store
    artifacts and useful information.
  prefs: []
  type: TYPE_NORMAL
- en: Choosing a profile is relatively simple, as volatility does all the work for
    us, using the `imageinfo` plugin.
  prefs: []
  type: TYPE_NORMAL
- en: The imageinfo plugin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This plugin gives information about the images used, including the suggested
    operating system and `Image Type (Service Pack)`, the `Number of Processors` used,
    and the date and time of the image.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following command is used:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/db2117f6-2736-421f-beca-5bbb24bae972.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The `imageinfo` output shows the `Suggested Profile(s)` as `WinXPSP2x86` and
    `WinXPSP3x86`:'
  prefs: []
  type: TYPE_NORMAL
- en: '**WinXP**: Windows XP'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**SP2/SP3**: Service Pack 2/Service Pack 3'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**x86**: 32 bit architecture'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/c0ef5c59-95c9-4f2c-9938-17753534f374.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The image type, or service pack, is displayed as `3`, suggesting that this
    is a Windows XP, Service Pack 3, 32-bit (x86) operating system that will be used
    as the profile for the case:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bc571c58-962c-4628-83eb-390c313bc50a.png)'
  prefs: []
  type: TYPE_IMG
- en: Once the profile has been chosen, we can now proceed with using Volatility plugins
    for analysis of the `cridex.vmem` image.
  prefs: []
  type: TYPE_NORMAL
- en: Process identification and analysis
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To identify and link connected processes, their IDs, times started, and offset
    locations within the memory image, we will be using the following four plugins
    to get us started:'
  prefs: []
  type: TYPE_NORMAL
- en: '`pslist`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pstree`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`psscan`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`psxview`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The pslist command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This tool not only displays a list of all running processes, but also gives
    useful information such as the **Process ID** (**PID**) and the **Parent PID**
    (**PPID**), and also shows the time the processes were started. In the screenshot
    displayed in this section, we can see the `System`, `winlogon.exe`, `services.exe`,
    `svchost.exe`, and `explorer.exe` services are all started first and then followed
    by `reader_sl.exe`, `alg.exe`, and finally `wuauclt.exe`.
  prefs: []
  type: TYPE_NORMAL
- en: The PID identifies the process and the PPID identifies the parent of the process.
    Looking at the `pslist` output, we can see that the `winlogon.exe` process has
    a `PID` of `608` and a `PPID` of `368`. The PPID’s of the `services.exe` and the
    `lsass.exe` processes (directly after the `winlogon.exe` process) are both `608`,
    indicating that `winlogon.exe` is in fact the PPID for both `services.exe` and
    `lsass.exe`.
  prefs: []
  type: TYPE_NORMAL
- en: For those new to process IDs and processes themselves, a quick Google search
    can assist with identification and description information. It is also useful
    to become familiar with many of the startup processes in order to readily point
    out processes that may be unusual or suspect.
  prefs: []
  type: TYPE_NORMAL
- en: The timing and order of the processes should also be noted as these may assist
    in investigations. In the following screenshot, we can see that several processes,
    including `explorer.exe`, `spoolsv.exe`, and `reader_sl.exe`, all started at the
    same time of  `02:42:36 UTC+0000`. We can also tell that `explorer.exe` is the
    PPID of `reader_sl.exe`.
  prefs: []
  type: TYPE_NORMAL
- en: Adding to this analysis, we can see that there are two instances of `wuauclt.exe`
    with `svchost.exe` as the PPID.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `pslist` command used, is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/ad198753-e43c-4033-929f-9e55b7baeb2a.png)'
  prefs: []
  type: TYPE_IMG
- en: The pstree command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Another process identification command that can be used to list processes is
    the `pstree` command. This command shows the same list of processes as the `pslist`
    command but indentation is also used to identify child and parent processes.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following screenshot, the last two processes listed are `explorer.exe`
    and `reader_sl.exe`. The `explorer.exe` is not indented, while `reader_sl` is
    indented, indicating that `sl_reader` is the child process and `explorer.exe` is
    the parent process:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3f8518c9-5b86-44fe-ba00-d48cdb90a6f5.png)'
  prefs: []
  type: TYPE_IMG
- en: The psscan command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'After viewing the list of running processes, we run the `psscan` command by
    typing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The `psscan` command displays inactive and even hidden processes that can be
    used by malware, such as rootkits, and are well known for doing just that to evade
    discovery by users and antivirus programs.
  prefs: []
  type: TYPE_NORMAL
- en: 'The output of both the `pslist` and `psscan` commands should be compared to
    observe any anomalies:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fd160291-cc00-42b4-ac7d-b5021f0fa375.png)'
  prefs: []
  type: TYPE_IMG
- en: The psxview plugin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As with `psscan`, the `psxview` plugin is used to find and list hidden processes.
    With `psxview` however, a variety of scans are run, including `pslist` and `psscan`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The command to run the `psxview` plugin is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/a80fcda9-a5cc-4aa9-84ad-ab51f81dfed4.png)'
  prefs: []
  type: TYPE_IMG
- en: Analyzing network services and connections
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Volatility can be used to identify and analyze active, terminated, and hidden
    connections along with ports and processes. All protocols are supported and Volatility
    also reveals details of ports used by processes including the times they were
    started.
  prefs: []
  type: TYPE_NORMAL
- en: 'For these purposes, we use the following three commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '`connections`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`connscan`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sockets`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The connections command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `connections` command lists active connections at that point in time, displaying
    local and remote IP addresses with ports and PID. The `connections` command is
    used only for Windows XP and 2003 Server (both 32- and 64-bit). The `connections`
    command is used as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/dee486cb-0335-435d-bf86-815dca17796f.png)'
  prefs: []
  type: TYPE_IMG
- en: The connscan command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `connections` command displayed only one connection as active at that time.
    To display a list of connections that have been terminated, the `connscan` command
    is used. The `connscan` command is also only for Windows XP and 2003 Server (both
    32 and 64-bit) systems:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/5e94a550-3a24-4ae2-b76c-d8ffdf292c13.png)'
  prefs: []
  type: TYPE_IMG
- en: Using the `connscan` command, we are able to see that the same local address
    was previously connected to another `Remote Address` with the IP `125.19.103.198:8080`.
    The `Pid` of `1484` tells us that connection was made by the `explorer.exe` process
    (as displayed using the `pslist` command earlier).
  prefs: []
  type: TYPE_NORMAL
- en: 'More information on remote addresses can be obtained using IP lookup tools
    and websites such as [http://whatismyipaddress.com/ip-lookup](http://whatismyipaddress.com/ip-lookup):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3d9788a6-fda5-45d2-8773-2bb50934969b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'By clicking on the Get IP Details button, the following results are presented
    to us including ISP name, Continent and Country details, along with a map showing
    approximate location of the device with that IP:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e245323b-95d2-4c42-a388-34d9062597da.png)'
  prefs: []
  type: TYPE_IMG
- en: The sockets plugin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `sockets` plugin can be used to give additional connectivity information
    listening sockets. Although UDP and TCP are the only protocols listed in the output
    in the following screenshot, the `sockets` command supports all protocols:'
  prefs: []
  type: TYPE_NORMAL
- en: '>![](img/be8badb1-acdf-4f31-b141-ff590689e6d0.png)'
  prefs: []
  type: TYPE_NORMAL
- en: DLL analysis
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**DLLs** (**Dynamic Link Libraries**) are specific to Microsoft and contain
    code that can be used by multiple programs simultaneously. Inspection of a process''s
    running DDLs and the version information of files and products may assist in correlating
    processes. Processes and DLL information should also be analyzed as they relate
    to user accounts.'
  prefs: []
  type: TYPE_NORMAL
- en: 'For these tasks we can use the following plugins:'
  prefs: []
  type: TYPE_NORMAL
- en: '`verinfo`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dlllist`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`getsids`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The verinfo command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This command lists version information (`verinfo`) about **PE** (**portable
    executable**) files. The output of this file is usually quite lengthy and so can
    be run in a separate Terminal, should the investigator not wish to continuously
    scroll through the current Terminal to review past plugin command lists and output.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `verinfo` command is used as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/bde31f48-77de-4ac2-bc1c-82325244887a.png)'
  prefs: []
  type: TYPE_IMG
- en: The dlllist plugin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `dlllist` plugin lists all running DLLs at that time in memory. DLLs are
    composed of code that can be used by multiple programs simultaneously.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `dlllist` command is used as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/2ae1efeb-ffa2-4ee6-9681-730b5b406ed2.png)'
  prefs: []
  type: TYPE_IMG
- en: The getsids command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: All users can also be uniquely identified by a **Security Identifier** (**SID**).
    The `getsids` command has four very useful items in the order in which the processes
    were started (refer to `pslist` and `pstree` command screenshots).
  prefs: []
  type: TYPE_NORMAL
- en: 'The format for the `getsids` command output is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The first result in the list for example, lists:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '`System`: process'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`(4)`: PID'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`S - 1 - 5- 18`: SID'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`User`: Local system'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the last number in the SID is in the range of 500, this indicates a user
    with administrator privileges. For example, `S – 1 – 5- 32-544` (administrators).
  prefs: []
  type: TYPE_NORMAL
- en: 'The `getsids` command is used as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/a048a636-89d0-44fb-9cc7-a451156a8886.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Scrolling down the `getsids` output, we can see that a user named `Robert`
    with an SID of  `S-1-5-21-79336058` (non-administrator) has started or accessed
    `explorer.exe`, PID `1484`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/503913f5-ec5b-4fb0-bca7-4cf000f44b2e.png)'
  prefs: []
  type: TYPE_IMG
- en: Registry analysis
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Information  about every user, setting, program, and the Windows operating system
    itself can be found within the registry. Even hashed passwords can be found in
    the registry. In the Windows registry analysis, we will be using the following
    two plugins.
  prefs: []
  type: TYPE_NORMAL
- en: '`hivescan`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`hivelist`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The hivescan plugin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `hivescan` plugin displays the physical locations of available registry
    hives.
  prefs: []
  type: TYPE_NORMAL
- en: 'The command to run `hivescan` is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: <pre>**volatility --profile=WinXPSP3x86 -f cridex.vmem hivescan**![](img/9e017b45-e6d9-4e3b-8ac4-b2190123d6ea.png)
  prefs: []
  type: TYPE_NORMAL
- en: The hivelist plugin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For more detailed (and helpful) information on registry hives and locations
    within RAM, the `hivelist` plugin can be used. The `hivelist` command shows the
    details of `Virtual` and `Physical` addresses along with the easier readable plaintext
    names and locations.
  prefs: []
  type: TYPE_NORMAL
- en: 'The command used to run `hivelist` is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/4c251e63-0a56-46f3-a693-94e406d56905.png)'
  prefs: []
  type: TYPE_IMG
- en: Password dumping
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The location of the **Security Accounts Manager** (**SAM**) file is also listed
    using the `hivelist` plugin, shown in the following screenshot. The `SAM` file
    contains hashed passwords for usernames in Windows machines. The path to the `SAM`
    file is seen in the following screenshot as `Windows\system32\config\SAM`. This
    file cannot be accessed by users within Windows while the system is on. This can
    be further used to acquire the hashed passwords in the `SAM` file to crack passwords
    using a `wordlist` along with password-cracking tools such as **John the Ripper**,
    also available in Kali Linux:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3c5e078f-8459-4cff-8608-1bb7742f291f.png)'
  prefs: []
  type: TYPE_IMG
- en: Timeline of events
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Volatility can produce a list of timestamped events, which is essential to any
    investigation. To produce this list, we will use the `timeliner` plugin.
  prefs: []
  type: TYPE_NORMAL
- en: The timeliner plugin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `timeliner` plugin helps investigators by providing a timeline of all the
    events that took place when the image was acquired. Although we have an idea of
    what took place within this scenario, many other dumps may be quite large and
    far more detailed and complex.
  prefs: []
  type: TYPE_NORMAL
- en: The `timeliner` plugin groups details by time and includes process, PID, process
    offset, DDLs used, registry details, and other useful information.
  prefs: []
  type: TYPE_NORMAL
- en: 'To run the `timeliner` command, we type the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/ffd0f266-7b4b-419d-8524-ff4372d2bdb4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The following is a snippet of the `timeliner` command, when scrolling further
    through its output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c06da379-1a2c-4200-a7e0-28e1cf7258f2.png)'
  prefs: []
  type: TYPE_IMG
- en: Malware analysis
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Adding to Volatility's impressive line-up of plugins is the `malfind` plugin.
  prefs: []
  type: TYPE_NORMAL
- en: The `malfind` plugin, as the name suggests, is used to find, or at least direct
    the investigator toward hints of, malware that may have been injected into various
    processes. The output of the `malfind` plugin may be particularly lengthy and
    so should be run in a separate Terminal to avoid constant scrolling when reviewing
    the output from the other plugin commands.
  prefs: []
  type: TYPE_NORMAL
- en: 'The command used to run `malfind` is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/ae6b2287-56c6-4f2a-a987-9b3a5981ab4c.png)'
  prefs: []
  type: TYPE_IMG
- en: The `malfind` plugin can also be run directly on processes using the `-p` switch.
  prefs: []
  type: TYPE_NORMAL
- en: 'As we''ve discovered, `winlogon.exe` is assigned the PID `608`. To run `malfind`
    on PID `608`, we type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/6129e6d3-d3fd-44e8-bcd9-85cb2772a63b.png)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we looked at memory forensics and analysis using some of the
    many plugins available within the Volatility Framework. One of the first, and
    most important, steps in working with Volatility is choosing the profile that
    Volatility will use throughout the analysis. This profile tells Volatility what
    type of operating system is being used. Once the profile was chosen, we were able
    to successfully perform process, network, registry, DLL, and even malware analysis
    using this versatile tool. As we've seen, Volatility can perform several important
    functions in digital forensics and should be used together with other tools we've
    used previously to perform in-depth and detailed forensic analysis and investigations.
  prefs: []
  type: TYPE_NORMAL
- en: Be sure to download more publicly available memory images and samples to test
    your skills in this area. Experiment with as many plugins as you can and of course,
    be sure to document your findings and consider sharing them online.
  prefs: []
  type: TYPE_NORMAL
- en: In our next chapter, we will move on to another powerful tool that does everything
    from acquisition to reporting. Let's get started with Autopsy—The Sleuth Kit®.
  prefs: []
  type: TYPE_NORMAL
