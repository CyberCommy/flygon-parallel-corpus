- en: Adding Views, Routes, and Transitions
  prefs: []
  type: TYPE_NORMAL
- en: You created some simple pages, routes, and even layouts in the previous chapter
    for working with frontend UI frameworks and libraries, but they are just very
    basic ones. So, in this chapter, we will dive deeper into each of them, as well
    as templates in Nuxt. You will customize the default template and layout and create custom
    ones. You will also learn how to customize global meta tags and add specific ones
    to the individual pages of your appchild page. This is useful if the information
    of. You will create CSS and JavaScript transitions and animations for transitioning
    pages. So, by the end of this chapter, you will be able to deliver a simple yet
    fully functioning web app or website (with somedummy data) from what you will
    learn in this chapter and what you already learned in the previous chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'The topics we will cover in this chapter are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating custom routes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating custom views
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating custom transitions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating custom routes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If we are going to understand how a router works in Nuxt, we should first understand
    how it works in Vue. We can then understand how to implement it in our Nuxt app.
    Custom routes in a traditional Vue app are created via Vue Router. So, let's begin
    by understanding what Vue Router is.
  prefs: []
  type: TYPE_NORMAL
- en: Introducing Vue Router
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Vue Router is a Vue plugin that allows you to create robust routes for navigating
    between pages in a single-page application (SPA) without having to refresh the
    page. A quick use is, for example, if we want to have a `User` component that
    is used for all users but with different user IDs. You can use this component
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: In this example, any `/user` route followed by an ID (for example, `/user/1`
    or `user/2`) will be directed to the `User` component, which will render the template
    with the ID. This is only possible when the Vue plugin is installed, so let's
    see how we can install it for Vue apps in the next section, before learning how
    it works in a Nuxt app.
  prefs: []
  type: TYPE_NORMAL
- en: For more information about Vue Router, visit [https://router.vuejs.org/](https://router.vuejs.org/).
  prefs: []
  type: TYPE_NORMAL
- en: Installing Vue Router
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In Vue, you must *explicitly* install Vue Router to create routes in a traditional
    Vue app. Even if you are using Vue CLI (which we will cover in [Chapter 11](b24caa1b-6337-40ee-9c1a-c8586db1f3b2.xhtml),
    *Writing Route Middlewares and Server Middlewares*), you must select Manually
    select features to pick Router from the options that you are prompted to select,
    to choose the features you need. So, let''s take a look at how you can install
    it *manually* in this section. There are two options to install Vue Router:'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can use npm:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, in the app root, explicitly import `vue-router` via `Vue.use()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternatively, you can use CDN or direct download:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: If you are using CDN, simply add `vue-router` after the Vue core and the rest
    of the installation will be taken care of by itself. Once you are done installing
    Vue Router, you can use it to create routes.
  prefs: []
  type: TYPE_NORMAL
- en: Creating routes with Vue Router
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you are using the CDN option, then first of all, create a `.html` file in
    your project root with the following basic HTML structure and include the CDN
    links in the `<head>` block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'After that, you can get Vue Router started very quickly by following these
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the app base with the following markups in the `<body>` block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The `<router-link>` component is used to specify the target location and will
    be rendered as the `<a>` tag with `href`, while the `<router-view>` component
    is used to render the requested content, which is the Vue component that we are
    going to create in the next step.
  prefs: []
  type: TYPE_NORMAL
- en: 'Define two Vue components in the `<script>` block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a constant variable called `routes` and add the Vue component to the
    `component` property with the path that matches the link in `<router-link>`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a router instance using the `new` operator and pass in the `routes`
    constant:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that `route` in the preceding code block is a short form (shorthand property
    name) for `routes: routes` in ES6/ES2015. For more information about the shorthand
    property name, please visit [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a Vue instance using the `new` operator and pass in the `router` instance,
    and then mount the `#app` element to the root instance:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Run the app in your browser, then you should see the About and Contact links
    on your screen. When you navigate to `/about` and `/contact`, you should see that
    their components are successfully rendered as expected on your screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can find the code for the preceding the app in `/chapter-4/vue/vue-route/basic.html`
    in our GitHub repository and run it in your favorite browser to see how it works.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's explore how Nuxt generates the preceding routes for us via Vue Router.
    The process of creating routes in Nuxt is simpler because `vue-router` comes out
    of the box in Nuxt. That means that technically, you skip the preceding installation
    step in the traditional Vue app. You also skip the preceding JavaScript steps
    – *steps* *3* to *5*. Nuxt will scan the `.vue` file tree in the `/pages/` directory
    and generate the routes for you automatically. So, let's explore how Nuxt creates
    and handles routes for you. We will first begin by creating basic routes.
  prefs: []
  type: TYPE_NORMAL
- en: Creating basic routes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Basic routes are created by simply adding `.vue` files with fixed filenames
    to the `/pages/` directory. You can also create sub-routes by organizing `.vue`
    files into different folders. Take the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, Nuxt will generate the following routes for you without you having to
    write any of them:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: You can find this example app in `/chapter-4/nuxt-universal/routing/basic-routes/`
    in our GitHub repository.
  prefs: []
  type: TYPE_NORMAL
- en: You should be familiar with these basic routes from the previous chapter. This
    type of route is good for top-level pages, such as `/about`, `/contact`, and `/posts`.
    However, if you have multiple subpages in each of these top-level pages and they
    will increase dynamically over time, then you should use dynamic routes to handle
    the routes for these subpages. Let's find out how you can create dynamic routes
    in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Creating dynamic routes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Dynamic routes are generated by Nuxt when using underscores. Dynamic routes
    are useful and unavoidable in a more complex app. So, if you want to create dynamic
    routes, then just create a `.vue` file (or directory) with a prefixed underscore
    followed by the name of the file (or directory). Take the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, you will get the following routes from Nuxt without you having to write
    any of them:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: You can find this example app in `/chapter-4/nuxt-universal/routing/dynamic-routes/`
    in our GitHub repository.
  prefs: []
  type: TYPE_NORMAL
- en: Dynamic routes are good for pages that share the same layout. For example, if
    you have the `/about` and `/contact` routes using the same layout (which is quite
    unlikely), then the `/_slug/` directory in the preceding dynamic route example
    code is a good choice. So, just as with the subpages under the `/users` route
    that share the same layout, the `/_id.vue` file approach is a good choice for
    this scenario.
  prefs: []
  type: TYPE_NORMAL
- en: Besides using this (simple) dynamic route to create sub-routes for subpages
    under the `/users` route, we can also use more complex dynamic routes for them
    – nested routes. This is a case when you don't want the parent layout to be replaced
    completely by the child layout when rendering the subpages; in other words, when
    you want to render the subpage *inside* the parent layout. Let's find out how
    you can achieve this in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Creating nested routes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In a nutshell, routes generated from nested components are called nested routes.
    In some cases, you may want to compose components (child components) that are
    nested inside other components (parent components), and you will want to render
    these child components *inside* particular views of the parent components, instead
    of having the parent components replaced by the child components.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do that in a Vue app, you will need to insert a `<router-view>` component
    inside the parent component for the child component. For example, say you have
    a `Users` parent component and you want the contents of the individual user to
    be loaded inside this parent when a specific user is called. Then, you can create
    a nested route for them with the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a parent component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'If you put the preceding code in a diagram, it can be visually explained, as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a child component that will display the content or information of the
    individual user:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Create the nested route with a `children` property, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Define the router instance and pass in the preceding nested routes, as follows,
    before injecting the router into the Vue root instance:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, the preceding code will produce the following visual when a child link
    is clicked on; for example, child number `1` and `/users/1` will be dynamically
    generated as its route:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'But we are not finished yet because we still need to deal with the empty view
    in `/users` when no user has been called yet. So, to fix that, you will create
    an index child component, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the preceding index component to the `children` block with an empty string,
    `''''`, on the `path` key:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'So now, if you navigate to `/users` in your browser, you should get the following
    result:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: You can see that the `children` option is just another array of route configuration
    objects, like the `routes` constant itself. Therefore, you can keep nesting views
    as much as you need. However, we should avoid deep nesting to keep our application
    simple as much as possible for better maintenance.
  prefs: []
  type: TYPE_NORMAL
- en: You can find the preceding example code in `/chapter-4/vue/vue-route/nested-route.html`
    in our GitHub repository.
  prefs: []
  type: TYPE_NORMAL
- en: 'It is the same in Nuxt; you can create the nested route by using the child
    routes of `vue-router`. If you want to define the parent component of a nested
    route, you only need to create a Vue file with the same name as the directory
    that contains your children views. Take the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Nuxt will automatically generate the following routes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'You can see that Nuxt generates the routes the same as you would in the Vue
    app. Note that in Nuxt, we include `<nuxt-child/>` in the parent component (the
    `.vue` file), while in Vue, we include `<router-view></router-view>` in the parent
    component, just as in the preceding `User` example. Let''s understand this better
    with an exercise just like we did in the Vue app:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a parent component with a `<nuxt-child/>` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Create an index child component to hold a list of users:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Note that we will cover the `asyncData` method in the upcoming section of this
    chapter and `axios` in [Chapter 5](099c1dc8-8dfa-46f8-bfbd-bfa036eefbb7.xhtml),
    *Adding Vue Components*, so do not worry about them at this stage.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create an individual child component with a link for returning to the child
    index page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: You can see that Nuxt has saved you from configuring the nested routes that
    you have to do in Vue apps with use of the `children` property (as shown in *s**tep
    3* of the preceding Vue app example).
  prefs: []
  type: TYPE_NORMAL
- en: So, in this Nuxt app, the element of `<h1>Users</h1>` in `users.vue` will always
    be seen when a child page is rendered after it. The `<ul>` element containing
    the list elements will always be replaced by the child page. This is useful if
    the information of the parent is persistent throughout the subpages as you don't
    have to re-request the parent information whenever the subpage is rendered.
  prefs: []
  type: TYPE_NORMAL
- en: You can find this example app in `/chapter-4/nuxt-universal/routes/nested-routes/`
    in our GitHub repository.
  prefs: []
  type: TYPE_NORMAL
- en: Since there are dynamic routes for "upgrading" the basic routes, you may ask,
    what about dynamic routes for the nested routes? Technically, yes, this is possible,
    and they are called dynamic nested routes. So, let's find out more about them
    in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Creating dynamic nested routes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We have seen how this works with dynamic routes and nested routes, respectively,
    so theoretically and technically, it is possible to combine these two options
    to create dynamic nested routes by having dynamic children (for example, `_subTopic`)
    in dynamic parents (for example, `_topic`). This is best illustrated in the following
    example structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Nuxt will automatically generate the following routes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'You can see that the routes are more complicated, which can make your application
    harder to develop just by reading and trying to understand the file directory
    tree because it is quite abstract, and it can be too abstract at some point if
    it grows "bigger." It is good practice to always design and structure our app
    to be as simple as possible. The following example routes are a good example of
    this type of route:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Some examples for `/_topic/` are as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Some examples for `/_topic/_subTopic/` are as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Some examples for `/_topic/_subTopic/_slug.vue` are as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: You can find an example app for this type of route in `/chapter-4/nuxt-universal/routing/dynamic-nested-routes/`
    in our GitHub repository.
  prefs: []
  type: TYPE_NORMAL
- en: Creating dynamic routes and pages always requires the parameters in the route
    (in other words, the route params) so that we can pass them (whether they are
    IDs or slugs) to the dynamic pages to be processed. But before processing and
    responding to the parameters, it is a good idea to validate them. So, let's take
    a look at how we can validate the route params in the next topic.
  prefs: []
  type: TYPE_NORMAL
- en: Validating route params
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can use a `validate` method in a component to validate the params of a
    dynamic route before any further data is processed or fetched asynchronously.
    This validation *should* always return `true` to move forward; Nuxt will stop
    the route and immediately throw a 404 error page if it gets a `false` Boolean.
    For example, you want to make sure the ID must be a number:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'So, you will get a 404 page with a `This page could not be found` message if
    you request the page with `localhost:3000/users/xyz`. If you want to customize
    the 404 message, you can use a `throw` statement to throw an exception with the
    `Error` object, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'You also can use `async` with the `validate` method for `await` operations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'You also can use `return` promises in the `validate` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: You can find the preceding example app on ID validation in `/chapter-4/nuxt-universal/routing/validate-route-params/`
  prefs: []
  type: TYPE_NORMAL
- en: in our GitHub repository.
  prefs: []
  type: TYPE_NORMAL
- en: Validating the route params is one way of handling invalid or unknown routes,
    but another way of handling them is by using a `_.vue` file to catch them. So,
    let's find out how in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Handling unknown routes with _.vue files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Besides throwing a *general* 404 page with the `validate` method, you can use
    a `_.vue` file to throw a custom error page. Let''s explore how this works with
    the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create an empty `_.vue` file in the `/pages/` directory, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Add any custom content to this `_.vue` file, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Launch the app and navigate to the following routes, and you will see that
    Nuxt will call this `_.vue` file to handle these requests on any levels that do
    not match the correct routes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'If you want to throw a more specific 404 page on a specific level – for example,
    in the `/users` route only – then create another `_.vue` file in the `/users/`
    folder, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Add custom content for this `_.vue` file, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Navigate to the following routes again and you will see that Nuxt is no longer
    calling this `/pages/_.vue` file for unmatched requests:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Instead, Nuxt is now calling the `/pages/users/_.vue` file to handle them.
  prefs: []
  type: TYPE_NORMAL
- en: You can find this example app in `/chapter-4/nuxt-universal/routing/unknown-routes/`
    in our GitHub repository.
  prefs: []
  type: TYPE_NORMAL
- en: We hope that by now, you should know how to create routes in various ways that
    suit your app, but routes and pages are inextricably related and inseparable in
    Nuxt, so you also need to know how to create Nuxt pages, which are custom views.
    You will learn how to do that in the next topic.
  prefs: []
  type: TYPE_NORMAL
- en: Creating custom views
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Every route you have created in the custom routes above will land on a "page"
    that has all the HTML markup and content that we want to show on the frontend.
    From a software architecture perspective, this HTML markup and content, including
    meta info, images, and fonts, are the view or presentation layer of your app.
    In Nuxt, we can create and customize our view easily. Let's discover what makes
    up a Nuxt view and how you can customize it.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the Nuxt view
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The view structure in Nuxt consists of the app template, HTML head, layout,
    and page layers. You can use them to create views for your app routes. In a more
    complex app, you would populate them with data from an API, while in a simple
    app, you can just embed dummy data directly and manually into them. We will walk
    you through each of these layers in the upcoming sections. Before diving into
    that, please take a moment to study the following diagram, which will give you
    a complete view of the Nuxt view:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/68280e28-fc1c-49b0-8bfa-422ee8202972.png)'
  prefs: []
  type: TYPE_IMG
- en: Reference source: [https://nuxtjs.org/guide/views](https://nuxtjs.org/guide/views)
  prefs: []
  type: TYPE_NORMAL
- en: You can see that the Document - HTML file is the outmost layer of the Nuxt view,
    followed by Layout, Page, and the optional Page Child and Vue Component layers.
    The Document - HTML file is the app template of your Nuxt app. Let's start by
    looking at this most basic layer first and learn how you can customize it in the
    next section.
  prefs: []
  type: TYPE_NORMAL
- en: Customizing the app template
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Nuxt creates the HTML app template behind the scenes for you, so basically,
    you don''t have to bother creating it. However, you still can customize it, such
    as by adding scripts or styles, if you want to. The default Nuxt HTML template
    is as simple as this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'If you want to change or override this default, simply create an `app.html`
    file in your root directory. Take the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: Restart your app and you should see that your custom app HTML template has replaced
    the default one from Nuxt.
  prefs: []
  type: TYPE_NORMAL
- en: You can find this example in `/chapter-4/nuxt-universal/view/app-template/`
    in our GitHub repository.
  prefs: []
  type: TYPE_NORMAL
- en: The next closest layer to the HTML document (which is an `<html>` element) is
    the HTML head, the `<head>` element, which contains important meta information
    and the scripts and styles of your page. We don't add or customize this data in
    the app template directly, but rather in the Nuxt config file and the files in
    the `/pages/` directory. So, let's find out how in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a custom HTML head
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'An HTML `<head>` element consists of the `<title>`, `<style>`, `<link>`, and
    `<meta>` elements. It can be a tedious task to add these elements manually. So,
    Nuxt takes care of them for you in your app. In [Chapter 2](f3ae7ce4-4ed5-4252-8318-3afb431415e2.xhtml),
    *Getting Started with Nuxt*, you learned that they are generated for you by Nuxt
    from the data in the JavaScript objects, which are written with curly braces (`{}`),
    in the Nuxt config file, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: In this topic, we are interested in the `meta` block in the Nuxt config file
    and the pages inside the `/pages/` directory. Nuxt uses the Vue Meta plugin to
    manage these meta attributes. So, to understand how it works in Nuxt, we should
    first understand how Vue Meta works in a traditional Vue app.
  prefs: []
  type: TYPE_NORMAL
- en: Introducing Vue Meta
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Vue Meta is a Vue plugin for managing and creating HTML metadata with built-in
    reactivity in Vue. You just have to add the `metaInfo` special property to any
    of your Vue components and it will automatically be rendered into HTML meta tags,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding block of JavaScript code will be rendered into the following
    HTML tags in your page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: For more information about Vue Meta, visit [https://vue-meta.nuxtjs.org/](https://vue-meta.nuxtjs.org/).
  prefs: []
  type: TYPE_NORMAL
- en: You can see that what you need to do is just provide the metadata in a JavaScript
    object. Now, let's get it installed and learn how to configure it for a Vue app.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Vue Meta
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Like all other Vue plugins, you can install Vue Meta and hook it up to your
    Vue app with the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install Vue Meta via npm:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternatively, you can install it via CDN with an `<script>` element, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'Import Vue Meta with Vue Router in your main application file, if you are writing
    an ES6 JavaScript app:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, you can use it in any Vue component, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: In this example, because we are using `axios` to fetch the data asynchronously,
    we must use the `metaInfo` method to inject the meta information from the async
    data, instead of using the `metaInfo` property. You can even add a template for
    your page title by using a `titleTemplate` option, just as in the preceding example.
    Next, we will create a simple Vue app with this plugin so that you can get a bigger
    picture of how to use it.
  prefs: []
  type: TYPE_NORMAL
- en: Creating metadata with Vue Meta in Vue apps
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'As usual, we can get a Vue app started and running on a single HTML page. Let''s
    get it started:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Include the CND links in the `<head>` block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'Create the following components with the metadata in the `<script>` block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, add the default metadata in the root instance:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: Note that we can override the default meta template in the component by simply
    adding `null` to the `titleTemplate` option in the child component, just like
    the preceding `About` component.
  prefs: []
  type: TYPE_NORMAL
- en: You can find this example app in `/chapter-4/vue/vue-meta/basic.html` in our
    GitHub repository.
  prefs: []
  type: TYPE_NORMAL
- en: In this example, since we are not using `axios` to fetch the data asynchronously,
    we can use the `metaInfo` property directly, instead of using the `metaInfo` method
    to inject the meta information with the async data. Then, you will see the page
    title and meta information change in the browser when navigating around the routes
    you have just created. It is very easy to use this plugin in a Vue app, isn't
    it? Now, we should see how it works in a Nuxt app in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Customizing the default meta tags in Nuxt apps
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Creating and customizing meta information in a Nuxt app is simpler because
    Vue Meta comes by default in Nuxt. That means you don''t have to install it as
    you do in the Vue app. You just have to use the `head` property in the Nuxt config
    file to define the default `<meta>` tags for your app, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: However, the difference between Nuxt and the Vue apps is that the `hid` key
    must be used in Nuxt, while `vmid` is used in Vue. You should *always* use `hid`
    for your meta elements to prevent the duplication of meta tags when defining them
    (the meta tags) in child components. Also, notice that the `metaInfo` key is only
    used in Vue, whereas the `title` key is used in Nuxt, to add our meta information.
  prefs: []
  type: TYPE_NORMAL
- en: So, this is how you add and customize the title and meta tags for your Nuxt
    app. However, they are added globally, which means they are applied to all of
    the pages in your app. So, how do you add them specifically to a page and override
    the global ones in the Nuxt config file? Let's find out in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Creating custom meta tags for Nuxt pages
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you want to add custom meta tags for a specific page or to override the
    default meta tags in a Nuxt config file, simply use the `head` method on that
    specific page directly, which will return a JavaScript object that contains the
    data for the `title` and `meta` options, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, you will get this output for this page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: You can find this example app in `/chapter-4/nuxt-universal/view/html-head/`
    in our GitHub repository.
  prefs: []
  type: TYPE_NORMAL
- en: So, that's it. That is all about the app template and the HTML head in Nuxt.
    The next inward layer in the Nuxt view is the layout and we will guide you on
    how to create custom ones in the next section. Let's get to it.
  prefs: []
  type: TYPE_NORMAL
- en: Creating custom layouts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Layouts are the backbone of your pages and components. You may want to have
    multiple different layouts in your app. There is a layout called `default.vue`,
    generated automatically in the `/layouts/` directory when you install your app
    using the `npx create-nuxt-app` scaffolding tool. Just like the app template,
    you can modify this default layout or create your own custom ones.
  prefs: []
  type: TYPE_NORMAL
- en: Modifying the default layout
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The default layout is always used for pages that don''t have a specific or
    custom layout. If you go to the `/layouts/` directory and open this layout, you
    should see that there are only three lines of code in it for rendering your page
    component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s modify this default layout, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: You should see whatever you added there – for example, a navigation bar across
    all the pages in your app. Note that whether you are modifying this layout or
    creating new ones, make sure you have the `<nuxt/>` component where you want Nuxt
    to import the page component. Let's explore how you can create custom layouts
    in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Creating new custom layouts
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Sometimes, we need more than one layout for a more complex app. We may need
    different layouts for certain pages. For a case like this, you will need to create
    custom layouts. You can create custom layouts with `.vue` files and just put them
    in the `/layouts/` directory. Take the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, you can use the `layout` property in the page component to assign this
    custom layout to that page, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: Nuxt now will use this `/layouts/about.vue` file as the base layout for this
    page component. But what about the layout for displaying error pages for unknown
    and invalid routes? Let's find out how this is made in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Creating custom error pages
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Every Nuxt app you install comes with a default error page stored inside the
    `@nuxt` package in the `/node_modules/` directory that Nuxt uses to display errors,
    such as 404, 500, and so on. You can customize it by adding an `error.vue` file
    to the `/layouts/` directory. Let''s find out how you can achieve this with the
    following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a custom error page, as follows, in the `/layouts/` directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: Note that the error page is a page component. At first, it seems counter-intuitive
    and confusing as it is placed inside the `/layouts/` directory instead of the
    `/pages/` directory. However, it should be treated as a page even though it is
    in the `/layouts/` directory.
  prefs: []
  type: TYPE_NORMAL
- en: 'Just like other page components, you can create a custom layout for this error
    page, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, simply add `layout-error` to the `layout` option on the error page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, if you navigate to any of the following unknown routes, Nuxt will call
    this custom error page and the custom error layout:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: You can find this 404 example in `/chapter-4/nuxt-universal/view/custom-layouts/404/`
    in our GitHub repository.
  prefs: []
  type: TYPE_NORMAL
- en: That's it. That is all about the layout in Nuxt. The next inward layer in the
    Nuxt view is pages, and you will learn how to create custom ones for your app
    in the next section. So, read on.
  prefs: []
  type: TYPE_NORMAL
- en: Creating custom pages
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Pages are a part of the Nuxt view''s layers, just like the app template, HTML
    head, and layout, which we have already covered. The `/pages/` directory is where
    you store your pages. You will spend most of your time working in this directory
    to create pages for your Nuxt app. However, creating pages is not something new
    – we created a simple error page in the `/layouts/` directory in the previous
    section, and many pages when we were learning how to create custom routes for
    our app. So, when you want to create a custom page for a specific route, simply
    create a `.vue` file in the `/pages/` directory; for example, we can create the
    following pages:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: However, there is more than that required for creating a custom page. We need
    to know the attributes and functions on the page that come with Nuxt. Even though
    pages are an important part of Nuxt app development, while it is not emphasized
    in Vue app development, they are deeply related to the Vue component and work
    a bit differently from a component. So, to create a page and use it sufficiently,
    we need to understand what a page is in Nuxt first. Let's find out.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding pages
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A page is a Vue component in nature. What sets it apart from the standard Vue
    component is the attributes and functions that are added in Nuxt only. We use
    these special attributes and functions to set or fetch data before rendering the
    page, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, we used a function called `asyncData` to set the data
    in the message key. This `asyncData` function is one of the functions you will
    see and often use in Nuxt apps. Let's dive into the attributes and functions that
    are designed specifically for a page in Nuxt.
  prefs: []
  type: TYPE_NORMAL
- en: The asyncData method
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `asyncData` method is the most important function in a page component.
    Nuxt always calls this function *before* initiating the page component. That means
    every time you request a page, this function is called first before the page is
    rendered. It gets the Nuxt context as the first argument and it can be used asynchronously,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: In this example, we use the ES6 destructuring assignment syntax to unpack the
    properties packed in the Nuxt context, and this particular property is `params`.
    In other words,
  prefs: []
  type: TYPE_NORMAL
- en: '`{ params }` is shorthand for `context.params`. We also can use the destructuring
    assignment syntax to unpack the `data` property in the async result from `axios`.
    Note that if you have data set in the `data` function in your page component,
    it will always be merged with the data from `asyncData`. Then, the merged data
    can be used in the `<template>` block. Let''s create a simple example to demonstrate
    how `asyncData` merges with the `data` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: 'You have two sets of data objects returned from the `data` and `asynData` methods,
    but the output you will get for the preceding code is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: You can see that the data from the `asyncData` function will always *replace*
    the data in the `data` function if they are both using the *same* data keys. Also,
    note that we can't use the `this` keyword in the `asyncData` method because this
    method is called *before* the page component is initiated. So, you *cannot* use
    `this.title = data.title` with this method to update the data. We will cover `asyncData`
    more in [Chapter 8](1d20b423-d93c-454a-91b5-f7207e1988fb.xhtml), *Adding a Server-Side
    Framework*.
  prefs: []
  type: TYPE_NORMAL
- en: For more information about the destructuring assignment, visit [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment).
  prefs: []
  type: TYPE_NORMAL
- en: The fetch method
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `fetch` method works the same as the `asyncData` method, except it is called
    *after* the `created` Vue lifecycle hook – in other words, after initiating the
    component. Like the `asyncData` method, it can be used asynchronously, too; for
    example, you also can use it to set the data in the page component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that the `data` method must be used with the `fetch` method to set the
    data. Since it is called after the page component is initiated, we can use the
    `this` keyword to access the object in the `data` method. We also can use this
    method to set the data in the Vuex store from a page component, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: We will cover the `fetch` method more with the Vuex store in [Chapter 10](808b1fa6-d397-4c97-b45a-95de8238497a.xhtml),
    *Adding a Vuex Store*.
  prefs: []
  type: TYPE_NORMAL
- en: You can find the preceding code in this section in `/chapter-4/nuxt-universal/view/custom-pages/fecth-method/`
    in our GitHub repository.
  prefs: []
  type: TYPE_NORMAL
- en: For more information about the `fetch` method, please visit [https://nuxtjs.org/api/pages-fetch](https://nuxtjs.org/api/pages-fetch)
    and [https://nuxtjs.org/blog/understanding-how-fetch-works-in-nuxt-2-12/](https://nuxtjs.org/blog/understanding-how-fetch-works-in-nuxt-2-12/).
  prefs: []
  type: TYPE_NORMAL
- en: The head method
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `head` method is used to set the `<meta>` tags on a page, which we covered
    previously in the *Creating a custom HTML head* section. It can also be used with
    the components in the `/components/` directory.
  prefs: []
  type: TYPE_NORMAL
- en: The layout property
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `layout` key (or property) is used to specify a layout from the `/layouts/`
    directory for a page, which we covered previously in the *Creating custom layouts*
    section.
  prefs: []
  type: TYPE_NORMAL
- en: The loading property
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `loading` property lets you disable the default loading progress bar or
    set a custom loading bar on a specific page. We covered it briefly in [Chapter
    2](f3ae7ce4-4ed5-4252-8318-3afb431415e2.xhtml), *Getting Started with Nuxt*, so
    we know that we can configure the global default loading component in a Nuxt config
    file as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: 'However, because we are on `localhost` and there is no need for much time to
    process the data, we usually won''t be able to see this loading bar in action.
    For the sake of seeing it in action, let''s demonstrate how this loading component
    works and looks by *delaying* the loading time of the data in the component with
    the following steps (but note that this demonstration *should not* be done in
    production):'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create an `index.vue` page in the `/pages/` directory with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: 'Create another page called `about.vue` in the `/pages/` directory with the
    following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: In these two pages, we use `setTimeout` to delay the data response by 1 second.
    So, when navigating across the pages, you should see the black loading bar appearing
    at the top of the page before the requested page is loaded.
  prefs: []
  type: TYPE_NORMAL
- en: You can find this example in `/chapter-4/nuxt-universal/view/custom-pages/loading-page/`
    in our GitHub repository.
  prefs: []
  type: TYPE_NORMAL
- en: 'Of course, we can create a custom loading bar or layer by creating a component
    in the `/components/` directory. Take the following example:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: Note that the `start` and `finish` methods must be exposed in the custom loading
    component so that Nuxt can call your component and use these methods when a route
    is changed (the `start` method is called) and loaded (the `finish` method is called).
  prefs: []
  type: TYPE_NORMAL
- en: So, in this component, the loading element is always hidden as the `loading`
    property is set to `false` by default in the `data` method. The loading element
    only becomes visible when the `loading` property is set to `true` during the route
    changes. It then becomes hidden again when the `loading` property is set to `false`
    after the route has finished loading.
  prefs: []
  type: TYPE_NORMAL
- en: For more information about these and other available methods, please visit [https://nuxtjs.org/api/configuration-loading](https://nuxtjs.org/api/configuration-loading).
  prefs: []
  type: TYPE_NORMAL
- en: 'Include the path of the preceding custom component in the `loading` property
    in the Nuxt config file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: You can find this example in `/chapter-4/nuxt-universal/view/custom-pages/loading-global-custom/`
    in our GitHub repository.
  prefs: []
  type: TYPE_NORMAL
- en: 'We also can configure the loading behavior on specific pages, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: 'If the value of the `loading` key is `false` on a page, it will stop calling
    the `this.$nuxt.$loading.finish()` and `this.$nuxt.$loading.start()` methods automatically,
    and this allows you to control them *manually* in your script, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, create the `final.vue` page in the `/pages/` directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: In this example, you can see that you have the control on the loading bar manually
    with `this.$nuxt.$loading.finish()` and `this.$nuxt.$loading.start()`. It takes
    5 seconds for the loading bar to finish in the `mounted` method. The loading bar
    starts immediately when you trigger the `goToFinal` method, and it takes 5 seconds
    to change the route to `/final`.
  prefs: []
  type: TYPE_NORMAL
- en: You can find this example in `/chapter-4/nuxt-universal/view/custom-pages/loading-page/`
    in our GitHub repository.
  prefs: []
  type: TYPE_NORMAL
- en: The transition property
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `transition` property is used to specify the transition for a page. You
    can use a string, an object, or a function with this key, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: We will cover the `transition` property in depth in the *Creating custom transitions*
    section later in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: The scrollToTop property
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `scrollToTop` key is used when you want the page in the nested routes to
    start at the top before it is rendered. By default, Nuxt scrolls to the top when
    you go to another page, but on the child pages in the nested routes, Nuxt stays
    at the same scroll position from the previous child route. So, if you want to
    tell Nuxt to scroll to the top for these pages, then set `scrollToTop` to `true`,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: The validate method
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `validate` method is a validator for dynamic routes, and we have already
    covered it previously in the *Validating route params* section.
  prefs: []
  type: TYPE_NORMAL
- en: The middleware property
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `middleware` property is used to specify middleware for a page. The assigned
    middleware will always be executed before the page is rendered, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: 'In this example, `auth` is the filename of the middleware that you will create
    in the `/middleware/` directory, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: We will cover middleware in depth in [Chapter 11](b24caa1b-6337-40ee-9c1a-c8586db1f3b2.xhtml),
    *Writing Route Middlewares and Server Middlewares*.
  prefs: []
  type: TYPE_NORMAL
- en: So, that's it. You have completed the sections on the Nuxt view, from the app
    template, HTML head, and layouts to pages. Well done! We will cover the Vue components
    in the next chapter. But right now, the next thing we should look at is creating
    custom transitions between pages in Nuxt because transitions and pages are closely
    related, just like the page `transition` property you have been briefly introduced
    to. So, let's move on to our final topic of this chapter, where you will learn
    about the creation of custom transitions.
  prefs: []
  type: TYPE_NORMAL
- en: Creating custom transitions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, you have managed to create multiple routes and pages for a Nuxt app
    and add a loading bar that shows up when switching between pages. This makes a
    pretty decent-looking app already. But that is not all that you can do with Nuxt.
    You can add more stunning effects and transitions *between pages*. This is where
    the `transition` properties in pages (for example, `/pages/about.vue`) come in,
    as well as the `pageTransition` and `layoutTransition` options in the Nuxt config
    file.
  prefs: []
  type: TYPE_NORMAL
- en: We can apply a transition *globally* through the Nuxt config file or *specifically*
    on certain pages. We will guide you through this topic. However, to understand
    how the transition works in Nuxt, we should first understand how it works in Vue,
    and then we can learn how to implement it on our pages when the route is changed.
    Let's get started.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding Vue transitions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Vue relies on CSS transitions and uses the `<transition>` Vue component to
    wrap around an HTML element or a Vue component to add the CSS transitions, as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: 'You can see how easy it is – you can just wrap any element with the `<transition>`
    component like a piece of cake. When that happens, Vue will apply the following
    CSS transition classes to that element by adding and removing them at appropriate
    timings:'
  prefs: []
  type: TYPE_NORMAL
- en: The `.v-enter` and `.v-leave` classes define how your element looks before the
    transition starts.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `.v-enter-to` and `.v-leave-to` classes are the "completed" states for your
    element.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `.v-enter-active` and `.v-leave-active` classes are the active states of
    the element.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'These classes are where the CSS transitions take place. For example, a transition
    that you would do in an HTML page could look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: 'If we "translate" the preceding transition into the Vue context, we will get
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: 'We can visualize these Vue transition classes as simply as with the following
    diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/64eacc73-de5b-460b-8d5b-29af57a3c3c8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Reference source: [https://vuejs.org/v2/guide/transitions.html](https://vuejs.org/v2/guide/transitions.html)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Vue prefixes the transition classes with `v-` by default, but if you want to
    change this prefix, then just use the `name` attribute on the `<transition>` component
    to specify a name – for example, `<transition name="fade">`; then, you can "refactor"
    your CSS transition classes, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s apply the preceding transition to a simple Vue app with the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create two simple routes and wrap the `<router-view>` component with a `<transition>`
    component, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: 'Add a `<style>` block with the preceding `fade-` CSS transition classes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: When you run the app on your browser, you can see that it takes 300 milliseconds
    to fade in and out the route component when switching between the routes.
  prefs: []
  type: TYPE_NORMAL
- en: You can find this example in `/chapter-4/vue/transitions/basic.html` in our
    GitHub repository.
  prefs: []
  type: TYPE_NORMAL
- en: You can see that a transition requires a few CSS classes to make it work, but
    they are not difficult to master for a Vue app. Now, let's see how you can apply
    transitions in Nuxt in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Making transitions with the pageTransition property
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In Nuxt, the `<transition>` component is not needed anymore. It is added for
    you by default, so you just have to create transitions in the `/assets/` directory
    or the `<style>` block on any specific page. The `pageTransition` property is
    used in the Nuxt config file to set the default properties of page transitions.
    The default values for the transition properties in Nuxt are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: 'So, Nuxt prefixes the transition classes with `page-` by default, as opposed
    to Vue, which uses `v-` as the prefix. The default transition mode is set to `out-in`
    in Nuxt. Let''s see how transitions are done in Nuxt by creating a global transition
    for all pages and a local transition for a specific page with the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a `transition.css` file in the `/assets/` directory and add the following
    transition to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the path of the preceding CSS transition resource to the Nuxt config file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: 'Remember that the default prefix is `page-`, so if you want to use a different
    prefix, we can use the `pageTransition` property in the Nuxt config file to change
    that prefix:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, change the prefix in all the default class names to `fade` in `transitions.css`,
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: This example will apply the transition globally across all pages when the route
    is changed.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, if we want to apply a different transition to a specific page or override
    the global transition in a page, we can set it in the `transition` property of
    that page, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, create the CSS transitions for `fade-about` in `transitions.css`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE97]'
  prefs: []
  type: TYPE_PRE
- en: In this example, it takes 3 seconds to fade in and out the `about` page, while
    it takes 300 milliseconds for the rest of the pages.
  prefs: []
  type: TYPE_NORMAL
- en: You can find this page-specific example and the global example in `/chapter-4/nuxt-universal/transition/page-transition-property/`
    in our GitHub repository.
  prefs: []
  type: TYPE_NORMAL
- en: You can see that, once again, Nuxt has lifted some repetitive tasks for you
    and added the flexibility for you to create custom prefix class names for your
    transitions. What's more, you even can create transitions *between layouts*! Let's
    find out how in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Making transitions with the layoutTransition property
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'CSS transitions are not only applicable to page components but also to layouts.
    The default for this `layoutTransition` property is the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs: []
  type: TYPE_PRE
- en: 'So, the prefix of the layout transition classes is `layout` by default and
    the default transition mode is `out-in`. Let''s see how transitions can be done
    by creating a global transition for all layouts with the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the `about.vue` and `user.vue` layouts in the `/layouts/` directory,
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE99]'
  prefs: []
  type: TYPE_PRE
- en: 'Apply the preceding layouts to the `about.vue` and `users.vue` pages in the
    `/pages/` directory, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a `transition.css` file in the `/assets/` directory and add the following
    transition to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE101]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the path of the preceding CSS transition resource to the Nuxt config file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE102]'
  prefs: []
  type: TYPE_PRE
- en: 'The default prefix is `layout-`, but if you want to use a different prefix,
    you can use the `layoutTransition` property in the Nuxt config file to change
    it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE103]'
  prefs: []
  type: TYPE_PRE
- en: 'Change the prefix in all the default class names to `fade-layout` in `transitions.css`,
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE104]'
  prefs: []
  type: TYPE_PRE
- en: In this example, it takes 0.5 of a second to fade in and out of the *entire*
    layout (which includes the navigation). You will see this transition when you
    navigate between pages that use *different layouts*, but not the pages that use
    the same layouts; for example, if you navigate between `/` and `/contact`, you
    won't get the preceding layout transition because they both use the *same layout*,
    which is `/layouts/default.vue`.
  prefs: []
  type: TYPE_NORMAL
- en: You can find this example in `/chapter-4/nuxt-universal/transition/layout-transition-property/`
    in our GitHub repository.
  prefs: []
  type: TYPE_NORMAL
- en: Once again, you can see that it is very easy to create transitions for layouts,
    and you can customize their prefix class names, just like with the page transitions.
    Besides using CSS transitions for transitioning pages and layouts, we also can
    use CSS animations. So, let's find out how in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Making transitions with CSS animations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A CSS transition is an animation that is performed between **two states** only:
    a start and an end. But when you need more intermediate states, you should use
    CSS animation instead so that you can have more control by adding multiple keyframes
    with different percentages between the start and the end states. Take the following
    example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE105]'
  prefs: []
  type: TYPE_PRE
- en: '`0%` is the start state while `100%` is the end state of your animation. You
    can add more intermediate states between these two states by adding incremental
    percentages – for example, `10%`, `20%`, `30%`, and so on. However, a CSS transition
    does not have this ability to add these keyframes. So, we can say that a CSS transition
    is a simple form of a CSS animation.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Because of the fact that CSS transitions are "actually" CSS animations, we
    can apply CSS animations just as we apply CSS transitions in the Vue/Nuxt app.
    Let''s find out how with the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following CSS animation code to the `transitions.css` file, just as
    you did in the previous section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE106]'
  prefs: []
  type: TYPE_PRE
- en: 'Change the global default `page-` prefix to `bounce-` in the Nuxt config file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE107]'
  prefs: []
  type: TYPE_PRE
- en: Once you have added the preceding code, refresh your browser and you will see
    the page bounces in and out when switching between pages.
  prefs: []
  type: TYPE_NORMAL
- en: You can find this example in `/chapter-4/nuxt-universal/transition/css-animations/`
    in our GitHub repository.
  prefs: []
  type: TYPE_NORMAL
- en: Depending on how complex and detailed you want to animate, as well as the level
    of your CSS animation skills, you can create very stunning transitions for your
    pages and layouts. You just have to focus on writing the code and register it
    through the Nuxt config file, then Nuxt will take care of the rest of the job
    of adding and removing the CSS animation classes at appropriate timings for you.
    But what about JavaScript? Can we use jQuery instead, or any other JavaScript
    animation libraries to create animations for transitioning our pages and layouts?
    The answer is yes, you can. Let's find out how in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Making transitions with JavaScript hooks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Besides making transitions with CSS, you can also do so with JavaScript by
    adding the following hooks to the `<transition>` component in a Vue app:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE108]'
  prefs: []
  type: TYPE_PRE
- en: Note that you also can declare the hook without adding `v-on` at the beginning.
    So, writing the hook as `:before-enter` is the same as writing `v-on:before-enter`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, on the JavaScript side, you should have the following default methods
    in the `methods` property to correspond with the preceding hooks:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE109]'
  prefs: []
  type: TYPE_PRE
- en: 'You can use these JavaScript hooks alone or together with the CSS transitions.
    If you are using them alone, the `done` callback must be used in the `enter` and
    `leave` hooks (methods), or these two methods will run synchronously and the animation
    or transition you are trying to apply this to will end immediately. Also, if they
    are used alone, you should use `v-bind:css="false"` on the `<transition>` wrapper
    as well so that Vue will ignore your element safely, just in case you have the
    CSS transition in your app as well but it is being used for other elements. Let''s
    make a simple Vue app with these JavaScript hooks with the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following CDN links to the HTML `<head>` block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE110]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the app markups and the `<transition>` component with the hooks to the
    `<body>` block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE111]'
  prefs: []
  type: TYPE_PRE
- en: 'Follow this with the `<script>` block with the following methods to coordinate
    with the preceding hooks:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE112]'
  prefs: []
  type: TYPE_PRE
- en: In this example, we use the `fadeTo` method from jQuery to control the transition,
    instead of using pure CSS. You should see the route components fade in and out
    when switching between them, just like the `.v-enter` and `.v-leave` CSS transitions.
  prefs: []
  type: TYPE_NORMAL
- en: You can find this example in `/chapter-4/vue/transition/js-hooks.html` in our
    GitHub repository.
  prefs: []
  type: TYPE_NORMAL
- en: 'In Nuxt, we don''t need to define the JavaScript hooks to the `<transition>`
    component, just the JavaScript methods in `pageTransition` for the Nuxt config
    file and `transition` for any `.vue` files in the `/pages/` directory. Let''s
    create a quick example in a Nuxt app with the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install jQuery via npm on your terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE113]'
  prefs: []
  type: TYPE_PRE
- en: 'Since we are using jQuery in the Nuxt config file and other pages, we can load
    jQuery *globally* through webpack in the Nuxt config file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE114]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a global transition with jQuery in the `pageTransition` option in the
    Nuxt config file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE115]'
  prefs: []
  type: TYPE_PRE
- en: This example will apply the transition *globally* across all pages when the
    route is changed. Also, we have turned off the CSS transition by setting the `css`
    option to `false`.
  prefs: []
  type: TYPE_NORMAL
- en: Note that we write the JavaScript functions with object keys as an alternative
    to associating with the attribute hooks in the transition component.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create an `about.vue` page in the `/pages/` directory and apply a different
    transition to override the preceding global transition through the `transition`
    property on the `about.vue` page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE116]'
  prefs: []
  type: TYPE_PRE
- en: So, in this example, it will take 3 seconds for the transition to take place
    on this particular page, while it takes 1 second for other pages.
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that you must import jQuery to the `.vue` page if it is not loaded in
    the Nuxt config file; for example, assume that you just want to set the transition
    on this particular page only:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE117]'
  prefs: []
  type: TYPE_PRE
- en: Once the code is in place, refresh your browser and you should see the page
    fade in and out as it does with the Vue app when the route is changed between
    pages.
  prefs: []
  type: TYPE_NORMAL
- en: You can find this example in `/chapter-4/nuxt-universal/transition/js-hooks/`
    in our GitHub repository.
  prefs: []
  type: TYPE_NORMAL
- en: Well done; you have completed the sections on creating transitions in Nuxt!
    You can see that JavaScript is another great way for writing transitions and animations
    in your Nuxt app. But before ending this chapter, let's take a look at the transition
    modes that we have been seeing throughout these sections on transitions. So, let's
    find out what they are used for.
  prefs: []
  type: TYPE_NORMAL
- en: Note that even though jQuery is not encouraged these days, it is used occasionally
    in this book because it is a dependency of Foundation, which you learned about
    in the previous chapter. So, we will be reusing it sometimes. Alternatively, you
    can use Anime.js to make JavaScript animations. For more information about this
    library, please visit [https://animejs.com/](https://animejs.com/).
  prefs: []
  type: TYPE_NORMAL
- en: Understanding transition modes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You have probably wondered what `mode="out-in"` (in Vue) or `mode: ''out-in''`
    (in Nuxt) is – for example, in our previous Vue apps with the `<div>about</div>`
    and `<div>contact</div>` components in them. They are there because the transition
    between `<div>about</div>` and `<div>contact</div>` is rendered simultaneously.
    This is the default behavior of `<transition>`: entering and leaving simultaneously.
    But sometimes, you may not want this kind of simultaneous transition, so Vue provides
    a solution with the following transition modes:'
  prefs: []
  type: TYPE_NORMAL
- en: '**The `in-out` mode**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This mode is used to let the new element transit in first until its transition
    is complete, then the current element will transit out.
  prefs: []
  type: TYPE_NORMAL
- en: '**The `out-in` mode**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This mode is used to let the current element transit out first until its transition
    is complete, then the new element will transit in.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, you can use these modes in the following ways:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In a Vue.js app, use them as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE118]'
  prefs: []
  type: TYPE_PRE
- en: 'In a Nuxt app, use them as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE119]'
  prefs: []
  type: TYPE_PRE
- en: 'In JavaScript hooks, use them as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE120]'
  prefs: []
  type: TYPE_PRE
- en: We have come a long way on this topic on creating custom transitions for our
    Nuxt/Vue apps. You can now make some decent transitions and animations from what
    you have learned in this chapter. Hence, we won't cover too much more on this
    topic any further due to the limited space in this book, but for more information
    and further reading on Vue transitions and animations, please visit [https://vuejs.org/v2/guide/transitions.html](https://vuejs.org/v2/guide/transitions.html).
    Let's now summarise what you have learned in this chapter!
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned what a page is in Nuxt and how to create different
    kinds of routes for your app. You learned how to customize the default app template
    and layout, as well as how to create new layouts and a 404 page. You learned how
    to use CSS transitions and animations, as well as JavaScript hooks and methods,
    to make the transition between your app pages interesting. If you have been following
    the guides from the start, you should be able to deliver a small project with
    a nice looking layout by now. You can find a website example in `/chapter-4/nuxt-universal/sample-website/`
    in our GitHub repository that has used what we have learned in this and previous
    chapters.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we are going to explore the `/components/` directory. You
    will learn how to make use of it in Nuxt apps to refine the layouts and pages
    we have covered in this chapter by understanding Vue components in more detail,
    including passing data to them from the page and layout components, creating single-file
    Vue components, registering global and local Vue components, and so on. Also,
    you will learn how to write reusable code with mixins, using the naming convention
    from the Vue style guide to define component names so that your components are
    organized and standardized for better future maintenance. All of these things
    will be worth knowing and exploring. So, let's get going.
  prefs: []
  type: TYPE_NORMAL
