- en: Creating Containers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The concepts of *containers* and *OS-level virtualization* have their roots
    in the `chroot` system call in Unix V7 operating systems (OSes), which date back
    to the late 1970s. Starting with a simple concept of process isolation and *chroot
    jails*, where the process is running in an apparently isolated root directory,
    containerization has undergone rapid evolution and became a mainstream technology
    in the 2010s with the advent of **Linux Containers** (**LXC**) and Docker. In
    2014, Microsoft announced support for Docker Engine in the incoming release of
    Windows Server 2016\. This is where the story of Windows containers and Kubernetes
    on Windows begins.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will provide you with a better understanding of containers
    for the Windows OS by highlighting important differences between containerization
    on Linux and Windows and container runtime types on Windows, namely Windows Server
    Containers (or process isolation) and Hyper-V isolation. We will also learn how
    to install Docker Desktop for Windows 10 for development scenarios and create
    our first example container running on your machine.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Linux versus Windows containers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding Windows container variants
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing Docker Desktop for Windows tooling
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building your first container
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The requirements for this chapter are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Intel Virtualization Technology** (**Intel VT**) or **AMD Virtualization**
    (**AMD-V**) technology features enabled in the BIOS'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A minimum of 4 GB of RAM
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Windows 10 Pro, Enterprise, or Education (version 1903 or later, 64-bit) installed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Visual Studio Code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For more information regarding the hardware requirements for running Docker
    and containers on Windows, please refer to [https://docs.microsoft.com/en-us/virtualization/windowscontainers/deploy-containers/system-requirements](https://docs.microsoft.com/en-us/virtualization/windowscontainers/deploy-containers/system-requirements).
  prefs: []
  type: TYPE_NORMAL
- en: Windows 10 versions starting with Anniversary Update (version 1607, build 14393)
    are supported, but version 1903 is recommended for the best experience since it
    comes with all the necessary features. For more details regarding Windows 10 versions
    and container runtimes compatibility, please refer to [https://docs.microsoft.com/en-us/virtualization/windowscontainers/deploy-containers/version-compatibility](https://docs.microsoft.com/en-us/virtualization/windowscontainers/deploy-containers/version-compatibility).
  prefs: []
  type: TYPE_NORMAL
- en: Visual Studio Code can be downloaded for free from the official web page at: [https://code.visualstudio.com/](https://code.visualstudio.com/).
  prefs: []
  type: TYPE_NORMAL
- en: You can download the latest code samples for this chapter from this book's official
    GitHub repository at: [https://github.com/PacktPublishing/Hands-On-Kubernetes-on-Windows/tree/master/Chapter01](https://github.com/PacktPublishing/Hands-On-Kubernetes-on-Windows/tree/master/Chapter01).
  prefs: []
  type: TYPE_NORMAL
- en: Linux versus Windows containers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Containerization on both Linux and Windows aims to achieve the same goal – creating
    predictable and lightweight environments that are isolated from other applications.
    For Linux, a classic example of container usage can be running a Python RESTful
    API written in Flask, without worrying about conflicts between Python modules
    that are required by other applications. Similarly, for Windows, the containers
    can be used to host an **Internet Information Services** (**IIS**) web server
    that's entirely isolated from other workloads running on the same machine.
  prefs: []
  type: TYPE_NORMAL
- en: Compared to traditional hardware virtualization, containerization comes at the
    cost of being tightly coupled with the host OS since it uses the same kernel to
    provide multiple isolated user spaces. This means that running Windows containers
    on the Linux OS or running Linux containers on the Windows OS is not possible
    natively without the additional help of traditional hardware virtualization techniques.
  prefs: []
  type: TYPE_NORMAL
- en: In this book, we will focus on the Docker container platform, which is required
    for running containers on Windows. Now, let's summarize the current state of containerization
    support on Linux and Windows that's provided by Docker Engine and what the possible
    solutions are when it comes to development and production scenarios.
  prefs: []
  type: TYPE_NORMAL
- en: Docker containerization on Linux
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Originally, Docker Engine was developed primarily for the Linux OS, which provides
    the following kernel features for the Docker runtime:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Kernel namespaces**: This is the core concept for containers and makes it
    possible to create isolated process workspaces. Namespaces partition kernel resources
    (such as network stacks, mount points, and so on) so that each process workspace
    can access its own set of resources and ensures they can''t be accessed by processes
    from other workspaces. This is what ensures the isolation of containers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Control groups**: Resource usage limits and isolation is a secondary core
    concept in containerization. On Linux, this feature is provided by *cgroups*,
    which enables resource limiting (CPU usage, RAM usage, and so on) and priority
    access to resources for one process or a group of processes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Layer filesystem capabilities**: On Linux, *UnionFS* is one of the many implementations
    of *union mount* –  a file system service that allows files and directories coming
    from separate filesystems to be unified into one transparent, coherent filesystem.
    This feature is crucial for Docker container images that consist of immutable
    layers. During the container runtime, the read-only layers are transparently overlaid
    together with a writable container layer.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Docker Engine is responsible for providing a basic runtime for containers,
    abstracting container management, and exposing functionalities using the REST
    API to the client layer, such as the Docker CLI. The architecture of Docker on
    Linux can be summarized with the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/12ce9141-1d04-4fef-9cc4-7b3b1d47db00.png)'
  prefs: []
  type: TYPE_IMG
- en: 'From a Linux OS perspective, the container runtime architecture is presented
    in the following diagram. This architecture applies to container engines on Linux
    in general, not only Docker:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/e181dd7d-46c2-49cb-a919-eaaca097d285.png)'
  prefs: []
  type: TYPE_IMG
- en: Next, we will look at Docker containerization on Windows.
  prefs: []
  type: TYPE_NORMAL
- en: Docker containerization on Windows
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In 2014, when Microsoft announced support for Docker Engine in the incoming
    release of Windows Server 2016, the Docker container engine had already matured
    on Linux and was proven to be an industry standard for container management. This
    fact has driven design decisions for Docker and containerization support for Windows,
    which eventually received a similar architecture for running process-isolated
    Windows Server containers. The Windows kernel features that are used by Docker
    Engine roughly map to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Kernel namespaces**: This functionality is provided by, among others, Object
    Namespaces and the Process Table in the Windows kernel.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Control groups**: Windows has its own concept of *Job Objects*, which allows
    a group of processes to be managed as a single unit. Essentially, this feature
    provides similar functionality to *cgroups* on Linux.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Layer filesystem capabilities**: The *Windows Container Isolation File System *is
    a filesystem driver that provides a virtual filesystem view for processes that
    are executed in Windows containers. This is analogous to *UnionFS* or other implementations
    of *union mount* for the Linux OS.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'On top of these low-level functionalities, the services layer, which consists
    of a **Host Compute Service **(**HCS**) and a **Host Network Service** (**HNS**),
    abstracts a public interface for running and managing containers with language
    bindings available for C# and Go (hcsshim). For more information about the current
    container platform tools, please refer to the official documentation at: [https://docs.microsoft.com/en-us/virtualization/windowscontainers/deploy-containers/containerd#hcs](https://docs.microsoft.com/en-us/virtualization/windowscontainers/deploy-containers/containerd#hcs).'
  prefs: []
  type: TYPE_NORMAL
- en: 'It is important to know that there are two types of Windows containers: process-isolated
    and Hyper-V-isolated. The difference between them will be explained in the next
    section – isolation is a runtime property of the containers and you can expect
    them to, in general, behave similarly and differ only from a security and compatibility perspective.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following diagram summarizes the containerization architecture and Docker
    support for Windows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/b221e9d5-36dd-4b7f-bea7-cdc89fabafda.png)'
  prefs: []
  type: TYPE_IMG
- en: 'For comparison with the high-level architecture of containerization on Linux,
    the following diagram presents the multi-container runtime architecture for Windows.
    At this point, we are only considering *process-isolated Windows Server containers*,
    which closely resemble containers on Linux, but in the next section, we will also
    cover the architecture of *Hyper-V isolation* for containers on Windows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/d7a93b95-2174-4e8e-89e5-47bd79cab5c1.png)'
  prefs: []
  type: TYPE_IMG
- en: Next, let's look at the some differences between containers on Linux and Windows.
  prefs: []
  type: TYPE_NORMAL
- en: Key differences between containers on Linux and Windows
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Docker containers on Linux and Windows aim to solve the same problems in principle
    and currently, the container management experience is starting to converge on
    these platforms. Nevertheless, if you come from the Linux ecosystem and have used
    Docker extensively there, you may be surprised by some differences that you can
    find. Let's briefly summarize them.
  prefs: []
  type: TYPE_NORMAL
- en: 'The largest and the most apparent limitation is the Windows host OS and Windows
    container OS compatibility requirements. In the case of Linux, you can safely
    assume that if the host OS kernel is running the minimum required version of 3.10,
    any Linux container will run without any problems, no matter which distribution
    it is based on. For Windows, it is possible to run containers with base OS versions
    that are exactly the same as the host OS version that''s supported without any
    limitations. Running a newer container OS version on an old host OS is not supported,
    and what''s more, running older container OS versions on a newer host OS comes
    with the requirement of using *Hyper-V isolation*. For example, a host running
    Windows Server version 1803 build 17134 can use containers with base image version Windows
    Server version 1803 build 17134 natively, but running containers with Windows
    Server version 1709 build 16299 will require Hyper-V isolation, and starting a
    container with Windows Server 2019 build 17763 is not possible at all. The following
    table visualizes this principle:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Host OS version** | **Container base image OS version** | **Compatibility**
    |'
  prefs: []
  type: TYPE_TB
- en: '| Windows Server, version 1803 build 17134 | Windows Server, version 1803 build
    17134 | *Process *or *Hyper-V *isolation |'
  prefs: []
  type: TYPE_TB
- en: '| Windows Server, version 1803 build 17134 | Windows Server, version 1709 build
    16299 | *Hyper-V *isolation |'
  prefs: []
  type: TYPE_TB
- en: '| Windows Server, version 1803 build 17134 | Windows Server 2019 build 17763
    | Not supported |'
  prefs: []
  type: TYPE_TB
- en: '| Windows Server 2019 build 17763 | Windows Server 2019 build 17763 | *Process *or
    H*yper-V *isolation |'
  prefs: []
  type: TYPE_TB
- en: For a more detailed compatibility matrix, please refer to the official Microsoft
    documentation at: [https://docs.microsoft.com/en-us/virtualization/windowscontainers/deploy-containers/version-compatibility#choose-which-container-OS-version-to-use](https://docs.microsoft.com/en-us/virtualization/windowscontainers/deploy-containers/version-compatibility#choose-which-container-os-version-to-use).
  prefs: []
  type: TYPE_NORMAL
- en: It is worth mentioning that the requirements for Hyper-V isolation may be a
    significant limitation in cloud environments or when running Docker on **virtual
    machines** (**VMs**). In such cases, Hyper-V isolation requires the nested virtualization
    feature to be enabled by the hypervisor. We will cover Hyper-V isolation in detail
    in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Another important aspect you may notice is the difference in sizes between the
    base images for Linux and Windows containers. Currently, the minimal Windows Server
    image, `mcr.microsoft.com/windows/nanoserver:1809`, is 98 MB in size, whereas,
    for example, the minimalistic image for Alpine Linux, `alpine:3.7`, is only 5
    MB in size. The full Windows Server image, `mcr.microsoft.com/windows/servercore:ltsc2019`, is
    over 1.5 GB, while the base image for Windows, `mcr.microsoft.com/windows:1809`,
    is 3.5 GB. But it is worth mentioning that since the first release of Windows
    Server 2016 Core image, when the image size was 6 GB, these numbers constantly
    go down.
  prefs: []
  type: TYPE_NORMAL
- en: These differences can be seen more as the limitations of Docker containers on
    Windows. However, there is one aspect where Windows provides more flexibility
    than Linux – support for running Linux containers on Windows. Docker Desktop for
    Windows 10 supports such a scenario out of the box. Although this feature is still
    in development, it is possible to host Linux containers alongside Windows containers
    on Windows 10 with the help of Hyper-V isolation. We will cover this feature in
    more detail in the next section. The opposite scenario with Windows containers
    running on Linux has no native solution and requires manually hosting additional
    Windows VM on a Linux host.
  prefs: []
  type: TYPE_NORMAL
- en: Windows Server also supports running Linux containers, providing that the **Linux
    Containers on Windows** (**LCOW**) experimental feature is enabled.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will focus on the differences between different Windows
    container runtime variants.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding Windows container variants
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Windows containers come in two distinct levels of isolation: process and Hyper-V.
    Process isolation is also known as **Windows Server Containers** (**WSC**). Initially,
    process isolation was available on the Windows Server OS only, whereas on desktop
    versions of the Windows OS, you could run containers using Hyper-V isolation.
    Starting with Windows 10, version 1809 (October 2018 Update) and Docker Engine
    18.09.1, process isolation is also available on Windows 10.'
  prefs: []
  type: TYPE_NORMAL
- en: In the official documentation, you may find the terms Windows container *types*
    and *runtimes*. They also refer to the isolation levels, and these terms are used
    interchangeably.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's take a look at how these isolation levels differ, what the use cases
    for them are, and how to create containers by specifying the desired isolation
    type.
  prefs: []
  type: TYPE_NORMAL
- en: Process isolation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Process-isolated containers, also known as **WSC**, is the default isolation
    mode provided for containers on Windows Server. The architecture of process isolation
    is similar to what you have when running containers on the Linux OS:'
  prefs: []
  type: TYPE_NORMAL
- en: Containers use the same shared kernel.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Isolation is provided at the kernel level using features such as process tables,
    object namespaces, and job objects. More information can be found in the *Docker
    containerization on Windows *section.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This is summarized in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/ed754824-a094-4e79-9460-c38f088f9fc8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Process isolation provides a lightweight runtime for containers (compared to
    Hyper-V isolation) and offers a greater density of deployment, better performance,
    and lower spin-up time. However, there are a few points you should consider when
    using this type of isolation:'
  prefs: []
  type: TYPE_NORMAL
- en: The Docker container base image has to match the version of the container host
    OS. For example, if you are running Windows 10, version 1903, you can only run
    containers that have used base image version 1903 of Windows 10 or Windows Server.
    This means you have to rebuild the image for each version of Windows that is being
    released (only major *feature updates*).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This should be only for the execution of trusted code. In order to execute untrusted
    code, Hyper-V isolation is advised.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'With Windows 10, version 1809 and later, it is possible to use process isolation
    for the container runtime, provided that you are running Docker Desktop for Windows 2.0.1.0
    *(Edge* release channel) or later and Docker Engine 18.09.1+. For Windows 10,
    the default isolation level for containers is Hyper-V and in order to use process
    isolation, it has to be specified explicitly while creating a container using
    the `--isolation=process` argument:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This option can be also specified as a parameter to the Docker daemon using
    the `--exec-opt` parameter. For more details, please see the official Docker documentation
    at the: [https://docs.docker.com/engine/reference/commandline/run/#specify-isolation-technology-for-container---isolation](https://docs.docker.com/engine/reference/commandline/run/#specify-isolation-technology-for-container---isolation).
  prefs: []
  type: TYPE_NORMAL
- en: Using process-isolated containers on the Windows 10 OS is only recommended for
    development purposes. For production deployments, you should still consider using
    Windows Server for process-isolated containers.
  prefs: []
  type: TYPE_NORMAL
- en: Hyper-V isolation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Hyper-V isolation is the second type of isolation available for Windows containers.
    In this type of isolation, each container is running inside a dedicated, minimal
    Hyper-V virtual machine and can be briefly summarized as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Containers do not share the kernel with host OS. Each container has its own
    Windows kernel.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Isolation is provided at the virtual machine hypervisor level (requires Hyper-V
    role to be installed).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are no compatibility limitations between the host OS version and container
    base OS version.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This is recommended for the execution of untrusted code and multi-tenant deployments
    as it provides better security and isolation.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The details of the Hyper-V isolation architecture can be seen in the following
    diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/7c9b01c7-0631-4b19-8cc5-ba2ec27c0135.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This type of isolation comes at a cost that you have to take into account when
    choosing the isolation level:'
  prefs: []
  type: TYPE_NORMAL
- en: Hyper-V isolation involves virtualization overhead, higher memory, and CPU usage
    footprint compared to process isolation, but still provides much better performance
    than running a full VM with Windows Nano Server. You can check the memory requirements
    for running containers with different isolation levels in the following table.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Container spin-up time is slower compared to process isolation.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Requires nested virtualization when used for containers running on a VM. This
    may be a limitation for some hypervisors and cloud deployments. The following
    table shows the memory requirements for Windows Server 1709 containers:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| **Container base image** | **Process isolation (WSC)** | **Hyper-V isolation**
    |'
  prefs: []
  type: TYPE_TB
- en: '| Nano Server | 30 MB | 110 MB + 1 GB pagefile |'
  prefs: []
  type: TYPE_TB
- en: '| Server Core | 45 MB | 360 MB + 1 GB pagefile |'
  prefs: []
  type: TYPE_TB
- en: 'The container images remain unchanged compared to process isolation; you only
    need to specify a different isolation level when creating the actual container.
    You can do this using the `--isolation=hyperv` parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Note that in this case, even if you are running Windows 10, version 1903, you
    can use the container base image version 1809 without any limitations.
  prefs: []
  type: TYPE_NORMAL
- en: Hyper-V isolation is the default level of isolation when running containers
    on Windows 10, so the `--isolation=hyperv` parameter is not required. The opposite
    is also true; process isolation is the default level for Windows Server and if
    you want to use Hyper-V isolation, you have to specify it explicitly. The default
    isolation level can be changed in the `daemon.json` configuration file by specifying
    the `isolation `parameter in `exec-opts`. For more information, please refer to [https://docs.docker.com/engine/reference/commandline/dockerd/#daemon-configuration-file](https://docs.docker.com/engine/reference/commandline/dockerd/#daemon-configuration-file)
    and [https://docs.docker.com/engine/reference/commandline/dockerd/#docker-runtime-execution-options](https://docs.docker.com/engine/reference/commandline/dockerd/#docker-runtime-execution-options).
  prefs: []
  type: TYPE_NORMAL
- en: Linux containers on Windows
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In April 2017, Docker announced LinuxKit, a solution for running Linux containers
    on platforms that are not shipped with the Linux kernel, namely Windows and macOS.
    LinuxKit is a toolkit for building portable and lightweight Linux subsystems that
    contain only the bare minimum for running Linux containers on a given platform.
    Although Docker, since the first release in 2016, was able to run Linux containers
    on Windows to some limited extent, the announcement of LinuxKit was the milestone
    that started the story of **Linux Containers on Windows** (**LCOW**) as we know
    them today.
  prefs: []
  type: TYPE_NORMAL
- en: Running Linux containers on Windows is not recommended for production deployments
    yet. Using LinuxKit and MobyLinuxVM is intended only for Desktop for Windows and
    development purposes. At the same time, the LCOW feature is still experimental
    and is not suitable for production.
  prefs: []
  type: TYPE_NORMAL
- en: LinuxKit and MobyLinuxVM
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Docker for Windows (which was the initial name of Docker Desktop for Windows
    at that time) eventually came with a dedicated Hyper-V virtual machine based on
    LinuxKit named MobyLinuxVM. The purpose of this virtual machine is to provide
    a minimal runtime for Linux containers that can technically be run side by side
    with Windows containers.
  prefs: []
  type: TYPE_NORMAL
- en: By default, Docker Desktop for Windows runs in Linux containers mode, which
    utilizes MobyLinuxVM. In order to switch to Windows containers mode, you have
    to navigate to the Docker Desktop tray icon and select Switch to Windows containers....
    Docker will restart and switch to native Windows containers.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this solution, MobyLinuxVM runs its own Docker daemon and technically acts
    as a separate container host enclosed inside a virtual machine. Similarly, Windows
    has its own Docker Daemon that''s responsible for Windows containers and also
    provides the Docker Client (CLI), which communicates with both Docker Daemons.
    This architecture can be seen in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/39eeaca8-5c69-4af0-b95f-31be59238f17.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, let''s take a look at a more up-to-date approach for running Linux containers
    on Windows: LinuxKit LCOW.'
  prefs: []
  type: TYPE_NORMAL
- en: LinuxKit LCOW and Hyper-V isolation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Contrary to the MobyLinuxVM approach, **Linux Containers on Windows** (**LCOW**)
    uses Hyper-V isolated containers to achieve similar results. LCOW is available
    for Windows 10, which comes with Docker for Windows 17.10, and for Windows Server,
    version 1709, which comes with a preview release of Docker Enterprise Edition.
  prefs: []
  type: TYPE_NORMAL
- en: The main difference compared to MobyLinuxVM is the possibility to natively run
    Linux and Windows containers side by side using *the same* Docker Daemon. This
    solution is the current strategy for supporting Linux containers running on Windows
    but as the long-term solution, in June 2019, Docker and Microsoft started a collaboration
    to integrate the Windows Subsystem for Linux version 2 as the primary Linux container
    runtime on Windows. Eventually, both LinuxKit LCOW and MobyLinuxVM with Docker
    Desktop for Windows will be retired.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following diagram shows LCOW:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/706e2bf5-3e4c-4551-ad13-8dc009f14563.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In order to enable LCOW support in Docker Desktop (version 18.02 or later),
    you have to enable the Experimental features option in Docker Settings *>* Daemon.
    Creating an LCOW container requires specifying the `--platform linux` parameter
    (if platform selection is unambiguous, that is, the image only exists in Linux,
    then it can be omitted in newer versions of Docker Desktop):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The preceding command will create a busybox Linux container and enter the interactive
    Bourne shell (sh).
  prefs: []
  type: TYPE_NORMAL
- en: As of Docker Desktop for Windows 2.0.4.0, it is not possible to run the development
    Kubernetes cluster provided by Docker <q>("batteries included")</q> with the LCOW
    feature enabled.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, you learned how containers are currently supported on the Windows
    platform and the key differences between the provided runtimes. Now, we can start
    installing **Docker Desktop for Windows**.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Docker Desktop for Windows tooling
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Creating applications for Kubernetes on Windows requires an environment for
    developing and testing Docker containers. In this section, you will learn how
    to install Docker Desktop for Windows, which is the recommended tooling environment
    for development, building, shipping, and running Linux and Windows containers
    on Windows 10\. First, let''s recap on the prerequisites and Docker''s minimum
    requirements before continuing with the installation process:'
  prefs: []
  type: TYPE_NORMAL
- en: A minimum of 4 GB of RAM.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **Intel Virtualization Technology** (**Intel VT**) or **AMD Virtualization**
    (**AMD-V**) technology features enabled in the BIOS. Note that if you are using
    a VM as your development machine, Docker Desktop for Windows does not guarantee
    support for nested virtualization. If you want to find out more about this scenario,
    please refer to [https://docs.docker.com/docker-for-windows/troubleshoot/#running-docker-desktop-for-windows-in-nested-virtualization-scenarios](https://docs.docker.com/docker-for-windows/troubleshoot/#running-docker-desktop-for-windows-in-nested-virtualization-scenarios).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Windows 10 Pro, Enterprise, or Education (version 1903 or later, 64-bit) installed.
    The current Docker Desktop supports version 1703 or later, but for the best experience
    when going through the examples in this book, it is recommended that you upgrade
    it to version 1903 or later. You can check your version of Windows by opening
    the Start menu, selecting the Settings icon, and navigating to System > About.
    You will find the necessary details under Windows Specifications.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Docker Desktop for Windows is also known as Docker for Windows and Docker **Community
    Edition** (**CE**) for Windows. This is especially important if you are following
    older installation guides.
  prefs: []
  type: TYPE_NORMAL
- en: If you are interested in the installation of Docker Enterprise for Windows Server,
    please refer to [Chapter 7](165c2fcc-4ce8-4dbc-a19c-c7fd427b3379.xhtml), *Deploying
    a Hybrid On-Premises Kubernetes Cluster*.
  prefs: []
  type: TYPE_NORMAL
- en: Stable and Edge channels
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Depending on your requirements, you can choose from two release channels for
    Docker Desktop for Windows: **Stable** and **Edge**. You should consider using
    a Stable channel if you are OK with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: You want the recommended and reliable platform to work with containers. Releases
    in a Stable channel follow the release cycle of Docker platform stable releases.
    You can expect releases in the Stable channel to be performed once per quarter.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You want to have a choice of whether to send usage statistics.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You should consider using an Edge channel if you are OK with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: You want to get the experimental features as soon as possible. This may come
    at a cost of some instability and bugs. You can expect releases in the Edge channel
    to be performed once per month.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You are OK with usage statistics being collected.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now, let's proceed with the installation itself.
  prefs: []
  type: TYPE_NORMAL
- en: Installation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The installation process described in this section follows the recommendations
    from the official Docker documentation. Let''s begin:'
  prefs: []
  type: TYPE_NORMAL
- en: If you are using chocolatey to manage application packages on your Windows system,
    it is also possible to use the official trusted package for Docker Desktop, available
    from: [https://chocolatey.org/packages/docker-desktop.](https://chocolatey.org/packages/docker-desktop)
  prefs: []
  type: TYPE_NORMAL
- en: In order to download Docker Desktop for Windows, navigate to [https://hub.docker.com/editions/community/docker-ce-desktop-windows](https://hub.docker.com/editions/community/docker-ce-desktop-windows).
    Downloading it requires registering for the service. You can also choose direct
    links for downloading the Stable channel release ([https://download.docker.com/win/stable/Docker%20for%20Windows%20Installer.exe](https://download.docker.com/win/stable/Docker%20for%20Windows%20Installer.exe))
    or the Edge channel release ([https://download.docker.com/win/edge/Docker%20Desktop%20Installer.exe](https://download.docker.com/win/edge/Docker%20Desktop%20Installer.exe)).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Docker Desktop for Windows will automatically enable the Hyper-V role if needed
    and restart the machine. If you are a VirtualBox user or Docker Toolbox user,
    you will no longer be able to run VirtualBox VMs as Type-1 and Type-2 hypervisors
    cannot run side by side. You will be still able to access your existing VM images
    but will not be able to start the VMs.
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to the directory where the installer has been downloaded to and double-click
    on it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enable Windows container support by default by selecting the Use Windows containers
    instead of Linux containers option:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/a698518b-a15b-45d9-b00d-521f98abb7e3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Proceed with the installation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/44a30aea-7043-4d86-acc4-d460405dc593.png)'
  prefs: []
  type: TYPE_IMG
- en: You may be prompted to restart your machine if the Hyper-V role was enabled
    by the installer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Launch the Docker Desktop application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Wait until Docker is fully initialized. You will see the following prompt:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/97d63c81-d24e-4ae2-a3ea-87a0012f243d.png)'
  prefs: []
  type: TYPE_IMG
- en: After installation, we need to verify whether Docker has been installed properly
    and can run a simple *hello world* container image.
  prefs: []
  type: TYPE_NORMAL
- en: Verifying the installation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, let''s verify whether the installation was successful:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Confirm that the Docker Client is working properly by opening Powershell and
    executing the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see an output similar to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Run a simple container based on the official Powershell image:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'During the first run of this command, the missing container image layers will
    be downloaded. After some time, you will see Hello, World! written to the console
    output by Powershell:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/ff4db97a-6e8f-4b64-8b19-dec8c139da4f.png)'
  prefs: []
  type: TYPE_IMG
- en: Congratulations! You have successfully installed Docker Desktop for Windows
    and run your first container.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the next subsection, you will learn how to enable process isolation for containers.
  prefs: []
  type: TYPE_NORMAL
- en: Running process-isolated containers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'On Windows 10, in order to run process-isolated containers, you have to explicitly
    specify the `--isolation=process` parameter while creating the container. As we
    mentioned previously, it is also necessary to specify the container image version
    that matches your OS. Let''s get started:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Assuming you are running Windows 10, version **1903**, let''s execute the following
    command, which attempts to create a process-isolated container in detached (background)
    mode. Run a ping command stating the number of echo requests to be sent to your
    localhost machine, that is, `100`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The selected version of the mcr.microsoft.com/windows/nanoserver image is 1809,
    which does not match your OS version. Therefore, it will fail with an error informing
    you that the container''s base image OS version does not match the host OS:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/f3f46785-b75e-45cf-af23-e7231a26b06f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, let''s execute a similar command but now specify the proper, matching
    version (1903) of the container base image:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'In this case, the container has started successfully, which can be verified
    by using the `docker ps` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/4e2349c5-478a-4f9b-b883-d6fcf6d02036.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, let's check how process isolation differs in practice from Hyper-V isolation.
    We will compare the visibility of the container processes in the host OS between
    these two isolation types.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'First, get the container ID of your newly created process-isolated container.
    This container should run for a few minutes as it performs 100 echo requests to
    localhost before it terminates and is removed automatically. In our example, the
    container ID is `a627beadb1297f492ec1f73a3b74c95dbebef2cfaf8f9d6a03e326a1997ec2c1`.
    Using the `docker top <containerId>` command, it is possible to list all the processes
    running inside the container, including their **process IDs** (**PID**):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the output of the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/9f8d0fe1-1eac-4bbb-bbfb-ee610f9b066d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the preceding screenshot, the PID of the `ping.exe` process inside the container
    is `6420`. In order to list `ping.exe` processes running in the context of the
    host OS, use the `Get-Process` cmdlet in Powershell:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the output of the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/5e694e96-df0a-416e-9396-45bb766095f0.png)'
  prefs: []
  type: TYPE_IMG
- en: The preceding output reveals that the `ping.exe` process running inside the
    container is also visible from the host and has exactly the same PID: `6420`.
  prefs: []
  type: TYPE_NORMAL
- en: 'For comparison, we will create a similar container, but this time specify the `--isolation=hyperv`
    parameter in order to enforce Hyper-V isolation. On Windows 10, when running a
    default Docker configuration, you can omit the `--isolation` parameter altogether
    since the default isolation level is Hyper-V. We can create the container (with
    a different base image OS version than the host) using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the output of the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/50aef9bd-6d68-42ba-9326-872ac139b2f3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The container has started successfully. In this case, the container ID is `c62f82f54cbce3a7673f5722e29629c1ab3d8a4645af9c519c0e60675730b66f`.
    Inspecting the processes running inside the container reveals that `ping.exe`
    has a PID of `1268`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/f65a1630-dce0-49df-a4b5-a2e133c95546.png)'
  prefs: []
  type: TYPE_IMG
- en: 'When inspecting the processes running on the host, you will see that there
    is no `ping.exe` process with a PID of `1268` (and nor is there a `cmd.exe` process
    with a PID of `1216`, which is the main process in the container):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/a7ac9cb8-7846-4670-ae98-5be3c0088cf2.png)'
  prefs: []
  type: TYPE_IMG
- en: The reason for this is that the processes running in the Hyper-V container are
    not sharing the kernel with host as they are executed in separate, lightweight
    Hyper-V VM with their own kernel matching the container base image OS version.
  prefs: []
  type: TYPE_NORMAL
- en: Now, it's time to run your first Linux container on Windows using LCOW!
  prefs: []
  type: TYPE_NORMAL
- en: Running LCOW containers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By default, Docker Desktop for Windows hosts Linux containers using MobyLinuxVM,
    which provides a minimal, fully-functional environment for hosting Linux containers.
    This approach is meant only for development and testing purposes as it is not
    available on Windows Server. Windows Server currently has experimental support
    for LCOW and it is also possible to enable this feature in Docker Desktop.
  prefs: []
  type: TYPE_NORMAL
- en: 'To enable LCOW support in Docker Desktop, you have to enable experimental features
    in the Docker Daemon. Let''s take a look:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the Docker Desktop tray icon and select Settings.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to the Daemon tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enable the Experimental features checkbox:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/2a177e9e-1efd-4a0c-a457-7f7736bcfe53.png)'
  prefs: []
  type: TYPE_IMG
- en: Apply the changes. Docker Desktop will restart.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open PowerShell and create a container that uses Linux as the base image by
    providing the `--platform=linux` parameter to `docker run`. In this example, we''re
    creating a busybox container in interactive mode and starting a Bourne shell:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: If the image exists in a version for one platform, it is not necessary to provide
    the `--platform` parameter. After downloading the image, it is also no longer necessary
    to specify the `--platform` parameter to run the container.
  prefs: []
  type: TYPE_NORMAL
- en: 'After the container is started, the Bourne shell prompt will appear (`/ #`).
    Now, you can verify that you are indeed running inside a Linux container by using
    the `uname` command, which prints Linux kernel information:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the output of the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/973b1876-1765-4ace-88ba-abc71c22bdca.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In a separate Powershell window, without closing the Bourne shell in the container,
    execute the `docker inspect <containerId>` command in order to verify that the
    container is indeed running using LCOW using Hyper-V isolation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/afc73b54-ce91-47dd-a333-66673318ce37.png)'
  prefs: []
  type: TYPE_IMG
- en: In this section, you learned how to install Docker Desktop for Windows tooling
    and how to verify its functionality, including running Linux containers on Windows.
    In the next section, you will learn how to approach building your first Windows
    container image with the help of Visual Studio Code.
  prefs: []
  type: TYPE_NORMAL
- en: Building your first container
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous section, you have learned how to install Docker Desktop for
    Windows and how to run simple Windows and Linux containers. This section will
    demonstrate how to build a custom Docker image using `Dockerfile` and how to perform
    the most common actions on running containers, such as accessing logs and perform `exec`
    into a container.
  prefs: []
  type: TYPE_NORMAL
- en: A Dockerfile is a text file that contains all the commands that the user would
    execute in order to assemble a container image. As this book does not focus on
    Docker only, this section will be a short recap of common Docker operations. If
    you are interested in Dockerfiles themselves and building containers, please refer
    to the official documentation at: [https://docs.docker.com/engine/reference/builder/](https://docs.docker.com/engine/reference/builder/).
  prefs: []
  type: TYPE_NORMAL
- en: As an example, we will prepare a Dockerfile that creates a Windows container
    image of Microsoft IIS hosting a demonstration HTML web page. The image definition
    won't be complicated in order to demonstrate operation principles.
  prefs: []
  type: TYPE_NORMAL
- en: Preparing a Visual Studio Code workspace
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The first step is preparing the Visual Studio Code workspace. Visual Studio
    Code requires you to install an additional extension for managing Docker. Let''s
    get started:'
  prefs: []
  type: TYPE_NORMAL
- en: In order to do that, open the Extensions view by pressing *Ctrl *+ *Shift *+ *X*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In Extensions: Marketplace, search for `docker` and install the official Docker
    extension from Microsoft:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/9074b59b-a8e3-4612-9a12-ac4a0a839539.png)'
  prefs: []
  type: TYPE_IMG
- en: All of the operations demonstrated in this section can be performed without
    Visual Studio Code, in any code/text editor and using the command line. Visual
    Studio Code is a useful, multi-platform IDE for developing and testing applications
    running in Docker containers.
  prefs: []
  type: TYPE_NORMAL
- en: 'After the installation is complete, Docker Explorerwill become available:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/2e3864f4-1789-48db-ad96-29304e7a2f36.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You can also leverage new Docker-oriented commands from the Command Palette
    after pressing *Ctrl *+ *Shift *+ P and typing `docker` into the search bar:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/3203b306-5a02-4d56-8c09-9ab80ec083cf.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, initialize the workspace by opening the desired folder using the *Ctrl *+ *K*, *Ctrl *+ *O*shortcut
    or navigating to File | Open Folder....
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the next subsection, we will create a demonstration HTML web page that will
    be hosted inside the Windows container.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a sample HTML web page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will start creating our Docker image by creating a minimalistic HTML "Hello
    World!" web page. This step mimics implementing an application without any containerization
    and is a common scenario in application development: you are running a non-containerized
    application and then you move it to a Docker container.'
  prefs: []
  type: TYPE_NORMAL
- en: You can also use the files from this book's GitHub repository to do this, available
    from: [https://github.com/PacktPublishing/Hands-On-Kubernetes-on-Windows/tree/master/Chapter01/01_docker-helloworld-iis](https://github.com/PacktPublishing/Hands-On-Kubernetes-on-Windows/tree/master/Chapter01/01_docker-helloworld-iis).
  prefs: []
  type: TYPE_NORMAL
- en: 'Add a new file in Visual Studio Code in your workspace using the *Ctrl* + *N *shortcut
    or by navigating to File > New File. Use the following sample HTML code in the
    new file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Save the file (using *Ctrl* + S) as `index.html` in your workspace.
  prefs: []
  type: TYPE_NORMAL
- en: Let's proceed with creating the Dockerfile itself.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Dockerfile
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we will be hosting the web page in the container using IIS, we need to create
    a **Dockerfile** that uses the `mcr.microsoft.com/windows/servercore/iis` official
    image as the base image for the build. We will use a Docker image with the `windowsservercore-1903`
    tag to ensure that we are running a version that matches the host OS and make
    it possible to use process isolation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new file in your workspace named `Dockerfile`, containing the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Visual Studio Code gives you a lot of snippets while writing the Dockerfile,
    providing that you have named the file following the expected convention. You
    can also bring up the list of snippets by pressing *Ctrl* + SPACE while editing.
  prefs: []
  type: TYPE_NORMAL
- en: In the next subsection, you will learn how to manually build a Docker image
    based on the Dockerfile you have just created.
  prefs: []
  type: TYPE_NORMAL
- en: Building a Docker image
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Building a Docker image is performed using the `docker build` command. You
    have two options when it comes to performing this step:'
  prefs: []
  type: TYPE_NORMAL
- en: Use Visual Studio Code's Command Palette.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use the Powershell command line.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In Visual Studio Code, do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Use the *Ctrl* + *Shift* + *P *shortcut in order to open the Command Palette.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Search for Docker: Build Image and execute it by providing the image name and
    tag in the following format (or use the default suggested name based on the directory
    name):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'If you are logged into a custom registry or using Docker Hub, you can also
    specify the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: The concepts of Docker Registry and the public Docker Hub will be covered in
    [Chapter 3](e00b7610-2513-4513-863f-62a054d8cd98.xhtml), *Working with Container
    Images*.
  prefs: []
  type: TYPE_NORMAL
- en: We will use the following image name and tag in this example: `docker-helloworld-iis:latest`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Visual Studio Code command is equivalent to performing the following actions
    in Powershell:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Change the working directory to the folder that contains the `Dockerfile`;
    for example:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Execute the `docker build` command while specifying the `-t` argument in order
    to provide the image name and tag and use the current directory, `.`, as the build context:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the output of the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/179facb6-a584-4dc6-8be5-ca7c9f3db64a.png)'
  prefs: []
  type: TYPE_IMG
- en: After a successful build, you can use the `docker-helloworld-iis` local image
    to create new containers. We will cover this in the next subsection.
  prefs: []
  type: TYPE_NORMAL
- en: Running Windows containers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, let''s create a process-isolated Windows container with our example web
    page. In Visual Studio Code, navigate to the Command Palette (*Ctrl* + *Shift* + *P*)
    and find the Docker: Run command. As the image, choose `docker-helloworld-iis`.
    A terminal with the appropriate command will open.'
  prefs: []
  type: TYPE_NORMAL
- en: 'This is the equivalent to performing the `docker run` command in Powershell,
    as follows (if port *tcp/80* on your host machine is already in use, use any other
    port that''s available):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'After successfully starting the container, navigate to `http://localhost:80/`
    in a web browser. You should see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/893e8fde-0e4d-42da-be61-0f8c2c153f8b.png)'
  prefs: []
  type: TYPE_IMG
- en: Next, we will be inspecting container logs, which are one of the most useful
    tools for debugging container issues.
  prefs: []
  type: TYPE_NORMAL
- en: Inspecting container logs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Accessing the main process' standard output and standard error logs in the container
    is crucial for debugging issues with containerized applications. This is also
    a common scenario when using Kubernetes, where you can perform similar operations
    using Kubernetes CLI tools.
  prefs: []
  type: TYPE_NORMAL
- en: 'The current architecture of the official Microsoft IIS Docker image does not
    provide any logs to the `stdout` of `ServiceMonitor.exe` (the main process in
    the container), so we will demonstrate this on the simple `ping.exe` example that
    we used previously. Run the following container in order to create the container:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, in Visual Studio Code, you can inspect the logs by opening the Command
    Palette (*Ctrl* + *Shift* + *P*) and executing the `Docker: Show Logs` command.
    After selecting the container name, the logs will be shown in the terminal. Alternatively,
    you can use the Docker Explorer tab, expand the Containers list, right-click the
    container you want to inspect, and select Show Logs:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/705b6c2a-dbba-436b-a9e7-68a49305735a.png)'
  prefs: []
  type: TYPE_IMG
- en: This will open a terminal in Visual Studio Code so that you can start streaming
    logs from the container's `stdout` and `stderr` instances.
  prefs: []
  type: TYPE_NORMAL
- en: 'For the PowerShell command line, you have to use the `docker logs` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'It is also worth noting that in debugging scenarios, you may find the `-f`
    and `--tail` parameters useful:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: The `-f` parameter instructs the log output  to be followed in real-time, whereas
    the `--tail` parameter makes it possible to show only a specified number of last
    lines from the output.
  prefs: []
  type: TYPE_NORMAL
- en: Apart from inspecting container logs, you will often need to `exec` into a running
    container. This will be covered in the next subsection.
  prefs: []
  type: TYPE_NORMAL
- en: Exec into a running container
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In debugging and testing scenarios, it is often required to execute another
    process inside a running container in an ad hoc manner. This is especially useful
    for creating a shell instance (for Windows, with `cmd.exe` or `powershell.exe`,
    and for Linux, with `bash` or `sh`) in the container and interactively debugging
    the container. Such an operation is called performing `exec` into a running container.
  prefs: []
  type: TYPE_NORMAL
- en: 'Visual Studio Code enables this through Docker Explorer. In the Docker Explorer
    tab, find the container you would like to exec into, right-click it, and choose
    Attach Shell:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/4b5dc68e-fba2-493b-af84-2d291317b18d.png)'
  prefs: []
  type: TYPE_IMG
- en: By default, for Windows containers, this command will exec using the `powershell.exe`
    command. If you are running images based on Windows Nano Server, you will not
    be able to use `powershell.exe` and you'll have to use `cmd.exe` instead. To customize
    which command is used during Attach Shell, open Settings (*Ctrl* + *,*), search
    for docker, and customize the docker.attachShellCommand.windowsContainer setting.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the Powershell command line, the equivalent `docker exec` command is as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding command creates a new `powershell.exe` process inside the running
    container in interactive mode with the attached terminal (the `-it` parameter).
    As you can see, a new interactive instance of the Powershell terminal opens:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/9b426421-3095-4a73-a5c3-b5ffb226e16a.png)'
  prefs: []
  type: TYPE_IMG
- en: You can only exec into containers that have the main process running. If the
    container is exited, terminated, or placed in a paused state, it will **not**
    be possible to use the `exec` command.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s try inspecting the contents of `index.html` inside the container''s
    working directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the output of the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/c4e99bfd-2322-4099-86bf-526c2b50dd71.png)'
  prefs: []
  type: TYPE_IMG
- en: This reveals the expected contents of the `index.html` file that we created
    and added to the image earlier.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can also inspect the IIS worker process (`w3wp.exe`) for the application
    pool hosting `index.html`. This is a common scenario during debugging when not
    all the logs are available directly via container output logs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the output of the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/dbdd1d72-bf7b-430f-b19a-d17b063cf6d6.png)'
  prefs: []
  type: TYPE_IMG
- en: Using `docker exec` is one of the most powerful commands that you have in your
    container toolbox. If you learn how to use it, you'll be able to debug your applications
    almost as if they were hosted in a non-containerized environment.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned about the key aspects of the Windows containers
    architecture and the differences between the isolation modes provided by the Windows
    container runtime. We also covered how to install Docker Desktop for Windows and
    demonstrated how to perform the most important operations using the Docker CLI
    on the Windows platform.
  prefs: []
  type: TYPE_NORMAL
- en: This and the next two chapters will be the foundations of what you are going
    to learn about regarding Kubernetes on Windows in the rest of this book. In the
    next chapter, we will focus on managing state in Windows containers, that is,
    how to persist data when running containers.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What are the kernel features that Windows exposes in order to enable containerization?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are the key differences between containerization on Linux and on Windows?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the difference between Hyper-V isolation and process isolation? When
    should you use Hyper-V isolation?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How can we enable LCOW on Windows 10?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What command can we use to access logs for the main process in a Docker container?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How can we start a new Powershell process inside a running container?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can find the answers to these questions in the *Assessments* section of
    this book.
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This chapter has provided a recap of Docker containers on Windows. For more
    information concerning Windows containers, please refer to two excellent Packt
    books:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Docker on Windows: From 101 to production with Docker on Windows, at* [https://www.packtpub.com/virtualization-and-cloud/docker-windows-second-edition](https://www.packtpub.com/virtualization-and-cloud/docker-windows-second-edition).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Learning Windows Server Containers, at* [https://www.packtpub.com/virtualization-and-cloud/learning-windows-server-containers](https://www.packtpub.com/virtualization-and-cloud/learning-windows-server-containers).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can also check out the official Microsoft documentation on Windows containers,
    at [https://docs.microsoft.com/en-us/virtualization/windowscontainers/about/](https://docs.microsoft.com/en-us/virtualization/windowscontainers/about/).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
