- en: Libraries and Frameworks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter looks at how applications work with libraries and frameworks. Numerous
    frameworks and libraries work with Webpack. Typically, these are JavaScript frameworks.
    They are becoming an increasingly central part of programming and knowing how
    to integrate them into your application bundle will likely be an increasing need.
  prefs: []
  type: TYPE_NORMAL
- en: Working with libraries and frameworks is a little bit different from working
    with other Webpack elements. By following typical examples and use cases, this
    book will explore Angular and how to structure the Angular framework to facilitate
    package bundling. This includes what to expect from the Webpack bundling, the
    desired outcomes, the advantages, and the limitations.
  prefs: []
  type: TYPE_NORMAL
- en: Once you have completed this chapter, you should be confident in how to use
    these major frameworks and libraries with Webpack. You will also know how to integrate
    and install them, as well as how to use best practices in your integrations.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Best practices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with JSON
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with YAML
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with Angular
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with Vue.js
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Best practices
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we've only covered building Vanilla JavaScript, which should not be
    confused with the Vanilla framework. Even though it is the best way to learn,
    it is more likely that you will work with some kind of framework. Webpack will
    work with any JavaScript or TypeScript framework, including Ionic and jQuery;
    however, more tricky frameworks include Angular, Vue, and YAML.
  prefs: []
  type: TYPE_NORMAL
- en: Now, we will get to grips with YAML, but before delving into this, you may be
    wondering whether backend frameworks can be integrated. The simple answer is that
    they can, but they are not bundled. The only level of integration, however, is
    through linking source code, as we do with most projects or APIs, such as REST
    APIs.
  prefs: []
  type: TYPE_NORMAL
- en: As we have already discussed, Webpack has a production and development mode.
    Production mode bundles your project into its finished state, ready for web delivery
    or publication, and provides little room for tweaking. Development mode gives
    the developer the freedom to modify database connections; this is how the backend
    integrates. Your project's backend will likely be **ASP.NET** or **PHP**, but
    some backends are more complex and utilize `OpenAuth`. As a developer, you will
    need an overview of all of them. This guide, however, only deals with Webpack.
  prefs: []
  type: TYPE_NORMAL
- en: Rest assured that all of these frameworks will integrate, which is done via
    a REST API, which returns data in **JavaScript Object Notation** (**JSON**) format.
    It is also possible to do this using **AJAX**. In any case, ensure that secure
    best practices are followed, as JSON calls to databases are not as secure as using
    a server-side script.
  prefs: []
  type: TYPE_NORMAL
- en: If your project uses Ionic, then you should follow the instructions for Angular
    as the Ionic framework is based on this.
  prefs: []
  type: TYPE_NORMAL
- en: That should give you a solid overview of the best practices for working with
    backends and libraries. We will now discuss each of the most common libraries
    that you will encounter in a Webpack. Let's start with JSON, as it is the easiest
    to understand and is the most important way that external or backend code and
    databases interact with your Webpack application.
  prefs: []
  type: TYPE_NORMAL
- en: Working with JSON
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Most of the time, when you work with frameworks, you will need to communicate
    across languages and between applications. This is done with JSON. JSON works
    similarly to YAML in this way, but it is much easier to understand how Webpack
    works with JSON, first.
  prefs: []
  type: TYPE_NORMAL
- en: JSON files are understood by Webpack's compiler without the need for a dedicated
    loader and, therefore, can be considered a native script to Webpack's bundler,
    just as JavaScript is.
  prefs: []
  type: TYPE_NORMAL
- en: As alluded to in this guide so far, JSON files are instrumentally used for package
    composition. How Webpack records and tracks the use of loaders and dependencies
    is through a schema in the form of a JSON file. This is typically the `package.json`
    file, or sometimes the `package.lock.json` file, which records the exact version
    of each package installed so that it can be reinstalled. In this context, "package"
    refers to loaders and dependencies, collectively.
  prefs: []
  type: TYPE_NORMAL
- en: Each JSON file must be programmed correctly or it won't be readable by Webpack.
    Unlike JavaScript, comments are not permitted in code to guide users, so you may
    want to use a `README` file to explain its content and purpose to the user.
  prefs: []
  type: TYPE_NORMAL
- en: 'The structure of a JSON file is a little different from JavaScipt and contains
    a different array of elements, such as keys. Take the following code block as
    an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This is an extract from the `package.json` file that we'll use a little later
    on in this chapter. The content of this block essentially declares the parameters
    of a module. The named module is used as a key with a colon after it. These keys
    are sometimes referred to as names and they are where options are placed. This
    code sets a series of rules, and in this rule is the instruction to make Webpack
    use `js-yaml-loader` whenever it transpiles the content modules.
  prefs: []
  type: TYPE_NORMAL
- en: You must ensure that braces and brackets are used in the right sequence or Webpack
    won't be able to read the code.
  prefs: []
  type: TYPE_NORMAL
- en: As a JavaScript developer, you may be very familiar with JSON and how it is
    used. However, it's worth spelling out in case there are any blind spots. YAML
    is a more complex framework but it is something you will often encounter, so it's
    only progressively more complex than JSON. Let's get to grips with it now.
  prefs: []
  type: TYPE_NORMAL
- en: Working with YAML
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: YAML is a common framework that is used in a similar way to JSON. The difference
    is that YAML is more commonly used with configuration files, which is why you
    may encounter it more frequently, or for the first time, when using Webpack.
  prefs: []
  type: TYPE_NORMAL
- en: 'To use YAML with Webpack, we must install it. Let''s get started:'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can install YAML using `npm` in your command-line utility. Use the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Note the `yarn` statement. This refers to an open source package manager for
    JavaScript files that comes preinstalled with `Node.js`. It works similarly to
    `npm` and should be preinstalled. If you don't get a response from the code used
    here, then double-check that it is preinstalled.
  prefs: []
  type: TYPE_NORMAL
- en: 'To inspect your YAML files from the command-line interface, you should install
    them globally:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, open up the configuration file, `webpack.config.js`, and make the following
    amendments:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The preceding line will return a JavaScript object. This method is safe for
    data that is not trusted. See the *Further reading* section for a GitHub YAML
    example.
  prefs: []
  type: TYPE_NORMAL
- en: 'After that, use `webpack.config.js` to configure the file to allow the use
    of the YAML loader:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: You may also want to use the YAML front-matter loader for Webpack. This is an
    MIT-licensed piece of software that will convert YAML files into JSON, which will
    be particularly useful if you are more used to using the latter. If you are a
    JavaScript developer, it is quite likely that you are used to using JSON as it
    tends to be more commonly used with JavaScripters than YAML.
  prefs: []
  type: TYPE_NORMAL
- en: This module requires a minimum of Node v6.9.0 and Webpack v4.0.0 installed on
    your device. Webpack 5 is the subject of this guide, so there should be no trouble
    there. However, note that this feature is only available with Webpack 4 and 5.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following steps are separated from the previous steps as they deal with
    the installation of `yaml-loader` and not `yaml-frontmatter`, which is used to
    convert YAML into JSON files (which is more typical of Webpack package structures):'
  prefs: []
  type: TYPE_NORMAL
- en: 'To begin, you''ll need to install `yaml-frontmatter-loader` using your command-line
    utility:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: This particular command line may be syntactically different from the kind that
    this guide has shown in the past, but regardless of the format, this command should
    work.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, add the loader to your configuration, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: This code will return the `file.md` file as a JavaScript object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, open `webpack.config.js` once more and make the following changes to
    the `rules` key, ensuring you reference the YAML loader:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Next, run Webpack 5 via your preferred method and see the results!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you got through that in one piece, you may be feeling brave enough to tackle
    Angular. That is a more difficult framework to work with, so let's get started.
  prefs: []
  type: TYPE_NORMAL
- en: Working with Angular
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Angular is a library and framework, and as with all frameworks, it aims to make
    building applications easier. Angular utilizes dependency injection, integrated
    best practices, and end-to-end tooling, all of which can help resolve development
    challenges.
  prefs: []
  type: TYPE_NORMAL
- en: Angular projects often use Webpack. At the time of writing, the latest version
    of Angular in use is **Angular 9**. An updated version is brought out every year.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's take a look at how Webpack works when bundling Angular projects or
    even bolting Angular on to existing projects.
  prefs: []
  type: TYPE_NORMAL
- en: 'Angular looks for `window.jQuery` to determine whether jQuery is present. See
    the following code block for the source code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'To add a `lodash` map, append the existing code with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Webpack and Angular work by supplying Webpack with entry files and letting
    it incorporate the dependencies that lead from those entry points. The entry point
    file in the following example is the root file of the application—`src/main.ts`.
    Let''s take a look:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to use the `webpack.config.js` file here. Note that this is a single
    entry-point process:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Webpack will now parse the file, inspect it, and traverse its imported dependencies
    recursively.
  prefs: []
  type: TYPE_NORMAL
- en: 'Make the following changes in `src/main.ts`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Webpack will recognize that the `@angular/core` file is being imported, so this
    will be added to the dependency list for bundle inclusion. Webpack will open the
    `@angualar/core` file and trace its series of `import` statements until a dependency
    graph is built from it. This will be built from `main.ts` (a TypeScript file).
  prefs: []
  type: TYPE_NORMAL
- en: 'These files will then be provided as output to the `app.js` bundle file that
    is identified in the configuration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: The JavaScript file that contains the source code and dependencies is a single
    file and the output bundle is the `app.js` file. This will be loaded later with
    a JavaScript tag (`<script>`) in the `index.html` file.
  prefs: []
  type: TYPE_NORMAL
- en: It is advised that you don't have one giant bundle for everything, for obvious
    reasons. Therefore, it is recommended that the volatile application code is separated
    from the more stable vendor code modules.
  prefs: []
  type: TYPE_NORMAL
- en: 'This separation of the application and vendor code is done by changing the
    configuration so that two entry points are now used—`main.ts` and `vendor.ts`—as
    shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Two bundle files are emitted from Webpack by constructing two separate dependency
    graphs. The first is called `app.js`, while the second is called `vendor.js`.
    Each contains the application code and vendor dependencies, respectively.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the preceding example, `file name: [name]` indicates a placeholder that
    is replaced with entry names by the Webpack plugin, app, and vendor. Plugins are
    covered in more detail in the next chapter, so if you''re stuck, maybe mark this
    page and come back to it.'
  prefs: []
  type: TYPE_NORMAL
- en: Now, instruct Webpack of which parts belong to the vendor bundle by adding a
    `vendor.ts` file that only imports third-party modules, as in the following code,
    which shows an example of the contents of `vendor.ts`**:**
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Note the mention of `rxjs`. This is a library for reactive programming that
    aims to make it easier for developers to compose asynchronous code or callbacks.
  prefs: []
  type: TYPE_NORMAL
- en: Other vendors can be imported this way, such as jQuery, Lodash**,** and Bootstrap.
    File extensions that can also be imported include **JavaScript** files (`.js`),
    **TypeScript** files (`.ts`), **Cascading Style Sheets** files (`.css`), and **Syntactically
    Awesome Style Sheets** files (`.sass`).
  prefs: []
  type: TYPE_NORMAL
- en: Angular can be a very complicated framework and is very relevant to web-based
    applications. However, your particular need may suit single-page applications
    better, in which case Vue.js would be the preferred option to use for most. Let's
    take a look at it now.
  prefs: []
  type: TYPE_NORMAL
- en: Working with Vue.js
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Vue.js is another framework but is an open source. The salience of its use,
    or area of distinct purpose, lies within **single-page applications** (**SPAs**).
    This is because the framework focuses on delivering a seamless experience, but
    with fewer features than Angular, which can work alongside many other languages
    and still operate very quickly. Building applications that are quite large with
    Vue.js will result in very slow loading during use and even slower compilation.
  prefs: []
  type: TYPE_NORMAL
- en: Perhaps the best way to understand this is to consider jQuery and how it uses
    inline statements to call in a script to pages, whereas Angular uses core modules,
    each designed with a specific purpose. Vue.js lies somewhere in between the pure
    and simple jQuery for SPAs and Angular.
  prefs: []
  type: TYPE_NORMAL
- en: Using Webpack with the Vue.js project is done with the use of a dedicated loader.
  prefs: []
  type: TYPE_NORMAL
- en: 'The installation of `vue-loader` and `vue-template-compiler` is advised, unless
    you''re an advanced user of Vue.js''s template compiler. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To follow this example, begin by installing `vue-loader` and `vue-template-compiler` with
    the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: The template compiler has to be installed separately so that the version can
    be specified.
  prefs: []
  type: TYPE_NORMAL
- en: Vue.js has released a corresponding version of its template compiler with each
    new release. The two versions must be in sync so that the loader produces code
    that is runtime compatible. So, every time you upgrade one, you should upgrade
    the other.
  prefs: []
  type: TYPE_NORMAL
- en: The loader associated with Vue.js has a slightly different configuration from
    most loaders. Make sure you add the Vue.js loader's plugin to your Webpack configuration
    when handling files with extensions of `.vue`.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is done by altering the configuration of Webpack, shown in the following
    example using `webpack.config.js`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: This plugin is required as it is responsible for cloning riles that are defined
    and applying them to language blocks that correspond to `.vue` files.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using Vue.js, we add the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code must be added as it contains the full installation of the
    ECMAScript module for Vue.js when used with bundlers. This should be present in
    the `/dist` folder of your project's `npm` package. Note that `.ems.` signifies
    the ECMAScript module. There are runtime-only and production-specific installation
    methods shown on the Vue.js installation page, which is available in the *Further
    reading* section of this chapter. **UMD** and **CommonJS** installations are similar
    and use the `vue.js` and `vue.common.js` files, respectively.
  prefs: []
  type: TYPE_NORMAL
- en: As our project will use the `.esm` format, it may be useful to know more about
    it. It has been designed to be analyzed statically, which allows bundlers to perform
    **tree-shaking**, which is the elimination of unused code. Note that the default
    file for bundlers is `pkg.module`, which is responsible for runtime-only ECMAScript
    module compilation. For more information, see the Vue.js installation page—the
    URL is available in the *Further reading* section of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: This concludes the content of this chapter regarding frameworks and libraries.
    You should now be in a strong position to work with complex projects that may
    even utilize more than one framework.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter covered typical frameworks and how to get started with using them.
    This included the installation process that should be followed and what criteria
    and peripherals are needed. This guide has paid attention to best practices and
    security. When you begin your project, you should follow these examples ahead
    of time, paying close attention to procedures, warnings, and requirements.
  prefs: []
  type: TYPE_NORMAL
- en: This guide has given you an overview of other frameworks, such as RxJS for callbacks
    and jQuery, as well as pointed you in the right direction when it comes to using
    unusual file extensions. We have also explored the usage and installation procedures
    for Angular's core functionality and Vue.js when working with Webpack 5 and how
    Vue.js is better suited to single-page applications and how Angular works better
    on larger projects.
  prefs: []
  type: TYPE_NORMAL
- en: Having covered most of the core topics, in the next chapter we will delve into
    deployment and installation. This will be even more important when working with
    databases and ensuring security requirements are kept. The next chapter will provide
    an in-depth account of this subject and will hopefully address any concerns you
    might have as a developer.
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'GitHub''s YAML example: [https://github.com/nodeca/js-yaml](https://github.com/nodeca/js-yaml)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The window.jQuery source code: [https://github.com/angular/angular.js/blob/v1.5.9/src/Angular.js#L1821-L1823](https://github.com/angular/angular.js/blob/v1.5.9/src/Angular.js#L1821-L1823.)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Vue.js installation guide: [https://vuejs.org/v2/guide/installation.html](https://vuejs.org/v2/guide/installation.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What compiler needs to correspond to the version of `Vue.js` being used?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When using Angular, this guide advises the separation of volatile code and stable
    vendor code. This is done using two entry points. What are they?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are the minimal installation requirements when using YAML with Webpack?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Why should you install your YAML files globally?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is an SPA?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Where should you add Vue.js's loader when handling `.vue` files?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'What is missing from the following line of code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`import ''angular/http'';`'
  prefs: []
  type: TYPE_NORMAL
- en: When using Angular, how is `app.js` loaded?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is YARN?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the default `pkg.module` file used for?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
