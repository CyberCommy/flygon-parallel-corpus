- en: Secured Communication with Vue.js Components
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与Vue.js组件进行安全通信
- en: You don't need to look far before noticing component-driven architecture in
    modern web applications nowadays. Development needs have changed in a short space
    of time with the web going from a simple document viewer to hosting complex applications
    with significantly large code bases. Therefore, the ability to create reusable
    components makes our lives as front-end developers much easier as we can encapsulate
    core functionality into singular blocks, reducing overall complexity, allowing
    for better separation of concerns, collaboration, and scalability.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在现代Web应用程序中，注意到组件驱动的架构并不需要花费太多精力。在短时间内，开发需求发生了变化，Web从一个简单的文档查看器发展为承载具有显着庞大代码库的复杂应用程序。因此，能够创建可重用的组件使我们作为前端开发人员的生活变得更加轻松，因为我们可以将核心功能封装到单一块中，减少总体复杂性，实现更好的关注点分离，协作和可扩展性。
- en: 'In this chapter, we''ll be taking the preceding concepts and applying them
    to our Vue applications. By the end of this chapter, you will have achieved:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将把前面的概念应用到我们的Vue应用程序中。在本章结束时，您将实现：
- en: The ability to create your own Vue components
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建自己的Vue组件的能力
- en: A greater understanding of Single File Components
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对单文件组件的更深入理解
- en: The ability to create styles specific to each component
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建特定于每个组件的样式的能力
- en: The ability to register components both locally and globally, and an understanding
    of *why* to select one over the other
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 能够在本地和全局注册组件，并理解选择其中一个的原因
- en: The ability to communicate between parent and child components using props
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用props在父子组件之间进行通信的能力
- en: The ability to communicate *across* the application using a global Event Bus
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用全局事件总线在整个应用程序中进行通信的能力
- en: The ability to use slots to make your components more flexible
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用插槽使您的组件更加灵活
- en: Let's start off by looking at *Your first Vue component.*
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从*您的第一个Vue组件*开始。
- en: Your first Vue component
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 您的第一个Vue组件
- en: 'It turns out that we''ve been using components all along inside of our Vue
    applications! Using the `webpack-simple` template, we have support for **Single
    File Components** (**SFC**), which is essentially just a template, script, and
    style tag with a `.vue` extension:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 事实证明，我们一直在Vue应用程序中使用组件！使用`webpack-simple`模板，我们支持**单文件组件**（**SFC**），它本质上只是一个带有`.vue`扩展名的模板、脚本和样式标签：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'As we''re using the Vetur extension for Visual Studio Code, we''re able to
    type `scaffold` and hit *Tab*, this then creates an SFC that can be used inside
    of our project. If we overwrite `App.vue` with an empty component, by our current
    definition it will look as follows:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们正在使用Visual Studio Code的Vetur扩展，我们可以输入`scaffold`并按*Tab*键，然后创建一个可以在项目中使用的SFC。如果我们用一个空组件覆盖`App.vue`，根据我们当前的定义，它将如下所示：
- en: '![](assets/50fc5112-77cf-4a01-b677-652be6042fff.png)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/50fc5112-77cf-4a01-b677-652be6042fff.png)'
- en: 'That''s it! Sort of. We''ve still got to add some functionality to our component,
    and if we were creating a new file (that is, not using the default `App.vue` component),
    register it somewhere to be used. Let''s see this in action by creating a new
    file under `src/components/FancyButton.vue`:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样！有点。我们仍然需要向我们的组件添加一些功能，并且如果我们要创建一个新文件（即不使用默认的`App.vue`组件），则需要在某个地方注册它以供使用。让我们通过在`src/components/FancyButton.vue`下创建一个新文件来看看这个过程：
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Our `FancyButton` component is simply a button that says `''Hello World!''`
    and has a tiny bit of styling. Immediately, we need to be thinking about things
    that we can do to make this more scalable:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的`FancyButton`组件只是一个说'Hello World!'的按钮，并带有一点点样式。立即，我们需要考虑可以做些什么来使其更具可扩展性：
- en: Allow for an input on this component to change the button text
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 允许在此组件上输入以更改按钮文本
- en: As we're styling the `button` element (or even if we had added classes), we
    need a way to stop the styles leaking out into the rest of our application
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当我们为`button`元素设置样式（甚至如果我们添加了类），我们需要一种方法来阻止样式泄漏到应用程序的其他部分
- en: Register this component so that it can be used globally throughout the application
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 注册此组件，以便可以在整个应用程序中全局使用
- en: Register this component so that it can be used locally within a component
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 注册此组件，以便可以在组件内部本地使用
- en: And many more!
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 还有更多！
- en: Let's start with the easiest one, registering the component so it can be used
    within our application.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从最简单的开始，注册组件，以便在我们的应用程序中使用。
- en: Registering components globally
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 全局注册组件
- en: 'We can create components and register them globally with the following interface:
    `Vue.component(name: string, options: Object<VueInstance>)`. Although it isn''t
    required, when naming our components it''s important to adhere to the naming conventions
    set by the W3C Custom Elements specification ([https://www.w3.org/TR/custom-elements/#valid-custom-element-name](https://www.w3.org/TR/custom-elements/#valid-custom-element-name)),
    that is, all-lowercase and it must contain a hyphen.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '我们可以使用以下接口创建组件并全局注册它们：`Vue.component(name: string, options: Object<VueInstance>)`。虽然不是必需的，但在命名我们的组件时，遵循W3C自定义元素规范设置的命名约定很重要（[https://www.w3.org/TR/custom-elements/#valid-custom-element-name](https://www.w3.org/TR/custom-elements/#valid-custom-element-name)），即全部小写并且必须包含连字符。'
- en: 'Inside of our `main.js` file, let''s register our `FancyButton` component by
    first importing it from the appropriate path:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的`main.js`文件中，让我们首先从适当的路径导入`FancyButton`组件，然后注册它：
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Afterwards, we can register the component using `Vue.component`, which can
    be seen in bold, making the resulting code inside of `main.js` like so:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，我们可以使用`Vue.component`注册组件，可以在`main.js`中看到加粗的结果代码如下：
- en: '[PRE3]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Tada! Our component has now been registered globally. Now... how do we use
    this inside of our `App.vue` component? Well, remember the tag that we specified?
    We just add that to the `template` like so:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 塔达！我们的组件现在已经全局注册了。现在...我们如何在`App.vue`组件内部使用它呢？好吧，记得我们指定的标签吗？我们只需将其添加到`template`中，如下所示：
- en: '[PRE4]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Here''s the results of our hard work (zoomed in to 500%):'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们辛苦工作的结果（放大到500%）：
- en: '![](assets/dd7723c0-2989-49a4-a855-663dcf1121d7.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/dd7723c0-2989-49a4-a855-663dcf1121d7.png)'
- en: Scoped styles
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 作用域样式
- en: 'Great! What happens if we add another button element? As we styled the `button`
    element directly with CSS:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！如果我们添加另一个按钮元素会发生什么？因为我们直接用CSS为`button`元素设置了样式：
- en: '[PRE5]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'If we head over to our browser we can see each of the buttons that we have
    created:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们转到浏览器，我们可以看到我们创建的每个按钮：
- en: '![](assets/604d7493-d3d5-436a-880b-63d7fa46c240.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/604d7493-d3d5-436a-880b-63d7fa46c240.png)'
- en: 'Uh oh! This other button isn''t a `fancy-button`, so why is it getting the
    styles? Thankfully, stopping the styles from leaking outside of the component
    is simple, all we need to do is add the `scoped` attribute to the `style` tag:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 哦哦！这个其他按钮不是`fancy-button`，那么为什么它会得到样式？幸运的是，阻止样式泄漏到组件外部很简单，我们只需要在`style`标签中添加`scoped`属性：
- en: '[PRE6]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The scoped attribute isn't part of Vue by default, this comes from our Webpack
    `vue-loader`. You'll notice that after adding this, the button styles are specific
    to our `fancy-button` component only. If we look at the differences between the
    two buttons in the following screenshot, we can see that one is merely a button
    and the other is styling a button with a randomly generated data attribute. This
    stops the browser from applying the styles to both button elements in this scenario.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '`scoped`属性不是Vue默认的一部分，这来自我们的Webpack `vue-loader`。您会注意到，在添加此属性后，按钮样式仅适用于我们的`fancy-button`组件。如果我们看一下以下截图中两个按钮之间的区别，我们可以看到一个只是一个按钮，另一个是使用随机生成的数据属性为按钮设置样式。这可以阻止浏览器在这种情况下将样式应用于两个按钮元素。'
- en: 'When using scoped CSS within Vue, keep in mind that rules created within the
    component won''t be accessible globally across the application:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在Vue中使用作用域CSS时，请记住组件内创建的规则不会在整个应用程序中全局访问：
- en: '![](assets/8fa8f269-da22-4751-a067-7e77a88331e6.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/8fa8f269-da22-4751-a067-7e77a88331e6.png)'
- en: Registering a component locally
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在本地注册组件
- en: 'We can also register our components locally within our application. This can
    be done by adding it specifically to our Vue instance, for example, let''s comment
    out the global registration within `main.js` and then navigate to `App.vue`:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以在应用程序内部局部注册我们的组件。这可以通过将其添加到我们的Vue实例中来实现，例如，让我们将`main.js`中的全局注册注释掉，然后导航到`App.vue`：
- en: '[PRE7]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Before adding any code into our app component, notice that our button has disappeared
    now that we''re no longer globally registering it. To register this locally, we''ll
    need to first import the component similar to how we did before and then add this
    to a `component` object within the instance:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在将任何代码添加到我们的应用程序组件之前，请注意，我们的按钮现在已经消失，因为我们不再全局注册它。要在本地注册这个，我们需要首先导入组件，类似于之前的操作，然后将其添加到实例中的`component`对象中：
- en: '[PRE8]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Our button has now appeared on screen again. When deciding where to register
    your components, think about how often they may need to be used throughout the
    project.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的按钮现在再次出现在屏幕上。在决定注册组件的位置时，考虑它们在整个项目中可能需要被多频繁使用。
- en: Component communication
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 组件通信
- en: We've now got the ability to create reusable components that allow us to encapsulate
    functionality within our project. In order to make these components usable, we'll
    need to give them the ability to communicate with oneanother. The first thing
    we'll be looking at is one way communication with component properties (referred
    to as "props").
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了创建可重用组件的能力，这使我们能够在项目中封装功能。为了使这些组件可用，我们需要让它们能够相互通信。我们首先要看的是组件属性的单向通信（称为“props”）。
- en: 'The point of component communication is to keep our features distributed, loosely
    coupled, and in turn make our application easier to scale. To enforce loose coupling,
    you should not attempt to reference parent component(s) data within the child
    component and it should be passed using `props` only. Let''s take a look at making
    a property on our `FancyButton` that changes the `button` text:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 组件通信的目的是保持我们的功能分布、松散耦合，并从而使我们的应用程序更容易扩展。为了实现松散耦合，您不应尝试在子组件中引用父组件的数据，而应仅使用`props`传递。让我们看看如何在我们的`FancyButton`上创建一个改变`button`文本的属性：
- en: '[PRE9]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Notice how we''re able to bind to the `buttonText` value inside of our template
    as we''ve created ourselves a `props` array that contains string or object values
    for each component property. Setting this can be done with kebab case as an attribute
    on the component itself, this is required as HTML is case-insensitive:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们能够在模板中绑定到`buttonText`值，因为我们创建了一个包含每个组件属性的字符串或对象值的`props`数组。设置这个可以通过连字符形式作为组件本身的属性，这是必需的，因为HTML是不区分大小写的：
- en: '[PRE10]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'This gives us the following result:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这给我们带来了以下结果：
- en: '![](assets/1fe36d71-ca38-4d17-b80d-6200a13f6a7e.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/1fe36d71-ca38-4d17-b80d-6200a13f6a7e.png)'
- en: Configuring property values
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置属性值
- en: 'We can further configure our property values by instead setting them as an
    object. This allows us to define things such as defaults, types, validators, and
    so on. Let''s do this with our `buttonText` property:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以通过将属性值设置为对象来进一步配置它们。这使我们能够定义默认值、类型、验证器等。让我们用我们的`buttonText`属性来做这个：
- en: '[PRE11]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Firstly, we''re ensuring that we can only pass String types into this property.
    We can also check against other types, such as:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们确保只能将String类型传递到此属性中。我们还可以检查其他类型，例如：
- en: Array
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数组
- en: Boolean
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 布尔值
- en: Function
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 函数
- en: Number
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数字
- en: Object
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对象
- en: String
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字符串
- en: Symbol
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 符号
- en: According to web component good practices, sending primitive values to props
    is a good practice.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: 'Under the hood, this is running the `instanceof` operator against the property
    so it could also run a check against constructor types, as seen in the following
    screenshot:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/02c1a8f7-dd5b-4275-9888-7f65a618fbfd.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
- en: 'At the same time, we can also check for multiple types using the array syntax:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Next, we're setting the default text to be `FancyButton!`, which means that
    by default, if this property wasn't set, it'd have that value. We've also set
    required equal to true, meaning that any time we create a `FancyButton` we have
    to include the `buttonText` property.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: This is currently a contradiction in terms (that is, default value and required),
    but there are times where you'd want a default value where the property isn't
    required. Finally, we're adding a validation function to this to specify that
    any time we set this property, it has to have a string length greater than three.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: 'How do we know whether a property validation has failed? In development mode,
    we can check our development console and we should have a corresponding error.
    For example, if we forget to add the `buttonText` property on our component:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/7bbf0577-2965-4753-b81a-366e98da34bf.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
- en: Custom events
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We''re making great progress. We now have a component that can accept input,
    be registered globally or locally, has scoped styles, validation, and more. Now
    we need to give it the ability to fire events back to its parent component to
    communicate whenever the `FancyButton` button is clicked, this is done by editing
    the code for the `$emit` event:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'In our example, we''ve attached the `clicked` function to the click event of
    the button, meaning that whenever it is selected we''re emitting the `buttonClicked`
    event. We can then listen for this event within our `App.vue` file, where we add
    our element to the DOM:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Notice how at this point we're using `@buttonClicked="eventListener()"`. This
    uses the `v-on` event to call the `eventListener()` function any time the event
    is emitted, subsequently logging the message to the console. We've now demonstrated
    the ability to send and receive events between two components.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: Sending event values
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To make the event system even more powerful, we can also pass values along
    to our other component. Let''s add an input box to our `FancyButton` component
    (perhaps we need to rename it or think about separating the input into its own
    component!):'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The next thing to do is pass along the message value with our `$emit` call.
    We can do this inside of the `clicked` method like so:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'At this point, we can then capture the event as an argument to the `eventListener`
    function like so:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The final thing to do at this point is also match up the expected parameters
    for the function:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'We should then get the following in the console:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/8ede1eca-f3fc-49d7-9b60-9ef5042cb653.png)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
- en: We've now got the ability to truly send events between a parent and child component,
    along with any data we may want to send along with it.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: Event Bus
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When we''re looking to create an application wide events system (that is, without
    strictly parent to child component), we can create what''s known as an Event Bus.
    This allows us to "pipe" all of our events through a singular Vue instance, essentially
    allowing for communication past just parent and child components. As well as this,
    it''s useful for those not looking to use third-party libraries such as `Vuex`,
    or smaller projects that are not handling many actions. Let''s make a new playground
    project to demonstrate it:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Start off by creating an `EventsBus.js` inside the `src` folder. From here
    we can export a new Vue instance that we can use to emit events like before with
    `$emit`:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Next, we can create our two components, `ShoppingInput` and `ShoppingList`.
    This will allow us to both input a new item as well as display a list of inputted
    items on our shopping list starting with our `ShoppingInput` component:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The key take away from this component is that we''re now importing `EventBus`
    and using `$emit` instead of using this, changing our application''s event system
    from being component-based to application-based. We can then watch for changes
    (and the subsequent values) from any component we want using `$on`. Let''s look
    at this with our next component, `ShoppingList`:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Looking at our `ShoppingList` component we can see the use of `$on`, this allows
    us to listen for the event named `addShoppingItem` (the same event name as we
    emitted, or any other event you're looking to listen for). This returns the item,
    which we're then able to log out to the console or do anything else at this point.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: 'We can put this all together inside of our `App.vue`:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: We're defining both of our components, and listening for the `addShoppingItem`
    event inside of our created lifecycle hook. Just as before, we get the `itemName`,
    which we can then add to our array. We can pass the array through to another component
    as a prop, such as the `ShoppingList` to be rendered on screen.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, if we wanted to stop listening to events (either entirely or per event)
    we can use `$off`. Inside of `App.vue`, let''s make a new button that shows this
    further:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Then we can create the `stopListening` method like so:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'If we wanted to stop listening to all events, we could simply use:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: At this point, we've now created an events system that would allow us to communicate
    with any of our components regardless of the parent/child relationship. We're
    able to send events and listen to them via the `EventBus`, giving us a lot more
    flexibility with our component data.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: Slots
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When we''re composing our components, we should consider how they''ll be used
    by ourselves and our team. Using slots allows us to dynamically add elements to
    the component with varying behavior. Let''s see this in action by making a new
    playground project:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'We can then go ahead and create a new component named `Message` (`src/components/Message.vue`).
    We can then add something specific to this component (such as the following `h1`)
    as well as a `slot` tag that we can use to inject content from elsewhere:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'If we then registered our component inside of `App.vue` and placed it inside
    of our template, we''d be able to add content inside of the `component` tag like
    so:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'At this point, everything inside the `message` tag is being placed inside of
    the `slot` within our `Message` component:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/5e0e881f-2107-4293-be22-e51d09c8a94d.png)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
- en: Notice how we're seeing I'm part of the Message component! with each declaration
    of the `Message` component, this shows that even though we're injecting content
    into this space, we can still show template information specific to the component
    each time.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: Defaults
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Whilst we're able to add content into the slots, we may want to add default
    content that shows when we don't add anything ourselves. This means we don't have
    to add content every time, and if we want to, we can override it in that circumstance.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: 'How do we add default behavior to our slots? That''s quite simple! All we need
    to do is add our element(s) in between the `slot` tag like this:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'If we therefore add another `message` element, but this time without any markup
    inside, we''d get the following:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Now if we head to our browser we can see that our messages display as expected
    like so:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/aa5a2942-93ea-4bdb-92e8-832840de3cef.png)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
- en: Named slots
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We can also take this a step further with named slots. Let's say our `message`
    component wanted both a `date` and `messageText` input, one of which is a slot
    and the other a property of the component. Our use case for this would be that
    perhaps we want to display the date differently, add varying bits of information,
    or not even show it at all.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: 'Our message component becomes:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Take note of the `name="date"` attribute on our `slot` tag. This allows us
    to dynamically place our content at runtime in the correct locations. We can then
    build out a small chat system to show this in action, let''s ensure we have `moment`
    installed in our project prior to continuing:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'You may remember using `moment` in [Chapter 4](5293b70a-2322-4da9-bd9e-244bdec437bf.xhtml),
    *Vue.js Directives*, we''ll also be reusing the `Date` pipe that we created earlier.
    Let''s upgrade our `App.vue` to contain the following:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'What''s happening here? Inside of our template we''re iterating over our `messageList`
    and creating a new message component each time a new message is added. Inside
    of the component tag we''re expecting the `messageText` to appear (as we''re passing
    it as a prop and the markup is defined inside the Message component), but we''re
    also dynamically adding the date using a `slot`:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/d6f662a6-2aca-4b6a-9232-96ddf8f48212.png)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
- en: 'What happens if we remove `slot="date"` from our h2? Does the date still show?
    Nope. This is because when we only use named slots, there are no other places
    for the slot to be added. It would only appear if we changed our `Message` component
    to take in an unnamed slot like so:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Summary
  id: totrans-147
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter has given us the power to create reusable components that can communicate
    with one another. We've looked at how we can register components globally throughout
    the project, or locally to a specific instance, giving us flexibility and appropriate
    separation of concerns. We've seen just how powerful this can be with examples
    that range from the addition of simple properties to complex validations and defaults.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we're going to be investigating how we can create **better
    UI.** We'll be looking more at directives such as `v-model` in the context of
    forms, animations, and validation.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
