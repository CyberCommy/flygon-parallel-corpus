- en: Build a Full Stack E-Commerce Application with React Native and GraphQL
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you're reading this, this means you've reached the final part of this book,
    which uses React to build web applications. In the preceding chapters, you've
    already used the core features of React, such as rendering components, state management
    with Context, and Hooks. You've learned how to create a PWA and an SSR application
    and how to add routing to your React application. Also, you know how to add testing
    to a React application with Jest and Enzyme. Let's add GraphQL to the list of
    things you've learned about so far.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you will not only build the frontend of an application, but
    also the backend. For this, GraphQL will be used, which can best be defined as
    a query language for APIs. Using mock data and Apollo Server, you'll extend a
    GraphQL server that exposes a single endpoint for your React application. On the
    frontend side, this endpoint will be consumed using Apollo Client, which helps
    you handle sending requests to the server and state management for this data.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, the following topics will be covered:'
  prefs: []
  type: TYPE_NORMAL
- en: Querying and mutating data with GraphQL
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Consuming GraphQL with Apollo Client
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Handling state management with GraphQL
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Project overview
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will create a full stack e-commerce application that has
    a GraphQL server as a backend and consumes this server in React using Apollo Client.
    For both the backend and frontend, an initial application is available to get
    you started quickly.
  prefs: []
  type: TYPE_NORMAL
- en: The build time is 3 hours.
  prefs: []
  type: TYPE_NORMAL
- en: Getting started
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The project that we'll create in this chapter builds upon an initial version
    that you can find on GitHub: [https://github.com/PacktPublishing/React-Projects/tree/ch7-initial](https://github.com/PacktPublishing/React-Projects/tree/ch7-initial).
    The complete source code can also be found on GitHub: [https://github.com/PacktPublishing/React-Projects/tree/ch7](https://github.com/PacktPublishing/React-Projects/tree/ch7).
  prefs: []
  type: TYPE_NORMAL
- en: 'The initial project consists of both a boilerplate application based on Create
    React App to get you started quickly and a GraphQL server that you can run locally.
    You can find the application in the `client` directory and the GraphQL server
    can be found in the `server` directory. Both the initial application and the GraphQL
    server need dependencies installed and need to be running at all times during
    development, which you can do by running the following commands in both the `client`
    and `server` directories:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This command will install all of the dependencies that are needed to run both
    the React application and the GraphQL server, including `react`, `react-scripts`, `graphql`, and `apollo-server`.
    If you'd like to know about all of the dependencies that were installed, please
    have a look at the `package.json` files in both the `client` and `server` directories.
  prefs: []
  type: TYPE_NORMAL
- en: After the installation process has finished, both the GraphQL server and the
    React application will be started.
  prefs: []
  type: TYPE_NORMAL
- en: Getting started with the initial React application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Since the React application is created by Create React App, it will automatically
    launch in your browser at `http://localhost:3000/`. This initial application doesn''t
    show any data as it still needs to be connected to the GraphQL server, which you''ll
    do later on in this chapter. At this point, the application will, therefore, render
    only a header with the title Ecommerce Store and a subheader as well, which looks
    something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/63e36de1-c18c-4f1d-9701-6906f169f375.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The structure of this initial React application is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: In the `client/src` directory, you'll find the entry point to the application,
    which is `index.js`. This file will refer to the `App` component in `App.js`.
    The `App` component has a `Router` component that either renders the `Products` or `Cart` component,
    dependent on which URL the user is visiting. When no specific route is specified,
    the `Products` component will be rendered which consists of a `SubHeader` component,
    with `Button` to the `Cart` component, and a `map` function that returns a list
    of `ProductItem` components that display product information. The `/cart` route will
    render the `Cart` component that also has `SubHeader`, this time with `Button` to
    go back to the previous page. Also, again return a list of products will be returned
    and the `Totals` component will show the total number of products in the cart.
  prefs: []
  type: TYPE_NORMAL
- en: Getting started with the GraphQL server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Although you won't be making any code changes to the GraphQL server, it's important
    to know how the server is functioning and what the basic concepts of GraphQL are.
  prefs: []
  type: TYPE_NORMAL
- en: GraphQL is best described as a query language for APIs and is defined as a convention
    for retrieving data from an API. Often, GraphQL APIs are compared to RESTful APIs,
    which is a well-known convention for sending HTTP requests that are dependant
    on multiple endpoints that will all return a separate data collection. As opposed
    to the well-known RESTful APIs, a GraphQL API will provide a single endpoint that
    lets you query and/or mutate data sources such as a database. You can query or
    mutate data by sending a document containing either a query or mutation operation
    to the GraphQL server. Whatever data is available can be found in the schema of
    the GraphQL server, which consists of types that define what data can be queried
    or mutated.
  prefs: []
  type: TYPE_NORMAL
- en: 'The GraphQL server can be found in the `server` directory and provides a backend
    for the frontend React application that you''ll build in this chapter. This server is
    created using Express and Apollo Server, where Express is a framework to create
    APIs using JavaScript and Apollo Server is an open source package that helps you
    create GraphQL servers with a limited amount of code. After making sure you''ve
    run the `npm install` and `npm start` commands in the `server` directory, the
    GraphQL API becomes available on `http://localhost:4000/graphql` Apollo Server
    will run your GraphQL server on port `4000` by default. On this page in the browser,
    the GraphQL Playground will be displayed, and is where you can use and explore
    the GraphQL server. An example of this playground can be seen in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/2cee33f7-0d54-4d36-9b16-c3a05978bb0e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'With this playground, you can send queries and mutations to the GraphQL server,
    which you can type on the left-hand side of this page. The queries and mutations
    that you''re able to send can be found in SCHEMA for this GraphQL server, which
    you can find by clicking on the green button labeled SCHEMA. This button will
    open an overview of SCHEMA, which shows you all of the possible return values
    of the GraphQL server:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/77154966-8d2a-4b7f-8485-4931c58619bb.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Whenever you describe a query or mutation on the left-hand side of this page,
    the output that is returned by the server will be displayed on the right-hand
    side of the playground. The way a GraphQL query is constructed will determine
    the structure of the returned data since GraphQL follows the principle of *ask
    for what you need, get exactly that*. Since GraphQL queries always return predictable
    results, this means we can have a query that looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'This will return an output that will follow the same structure of the query
    that''s defined in the document that you sent to the GraphQL server and has the
    following format:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Applications that are using GraphQL are often fast and stable because they control
    the data they get, not the server.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, you'll connect the GraphQL server to the React web application
    using Apollo, and send documents to the server from your application.
  prefs: []
  type: TYPE_NORMAL
- en: Building a full stack e-commerce application with React, Apollo, and GraphQL
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, you'll connect the React web application to the GraphQL server.
    Apollo Server is used to create a single GraphQL endpoint that uses dynamic mock
    data as a source. Apollo Client is used by React to consume this endpoint and
    handle state management for your application.
  prefs: []
  type: TYPE_NORMAL
- en: Adding GraphQL to a React application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With the GraphQL server in place, let's move on to the part where you make requests
    to this server from a React application. For this, you'll use Apollo packages
    that help you add an abstraction layer between your application and the server.
    That way, you don't have to worry about sending documents to the GraphQL endpoint
    yourself by using, for example, `fetch`, and can send documents directly from
    a component.
  prefs: []
  type: TYPE_NORMAL
- en: 'As we mentioned previously, you can use Apollo to connect to the GraphQL server;
    for this, Apollo Client will be used. With Apollo Client, you can set up the connection
    with the server, handle queries and mutations, and enable caching for data that''s
    been retrieved from the GraphQL server, among other things. Apollo Client is added
    to your application by following these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To install Apollo Client and its related packages, you need in order to run
    the following command from the `client` directory where the React application
    is initialized:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'This will install not only Apollo Client but also the other dependencies you
    need to use Apollo Client and GraphQL in your React application:'
  prefs: []
  type: TYPE_NORMAL
- en: '`apollo-link-http` will connect with the GraphQL server'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`react-apollo` will provide the components you need to send queries to and
    mutations and handle the data flow'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`graphql` and `graphql-tag` will handle GraphQL and write in the query language'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'These packages should be imported into the file where you want to create the
    Apollo Client, which, in this case, would be `client/src/App.js`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Now you can define the `client` constant using the `ApolloClient` class and
    use `HttpLink` to make the connection with the GraphQL server; therefore, create
    a `client` constant like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Within the `return` function for the `App` component, you need to add `ApolloProvider`
    and pass `client` you''ve just created as a prop:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: After these steps, all of the components that are nested within `ApolloProvider`
    can access this `client` and send documents with queries and/or mutations to the
    GraphQL server. The method for getting data from `ApolloProvider` is similar to
    how the context API interacts with the Context value and will be demonstrated
    in the next part of this section.
  prefs: []
  type: TYPE_NORMAL
- en: Sending GraphQL queries with React
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `react-apollo` package doesn't only export a Provider but also methods to
    consume the value from this Provider. That way, you can easily get any value using
    the client that was added to the Provider. One of those methods is `Query`, which
    helps you to send a document containing a query to the GraphQL server, without
    having to use a `fetch` function, for example.
  prefs: []
  type: TYPE_NORMAL
- en: Since a `Query` component should always be nested inside an `ApolloProvider`
    component, they can be placed in any component that's been rendered within `App`.
    One of those is the `Products` component in `client/src/components/Product/Products.js`.
    This component is being rendered for the `/` route and should display products
    that are available in the e-commerce store.
  prefs: []
  type: TYPE_NORMAL
- en: 'To send a document from the `Products` component, follow these steps, which
    will guide you in the process of sending documents using `react-apollo`:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The query to get products from the GraphQL server can be found using the introspection
    methods in the playground or from the `server/typeDefs.js` file, and looks as
    follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Sending this document with a query to the GraphQL server will return an array
    consisting of objects with product information, which has a limit of 10 products
    by default. The result will be returned in JSON format and will consist of different
    products every time you send the requests, since the data is mocked by the GraphQL
    server.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `Products` component, you can import the `Query` component from `react-apollo`
    and define a constant for the named `getProducts` query. Also, you need to import
    `gql` from `graphql-tag` to use the GraphQL query language inside your React file,
    which is given as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The imported `Query` component can be returned from `Products` and handle the
    data fetching process based on the query that you pass to it as a prop. In the
    same way as the context API, `Query` can consume the data from the Provider by
    returning a `data` variable. You can iterate over the `products` field from this
    object and return a list of `ProductItem` components by adding the `Query` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Not only will the `Query` component return a `data` object, but it will also
    return the `loading` and `error` variables. So, instead of setting a default value
    for the `loading` prop, you can use this value and return a loading message if
    its value is `true`. For the `error` variable, you apply the same approach. Also,
    the default value for the `Products` prop is hereby no longer used and can be
    deleted:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'This will send a document with the `GET_PRODUCTS` query to the GraphQL server
    when your application mounts and subsequently display the product information
    in the list of the `ProductItem` components. After adding the logic to retrieve
    the product information from the GraphQL server, your application will look similar
    to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/9ed5e8e6-fb2d-4da5-a311-f510e4fede79.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Since the `Cart` component on the `/cart` route also needs to query data from
    the GraphQL server, changes to the `src/components/Cart/Cart.js` file should be
    made as well. Just like we did for `Products`, a `Query` component should be added
    to retrieve data from the server and can be done by following these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Start by importing the dependencies that are needed to send queries to the
    GraphQL server, which are `react-apollo` to get the `Query` component and `graphql-tag`
    to use the GraphQL query language to define the query you want to send to GraphQL:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'After this, you can define `query`, which should be sent in the document. This
    will retrieve the information for `cart`, including any `products` that might
    be in `cart`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Replace the existing code for the `Cart` component with the following, where
    the `Query` component is implemented and the `Cart` component only receives the `match`
    and `history` props. Therefore, you''d need to replace the code for this component
    with the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'This won''t show any products yet as the cart is empty; the cart will be filled
    with products in the next section. However, let''s proceed by adding a `Query` component
    to the button to the cart with a placeholder counter in `SubHeader` for the `/` route.
    Therefore, a new file called `CartButton.js` can be created in the `client/src/components/Cart` directory.
    In this file, a `Query` component will return data from a query that requests
    the total number of products in the cart. Also, we can add a value to the `Button` component
    by adding the following code to this file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'This `CartButton` component replaces `Button`, which is now being displayed
    with a placeholder count for the number of products in the cart, in the `client/src/components/Header/SubHeader.js` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: With all of the components that show either a product or cart information connected
    to the GraphQL Client, you can proceed by adding mutations that add products to
    the cart. How to add mutations to the application and send document container
    mutations to the GraphQL server will be shown in the final part of this section.
  prefs: []
  type: TYPE_NORMAL
- en: Handling mutations with Apollo Client
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Mutating data makes using GraphQL more interesting because when data is mutated,
    some side effects should be executed. For example, when a user adds a product
    to their cart, the data for the cart should be updated throughout the component
    as well. This is quite easy when you're using Apollo Client since the Provider
    handles this in the same way the context API.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before writing your first mutation, the definitions of the executable queries
    for the cart should be moved to a constants file. That way, you can easily import
    them into other components to reuse and execute them as a side effect. Creating
    the new constants file and moving all the GraphQL queries and mutations to it
    requires that we make the following changes:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `client/src` directory, you should create a new file called `constants.js`
    and place the two already defined queries here, which can be found in the `Cart` and
    `CartButton` components. Also, you will need to import `graphql-tag` to use the
    GraphQL query language by adding the following code block to that newly created
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `Cart` component, you can remove the definition to `GET_CART`, and import
    that definition from `client/src/constants.js` in the `client/src/components/Cart/Cart.js` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'For the `CartButton` component in `CartButton.js`, you should apply the same
    changes, but this time for the `GET_CART_TOTAL` query, which can also be imported
    from the `constants` file and deleted from the `CartButton.js` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Any new definition of a query or mutation that relates to the components in
    the directory should be placed in this file from now on.
  prefs: []
  type: TYPE_NORMAL
- en: 'Since you want your users to be able to add products to the cart, a definition
    of a mutation can be added to this file. The mutation to add products to the cart
    looks as follows, which takes the `productId` parameter to add a product to the
    cart. The following mutation can return the fields for the cart in return, just
    like a query can:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'You can already test this mutation by trying it out on the GraphQL Playground
    that''s available at `http://localhost:4000/graphql`. Here, you''d need to add
    the mutation in the upper-left box of this page. The variable that you want to
    include in this mutation for `productId` must be placed in the bottom-left box
    of this page, called QUERY VARIABLES. This would result in the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/e5a46cd3-5b66-4afe-90ae-fd607da0aa40.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To be able to use this mutation from your React application, you will need
    to make the following changes to some files:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new exported constant in the `client/src/constants.js` file and add
    the mutation to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Currently, there''s no button to add a product to the cart yet, so you can
    create a new file in the `Cart` directory and call this `AddToCartButton.js`.
    In this file, you can add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: This new `AddToCartButton` takes `productId` as a prop and has a `Mutation` component
    from `react-apollo`, which uses the `Mutation` you created in `client/src/constants.js`.
    The output of `Mutation` is the actual function to call this mutation, which takes
    an object containing the inputs as a parameter. Clicking on the `Button` component
    will execute the mutation.
  prefs: []
  type: TYPE_NORMAL
- en: 'This button should be displayed next to the products in the list in the `Products` component,
    where each product is displayed in a `ProductItem` component. This means, you
    will need to import `AddCartButton` in `''src/components/Products/ProductItem.js''`
    and pass a `productId` prop to it by using the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Now, when you open the React application in the browser, a button will be displayed
    next to the product titles. If you click this button, the mutation will be sent
    to the GraphQL server and the product will be added to the cart. However, you
    won't see any changes to the button that displays Cart (0) in the `SubHeader` component.
  prefs: []
  type: TYPE_NORMAL
- en: 'To update `CartButton`, you will need to specify that, when the mutation to
    the cart takes place, other queries should be executed again. This can be done
    by setting the `refetchQueries` prop on the `Mutation` component in `client/src/components/Cart/AddToCartButton.js`.
    This prop takes an array of objects with information about the queries that should
    be requested. These queries are the `GET_CART_TOTAL` query, which is executed
    by `CartButton`, and the `GET_CART` query from the `Cart` component. To do this,
    make the following changes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Now, every time you send a mutation in a document to the GraphQL server from
    this component, both the `GET_CART` and `GET_CART_TOTAL` queries will be sent
    as well. If the results have changed, the `CartButton` and `Cart` components will
    be rendered with this new output.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, you've added some logic to send queries and mutations to the
    GraphQL server, by using the GraphQL client from Apollo. This client has other
    features as well, such as local state management, which you'll learn about in
    the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Managing local state
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Not only can you use Apollo Client to manage the data that is fetched from the
    GraphQL server, but you can also use it for managing the local state. With Apollo,
    it becomes easy to combine local state with data from the GraphQL server since
    you can also use queries and mutations to deal with the local state.
  prefs: []
  type: TYPE_NORMAL
- en: A good example of information you might want to put in your local state for
    this e-commerce store is the number of products that should be requested from
    the GraphQL server. In the first part of this chapter, you already created a query
    that takes a parameter called `limit`, which defines how many products will be
    returned.
  prefs: []
  type: TYPE_NORMAL
- en: 'To add local state to your application, some changes need to made to the setup
    of Apollo Client, after which you need to make the following changes as well:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `client/src/App.js` file, you need to detach the `cache` constant; that
    way, you can use the `writeData` method to add new values to `cache`. Also, you
    will need to add local `resolvers` and `typeDefs` to `client`, which will be used
    next to `resolvers` and `typeDefs` from the GraphQL server. To do this, change
    the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code block, the schema is extended with a `Query` type that
    has a field for `limit`, meaning you can query `client` for this value. Also,
    an initial value for `limit` is written to `cache`. This means the value for `limit`
    will always be `5` when the application first mounts.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s also add all of the queries related to products to the `client/src/constants.js` file. 
    This can be added to the `client/src/components/Products` directory by adding
    the following code to the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'For the query for `products` to use `limit` from the local state, a small change
    has to be made to the `GET_PRODUCTS` query:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: This `query` will now use the `limit` variable to request the number of products,
    instead of the predefined value of `10` in your GraphQL server. By adding `@client`,
    the Apollo Client will know to get this value from `cache`, meaning the local
    state.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `Products` component, these queries should be imported from the `constants.js`
    file, and the value for `limit` should be requested with a `Query` component from
    `react-apollo`. Also, the value for `limit` that is returned by `Query` should
    be sent in the `variables` prop when requesting the `GET_PRODUCTS` query. Therefore,
    make the following changes to use the updated query and pass the variables to
    it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: With the previous changes, the returned value from the `GET_LIMIT` query will
    be sent as a variable to the `GET_PRODUCTS` query, where you need to make sure
    this value is an integer by using `parseInt`. If you look at the application in
    the browser now, 5 products will be displayed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, to have an initial value for `limit`, this value can also be set dynamically.
    Therefore, you can use the `writeData` method again to update the cache. This
    should be done from a different component that can access the client. To accomplish
    this, you need to create a component in the `client/src/components/Products` directory in
    the new `Filter.js` file. In this file, you can place the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: This `Filter` component uses `ApolloConsumer` to get the value for the client
    from `ApolloProvider`, which is similar to how the React context API works. From
    any component that is nested in `ApolloProvider`, you will be able to get the
    client value by using the Consumer from `react-apollo`. The client will be used
    to write data to the cache,  and this data is retrieved from the value of the
    select drop-down menu.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `Filter` component should also be added to the `Products` component so
    that it can actually be used to change the value for `limit`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Since the `Query` component for `GET_PRODUCTS` is nested in the `Query` component
    for `GET_LIMIT`, whenever the `GET_LIMIT` query is sent, this query will also
    be sent. So, when you use the select drop-down menu to change `limit`, the `GET_PRODUCTS` query will
    be sent and the number of products that are displayed will have changed.
  prefs: []
  type: TYPE_NORMAL
- en: 'With these changes, your application uses the Apollo Client for getting data
    from the GraphQL server and for handling local state management. Also, users can
    now filter the number of products that they''ll see in your application, which
    will make your application look similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/dbb4a244-fbe1-4671-823c-1347303ead6e.png)'
  prefs: []
  type: TYPE_IMG
- en: The buttons to add a product to the cart were added in the previous section,
    while the functionality of the cart will be handled in the next section, when
    you add authentication to the project.
  prefs: []
  type: TYPE_NORMAL
- en: Using authentication with React and GraphQL
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When the users have added products to the cart, you want them to be able to
    checkout, but before that, the users should be authenticated as you want to know
    who's buying the product. Handling authentication in React will also require an
    interaction with the backend, since you need to store the user's information somewhere
    or check whether the user exists.
  prefs: []
  type: TYPE_NORMAL
- en: For authentication in frontend applications, most of the time, **JSON Web Tokens**
    (**JWTs**) are used, which are encrypted tokens that can easily be used to share
    user information with a backend. The JWT will be returned by the backend when
    the user is successfully authenticated and often, this token will have an expiration
    date. With every request that the user should be authenticated for, the token
    should be sent so that the backend server can determine whether the user is authenticated
    and allowed to take this action. Although JWTs can be used for authentication
    since they're encrypted, no private information should be added to them since
    the tokens should only be used to authenticate the user. Private information can
    only be sent from the server when a document with the correct JWT has been sent.
  prefs: []
  type: TYPE_NORMAL
- en: React Router and authentication
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The GraphQL server for this project has already been set up to handle authentication
    and will return a JWT token when the correct user information has been sent to
    it. When the user wants to check out the cart, the application will look for a
    JWT token in the local or session storage and redirect the user either to the
    checkout page or the login page. For this, private routes should be added to `react-router`,
    which are only available when the user is authenticated.
  prefs: []
  type: TYPE_NORMAL
- en: 'Adding a private route requires that we make the following changes:'
  prefs: []
  type: TYPE_NORMAL
- en: 'New routes for the checkout and the login pages must be added to the `Router`
    component in the `client/src/components/App.js` file, where the user can either
    checkout or log in. For this, you must import the `Checkout` and `Login` components
    that have already been created and a `Redirect` component from `react-router-dom`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'After importing these, routes must be added to `Switch` in `Router`, making
    them available to the user:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'In the current situation, the user can navigate to the `login` and `checkout`
    pages without being authenticated. To check whether the user is authenticated,
    the render props method for the `Route` component can be used. In this method,
    you must check whether or not a JWT is stored in the session storage for this
    user. Currently, no token is stored in the session storage since this will be
    added later on. But you can still create the function to check for it by adding
    the following function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: There are many ways to store a JWT, such as using the local storage, session
    storage, cookies, or a local state in the form of the `apollo-link-state` package.
    As long as you follow the protocol of JWT, encrypt no private information in the
    token, and add an expiration date to it, all of these places can be considered
    as a safe place to store the token.
  prefs: []
  type: TYPE_NORMAL
- en: 'After this, the render props method is used for the checkout route to check
    whether the user is authenticated or not. If not, the user will be redirected
    to the login page using the `Redirect` component. Otherwise, the user will see
    the `Checkout` component, which will receive the router props that are returned
    by the render props method. To make this happen, make the following changes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: When you try to visit the `http://localhost:3000/checkout` route in your browser,
    you'll always be redirected to the `/login` route since no JWT has been stored
    in the session storage yet. In the next part of this section, you'll add the logic
    to retrieve the JWT from the GraphQL server by sending a mutation with login information.
  prefs: []
  type: TYPE_NORMAL
- en: Receiving JWT from the GraphQL server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The GraphQL server has already been set up to handle authentication since we
    sent a document containing a mutation with our login information to it. When you
    send the correct username and password, the server will return a JWT containing
    your username and expiration date. Sending a query to the GraphQL server can be
    done by using a `Mutation` component from `react-apollo` or by using the React
    Apollo Hooks, which offer you more flexibility. Logging in can be done from the
    `Login` component, which you can find in the `client/src/components/Checkout/Login.js` file,
    where the following changes need to be made to authenticate the user:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The React Apollo Hook for the mutation will need a document that will be sent
    to the GraphQL server. This mutation can also be defined in the `client/src/constants.js` file,
    which is  where you''ve defined all of the other queries and mutations as well:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'The `Login` component in `client/src/components/Checkout/Login.js` is already
    using `useState` Hooks to control the value of the input fields for `userName`
    and `password`. The `useMutation` Hook can be imported from `react-apollo` and
    you can use this Hook to replace a `Mutation` component and still have the same
    functionalities. This Hook can also be used from anywhere within `ApolloProvider`
    and returns a login function that will send the document to the GraphQL server.
    Adding this is done by importing the Hook and passing the `LOGIN_USER` mutation
    from `client/src/constants.js` to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: React Apollo Hooks can be used from the `react-apollo` package, but if you only
    want to use the Hooks, you can install `@apollo/react-hooks` instead by executing `npm
    install @apollo/react-hooks`. GraphQL components such as `Query` or `Mutation` are
    available in both the `react-apollo` and `@apollo/react-components` packages.
    Using these packages will decrease the size of your bundle as you're only importing
    the features you need.
  prefs: []
  type: TYPE_NORMAL
- en: 'After creating the `loginUser` function, this can be added to the `onClick`
    event from `Button`, and the values for `userName` and `password` should be passed
    to this function as variables:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Clicking `Button` will send the document containing the `userName` and `password`
    values to the GraphQL server and if successful, it returns the JWT for this user.
    However, this token should also be stored in the session storage and as the `loginUser`
    function returns a promise, the `onClick` event should become an asynchronous
    function. That way, you can wait for the `loginUser` function to resolve and store
    the token afterward or send an error message if no token was returned:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, the user should be redirected to the `checkout` page if the authentication
    succeeded. SInce the `Login` component is rendered by the checkout route using
    the render props method, it received the props from `react-router`. To redirect
    the user back, you can use the `history` prop from `react-router` to push the
    user to the `checkout` page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Every user that has a token stored in their session storage is now able to visit
    the `checkout` page for as long as the token is stored there. You can delete the
    token from the session storage by going to the Application tab in the Developer
    tools of your browser; there, you'll find another tab called Session Storage.
  prefs: []
  type: TYPE_NORMAL
- en: 'Since you want your users to be able to navigate from the `cart` page to the
    `checkout` page, you should add `Button` in the `Cart` component that lets the
    user navigate using a `Link` component from `react-router-dom`. If the user isn''t
    authenticated yet, this will redirect the user to the login page; otherwise, it
    will redirect them to the checkout page. Also, the button should only be displayed
    when there are products in the cart. To add this `Button`, the following changes
    need to be made in `client/src/components/Cart/Cart.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'You''ve now added the functionality to proceed to the final checkout page of
    your application, which makes the `/cart` route look like this in your application
    after adding a product to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/04e28956-c90e-4df3-a258-8f53df1cf079.png)'
  prefs: []
  type: TYPE_IMG
- en: In the final part of this section, you'll add this token to the document that
    you send to the GraphQL server, where the token is validated to make sure the
    user is authenticated for a certain action.
  prefs: []
  type: TYPE_NORMAL
- en: Passing JWT to the GraphQL server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The user's authentication details in the form of the JWT are now stored in the
    session storage, and the route to the checkout page is now private. But for the
    user to check out, this token should also be sent to the GraphQL server, along
    with every document for the server, to validate whether the user is actually authenticated
    or whether the token has expired. Therefore, you need to extend the setup of the
    Apollo Client to also send the token when you make a request to the server and
    prefix it with `Bearer`, since this is how a JWT is recognized.
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow these steps to pass the JWT to the GraphQL server:'
  prefs: []
  type: TYPE_NORMAL
- en: 'You need to install an Apollo package to deal with adding values to the Context
    since you need the `setContext` method to do this. This method is available from
    the `apollo-link-Context` package, which you can install from `npm`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'The Apollo Client is created in the `client/src/components/App.js` file, where
    you import the `setContext` method from `apollo-link-Context`. Also, the creation
    of the link to the GraphQL server must be decoupled as this should also take the
    authentication details, that is, `token`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, you can use the `setContext` method to extend the request headers that
    are being sent to the GraphQL server so that it also include the token that can be
    retrieved from the session storage. The token that you retrieve from the session
    storage must be prefixed with `Bearer` since the GraphQL server expects the JWT
    token in that format:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'Together with the `HttpLink` method, the `authLink` constant must be used in
    the setup of Apollo Client; this will make sure the Context value from `authLink`
    is being added to the headers being sent by `httpLink`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: If you visit the application in the browser again and make sure you are logged
    in by either going to the `checkout` or `login` page, you will see that the requests
    are still sent to the GraphQL server. The difference can be seen when you open
    the Developer tools of your browser and go to the Network tab. The requests to
    the server now have different header information since a field called `authorization`
    is also sent, which has a value that looks like Bearer eyAABBB....
  prefs: []
  type: TYPE_NORMAL
- en: When the user goes to the checkout page, there should be a button to finalize
    the order. This button will call a function that completes the cart. As the user
    must be authenticated to create an order, the token must be sent with this request
    that sends the `completeCart` mutation. This mutation completes the cart and clears
    its content, after which the contents of the checkout page change.
  prefs: []
  type: TYPE_NORMAL
- en: 'Adding this feature to the `checkout` page requires making the following changes:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `completeCart` mutation has the following shape and can be found in `client/constants.js`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'It must be imported into the `client/src/components/Checkout/Checkout.js` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'The mutation can be sent to the GraphQL server by using a `useMutation` Hook,
    which can be imported from `react-apollo`. At the beginning of the `Checkout`
    component, the Hook can be added with the `COMPLETE_CART` mutation as a parameter.
    The Hook returns the function to send the mutation and the data that was returned
    from the mutation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'The `completeCart` function must be added to the `Button` component as an `onClick`
    prop so that when the button is clicked, that function will be called. Also, you
    must check whether the `COMPLETE_CART` mutation returns a value for the `complete` field,
    which indicates whether the cart was completed or not. If it was, the checkout
    is complete and a different message can be displayed to the user:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: This concludes the checkout process for the user and this chapter, where you've
    used React and GraphQL to create an e-commerce application.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you've created a full stack React application that uses GraphQL
    as its backend. Using Apollo Server and mock data, the GraphQL server was created,
    which takes queries and mutations to provide you with data. This GraphQL server
    is used by a React application that uses Apollo Client to send and receive data
    from the server and to handle local state management. Authentication is handled
    by the GraphQL server using JWT and in the frontend by React and `react-router`.
  prefs: []
  type: TYPE_NORMAL
- en: That's it! You've completed the seventh chapter of this book and have already
    created seven web applications with React. By now, you should feel comfortable
    with React and its features and be ready to learn some more. In the next chapter,
    you'll be introduced to React Native and learn how you can use your React skills
    to build a mobile application by creating a house listing application with React
    Native and Expo.
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Creating an Apollo Server from scratch: [https://www.apollographql.com/docs/apollo-server/essentials/server](https://www.apollographql.com/docs/apollo-server/essentials/server)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: GraphQL: [https://graphql.org/learn/](https://graphql.org/learn/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JWT tokens: [https://jwt.io/introduction/](https://jwt.io/introduction/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
