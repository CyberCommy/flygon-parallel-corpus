- en: Chapter 3. Authenticating Your Application
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: Setting up and configuring the Auth library
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating an authentication system
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Retrieving and updating user info after logging in
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Restricting access to certain pages
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up OAuth with the HybridAuth package
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using OpenID for logins
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Logging in using Facebook credentials
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Logging in using Twitter credentials
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Logging in using LinkedIn
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Many modern web applications include some way for users to register and log
    in. To make sure our application and our users' information is secure, we need
    to make sure that each user is properly authenticated. Laravel includes a great
    `Auth` class that makes this task very easy to accomplish. In this chapter, we'll
    begin with setting up our own authentication system, and move on to using third-party
    authentication in our Laravel app.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: Setting up and configuring the Auth library
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To use Laravel's authentication system, we need to make sure it's set up correctly.
    In this recipe, we'll see a common way to accomplish the setup.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To set up the authentication, we just need to have Laravel installed and a MySQL
    instance running.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To complete this recipe, follow these steps:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: 'Go into your `app/config/session.php` config file and make sure it''s set to
    use `native`:'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The `app/config/auth.php` config file defaults should be fine but make sure
    they are set as follows:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'In MySQL, create a database named as `authapp` and make sure the settings are
    correct in the `app/config/database.php` config file. The following are the settings
    that we''ll be using:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We''ll set up our `Users` table using migrations and the Schema builder with
    the Artisan command line, so we need to create our migrations table:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Create the migration for our `Users` table:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'In the `app/database/migrations` directory, there will be a new file that has
    the date followed by `create_users_table.php` as the filename. In that file, we
    create our table:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Run the migration in Artisan to create our table and everything should be set
    up:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: How it works...
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Authentication uses sessions to store user information, so we first need to
    make sure our Sessions are configured correctly. There are various ways to store
    sessions, including using the database or Redis, but for our purpose we'll just
    use the `native` driver, which leverages Symfony's native session driver.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: When setting up the auth configuration, we'll be using the Eloquent ORM as our
    driver, an e-mail address as our username, and the model will be User. Laravel
    ships with a default User model and it works very well out of the box, so we'll
    use it. For the sake of simplicity, we'll stick with the default configuration
    of the table name, a pluralized version of the model class name, but we could
    customize it if we wanted.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: Once we make sure our database configuration is set, we can use Artisan to create
    our migrations. In our migration, we'll create our user's table, and store the
    e-mail address, password, a name, and a boolean field to store whether the user
    is an admin or not. Once that's complete, we run the migration, and our database
    will be set up to build our authentication system.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: Creating an authentication system
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we'll be creating a simple authentication system. It can be
    used as it is or extended to include much more functionality.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will be using the code created in the *Setting up and configuring the Auth
    library* recipe as the basis for our authentication system.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To finish this recipe, follow these steps:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a route in our `routes.php` file to hold our registration form:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Create a registration form by creating a new file in `app/views` named as `registration.php`:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Make a route to process the registration page:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Make a simple page for your profile by adding a route in `routes.php`:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Create a login route in `routes.php` to hold the login form:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'In our `app/views` directory, create a file named `login.php`:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Create a route in `routes.php` to authenticate the login:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Create a route in `routes.php` that is a secured page:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: How it works...
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To begin with, we create a fairly simple registration system. In our registration
    form, we'll be asking for an e-mail address, password, password confirmation,
    a name, and then an option for whether the user is an admin. In the form fields,
    we also add `Input::old()`; thus, if the form doesn't validate correctly, we can
    repopulate the fields without needing the user to re-enter all the information.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: Our form then posts, adding in the CSRF filter, and runs through some validation.
    If the validation passes, we create a new instance of our User model and add in
    the fields from our form. For the password, we use `Hash::make()` to keep the
    password secure. Since our admin field accepts a boolean value, we see if the
    admin checkbox was checked; if so, we set the value to `1`.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: If everything is saved correctly, we can automatically log in the user by passing
    the just created user ID to `Auth::loginUsingId()`, and redirect them to the profile
    page.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: The first thing the profile route does is run `Auth::check()` to see if the
    user is actually logged in. If he/she isn't, it will display a link to the login
    page.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: The login page is a simple form asking for e-mail ID and password. When submitted,
    we put those two values in an array and pass them to `Auth::attempt()`, which
    will automatically hash our password, and look up the credentials in the database.
    If it's successful, the `Auth` class will set a session and we redirect the user
    to the profile page.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: If the user happens to try and access the *secured* routes, the system will
    direct them to the login page. Using Laravel's `Redirect::intended()`, we can
    then direct them back to the page they originally tried to access.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Setting up and configuring the Auth library* recipe
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Retrieving and updating user info after logging in
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After a user is logged in, we will need to get the information we have about
    him/her. In this recipe, we'll see how to get that information.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will be using the code created in the *Setting up and configuring the Auth
    library* and *Creating an authentication system* recipes as the basis for this
    recipe.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To complete this recipe, follow these steps:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: 'Update the profile route with this code:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Create our profile view in the `app/views` directory by creating a file named
    as `profile.php`:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Make a route to hold our form to edit the information:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Create a view for our edit form:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Make a route to process the form:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: How it works...
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To get our user's information and allow him/her to update it, we start by reworking
    on our profile route. We create a profile view and pass `Auth::user()` to it in
    the variable `$user`. Then, in the view file, we simply echo out any of the information
    we collected. We're also creating a link to a page where the user can edit his/her
    information.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: Our profile edit page first checks to make sure the user is logged in. If so,
    we want to populate the `$user` variable. Since we'll redisplay the form if there
    is a validation error, we first check if there's anything in `Input::old()`. If
    not, this is probably a new visit to the page, so we just use `Auth::user()`.
    If `Input::old()` is being used, we'll recast it as an object, since it's normally
    an array, and use that in our `$user` variable.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: Our edit view form is very similar to our registration form, except that, if
    we're logged in, the form is already populated.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: When the form is submitted, it is run through some validation. If everything
    is valid, we need to get the User from the database, using `User::find()` and
    the user ID that's stored in `Auth::user()`. We then add our form input to the
    user object. With the password field, if it was left empty, we can assume that
    the user didn't want to change it. So we'll only update the password if something
    was already entered.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we save the user information and redirect him/her back to the profile
    page.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The e-mail value in our database will probably need to be unique. For this recipe,
    we might want to do a quick check of the user's table, and make sure the e-mail
    address being updated isn't used somewhere else.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Creating an authentication system* recipe
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Restricting access to certain pages
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we'll explore how to restrict access to various pages in our
    app. This way, we can make pages viewable to only those with the correct credentials.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will be using the code created in the *Setting up and configuring the Auth
    library* and *Creating an authentication system* recipes as the basis for this
    recipe.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To complete this recipe, follow these steps:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a filter in our `filters.php` file that checks for logged-in users.
    The default Laravel `auth` filter will be fine:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Create a filter in `filter.php` for checking if a user is an admin:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Make a route that we restrict to logged-in users:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Make a route that is restricted to admins:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: How it works...
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Filters are a powerful part of Laravel and can be used to simplify many tasks.
    The default `auth` filter that comes with Laravel simply checks if a user is logged
    in or not and, if not, redirects him/her to the login page. In our `restricted`
    route, we add the `auth` filter to run before the function is executed.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: Our `auth_admin` filter checks to make sure the user is logged in and also checks
    if the user is set as `admin`. If not, he/she is redirected back to the normal
    restricted page.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: Setting up OAuth with the HybridAuth package
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There may be times when we don't want to worry about storing users' passwords.
    In that case, OAuth has become a popular alternative that allows us to authenticate
    a user based on a third-party service such as Facebook or Twitter. This recipe
    will show how to set up the `HybridAuth` package to make OAuth easy.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we need a standard Laravel installation and a way to access
    the command-line interface, so we can use the Artisan command-line utility.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To complete this recipe, follow these steps:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: 'Open our app''s `composer.json` file and add HybridAuth to the `require` section,
    so it should look like this:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'In the command-line interface, update composer as follows:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'In the `app/config` directory, create a new file named as `oauth.php`:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: How it works...
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We begin by adding the HybridAuth package to our composer files. Now, when we
    update composer, it will automatically download the package and install it for
    us. From then on, we can use the library throughout our app.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: 'Our next step is to set up a configuration file. This file begins with a URL
    to which the authentication site will send the user back. That URL should be routed
    to either a route or controller where we''ll run HybridAuth and do the actual
    authentication. Finally, we need to add in our credentials for the sites we want
    to authenticate against. A full list of sites can be found at the HybridAuth site:
    [http://hybridauth.sourceforge.net/userguide.html](http://hybridauth.sourceforge.net/userguide.html).'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: Using OpenID for logins
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If we don't want to store our users' passwords in our application, there are
    other authentication methods that use third parties, such as OAuth and OpenID.
    In this recipe, we'll use OpenID to log in our users.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we need to have a standard installation of Laravel and complete
    the *Setting up OAuth with the HybridAuth package* recipe.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-130
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To complete this recipe, follow these steps:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: 'In our `app/config` directory, create a new file named as `openid_auth.php`:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'In our `routes.php` file, create a route to hold our login form:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'In our `app/views` directory, create a new view named as `login.php`:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'In `routes.php`, create the route to run the authentication:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: How it works...
  id: totrans-140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We start by creating a config file for the HybridAuth library, setting the URL
    where the user will be redirected after authentication, and enabling OpenID.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
- en: Next, we create route and a view where the user can enter the OpenID URL they
    want to use. A popular one is that of Google, so we suggest using the URL [https://www.google.com/accounts/o8/id](https://www.google.com/accounts/o8/id)
    or even have it automatically set as a value in the form.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: After submitting the form, we should be directed to the authentication system
    of the OpenID site and then redirected back to our site. There, we can show the
    user's name, and e-mail ID, and show all the information that was sent back.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  id: totrans-144
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Much more information about what OpenID offers is available at [http://openid.net/developers/specs/](http://openid.net/developers/specs/).
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
- en: Logging in using Facebook credentials
  id: totrans-146
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If we don't want to worry about storing a user's information and credentials,
    we could use OAuth to authenticate with another service. One of the most popular
    is using Facebook for logins. With Laravel and the HybridAuth library, we can
    easily implement OAuth authentication with Facebook.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-148
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we need to have the HybridAuth package installed and set up
    as in the *Setting up OAuth with the HybridAuth package* recipe.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-150
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To complete this recipe, follow these steps:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
- en: Create a new App at [https://developers.facebook.com](https://developers.facebook.com).
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Get the App ID and App Secret keys, and in the `app/config` directory, create
    a file named as `fb_auth.php`:'
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Create a route in `routes.php` to hold our Facebook login button:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Make a route to process the login information and display it:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: How it works...
  id: totrans-159
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: After getting our Facebook API credentials, we need to create a configuration
    file with those credentials and our callback URL. We also need to pass in the
    scope, which is any extra permission we might want from our user. In this case,
    we're just going to get their e-mail ID.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
- en: Our facebook login page is a simple link to a route where we do the authentication.
    The user will then be taken to Facebook to login and/or authorize our site, and
    then redirected back to our `fbauth` route.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
- en: At this point, we're just displaying the information that was returned, but
    we'd also probably want to save the information to our own database.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  id: totrans-163
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If we're testing this on our local computer using something like MAMP or WAMP,
    Facebook allows us to use the callback URL of localhost.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
- en: Logging in using Twitter credentials
  id: totrans-165
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If we don't want to worry about storing the user's information and credentials,
    we could use OAuth to authenticate with another service. A popular service to
    use for logins is Twitter. With Laravel and the HybridAuth library, we can easily
    implement OAuth authentication with Twitter.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-167
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we need to have the HybridAuth package installed and set up
    as in the *Setting up OAuth with the HybridAuth package* recipe.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-169
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To complete this recipe, follow these steps:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
- en: Create a new app at [https://dev.twitter.com/apps](https://dev.twitter.com/apps).
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Get the Consumer Key and the Consumer Secret, and in the `app/config` directory,
    create a file named as `tw_auth.php`:'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Create a route in `routes.php` for our Twitter login button:'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Make a route to process the Twitter information:'
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: How it works...
  id: totrans-178
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: After getting our Twitter API credentials, we need to create a configuration
    file with those credentials and our callback URL.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
- en: We then make a Twitter login view, which is a simple link to a route where we
    do the authentication. The user will then be taken to Twitter to login and/or
    authorize our site, and then redirected back to our `twauth` route. Here, we get
    their display name and their Twitter icon.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
- en: At this point, we're just displaying the information that was returned, but
    we'd also probably want to save the information to our own database.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  id: totrans-182
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If we're testing this on our local computer using something like MAMP or WAMP,
    Twitter will NOT allow a callback URL of localhost, but we can use `127.0.0.1`
    in its place.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在本地计算机上使用类似MAMP或WAMP的东西进行测试，Twitter将不允许使用localhost作为回调URL，但我们可以使用`127.0.0.1`代替。
- en: Logging in using LinkedIn
  id: totrans-184
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用LinkedIn进行登录
- en: If we don't want to worry about storing user's information and credentials,
    we could use OAuth to authenticate with another service. A popular service to
    use for logins, especially for business applications, is LinkedIn. With Laravel
    and the `HybridAuth` library, we can easily implement OAuth authentication with
    LinkedIn.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们不想担心存储用户信息和凭据，我们可以使用OAuth来验证另一个服务。一个常用的用于登录的服务，特别是用于商业应用程序的服务，是LinkedIn。使用Laravel和`HybridAuth`库，我们可以轻松地实现与LinkedIn的OAuth验证。
- en: Getting ready
  id: totrans-186
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we need to have the HybridAuth package installed and set up
    as in the *Setting up OAuth with the HybridAuth package* recipe.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个步骤，我们需要安装并设置HybridAuth包，就像在*使用HybridAuth包设置OAuth*步骤中一样。
- en: How to do it...
  id: totrans-188
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'To complete this recipe, follow these steps:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成这个步骤，请按照以下步骤进行操作：
- en: Create a new app at [https://www.linkedin.com/secure/developer](https://www.linkedin.com/secure/developer).
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在[https://www.linkedin.com/secure/developer](https://www.linkedin.com/secure/developer)创建一个新的应用程序。
- en: 'Get the API Key and the Secret Key, and in the `app/config` directory, create
    a file named `li_auth.php`:'
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取API密钥和秘密密钥，在`app/config`目录中创建一个名为`li_auth.php`的文件：
- en: '[PRE37]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Create a route in `routes.php` for our LinkedIn login button:'
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`routes.php`中创建一个用于LinkedIn登录按钮的路由：
- en: '[PRE38]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Make a route to process the LinkedIn information:'
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个处理LinkedIn信息的路由：
- en: '[PRE39]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: How it works...
  id: totrans-197
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: After getting our LinkedIn API credentials, we need to create a configuration
    file with those credentials and our callback URL.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 获得我们的LinkedIn API凭据后，我们需要创建一个包含这些凭据和回调URL的配置文件。
- en: We then make a LinkedIn login view, with a simple link to a route where we do
    the LinkedIn authentication. The user will then be taken to the LinkedIn site
    to login and/or authorize our site, and then redirected back to our `liauth` route.
    Here, we get their first name, last name, e-mail ID, and their avatar.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们创建一个LinkedIn登录视图，其中包含一个简单的链接到一个路由，我们在这个路由中进行LinkedIn验证。用户将被带到LinkedIn网站进行登录和/或授权我们的网站，然后重定向回我们的`liauth`路由。在这里，我们获取他们的名字、姓氏、电子邮件ID和他们的头像。
- en: At this point, we're just displaying the information that was returned, but
    we'd also probably want to save the information to our own database.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，我们只是显示返回的信息，但我们可能也想将信息保存到我们自己的数据库中。
