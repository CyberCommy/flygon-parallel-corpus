- en: Chapter 3. Authenticating Your Application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up and configuring the Auth library
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating an authentication system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Retrieving and updating user info after logging in
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Restricting access to certain pages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up OAuth with the HybridAuth package
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using OpenID for logins
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Logging in using Facebook credentials
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Logging in using Twitter credentials
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Logging in using LinkedIn
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Many modern web applications include some way for users to register and log
    in. To make sure our application and our users' information is secure, we need
    to make sure that each user is properly authenticated. Laravel includes a great
    `Auth` class that makes this task very easy to accomplish. In this chapter, we'll
    begin with setting up our own authentication system, and move on to using third-party
    authentication in our Laravel app.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up and configuring the Auth library
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To use Laravel's authentication system, we need to make sure it's set up correctly.
    In this recipe, we'll see a common way to accomplish the setup.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To set up the authentication, we just need to have Laravel installed and a MySQL
    instance running.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To complete this recipe, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Go into your `app/config/session.php` config file and make sure it''s set to
    use `native`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The `app/config/auth.php` config file defaults should be fine but make sure
    they are set as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'In MySQL, create a database named as `authapp` and make sure the settings are
    correct in the `app/config/database.php` config file. The following are the settings
    that we''ll be using:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'We''ll set up our `Users` table using migrations and the Schema builder with
    the Artisan command line, so we need to create our migrations table:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Create the migration for our `Users` table:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `app/database/migrations` directory, there will be a new file that has
    the date followed by `create_users_table.php` as the filename. In that file, we
    create our table:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the migration in Artisan to create our table and everything should be set
    up:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Authentication uses sessions to store user information, so we first need to
    make sure our Sessions are configured correctly. There are various ways to store
    sessions, including using the database or Redis, but for our purpose we'll just
    use the `native` driver, which leverages Symfony's native session driver.
  prefs: []
  type: TYPE_NORMAL
- en: When setting up the auth configuration, we'll be using the Eloquent ORM as our
    driver, an e-mail address as our username, and the model will be User. Laravel
    ships with a default User model and it works very well out of the box, so we'll
    use it. For the sake of simplicity, we'll stick with the default configuration
    of the table name, a pluralized version of the model class name, but we could
    customize it if we wanted.
  prefs: []
  type: TYPE_NORMAL
- en: Once we make sure our database configuration is set, we can use Artisan to create
    our migrations. In our migration, we'll create our user's table, and store the
    e-mail address, password, a name, and a boolean field to store whether the user
    is an admin or not. Once that's complete, we run the migration, and our database
    will be set up to build our authentication system.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an authentication system
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we'll be creating a simple authentication system. It can be
    used as it is or extended to include much more functionality.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will be using the code created in the *Setting up and configuring the Auth
    library* recipe as the basis for our authentication system.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To finish this recipe, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a route in our `routes.php` file to hold our registration form:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a registration form by creating a new file in `app/views` named as `registration.php`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Make a route to process the registration page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Make a simple page for your profile by adding a route in `routes.php`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a login route in `routes.php` to hold the login form:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'In our `app/views` directory, create a file named `login.php`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a route in `routes.php` to authenticate the login:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a route in `routes.php` that is a secured page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To begin with, we create a fairly simple registration system. In our registration
    form, we'll be asking for an e-mail address, password, password confirmation,
    a name, and then an option for whether the user is an admin. In the form fields,
    we also add `Input::old()`; thus, if the form doesn't validate correctly, we can
    repopulate the fields without needing the user to re-enter all the information.
  prefs: []
  type: TYPE_NORMAL
- en: Our form then posts, adding in the CSRF filter, and runs through some validation.
    If the validation passes, we create a new instance of our User model and add in
    the fields from our form. For the password, we use `Hash::make()` to keep the
    password secure. Since our admin field accepts a boolean value, we see if the
    admin checkbox was checked; if so, we set the value to `1`.
  prefs: []
  type: TYPE_NORMAL
- en: If everything is saved correctly, we can automatically log in the user by passing
    the just created user ID to `Auth::loginUsingId()`, and redirect them to the profile
    page.
  prefs: []
  type: TYPE_NORMAL
- en: The first thing the profile route does is run `Auth::check()` to see if the
    user is actually logged in. If he/she isn't, it will display a link to the login
    page.
  prefs: []
  type: TYPE_NORMAL
- en: The login page is a simple form asking for e-mail ID and password. When submitted,
    we put those two values in an array and pass them to `Auth::attempt()`, which
    will automatically hash our password, and look up the credentials in the database.
    If it's successful, the `Auth` class will set a session and we redirect the user
    to the profile page.
  prefs: []
  type: TYPE_NORMAL
- en: If the user happens to try and access the *secured* routes, the system will
    direct them to the login page. Using Laravel's `Redirect::intended()`, we can
    then direct them back to the page they originally tried to access.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Setting up and configuring the Auth library* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Retrieving and updating user info after logging in
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After a user is logged in, we will need to get the information we have about
    him/her. In this recipe, we'll see how to get that information.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will be using the code created in the *Setting up and configuring the Auth
    library* and *Creating an authentication system* recipes as the basis for this
    recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To complete this recipe, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Update the profile route with this code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Create our profile view in the `app/views` directory by creating a file named
    as `profile.php`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Make a route to hold our form to edit the information:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a view for our edit form:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Make a route to process the form:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To get our user's information and allow him/her to update it, we start by reworking
    on our profile route. We create a profile view and pass `Auth::user()` to it in
    the variable `$user`. Then, in the view file, we simply echo out any of the information
    we collected. We're also creating a link to a page where the user can edit his/her
    information.
  prefs: []
  type: TYPE_NORMAL
- en: Our profile edit page first checks to make sure the user is logged in. If so,
    we want to populate the `$user` variable. Since we'll redisplay the form if there
    is a validation error, we first check if there's anything in `Input::old()`. If
    not, this is probably a new visit to the page, so we just use `Auth::user()`.
    If `Input::old()` is being used, we'll recast it as an object, since it's normally
    an array, and use that in our `$user` variable.
  prefs: []
  type: TYPE_NORMAL
- en: Our edit view form is very similar to our registration form, except that, if
    we're logged in, the form is already populated.
  prefs: []
  type: TYPE_NORMAL
- en: When the form is submitted, it is run through some validation. If everything
    is valid, we need to get the User from the database, using `User::find()` and
    the user ID that's stored in `Auth::user()`. We then add our form input to the
    user object. With the password field, if it was left empty, we can assume that
    the user didn't want to change it. So we'll only update the password if something
    was already entered.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we save the user information and redirect him/her back to the profile
    page.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The e-mail value in our database will probably need to be unique. For this recipe,
    we might want to do a quick check of the user's table, and make sure the e-mail
    address being updated isn't used somewhere else.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Creating an authentication system* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Restricting access to certain pages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we'll explore how to restrict access to various pages in our
    app. This way, we can make pages viewable to only those with the correct credentials.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will be using the code created in the *Setting up and configuring the Auth
    library* and *Creating an authentication system* recipes as the basis for this
    recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To complete this recipe, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a filter in our `filters.php` file that checks for logged-in users.
    The default Laravel `auth` filter will be fine:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a filter in `filter.php` for checking if a user is an admin:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Make a route that we restrict to logged-in users:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Make a route that is restricted to admins:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Filters are a powerful part of Laravel and can be used to simplify many tasks.
    The default `auth` filter that comes with Laravel simply checks if a user is logged
    in or not and, if not, redirects him/her to the login page. In our `restricted`
    route, we add the `auth` filter to run before the function is executed.
  prefs: []
  type: TYPE_NORMAL
- en: Our `auth_admin` filter checks to make sure the user is logged in and also checks
    if the user is set as `admin`. If not, he/she is redirected back to the normal
    restricted page.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up OAuth with the HybridAuth package
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There may be times when we don't want to worry about storing users' passwords.
    In that case, OAuth has become a popular alternative that allows us to authenticate
    a user based on a third-party service such as Facebook or Twitter. This recipe
    will show how to set up the `HybridAuth` package to make OAuth easy.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we need a standard Laravel installation and a way to access
    the command-line interface, so we can use the Artisan command-line utility.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To complete this recipe, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open our app''s `composer.json` file and add HybridAuth to the `require` section,
    so it should look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'In the command-line interface, update composer as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `app/config` directory, create a new file named as `oauth.php`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We begin by adding the HybridAuth package to our composer files. Now, when we
    update composer, it will automatically download the package and install it for
    us. From then on, we can use the library throughout our app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our next step is to set up a configuration file. This file begins with a URL
    to which the authentication site will send the user back. That URL should be routed
    to either a route or controller where we''ll run HybridAuth and do the actual
    authentication. Finally, we need to add in our credentials for the sites we want
    to authenticate against. A full list of sites can be found at the HybridAuth site:
    [http://hybridauth.sourceforge.net/userguide.html](http://hybridauth.sourceforge.net/userguide.html).'
  prefs: []
  type: TYPE_NORMAL
- en: Using OpenID for logins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If we don't want to store our users' passwords in our application, there are
    other authentication methods that use third parties, such as OAuth and OpenID.
    In this recipe, we'll use OpenID to log in our users.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we need to have a standard installation of Laravel and complete
    the *Setting up OAuth with the HybridAuth package* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To complete this recipe, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In our `app/config` directory, create a new file named as `openid_auth.php`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'In our `routes.php` file, create a route to hold our login form:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'In our `app/views` directory, create a new view named as `login.php`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'In `routes.php`, create the route to run the authentication:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We start by creating a config file for the HybridAuth library, setting the URL
    where the user will be redirected after authentication, and enabling OpenID.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we create route and a view where the user can enter the OpenID URL they
    want to use. A popular one is that of Google, so we suggest using the URL [https://www.google.com/accounts/o8/id](https://www.google.com/accounts/o8/id)
    or even have it automatically set as a value in the form.
  prefs: []
  type: TYPE_NORMAL
- en: After submitting the form, we should be directed to the authentication system
    of the OpenID site and then redirected back to our site. There, we can show the
    user's name, and e-mail ID, and show all the information that was sent back.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Much more information about what OpenID offers is available at [http://openid.net/developers/specs/](http://openid.net/developers/specs/).
  prefs: []
  type: TYPE_NORMAL
- en: Logging in using Facebook credentials
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If we don't want to worry about storing a user's information and credentials,
    we could use OAuth to authenticate with another service. One of the most popular
    is using Facebook for logins. With Laravel and the HybridAuth library, we can
    easily implement OAuth authentication with Facebook.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we need to have the HybridAuth package installed and set up
    as in the *Setting up OAuth with the HybridAuth package* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To complete this recipe, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new App at [https://developers.facebook.com](https://developers.facebook.com).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Get the App ID and App Secret keys, and in the `app/config` directory, create
    a file named as `fb_auth.php`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a route in `routes.php` to hold our Facebook login button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Make a route to process the login information and display it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: After getting our Facebook API credentials, we need to create a configuration
    file with those credentials and our callback URL. We also need to pass in the
    scope, which is any extra permission we might want from our user. In this case,
    we're just going to get their e-mail ID.
  prefs: []
  type: TYPE_NORMAL
- en: Our facebook login page is a simple link to a route where we do the authentication.
    The user will then be taken to Facebook to login and/or authorize our site, and
    then redirected back to our `fbauth` route.
  prefs: []
  type: TYPE_NORMAL
- en: At this point, we're just displaying the information that was returned, but
    we'd also probably want to save the information to our own database.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If we're testing this on our local computer using something like MAMP or WAMP,
    Facebook allows us to use the callback URL of localhost.
  prefs: []
  type: TYPE_NORMAL
- en: Logging in using Twitter credentials
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If we don't want to worry about storing the user's information and credentials,
    we could use OAuth to authenticate with another service. A popular service to
    use for logins is Twitter. With Laravel and the HybridAuth library, we can easily
    implement OAuth authentication with Twitter.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we need to have the HybridAuth package installed and set up
    as in the *Setting up OAuth with the HybridAuth package* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To complete this recipe, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new app at [https://dev.twitter.com/apps](https://dev.twitter.com/apps).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Get the Consumer Key and the Consumer Secret, and in the `app/config` directory,
    create a file named as `tw_auth.php`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a route in `routes.php` for our Twitter login button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Make a route to process the Twitter information:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: After getting our Twitter API credentials, we need to create a configuration
    file with those credentials and our callback URL.
  prefs: []
  type: TYPE_NORMAL
- en: We then make a Twitter login view, which is a simple link to a route where we
    do the authentication. The user will then be taken to Twitter to login and/or
    authorize our site, and then redirected back to our `twauth` route. Here, we get
    their display name and their Twitter icon.
  prefs: []
  type: TYPE_NORMAL
- en: At this point, we're just displaying the information that was returned, but
    we'd also probably want to save the information to our own database.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If we're testing this on our local computer using something like MAMP or WAMP,
    Twitter will NOT allow a callback URL of localhost, but we can use `127.0.0.1`
    in its place.
  prefs: []
  type: TYPE_NORMAL
- en: Logging in using LinkedIn
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If we don't want to worry about storing user's information and credentials,
    we could use OAuth to authenticate with another service. A popular service to
    use for logins, especially for business applications, is LinkedIn. With Laravel
    and the `HybridAuth` library, we can easily implement OAuth authentication with
    LinkedIn.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we need to have the HybridAuth package installed and set up
    as in the *Setting up OAuth with the HybridAuth package* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To complete this recipe, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new app at [https://www.linkedin.com/secure/developer](https://www.linkedin.com/secure/developer).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Get the API Key and the Secret Key, and in the `app/config` directory, create
    a file named `li_auth.php`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a route in `routes.php` for our LinkedIn login button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Make a route to process the LinkedIn information:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: After getting our LinkedIn API credentials, we need to create a configuration
    file with those credentials and our callback URL.
  prefs: []
  type: TYPE_NORMAL
- en: We then make a LinkedIn login view, with a simple link to a route where we do
    the LinkedIn authentication. The user will then be taken to the LinkedIn site
    to login and/or authorize our site, and then redirected back to our `liauth` route.
    Here, we get their first name, last name, e-mail ID, and their avatar.
  prefs: []
  type: TYPE_NORMAL
- en: At this point, we're just displaying the information that was returned, but
    we'd also probably want to save the information to our own database.
  prefs: []
  type: TYPE_NORMAL
