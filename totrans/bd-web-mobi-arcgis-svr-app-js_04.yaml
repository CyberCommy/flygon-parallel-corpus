- en: Chapter 4. The Feature Layer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The ArcGIS API for JavaScript offers a feature layer for working with client-side
    graphic features. This `FeatureLayer` object inherits from the `GraphicsLayer`
    object, but also offers additional capabilities, such as the ability to perform
    queries and selections as well as support definition expressions. It can also
    be used for web editing. You should already be familiar with the graphics layer
    from an earlier chapter.
  prefs: []
  type: TYPE_NORMAL
- en: A feature layer differs from tiled and dynamic map service layers in that it
    transports geometry information for features from ArcGIS Server to the web browser,
    where it is then drawn on the map. It can also be used to represent data from
    a nonspatial table, in addition to a feature class that contains geometry.
  prefs: []
  type: TYPE_NORMAL
- en: Streaming data from ArcGIS Server to the browser potentially cuts down on the
    round trips to the server and can improve the performance of your application.
    A client can request the features it needs and perform selections and queries
    on those features, without having to request any more information from the server.
    The `FeatureLayer` object is especially appropriate for layers that respond to
    user interactions such as mouse clicks or hovers. The tradeoff to this is that
    if you're working with a feature layer that contains a lot of features, it can
    take a long time to initially transport the features to the client. The feature
    layer supports several display modes that can help ease this burden of working
    with a large number of features. We'll examine each of these display modes in
    this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: A feature layer honors any definition expressions, scale dependencies, and other
    properties configured on the layer in a map service. Using a feature layer, you
    can access related tables, perform queries, display time slices, work with feature
    attachments, and do other useful things.
  prefs: []
  type: TYPE_NORMAL
- en: '![The Feature Layer](graphics/7965_04_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a FeatureLayer object
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defining display modes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting a definition expression
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Feature selection
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rendering the feature layer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Time to practice with FeatureLayer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a FeatureLayer object
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A feature layer must reference a layer from either a map service or a feature
    service. Use a map service if you just want to retrieve geometries and attributes
    from the server and symbolize them yourself. Use a feature service if you want
    to benefit from symbols in the service's source map document. Also, use a feature
    service if you plan to edit with the feature layer. Feature layers honor any feature-editing
    templates configured in the source map document.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following code example, you will get details on how to create a `FeatureLayer`
    object using its constructor. With tiled and dynamic layers, you simply provide
    a pointer to the rest endpoint but with feature layer, you need to point to a
    specific layer in the service. In the following code example, we will create a
    `FeatureLayer` object from the first layer in the service, which is indicated
    by the number `0`. The constructor for `FeatureLayer` also accepts options such
    as the display mode, output fields, and info template. Here, the display mode
    is set to `SNAPSHOT`, which would indicate that we are probably dealing with a
    fairly small dataset. We''ll cover the various types of display modes that can
    be defined for a feature layer as well as when they should be used, in the next
    section:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Optional constructor parameters
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In addition to accepting a required layer from the map or feature service for
    the `FeatureLayer` object as the first parameter, you can also pass a JSON object
    that defines various options to the constructor. A wide variety of options can
    be passed into the constructor. I'll discuss the most commonly used options.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `outFields` property can be used to restrict the fields that are returned
    with the `FeatureLayer` object. For performance reasons, it''s best to only include
    the fields that you need for the application rather than accepting the default
    of returning all fields. Only return the fields that you absolutely need for your
    application. Doing this will ensure that your application performs better. In
    the following highlighted code, we''ve defined the `outFields` property to return
    only the `Date` and `Magnitude` fields:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The `refreshInterval` property defines how often (in minutes) to refresh the
    layer. This property can be used when you have a `FeatureLayer` object containing
    data that changes often, including new records, or perhaps records that have been
    updated or deleted. The following highlighted code sets a refresh interval of
    5 minutes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'To define the attributes and styling that should be displayed in an info window
    when a feature is clicked on, you can set the `infoTemplate` property as explained
    in the following code example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'You may want to consider setting the `displayOnPan` property to `false` if
    you know that Internet Explorer will be the primary browser for your application.
    By default, this property is set to `true` but setting it to `false` will turn
    graphics off during pan operations, thus improving the performance of the application
    on Internet Explorer. The following code block explains this process in detail:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The display mode, defined with the `mode` parameter, is probably the most important
    optional parameter. So, we'll cover this in more detail in the next few sections.
  prefs: []
  type: TYPE_NORMAL
- en: Defining display modes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When creating a feature layer, you need to specify a mode for retrieving features.
    Because the mode determines when and how features are brought from the server
    to the client, your choice can affect the speed and appearance of your application.
    You have mode choices as shown in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Defining display modes](graphics/7965_04_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Snapshot mode
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The snapshot mode retrieves all the features from the layer and streams them
    to the client browser, where they are added to the map. So, you need to carefully
    consider the size of your layer before using this mode. Generally, you will want
    to use this mode only with small datasets. Large datasets in snapshot mode can
    significantly degrade the performance of your application. The benefit of snapshot
    mode is that since all features from the layer are returned to the client, there
    is no need to return to the server for additional data. This raises the potential
    for a significant boost in your application's performance.
  prefs: []
  type: TYPE_NORMAL
- en: 'ArcGIS imposes a limit of 1000 features that may be returned at any one time,
    though this number is configurable through ArcGIS Server administration. In practical
    terms, you will want to use this mode only when you''re working with small datasets:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The on-demand mode
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The on-demand mode retrieves features only as and when needed. What this amounts
    to is that all features within the current view extent are returned. Therefore,
    each time a zoom or pan operation takes place, features are streamed to the client
    from the server. This tends to work well with large datasets that won''t operate
    efficiently in snapshot mode. It does require a round trip to the server to fetch
    the features each time the map extent changes but for large datasets, this is
    preferable. The following code example shows you how to set a `FeatureLayer` object
    to the `ONDEMAND` mode:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The selection-only mode
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The selection-only mode does not request features initially. Instead, features
    are returned only when a selection is made on the client. Selected features are
    streamed to the client from the server. These selected features are then held
    on the client. The following code example shows you how to set a `FeatureLayer`
    object to `SELECTION` mode:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Setting a definition expression
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Definition expressions are used to limit the features that are streamed to
    the client to only those features that match the attribute constraints. `FeatureLayer`
    contains a `setDefinitionExpression()` method that is used to create the definition
    expression. All features that meet the specified criteria will be returned to
    be displayed on the map. Expressions are built using traditional SQL expressions
    as seen in the following code example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: You can retrieve the currently set definition expression by using the `FeatureLayer.getDefinitionExpression()`
    method, which returns a string containing the expression.
  prefs: []
  type: TYPE_NORMAL
- en: Feature selection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The feature layer also supports feature selection, which is simply a subset
    of features in a layer that is used for viewing, editing, analysis, or input to
    other operations. Features are added to or removed from a selection set using
    either spatial or attribute criteria and can easily be drawn with a different
    symbol than those used in the normal display of a layer. The `selectFeatures(query)`
    method on `FeatureLayer` is used to create a selection set and takes a `Query`
    object as input. This has been explained in the following code example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: We haven't discussed the `Query` object yet but as you can imagine, it is used
    to define the input parameters for an attribute or a spatial query. In this particular
    code example, a spatial query has been defined.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows a feature that has been selected. A selection
    symbol has been applied to the selected feature:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Feature selection](graphics/7965_04_5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Any definition expression set on a layer either through the application or
    on the layer inside the map document file will be honored. Setting a symbol that
    is to be used for the selected features is quite easy and simply involves creating
    a symbol and then using the `setSelectionSymbol()` method on `FeatureLayer`. Selected
    features will automatically be assigned this symbol. You can opt to define a new
    selection set, add features to an existing selection set, or remove features from
    a selection set through various constants, including `SELECTION_NEW`, `SELECTION_ADD`,
    and `SELECTION_SUBTRACT`. A new selection set is defined in the following code
    example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: In addition, you can define the callback and errback functions to process the
    returned features or handle any errors.
  prefs: []
  type: TYPE_NORMAL
- en: Rendering a feature layer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A renderer can be used to define a set of symbols for a feature layer or a graphics
    layer. These symbols can have different colors and/or sizes that are based on
    an attribute. The five types of renderer in the ArcGIS Server API for JavaScript
    include `SimpleRenderer`, `ClassBreaksRenderer`, `UniqueValueRenderer`, `DotDensityRenderer`,
    and `TemporalRenderer`. We'll examine each of these renderers in this section.
  prefs: []
  type: TYPE_NORMAL
- en: 'The rendering process will be the same, regardless of the type of renderer
    you use. You first need to create an instance of the renderer, define the symbology
    for the renderer, and finally apply the renderer to the feature layer. This rendering
    process has been illustrated in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Rendering a feature layer](graphics/7965_04_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The following code example shows the basic programmatic structure to create
    and apply a renderer to a `FeatureLayer` object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: The simplest type of renderer is `SimpleRenderer`, which simply applies the
    same symbol for all graphics.
  prefs: []
  type: TYPE_NORMAL
- en: '`UniqueValueRenderer` can be used to symbolize graphics, based on a matching
    attribute that is typically a field containing string data.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Rendering a feature layer](graphics/7965_04_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'For example, if you have a state feature class, you might want to symbolize
    each feature based on a region name. Each region would have a different symbol.
    The following code example shows how you can programmatically create a `UniqueValueRenderer`
    and add values and symbols to the structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'A `ClassBreaksRenderer` works with data that is stored as a numeric attribute.
    Each graphic will be symbolized according to the value of that particular attribute,
    in accordance with breaks in the data. In the following screenshot, you see an
    example of a `ClassBreaksRenderer` that has been applied to county-level data
    for Kansas:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Rendering a feature layer](graphics/7965_04_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The breaks define the values at which the symbol will change. For example,
    with a Parcel feature class, you might want to symbolize parcels based on values
    found in the `PROPERTYVALUE` field. You''d first want to create a new instance
    of `ClassBreaksRenderer` and then define the breaks for the data. The `Infinity`
    and `–Infinity` values can be used as the lower and upper boundaries for your
    data if needed, as seen in the following code example, where we use the `Infinity`
    keyword to signify a class break for any values greater than 250,000:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: A `TemporalRenderer` provides time-based rendering of features. This type of
    renderer is often used to display historical information or near real-time data.
    It allows you to define how observations and tracks are rendered.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code example explains how to create a `TemporalRenderer` using
    a `ClassBreaksRenderer` and applying it to a `featureLayer` object. The `ClassBreaksRenderer`
    is used to define symbols by magnitude; the larger the magnitude, the larger the
    symbol:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: An `ager` symbol has been defined here, which determines how the feature's symbol
    changes as time progresses.
  prefs: []
  type: TYPE_NORMAL
- en: 'The final type of renderer that we''ll discuss is the `DotDensityRenderer`.
    The following screenshot depicts a map that has been created using a `DotDensityRenderer`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Rendering a feature layer](graphics/7965_04_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This type of renderer enables you to create dot density visualizations of data
    that show spatial density of a discrete spatial phenomenon such as population
    density.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code example explains the creation of a `DotDensityRenderer`
    based on the `pop` field and defines a `dotValue` of 1000 and `dotSize` equal
    to 2\. This will create one dot per two pixels in size for a population of 1000:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Time to practice with FeatureLayer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this exercise, you will use the `FeatureLayer` object to set a definition
    expression on a layer, draw the features that match the definition expression
    as graphics, and respond to a hover event over the features.
  prefs: []
  type: TYPE_NORMAL
- en: 'Perform the following steps to complete the exercise:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the JavaScript Sandbox at [http://developers.arcgis.com/en/javascript/sandbox/sandbox.html](http://developers.arcgis.com/en/javascript/sandbox/sandbox.html).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Remove the JavaScript content from the `<script>` tag that I have highlighted
    in the following code block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Create the variables that you''ll use in the application inside the `<script>`
    tag:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Create the `require()` function that defines the resources you''ll use in this
    application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: In your web browser, navigate to [http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Demographics/ESRI_Census_USA/MapServer/5](http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Demographics/ESRI_Census_USA/MapServer/5).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We will be using the `states` layer for this exercise. What we want to do is
    apply a definition expression to the `states` layer that will display only those
    states that have a median age greater than `36`. These states will be displayed
    as graphics on the map, and an info window will be displayed containing the median
    age, median age for males, and median age for females for that state when the
    user hovers the mouse over the states that meet the definition expression. In
    addition, the state will be outlined in red. The fields we will use from the states
    layer include `STATE_NAME`, `MED_AGE`, `MED_AGE_M`, and `MED_AGE_F`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the `Map` object as seen in the following code example:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Add a `map.load` event that triggers the creation of a `map.graphics.mouse-out`
    event, which clears any existing graphics and info windows. The following code
    example explains this in detail:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new `FeatureLayer` object that points to the `states` layer that you
    had examined earlier. You will also specify that the `SNAPSHOT` mode be used to
    return the features, define the output fields, and set the definition expression.
    Add the following code to your application for this purpose:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Here, we have used the `new` keyword to define a new instance of `FeatureLayer`
    that points to the `states` layer at the `rest` endpoint noted in the code. When
    defining a new instance of `FeatureLayer`, we have included a couple of properties
    including `mode` and `outFields`. The mode property can be set to `SNAPSHOT`,
    `ONDEMAND`, or `SELECTION`. Since the `states` layer contains a relatively small
    number of features, we can use the `SNAPSHOT` mode in this case. This mode retrieves
    all the features from the layer when it is added to the map, and therefore does
    not require any additional trips to the server to retrieve additional features
    from the layer. We are also specifying the `outFields` property, which is an array
    of fields that will be returned. We will be displaying these fields in an info
    window when the user hovers over the state. Finally, we set our definition expression
    on the layer to display only those features (states) where the median age is greater
    than `36`.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this step, you will create a symbol and apply a renderer to the features
    (states) that are returned from the definition expression. You will also add the
    `FeatureLayer` to the map. Add the following lines of code just below the code
    that you added in the previous step:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Using the output fields that you defined earlier, create an `InfoTemplate`
    object. Add the following lines of code to your application just below the lines
    that you added in the previous step. Note the inclusion of the output fields that
    are embedded inside brackets and preceded by a dollar sign:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, add the following lines of code to create a graphic that will be displayed
    when the user hovers the mouse over a state:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'The final step is to display the highlight symbol and info template that we
    created in the previous steps. This happens each time the user hovers the mouse
    over a state. Add the following code block below the last lines of code that you
    entered previously. Here, we are using `on()` to wire an event (mouse over) to
    a function, which will respond each time the event occurs. The `mouse-over` event
    handler in this case will clear any existing graphics from the `GraphicsLayer`
    object, create the info template that you created in a previous step, create a
    highlight symbol and add it to the `GraphicsLayer`, and then show the `InfoWindow`
    object. This has been explained in the following code block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: You may want to review the solution file (`featurelayer.html`) in your `ArcGISJavaScriptAPI`
    folder to verify that your code has been written correctly.
  prefs: []
  type: TYPE_NORMAL
- en: 'Execute the code by clicking on the **Run** button and you should see the following
    output if everything has been coded correctly. You should see a map similar to
    the following screenshot. Mouse over one of the highlighted states to see an info
    window as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Time to practice with FeatureLayer](graphics/7965_04_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The JavaScript API for ArcGIS Server offers a `FeatureLayer` object to work
    with client-side graphic features. This inherits from the graphics layer, but
    also offers additional capabilities, such as the ability to perform queries and
    selections and support definition expressions. A feature layer can also be used
    for web editing. It differs from tiled and dynamic map service layers because
    feature layers bring geometry information across to the client computer, to be
    drawn by the web browser. This potentially cuts down on the round trips to the
    server and can improve the performance of your application on the server side.
    A client can request the features it needs, and perform selections and queries
    on those features without having to request more information from the server.
    The `FeatureLayer` object is especially appropriate for layers that respond to
    user interactions such as mouse clicks or hovers.
  prefs: []
  type: TYPE_NORMAL
