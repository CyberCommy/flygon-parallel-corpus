- en: Chapter 3. Building an Image Sharing Website
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With this chapter, we are going to create a photo sharing website. First, we
    are going to create an images table. Then we'll cover methods to resize and share
    images.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics are covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a database and migrating the images table
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a photo model
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting custom configuration values
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing a third-party library
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a secure form for file upload
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Validating and processing the form
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Showing the image with a user interface
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Listing images
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deleting the image from the database and server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a database and migrating the images table
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'After successfully installing Laravel 4 and defining database credentials from
    `app/config/database.php`, create a database called `images`. For this, you can
    either create a new database from your hosting provider''s panel, or if you are
    the server administrator, you can simply run the following SQL command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'After successfully creating the database for the application, we need to create
    a `photos` table and install it to the database. To do this, open up your terminal,
    navigate to your project folder and run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This command will generate a new MySQL database migration for us to create a
    table named photos.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we need to define what sections should be in our database table. For our
    example, I thought `id column`, `image titles`, `image file names`, and `timestamps`
    should be sufficient. So for this, open the migration file just created with the
    preceding command and change its contents as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'After saving the file, run the following command to execute migrations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: If no error has occurred, you are ready for the next step of the project.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a photo model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you know, for anything related to database operations on Laravel, using models
    is the best practice. We will take advantage of the **Eloquent ORM**.
  prefs: []
  type: TYPE_NORMAL
- en: 'Save the following code as `images.php` in the `app/models/` directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: We have set the table name with the `protected $table` variable. The content
    of which columns of the table can be updated/inserted will be decided with the
    `protected $fillable` variable. Finally, whether the model can add/update timestamps
    or not will be decided by the value of the `public $timestamps` variable. Just
    by setting this model (even without setting anything), we can easily use all the
    advantages of Eloquent ORM.
  prefs: []
  type: TYPE_NORMAL
- en: Our model is ready, now we can proceed to the next step and start to create
    our controller along with the upload forms. But before this, we are missing one
    simple thing. Where should the images be uploaded? What will be the maximum width
    and height of the thumbnails? To set these configuration values (think of it like
    constants of raw PHP), we should create a new configuration file.
  prefs: []
  type: TYPE_NORMAL
- en: Setting custom configuration values
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With Laravel, setting configuration values is quite easy. All `config` values
    are within an array and will be defined as a `key=>value` pair.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s make a new configuration file. Save this file as `image.php` in
    `app/config`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'You can set any other setting as you like. That''s limited to your imagination.
    You can call the settings with Laravel''s built-in `Config` Library''s `get()`
    method. Sample usage is as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'There is a dot (`.`) between the parameter, which splits the string into two.
    The first part is the filename of the `Config` without the extension, the second
    part is the key name of the configuration value. In our example, if we want to
    identify which folder is the uploaded folder name, we should write it as shown
    in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code will return whatever the value is. In our example, it will
    return `public`/`uploads`.
  prefs: []
  type: TYPE_NORMAL
- en: 'One more thing: We defined some folder names for our app, but we didn''t create
    them. For some server configurations, the folders may be autocreated at the first
    attempt to upload the file, but if you don''t create them, most probably it will
    cause errors on your server configuration. Create the following folders in the
    `public` folder and make them writable:'
  prefs: []
  type: TYPE_NORMAL
- en: '`uploads/`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`uploads/thumbs`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now we should make an upload form for our image site.
  prefs: []
  type: TYPE_NORMAL
- en: Installing a third-party library
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We should make an upload form and then a controller for our image site. But
    before doing that, we will install a third-party library for image processing
    as we will be benefiting from its methods. Laravel 4 uses **Composer** , so it''s
    quite easy to install packages, update packages, and even update Laravel. For
    our project, we will be using a library called `Intervention` . The following
    steps must be followed to install the library:'
  prefs: []
  type: TYPE_NORMAL
- en: First, make sure you have the latest `composer.phar` file by running `php composer.phar
    self-update` in your terminal.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Then open `composer.json` and add a new value to the `require` section. The
    value for our library is `intervention/image: "dev-master"`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Currently, our `composer.json` file''s `require` section looks as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: You can find more packages for Composer at [www.packagist.org](http://www.packagist.org).
  prefs: []
  type: TYPE_NORMAL
- en: 'After setting the value, open your terminal, navigate to the project''s `root`
    folder, and type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: This command will check `composer.json` and update all the dependencies (including
    Laravel itself) and if new requirements are added, it will download and install
    them.
  prefs: []
  type: TYPE_NORMAL
- en: 'After successfully downloading the library, we will now activate it. For this,
    we refer to the website of the `Intervention` class. Now open your `app/config/app.php`,
    and add the following value to the `providers` key:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we need to set an alias so that we can call the class easily. To do this,
    add the following value to the aliases key of the same file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The class has a notation that is quite easy to understand. To resize an image,
    running the following code will suffice:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For more information about the `Intervention` class, go to the following web
    address:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://intervention.olivervogel.net](http://intervention.olivervogel.net)'
  prefs: []
  type: TYPE_NORMAL
- en: Now, everything for the views and the form processing is ready; we can go on
    to the next step of our project.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a secure form for file upload
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now we should make an upload form for our image site. We must make a view file,
    which will be loaded over a controller.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, open up `app/routes.php`, remove the line starting with `Route::get()`
    that comes with Laravel, and add the following lines:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: The key `'as'` defines the name of the route (like a shortcut). So if you make
    links to the routes, even if the URL changes for the route, your links to the
    application won't be broken. The `before` key defines what filters will be used
    before the action starts. You can define your own filters, or use the built-in
    ones. We set `csrf`, so the **CSRF** (**Cross-site Request Forgery**) checking
    will be done before the action starts. This way, you can prevent attackers from
    injecting unauthorized requests into your application. You can use multiple filters
    with the separator; for example, `filter1|filter2`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can also define the CSRF protection from controllers directly.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s create our first method for the controller. Add a new file containing
    the following code and name it `ImageController.php` in `app/controllers/`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Our controller is RESTful; that's why our method index is named `getIndex()`.
    In this method, we are simply loading a view.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s create a master page for the view using the following code. Save
    this file as `frontend_master.blade.php` in `app/views/`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: To add a `CSS` file (which we will create in the next steps), we use the `style()`
    method of the `HTML` class. And our masterpage yields a section named `content`,
    which will be filled with the `view files` sections.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s create our `view file` section by using the following code. Save
    this file as `index.blade.php` in the `app/views/tpl/`directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: In the first line of the preceding code, we told the Blade Engine that we will
    be using `frontend_master.blade.php` as the layout. This is done using the `@extends()`
    method in Laravel 4.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you are coming from Laravel 3, `@layout` is renamed as `@extends`.
  prefs: []
  type: TYPE_NORMAL
- en: Benefiting from the `Form` class of Laravel, we generated an upload form with
    the `title` field and `upload` field. Unlike Laravel 3, to make a new upload form,
    we are not using `Form::open_for_files()` anymore. It's merged with the `open()`
    method, which accepts either a string or an array if you want to pass more than
    one parameter. We will be passing the action URL as well as telling it that it's
    an upload form, so we passed two parameters. The `url` key is to define where
    the form will be submitted. The `files` parameter is Boolean, and if it's set
    to `true`, it'll make the form an upload form, so we can work with files.
  prefs: []
  type: TYPE_NORMAL
- en: To secure the form and to prevent unwanted form submission attempts, we will
    be needing a CSRF key `hidden` in our form. Thanks to Laravel's `Form` class,
    it's generated in the form automatically, right after the form opening tag. You
    can check it by looking at the source code of the generated form.
  prefs: []
  type: TYPE_NORMAL
- en: 'The hidden autogenerated CSRF form element looks as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let''s tidy up the form a bit. This is not directly related to our project,
    but just for the look. Save the `styles.css` file in `public/css/` (the path we
    defined on the master page):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: We've styled the body by giving it 60 percent width, making it center-aligned,
    and giving it a grayish background. We also formatted `h2` and `h3` messages with
    `success` and `error` classes, and `forms`.
  prefs: []
  type: TYPE_NORMAL
- en: 'After the styling, the form will look as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a secure form for file upload](graphics/2111OS_03_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now that our form is ready, we are ready to progress to the next step of the
    project.
  prefs: []
  type: TYPE_NORMAL
- en: Validating and processing the form
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we are going to validate the submitted form and make sure
    that the required fields are present and the submitted file is an image. Then
    we will upload the image to our server, process the image, create the thumbnail,
    and save the image information to the database as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to define the form validation rules. We prefer adding such values
    to the related model, so the rules become reusable, and this prevents the code
    from becoming bloated. To do this, add the following code in the `photo.php` file
    in the `app/models/` directory (the model that we generated earlier in this chapter)
    inside the class definition before the last curly bracket(`}`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: We set the variable as `public`, so it can be used outside the model file, and
    we set it to static, so we can directly access the variable.
  prefs: []
  type: TYPE_NORMAL
- en: We want both `title` and `image` to be mandatory, and `title` should have at
    least three characters. Also, we want to check MIME types of the `image` column
    and make sure that it's an image.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Laravel's MIME-type checking requires the `Fileinfo` extension to be installed.
    So make sure it's enabled in your PHP configuration.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we need the controller''s `post` method to process the form. Add this method
    in the `ImageController.php` file in `app/controllers/` before the last curly
    bracket(`}`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Let's dig the code one by one.
  prefs: []
  type: TYPE_NORMAL
- en: First, we made a form validation and called our validation rules from the model
    that we've generated via `Photo::$upload_rules`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then we've salted (added additional random characters for security) the filename
    and made the filename URL-friendly. First, we get the uploaded filename with the
    getClientOriginalName() method, then get the extension with the getClientOriginalExtension()
    method. We salted the filename with an eight character-long random string, which
    we gained by the random() method of the STR class. Lastly, we made the filename
    URL-friendly with Laravel's built-in slug() method of the STR class.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After all the variables are ready, we first uploaded the file to the server
    with the move() method, which takes two parameters. The first parameter is the
    path to which the file is going to be transferred, the second parameter is the
    filename of the uploaded file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After uploading, we created a static thumbnail for the uploaded image. For this,
    we benefited from Intervention, an image processing class we've implemented earlier.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Lastly, if everything goes okay, we add the title and image filenames to the
    database and get the ID with the insertGetId() method of Fluent Query Builder,
    which inserts the row first and returns insert_id of the column. We could also
    create the row with Eloquent ORM by setting the create() method to a variable
    and get the id_column name such as $create->id.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After everything is okay and we get `insert_id`, we redirect the user to a new
    page that will show thumbnails, full-image links, and a forum thumbnail **BBCode**,
    which we will generate in the next sections.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Showing the image with a user interface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, we need to make a new view and method from the controller to show the
    information of the image uploaded. This can be done as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to define a `GET` route for the controller. For this, open your
    file `routes.php` in the `app` folder and add the following codes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: We defined an `id` variable on the route, and with the `where()` method, using
    regular expression, we filtered it first hand. So we don't need to worry about
    filtering the ID field, whether it's a natural number or not.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s create our controller method. Add the following code inside `ImageController.php`
    in `app/controllers/` before the last curly bracket (`}`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: First, we looked for the image with the `find()` method of Eloquent ORM. If
    it returns the value as false, that means there is a row found. So we can simply
    check whether there is a result or not with a simple `if` clause. If there is
    a result, we will load our view with the found image info as a variable named
    `$image`, using the `with()` method. If no values are found, we return to the
    index page with an error message.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s create the template file containing the following code. Save this
    file as `permalink.blade.php` in `app/views/tpl/`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: You should be familiar with most methods used in this template by now. There
    is a new method called `entities()` of the `HTML` class, which actually is `htmlentities()`
    of raw PHP, but with some pre-checks and as Laravel's way.
  prefs: []
  type: TYPE_NORMAL
- en: Also, because we've returned the `$image` variable to the view (which is the
    database row object that we've gained using Eloquent), we can use it directly
    as `$image->columnName` in the view.
  prefs: []
  type: TYPE_NORMAL
- en: 'This will produce a view as shown in the following image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Showing the image with a user interface](graphics/2111OS_03_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We have added a permalink feature for our project, but what if we want to show
    all the images? For that, we need an `'all pages'` section in our system.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Listing images
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we are going to create an `''all images''` section in our
    system, which will have a page navigation (pagination) system. There are a few
    steps to be followed as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to define its URL from our `route.php` file. For this, open
    `app/routes.php` and add the following lines:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we need a method named `getAll()` (there is a `get` method at the start
    because it will be a RESTful controller) to get values and load the view. To do
    this, open your `app/controllers/ImageController.php` and add these codes before
    the last curly bracket (}):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Here, we first got all the images from the database using the `paginate()` method,
    which will allow us to get the pagination links easily. After that, we loaded
    the view for the user with the images data with pagination.
  prefs: []
  type: TYPE_NORMAL
- en: 'To view this properly, we need a view file. Save the following code in a file
    named `all_image.blade.php` in the `app/views/tpl/` directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: We first extend the `frontend_master.blade.php` file with our content section.
    As for the content section, we first check whether any rows are returned. If so,
    then we loop them all in list item tags (`<li>`) with their permalinks. The `links()`
    method that came with the `paginate` class will create the pagination for us.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can switch the pagination template from `app/config/view.php`.
  prefs: []
  type: TYPE_NORMAL
- en: If no rows have returned, that means there are no images (yet), so we show a
    warning message with a link to the new upload page (which is the index page in
    our case).
  prefs: []
  type: TYPE_NORMAL
- en: What if a person uploads an image that is not allowed or not safe for work?
    You would not like to have them on your website, right? So there should be an
    image deleting feature on your website.
  prefs: []
  type: TYPE_NORMAL
- en: Deleting the image from the database and server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We would like to have a delete feature in our script, using which we will delete
    the image both from the database and from its uploaded folder. This process is
    quite easy with Laravel.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to create a new route for the action. To do this, open `app/routes.php`
    and add the following lines:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we need to define the controller method `getDelete($id)` inside `ImageController`.
    To do this, open `app/controllers/ImageController.php` and add the following code
    above the last curly bracket (`}`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s understand the code:'
  prefs: []
  type: TYPE_NORMAL
- en: First, we look at our database, and if we have an image with a given ID already
    with the `find()` method of Eloquent ORM, we will store it with a variable called
    `$image`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the value of the `$image` is not false, there is an image matching the image
    in our database. Then, we delete the file with the `delete()` method of the File
    class. Alternatively, you can also use the unlink() method of raw PHP.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After the files are deleted from the file server, we delete the image's information
    row from the database. To do this, we are using the `delete()` method of Eloquent
    ORM.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If everything goes smoothly, we should redirect back to the main page with a
    success message saying the image is deleted successfully.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In practical application, you should have a backend interface for such actions.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we've created a simple image sharing website with Laravel's
    built-in functions. We've learned how to validate our forms, how to work with
    files and check their MIME types, and set custom configuration values. We've learned
    more about database methods both with Fluent and Eloquent ORM. Also, for image
    processing, we've installed a third-party library from [packagist.org](http://packagist.org)
    using Composer and learned how to update them. We've also listed images with the
    page navigation feature and learned to delete files from the server. In the next
    chapter, we will be building a personal blog site with authentication and a members-only
    area, and we will assign blog posts to the author(s).
  prefs: []
  type: TYPE_NORMAL
