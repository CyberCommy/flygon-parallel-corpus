- en: Preface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Python is a language that is easy to learn and both powerful and convenient
    from the start. Mastering Python, however, is a completely different question.
  prefs: []
  type: TYPE_NORMAL
- en: Every programming problem you will encounter has at least several possible solutions
    and/or paradigms to apply within the vast possibilities of Python. This book will
    not only illustrate a range of different and new techniques but also explain where
    and when a method should be applied.
  prefs: []
  type: TYPE_NORMAL
- en: This book is not a beginner's guide to Python 3\. It is a book that can teach
    you about the more advanced techniques possible within Python. Specifically targeting
    Python 3.5 and up, it also demonstrates several Python 3.5-only features such
    as async def and await statements.
  prefs: []
  type: TYPE_NORMAL
- en: As a Python programmer with many years of experience, I will attempt to rationalize
    the choices made in this book with relevant background information. These rationalizations
    are in no way strict guidelines, however. Several of these cases boil down to
    personal style in the end. Just know that they stem from experience and are, in
    many cases, the solutions recommended by the Python community.
  prefs: []
  type: TYPE_NORMAL
- en: Some of the references in this book might not be obvious to you if you are not
    a fan of Monty Python. This book extensively uses spam and eggs instead of foo
    and bar in code samples. To provide some background information, I recommend watching
    the "Spam" sketch by Monty Python. It is positively silly!
  prefs: []
  type: TYPE_NORMAL
- en: What this book covers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Chapter 1](ch01.html "Chapter 1. Getting Started – One Environment per Project"),
    *Getting Started – One Environment per Project*, introduces virtual Python environments
    using virtualenv or venv to isolate the packages in your Python projects.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 2](ch02.html "Chapter 2. Pythonic Syntax, Common Pitfalls, and Style
    Guide"), *Pythonic Syntax, Common Pitfalls, and Style Guide*, explains what Pythonic
    code is and how to write code that is Pythonic and adheres to the Python philosophy.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 3](ch03.html "Chapter 3. Containers and Collections – Storing Data
    the Right Way"), *Containers and Collections – Storing Data the Right Way*, is
    where we use the many containers and collections bundled with Python to create
    code that is fast and readable.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 4](ch04.html "Chapter 4. Functional Programming – Readability Versus
    Brevity"), *Functional Programming – Readability Versus Brevity*, covers functional
    programming techniques such as list/dict/set comprehensions and lambda statements
    that are available in Python. Additionally, it illustrates their similarities
    with the mathematical principles involved.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 5](ch05.html "Chapter 5. Decorators – Enabling Code Reuse by Decorating"),
    *Decorators – Enabling Code Reuse by Decorating*, explains not only how to create
    your own function/class decorators, but also how internal decorators such as property,
    staticmethod, and classmethod work.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 6](ch06.html "Chapter 6. Generators and Coroutines – Infinity, One
    Step at a Time"), *Generators and Coroutines – Infinity, One Step at a Time*,
    shows how generators and coroutines can be used to lazily evaluate structures
    of infinite size.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 7](ch07.html "Chapter 7. Async IO – Multithreading without Threads"),
    *Async IO – Multithreading without Threads*, demonstrates the usage of asynchronous
    functions using async def and await so that external resources no longer stall
    your Python processes.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 8](ch08.html "Chapter 8. Metaclasses – Making Classes (Not Instances)
    Smarter"), *Metaclasses – Making Classes (Not Instances) Smarter*, goes deeper
    into the creation of classes and how class behavior can be completely modified.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 9](ch09.html "Chapter 9. Documentation – How to Use Sphinx and reStructuredText"),
    *Documentation – How to Use Sphinx and reStructuredText*, shows how you can make
    Sphinx automatically document your code with very little effort. Additionally,
    it shows how the Napoleon syntax can be used to document function arguments in
    a way that is legible both in the code and the documentation.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 10](ch10.html "Chapter 10. Testing and Logging – Preparing for Bugs"),
    *Testing and Logging – Preparing for Bugs*, explains how code can be tested and
    how logging can be added to enable easy debugging in case bugs occur at a later
    time.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 11](ch11.html "Chapter 11. Debugging – Solving the Bugs"), *Debugging
    – Solving the Bugs*, demonstrates several methods of hunting down bugs with the
    use of tracing, logging, and interactive debugging.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 12](ch12.html "Chapter 12. Performance – Tracking and Reducing Your
    Memory and CPU Usage"), *Performance – Tracking and Reducing Your Memory and CPU
    Usage*, shows several methods of measuring and improving CPU and memory usage.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 13](ch13.html "Chapter 13. Multiprocessing – When a Single CPU Core
    Is Not Enough"), *Multiprocessing – When a Single CPU Core Is Not Enough*, illustrates
    that the multiprocessing library can be used to execute your code, not just on
    multiple processors but even on multiple machines.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 14](ch14.html "Chapter 14. Extensions in C/C++, System Calls, and
    C/C++ Libraries"), *Extensions in C/C++, System Calls, and C/C++ Libraries*, covers
    the calling of C/C++ functions for both interoperability and performance using
    Ctypes, CFFI, and native C/C++.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 15](ch15.html "Chapter 15. Packaging – Creating Your Own Libraries
    or Applications"), *Packaging – Creating Your Own Libraries or Applications*,
    demonstrates the usage of setuptools and setup.py to build and deploy packages
    on the Python Package Index (PyPI).'
  prefs: []
  type: TYPE_NORMAL
- en: What you need for this book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The only hard requirement for this book is a Python interpreter. A Python 3.5
    or newer interpreter is recommended, but many of the code examples will function
    in older Python versions, such as 2.7, with a simple from __future__ import print_statement
    added at the top of the file.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, [Chapter 14](ch14.html "Chapter 14. Extensions in C/C++, System
    Calls, and C/C++ Libraries"), *Extensions in C/C++, System Calls, and C/C++ Libraries*
    requires a C/C++ compiler, such as GCC, Visual Studio, or XCode. A Linux machine
    is by far the easiest to execute the C/C++ examples, but these should function
    on Windows and OS X machines without too much effort as well.
  prefs: []
  type: TYPE_NORMAL
- en: Who this book is for
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you are beyond the absolute Python beginner level, then this book is for
    you. Even if you are already an expert Python programmer, I guarantee that you
    will find some useful techniques and insights in this book.
  prefs: []
  type: TYPE_NORMAL
- en: At the very least, it will allow Python 2 programmers to learn a lot more about
    the new features introduced in Python 3, and specifically Python 3.5.
  prefs: []
  type: TYPE_NORMAL
- en: Basic proficiency in Python is required as the installation of Python interpreters
    and the basic Python syntax are not covered.
  prefs: []
  type: TYPE_NORMAL
- en: Conventions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this book, you will find a number of text styles that distinguish between
    different kinds of information. Here are some examples of these styles and an
    explanation of their meaning.
  prefs: []
  type: TYPE_NORMAL
- en: 'Code words in text, database table names, folder names, filenames, file extensions,
    pathnames, dummy URLs, user input, and Twitter handles are shown as follows: "It
    should be noted that the `type()` function has another use as well."'
  prefs: []
  type: TYPE_NORMAL
- en: 'A block of code is set as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Any command-line input or output is written as follows where the >>> indicate
    the Python console and the # indicates a regular Linux/Unix shell:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Warnings or important notes appear in a box like this.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Tips and tricks appear like this.
  prefs: []
  type: TYPE_NORMAL
