- en: Chapter 8. Playing with Google Charts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Getting started with a pie chart
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating charts using the ChartWrapper
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changing data source to Google Spreadsheet
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Customizing chart properties with an options object
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a dashboard to charts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will explore the Google visualization API task by task.
    We will look at the steps involved in creating a chart and integrating it with
    the charting API.
  prefs: []
  type: TYPE_NORMAL
- en: To work with the Google APIs, you must comply with the Google terms of use and
    policies that can be located at [https://google-developers.appspot.com/readme/terms](https://google-developers.appspot.com/readme/terms).
  prefs: []
  type: TYPE_NORMAL
- en: Getting started with a pie chart
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this first recipe, we will start with Google Charts, covering the basic steps
    that you need to understand when working with Google Charts through an interactive
    dataset that is based on the CDC death rates in the USA (LCWK)—deaths, percent
    of total deaths, and death rates for the 15 leading causes of death in five-year
    age groups, by race and sex in the United States in 2008.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will start from scratch with an empty HTML file and an empty JavaScript file
    named `08.01.getting-started.html` and `08.01.getting-started.js`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s list the steps required to complete the task starting with the HTML
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start by creating a `head` and linking it to the Google `jsapi` and
    our local JavaScript file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Then create an empty `div` with `id chart`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Now, it's time to move into the `08.01.getting-started.js` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Lets request the visualization API from the Google `jsapi`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'We want to add a `callback` that will be triggered when the library is ready:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Create an `init` function as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'From now on we will break down the code added within the `init` function:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new Google data object and provide data sources as shown in the following
    code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Create an `options` object for the chart:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Create and draw the chart by using the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Load the HTML file. You will find a working, interactive chart as shown in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/3707OT_08_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s explore the steps involved in working with Google Charts. The first
    step we establish when working with the Google API''s is adding Google''s API
    link into our HTML file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that the Google API is loaded into our application, we can request the
    library we wish to work with. In our case, we want to work with the visualization
    API and the `corechart` package:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Notice that we are requesting version 1.0; this might be confusing but we are
    actually asking for the production chart, 1.0 is always the current production
    version. As such if you wanted to lock into a build, you would need to discover
    what its code version is and send it instead of the 1.0 stable build.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `corechart` library in the example defines most basic charts. For charts
    that are not included, you would need to pass in the extra packages needed, such
    as the table chart:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'This covers the basics of how to load the API. But before we can finish our
    loading process, we need a way to have a callback so that we can know when the
    library is available for us to manipulate:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: We are asking the Google API to let us know when the package has loaded in a
    similar way to how we added a callback to our document. When the API is loaded,
    it is time for us to start interacting with the charting API.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are three components that you will probably want to explore in each Google
    Chart:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating the data source
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding options to your chart
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating the chart
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's explore all these options.
  prefs: []
  type: TYPE_NORMAL
- en: 'All Google Charts need a data source. The data source format is based on an
    internal object created through the charting API:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Data tables are 2D arrays (or tables). They have columns and rows just like
    databases. Our next step will be to define the data columns:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'In our case, as we are working with a pie chart, only two rows are needed—one
    to name our elements and the other to provide them with a value. There is only
    one mandatory parameter to the `addColumn` method to define the datatype . The
    datatype can be one of the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`string`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`number`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`boolean`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`date`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`datetime`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`timeofday`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The second parameter is an optional descriptor of the type of data and it is
    used for visualization such as in our case `10 Deaths`. There are other parameters
    too, but as long as we provide the elements in an ordered list, we do not need
    to explore them.
  prefs: []
  type: TYPE_NORMAL
- en: 'Last but not least, we will call the `addRows` method. We can call the `addRows`
    method and send a one-dimensional array (again in the same order of data as we
    set our `addColumn`). In our case, we are using the `addRows` method that expects
    a two-dimensional array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: This covers our datasets. As long as we set our columns in the order of our
    data and send our information via arrays, we are set and don't need to dig any
    deeper into the data API.
  prefs: []
  type: TYPE_NORMAL
- en: The `options` object enables us to create and modify the elements of our chart.
    The elements we control in our application are width, height, and our title.
  prefs: []
  type: TYPE_NORMAL
- en: 'After creating the data sources and setting the options for our array, it''s
    time for the easy part. To create the chart our first step is to pick our chart
    type and define where it will be created. Then we render it with the data source
    and options:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s explore a few more tips, tricks, and advanced features of Google Charts.
    Using the option `Objectto create 3D chartsTo`, we can turn our chart into 3D.
    We can very quickly and simply add a new parameter into the options object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: The outcome would be a chart that is tilted in a 3D space.
  prefs: []
  type: TYPE_NORMAL
- en: '![There''s more...](img/3707OT_08_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Changing the chart type
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Changing a chart type isn''t something complicated. As long as the chart types
    share the same number of data entries the change is usually one word from the
    actual constructor object of the chart. For example, we can very quickly switch
    our chart type by changing the method in the visualization library that is called:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: That would take the same data only rendered into a line chart (the `LineChart`
    object).
  prefs: []
  type: TYPE_NORMAL
- en: '![Changing the chart type](img/3707OT_08_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Creating charts using the ChartWrapper
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are two ways to create charts with Google Charts. One is the way we did
    it in the recipe *Getting started with a pie chart* and the second will be covered
    in this recipe. The goal of the ChartWrapper object is to enable you to cut down
    the amount of code needed to create a chart.
  prefs: []
  type: TYPE_NORMAL
- en: Its main advantages are less code and more flexibility of data sources. Its
    disadvantage is less control over the steps of graph creation.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Grab the HTML file from the last recipe (*Getting started with pie charts*).
    We will only modify the file path of the external JavaScript file and the rest
    of the code will remain the same.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'After changing the path of the HTML file source to the JavaScript file, it''s
    time to go into the JavaScript file and start over:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Load Google API (you do not need to mention what you want to load any more)
    and add a callback:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Create the `init` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Build a 2D array with the data source:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Create the `options` object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Build and render the chart:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: You've completed the creation of this chart type. Refresh your screen and you
    will see the same chart as in the last example, only using less code.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The nice thing about this example is you don't need to know much more about
    how it works. The `ChartWrapper` function itself deals with all the information
    that you've had to deal with in the last recipe. With that said, it doesn't mean
    this way is always the better way—if you need more control over the steps, the
    last example would work better.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As this recipe was very easy, let's add an extra pointer.
  prefs: []
  type: TYPE_NORMAL
- en: Changing a chart in one line
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'It''s really easy changing between the types of views of the Google Chart API.
    All you need to do is switch the type. Let''s change our chart to a `BarChart`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Refresh your window and you will find a bar chart.
  prefs: []
  type: TYPE_NORMAL
- en: '![Changing a chart in one line](img/3707OT_08_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Changing data source to Google Spreadsheet
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the powerful features of working with the Google API is the deep relationship
    between the product lines. In this recipe, based on the last recipe, we will create
    a Google Spreadsheet and then integrate it into our application.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Have a copy around you of the source files from the last recipe (*Creating charts
    using the ChartWrapper*).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The steps involved with creating a new Google document are simple, but are needed
    to be able to integrate our work; as such we will run through them quickly.
  prefs: []
  type: TYPE_NORMAL
- en: Go to [http://drive.google.com/](http://drive.google.com/) (formally known as
    Google Docs) and register/login.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new spreadsheet.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add data to the spreadsheet.![How to do it...](img/3707OT_08_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Share** button and set the view to public:![How to do it...](img/3707OT_08_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create an API URL based on the document ID:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Document link**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://docs.google.com/spreadsheet/ccc?key=0Aldzs55s0XbDdFJfUTNVSVltTS1ZQWQ0bWNsX2xSbVE](https://docs.google.com/spreadsheet/ccc?key=0Aldzs55s0XbDdFJfUTNVSVltTS1ZQWQ0bWNsX2xSbVE)'
  prefs: []
  type: TYPE_NORMAL
- en: '**API link**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://spreadsheets.google.com/tq?key=0Aldzs55s0XbDdFJfUTNVSVltTS1ZQWQ0bWNsX2xSbVE](https://spreadsheets.google.com/tq?key=0Aldzs55s0XbDdFJfUTNVSVltTS1ZQWQ0bWNsX2xSbVE)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, it''s time to get into our JavaScript file, and delete the current data
    source and replace it with a URL feed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Amazing! See how little code we needed to create a rich and fully interactive
    chart:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/3707OT_08_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is really the amazing part about it. You just don't need to understand
    how it works, all you need to do is create your chart and use the steps provided
    in the preceding section, and you can convert any of your own spreadsheets into
    a Google Spreadsheet.
  prefs: []
  type: TYPE_NORMAL
- en: The most important step in the preceding steps is step 4\. Notice that the URL
    that is generated through the Google Documents (Google Drive) is not the same
    as the URL that we need to hit when working in code. This is because the first
    URL is intended to be rendered as a visual page, while the second link generates
    a new Google data object. Don't forget that every page has its own unique ID.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you have a bit of a background with working with databases, you can send
    simple SQL queries into the data source and only get the items that you want to
    view. Let''s say in our example we want to get the items in a different order,
    exclude column B, and sort based on column D (by age):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Our `Select` statement is listing out what we want to select. The `ORDER BY`
    statement is self-explanatory. Let''s add it to our code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: When you refresh your code, column B will be missing and the data will be organized
    based on column D.
  prefs: []
  type: TYPE_NORMAL
- en: 'Last but not least, add this to your code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Now go back to the public chart and change the data in it. You will see that
    it will automatically update the chart.
  prefs: []
  type: TYPE_NORMAL
- en: Customizing the chart properties with an options object
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will create a new chart with Google Charts API—a candlestick
    chart—and we will incorporate a variety of configurations into it.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will start with a clean slate by creating a fresh new JavaScript and an HTML
    file.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Most of the steps will look almost identical to the past recipes in this chapter.
    Our main focus will be on our `options` parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create an HTML file and link it to a JavaScript file (in our case `08.04.candlestick.js`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `08.04.candlestick.js` file, add the API `load` and `callback` functions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `init` function (from now until the end of this recipe we will remain
    in the `init` function), create a new `DataTable` object by using the `google.visualization.arrayToDataTable`
    method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Create an `options` object (a configuration object) for the chart:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Draw the chart by using the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'When you load the HTML file, you will discover a customized candlestick chart,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/3707OT_08_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is the first time that we have used the method `google.visualization.arrayToDataTable`.
    This method takes in an array and returns a data table. When the second parameter
    of this method is set to `true`, it will treat the first row in the array as part
    of the data; and otherwise it will be treated as header data.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are many options and for a full list of them, review Google Charts documentation.
    We will focus on the items that we have picked to modify our view. The Google
    charts enable you to send an object with parameters. Each chart type has a different
    set of options. In our case, we have many options that enable us to control the
    details of how our chart looks. Most of the options are style related:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Some options directly relate to the function such as disabling the legend:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Or disabling interactive elements:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The main goal of highlighting this element is not because it's difficult, but
    because it's easy, and it is the main place where you would find yourself making
    changes to the charts. One point to note is that it is really important to check
    that you can do what you need by using Google Charts before working with them,
    as contrary to other chart systems, you can't go into their source files and change
    them, as we did in the recipes in [Chapter 7](ch07.html "Chapter 7. Depending
    on the Open Source Sphere"), *Depending on the Open Source Sphere*.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a dashboard to charts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this last recipe of this chapter we will add live controllers that will enable
    the users to change the filtering of data to see less or more information.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will start from scratch so nothing to worry about.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following are the steps needed to create a basic dashboard controller:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create an HTML file and link it to an external JavaScript file (in our case
    we will use the file `08.05.slider.js`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, it''s time to get into `08.05.slider.js` and to load the Google Visualization
    API. This time around we will load in the controller package:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, it''s time to add a callback:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s create our data source. We will base it on CDC death rates for 2008:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Then create a new dashboard:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s create a slider and provide it with the information it needs to connect
    to the data source:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a chart:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Last but not least, it''s time to bind and draw our controller:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: Load the HTML file and you will discover a scatter chart with a controller that
    enables you to select the age range that you want to dig deeper into.
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/3707OT_08_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is probably one of the smoothest parts of working with the Google Charting
    API. So let's break down and figure out the steps involved in creating controllers
    for your chart. We will showcase one controller, but the same logic flow would
    work for all components.
  prefs: []
  type: TYPE_NORMAL
- en: 'First in our HTML file, we need to have a `div` layer with an ID associated
    for our dashboard and a `div` for each following controller. To add controllers
    we assign them to the dashboard. We start with creating a dashboard:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'This dashboard is now going to be our hub where we connect all of our controllers
    (in our case, one controller). Then, we will create the next controller; in our
    case, we want to use a slider:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: Notice that we are adding a control type to get our range slider and we are
    linking it to a column by giving it the column ID (the label in the first row).
  prefs: []
  type: TYPE_NORMAL
- en: 'We continue and create a chart in the same way as before. In this case we picked
    a scatter chart. The order here isn''t important, but the most important part
    left is to link between our controller and the chart. We do that by using the
    `dashboard.bind` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we draw our element as our dashboard returns itself when a `bind` function
    is created:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'If we want, we can split this into separate lines as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: And there you go! Now you know how to work with dashboards. These steps are
    critical, but you can now add any controller. The rest of the documentation for
    this product is self-explanatory.
  prefs: []
  type: TYPE_NORMAL
