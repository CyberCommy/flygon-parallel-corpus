- en: '*Chapter 8*: Learning about PHP 8''s Deprecated or Removed Functionality'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter walks you through functionality that has been deprecated or removed
    in **PHP Hypertext Preprocessor 8** (**PHP 8**). This information is extremely
    important for any developer to know. Any code that uses removed functionality
    must be rewritten before an upgrade to PHP 8\. Likewise, any deprecation is a
    clear signal to you that you must rewrite any code that depends upon such functionality,
    or risk problems in the future.
  prefs: []
  type: TYPE_NORMAL
- en: After you have read the material in this chapter and followed the example application
    code, you can detect and rewrite code that has been deprecated. You can also develop
    workarounds for functionality that has been removed and learn how to refactor
    code that uses removed functionality involving extensions. Another important skill
    you will learn from this chapter is how to improve application security by rewriting
    code depending on removed functions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Topics covered in this chapter include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Discovering what has been removed from the core
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Examining core deprecations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with removed functionality in PHP 8 extensions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dealing with deprecated or removed security-related functionality
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To examine and run the code examples provided in this chapter, the minimum
    recommended hardware is outlined here:'
  prefs: []
  type: TYPE_NORMAL
- en: x86_64-based desktop PC or laptop
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 1 gigabyte (GB) free disk space
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 4 GB of random-access memory (RAM)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 500 kilobits per second (Kbps) or faster internet connection
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In addition, you will need to install the following software:'
  prefs: []
  type: TYPE_NORMAL
- en: Docker
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Docker Compose
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Please refer to the *Technical requirements* section of [*Chapter 1*](B16992_01_Final_JC_ePub.xhtml#_idTextAnchor013),
    *Introducing New PHP 8 OOP Features*, for more information on Docker and Docker
    Compose installation, as well as how to build the Docker container used to demonstrate
    the code explained in this book. In this book, we refer to the directory in which
    you restored the sample code for the book as `/repo`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The source code for this chapter is located here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/PacktPublishing/PHP-8-Programming-Tips-Tricks-and-Best-Practices](https://github.com/PacktPublishing/PHP-8-Programming-Tips-Tricks-and-Best-Practices)'
  prefs: []
  type: TYPE_NORMAL
- en: We can now begin our discussion by examining the core functionality removed
    in PHP 8.
  prefs: []
  type: TYPE_NORMAL
- en: Discovering what has been removed from the core
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we consider not only functions and classes that have been removed
    from PHP 8, but we will also have a look at usage that has been removed as well.
    We will then have a look at class methods and functions that still exist but no
    longer serve any useful purpose due to other changes in PHP 8\. Knowing which
    functions have been removed is extremely important in order to protect against
    a potential code break following a PHP 8 migration.
  prefs: []
  type: TYPE_NORMAL
- en: Let's start by examining functions removed in PHP 8.
  prefs: []
  type: TYPE_NORMAL
- en: Examining functions removed in PHP 8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are a number of functions in the PHP language that have only been retained
    thus far in order to maintain backward compatibility. However, maintenance of
    such functions drains resources away from core language development. Further,
    for the most part, such functions have been superseded by better programming constructs.
    Accordingly, there has been a slow process whereby such commands have been slowly
    dropped from the language as evidence has mounted that they are no longer being
    used.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: The PHP core team occasionally runs statistical analysis on PHP repositories
    based on GitHub. In this way, they are able to determine the frequency of usage
    of the various commands in the PHP core.
  prefs: []
  type: TYPE_NORMAL
- en: 'The table shown next summarizes the functions that have been removed in PHP
    8 and what to use in their place:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Table 8.1 – PHP 8 removed functions and suggested replacements'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_8.1_B16992.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Table 8.1 – PHP 8 removed functions and suggested replacements
  prefs: []
  type: TYPE_NORMAL
- en: For the remainder of this section, we cover a few of the more important removed
    functions and give you suggestions on how to refactor your code to achieve the
    same results. Let's start by examining `each()`.
  prefs: []
  type: TYPE_NORMAL
- en: Working with each()
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`each()` was introduced in PHP 4 as a way of walking through an array, producing
    key/value pairs upon each iteration. The syntax and usage of `each()` is extremely
    simple and is oriented toward procedural usage. We''ll show a short code example
    that demonstrates `each()` usage, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this code example, we first open a connection to a data file containing
    city data from the GeoNames ([https://geonames.org](https://geonames.org)) project,
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'We then use the `fgetcsv()` function to pull a row of data into `$line`, and
    pack latitude and longitude information into a `$data` array. Note in the following
    code snippet that we filter out rows of data on cities with a population less
    than `$target` (in this case, less than 10 million):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'We then close the file handle and sort the array by city name. To present the
    output, we use `each()` to walk through the array, producing key/value pairs,
    where the city is the key, and latitude and longitude is the value. The code is
    illustrated in the following snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the output as it appears in PHP 7:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'This code example won''t work in PHP 8, however, because `each()` has been
    removed. The *best practice* is to move toward an **object-oriented programming**
    (**OOP**) approach: use `ArrayIterator` instead of `each()`. The next code example
    produces exactly the same results as previously but uses object classes instead
    of procedural functions:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Instead of using `fopen()`, we instead create an `SplFileObject` instance.
    You''ll also notice in the following code snippet that instead of creating an
    array, we create an `ArrayIterator` instance to hold the final data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'We then loop through the data file using the `fgetcsv()` method to retrieve
    a line and `offsetSet()` to append to the iteration, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we sort by key, rewind to the top, and loop while the iteration still
    has more values. We use `key()` and `current()` methods to retrieve key/value
    pairs, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: This code example will actually work in any version of PHP, from PHP 5.1 up
    to and including PHP 8! The output is exactly as shown in the preceding PHP 7
    output and is not duplicated here.
  prefs: []
  type: TYPE_NORMAL
- en: Let's now have a look at `create_function()`.
  prefs: []
  type: TYPE_NORMAL
- en: Working with create_function()
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Prior to PHP 5.3, the only way to assign a function to a variable was to use
    `create_function()`. Starting with PHP 5.3, the preferred approach is to define
    an anonymous function. Anonymous functions, although technically part of the procedural
    programming **application programming interface** (**API**), are actually instances
    of the `Closure` class, and thus also belong to the realm of OOP.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: If the functionality you need can be condensed into a single expression, in
    PHP 8 you also have the option of using an **arrow function**.
  prefs: []
  type: TYPE_NORMAL
- en: When the function defined by `create_function()` was executed, PHP executed
    the `eval()` function internally. The result of this architecture, however, is
    awkward syntax. Anonymous functions are equivalent in performance and more intuitive
    to use.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following example demonstrates `create_function()` usage. The objective
    of this example is to scan a web-server access log and sort the results by **Internet
    Protocol** (**IP**) address:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We start by recording the start time in microseconds. Later, we use this value
    to determine performance. Here''s the code you''ll need:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, use `create_function()` to define a callback that reorganizes the IP
    address at the start of each line into uniform segments of exactly three digits
    each. We need to do this in order to perform a proper sort (defined later). The
    first argument to `create_function()` is a string the represents the parameters.
    The second argument is the actual code to be executed. The code is illustrated
    in the following snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Note the extensive use of strings. This awkward syntax can easily lead to syntax
    or logic errors, as most code editors make no effort to interpret commands embedded
    in a string.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we define a sorting callback to be used with `usort()`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'We then pull the contents of the access log into an array using the `file()`
    function. We also move `$sorted` to a file to hold the sorted access log entries.
    The code is illustrated in the following snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'We are then able to normalize the IP address using `array_walk()` and perform
    a sort using `usort()`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we write the sorted entries to the alternate log file and display
    the time difference between start and stop, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'We are not showing the completed alternate access log as it''s far too lengthy
    to be included in the book. Instead, here are a dozen lines pulled out from the
    middle of the listing to give you an idea of the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'In PHP 8, to accomplish the same task, we define anonymous functions instead
    of using `create_function()`. Here is how the rewritten code example might appear
    in PHP 8:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Again, we start by recording the start time, as with the PHP 7 code example
    just described. Here''s the code you''ll need to accomplish this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we define a callback that normalizes the IP address into four blocks
    of three digits each. We use exactly the same logic as in the previous example;
    however, this time, we define commands in the form of an anonymous function. This
    takes advantage of code editor helpers, and each line is viewed by the code editor
    as an actual PHP command. The code is illustrated in the following snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Because each line in the anonymous function is treated exactly as if you were
    defining a normal PHP function, you are less likely to have typos or syntax errors.
  prefs: []
  type: TYPE_NORMAL
- en: 'In a similar manner, we define the sort callback in the form of an arrow function,
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: The remainder of the code example is exactly the same as described earlier and
    is not shown here. Likewise, the output is exactly the same. The performance time
    is also approximately the same.
  prefs: []
  type: TYPE_NORMAL
- en: We now turn our attention to `money_format()`.
  prefs: []
  type: TYPE_NORMAL
- en: Working with money_format()
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `money_format()` function, first introduced in PHP 4.3, is designed to display
    monetary values using international currencies. If you are maintaining an international
    PHP-based website that has any financial transactions, you might be affected by
    this change after a PHP 8 update.
  prefs: []
  type: TYPE_NORMAL
- en: 'The latter was introduced in PHP 5.3, and should thus not cause your code to
    break. Let''s have a look at a simple example involving `money_format()` and how
    it can be rewritten to work in PHP 8, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We first assign an amount to a `$amt` variable. We then set the monetary locale
    to `en_US` (**United States**, or **US**) and echo the value using `money_format()`.
    We use the `%n` format code for national formatting, followed by the `%i` code
    for international rendering. In the latter case, the **International Organization
    for Standardization** (**ISO**) currency code (**US Dollars**, or **USD**) is
    displayed. The code is illustrated in the following snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'We then change the monetary locale to `de_DE` (Germany) and echo the same amount
    in both national and international formats, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the output in PHP 7.1:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: You might note from the output that `money_format()` did not render the Euro
    symbol, only the ISO code (`EUR`). It did, however, properly format the amounts,
    using a comma for the thousands separator, a period for the decimal separator
    for the `en_US` locale, and the reverse for the `de_DE` locale.
  prefs: []
  type: TYPE_NORMAL
- en: 'A *best practice* is to replace any usage of `money_format()` with `NumberFormatter::formatCurrency()`.
    Here is the preceding example, rewritten to work in PHP 8\. Please note that the
    same example will also work in any version of PHP from 5.3 onward! We''ll proceed
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we assign the amount to `$amt` and create a `NumberFormatter` instance.
    In creating this instance, we supply arguments that indicate the locale and type
    of number—in this case, currency. We then use the `formatCurrency()` method to
    produce the national representation of this amount, as illustrated in the following
    code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'In order to produce the ISO currency code—in this case, `USD`—we need to use
    the `setSymbol()` method. Otherwise, the default is to produce the `$` currency
    symbol instead of the `USD` ISO code. We then use the `format()` method to render
    the output. Note the trailing space after `USD` in the following code snippet.
    This is to prevent the ISO code from running into the number when echoed!:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'We then format the same amount using the `de_DE` locale, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the output from PHP 8:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: As you can see from the output, the comma decimal is reversed between the `en_US`
    and `de_DE` locales, as expected. You also see that both the currency symbols,
    as well as the ISO currency codes, are correctly rendered.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have an idea of how to replace `money_format()`, let's have a look
    at other programming code usage that has been removed in PHP 8.
  prefs: []
  type: TYPE_NORMAL
- en: Discovering other PHP 8 usage changes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are a number of program code usage changes that you need to be aware of
    in PHP 8\. We'll start with a look at two typecasts that are no longer allowed.
  prefs: []
  type: TYPE_NORMAL
- en: Removed typecasts
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Developers often use forced typecasts in order to ensure the data type of a
    variable is appropriate for a particular usage. As an example, when processing
    a **HyperText Markup Language** (**HTML**) form submission, for the sake of argument,
    let''s say one of the form elements represents a monetary amount. A quick and
    easy way to sanitize this data element is to typecast it to a `float` data type,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`$amount = (float) $_POST[''amount''];`'
  prefs: []
  type: TYPE_NORMAL
- en: However, rather than typecast to float, some developers prefer to use `real`
    or `double`. Interestingly, all three produce exactly the same result! In PHP
    8, the typecast to `real` has been removed. If your code uses this typecast, a
    *best practice* is to change it to float.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `unset` typecast has also been removed. The purpose of this typecast is
    to unset a variable. In the following code snippet, the value of `$obj` becomes
    `NULL`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'A *best practice* in PHP 8 is to use either of the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Let's now turn our attention to anonymous functions.
  prefs: []
  type: TYPE_NORMAL
- en: Changes in generating anonymous functions from class methods
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In PHP 7.1, a new `Closure::fromCallable()` method was added that allows you
    to return a class method as a `Closure` instance (for example, an anonymous function).
    `ReflectionMethod::getClosure()` was also introduced and is also able to convert
    a class method into an anonymous function.
  prefs: []
  type: TYPE_NORMAL
- en: 'To illustrate this, we define a class that returns `Closure` instances able
    to perform hashing using different algorithms. We''ll proceed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we define a class and a public `$class` property, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'We then define a method that produces one of three callbacks, each designed
    to produce a different type of hash, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we define three different methods, each producing a different form of
    hash (not shown): `hashToMd5()`, `hashToSha256()`, and `doNothing()`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In order to make use of the class, a calling program is devised that first
    includes the class file and creates an instance, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'The callback is then executed followed by `var_dump()` to view information
    about the `Closure` instance, as illustrated in the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'To end this example, we create and bind an anonymous class to the `Closure`
    instance, as illustrated in the following code snippet. Theoretically, the output
    display should start with `Anonymous` if the anonymous class were truly bound
    to `$this`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the output of this code example running in PHP 8:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: As you can see from the output, `Closure` simply ignored the attempt to bind
    another class and produced the expected output. In addition, a `Warning` message
    was generated, notifying you of the illegal bind attempt.
  prefs: []
  type: TYPE_NORMAL
- en: Let's now have a look at differences in comment handling.
  prefs: []
  type: TYPE_NORMAL
- en: Differences in comment handling
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: PHP has traditionally supported a number of symbols to denote comments. One
    such symbol is the hash sign (`#`). Due to the introduction of a new language
    construct known as **Attributes**, however, the hash sign immediately followed
    by an opening square bracket (`#[`) is no longer allowed to denote a comment.
    Support for the hash sign not immediately followed by an opening square bracket
    continues to serve as a comment delimiter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a brief example that works in PHP 7 and earlier, but not in PHP 8:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'When we run this example in PHP 7, the output is as expected, as we can see
    here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'The same example in PHP 8, however, throws a fatal `Error` message, as illustrated
    here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Note that the example might have accidentally worked in PHP 8 if we had formulated
    the `Attribute` instance correctly. However, since the syntax used was in line
    with the syntax for a comment, the code failed.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have an idea about functions and usage that have been removed from
    PHP 8, we now examine core deprecations.
  prefs: []
  type: TYPE_NORMAL
- en: Examining core deprecations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we examine functions and usage that are deprecated in PHP 8\.
    As the PHP language continues to mature, the PHP community is able to suggest
    to the PHP core development team that certain functions, classes, or even language
    usage should be removed. If two-thirds of the PHP development team vote in favor
    of a proposal, it's adopted for inclusion in a future release of the language.
  prefs: []
  type: TYPE_NORMAL
- en: In the case of functionality to be removed, it is not immediately taken out
    of the language. Instead, the function, class, method, or usage generates a `Deprecation`
    notice. This notice serves as a means to notify developers that this function,
    class, method, or usage will be disallowed in an as-yet-unspecified release of
    PHP. Accordingly, you must pay close attention to `Deprecation` notices. Failure
    to do so inevitably causes a code break in the future.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: Starting with PHP 5.3, an official **Request for Comments** (**RFC**) process
    was initiated. The status of any proposal can be viewed at [https://wiki.php.net/rfc](https://wiki.php.net/rfc).
  prefs: []
  type: TYPE_NORMAL
- en: Let's start by examining deprecated usage in parameter order.
  prefs: []
  type: TYPE_NORMAL
- en: Deprecated usage in parameter order
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The term *usage* refers to how you call functions and class methods in your
    application code. You will discover that in PHP 8, older usages were allowed that
    are now considered bad practices. Understanding how PHP 8 enforces best practices
    in code usage helps you to write better code.
  prefs: []
  type: TYPE_NORMAL
- en: If you define a function or method with a mixture of mandatory and optional
    parameters, most PHP developers agree that the optional parameters should follow
    the mandatory parameters. In PHP 8, this usage best practice, if not followed,
    will result in a `Deprecation` notice. The rationale behind the decision to deprecate
    this usage is to avoid potential logic errors.
  prefs: []
  type: TYPE_NORMAL
- en: 'This simple example demonstrates this usage difference. In the following example,
    we define a simple function that accepts three arguments. Note that the `$op`
    optional parameter is sandwiched between two mandatory parameters, `$a` and `$b`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'If we echo the results of the add operation in PHP 7, there is no problem,
    as we can see here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'In PHP 8, however, there is a `Deprecation` notice, after which the operation
    is allowed to continue. Here is the output running in PHP 8:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: A `Deprecation` notice is a signal to the developer that this usage is considered
    a bad practice. In this case, a best practice would be to modify the function
    signature and list all mandatory parameters first.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the rewritten example, acceptable to all versions of PHP:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'It''s important to note that the following usage is still allowed in PHP 8:'
  prefs: []
  type: TYPE_NORMAL
- en: '`function test(object $a = null, $b) {}`'
  prefs: []
  type: TYPE_NORMAL
- en: 'However, a better way to write the same function signature and still stay within
    the best practice of listing mandatory parameters first would be to rewrite this
    signature, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`function test(?object $a, $b) {}`'
  prefs: []
  type: TYPE_NORMAL
- en: You now know about features removed from the PHP 8 core. Let's now have a look
    at removed functionality in PHP 8 extensions.
  prefs: []
  type: TYPE_NORMAL
- en: Working with removed functionality in PHP 8 extensions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will have a look at removed functionality in PHP 8 extensions.
    This information is extremely important in order to avoid writing code that does
    not work in PHP 8\. Further, an awareness of removed functionality helps you prepare
    existing code for a PHP 8 migration.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following table summarizes removed functionality in extensions:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Table 8.2 – Functions removed from PHP 8 extensions'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_8.2_B16992.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Table 8.2 – Functions removed from PHP 8 extensions
  prefs: []
  type: TYPE_NORMAL
- en: The preceding table provides a useful list of removed functions. Use this list
    to check against your existing code prior to a PHP 8 migration.
  prefs: []
  type: TYPE_NORMAL
- en: Let's now have a look at a potentially serious change to the mbstring extension.
  prefs: []
  type: TYPE_NORMAL
- en: Discovering mbstring extension changes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `mbstring` extension has had two major changes that have massive potential
    for a backward-compatible code break. The first change is that a significant number
    of convenience aliases have been removed. The second major change is that support
    for the mbstring PHP function overloading capability has been removed. Let's first
    have a look at removed aliases.
  prefs: []
  type: TYPE_NORMAL
- en: Handling mbstring extension removed aliases
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: At the request of a number of developers, the PHP development team responsible
    for this extension graciously created a series of aliases, replacing `mb_*()`
    with `mb*()`. The exact rationale for granting this request has been lost in time.
    The burden of supporting such a massive number of aliases, however, wastes a tremendous
    amount of time every time the extension needs to be updated. Accordingly, the
    PHP development team voted to remove these aliases from the mbstring extension
    in PHP 8.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following table provides a list of the aliases removed, as well as which
    function to use in their place:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Table 8.3 – Removed mbstring aliases'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_8.3_B16992.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Table 8.3 – Removed mbstring aliases
  prefs: []
  type: TYPE_NORMAL
- en: Let's now have a look at another major change in string handling, pertaining
    to function overloading.
  prefs: []
  type: TYPE_NORMAL
- en: Working with mbstring extension function overloading
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The function overloading feature allows standard PHP string functions (for example,
    `substr()`) to be silently replaced with their `mbstring` extension equivalences
    (for example, `mb_substr()`) if the `php.ini` directive `mbstring.func_overload`
    is assigned a value. The value assigned to this directive takes the form of a
    bitwise flag. Depending on the setting of this flag, the `mail()`, `str*()`, `substr()`,
    and `split()` functions could be subject to overloading. This feature was deprecated
    in PHP 7.2 and has been removed in PHP 8.
  prefs: []
  type: TYPE_NORMAL
- en: In addition, three `mbstring` extension constants related to this feature have
    also been removed. The three constants are `MB_OVERLOAD_MAIL`, `MB_OVERLOAD_STRING`,
    and `MB_OVERLOAD_REGEX`.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: 'For more information on this feature, visit the following link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.php.net/manual/en/mbstring.overload.php](https://www.php.net/manual/en/mbstring.overload.php)'
  prefs: []
  type: TYPE_NORMAL
- en: Any code that relies upon this functionality will break. The only way to avoid
    serious application failure is to rewrite the affected code and replace the silently
    substituted PHP core string functions with the intended `mbstring` extension functions.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following example, when `mbstring.func_overload` is enabled, PHP 7 reports
    the same values for both `strlen()` and `mb_strlen()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the output in PHP 7:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: As you can see from the preceding output, once the `mbstring.func_overload`
    setting is enabled in the `php.ini` file, the results reported by `strlen()` and
    `mb_strlen()` are identical. This is because calls to `strlen()` are silently
    diverted to `mb_strlen()` instead. In PHP 8, the output (not shown) shows the
    results in both cases because the `mbstring.func_overload` setting is ignored.
    `strlen()` reports a length of `45`, and `mb_strlen()` reports a length of `15`.
  prefs: []
  type: TYPE_NORMAL
- en: To determine if your code is vulnerable to this backward-compatible break, check
    your `php.ini` file and see if the `mbstring.func_overload` setting has a value
    other than zero.
  prefs: []
  type: TYPE_NORMAL
- en: You now have an idea of where to look for potential code breaks pertaining to
    the `mbstring` extension. At this time, we turn our attention to changes in the
    Reflection extension.
  prefs: []
  type: TYPE_NORMAL
- en: Reworking code that uses Reflection*::export()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the Reflection extension, a critical difference between PHP 8 and earlier
    versions is that all of the `Reflection*::export()` methods have been removed!
    The primary reason for this change is that simply echoing the Reflection object
    produces exactly the same results as using `export()`.
  prefs: []
  type: TYPE_NORMAL
- en: If you have any code that currently uses any of the `Reflection*::export()`
    methods, you need to rewrite the code to use the `__toString()` method instead.
  prefs: []
  type: TYPE_NORMAL
- en: Discovering other deprecated PHP 8 extension functionality
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we review a number of other significant deprecated functionality
    of note in PHP 8 extensions. First, we look at XML-RPC.
  prefs: []
  type: TYPE_NORMAL
- en: Changes to the XML-RPC extension
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In versions of PHP prior to PHP 8, the XML-RPC extension was part of the core
    and always available. Starting with PHP 8, this extension has quietly been moved
    to the **PHP Extension Community Library** (**PECL**) ([http://pecl.php.net/](http://pecl.php.net/))
    and is no longer included in a standard PHP distribution by default. You can still
    install and use this extension. This change is easily confirmed by scanning the
    list of extensions in the PHP core here: [https://github.com/php/php-src/tree/master/ext](https://github.com/php/php-src/tree/master/ext).'
  prefs: []
  type: TYPE_NORMAL
- en: This will not present a backward-compatible code break. However, if you perform
    a standard PHP 8 installation and then migrate code that contains references to
    XML-RPC, your code might generate a fatal `Error` message and display a message
    that XML-RPC classes and/or functions are not defined. In this situation, simply
    install the XML-RPC extension using `pecl` or any other method normally used to
    install non-core extensions.
  prefs: []
  type: TYPE_NORMAL
- en: We now turn our attention to the DOM extension.
  prefs: []
  type: TYPE_NORMAL
- en: Changes made to the DOM extension
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Since PHP 5, the **Document Object Model** (**DOM**) extension included a number
    of classes in its source code repository that were never implemented. In PHP 8,
    a decision was made to support DOM as a **living standard** (much like with HTML
    5). A living standard is one that does not feature a set series of releases, but
    rather incorporates a continuous set of releases in an effort to keep up with
    web technology.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: 'For more information on the proposed DOM living standard, have a look at this
    reference: [https://dom.spec.whatwg.org/](https://dom.spec.whatwg.org/). For a
    good discussion on moving the PHP DOM extension onto a living standard basis,
    have a look at the *Working with interfaces and traits* section of [*Chapter 9*](B16992_09_Final_JC_ePub.xhtml#_idTextAnchor217),
    *Mastering PHP 8 Best Practices*.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Mainly due to the move toward a living standard, the following unimplemented
    classes have been removed from the DOM extension as of PHP 8:'
  prefs: []
  type: TYPE_NORMAL
- en: '`DOMNameList`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DOMImplementationList`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DOMConfiguration`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DOMError`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DOMErrorHandler`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DOMImplementationSource`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DOMLocator`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DOMUserDataHandler`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DOMTypeInfo`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These classes were never implemented, which means that your source code will
    not suffer any backward-compatibility breaks.
  prefs: []
  type: TYPE_NORMAL
- en: Let's now have a look at deprecations in the PHP PostgreSQL extension.
  prefs: []
  type: TYPE_NORMAL
- en: Changes made to the PostgreSQL extension
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Aside from the deprecated functionality indicated in *Table 8.5* – *Deprecated
    functionality in PHP 8 extensions* (shown later), you need to be aware that a
    couple of dozen aliases have been deprecated in the PHP 8 PostgreSQL extension.
    As with the aliases removed from the `mbstring` extension, the aliases we cover
    in this section are without underscore characters in the latter part of the alias
    name.
  prefs: []
  type: TYPE_NORMAL
- en: 'This table summarizes the aliases removed, and which functions to call in their
    place:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Table 8.4 – Deprecated functionality in PostgreSQL extension'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_8.4_B16992.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Table 8.4 – Deprecated functionality in PostgreSQL extension
  prefs: []
  type: TYPE_NORMAL
- en: 'Please note that it''s often difficult to find documentation on deprecations.
    In this case, you can consult the PHP 7.4 to PHP 8 migration guide here: [https://www.php.net/manual/en/migration80.deprecated.php#migration80.deprecated](https://www.php.net/manual/en/migration80.deprecated.php#migration80.deprecated).pgsql.
    Otherwise, you can always look in the C source code docblocks for `@deprecation`
    annotations here: [https://github.com/php/php-src/blob/master/ext/pgsql/pgsql.stub.php](https://github.com/php/php-src/blob/master/ext/pgsql/pgsql.stub.php).
    Here is an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: In the last part of this section, we summarize deprecated functionality in PHP
    8 extensions.
  prefs: []
  type: TYPE_NORMAL
- en: Deprecated functionality in PHP 8 extensions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Finally, in order to make it easier for you to identify deprecated functionality
    in PHP 8 extensions, we provide a summary. The following table summarizes functionality
    deprecated in PHP 8 extensions:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Table 8.5 – Deprecated functionality in PHP 8 extensions'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_8.5_B16992.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Table 8.5 – Deprecated functionality in PHP 8 extensions
  prefs: []
  type: TYPE_NORMAL
- en: 'We will use the PostgreSQL extension to illustrate deprecated functionality.
    Before running the code example, you need to perform a small bit of setup inside
    the PHP 8 Docker container. Proceed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open a command shell into the PHP 8 Docker container. From the command shell
    start PostgreSQL running using this command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`/etc/init.d/postgresql start`'
  prefs: []
  type: TYPE_NORMAL
- en: Next, switch to the `su postgres` user.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The prompt changes to `bash-4.3$`. From here, type `psql` to enter the PostgreSQL
    interactive terminal.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, from the PostgreSQL interactive terminal, issue the following set of
    commands to create and populate a sample database table:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the entire chain of commands replayed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'We now define a short code example to illustrate the deprecation concepts just
    discussed. Notice in the following code example that we create a **Structured
    Query Language** (**SQL**) statement for a non-existent user:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the output from the preceding code example:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'The two main things to notice from the output are the fact that `pg_errormessage()`
    is deprecated and that when no results are returned from a query, instead of a
    `FALSE` Boolean, an empty array is returned instead. Don''t forget to stop the
    PostgreSQL database using this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '`/etc/init.d/postgresql stop`'
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have an idea about deprecated functionality in the various PHP
    8 extensions, we turn our attention to security-related deprecations.
  prefs: []
  type: TYPE_NORMAL
- en: Dealing with deprecated or removed security-related functionality
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Any changes to functionality that affect security are extremely important to
    note. Ignoring these changes can very easily lead not only to breaks in your code
    but can also open your websites to potential attackers. In this section, we cover
    a variety of security-related changes in functionality present in PHP 8\. Let's
    start the discussion by examining filters.
  prefs: []
  type: TYPE_NORMAL
- en: Examining PHP 8 stream-filter changes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: PHP `input/output` (**I/O**) operations depend upon a subsystem known as **streams**.
    One of the interesting aspects of this architecture is the ability to append a
    stream filter to any given stream. The filters you can append can be either custom-defined
    stream filters, registered using `stream_filter_register()`, or predefined filters
    included with your PHP installation.
  prefs: []
  type: TYPE_NORMAL
- en: An important change of which you need to be aware is that in PHP 8, all `mcrypt.*`
    and `mdecrypt.*` filters have been removed, as well as the `string.strip_tags`
    filter. If you're not sure which filters are included in your PHP installation,
    you can either run `phpinfo()` or, better yet, `stream_get_filters()`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s the `stream_get_filters()` output running in the PHP 7 Docker container
    used with this book:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s the same command running in the PHP 8 Docker container:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: You'll notice from the PHP 8 output that the filters mentioned earlier have
    all been removed. Any code that uses any of the three filters listed will break
    after a PHP 8 migration. We now look at changes made to custom error handling.
  prefs: []
  type: TYPE_NORMAL
- en: Dealing with custom error-handling changes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Starting with PHP 7.0, most errors are now **thrown**. The exception to this
    are situations where the PHP engine is unaware that there is an error condition,
    such as running out of memory, exceeding the time limit, or if a segmentation
    fault occurs. Another exception is when the program deliberately triggers an error
    using the `trigger_error()` function.
  prefs: []
  type: TYPE_NORMAL
- en: Using the `trigger_error()` function to trap errors is not a best practice.
    A *best practice* would be to develop object-oriented code and place it inside
    a `try/catch` construct. However, if you are assigned to manage an application
    that does make use of this practice, there is a change in what gets passed to
    the custom error handler.
  prefs: []
  type: TYPE_NORMAL
- en: 'In versions prior to PHP 8, the data passed to the custom error handler''s
    fifth argument, `$errorcontext`, was information about arguments passed to the
    function. In PHP 8, this argument is ignored. To illustrate the difference, have
    a look at the simple code example shown next. Here are the steps leading to this:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we define a custom error handler, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'We then define a function that triggers an error, sets the error handler, and
    invokes the function, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s the output running in PHP 7:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see from the preceding output, `$errorcontext` provides information
    about the arguments received by the function. In contrast, have a look at the
    output produced by PHP 8, shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, the output is identical except for a lack of information coming
    into `$errorcontext`. Let's now have a look at generating backtraces.
  prefs: []
  type: TYPE_NORMAL
- en: Dealing with changes to backtraces
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Amazingly, before PHP 8, it was possible to change function arguments through
    a backtrace. This was possible because traces produced by either `debug_backtrace()`
    or `Exception::getTrace()` provided access to function arguments by reference.
  prefs: []
  type: TYPE_NORMAL
- en: This is an extremely bad practice because it allows your program to continue
    to operate despite potentially being in an error state. Further, when reviewing
    such code, it's not clear how the argument data is being provided. Accordingly,
    in PHP 8, this practice is no longer allowed. Both `debug_backtrace()` or `Exception::getTrace()`
    still operate as before. The only difference is that they no longer pass argument
    variables by reference.
  prefs: []
  type: TYPE_NORMAL
- en: Let's now have a look at changes to `PDO` error handling.
  prefs: []
  type: TYPE_NORMAL
- en: PDO error-handling mode default changed
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For many years, novice PHP developers were mystified when their database applications
    using the `PDO` extension failed to produce results. The reason for this problem,
    in many cases, was a simple SQL syntax error that was not reported. This was due
    to the fact that in PHP versions prior to PHP 8, the default `PDO` error mode
    was `PDO::ERRMODE_SILENT`.
  prefs: []
  type: TYPE_NORMAL
- en: SQL errors are not PHP errors. Accordingly, such errors are not captured by
    normal PHP error handling. Instead, PHP developers had to specifically set the
    `PDO` error mode to either `PDO::ERRMODE_WARNING` or `PDO::ERRMODE_EXCEPTION`.
    PHP developers can now breathe a sigh of relief because, as of PHP 8, the PDO
    default error-handling mode is now `PDO::ERRMODE_EXCEPTION`.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following example, PHP 7 allows the incorrect SQL statement to silently
    fail:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: In PHP 7, the only output is `No Results`, which is both deceptive and unhelpful.
    It might lead the developer to believe there were no results when in fact, the
    problem is a SQL syntax error.
  prefs: []
  type: TYPE_NORMAL
- en: 'The output running in PHP 8, shown here, is much more helpful:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: As you can see from the preceding PHP 8 output, the actual problem is clearly
    identified.
  prefs: []
  type: TYPE_NORMAL
- en: TIP
  prefs: []
  type: TYPE_NORMAL
- en: 'For more information about this change, see this RFC:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://wiki.php.net/rfc/pdo_default_errmode](https://wiki.php.net/rfc/pdo_default_errmode)'
  prefs: []
  type: TYPE_NORMAL
- en: We next examine the `track_errors` `php.ini` directive.
  prefs: []
  type: TYPE_NORMAL
- en: Examining the track_errors php.ini setting
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As of PHP 8, the `track_errors` `php.ini` directive has been removed. This means
    that the `$php_errormsg` automatically created variable is no longer available.
    For the most part, anything that caused an error prior to PHP 8 has now been converted
    to throw an `Error` message instead. However, for versions of PHP prior to PHP
    8, you can still use the `error_get_last()` function instead.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following simple code example, we first set the `track_errors` directive
    on. We then call `strpos()` without any arguments, deliberately causing an error.
    We then rely on `$php_errormsg` to reveal the true error:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the output in PHP 7:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see from the preceding output, `$php_errormsg` reveals the error,
    and the code block is allowed to continue. In PHP 8, of course, we are not allowed
    to call `strpos()` without any arguments. Here is the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, PHP 8 throws an `Error` message. A best practice is to use
    a `try/catch` block and trap any `Error` messages that might be thrown. You can
    also use the `error_get_last()` function. Here is a rewritten example that works
    in both PHP 7 and PHP 8 (output not shown):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: You now have an idea about PHP functionality that has been deprecated or removed
    in PHP 8\. That concludes this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned about deprecated and removed PHP functionality.
    The first section in this chapter dealt with core functionality that has been
    removed. The rationale for the change was explained, and you learned that the
    main reason for removing the functionality described in this chapter is not only
    to move you toward code that follows best practices but to have you use PHP 8
    functionality that is faster and more efficient.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, you learned about deprecated functionality. The key theme
    in this section was to highlight how the deprecated functions, classes, and methods
    lead to bad practices and bug-ridden code. You also were given guidance on functionality
    that has been either removed or deprecated in a number of key PHP 8 extensions.
  prefs: []
  type: TYPE_NORMAL
- en: You learned how to locate and rewrite code that has been deprecated, and how
    to develop workarounds for functionality that has been removed. Another skill
    you learned in this chapter included how to refactor code using removed functionality
    involving extensions, and last, but not least, you learned how to improve application
    security by rewriting code depending on removed functions.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will learn how to gain greater efficiency and performance
    in your PHP 8 code by mastering best practices.
  prefs: []
  type: TYPE_NORMAL
