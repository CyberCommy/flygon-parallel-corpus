- en: Creating a Real-Time App with Nuxt
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we are going to venture a bit further with Nuxt to see how
    we can use it to work with other frameworks for making real-time apps. We will
    continue using Koa as the backend API but "enhance" it with RethinkDB and Socket.IO.
    In other words, we will turn our backend API into a **real-time API** with these
    two awesome frameworks and tools. At the same time, we will turn our frontend
    Nuxt app into a **real-time Nuxt app** with help from them as well. You can develop
    these two real-time apps on the single-domain approach if you prefer. However,
    this book favors the cross-domain approach so that we don't mix up the frontend
    and the backend dependencies and get confused over time. So, this will be another
    interesting and exciting chapter for you to learn from!
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Introducing RethinkDB
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrating RethinkDB with Koa
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introducing Socket.IO
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrating Socket.IO with Nuxt
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's get started!
  prefs: []
  type: TYPE_NORMAL
- en: Introducing RethinkDB
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: RethinkDB is an open-source JSON database for real-time apps. It pushes JSON
    data to your apps in real-time from the database whenever a change occurs in the
    database tables that you subscribe to their real-time feeds – changefeeds. Despite
    that the changefeeds lies at the heart of RethinkDB's real-time functionality,
    you can skip this functionality if you want to. You can use RethinkDB just like
    MongoDB to store and query your NoSQL database.
  prefs: []
  type: TYPE_NORMAL
- en: Even though you can use the Change Streams in MongoDB to access the real-time
    data changes but it requires some configuration to get it started, while the real-time
    feeds are ready for use by default in RethinkDB and you can tap in right away
    without any configuration. Let's get started by installing the **RethinkDB server**
    in your system and see how you can use it in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Installing RethinkDB Server
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: At the time of writing this book, the current stable version of RethinkDB is
    **2.4.0** (**Night Of The Living Dead**), released on 19 December 2019\. There
    are a few ways to install a RethinkDB server, depending on the platform (Ubuntu,
    or OS). You can check out the guide at [https://rethinkdb.com/docs/install/](https://rethinkdb.com/docs/install/)
    for your platform. Note Windows is not supported yet in 2.4.0. For more information
    about this issue for Windows, please visit [https://rethinkdb.com/docs/install/windows](https://rethinkdb.com/docs/install/windows).
  prefs: []
  type: TYPE_NORMAL
- en: 'In this book, we will install RethinkDB 2.4.0 on **Ubuntu 20.04 LTS** (Focal
    Fossa). It works the same if you are on Ubuntu 19.10 (Eoan Ermine), Ubuntu 19.04
    (Disco Dingo), or the older versions of Ubuntu, such as 18.04 LTS (Bionic Beaver).
    Let''s get started:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the RethinkDB repository to your list of Ubuntu repositories, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Get the public key of RethinkDB using `wget`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: You should get an OK message on your terminal for the preceding command line.
  prefs: []
  type: TYPE_NORMAL
- en: 'Update your version of Ubuntu and install RethinkDB:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Verify RethinkDB:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'You should get the following output on the terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'RethinkDB comes with an administrative UI for you to manage databases on a
    browser at `localhost:8080`. This can be very handy and useful during project
    development. If you ever want to uninstall RethinkDB and remove all its databases,
    you can do so with the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The administrative UI that came with the installation is like the PHP Adminer that
    you used to manage the MySQL databases for the PHP API in the previous chapter.
    You can use the RethinkDB administrative UI to add databases and tables by using
    the graphical buttons on the UI or using the RethinkDB query language (in JavaScript),
    **ReQL**. We'll explore the administrative UI and ReQL in the following section.
  prefs: []
  type: TYPE_NORMAL
- en: Introducing ReQL
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'ReQL is the query language of RethinkDB and is used for manipulating the JSON
    documents in RethinDB databases. The queries are constructed automatically by
    calling RethinkDB''s built-in chainable functions on the server-side. These functions
    are embedded in the driver in various programming languages JavaScript, Python,
    Ruby, and Java. You can check out the ReQL commands/functions at the following
    links:'
  prefs: []
  type: TYPE_NORMAL
- en: JavaScript at [https://rethinkdb.com/api/javascript/](https://rethinkdb.com/api/javascript/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Python at [https://rethinkdb.com/api/python/](https://rethinkdb.com/api/python/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ruby at [https://rethinkdb.com/api/ruby/](https://rethinkdb.com/api/ruby/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Java at [https://rethinkdb.com/api/java/](https://rethinkdb.com/api/java/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will be using JavaScript in this book. Let's use the Data Explorer on the
    administrative UI to perform some CRUD operations by using the respective ReQL
    commands. You can navigate to the page where the Data Explorer is or point your
    browser to `localhost:8080/#dataexplorer` and start playing with the queries,
    as shown here. The default top-level namespace on the Data Explorer is `r`, so
    the ReQL commands must be chained to this namespace.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, we can change this `r` namespace and call anything we like when using
    the driver in our app, which we will do in the next section. For now, let''s stick
    to the default namespace, `r`, for this exercise:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a database:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Click the Run button. You should get a result similar to the following on the
    screen showing that one database has been created with the database name you chose
    and that an ID was generated by RethinkDB:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: If you want to find out more information about the `dbCreate` ReQL command,
    please visit [https://rethinkdb.com/api/javascript/db_create/](https://rethinkdb.com/api/javascript/db_create/).
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a table in an existing database; for example, create a `user` table
    in the `nuxtdb` database:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Click the Run button. You should get a result similar to the following on the
    screen showing that one table has been created with an ID generated by RethinkDB
    for you and other information about the table that you created:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: If you want to find out more information about the `tableCreate` ReQL command,
    please visit [https://rethinkdb.com/api/javascript/table_create/](https://rethinkdb.com/api/javascript/table_create/).
  prefs: []
  type: TYPE_NORMAL
- en: 'Insert new documents into the `user` table:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Click the Run button. You should get a result similar to the following on the
    screen, showing that two documents have been inserted with keys generated by RethinkDB
    for you:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: If you want to find out more information about the `table` and `insert` ReQL
    commands, please visit [https://rethinkdb.com/api/javascript/table/](https://rethinkdb.com/api/javascript/table/)
    and [https://rethinkdb.com/api/javascript/insert/](https://rethinkdb.com/api/javascript/insert/),
    respectively.
  prefs: []
  type: TYPE_NORMAL
- en: 'Retrieve documents from the `user` table:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Click the Run button. You should get a result similar to the following on the
    screen, showing two documents from the `user` table:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'You can chain the `count` method to the query if you want to count the total
    documents in a table, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: You should get `2` in the `user` table after injecting the new documents.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to find out more information about the `count` ReQL command, please
    visit [https://rethinkdb.com/api/javascript/count/](https://rethinkdb.com/api/javascript/count/).
  prefs: []
  type: TYPE_NORMAL
- en: 'Update the documents in the `user` table by filtering the table with the `slug` key:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Click the Run button. You should get the following result on the screen, showing
    that one document has been replaced:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: If you want to find out more information about the `filter` and `update` ReQL
    commands, please visit [https://rethinkdb.com/api/javascript/filter/](https://rethinkdb.com/api/javascript/filter/)
    and [https://rethinkdb.com/api/javascript/update/](https://rethinkdb.com/api/javascript/update/),
    respectively.
  prefs: []
  type: TYPE_NORMAL
- en: Also, if you want to find out more information about the `row` and `eq` ReQL
    commands, please visit [https://rethinkdb.com/api/javascript/row/](https://rethinkdb.com/api/javascript/row/)
    and [https://rethinkdb.com/api/javascript/eq/](https://rethinkdb.com/api/javascript/eq/),
    respectively.
  prefs: []
  type: TYPE_NORMAL
- en: 'Delete a document from the `user` table by filtering the table with the `slug` key:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Click the Run button. You should get the following result on the screen, showing
    that one document has been deleted:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'If you want to delete all the documents in a table, then simply chain the `delete` method
    to the table without filtering, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: If you want to find out more information about the `delete` ReQL command, please
    visit [https://rethinkdb.com/api/javascript/delete/](https://rethinkdb.com/api/javascript/delete/).
  prefs: []
  type: TYPE_NORMAL
- en: It is fun and easy in using ReQL commands, isn't it? You don't have to read
    through all the ReQL commands and study each of them in great detail to be productive.
    You just have to know what you want to do and find the commands you need from
    the ReQL command reference/API page based on the programming language that you
    already know about. Next, you will find out how to add the **RethinkDB client**
    or driver to your app. Let's get to it!
  prefs: []
  type: TYPE_NORMAL
- en: Integrating RethinkDB with Koa
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will build a simple API following the PHP APIs that we created
    in the previous chapter to list, add, update, and delete users. In the previous
    API, we used PHP and MySQL, while in this chapter, we will use JavaScript and
    RethinkDB. We will still use Koa as the framework for our API. But this time,
    we will restructure the API directory so that the structure is consistent (as
    much as possible) with the directory structure you already familiar with for the
    Nuxt app and PHP API. So, let's get started!
  prefs: []
  type: TYPE_NORMAL
- en: Restructuring API directories
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Remember the default directory structure that you get in your project when
    using Vue CLI, which you learned about in [Chapter 11](b24caa1b-6337-40ee-9c1a-c8586db1f3b2.xhtml),
    *Writing Route Middleware and Server Middleware*? After installing a project with
    Vue CLI, if you take a look inside the project directory, you will see a barebones project
    structure in which you can find a `/src/` directory to develop your components,
    pages, and routes, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'We have been using this kind of standard structure for the cross-domain apps
    since [Chapter 12](8e574c51-68dc-45e2-8a1d-4c04d9c38df5.xhtml), *Creating User
    Logins and API Authentication*. For example, the following is the directory structure
    for Koa APIs, which you made previously:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'But this time, we will eliminate the `/src/` directory from the APIs that we
    are going to make in this chapter. So, let''s move everything in the `/src/` directory
    up to the top level and reconfigure how we bootstrap the app, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the following files and folders in the project''s root directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Again, the directory structure here is merely a suggestion; you can design
    your directory structure as you wish so that it suits you the most. But let''s
    take a glance at this suggested directory and study what these folders and files
    are used for:'
  prefs: []
  type: TYPE_NORMAL
- en: The `/configs/` directory is used to store the app's basic information and the
    RethinkDB database connection's details.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `/public/` directory is used to store the files for initiating the app.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `/modules/` directory is used to store the modules of the app, such as the
    `'user'` module, which we will create in the upcoming sections.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `/core/` directory is used to store the common functions or classes that
    can be used throughout the app.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `middlewares.js` file is the core location for importing middleware from
    the `/middlewares/` and `/node_modules/` directories.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `routes.js` file is the core location for importing routes from the `/modules`
    directory.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `backpack.config.js` file is used to customize the webpack configuration
    for our app.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `package.json` file contains the scripts and dependencies of our app and
    is always located at the root level.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Point the entry file to the `index.js` file in the `/public/` directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Remember that the default entry file in Backpack is an `index.js` file in the
    `/src/` directory. Since we have moved this index file to the `/public/` directory,
    we must configure this entry point through the Backpack config file.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to know more about the entry points in webpack, please visit [https://webpack.js.org/concepts/entry-points/](https://webpack.js.org/concepts/entry-points/).
  prefs: []
  type: TYPE_NORMAL
- en: 'Add aliases for the `/configs`, `/core`, `/modules`, and `/middlewares` paths
    to the `resolve` option in the webpack configuration before returning the `config`
    object in the Backpack config file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Using aliases to resolve the file path in our app is very useful and handy.
    Typically, we import files using the relative paths, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Instead of doing this, now, we can import files from anywhere with the alias
    that tucks away the relative path, thus making our code neater:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: If you want to find out more about the alias and resolve options in webpack,
    please visit [https://webpack.js.org/configuration/resolve/resolvealias](https://webpack.js.org/configuration/resolve/#resolvealias).
  prefs: []
  type: TYPE_NORMAL
- en: Once you have the preceding structure ready and the entry file sorted, you can
    start applying the CRUD operations with RethinkDB to this API. But first, you
    will need to install the **RethinkDB JavaScript client** into your project. So,
    let's get started!
  prefs: []
  type: TYPE_NORMAL
- en: Adding and using the RethinkDB JavaScript client
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Depending on the programming knowledge you have, there are several official
    client drivers you can choose from regarding JavaScript, Ruby, Python, and Java.
    There are many community-supported drivers as well, such as PHP, Perl, and R.
    You can check them out at [https://rethinkdb.com/docs/install-drivers/](https://rethinkdb.com/docs/install-drivers/).
  prefs: []
  type: TYPE_NORMAL
- en: 'In this book, we will be using the RethinkDB JavaScript client driver. We will
    guide you through the installation and how to use the CRUD operations using this
    driver in the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install the RethinkDB JavaScript client driver via npm:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a `rethinkdb.js` file that will contain the RethinkDB server connection
    details in the `/configs/` directory, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a `connection.js` file for opening a RethinkDB server connection with
    the preceding connection details in the `/core/` directory, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Also, create an open connection middleware with an `open.js` file in the `/middlewares/`
    directory and bind it to the Koa context as another option to connect to RethinkDB,
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: It is a good practice, which we learned from PHP's PSR-4, to use the directory
    path to describe your middleware (or CRUD operations) so that you don't have to
    use a long name to describe your file. For example, you might want to name this
    middleware `rdb-connection-open.js` to describe what it is **as clearly as possible** if
    you are not using a descriptive directory path for it. But if you are using the
    directory path to describe the middleware, then you can just name the file something
    as simple as `open.js`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a close connection middleware with a `close.js` file in the `/middlewares/`
    directory and bind it to the Koa context as the last middleware, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Import the `open` and `close` connection middleware in the root `middlewares.js`
    file and register them to the app, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Here, you can see that the `open` connection middleware is registered **before**
    all the module routes and that the `close` connection middleware is registered
    **last** so that they are called first and last, respectively.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the upcoming steps, we will use the following template code with a Koa router
    and the RethinkDB client driver to make the CRUD operation. For example, the following
    code shows how we apply the template code for fetching all the users from the
    `user` table in the `user` module:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Let's go through this code and understand what it does. Here, you can see that
    we are using a custom top-level namespace, `rdb`, for the RethinkDB client driver,
    as opposed to the `r` namespace that you have practiced on `localhost:8080`. Also,
    when using the RethinkDB client driver in our app, we must always call the `run`
    method at the end of the ReQL commands with the RethinkDB server connection to
    construct the query and pass it onto the server for execution.
  prefs: []
  type: TYPE_NORMAL
- en: Furthermore, we must call the `next` method at the end of the code so that we
    can pass the execution of the app to the next piece of middleware, especially
    the `close` connection middleware, which is used to close the RethinkDB connection.
    We should perform checks on the incoming parameters and data from the client before
    performing any CRUD operations. Then, we should wrap our code in `try-catch` blocks
    to catch and throw any potential errors.
  prefs: []
  type: TYPE_NORMAL
- en: Note that in the upcoming steps, we will skip writing the parameter verification
    and the try-catch statement from the code to avoid lengthy and repetitive code
    lines and blocks, but you should have them included in your actual code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a `create-user.js` file in the `/_routes/` folder in the `user` module
    with the following code for injecting new users into the `user` table in the database:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: We should throw the error if the insertion fails and pass the error message
    to the Koa `throw` method with the HTTP error code so that we can catch them with
    the `try-catch` blocks and display them on the frontend.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a `fetch-user.js` file in the `/_routes/` folder in the `user` module
    to fetch a specific user from the `user` table by using the `slug` key, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: We added the `nth` command in the query to display the document by its position.
    In our case, we just want to get the first document, so we pass a `0` integer
    to this method. We also added the `default` command to return a `null` exception
    if no users are found in the `user` table.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create an `update-user.js` file in the `/_routes/` folder in the `user` module
    for updating the existing user in the `user` table by using the document ID, as
    follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: We added the `get` command in the query to fetch the specific document by its
    ID first, before running the update.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a `delete-user.js` file in the `/_routes/` folder in the `user` module
    for deleting the existing user from the `user` table by using the document ID,
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Lastly, refactor the CRUD operation for listing all the users from the `user`
    table that you just created in *step 7* by adding an `orderBy` command to the
    query in the `index.js` file, which is kept in the `/_routes/` folder, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: We added the `orderBy` command to the query so that we can sort the documents
    by their creation dates descendingly (the latest first). Also, the documents returned
    by the RethinkDB database are always contained in a **cursor object** as a callback
    from the CRUD operation, so we must use the `toArray` command to iterate through
    the cursor and convert the object into an array.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to find out more about the `orderBy` and `toArray` commands, please
    visit [https://rethinkdb.com/api/javascript/order_by/](https://rethinkdb.com/api/javascript/order_by/)
    and [https://rethinkdb.com/api/javascript/to_array/](https://rethinkdb.com/api/javascript/to_array/),
    respectively.
  prefs: []
  type: TYPE_NORMAL
- en: With that, you have implemented the CRUD operations with RethinkDB in your API
    successfully. Again, this is easy and fun, isn't it? But we still can improve
    the "quality" of the document we store in the database by enforcing schema in
    the RethinkDB databases. We'll learn how to do this in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Enforcing schema in RethinkDB
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Just like the BSON databases in MongoDB, the JSON databases in RethinkDB are
    also **schemaless**. This means no blueprints and no formula or integrity constraints
    are imposed on the databases. No organized rule of how the database is constructed
    can pose the issue of integrity in our databases. Certain documents can contain
    different and unwanted keys in the same table (or "collection" in MongoDB), along
    with the documents that have the correct keys. You may inject some keys by mistake
    or forget to inject the required keys and values. So, it can be a good idea to
    enforce some sort of schema in our JSON or BSON databases if you want to keep
    the data in your documents organized. There is no internal feature from RethinkDB
    (or MongoDB) for enforcing the schema, but we can create custom functions to impose
    some basic schema with the Node.js Lodash module. Let''s explore how to do this:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install the Lodash module via npm:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a `utils.js` file in the `/core/` directory and import `lodash` to create
    a function called `sanitise`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: This function simply picks the default keys that you set and ignores any additional
    keys that are not in the "schema".
  prefs: []
  type: TYPE_NORMAL
- en: 'We are using the following methods from Lodash. For more information about
    each of them, please visit the following links: [https://lodash.com/docs/4.17.15#keys](https://lodash.com/docs/4.17.15#keys) for
    the `keys`method [https://lodash.com/docs/4.17.15#defaults](https://lodash.com/docs/4.17.15#defaults) for
    the `defaults`method [https://lodash.com/docs/4.17.15#pick](https://lodash.com/docs/4.17.15#pick) for
    the `pick` method'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a `user` schema in the `user` module with the following keys that only
    you want to accept:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Import the `sanitise` method and the preceding schema into the route that you
    want to enforce the schema; for example, in the `create-user.js` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, the example fields, `username` and `password`, won't
    be injected into the document in the `user` table when sanitizing the data before
    insertion.
  prefs: []
  type: TYPE_NORMAL
- en: You can see that this `sanitise` function only performs a simple validation.
    If you need more complicated and advanced data validation, you can use the Node.js
    joi module from the hapi web framework.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to find out more about this module, please visit [https://hapi.dev/module/joi/](https://hapi.dev/module/joi/).
  prefs: []
  type: TYPE_NORMAL
- en: The next thing you must explore is the **changefeeds** in RethinkDB. This is
    the main purpose of this chapter – to show you how to make use of the real-time
    feature of RethinkDB to create real-time apps. So, let's explore and play with
    the changefeeds in RethinkDB!
  prefs: []
  type: TYPE_NORMAL
- en: Introducing changefeeds in RethinkDB
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before applying the changefeeds in our app with the RethinkDB client driver,
    let''s use the Data Explorer from the Administration UI again at `localhost:8080/#dataexplorer`
    to see the real-time feeds in real time on the screen:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Paste in the following ReQL query and click the Run button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see the following information on your browser screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'Open another tab on your browser and point it to `localhost:8080/#dataexplorer`.
    Now, you have two data explorers. Drag one out from the browser tab so that you
    can place them side by side. Then, insert the new documents into the `user` table
    from one of the data explorers:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'You should get the following result:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'At the same time, you should see the other Data Explorer displaying the following
    feeds instantaneously in real time:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'Hooray! You have just made real-time feeds effortlessly with RethinkDB! Notice
    that you will always get these two keys, `new_val` and `old_val`, in each of the
    real-time feeds. They have the following implications:'
  prefs: []
  type: TYPE_NORMAL
- en: If you get the data in `new_val` but it's `null` in `old_val`, that means the
    new document is injected into the database.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you get the data in both `new_val` and `old_val`, that means the existing
    document is updated in the database.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you get the data in `old_val` but it's `null` in `new_val`, that means the
    existing document is removed from the database.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You will get to use these keys when we use them in the Nuxt app in the last
    section of this chapter. So, don't worry too much about them for now. Instead,
    the next challenge is to implement it in the API and the Nuxt app. To do that,
    we will need another Node.js module – **Socket.IO**. So, let's explore how this
    module can help you to achieve that.
  prefs: []
  type: TYPE_NORMAL
- en: Introducing Socket.IO
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Just like HTTP, WebSocket is a communication protocol, but it provides full-duplex
    (bidirectional) communication between the client and the server. Unlike HTTP,
    the WebSocket connection always remains open for real-time data transfer. So,
    in WebSocket apps, the server can send data to the client without having the client
    initiate the request.
  prefs: []
  type: TYPE_NORMAL
- en: 'Also, unlike the HTTP schema that starts with HTTP or HTTPS for Hypertext Transfer
    Protocol Secure, the WebSocket protocol schema starts with `ws` or `wss` for WebSocket
    Secure; for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: Socket.IO is a JavaScript library that uses the WebSocket protocol and polling
    as the fallback option for creating real-time web apps. It supports any platform,
    browser, or device and handles all the degradation for the server and client to
    get the full-duplex communication in real time. Most browsers support the WebSocket
    protocol these days anyway, including Google Chrome, Microsoft Edge, Firefox,
    Safari, and Opera. But when using Socket.IO, we must use its client-side and server-side
    libraries together. The client-side library runs inside the browser, while the
    server-side library runs on your server-side Node.js app. So, let's get these
    two libraries working in our apps.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to find out more about Socket.IO, please visit [https://socket.io/](https://socket.io/).
  prefs: []
  type: TYPE_NORMAL
- en: Adding and using Socket.IO server and client
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will add the Socket.IO server to the API that we have been building in the
    last few sections, and then add the Socket.IO client to the Nuxt app eventually.
    But before adding it to the Nuxt app, we will add it to a simple HTML page so
    that we have a bird''s-eye view of how the Socket.IO server and Socket.IO client
    work together. Let''s learn how to do so:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install the Socket.IO server via npm:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'Create an `index.js` file in the `/configs/` directory to store the server
    setting if you haven''t done so yet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: From this simple setting, we will be serving our API at port 4000.
  prefs: []
  type: TYPE_NORMAL
- en: 'Import `socket.io` and bind it to the Node.js HTTP object with the new instance
    of Koa to create a new instance of Socket.IO, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'After creating the new instance of Socket.IO, we can start listening to the
    Socket.IO `connection` event for the incoming socket from the `socket` callback.
    We log the incoming socket to the console with its ID. We also log the incoming
    socket''s `disconnect` event when it is disconnected. Lastly, notice that we start
    and serve the app on `localhost:4000` by using the native Node.js HTTP, as opposed
    to using the HTTP inside Koa, which we used to do:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a `socket-client.html` page and import the Socket.IO client via CDN.
    Create a new instance of it by passing `localhost:4000` as the specific URL, as
    follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, if you browse this HTML page on your browser, or when you refresh the
    page, you should see the console printing the log with the socket ID, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'You should also see the console printing the log with the socket ID when you
    close the HTML page, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: That's all you need to do in order to connect the server and client sides of
    Socket.IO. This is extremely simple and easy, isn't it? But all we're doing here
    is connecting and disconnecting the server and client. We need more from them
    – we want to transmit data simultaneously. To do that, we just need to emit and
    receive events from and to each other, which we'll do in the upcoming steps.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to use the local version of the Socket.IO client, you can point
    the script tag's URL source to `/node_modules/socket.io-client/dist/socket.io.js`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create an emit event from the server by using the `emit` method from the Socket.IO
    server, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, you can see that we emit the event with a simple message through the
    custom event called `emit.onserver` and log the activity to the console. Notice
    that we can only emit the event when the connection is established. Then, we can
    listen to this custom event on the client-side and log the message coming from
    the server, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'So, now, if you refresh the page again on your browser, you should see the
    console printing the log with the socket ID, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'Create an emit event from the client by using the `emit` method from the Socket.IO
    client, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: Here, you can see that, first, we install jQuery via CDN and create a `<button>`
    with the jQuery `click` event. Secondly, we emit the Socket.IO custom event called
    `emit.onclient` with a simple message when the button is clicked. Lastly, we log
    the activity to the console.
  prefs: []
  type: TYPE_NORMAL
- en: 'After that, we can listen to the Socket.IO custom event on the server-side
    and log the message coming from the client, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'If you refresh the page again on your browser, you should see the console printing
    the log, along with the socket ID, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: You now know how to transmit data back and forth in real time with Socket.IO
    – just by emitting custom events and listening to them. The next thing you should
    know about is how to integrate Socket.IO with the changefeeds in RethinkDB in
    order to transmit the real-time data from the database to the client. So, keep
    reading!
  prefs: []
  type: TYPE_NORMAL
- en: Integrating Socket.IO server and RethinkDB changefeeds
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Remember that you fiddled with the RethinkDB changefeeds previously, using
    the Data Explorer from the Administration UI again at `localhost:8080/#dataexplorer`.
    To subscribe to a changefeed, you just have to chain the ReQL `changes` command
    to the query, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'The RethinkDB changefeeds contain real-time data that''s emitted from the RethinkDB
    database to our API, which means we need to catch these feeds on the server-side
    with the Socket.IO server and emit them to the client. So, let''s learn how to
    catch them by refactoring the API we have been developing throughout this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install the Socket.IO server via npm into your API:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: 'Create an asynchronous anonymous arrow function in a `changefeeds.js` file
    in the `/core/` directory with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'In this function, we import `rethinkdb` as `rdb` and our RethinkDB database
    connection as `rdbConnection`, and then use the following items as the parameters
    of this function:'
  prefs: []
  type: TYPE_NORMAL
- en: The instance of the Socket.IO server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Socket.IO emit custom event name that you will want to use
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The RethinkDB table name that you want to subscribe to its changefeed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The changefeed will return the documents in a cursor object as a callback, so
    we iterate through the cursor object and emit each row of the document with the
    custom event name.
  prefs: []
  type: TYPE_NORMAL
- en: 'Import the `changefeeds` function as `rdbChangeFeeds` in the app root in the
    `/public/` directory and integrate it with the rest of the existing code in the
    `index.js` file, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, the table name we want to subscribe to is `user` and
    the emit event name we want to call is `user.changefeeds`. So, we pass them into
    the `rdbChangeFeeds` function with the `socket.io` instance. That's all you need
    to do to integrate Socket.IO and RethinkDB once only and globally.
  prefs: []
  type: TYPE_NORMAL
- en: Well done! You have managed to integrate Koa, RethinkDB, and Socket.IO on the
    server-side and created a real time API. But what about the client side, and how
    do we listen to the event being emitted from the API? We'll find out in the next
    section.
  prefs: []
  type: TYPE_NORMAL
- en: Integrating Socket.IO with Nuxt
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Nuxt app we are going to build is very similar to the one we had in the
    previous chapter, where we had a `/users/` directory that contains the following
    CRUD pages in the `/pages/` directory for adding, updating, listing, and deleting
    users:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: 'You can copy these files from the previous chapter. The only major change and
    difference in this app is the `<script>` block, where we will list users in real
    time by listening to the emit event from the Socket.IO server. To do that, we
    will need to use the Socket.IO client, which you learned in the *Adding and using
    Socket.IO server and client* section with the simple HTML page. So, let''s find
    out how to implement what we already know into the Nuxt app:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install the Socket.IO client via npm into your Nuxt project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: 'Create the following variables for the app''s protocol, hostname, and the cross-domain
    ports in the Nuxt config file so that we can reuse them later:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: 'These variables are made for the following situations:'
  prefs: []
  type: TYPE_NORMAL
- en: The `host` variable is used to take the value of `a-cool-domain-name.com` when
    the Nuxt app is in production; that is, when you run the app with `npm run start`.
    Otherwise, it just takes `localhost` as the default value.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `local` key in the `ports` variable is used to set a server port for the
    Nuxt app and it is set to `8000`. Remember that the default port that Nuxt serves
    the app is `3000`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `remote` key in the `ports` variable is used to tell the Nuxt app what server
    port the API is on, which is `4000`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `remoteUrl` variable is used to concatenate the API with the preceding variables.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Apply the preceding variables to the `env` and `server` options in the Nuxt
    config file, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: 'So, with this configuration, we can access the `remoteUrl` variable again when
    serving the app via the following methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '`process.env.remoteUrl`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`context.env.remoteUrl`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Also, in this configuration, we have changed the Nuxt app's default server port
    to `8000` in the `server` option. The default port is `3000`, while the default
    host is `localhost`. But you may want to use a different port for some reason.
    That's why we looked at how to change them here.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to find out more about the `server` configuration and other options
    such as `timing` and `https`, please visit [https://nuxtjs.org/api/configuration-server](https://nuxtjs.org/api/configuration-server).
  prefs: []
  type: TYPE_NORMAL
- en: If you want to find out more about the `env` configuration, please visit [https://nuxtjs.org/api/configuration-envthe-env-property](https://nuxtjs.org/api/configuration-env#the-env-property).
  prefs: []
  type: TYPE_NORMAL
- en: 'Install the Nuxt Axios and Proxy modules and configure them in the Nuxt config
    file, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: Notice that we have reused the `remoteUrl` variable in the `proxy` option. So,
    every API request we make that starts with `/api/` will be converted into `http://localhost:4000/api/`.
    But since we don't have `/api/` in the routes in the API, we remove this `/api/`
    section from the request URL with the `pathRewrite` option before sending it off
    to the API.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a plugin in the `/plugin/` directory for abstracting the instance of
    the Socket.IO client so that we can reuse it anywhere:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: Notice that we have reused the `remoteUrl` variable via `process.env.remoteUrl`
    in the Socket.IO client instance. This means the Socket.IO client will call the
    Socket.IO server at `localhost:4000`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Import the `socket.io` client plugin into the `<script>` block and fetch the
    list of users with the `@nuxtjs/axios` module in the `index` file. This index
    file is kept in the `/users/` directory, under `pages`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: 'After fetching and setting the users with the `asyncData` method, use the Socket.IO
    plugin to listen to the `user.changefeeds` event in the `mounted` method for any
    new real-time feeds from the server, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: Here, you can see that we always check the `data` callback to make sure that
    `new_val` and `old_val` are defined in the incoming feed. In other words, we want
    to ensure these two keys are always present in the feed before proceeding to the
    following lines.
  prefs: []
  type: TYPE_NORMAL
- en: 'After checking this, if we receive data in the `new_val` key but the `old_val`
    key is empty, this means a new user has been added to the server. If we get a
    new feed from the server side, we will prepend the new user data to the top of
    the `user` array by using the JavaScript `unshift` function, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, if we receive data in the `old_val` key but the `new_val` key is empty,
    this means an existing user has been deleted from the server. So, to pop off an
    existing user from the array by its index (its position/location in the array),
    we can use the JavaScript `splice` function. But first, we must find the index
    of the user by its ID using the JavaScript `map` function, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: 'Lastly, if we receive data in both the `new_val` and `old_val` keys, this means
    a current user has been updated. So, if a user has been updated, we must find
    the user''s index in the array first and then replace it with the JavaScript `splice`
    function., as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: Note that we use the JavaScript `findIndex` function instead as another alternative
    to the `map` function.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to find out more information about the JavaScript standard built-in
    functions we have used here for manipulating the JavaScript arrays, please visit
    the following links:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/unshift](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/unshift) for
    the `unshift` function'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice) for
    the `splice` function'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map) for
    the `map` function'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex) for
    the `findIndex` function'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Add the following template to the `<template>` block to display the users,
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: In this template, you can see that we simply loop the user data we get from
    the `asyncData` method with `v-for` and bind the user `uuid` to each looped element.
    After that, any real-time feed that occurs in the `mounted` method will update
    the user data and the template reactively.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the Nuxt app with `npm run dev`. You should the following information on
    your terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: Open two tabs on your browser side by side, or two different browsers side by
    side, and point them to `localhost:8000/users`. Add a new user from one of the
    tabs (or browsers) at `localhost:8000/users/add`. You should see that the newly
    added user is shown on all the tabs (or browsers) instantly and concurrently,
    in real time, without you needing to refresh them.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can find all the code and apps in this chapter in `/chapter-17/frontend/`
    and `/chapter-17/backend/` in this book's GitHub repository.
  prefs: []
  type: TYPE_NORMAL
- en: Well done – you have made it! We hope you found this application fun and easy
    and that it inspires you to venture further with what you've learned so far. Let's
    summarize what we have learned in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you managed to install and use RethinkDB and Socket.IO to turn
    the ordinary backend API and frontend Nuxt app into real-time apps. You learned
    how to manipulate the JSON data by creating, reading, updating, and deleting them
    on the server side with RethinkDB through the RethinkDB Administration UI, and
    then used the RethinkDB client driver with Koa. Most importantly, you learned
    how to manipulate the real time feeds in RethinkDB, known as changefeeds, through
    the RethinkDB Administration UI as well, and then integrated them with the Socket.IO
    server and Koa on the server side. Furthermore, you used the Socket.IO server
    to emit data with custom events and the Socket.IO client to listen to the event
    and catch the data in real-time on the client side with the Nuxt app. Wasn't it
    a fun ride?
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will take Nuxt further with third-party APIs, **content
    management systems** (**CMS**), and GraphQL. You will be introduced to WordPress
    API, Keystone, and GraphQL. You will then learn how to create custom content types
    and custom routes to extend the WordPress API so that you can integrate it with
    Nuxt and stream remote images from the WordPress project. You will be developing
    custom CMS using Keystone, installing and securing PostgreSQL for Keystone app
    development, as well as securing MongoDB, which you learned how to install in
    [Chapter 9](232649f7-ae3b-43d7-a74e-55b481c4830c.xhtml), *Adding a Server-Side
    Database*. Most importantly and excitingly, you will learn the differences between
    the REST API and the GraphQL API; build a GraphQL API with GraphQL.js, Express,
    and Apollo Server; understand the GraphQL schema and its resolvers; use the Keystone
    GraphQL API; and then integrate them with Nuxt. It will definitely be another
    fun ride, so buckle up and get ready!
  prefs: []
  type: TYPE_NORMAL
