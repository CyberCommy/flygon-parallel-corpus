- en: Chapter 18. Tracking Changes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter will examine how we can use the change-tracking mechanism, in order
    to record structure and data changes done from the phpMyAdmin interface and to
    obtain reports about such changes.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the goals of the tracking system
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Each software application has its own idea of what changes are important to
    track for its users. This section describes tracking systems that exist in other
    applications, and compares them to the one offered by phpMyAdmin.
  prefs: []
  type: TYPE_NORMAL
- en: Tracking in other software applications
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Having access to historic data that displays all of the changes made to an information
    system is a feature that is taken for granted in many software products. The "undo"
    feature of any serious word-processing software is an example of being able to
    go back in time, albeit one step at the time. A more complex example would be
    the history feature of MediaWiki (the core software of Wikipedia). It enables
    us to go back to any state of a given page, to see the changes between any two
    versions, and even to mark any older version as the current one. Tracking information
    includes the author (or IP address), the date and time of change, and a comment.
  prefs: []
  type: TYPE_NORMAL
- en: 'In MySQL itself, the logging system `(binlog)` records all changes made to
    the database; however, in this case, the goal is two-fold:'
  prefs: []
  type: TYPE_NORMAL
- en: To allow master-slave synchronization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To enable restoration via the `mysqlbinlog` command-line utility
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tracking in phpMyAdmin
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: phpMyAdmin's tracking system allows the user to specify which table is going
    to be tracked, so it can be called an **opt-in system**. By default, no table
    is tracked unless a developer elects to do so; and when a developer activates
    tracking for a table, changes start to be recorded even if performed by someone
    else. Only the changes done via phpMyAdmin are recorded.
  prefs: []
  type: TYPE_NORMAL
- en: 'Furthermore, for a given table, we can indicate which statements we are interested
    in tracking. The list of statements is divided into two groups: data definition
    and data manipulation.'
  prefs: []
  type: TYPE_NORMAL
- en: Suppose that a team is working on a project that involves making changes to
    the structure of tables. With tracking activated and assuming that each developer
    logs in to MySQL with his or her own account, we now have access to historic data,
    including information about which developer dropped some critical column! Of course,
    this tracking is not tamper-proof; after all, it's stored in a MySQL table so
    the security of this tracking information depends on who has access to the tracking
    table.
  prefs: []
  type: TYPE_NORMAL
- en: Prerequisites
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The phpMyAdmin configuration storage holds all metadata for the tracking mechanism.
    If we have implemented this storage a while ago (for a previous phpMyAdmin version,
    such as 3.1 or older), we can use `scripts/create_tables.sql` from the current
    phpMyAdmin version to upgrade the configuration storage with the missing tables
    (in our case, the `pma_tracking` table). The reason for this is that the script
    creates this table in a prudent way by using the `CREATE TABLE IF NOT EXISTS `pma_tracking``
    statement, thus ensuring that it won't be created if the table is already present.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In phpMyAdmin 3.3.3, the type of the `data_sql` column in `pma_tracking` was
    changed from `TEXT` to `LONGTEXT` in the `create_tables.sql` script. Therefore,
    it's important to make this change manually in our own `pma_tracking` table, if
    we ran this script prior to version 3.3.3.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring a basic tracking mechanism
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In `config.inc.php`, for a specific MySQL server's configuration, the `$cfg['Servers'][$i]['tracking']`
    should contain the name of the tracking table; the suggested name is `pma_tracking`
    to match the default value inside `scripts/create_tables.sql`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If this directive is left blank, no tracking is possible on this server (we
    won't see any **Tracking** menu).
  prefs: []
  type: TYPE_NORMAL
- en: By default, tracking must be activated per table. If we prefer that the tracking
    mechanism be switched on automatically for all future tables and views, the `$cfg['Servers'][$i]['tracking_version_auto_create']`
    can be set to `TRUE`. Please note that this is only for future tables and views—we
    still need to activate tracking for existing tables.
  prefs: []
  type: TYPE_NORMAL
- en: The advantage of using automatic creation is that we don't have to think about
    it; tracking is done from the birth of a table. An inconvenient side effect of
    this is that we don't have the possibility of choosing which statements will be
    tracked; these will be taken from the default list (refer to the *Choosing the
    statements to be tracked* section later in this chapter).
  prefs: []
  type: TYPE_NORMAL
- en: Other configuration directives will be discussed in the section that relates
    to them.
  prefs: []
  type: TYPE_NORMAL
- en: Principles
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This section defines important principles on which the tracking mechanism is
    based: versioning, snapshot, and the archiving issues of tracking information.'
  prefs: []
  type: TYPE_NORMAL
- en: Versioning
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Using version numbers is something we are familiar with; for example, this book
    describes phpMyAdmin version 3.4.x. However, at this point we must understand
    exactly why we use version numbers.
  prefs: []
  type: TYPE_NORMAL
- en: A good reference on software versioning is located in Wikipedia at [http://en.wikipedia.org/wiki/Software_versioning](http://en.wikipedia.org/wiki/Software_versioning).
    This article mentions that version names can be used, but version numbers are
    more common. More importantly, it states that version numbers "correspond to new
    developments in the software".
  prefs: []
  type: TYPE_NORMAL
- en: 'If we apply this principle to database development, the decision that a table
    is ripe for a new version should be made by the development team when a significant
    change is about to occur on this table. How significant the change has to be in
    order to trigger a new version is a matter of interpretation within the team.
    At least one of these decisions is easy to make: version 1 always represents the
    moment where we first switch on the tracking for a particular table.'
  prefs: []
  type: TYPE_NORMAL
- en: In the situation where data manipulation statements are tracked, we should note
    also that the change can be relative to data itself, not necessarily to the structure.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: phpMyAdmin's tracking system uses only positive integers as version numbers;
    it's not possible to use a decimal point as in "1.1".
  prefs: []
  type: TYPE_NORMAL
- en: Taking a snapshot of the current structure
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Every time we create a new version, the tracking system takes a snapshot of
    the current structure and indexes of the table, and creates a new entry in the
    tracking system. In this entry are stored the database name, table name, version
    number, date of creation, and the complete structure information.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This tracking snapshot does not contain a table's data! Therefore, the tracking
    system does not replace a backup system.
  prefs: []
  type: TYPE_NORMAL
- en: During the lifespan of this table after the snapshot has been taken, all tracked
    statements are stored alongside this snapshot. Therefore, a table tracking version
    consists of the snapshot in addition to all of the changes made after this snapshot
    was taken, until a new version is started.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding archiving issues
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When a table is dropped, its tracking information survives, unless we decide
    to suppress it. The impact of this will be discussed later in the *Deleting tracking
    information* section.
  prefs: []
  type: TYPE_NORMAL
- en: Initiating tracking for one table
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we will use the **Tracking** menu in `Table` view to start
    collecting the changes that occur for the `author` table. So we open the `author`
    table and then click on **Tracking**, which produces the following screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Initiating tracking for one table](img/7782_18_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This panel tells us that we are about to create version 1 of the table; this
    is what we expected. We are offered a choice of data definition and data manipulation
    statements; for now we will leave all of them marked, and will click on **Create
    version** button. The next section explains how we can specify which statements
    are to appear in the panel shown above.
  prefs: []
  type: TYPE_NORMAL
- en: 'After version 1 is created, the following confirmation panel is shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Initiating tracking for one table](img/7782_18_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We notice that two distinct actions took place:'
  prefs: []
  type: TYPE_NORMAL
- en: The creation of version 1 itself
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The activation of tracking for this table
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Indeed, one or many versions of a table may exist, each one containing a snapshot
    from some point in time and the changes since this snapshot; but this is independent
    of the fact that tracking is active for a table and changes are being recorded.
  prefs: []
  type: TYPE_NORMAL
- en: In this panel, we see sub-panels that will be covered in the *Choosing the statements
    to be tracked* and *Deactivating and activating tracking* sections.
  prefs: []
  type: TYPE_NORMAL
- en: Choosing the statements to be tracked
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`$cfg[''Servers''][$i][''tracking_default_statements'']` contains a string
    that consists of comma-separated statements. These are the ones that are offered
    in the panel where we can choose which statements we want to track. The default
    list of statements is defined as follows; please note the presence of dot characters
    that permit the concatenation of strings in PHP:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Testing the tracking mechanism
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We are now ready to verify that this tracking system really works! As the system
    is supposed to track `ALTER TABLE` statement, we will make a slight structure
    change and see what happens. We go to the **Structure** panel for table **author**,
    select the **name** column, and increase its size from **30** to **40** characters
    (refer to [Chapter 5](ch05.html "Chapter 5. Changing Data and Structure") for
    the detailed steps).
  prefs: []
  type: TYPE_NORMAL
- en: 'We get a message, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Testing the tracking mechanism](img/7782_18_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We will perform another action, this time related to data itself—changing the
    phone number of author **John Smith** to **111-2222**.
  prefs: []
  type: TYPE_NORMAL
- en: To ensure that these actions were recorded by the tracking system, let us compile
    a report.
  prefs: []
  type: TYPE_NORMAL
- en: Tracking report
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Going back to the **Tracking** panel (still in `Table` view for **author)**
    we click on **Tracking report** for version 1, which produces a report as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Tracking report](img/7782_18_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In fact, the report is prefixed to the main tracking information; we could click
    on **Close** and be back to where we were previously.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can see that under the **Tracking report** header, a list of the statements
    that are tracked is shown. Then we have a selector to determine if we want to
    see on the report the statements corresponding to:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Structure and data**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Structure only**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Data only**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We can also specify the range of dates and times for which we want to produce
    the report. It's also possible to indicate which users we want to report on (an
    asterisk represents all users).
  prefs: []
  type: TYPE_NORMAL
- en: The main part of the report consists of the statements themselves; here we see
    four statements. The first statement is a `DROP TABLE` statement, which would
    be useful to create this table anew should we need to export this version and
    import it back. The second statement `(CREATE TABLE)` contains the snapshot that
    was taken when version 1 was initiated. Then we see the `ALTER TABLE` and `UPDATE`
    statements that correspond to the actions we performed as a test.
  prefs: []
  type: TYPE_NORMAL
- en: How to export a structure will be covered in the *Exporting a version* section
    later in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Determining tracking status
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let us cover all of the places in the interface where we can ascertain the
    tracking activity for a table. First, in `Table` view, we can see a message positioned
    under the menu tabs, stating that tracking is activated for this table, as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Determining tracking status](img/7782_18_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In the **Tracking** panel itself, a **Status** column tells us that tracking
    is either **active** or **not active** for the latest version. In fact, when we
    create another version for the table, we will see that only the current version
    can have an active tracking status, as previous versions now only contain historical
    data.
  prefs: []
  type: TYPE_NORMAL
- en: '![Determining tracking status](img/7782_18_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'In `Database` view, each table that is tracked by the system (with an active
    or not active status) is shown with the icon of an eye either in color or grayed
    out, depending upon its status. In the following example, the eye is in color:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Determining tracking status](img/7782_18_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This eye icon is clickable and brings us to the **Tracking** panel for this
    specific table.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, in `Database` view, the **Tracking** menu provides us with an overview
    of all the tables. First the tracked tables are presented, then the untracked
    ones. For either category, we have links to see more information or to start tracking:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Determining tracking status](img/7782_18_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'For the tracked tables, the following table gives a breakdown of the information
    presented, along with the available links:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Title or link | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| **Database** | In which database the table is located |'
  prefs: []
  type: TYPE_TB
- en: '| **Table** | Which table is tracked |'
  prefs: []
  type: TYPE_TB
- en: '| **Last version** | The latest tracked version; it''s interesting to see how
    many versions exist for this table |'
  prefs: []
  type: TYPE_TB
- en: '| **Created** | When was this version created |'
  prefs: []
  type: TYPE_TB
- en: '| **Updated** | When was the last tracked statement stored for this table |'
  prefs: []
  type: TYPE_TB
- en: '| **Status** | Active or not active |'
  prefs: []
  type: TYPE_TB
- en: '| **Action** | The **Drop** link can be used to remove all tracking (refer
    to the *Deleting tracking information* section later in this chapter) |'
  prefs: []
  type: TYPE_TB
- en: '| **Show** &#124; **Versions** | Enters `Table` view for this table, and displays
    the tracking versions |'
  prefs: []
  type: TYPE_TB
- en: '| **Show** &#124; **Tracking report** | Enters `Table` view for this table,
    and displays the tracking report |'
  prefs: []
  type: TYPE_TB
- en: '| **Show** &#124; **Structure snapshot** | Enters `Table` view for this table,
    and displays the structure snapshot (refer to the *Structure snapshot* section
    later in this chapter) |'
  prefs: []
  type: TYPE_TB
- en: For the untracked tables, a **Track table** link allows us to enter `Table`
    view for this table, directly in the **Tracking** panel, hence creating version
    1 in order to start the tracking mechanism.
  prefs: []
  type: TYPE_NORMAL
- en: Deactivating and activating tracking
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: From the **Tracking** page of a specific table, the **Deactivate now** button
    (which acts as a toggle, and changes to **Activate now)** is the one to use if
    we wish to stop (temporarily or permanently) further storing of the tracked statements.
    Past statements that were stored remain untouched in the tracking data related
    to the current version.
  prefs: []
  type: TYPE_NORMAL
- en: Structure snapshot
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the **Tracking** panel of `Table` view, the **Structure snapshot** link displays
    the past state of the table at the time this version was created. The panel shows
    both the stored SQL code and a visual representation in the familiar phpMyAdmin
    **Structure** panel format.
  prefs: []
  type: TYPE_NORMAL
- en: '![Structure snapshot](img/7782_18_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Exporting a version
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As the complete SQL code at the time of creation for a specific version has
    been stored along with all of the tracked statements that occurred since that
    moment, we might want to reuse them in their executable form. At the bottom of
    the **Tracking report** panel, an **Export as** dialog is available, offering
    three variants for exporting. If we choose **SQL dump (file download)** menu option,
    then all of the statements stored for this version are transferred in a file that
    we can save to our workstation. For the `author` table, this would produce a file
    containing the following lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: If, instead, we pick the **SQL dump** choice, the statements appear on screen
    in a text area; from this point we could cut and paste the SQL code or click on
    **Go** to run it. As a measure of precaution, extra statements are generated on
    top of the code; these handle the creation of another database in which the table
    would be created. Of course the user must have the rights to create this database.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, the **SQL execution** choice permits to directly execute the stored
    statements in the current database. However, a warning message is issued as these
    statements might reflect an older state of the table; we might not want to revert
    to this old state. Also, the first statement is, by default, a `DROP TABLE`, which
    may or may not succeed depending on whether some foreign key constraint blocks
    the deletion of the table.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a new version
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As previously discussed, we can decide to mark a new milestone for a certain
    table; in other words, we can start a new version. We will now create a new version
    as an exercise.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the **Tracking** panel for the `author` table, we see the dialog for creating
    **version 2** (as the highest one is currently version 1):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a new version](img/7782_18_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We notice that each version can track its own set of statements; versions are
    independent from each other in this matter. Here, we have decided that version
    2 will track only data-definition statements. We now see something interesting
    relative to the status of these versions, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a new version](img/7782_18_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Indeed, version 1 was automatically marked as **not active**; it went into some
    kind of historical status. We can also have a look at version 2's snapshot, which
    reflects that the **name** column is a **VARCHAR(40)**.
  prefs: []
  type: TYPE_NORMAL
- en: Quickly accessing tracking information
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When we are in the **Tracking** panel for one table, a shortcut dialog allows
    us to go directly to the **Tracking** panel of any other tracked table.
  prefs: []
  type: TYPE_NORMAL
- en: 'To explore this feature, let us now create version 1 of the `book` table. After
    this is done, we examine the drop-down list next to **Show versions** button,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Quickly accessing tracking information](img/7782_18_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This list is similar to what we would see in the **Tracking** panel for database
    `marc_book` when looking at the **Tracked tables** portion, but without the need
    to go back to this panel.
  prefs: []
  type: TYPE_NORMAL
- en: Deleting tracking information
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A feature of the tracking system that might not be evident is that tracking
    information for all versions of a table, and thus for its whole lifespan, is still
    kept when the corresponding table is dropped. The reason is to keep the history
    information intact should we happen to create a table with the same name later
    on.
  prefs: []
  type: TYPE_NORMAL
- en: Let us do a copy of the `author` table (refer to [Chapter 9](ch09.html "Chapter 9. Performing
    Table and Database Operations") if needed), and name it `author_copy`. We then
    activate tracking on this new table. The last operation is to drop this `author_copy`
    table. Even if we no longer see it in the normal list of tables, it's different
    in the **Tracking** panel for database `marc_book`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Deleting tracking information](img/7782_18_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: At this point we can go back in time, sort of, and see the tracking report and
    snapshot for the versions of this deleted table. If we really want to remove all
    evidence of the table ever having existed, then we can use the **Drop** link to
    destroy the tracking data also (after clicking on **OK** in the subsequent confirmation
    panel).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we saw an overview of the benefits given by the statements'
    tracking feature, and then we covered all of the panels involved in the creation
    and maintenance of versions for tables.
  prefs: []
  type: TYPE_NORMAL
- en: The next chapter covers administration of a MySQL server, focusing on the management
    of user accounts and privileges.
  prefs: []
  type: TYPE_NORMAL
