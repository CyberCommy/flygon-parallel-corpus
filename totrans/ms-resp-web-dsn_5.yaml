- en: Chapter 5. Designing Small UIs Driven by Large Finger
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The intense popularity of touchscreen devices is nothing new to us—the web/mobile
    designers and developers. So we're not going to talk about market shares, statistics,
    or analytics numbers. Instead, we're going to talk about the things we need to
    consider to build a usable interface, such as target sizes, navigation patterns,
    navigation icons, best practices and mobile device ergonomics.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we''re going to cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: The ideal target sizes on small UIs.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The posture patterns and the touch zones.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The basic guidelines to consider for RWD.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The navigation patterns for RWD.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The ideal target sizes on small UIs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: All vendors have different sets of rules and guidelines regarding the ideal
    size of targets on small screen devices. Some of them refer to these sizes in
    pixels, others in points, and others in units such as inches, millimeters, or
    centimeters.
  prefs: []
  type: TYPE_NORMAL
- en: 'Regardless of the units these vendors use, they all agree on one basic concept:
    make your target size big enough to avoid accidental taps. This goes in hand with
    Fitts''s law, which states that *the smaller the target, the longer the user will
    take to reach it*.'
  prefs: []
  type: TYPE_NORMAL
- en: Obviously, as web designers, we have to be mindful of what *large* means in
    the context of our designs, so we need to balance the target size recommendations
    with good design principles. Our aim is that the messages should reach the users
    and they should be able to comfortably use our interfaces.
  prefs: []
  type: TYPE_NORMAL
- en: One thing to keep in mind is that the guidelines for target sizes for RWD are
    mostly based on mobile apps design patterns. Let's get right to it.
  prefs: []
  type: TYPE_NORMAL
- en: The average width of an adult's index finger is about 16 mm to 20 mm. This is
    close to 45px to 57px.
  prefs: []
  type: TYPE_NORMAL
- en: According to *Apple's iOS Human Interface Guidelines*, the recommended minimum
    target size is 44pt x 44pt.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The reason some user interface guidelines use points and millimeters as their
    measuring units is to provide a consistent scale that is device independent. That's
    because 1px in one device may not necessarily mean exactly 1px in another device.
    Nonetheless, some vendors do provide guidelines on pixels, but mostly so we can
    get an idea of how an element's proportions relate to one another.
  prefs: []
  type: TYPE_NORMAL
- en: In the past, Apple did recommend their target sizes in pixels, 44px x 44px,
    but when retina displays were introduced, 1 pixel from the iPhone 3 turned into
    4 pixels on the iPhone 4\. There wasn't a 1:1 ratio anymore.
  prefs: []
  type: TYPE_NORMAL
- en: This means that 44pt x 44pt in non-retina devices is actually 44px x 44px, but
    on retina devices it is 88px x 88px. These pixel values change again every time
    Apple releases a new device with an even higher density screen.
  prefs: []
  type: TYPE_NORMAL
- en: Having a good understanding of the screen density of Apple's devices, or any
    device for that matter, is a must in the RWD world. This way, we can always account
    for these technicalities when creating our designs so we don't hinder the user
    experience and the usability of our websites and apps.
  prefs: []
  type: TYPE_NORMAL
- en: On the other hand, *Microsoft's Windows 8 Touch Guidance* documentation recommends
    an ideal target size of 7 mm x 7 mm (40px x 40px). If accuracy is crucial, because
    of serious consequences such as close or delete, the *Windows 8 Touch Guidance*
    guidelines recommend target sizes of 9 mm x 9 mm (50px x 50px). Also, when screen
    real estate is scarce and things need to fit, the minimum recommended target size
    is 5 mm x 5 mm (30px x 30px).
  prefs: []
  type: TYPE_NORMAL
- en: These dimensions are for non high-density screens.
  prefs: []
  type: TYPE_NORMAL
- en: 'The *Windows 8 Touch Guidance* guidelines go as far as recommending a minimum
    padding between elements: 2 mm (10px), regardless of the target size (and this
    is good).'
  prefs: []
  type: TYPE_NORMAL
- en: The *Android Developers* guidelines recommend a minimum target size of 48dp,
    which is about 9 mm. The minimum and maximum recommended target sizes are 7 mm
    and 10 mm, respectively.
  prefs: []
  type: TYPE_NORMAL
- en: The Android Developers guidelines also recommend a minimum spacing between elements
    of 8dp.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Here, **dp** means density-independent pixels. This means that 1dp is the same
    as 1px in *normal* density screens. Just like Apple with the use of points (pt),
    they are trying to define a unit that is global and screen density independent.
  prefs: []
  type: TYPE_NORMAL
- en: There is also the *Ubuntu* documentation recommending that interface elements
    shouldn't be smaller than 1 cm (about 55px).
  prefs: []
  type: TYPE_NORMAL
- en: As we can see, the recommended minimum and maximum target sizes vary from vendor
    to vendor. However, they are not that far apart.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can safely conclude from all the target sizes mentioned, that the proper
    dimensions are (in low density screens):'
  prefs: []
  type: TYPE_NORMAL
- en: The recommended target size is 48dp × 48dp = 48px × 48px.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The minimum target size is 5 mm x 5 mm = 30px × 30px.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The maximum target size is 10 mm x 10 mm = 55px × 55px.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The padding between any element is 2 mm = 10px.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The posture patterns and the touch zones
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: No matter how usable the sizes of our touch targets are, if they are not placed
    in the right location, all our efforts are pretty much worthless.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can''t talk about small UIs and large fingers without mentioning the extensive
    work of Luke Wroblewski in his article *Responsive Navigation: Optimizing for
    Touch Across Devices* ([http://www.lukew.com/ff/entry.asp?1649](http://www.lukew.com/ff/entry.asp?1649)).'
  prefs: []
  type: TYPE_NORMAL
- en: The posture patterns
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In his article, Luke talks about the patterns of posture most users have when
    holding their smartphones, tablets, and touch-enabled laptops:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The posture patterns](img/B02102_05_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: These patterns allow us to define the best way to lay out our content in order
    to be easily usable and accessible.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the posture patterns of our users will allow us to understand
    when our targets can be the right size or even a bit smaller if there isn't enough
    screen real estate, or a bit larger if precision is needed, since it's different
    when someone uses their thumbs as opposed to their index fingers.
  prefs: []
  type: TYPE_NORMAL
- en: The touch zones
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Luke also talks about *touch zones*, which are basically the areas of a device
    that are either easy or hard to reach, depending on the posture.
  prefs: []
  type: TYPE_NORMAL
- en: 'In all major styles of devices, smartphones, tablets and touch-enabled laptops,
    the ideal touch zones are in dark green, the *ok* touch zones are in lighter green,
    and the hard-to-reach zones are in yellow:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The touch zones](img/B02102_05_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In RWD, it's a bit hard to drastically change the layout of a single page, let
    alone many pages (at least yet) like a standalone app, without an exorbitant amount
    of work. Also, there is a very high probability of negatively impacting the user
    experience and maintaining the content hierarchy.
  prefs: []
  type: TYPE_NORMAL
- en: RWD is strongly coupled with content strategy, so the content hierarchy needs
    to be preserved regardless of the device our site/app is being viewed on. We need
    to make sure the elements themselves are big enough for someone with large fingers
    to use properly. These elements are, to name a few, links, buttons, form fields,
    navigation items, controls of any sort like paginations, open/collapse controls
    in accordions, tab systems, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, there is one website/app element that is quite versatile in RWD: the menu
    button.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to trigger the navigation, there is a very particular element that
    the UX communities have very strong opinions about: The *hamburger* icon (≡).
    For now, we''re going to call it something more generic: the *nav* icon. I''m
    calling it the *nav* icon because it doesn''t necessarily have to be a hamburger
    icon/graphic, it can be another type of icon or a word.'
  prefs: []
  type: TYPE_NORMAL
- en: The location, behavior, and design of the navigation icon and the navigation
    items themselves have as many variations as there are designers. What works for
    others may not necessarily work for us, and vice versa. So, testing becomes the
    go-to methodology to decide what our users feel comfortable with.
  prefs: []
  type: TYPE_NORMAL
- en: Nonetheless, there are a few UX guidelines for the nav icon that are worth mentioning
    and that we're going to see next.
  prefs: []
  type: TYPE_NORMAL
- en: The nav icon – basic guidelines to consider for RWD
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The nav icon can be represented in many ways. RWD takes patterns from mobile
    apps since small screens apps and websites have many similar metaphors.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at the common navigation icon patterns:'
  prefs: []
  type: TYPE_NORMAL
- en: The hamburger icon.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The word *Menu*.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The hamburger icon plus the word *Menu*.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The hamburger icon
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This is by far the most popular icon used to represent the navigation button:
    ≡.'
  prefs: []
  type: TYPE_NORMAL
- en: The *hamburger* icon was created by Norm Cox in 1981\. Norm's intention with
    this icon was to *"…mimic the look of the resulting displayed menu list."* ([http://gizmodo.com/who-designed-the-iconic-hamburger-icon-1555438787](http://gizmodo.com/who-designed-the-iconic-hamburger-icon-1555438787)).
  prefs: []
  type: TYPE_NORMAL
- en: In other words, the hamburger icon's real name is the *list* icon.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, if we think about it, the hamburger icon is semantically correct because
    it represents exactly what is displayed when it''s triggered: a list of items.
    However, some UX studies have revealed that the hamburger icon isn''t as effective
    as we may think, and yet we see it all over the place in both responsive sites
    and mobile apps.'
  prefs: []
  type: TYPE_NORMAL
- en: Although the hamburger icon has several cons, it's a matter of time before practically
    everyone is able to recognize this icon as a representation of navigation.
  prefs: []
  type: TYPE_NORMAL
- en: The bottom line is that there's nothing wrong with using the hamburger icon
    as long as we follow the target size recommendations and make the links inside
    the navigation bar easy to tap on small screens.
  prefs: []
  type: TYPE_NORMAL
- en: 'The advantages are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: It's easily recognized by certain demographics, especially young ones.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It takes up very little space in a design.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It's not language dependent.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It's easy to make using the Unicode character 2261 (≡), which has a global support
    of 96 percent.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The disadvantages are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: It's not easily recognized by some demographics, especially older ones.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Although very popular, a lot of people have a hard time understanding that the
    hamburger icon represents a menu.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It promotes low discoverability since a site's navigation will usually be hidden.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you plan to use the hamburger icon, don't bother using images of any kind
    or any CSS techniques with borders or box shadows. Keep it simple. All you need
    to do is use the Unicode character 2261 (≡).
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following examples, we are going to use a well-known technique to hide
    content (with a few variations to fit our demos): the Kellum Method. This method
    is not in any way a hack or anything similar; we are not trying to deceive our
    users or the search engines with this approach. We''re actually being quite mindful
    of the improved accessibility the navigation icons gain by leaving the text in
    the markup so that users with assistive technologies can still access the menus.
    Consider the following example.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The HTML is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is this one:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The hamburger icon](img/B02102_05_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The word *Menu* should always be included in the markup for accessibility reasons.
    When users with **assistive technology** (**AT**) will focus on the hamburger
    icon, the screen reader will read the word *Menu*. Also, enclosing the word *Menu*
    in `<span>` tags allows us to hide the word from being displayed in the browser
    without hurting the accessibility of the link.
  prefs: []
  type: TYPE_NORMAL
- en: The word Menu
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Some informal tests on the web have yielded that using the word *Menu* is the
    most trusted solution to the drawbacks of the hamburger icon.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, it''s important to note that the studies and tests done by many authors
    where they compare the hamburger icon versus the word *Menu* can be misleading,
    since they are testing different visual languages: an icon versus a word.'
  prefs: []
  type: TYPE_NORMAL
- en: For these tests to be fully reliable, they would have to test icon versus icon,
    and word versus word. For example, testing the hamburger icon against an arrow
    pointing down or the word *Menu* against the word *Nav*.
  prefs: []
  type: TYPE_NORMAL
- en: Let's look at the pros and cons of the word *Menu*.
  prefs: []
  type: TYPE_NORMAL
- en: 'The advantages are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: It's self-explanatory.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Virtually anyone from any demographic can understand what it means.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It can be used in any language.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It takes up very little space in the design.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The disadvantage is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: It may clash with an iconography system since it's a word.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Consider the following example.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s the HTML:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'And here''s the CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'And this is the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The word Menu](img/B02102_05_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this example, I used the class name `.word-menu` to explicitly represent
    my intent for this book, but this is not the proper way to name your elements
    for production. Use more meaningful and universal naming conventions, for example,
    something like `.menu-trigger` could be an alternative. Using a generic class
    name will allow us to use any design for the navigation icon without altering
    the markup.
  prefs: []
  type: TYPE_NORMAL
- en: The hamburger icon plus the word Menu
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One alternative to the hamburger icon versus the word *Menu* discussion is to
    use both at the same time. Some argue that we may get the best of both worlds
    by doing this.
  prefs: []
  type: TYPE_NORMAL
- en: 'The advantages are:'
  prefs: []
  type: TYPE_NORMAL
- en: It's self-explanatory.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Virtually anyone from any demographic can understand what it means.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It can be used in any language.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It can still take up very little space in the design.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is easy to make using the Unicode character 2261 (≡), which has a global
    support of 96 percent.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The disadvantage is:'
  prefs: []
  type: TYPE_NORMAL
- en: Depending on the design, the word *Menu* could be too small.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's look at two styles that we can use to represent this pattern.
  prefs: []
  type: TYPE_NORMAL
- en: Consider the following example.
  prefs: []
  type: TYPE_NORMAL
- en: 'The HTML is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The SCSS is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The hamburger icon plus the word Menu](img/B02102_05_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Notice the space after the '`≡` ', that's what separates the icon from the word
    "Menu" without having to use margins of any kind.
  prefs: []
  type: TYPE_NORMAL
- en: Consider the following example.
  prefs: []
  type: TYPE_NORMAL
- en: 'The HTML is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The SCSS is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'And here''s the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The hamburger icon plus the word Menu](img/B02102_05_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You can see a demo I created in CodePen at [http://codepen.io/ricardozea/pen/f4ddc6443bc060004b58a7301aae83db](http://codepen.io/ricardozea/pen/f4ddc6443bc060004b58a7301aae83db).
  prefs: []
  type: TYPE_NORMAL
- en: The navigation patterns for RWD
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the most mystifying features of RWD is the navigation. It can be as simple
    or as complex as we want it to be.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this section, I''m going to show you how to build three commonly used navigation
    patterns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Toggle navigation**: This is based on Brad Frost''s *Toggle Menu* demo ([http://codepen.io/bradfrost/pen/sHvaz/](http://codepen.io/bradfrost/pen/sHvaz/)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Off-Canvas or Off-Screen navigation**: This is based on Austin Wulf''s SitePoint
    *Pure CSS Off-Screen Navigation Menu* demo ([http://codepen.io/SitePoint/pen/uIemr/](http://codepen.io/SitePoint/pen/uIemr/)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Flexbox-based navigation**: This is our custom solution.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Before we look at the details of each, let''s clarify a few features about
    the mentioned patterns:'
  prefs: []
  type: TYPE_NORMAL
- en: Design
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: On small screens, all navigation patterns use the hamburger icon as a trigger
    except the Flexbox-based navigation. On large screens, the navigation bar on all
    examples is a horizontal group of links with centered links.
  prefs: []
  type: TYPE_NORMAL
- en: To improve usability in both the Toggle and the Off-Canvas navigations, the
    hamburger icon gets the class `.active` added/removed to offer a visual cue showing
    that the item has been tapped. This is done with a bit of jQuery.
  prefs: []
  type: TYPE_NORMAL
- en: Including jQuery is part of these demos, so it's necessary to call it for them
    to work.
  prefs: []
  type: TYPE_NORMAL
- en: Scope
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The markup shown is only for the menu itself, elements and directives such as
    the `<html>` tag and HTML5 Doctype have been purposely left out.
  prefs: []
  type: TYPE_NORMAL
- en: The examples work in all major browsers that have support for relatively advanced
    CSS3 properties. They don't use the FastClick script to remove the 300 ms delay
    that mobile devices have by default.
  prefs: []
  type: TYPE_NORMAL
- en: Vendor prefixes have been left out; after all, we should be using Autoprefixer
    to handle this for us.
  prefs: []
  type: TYPE_NORMAL
- en: Third-party demos
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Since there's no need to reinvent the wheel, the following examples are based
    on other authors' demos, such as the ones by Brad Frost and Austin Wulf.
  prefs: []
  type: TYPE_NORMAL
- en: However, all original demos have been forked and *extensively* scaled, enhanced,
    cleaned up, optimized, restyled, and ported to Sass in order to fit the scope
    and style of this book. In other words, the markup and code you'll see has been
    heavily customized exclusively for you.
  prefs: []
  type: TYPE_NORMAL
- en: Let's begin.
  prefs: []
  type: TYPE_NORMAL
- en: The Off-Canvas or Off-Screen navigation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is by far the most commonly used pattern for navigation both in RWD and
    mobile apps. It uses the hamburger icon as the trigger for the menu when tapped/clicked.
    When this happens, the main container slides to the right to reveal the menu on
    the left and slides back again to the left to hide it.
  prefs: []
  type: TYPE_NORMAL
- en: 'This example does not depend on JavaScript to work. However, it uses a few
    unsemantic elements to make it work: the `<input>` and `<label>` elements. In
    defense of this method, it uses the `:checked` pseudo-class, which has perfect
    support across the board.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s our HTML:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'And here''s our SCSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s the jQuery script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Let's take a look at the screenshots.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is what it looks like on small screens in the *collapsed* state:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Off-Canvas or Off-Screen navigation](img/B02102_05_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Here is what it looks like in the *expanded* state:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Off-Canvas or Off-Screen navigation](img/B02102_05_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'This is what it looks like on large screens:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Off-Canvas or Off-Screen navigation](img/B02102_05_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You can see a demo I created in CodePen at [http://codepen.io/ricardozea/pen/fd504cbcf362069320d15a4ea8a88b27](http://codepen.io/ricardozea/pen/fd504cbcf362069320d15a4ea8a88b27).
  prefs: []
  type: TYPE_NORMAL
- en: The Toggle navigation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the Toggle pattern, when the hamburger icon is tapped or clicked, the navigation
    bar slides down and the links are stacked. The navigation bar collapses when the
    hamburger icon is tapped again.
  prefs: []
  type: TYPE_NORMAL
- en: 'The HTML is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The SCSS is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The jQuery is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Let's take a look at the screenshots.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is what it looks like on small screens in the *collapsed* state:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Toggle navigation](img/B02102_05_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'And here is the *expanded* state:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Toggle navigation](img/B02102_05_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Here is what it looks like on large screens:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Toggle navigation](img/B02102_05_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You can see a demo I created in CodePen at [http://codepen.io/ricardozea/pen/e91a5e6ea456d41f4128d9bd405ccaa0](http://codepen.io/ricardozea/pen/e91a5e6ea456d41f4128d9bd405ccaa0).
  prefs: []
  type: TYPE_NORMAL
- en: You can also visit [http://responsive-nav.com/](http://responsive-nav.com/)
    for a nice Toggle navigation functionality.
  prefs: []
  type: TYPE_NORMAL
- en: The Flexbox-based navigation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This custom solution using Flexbox is incredibly versatile and it doesn't necessarily
    require the use of media queries. The other two menu solutions (Toggle navigation
    and Off-Canvas navigation) do require media queries.
  prefs: []
  type: TYPE_NORMAL
- en: With this solution, the menu items adapt to the available space, making the
    target zones as large as possible, automatically enhancing the usability of the
    menu. Another major plus of this Flexbox-based solution is that it's not JavaScript
    dependent.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is the HTML:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'And now the SCSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Let's take a look at the screenshots.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is what it looks like on small screens (320px):'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Flexbox-based navigation](img/B02102_05_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Here is what it looks like on small screens (426px):'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Flexbox-based navigation](img/B02102_05_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Here is what it looks like on a large screens (980px):'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Flexbox-based navigation](img/B02102_05_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You can see a demo I created in CodePen at [http://codepen.io/ricardozea/pen/022b38c6c395368ec4befbf43737e398](http://codepen.io/ricardozea/pen/022b38c6c395368ec4befbf43737e398).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We are now halfway through mastering RWD with HTML5 and CSS3\. What a milestone!
    A *huge* thanks for coming this far!
  prefs: []
  type: TYPE_NORMAL
- en: RWD is clearly more than media queries, Sass mixins, and CSS grids. It's also
    about understanding the different sizes of our target zones, the location of our
    controls (links, buttons, form fields, and so on), and the touch zones in different
    devices.
  prefs: []
  type: TYPE_NORMAL
- en: There will always be different approaches to creating a menu button, just make
    sure the functionalities never break on any screen size. Once we defined the style
    of our menu button, we defined which navigation pattern would work best for our
    content and our users.
  prefs: []
  type: TYPE_NORMAL
- en: There isn't really one single, best solution for menu button or navigation pattern;
    it all depends on each project's specific conditions. What I do recommend is that
    whatever you build, make sure you always maintain a high level of browser support,
    scalability, and performance, so that the users can have a great experience and
    the client/company can meet its goals.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we are talking about performance, in the next chapter we''re going
    to talk about the "ugly child" of RWD: images.'
  prefs: []
  type: TYPE_NORMAL
- en: Let's dance!
  prefs: []
  type: TYPE_NORMAL
