- en: Starting with a Simple Social Media Application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Social media is an integral part of the web these days, and many of the user-centric
    web applications we build end up requiring a social component down the line to
    drive user engagement.
  prefs: []
  type: TYPE_NORMAL
- en: For our first real-world MERN application, we will modify and extend the MERN
    skeleton application developed in the previous chapter to build a simple social
    media application.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will go over the implementation of the following social
    media-flavored features:'
  prefs: []
  type: TYPE_NORMAL
- en: User profile with a description and a photo
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Users following each other
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Who to follow suggestions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Posting messages with photos
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: News feed with posts from followed users
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Listing posts by user
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Liking posts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Commenting on posts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MERN Social
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'MERN Social is a social media application with rudimentary features inspired
    by existing social media platforms such as Facebook and Twitter. The main purpose
    of this application is to demonstrate how to use the MERN stack technologies to
    implement features that allow users to connect and interact over content.You can
    extend these implementations further, as desired, for more complex features:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/677fef10-8bc2-489d-bccd-c58aa24901af.png)Code for the complete MERN
    Social application is available on GitHub in the repository at [github.com/shamahoque/mern-social](https://github.com/shamahoque/mern-social). You
    can clone this code and run the application as you go through the code explanations
    in the rest of this chapter.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The views needed for the MERN Social application will be developed by extending
    and modifying the existing React components in the MERN skeleton application.
    We will also add new custom components to compose views, including a Newsfeed
    view where the user can create a new post and also browse a list of all the posts
    from people they follow on MERN Social. The following component tree shows all
    the custom React components that make up the MERN Social frontend and also exposes
    the composition structure we will use to build out the views in the rest of the
    chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/e782c1f5-ce25-46b7-a015-256e6c5017e8.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Updating the user profile
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The skeleton application only has support for a user''s name, email, and password.
    But in MERN Social we will allow users to add a description about themselves,
    and also upload a profile photo while editing the profile after signing up:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/d14f75f1-492f-4e8f-aa1c-2d42644348bc.png)'
  prefs: []
  type: TYPE_IMG
- en: Adding an about description
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to store the description entered in the `about` field by a user, we
    need to add an `about` field to the user model in `server/models/user.model.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Then, to get the description as input from the user, we add a multiline `TextField`
    to the `EditProfile` form and handle the value change the same way we did for
    the user's name input.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-social/client/user/EditProfile.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Finally, to show the description text added to the `about` field on the user
    profile page, we can add it to the existing profile view.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-social/client/user/Profile.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: With this modification to the user feature in the MERN skeleton code, users
    can now add and update a description about themselves to be displayed on their
    profiles.
  prefs: []
  type: TYPE_NORMAL
- en: Uploading a profile photo
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Allowing a user to upload a profile photo will require that we store the uploaded
    image file, and retrieve it on request to load in the view. There are multiple
    ways of implementing this upload feature considering the different file storage
    options:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Server filesystem**: Upload and save files to a server filesystem and store
    the URL to MongoDB'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**External file storage**: Save files to external storage such as Amazon S3
    and store the URL in MongoDB'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Store as data in MongoDB**: Save files of a small size (less than 16 MB)
    to MongoDB as data of type Buffer'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For MERN Social, we will assume that the photo files uploaded by the user will
    be of small sizes, and demonstrate how to store these files in MongoDB for the
    profile photo upload feature. In [Chapter 8](b24d9630-844d-4c36-b703-5acd3613ac6d.xhtml),
    *Building a Media Streaming Application*, we will discuss how to store larger
    files in MongoDB using GridFS.
  prefs: []
  type: TYPE_NORMAL
- en: Updating the user model to store a photo in MongoDB
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to store the uploaded profile photo directly in the database, we will
    update the user model to add a `photo` field that stores the file as `data` of
    type `Buffer`, along with its `contentType`.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-social/server/models/user.model.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Uploading a photo from the edit form
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Users will be able to upload an image file from their local files when editing
    the profile. We will update the `EditProfile` component in `client/user/EditProfile.js`
    with an upload photo option, then attach the user selected file in the form data
    submitted to the server.
  prefs: []
  type: TYPE_NORMAL
- en: File input with Material-UI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will utilize the HTML5 file input type to let the user select an image from
    their local files. The file input will return the filename in the change event
    when the user selects a file.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-social/client/user/EditProfile.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: To integrate this file `input` with Material-UI components, we apply `display:none`
    to hide the `input` element from view, then add a Material-UI button inside the
    label for this file input. This way, the view displays the Material-UI button
    instead of the HTML5 file input element.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-social/client/user/EditProfile.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: With the `Button`'s component prop set to `span`, the `Button` component renders
    as a `span` element inside the `label` element. A click on the `Upload` span or
    label is registered by the file input with the same ID as the label, and as a
    result, the file select dialog is opened. Once the user selects a file, we can
    set it to state in the call to `handleChange(...)` and display the name in the
    view.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-social/client/user/EditProfile.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Form submission with the file attached
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Uploading files to the server with a form requires a multipart form submission
    in contrast to the `stringed` object sent in the previous implementation. We will
    modify the `EditProfile` component to use the `FormData` API to store the form
    data in the format needed for encoding type `multipart/form-data`.
  prefs: []
  type: TYPE_NORMAL
- en: First, we need to initialize `FormData` in `componentDidMount()`.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-social/client/user/EditProfile.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Next, we will update the input `handleChange` function to store input values
    for both the text fields and the file input in `FormData`.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-social/client/user/EditProfile.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Then on submit, `this.userData` is sent with the fetch API call to update the
    user. As the content type of the data sent to the server is no longer `'application/json'`,
    we also need to modify the `update` fetch method in `api-user.js` to remove `Content-Type`
    from the headers in the `fetch` call.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-social/client/user/api-user.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Now if the user chooses to upload a profile photo when editing profile, the
    server will receive a request with the file attached along with the other field
    values.
  prefs: []
  type: TYPE_NORMAL
- en: Learn more about the FormData API at [developer.mozilla.org/en-US/docs/Web/API/FormData](https://developer.mozilla.org/en-US/docs/Web/API/FormData).
  prefs: []
  type: TYPE_NORMAL
- en: Processing a request containing a file upload
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'On the server, to process the request to the update API that may now contain
    a file, we will use the `formidable` npm module:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Formidable will allow us to read the `multipart` form data, giving access to
    the fields and the file, if any. If there is a file, `formidable` will store it
    temporarily in the filesystem. We will read it from the filesystem, using the
    `fs` module to retrieve the file type and data, and store it to the photo field
    in the user model. The `formidable` code will go in the `update` controller in `user.controller.js` as
    follows.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-social/server/controllers/user.controller.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: This will store the uploaded file as data in the database. Next, we will set
    up file retrieval to be able to access and display the photo uploaded by the user
    in the frontend views.
  prefs: []
  type: TYPE_NORMAL
- en: Retrieving a profile photo
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The simplest option to retrieve the file stored in the database and show it
    in a view is to set up a route that will fetch the data and return it as an image
    file to the requesting client.
  prefs: []
  type: TYPE_NORMAL
- en: Profile photo URL
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will set up a route to the photo stored in the database for each user, and
    also add another route that will fetch a default photo if the given user has not
    uploaded a profile photo.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-social/server/routes/user.routes.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: We will look for the photo in the `photo` controller method and if found, send
    it in the response to the request at the photo route, otherwise we call `next()`
    to return the default photo.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-social/server/controllers/user.controller.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: The default photo is retrieved and sent from the server's file system.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-social/server/controllers/user.controller.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Showing a photo in a view
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With the photo URL routes set up to retrieve the photo, we can simply use these
    in the `img` element's `src` attribute to load the photo in the view. For example,
    in the `Profile` component, we get the user ID from state and use it to construct
    the photo URL.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-social/client/user/Profile.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: To ensure the `img` element reloads in the `Profile` view after the photo is
    updated in the edit, we also add a time value to the photo URL to bypass the browser's
    default image caching behavior.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, we can set the `photoUrl` to the Material-UI `Avatar` component, which
    renders the linked image in the view:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The updated user profile in MERN Social can now display a user uploaded profile
    photo and an `about` description:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/8e568b24-3f3c-4d32-aabb-f2eaabbeca3a.png)'
  prefs: []
  type: TYPE_IMG
- en: Following users in MERN Social
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In MERN Social, the users will be able to follow each other. Each user will
    have a list of followers and a list of people they follow. Users will also be
    able to see a list of users they can follow; in other words, the users in MERN
    Social they are not already following.
  prefs: []
  type: TYPE_NORMAL
- en: Follow and unfollow
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to keep track of which user is following which other users, we will
    have to maintain two lists for each user. When one user follows or unfollows another
    user, we will update one's `following` list and the other's `followers` list.
  prefs: []
  type: TYPE_NORMAL
- en: Updating the user model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To store the list of `following` and `followers` in the database, we will update
    the user model with two arrays of user references.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-social/server/models/user.model.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: These references will point to the users in the collection being followed by
    or following the given user.
  prefs: []
  type: TYPE_NORMAL
- en: Updating the userByID controller method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When a single user is retrieved from the backend, we want the `user` object
    to include the names and IDs of the users referenced in the `following` and `followers`
    arrays. To retrieve these details, we need to update the `userByID` controller
    method to populate the returned user object.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-social/server/controllers/user.controller.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: We use the Mongoose `populate` method to specify that the user object returned
    from the query should contain the name and ID of the users referenced in the `following`
    and `followers` lists. This will give us the names and IDs of the user references
    in the `followers` and `following` lists when we fetch the user with the read
    API call.
  prefs: []
  type: TYPE_NORMAL
- en: API to follow and unfollow
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When a user follows or unfollows another user from the view, both users' records
    in the database will be updated in response to the `follow` or `unfollow` requests.
  prefs: []
  type: TYPE_NORMAL
- en: We will set up `follow` and `unfollow` routes in `user.routes.js` as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-social/server/routes/user.routes.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: The `addFollowing` controller method in the user controller will update the
    `'following'` array for the current user by pushing the followed user's reference
    into the array.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-social/server/controllers/user.controller.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: On successful update of the following array, the `addFollower` method is executed
    to add the current user's reference to the followed user's `'followers'` array.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-social/server/controllers/user.controller.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: For unfollowing, the implementation is similar. The `removeFollowing` and `removeFollower`
    controller methods update the respective `'following'` and `'followers'` arrays
    by removing the user references with `$pull` instead of `$push`.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-social/server/controllers/user.controller.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Accessing follow and unfollow APIs in views
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to access these API calls in the views, we will update `api-user.js`
    with `follow` and `unfollow` fetch methods. The `follow` and `unfollow` methods
    will be similar, making calls to the respective routes with the current user's
    ID and credentials, and the followed or unfollowed user's ID. The `follow` method
    will be as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-social/client/user/api-user.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: The `unfollow` fetch method is similar, it takes the unfollowed user's ID and
    calls the `unfollow` API.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-social/client/user/api-user.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Follow and unfollow buttons
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The button that will allow a user to `follow` or `unfollow` another user will
    appear conditionally depending on whether the user is already followed or not
    by the current user:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/57d66ca2-131d-4717-8bae-2c74b263fbb7.png)'
  prefs: []
  type: TYPE_IMG
- en: FollowProfileButton component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will create a separate component for the follow button called `FollowProfileButton`,
    which will be added to the `Profile` component. This component will show either
    `Follow` or `Unfollow` buttons depending on whether the current user is already
    a follower of the user in the profile. The `FollowProfileButton` component will
    be as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-social/client/user/FollowProfileButton.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'When the `FollowProfileButton` is added to the profile, the `''following''` value
    will be determined and sent from the `Profile` component as a prop to the `FollowProfileButton`,
    along with the click handler that takes the specific `follow` or `unfollow` fetch
    API to be called as a parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/4854d95a-4432-44cf-9139-809cafb413dd.png)'
  prefs: []
  type: TYPE_IMG
- en: Update Profile component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the `Profile` view, the `FollowProfileButton` should only be shown when
    the user views the profile of other users, so we need to modify the condition
    for showing `Edit` and `Delete` buttons when viewing a profile as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: In the `Profile` component, after the user data is successfully fetched on `componentDidMount`,
    we will check if the signed in user is already following the user in the profile
    or not, and set the `following` value to the state.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-social/client/user/Profile.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: To determine the value to set in `following`, the `checkFollow` method will
    check if the signed-in user exists in the fetched user's followers list, then
    return the `match` if found, otherwise return `undefined` if a match is not found.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-social/client/user/Profile.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: The `Profile` component will also define the click handler for `FollowProfileButton`,
    so the state of the `Profile` can be updated when the follow or unfollow action
    completes.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-social/client/user/Profile.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: The click handler definition takes the fetch API call as a parameter and is
    passed as a prop to the `FollowProfileButton` along with the `following` value
    when it is added to the `Profile` view.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-social/client/user/Profile.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Listing followings and followers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In each user''s profile, we will add a list of their followers and the people
    they are following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/5efeb7d7-ccdc-418b-942f-790be8a838b3.png)'
  prefs: []
  type: TYPE_IMG
- en: The details of the users referenced in the `following` and `followers` lists
    are already in the user object fetched using the `read` API when the profile is
    loaded. In order to render these separate lists of followers and followings, we
    will create a new component called `FollowGrid`.
  prefs: []
  type: TYPE_NORMAL
- en: FollowGrid component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `FollowGrid` component will take a list of users as props, display the avatars
    of the users with their names, and link to each user's profile. We can add this
    component as desired to the `Profile` view to display `followings` or `followers`.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-social/client/user/FollowGrid.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'To add the `FollowGrid` component to the `Profile` view, we can place it as
    desired in the view and pass the list of `followers` or `followings` as the `people`
    prop:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: As pictured previously, in MERN Social we chose to display the `FollowGrid`
    components in tabs within the `Profile` component. We created a separate `ProfileTabs`
    component using Material-UI tab components and added that to the `Profile` component.
    This `ProfileTabs` component contains the two `FollowGrid` components with following
    and followers lists, along with a `PostList` component that shows the posts by
    the user. This will be discussed later in the chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Finding people to follow
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Who to follow feature will show the signed in user a list of people in
    MERN Social that they are not currently following, giving the option to follow
    them or view their profiles:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/efd564df-5075-4d35-abfe-a7eff7add251.png)'
  prefs: []
  type: TYPE_IMG
- en: Fetching users not followed
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will implement a new API on the server to query the database and fetch this
    list of users the current user is not following.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-social/server/routes/user.routes.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: In the `findPeople` controller method, we will query the User collection in
    the database to find the users not in the current user's `following` list.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-social/server/controllers/user.controller.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: To use this list of users in the frontend, we will update the `api-user.js`
    to add a fetch for this find people API.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-social/client/user/api-user.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: FindPeople component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To display the *who to follow* feature, we will create a component called `FindPeople`,
    which can be added to any of the views or rendered on its own. In this component,
    we will first fetch the users not followed by calling the `findPeople` method
    in `componentDidMount`.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-social/client/user/FindPeople.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: The fetched list of users will be iterated over and rendered in a Material-UI `List`
    component, with each list item containing the user's avatar, name, a link to the
    profile page, and a `Follow` button.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-social/client/user/FindPeople.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Clicking the `Follow` button will make a call to the follow API, and update
    the list of users to follow by splicing out the newly followed user.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-social/client/user/FindPeople.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: We will also add a Material-UI `Snackbar` component that will open temporarily
    when the user is successfully followed, to tell the user that they started following
    this new user.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-social/client/user/FindPeople.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'The `Snackbar` will display the message in the bottom-right corner of the page,
    and auto-hide after the set duration:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/104ce6be-98c8-49ef-a7dd-0864653e8fbd.png)'
  prefs: []
  type: TYPE_IMG
- en: MERN Social users can now follow each other, view lists of followings and followers
    for each user, and also see a list of people they can follow. The main purpose
    of following another user in MERN Social is to track their social posts, so next
    we will look at the implementation of the post feature.
  prefs: []
  type: TYPE_NORMAL
- en: Posts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The posting feature in MERN Social will allow users to share content on the
    MERN Social application platform and also interact with each other over the content
    by commenting on or liking a post:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/fcf7142d-c1e5-42a2-9201-6718b4ac6735.png)'
  prefs: []
  type: TYPE_IMG
- en: Mongoose schema model for Post
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To store each post, we will first define the Mongoose Schema in `server/models/post.model.js`.
    The Post schema will store a post''s text content, a photo, a reference to the
    user who posted, time of creation, likes on the post from users, and comments
    on the post by users:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Post text**: The `text` will be a required field to be provided by the user
    on new post creation from the view:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: '**Post photo**: The `photo` will be uploaded from the user''s local files during
    post creation, and stored in MongoDB similar to the user profile photo upload
    feature. The photo will be optional for each post:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: '**Post by**: Creating a post will require a user to be signed in first, so
    we can store a reference to the user who is posting in the `postedBy` field:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: '**Created time**: The `created` time will be generated automatically at the
    time of post creation in the database:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: '**Likes**: References to the users who liked a specific post will be stored
    in a `likes` array:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: '**Comments**: Each comment on a post will contain text content, the time of
    creation, and a reference to the user who posted the comment. Each post will have
    an array of `comments`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: This schema definition will enable us to implement all the post-related features
    in MERN Social.
  prefs: []
  type: TYPE_NORMAL
- en: Newsfeed component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before delving further into the implementations of the posting features in
    MERN Social, we will look at the composition of the Newsfeed view to showcase
    a basic example of how to design nested UI components that share state. The `Newsfeed`
    component will contain two main child components—a new post form and a list of
    posts from followed users:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/478879e6-50a8-4123-9269-1c037eee5f2e.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The basic structure of the `Newsfeed` component will be as follows, with the
    `NewPost` component and the `PostList` component.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-social/client/post/Newsfeed.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: As the parent component, `Newsfeed` will control the state of the posts' data
    rendered in the child components. It will provide a way to update the state of
    posts across the components when the post data is modified within the child components,
    such as the addition of a new post in the `NewPost` component, or removal of a
    post from the `PostList` component.
  prefs: []
  type: TYPE_NORMAL
- en: Here specifically, a `loadPosts` function in `Newsfeed` makes the call to the
    server initially to fetch a list of posts from people the currently signed in
    user follows and sets it to the state to be rendered in the `PostList` component.
    The `Newsfeed` component provides the `addPost` and `removePost` functions to
    `NewPost` and `PostList`, which will be used when a new post is created or an
    existing post is deleted to update the list of posts in `Newsfeed`'s state and
    ultimately reflect it in the `PostList`.
  prefs: []
  type: TYPE_NORMAL
- en: The `addPost` function defined in the `Newsfeed` component will take the new
    post created in the `NewPost` component and add it to the posts in the state.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-social/client/post/Newsfeed.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: The `removePost` function defined in the `Newsfeed` component will take the
    deleted post from the `Post` component in `PostList`, and remove it from the posts
    in the state.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-social/client/post/Newsfeed.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: As the posts are updated in `Newsfeed`'s state this way, the `PostList` will
    render the changed list of posts to the viewer. This mechanism of relaying state
    updates from parent to child components and back will be applied across other
    features, such as comment updates in a post and also when a `PostList` is rendered
    for an individual user in the `Profile` component.
  prefs: []
  type: TYPE_NORMAL
- en: Listing posts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In MERN Social, we will list posts in the `Newsfeed` and in the profile of each
    user. We will create a generic `PostList` component that will render any list
    of posts provided to it, and we can use it in both the `Newsfeed` and the `Profile`
    component.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-social/client/post/PostList.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: The `PostList` component will iterate through the list of posts passed to it
    as props from the `Newsfeed` or the `Profile`, and pass the data of each post
    to a `Post` component that will render details of the post. The `PostList` will
    also pass the `removeUpdate` function that was sent as a prop from the parent
    component to the `Post` component, so the state can be updated when a single post
    is deleted.
  prefs: []
  type: TYPE_NORMAL
- en: List in Newsfeed
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will set up an API on the server that queries the Post collection, and returns
    posts from the people a specified user is following. So these posts may be displayed
    in the `PostList` in `Newsfeed`.
  prefs: []
  type: TYPE_NORMAL
- en: Newsfeed API for posts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This Newsfeed-specific API will receive a request at the following route to
    be defined in `server/routes/post.routes.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'We are using the `:userID` param in this route to specify the currently signed-in
    user, and we will utilize the `userByID` controller method in the `user.controller`
    to fetch the user details as we did before and append them to the request object
    that is accessed in the `listNewsFeed` post controller method. So, also add the
    following to the `mern-social/server/routes/post.routes.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: The `post.routes.js` file will be very similar to the `user.routes.js` file,
    and to load these new routes in the Express app we need to mount the post routes
    in `express.js` like we did for the auth and user routes.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-social/server/express.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: The `listNewsFeed` controller method in `post.controller.js` will query the
    Post collection in the database to get the matching posts.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-social/server/controllers/post.controller.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: In the query to the Post collection, we find all the posts that have `postedBy`
    user references that match the current user's followings and the current user.
  prefs: []
  type: TYPE_NORMAL
- en: Fetching Newsfeed posts in the view
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To use this API in the frontend, we will add a fetch method to `client/post/api-post.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: This is the fetch method that will load the posts rendered in the `PostList`,
    which is added as a child component to the `Newsfeed` component. So this fetch
    needs to be called in the `loadPosts` method in the `Newsfeed` component.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-social/client/post/Newsfeed.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'The `loadPosts` method will be called in the `componentDidMount` of the `Newsfeed`
    component to initially load the state with posts that are rendered in the `PostList`
    component:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/c75625f8-f71b-4493-b7f1-421d636be764.png)'
  prefs: []
  type: TYPE_IMG
- en: Listing by user in Profile
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The implementation for getting a list of posts created by a specific user and
    showing it in the `Profile` will be similar to the discussion in the previous
    section. We will set up an API on the server that queries the Post collection,
    and returns posts from a specific user to the `Profile` view.
  prefs: []
  type: TYPE_NORMAL
- en: API for posts by a user
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The route that will receive a query to return posts by a specific user will
    be added in `mern-social/server/routes/post.routes.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: The `listByUser` controller method in `post.controller.js` will query the Post
    collection to find posts that have a matching reference in the `postedBy` field
    to the user specified in the `userId` param in the route.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-social/server/controllers/post.controller.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: Fetching user posts in the view
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To use this API in the frontend, we will add a fetch method to `mern-social/client/post/api-post.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: This `fetch` method will load the required posts for the `PostList` that is
    added to the `Profile` view. We will update the `Profile` component to define
    a `loadPosts` method that calls the `listByUser` fetch method.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-social/client/user/Profile.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `Profile` component, the `loadPosts` method will be called with the
    user ID of the user whose profile is being loaded, after the user details have
    been fetched from the server in the `init()` function. The posts loaded for the
    specific user are set to state and rendered in the `PostList` component that is
    added to the `Profile` component. The `Profile` component also provides a `removePost`
    function, similar to the `Newsfeed` component, as a prop to the `PostList` component,
    so the list of posts can be updated if a post is removed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/2a98e73d-8d6a-4305-a3ec-d5060cb8db04.png)'
  prefs: []
  type: TYPE_IMG
- en: Creating a new post
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The create new post feature will allow a signed in user to post a message and
    optionally add an image to the post by uploading it from their local files.
  prefs: []
  type: TYPE_NORMAL
- en: Creating post API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'On the server, we will define an API to create the post in the database, starting
    with declaring a route to accept a POST request at `/api/posts/new/:userId` in `mern-social/server/routes/post.routes.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: The `create` method in the `post.controller.js` will use the `formidable` module
    to access the fields and the image file, if any, as we did for the user profile
    photo update.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-social/server/controllers/post.controller.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: Retrieving a post's photo
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To retrieve the uploaded photo, we will also set up a `photo` route URL that
    returns the photo with a specific post.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-social/server/routes/post.routes.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: The `photo` controller will return the `photo` data stored in MongoDB as an
    image file.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-social/server/controllers/post.controller.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: As the photo route uses the `:postID` parameter, we will set up a `postByID`
    controller method to fetch the specific post by its ID before returning to the
    photo request. We will add the param call to `post.routes.js`.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-social/server/routes/post.routes.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: The `postByID` will be similar to the `userByID` method, and it will attach
    the post retrieved from the database to the request object, to be accessed by
    the `next` method. The attached post data in this implementation will also contain
    the ID and name of the `postedBy` user reference.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-social/server/controllers/post.controller.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: Fetching the create post API in the view
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will update the `api-post.js` to add a `create` method to make a `fetch`
    call to the create API.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-social/client/post/api-post.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: This method, like the user `edit` fetch, will send a multipart form submission
    using a `FormData` object that can contain the text field and the image file.
  prefs: []
  type: TYPE_NORMAL
- en: NewPost component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `NewPost` component added in the `Newsfeed` component will allow users
    to write a new post containing a text message and optionally an image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/6380d9cd-a320-45c7-817d-14bd5eb04018.png)'
  prefs: []
  type: TYPE_IMG
- en: The `NewPost` component will be a standard form with a Material-UI `TextField`
    and a file upload button as implemented in `EditProfile`, that takes the values
    and sets them in a `FormData` object to be passed in the call to the `create`
    fetch method on post submission.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-social/client/post/NewPost.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: The `NewPost` component is added as a child component in the `Newsfeed`, and
    given the `addUpdate` method as a prop. On successful post creation, the form
    view is emptied and `addUpdate` is executed so the post list in the `Newsfeed`
    is updated with the new post.
  prefs: []
  type: TYPE_NORMAL
- en: Post component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Post details in each post will be rendered in the `Post` component, which will
    receive the post data as props from the `PostList` component, as well as the `onRemove`
    prop to be applied if a post is deleted.
  prefs: []
  type: TYPE_NORMAL
- en: Layout
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `Post` component layout will have a header showing details of the poster,
    content of the post, an actions bar with likes and comment count, and the *Comments*
    section:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/069a0ac2-e7cf-4192-99b0-15f8656ddd9d.png)'
  prefs: []
  type: TYPE_IMG
- en: Header
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The header will contain information such as the name, avatar, link to the profile
    of the user who posted, and the date the post was created.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-social/client/post/Post.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: The header will also conditionally show a `delete` button if the signed-in user
    is viewing their own post.
  prefs: []
  type: TYPE_NORMAL
- en: Content
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The content section will show the text of the post and the image if the post
    contains a photo.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-social/client/post/Post.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: Actions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The actions section will contain an interactive `"like"` option with the total
    number of likes on the post and a comment icon with the total number of comments
    on the post.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-social/client/post/Post.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: Comments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The comments section will contain all the comment related elements in the `Comments`
    component and will get `props` such as the `postId`, and the `comments` data,
    along with a `state` updating method that can be called when a comment is added
    or deleted in the `Comments` component.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-social/client/post/Post.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: Deleting a post
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `delete` button is only visible if the signed-in user and `postedBy` user
    are the same for the specific post being rendered. For the post to be deleted
    from the database, we will have to set up a delete post API that will also have
    a fetch method in the frontend to be applied when `delete` is clicked.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-social/server/routes/post.routes.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: The delete route will check for authorization before calling `remove` on the
    post, by ensuring the authenticated user and `postedBy` user are the same users. The
    `isPoster` method checks if the signed-in user is the original creator of the
    post before executing the `next` method.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-social/server/controllers/post.controller.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: The rest of the implementation for the delete API with a `remove` controller
    method and fetch method for the frontend are the same as other API implementations.
    The important difference here, in the delete post feature, is the call to the
    `onRemove` update method in the `Post` component when delete succeeds. The `onRemove`
    method is sent as a prop from either `Newsfeed` or `Profile`, to update the list
    of posts in the state when the delete is successful.
  prefs: []
  type: TYPE_NORMAL
- en: The following `deletePost` method defined in the `Post` component is called
    when the `delete` button is clicked on a post.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-social/client/post/Post.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: This method makes a fetch call to the delete post API, and on success updates
    the list of posts in the state by executing the `onRemove` method received as
    a prop from the parent component.
  prefs: []
  type: TYPE_NORMAL
- en: Likes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The like option in the `Post` component's action bar section will allow the
    user to like or unlike a post, and also show the total number of likes for the
    post. To record a like, we will have to set up like and unlike APIs that can be
    called in the view.
  prefs: []
  type: TYPE_NORMAL
- en: Like API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The like API will be a PUT request to update the `likes` array in the `Post`
    document. The request will be received at the route `api/posts/like`.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-social/server/routes/post.routes.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: In the `like` controller method, the post ID received in the request body will
    be used to find the Post document and update it by pushing the current user's
    ID to the `likes` array.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-social/server/controllers/post.controller.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: To use this API, a fetch method called `like` will be added to `api-post.js`,
    which will be used when the user clicks the `like` button.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-social/client/post/api-post.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: Unlike API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `unlike` API will be implemented similar to the like API, with its own
    route at `mern-social/server/routes/post.routes.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: The `unlike` method in the controller will find the post by its ID and update
    the `likes` array by removing the current user's ID using `$pull` instead of `$push`.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-social/server/controllers/post.controller.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: The unlike API will also have a corresponding fetch method similar to the `like`
    method in `api-post.js`.
  prefs: []
  type: TYPE_NORMAL
- en: Checking if liked and counting likes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When the `Post` component is rendered, we need to check if the currently signed
    in user has liked the post or not, so the appropriate `like` option can be shown.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-social/client/post/Post.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: 'The `checkLike` function can be called during `componentDidMount` and `componentWillReceiveProps`
    of the `Post` component, to set the `like` state for the post after checking if
    the current user is referenced in the post''s `likes` array:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/93a0e91b-5080-41d1-8d30-777ca5e05b08.png)'
  prefs: []
  type: TYPE_IMG
- en: The `like` value set in the state using the `checkLike` method can be used to
    render a heart outline button or a full heart button. A heart outline button will
    render if the user has not liked the post, and clicking which will make a call
    to the `like` API, show the full heart button, and increment the `likes` count.
    The full heart button will indicate the current user has already liked this post,
    and clicking this will call the `unlike` API, render the heart outline button,
    and decrement the `likes` count.
  prefs: []
  type: TYPE_NORMAL
- en: The `likes` count is also set initially when the `Post` component mounts and
    props are received by setting the `likes` value to state with `this.props.post.likes.length`.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-social/client/post/Post.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: The `likes` related values are updated again when a like or unlike action takes
    place, and the updated post data is returned from the API call.
  prefs: []
  type: TYPE_NORMAL
- en: Handling like clicks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To handle clicks on the `like` and `unlike` buttons, we will set up a `like`
    method that will call the appropriate fetch method based on whether it is a like
    or unlike action, and update the state of `like` and `likes` count for the post.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-social/client/post/Post.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: Comments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Comments section in each post will allow signed in users to add comments,
    see the list of comments, and delete their own comments. Any changes to the comment
    list, such as a new addition or a removal, will update the comments and also the
    comment count in the action bar section of the `Post` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/84e0c3cf-868d-4c90-ae59-2579d1cd8956.png)'
  prefs: []
  type: TYPE_IMG
- en: Adding a comment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When a user adds a comment, the post document will be updated in the database
    with the new comment.
  prefs: []
  type: TYPE_NORMAL
- en: Comment API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To implement the add comment API, we will set up a `PUT` route as follows to
    update the post.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-social/server/routes/post.routes.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: The `comment` controller method will find the relevant post to be updated by
    its ID, and push the comment object received in the request body to the `comments`
    array of the post.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-social/server/controllers/post.controller.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: In the response, the updated post object will be sent back with details of the
    `postedBy` users populated in the post and in the comments.
  prefs: []
  type: TYPE_NORMAL
- en: To use this API in the view, we will set up a fetch method in `api-post.js`
    that takes the current user's ID, the post ID, and the `comment` object from the
    view, to send with the add comment request.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-social/client/post/api-post.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: Writing something in the view
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The *add comment* section in the `Comments` component will allow the signed-in
    user to type in the comment text:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/8a7002b9-893f-45ee-a3f0-abea084f1896.png)'
  prefs: []
  type: TYPE_IMG
- en: It will contain an avatar with the user's photo and a text field, which will
    add the comment when the user presses the *Enter* key.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-social/client/post/Comments.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: The text will be stored in state when the value changes, and on the `onKeyDown`
    event the `addComment` method will call the `comment` fetch method if the *Enter*
    key is pressed.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-social/client/post/Comments.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: The `Comments` component receives the `updateComments` method (discussed in
    the last section) as a prop from the `Post` component. This will be executed when
    the new comment is added, in order to update the comments and the comment count
    in the Post view.
  prefs: []
  type: TYPE_NORMAL
- en: Listing comments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `Comments` component receives the list of comments for the specific post
    as props from the `Post` component, then iterates over the individual comments
    to render the details of the commenter and the comment content.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-social/client/post/Comments.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: The `commentBody` renders the content including the name of the commenter linked
    to their profile, the comment text, and the date of comment creation.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-social/client/post/Comments.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: The `commentBody` will also render a delete option for the comment if the `postedBy`
    reference of the comment matches the currently signed-in user.
  prefs: []
  type: TYPE_NORMAL
- en: Deleting a comment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Clicking the delete button in a comment will update the post in the database
    by removing the comment from the `comments` array:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/e20462d0-c78b-4d57-bb3a-52796e7f29f3.png)'
  prefs: []
  type: TYPE_IMG
- en: Uncomment API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will implement an `uncomment` API at the following PUT route.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-social/server/routes/post.routes.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: The `uncomment` controller method will find the relevant post by ID, then pull
    the comment with the deleted comment's ID from the `comments` array in the post.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-social/server/controllers/post.controller.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: The updated post will be returned in the response as in the comment API.
  prefs: []
  type: TYPE_NORMAL
- en: To use this API in the view, we will also set up a fetch method in `api-post.js`,
    similar to the add `comment` fetch method, that takes the current user's ID, the
    post ID, and the deleted `comment` object to send with the `uncomment` request.
  prefs: []
  type: TYPE_NORMAL
- en: Removing a comment from view
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When a comment's delete button is clicked by the commenter, the `Comments` component
    will call the `deleteComment` method to fetch the `uncomment` API, and update
    the comments along with the comment count when the comment is successfully removed
    from the server.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-social/client/post/Comments.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: Comment count update
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `updateComments` method, which will enable the `comments` and comment count
    to be updated when a comment is added or deleted, is defined in the `Post` component
    and passed as a prop to the `Comments` component.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-social/client/post/Post.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: This method takes the updated list of comments as a parameter and updates the
    state that holds the list of comments rendered in the view. The initial state
    of comments in the Post component is set when the `Post` component mounts, and
    receives the post data as props.  The comments set here are sent as props to the
    `Comments` component, and also used to render the comment count next to the likes
    action in the action bar of the Post layout, as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-social/client/post/Post.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: This relation between the comment count in the `Post` component, and the comments
    rendered and updated in the `Comments` component, once again gives a simple demonstration
    of how changing data is shared among nested components in React to create dynamic
    and interactive user interfaces.
  prefs: []
  type: TYPE_NORMAL
- en: The MERN Social application is complete with the set of features we defined
    earlier for the application. Users are able to update their profiles with a photo
    and description, follow each other on the application, and create posts with photos
    and text, as well as like and comment on posts. The implementations shown here
    can be tuned and extended further to add more features, utilizing the revealed
    mechanisms of working with the MERN stack.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The MERN Social application developed in this chapter demonstrated how the MERN
    stack technologies can be used together to build out a fully-featured and functioning
    web application with social media features.
  prefs: []
  type: TYPE_NORMAL
- en: We began by updating the user feature in the skeleton application to allow anyone
    with an account on MERN Social to add a description about themselves, and also
    to upload a profile picture from their local files. In the implementation of uploading
    a profile picture, we explored how to upload multipart form data from the client,
    then receive it on the server to store the file data directly in the MongoDB database,
    and then be able to retrieve it back for viewing.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we updated the user feature further, to allow users to follow each other
    on the MERN Social platform. In the user model, we added the capability to maintain
    arrays of user references to represent lists of followers and followings for each
    user. Extending this capability, we incorporated follow and unfollow options in
    the view, and displayed lists of followers, followings, and even lists of users
    not followed yet.
  prefs: []
  type: TYPE_NORMAL
- en: Then, we added the ability to allow users to post content and interact over
    the content by liking or commenting on the post. On the backend, we set up the
    Post model and corresponding APIs, capable of storing the post content that may
    or may not include an image, and maintaining records of likes and comments incurred
    on a post by any user.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, while implementing the views for posting, liking, and commenting features,
    we explored how to use component composition and share changing state values across
    the components to create complex and interactive views.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will expand further on these abilities in the MERN stack, and
    unlock new possibilities as we develop an online marketplace application by extending
    the MERN skeleton application.
  prefs: []
  type: TYPE_NORMAL
