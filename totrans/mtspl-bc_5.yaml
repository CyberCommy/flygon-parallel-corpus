- en: Testing Services with Metasploit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let us now talk about testing the various specialized services. It is likely
    that during our career as a penetration tester we will come across a company or
    a testable environment that only requires testing to be performed on a particular
    server, and this server may run services such as databases, VoIP, or a SCADA control
    system. In this chapter, we will look at the various development strategies to
    use while carrying out penetration tests on these services. In this section, we
    will cover the following points:'
  prefs: []
  type: TYPE_NORMAL
- en: Carrying out database penetration tests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The fundamentals of ICS and their critical nature
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding SCADA exploitation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing Voice over Internet Protocol services
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Service-based penetration testing requires exceptional skills and a sound knowledge
    of the services that we can successfully exploit. Therefore, in this chapter,
    we will look at both the theoretical and the practical challenges of carrying
    out efficient service-based testing.
  prefs: []
  type: TYPE_NORMAL
- en: Testing MySQL with Metasploit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It's well known that Metasploit supports extensive modules for Microsoft's SQL
    server. However, it supports a number of functionalities for other databases as
    well. We have plenty of modules for other databases in Metasploit that support
    popular databases, such as MySQL, PostgreSQL, and Oracle. In this chapter, we
    will cover Metasploit modules for testing a MySQL database.
  prefs: []
  type: TYPE_NORMAL
- en: If you are someone who comes across MSSQL more often, I have covered MSSQL testing
    with Metasploit in my *Mastering Metasploit* book series.
  prefs: []
  type: TYPE_NORMAL
- en: 'Refer to MSSQL testing from the *Mastering Metasploit* book series at:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.packtpub.com/networking-and-servers/mastering-metasploit-second-edition](https://www.packtpub.com/networking-and-servers/mastering-metasploit-second-edition)'
  prefs: []
  type: TYPE_NORMAL
- en: 'So let''s conduct a port scan to see if a database has a target machine running
    on the IP address `172.28.128.3`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00087.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: We can clearly see we have port 3306 open, which is a standard port for the
    MySQL database.
  prefs: []
  type: TYPE_NORMAL
- en: Using Metasploit's mysql_version module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s fingerprint the version of the MySQL instance by using the `mysql_version`
    module from `auxiliary/scanner/mysql`, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00083.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: We can see that we have MYSQL 5.0.51a-3ubuntu5 running on the target.
  prefs: []
  type: TYPE_NORMAL
- en: Brute-forcing MySQL with Metasploit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Metasploit offers great brute-force modules for MySQL databases. Let''s use
    the `mysql_login` module to start testing for credentials, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00154.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'We can set the required options, which are `RHOSTS`, to the IP address of the
    target, then set `BLANK_PASSWORDS` to true and simply `run` the module as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00175.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: We can see that the database is running with the user as root with a blank password.
    While conducting on-site VAPT, you will often come across many database servers
    running with default credentials. In the next few sections, we will use these
    credentials to harvest more details about the target.
  prefs: []
  type: TYPE_NORMAL
- en: Finding MySQL users with Metasploit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Metasploit offers a `mysql_hashdump` module to gather details such as the USERNAME
    and PASSWORD hashes for the other users of the MySQL database. Let''s see how
    we can use this module:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00110.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'We just need to set `RHOSTS`; we can skip setting the PASSWORD since it''s
    blank. Let''s `run` the module:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00114.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: We can see that we have four other users where only the user admin is password
    protected. Additionally, we can copy the hash and run it against password cracking
    tools to obtain clear text passwords.
  prefs: []
  type: TYPE_NORMAL
- en: Dumping the MySQL schema with Metasploit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can also dump the entire MySQL schema with the `mysql_schemadump` module,
    as shown in the following screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00097.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'We set the `USERNAME` and the `RHOSTS` option to `root` and `172.28.128.3`
    respectively and run the module as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00270.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: We can see we have successfully dumped the entire schema to the `/root/msf/loot`
    directory, as shown in the preceding screenshot. Dumping the schema will give
    us a better view of the tables and the types of database running on the target,
    and will also help in building crafted SQL queries, which we will see in a short
    while.
  prefs: []
  type: TYPE_NORMAL
- en: Using file enumeration in MySQL using Metasploit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Metasploit offers the `mysql_file_enum` module to look for directories and
    files existing on the target. This module helps us figure out directory structures
    and the types of application running on the target''s end. Let''s see how we can
    run this module:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00187.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Primarily, we need to set the USERNAME, RHOSTS, and FILE_LIST parameters to
    make this module work on the target.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `FILE_LIST` option will contain the path of the list of directories we
    want to check. We created a simple file at `/root/desktop/` with the name file
    and put three entries in it, namely /var, /var/www, and /etc/passwd. Let''s run
    the module and analyze the results as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00068.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: We can see that all the directories we checked exist on the target system, thus
    giving us a better view of the directory structure and key files on the destination
    end.
  prefs: []
  type: TYPE_NORMAL
- en: Checking for writable directories
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Metasploit also provides a `mysql_writable_dirs` module that helps to figure
    out writable directories on the target. We can run this module in a similar way
    as we did with the previous modules by setting the DIR_LIST option to our file
    containing the list of directories, along with the RHOSTS and USERNAME options,
    as shown in the following screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00105.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Setting all the options, let''s run the module on the target and analyze the
    results as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00138.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: We can see that in /var/www/html the /tmp/ directories are writable. We will
    look at how we can make use of the writable directories in a short while.
  prefs: []
  type: TYPE_NORMAL
- en: Enumerating MySQL with Metasploit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A particular module to use for the detailed enumeration of the MySQL database
    also exists in Metasploit. The module `auxiliary/admin/mysql/mysql_enum` single-handedly
    provides a ton of information for many of the modules. Let''s use this module
    to gain information about the target as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00144.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Setting the `RHOSTS`, `USERNAME`, and `PASSWORD` (if not blank) options, we
    can run the module as shown in the preceding screenshot. We can see that the module
    has gathered a variety of information, such as the server hostname, data directory,
    logging state, SSL information, and privileges, as shown in the following screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00177.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Having gathered enough information about the database, let us also execute some
    interesting SQL queries on the target in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Running MySQL commands through Metasploit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we have information regarding the database schema, we can run any
    SQL command using the `auxiliary/admin/mysql/mysql_sql` module, as shown in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00206.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Providing the SQL command using the SQL option, we can run any MySQL command
    on the target. However, we will obviously require setting the `RHOST`, `USERNAME`,
    and `PASSWORD` options as well.
  prefs: []
  type: TYPE_NORMAL
- en: Gaining system access through MySQL
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We just saw how we could run SQL queries through MySQL. Let''s run some interesting
    and dangerous queries to obtain complete access to the machine, as shown in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00240.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'In the preceding screenshot, we set the SQL option to the select "<?php phpinfo()
    ?>" INTO OUTFILE "/var/www/html/a.php" command and ran the module against the
    target. This command will write the text <?php phpinfo() ?> to a file named a.php
    at path /var/www/html/a.php. We can confirm the successful execution of the module
    by browsing to the file through the browser, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00255.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Bingo! We have successfully managed to write a file on the target. Let''s enhance
    this attack vector by writing a `<?php system($_GET[''cm'']);?>` string into an
    another file called `b.php` in the same directory. Once written, this file will
    receive system commands using the `cm` parameter and will execute them using the
    system function in PHP. Let''s send this command as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00241.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: To escape double quotes, we will use backslash in the SQL command.
  prefs: []
  type: TYPE_NORMAL
- en: 'Running the module, we can now verify the existence of the `b.php` file through
    the browser as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00146.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: We can see that providing a system command such as `cat/etc/password` as a parameter
    to the `b.php` file outputs the content of the `/etc/passwd` file on the screen,
    denoting a successful remote code execution.
  prefs: []
  type: TYPE_NORMAL
- en: 'To gain system access, we can quickly generate a Linux meterpreter payload
    and can host it on our machine as we did for the examples in the earlier chapters.
    Let''s download our meterpreter payload to the target by supplying the `wget`
    command followed by the path of our payload in the `cm` parameter, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00172.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'We can verify whether the file was downloaded successfully to the target by
    issuing the `ls` command as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00189.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Yup, our file was downloaded successfully. Let''s provide the necessary permissions
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00230.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'We performed a `chmod 777` to the `29.elf` file, as shown in the preceding
    screenshot. We will need to set up a handler for the Linux meterpreter as we did
    with our previous examples. However, make sure that the handler is running before
    issuing the command to execute the binary. Let''s execute the binary through the
    browser as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00252.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Yeah! We got the meterpreter access to the target and can now perform any post-exploitation
    functions we choose.
  prefs: []
  type: TYPE_NORMAL
- en: In the case of a privileged user other than root, we can provide `+x` instead
    of `777` while using the `chmod` command.
  prefs: []
  type: TYPE_NORMAL
- en: Refer to *Chapter 5* from the book *Mastering Metasploit* for more on testing
    MSSQL databases.
  prefs: []
  type: TYPE_NORMAL
- en: Always make a note of all the backdoors left on the server throughout any entire
    penetration test so that a proper cleanup can be performed by the end of the engagement.
  prefs: []
  type: TYPE_NORMAL
- en: The fundamentals of SCADA
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Supervisory Control and Data Acquisition** (**SCADA**) is required for controlling
    activities in dams, power grid stations, oil refineries, large server control
    services, and so on.'
  prefs: []
  type: TYPE_NORMAL
- en: SCADA systems are built for highly specific tasks, such as controlling the level
    of dispatched water, managing the gas lines, controlling the electricity power
    grid to monitor power in a particular city, and various other operations.
  prefs: []
  type: TYPE_NORMAL
- en: Analyzing security in SCADA systems
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will discuss how we can breach the security of SCADA systems.
    We have plenty of frameworks that can test SCADA systems, but discussing them
    will push us beyond the scope of this book. Therefore, keeping it simple, we will
    restrict our discussion to SCADA exploitation only, carried out using Metasploit.
  prefs: []
  type: TYPE_NORMAL
- en: The fundamentals of testing SCADA
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let us understand the basics of exploiting SCADA systems. SCADA systems can
    be compromised using a variety of exploits in Metasploit, which were added recently
    to the framework. Also, some of the SCADA servers that are located might have
    the default username and password; this is rarely the case these days, but there
    still might be a possibility that the username and password are unchanged in the
    target server.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let us try finding some SCADA servers. We can achieve this by using an excellent
    resource—[http://www.shodanhq.com](http://www.shodanhq.com):'
  prefs: []
  type: TYPE_NORMAL
- en: First, we need to create an account for the Shodan website.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After registering, we can simply find our API key for the Shodan services within
    our account. Obtaining the API key, we can search for various services through
    Metasploit.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let us try to find the SCADA systems configured with technologies from Rockwell
    Automation using the `auxiliary/gather/shodan_search` module.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `QUERY` option, we will just type in `Rockwell`, as shown in the following
    screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00265.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'We set the `SHODAN_APIKEY` option to the API key found in our Shodan account.
    Let us put the `QUERY` option as `Rockwell` and analyze the results as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00263.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: As we can clearly see, we have found a large number of systems on the Internet
    running SCADA services with Rockwell Automation by using the Metasploit module.
  prefs: []
  type: TYPE_NORMAL
- en: SCADA-based exploits
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Over the last few years, SCADA systems have been exploited at much higher rates
    than in previous years. SCADA systems may suffer from various kinds of vulnerabilities,
    such as stack-based overflow, integer overflow, cross-site scripting, and SQL
    injection.
  prefs: []
  type: TYPE_NORMAL
- en: Moreover, the impact of these vulnerabilities may cause danger to life and property,
    as we have discussed before. The reason why hacking SCADA devices is possible
    is largely due to both the fact that SCADA developers and operators have programmed
    the system without a focus on security and the fact that the operating procedures
    used are inadequate.
  prefs: []
  type: TYPE_NORMAL
- en: Let us see an example of a SCADA service and try to exploit it with Metasploit.
    However, please do not pick a random host from Shodan and try exploiting it. SCADA
    systems are very critical and can result in some serious prison time. Anyway,
    in the following example, we will exploit the DATAC RealWin SCADA Server 2.0 system
    based on a Windows XP system using Metasploit.
  prefs: []
  type: TYPE_NORMAL
- en: The service runs on port 912, which is vulnerable to buffer overflow in the
    sprintf C function. The sprintf function is used in the DATAC RealWin SCADA server's
    source code to display a particular string constructed from the user input. The
    vulnerable function, when abused by the attacker, can lead to full compromise
    of the target system.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let us try exploiting the DATAC RealWin SCADA Server 2.0 system with Metasploit
    by using the `exploit/windows/scada/realwin_scpc_initialize` exploit as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00267.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'We set the `RHOST` as `192.168.10.108` and the `payload` as `windows/meterpreter/bind_tcp`.
    The default port for DATAC RealWin SCADA is `912`. Let us exploit the target and
    check whether we can `exploit` the vulnerability:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00272.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Bingo! We successfully exploited the target. Let us load the `mimikatz` extension
    using the `load` command to find the system''s password in clear text, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00275.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: We can see that by issuing a `kerberos` command, we can locate the password
    in clear text.
  prefs: []
  type: TYPE_NORMAL
- en: We have plenty of exploits in Metasploit that specifically target vulnerabilities
    in SCADA systems. To find out more information about these vulnerabilities, you
    can refer to the greatest resource on the web for SCADA hacking and security at
    [http://www.scadahacker.com](http://www.scadahacker.com). You should be able to
    see many exploits listed under the *msf-scada* section at [http://scadahacker.com/resources/msf-scada.html](http://scadahacker.com/resources/msf-scada.html).
  prefs: []
  type: TYPE_NORMAL
- en: The website [http://www.scadahacker.com](http://www.scadahacker.com) has maintained
    a list of vulnerabilities found in various SCADA systems over the past few years.
    The beauty of the list lies in the fact that it provides precise information about
    the SCADA product, the vendor of the product, the systems component, Metasploit
    reference module, disclosure details, and the first Metasploit module disclosure
    dates as well.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing secure SCADA
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Securing SCADA is a tough job when it has to be applied practically; however,
    we can look for some of the following key points when securing SCADA systems:'
  prefs: []
  type: TYPE_NORMAL
- en: Keep an eye on every connection made to SCADA networks and figure out whether
    any unauthorized attempts were made to access the system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Make sure that all the network connections are disconnected when they are not
    required, and, if the SCADA systems are air gapped, that any other endpoint that
    eventually connects to it is secured and scrutinized in the same manner
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implement all the security features provided by the system vendors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implement IDPS technologies for both internal and external systems and apply
    incident monitoring for 24 hours
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Document all the network infrastructure and provide individual roles to administrators
    and editors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Establish IR teams and blue teams for identifying attack vectors on a
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: regular basis
  prefs: []
  type: TYPE_NORMAL
- en: Restricting networks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Network connectivity can be made limited in the event of attacks related to
    unauthorized access, unwanted open services, and so on. Implementing this solution
    by removing or uninstalling services is the best possible defense against various
    SCADA attacks.
  prefs: []
  type: TYPE_NORMAL
- en: SCADA systems are implemented on Windows XP boxes, and this increases the attack
    surface significantly. If you are applying SCADA systems, make sure your Windows
    boxes are up to date to prevent the more common attacks.
  prefs: []
  type: TYPE_NORMAL
- en: Testing Voice over Internet Protocol services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let us now focus on testing **Voice over Internet Protocol** (**VoIP**)-enabled
    services and see how we can check for various flaws that might affect VoIP services.
  prefs: []
  type: TYPE_NORMAL
- en: VoIP fundamentals
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: VoIP is a much less costly technology when compared to the traditional telephonic
    services. VoIP provides much more flexibility than traditional telephony in terms
    of telecommunication, and offers various features, such as multiple extensions,
    caller ID services, logging, the recording of each call made, and so on. Some
    companies now have their **Private Branch exchange** (**PBX**) on IP-enabled phones
    these days.
  prefs: []
  type: TYPE_NORMAL
- en: The traditional and still-present telephonic system is still vulnerable to interception
    through physical access, such that if an attacker alters the connection of a phone
    line and attaches their transmitter, they will be able to make and receive calls
    to their device and can enjoy Internet and fax services.
  prefs: []
  type: TYPE_NORMAL
- en: However, in the case of VoIP services, we can compromise security without going
    on to the wires. Nevertheless, attacking VoIP services is a tedious task if you
    do not have a basic knowledge of how it works. This section sheds light on how
    we can compromise VoIP in a network without intercepting the wires.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, in the hosted services-type VoIP technology, there is no PBX at
    the client premises. However, all the devices at the client premises connect to
    the PBX of the service provider via the Internet—that is, by using **Session Initiation
    Protocol** (**SIP**) lines using IP/VPN technologies.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let us see how this technology works with the help of the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00155.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Many SIP service providers on the Internet provide connectivity for softphones,
    which can be used directly to enjoy VoIP services. Also, we can use any client
    softphone to access the VoIP services, such as Xlite, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00006.gif)'
  prefs: []
  type: TYPE_IMG
- en: Fingerprinting VoIP services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We can fingerprint VoIP devices over a network using the SIP scanner modules
    built into Metasploit. A commonly known SIP scanner is the **SIP endpoint scanner**
    that is built into Metasploit. We can use this scanner to identify devices that
    are SIP enabled on a network by issuing the request for options from the various
    SIP services.
  prefs: []
  type: TYPE_NORMAL
- en: Let us carry on with scanning VoIP services using the options auxiliary module
    under
  prefs: []
  type: TYPE_NORMAL
- en: '`/auxiliary/scanner/sip` and analyze the results. The target here is a Windows
    XP system with the Asterisk PBX VoIP client running. We start by loading the auxiliary
    module for scanning SIP services over a network, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00061.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'We can see that we have plenty of options that we can use with the `auxiliary/scanner/sip/options`
    auxiliary module. We need to configure only the `RHOSTS` option. However, for
    a vast network, we can define the IP ranges with the **Classless Inter-domain
    Routing** (**CIDR**) identifier. Once run, the module will start scanning for
    IPs that may be using SIP services. Let us run this module as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00239.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: As we can clearly see, when this module runs, it returns a lot of information
    related to the IPs that are using SIP services. This information contains the
    agent denoting the name and version of the PBX and verbs, which define the type
    of requests supported by the PBX. Hence, we can use this module to gather a lot
    of knowledge about the SIP services on the network.
  prefs: []
  type: TYPE_NORMAL
- en: Scanning VoIP services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'After finding out information about the various option requests supported by
    the target, let us now scan and enumerate the users of the VoIP services using
    another Metasploit module—namely `auxiliary/scanner/sip/enumerator`. This module
    will search for VoIP services over a target range and will try to enumerate its
    users. Let us see how we can achieve this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00032.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'We now have listed the options that we can use with this module. We will now
    set some of the following options to run this module successfully:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00271.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: As we can see, we have set the `MAXEXT`, `MINEXT`, `PADLEN`, and `RHOSTS` options.
  prefs: []
  type: TYPE_NORMAL
- en: In the enumerator module used in the preceding screenshot, we defined `MINEXT`
    and `MAXEXT` as `3000` and `3005` respectively. `MINEXT` is the extension number
    to start the search from, and `MAXEXT` refers to the last extension number to
    complete the search on. These options can be set for a gigantic range—such as
    `MINEXT` to `0` and `MAXEXT` to `9999`—to find out the various users using VoIP
    services on extension numbers `0` to `9999`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let us run this module on a target range by setting the `RHOSTS` variable to
    the CIDR value, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00021.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Setting `RHOSTS` as `192.168.65.0/24` will scan the entire subnet. Now, let
    us run this module and see what output it presents:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00069.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: This search returned many users using SIP services. Also, the effect of `MAXEXT`
    and `MINEXT` was that only the users from the extensions `3000` to `3005` were
    scanned. An extension can be thought of as a standard address for users in a particular
    network.
  prefs: []
  type: TYPE_NORMAL
- en: Spoofing a VoIP call
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Having gained enough knowledge about the various users using SIP services,
    let us try making a fake call to the user using Metasploit. Assuming that the
    target user is running SipXphone 2.0.6.27 on a Windows XP platform, let us send
    the user a fake invite request using the `auxiliary/VoIP/sip_invite_spoof` module,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00077.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: We will set the RHOSTS option with the IP address of the target and the EXTENSION
    as 4444 for the target. Let us keep SRCADDR to 192.168.1.1, which will spoof the
    address source making the call.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let us now `run` the module as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00131.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let us see what is happening on the victim''s side:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00160.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: We can clearly see that the softphone is ringing and displaying the caller as
    192.168.1.1, and is also displaying the predefined message from Metasploit.
  prefs: []
  type: TYPE_NORMAL
- en: Exploiting VoIP
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To gain complete access to the system, we can try exploiting the softphone
    software as well. We have the target''s IP address from the previous scenarios.
    Let us scan and exploit it with Metasploit. However, there are specialized VoIP
    scanning tools available within Kali operating systems that are specifically designed
    to test VoIP services only. The following is a list of applications that we can
    use to exploit VoIP services:'
  prefs: []
  type: TYPE_NORMAL
- en: Smap
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sipscan
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sipsak
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: VoiPong
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Svmap
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Coming back to the exploitation part of this exercise, we have some of the exploits
    in Metasploit that can be utilized on softphones. Let us look at an example of
    this.
  prefs: []
  type: TYPE_NORMAL
- en: 'The application that we are going to exploit here is SipXphone version 2.0.6.27\.
    This application''s interface may look similar to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00179.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: About the vulnerability
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The vulnerability lies in the handling of the Cseq value by the application.
    Sending an overlong string causes the application to crash, and in most cases,
    it will allow the attacker to run malicious code and gain access to the system.
  prefs: []
  type: TYPE_NORMAL
- en: Exploiting the application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let us now exploit the SipXphone version 2.0.6.27 application with Metasploit.
    The exploit that we are going to use here is `exploit/windows/sip/sipxphone_cseq`.
    Let us load this module into Metasploit and set the required options:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00208.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'We need to set the values for `RHOST`, `LHOST`, and `payload`. As everything
    is now set, let us `exploit` the target application as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00242.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Voila! We got the meterpreter in no time at all. Hence, exploiting VoIP with
    Metasploit can be easy in the case of software-based bugs. However, when testing
    VoIP devices and other service-related bugs, we can use third-party tools for
    adequate testing.
  prefs: []
  type: TYPE_NORMAL
- en: An excellent resource for testing VoIP can be found at [http://www.viproy.com](http://www.viproy.com).
  prefs: []
  type: TYPE_NORMAL
- en: Summary and exercises
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Throughout this chapter, we saw how we could test MySQL databases, VoIP services,
    and SCADA systems for a number of vulnerabilities. We saw how an attacker gaining
    access to just the database could end up having system-level access. We also saw
    how vulnerabilities in ICS and SCADA can lead an attacker to compromise an entire
    server, which may result in enormous damage, and we saw how PBX deployed in various
    companies can be used not only to spoof calls but to compromise the whole client
    system. To practice your skills, you can perform the following further exercises
    at your own pace:'
  prefs: []
  type: TYPE_NORMAL
- en: Try testing MSSQL and PostgreSQL databases and make a note of the modules.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Download other software-based SCADA systems and try exploiting them locally.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Try to run system commands for MSSQL.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Resolve error 13 on MySQL for writing files onto the server.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The database testing covered in this chapter was performed on Metasploitable
    2\. Try setting up the same environment locally and repeat the exercise.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the last five chapters, we covered a variety of modules, exploits, and services,
    which took a good amount of time. Let's look at how we can speed up the process
    of testing with Metasploit in [Chapter 6](part0114.html#3CN040-a731d733dba14ccabae643b74e2c8790),
    *Fast-Paced Exploitation with Metasploit*.
  prefs: []
  type: TYPE_NORMAL
