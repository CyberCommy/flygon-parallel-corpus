- en: '*Chapter 7*: Adding, Patching, and Managing Software'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Maintaining a system's software, to close security issues, apply fixes, and
    keep the system up to date is an essential task in systems management. In this
    chapter, we will review how the **Red Hat Subscription Management system** works,
    how to ensure that packages are verified, and other software management tasks
    to keep the system fresh.
  prefs: []
  type: TYPE_NORMAL
- en: Going a bit more into the details, in this chapter, we will go over how the
    subscription system works and how to use your developer subscription for self-training
    or installing a personal server. We will also check how to manage the software
    origins, also known as repositories, that your system will use. That includes
    learning the role of signatures in package management, to ensure the software
    installed is the one Red Hat provides. We will also learn about key tasks such
    as adding and removing packages and package groups, using different software versions
    with modularity, and reviewing and rolling back changes.
  prefs: []
  type: TYPE_NORMAL
- en: To simplify expanding your knowledge, enabling you to prepare your own labs,
    we will see how to have a full local copy of all the **Red Hat Enterprise Linux
    (RHEL)** repositories in your system.
  prefs: []
  type: TYPE_NORMAL
- en: And last but not the least, we need to understand **Red Hat Package Manager**
    (**RPM**), now changed to RPM Package Manager, by learning the basics of how the
    internals of package management work.
  prefs: []
  type: TYPE_NORMAL
- en: 'In summary, we will cover the following topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: RHEL subscription registration and management
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing repositories and signatures with Yum/DNF
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Doing software installations, updates, and rollbacks with Yum/DNF
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating and syncing repositories with createrepo and reposync
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding RPM internals
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now, let's start managing the software in our systems.
  prefs: []
  type: TYPE_NORMAL
- en: RHEL subscription registration and management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: RHEL is a fully **open source operating system**, which means that all the source
    code used to build it is available to access, modify, redistribute and learn from.
    Pre-built binaries are, on the other hand, delivered as a service, and accessible
    via a subscription. As seen in [*Chapter 1*](B16799_01_Final_SK_ePub.xhtml#_idTextAnchor014),
    *Installing RHEL8*, we can have, for our own personal use, a developer subscription.
    That subscription provides access to ISO images, but also to the updated, signed
    packages that are part of RHEL 8\. These are the exact same bits that are used
    in production by so many companies worldwide.
  prefs: []
  type: TYPE_NORMAL
- en: Let's see how to use that subscription with our own system.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let''s take a look at the **Red Hat Customer Portal** at [https://access.redhat.com](https://access.redhat.com)
    and click **LOG IN**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.1 – Log into the Red Hat Customer Portal'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16799_07_001.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.1 – Log into the Red Hat Customer Portal
  prefs: []
  type: TYPE_NORMAL
- en: 'Once we click on `student` as an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.2 – Entering our username in Red Hat Single Sign-On'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16799_07_002.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.2 – Entering our username in Red Hat Single Sign-On
  prefs: []
  type: TYPE_NORMAL
- en: 'Now it''s time to type our password to validate:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.3 – Entering our password in Red Hat Single Sign-On'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16799_07_003.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.3 – Entering our password in Red Hat Single Sign-On
  prefs: []
  type: TYPE_NORMAL
- en: 'Once logged in, we shall go to the **Red Hat subscriptions page** by clicking
    on the **SUBSCRIPTIONS** link in the top bar:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.4 – Accessing the subscriptions page in the Red Hat Customer Portal'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16799_07_004.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.4 – Accessing the subscriptions page in the Red Hat Customer Portal
  prefs: []
  type: TYPE_NORMAL
- en: 'The subscriptions page will look like this for a user with one physical machine
    subscribed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.5 – Subscription page example in the Red Hat Customer Portal'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16799_07_005.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.5 – Subscription page example in the Red Hat Customer Portal
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: The Developer Subscription was updated in January 2021 to support up to 16 systems.
    You can use your account for more than one single system to simulate larger production-like
    deployments.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s register our new system:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: With this, our system will be registered in the Red Hat **Content Delivery Network**
    (**CDN**) but will still not have a subscription assigned.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s go to the subscriptions page and refresh to see the new system there.
    We will click on **View all Systems** to continue:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.6 – Subscriptions page with the new subscribed system'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16799_07_006.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.6 – Subscriptions page with the new subscribed system
  prefs: []
  type: TYPE_NORMAL
- en: 'We can see our new system on the page, `rhel8.example.com`, with a red square
    next to it to show it does not have a subscription attached to it. Let''s click
    on the name of the system to see the details:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.7 – Subscription page with the new subscribed system'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16799_07_007.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.7 – Subscription page with the new subscribed system
  prefs: []
  type: TYPE_NORMAL
- en: 'Once on the specific system page, we see all the details for the system. We
    click on **Subscriptions** to see the attached ones:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.8 – Subscriptions page with the new subscribed system''s details'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16799_07_008.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.8 – Subscriptions page with the new subscribed system's details
  prefs: []
  type: TYPE_NORMAL
- en: 'We can see on the page that there are no attached subscriptions for this system:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.9 – Subscriptions page with the new subscribed system, with no subscription
    attached'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16799_07_009.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.9 – Subscriptions page with the new subscribed system, with no subscription
    attached
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s attach a subscription to our system using `subscription-manager attach`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The result of the command shows that the system is now registered and has a
    subscription attached to it for `Red Hat Enterprise Linux for x86_64`. Let''s
    refresh the page for the system to ensure the subscription attachment runs properly:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.10 – Subscriptions page with the new subscribed system, with one
    subscription attached'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16799_07_010.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.10 – Subscriptions page with the new subscribed system, with one subscription
    attached
  prefs: []
  type: TYPE_NORMAL
- en: With this, we know for sure that the system is properly registered and subscribed
    to the Red Hat CDN and it's ready to access all the software, patches, and updates
    available from it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Also, in the system, we can see that a new file with the information on the
    software **repositories**, or **repos** for short, has been created:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Now we know how to manage available subscriptions and assign them to a running
    system so it has access to the software binaries built by Red Hat. Let's learn
    more about how to use the provided repositories in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Managing repositories and signatures with YUM/DNF
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: RHEL like many other Linux distributions, has a mechanism to provide software
    based on repos. These contain a list of software packages (which could be end
    user applications such as Firefox, or components for them such as GTK3), a list
    of dependencies between the packages, and other useful metadata.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once we finish subscribing the system, we can take a look at the repositories
    available in the system using `yum` or `dnf`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, the output of `yum` and `dnf` is exactly the same. As a matter
    of fact, `dnf` is the evolution of `yum`, and in RHEL8 the `yum` command is just
    a symbolic link to `dnf`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: They both can be used indistinctively in RHEL8\. From now on, we will use `dnf`
    only, but remember, if you prefer `yum`, feel free to use it.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: '**YUM** used to be an acronym for **Yellowdog Updater Modified**, a project
    that started as a Linux distribution for Macs called Yellowdog. **DNF** stands
    for **Dandified YUM**.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s take a look at the repository definition created during the subscription
    attachment `/etc/yum.repos.d/redhat.repo`. We can edit the file and go to the
    entry of the `BaseOS` repository shown above `rhel-8-for-x86_64-baseos-rpms`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, every section in the file starts with the name of the section
    between brackets – in the previous case, `[rhel-8-for-x86_64-baseos-rpms]`. Now
    let''s check all the entries under this section:'
  prefs: []
  type: TYPE_NORMAL
- en: '**name**: A long descriptive name for the repository. It''s the one displayed
    when we listed the repos in the previous example.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`$releasever` variable that will be substituted before being accessed. Other
    methods are NFS, HTTP, and FTP.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`1`, it will be enabled, and when set to `0` it will be disabled.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`1` it will be enabled and all the packages installed in the system with `dnf`
    / `yum` will be verified using their `gpg` signatures against a provided key.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`gpg`, the downloaded packages.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`1`, and disabled when set to `0`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**sslcacert**: A certificate used as a Certificate Authority to validate client
    certificates.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**sslclient key**: A client key used to habilitate the client certificate.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**sslclientcert**: The client certificate that the machine will use to identify
    itself against the CDN.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**metadata_expire**: The time in seconds after which to consider the retrieved
    metadata as expired. The default, as shown here, is 24 hours.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dnf`) to use the metadata as downloaded in this repository.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The minimal required options to have a running repository are: `name`, `baseurl`,
    and `gpgckeck`, having this last one set to `0`.'
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: Although it is possible to change the configuration of the repositories by editing
    the files, the best way to modify the Red Hat provided repos is by using commands
    that will be shown in this chapter. That's because the `redhat.repo` file will
    be overwritten by the subscription manager when refreshing data.
  prefs: []
  type: TYPE_NORMAL
- en: 'By running `dnf repolist`, we obtained the list of repositories `enabled` in
    the system. What if we want to see all the repositories, the ones enabled and
    the ones disabled? That can be done by running `dnf` `repolist --all`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.11 – Partial output of dnf repolist –all'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16799_07_011.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.11 – Partial output of dnf repolist –all
  prefs: []
  type: TYPE_NORMAL
- en: 'The list is very extensive. It includes the repositories with the binaries
    as used in many production cases, from SAP to managing systems with Satellite.
    We can filter it with `grep` to search for `supplementary`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'There are four different types of channels here:'
  prefs: []
  type: TYPE_NORMAL
- en: '`rhel-8-for-x86_64-supplementary-rpms`, which contains the packages, also known
    as `rpms`, ready to be installed in the system. These apply during the standard
    maintenance period.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`rhel-8-for-x86_64-supplementary-eus-rpms`, which contains `eus` in the name.
    These provide packages with backports to be able to keep the same minor version
    for a longer time. Don''t use them unless it is required by a third-party vendor.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`rhel-8-for-x86_64-supplementary-source-rpms`, which contains `source` in the
    name. They provide the source used to build the packages delivered in *regular*
    and *extended updated support* channels.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`rhel-8-for-x86_64-supplementary-debug-rpms`, which contain `debug` in their
    name. These include the debugging information as generated when building a package
    useful for deep troubleshooting of issues.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We can enable `rhel-8-for-x86_64-supplementary-rpms` by using the `config-manager`
    option of `dnf`, running the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The repository is now enabled. You may want to try to enable and disable other
    repositories to practice.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s now try to add a repository for which we know only its URL, such as
    the `dnf config-manager`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'We can inspect the newly created file – `/etc/yum.repos.d/mirror.uv.es_mirror_fedora-epel_8_Everything_x86_64_.repo`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'You may have realized that there is an option missing in this repo, however,
    let''s move ahead. I can search for a package available in EPEL, such as, for
    example, `screen`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The package is found, now let''s try to install it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: As we can see there is an error trying to install from this source, as it required
    the `gpgcheck` and `gpgkey` entries to be configured to have a properly secured
    repo (as `gpg` ensures that the content delivered is the same as the content created).
  prefs: []
  type: TYPE_NORMAL
- en: 'We can obtain `gpgkey` from the same mirror, at the URL [http://mirror.uv.es/mirror/fedora-epel/RPM-GPG-KEY-EPEL-8](http://mirror.uv.es/mirror/fedora-epel/RPM-GPG-KEY-EPEL-8),
    and drop it where `dnf` will search for it, `/etc/pki/rpm-gpg/`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let''s modify the file `/etc/yum.repos.d/mirror.uv.es_mirror_fedora-epel_8_Everything_x86_64_.repo`
    to look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'You can see we added both the `gpgcheck` and `gpgkey` entries in the file.
    Let''s try installing the `screen` package again:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'You''ll notice that there is a step in which it asks you to confirm that the
    `gpg` key fingerprint is correct: `94E2 79EB 8D8F 25B2 1810 ADF1 21EA 45AB 2F86
    D6A1`. To do so, you can go to the Fedora security page, as the Fedora project
    is managing EPEL, and check. The URL for that page is [https://getfedora.org/security/](https://getfedora.org/security/):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.12 – Partial capture of the Fedora security page with an EPEL8 gpg
    fingerprint'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16799_07_012.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.12 – Partial capture of the Fedora security page with an EPEL8 gpg
    fingerprint
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, it is correct. We have just verified that the signature we are
    using has the same fingerprint as announced by the project managing it, and now
    all the packages downloaded from this repo will be verified with it to avoid package
    tampering (which is someone changing the content before you receive it).
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s review the commands that we used, which `dnf` provides to manage repos:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B16799_07_Table_7.1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now that we know how to securely manage repositories in RHEL, let's start adding
    more packages to our system, updating them, and undoing installations if we need
    to.
  prefs: []
  type: TYPE_NORMAL
- en: Doing software installations, updates, and rollbacks with YUM/DNF
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the previous section, we saw how to install a package. During the process,
    we saw a confirmation request to ensure that we were sure that we wanted to include
    new software in the system. Let''s now install software with `dnf install`, but
    using the `–y` option to answer yes to all questions that the command will issue:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, the `zip` package was installed, and also a dependent package
    called `unzip`, without asking questions. We also notice that `dnf` finds the
    dependent packages, resolves the **dependencies**, and installs all that is needed
    for a package to run. This way, the system is kept in a coherent status, making
    it more reliable and predictable.
  prefs: []
  type: TYPE_NORMAL
- en: 'We cam see which packages are ready to be updated using the `dnf check-update`
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The easiest way to update a package and apply fixes and security patches is
    to use `dnf update`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'To update everything, just run `dnf update` without specifying the package:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.13 – Partial capture of RHEL updating with dnf/yum'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16799_07_013.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.13 – Partial capture of RHEL updating with dnf/yum
  prefs: []
  type: TYPE_NORMAL
- en: 'The result of running `dnf update` in the system is the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: These were examples of packages upgraded in a system. Your system, depending
    on the time you last upgraded it and the newly released packages, may have a different
    output.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: The `kernel` is the most important part of the system. It enables hardware access
    and all the basic functions of the operating system. That's why, instead of upgrading
    it, a new version is installed. The system keeps the previous two versions just
    in case the system becomes unbootable, and one of them can be selected to run
    easily.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can search the packages available with the `dnf search` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'We can obtain extended information about a package, installed or not, with
    `dnf info`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'We can also remove an installed package with `dnf remove`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Sometimes you want to install some packages that come together to perform a
    specific task, and that''s what `dnf grouplist`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: You may run it without `| grep Tools` to see the full list.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s install the `System Tools` group with `dnf groupinstall`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'The entire output of the preceding command is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.14 – Partial capture of RHEL installing a group dnf/yum'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16799_07_014.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.14 – Partial capture of RHEL installing a group dnf/yum
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the preinstallation completes, we can see that we will install 78 packages:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Replying with `y` will perform the installation (note that the `–y` option works
    here too, assuming yes to all questions).
  prefs: []
  type: TYPE_NORMAL
- en: 'We can check the history of all the installation transactions with `dnf history`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.15 – Partial capture of RHEL dnf/yum history'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16799_07_015.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.15 – Partial capture of RHEL dnf/yum history
  prefs: []
  type: TYPE_NORMAL
- en: 'It''s easy to obtain specific info from each transaction specifying the number
    of it to `dnf history`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'More interestingly, we can roll back to one of the previous points marked with
    `dnf history rollback`. To make it faster, *install* the `lsof` package and then
    *roll back* to the previous number:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'We can also undo a single transaction with `yum history undo`. Let''s see it
    with this transaction:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s review the most important transactions done with `dnf`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B16799_07_Table_7.2a.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '![](img/B16799_07_Table_7.2b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'There is a new feature on RHEL 8 that wasn''t available in the previous version,
    which is `dnf` so there is no need to install extra software:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: The `dnf module list` command, without specifying any package, would show the
    full list of modules. Try it!
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, we have three different versions of the PostgreSQL database
    available in RHEL8, which are 9.6, 10, and 12\. None of them are enabled and the
    default one is version 10\.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s enable version 12 of PostgreSQL using `dnf module`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of the preceding command can be seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.16 – Capture of the PostgreSQL module list'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16799_07_016.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.16 – Capture of the PostgreSQL module list
  prefs: []
  type: TYPE_NORMAL
- en: 'From now on Yum will install, update, and maintain in this system version 12
    of PostgreSQL. Let''s install it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: In the previous example, version 12 was installed.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can remove the PostgreSQL package and reset the module status to go back
    to the initial point:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s review the commands shown in this section for modularity:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B16799_07_Table_7.3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: For more info on modularity, go to the system's manual page by running `man
    dnf.modularity`.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have learned how to handle software transactions in RHEL, let's
    go ahead with how to create and handle local repositories.
  prefs: []
  type: TYPE_NORMAL
- en: Creating and syncing repositories with createrepo and reposync
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It's common that we receive an RPM file and keep it in a repository that we
    can use on our machine (and sometimes share it with other machines with a web
    server of an NFS share). It's also common that when we start building our own
    RPMs, we distribute them and, to do so, we need to create a repository. To do
    that, we can use the **createrepo** tool.
  prefs: []
  type: TYPE_NORMAL
- en: 'First let''s create a folder in `/var/tmp` for repos:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Then let''s create a folder for `slack`, a common tool to communicate with
    your team, and download the RPM package:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Now we have a repository with an RPM file. We could have one with as many RPMs
    as we want but we will continue with only this single package.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s install the `createrepo` tool:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'And now we could simply run it to create a repository in the current folder
    with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'We see that the `repodata` folder has been created. In it, we can find the
    `repomd.xml` file that defines the repository content and also the recently created
    index files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we can add the repository to the system. We could do it without `gpg` signatures,
    setting the `gpgcheck` variable to `0` but, to have better security, let''s do
    it with the `gpg` signature. By searching in the `slack` page, we find the signature
    and download it to the `/etc/pki/rpm-gpg` directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Then we add the repository to the system by creating the file `/etc/yum.repos.d/local-slack.repo`
    with the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'And now we can try installing `slack`. To run completely, it would require
    that the package group *Server with a GUI* is installed, however, for the purpose
    of this exercise, we can continue with its installation. We can do so by running
    `dnf -y install slack` – please note how the `gpg` key gets imported automatically
    and the package is verified and installed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Once a new version of Slack appears, we can download it to the same folder,
    and regenerate the repository index by running `createrepo` again. This way all
    the systems using this repository will update `slack` when they run a `yum update`.
    It's a good way to keep all systems standardized and in the same version. For
    advanced features when managing RPM repositories, please check Red Hat Satellite.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes we want to have a local replica of the repositories in our system.
    To do that, we can use the **reposync** tool.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we install `reposync`, which comes in the `yum-utils` package:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: If you try to install the `dnf-utils` package, this same package will be installed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now it''s time to disable all repos provided by Red Hat except `rhel-8-for-x86_64-baseos-rpms`,
    which can be done with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Time to check the change:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'We can also disable the other repos, but this time we will do it in a different
    way, renaming them to something that doesn''t end with `.repo`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we can run `reposync` with some options:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'This will download the latest packages for the enabled channels. Let''s review
    the options:'
  prefs: []
  type: TYPE_NORMAL
- en: '`--newest-only`: Red Hat repositories keep all the versions of the packages
    since the first release. This will download only the latest version.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--download-metadata`: To be sure that we download a fully functional repo,
    and we do not need to run `createrepo` on it, we can use this option, which will
    retrieve all metadata in a source repository.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--destdir /var/tmp/repos`: Sets the destination directory for the downloaded
    files. It will also create a directory for each repo configured so the specified
    directory will be the parent of them all.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With this replicated repository, we can also work in isolated environments.
    It could be very convenient to prepare test environments. For advanced repo management
    features, please remember to try Red Hat Satellite.
  prefs: []
  type: TYPE_NORMAL
- en: After learning the basics of repositories and how to use them to manage software,
    let's dive into the technology behind it, the **Red Hat Package Manager**, or
    **RPM**.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding RPM internals
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Linux distributions tend to have their own package manager, from Debian with
    `.deb` to Pacman in Arch Linux and other more exotic mechanisms. The intention
    of the package managers is to keep software installed on the system, update it,
    patch it, keep dependencies, and maintain an internal database of what is installed
    on the system. RPM is used by distributions such as Fedora, openSUSE, CentOS,
    Oracle Linux, and, of course, RHEL.
  prefs: []
  type: TYPE_NORMAL
- en: To handle RPMs, the `rpm` command is available in the system, however, since
    the introduction of `yum`/`dnf`, it is hardly ever used in system administration,
    and is not included in RHCSA.
  prefs: []
  type: TYPE_NORMAL
- en: 'RPMs contain the following:'
  prefs: []
  type: TYPE_NORMAL
- en: The files to be installed on the system, stored in CPIO format and compressed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Information on permissions and the assigned owner and group for each file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The dependencies required and provided by each package, along with, conflicts
    with other packages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Install, uninstall, and upgrade scripts to be applied in any of those phases
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A signature to ensure the package was not modified
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To learn a bit about it, we will show some simple useful commands.
  prefs: []
  type: TYPE_NORMAL
- en: 'Commands to check packages include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`rpm –qa`: Lists all the installed packages in the system'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`rpm –qf <filename>`: Shows which package installed the mentioned filename'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`rpm –ql <packagefile>`: Lists the files included in a downloaded package (interesting
    to check the previously downloaded packages)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Commands to install, upgrade, and remove include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`rpm –i <packagefile>`: Installs the list of provided packages, not fetching
    dependencies.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`rpm –U <packagefile>`: Upgrades a package with the downloaded one. Checks
    dependencies but doesn''t manage them.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`rpm –e <packagename>`: Removes the packages specified, although it won''t
    remove dependencies.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you want to understand how the dependency management system works in `yum`/`dnf`,
    try installing packages with `rpm –i`.
  prefs: []
  type: TYPE_NORMAL
- en: It is important to know that all the databases of installed packages are located
    in `/var/lib/rpm` and can be managed with the `rpmdb` command.
  prefs: []
  type: TYPE_NORMAL
- en: In modern times, having to work with the `rpm` command usually means having
    a low-level issue, so it's better to try to break a test system before having
    to use it in real life.
  prefs: []
  type: TYPE_NORMAL
- en: With this, we've completed software management in RHEL systems.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have gone through the admin parts of software management
    in a RHEL 8 system, from subscriptions to installation, to modularity, and other
    miscellaneous tips.
  prefs: []
  type: TYPE_NORMAL
- en: All the system patching, updating, and management in RHEL relies on `yum`/`dnf`
    and simplifies managing dependencies, installing the right versions of software,
    and distributing it in isolated environments. This is one of the tasks more common
    for system administrators and should be understood completely.
  prefs: []
  type: TYPE_NORMAL
- en: For the Red Hat Certified Engineer level, a more in-depth look will be required,
    including creating RPM packages, which are very useful to manage, maintain, and
    distribute internally produced software in your own environments leveraging the
    experience and tools that Red Hat provides.
  prefs: []
  type: TYPE_NORMAL
- en: Now that our systems are up to date, let's move on to learn how to manage them
    remotely in the upcoming chapter.
  prefs: []
  type: TYPE_NORMAL
