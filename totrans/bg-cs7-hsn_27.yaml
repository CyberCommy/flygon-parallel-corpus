- en: Creating and Using an XML File
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will take a look at the basics of XML (short for Extensible
    Markup Language). Basically, it's a way of structuring information on the internet.
    A useful aspect of XML is that it's extensible, which means that you can create
    your own tags.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a button to HTML
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Crank up a project. The only thing to be put inside <html> is a single `Button`
    control. To do this, go to Toolbox, type `but` in the search field, and drag and
    drop the `Button` control below the line that begins with `<form id=...`. Change
    the text on the button to say `Read XML`.
  prefs: []
  type: TYPE_NORMAL
- en: Coding the XML
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now you will need a file that you can read. For this, go to Solution Explorer
    and right-click on the name of the website. Go to Add in the dropdown, and then
    select Add New Item.... Type `xml` in the search field, and make sure that you
    choose XML File that says Visual C#. Your starting screen for `XMLFile.xml` should
    look like the one shown in *Figure 27.1.1*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/79a637f2-e10c-4041-aa15-b4ffca6e7e8d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 27.1.1: The starting screen for XMLFile.xml'
  prefs: []
  type: TYPE_NORMAL
- en: Now let's go through the creation of the code line-by-line, so that you can
    see what's exactly going on. Basically, just as in HTML, you have elements, nesting
    of elements, and attributes in XML.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, imagine that you have a bookstore. In XML, you can create your own tags.
    So enter the following next:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Notice that it automatically creates opening and closing tags: `<bookstore>`
    `</bookstore>`. Insert a few blank lines between these tags.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Of course, you have books in the book store, so enter the following next beneath
    the first `<bookstore>` tag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: A book might be a traditional textbook, or it could be an eBook. So we will
    specify a type attribute, and set that equal to `eBook` for our first book.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s talk about some of the elements stored under `<book type="eBook">`.
    One essential item, obviously, is the book title, so enter the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: We will call the book, `The Great Way`.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the next stage, naturally, you put in the author, so enter the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: So, our book was written by `Bob Jones`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The last item, of course, is the price, which we''ll say is `$10.00` in this
    case, so enter the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: This information provides the first book element, which as you can see consists
    of sub elements called `<booktitle>`, `<author>`, and `<price>`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s do one more book just for the sake of variety, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Our simple XML file is shown in the following code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Again, remember that XML is *Extensible*, because you can make your own tags,
    *Markup* because it has a structure similar to HTML, and, of course, it's a *Language*.
  prefs: []
  type: TYPE_NORMAL
- en: Now, right-click on the tab that says `XMLFile.xml`, and select Copy Full Path
    from the dropdown. We will make use of this path shortly. (If you hover your mouse
    over the `XMLFile.xml` tab, you can see the full path, however, it's long and
    difficult to remember, so it's better to right-click and select Copy the Full
    Path.)
  prefs: []
  type: TYPE_NORMAL
- en: 'Now click on the `Default.aspx` tab inside the HTML, switch to the Design view,
    and then double-click on the Read XML button. This brings up the event-handling
    code inside `Default.aspx.cs`. Delete the `Page_Load` stub. The relevant portion
    of the starting code for this project should look like that shown in *Figure 27.1.2*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/75158be0-b1d7-4f5c-85f5-de95b55e1bf1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 27.1.2: The starting code for this project'
  prefs: []
  type: TYPE_NORMAL
- en: Adding a namespace
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s begin by adding a namespace. You need a new one, so enter the following
    after `using System` near the top of the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: You will make use of this namespace as you code. (You can collapse all the code
    above the line that beings with `public partial class...`.)
  prefs: []
  type: TYPE_NORMAL
- en: Loading the XML file into your program
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the next stage, enter the following within a set of curly braces beneath
    the line that begins with `protected void Button1_Click...` :'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: You want to load `XElement fromFile`, so you say `XElement.Load()`. Then, within
    the parentheses, you put the `@` symbol to make it a verbatim string, followed
    by double quotes. Now you need to make use of the path that you copied from `XMLFile.xml`
    so that you can load the XML from the file there. So, paste the path in between
    the set of `""` symbols. This will allow you to load the extensible markup file.
    Now hover your mouse over `XElement`. It says, class System.Xml.Linq.XElement,
    Represents an XML element.
  prefs: []
  type: TYPE_NORMAL
- en: Iterating over the contents of the XML file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, enter the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: If you hover your mouse over `Elements` at the end of this line, you can see
    that it's a function and it returns IEnumerable, so you can go over its contents,
    and each member within it is an element.
  prefs: []
  type: TYPE_NORMAL
- en: Displaying the results
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now you can display them, so enter the following between a set of curly braces:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, you will need the book type. To get it, after you type `sampLabel.Text
    += $"<br>Book Type:`, you say `{childElement.Attribute("type")`, and to get the
    value, you type `.Value}";`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, to get the author you use `{childElement.Element("author")}";`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: This is how you can get all of the elements out. At this stage, you can just
    copy and paste this line as it's pretty much the same thing for the book title
    and book price.
  prefs: []
  type: TYPE_NORMAL
- en: 'For book title, you say: `{childElement.Element("booktitle")}";`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'For price, you say: `{childElement.Element("price")}";`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'At the end, to separate things out, you can use `"<br><hr/>";`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Running the program
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now let''s give it a go here, so crank it up in your browser. Remember, you
    are essentially reading XML into a web page. This is our objective here. Click
    on the Read XML button. The results are shown in Figure 27*.1.3*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8865cc92-d6fa-4ed2-896f-a27a8cda8e80.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 27.1.3: The results of running our program'
  prefs: []
  type: TYPE_NORMAL
- en: The information is reported exactly as you entered it, as you would expect.
    Remember that the horizontal lines are present because you typed `"<br><hr/>"`
    inside the HTML page, which added a break and a horizontal rule or line.
  prefs: []
  type: TYPE_NORMAL
- en: This is how you can combine reading from an XML file, which is basically a collection
    of elements like the one in this project, many times nested. You can combine it
    with C#, and you can produce results.
  prefs: []
  type: TYPE_NORMAL
- en: Chapter review
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The complete version of the `Default.aspx.cs` file for this chapter, including
    comments, is shown in the following code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned the basics of XML. You wrote XML code, loaded the
    resulting XML file into your program, iterated over the contents of the XML file,
    and wrote the code to display the results.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will learn how to write XML to a file and then view
    the results in Notepad and in Internet Explorer. So, you will come across lots
    of useful little things.
  prefs: []
  type: TYPE_NORMAL
