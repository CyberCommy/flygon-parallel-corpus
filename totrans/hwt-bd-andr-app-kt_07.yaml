- en: 7\. Android Permissions and Google Maps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Overview
  prefs: []
  type: TYPE_NORMAL
- en: This chapter will provide you with knowledge of how to request and obtain app
    permissions in Android. You will gain a solid understanding of how to include
    local and global interactive maps in your app, as well as how to request permissions
    to use device features that provide richer functionality by using the Google Maps
    API.
  prefs: []
  type: TYPE_NORMAL
- en: By the end of the chapter, you will be able to create permission requests for
    your app and handle missing permissions.
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we learned how to present data in lists using `RecyclerView`.
    We used that knowledge to present the user with a list of Secret Cat Agents. In
    this chapter, we will learn how to find the user's location on the map, and how
    to deploy cat agents to the field by selecting locations on the map.
  prefs: []
  type: TYPE_NORMAL
- en: First, we will look into the Android permissions system. Many Android features
    are not immediately available to us. To protect the user, these features are gated
    behind a permission system. For us to access those features, we have to ask the
    user to allow us to do so. Some such features include, but are not limited to,
    obtaining the user's location, accessing the user's contacts, accessing their
    camera, and establishing a Bluetooth connection. Different Android versions enforce
    different permission rules. When Android 6 (Marshmallow) was introduced in 2015,
    for example, a number of permissions were deemed insecure (those you could silently
    obtain on installation) and became runtime permissions.
  prefs: []
  type: TYPE_NORMAL
- en: We will then look at the Google Maps API. This API allows us to present the
    user with a map of any desired location, add data to that map, and let the user
    interact with the map. It also lets you show points of interest and render a street
    view of supported locations, though we will not go into these features in this
    book.
  prefs: []
  type: TYPE_NORMAL
- en: Requesting Permissions from the User
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Our app might want to implement certain features that are deemed to be dangerous
    by Google. This usually means access to those features could risk the user's privacy.
    Those permissions may, for example, allow you to read users' messages or determine
    their current location.
  prefs: []
  type: TYPE_NORMAL
- en: Depending on the particular permission and the target Android API level we are
    developing, we may need to request that permission from the user. If the device
    is running on Android 6 (Marshmallow, or API level 23), and the target API of
    our app is 23 or higher, which it almost certainly will be, as most devices by
    now will run newer versions of Android, there will be no user notifications alerting
    the user of any permissions requested by the app at install time. Instead, our
    app must ask the user to grant it those permissions at runtime.
  prefs: []
  type: TYPE_NORMAL
- en: 'When we request a permission, the user sees a dialog much like the one shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.1 Permission dialog for device location access'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15216_07_01.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.1 Permission dialog for device location access
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'For a full list of permissions and their protection level, see here: [https://developer.android.com/reference/android/Manifest.permission](https://developer.android.com/reference/android/Manifest.permission)'
  prefs: []
  type: TYPE_NORMAL
- en: 'When we intend to use a permission, we must include that permission in our
    manifest file. A manifest with the `SEND_SMS` permission would look something
    like the following snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Safe permissions (or normal permissions, as Google refers to them) would get
    automatically granted to the user. Dangerous ones, however, would only be granted
    if explicitly approved by the user. If we fail to request permission from the
    user and try to execute an action that requires that permission, the result would
    be the action not running at best, and our app crashing at worst.
  prefs: []
  type: TYPE_NORMAL
- en: To ask the user for permission, we should first check whether the user has already
    granted us that permission.
  prefs: []
  type: TYPE_NORMAL
- en: If the user has not yet granted us permission, we may need to check whether
    a rationale dialog should be shown prior to the permission request. This depends
    on how obvious the justification for the request would be to the user. For example,
    if a camera app requests permission to access the camera, we can safely assume
    the reason would be clear to the user. However, some cases may not be as clear
    to the user, especially if the user is not tech-savvy. In those cases, we may
    have to justify the request to the user. Google provides us with a function called
    `shouldShowRequestPermissionRationale(Activity, String)` for this purpose. Under
    the hood, this function checks whether the user has previously denied the permission,
    but also whether the user has selected `Don't ask again` in the permission request
    dialog. The idea is to give us an opportunity to justify our request to the user
    for permission prior to requesting it, thus increasing the likelihood of them
    approving it.
  prefs: []
  type: TYPE_NORMAL
- en: Once we determine whether a permission rationale should be presented to the
    user, or whether the user should accept our rationale or no rationale was required,
    we can proceed to request the permission.
  prefs: []
  type: TYPE_NORMAL
- en: Let's see how we can request a permission.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `Activity` class from which we request the permission must implement the
    `OnRequestPermissionsResultCallback` interface. This is because once the user
    is granted (or denied) the permission, the `onRequestPermissionsResult(Int, Array<String>,
    IntArray)` function will be called. The `FragmentActivity` class, which `AppCompatActivity`
    extends, already implements this interface, so we only have to override the `onRequestPermissionsResult`
    function to process the response of the user to the permission request. The following
    is an example of an `Activity` class requesting the `Location` permission:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'When our `Activity` class resumes, we check whether we have the location permission
    (`ACCESS_FINE_LOCATION`) by calling `getHasLocationPermissions()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This function first checks whether the user has already granted us the requested
    permissions by calling `checkSelfPermission(Context, String)` with the requested
    permission. If the user hasn't, we call `shouldShowRequestPermissionRationale(Activity,
    String)`, which we mentioned earlier, to check whether a rationale dialog should
    be presented to the user.
  prefs: []
  type: TYPE_NORMAL
- en: 'If showing our rationale is needed, we call `showPermissionRationale(() ->
    Unit)`, passing in a lambda that will call `requestLocationPermission()` after
    the user dismisses our rationale dialog. If no rationale is needed, we call `requestLocationPermission()`
    directly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Our `showPermissionRationale` function simply presents the user with a dialog
    with a brief explanation about why we need their permission. The confirmation
    button will execute the positive action provided:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.2 Rationale dialog'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15216_07_02.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.2 Rationale dialog
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Lastly, our `requestLocationPermission()` function calls `requestPermissions(Activity,
    Array<out String>, Int)`, passing our activity an array containing the requested
    permission and our unique request code. We will use this code to later identify
    the response as belonging to this request.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we''ve requested the location permission from the user, we now need to process
    the response. This is done by overriding the `onRequestPermissionsResult(Int,
    Array<out String>, IntArray)` function, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: When `onRequestPermissionsResult` gets called, three values are passed in. The
    first is the request code, which will be the same request code we provided when
    calling `requestPermissions`. The second is the array of requested permissions.
    The third is an array of results for our request. For each permission requested,
    this array will contain either `PackageManager.PERMISSION_GRANTED` or `PackageManager.PERMISSION_DENIED`.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter will take us through the development of an app that shows us our
    current location on a map and allows us to place a marker where we want to deploy
    our Secret Cat Agent. Let's start with our first exercise.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 7.01: Requesting the Location Permission'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this exercise, we will request that the user provides the location permission.
    We will first create a Google Maps Activity project. We will define the permission
    required in the manifest file. To get started, let''s implement the code required
    to request permission from the user to access their location:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Start by creating a new Google Maps Activity project (`File` | `New` | `New
    Project` | `Google Maps Activity`). We''re not using Google Maps in this exercise.
    However, the Google Maps Activity is still a good choice in this case. It will
    save you a lot of boilerplate coding in the next exercise (*Exercise 7.02*). Don''t
    worry; it will have no impact on your current exercise. Click `Next`, as shown
    in the following screenshot:![Figure 7.3: Choose your project'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15216_07_03.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 7.3: Choose your project'
  prefs: []
  type: TYPE_NORMAL
- en: Name your application `Cat Agent Deployer`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Make sure your package name is `com.example.catagentdeployer`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the save location to where you want to save your project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Leave everything else at its default values and click `Finish`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Make sure you are on the `Android` view in your `Project` pane:![Figure 7.4:
    Android view'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15216_07_04.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 7.4: Android view'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open your `AndroidManifest.xml` file. Make sure the location permission was
    already added to your app:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Open your `MapsActivity.kt` file. At the bottom of the `MapsActivity` class
    block, add an empty `getLastLocation()` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: This will be the function you will call when you have made sure the user has
    granted you the location permission.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, add the request code constant to the top of the file, between the imports
    and the class definition:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: This will be the code we pass when we request the location permission. Whatever
    value we define here will be returned to us when the user has finished interacting
    with the request dialog by granting or denying us the permission.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now add the `requestLocationPermission()` function right before the `getLastLocation()`
    function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'This function will present a standard permission request dialog to the user
    (as shown in the following figure), asking them to allow the app to access their
    location. We pass the activity, which will receive the callback (`this`), an array
    of the requested permissions you want the user to grant your app (`Manifest.permission.ACCESS_FINE_LOCATION`),
    and the `PERMISSION_CODE_REQUEST_LOCATION` constant you defined a moment ago to
    associate it with the permission request:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.5: Permission dialog'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15216_07_05.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 7.5: Permission dialog'
  prefs: []
  type: TYPE_NORMAL
- en: 'Override the `onRequestPermissionsResult(Int, Array<String>, IntArray)` function
    of your `MapsActivity` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: You should first call the super implementation (this should already be done
    for you as soon as you override the function). This will handle the delegation
    of permission response processing to child fragments where relevant.
  prefs: []
  type: TYPE_NORMAL
- en: Then, you can check the `requestCode` parameter and see if it matches the `requestCode`
    parameter you passed to the `requestPermissions(Activity, Array<out String>, Int)`
    function (`PERMISSION_CODE_REQUEST_LOCATION`). If it does, since you know you
    only requested one permission, you can check the first `grantResults` value. If
    it equals `PackageManager.PERMISSION_GRANTED`, the user has granted your app permission,
    and you can proceed to get their last location by calling `getLastLocation()`.
  prefs: []
  type: TYPE_NORMAL
- en: 'If the user denied your app the requested permission, you can present them
    with the rationale for the request. Implement the `showPermissionRationale(()
    -> Unit)` function right before the `requestLocationPermission()` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'This function will present the user with a simple alert dialog explaining the
    app would not work without knowing their current location, as shown in the following
    screenshot. Clicking `OK` will execute the provided `positiveAction` lambda:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.6: Rationale dialog'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15216_07_06.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 7.6: Rationale dialog'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the logic required to determine whether to show the permission request
    dialog or the rationale one. Create the `requestPermissionWithRationaleIfNeeded()`
    function right before the `showPermissionRationale(() -> Unit)` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: This function checks whether your app should display the rationale dialog. If
    it should, it calls `showPermissionRationale(() -> Unit)`, passing in a lambda
    that will request the location permission by calling `requestLocationPermission()`.
    Otherwise, it requests the location permission by calling the `requestLocationPermission()`
    function directly.
  prefs: []
  type: TYPE_NORMAL
- en: 'To determine whether or not your app already has the location permission, introduce
    the `hasLocationPermission()` function shown here right before the `requestPermissionWithRationaleIfNeeded()`
    function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, update the `onMapReady()` function of your `MapsActivity` class to
    request permission or get the user''s current location as soon as the map is ready:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'To make sure you present the rationale when the user denies the permission,
    update `onRequestPermissionsResult(Int, Array<String>, IntArray)` with an `else`
    condition:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Run your app. You should now see a system permission dialog requesting you
    to allow the app to access the location of the device:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.7: App requesting the location permission'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15216_07_07.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 7.7: App requesting the location permission'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you deny the permission, the rationale dialog will appear, followed by another
    system permission dialog requesting permission, as shown in the following screenshot.
    This time, the user has the option to choose not to let the app ask for permission
    again. Every time the user chooses to deny the permission, the rationale dialog
    will be presented to them again, until they choose to allow the permission or
    tick the `Don''t ask again` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.8: Don’t ask again'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15216_07_08.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 7.8: Don''t ask again'
  prefs: []
  type: TYPE_NORMAL
- en: Once the user has allowed or permanently denied the permission, the dialog will
    never show again. To reset the state of your app permissions, you would have to
    manually grant it the permission via the `App Info` interface.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we can get the location permission, we will now look into obtaining
    the user's current location.
  prefs: []
  type: TYPE_NORMAL
- en: Showing a Map of the User's Location
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Having successfully obtained permission from the user to access their location,
    we can now ask the user's device to provide us with its last known location, which
    would also usually be the user's current location. We will then use this location
    to present the user with a map of their current location.
  prefs: []
  type: TYPE_NORMAL
- en: To obtain the user's last known location, Google has provided us with the Google
    Play Location service, and more specifically, with the `FusedLocationProviderClient`
    class. The `FusedLocationProviderClient` class helps us interact with Google's
    Fused Location Provider API, which is a location API that intelligently combines
    different signals from multiple device sensors to provide us with device location
    information.
  prefs: []
  type: TYPE_NORMAL
- en: 'To access the `FusedLocationProviderClient` class, we must first include the
    Google Play Location service library in our project. This simply means adding
    the following code snippet to the `dependencies` block of our app `build.gradle`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: With the location service imported, we can now obtain an instance of the `FusedLocationProviderClient`
    class by calling `LocationServices.getFusedLocationProviderClient(this@MainActivity)`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once we have a fused location client, given that we have already received the
    location permission from the user, we can obtain the user''s last location by
    calling `fusedLocationClient.lastLocation`. Since this is an asynchronous call,
    we should also provide a success listener at a minimum. If we wanted to, we could
    also add listeners for cancellation, failure, and the completion of requests.
    The `getLastLocation()` call (`lastLocation` for short in Kotlin) returns a `Task<Location>`.
    A Task is a Google API abstract class whose implementations perform async operations.
    In this case, that operation is returning a location. So adding listeners is simply
    a matter of chaining. We will add the following code snippet to our call:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Note that the `location` parameter could be `null` if the client failed to obtain
    the user's current location. This is not very common but could happen if, for
    example, the user disabled their location services during the call.
  prefs: []
  type: TYPE_NORMAL
- en: Once the code inside our success listener block is executed and `location` is
    not null, we have the user's current location in the form of a `Location` instance.
  prefs: []
  type: TYPE_NORMAL
- en: 'A `Location` instance holds a single coordinate on Earth, expressed using longitude
    and latitude. For our purpose, it is sufficient to know that each point on the
    surface of the Earth is mapped to a single pair of longitude (abbreviation: Lng)
    and latitude (abbreviation: Lat) values.'
  prefs: []
  type: TYPE_NORMAL
- en: This is where it gets really exciting. Google lets us present any location on
    an interactive map by using a `SupportMapFragment` class. All it takes is signing
    up for a free API key. When you create your application with a Google Maps Activity,
    Google generates an extra file for us, named `google_maps_api.xml`, which can
    be found under `res/values`. That file is required for our `SupportMapFragment`
    class to work, as it contains our API key. It also contains clear instructions
    on how to obtain a new API key. Conveniently, it also contains a link that will
    prefill much of the required sign-up data for us. The link looks something like
    `https://console.developers.google.com/flows/enableapi?apiid=...`. Copy it from
    the `google_maps_api.xml` file to your browser (or *CMD* + *click* on the link),
    follow the directions on the page once the page loads, and click `Create`. Once
    you have a key, replace the `YOUR_KEY_HERE` string at the bottom of the file with
    your newly obtained key.
  prefs: []
  type: TYPE_NORMAL
- en: 'At this point, if you run your app, you will already see an interactive map
    on your screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.9: Interactive map'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15216_07_09.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 7.9: Interactive map'
  prefs: []
  type: TYPE_NORMAL
- en: 'To position the map based on our current location, we create a `LatLng` instance
    with the coordinates from our `Location` instance, and call `moveCamera(CameraUpdate)`
    on the `GoogleMap` instance. To satisfy the `CameraUpdate` requirement, we call
    `CameraUpdateFactory.newLatLng(LatLng)`, passing in the `LatLng` parameter created
    earlier. The call would look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: We could also call `newLatLngZoom(LatLng, Float)` to modify the zoom-in and
    zoom-out feature of the map.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Valid zoom values range between `2.0` (farthest) and `21.0` (closest). Values
    outside of that range are capped.
  prefs: []
  type: TYPE_NORMAL
- en: Some areas may not have tiles to render the closest zoom values. To discover
    the rest of the available `CameraUpdateFactory` options, visit [https://developers.google.com/android/reference/com/google/android/gms/maps/CameraUpdateFactory.html](https://developers.google.com/android/reference/com/google/android/gms/maps/CameraUpdateFactory.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'To add a pin (called a marker in Google''s Map APIs) at the user''s coordinate,
    we call `addMarker(MarkerOptions)` on the `GoogleMap` instance. `MarkerOptions`
    parameters are configured by chaining calls to a `MarkerOptions()` instance. For
    a simple marker at our desired position, we could call `position(LatLng)` and
    `title(String)`. The call would look similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: The order in which we chain the calls does not matter.
  prefs: []
  type: TYPE_NORMAL
- en: Let's practice this in the following exercise.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 7.02: Obtaining the User''s Current Location'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that your app can be granted location permission, you can proceed to utilize
    the location permission to get the user''s current location. You will then display
    the map and update it to zoom into the user''s current location and show a pin
    at that location. Perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, add the Google Play location service to your `build.gradle` file. You
    should add it within the `dependencies` block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Click the `Sync Project with Gradle Files` button in Android Studio for Gradle
    to fetch the newly added dependency.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Obtain an API key: start by opening the generated `google_maps_api.xml` file
    (`app/src/debug/res/values/google_maps_api.xml`) and *CMD* + *click* the link
    that starts with `https://console.developers.google.com/flows/enableapi?apiid=`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Follow the instructions on the website until you have generated a new API key.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Update your `google_maps_api.xml` file by replacing `YOUR_KEY_HERE` with your
    new API key in the following line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Open your `MapsActivity.kt` file. At the top of your `MapsActivity` class,
    define a lazily initialized fused location provider client:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Introduce an `updateMapLocation(LatLng)` function and an `addMarkerAtLocation(LatLng,
    String)` function immediately after the `getLastLocation()` function to zoom the
    map at a given location and add a marker at that location, respectively:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Now update your `getLastLocation()` function to retrieve the user''s location:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Your code requests the last location in a Kotlin concise way by calling `lastLocation`,
    and then attaches a `lambda` function as an `OnSuccessListener` interface. Once
    a location is obtained, the `lambda` function is executed, updating the map location
    and adding a marker at that location with the title `You` if a non-null location
    was returned.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run your app:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.10: Interactive map with a marker at the current location'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15216_07_10.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 7.10: Interactive map with a marker at the current location'
  prefs: []
  type: TYPE_NORMAL
- en: Once the app has been granted permission, it can request the user's last location
    from the Google Play location service via the fused location provider client.
    This gives you an easy and concise way to fetch the user's current location. Remember
    to turn on location on your device for the app to work.
  prefs: []
  type: TYPE_NORMAL
- en: With the user's location, your app can tell the map where to zoom and where
    to place a pin. If the user clicks on the pin, they will see the title you assigned
    to it (`You` in the exercise).
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will learn how to respond to clicks on the map and how
    to move markers.
  prefs: []
  type: TYPE_NORMAL
- en: Map Clicks and Custom Markers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With a map showing the user's current location by zooming in at the right location
    and placing a pin there, we have rudimentary knowledge of how to render the desired
    map, as well as knowledge of how to obtain the required permissions and the user's
    current location.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will learn how to respond to a user interacting with the
    map, and how to use markers more extensively. We will learn how to move markers
    on the map and how to replace the default pin with custom icons. When we know
    how to let the user place a marker anywhere on the map, we can let them choose
    where to deploy the Secret Cat Agent.
  prefs: []
  type: TYPE_NORMAL
- en: 'To listen for clicks on the map, we need to add a listener to the `GoogleMap`
    instance. Looking at our `MapsActivity.kt` file, the best place to do so would
    be in `onMapReady(GoogleMap)`. A naïve implementation would look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: However, if we ran this code, we'd find that for every click on the map, a new
    marker is added. This is not our desired behavior.
  prefs: []
  type: TYPE_NORMAL
- en: To control a marker on the map, we need to keep a reference to that marker.
    That is achieved easily enough by keeping a reference to the output of `GoogleMap.addMarker(MarkerOptions)`.
    The `addMarker` function returns a `Marker` instance. To move a marker on the
    map, we simply assign a new value by calling its `position` setter.
  prefs: []
  type: TYPE_NORMAL
- en: To replace the default pin icon with a custom icon, we need to provide `BitmapDescriptor`
    to the marker or the `MarkerOptions()` instance. `BitmapDescriptor` wrappers work
    around Bitmaps used by `GoogleMap` to render markers (and ground overlays, but
    we won't cover that in this book). We obtain `BitmapDescriptor` by using `BitmapDescriptorFactory`.
    The factory will require an asset, which can be provided in a number of ways.
    You can provide it with the name of a bitmap in the `assets` directory, a `Bitmap`,
    a filename of a file in the internal storage, or a resource ID. The factory can
    also create default markers of different colors. We are interested in the `Bitmap`
    option because we intend to use a vector drawable, and those are not directly
    supported by the factory. In addition, when converting the drawable to a `Bitmap`,
    we can manipulate it to suit our needs (for example, we could change its color).
  prefs: []
  type: TYPE_NORMAL
- en: Android Studio offers us quite a wide range of free vector `Drawables` out of
    the box. For this example, we want the `paw` drawable. To do this, right-click
    anywhere in the left Android pane, and select `New` | `Vector Asset`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, click the Android icon next to the `Clip Art` label for the list of icons:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.11: Asset Studio'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15216_07_11.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 7.11: Asset Studio'
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll now access a window in which we can choose from the offered pool of
    clip art:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.12: Selecting an icon'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15216_07_12.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 7.12: Selecting an icon'
  prefs: []
  type: TYPE_NORMAL
- en: Once we choose an icon, we can name it, and it will be created for us as a vector
    drawable XML file. We will name it `target_icon`.
  prefs: []
  type: TYPE_NORMAL
- en: To use the created asset, we must first get it as a `Drawable` instance. This
    is done by calling `ContextCompat.getDrawable(Context, Int)`, passing in the activity
    and `R.drawable.target_icon` as a reference to our asset. Next, we need to define
    bounds for the `Drawable` instance to draw in. Calling `Drawable.setBound(Int,
    Int, Int, Int)` with (`0`, `0`, `drawable.intrinsicWidth`, `drawable.intrinsicHeight`)
    will tell it to draw within its intrinsic size.
  prefs: []
  type: TYPE_NORMAL
- en: To change the color of our icon, we have to tint it. To tint a `Drawable` instance
    in a way that is supported by devices running APIs older than `21`, we must first
    wrap our `Drawable` instance with `DrawableCompat` by calling `DrawableCompat.wrap(Drawable)`.
    The returned `Drawable` can then be tinted using `DrawableCompat.setTint(Drawable,
    Int)`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we need to create a `Bitmap` to hold our icon. Its dimensions can match
    those of the `Drawable` bounds, and we want its `Config` to be `Bitmap.Config.ARGB_8888`
    – which means full red, green, blue, and alpha channels. We then create a `Canvas`
    for the `Bitmap`, allowing us to draw our `Drawable` instance by calling… you
    guessed it, `Drawable.draw(Canvas)`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: With the `Bitmap` containing our icon, we are now ready to obtain a `BitmapDescriptor`
    instance from `BitmapDescriptorFactory`. Don't forget to recycle your `Bitmap`
    afterward. This will avoid a memory leak.
  prefs: []
  type: TYPE_NORMAL
- en: You learned how to present the user with a meaningful map by centering it on
    their current location and showing their current location using a pin marker.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 7.03: Adding a Custom Marker Where the Map Was Clicked'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this exercise, you will respond to a user''s map click by placing a red
    paw-shaped marker at the location on the map the user clicked:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In `MapsActivity.kt` (found under `app/src/main/java/com/example/catagentdeployer`),
    right below the definition of the `mMap` variable, define a nullable `Marker`
    variable to hold a reference to the paw marker on the map:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Update `addMarkerAtLocation(LatLng, String)` to also accept a nullable `BitmapDescriptor`
    with a default value of `null`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a `getBitmapDescriptorFromVector(Int): BitmapDescriptor?` function below
    your `addMarkerAtLocation(LatLng, String, BitmapDescriptor?): Marker` function
    to provide `BitmapDescriptor` given a `Drawable` resource ID:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: This function first obtains a drawable using `ContextCompat` by passing in the
    provided resource ID. It then sets the drawing bounds for the drawable, wraps
    it in `DrawableCompat`, and sets its tint to red.
  prefs: []
  type: TYPE_NORMAL
- en: Then, it creates a `Bitmap` and a `Canvas` for that `Bitmap`, upon which it
    draws the tinted drawable. The bitmap is then returned to be used by `BitmapDescriptorFactory`
    to build `BitmapDescriptor`. Lastly, `Bitmap` is recycled to avoid a memory leak.
  prefs: []
  type: TYPE_NORMAL
- en: Before you can use the `Drawable` instance, you must first create it. Right-click
    on the Android pane, and then select `New` | `Vector Asset`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the window that opens, click on the Android icon next to the `Clip Art`
    label to select a different icon:![Figure 7.13: Asset Studio'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15216_07_13.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 7.13: Asset Studio'
  prefs: []
  type: TYPE_NORMAL
- en: 'From the list of icons, select the `pets` icon. You can type `pets` into the
    search field if you can''t find the icon. Once you select the `pets` icon, click
    `OK`:![Figure 7.14: Selecting an icon'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15216_07_14.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 7.14: Selecting an icon'
  prefs: []
  type: TYPE_NORMAL
- en: Name your icon `target_icon`. Click `Next` and `Finish`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Define an `addOrMoveSelectedPositionMarker(LatLng)` function to create a new
    marker or, if one has already been created, move it to the provided location.
    Add it after the `getBitmapDescriptorFromVector(Int)` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Update your `onMapReady(GoogleMap)` function to set an `OnMapClickListener`
    event on `mMap`, which will add a marker to the clicked location or move the existing
    marker to the clicked location:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Run your app:![Figure 7.15: The complete app'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15216_07_15.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 7.15: The complete app'
  prefs: []
  type: TYPE_NORMAL
- en: Clicking anywhere on the map will now move the paw icon to that location. Clicking
    the paw icon will show the `Deploy here` label. Note that the location of the
    paw is a geographical one, not a screen one. That means if you drag your map or
    zoom in, the paw will move with the map and remain in the same geographical location.
    You now know how to respond to user clicks on the map and how to add and move
    markers around. You also know how to customize the appearance of markers.
  prefs: []
  type: TYPE_NORMAL
- en: 'Activity 7.01: Creating an App to Find the Location of a Parked Car'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Some people often forget where it was that they parked their car. Let's say
    you want to help these individuals by developing an app that lets the user store
    the last place they parked. When the user launches the app, it will show a pin
    at the last place the user told the app about the car's location. The user can
    click an `I'm parked here` button to update the pin location to the current location
    the next time they park.
  prefs: []
  type: TYPE_NORMAL
- en: Your goal in this activity is to develop an app that shows the user a map with
    the current location. It will first have to ask the user for permission to access
    their location. Make sure to also provide a rationale dialog if needed, according
    to the SDK. The app will show a car icon where the user last told it the car was.
    The user can click a button labeled `I'm parked here` to move the car icon to
    the current location. When the user relaunches the app, it will show the user's
    current location and the car icon where the car was last parked.
  prefs: []
  type: TYPE_NORMAL
- en: As a bonus feature of your app, you can choose to add functionality that stores
    the car's location so that it can be restored after the user has killed and then
    re-opened the app. This bonus functionality relies on using `SharedPreferences`;
    a concept that will be covered in *Chapter 11*, *Persisting Data*. As such, steps
    9 and 10 below will give you the required implementation.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following steps will help you complete the activity:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a Google Maps Activity app.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Obtain an API key for the app and update your `google_maps_api.xml` file with
    that key.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Show a button at the bottom with an `I'm parked here` label.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Include the location service in your app.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Request the user's permission to access their location.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Obtain the user's location and place a pin on the map at that location.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a car icon to your project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add functionality to move the car icon to the user's current location.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Store the selected location in `SharedPreferences`. This function, placed in
    your activity, will help:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Restore any saved location from `SharedPreferences`. You can use the following
    function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'The solution to this activity can be found at: http://packt.live/3sKj1cp'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have learned about Android permissions. We touched on the
    reasons for having them and saw how we could request the user's permission to
    perform certain tasks. We also learned how to use Google's Maps API and how to
    present the user with an interactive map. Lastly, we leveraged our knowledge of
    presenting a map and requesting permissions to find out the user's current location
    and present it on the map. There is a lot more that can be done with the Google
    Maps API, and you could explore a lot more possibilities with certain permissions.
    You should now have enough understanding of the foundations of both to explore
    further. To read more about permissions, visit https://developer.android.com/reference/android/Manifest.permission.
    To read more about the Maps API, visit [https://developers.google.com/maps/documentation/android-sdk/intro](https://developers.google.com/maps/documentation/android-sdk/intro).
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn how to perform background tasks using `Services`
    and `WorkManager`. We will also learn how to present the user with notifications,
    even when the app is not running. These are powerful tools to have in your arsenal
    as a mobile developer.
  prefs: []
  type: TYPE_NORMAL
