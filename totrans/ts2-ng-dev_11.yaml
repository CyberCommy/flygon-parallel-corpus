- en: Working with Real Hosted Data
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Modern web applications are usually data-driven. More often than not, we need
    to CRUD (create, read, update, and delete) data from various resources, or consume
    APIs. Angular makes it easy for us to work with data from external sources for
    use in our components.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: 'Angular provides a simple HTTP API that grants our applications HTTP functionality.
    It is built on the native XMLHttpRequest interface exposed by modern browsers,
    and with it, we can carry out any of these HTTP operations:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: 'Get: Requests data from a resource'
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Post: Submits data to a resource'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Put: Modifies data in a resource'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Delete: Deletes a specified resource'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this chapter, we will learn how to work with Angular to consume APIs and
    make our applications data-driven.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: Observables
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Observables**, similar to promises, help handle asynchronous events in an
    application. The key differences between Observables and promises are:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: Observables can handle multiple values over time, while promises are called
    once and return one value
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Observables are cancellable, while promises are not
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To make use of Observables, Angular utilizes the **Reactive Extensions for JavaScript** (**RxJs**)
    Observables library. Angular makes extensive use of Observables in handling HTTP
    requests and responses; we will learn more about them in this chapter.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: The HTTP module
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To get started with using HTTP in your components, you need to install the
    `HttpModule` that provides it in your application module. First, import the module:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Next, you include the module in the array of imports registered in your application,
    right after `BrowserModule`:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Building a simple todo demo app
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let us build a simple `todo` app to better understand how to work with data
    in an Angular app.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: Angular-CLI will be used to quickly scaffold the application. The API for the
    application will be built with Express.js, and our Angular app will connect to
    this API to CRUD todo data.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: Project setup
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To create a new project using the CLI:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The `ng new` command creates a new angular application
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: Building the API
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'From the command line, install express, body-parser, and cors as dependencies
    via npm:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: If you use npm 5, you don't need to specify the `-S` or `--save` flag to save
    as a dependency in your `package.json` file.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we will create a `server.js` file in the root folder of the Angular project
    which will hold all our API logic:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This file uses new versions of ES6 so you should watch in cases where your code
    editors don't recognize it immediately.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: 'The `/api` routes point to the `./routes/index.js`file, but we do not have
    it yet. In this next step, we will create it. Still in the `root` directory, create
    a folder named `routes` and in it a file called `index.js`:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'To start the server, enter the following command:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Here is the output when the server starts running:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/7d5e1721-fed9-4540-80ce-6dc1f3e6d69b.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
- en: Here we can see that the server is running and it listens on port 3000.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: 'Open up your browser and visit `localhost:3000/api/`:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/2c0f4bae-65a6-4d08-ac67-7d710127414e.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
- en: If you can see the response in the preceding image, then the API works. Now
    we can introduce more complex logic so we have actual data to work with.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: Installing diskdb
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Diskdb** is a lightweight disk-based JSON database with a MongoDB-like API
    for Node. We can install diskdb with this command:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Create a `todos.json` file at the root of the directory. This file will serve
    as our database collection where we have our todo items. You can learn more about
    diskdb here [https://www.npmjs.com/package/diskdb](https://www.npmjs.com/package/diskdb).
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: Updating API endpoints
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let us update the `routes/index.js` file with the new logic for working with
    our todos:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: In the preceding code, we were able to update our API with `get`, `post`, `put`,
    and `delete` endpoints.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we will seed our database with some data. Updating the `todos.json` file:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Now we can restart our server and visit `localhost:3000/api/todos` to see our
    API in action:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/981a9500-2ef5-416f-80dd-793714c333e2.jpg)List of Todos from the
    database.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: Creating an Angular component
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Next, we will create a `todo` component. We can easily do that with the Angular-CLI,
    with this command:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'This generates the following files: `todos.component.ts`, `todos.component.html`,
    and `todos.component.ts`. The todos component is also automatically imported into
    `app.module.ts`:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'We should be sure to add a `<base href="/">` within the `src/index.html` head
    tag. This is to tell the router how to compose navigation URLs. The `index.html`
    file was created automatically when we used Angular-CLI to generate the angular
    project:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Creating application routes
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Next, we will create a `/todos` route and have our app redirect to it by default.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: 'First, import `RouterModule` from `@angular/router` and add it to the `AppModule`
    imports array:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Create a `ROUTES`array just above `ngModule` declarations and add the following
    route definitions to it:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'In the `app.component.html` file, let''s add a router-outlet where we want
    to render the route:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Creating a todos service
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Next, we will create a service which will handle the calls and connect our
    component to the express API. To generate the service with Angular-CLI:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The service is created but not registered—to register it in our app, we need
    to add it to the providers section of the main application module.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: Angular-CLI does not automatically register services.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the TodosService to the providers array:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Now, within our service, we will make HTTP calls to the express server to execute
    our CRUD operations. First, we will import `HTTP`, `Headers`, and `rxjs/add/operator/map`:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Define a constructor and inject the HTTP service:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: In the preceding code, we make use of the `HttpModule` to make a simple `get`
    request to our API to retrieve a list of Todos. The response from the request
    is then returned in JSON format.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will write a method to store todo items, named `addTodos()`. This method
    will be used to make post requests for storing todos.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: In the preceding code, we set up new headers and also set `Content-Type` to
    tell the server what type of content it will receive (`'application/json'`).
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: We made use of the `http.post()` method to make a post request. The parameter,
    `JSON.stringify(todo)` indicates that we want to send the new todo as a JSON encoded
    string. Finally, we can return the response from the API in JSON format.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we will define a delete method called `deleteTodo()`. This method will
    be used to make delete requests. This enables us to delete todos from the todos
    list. Once again, update `todos.service.ts`:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: In the preceding code, we defined the `deleteTodo()`method which takes the `id`of
    the post to be deleted as its only parameter. This method makes a delete request
    to the API to remove the specified todo from the database. The response from the
    API is also returned as JSON.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we will define a method called `updateStatus()`. This method will be
    used to make a `put` request to change the state of a todos item.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: In the preceding code, we created an `updateStatus()`method which is similar
    to `addTodos()` method. The difference here is that the `updateStatus()` method
    makes a `put` request. We also concatenated `todo._id` to the API endpoint being
    called. This enables us to modify the state of a single item from the todos list.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: 'Remember, we are making use of the HTTP API in our service, hence, we should
    import `HttpModule` in `app.module.ts` and include it in the imports array:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Connecting the service with our todos component
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First, we have to import todos service in todos component:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Then add the `TodosService` class in the component''s constructor:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Now, we will make use of the todo service to `get`, `create`, `delete`, and
    `update` todos.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: 'This is what our todos component should look like:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: We just enabled communication between the service and the component. The `component.ts`
    file can now make use of the service and the methods in it.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have connected the service and component, we have to display the
    todos operations in the browser, and this will be done in `todos.component.html`.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: Implementing the view
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To display todos, we shall make use of:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: Angular's `*ngFor` directive, which iterates over the todos array and renders
    an instance of this template for each todo in that array
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Angular's interpolation binding syntax, `{{}}`
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Update `todos.component.html`:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'To make our app look better, we will make use of bootstrap. **Bootstrap** is
    a powerful front-end framework for creating web and user interface components
    like forms, modals, accordions, carousels, and tabs:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Update `todos.component.html`:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Open up a command line/terminal and navigate to the project folder. Run node
    `server.js` to start the server. Open another terminal window in the `project`
    folder and run `ng serve` to serve the Angular app.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: 'Open up the browser and visit `localhost:4200`. This is what the result should
    look like the following screenshot:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/06388fbe-6640-4e52-a8a6-d751eca2cb6c.jpg)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
- en: We have succeeded in creating a todo app by making HTTP requests to the node
    server through the service and then rendering the result to the DOM through the
    component. You can add a todo, delete a todo, get all todos and when you click
    on a todo, the boolean value changes and a strikethrough appears across that particular
    todo. When you reload the browser, you can see that the changes made to the todo
    list persist.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: 'Let us take a brief recap of all that we have done:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: First, we created an Angular application using the Angular-CLI
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Then we created a server file, where we required our dependencies, created an
    express app, set our API routes, declared a port for our server to listen to,
    added parsers for post data, and so on
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We then defined our source of data which was a `.json` file of todos communicating
    with **diskdb**
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Created an Angular component
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Created a service with `get`, `post`, `put`, and `delete` methods that communicate
    with the REST API
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let us look at another example. We'll create a simple app to display a list
    of users together with their emails, and phone numbers. The users will also have
    a true or false state, indicating whether they are available or unavailable.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: Build a user directory with Angular
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The application we are about to build will have a REST API which will be created
    during the course of this example. In this simple example, we'll be creating a
    `users` app which will be quite simple. The app will basically be a table which
    contains a list of users together with their email addresses and phone numbers.
    Each user in the table will have an *active*state whose value is a boolean. We
    will be able to change the *active* state of a particular user from false to true
    and vice versa. The app will give us the ability to add new users and also delete
    users from the table. Just like the previous example, diskDB will be used as the
    database for this example. We will have an Angular service which contains methods
    that will be responsible for communicating with the REST end points. These methods
    will be responsible for making `get`, `post`, `put`, and `delete` requests to
    the REST API. The first method in the service will be responsible for making a
    `get` request to the API. This will enable us to retrieve all the users from the
    back end. Next, we will have another method that makes a `post` request to the
    API. This will enable us to add new users to the array of existing users.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: The next method we shall have will be responsible for making a `delete` request
    to the API in order to enable the deletion of a user. Finally, we shall have a
    method that makes a `put` request to the API. This will be the method that gives
    us the ability to edit/modify the state of a user. In order to make these requests
    to the REST API, we will have to make use of the HttpModule. The aim of this section
    is to solidify your knowledge of HTTP. As a JavaScript and, in fact, an Angular
    developer, you are bound to make interactions with APIs and web servers almost
    all the time. So much data used by developers today is in form of APIs and in
    order to make interactions with these APIs, we need to constantly make use of
    HTTP requests. As a matter of fact, HTTP is the foundation of data communication
    for the web.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: Create a new Angular app
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As shown previously, to start a new Angular app, run the following command:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: This creates the Angular 2 user app.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: 'Install the following dependencies:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: Express
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Body-parser
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cors
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE32]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Create a Node server
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Create a file called `server.js` at the root of the project directory. This
    will be our node server.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
- en: 'Populate `server.js` with the following block of code:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'What''s going on here is pretty simple:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
- en: We required and made use of the dependencies
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We defined and set the API routes
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We set a port for our server to listen to
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The API routes are being required from `./route`, but this path does not exist
    yet. Let's quickly create it.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
- en: At the root of the project directory, create a file called `route.js`. This
    is where the API routes will be made. We need to have a form of a database from
    where we can fetch, post, delete, and modify data.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
- en: Just as in the previous example, we will make use of diskdb. The route will
    pretty much have the same pattern as in the first example.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
- en: Install diskDB
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Run the following in the project folder to install diskdb:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Create a `users.json` file at the root of the project directory to serve as
    our database collection where we have our users' details.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
- en: 'Populate `users.json` with the following:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Now, update `route.js`.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: We've created a REST API with the API routes, using diskDB as the database.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
- en: 'Start the server using the following command:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: The server is running and it is listening to the assigned port. Now, open up
    the browser and go to `http://localhost:3000/api/users`.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
- en: Here, we can see the data that we imputed to the `users.json` file. This shows
    that our routes are working and we are getting data from the database.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
- en: Create a new component
  id: totrans-161
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Run the following command to create a new component:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'This creates `user.component.ts`, `user.component.html`, `user.component.css`
    and `user.component.spec.ts` files. `User.component.spec.ts` is used for testing,
    therefore we will not be making use of it in this chapter. The newly created component
    is automatically imported into `app.module.ts`. We have to tell the root component
    about the user component. We''ll do this by importing the selector from `user.component.ts`
    into the root template component (`app.component.html`):'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Create a service
  id: totrans-166
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The next step is to create a service that interacts with the API that we created
    earlier:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'This creates a user service called the `user.service.ts`. Next, import `UserService`
    class into `app.module.ts` and include it to the providers array:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Within the service class, write a method that makes a `get` request to fetch
    all users and their details from the API:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Write the method that makes a `post` request and creates a new todo:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Write another method that makes a `delete` request. This will enable us to
    delete a user from the collection of users:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Finally, write a method that makes a `put` request. This method will enable
    us to modify the state of a user:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Update `app.module.ts` to import `HttpModule` and `FormsModule` and include
    them to the imports array:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'The next thing to do is to teach the user component to use the service:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Now, we can make use of the methods from the user service in the user component.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
- en: Updating user.component.ts
  id: totrans-184
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Within the `ngOnInit` method, make use of the user service to `get` all users
    from the API:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Below the `ngOnInit` method, write a method that makes use of the `post` method
    in the user service to add new users:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Let''s make use of the `delete` method from the user service to enable us to delete
    users:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Finally, we''ll make use of user service to make `put` requests to the API:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: We have all our communication with the API, service, and component. We have
    to update `user.component.html` in order to illustrate all that we have done in
    the browser.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll be making use of bootstrap for styling. So, we have to import the bootstrap
    CDN in `index.html`:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: Updating user.component.html
  id: totrans-196
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here is the component template for the user component:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'A lot is going on in the preceding code, let''s drill down into the code block:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
- en: We have a form which takes in three inputs and a submit button which triggers
    the `addUser()` method when clicked
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There is a delete button which triggers the `delete` method when it is clicked
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There is also an update status input element that triggers the `updateUser()`
    method when clicked
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We created a table in which our users' details will be displayed utilizing Angular's
    `*ngFor` directive and Angular's interpolation binding syntax, `{{}}`
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Some extra styling will be added to the project. Go to `user.component.css`
    and add the following:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: Running the app
  id: totrans-206
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open up two command line interfaces/terminals. In both of them, navigate to
    the project directory. Run node `server.js` to start the server in one. Run `ng
    serve` in the other to serve the Angular 2 app.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
- en: Open up the browser and go to `localhost:4200`.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
- en: In this simple users app, we can perform all CRUD operations. We can create
    new users, get users, delete users, and update the state of users.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
- en: By default, a newly added user's active state is false. That can be changed
    by clicking on the change state button.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，新添加用户的活动状态为false。可以通过点击更改状态按钮来更改。
- en: Summary
  id: totrans-211
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Working with actual data from a database or from an API is quite important when
    developing any application. HTTP along with observables and Rxjs made it possible
    to work with the desired set of data from an API, and also perform all CRUD operations.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发任何应用程序时，使用来自数据库或API的实际数据非常重要。HTTP与可观察对象和Rxjs使得可以从API中使用所需的数据集，并执行所有CRUD操作。
- en: In the next chapter, we'll be taking a look at writing unit tests and debugging.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将看一下编写单元测试和调试。
