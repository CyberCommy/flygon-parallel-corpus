- en: Handling Angular Animation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will learn about Angular animations. Animation; the very
    word sounds fun and creative, so tighten your seat belt; we will have fun learning
    Angular animations. Motion in web applications is one of the critical and crucial
    design factors and is a primary driver for good user experience. Transitions in
    particular are of great interest, as they enable the elements of the applications
    move to from one state or another.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics are covered in detail in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to Angular animations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Built-in classes in Angular 2 to support animation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding and learning to use animation modules, `transition`, `states`,
    `keyframes`, and so on
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Animating page transitions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Animating toggle/collapse accordion slides
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction to Angular animations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Angular comes with solid native support for animations since motion and transition
    are a major part of any application.
  prefs: []
  type: TYPE_NORMAL
- en: Angular has a built-in animation engine, which also supports and extends the
    Web animations API that runs on most modern browsers.
  prefs: []
  type: TYPE_NORMAL
- en: We have to install Angular animations separately in your project folder. We
    will create some examples for animations in the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the Angular animations library
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we discussed earlier, Angular animations have been forked out as a separate
    library and need to be installed separately.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this section, we will discuss how to get the latest Angular animation version
    and install it; follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Get the latest Angular animations library.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You can install it using the following `npm` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Running the preceding command will save the latest version of the Angular animations
    library and add it as a dependency in the `package.json` file.
  prefs: []
  type: TYPE_NORMAL
- en: Verify the latest installed Angular animation library.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To make sure that we have installed the Angular animations library, open the
    `package.json` file, and there should be an entry of `@animations/animations`
    in the list of dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once Angular animations library has been imported and installed correctly,
    the `package.json` file should look the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/88d1a258-fd8a-4583-bc5f-bcf22acf8119.png)'
  prefs: []
  type: TYPE_IMG
- en: Import the Angular animations library inside the `app.module.ts` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We need to import the Angular animations library in our `app.module.ts` file.
    For including the library, we will use the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Include the Angular animations library in imports for `ngModule` decorator:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code snippet, we are just importing `BrowserAnimationsModule`
    into our `ngModule` to make it available for use across the application.
  prefs: []
  type: TYPE_NORMAL
- en: Great! Now we have the Angular animations library as part of our application,
    and we can continue building our components as usual with animations and effects.
  prefs: []
  type: TYPE_NORMAL
- en: Before we start writing examples of components using animations, it's important
    for us to spend some time and explore all the available classes in Angular animations,
    that we can take advantage of.
  prefs: []
  type: TYPE_NORMAL
- en: Angular animation - Specific functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As mentioned in the earlier section, Angular comes with a separate animations
    library of its own, which has a lot of built-in classes and methods to support
    various animations.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s learn about the various built-in classes available in this section:'
  prefs: []
  type: TYPE_NORMAL
- en: '`trigger`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`transition`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`state`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`style`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`animate`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will learn each of the afore mentioned methods in detail but before we do
    that, let's quickly see the general syntax for using these methods.
  prefs: []
  type: TYPE_NORMAL
- en: 'An example of general syntax for writing animations is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s quickly analyze the preceding code in detail:'
  prefs: []
  type: TYPE_NORMAL
- en: We are defining a trigger named `slideInOut`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We are defining two `states`: `in` and `out`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With each of the states, we are assigning a style, that is, the CSS `transform`
    property for each of the respective states.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We are also adding `transition` to mention the `state` and `animation` details.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Looks simple, right? Yep, you bet it is!
  prefs: []
  type: TYPE_NORMAL
- en: Now that we know the syntax of how to write animations, let's learn about each
    of these methods available in the Angular animation library, in some depth.
  prefs: []
  type: TYPE_NORMAL
- en: Trigger
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Trigger defines a name that will trigger the animation. Trigger names help us
    identify which trigger should be triggered based on events.
  prefs: []
  type: TYPE_NORMAL
- en: 'The general syntax to define a trigger is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding code syntax, we are defining the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Trigger is defined by passing a mandatory parameter, the name and optional parameters,
    which can include `state` and `transition`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Trigger name; we define a name to identify the trigger.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Optionally we can also define our states and transitions as parameters in the
    trigger definition.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: States
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: States are the defined animation property of an element at a given point of
    time.
  prefs: []
  type: TYPE_NORMAL
- en: States are our application's logical states, for example, active and inactive.
    We define the state name and the respective style properties for the state.
  prefs: []
  type: TYPE_NORMAL
- en: 'The general syntax for writing syntax to define states is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding code syntax, we are defining the following:'
  prefs: []
  type: TYPE_NORMAL
- en: We are defining a `state` by the name `'in'`, which is one of the logical states
    in our application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In style, we define the `CSS` properties of the state that needs to be applied
    to the element. Regular `CSS` style attributes are defined here.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Transitions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Transitions allow elements to move smoothly from one state to another. In the
    transition, we define various states (one or more) of animations.
  prefs: []
  type: TYPE_NORMAL
- en: States are part of transitions.
  prefs: []
  type: TYPE_NORMAL
- en: 'The general syntax for writing a `transition` is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code syntax, we are defining the following
  prefs: []
  type: TYPE_NORMAL
- en: We are defining our transition states, that is, from start state to the end
    state. In our syntax it is from in state to out state.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The animate options are as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Easing: How smoothly the animation takes place'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Duration: how long the animation takes to run from start to finish'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Delay : The delay controls the length of time between the animation trigger
    and the beginning of the transition.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With a strong understanding of the concepts and syntax of how to write Angular
    animations, let's go ahead and create examples using all the preceding functions
    in the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: Animating page transitions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the preceding section, we created a few states for animations. In this section,
    we will learn how to create transitions using states.
  prefs: []
  type: TYPE_NORMAL
- en: '`transition` is the most important method in the Angular animations library
    since it''s responsible for all effects and state changes.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create an example of a complete page transition. We will create the
    component class, `learn-animation.component.ts`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s analyze the preceding code in detail to understand Angular animations:'
  prefs: []
  type: TYPE_NORMAL
- en: We are defining a trigger named `customHover`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We are defining two `states`: `inactive` and `active`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With each of the states, we are assigning a style, that is, CSS; `transform`,
    and `backgroundColor` properties for each of the respective states.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We are also adding transition to mention the state and animation details:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`transition` affects when the state moves from `inactive` to `active`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`transition` affects when the state moves from `active` to `inactive`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We are defining a `toggleBackground` method that, which when called upon, will
    toggle states from `inactive` to `active` and vice versa.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now that we have created the component class, we have called the `toggleBackground`
    method in our `learn-animation.component.html` template:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s analyze the preceding code in detail:'
  prefs: []
  type: TYPE_NORMAL
- en: In the `learn-animation.component.html`, we are defining a `div` element.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We are binding the `mouseover` and `mouseout` events with the `toggleBackground`
    method.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Since we defined our trigger as `@customHover` we will use this for property
    binding. On any element that we place `[@customHover]`, the animation defined
    will be applied.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As we have applied property binding, the value for the property `@customHover`
    will toggle between `active` and `inactive`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When we take the mouse over of the element, the `toggleBackground` method is
    called, and we see the background color change along with the `transform` property.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the mouse-out event, again the `toggleBackground` method is called and the
    style gets reset back to the original.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the app, and we should see the output in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/bcd37f1e-17b7-4f3c-99ba-9c5e7ac1258e.png)'
  prefs: []
  type: TYPE_IMG
- en: In this section, we discussed how to use basic Angular animation. In the next
    section, we will explore more examples of animation.
  prefs: []
  type: TYPE_NORMAL
- en: One more example - Angular animations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the preceding section, we learned about the basics of animation; in this
    section, we will create one more example using Angular animations.
  prefs: []
  type: TYPE_NORMAL
- en: In this example, we will create a button and a `div` element. When the button
    is clicked, the `div` element will slide into to the page. Cool, right?
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s get this started. Add the following code to the component file we created
    in the preceding section: `learn-animation.component.ts`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The following are the important things to note in the preceding code:'
  prefs: []
  type: TYPE_NORMAL
- en: We are creating a trigger with `animationToggle`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We are defining two transitions, that is, from `show => hide` and `hide => show`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We are adding style properties to the `show => hide` transition.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We did NOT add style properties to the `hide => show` transition.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It's not mandatory to define style for transition but more often than not we
    will need to define custom styling for our elements with animations.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the app, and you should see the application and animation as mentioned
    below after the screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/e485edc7-9fe0-49bb-a627-9e2e07e1c2d6.png)'
  prefs: []
  type: TYPE_IMG
- en: In our application when you `click` on the show button, The `DIV` element will
    slide-in to the page from right side to left. Click on the button again it toggle
    to hide.
  prefs: []
  type: TYPE_NORMAL
- en: It's cool, right? Yep. Angular animation gives us the ability to create beautiful
    animations and transition effects for elements, which will add up to a great user
    experience.
  prefs: []
  type: TYPE_NORMAL
- en: We will build a lot of cool examples implementing animations.
  prefs: []
  type: TYPE_NORMAL
- en: Using keyframes - Sequence of styles
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we have implemented examples using various methods for Angular animations.
  prefs: []
  type: TYPE_NORMAL
- en: When we design/decide motion and the transitions of elements, we need to iterate
    through various styles for smooth transitions.
  prefs: []
  type: TYPE_NORMAL
- en: Using `keyframes` we can define iterations of different styles while transitioning.
    `keyframes` essentially are a sequence of styles defined for an element.
  prefs: []
  type: TYPE_NORMAL
- en: 'To understand this better, let''s take a look at the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s analyze the preceding code snippet in detail:'
  prefs: []
  type: TYPE_NORMAL
- en: We are defining a `transition` from `frameTest1 => frameTest2`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We are defining the animate property with `300` milliseconds.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We are defining the `keyframes` under which we are defining three different
    styles; the element will go through each of the `transition` frames step by step.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, let's expand the preceding created example in the preceding section with
    the subsequent code.
  prefs: []
  type: TYPE_NORMAL
- en: 'The updated `learn-animation.component.ts` file will have code as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s analyze the preceding code in detail:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We are importing the required modules from the Angular animation library: `state`,
    `style`, `animate`, `keyframes`, and `transition`. These modules help us in creating
    animations in our applications.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We create a `LearnAnimationComponent` component.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We specify `animations` for the component.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We define a trigger named `animationState`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For the trigger created, we are defining two states--`frameTest1` and `frameTest2`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We define two transitions: `''frameTest2 => frameTest1''` and `''frameTest2
    => frameTest1''`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For each of the transitions defined, we have implemented `keyframes`, that is,
    a sequence of styles attached with the `animate` method to achieve smooth transition
    with a time delay.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the component class, we define a `left` variable.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We are defining an `onClick` method, toggling the values from `frameTest1` and
    `frameTest2`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: So far, so good. We have implemented the component.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now it''s time to update our `learn-animation.component.html` and add the following
    code snippet to the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Alright, all set. Now, run the app, and you should see the output as shown
    in the screenshot and animations as mentioned below:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/e58fdda2-5a05-4481-8e76-2d29da52b2c6.png)'
  prefs: []
  type: TYPE_IMG
- en: You should the following animations when you run the app
  prefs: []
  type: TYPE_NORMAL
- en: When you click on the `DIV` element --it should slide towards right
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the `DIV` element again and the element should move towards right with
    the `DIV` element transforming --giving a look-n-feel that the DIV is spinning.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In this section, you learned how to use `keyframes` and create a sequence of
    styles for elements for smoother transitions.
  prefs: []
  type: TYPE_NORMAL
- en: Animate collapse menu
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the this section, we will create a very important aspect of any application,
    that is, a sidebar menu for our application.
  prefs: []
  type: TYPE_NORMAL
- en: With what we have learned so far about Angular animations, we will create an
    example of a collapsing sidebar in this section.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s update the component template `learn-animation.component.html` and update
    the file with the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'An analysis of the preceding code is given here:'
  prefs: []
  type: TYPE_NORMAL
- en: We are adding a `<h4>` heading, a `Collapse` menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We are defining a button and attaching the `click` event with the `toggleMenu`
    method.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We are creating an unordered list `<ul>` with sample list items `<li>` in our
    menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, we will add some basic CSS styling to the `learn-animation.component.css`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: So far, we have created our application component template `learn-animation.component.html`
    and styled the menu component `learn-animation.component.css`.
  prefs: []
  type: TYPE_NORMAL
- en: Now, we will create the menu component class.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following code to the `learn-animation.component.ts` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s analyze the preceding code in detail:'
  prefs: []
  type: TYPE_NORMAL
- en: We are importing the required Angular animation library modules, such as `state`,
    `style`, `animate`, `trigger`, `transition`, and `keyframes`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the animations, we define a trigger: `toggleMenu`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We are creating two states: `opened` and `closed`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For each of the states, we are defining some style attributes with `transform`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We now define the transition `opened => closed` and `closed => open` with some
    animate details delay.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We have defined a `menuState` variable.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the component class, we define the `toggleMenu`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the `toggleMenu` method, we are toggling the variable value of `menuState`
    to `opened` or `closed` and vice versa.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'It''s demo time. Run the application, and you should see output as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/efde53e9-fd39-4938-88e5-437701ba9fb0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on the Toggle Menu button again, we should see the menu sliding to the
    right as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/b42eb804-7fa2-46ec-9b2c-dc60ac48e066.png)'
  prefs: []
  type: TYPE_IMG
- en: In this section, we created our application's sidebar menu with Angular animations.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we introduced Angular animations. Animations are key to designing
    and building beautiful user experiences with smooth transitions and element effects.
  prefs: []
  type: TYPE_NORMAL
- en: We covered how to install and import the Angular animations library and use
    various modules inside the library.
  prefs: []
  type: TYPE_NORMAL
- en: We discussed important modules, such as `state`, `style`, `animate`, `trigger`,
    `transition`, and `keyframes`.
  prefs: []
  type: TYPE_NORMAL
- en: We created and implemented some examples using Angular animations.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we created a web application sidebar menu with some animations. Now,
    over to you!
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will learn how to integrate Bootstrap with Angular
    applications. Bootstrap is arguably the most popular frontend framework out there
    and, in this chapter, you will learn what it means to have an Angular x Bootstrap
    application.
  prefs: []
  type: TYPE_NORMAL
