- en: Summarizing Results with Grouping
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will talk about using LINQ to group related results. Grouping
    is a fundamental thing that you do in databases to categorize results.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a Show Results button to the HTML
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Bring up a project. First, we will put a button in the HTML that says Show
    Results; to do this, place a button below the line beginning with `<form id=....`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, switch to the Design view and double-click on the Show Results button.
    This takes us into `Default.aspx.cs`. Delete the `Page_Load` block. The relevant
    portion of the starting code for this project should look like *Figure 14.9.1*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6c6355aa-197a-459d-9444-35fa84767067.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 14.9.1: The starting code section for this project'
  prefs: []
  type: TYPE_NORMAL
- en: Adding namespaces
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First, we need to add a couple of namespaces. To do this, enter the following
    under `using System` near the top of the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Creating the student class and defining fields
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Next, we will make a class called `Student`. Above the line beginning with
    `public partial class _Default...`, enter the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, to define fields, enter the following between a set of curly braces below
    this line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'So, little properties here, and then let''s add one more. Enter the following
    below this line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Here, `List<int>` is for the grades of the students, and let's name it `Grades`.
  prefs: []
  type: TYPE_NORMAL
- en: Making a list of students
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, in the next stage, we will make a list of students. To do this, start
    by entering the following between the set of curly braces after the line that
    begins with `protected void Button1_Click...`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, `students` is the name of the list. We then have a new list of students.
    Next, to initialize the list, we''ll place all of the new students between a set
    of curly braces below this line, starting as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding line, after `new Student`, you place all of the information
    for each student individually within a set of curly braces. First, you need to
    define the value of `Name`, so you set that equal to `Smith`, `John` for example,
    insert a comma and then put in `Grades` of John in a new list of integers, setting
    those values to `78`, `98`, `67`, and `87`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we need to repeat this a couple of times for other the students; so,
    copy this line and paste it below. Edit the line to change the value of `Name`
    variable to `Adams`, `Amy`, and the grades to `91`,`99`,`89`, and `93`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: This level of coding is very practical and realistic. Having done coding for
    five years, I can tell you that things are always far more interesting and more
    challenging.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, repeat this process one more time. Copy the preceding line and paste it
    below. Edit the line to change the value of `Name` variable to `Smith`, `Mary`,
    and the grades to `89`, `87`, `84`, and `88`. Be sure to insert a closed curly
    brace and a semicolon on the next line following the last `new Student` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Grouping names
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Again, because we want to group, for example, by the last name and the first
    name, that's why I have used two identical last names. We will display the results
    nicely grouped by the last name; that is, by the first letter of the last name
    and then by the first name.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we will write our LINQ query to accomplish the grouping. Again, this
    could be done in a much more sophisticated way, but is a relatively easy example.
    So, below the closed curly brace and semicolon on the line following the last
    `new Student` class in the list, enter the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Remember, `groupsByFirstLetters` indicates the first letter of the last name.
    So, to write the query, you say `fromstudent` in `students`, and then on the next
    line you `group` students by `student.Name`. Because `Name` is a string, you can
    extract the first character by using square brackets and then getting the value
    at index `0` in the string. That's why you can write that. Otherwise, it would
    seem a little mysterious.
  prefs: []
  type: TYPE_NORMAL
- en: Displaying the grouped results
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, to display the results in a grouped fashion, you have to use nested `foreach`
    loops. So, enter the following next:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Here, it gets a little more interesting. If you hover your mouse over `var`
    momentarily, it tells you what `var` represents. It says, *it's a Grouping of
    characters and students. It represents a collection of objects that have a common
    key*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we can make use of it as follows. Enter the following between a set of
    curly braces underneath the preceding line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: First we want to display the key, meaning the first letter of each last name,
    and then everything will be summarized under the first letter of that last name.
    So, we say `studentGroup.Key`. There's a property called `Key`, which is the key
    to the grouping, for each group. Remember that here we are grouping by the first
    letter of the last name. So, the key is that quantity.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, once you fix the first letter within that group, there are several students
    usually or several items, correct? So, now you have to display those items individually.
    Enter the following next:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Notice something here about the nesting of the `foreach` loops. Do you see how
    in the `foreach (var studentGroup in groupsByFirstLetters)` line, the outer `for`
    loop gets the `studentGroup` variable, and then the key of that group is displayed
    by the `sampLabel.Text += $"<br>{studentGroup.Key}"` line? Well, next you'll go
    through the students inside of each of these groups. That's why in the next stage,
    if you hover your mouse over `var` in the preceding line, you see that it says,
    `student st` in `studentGroup`. So, that's the breakdown.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, to display it, enter the following within a set of curly braces under
    the preceding `foreach` line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: This is the heart of it. Now remember, we started with a class called `Student`.
    Then we have a list of students. Note that in the list of students, you can also
    use a syntax that says name of the property and then the value of property without
    the parentheses. You can just use curly braces to make the objects directly inside
    the definition of the list of students.
  prefs: []
  type: TYPE_NORMAL
- en: The block beginning with `var groupsByFirstLetters...` groups things for us.
    Then we need that outer loop, `foreach (var studentGroup...`, to display the key
    to each group. Then the inner `foreach` loop, `foreach (var st in studentGroup)`,
    displays the students within that group. So, the two loops are needed, and they
    serve different purposes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now crank this up in your browser, and take a look at the results. Click on
    the Show Results button. As you can see, in *Figure 14.9.2*, you have the letter
    S, which is the key for the first group and within that group you have Smith,
    John and then Smith, Mary. Next, you have the letter A, which is the key for the
    second group, and within that you have Adams, Amy:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7292361c-c65f-4144-b6a9-04b4b65e14e3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 14.9.2: The results of running the program for this chapter'
  prefs: []
  type: TYPE_NORMAL
- en: Of course, this can be sorted and all kinds of other things can be done. However,
    these are just the basics. So, you see what is doable here; many much more sophisticated
    things are possible.
  prefs: []
  type: TYPE_NORMAL
- en: Chapter review
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For review, the complete version of the `Default.aspx.cs` file for this chapter,
    including comments, is shown in the following code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we talked about using LINQ to group related results. You created
    a student class and defined fields, made a list of students, grouped names, and
    finally, displayed the grouped results.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will learn how to use LINQ to write queries that join
    different result sets or different data sets.
  prefs: []
  type: TYPE_NORMAL
