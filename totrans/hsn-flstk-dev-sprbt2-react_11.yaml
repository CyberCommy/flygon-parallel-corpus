- en: Styling the Frontend with React Material-UI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter explains how to use Material-UI components in our frontend. We
    will use the `Button` component to show the styled buttons. The modal form input
    fields are replaced by `TextField` components, which have many nice features.
    Material-UI provides the `Snackbar` component, which can show the toast messages
    to an end user. We replace the `react-toastify` component with `Snackbar` to get
    a uniform outlook. Finally, we use the `AppBar` component instead of the React
    app header.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will look at the following:'
  prefs: []
  type: TYPE_NORMAL
- en: What is Material-UI?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to use Material-UI components in our frontend
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to remove unused components in the React app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Spring Boot application that we created in [Chapter 4](936ad378-25d8-43c4-9e7f-b1cb9bc373cf.xhtml),
    *Securing and Testing Your Backend*, is needed with the modification from the
    previous chapter (the unsecured backend).
  prefs: []
  type: TYPE_NORMAL
- en: We also need the React app that we used in the previous chapter (*carfront*).
  prefs: []
  type: TYPE_NORMAL
- en: Using the Button component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Install Material-UI by typing the following command into the terminal you are
    using and starting your app after the installation is finished:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s first change all the buttons to use the Material-UI `Button` component.
    Import the `Button` to the `AddCar.js` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Change the buttons to use the `Button` component. In the list page, we are
    using the primary button and in the modal form, the outline buttons:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, the list page button should look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f33d2eef-220c-40e8-8894-bbd3c1114522.png)'
  prefs: []
  type: TYPE_IMG
- en: 'And the modal form buttons should look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/35a9f5bc-474c-4d50-822d-6dd4b925c526.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We use the flat variant buttons in the car table and define the button size
    as small. See the following source code for the table columns:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, the table should look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/47a0a03d-70cb-4b6e-9cbe-be77136b3663.png)'
  prefs: []
  type: TYPE_IMG
- en: Using the Grid component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Material-UI provides a `Grid` component that can be used to get a grid layout
    to your React app. We will use `Grid` to get New Item button and the Export CSV
    link on the same line.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following import to the `Carlist.js` file to import the `Grid` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we wrap `AddCar` and `CSVLink` inside the `Grid` components. There are
    two types of `Grid` components—a container and an item. Both components are wrapped
    inside the item''s `Grid` components. Then both items'' `Grid` components are
    wrapped inside the container''s `Grid` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, your app should look like the following and the buttons are now placed
    in one row:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/465517bb-5cf3-4f10-9462-c3c3fb612f14.png)'
  prefs: []
  type: TYPE_IMG
- en: Using the TextField components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we''ll change the text input in the modal form using the Material-UI
    `TextField` component. Add the following import statement to the `AddCar.js` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, change the input to the `TextField` components in the form. We are using
    the `label` props to set the labels of the `TextField` components:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'After the modifications, the modal form should look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ae223655-273e-4404-b0cd-dd0c33451b30.png)'
  prefs: []
  type: TYPE_IMG
- en: Using the AppBar component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we''ll replace the React app header with an `AppBar` component.
    Import the `AppBar` and `Toolbar` components:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Remove the `div` header element from the `App.js` file. Add the `AppBar` component
    to the `render()` method and place the `Toolbar` component inside it. The `Toolbar`
    component contains the text shown in the app bar:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, your frontend should look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/aae8422f-e176-4c07-8031-2f152314b4eb.png)'
  prefs: []
  type: TYPE_IMG
- en: Using the SnackBar component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have already implemented toast messages by using the `react-toastify` component.
    Material-UI provides a component, called `SnackBar`, that can be used to show
    the messages to the end user. To get a uniform outlook in our app, let's use that
    component for the messages.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can now remove the `react-toastify` imports from the `Carlist.js` file and
    we can also remove the component by typing the following command to the terminal
    you are using:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'To start using the `Snackbar` component, add the following import to the `Carlist.js`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'We need two new state values for the `Snackbar`, one for the message and one
    for the status. Add these two state values to the constructor. The status state
    is called `open` and it defines whether `Snackbar` is visible or not:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we add the `Snackbar` component to the `render()` method. The `autoHideDuration`
    prop defines the time in milliseconds to wait before `onClose` is called. To show
    `Snackbar`, we just have to set the `open` state value to `true` and set the message:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we have to implement the `handleClose` function, which is called in the
    `onClose` event. The function just sets the `open` state value to `false`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we replace the toast messages with the `setState()` methods, which set
    the `open` value to `true` and the displayed text to the `message` state:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is the screenshot of the message using the `Snackbar` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f67dde87-4b2d-4b17-b4a5-fc4accfafaa3.png)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we finalized our frontend using Material-UI. Material-UI is
    the React component library that implements Google's Material Design. We replaced
    all the buttons with the Material-UI `Button` components. Our modal form got a
    new look by using the Material-UI `TextField` component. We removed the React
    app header and used the `AppBar` component instead. The messages to the end user
    are now shown using the `Snackbar` component. After these modifications, our frontend
    looks more professional and uniform. In the next chapter, we will focus on frontend
    testing.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What is Material-UI?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How should you use different Material-UI components?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How should you remove unused components?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Packt has other great resources for learning about React:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.packtpub.com/web-development/getting-started-react](https://www.packtpub.com/web-development/getting-started-react)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://www.packtpub.com/web-development/react-16-essentials-second-edition](https://www.packtpub.com/web-development/react-16-essentials-second-edition)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
