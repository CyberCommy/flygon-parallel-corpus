- en: Creating XML Files with C#
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you will learn how to write XML to a file and then view the
    results in Notepad and in Internet Explorer.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a button to HTML
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Start up a project, and put a button inside the HTML page. To do this, go to
    View | Toolbox (*Ctrl* + *Alt*-*X*), type `but` in the search field, and drag
    and drop the `Button` control below the line that begins with `<form id=...`.
    Change the text on the button to say `Save File`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, go to the Design view. Double-click on the Save File button. This brings
    up the event handler inside `Default.aspx.cs`. Delete the `Page_Load` stub. Collapse
    all of the comments above and below `using System;`â€”you don''t need them. The
    relevant portion of the starting code for this project should look like that in
    *Figure 28.2.1*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e5d29865-ef41-4272-8a72-ba42846e7d38.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 28.2.1: The starting code for this project'
  prefs: []
  type: TYPE_NORMAL
- en: Adding namespaces
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First, let''s add some namespaces. Enter the following after `using System`
    near the top of the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: You need `using System.Diagnostics;` so that you can view a file in Internet
    Explorer and Notepad as soon as you create it.
  prefs: []
  type: TYPE_NORMAL
- en: Coding the XmlWriter settings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Next, you''ll make the `XmlWriter` settings. So, enter the following between
    a set of curly braces beneath the line that begins with `protected void Button1_Click...`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'In this line, you make a setting object of this class, and then you''ll set
    the feature. Enter the following next:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Enter the following below this line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Here, `"\t"` is a tab.
  prefs: []
  type: TYPE_NORMAL
- en: Writing to the hard drive
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, because the `XmlWriter` class uses the hard drive and the like, you need
    to enclose it within a `using` statement. So, enter the following next:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: You'll create a file on the hard drive, `c:\data \sampfile2.xml`, and then you
    pass in the settings to be used. The settings object is passed as an argument
    to the `Create` function defined inside `XmlWriter`.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the next stage, we''ll actually write, so enter the following between a
    set of curly braces:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: With the second line, you immediately close the `WriteStartElement` method.
    We are adding a structure here.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now you will add several lines of code between these two lines. Start by writing
    an attribute string, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, you''ll make another element. Here, it will be helpful if you indent
    the code, which suggests that the `book` element is under the `bookstore` element.
    For this, enter the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The element to be written is `book`. Enter the following next:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let''s do the following to close this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: You do this to keep the end and the start in pairs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, within this (above the `WriteEndElement` line), you can write another
    element. In this line, you''ll include the specific book author. Again, you will
    write a string, and the author''s name will be the value. Enter the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Here, keep an eye out because `WriteAttribute` is different from `WriteString`.
    `WriteString` goes between the tags, while `WriteAttribute` gives an attribute,
    so it's different. This is sufficient for our purposes.
  prefs: []
  type: TYPE_NORMAL
- en: Formatting the results
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now you want to make sure that the results look decent. So, outside the closing
    curly brace beneath the last `WriteEndElement` line, enter the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: You'll view the results in Notepad, and then you'll need the path of the file,
    so copy that from the preceding `using` line, `c:\data\sampfile2.xml`, and paste
    it into this line.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s do one more now. Basically, just repeat this line and change where it
    says `notepad.exe` to `iexplore.exe`, as follows, in order to indicate that Internet
    Explorer should be used next:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Running the program
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now let''s crank this up in your browser and take a look at the results. Click
    on the Save File button, and you''ll see what it looks like in Internet Explorer:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/19885c8c-225f-4153-a138-9a8bac1776bd.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 28.2.2: The results of running the program as they appear in Internet
    Explorer'
  prefs: []
  type: TYPE_NORMAL
- en: You can see that it's got structure, and the results are even collapsible, as
    indicated by the - symbol before the XML tag, and of course expandable as well.
    The name of the book store is Tom's Book Store, which is the attribute, and then,
    John Smith, the author, which is written as a string between the book author tags
    or element.
  prefs: []
  type: TYPE_NORMAL
- en: 'Likewise, in Notepad, it looks like the screen shown in *Figure 28.2.3*, with
    correctly formatted XML:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d78866d8-e93f-474f-9bc2-a3f26a347b5a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 28.2.3: The results of running the program as they appear in Notepad'
  prefs: []
  type: TYPE_NORMAL
- en: So, these are the basics of doing these operations.
  prefs: []
  type: TYPE_NORMAL
- en: Chapter review
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The complete version of the `Default.aspx.cs` file for this chapter, including
    comments, is shown in the following code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned how to write XML to a file and then view the results
    in Notepad and Internet Explorer. You coded the `XmlWriter` settings and wrote
    the code to write to the hard drive as well as to format the results.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will learn how to combine LINQ and XML to make something
    more practical.
  prefs: []
  type: TYPE_NORMAL
