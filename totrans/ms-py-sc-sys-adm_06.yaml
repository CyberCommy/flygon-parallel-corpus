- en: File Archiving, Encrypting, and Decrypting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we learned about handling files, directories, and data.
    We also learned about the `tarfile` module. In this chapter, we'll learn about
    file archiving, encryption, and decryption. Archiving plays an important role
    in managing files, directories, and data. But first, what is archiving? Archiving
    is a process that stores the files and directories into a single file. Python
    has the `tarfile` module for creating such archive files.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating and unpacking archives
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tar archives
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ZIP creation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: File encryption and decryption
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating and unpacking archives
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we're going to learn about how we can create and unpack archives
    using the `shutil` module of Python. The `shutil` module has the `make_archive()`
    function, which creates a new archive file. Using `make_archive()`, we can archive
    the entire directory with its contents.
  prefs: []
  type: TYPE_NORMAL
- en: Creating archives
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, we are going to write a script called `shutil_make_archive.py` and write
    the following content in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the program and you''ll get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, to create an archive file, we used the `shutil` and
    `tarfile` modules of Python. In `shutil.make_archive()`, we specified `work_sample`, which
    will be the name of the archive file and will be in `gz` format. We've specified
    our work directory name in the base directory attribute. Finally, we printed the
    names of files that are archived.
  prefs: []
  type: TYPE_NORMAL
- en: Unpacking archives
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To unpack the archives, the `shutil` module has the `unpack_archive()` function.
    Using this function, we can extract the archive files. We passed the archive filename
    and the directory where we want to extract the contents. If no directory name
    is passed, then it will extract the contents into your current working directory.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, create a script called `shutil_unpack_archive.py` and write the following
    code in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the script as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Now, check your `work/` directory and you will find the `work/` folder in it,
    which will have the extracted files.
  prefs: []
  type: TYPE_NORMAL
- en: Tar archives
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we are going to learn about the `tarfile` module. We'll also
    learn about testing the entered filename, assessing whether it's a valid archive
    filename or not. We'll look at how to add a new file into the already archived
    file, how we can read metadata using the `tarfile` module, and how to extract
    the files from an archive using the `extractall()` function.
  prefs: []
  type: TYPE_NORMAL
- en: First, we will test whether the entered filename is a valid archive file or
    not. To test this, the `tarfile` module has the `is_tarfile()` function, which
    returns a Boolean value.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a script called `check_archive_file.py` and write the following content
    in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the script and you will get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: So, `tarfile.is_tarfile()` will check every filename mentioned in the list.
    The `hello.py, welcome.py` file are not tar files so we got a Boolean value, `False`.
    `work.tar.gz` and `sample.tar.xz` are tar files, so we got the Boolean value, `True`.
    And there is no such file as `nofile.tar` present in our directory, so we have
    got an exception, as we've written it in our script.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we are going to add a new file into our already created archived file.
    Create a script called `add_to_archive.py` and write the following code in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the script and you will get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: In this example, first we created an archive file using `shutil.make_archive()` and
    then we printed the contents of the archived file. We then created a `sample.txt`
    file in the next statement. Now, we want to add that `sample.txt` in the already
    created `work.tar`. Here, we used the append mode, `a`. And next, we are again
    displaying the contents of the archived file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we will learn about how we can read the metadata from an archive file.
    The `getmembers()` function will load the metadata of the files. Create a script
    called `read_metadata.py` and write the following content in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the script and you will get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we will extract the contents from an archive using the `extractall()`
    function. For that, create a script called `extract_contents.py` and write the
    following code in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the script and you will get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Check your current working directory,and you will find the `work/` directory.
    Navigate to that directory and you can find your extracted files.
  prefs: []
  type: TYPE_NORMAL
- en: ZIP creation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we are going to work with ZIP files. We will learn about the `zipfile`
    module of `python`, how to create ZIP files, how to test whether an entered filename
    is a valid `zip` filename or not, reading the metadata, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we will learn how to create a `zip` file using the `make_archive()`
    function of the `shutil` module. Create a script called `make_zip_file.py` and
    write the following code in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the script as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Now check your current working directory and you will see `work.zip`.
  prefs: []
  type: TYPE_NORMAL
- en: Now, we will test whether the entered filename is a `zip` file or not. For this
    purpose, the `zipfile` module has the `is_zipfile()` function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a script called `check_zip_file.py` and write the following content
    in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the script as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: In this example, we have used a `for` loop, where we are checking the filenames
    in a list. The `is_zipfile()` function will check, one by one, the filenames and
    will give Boolean values as a result.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we will see how we can read the metadata from an archived ZIP file using
    the `zipfile` module of Python. Create a script called `read_metadata.py` and
    write the following content in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Execute the script as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: To get the metadata information about the `zip` file, we used the `infolist()`
    method of the `ZipFile` class.
  prefs: []
  type: TYPE_NORMAL
- en: File encryption and decryption
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will learn about the `pyAesCrypt` module of Python. `pyAesCrypt`
    is a file encryption module that uses `AES256-CBC` to encrypt/decrypt files and
    binary streams.
  prefs: []
  type: TYPE_NORMAL
- en: 'Install `pyAesCrypt` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a script called `file_encrypt.py` and write the following code in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the script as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Please check your current working directory. You will find the `sample.txt.aes`
    encrypted file in it.
  prefs: []
  type: TYPE_NORMAL
- en: In this example, we've already mentioned the buffer size and password. Next,
    we mentioned our filename that will be encrypted. In `encryptStream`, we mentioned
    `fIn`, which is our file to encrypt, and `fOut`, which is our filename after encryption.
    We've stored our encrypted file as `sample.txt.aes`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we will decrypt the `sample.txt.aes` file to get the content of the file.
    Create a script called `file_decrypt.py` and write the following content in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the script as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Now, check your current working directory. A file named `sampleout.txt` will
    be created. That's your decrypted file.
  prefs: []
  type: TYPE_NORMAL
- en: In this example, we mentioned the filename to decrypt, which is `sample.txt.aes`.
    Next, our decrypted file will be `sampleout.txt`. In `decryptStream()`, we mentioned
    `fIn`, which is our file to decrypt, and `fOut`, which is the name of the `decrypted`
    file.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned about creating and extracting archived files. Archiving
    plays an important role in managing files, directories, and data. It also stores
    the files and directories into a single file.
  prefs: []
  type: TYPE_NORMAL
- en: We learned in detail about the `tarfile` and `zipfile` Python modules that enable
    you to create, extract, and test archive files. You will be able to add a new
    file into the already archived file, read metadata, extract the files from an
    archive. You also learned about file encryption and decryption using the `pyAescrypt`
    module.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will learn about text processing and regular expressions
    in python. Python has a very powerful library called regular expressions that
    does tasks such as searching and extracting the data.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Can we compress the data using password protected? if yes how ?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is context manager in python?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is pickling and unpickling?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are the different types of functions in python?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Data Compression and Archiving: [https://docs.python.org/3/library/archiving.html](https://docs.python.org/3/library/archiving.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tempfile` documentation: [https://docs.python.org/2/library/tempfile.html](https://docs.python.org/2/library/tempfile.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cryptography Python documentation: [https://docs.python.org/3/library/crypto.html](https://docs.python.org/3/library/crypto.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`shutil` documentation: [https://docs.python.org/3/library/shutil.html](https://docs.python.org/3/library/shutil.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
