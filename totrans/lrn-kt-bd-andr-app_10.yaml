- en: Developing a Simple To-Do List App
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will build a simple to-do list app that allows a user to
    add, update, and delete tasks.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the process, we will learn the following:'
  prefs: []
  type: TYPE_NORMAL
- en: How to build a user interface in Android Studio
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with ListViews
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to work with Dialogs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating the project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s start by creating a new project in Android Studio, with the name TodoList.
    Select Add No Activity on the Add an Activity to Mobile screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d7dc52e6-5c32-4406-b43f-95c3eae36b1b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'When the project creation is complete, create a Kotlin Activity by selecting
    File | New | Kotlin Activity, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b7306b18-f3e9-443b-86bc-e41d9015966d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This will start a New Android Activitywizard**. **On the Add an Activity to
    Mobile screen, select Basic Activity, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e9ea6e05-6b8a-4ec7-95bd-e4526da557ed.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, check Launcher Activity on the Customize the Activity screen, and click
    the Finish button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ac8da278-3877-4064-b59b-ec2f5d5681d1.png)'
  prefs: []
  type: TYPE_IMG
- en: Building your UI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In Android, the code for your user interface is written in XML. You can build your
    UI by doing either of the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Using the Android Studio Layout Editor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing the XML code by hand
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's go ahead and start designing our TodoList app.
  prefs: []
  type: TYPE_NORMAL
- en: Using the Android Studio layout editor
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Android Studio provides a layout editor, which gives you the ability to build
    your layouts by dragging widgets into the visual editor. This will auto-generate
    the XML code for your UI.
  prefs: []
  type: TYPE_NORMAL
- en: Open the `content_main.xml` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Make sure the Design tab at the bottom of the screen is selected, as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9a012a33-2153-4d95-8821-82b5caaeedc1.png)'
  prefs: []
  type: TYPE_IMG
- en: To add a component to your layout, you just drag the item from the Palette on
    the left side of the screen. To find a component, either scroll through the items
    on the Palette, or click on the Palette search icon and search for the item you
    need.
  prefs: []
  type: TYPE_NORMAL
- en: If the Palette is not showing on your screen, select View | Tool Windows | Palette
    to display it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Go ahead and add a `ListView` to your view. When a view is selected, its attributes
    are displayed in the XML Attributes editor on the right side of the screen. The
    Attributes editor allows you to view and edit the attributes of the selected component.
    Go ahead and make the following changes:'
  prefs: []
  type: TYPE_NORMAL
- en: Set the ID as list_view
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Change both the layout_width and layout_height attributes to match_parent
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/3f3148dd-16b3-4320-aad1-813bcbb587e2.png)'
  prefs: []
  type: TYPE_IMG
- en: If the Attributes editor is not showing; select View | Tool Windows | Attributes to
    display it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, select Text at the bottom of the editor window to view the generated XML
    code. You''ll notice that the XML code now has a `ListView` placed within the
    `ConstraintLayout`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: A layout always has a root element. In the preceding code, `ConstraintLayout`
    is the root element.
  prefs: []
  type: TYPE_NORMAL
- en: Instead of using the layout editor, you could have written the previous code
    yourself. The choice between using the layout editor or writing the XML code is
    up to you. You can use the option that you're most comfortable with. We'll continue
    to make additions to the UI as we go along.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, build and run your code. as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5c177ec2-8f16-410f-8d0b-f04425ef94d6.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, the app currently doesn't have much to it. Let's go ahead and
    add a little more flesh to it.
  prefs: []
  type: TYPE_NORMAL
- en: Since we'll use the `FloatingActionButton` as the button the user uses to add
    a new item to their to-do list, we need to change its icon to one that makes its
    purpose quite clear.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `activity_main.xml` file:'
  prefs: []
  type: TYPE_NORMAL
- en: One of the attributes of the `android.support.design.widget.FloatingActionButton`
    is `app:srcCompat`. This is used to specify the icon for the **FloatingActionButton**.
    Change its value from `@android:drawable/ic_dialog_email` to `@android:drawable/ic_input_add`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Build and run again. The **FloatingActionButton** at the bottom now looks like
    an Add icon, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a51c3e2f-a232-4e4a-892e-2df78c06832a.png)'
  prefs: []
  type: TYPE_IMG
- en: Adding functionality to the user interface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'At the moment, when the user clicks on the Add button, a ticker shows at the
    bottom of the screen. This is because of the piece of code in the `onCreate()` method
    that defines and sets an `OnClickListener` to the `FloatingActionButton`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'This is not ideal for our to-do list app. Let''s go ahead and create a new
    method in the `MainActivity` class that will handle the click event:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The method currently does nothing. We''ll add code to show the appropriate
    UI soon. Now, replace the code within the `setOnClickListener()` call with a call
    to the new method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Adding a new task
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For adding a new task, we'll show the user an AlertDialog with an editable field.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start by building the UI for the dialog. Right-click the `res/layout`
    directory and select **New** | **Layout resource file**, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/01d394c9-1294-4b0c-bc42-6e7eabd9186c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'On the New Resource File window, change the Root element to `LinearLayout`
    and set the File name as `dialog_new_task`. Click OK to create the layout,  as
    shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d6dd7588-d44b-4535-ad08-bf81dd560b12.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Open the `dialog_new_task` layout and add an `EditText` view to the `LinearLayout`.
    The XML code in the layout should now look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The inputType attribute is used to specify what kind of data the field can
    take. By specifying this attribute, the user is shown an appropriate keyboard.
    For example, if the inputType is set to number, the numbers keyboard is displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a4a6bf8e-58dd-4b4c-9d09-cd8e9b8d97c6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, let''s go ahead and add a few string resources we''ll need for the next
    section. Open the `res/values/strings.xml` file and add the following lines of
    code to the `resources` tag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The `add_new_task_dialog_title` string will be used as the title of our dialog
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `save` string will be used as the text of a button on the dialog
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The best way to use an `AlertDialog` is by encapsulating it in a `DialogFragment`.
    The `DialogFragment` takes away the burden of handling the dialog's life cycle
    events. It also makes it easy for you to reuse the dialog in other activities.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new Kotlin class with the name `NewTaskDialogFragment`, and replace
    the class definition with the following lines of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s take a closer look at what this class does:'
  prefs: []
  type: TYPE_NORMAL
- en: The class extends the `DialogFragment` class.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'It declares an interface with the name `NewTaskDialogListener`, which declares
    two methods:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`onDialogPositiveClick(dialog: DialogFragment, task: String)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onDialogNegativeClick(dialog: DialogFragment)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It declares a variable of type `NewTaskDialogListener`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'It defines a method, `newInstance()`, in a companion object. By doing this,
    the method can be accessed without having to create an instance of the `NewTaskDialogFragment`
    class. The `newInstance()` method does the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It takes an `Int` parameter named `title`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It creates an instance of the `NewTaskDialogFragment` and passes the `title`
    as part of its arguments
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It returns the new instance of the `NewTaskDialogFragment`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'It overrides the `onCreateDialog()` method. This method does the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It attempts to retrieve the title argument passed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It instantiates an `AlertDialog` builder and assigns the retrieved title as
    the dialog's title
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It uses the `LayoutInflater` of the `DialogFragment` instance's parent activity
    to inflate the layout we created
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Then, it sets the inflated view as the dialog's view
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Sets two buttons to the dialog: **Save** and **Cancel**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When the **Save** button is clicked, the text in the `EditText` will be retrieved
    and passed to the `newTaskDialogListener` variable via the `onDialogPositiveClick()`
    method
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the `onAttach()` method, we attempt to assign the `Activity` object passed
    to the `newTaskDialogListener` variable created earlier. For this to work, the
    `Activity` object should implement the `NewTaskDialogListener` interface.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, open the `MainActivity` class. Change the class declaration to include
    implementation of the `NewTaskDialogListener`. Your class declaration should now
    look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'And, add implementations of the methods declared in the `NewTaskDialogListener`
    by adding the following methods to the `MainActivity` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `showNewTaskUI()` method, add the following lines of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding lines of code, the `newInstance()` method in `NewTaskDialogFragment`
    is called to generate an instance of the `NewTaskDialogFragment` class. The `show()`
    method of the `DialogFragment` is then called to display the dialog.
  prefs: []
  type: TYPE_NORMAL
- en: 'Build and run. Now, when you click the Add button, you should see a dialog
    on your screen,  as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/31c08b76-8868-4b45-bd13-093c4a3cf4f5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As you may have noticed, nothing happens when you click the SAVE button. In
    the  `onDialogPositiveClick()` method, add the line of code shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: As we may remember, this line of code displays a ticker at the bottom of the
    screen.
  prefs: []
  type: TYPE_NORMAL
- en: Build and run. Now, when you click the SAVE button on the **New Task** dialog,
    a ticker shows at the bottom of the screen.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9b29319d-b505-4e02-80a7-263b354db26a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We''re currently not storing the task the user enters. Let''s create a collection
    variable to store any task the user adds. In the `MainActivity` class, add a new
    variable of type `ArrayList<String>`, and instantiate it with an empty `ArrayList`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `onDialogPositiveClick()` method, place the following lines of code
    at the beginning of the method definition:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: This will add the task variable passed to the `todoListItems` data, and call
    `notifyDataSetChanged()` on the `listAdapter` to update the `ListView`.
  prefs: []
  type: TYPE_NORMAL
- en: Saving the data is great, but our `ListView` is still empty. Let's go ahead
    and rectify that.
  prefs: []
  type: TYPE_NORMAL
- en: Displaying data in the ListView
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To make changes to a UI element in the XML layout, you need to use the `findViewById()` method
    to retrieve the instance of the element in the corresponding `Activity` of your
    layout. This is usually done in the `onCreate()` method of the `Activity`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `MainActivity.kt`, and declare a new `ListView` instance variable at the
    top of the class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, instantiate the `ListView` variable with its corresponding element in
    the layout. Do this by adding the following line of code at the end of the `onCreate()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: To display data in a `ListView`, you need to create an `Adapter`, and give it
    the data to display and information on how to display that data. Depending on
    how you want the data displayed in your `ListView`, you can either use one of
    the existing Android Adapters, or create your own. For now, we'll use one of the
    simplest Android Adapters, `ArrayAdapter`. The `ArrayAdapter` takes an array or
    list of items, a layout ID, and displays your data based on the layout passed
    to it.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `MainActivity` class, add a new variable, of type `ArrayAdapter`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the method shown here to the class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding lines of code, we create a simple `ArrayAdapter` and assign
    it to the `listView` as its `Adapter`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, add a call to the previous method in the `onCreate()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Build and run. Now, when you click the Add button, you''ll see your entry show
    up on the ListView, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b73860ce-65bb-40f3-abc2-89165565c842.png)'
  prefs: []
  type: TYPE_IMG
- en: Updating/deleting a Todo item
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What if the user made a mistake entering the new task? We need to provide a
    way for them to be able to edit a list item, or completely delete that item. We
    can provide menu items that are only displayed when the user clicks an item. The
    menu items will give the user the opportunity to either edit or delete the item
    in question.
  prefs: []
  type: TYPE_NORMAL
- en: If the user chooses the edit option, we will display our task dialog with the
    task field prefilled for the user to make the required changes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start by adding the following set of strings to the `strings.xml` resource
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: The next thing we need to do is to add a menu to our UI.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a menu
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s start by creating the menu resource file. Right-click the `res` directory,
    and select New | Android resource file. Enter `to_do_list_menu` as the File name.
    Change the Resource type to Menu, and click OK, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3cb43c69-1053-4cae-b5a2-6808d8d04b79.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Replace the code in the `to_do_list_menu,xml` file with the lines of code shown
    as following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding lines of code, we create two menu items, the `edit` and `delete`
    items. We also set the visibility of each of the menu items to `false`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, open the `MainActivity` class and add the following two new variables
    at the top of the class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: The `showMenuItems` variable will be used to track the visibility state of the
    menu items, while the `selectedItem` variable stores the position of the currently
    selected list item.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, override the `onCreateOptionsMenu()` method to enable the menu items
    if the `showMenuItems` variable is set to `true`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, open the `MainActivity` class and add the method shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: When this method is called, it assigns the parameter passed to it to the `selectedItem`
    variable and changes the value of `showMenuItems` to `true`. It then calls the
    `invalidateOptionsMenu()` method. The `invalidateOptionsMenu()` method informs
    the OS that changes have been made to the menu associated with the `Activity`.
    This causes the menu to be recreated.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we need to implement an `ItemClickListener` for the `ListView`. In the `onCreate()` method,
    add the following lines of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: In these lines of code, the `showUpdateTaskUI()` method is called when an item
    is clicked.
  prefs: []
  type: TYPE_NORMAL
- en: 'Build and run again. This time, when you click a list item, the menu items
    will appear, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2cf76359-4b59-403e-b194-4f10618949b7.png)'
  prefs: []
  type: TYPE_IMG
- en: Next, we need to update the `NewTaskDialogFragment` class to accept and process
    the selected task. Open the `NewTaskDialogFragment` class.
  prefs: []
  type: TYPE_NORMAL
- en: 'Update the `newInstance()` method to take an extra parameter of type `String`,
    and pass that parameter as part of the `DialogFragment` arguments by using following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '**Note:** The points of change are the ones labeled with the numbers.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, update the `onCreateDialog()` method to retrieve and display the text
    for the selected task, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we need to implement functionality for when the user selects a menu item.
    This is done by overriding the `onOptionsItemSelected()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding method, the ID of the selected menu item is checked against
    the IDs of the two menu items.
  prefs: []
  type: TYPE_NORMAL
- en: 'If the selected menu item is the edit button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A new instance of the `NewTaskDialogFragment` is generated and shown. In the
    call to generate the new instance, the selected task is retrieved and passed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If it is the `delete` button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The selected item is removed from the `todoListItems`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `listAdapter` is notified of the data change
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `selectedItem` variable is reset to -1
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: And, a ticker is shown notifying the user about the successful deletion
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As you may have noticed, in the call to the `show()` method takes a `String`
    as a second parameter. This parameter is the tag. The tag acts as a sort of ID
    used to differentiate between the different fragments managed by the `Activity`.
    We'll use the tag to decide which action to perform when the `onDialogPositiveClick()` method
    is called.
  prefs: []
  type: TYPE_NORMAL
- en: 'Replace the `onDialogPositiveClick()` method with the method shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding lines of code, the following applies:'
  prefs: []
  type: TYPE_NORMAL
- en: 'If the dialog''s tag is `newtask`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The task variable is added to the `todoListItems` data and the `listAdapter` is
    notified to update the `ListView`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A ticker is also shown to inform the user that the task has successfully been
    added
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If the dialog''s tag is `updatetask`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The selected item is replaced with the task variable in the `todoListItems` data
    set and the `listAdapter` is notified to update the `ListView`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `selectedItem` variable is reset to -1
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: And, a ticker is also shown to inform the user that the task has been successfully
    changed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Build and run. Select a task and click the Edit menu item. This will pop up
    your Edit Task dialog with the selected task''s details already populated, as
    shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2ee0e7cf-f5d4-4785-ab26-c47f20307da4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Make changes to the task details and click on the SAVE button. This takes away
    the dialog, updates your `ListView` with the updated task, and displays a ticker
    with the message, Task updated successfully at the bottom of the screen, as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/20a2ea4c-717a-47f0-9ba3-ac870b49430a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, select a task and click the Delete menu item. This removes the selected
    task and displays a ticker with the message Task deleted successfully at the bottom
    of the screen, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6d91962d-cf20-4d46-ba8a-fceeff7156b7.png)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we built a simple TodoList app that allows a user to add new
    tasks, and edit or delete an already added task. In the process, we learned to
    use ListViews and Dialogs. With the current state of the TodoList app, the data
    resets itself whenever the app restarts. This is not ideal, since a user will
    most likely want to view their old tasks even after restarting the app.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn about the different datastore options available
    and how to use them to make our app more usable. We'll extend the TodoList app
    to persist the user's task into a database.
  prefs: []
  type: TYPE_NORMAL
