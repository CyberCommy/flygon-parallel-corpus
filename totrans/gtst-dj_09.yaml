- en: Chapter 9. Using Sessions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sessions are variables stored by the server according to the user. On many websites,
    it is useful to keep user data as an identifier, a basket, or a configuration
    item. For this, Django stores this information in the database. It then randomly
    generates a string as a hash code that is transmitted to the client as a cookie.
    This way of working allows you to store a lot of information about the user while
    minimizing the exchange of data between the server and client, for example, the
    type of identifier that the server can generate.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Study how session variables work with the Django framework
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learn how to create and retrieve a session variable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Study session variables with a practical and useful example
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Make ourselves aware of the safety of using session variables
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Firebug is a plugin for Firefox. This is a handy tool for a web developer;
    it allows you to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Display the JavaScript console to read errors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Read and edit the HTML code of the page from the browser
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: View the cookies used by the website consulted
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Using Sessions](img/00024.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Cookies realized with Firebug
  prefs: []
  type: TYPE_NORMAL
- en: 'In this screenshot realized with Firebug, we notice that we have two cookies:'
  prefs: []
  type: TYPE_NORMAL
- en: '`sessionid`: This is our session ID. It is with this identifier that Django
    will know with which user it processes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`csrftoken`: This cookie is typical Django. We already spoke about it in the
    chapter about forms. It won''t be used in this chapter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following is a screenshot of the table where session data is stored:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using Sessions](img/00025.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Sessions are very useful, especially for authentication systems. Indeed, in
    many cases, when a user connects to a website, we record their identifier in the
    session variable. Thus, with each HTTP request, the user sends this identifier
    to inform the site about their status. This is also an essential system to make
    the administration module work, which we will see in a later chapter. However,
    sessions have a disadvantage if they are not regularly removed: they take more
    space in the database. To use sessions in Django, the `django.contrib.sessions.middleware.SessionMiddleware`
    middleware must be enabled and the browser must accept cookies.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The life cycle of a session is explained as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The user who does not have any session makes an HTTP request to the website.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The server generates a session identifier and sends it to the browser along
    with the page requested by the user.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Whenever the browser makes a request, it will automatically send the session
    identifier.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Depending on the configuration of the system administrator, the server periodically
    checks if there are expired sessions. If this is the case, it may be deleted.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Using Sessions](img/00026.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Creating and getting session variables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'With Django, storage in a database, generation of the hash code, and exchanges
    with the client will be transparent. Sessions are stored in the context represented
    by the `request` variable. To save a value in a session variable, we must use
    the following syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the session variable is registered, you must use the following syntax
    to recover it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: To use these lines, we have to be sure to interact with the request context.
    Indeed, in some cases, such as CBV, we do not have simple access to the request
    context.
  prefs: []
  type: TYPE_NORMAL
- en: An example – showing the last task consulted
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this example, we will show a practical example of using session variables.
    In general, a developer consults the tasks to be done. He/she selects one task,
    studies it, and then realizes and notes the time spent. We will store the identifier
    of the last task accessed in a session variable, and we will display it at the
    top of the tasks list to be carried out.
  prefs: []
  type: TYPE_NORMAL
- en: 'For this, we will no longer use the `DetailView` CBV to display the details
    of a task, but we will use a real view. First, we must define the URL that will
    allow us to see our view. For this, we will modify the `task_detail` URL with
    the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'We will create our view in the `views/task_detail.py` file with the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'We will then create a list of the tasks with the `ListView` CBV. To do this,
    we must add the following URL to the `urls.py` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The corresponding view for this URL is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'We will then create the template for our list. This example will be complete
    because this list will create, read, update, and delete tasks. The following code
    must be placed in the `tasks_list.html` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'For this example to be complete, we must add the following lines in the `style.css`
    file that we have created:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: These lines are used to highlight the row of the last task consulted.
  prefs: []
  type: TYPE_NORMAL
- en: About session security
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Session variables are not modifiable by the user because they are stored by
    the server, unless if in your website you choose to store data sent by the client.
    However, there is a type of flaw that uses the system session. Indeed, if a user
    cannot change their session variables, they may try to usurp another user session.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will imagine a realistic attack scenario. We are in a company that uses
    a website to centralize e-mails and the schedule of each employee. An employee
    we appoint, Bob, is very interested in one of his colleagues, Alicia. He wants
    to read her e-mails to learn more about her. One day, when she goes to take her
    coffee in the break room, Bob sits at Alicia''s computer. Like all employees,
    he uses the same password to ease administration, and he can easily connect to
    Alicia''s PC. Luckily, the browser has been left open. Besides, the browser periodically
    contacts the server to see if new messages have arrived so that the session does
    not have time to expire. He downloads a tool such as Firebug that allows him to
    read cookies. He retrieves the hash, erases the traces, and returns to his computer.
    He changes the `ID` session cookies in his browser; therefore, he has access to
    all the information about Alicia. Moreover, when there is no encryption, this
    kind of attack can be done remotely in a local network that sniffs network traffic.
    This is called session fixation. To protect ourselves from this kind of attack,
    it is possible to take a few measures:'
  prefs: []
  type: TYPE_NORMAL
- en: Encrypt communications between the server and client with SSL, for example.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ask the user to enter a password before they can access sensitive information,
    such as banking information.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Conduct an audit of the IP address and session number. Disconnect the user if
    he/she changes his/her IP address. Notwithstanding this measure, the attacker
    can perform an IP spoofing to usurp the IP's victim.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we managed to save data related to a user. This data is stored
    for the whole duration of the session. It cannot be modified directly by the user.
  prefs: []
  type: TYPE_NORMAL
- en: We also studied the safety sessions. Keep in mind that a user session can be
    stolen by an attacker. Depending on the size of the project, it is necessary to
    take measures to secure the website.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn how to use the authentication module. It
    will allow us to create users and restrict access to certain pages to the logged-in
    users.
  prefs: []
  type: TYPE_NORMAL
