- en: Chapter 8. Adapting Your HTML5 Game to the Distribution Channels
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When your game is finally ready for the entire world to see, it is time to consider
    the possible distribution channels. Do you want people to play your game in their
    browser on a website or as a web app? Maybe you want them to play it with a tablet
    or smartphone, either in a browser or as an app. In this chapter, we will look
    into several of those different options and what needs to be done for a successful
    implementation.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, you will learn:'
  prefs: []
  type: TYPE_NORMAL
- en: Preparing your game for the web browser
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Making adaptations for mobile web browsers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Releasing your game as a Google Chrome web app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Turning the game into an Android app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Making your game playable on Facebook
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing AppMobi's direct canvas
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Preparing your game for the web browser
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You have been testing your game in a web browser during development. So what
    is the difference between your local server and a public or production server?
  prefs: []
  type: TYPE_NORMAL
- en: 'Just before releasing your game to the public, you will need to bake it. **Baking**
    the game is not more than compressing the code. This has two advantages:'
  prefs: []
  type: TYPE_NORMAL
- en: Compressed code will load faster into the browser than uncompressed code. A
    shorter loading time is always a big advantage, especially for people who play
    your game for the first time. These people don't know yet that your game is extremely
    awesome and don't want to waste time looking at a loading bar.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The baked code is also harder to read. All your different modules, neatly ordered
    in separate files, are now in a single file together with the ImpactJS engine.
    This makes it harder for the average Joe to just copy and paste your precious
    source code from the browser and use it in his or her own games. However, it doesn't
    protect against people who really know what they are doing; the code does not
    become encrypted, just compressed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The tool for baking your game comes with the ImpactJS engine you have downloaded.
    In the `tools` folder in your game''s `root` directory, you should have four files:
    `bake.bat`, `bake.php`, `bake.sh`, and `jsmin.php`. Follow the following steps
    to bake your game:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `bake.bat` file with a text editor and you will find the following
    line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Change `php` to the directory of your `php.exe` file in your XAMPP or WAMP
    server. For a default XAMPP installation, this line will now look as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Save and close the `bake.bat` file and double-click on it to run it. On Windows,
    a command window will open and a `game.min.js` script will be created in your
    game's `root` directory, as shown in the following screenshot:![Preparing your
    game for the web browser](img/4568_8_1.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `game.min.js` script now contains all our code. All we need to do now is
    change the `index.html` file in our game's `root` directory so it looks for `game.min.js`
    instead of the `impact.js` and `main.js` scripts.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `index.html` file and find the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Replace the previous code by our new compact version of the code, as shown
    in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: You can now strip your game's folder of all code files except for `index.html`
    and `game.min.js` and upload it to your server. If you bought your own web space,
    you can use free FTP programs such as **FileZilla** to do this.
  prefs: []
  type: TYPE_NORMAL
- en: Our game is now ready for distribution and by loading it to the web server,
    you would already have it available for anyone out there. However, we did not
    yet take into account browsers on mobile devices. Before we look into that, let
    us quickly recap.
  prefs: []
  type: TYPE_NORMAL
- en: 'Summing up the preceding content, the conclusions are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Before releasing our game to the public, we should bake it. Baking a game is
    basically compressing the source code. Baking has two big advantages:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The game is loaded into the browser more quickly.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The code becomes harder to read, thus making it less vulnerable to theft. However,
    the code is not encrypted making it still pretty easy for a dedicated person to
    undo the baking.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In order to bake the game, we change the `bake.bat` file before we run it. This
    process creates a `game.min.js` script.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We include `game.min.js` in our `index.html` file instead of `main.js` and `impact.js`
    before uploading our game to a server.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Preparing our game for mobile web browsers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you have taken into account the possibility of people using their smartphones
    to play your game, you''ve implemented touch screen controls. An example of this
    can be found in [Chapter 5](ch05.html "Chapter 5. Adding Some Advanced Features
    to Your Game"), *Adding Some Advanced Features to Your Game*. However, sometimes
    this is not enough. You want the player to be able to do the same with his/her
    smartphone as he would with his/her computer. To make this happen, we can introduce
    **virtual buttons** . These virtual buttons are areas on the screen which will
    act as if they are regular keyboard keys. We can create these using **CSS** (**Cascading
    Style Sheets**) code in the `index.html` file. We can have buttons for every action
    our player does. In our RPG, he needs to be able to walk in all directions and
    shoot. In the side scroller game, he can move left or right, fly, and shoot. Let''s
    assume we separate flying from moving upwards. The following screenshot shows
    our button tilesheet:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Preparing our game for mobile web browsers](img/4568_8_2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Following are the steps to create our virtual buttons:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `index.html` file and add the following code below the CSS code for
    the canvas. If you use the `index.html` file provided with examples of the ImpactJS
    engine, this file should already include the following style code for the canvas.
    Also the `index.html` files from both the games in [Chapter 3](ch03.html "Chapter 3. Let''s
    Build a Role Playing Game"), *Let''s Build a Role Playing Game* and [Chapter 4](ch04.html
    "Chapter 4. Let''s Build a Side Scroller Game"), *Let''s Build a Side Scroller
    Game* contain the following CSS code for canvas:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: First we define our full button pallet. It has a height of 32 pixels and a width
    of 192 pixels (six buttons, each 32 pixels wide).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Within this button, we can define the six different parts separately. Here you
    can see the CSS code for the left button. The other five buttons use the exact
    same code except for their background position since this is their location on
    the `iphone-buttons.png` image. So, for instance, for the left button the location
    is `-32`, for the right button this would be `0`, and for the up button it is
    `-64` as it is third in row. The `webkit` commands are there to keep the layout
    neat, as intended. If these commands are not supplied, the user could unintentionally
    change the zoom or colors by tapping the screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'However, we only want our buttons to show on mobile devices. So let''s control
    that with a short piece of JavaScript code in our `index.html` file, as shown
    in the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: In the first part of this script, we define the local variable `isMobile`. It
    is set to `true` if a mobile device is detected, if not it is set to `false`.
    In the second part, we set the visibility of our CSS objects to `visible` if `isMobile`
    is `true`. Remember that their visibility was set to `hidden` when we created
    them in the CSS part of `index.html`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'All that remains to do within our `index.html` file is adding these buttons
    as the `<div>` elements next to our `canvas` element, as shown in the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The `index.html` file now has buttons which will only show when a mobile device
    is detected, but it doesn't make our game ready for this just yet. For this, we
    need to adapt our `main.js` script.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `main.js` and add the following code to your `init()` method of your `game`
    instance:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: If a mobile device is detected, the virtual buttons are bound to a game input
    state. So, for instance, the `<div>` element `buttonLeft` will be bound to the
    input state `Left`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The code within the `else` statement turns on the background music if you would
    have that. As addressed in [Chapter 6](ch06.html "Chapter 6. Music and Sound Effects"),
    *Music and Sound Effects*, some mobile devices don't allow sounds to overlap.
    So, for mobiles, it is wise to turn off the background music so it would not overlap
    with other sound effects. This will probably not remain an issue forever, but
    for now it is wise to take into account these sound issues.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We will also need to adapt our canvas size so that it fits on the screen of
    the smartphone or iPad. Replace the default canvas call:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Use the following code to replace the default canvas call:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: All this does is initialize the game with different canvas sizes so that it
    fits on smaller screens like those of iPads (or other tablets) and smartphones.
    In addition, the intro screen is skipped here; this is a choice and you could
    leave it in a mobile. Also you could adapt the canvas size for more devices. Here
    it is shown only for iPad and all other mobile devices, but of course more differentiation
    is possible.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Hurray! Your game is now ready for mobile! Don't forget to bake it before putting
    it online; mobile Internet is not as fast as regular Wi-Fi so making your file
    smaller definitely counts here.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we are going to take a look at making a mobile web app for the **Chrome
    Web Store** but first let's quickly recap how to prepare our game for mobile browsers.
  prefs: []
  type: TYPE_NORMAL
- en: 'Summing up the preceding content, the conclusions are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: If we want our players to have a good game experience on mobile devices, we
    need to adapt our game interface to accommodate this. We do so by adding virtual
    buttons.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The visual aspect of the virtual buttons is created using CSS and an image file
    in the `index.html`. We can make the buttons visible or hidden, depending on whether
    the game is played on a mobile device or not.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In our game's `main` script, we need to bind these buttons to game action states
    in order to get the same functionalities going as with a keyboard.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Additionally, we can change the game screen resolution and size so it fits better
    on the device the player uses.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Turning the game into a web app for the Google Chrome Web Store
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A web app is an app which runs in the browser itself, not on the operating
    system of a mobile device. To release a web app on the Google Chrome Web Store,
    you need a Google Chrome developer account, which comes at a $5 one-time fee.
    You will need a Google webmaster account to confirm the ownership of a link Google
    provides you with. Also, not to make things harder than they need to be, it is
    wise to get a free AppMobi account. You can do this on their website: [http://www.appmobi.com](http://www.appmobi.com).
    AppMobi is a very interesting beginners'' tool for three main reasons:'
  prefs: []
  type: TYPE_NORMAL
- en: They simplify the process to push games to several different distribution channels.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: They charge nothing for the first 10,000 users of your app or game, allowing
    you to first make money before they ask you to cut them a slice of the cake; a
    very attractive pricing scheme indeed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The ImpactJS XDK (cross-environmental development kit) helps adapting the game
    to different mobile devices by creating artificial viewports. It contains many
    other useful functionalities such as the simulation location detection.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'AppMobi facilitates building a version of your game for the following platforms:
    iOS, Android, AppUp, Amazon, Nook, Facebook, Chrome, Mozilla, and hostMobi (their
    own cloud host service).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once subscribed, you can install their ImpactJS XDK for development. On installing
    the XDK, it becomes easily accessible in your Chrome browser with a plugin icon
    next to your address bar, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Turning the game into a web app for the Google Chrome Web Store](img/4568_8_3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'You can log in on the appHub: the AppMobi control panel to access all their
    services. What will be of particular interest to us now is building a Google Chrome
    game. Following are the steps to build a Chrome game:'
  prefs: []
  type: TYPE_NORMAL
- en: On first login, you will need to add a new game to your control center by clicking
    on the button shown in the following screenshot:![Turning the game into a web
    app for the Google Chrome Web Store](img/4568_8_4.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Give your game a name and upload it in a zipped format to the server, as shown
    in the following screenshot:![Turning the game into a web app for the Google Chrome
    Web Store](img/4568_8_5.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will see the different distribution channels for which AppMobi allows you
    to prepare a file, as shown in the following screenshot:![Turning the game into
    a web app for the Google Chrome Web Store](img/4568_8_6.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Before we can build ourselves a Chrome `ready` file, we will need to promote
    our file to production by pressing the **PROMOTE** button, as shown in the following
    screenshot:![Turning the game into a web app for the Google Chrome Web Store](img/4568_8_7.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We want to build a game for Chrome, so check out the issues you still have.
    Chances are you will only need to add an icon for the game. But you do this just
    before building the game, as shown in the following screenshot:![Turning the game
    into a web app for the Google Chrome Web Store](img/4568_8_8.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If all goes well, you should be able to download a `production` file which you
    then need to upload to the Chrome Web Store using the button shown in the following
    screenshot:![Turning the game into a web app for the Google Chrome Web Store](img/4568_8_9.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It is almost time to upload the file to the Chrome Web Store. However, before
    doing so, open the zipped folder you just downloaded from the AppMobi website
    and make sure the name of the Chrome icon is exactly the same as is stated in
    the `manifest.json` file added by AppMobi. This has been a known issue and Chrome
    will not accept inconsistent naming.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you upload for the first time, you will receive a message saying you need
    to verify ownership of a domain Google provides you with. To do this, you must
    insert the tagged HTML file Google allows you to download into the bundle you
    first uploaded to AppMobi and reupload your game to AppMobi, this time with the
    verification file inside the zipped bundle. In AppMobi, use the **UPDATE QA**
    button to upload a new file. Also don't forget to promote to production afterwards.![Turning
    the game into a web app for the Google Chrome Web Store](img/4568_8_10.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Google webmaster tool, you add the link provided by Google and verify
    it, as shown in the following screenshot:![Turning the game into a web app for
    the Google Chrome Web Store](img/4568_8_11.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can now reupload to the Chrome Web Store and fill out all the necessary
    elements. You will need to add a detailed description of your game, the pricing
    scheme, and screenshots using the button shown in the following screenshot:![Turning
    the game into a web app for the Google Chrome Web Store](img/4568_8_12.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If all goes well, you will be able to beta test your game as a web app as it
    becomes available for you to add to your Google Chrome. If things go wrong, AppMobi
    has an abundance of documentation on their services and information on how to
    use them.
  prefs: []
  type: TYPE_NORMAL
- en: We now have a web app, but we can go through roughly the same process in order
    to get a real app. In this book, we will take the example of Android. Before doing
    so, let's quickly recap.
  prefs: []
  type: TYPE_NORMAL
- en: 'Summing up the preceding content, the conclusions are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: A web app is an app which is run in the browser instead of directly on the operating
    system of a device. Google Chrome has such web apps available in its Google Chrome
    Web Store. Publishing in the store requires a $5 one-time subscription fee.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AppMobi provides an easy way to build web apps and apps in general. Registration
    is free, but needs to be paid for once a game reaches a certain amount of success.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The baked game needs to be zipped and uploaded to the AppMobi server. Here it
    will be adapted by AppMobi and you can download it again to upload it to the Chrome
    developer account.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Google provides you with a link you need to reupload to AppMobi and verify with
    a Google webmaster account.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Once the link is verified, you can reupload your game to the Web Store and fill
    out details such as the game description.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can test your game in the browser before submitting it for review and releasing
    it to the public.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pushing your game to Android's Google play store
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we know how to build a web app, let''s build an actual mobile app
    for the **Google play** store. Once again, we will make use of our AppMobi account
    to get the job done. However, in addition, you will need a Google developer account,
    priced at $25 per year, for publishing your game in the Google play store. Following
    are the steps to push your game to the Google play store:'
  prefs: []
  type: TYPE_NORMAL
- en: Use the `Upload game` package uploaded to the **AppMobi appHub** or upload a
    new one.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Choose **Build** under the **Android** tab and fix any issues you still have.
    If you succeeded in building the Chrome store web app, there should be only one
    issue left: setting up Google cloud messaging. For this, you need a **Google Project
    ID** and an **API key**; you need to get both from your developer account.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Sign up for a developer account at [https://play.google.com/apps/publish/signup](https://play.google.com/apps/publish/signup)
    or log in if you already have one.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to your **Google apis** console and create a new project. You will be able
    to choose your project ID from [https://code.google.com/apis/console/](https://code.google.com/apis/console/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enable **Google Cloud Messaging for Android** in the **Services** section, as
    shown in the following screenshot:![Pushing your game to Android's Google play
    store](img/4568_8_13.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose **create a new server key** in the **API Access** section of the control
    center. After creating a new server, you also receive the API key.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Return to the AppMobi appHub where you fill out both the project ID and the
    API key. You have now set up push messaging. The following screenshot shows the
    screen after completion of push messaging setup:![Pushing your game to Android's
    Google play store](img/4568_8_14.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Your app should now be ready to build. Do so and download the `apk` file by
    clicking on the **BUILD NOW** button, as shown in the following screenshot:![Pushing
    your game to Android's Google play store](img/4568_8_15.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: All you need to do now is upload this file to your developer console. Google
    will require you to fill out a name, description, and add some screenshots. When
    this is done, you are all set to go.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'A word of advice before sending your app for play store review: test on several
    mobile devices whether the `build` file you downloaded from AppMobi works fluently.
    This can be done by uploading your file to your own website and downloading it
    with your smartphone. Alternatively, you can use free cloud storage services such
    as **Dropbox** to transfer the file from the cloud to any device on which you
    want to test.'
  prefs: []
  type: TYPE_NORMAL
- en: Now we have built both an app and a web app, we will dive into a way to publish
    your game on **Facebook**. Before doing so, let us quickly recap.
  prefs: []
  type: TYPE_NORMAL
- en: 'Summing up the preceding content, the conclusions are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Building an app with AppMobi is almost the same process as building a web app.
    However, in order to publish your game as an app, you will need a Google developer
    account, priced at $25 per year.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Upload your compressed `game` file to AppMobi appHub if you haven't already.
    Make sure to receive a project ID and API key from Google apis.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Build your `android` file and upload it to your developer account where you
    can send it in for review. However, before doing so, be sure to test your game
    on a few Android mobile devices.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Making your game available on Facebook
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'AppMobi could be used to build a Facebook app but Facebook also allows another
    option of showing your game. You will need a Facebook developers account to go
    with your Facebook account. There is currently no subscription fee. You can go
    to the following link to get your Facebook developers account:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://developers.facebook.com](http://developers.facebook.com)'
  prefs: []
  type: TYPE_NORMAL
- en: If you already have your game up and running on your own website, Facebook allows
    you to set a viewport to the game on your website.
  prefs: []
  type: TYPE_NORMAL
- en: 'Following are the steps to make your game available on Facebook:'
  prefs: []
  type: TYPE_NORMAL
- en: In the app section of your account, create a new app by clicking on the following
    button:![Making your game available on Facebook](img/4568_8_16.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Fill out the **App on Facebook** section, as shown in the following screenshot.
    If your game can also be viewed by mobile devices, you can also fill out the **Mobile
    Web** section. Make sure **sandbox mode** is on until you have tested everything
    thoroughly.![Making your game available on Facebook](img/4568_8_17.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Go to the **App Details** page where you need to fill out some basic information
    about your game: category, description, and some screenshots. Once you are ready,
    you can preview your game by clicking on one of the following buttons:![Making
    your game available on Facebook](img/4568_8_18.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Try going back to your own profile page and you will find your game in your
    applications list, as shown in the following screenshot. Click on it to play and
    beta test your own Facebook game.![Making your game available on Facebook](img/4568_8_19.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This is not the only way to send your game to Facebook. You can make an actual
    Facebook app using AppMobi. However, once your game is finished and somewhere
    on a web server, this is a very quick way to get it on Facebook. There is also
    a big advantage to this method: the game remains on a server controlled by you,
    Facebook merely provides a viewport. This means that if Facebook changes things,
    this has little or no effect on compatibility with your game and you will not
    be pressed to change code anywhere.'
  prefs: []
  type: TYPE_NORMAL
- en: As a last topic of this chapter, we will have a quick look at the direct canvas
    implementation of AppMobi. This is an interesting concept since it allows for
    games to run much faster than they would otherwise. However, first let's recap.
  prefs: []
  type: TYPE_NORMAL
- en: 'Summing up the preceding content, the conclusions are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: There are several ways to bring your game to Facebook. Since we have already
    used AppMobi to build apps, we investigate the viewport solution.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You need your game to be up and running on a server and a free Facebook developers
    account.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Go to the **App** section and create a new app with normal canvas and/or mobile
    URL. Also fill out all the app details.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Beta test your game thoroughly before releasing it. You can find your game between
    the applications in your own personal Facebook page.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Direct canvas game acceleration with AppMobi
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: HTML5 games are great because the HTML and JavaScript can be interpreted by
    any browser and conversion to an app is rather straightforward. The easy "deployability"
    is a great advantage, but it comes with a rather big disadvantage. The resources
    taken by the canvas element in order to actually render your game can be outrageous,
    easily resulting in system lag once you want to use many entities at once. There
    are few things worse to the game experience than such a large drop in frame rate,
    it becomes like watching a slide show. However, there are tricks to improving
    this such as prerendering the graphics as suggested in [Chapter 7](ch07.html "Chapter 7. Graphics"),
    *Graphics*.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to make use of the performance boost that direct canvas provides,
    the implementation is rather straightforward. However, first you will need to
    prepare your code for the AppMobi ImpactJS XDK. Following are the steps to implement
    direct canvas acceleration:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to the Chrome Web Store and install the Impact XDK extension.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the XDK, log in to your AppMobi account and add a new project. Choose your
    game's `root` folder in your XAMPP (or WAMP) library. The following screenshot
    shows the button to start a new project:![Direct canvas game acceleration with
    AppMobi](img/4568_8_20.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The XDK will warn you that you have not yet included the AppMobi library in
    your game and you will not be able to make use of the AppMobi commands. Copy the
    code shown in the following screenshot to your clipboard, as suggested by the
    pop-up:![Direct canvas game acceleration with AppMobi](img/4568_8_21.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open your `index.html` file and paste the script in the `head` section of the
    document. Your game is now ready to be viewed in the Impact XDK and you can add
    AppMobi commands to it when necessary, as shown in the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: We now have our game running in the XDK. However, we do not yet have direct
    canvas acceleration.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new script called `index.js` in your game''s `root` folder and add
    the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Open `index.html` and add the `AppMobi` command to the `onDeviceReady()` event
    listener. The following code will load the `index.js` script:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Remove the following `script` tags that include your game and impact engine
    scripts:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Remove the following `canvas` element:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Open `main.js` script and add the following to the list of required scripts:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'If you have any reference to canvas styling, remove it from your code. For
    example: `ig.system.canvas.style.width = ''320px''`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Finally, remove the touch event bindings you might have implemented when preparing
    the touch events for mobile and replace them with the AppMobi versions. The `<div>`
    elements can stay in the `index.html` file, but you need to attach other events.
    For instance, for the `shoot` button`<div>` element:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Congratulations! You have now successfully implemented direct canvas acceleration!
    You might notice that the canvas element outline is now gone when playing your
    game in the Impact XDK, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Direct canvas game acceleration with AppMobi](img/4568_8_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The goal of this chapter was to provide insight into the technical preparations
    necessary when publishing your game in several ways. First we took a look at the
    process of baking your game code, which allows for shorter loading times and makes
    the source code less readable. Baking should be done right before distributing
    any game. Then we went deeper into adapting your game for mobile browsers by implementing
    touch controls. Turning the game into a web app or an Android app was done with
    the help of AppMobi. When publishing to Facebook, you have several options and
    we took a deeper look at one of them. In this solution, your own website acts
    as the actual platform while Facebook merely provides a viewport. On mobile devices,
    processing power and memory usage can be real issues when running a game. Therefore,
    we took a look at the direct canvas implementation of AppMobi. By getting rid
    of the normal HTML canvas element, a lot of overhead processing can be eliminated,
    greatly reducing the necessary resources.
  prefs: []
  type: TYPE_NORMAL
- en: In the next and final chapter, we will have a look at the options you have as
    an HTML5 game developer to make money and hopefully turn a hobby into your job.
  prefs: []
  type: TYPE_NORMAL
