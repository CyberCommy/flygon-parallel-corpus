- en: Chapter 5. Highlighting Results Using PHP and Solr
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'One of the advanced functionalities that Solr provides is highlighting the
    matched keywords in the results returned for a search. In addition to the highlighted
    matches, it is also possible to specify the number of highlighted snippets that
    we want Solr to return per field. In this chapter, we will be exploring all the
    highlighting functionalities of Solr using PHP and the Solarium library. The topics
    that we will cover are:'
  prefs: []
  type: TYPE_NORMAL
- en: Solr highlighting configuration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Highlighting in Solr using PHP and Solarium
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using different highlighting tags for different fields
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Highlighting using the fast vector highlighter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The field on which highlighting is required has to be stored in Solr.
  prefs: []
  type: TYPE_NORMAL
- en: Solr highlighting configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Solr has two types of highlighters—**regular highlighter** and **fast vector
    highlighter**. The regular highlighter works on most query types but does not
    scale well to large documents. On the other hand, the fast vector highlighter
    scales very well to large documents but supports fewer query types. Though personally
    I have not come across a situation where the fast vector highlighter does not
    work.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The fast vector highlighter requires `termVectors`, `termPositions`, and `termOffsets`
    to be set for it to work.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let us look at the Solr configuration for highlighting. Open up the Solr configuration
    at `<solr_directory>/example/solr/collection1/conf/solrconfig.xml`. Search for
    an XML element `searchComponent` with attribute `class="solr.HighlightComponent"`
    and `name="highlight"`. We can see that there are multiple **fragmenters**, an
    HTML **formatter**, and an HTML **encoder** defined in the file. We also have
    multiple `fragmentsBuilders`, multiple `fragListBuilders` and multiple `boundaryScanners`
    defined as explained in the following list:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Fragmenter:** It is the text snippet generator for highlighted text. The
    default fragmenter is a gap that is marked by `default="true"`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Formatter**: It is used to format the output and specifies the HTML tags
    to be used to highlight the output. The tags are customizable and can be passed
    in the URL.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**fragListBuilder:** It is used with `FastVectorHighlighter` only. It is used
    to define the size (in characters) of snippets created by the highlighter for
    `FastVectorHighlighter`. The default `fragListBuilder` is `single`, which can
    be used to indicate that the whole field should be used without any fragmenting.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**fragmentsBuilder**: It is used with `FastVectorHighlighter` to specify tags
    to be used for highlighting. It can be overwritten by using `hl.tag.pre` and `hl.tag.post`
    parameters.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**boundaryScanner**: It defines how boundaries are determined for `FastVectorHighlighter`
    only. The default `boundaryScanner` defines the boundary characters as `.,!?\t\n`
    and space.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'More details about highlighting parameters can be obtained from the following
    URL : [https://cwiki.apache.org/confluence/display/solr/Standard+Highlighter](https://cwiki.apache.org/confluence/display/solr/Standard+Highlighter)'
  prefs: []
  type: TYPE_NORMAL
- en: Highlighting in Solr using PHP and Solarium
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let us try regular highlighting using PHP. Search for `harry` in our index
    and highlight two fields—`name` and `series_t` as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'First get the highlighting component from the following query:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Set fields we want to highlight using the following query:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Set the highlighting HTML tags as bold using the following query:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Set the maximum number of highlighted snippets to be generated per field. In
    this case any number of highlighted snippets from 0 to 2 can be generated as shown
    in the following query:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Set the size in characters of fragments to consider for highlighting. 0 uses
    the whole field value without any fragmentation as shown in the following query:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Set the `mergeContiguous` flag to merge contiguous fragments into a single
    fragment as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Set `highlightMultiTerm` flag to enable highlighting for range, wildcard, fuzzy,
    and prefix queries as shown in the following query:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the query is run and the result-set is received, we will need to retrieve
    the highlighted results from the result-set with the following query:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'For each document in the result-set, we will need to get the highlighted document
    from the highlighted result-set. We will need to pass the unique ID as identifier
    in the `getResult()` function to get the highlighted document as shown in the
    following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Here the highlighted fields for each document, which we obtain using the `getField()`
    method, function is returned as an array. This is why we have to implode it before
    display. We can see that in the output the fields are highlighted using the bold—`<strong>`
    and `</strong>` tags.
  prefs: []
  type: TYPE_NORMAL
- en: 'In Solr logs, we can see all the parameters that we have specified in our PHP
    code as given in the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The parameter passed to enable highlighting is `hl=true` and the fields to be
    highlighted is specified as `hl.fl=name,series_t`.
  prefs: []
  type: TYPE_NORMAL
- en: Using different highlighting tags for different fields
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can use different highlighting tags for different fields. Let us highlight
    `name` with a `bold` tag and `series` with an `italics` tag. Set the `per` field
    tag in our code as shown in the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The output shows that field `name` is highlighted with a bold tag whereas the
    field `series` is highlighted with an italics tag as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using different highlighting tags for different fields](graphics/4920_05_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Highlighting different fields with different tags.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can also use the `setQuery()` function to set a separate query for highlighting
    results other than the normal query. In the earlier program, let us change the
    highlighting to happen on `harry potter` on the search for `harry` as shown in
    the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'On checking Solr logs it is seen that the query to be used for highlighting
    is passed as `hl.q` parameter to Solr as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Highlighting using the fast vector highlighter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let us change the `schema.xml` and enable **termVectors**, **termPositions**,
    and **termOffsets** for two fields `name` and `*_t` (this will match all fields
    ending with `_t`-`series_t`).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Restart Tomcat. Based on your system (Windows or Linux) and the type of installation,
    the mechanism to restart Tomcat will differ. Kindly check the Tomcat documentation
    for your system to restart Tomcat.
  prefs: []
  type: TYPE_NORMAL
- en: 'Since the schema is now changed, we will need to re-index all the documents
    that we had indexed in [Chapter 2](ch02.html "Chapter 2. Inserting, Updating,
    and Deleting Documents from Solr"), *Inserting, Updating and Deleting Documents
    from Solr*. Also index the `books.csv` file from this chapter. In code, enable
    fast highlighting and set the `fragmentsBuilder` (HTML tags) to be used for highlighting
    as shown in the following queries:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'In the output we can see that `harry` is highlighted. To change the default
    highlighting, we need to add a new **fragmentsBuilder** in the `solrconfig.xml`
    file. Go through the `solrconfig.xml` file and search for the tag `fragmentsBuilder`
    with the name colored. This has two attributes—`hl.tag.pre` and `hl.tag.post`.
    We can specify the pre and post tags for fast vector highlighting here. Create
    a new `fragmentsbuilder` after it with the name `fasthl` as shown in the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Restart Tomcat and change the PHP code to use this new `fragmentbuilder` for
    highlighting as given in the following query:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: The output now will contain `harry` highlighted in a light blue color.
  prefs: []
  type: TYPE_NORMAL
- en: 'It is also possible to change the highlighting tags at runtime using `setTagPrefix()`
    and `setTagPostfix()` function. In the following code, we are changing the tags
    for fast vector highlighting to lime colored in our code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: The configuration file is used to set default highlighting tags. And the tags
    can be changed at runtime using PHP function calls for formatting purposes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are some additional functions available in Solarium that can be used to
    suit highlighting to your requirements:'
  prefs: []
  type: TYPE_NORMAL
- en: '`setUsePhraseHighlighter(boolean $use)`: Set `true` to highlight phrase terms
    only when they appear within the query phrase in a document. Default is `true`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`setRequireFieldMatch(boolean $require)`: Set `true` to highlight a field only
    if the query matched in this particular field. By default this is false and so
    terms are highlighted in all requested fields regardless of which field matched
    the query. Requires `setUsePhraseHighlighter(true)`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`setRegexPattern(string $pattern)`: It is used in regular highlighter only.
    Used to set regular expression for fragmenting.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`setAlternateField(string $field)`: If none of the terms match and no snippet
    could be generated, we can set an alternate/fallback field to be used to generate
    snippets.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`setMaxAlternateFieldLength(int $length)`: It is used only when the alternate
    field is set. It specifies the maximum number of characters of the alternate field
    to return. The default is `unlimited`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We saw how to ask Solr for highlighted search results using PHP code. We saw
    the regular and fastvector highlighter. We saw the functions and parameters used
    to change the highlighting tags for both regular and fastvector highlighter. We
    also went through some functions and Solr configuration and schema changes to
    tweak highlighting and the generated snippets.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will go in depth on the scoring mechanism. We will explore
    the debug and stats component, which will enable us to improve relevance ranking
    and get statistics information from the index respectively.
  prefs: []
  type: TYPE_NORMAL
