- en: C# with LINQ and Custom Data Types
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will talk about using LINQ with custom types.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: Adding a Show People button to the HTML
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Bring up a project. Go to `Default.aspx`, and below the line that begins with
    `with <form id=...`, put in a button. To do this, go to the Toolbox, grab a `Button`
    control, and drag it in there. Change the text on the button to say Show People:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Setting up a database
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will have a database, we will query it, and we will show people who have,
    for example, a certain letter in their names, make a certain amount of money,
    and sort it in a certain way.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: 'To accomplish this, go to the Design view, and double-click on the Show People
    button. This takes us into `Default.aspx.cs`. Delete the `Page_Load` block. The
    relevant portion of the starting code for this project should look like *Figure
    10.5.1*:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2d58bd36-b314-4537-8214-4ccc5824453c.png)'
  id: totrans-8
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10.5.1: The starting code section for this project'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: 'In the next stage, first go to the top of the file, and enter the following
    after `using System`:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Next, we''ll make a class. We''ll call it `Person`. So, above the line beginning
    with `public partial class...`, insert the following:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Making a custom type using LINQ
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, between the set of curly braces below the preceding line, you will declare
    two auto properties, as follows:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Then, to make a constructor, enter the following below these lines:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Next, you will set the values of the properties inside the constructor. So,
    enter the following between a set of curly braces below these lines:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This is our simple custom type, `Person`, with two automatic properties in a
    parameterized constructor.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: Setting up an array of people
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the next stage, you''ll make an array of people; enter the following between
    a set of curly braces below the line beginning with `protected void Button1_Click....`:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Querying the array
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, to query this, enter the following below this line:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'As you type, notice that `IEnumerable` doesn''t show up, so you''ve got to
    go to the top of the file again and enter the following after `using System.Linq`:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Now let's make use of this down below; so, underneath the line beginning with
    `Person[] people...`, enter the line `IEnumerable<Person>...` stated earlier.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: Here, `Person` is a type of object that can be enumerated from the list of people.
    `peopleWithN` indicates that we'll be searching for people who have an `n` letter
    in their name. In fact, the code searches for people whose name ends with `n`.
    (Note that `per` stands for each person inside the list.) Further, we sort by
    salaries in descending order.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: Because people sometimes type information inconsistently, you first have to
    convert everything to the equivalent case, but this is something for you to figure
    out on your own.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: Remember, in this line we have `people`, which is the name of some kind of object,
    and `Where`, an extension method, followed by a Lambda. Next, we use `OrderByDescending`,
    which you can select that from the list of methods, to order values, such as a
    person's salary, in descending order.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: 'So, the purpose of this line is to choose each person whose name ends with
    `n`, and then order the results by salary. This yields an `IEnumerable` object,
    and now you can step through it, of course, and say the following in the next
    line:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Now, to print it all, enter the following between a set of curly braces below
    this line:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Here, we put the `Name` variable first, and the `Salary` variable formatted
    as Currency.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: Running the program
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This is the heart of our program. Crank it up in your browser. Click on the
    Show People button, and the results are displayed, as shown in *Figure 10.5.2*:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a9234352-3698-4fc1-90db-62a81ef03f17.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10.5.2: The results of running the program'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: So, Joan makes $87,656.00 and John makes $76,877.00\. They were selected because
    both of them have names ending in a lowercase **n**, as you can see, and then
    it's sorted by salary in descending order. So, it's working as expected. As you
    can see, you can also define custom types, such as the one within curly braces
    below `public class Person`, using LINQ. It is very powerful and works well.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，琼赚了$87,656.00，约翰赚了$76,877.00。他们被选中是因为他们的名字都以小写字母**n**结尾，正如您所看到的，然后按工资降序排序。所以，它的运行结果符合预期。正如您所看到的，您还可以使用LINQ定义自定义类型，比如在`public
    class Person`下面的花括号中。它非常强大并且运行良好。
- en: Chapter review
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 章节复习
- en: 'For review, the complete version of the `Default.aspx.cs` file for this chapter,
    including comments, is shown in the following code block:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 为了复习，包括注释在内的本章的`Default.aspx.cs`文件的完整版本如下所示：
- en: '[PRE11]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Summary
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we talked about using LINQ with custom types. You set up a
    database, made a custom type using LINQ, set up an array of people, and queried
    the array.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了如何将LINQ与自定义类型一起使用。您设置了一个数据库，使用LINQ创建了一个自定义类型，设置了一个人员数组，并对数组进行了查询。
- en: In the next chapter, you will learn how to write queries using query syntax.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，您将学习如何使用查询语法编写查询。
