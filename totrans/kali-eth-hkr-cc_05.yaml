- en: Network Exploitation on Current Exploitation
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 当前利用的网络利用
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下教程：
- en: Man in the middle with hamster and ferret
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 仓鼠和雪貂的中间人
- en: Exploring the msfconsole
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索msfconsole
- en: Using the paranoid meterpreter
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用偏执的meterpreter
- en: A tale of a bleeding heart
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个流血的故事
- en: Redis exploitation
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Redis利用
- en: Say no to SQL – owning MongoDBs
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对SQL说不-拥有MongoDB
- en: Embedded device hacking
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 嵌入式设备黑客
- en: Elasticsearch exploit
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Elasticsearch利用
- en: Good old Wireshark
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 老牌的Wireshark
- en: This is Sparta!
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这就是斯巴达！
- en: Introduction
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: Exploiting networks is often a technique that comes in handy. A lot of times,
    we may find that the most vulnerable point in a corporate is in the network itself.
    In this recipe, you will learn about some of the ways in which we can pentest
    a network and successfully exploit the services we find.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 利用网络通常是一个很有用的技术。很多时候，我们可能会发现企业中最脆弱的地方就在网络本身。在这个教程中，您将了解一些我们可以对网络进行渗透测试并成功利用我们发现的服务的方法。
- en: Man in the middle with hamster and ferret
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 仓鼠和雪貂的中间人
- en: Hamster is a tool that can be used for sidejacking. It acts as a proxy server,
    while ferret is used for sniffing cookies in the network. In this recipe, we will
    look at how to hijack some sessions!
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 仓鼠是一个用于侧面劫持的工具。它充当代理服务器，而雪貂用于在网络中嗅探cookie。在这个教程中，我们将看看如何劫持一些会话！
- en: Getting ready
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 做好准备
- en: Kali already has the tool preinstalled, so let's see how to run it!
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Kali已经预装了这个工具，让我们看看如何运行它！
- en: How to do it...
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Hamster is extremely easy to use and comes with a UI too. Follow the given
    steps to learn the use of hamster:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 仓鼠非常容易使用，也带有用户界面。按照给定的步骤学习仓鼠的使用：
- en: 'We start by typing the following command:'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们开始输入以下命令：
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The following screenshot shows the output for the preceding command:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图显示了上述命令的输出：
- en: '![](img/84ca84ea-626b-454a-8d4e-c829c259de0d.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![](img/84ca84ea-626b-454a-8d4e-c829c259de0d.png)'
- en: 'Now we just need to fire up our browser and navigate to `http://localhost:1234`:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们只需要启动浏览器，然后导航到`http://localhost:1234`：
- en: '![](img/ffc498a3-f105-4b08-a3fc-d450c0afacc7.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ffc498a3-f105-4b08-a3fc-d450c0afacc7.png)'
- en: 'Next, we need to click on `adapters` and choose the interface we want to monitor:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要点击“适配器”，并选择我们想要监视的接口：
- en: '![](img/438d85ed-ede6-4b91-aa0a-3bdeb68f8b72.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](img/438d85ed-ede6-4b91-aa0a-3bdeb68f8b72.png)'
- en: 'We will wait for a while and we will see sessions in the tab on the left-hand
    side tab:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将等待一会儿，然后在左侧选项卡中看到会话：
- en: '![](img/e34a6a9a-b851-494e-be8d-908ec165db03.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e34a6a9a-b851-494e-be8d-908ec165db03.png)'
- en: If you don't see sessions after a few minutes, it may be because hamster and
    ferret are not in the same folder. Hamster runs and executes ferret along with
    it in the background.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 如果几分钟后您没有看到会话，可能是因为仓鼠和雪貂不在同一个文件夹中。仓鼠在后台运行并执行雪貂。
- en: 'Some users may face problems because ferret is not supported on 64-bit architecture.
    We need to add a 32-bit repository and then install ferret. It can be done using:
    `dpkg --add-architecture i386 && apt-get update && apt-get install ferret-sidejack:i386`.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 一些用户可能会遇到问题，因为雪貂不支持64位架构。我们需要添加一个32位存储库，然后安装雪貂。可以使用以下命令完成：`dpkg --add-architecture
    i386 && apt-get update && apt-get install ferret-sidejack:i386`。
- en: Exploring the msfconsole
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索msfconsole
- en: We have already covered some basics of Metasploit in the previous chapters.
    In this recipe, you will learn some techniques to use meterpreter and Metasploit
    for more efficient exploitation.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在前几章中，我们已经介绍了Metasploit的一些基础知识。在这个教程中，您将学习一些使用meterpreter和Metasploit进行更有效利用的技术。
- en: How to do it...
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'To learn about Metasploit follow the given steps:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解Metasploit，请按照以下步骤操作：
- en: 'Let''s start the Metasploit console, by typing `msfconsole`:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们启动Metasploit控制台，输入`msfconsole`：
- en: '![](img/49d36102-75f5-4aa0-a0cd-3a16ad919f64.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](img/49d36102-75f5-4aa0-a0cd-3a16ad919f64.png)'
- en: 'To see the list of exploits available, we use the following command:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要查看可用的利用列表，我们使用以下命令：
- en: '[PRE1]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The following screenshot shows the output for the preceding command:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图显示了上述命令的输出：
- en: '![](img/678d5613-cdc8-4126-af86-8ef9a8fbaf7a.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](img/678d5613-cdc8-4126-af86-8ef9a8fbaf7a.png)'
- en: 'Similarly, in order to see the list of payloads, we use the following command:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 同样地，为了查看有效载荷列表，我们使用以下命令：
- en: '[PRE2]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The following screenshot shows the output for the preceding command:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图显示了上述命令的输出：
- en: '![](img/efa6ce7e-2479-4a69-91bc-3f98f8c901ca.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](img/efa6ce7e-2479-4a69-91bc-3f98f8c901ca.png)'
- en: 'Metasploit also comes with hundreds of auxiliary modules that contain scanners,
    fuzzers, sniffers, and so on. To see the auxiliary, we use the following command:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Metasploit还配备了数百个辅助模块，其中包含扫描器、模糊器、嗅探器等。要查看辅助模块，我们使用以下命令：
- en: '[PRE3]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The following screenshot shows the output for the preceding command:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图显示了上述命令的输出：
- en: '![](img/6fb68873-824c-47a4-9a0c-29a13345c385.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6fb68873-824c-47a4-9a0c-29a13345c385.png)'
- en: 'Let''s use an FTP fuzzer with the following command:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们使用以下命令进行FTP模糊测试：
- en: '[PRE4]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'We will see the options using the following command:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将使用以下命令查看选项：
- en: '[PRE5]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'We set the RHOSTS using the following command:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们使用以下命令设置RHOSTS：
- en: '[PRE6]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'We now run the auxiliary, which notifies us in case a crash happens:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们运行辅助程序，以便在发生崩溃时通知我们：
- en: '![](img/e9c74b32-c565-48e2-8032-a7a6d8688434.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e9c74b32-c565-48e2-8032-a7a6d8688434.png)'
- en: Railgun in Metasploit
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Metasploit中的Railgun
- en: In this recipe, we learn more about Railgun. Railgun is a meterpreter—only Windows
    exploitation feature. It allows direct communication to Windows API.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个教程中，我们将更多地了解Railgun。Railgun是一个仅限于Windows利用的meterpreter功能。它允许直接与Windows API通信。
- en: How to do it...
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Railgun allows us to perform a lot of tasks that Metasploit cannot, such as
    pressing keyboard keys and so on. Using this, we can use Windows API calls to
    perform all the operations we need to for even better post exploitation:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: Railgun允许我们执行Metasploit无法执行的许多任务，例如按键等。使用它，我们可以使用Windows API调用执行我们需要的所有操作，以获得更好的后期利用：
- en: 'We have already seen in the previous chapters on getting a meterpreter session.
    We can jump into Railgun from meterpreter by typing the `irb` command:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们已经在前面的章节中看到了如何获取meterpreter会话。我们可以通过输入`irb`命令从meterpreter跳转到Railgun：
- en: '![](img/bc1c86b5-c9ac-4ffc-8e7b-e4cee7296c0f.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bc1c86b5-c9ac-4ffc-8e7b-e4cee7296c0f.png)'
- en: 'To access Railgun, we use the `session.railgun` command:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要访问Railgun，我们使用`session.railgun`命令：
- en: '![](img/2eb334e7-d501-447a-a098-64347432c713.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2eb334e7-d501-447a-a098-64347432c713.png)'
- en: We see that a lot of data has been printed. These are basically the available
    DLL's and functions we can use.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到打印了很多数据。这些基本上是可用的DLL和函数。
- en: 'To have a better view in order to see the DLL names, we type the command:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了更好地查看DLL名称，我们输入以下命令：
- en: '[PRE7]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The following screenshot shows the output for the preceding command:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了前面命令的输出：
- en: '![](img/1b9b3eed-ddd1-4af3-8d3b-895e143e7fd9.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1b9b3eed-ddd1-4af3-8d3b-895e143e7fd9.png)'
- en: 'To view a function of a `.dll`, we use the following command:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要查看`.dll`的函数，我们使用以下命令：
- en: '[PRE8]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The following screenshot shows the output for the preceding command:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了前面命令的输出：
- en: '![](img/885ad8a5-c88a-4fb0-bf99-26adedc1ba83.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](img/885ad8a5-c88a-4fb0-bf99-26adedc1ba83.png)'
- en: 'Let''s try to call an API, which will lock the screen of the victim. We can
    do that by typing the following command:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们尝试调用一个API，它将锁定受害者的屏幕。我们可以通过输入以下命令来实现：
- en: '[PRE9]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'We can see that we are locked out:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到我们被锁定了：
- en: '![](img/b2205ea3-0235-4dd9-89f6-445793a460f3.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b2205ea3-0235-4dd9-89f6-445793a460f3.png)'
- en: Let's imagine a situation where we want to obtain a user's login password. We
    have the hash, but we are unable to crack it. Using Railgun, we can call the Windows
    API to lock the screen and then run a key logger in the background, so when the
    user logs in, we will have the password. Metasploit already has a post exploitation
    module that uses Railgun to do this; let's try it!
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们想象一个情况，我们想要获取用户的登录密码。我们有哈希，但我们无法破解它。使用Railgun，我们可以调用Windows API来锁定屏幕，然后在后台运行键盘记录器，这样当用户登录时，我们就会得到密码。Metasploit已经有一个使用Railgun来执行此操作的后渗透模块；让我们试试吧！
- en: 'We exit our `irb` and put our meterpreter session in the background and then
    we use the module:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我们退出我们的`irb`，将我们的meterpreter会话放在后台，然后我们使用模块：
- en: '[PRE10]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The following screenshot shows the output for the preceding command:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了前面命令的输出：
- en: '![](img/81567e10-4788-4ed9-a839-08ed8581484a.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![](img/81567e10-4788-4ed9-a839-08ed8581484a.png)'
- en: We add our session using the `set session` command.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们使用`set session`命令添加我们的会话。
- en: 'Then, we set the PID of the `winlogon.exe` here:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在这里设置`winlogon.exe`的PID：
- en: '[PRE11]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Next, we run and we can see the password that the user has entered:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们运行，我们可以看到用户输入的密码：
- en: '![](img/03baa2d4-3f6b-47f4-8df2-e37bd15e2cdf.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](img/03baa2d4-3f6b-47f4-8df2-e37bd15e2cdf.png)'
- en: There's more...
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: This is just an example of a function call we see. We can use Railgun to perform
    lots of other actions, such as delete admin user, insert into the registry, create
    our own DLLS, and so on.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是一个我们看到的函数调用的示例。我们可以使用Railgun执行许多其他操作，比如删除管理员用户，插入注册表，创建我们自己的DLL等等。
- en: 'For more information, visit:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 有关更多信息，请访问：
- en: '[https://www.defcon.org/images/defcon-20/dc-20-presentations/Maloney/DEFCON-20-Maloney-Railgun.pdf](https://www.defcon.org/images/defcon-20/dc-20-presentations/Maloney/DEFCON-20-Maloney-Railgun.pdf).'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://www.defcon.org/images/defcon-20/dc-20-presentations/Maloney/DEFCON-20-Maloney-Railgun.pdf](https://www.defcon.org/images/defcon-20/dc-20-presentations/Maloney/DEFCON-20-Maloney-Railgun.pdf)。'
- en: Using the paranoid meterpreter
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用偏执的meterpreter
- en: Sometime during 2015, hackers realized it was possible to steal/hijack someone's
    meterpreter session by simply playing around with the victim's DNS and launching
    their own handler to connect. This then led to the development and release of
    meterpreter paranoid mode. They introduced an API that verified the SHA1 hash
    of the certificate presented by the msf at both ends. In this recipe, we will
    see how to use the paranoid mode.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在2015年的某个时候，黑客意识到可以通过简单地玩弄受害者的DNS并启动自己的处理程序来窃取/劫持某人的meterpreter会话。然后，这导致了meterpreter偏执模式的开发和发布。他们引入了一个API，验证了两端由msf呈现的证书的SHA1哈希。在本教程中，我们将看到如何使用偏执模式。
- en: How to do it...
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到...
- en: 'We will need an SSL certificate to begin with:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要一个SSL证书来开始：
- en: 'We can generate our own using the following commands:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以使用以下命令生成我们自己的：
- en: '[PRE12]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The following screenshot shows the output for the preceding command:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了前面命令的输出：
- en: '![](img/47258e16-84a4-43ae-9b07-dbe445ac2b7a.png)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![](img/47258e16-84a4-43ae-9b07-dbe445ac2b7a.png)'
- en: 'We fill in the information such as country code and other information accordingly:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 我们填写信息，如国家代码和其他信息：
- en: '[PRE13]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The previous command basically opens two files before and writes them into
    a single file. We then use our generated certificate to generate a payload using
    this:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前面的命令基本上打开了两个文件，然后将它们写入一个文件。然后我们使用我们生成的证书来生成一个载荷：
- en: '[PRE14]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The following screenshot shows the output for the preceding command:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了前面命令的输出：
- en: '![](img/32122a12-11f3-44bd-8b56-fd08c8dcb269.png)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![](img/32122a12-11f3-44bd-8b56-fd08c8dcb269.png)'
- en: 'To set options, we use the following command:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要设置选项，我们使用以下命令：
- en: '[PRE15]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The following screenshot shows the example of the preceding command:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了前面命令的示例：
- en: '![](img/c3b4519e-19dc-4da5-a558-e96444b47071.png)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c3b4519e-19dc-4da5-a558-e96444b47071.png)'
- en: 'Now we run our handler, where we see that the stager verified the connection
    with the handler and then a connection was made:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们运行我们的处理程序，我们可以看到分段程序验证了与处理程序的连接，然后建立了连接：
- en: '![](img/85e5b7ef-9782-4d6a-a2a5-d5bc75cf0f10.png)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![](img/85e5b7ef-9782-4d6a-a2a5-d5bc75cf0f10.png)'
- en: There's more...
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: We can take this to a more advanced level by mentioning our own UUID when generating
    a payload using the `-PayloadUUIDName=` switch. Using this, even if another attacker
    has access to our certificate, they will not be able to hijack our session as
    the UUID will not match.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过在使用`-PayloadUUIDName=`开关生成载荷时提及我们自己的UUID，将其提升到更高级别。使用这个，即使另一个攻击者可以访问我们的证书，他们也无法劫持我们的会话，因为UUID不匹配。
- en: A tale of a bleeding heart
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一个流血的故事
- en: HeartBleed is a vulnerability in OpenSSL cryptography, which is said to be introduced
    in 2012 and publicly disclosed in 2014\. It is a buffer over-read vulnerability
    where more data can be read than is allowed.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, you will learn how to exploit HeartBleed using Metasploit's
    auxiliary module.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To learn about HeartBleed follow the given steps:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: 'We start the `msfconsole` by typing this:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The following screenshot shows the output for the preceding command:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/418bd92c-2e74-4825-840d-52fb69e3fa5f.png)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
- en: 'We then search for the HeartBleed auxiliary using the following command:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The following screenshot shows the output for the preceding command:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/139b4243-4ce8-4290-befb-6b0d03d70c76.png)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
- en: 'Next, we use the auxiliary using the following command:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'We then see the options using the following command:'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The following screenshot shows the output for the preceding command:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f7e03e17-9728-45c3-81b7-160c9ea9d3ff.png)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
- en: 'Now we set the RHOSTS to our target IP using this:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'We then set the verbosity to `true` using this command:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'We then type `run`, where we should now see the data. This data often contains
    sensitive information, such as passwords, email IDs, and so on:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0eb13fbb-7033-4103-a09c-193f517d8002.png)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
- en: Redis exploitation
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sometimes while pentesting, we may come across a Redis installation that was
    left public unintentionally. In an unauthenticated Redis installation, the simplest
    thing to do is to write random files. In this recipe, we will see how to get root
    access of Redis installations running without authentication.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To learn exploitation of Redis follow the given steps:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
- en: 'We first telnet to the server and check whether a successful connection is
    possible or not:'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The following screenshot shows the output for the preceding command:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9e6c77ec-1206-4ea5-882e-4acc7e153b05.png)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
- en: 'We then terminate the telnet session. Next, we generate our SSH key using the
    following command:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Then, we enter the file where we want to save it:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/36425f75-6adc-478f-b7ce-41cc503dc2e9.png)'
  id: totrans-151
  prefs: []
  type: TYPE_IMG
- en: 'Our key is generated; now we need to write it on the server:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/934bceb2-7871-4207-9b28-b4bbf292d489.png)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
- en: 'We need to install `redis-cli` for that; we can use the following command:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Once it is installed, we go back to our generated key and add some random data
    before and after our key:'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The `key.txt` file is our new key file with new lines:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/88999e5d-3ca6-4818-af5d-7e158d80ca34.png)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
- en: 'Now we need to replace the keys in the database with ours. So we connect to
    the host using this:'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Next we flush the keys using the following command:'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'The following screenshot shows the output for the preceding command:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4295471a-f644-4fad-9609-d21871207957.png)'
  id: totrans-165
  prefs: []
  type: TYPE_IMG
- en: 'Now we need to set our keys into the database. We do this using the following
    command:'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Once that''s done, we need to copy the uploaded key into the `.ssh` folder;
    first, we check the current folder with this:'
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Now we change our directory to `/root/.ssh/`:'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Next, we change the name of our file using `set dbfilename "authorized_keys"`
    and save using save:'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d51ca411-9c87-425f-9554-7aaee650b238.png)'
  id: totrans-173
  prefs: []
  type: TYPE_IMG
- en: 'Let''s try to SSH into the server now. We see that we are root:'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/357de6a7-6de2-4497-aedd-e74605c16b42.png)'
  id: totrans-175
  prefs: []
  type: TYPE_IMG
- en: Say no to SQL – owning MongoDBs
  id: totrans-176
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: MongoDB is a free open source cross-platform database program. It uses JSON-like
    documents with schemas. The default security configuration of MongoDB allows anyone
    to access data unauthenticated. In this recipe, we will see how to exploit this
    vulnerability.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-178
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: MongoDB runs on port `27017` by default. To access MongoDB, we need to download
    and install the MongoDB client. There are multiple clients available; we will
    use Studio-3T, which can be downloaded from [https://studio3t.com/.](https://studio3t.com/.)
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-180
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Follow the steps to learn about it:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
- en: Once installed, we open the app and choose Connect.
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the window that opens up, we click on a new connection:'
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/17ae78a6-1aa6-4130-b9c4-37a6f5545aa4.png)'
  id: totrans-184
  prefs: []
  type: TYPE_IMG
- en: 'Then, we choose a name, enter the IP address in the Server field, and click
    on Save:'
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/52445b70-ff53-4b33-bff9-14793913546f.png)'
  id: totrans-186
  prefs: []
  type: TYPE_IMG
- en: Next, we simply select the database we just added from the list and click on
    Connect. On successful connection, the database names will be displayed on the
    left-hand side and data will be displayed on the right-hand side.
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Embedded device hacking
  id: totrans-188
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Intelligent Platform Management Interface** (**IPMI**) is a technology that
    gives administrators almost total control over remotely deployed servers.'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
- en: IPMI may be found in most of the corporates while doing pentest. In this recipe,
    we will see how vulnerabilities in IPMI devices can be found.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-191
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To learn about IPMI follow the given steps:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
- en: 'We start Metasploit:'
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/89ec1852-72a6-4e10-b981-13753059e833.png)'
  id: totrans-194
  prefs: []
  type: TYPE_IMG
- en: 'We search for IPMI-related exploits using this command:'
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'The following screenshot shows the output for the preceding command:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ca314fdd-e1fb-4a64-bfcb-b6f148c213d5.png)'
  id: totrans-198
  prefs: []
  type: TYPE_IMG
- en: 'We will use the **IPMI 2.0 RAKP Remote SHA1 Password Hash Retrieval** vulnerability;
    we choose the auxiliary. There are multiple exploits, such as CIPHER Zero, which
    can be tried as well:'
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Next, in order to see the options, we type this:'
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'The following screenshot shows the output for the preceding command:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/545897e6-3e20-455a-b27b-e5cdaf5e415f.png)'
  id: totrans-204
  prefs: []
  type: TYPE_IMG
- en: Here, we see that the auxiliary automatically attempts to crack the hashes it
    retrieves.
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We set RHOSTS and run. On successful exploitation, we will see the hashes retrieved
    and cracked:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bf45e540-99e6-41f4-8226-152e62249f35.png)'
  id: totrans-207
  prefs: []
  type: TYPE_IMG
- en: Elasticsearch exploit
  id: totrans-208
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sometimes while doing a pentest, we may also come across some of the services
    running on various port numbers. One such service is what we will cover in this
    recipe. Elasticsearch is a Java-based open source search enterprise engine. It
    can be used to search any kinds of documents in real time.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
- en: In 2015, an RCE exploit came for Elasticsearch, which allowed hackers to bypass
    the sandbox and execute remote commands. Let's see how it can be done.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-211
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following steps demonstrate the exploitation of Elasticsearch:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
- en: 'The default port is `9200` for Elasticsearch. We start the Metasploit console:'
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/58d6bd05-740c-44a9-98d6-924790c7fd12.png)'
  id: totrans-214
  prefs: []
  type: TYPE_IMG
- en: 'We search for the Elasticsearch exploit using this command:'
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'The following screenshot shows the output for the preceding command:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/54184f66-0f2f-4617-a49e-cb4a3c09cc19.png)'
  id: totrans-218
  prefs: []
  type: TYPE_IMG
- en: 'We choose the exploit in this case:'
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'The following screenshot shows the output for the preceding command:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d9555910-c534-433c-b376-1989c20ed3b2.png)'
  id: totrans-222
  prefs: []
  type: TYPE_IMG
- en: 'We set RHOST using the `set RHOST x.x.x.x` command:'
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/23726177-ae46-4a05-99fb-575043e5b4b9.png)'
  id: totrans-224
  prefs: []
  type: TYPE_IMG
- en: 'We run the following command:'
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: We have our meterpreter session ready.
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/791bec9c-03e1-426c-918f-7a6590cd7e0d.png)'
  id: totrans-228
  prefs: []
  type: TYPE_IMG
- en: See also
  id: totrans-229
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Exploring the msfconsole* recipe
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Good old Wireshark
  id: totrans-231
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Wireshark is the world's most used network protocol analyzer. It is free and
    open source. It is mostly used for network troubleshooting and analysis. In this
    recipe, you will learn some basic things about Wireshark and how we can use it
    to analyze the network traffic in order to find out what information is actually
    flowing through our network.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-233
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Kali already has the tool preinstalled, so let's look at how to run it!
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-235
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following steps demonstrate the use of Wireshark:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
- en: 'Wireshark can be opened using the `Wireshark` command:'
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/80ce21ad-4148-4b21-b673-78f1f6cdc9f1.png)'
  id: totrans-238
  prefs: []
  type: TYPE_IMG
- en: 'We select the interface we want to capture traffic on:'
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/54139aee-2daf-43e7-883f-0d2113371bab.png)'
  id: totrans-240
  prefs: []
  type: TYPE_IMG
- en: 'Then, we click on Start. Display filters are used to see general packet filtering
    while capturing the network traffic. For example: `tcp.port eq 80` as shown in
    the following screenshot:'
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/163777db-362f-4319-a7b2-222ae7c17940.png)'
  id: totrans-242
  prefs: []
  type: TYPE_IMG
- en: Applying the filter will show only the traffic on port `80`. If we want to view
    requests only from a particular IP, we select the request and right-click on it.
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Then, we navigate to Apply as Filter | Selected:'
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b64c9bc9-e8e8-42ee-a557-d340aaba67f6.png)'
  id: totrans-245
  prefs: []
  type: TYPE_IMG
- en: 'And we see that the filter has been applied:'
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a07fff97-52ab-4da3-9cf8-5a8d00df73b5.png)'
  id: totrans-247
  prefs: []
  type: TYPE_IMG
- en: 'Sometimes, we may want to look at the communication happening between two hosts
    at the TCP level. Following the TCP stream is a feature that allows us to view
    all the traffic from A to B and B to A. Let’s try to use it. From the menu, we
    choose Statistics and then we click on Conversations:'
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/9c7f87ea-1bbe-46dc-b054-5129fe7f7243.png)'
  id: totrans-249
  prefs: []
  type: TYPE_IMG
- en: 'In the window that opens, we switch to the TCP tab. Here, we can see a list
    of IPs and the packets transferred between them. To view the TCP stream, we select
    one of the IPs and click on Follow Stream:'
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/cd43fa4b-ca7b-434f-bdb9-6ec616844b78.png)'
  id: totrans-251
  prefs: []
  type: TYPE_IMG
- en: 'Here, we can see the data that was transferred via TCP:'
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c78b85c0-6f77-48d9-a06b-86086ce2a808.png)'
  id: totrans-253
  prefs: []
  type: TYPE_IMG
- en: Capture filters are used to capture traffic specific to the filter applied;
    for example, if we only want to capture data from a particular host, we use the
    host `x.x.x.x`.
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To apply a capture filter, we click on Capture Options and in the new window
    that opens we will see a field named Capture Options. Here, we can enter our filters:'
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d7d53535-96c7-4fbc-be0f-9b59689ffe44.png)'
  id: totrans-256
  prefs: []
  type: TYPE_IMG
- en: 'Suppose we are investigating an exploitation of HeartBleed in the network.
    We can use the following capture filter to determine whether HeartBleed was exploited
    or not:'
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: There's more...
  id: totrans-259
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here are the links that will be helpful, and they contain a list of all filters
    in Wireshark. These filters can come in handy when performing in-depth packet
    analysis:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
- en: '[https://wiki.wireshark.org/CaptureFilters](https://wiki.wireshark.org/CaptureFilters)'
  id: totrans-261
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://wiki.wireshark.org/FrontPage](https://wiki.wireshark.org/FrontPage)'
  id: totrans-262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This is Sparta!
  id: totrans-263
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sparta is a GUI-based Python tool that is useful for infrastructure pentesting.
    It helps in scanning and enumeration. We can even import nmap outputs here. Sparta
    is very easy to use and automates a lot of information gathering and makes the
    process easier. In this recipe, you will learn how to use the tool to perform
    various scans on the network.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-265
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Kali already has the tool preinstalled, so let's look at how to run it!
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-267
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To know more about Sparta, follow the given steps:'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
- en: 'We start by typing the `Sparta` command:'
  id: totrans-269
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/572bedca-bb84-41e1-83e8-4fb0e1c2fa33.png)'
  id: totrans-270
  prefs: []
  type: TYPE_IMG
- en: We will see the tool open up.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we click on the left-hand side of the menu pane to add hosts:'
  id: totrans-272
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ae36e042-bb69-4ec8-8cb8-8fe054f31912.png)'
  id: totrans-273
  prefs: []
  type: TYPE_IMG
- en: In the window, we enter the IP range we want to scan.
  id: totrans-274
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once we click on Add to scope, it automatically starts the basic process of
    running nmap, nikto, and so on:'
  id: totrans-275
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/841bd643-410c-40c1-95c3-de9a34df3aa4.png)'
  id: totrans-276
  prefs: []
  type: TYPE_IMG
- en: 'We can see the discovered hosts on the left-hand side pane:'
  id: totrans-277
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/9d0ea924-213d-4530-83a0-762c5c49992a.png)'
  id: totrans-278
  prefs: []
  type: TYPE_IMG
- en: 'On the right-hand side, in the Services tab, we will see the open ports and
    the services they are running:'
  id: totrans-279
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/89363857-5ff6-48dd-bd29-0e3b06c1e3ff.png)'
  id: totrans-280
  prefs: []
  type: TYPE_IMG
- en: 'Switching to the Nikto tab, we will see the output of Nikto being displayed
    for our selected host:'
  id: totrans-281
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/3c8620d0-9ab3-46b2-94b7-e43de88aeb2d.png)'
  id: totrans-282
  prefs: []
  type: TYPE_IMG
- en: 'We can also see the screenshot of the page running on port `80` on the host:'
  id: totrans-283
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0ddf5a01-5454-43dc-8e6d-6a9553ae86b4.png)'
  id: totrans-284
  prefs: []
  type: TYPE_IMG
- en: 'For services such as FTP, it automatically runs tools such as Hydra to brute
    force the logins:'
  id: totrans-285
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e65abbdf-3386-4d0a-924a-38334df22079.png)'
  id: totrans-286
  prefs: []
  type: TYPE_IMG
- en: On the left-hand side pane, on switching to Tools tab, we can see the output
    of every host toolwise.
  id: totrans-287
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We can also perform a custom brute force attack by switching to the Brute tab:'
  id: totrans-288
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/879c7156-94ed-4f52-9e47-411dd2a0f6f6.png)'
  id: totrans-289
  prefs: []
  type: TYPE_IMG
- en: 'To run a full port scan or unicorn scan, we can right-click on the host. Go
    to the Portscan menu and choose the type of scan we want to run on the host:'
  id: totrans-290
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/6023fc92-54e7-48b3-b0bf-64e38d6f3573.png)'
  id: totrans-291
  prefs: []
  type: TYPE_IMG
  zh: 抱歉，我无法识别图片中的文本。
