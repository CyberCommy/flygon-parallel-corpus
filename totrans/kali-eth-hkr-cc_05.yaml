- en: Network Exploitation on Current Exploitation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Man in the middle with hamster and ferret
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploring the msfconsole
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the paranoid meterpreter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A tale of a bleeding heart
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Redis exploitation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Say no to SQL – owning MongoDBs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Embedded device hacking
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Elasticsearch exploit
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Good old Wireshark
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This is Sparta!
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Exploiting networks is often a technique that comes in handy. A lot of times,
    we may find that the most vulnerable point in a corporate is in the network itself.
    In this recipe, you will learn about some of the ways in which we can pentest
    a network and successfully exploit the services we find.
  prefs: []
  type: TYPE_NORMAL
- en: Man in the middle with hamster and ferret
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Hamster is a tool that can be used for sidejacking. It acts as a proxy server,
    while ferret is used for sniffing cookies in the network. In this recipe, we will
    look at how to hijack some sessions!
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Kali already has the tool preinstalled, so let's see how to run it!
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Hamster is extremely easy to use and comes with a UI too. Follow the given
    steps to learn the use of hamster:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We start by typing the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the output for the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/84ca84ea-626b-454a-8d4e-c829c259de0d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now we just need to fire up our browser and navigate to `http://localhost:1234`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ffc498a3-f105-4b08-a3fc-d450c0afacc7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, we need to click on `adapters` and choose the interface we want to monitor:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/438d85ed-ede6-4b91-aa0a-3bdeb68f8b72.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We will wait for a while and we will see sessions in the tab on the left-hand
    side tab:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e34a6a9a-b851-494e-be8d-908ec165db03.png)'
  prefs: []
  type: TYPE_IMG
- en: If you don't see sessions after a few minutes, it may be because hamster and
    ferret are not in the same folder. Hamster runs and executes ferret along with
    it in the background.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some users may face problems because ferret is not supported on 64-bit architecture.
    We need to add a 32-bit repository and then install ferret. It can be done using:
    `dpkg --add-architecture i386 && apt-get update && apt-get install ferret-sidejack:i386`.'
  prefs: []
  type: TYPE_NORMAL
- en: Exploring the msfconsole
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have already covered some basics of Metasploit in the previous chapters.
    In this recipe, you will learn some techniques to use meterpreter and Metasploit
    for more efficient exploitation.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To learn about Metasploit follow the given steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start the Metasploit console, by typing `msfconsole`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/49d36102-75f5-4aa0-a0cd-3a16ad919f64.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To see the list of exploits available, we use the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the output for the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/678d5613-cdc8-4126-af86-8ef9a8fbaf7a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Similarly, in order to see the list of payloads, we use the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the output for the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/efa6ce7e-2479-4a69-91bc-3f98f8c901ca.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Metasploit also comes with hundreds of auxiliary modules that contain scanners,
    fuzzers, sniffers, and so on. To see the auxiliary, we use the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the output for the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6fb68873-824c-47a4-9a0c-29a13345c385.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s use an FTP fuzzer with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'We will see the options using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'We set the RHOSTS using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'We now run the auxiliary, which notifies us in case a crash happens:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e9c74b32-c565-48e2-8032-a7a6d8688434.png)'
  prefs: []
  type: TYPE_IMG
- en: Railgun in Metasploit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we learn more about Railgun. Railgun is a meterpreter—only Windows
    exploitation feature. It allows direct communication to Windows API.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Railgun allows us to perform a lot of tasks that Metasploit cannot, such as
    pressing keyboard keys and so on. Using this, we can use Windows API calls to
    perform all the operations we need to for even better post exploitation:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We have already seen in the previous chapters on getting a meterpreter session.
    We can jump into Railgun from meterpreter by typing the `irb` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/bc1c86b5-c9ac-4ffc-8e7b-e4cee7296c0f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To access Railgun, we use the `session.railgun` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2eb334e7-d501-447a-a098-64347432c713.png)'
  prefs: []
  type: TYPE_IMG
- en: We see that a lot of data has been printed. These are basically the available
    DLL's and functions we can use.
  prefs: []
  type: TYPE_NORMAL
- en: 'To have a better view in order to see the DLL names, we type the command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the output for the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1b9b3eed-ddd1-4af3-8d3b-895e143e7fd9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To view a function of a `.dll`, we use the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the output for the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/885ad8a5-c88a-4fb0-bf99-26adedc1ba83.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s try to call an API, which will lock the screen of the victim. We can
    do that by typing the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'We can see that we are locked out:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b2205ea3-0235-4dd9-89f6-445793a460f3.png)'
  prefs: []
  type: TYPE_IMG
- en: Let's imagine a situation where we want to obtain a user's login password. We
    have the hash, but we are unable to crack it. Using Railgun, we can call the Windows
    API to lock the screen and then run a key logger in the background, so when the
    user logs in, we will have the password. Metasploit already has a post exploitation
    module that uses Railgun to do this; let's try it!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We exit our `irb` and put our meterpreter session in the background and then
    we use the module:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the output for the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/81567e10-4788-4ed9-a839-08ed8581484a.png)'
  prefs: []
  type: TYPE_IMG
- en: We add our session using the `set session` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Then, we set the PID of the `winlogon.exe` here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we run and we can see the password that the user has entered:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/03baa2d4-3f6b-47f4-8df2-e37bd15e2cdf.png)'
  prefs: []
  type: TYPE_IMG
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is just an example of a function call we see. We can use Railgun to perform
    lots of other actions, such as delete admin user, insert into the registry, create
    our own DLLS, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'For more information, visit:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.defcon.org/images/defcon-20/dc-20-presentations/Maloney/DEFCON-20-Maloney-Railgun.pdf](https://www.defcon.org/images/defcon-20/dc-20-presentations/Maloney/DEFCON-20-Maloney-Railgun.pdf).'
  prefs: []
  type: TYPE_NORMAL
- en: Using the paranoid meterpreter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sometime during 2015, hackers realized it was possible to steal/hijack someone's
    meterpreter session by simply playing around with the victim's DNS and launching
    their own handler to connect. This then led to the development and release of
    meterpreter paranoid mode. They introduced an API that verified the SHA1 hash
    of the certificate presented by the msf at both ends. In this recipe, we will
    see how to use the paranoid mode.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will need an SSL certificate to begin with:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We can generate our own using the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the output for the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/47258e16-84a4-43ae-9b07-dbe445ac2b7a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We fill in the information such as country code and other information accordingly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The previous command basically opens two files before and writes them into
    a single file. We then use our generated certificate to generate a payload using
    this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the output for the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/32122a12-11f3-44bd-8b56-fd08c8dcb269.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To set options, we use the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the example of the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c3b4519e-19dc-4da5-a558-e96444b47071.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now we run our handler, where we see that the stager verified the connection
    with the handler and then a connection was made:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/85e5b7ef-9782-4d6a-a2a5-d5bc75cf0f10.png)'
  prefs: []
  type: TYPE_IMG
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We can take this to a more advanced level by mentioning our own UUID when generating
    a payload using the `-PayloadUUIDName=` switch. Using this, even if another attacker
    has access to our certificate, they will not be able to hijack our session as
    the UUID will not match.
  prefs: []
  type: TYPE_NORMAL
- en: A tale of a bleeding heart
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: HeartBleed is a vulnerability in OpenSSL cryptography, which is said to be introduced
    in 2012 and publicly disclosed in 2014\. It is a buffer over-read vulnerability
    where more data can be read than is allowed.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, you will learn how to exploit HeartBleed using Metasploit's
    auxiliary module.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To learn about HeartBleed follow the given steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We start the `msfconsole` by typing this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the output for the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/418bd92c-2e74-4825-840d-52fb69e3fa5f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We then search for the HeartBleed auxiliary using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the output for the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/139b4243-4ce8-4290-befb-6b0d03d70c76.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, we use the auxiliary using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'We then see the options using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the output for the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f7e03e17-9728-45c3-81b7-160c9ea9d3ff.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now we set the RHOSTS to our target IP using this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'We then set the verbosity to `true` using this command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'We then type `run`, where we should now see the data. This data often contains
    sensitive information, such as passwords, email IDs, and so on:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0eb13fbb-7033-4103-a09c-193f517d8002.png)'
  prefs: []
  type: TYPE_IMG
- en: Redis exploitation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sometimes while pentesting, we may come across a Redis installation that was
    left public unintentionally. In an unauthenticated Redis installation, the simplest
    thing to do is to write random files. In this recipe, we will see how to get root
    access of Redis installations running without authentication.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To learn exploitation of Redis follow the given steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We first telnet to the server and check whether a successful connection is
    possible or not:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the output for the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9e6c77ec-1206-4ea5-882e-4acc7e153b05.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We then terminate the telnet session. Next, we generate our SSH key using the
    following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we enter the file where we want to save it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/36425f75-6adc-478f-b7ce-41cc503dc2e9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Our key is generated; now we need to write it on the server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/934bceb2-7871-4207-9b28-b4bbf292d489.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We need to install `redis-cli` for that; we can use the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Once it is installed, we go back to our generated key and add some random data
    before and after our key:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'The `key.txt` file is our new key file with new lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/88999e5d-3ca6-4818-af5d-7e158d80ca34.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now we need to replace the keys in the database with ours. So we connect to
    the host using this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Next we flush the keys using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the output for the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4295471a-f644-4fad-9609-d21871207957.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now we need to set our keys into the database. We do this using the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Once that''s done, we need to copy the uploaded key into the `.ssh` folder;
    first, we check the current folder with this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we change our directory to `/root/.ssh/`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we change the name of our file using `set dbfilename "authorized_keys"`
    and save using save:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d51ca411-9c87-425f-9554-7aaee650b238.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s try to SSH into the server now. We see that we are root:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/357de6a7-6de2-4497-aedd-e74605c16b42.png)'
  prefs: []
  type: TYPE_IMG
- en: Say no to SQL – owning MongoDBs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: MongoDB is a free open source cross-platform database program. It uses JSON-like
    documents with schemas. The default security configuration of MongoDB allows anyone
    to access data unauthenticated. In this recipe, we will see how to exploit this
    vulnerability.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: MongoDB runs on port `27017` by default. To access MongoDB, we need to download
    and install the MongoDB client. There are multiple clients available; we will
    use Studio-3T, which can be downloaded from [https://studio3t.com/.](https://studio3t.com/.)
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Follow the steps to learn about it:'
  prefs: []
  type: TYPE_NORMAL
- en: Once installed, we open the app and choose Connect.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the window that opens up, we click on a new connection:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/17ae78a6-1aa6-4130-b9c4-37a6f5545aa4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Then, we choose a name, enter the IP address in the Server field, and click
    on Save:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/52445b70-ff53-4b33-bff9-14793913546f.png)'
  prefs: []
  type: TYPE_IMG
- en: Next, we simply select the database we just added from the list and click on
    Connect. On successful connection, the database names will be displayed on the
    left-hand side and data will be displayed on the right-hand side.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Embedded device hacking
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Intelligent Platform Management Interface** (**IPMI**) is a technology that
    gives administrators almost total control over remotely deployed servers.'
  prefs: []
  type: TYPE_NORMAL
- en: IPMI may be found in most of the corporates while doing pentest. In this recipe,
    we will see how vulnerabilities in IPMI devices can be found.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To learn about IPMI follow the given steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We start Metasploit:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/89ec1852-72a6-4e10-b981-13753059e833.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We search for IPMI-related exploits using this command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the output for the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ca314fdd-e1fb-4a64-bfcb-b6f148c213d5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We will use the **IPMI 2.0 RAKP Remote SHA1 Password Hash Retrieval** vulnerability;
    we choose the auxiliary. There are multiple exploits, such as CIPHER Zero, which
    can be tried as well:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, in order to see the options, we type this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the output for the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/545897e6-3e20-455a-b27b-e5cdaf5e415f.png)'
  prefs: []
  type: TYPE_IMG
- en: Here, we see that the auxiliary automatically attempts to crack the hashes it
    retrieves.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We set RHOSTS and run. On successful exploitation, we will see the hashes retrieved
    and cracked:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bf45e540-99e6-41f4-8226-152e62249f35.png)'
  prefs: []
  type: TYPE_IMG
- en: Elasticsearch exploit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sometimes while doing a pentest, we may also come across some of the services
    running on various port numbers. One such service is what we will cover in this
    recipe. Elasticsearch is a Java-based open source search enterprise engine. It
    can be used to search any kinds of documents in real time.
  prefs: []
  type: TYPE_NORMAL
- en: In 2015, an RCE exploit came for Elasticsearch, which allowed hackers to bypass
    the sandbox and execute remote commands. Let's see how it can be done.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following steps demonstrate the exploitation of Elasticsearch:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The default port is `9200` for Elasticsearch. We start the Metasploit console:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/58d6bd05-740c-44a9-98d6-924790c7fd12.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We search for the Elasticsearch exploit using this command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the output for the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/54184f66-0f2f-4617-a49e-cb4a3c09cc19.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We choose the exploit in this case:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the output for the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d9555910-c534-433c-b376-1989c20ed3b2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We set RHOST using the `set RHOST x.x.x.x` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/23726177-ae46-4a05-99fb-575043e5b4b9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: We have our meterpreter session ready.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/791bec9c-03e1-426c-918f-7a6590cd7e0d.png)'
  prefs: []
  type: TYPE_IMG
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Exploring the msfconsole* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Good old Wireshark
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Wireshark is the world's most used network protocol analyzer. It is free and
    open source. It is mostly used for network troubleshooting and analysis. In this
    recipe, you will learn some basic things about Wireshark and how we can use it
    to analyze the network traffic in order to find out what information is actually
    flowing through our network.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Kali already has the tool preinstalled, so let's look at how to run it!
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following steps demonstrate the use of Wireshark:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Wireshark can be opened using the `Wireshark` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/80ce21ad-4148-4b21-b673-78f1f6cdc9f1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We select the interface we want to capture traffic on:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/54139aee-2daf-43e7-883f-0d2113371bab.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Then, we click on Start. Display filters are used to see general packet filtering
    while capturing the network traffic. For example: `tcp.port eq 80` as shown in
    the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/163777db-362f-4319-a7b2-222ae7c17940.png)'
  prefs: []
  type: TYPE_IMG
- en: Applying the filter will show only the traffic on port `80`. If we want to view
    requests only from a particular IP, we select the request and right-click on it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Then, we navigate to Apply as Filter | Selected:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b64c9bc9-e8e8-42ee-a557-d340aaba67f6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'And we see that the filter has been applied:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a07fff97-52ab-4da3-9cf8-5a8d00df73b5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Sometimes, we may want to look at the communication happening between two hosts
    at the TCP level. Following the TCP stream is a feature that allows us to view
    all the traffic from A to B and B to A. Let’s try to use it. From the menu, we
    choose Statistics and then we click on Conversations:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/9c7f87ea-1bbe-46dc-b054-5129fe7f7243.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the window that opens, we switch to the TCP tab. Here, we can see a list
    of IPs and the packets transferred between them. To view the TCP stream, we select
    one of the IPs and click on Follow Stream:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/cd43fa4b-ca7b-434f-bdb9-6ec616844b78.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Here, we can see the data that was transferred via TCP:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c78b85c0-6f77-48d9-a06b-86086ce2a808.png)'
  prefs: []
  type: TYPE_IMG
- en: Capture filters are used to capture traffic specific to the filter applied;
    for example, if we only want to capture data from a particular host, we use the
    host `x.x.x.x`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To apply a capture filter, we click on Capture Options and in the new window
    that opens we will see a field named Capture Options. Here, we can enter our filters:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d7d53535-96c7-4fbc-be0f-9b59689ffe44.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Suppose we are investigating an exploitation of HeartBleed in the network.
    We can use the following capture filter to determine whether HeartBleed was exploited
    or not:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here are the links that will be helpful, and they contain a list of all filters
    in Wireshark. These filters can come in handy when performing in-depth packet
    analysis:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://wiki.wireshark.org/CaptureFilters](https://wiki.wireshark.org/CaptureFilters)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://wiki.wireshark.org/FrontPage](https://wiki.wireshark.org/FrontPage)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This is Sparta!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sparta is a GUI-based Python tool that is useful for infrastructure pentesting.
    It helps in scanning and enumeration. We can even import nmap outputs here. Sparta
    is very easy to use and automates a lot of information gathering and makes the
    process easier. In this recipe, you will learn how to use the tool to perform
    various scans on the network.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Kali already has the tool preinstalled, so let's look at how to run it!
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To know more about Sparta, follow the given steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We start by typing the `Sparta` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/572bedca-bb84-41e1-83e8-4fb0e1c2fa33.png)'
  prefs: []
  type: TYPE_IMG
- en: We will see the tool open up.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we click on the left-hand side of the menu pane to add hosts:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ae36e042-bb69-4ec8-8cb8-8fe054f31912.png)'
  prefs: []
  type: TYPE_IMG
- en: In the window, we enter the IP range we want to scan.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once we click on Add to scope, it automatically starts the basic process of
    running nmap, nikto, and so on:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/841bd643-410c-40c1-95c3-de9a34df3aa4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can see the discovered hosts on the left-hand side pane:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/9d0ea924-213d-4530-83a0-762c5c49992a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'On the right-hand side, in the Services tab, we will see the open ports and
    the services they are running:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/89363857-5ff6-48dd-bd29-0e3b06c1e3ff.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Switching to the Nikto tab, we will see the output of Nikto being displayed
    for our selected host:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/3c8620d0-9ab3-46b2-94b7-e43de88aeb2d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can also see the screenshot of the page running on port `80` on the host:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0ddf5a01-5454-43dc-8e6d-6a9553ae86b4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'For services such as FTP, it automatically runs tools such as Hydra to brute
    force the logins:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e65abbdf-3386-4d0a-924a-38334df22079.png)'
  prefs: []
  type: TYPE_IMG
- en: On the left-hand side pane, on switching to Tools tab, we can see the output
    of every host toolwise.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We can also perform a custom brute force attack by switching to the Brute tab:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/879c7156-94ed-4f52-9e47-411dd2a0f6f6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To run a full port scan or unicorn scan, we can right-click on the host. Go
    to the Portscan menu and choose the type of scan we want to run on the host:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/6023fc92-54e7-48b3-b0bf-64e38d6f3573.png)'
  prefs: []
  type: TYPE_IMG
