- en: Chapter 2. Connecting Things to the Raspberry Pi Zero
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You need to learn how to connect things to your Raspberry Pi Zero, and also
    looked at the architecture and differentiate between the pins we can use for the
    purpose we defined. This is the reason we have this section--to help you with
    the sensors we can connect and give the basics of how to connect other things
    to your device. In this section, we will explain how to configure the Raspberry
    Pi; now you cannot avoid learning how to connect to your Raspberry Pi sensors
    to read analog inputs connected to it.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the following topics to make our hardware communicate with the
    board:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Connecting digital inputs: Sensor DS18B20'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Connecting analog inputs using an MCP3008 ADC converter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Connecting a real**-**time clock (RTC)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Connectting digital input - sensor DS18B20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Raspberry Pi has digital pins, so in this section, we will look at how to
    connect a digital sensor to the board. We will use the digital sensor DS18B20,
    which has a digital output and can be perfectly connected to a digital input in
    our Raspberry Pi sensor. The main idea is to take temperature readings from the
    sensor and display them on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: Hardware requirements
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will require the following hardware to take the temperature reading:'
  prefs: []
  type: TYPE_NORMAL
- en: Temperature sensor DS18B20 (waterproof)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One resistor of 4.7 kilo-ohms
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Some jumper wires
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A breadboard
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We will use a waterproof sensor DS18B20 and a *4.7* kilo-ohm resistor:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Hardware requirements](graphics/B05170_02_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This is the waterproof sensor that we are using in this project.
  prefs: []
  type: TYPE_NORMAL
- en: Hardware connections
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following diagram shows the circuit on the breadboard, with the sensor
    and the resistor:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Hardware connections](graphics/B05170_02_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'In the following image, we can see the circuit with the sensor:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Hardware connections](graphics/B05170_02_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Configuring the one-wire protocol
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Open a terminal in the Raspberry Pi, and type the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'You should type the following line at the bottom of the page to configure the
    protocol and define the pin where the one-wire protocol will communicate:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The next step is to reboot the Raspberry Pi. After a few minutes, open the
    terminal and type the following lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Enter the folder and select the device that will be configured:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Select the device that will be set up. Change  `xxxx` to the serial number
    of the device that will set up in the protocol:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'You will see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Configuring the one-wire protocol](graphics/B05170_02_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'After that, you will see one line which says *Yes if it appears that the temperature
    reading is done like this: t=29.562*.'
  prefs: []
  type: TYPE_NORMAL
- en: Software configuration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's now look at the code to display the temperature in degrees Celsius and
    Fahrenheit every second on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here we import the libraries used in the program:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Here we define the devices configured in the protocol:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Here we define the folders where the devices are configured:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Then we define the functions to read `temperature` and configure the sensor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Read the temperature with the function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'In this function, we compare when it received the message `YES` and get the
    `t=` character. We also get the value of the temperature:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Then we calculate the temperature, `temp` in `C` and `F`, and return the values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'It repeats the cycle every second:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Displaying the readings on the screen
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now we need to execute `thermometer.py`. To show the results of the scripts
    made in Python, open your PuTTY terminal, and type the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The command means that, when we run the thermometer file, if everything is
    running perfectly, we will see the following results:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Displaying the readings on the screen](graphics/B05170_02_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Connecting analog inputs using an MCP3008 ADC Converter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If we want to connect analog sensors to the Raspberry Pi, we need to use an
    **Analog-to-Digital Converter** (**ADC**). The board doesn't have analog inputs;
    we use the **MCP3008** to connect analog sensors. This is a 10-bit ADC and has
    eight channels. This means that you can connect up to eight sensors that can be
    read from the Raspberry Pi Zero. We don't need special components to connect them.
    They can be connected with SPI to the Raspberry Pi's GPIOs.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first step is to enable SPI communication:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Access the Raspberry Pi terminal and type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Select **Advanced Options,** as shown in the following screenshot:![Connecting
    analog inputs using an MCP3008 ADC Converter](graphics/B05170_02_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enable **SPI** communication by selecting the **SPI** option:![Connecting analog
    inputs using an MCP3008 ADC Converter](graphics/B05170_02_07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **<Yes>** to enable the SPI interface:![Connecting analog inputs using
    an MCP3008 ADC Converter](graphics/B05170_02_08.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The final screen looks like the following screenshot when we enable the SPI
    interface. Select **<Ok>**:![Connecting analog inputs using an MCP3008 ADC Converter](graphics/B05170_02_09.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Raspberry Pi GPIO header
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following screenshot is a chart of the GPIO pins of the Raspberry Pi Zero.
    In this case, we will use the SPI configuration interface (`SPI_MOSI, SPI_MISO,
    SPI_CLK, SPI_CE0_N`):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Raspberry Pi GPIO header](graphics/B05170_02_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The following diagram shows the name of the pins of the MCP3008 chip that you
    connect to the Raspberry Pi:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Raspberry Pi GPIO header](graphics/B05170_02_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The following image shows the temperature sensor:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Raspberry Pi GPIO header](graphics/B05170_02_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'You need to connect the following pins according to the next description:'
  prefs: []
  type: TYPE_NORMAL
- en: '**VDD** to ***3.3*** volts'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**VREF** to **3.3** volts from the Raspberry Pi Zero'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pin **AGND** to **GND**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pin **CLK** (clock) to **GPIO11** of the Raspberry Pi
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**DOUT** to **GPIO9**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pin **DIN** to **GPIO10**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pin **CS** to **GPIO8** and the pin
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pin the MCP3008D **GND** to Ground
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This connection is represented in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Raspberry Pi GPIO header](graphics/B05170_02_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The following image shows the connections of the sensor to the ADC MCP3008
    and the Raspberry Pi:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Raspberry Pi GPIO header](graphics/B05170_02_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Reading the data with a Python script
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the next section, you will create the `MCP3008.py` file; you need to follow
    the next steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the terminal on your Raspberry Pi Zero.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the interface in your Pi terminal.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It's important to use `nano` before.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type `sudo nano MCP3008.py`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'It will appear on the screen and we will describe the following lines:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Import libraries:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Open the SPI bus:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Define the channels from the ADC MCP2008:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'The function to convert volts is as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'The function to convert temperature is as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Define channels from the ADC:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Define the reading time:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'The function to read the temperature is as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Print the results:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Wait every 5 seconds:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the Python file using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: On the following screen, we can see the temperature, the ADC measurements, and
    the volts according to the temperature:![Reading the data with a Python script](graphics/B05170_02_15.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connecting an RTC
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To control a system, it is very important to have a circuit that can read the
    time; it can help control the outputs from the Raspberry Pi or detect an action
    at a specific time. We will interface an **RTC** module *DS3231* with the Raspberry
    Pi.
  prefs: []
  type: TYPE_NORMAL
- en: I2C setup
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The first step is to enable the **I2C** interface by performing the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Select **Advanced Options**:![I2C setup](graphics/B05170_02_16.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enable the **I2C** option, as shown in the following screenshot:![I2C setup](graphics/B05170_02_17.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **<Yes>** on the next screen:![I2C setup](graphics/B05170_02_18.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **<Ok>**:![I2C setup](graphics/B05170_02_19.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then select **<Yes>**:![I2C setup](graphics/B05170_02_20.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, select **<OK>**:![I2C setup](graphics/B05170_02_21.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: DS3231 module setup
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The module DS3231 is a real-time clock. It can be used to get the time and date
    from an integrated circuit, so it can work with your system to control specific
    events that you want to program from an embedded chip. It can work perfectly with
    the Raspberry Pi Zero in order to get the time and date in real time.
  prefs: []
  type: TYPE_NORMAL
- en: 'You need to be sure that you have the latest updates. To do that, type the
    following commands in your terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Modify the system file with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following lines to the `modules.txt` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Hardware setup
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this section, we will look at the pins of the RTC module:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'This is the RTC module, and we can see the pins of the chip:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Hardware setup](graphics/B05170_02_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The following diagram shows, the circuit connection:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Hardware setup](graphics/B05170_02_23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The following image shows the final connection:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Hardware setup](graphics/B05170_02_24.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Testing the RTC
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Open the terminal, and type this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see something similar to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Testing the RTC](graphics/B05170_02_25.jpg)'
  prefs: []
  type: TYPE_IMG
- en: I2C device setup
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The next step is to check whether the time clock is synchronized with RTC time.
    Here we define the RTC local:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following lines to the file as we declare the new device and the path
    we configure:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'The following command will start up the RTC:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'After this command, reboot the Pi. You will see the following screen, which
    means that the RTC is configured and ready to work:'
  prefs: []
  type: TYPE_NORMAL
- en: '![I2C device setup](graphics/B05170_02_26.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Putting the real-time clock to final test
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can read the Pi time system with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: '![Putting the real-time clock to final test](graphics/image_02_027.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the RTC is ready, you can test it with the following command; write the
    time to the RTC:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'You can read the time from the RTC with the command given here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Now for the final command. With this command, we can see both the time values,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Putting the real-time clock to final test](graphics/image_02_028.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned how to use the MCP3008 ADC converter and also how to
    use a temperature sensor using Raspberry Pi Zero. We explored the GPIO port and
    the various interfaces it features. We looked at the various things we can connect
    to the Raspberry Pi using GPIO.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will dive into more hardware acquisition, connecting
    different kinds of sensors to our Raspberry Pi Zero and Arduino boards. This will
    help you make real measurements in your projects. That’s very interesting—keep
    at it!
  prefs: []
  type: TYPE_NORMAL
