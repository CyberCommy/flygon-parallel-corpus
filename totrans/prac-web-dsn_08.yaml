- en: Making Our Website Responsive
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [Chapter 4](e6d6711e-b61a-421f-b883-5a1d4f2da13b.xhtml), *Responsive Versus
    Adaptive Design*, you learned the difference between responsive design and adaptive
    design. The first one is a lot easier to implement, and the latter is targeted
    to the end user.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter will cover the following:'
  prefs: []
  type: TYPE_NORMAL
- en: What are media queries?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Opening the browser inspector
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The difference between desktop first and mobile first
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introducing to jQuery
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to make our website responsive for every device and screen size
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What are media queries?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Responsive design can be accomplished using *media queries*. How does this
    work? Think of media queries as a condition that you apply to your CSS. You tell
    the browser to add or remove certain CSS rules depending on the device or viewport
    size:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/429e400e-7261-464c-914b-6cdcc944a6f3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To apply those rules, we will need to use the CSS property `@media`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '`@media only screen and (max-width: 400px)` means that if the screen/viewport
    size is fewer than or equal to `400px`, then we apply this CSS.'
  prefs: []
  type: TYPE_NORMAL
- en: There are a few different types of properties you can add to media and target
    a different type of device.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, you can target especially the iPhone 4 with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'This translates as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code means any devices with a size greater than or equal to `320px`
    and fewer than or equal to `480px`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The following code targets any device with the pixel ratio or density of `2`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code will target only devices with a `portrait` orientation.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have covered the basics of media queries, let's put this into practice
    with our project.
  prefs: []
  type: TYPE_NORMAL
- en: Opening the inspector
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First, to be able to test our website''s responsiveness, there is a tool available
    in Chrome that is very useful. To access it, you can go to View | Developer |
    Developer Tools:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1a60e5f4-fb73-49a9-b40d-adee1c0df322.png)'
  prefs: []
  type: TYPE_IMG
- en: To use this tool, click on the second icon on the top left
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, you can select any device you want to test with, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/58370053-48ff-475d-bbd7-2a53e5f4371d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You can also see that the code of the entire page is displayed on the right-hand
    side:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/13208aeb-fbcf-4c26-b892-93c3c37dcb26.png)'
  prefs: []
  type: TYPE_IMG
- en: The Google Chrome Inspector
  prefs: []
  type: TYPE_NORMAL
- en: This is very useful, because it allows you to try different CSS properties before
    putting in your code or to check whether your CSS works. You can have a quick
    try and play around with it.
  prefs: []
  type: TYPE_NORMAL
- en: Desktop first
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Depending on the design process you started with, but in general, you would
    start with the desktop design, and lower down to mobile. If you started your design
    with a mobile-first process, you'll have to start on a mobile and then upgrade
    to the desktop.
  prefs: []
  type: TYPE_NORMAL
- en: So, the initial CSS is for desktop, so what we have to consider now is what
    conditions we want to apply to the CSS.
  prefs: []
  type: TYPE_NORMAL
- en: 'The devices we want to target are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Desktop (by default)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tablet (viewport size fewer than or equal to 1,024px)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Large mobile  (viewport size fewer than or equal to 768px)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Small mobile  (viewport size fewer than or equal to 400px)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This is an example of how you can separate the different breakpoints. You can
    definitely change it according to your needs.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, this is how it looks in CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Now that we have our breakpoint ready, let's start making our website responsive.
  prefs: []
  type: TYPE_NORMAL
- en: Designing the menu
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we will take a look at how to hide the desktop menu and show
    a hamburger icon instead when working on mobiles or tablets:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/62d40581-5efd-43fc-b1fc-8a368200bfa1.png)'
  prefs: []
  type: TYPE_IMG
- en: The design of the mobile view
  prefs: []
  type: TYPE_NORMAL
- en: 'If we click on the icon, a menu opens on the right-hand side:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d0895659-0031-43cc-ac0e-404c099c9998.png)'
  prefs: []
  type: TYPE_IMG
- en: Menu opened on mobile
  prefs: []
  type: TYPE_NORMAL
- en: To do that, we will first need to hide the menu on the mobile version and the
    tablet  version.
  prefs: []
  type: TYPE_NORMAL
- en: 'At the end of the `header` section in our CSS, add the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we want to show the `hamburger-menu` on mobile. We will need to create
    a `div` tag in HTML and show it only on a mobile, with CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: We will place this just before the ending of our header tag `</header>`.
  prefs: []
  type: TYPE_NORMAL
- en: 'In CSS, we will need to hide  the hamburger in desktop view and show it only
    on mobile view:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s save and take a look:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/95e26386-0776-4e95-81b2-64c6882bcd90.jpg)'
  prefs: []
  type: TYPE_IMG
- en: If you want to add a fancy frame to your tablet view, then click on the three
    dots in  the right-hand corner and click on Show device frame.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can see that the hamburger icon shows up, but we need to place it correctly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Don't forget that we only change the `display` property with our media queries,
    so the rules we apply here will apply to the the mobile version.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we have to create another menu that shows up only on mobile version, and
    when the user clicks on the hamburger menu, the entire page will move to the left:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ce3a3f3b-ff9d-4a71-99d6-7020410f18ff.png)'
  prefs: []
  type: TYPE_IMG
- en: A diagram that shows the different layers of the content and the mobile nav
  prefs: []
  type: TYPE_NORMAL
- en: To be able to move the entire page, we will need to create an HTML tag and put
    our content inside it. We'll create a tag called `<main>` and put the content
    we created inside (from `header` to `footer`).
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, in CSS, we will first need to add a new section for our `main` tag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, to ensure that this element will be the parent element, we will need to
    make this element in a `position: relative;` so that every element with a `position:
    absolute;` will now relate to this one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'We''ll also add a `background-color: white;` to make sure that it has the same
    background `white` as the default `white`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, to move our `main` tag, we''ll use the `"left:-200px"` CSS property:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'This will move our element horizontally by `-200px`, that is, `200px` to the
    left. Now, let''s save and take a look:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ea90c5ac-f8a1-48e2-a95d-1d458deaac94.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Main container moved to the left by 250px
  prefs: []
  type: TYPE_NORMAL
- en: 'For our mobile menu, let''s create another `div` with the `"mobile-nav"` class,
    but we will put it outside of the `<main>` tag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'In `.mobile-nav`, let''s recreate our `nav` (including `.main-nav` and `.right-nav`
    lists):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'In our CSS file, let''s make sure that you hide our `.mobile-nav` in desktop
    view:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s add some customization:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '`position: fixed;`: As we want the menu to stay fixed on the back while we
    move the `<main>` container'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`background-color: #1F1F1F;`: The color picked from the design'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`width: 200px;` and `height: 100%;`: As we want the dimension to be slightly
    lower than the minimum width of a mobile, which is 320px. 200px seems good, and,
    of course, we want the height to be 100%, to take the entire space vertically'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`right: 0;` and `top: 0;`: Specify the position from the viewport'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/a06591fd-2bdb-47f5-bc4c-bc380f1cce43.jpg)'
  prefs: []
  type: TYPE_IMG
- en: iPad View (1,024px)
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s finish the customization of the menu:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s save and take a look at how it looks:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3645ea8e-b991-4211-a1aa-6b809153f799.jpg)'
  prefs: []
  type: TYPE_IMG
- en: iPad View (1,024px)
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s return the `<main>` container to its initial position:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: This is when the fun starts; we'll create a function in JS to animate the `<main>`
    container when the user clicks on the hamburger menu.
  prefs: []
  type: TYPE_NORMAL
- en: 'To make that happen, we will add a class to the `<main>` tag when the user
    clicks on the hamburger menu. This class called `active` will have the following
    value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: So, if we add an `active` class to the `<main>` element, the container will
    move to the left as we specified.
  prefs: []
  type: TYPE_NORMAL
- en: Now let's remove it and get started with the JS.
  prefs: []
  type: TYPE_NORMAL
- en: To kick-start any project, the best way for any beginner is to start with jQuery.
    What is jQuery?
  prefs: []
  type: TYPE_NORMAL
- en: What is jQuery?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: jQuery is a fast and concise JavaScript Library that simplifies HTML document
    traversing, event handling, animating, and Ajax interactions for rapid web development.
  prefs: []
  type: TYPE_NORMAL
- en: -Official jQuery website
  prefs: []
  type: TYPE_NORMAL
- en: 'jQuery is not a language in itself; it is a JavaScript framework that helps
    to code JavaScript more easily and efficiently. The good points of jQuery are
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: It simplifies JavaScript syntax
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It has fixed most of the issues that JavaScript will have between each web browser
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It makes deployment safer across all platforms
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It's easy for a beginner to understand
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It has many libraries and a big community
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To use jQuery, we''ll just need to link a script to our HTML, but, fortunately,
    with HTML boilerplate, jQuery is already integrated. The following is the line
    in our HTML that calls the URL and downloads the jQuery file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: jQuery syntax
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will now have a look at the jQuery syntax.  The following syntax is an example
    of a jQuery and JavaScript code that changes the background of the body:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: You can see the big difference between them.
  prefs: []
  type: TYPE_NORMAL
- en: 'The basic syntax of jQuery is very simple:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: The `$` sign starts any jQuery action
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `(selector)` is used to query (or find) HTML elements, by ID or class like
    in CSS (`#` or `.`)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`action()`  is the action to be performed on the element(s)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The semicolon (`;`) is used to close the action
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For example, to add a class in jQuery, we can use the jQuery action `.addClass`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: To make this happen, we will need to create a JS file beforehand and write all
    our JS code in there. However, we can use the one created by HTML boilerplate
    located in our `js` folder, called `main.js`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To call jQuery and say that we need to do those actions, we will need to add
    the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: This is to prevent any jQuery code from running before the document has finished
    loading.
  prefs: []
  type: TYPE_NORMAL
- en: Now, to test whether our jQuery is correctly linked with our HTML file, a quick
    thing we can do is to show an alert when the page loads.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do so, we can use the JavaScript `alert` action:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/c13a08d6-1d63-4f9c-89be-3165bf3c1d74.png)'
  prefs: []
  type: TYPE_IMG
- en: Our alert action is properly working
  prefs: []
  type: TYPE_NORMAL
- en: 'We can remove the `alert` action and add the little code we created earlier:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s save and check whether everything works:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e8a538fe-7a54-44a6-b60d-7ad0318c6ee6.png)'
  prefs: []
  type: TYPE_IMG
- en: This shows the class on the Inspector
  prefs: []
  type: TYPE_NORMAL
- en: Indeed, we have our class `active` right from the start.
  prefs: []
  type: TYPE_NORMAL
- en: 'To change this action to when the user clicks on the menu, we will need to
    use the jQuery action, `click`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'We can define this, but this will not do anything, as we need to define the
    action when the icon is clicked. To do so, we will need to set a `function` inside.
    A function is a set of actions that you can set and is followed by an open and
    a closed curly bracket:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, inside the `function`, we will add the `addClass` action:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Now save your JS file and refresh the page. As you click on the `hamburger-menu`,
    the container moves to the left. Well done! We have our first step. However, now
    we want to close the menu and move the container back.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can add this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'However, this won''t work, as it will always try to remove the class `active` as
    `<main>` is the parent of `.hamburger-menu`. To solve that, we will need to tell
    the script to stop the click `event` from bubbling up when we click on the trigger. This
    means that it will never reach the `<main>` level and won''t trigger the `.removeClass()`
    method. To do so, we will need to add a way to track the click event and tell
    it not to bubble up:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: You can now check your menu. It's working properly as expected, but when you
    click on the `.hamburger-menu` itself, it doesn't do anything. This is because
    we didn't tell it to do anything.
  prefs: []
  type: TYPE_NORMAL
- en: We will need to make the `<main>` return to its initial position when we click
    on the hamburger-menu. However, right now, we have only set it to add a class
    `active` to `<main>`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to configure a way to remove the class only if `<main>` has an `active` on
    it. To do so, we will need to apply a condition. To apply a condition in jQuery,
    we will simply need to use the condition `if` and `else` inside a `function`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'So, the action we want is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: If `<main>` has the class `active`, remove the class `active`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If `<main>` doesn't have the class `active`, add the class `active`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To check whether an element has a class, we can use the jQuery action `hasClass`,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Now save your JS document. Our JS is working perfectly, but if you have a tendency
    to be a perfectionist, adding some animation won''t kill you. We can add some
    transition to the container to add some smoothness to the animation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: The transition will only work on the element that is moving, which is, in this
    case, the `<main>` element.
  prefs: []
  type: TYPE_NORMAL
- en: Our responsive is finally done; let's move to the hero section.
  prefs: []
  type: TYPE_NORMAL
- en: Making the hero section responsive
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s check how responsive our hero is at the moment:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/598bc960-c943-4dcb-a2b2-dd5b955129b4.png)'
  prefs: []
  type: TYPE_IMG
- en: iPad view and iPhone 8 view
  prefs: []
  type: TYPE_NORMAL
- en: As we see, there is nothing to change in the iPad view; however, for the iPhone
    view, it lacks padding and the title seems a bit too big.
  prefs: []
  type: TYPE_NORMAL
- en: 'The way I can see to fix this without too much code is to add some padding
    to the `container`, the `container` we have implemented in every section:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: We will add some padding from the tablet breakpoint, so it will affect all lower
    breakpoints too.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s now fix our the title. This will be straightforward; we will just need
    to find our `.hero-title` class and add some media queries:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: That's it! You can always change the value as you wish, as well.
  prefs: []
  type: TYPE_NORMAL
- en: Making the Blog section responsive
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This Blog section is based on a three-column grid, and it works pretty well
    on desktops and tablets; however, on a mobile, it shrinks a bit too much, so we''ll
    need to change the three columns to two columns (and one column for a small mobile):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2759fdf3-460c-43b1-8639-b5ac349425bc.png)'
  prefs: []
  type: TYPE_IMG
- en: Mobile view of the Blog section
  prefs: []
  type: TYPE_NORMAL
- en: 'To change the width of the column, let''s head to the `.blog-post` class we
    created and change the value of the width to `50%` on a large mobile breakpoint:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: This will make sure that the content will still be readable, regardless of the
    device it will be appearing on.
  prefs: []
  type: TYPE_NORMAL
- en: 'Also, the title seems a bit big as well. We can reduce the `font-size` by `40px`
    when in mobile view:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f41e1ce7-c3b9-4ed3-808b-035a41972dfa.png)'
  prefs: []
  type: TYPE_IMG
- en: The view of the different breakpoints of the Blog section
  prefs: []
  type: TYPE_NORMAL
- en: Making the ABOUT US section responsive
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The ABOUT US section looks fine on the iPad view but starts to become a bit
    squishy on a mobile:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/174affa0-dd36-4507-adfc-5ef6483b410f.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Mobile view of the About Us Section
  prefs: []
  type: TYPE_NORMAL
- en: 'To fix this issue, we will need to change the width value to `100%` on the
    mobile breakpoint:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Also, we will change the orientation of the flexbox by adding the CSS property, `flex-orientation:
    column`. By default, this value is `row`, but you also have the ability to change
    the order by having the `row-reverse` value, the same for the `column` value with
    `column-reverse`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'The design looks good, but the text is still a bit too close to the title;
    let''s fix this by adding a margin:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, save and check:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/acaa6de0-be15-449c-bb1a-461e97d83b42.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The ABOUT US responsive layout
  prefs: []
  type: TYPE_NORMAL
- en: Making the footer section responsive
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The last part is the `footer`, and, for most websites, it's just a list of links.
    It's usually displayed it as a simple vertical list; it's not as sophisticated
    as the header menu we created.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we will need to remove the height value we set in the `footer`; to do
    that, we can simply replace it with the `auto` value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'We also need to display the links in a vertical way by setting the direction
    of the flexbox, as we saw earlier:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'The next step will be to change the value of the display we set on our `<li>`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'Also, we need to remove the padding we set on the `<a>` tag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we will need to remove the default padding from the `<ul>`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: Now we're all done.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: That was quite a condensed chapter, I hope you're still following all this!
    Now that we have covered how to make our website responsive with media queries,
    and also with a quick introduction to jQuery, we can now move on to the next chapter.
    In our next chapter, we will move deeper into CSS and jQuery by adding some interaction
    and adding some dynamic content to your website. We'll discuss pseudo-class in
    CSS, how to use plugins on our website, and how to collect information through
    an API. I can't wait to show you this!
  prefs: []
  type: TYPE_NORMAL
