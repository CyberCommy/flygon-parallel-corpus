- en: Server-Side Rendering with Nuxt
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Nuxt进行服务器端渲染
- en: Nuxt is inspired by a popular React project named Next.js, built by Zeit. Both
    projects have the aim of creating applications that allow for a better development
    experience using the latest ideologies, tools, and techniques. Nuxt recently entered
    version 1.x and onward, meaning that it should be considered stable to use for
    production websites.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Nuxt受到一个名为Next.js的流行React项目的启发，由Zeit构建。这两个项目的目标都是创建应用程序，利用最新的思想、工具和技术，提供更好的开发体验。Nuxt最近进入了1.x版本及更高版本，这意味着它应该被认为是稳定的，可以用于生产网站。
- en: We'll be taking a look at Nuxt in more detail throughout this chapter, and if
    you find it useful, it may become the default way that you create Vue applications.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将更详细地了解Nuxt，如果你觉得它有用，它可能会成为你创建Vue应用程序的默认方式。
- en: 'In this chapter, we''ill cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Investigating Nuxt and understanding the benefits of using it
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调查Nuxt并理解使用它的好处
- en: Creating an application with Nuxt
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Nuxt创建应用程序
- en: Using Nuxt middleware
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Nuxt中间件
- en: Using layouts to define content
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用布局定义内容
- en: Understanding routing within Nuxt
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Nuxt中理解路由
- en: Building a Vue project with Server-Side Rendering
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用服务器端渲染构建Vue项目
- en: Building a Vue project as a static site
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将Vue项目构建为静态站点
- en: Nuxt
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Nuxt
- en: Nuxt introduces the concept of Universal Vue Applications, as it allows us to
    take advantage of **Server-Side Rendering** (**SSR**) with ease. At the same time,
    Nuxt also gives us the ability to generate static sites, which means that the
    content is rendered as HTML, CSS, and JS files without going backward and forward
    from the server.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Nuxt引入了通用Vue应用程序的概念，因为它使我们能够轻松地利用服务器端渲染（SSR）。与此同时，Nuxt还赋予我们生成静态站点的能力，这意味着内容以HTML、CSS和JS文件的形式呈现，而不需要来回从服务器传输。
- en: That's not all—Nuxt handles route generation and doesn't detract from any core
    features of Vue. Let's create a Nuxt project.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这还不是全部——Nuxt处理路由生成，并且不会减少Vue的任何核心功能。让我们创建一个Nuxt项目。
- en: Creating a Nuxt project
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个Nuxt项目
- en: 'We can use Vue CLI to create a new Nuxt project using the starter template.
    This provides us with a barebones Nuxt project and saves us from having to configure
    everything manually. We''ll be creating a "recipe list" application named "Hearty
    Home Cooking" that uses a REST API to get category and recipe names. Run the following
    command in your Terminal to create a new Nuxt project:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用Vue CLI使用启动模板创建一个新的Nuxt项目。这为我们提供了一个简单的Nuxt项目，并避免了手动配置的麻烦。我们将创建一个名为“丰盛家常烹饪”的“食谱列表”应用程序，该应用程序使用REST
    API获取类别和食谱名称。在终端中运行以下命令创建一个新的Nuxt项目：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The preceding steps are quite similar to what we've come to expect when creating
    a new Vue project, instead, we can simply use the Nuxt repository and starter
    template to generate a project.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的步骤与创建新的Vue项目时所期望的非常相似，相反，我们可以简单地使用Nuxt存储库和启动模板来生成一个项目。
- en: 'If we take a look at our `package.json`, you''ll see that we don''t have a
    list of production dependencies; instead, we just have one, `nuxt`:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们查看我们的`package.json`，你会发现我们没有生产依赖项的列表；相反，我们只有一个`nuxt`：
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This is important, as this means we don't have to manage the version of Vue
    or worry about other compatible packages since we only need to update the version
    of `nuxt`.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这很重要，因为这意味着我们不必管理Vue的版本或担心其他兼容的包，因为我们只需要更新`nuxt`的版本。
- en: Directory structure
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 目录结构
- en: 'If we open our project up inside the editor, we''ll note that we have substantially
    more folders than our previous Vue applications. I''ve compiled a table that outlines
    what they mean:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在编辑器中打开我们的项目，我们会注意到我们比以前的Vue应用程序有更多的文件夹。我编制了一张表格，概述了它们的含义：
- en: '| Folder | Description |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| 文件夹 | 描述 |'
- en: '| `Assets` | Used to store project assets, such as uncompiled images, js, and
    CSS. Uses Webpack loaders to load as modules. |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
- en: '| `Components` | Used to store application components. These are not converted
    to routes. |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
- en: '| `Layouts` | Used to create application layouts, such as default, error, or
    other custom layouts. |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
- en: '| `Middleware` | Used to define custom application middleware. This allows
    us to run the custom functionality on different events, such as navigating between
    pages. |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
- en: '| `Pages` | Used to create components (the `.vue` file) that serve as application
    routes. |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
- en: '| `Plugins` | Used to register application-wide plugins (that is, with `Vue.use`).
    |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
- en: '| `Static` | Used to store static files; each item inside this folder is mapped
    to `/*` instead of `/static/*`. |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
- en: '| `Store` | Used with the Vuex store. Both the standard and module implementations
    of Vuex can be used with Nuxt. |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
- en: Although this may seem more complex, keep in mind that this helps us separate
    our concerns, and the structure allows Nuxt to handle things such as autoroute
    generation.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: Nuxt configuration
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's add some custom links to our project so that we can take advantage of
    CSS libraries, fonts, and more. Let's add Bulma to our project.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: 'Bulma is a CSS framework that allows us to build applications with Flexbox
    and lets us take advantage of many premade components. We can add it (and other
    external CDN files) to our project by navigating to `nuxt.config.js` and adding
    a new object to our `link` object within the `head` object, like so:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'If we then use the developer tools to check the head inside of our HTML document,
    you''ll note that Bulma has been added to our project. If we head over to our
    developer tools we can see that it does indeed use Bulma within the project:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/16b5d5fe-0de0-4cc0-9c96-6699a39fb3cc.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
- en: Navigation
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Each time we create a new `.vue` file inside the pages directory, we''re given
    a new route for our application. This means that any time we want to create a
    new route, we just create a new folder with the route name and the rest is handled
    by Nuxt. Given that we have default `index.vue` in our `pages` folder, the routes
    initially look like this:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'If we then add a `categories` folder with an `index.vue` inside, Nuxt would
    generate the following routes:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'If we want to take advantage of dynamic route parameters, such as an `id`,
    we can make a component named `_id.vue` inside the `categories` folder. This automatically
    creates a route with the `id` parameter, allowing us to take action based on a
    user''s selection:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Navigating between routes
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: How do we navigate between routes with Nuxt? Well, we do so using the `nuxt-link`
    component, of course!
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: This is similar to the `router-link` component that's used when navigating between
    links with a standard Vue.js application (and as of writing, it is identical to
    it), but this is wrapped with the `nuxt-link` component to take advantage of features,
    such as prefetching, in the future.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: Layouts
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We can create custom layouts inside our Nuxt project. This allows us to change
    the way our pages are arranged and also allows us to add commonalities, such as
    static navigation bars and footers. Let's use Bulma to create a new navigation
    bar that allows us to navigate between multiple components within our site.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside the `components` folder, make a new file called `NavigationBar.vue`
    and give it the following markup:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'We then need to add this to our default layout inside `layouts`/`default.vue`.
    I''ve also enclosed the `nuxt` tag (that is, our main `router-view`) with appropriate
    Bulma classes to center our content:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'If we then head to the browser, we have an application that looks like this,
    reflecting our code:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/8a7ca3de-b6fa-4ec9-86cf-b9ddb618282e.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
- en: The Mock REST API
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before we create the components to display our data, let''s mock out a REST
    API with JSON Server. To do this, we''ll need a file named `db.json` inside the
    root of our project, as follows:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Next, ensure that you have JSON Server installed on your machine by running
    the following command in the Terminal:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'We can then run the server on the `3001` port (or any port other than `3000`
    because this is what Nuxt runs on) by typing the following command in the Terminal:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This will watch for any changes to our database and update the API accordingly.
    We'll then be able to make requests to `localhost:3000/recipes/:id` and `localhost:3000/categories/:id`.
    In Nuxt, we can do this with `axios` and `asyncData`; let's take a look at that
    next.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: asyncData
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We can use the `asyncData` method to resolve data for our component before the
    component is loaded, essentially requesting data on the server side and then merging
    the results with the data object inside our component instance when loaded. This
    makes it a great place to add asynchronous actions, such as getting data from
    a REST API.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll use the `axios` library to create HTTP requests, so we''ll need to ensure
    that we''ve installed it. Run the following from your Terminal:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Then, inside `pages`/`index.vue`, we will get a list of categories to show
    the user when our application starts. Let''s do that inside `asyncData`:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Categories
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As `asyncData` is merged with our Vue instance''s data object, we can then
    access the data inside of our view. Let''s create a `category` component that
    displays a category for each category inside our API:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'In the preceding code, we used Bulma to take the category information and placed
    it on a card. We also used a `computed` property to generate the prop for the
    `nuxt-link` component. This allows us to navigate the user to a list of items
    based on category `id`. We can then add this to our root `pages/index.vue` file:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'As a result, this is what our front page now looks like:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/5f24ca53-a9a5-439a-ac2e-7a886237e951.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
- en: Category detail
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to navigate the user to the `category` detail page, we''ll need to
    create a `_id.vue` file inside the `categories` folder. This will give us access
    to the ID parameter inside this page. This process is similar to before, except
    that now we''ve also added a `validate` function that checks whether the `id`
    parameter exists:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The `validate` function ensures that the parameter exists for this route, and
    if it doesn't exist, it will navigate the user to an error (`404`) page. Later
    on in this chapter, we'll get the hang of how to create our own error pages.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: 'We now have a `recipes` array inside our `data` object that contains recipes
    based on the `categoryId` that the user selected. Let''s create a `Recipe.vue`
    component inside the components folder that displays recipe information:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Once again, we''re using Bulma for styling and are able to pass a recipe into
    this component as a prop. Let''s iterate over all recipes inside our `_id.vue`
    component:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Whenever we select a category, we now get the following page, which shows the
    selected recipes:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/96e218fc-6c83-4f8e-ad69-c9f6efe3e9a2.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
- en: Error page
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What if the user navigates to a route that doesn't exist or there's an error
    in our application? Well, we certainly could take advantage of Nuxt's default
    error page, or we could create our own.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: 'We can do that by creating `error.vue` inside the `layouts` folder. Let''s
    go ahead and do that and display an error message if the status code is `404`;
    if not, we''ll display a generic error message:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'If we then navigate to `locahost:3000/e`, you''ll be navigated to our error
    page. Let''s take a look at the error page:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/aa972259-99e1-47fb-a4f0-1f53424f8e5e.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
- en: Plugins
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We''ll need the ability to add recipes to our application; as adding new recipes
    will require a form and some input(s) in order to appropriately validate the form,
    we''ll use `Vuelidate`. If you remember from previous chapters, we can add `Vuelidate`
    and other plugins with `Vue.use`. The process is similar when using Nuxt, but
    requires an extra step. Let''s install `Vuelidate` by running the following command
    in the Terminal:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Inside our plugins folder, make a new file named `Vuelidate.js`. Inside this
    file, we can import `Vue` and `Vuelidate` and add the plugin:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'We can then update `nuxt.config.js` to add the plugins array, which points
    toward our `Vuelidate` file:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Inside the `build` object, we''ll also add `''vuelidate''` to the vendor bundle
    so that it''s added to our application:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Adding recipes
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's make a new route under `pages/Recipes/new.vue`; this will then generate
    a route to `localhost:3000/recipes/new`. Our implementation will be simple; for
    example, having recipe steps as `string` may not be the best idea for production,
    but it allows us to achieve our goal(s) in development.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: 'We can then add the appropriate data object and validation(s) with `Vuelidate`:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Next up, we can add the appropriate template, which includes everything from
    validation messages, to contextual classes, and enabling/disabling the `submit`
    button if the form is valid/invalid:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'To submit the recipe, we''ll need to make a POST request to our API:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Instead of navigating to the `http://localhost:3000/recipes/new` URL manually,
    let''s add an item to our navigation bar:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Here''s what our page now looks like:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/86996268-e888-47f6-98b1-d0ba3bdb3569.png)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
- en: Although we haven't used the recipe steps in our application, I've included
    it in this example as a feature you may want to include yourself.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: Transitions
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When navigating between pages, Nuxt makes adding transitions super simple.
    Let''s add a `transition` to each navigation action by adding custom CSS. Add
    a file named `transition.css` into the `assets` folder, and we''ll hook into the
    various different page states:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'After adding the file, we''ll need to tell Nuxt that we want to use it as a
    `.css` file. Add the following code to your `nuxt.config.js`:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Now, we can navigate between any page and we'll have a page transition each
    time.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: Building for production
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Nuxt offers us a variety of ways to build our project for production, such as
    server-rendered (Universal), static, or **Single Page Application** (**SPA**)
    mode. All of these offer different pros and cons, depending on the use case.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: 'By default, our project is in server-rendered (Universal) mode and can be built
    for production by running the following command in the Terminal:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'We then get a `dist` folder inside the `.nuxt` folder within our project; this
    contains the built end result(s) of our application, which can be deployed to
    a hosting provider:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/0131d6b7-891b-4da5-812e-12653f451922.png)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
- en: Static
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to build our project in static mode, we can run the following command
    in the Terminal:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'This will build a static site, which can then be deployed to a static hosting
    provider such as Firebase. This is how the Terminal should appear:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/1e379bd4-7de1-4bdb-8ef9-6371ba5eae25.png)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
- en: SPA mode
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To build our project in the SPA mode, we will need to add the following key
    value to `nuxt.config.js`:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'We can then build our project once again, but this time it''ll be built using
    SPA mode:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Our command Terminal should now look like the following:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/6eba689d-7d87-43a7-b6e7-27c62a6e865f.png)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
- en: Summary
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we discussed how to use Nuxt to create server-rendered Vue
    applications. We also discussed just *how easy* it is to create new routes and
    how to add custom CSS libraries inside our project. Furthermore, we covered how
    we can add transitions to our pages to make it interesting when switching between
    routes. We also covered how we can build different versions of our project, depending
    on whether we want a universal, static, or SPA application.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
- en: In the final chapter, we'll be discussing common anti-patterns within Vue.js
    and how to avoid them. This is paramount to writing consistent software that can
    survive the test of time.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
