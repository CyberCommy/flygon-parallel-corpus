- en: Server-Side Rendering with Nuxt
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Nuxt is inspired by a popular React project named Next.js, built by Zeit. Both
    projects have the aim of creating applications that allow for a better development
    experience using the latest ideologies, tools, and techniques. Nuxt recently entered
    version 1.x and onward, meaning that it should be considered stable to use for
    production websites.
  prefs: []
  type: TYPE_NORMAL
- en: We'll be taking a look at Nuxt in more detail throughout this chapter, and if
    you find it useful, it may become the default way that you create Vue applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we''ill cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Investigating Nuxt and understanding the benefits of using it
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating an application with Nuxt
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Nuxt middleware
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using layouts to define content
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding routing within Nuxt
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building a Vue project with Server-Side Rendering
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building a Vue project as a static site
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Nuxt
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Nuxt introduces the concept of Universal Vue Applications, as it allows us to
    take advantage of **Server-Side Rendering** (**SSR**) with ease. At the same time,
    Nuxt also gives us the ability to generate static sites, which means that the
    content is rendered as HTML, CSS, and JS files without going backward and forward
    from the server.
  prefs: []
  type: TYPE_NORMAL
- en: That's not allâ€”Nuxt handles route generation and doesn't detract from any core
    features of Vue. Let's create a Nuxt project.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Nuxt project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can use Vue CLI to create a new Nuxt project using the starter template.
    This provides us with a barebones Nuxt project and saves us from having to configure
    everything manually. We''ll be creating a "recipe list" application named "Hearty
    Home Cooking" that uses a REST API to get category and recipe names. Run the following
    command in your Terminal to create a new Nuxt project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The preceding steps are quite similar to what we've come to expect when creating
    a new Vue project, instead, we can simply use the Nuxt repository and starter
    template to generate a project.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we take a look at our `package.json`, you''ll see that we don''t have a
    list of production dependencies; instead, we just have one, `nuxt`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This is important, as this means we don't have to manage the version of Vue
    or worry about other compatible packages since we only need to update the version
    of `nuxt`.
  prefs: []
  type: TYPE_NORMAL
- en: Directory structure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If we open our project up inside the editor, we''ll note that we have substantially
    more folders than our previous Vue applications. I''ve compiled a table that outlines
    what they mean:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Folder | Description |'
  prefs: []
  type: TYPE_TB
- en: '| `Assets` | Used to store project assets, such as uncompiled images, js, and
    CSS. Uses Webpack loaders to load as modules. |'
  prefs: []
  type: TYPE_TB
- en: '| `Components` | Used to store application components. These are not converted
    to routes. |'
  prefs: []
  type: TYPE_TB
- en: '| `Layouts` | Used to create application layouts, such as default, error, or
    other custom layouts. |'
  prefs: []
  type: TYPE_TB
- en: '| `Middleware` | Used to define custom application middleware. This allows
    us to run the custom functionality on different events, such as navigating between
    pages. |'
  prefs: []
  type: TYPE_TB
- en: '| `Pages` | Used to create components (the `.vue` file) that serve as application
    routes. |'
  prefs: []
  type: TYPE_TB
- en: '| `Plugins` | Used to register application-wide plugins (that is, with `Vue.use`).
    |'
  prefs: []
  type: TYPE_TB
- en: '| `Static` | Used to store static files; each item inside this folder is mapped
    to `/*` instead of `/static/*`. |'
  prefs: []
  type: TYPE_TB
- en: '| `Store` | Used with the Vuex store. Both the standard and module implementations
    of Vuex can be used with Nuxt. |'
  prefs: []
  type: TYPE_TB
- en: Although this may seem more complex, keep in mind that this helps us separate
    our concerns, and the structure allows Nuxt to handle things such as autoroute
    generation.
  prefs: []
  type: TYPE_NORMAL
- en: Nuxt configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's add some custom links to our project so that we can take advantage of
    CSS libraries, fonts, and more. Let's add Bulma to our project.
  prefs: []
  type: TYPE_NORMAL
- en: 'Bulma is a CSS framework that allows us to build applications with Flexbox
    and lets us take advantage of many premade components. We can add it (and other
    external CDN files) to our project by navigating to `nuxt.config.js` and adding
    a new object to our `link` object within the `head` object, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'If we then use the developer tools to check the head inside of our HTML document,
    you''ll note that Bulma has been added to our project. If we head over to our
    developer tools we can see that it does indeed use Bulma within the project:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/16b5d5fe-0de0-4cc0-9c96-6699a39fb3cc.png)'
  prefs: []
  type: TYPE_IMG
- en: Navigation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Each time we create a new `.vue` file inside the pages directory, we''re given
    a new route for our application. This means that any time we want to create a
    new route, we just create a new folder with the route name and the rest is handled
    by Nuxt. Given that we have default `index.vue` in our `pages` folder, the routes
    initially look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'If we then add a `categories` folder with an `index.vue` inside, Nuxt would
    generate the following routes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'If we want to take advantage of dynamic route parameters, such as an `id`,
    we can make a component named `_id.vue` inside the `categories` folder. This automatically
    creates a route with the `id` parameter, allowing us to take action based on a
    user''s selection:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Navigating between routes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: How do we navigate between routes with Nuxt? Well, we do so using the `nuxt-link`
    component, of course!
  prefs: []
  type: TYPE_NORMAL
- en: This is similar to the `router-link` component that's used when navigating between
    links with a standard Vue.js application (and as of writing, it is identical to
    it), but this is wrapped with the `nuxt-link` component to take advantage of features,
    such as prefetching, in the future.
  prefs: []
  type: TYPE_NORMAL
- en: Layouts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We can create custom layouts inside our Nuxt project. This allows us to change
    the way our pages are arranged and also allows us to add commonalities, such as
    static navigation bars and footers. Let's use Bulma to create a new navigation
    bar that allows us to navigate between multiple components within our site.
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside the `components` folder, make a new file called `NavigationBar.vue`
    and give it the following markup:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'We then need to add this to our default layout inside `layouts`/`default.vue`.
    I''ve also enclosed the `nuxt` tag (that is, our main `router-view`) with appropriate
    Bulma classes to center our content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'If we then head to the browser, we have an application that looks like this,
    reflecting our code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/8a7ca3de-b6fa-4ec9-86cf-b9ddb618282e.png)'
  prefs: []
  type: TYPE_IMG
- en: The Mock REST API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before we create the components to display our data, let''s mock out a REST
    API with JSON Server. To do this, we''ll need a file named `db.json` inside the
    root of our project, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, ensure that you have JSON Server installed on your machine by running
    the following command in the Terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'We can then run the server on the `3001` port (or any port other than `3000`
    because this is what Nuxt runs on) by typing the following command in the Terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: This will watch for any changes to our database and update the API accordingly.
    We'll then be able to make requests to `localhost:3000/recipes/:id` and `localhost:3000/categories/:id`.
    In Nuxt, we can do this with `axios` and `asyncData`; let's take a look at that
    next.
  prefs: []
  type: TYPE_NORMAL
- en: asyncData
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We can use the `asyncData` method to resolve data for our component before the
    component is loaded, essentially requesting data on the server side and then merging
    the results with the data object inside our component instance when loaded. This
    makes it a great place to add asynchronous actions, such as getting data from
    a REST API.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll use the `axios` library to create HTTP requests, so we''ll need to ensure
    that we''ve installed it. Run the following from your Terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, inside `pages`/`index.vue`, we will get a list of categories to show
    the user when our application starts. Let''s do that inside `asyncData`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Categories
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As `asyncData` is merged with our Vue instance''s data object, we can then
    access the data inside of our view. Let''s create a `category` component that
    displays a category for each category inside our API:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding code, we used Bulma to take the category information and placed
    it on a card. We also used a `computed` property to generate the prop for the
    `nuxt-link` component. This allows us to navigate the user to a list of items
    based on category `id`. We can then add this to our root `pages/index.vue` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'As a result, this is what our front page now looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/5f24ca53-a9a5-439a-ac2e-7a886237e951.png)'
  prefs: []
  type: TYPE_IMG
- en: Category detail
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to navigate the user to the `category` detail page, we''ll need to
    create a `_id.vue` file inside the `categories` folder. This will give us access
    to the ID parameter inside this page. This process is similar to before, except
    that now we''ve also added a `validate` function that checks whether the `id`
    parameter exists:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: The `validate` function ensures that the parameter exists for this route, and
    if it doesn't exist, it will navigate the user to an error (`404`) page. Later
    on in this chapter, we'll get the hang of how to create our own error pages.
  prefs: []
  type: TYPE_NORMAL
- en: 'We now have a `recipes` array inside our `data` object that contains recipes
    based on the `categoryId` that the user selected. Let''s create a `Recipe.vue`
    component inside the components folder that displays recipe information:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Once again, we''re using Bulma for styling and are able to pass a recipe into
    this component as a prop. Let''s iterate over all recipes inside our `_id.vue`
    component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Whenever we select a category, we now get the following page, which shows the
    selected recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/96e218fc-6c83-4f8e-ad69-c9f6efe3e9a2.png)'
  prefs: []
  type: TYPE_IMG
- en: Error page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What if the user navigates to a route that doesn't exist or there's an error
    in our application? Well, we certainly could take advantage of Nuxt's default
    error page, or we could create our own.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can do that by creating `error.vue` inside the `layouts` folder. Let''s
    go ahead and do that and display an error message if the status code is `404`;
    if not, we''ll display a generic error message:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'If we then navigate to `locahost:3000/e`, you''ll be navigated to our error
    page. Let''s take a look at the error page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/aa972259-99e1-47fb-a4f0-1f53424f8e5e.png)'
  prefs: []
  type: TYPE_IMG
- en: Plugins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We''ll need the ability to add recipes to our application; as adding new recipes
    will require a form and some input(s) in order to appropriately validate the form,
    we''ll use `Vuelidate`. If you remember from previous chapters, we can add `Vuelidate`
    and other plugins with `Vue.use`. The process is similar when using Nuxt, but
    requires an extra step. Let''s install `Vuelidate` by running the following command
    in the Terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside our plugins folder, make a new file named `Vuelidate.js`. Inside this
    file, we can import `Vue` and `Vuelidate` and add the plugin:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'We can then update `nuxt.config.js` to add the plugins array, which points
    toward our `Vuelidate` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside the `build` object, we''ll also add `''vuelidate''` to the vendor bundle
    so that it''s added to our application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Adding recipes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's make a new route under `pages/Recipes/new.vue`; this will then generate
    a route to `localhost:3000/recipes/new`. Our implementation will be simple; for
    example, having recipe steps as `string` may not be the best idea for production,
    but it allows us to achieve our goal(s) in development.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can then add the appropriate data object and validation(s) with `Vuelidate`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Next up, we can add the appropriate template, which includes everything from
    validation messages, to contextual classes, and enabling/disabling the `submit`
    button if the form is valid/invalid:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'To submit the recipe, we''ll need to make a POST request to our API:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Instead of navigating to the `http://localhost:3000/recipes/new` URL manually,
    let''s add an item to our navigation bar:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s what our page now looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/86996268-e888-47f6-98b1-d0ba3bdb3569.png)'
  prefs: []
  type: TYPE_IMG
- en: Although we haven't used the recipe steps in our application, I've included
    it in this example as a feature you may want to include yourself.
  prefs: []
  type: TYPE_NORMAL
- en: Transitions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When navigating between pages, Nuxt makes adding transitions super simple.
    Let''s add a `transition` to each navigation action by adding custom CSS. Add
    a file named `transition.css` into the `assets` folder, and we''ll hook into the
    various different page states:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'After adding the file, we''ll need to tell Nuxt that we want to use it as a
    `.css` file. Add the following code to your `nuxt.config.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Now, we can navigate between any page and we'll have a page transition each
    time.
  prefs: []
  type: TYPE_NORMAL
- en: Building for production
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Nuxt offers us a variety of ways to build our project for production, such as
    server-rendered (Universal), static, or **Single Page Application** (**SPA**)
    mode. All of these offer different pros and cons, depending on the use case.
  prefs: []
  type: TYPE_NORMAL
- en: 'By default, our project is in server-rendered (Universal) mode and can be built
    for production by running the following command in the Terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'We then get a `dist` folder inside the `.nuxt` folder within our project; this
    contains the built end result(s) of our application, which can be deployed to
    a hosting provider:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/0131d6b7-891b-4da5-812e-12653f451922.png)'
  prefs: []
  type: TYPE_IMG
- en: Static
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to build our project in static mode, we can run the following command
    in the Terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'This will build a static site, which can then be deployed to a static hosting
    provider such as Firebase. This is how the Terminal should appear:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/1e379bd4-7de1-4bdb-8ef9-6371ba5eae25.png)'
  prefs: []
  type: TYPE_IMG
- en: SPA mode
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To build our project in the SPA mode, we will need to add the following key
    value to `nuxt.config.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'We can then build our project once again, but this time it''ll be built using
    SPA mode:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Our command Terminal should now look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/6eba689d-7d87-43a7-b6e7-27c62a6e865f.png)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we discussed how to use Nuxt to create server-rendered Vue
    applications. We also discussed just *how easy* it is to create new routes and
    how to add custom CSS libraries inside our project. Furthermore, we covered how
    we can add transitions to our pages to make it interesting when switching between
    routes. We also covered how we can build different versions of our project, depending
    on whether we want a universal, static, or SPA application.
  prefs: []
  type: TYPE_NORMAL
- en: In the final chapter, we'll be discussing common anti-patterns within Vue.js
    and how to avoid them. This is paramount to writing consistent software that can
    survive the test of time.
  prefs: []
  type: TYPE_NORMAL
