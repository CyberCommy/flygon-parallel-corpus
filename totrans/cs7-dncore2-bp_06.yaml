- en: Web Research Tool with Entity Framework Core
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '"The biggest lie I tell myself is that I don''t need to write it down, I''ll
    remember it."'
  prefs: []
  type: TYPE_NORMAL
- en: – Unknown
  prefs: []
  type: TYPE_NORMAL
- en: So, you've got a few minutes to catch up on your feeds. As you scroll through,
    you come across a link to an article that someone shared about new ways to remember
    your guitar chords. You really want to read it, but you don't have enough time
    now. "*I'll read it later",* you tell yourself, and later becomes never. Mainly
    because you did not write it down.
  prefs: []
  type: TYPE_NORMAL
- en: Now there are various applications out there that cater for your need to save
    links for later use. But we're developers. Let's just have some fun writing our
    own.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will look at the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Entity Framework** (**EF**) Core history'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Code-First versus Model-First versus Database-First approach
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Developing a database design
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up the project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing EF Core
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating the models
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring the services
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating the database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Seeding the database with test data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating the controller
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running the application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying the application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: That is quite a mouthful, but don't fret, we'll take it one step at a time.
    Let's take a walk.
  prefs: []
  type: TYPE_NORMAL
- en: Entity Framework (EF) Core history
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the most frustrating parts of developing an application that needs to
    read data from and write data to some sort of database, is trying to get the communication
    layer between your code and the database established.
  prefs: []
  type: TYPE_NORMAL
- en: At least, it used to be.
  prefs: []
  type: TYPE_NORMAL
- en: Enter Entity Framework
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Entity Framework is an **object-relational mapper** (**ORM**). It maps your
    .NET code objects to relational database entities. As simple as that. Now, you
    don't have to concern yourself with scaffolding the required data-access code
    just to handle plain CRUD operations.
  prefs: []
  type: TYPE_NORMAL
- en: When the first version of Entity Framework was released with .NET 3.5 SP1 in
    August 2008, the initial response wasn't that great, so much so that a group of
    developers signed a *vote of no confidence* with regards to the framework. Thankfully,
    most of the raised concerns were addressed and the release of Entity Framework
    4.0, together with .NET 4.0, put to bed a lot of the criticisms around the stability
    of the framework.
  prefs: []
  type: TYPE_NORMAL
- en: Microsoft then decided to take .NET cross-platform with .NET Core, which meant
    that Entity Framework Core was a complete rewrite. This obviously has its pros
    and cons as a comparison between EF Core and EF6 reveals that, while EF Core introduces
    new features and improvements, it remains a new code base and thus does not yet
    have all the features available in EF6.
  prefs: []
  type: TYPE_NORMAL
- en: Code-First versus Model-First versus Database-First approach
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With Entity Framework, you can choose between three approaches of implementation,
    and it's always nice to have a choice. Let's have a quick look at the differences
    between them.
  prefs: []
  type: TYPE_NORMAL
- en: Code-First approach
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The weapon of choice for hardcore programmers, this approach gives you full
    control over the database, from code. The database is seen a simple storage location
    and will most likely not contain any logic or business rules. Everything is driven
    from the code and thus any changes required need to be done in code as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/623d8338-835f-4e91-b0f1-a4e1daf8d007.png)'
  prefs: []
  type: TYPE_IMG
- en: Model-First approach
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you prefer painting over poetry, then you might prefer the Model-First approach.
    In this approach, you create or draw your model, and the workflow will generate
    a database script. You could also extend your model with partial classes, if there
    is a need to add specific logic or business rules, but it could become hairy and
    it might be better to consider the Code-First approach if there are too many specifics:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/35e7c4b9-3092-4064-9af2-d675ff1959b0.png)'
  prefs: []
  type: TYPE_IMG
- en: Database-First approach
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Database-First approach works well for large projects where you have a
    dedicated DBA designing and maintaining your database. Entity Framework will create
    your entities for you from the database design and you can run model updates whenever
    database changes are done:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/181149a6-fa39-48bd-a2be-6f0649df9b43.png)'
  prefs: []
  type: TYPE_IMG
- en: Developing a database design
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We can't know what we're doing until we know what we're doing. Before we jump
    in and create a Solution with our database, models, and controllers, we need to
    first figure out how we want to design the database.
  prefs: []
  type: TYPE_NORMAL
- en: 'According to Microsoft''s TechNet, there are five basic steps one could follow
    to plan a database:'
  prefs: []
  type: TYPE_NORMAL
- en: Gather information
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Identify the objects
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Model the objects
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Identify the types of information for each object
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Identify the relationship between objects
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Our requirement is pretty simple. We only need to save a web link to navigate
    to later, so we won't have multiple objects with relationships between them.
  prefs: []
  type: TYPE_NORMAL
- en: We do, however, need to clarify the types of information we'd like to save for
    our object (web link). Obviously, we need the URL, but what else do we need? Make
    sure you understand what information is required for your Solution and how it
    will be used.
  prefs: []
  type: TYPE_NORMAL
- en: Think about it in everyday terms—if you write an address for a friend's house,
    you might want something more that just a street, possibly your friend's name
    or a note of some kind.
  prefs: []
  type: TYPE_NORMAL
- en: 'In our Solution, we want to know what the URL is, but we also want to know
    when we saved it and have a place to capture a note so we can add more personal
    detail to an entry. Our model will thus contain the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`URL`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DateSaved`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Notes`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We'll go into more detail when we start creating our models, but let's not jump
    the gun. We still need to create our project.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Using Visual Studio 2017, create an ASP.NET Core Web Application. Please note
    that we are taking a Code-First approach to this project:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s call the application `WebResearch`. This is shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f1925976-6f5b-4cb8-977f-8c40b65a57c2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'On the next screen, choose Web Application (Model-View-Controller) as a project
    template. To keep things simple, keep the authentication as No Authentication.
    Refer to the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/7de7611b-2a21-4bb5-8f52-e02ffb0dd723.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The created project will look as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/6a272af2-966b-4321-8147-869e9ea6930c.png)'
  prefs: []
  type: TYPE_IMG
- en: Installing the required packages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We need to install three NuGet packages to our Solution that will assist us
    in our quest. This is done through the Package Manager Console.
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to Tools | NuGet Package Manager | Package Manager Console:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/647dd034-8efb-4e28-bca1-7ff2ae009837.png)'
  prefs: []
  type: TYPE_IMG
- en: Entity Framework Core SQL Server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are various database providers catered for by EF Core, including Microsoft
    SQL Server, PostgreSQL, SQLite, and MySQL. We will use SQL Server as a database
    provider.
  prefs: []
  type: TYPE_NORMAL
- en: For a full list of database providers, have a look at the official Microsoft
    documentation at: [https://docs.microsoft.com/en-us/ef/core/providers/index](https://docs.microsoft.com/en-us/ef/core/providers/index).
  prefs: []
  type: TYPE_NORMAL
- en: 'In the console window, type the following command and hit *Enter*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: You should see a few response lines showing the items that were successfully
    installed.
  prefs: []
  type: TYPE_NORMAL
- en: Entity Framework Core tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Next up, we'll install some Entity Framework Core tools that will assist us
    with creating our database from our models.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the console window, type the following command and hit *Enter*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Once again, you should see a few response lines showing the items that were
    successfully installed.
  prefs: []
  type: TYPE_NORMAL
- en: Code generation design
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Instead of writing all the code ourselves, we can use some ASP.Net Core code
    generation tools to aid us with our scaffolding.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next up in the console window, type the following command and hit *Enter*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: As usual, check to see that you get the `Successfully Installed` items.
  prefs: []
  type: TYPE_NORMAL
- en: If you have problems installing any NuGet packages, it might point to an access
    control issue. As a general rule, I set up my Visual Studio to run as administrator,
    which sorts out most of those problems.
  prefs: []
  type: TYPE_NORMAL
- en: 'After installation, our Solution will reflect the added NuGet packages under
    the Dependencies section, shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/63a62d37-ed0f-4822-b3bf-c7d3bfefeeda.png)'
  prefs: []
  type: TYPE_IMG
- en: Creating the models
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Right-click on the Models folder in your project and add a class called `ResearchModel.cs`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0131dbbd-9c06-4737-8048-19aeb0fd9fdc.png)'
  prefs: []
  type: TYPE_IMG
- en: We actually need two classes—a `Research` class that is a representation of
    our `entity` object, and another, `ResearchContext`, which is a subclass of `DbContext`.
    To keep things simple, we can put both classes in our `ResearchModel` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s break it down as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Firstly, we have our `Research` class, which is our `entity` object representation.
    As covered in our *Developing a database design* section, as discussed earlier,
    for each link we will save the URL, the date, and a note. The ID field is standard
    practice for a database table that holds information.
  prefs: []
  type: TYPE_NORMAL
- en: Our second class, `ResearchContext`, is a subclass of `DbContext`. This class
    will have an empty constructor taking `DbContextOptions` as a parameter and a
    `DbSet<TEntity>` property for our data collection.
  prefs: []
  type: TYPE_NORMAL
- en: 'I could give you a brief overview here about `DbSet<Entity>`, but I''d rather
    let Visual Studio help us out. If you hover over `DbSet`, you''ll get an informational
    pop-up with everything you need to know:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2fe5e304-43bc-4f12-86cc-5a208cd543f6.png)'
  prefs: []
  type: TYPE_IMG
- en: Configuring the services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the `Startup.cs` class, in the `ConfigureServices` method, add the `DbContext`
    service with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, we set a connection string variable from the configuration,
    and then pass that in as an options parameter for `SqlServer` for our `DbContext`.
  prefs: []
  type: TYPE_NORMAL
- en: But hold on. Where does `LocalDBConnection` come from? We haven't set anything
    in our configuration. Not yet, anyway. Let's get that done now.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `appsettings.json` file in the root of the project:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b8d8d7aa-4cb9-43b9-bf9c-264d4552e09f.png)'
  prefs: []
  type: TYPE_IMG
- en: By default, you should see a logging entry. Add your `ConnectionStrings` section
    after the `Logging` section with a `LocalDBConnection` property.
  prefs: []
  type: TYPE_NORMAL
- en: 'The full file should look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Later on, we will look at how to connect to an existing database, but for now
    we are just connecting to a local `db` file.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: During the development phase of any application, there is a fairly high probability
    that your data model can change. When that happens, your EF Core model differs
    from the database schema and you have to delete the outdated database and create
    a new one based on the updated model.
  prefs: []
  type: TYPE_NORMAL
- en: This is all fun and games until you've done your first live implementation and
    your application runs in a production environment. You cannot then go and drop
    a database just to change a few columns. You have to make sure the live data persists
    when you make any changes.
  prefs: []
  type: TYPE_NORMAL
- en: Entity Framework Core Migrations is a nifty feature that enables us to make
    changes to the database schema instead of recreating the database and losing production
    data. There is a lot of functionality and flexibility possible with `Migrations`,
    and it is a topic well worth spending time on, but we'll just cover some of the
    basics for now.
  prefs: []
  type: TYPE_NORMAL
- en: We can use EF Core Migration commands in the `Package Manager Console` to set
    up, create, and if needed, update our database.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `Package Manager Console`, we will execute the following two commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Add-Migration InitialCreate`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Update-Database`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The first command will generate the code in the `Migrations` folder of the project,
    which is used to create the database. The naming convention for these files is
    `<timestamp>_InitialCreate.cs`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The second command will create the database and run the `Migrations`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/006032db-d6e0-4bf9-b8fd-9df901d2bb48.png)'
  prefs: []
  type: TYPE_IMG
- en: There are two methods of `Note` in the `InitialCreate` class, `Up` and `Down`.
    Simply put, the `Up` method code executes when you Up-grade the application and
    the `Down` method code is run when you Down-grade the application.
  prefs: []
  type: TYPE_NORMAL
- en: Let's say we want to add a Boolean property to our `Research` model called `Read`.
    To persist the value, we would obviously need to add that column to our table
    as well, but we don't want to drop the table just to add a field. With `Migrations`
    we can update the table rather than recreate it.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll start by altering our model. In the `Research` class, add the `Read`
    property. Our class will look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we''ll add a `Migration`. We''ll use the `Migration` name as an indication
    of what we''re doing. Execute the following command in your `Package Manager Console`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'You will notice we have a new class in our `Migrations` folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6a2d1a48-a841-4613-9de2-20cc2394b020.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s have a look under the hood. You will see that our `Up` and `Down` methods
    aren''t as empty as in the `InitialCreate` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7d2ffb13-fdcf-4b15-bb87-c5c4cb691038.png)'
  prefs: []
  type: TYPE_IMG
- en: As mentioned earlier, the `Up` method executes during an Up-grade and the `Down`
    method during a Down-grade. This concept is a lot clearer now that we can see
    the code. In the `Up` method, we are adding the `Read` column and in the `Down`
    method we are dropping the column.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can make changes to this code if needed. We can, for example, change the
    `nullable` attribute of the `Read` column, but updating the code to look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'We can also add a custom SQL query that will update all existing entries to
    `Read`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: I know this is not a great example, as you wouldn't want all your `Research`
    entries to be marked as `Read` every time you update the database, but hopefully
    you understand the concept.
  prefs: []
  type: TYPE_NORMAL
- en: This code has not yet been executed, though. So, at the current moment, our
    model and database schema are still out of sync.
  prefs: []
  type: TYPE_NORMAL
- en: 'Execute the following command again and we''re all up to date:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Seeding the database with test data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we have an empty database, let''s fill it with some test data. To
    do this, we''ll need to create a method that we will call after our database creation:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a folder in your project called `Data`. In the folder, add a class called
    `DbInitializer.cs`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2b63b0ba-d7ba-45ac-ae61-4608c3ede9b3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The class has an `Initialize` method that takes our `ResearchContext` as a
    parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `Initialize` method, we first call the `Database.EnsureCreated` method
    to make sure the database exists and creates it if not:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Next up, we do a quick `Linq` query to check if the `ResearchLinks` table has
    any records. The argument is that if the table is empty, we want to add some testing
    data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we create an array of the `Research` model and add some test entries.
    The URLs can be anything you like. I just went with a few of the most common sites
    out there:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'With our array populated, we loop through it and add the entries to our context,
    and finally call the `SaveChanges` method to persist the data to the database:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Throwing it all together looks as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Creating the controller
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Controllers are a fundamental building block of how ASP.NET Core MVC applications
    are built. The methods inside a controller are referred to as actions. Therefore,
    we can say that a controller defines a set of actions. The actions handle requests
    and these requests are mapped to the specific actions through routing.
  prefs: []
  type: TYPE_NORMAL
- en: 'To read more on the topic of controllers and actions see the Microsoft document
    at—[https://docs.microsoft.com/en-us/aspnet/core/mvc/controllers/actions](https://docs.microsoft.com/en-us/aspnet/core/mvc/controllers/actions).
    To read more on routing, see the Microsoft document at—[https://docs.microsoft.com/en-us/aspnet/core/mvc/controllers/routing](https://docs.microsoft.com/en-us/aspnet/core/mvc/controllers/routing).
    Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click on the Controllers folder and choose Add | Controller.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'On the scaffolding screen, choose MVC Controller with views, using Entity Framework
    and click Add:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/fbe44f31-f1e7-4d04-b83e-38d436526add.png)'
  prefs: []
  type: TYPE_IMG
- en: 'On the next screen, select our Research model for the Model class, and ResearchContext
    for the Data context class. You can leave the rest as is, unless you''d like to
    change the Controller name:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/550c21a5-5226-43fa-bab6-9d734e177543.png)'
  prefs: []
  type: TYPE_IMG
- en: A brief look at the created controller shows us that we now have our basic **create,
    read, update, and delete** (**CRUD**) tasks in place. Now, it's time for the main
    event.
  prefs: []
  type: TYPE_NORMAL
- en: Running the application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before we jump in and run the application, let''s make sure our new page is
    easily accessible. The simplest way to do that is to just set it as the default
    home page:'
  prefs: []
  type: TYPE_NORMAL
- en: Have a look at the `Configure` method in `Startup.cs`. You'll notice that the
    default route is specified as the `Home` controller.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Simply change the controller to your `Research` controller as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Lastly, make sure that your `Main` method looks as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, hit *Ctrl* + *F5* to run the application and see the fruits of your labor:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/8a2e80a8-dbe2-46fa-84df-b0131fc6b20e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As you can see, our test entries are available for us to play with. Let''s
    have a quick look at the available functionality:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on Create New to see the entry form for our links:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/6710c483-2ce0-44e6-ae0d-e21ea64ab2c8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Enter some interesting data and hit the Create button. You''ll be redirected
    back to the list view and see our new entry added to the bottom of the list:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/365b3bf5-25e0-4309-a067-292f5d89442b.png)'
  prefs: []
  type: TYPE_IMG
- en: Next to each item, you have the option to Edit, Details, or Delete. Go ahead
    and play around with the functionality. There is quite a bit one could do to improve
    the user experience, such as filling in the date field automatically. I'll leave
    it to your own creativity to improve the user experience as you see fit.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying the application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Once your application is ready for deployment, there are a few options available
    that you can use:'
  prefs: []
  type: TYPE_NORMAL
- en: Microsoft Azure App Service
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Custom targets (IIS, FTP)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: File System
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Import Profile
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Under the Build menu item in Visual Studio, click on Publish WebResearch (or
    whatever you decided to name your project):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a754b01a-0589-4940-9be3-51b77c082c24.png)'
  prefs: []
  type: TYPE_IMG
- en: You should be presented with a screen showing you the available publishing options.
    Let's take a closer look.
  prefs: []
  type: TYPE_NORMAL
- en: Microsoft Azure App Service
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Microsoft Azure takes care of all the infrastructure requirements needed to
    create and maintain a web application. This means that we developers don't need
    to worry about things such as server management, load balancing, or security.
    With the platform being improved and extended almost daily, we can also be fairly
    confident that we'll have the latest and greatest functionality available for
    us.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''re not going to go into too much detail about Azure App Services as it
    can turn into a whole book by itself, but we can surely have a look at the required
    steps to publish our web app to this cloud platform:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Select Microsoft Azure App Service as your publishing target. If you have an
    existing site that you want to publish to, you can choose Select Existing. For
    now, I''ll assume you need to Create New:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/6679cfcf-e321-4982-9717-8260071d4cd7.png)'
  prefs: []
  type: TYPE_IMG
- en: After hitting the OK button, Visual Studio will contact Azure with your logged
    in Microsoft account, which in turn will check if you have an Azure account and
    will return the available service details.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: I created a trial account for this blueprint with no specific details set up
    beforehand, and as you can see from the following screenshot, Azure will recommend
    an available App Name and App Service Plan for you.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Resource Group is optional and will get a unique group name if you do not
    specify anything:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/97ddd007-6866-4051-acee-7513d341a6b4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You can change the type of application you want to publish under the Change
    Type option. In our case, we''ll obviously go with Web App:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/3bd00331-f7b3-4184-9254-904fa2e15c6b.png)'
  prefs: []
  type: TYPE_IMG
- en: Click on Services on the left-hand side to see the services that will be set
    up with your publication.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The first box shows any Recommended resource types your application might benefit
    from. In our case, an SQL Database is recommended, and we do need it, so we''ll
    simply add it by hitting the Add (+) button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f2dd708e-0062-4717-98c4-78b6fd209fbd.png)'
  prefs: []
  type: TYPE_IMG
- en: Azure will take care of the SQL installation, but we need to give it the required
    information, such as which server to use if you already have one on your profile,
    or to create a new one if you haven't.
  prefs: []
  type: TYPE_NORMAL
- en: We will configure a new SQL Server in this case. Click the New button next to
    the SQL Server drop-down to open the Configure SQL Server form. Azure will provide
    a recommended name for the server. Although you can provide your own, the chances
    are that the Server Name will most likely not be available, so I recommend that
    you just use what they recommend.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Provide an Administrator Username and Administrator Password for the server
    and hit OK:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/17a77621-ba4d-4b85-8d29-f3df9a849bb0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Doing this will bring you back to the Configure SQL Database form, where you
    need to specify the Database Name as well as the Connection String Name:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/af3e06cd-b9b6-41bb-bb13-a3d2f49639e3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Take a look again at the Create App Service form. You will notice that the
    SQL Database has been added to the Resources you''ve selected and configured section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/270f697b-ced5-4bb0-9851-396cf1df6ba8.png)'
  prefs: []
  type: TYPE_IMG
- en: We can now go back to the Hosting tab, which will show you an overview of what
    will happen when you hit the Create button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'As shown in the following screenshot, the following three Azure resources will
    be created:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: App Service
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: App Service Plan
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: SQL Server
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/221417e4-4eaa-4d99-a967-e96bb1b27c0d.png)'
  prefs: []
  type: TYPE_IMG
- en: After creation, we can publish to our new Azure profile by hitting the Publish
    button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You will see some Build messages in your output window and should end up with
    the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'You can have a look at your Dashboard on the Azure Portal ([portal.azure.com](http://portal.azure.com)),
    which will show you the resources enabled on your account due to our Service creation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/fc0ef22f-1575-43a1-a14c-c7b200546a93.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The published app will open up in your browser and you''ll most likely see
    an error message. By default, you won''t see much detail around the error, but
    at least Azure gives you some pointers to get the error details by setting your
    `ASPNETCORE_ENVIRONMENT` environment variable to `Development` and restarting
    the application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/9e080081-484d-49ce-a907-f62bd608ec35.png)'
  prefs: []
  type: TYPE_IMG
- en: 'When you log in to your Azure portal, you can navigate to your App Service
    and then in the Application settings, add the ASPNETCORE_ENVIRONMENT setting with
    the value of `Development` and restart your app:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d4f6b70f-748c-4076-8c3a-6843c677f5a4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, we can refresh the site, and we should see a bit more detail about the
    underlying error:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '>![](img/d7ca2155-3f60-4f21-b193-c03bc5ac7b92.png)'
  prefs: []
  type: TYPE_NORMAL
- en: Ah, yes! We are still pointing to our local db, and we don't have access to
    that from the publish environment. Let's update our `appsettings.json` to point
    to our Azure db.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Navigate to the SQL Server from your Azure dashboard and then to Properties.
    On the right-hand pane, you should see an option to Show database connection strings:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/97d0b1e4-52a7-48a3-be6f-52f04569964d.png)'
  prefs: []
  type: TYPE_IMG
- en: Copy the ADO.NET connectionstring, head back to your code, and update the CONNECTION
    STRINGS entry in the `appsettings.json` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Republish the app and you should be good to go.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Custom targets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The next publishing option is generally referred to as custom targets.
  prefs: []
  type: TYPE_NORMAL
- en: 'This option basically includes anything that is not Azure or a local filesystem.
    After hitting the OK button, you get to choose the publish method:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0347a6c8-3b70-48ff-b933-6f8656fc5ee8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'There are four publish methods, or custom targets, available with each having
    its own requirements:'
  prefs: []
  type: TYPE_NORMAL
- en: FTP
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Web Deploy
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Web Deploy Package
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: File System
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We also have a Settings tab, which is applicable to all four methods. Let''s
    have a quick look at what our options are there:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/08e44580-1306-4231-aeb8-52481aa5781c.png)'
  prefs: []
  type: TYPE_IMG
- en: The Configuration option can be set to either Debug or Release.
  prefs: []
  type: TYPE_NORMAL
- en: With Debug, your generated files are debug-able, meaning that it is possible
    to hit specified break points. But it also means that there is a performance decrease.
  prefs: []
  type: TYPE_NORMAL
- en: With Release, you won't be able to debug on the fly, but will have an increase
    in performance as your application is fully optimized.
  prefs: []
  type: TYPE_NORMAL
- en: In our case, the only available target framework is **netcoreapp2.0**, but in
    standard .NET applications, this is where you could set the target to .NET 3.5
    or .NET 4.5, or whichever is available.
  prefs: []
  type: TYPE_NORMAL
- en: You can then also specify the **Target Runtime**, choose to have Visual Studio
    clean up the destination folder, and specify a connection string specifically
    for runtime.
  prefs: []
  type: TYPE_NORMAL
- en: As mentioned previously, these settings are applicable to all four publishing
    methods, which we will have a look at now.
  prefs: []
  type: TYPE_NORMAL
- en: FTP
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The FTP publish method enables you to publish to a hosted FTP location. For
    this option, you need to provide the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Server URL
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Site path
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: User name
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Password
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Destination URL
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'It also allows you to validate the connection from the entered details:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fe6fae52-9c71-4413-98d0-20d74f83bf7b.png)'
  prefs: []
  type: TYPE_IMG
- en: Web Deploy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Looking at the forms of both Web Deploy as well as FTP, you could be excused
    to believe they''re the same thing. Well, both result in basically the same thing
    in that you publish directly to a hosted site, but with Web Deploy you get quite
    a few extra benefits, including the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Web Deploy compares the source with the destination and only syncs required
    changes, resulting in a significant decrease in publish time compared to FTP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Even though FTP also has its secure cousins SFTP and FTPS, Web Deploy always
    supports secure transfers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Proper database support, which enables you to apply SQL scripts during the sync
    process
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Publish screen looks as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2e807d75-8688-447d-b711-fe265de0ff5d.png)'
  prefs: []
  type: TYPE_IMG
- en: Web Deploy Package
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Web Deploy Package option is used to create a deployment package that you
    can use to install your application wherever you choose afterwards. Refer to the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/44899422-b9ad-4999-a323-d0cea6f988d1.png)'
  prefs: []
  type: TYPE_IMG
- en: File System
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Used by old school developers the world over, mainly due to the fact that we
    still don''t really trust some of the available tools enough, this option allows
    you to publish to a folder location of your choice, and then go and copy it over
    to the publish environment manually:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ddc5b330-fa64-46b4-852b-07584b6f2fb3.png)'
  prefs: []
  type: TYPE_IMG
- en: Folder
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Just to show you how popular it is for developers to still have that control
    over the published code, we have two paths that end up with publishing to a folder
    location.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once again, just specify the folder location, and hit OK:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/54b6e731-3e2d-47b7-a692-2e5baf0f5c38.png)'
  prefs: []
  type: TYPE_IMG
- en: Import Profile
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Import Profile method is not an actual publishing method, but rather a
    simple option to import a previously saved profile, either from a backup or possibly
    used to share a publishing profile between a team of developers:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c102484f-1420-449e-a608-483b228adf10.png)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we've taken a bit of a guided tour around the Entity Framework
    Core neighborhood. We started off at the museum to look at the history of Entity
    Framework, before visiting the schools district to discuss some of the differences
    between the Code-First, Model-First, and Database-First implementation approaches.
    There was even a quick visit from TechNet, who offered some ideas around designing
    a database.
  prefs: []
  type: TYPE_NORMAL
- en: Afterwards, we spent some time building our own EF Core solution and looked
    at the various ways of deploying our application. We also had a look at populating
    our new building with some test data to see how it will hold up once opened up
    to the public.
  prefs: []
  type: TYPE_NORMAL
- en: The tour concluded with a visit to the distribution district to get an overview
    of the available deployment options.
  prefs: []
  type: TYPE_NORMAL
- en: The visit was far too brief to cover all that is available and possible in the
    world of Entity Framework Core as it is a framework with a large community constantly
    working on improving and extending its already extensive functionality.
  prefs: []
  type: TYPE_NORMAL
- en: It is great to know that the development community does not settle for any mediocrity
    and constantly works towards improving and extending functionality, such as Entity
    Framework, which might seem quite mature and extensive already.
  prefs: []
  type: TYPE_NORMAL
