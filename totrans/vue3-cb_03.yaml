- en: Data Binding, Form Validations, Events, and Computed Properties
  prefs: []
  type: TYPE_NORMAL
- en: Data is the most valuable asset in the world right now, and knowing how to manage
    it is a must. In Vue, we have the power to choose how we can gather this data,
    manipulate it as we want, and deliver it to the server.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will learn more about the process of data manipulation and
    data handling, form validations, data filtering, how to display this data to the
    user, and how to present it in a way that is different from what we then have
    inside our application.
  prefs: []
  type: TYPE_NORMAL
- en: We will learn how to use the `vue-devtools` to go deep inside the Vue components
    and see what is happening to our data and application.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we''ll cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating the "hello world" component
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating an input form with two-way data binding
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding an event listener to an element
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Removing the v-model from the input
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a dynamic to-do list
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating computed properties and exploring how they work
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying cleaner data and text with custom filters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding form validation with Vuelidate
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating filters and sorters for a list
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating conditional filtering to sort list data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding custom styles and transitions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using `vue-devtools` to debug your application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will be using **Node.js** and **Vue CLI****.**
  prefs: []
  type: TYPE_NORMAL
- en: 'Attention, Windows users—you need to install an `npm` package called `windows-build-tools` to
    be able to install the following required packages. To do this, open PowerShell
    as administrator and execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '`> npm install -g windows-build-tools`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To install **Vue CLI**, you need to open Terminal (macOS or Linux) or Command
    Prompt/PowerShell (Windows) and execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Creating the "hello world" component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A Vue application is a combination of various components, bound together and
    orchestrated by the Vue framework. Knowing how to make your component is important. Each
    component is like a brick in the wall and needs to be made in a way that, when
    placed, doesn't end up needing other bricks to be reshaped in different ways around
    it. We are going to learn how to make a base component, with some important principles
    that focus on organization and clean code.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The pre-requisite for this recipe is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Node.js 12+
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Node.js global objects that are required are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`@vue/cli`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@vue/cli-service-global`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To start our component, we can create our Vue project with Vue CLI as learned
    in the 'Creating your first project with Vue CLI' recipe in [C](fef91898-2101-4746-b1eb-8df0af8ac6fc.xhtml)[hapter
    2](fef91898-2101-4746-b1eb-8df0af8ac6fc.xhtml),*Introducing TypeScript and the
    Vue Ecosystem*, or start a new one.
  prefs: []
  type: TYPE_NORMAL
- en: 'To start a new one, open Terminal (macOS or Linux) or Command Prompt/PowerShell (Windows)
    and execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The **command-line interface** (**CLI**) will ask some questions that will
    help with the creation of the project. You can use the arrow keys to navigate,
    the *Enter* key to continue, and the *spacebar* to select an option. Choose the **`default`** option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s create our first "hello world" component, following these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Let's create a new file called `CurrentTime.vue` file in the `src/components`
    folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'On this file, we will start with the `<template>` part of our component. It
    will be a shadowed-box card that will display the current date formatted:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we need to create the `<script>` part. We will start with the `name` property.
    This will be used when debugging our application with `vue-devtools` to identify
    our component and helps the **integrated development environment** (**IDE**) too.
    For the `getCurrentDate` computed property, we will create a `computed` property
    that will return the current date, formatted by the `Intl` browser function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'For styling our box, we need to create a `style.css` file in the `src` folder,
    then add the `cardBox` style to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `App.vue` file, we need to import our component to be able to see it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `main.js` file, we need to import the `style.css` file to be included
    in the Vue application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'To run the server and see your component, you need to open Terminal (macOS
    or Linux) or Command Prompt/PowerShell (Windows) and execute the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is your component rendered and running:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/b99bd21c-bcb6-42d3-9983-ab6b05c8c47b.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Vue component works almost like the Node.js packages. To use it in your
    code, you need to import the component and then declare it inside the `components`
    property on the component you want to use.
  prefs: []
  type: TYPE_NORMAL
- en: Like a wall of bricks, a Vue application is made of components that call and
    use other components.
  prefs: []
  type: TYPE_NORMAL
- en: For our component, we used the `Intl.DateTimeFormat` function, a native function,
    which can be used to format and parse dates to declared locations. To get the
    local format, we used the `navigator` global variable.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can find more information about `Intl.DateTimeFormat` at [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat).
  prefs: []
  type: TYPE_NORMAL
- en: You can find more information about Vue components at [https://v3.vuejs.org/guide/single-file-component.html](https://v3.vuejs.org/guide/single-file-component.html)
  prefs: []
  type: TYPE_NORMAL
- en: Creating an input form with two-way data binding
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To gather data on the web, we use HTML form inputs. In Vue, it's possible to
    use a two-way data binding method, where the value of the input on the **Document
    Object Model** (**DOM**) is passed to the JavaScript—or vice versa.
  prefs: []
  type: TYPE_NORMAL
- en: This makes the web form more dynamic, giving you the possibility to manage,
    format, and validate the data before saving or sending the data back to the server.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The pre-requisite for this recipe is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Node.js 12+
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Node.js global objects that are required are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`@vue/cli`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@vue/cli-service-global`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To start our component, we can create our Vue project with Vue CLI, as learned in
    the '*Creating your first project with Vue CLI*' recipe in [Chapter 2](fef91898-2101-4746-b1eb-8df0af8ac6fc.xhtml),* Introducing
    TypeScript and the Vue Ecosystem*, or use the project from the '*Creating the
    "hello world" component*' recipe.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s follow these steps to create an input form with a two-way data
    binding:'
  prefs: []
  type: TYPE_NORMAL
- en: Let's create a new file called `TaskInput.vue` in the `src/components` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In this file, we''re going to create a component that will have a text input
    and a display text. This text will be based on what is typed on the text input.
    At the `<template>` part of the component, we need to create an HTML input and
    a `mustache` variable that will receive and render the data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, on the `<script>` part of the component, we will name it and add the task
    to the `data` property. As the data always needs to be a returned `Object`, we
    will use an arrow function to return an `Object` directly:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'We need to add some style to this component. In the `<style>` part of the component,
    we need to add the `scoped` attribute so that the style remains only bound to
    the component and won''t mix with other **Cascading Style Sheets** (**CSS**) rules:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we need to import this component into our `App.vue` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'To run the server and see your component, you need to open Terminal (macOS
    or Linux) or Command Prompt/PowerShell (Windows) and execute the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is your component rendered and running:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/b95c0f20-649c-45cf-a412-60aa5e1ff24c.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When you create an HTML `input` element and add a `v-model` to it, you are passing
    a directive, built into Vue, that checks the input type and gives us sugar syntax
    for the input. This handles the update of the value of the variable and the DOM.
  prefs: []
  type: TYPE_NORMAL
- en: This model is what is called two-way data binding. If the variable is changed
    by the code, the DOM will re-render, and if it's changed by the DOM via user input,
    such as the `input-form`, the JavaScript code can then execute a function.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Find more information about the form input bindings at [https://v3.vuejs.org/guide/forms.html](https://v3.vuejs.org/guide/forms.html)
  prefs: []
  type: TYPE_NORMAL
- en: Adding an event listener to an element
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The most common method of parent-child communication in Vue is through props
    and events. In JavaScript, it's common to add event listeners to elements of the
    DOM tree to execute functions on specific events. In Vue, it's possible to add
    listeners and name them as you wish, rather than sticking to the names that exist
    on the JavaScript engine.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we are going to learn how to create custom events and how to
    emit then.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The pre-requisite for this recipe is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Node.js 12+
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Node.js global objects that are required are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`@vue/cli`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@vue/cli-service-global`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To start our component, we can create our Vue project with Vue CLI, as learned
    in the '*Creating your first project with Vue CLI*' recipe in [Chapter 2](fef91898-2101-4746-b1eb-8df0af8ac6fc.xhtml)*, Introducing
    TypeScript and the Vue Ecosystem*, or use the project from the '*Creating an input
    form with two-way data binding*' recipe.
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow these steps to add an event listener in an element on Vue:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new component or open the `TaskInput.vue` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'At the `<template>` part, we are going to add a button element and add an event
    listener to the button click event with the `v-on` directive. We will remove the
    `{{ task }}` variable from the component, as from now on it will be emitted and
    won''t be displayed on the component anymore:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'On the `<script>` part of the component, we need to add a method to handle
    the click event. This method will be named `addTask`. The method will emit an
    event called `add-task` and send the task on the data. After that, the task on
    the component will be reset:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'On the `App.vue` file, we need to add an event listener bind on the component.
    This listener will be attached to the `add-task` event. We will use the shortened
    version of the `v-on` directive, `@`. When it''s fired, the event will call the
    method, `addNewTask`, which will send an alert that a new task was added:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s create the `addNewTask` method. This will receive the task as a
    parameter and will show an alert to the user, displaying that the task was added:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'To run the server and see your component, you need to open Terminal (macOS
    or Linux) or Command Prompt/PowerShell (Windows) and execute the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is your component rendered and running:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/80b3e48c-93f9-41ef-b73b-58aff9641f67.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The HTML events are read by Vue with the `v-on` event handling directive. When
    we attached the `v-on:click` directive to the button, we added a listener to the
    button so that a function will be executed when the user clicks on it.
  prefs: []
  type: TYPE_NORMAL
- en: The function is declared on the component methods. That function, when called,
    will emit an event, denoting that any component using this component as a child
    can listen to it with the `v-on` directive.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can find more information about event handling at [https://v3.vuejs.org/guide/events.html](https://v3.vuejs.org/guide/events.html)
  prefs: []
  type: TYPE_NORMAL
- en: Removing the v-model from the input
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What if I told you that behind the magic of the `v-model` there is a lot of
    code that makes our magic sugar syntax happen? What if I told you that the rabbit
    hole can go deep enough that you can control everything that can happen with the
    events and values of the inputs?
  prefs: []
  type: TYPE_NORMAL
- en: We will learn how to extract the sugar syntax of the `v-model` directive and
    transform it into the base syntax behind it.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The pre-requisite for this recipe is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Node.js 12+
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Node.js global objects that are required are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`@vue/cli`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@vue/cli-service-global`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To start our component, we can create our Vue project with Vue CLI, as learned
    in the '*Creating your first project with Vue CLI*' recipe in [Chapter 2](fef91898-2101-4746-b1eb-8df0af8ac6fc.xhtml)*, Introducing
    TypeScript and the Vue Ecosystem*, or use the project from the '*Adding an event
    listener to an element'* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following steps, we will remove the `v-model` directive sugar syntax
    from the input:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `TaskInput.vue` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'At the `<template>` block of the component, find the `v-model` directive. We''ll
    remove the `v-model` directive. Then, we need to add a new bind to the input called
    `v-bind:value` or the shortened version, `:value`, and an event listener to the
    HTML `input` element. We need to add an event listener to the `input` event with
    the `v-on:input` directive or the shortened version, `@input`. The input bind
    will receive the task value as a parameter and the event listener will receive
    a value attribution, where it will make the task variable equal the value of the
    event value:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'To run the server and see your component, you need to open Terminal (macOS
    or Linux) or Command Prompt/PowerShell (Windows) and execute the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As a sugar syntax, the `v-model` directive does the magic of automatically declaring
    the bind and the event listener to the element for you, but the side effect is
    that you don't have full control over what can be achieved.
  prefs: []
  type: TYPE_NORMAL
- en: As we've seen, the bound value can be a variable, a method, a computed property,
    or a Vuex getter, for example. And for the event listener, it can be a function
    or a direct declaration of a variable assignment. When an event is emitted and
    passed to Vue, the `$event` variable is used to pass the event. In this case,
    as in normal JavaScript, to catch the value of an input, we need to use the `event.target.value` value.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can find more information about event handling at [https://v3.vuejs.org/guide/events.html](https://v3.vuejs.org/guide/events.html)
  prefs: []
  type: TYPE_NORMAL
- en: Creating a dynamic to-do list
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the first projects every programmer creates when learning a new language
    is a to-do list. Doing this allows us to learn more about the language process
    around the manipulation of states and data.
  prefs: []
  type: TYPE_NORMAL
- en: We are going to make our to-do list using Vue. We'll use what we have learned
    and created in the previous recipes.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The pre-requisite for this recipe is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Node.js 12+
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Node.js global objects that are required are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`@vue/cli`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@vue/cli-service-global`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are some basic principles involved in making a to-do application—it must
    have a list of tasks; those tasks can be marked as done and undone, and the list
    can be filtered and sorted. Now, we are going to learn how to take the tasks and
    add them to the task list.
  prefs: []
  type: TYPE_NORMAL
- en: To start our component, we can create our Vue project with Vue CLI, as learned
    in the '*Creating your first project with Vue CLI*' recipe in [Chapter 2](fef91898-2101-4746-b1eb-8df0af8ac6fc.xhtml)*, Introducing
    TypeScript and the Vue Ecosystem*, or use the project from the '*Removing the
    v-model from the input*' recipe.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, follow these steps to create a dynamic to-do list with Vue and the previous
    recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `App.vue` file, we will create our array of tasks. This task will be
    filled every time the `TaskInput.vue` component emits a message. We will add an
    object to this array with the task, and the current date when the task was created.
    The date when the task was finished will be undefined for now. To do this, in
    the `<script>` part of the component, we need to create a method that receives
    a task and add this task with the current date to the `taskList` array:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we need to render this list on the `<template>` part. We will iterate
    the list of tasks using the `v-for` directive of Vue. This directive, when we
    use it with an array, gives us access to two properties—the item itself and the
    index of the item. We will use the item to render it and the index to make the
    key of the element for the rendering. We need to add a checkbox that, when marked,
    calls a function that changes the status of the task and the display when the
    task was done:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: It's always important to remember that the key in the iterator needs to be unique.
    This is needed because the render function needs to knows which elements were
    changed. In the example, we added the `Math.random()` function to the index to
    generate a unique key, because the index of the first elements of the array is
    always the same number when the number of elements is reduced.
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to create the `changeStatus` function on the `methods` property of
    the `App.vue`. This function will receive the index of the task as a parameter,
    then go to the array of tasks and change the `finishedAt` property, which is our
    marker for when a task is done:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we need to add the task text to the left-hand side of the screen. On the
    `<style>` part of the component, we will make it scoped and add the custom class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'To run the server and see your component, you need to open Terminal (macOS
    or Linux) or Command Prompt/PowerShell (Windows) and execute the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is your component rendered and running:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/6f496750-540a-434a-9446-11731175ea7c.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As we received the emitted message from the component, we hydrated the message
    with more data and pushed it to a local array variable.
  prefs: []
  type: TYPE_NORMAL
- en: In the template we iterate this array, making it a list of tasks. This displays
    the tasks we need to do, the checkbox to mark when the task is done, and the time
    that a task was done.
  prefs: []
  type: TYPE_NORMAL
- en: When the user clicks on the checkbox, it executes a function, which marks the
    current task as done. If the task is already done, the function will set the `finishedAt`
    property as `undefined`.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can find more information about list rendering at [https://v3.vuejs.org/guide/list.html#mapping-an-array-to-elements-with-v-for](https://v3.vuejs.org/guide/list.html#mapping-an-array-to-elements-with-v-for)
  prefs: []
  type: TYPE_NORMAL
- en: You can find more information about conditional rendering at [https://v3.vuejs.org/guide/conditional.html#v-if](https://v3.vuejs.org/guide/conditional.html#v-if)
  prefs: []
  type: TYPE_NORMAL
- en: You can find more information about `Math.random` at [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random).
  prefs: []
  type: TYPE_NORMAL
- en: Creating computed properties and understanding how they work
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Imagine that every time you have to fetch manipulated data, you need to execute
    a function. Imagine you need to get specific data that needs to go through some
    process and you need to execute it through a function every time. This type of
    work would not be easy to maintain. Computed properties exist to solve these problems. Using
    computed properties makes it easier to obtain data that needs preprocessing or
    even caching without executing any other external memorizing function.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The pre-requisite for this recipe is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Node.js 12+
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Node.js global objects that are required are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`@vue/cli`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@vue/cli-service-global`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will continue our to-do list project or you can create a new Vue project
    with Vue CLI, as learned in the '*Creating your first project with Vue CLI*' recipe
    in [Chapter 2](fef91898-2101-4746-b1eb-8df0af8ac6fc.xhtml)*, Introducing TypeScript
    and the Vue Ecosystem*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, follow these steps to create a computed property and understand how it
    works:'
  prefs: []
  type: TYPE_NORMAL
- en: 'On the `App.vue` file, at the `<script>` part, we will add a new property between
    `data` and `method`, called `computed`. This is where the `computed` properties
    will be placed. We will create a new computed property called `displayList`, which
    will be the one that will be used to render the final list on the template:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: The `displayList` property, for now, is just returning a cached value of the
    variable, and not the direct variable as itself.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, on the `<template>` part, we need to change where the list is being fetched:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'To run the server and see your component, you need to open Terminal (macOS
    or Linux) or Command Prompt/PowerShel*l* (Windows) and execute the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When using the `computed` property to pass a value to the template, this value
    is now cached. This means we will only trigger the rendering process when the
    value is updated. At the same time, we made sure that the template doesn't use
    the variable for rendering so that it can't be changed on the template, as it
    is a cached copy of the variable.
  prefs: []
  type: TYPE_NORMAL
- en: Using this process, we get the best performance because we won't waste processing
    time re-rendering the DOM tree for changes that have no effect on the data being
    displayed. This is because if something changes and the result is the same, the
    `computed` property caches the result and won't update the final result.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can find more information about computed properties at [https://v3.vuejs.org/guide/computed.html.](https://v3.vuejs.org/guide/computed.html)
  prefs: []
  type: TYPE_NORMAL
- en: Displaying cleaner data and text with custom filters
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sometimes you may find that the user, or even you, cannot read the Unix timestamp
    or other `DateTime` formats. How can we solve this problem? When rendering the
    data in Vue, it's possible to use what we call filters.
  prefs: []
  type: TYPE_NORMAL
- en: Imagine a series of pipes through which data flows. Data enters each pipe in
    one shape and exits in another. This is what filters in Vue look like. You can
    place a series of filters on the same variable, so it gets formatted, reshaped,
    and ultimately displayed with different data while the code remains the same.
    The code of the initial variable is immutable in those pipes.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The pre-requisite for this recipe is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Node.js 12+
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Node.js global objects that are required are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`@vue/cli`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@vue/cli-service-global`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will continue our to-do list project or you can create a new Vue project
    with Vue CLI, as learned in the '*Creating your first project with Vue CLI*' recipe
    in [Chapter 2](fef91898-2101-4746-b1eb-8df0af8ac6fc.xhtml)*, Introducing TypeScript
    and the Vue Ecosystem*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow these steps to create your first custom Vue filter:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `App.vue` file, at the `<script>` part, in the methods, create a `formatDate`
    function inside this property. This function will receive `value` as a parameter
    and enters the filter pipe. We can check if the value is a number because we know
    that our time is based on the Unix timestamp format. If it''s a number, we will
    format based on the current browser location and return that formatted value.
    If the passed value is not a number, we just return the passed value:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'On the `<template>` part of the component, we need to pass the variable to
    the filter method. To do that, we need to find the `taskItem.finishedAt` property
    and make it the parameter of the `formatDate` method. We will add some text to
    denote that the task was `Done at:` at the beginning of the date:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'To run the server and see your component, open Terminal (macOS or Linux) or Command
    Prompt/PowerShell (Windows) and execute the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is your component rendered and running:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/f6bf169d-8204-4639-b374-a87b46760d46.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Filters are methods that receive a value and must return a value to be displayed
    on the `<template>` section of the file, or used in a Vue property.
  prefs: []
  type: TYPE_NORMAL
- en: When we pass the value to the `formatDate` method, we know that it's a valid
    Unix timestamp, so it was possible to invoke to a new `Date` class constructor,
    passing the `value` as a parameter because the Unix timestamp is a valid date
    constructor.
  prefs: []
  type: TYPE_NORMAL
- en: The code behind our filter is the `Intl.DateTimeFormat` function, a native function
    that can be used to format and parse dates to declared locations. To get the local
    format, we use the `navigator` global variable.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can find more information about `Intl.DateTimeFormat` at [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat).
  prefs: []
  type: TYPE_NORMAL
- en: Adding form validation with Vuelidate
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Originally, JavaScript was used just for validating HTML forms before sending
    these to servers; we didn''t have any JavaScript frameworks or the JavaScript
    ecosystem that we have today. However, one thing remains the same: form validation
    is to be done first by the JavaScript engine before sending the forms to the server.'
  prefs: []
  type: TYPE_NORMAL
- en: We will learn how to use one of the most popular libraries on the Vue ecosystem
    to validate our input form before sending it.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The pre-requisite for this recipe is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Node.js 12+
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Node.js global objects that are required are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`@vue/cli`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@vue/cli-service-global`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will continue our to-do list project or you can create a new Vue project
    with Vue CLI, as learned in the '*Creating your first project with Vue CLI*' recipe
    in [Chapter 2](fef91898-2101-4746-b1eb-8df0af8ac6fc.xhtml)*, Introducing TypeScript
    and the Vue Ecosystem*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, follow these steps to add a form validation into your Vue project, and
    your form component:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To install **Vuelidate**, you need to open Terminal (macOS or Linux) or Command
    Prompt/PowerShell (Windows) and execute the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'To add the Vuelidate plugin to the Vue application, we need to import and add
    it to Vue in the `main.js` file in the `src` folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `TaskInput.vue` file, we will add a new property to the Vue object.
    This property is interpreted by the new plugin that was installed. At the end
    of the object, we will add the `validations` property, and inside that property,
    we will add the name of the model*.* The model is a direct name of the data or
    computed property that the plugin will check for validation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we need to import the rules that already exist on the plugins that we
    want to use—those will be `required` and `minLength`. After the import, we will
    add those rules to the model:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we need to add the validation before emitting the event. We will use the `$touch` built-in
    function to tell the plugin that the field was touched by the user and check for
    validation. If there are any fields that had any interaction with the user, the
    plugin will set the flags accordingly. If there are no errors, we will emit the
    event and we will reset the validation with the `$reset` function. To do this,
    we will change the `addTask` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'To alert the user that there are some errors on the field, we will make the
    input change the style to a complete red border and have a red text. To do this,
    we will need to make a conditional class on the input field. This will be attached
    directly to the model''s `$error` property:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'For the class, we can create a `fieldError` class in the `style.css` file in the
    `src` folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'To run the server and see your component, you need to open Terminal (macOS
    or Linux) or Command Prompt/PowerShell (Windows) and execute the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is your component rendered and running:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/284f804c-a701-4420-8b1b-ae7e4aafb1b9.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Once installed, the Vuelidate plugin adds a new `$v` property to the Vue prototype and
    checks for a new object property in the Vue object, called `validations`. When
    this property is defined and has some rules, the plugins check for the model's
    rules on each update.
  prefs: []
  type: TYPE_NORMAL
- en: Using this new Vue prototype, we can check inside our code for the errors inside
    the rules we defined, and execute functions to tell the plugin that the field
    was touched by the user to flag as a dirty field or reset it. Using those features,
    we're able to add a new conditional class based on the rules that we defined on
    the task model.
  prefs: []
  type: TYPE_NORMAL
- en: The task model is required and has a minimum of five characters. If those rules
    are not met, the plugin will mark the model with an error. We take this error
    and use it to show the user that the task field has an active error. When the
    user fulfills the requirements, the display of the error disappears and the event
    can be emitted.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can find more information about Vuelidate at [https://vuelidate.netlify.com/](https://vuelidate.netlify.com/).
  prefs: []
  type: TYPE_NORMAL
- en: You can find more information about class and style bindings at [https://v3.vuejs.org/guide/class-and-style.html](https://v3.vuejs.org/guide/class-and-style.html)
  prefs: []
  type: TYPE_NORMAL
- en: Creating filters and sorters for a list
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When working with lists, it's common to find yourself with raw data. Sometimes,
    you need to get this data filtered so that it's readable for the user. To do this,
    we need a combination of the computed properties to form a final set of filters
    and sorters.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to create a simple filter and sorter that
    will control our initial to-do task list.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The pre-requisite for this recipe is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Node.js 12+
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Node.js global objects that are required are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`@vue/cli`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@vue/cli-service-global`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will continue our to-do list project or you can create a new Vue project
    with Vue CLI, as learned in the '*Creating your first project with Vue CLI*' recipe
    in [Chapter 2](fef91898-2101-4746-b1eb-8df0af8ac6fc.xhtml)*,** Introducing TypeScript
    and the Vue Ecosystem*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow these steps to add a set of filters and sorts into your list:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `App.vue` file, at the `<script>` part, we will add new computed properties;
    those will be for sorting and filtering. We will add three new computed properties,
    `baseList`, `filteredList`, and `sortedList`. The `baseList` property will be
    our first manipulation. We will add an `id` property to the task list via `Array.map`.
    As JavaScript arrays start at zero, we will add `1` to the index of the array.
    The `filteredList` property will filter the `baseList` property and return just
    the unfinished tasks, and the `sortedList` property will sort the `filteredList` property
    so that the last added `id` property will be the first displayed to the user:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'On the `<template>` part, we will add the `Task ID` as an indicator and change
    how the `changeStatus` method sends the argument. Because now the index is mutable,
    we can''t use it as a variable; it''s just a temporary index on the array. We
    need to use the task `id`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'On the `changeStatus` method, we need to update our function too. As the index
    now starts at `1`, we need to decrease the index of the array by one to get the
    real index of the element before updating it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'To run the server and see your component, you need to open Terminal (macOS
    or Linux) or Command Prompt/PowerShell (Windows) and execute the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is your component rendered and running:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/ac7a3ae0-6182-43c6-9398-c6de789ffe45.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `computed` properties worked together as a cache for the list and made
    sure there were no side effects on the manipulation of the elements:'
  prefs: []
  type: TYPE_NORMAL
- en: At the `baseList` property, we created a new array with the same tasks but added
    a new `id` property to the task.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At the `filteredList` property, we took the `baseList` property and only returned
    the tasks that weren't finished.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At the `sortedList` property, we sorted the tasks on the `filteredList` property
    by their ID, in descending order.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When all the manipulation was done, the `displayList` property returned the
    result of the data that was manipulated.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can find more information about `Array.prototype.map` at [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).
  prefs: []
  type: TYPE_NORMAL
- en: You can find more information about `Array.prototype.filter` at [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).
  prefs: []
  type: TYPE_NORMAL
- en: You can find more information about `Array.prototype.sort` at [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort).
  prefs: []
  type: TYPE_NORMAL
- en: Creating conditional filters to sort list data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After completing the previous recipe, your data should be filtered and sorted,
    but you might need to check the filtered data or need to change how it was sorted.
    In this recipe, we will learn how to create conditional filters and sort the data
    on a list.
  prefs: []
  type: TYPE_NORMAL
- en: Using some basic principles, it's possible to gather information and display
    it in many different ways.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The pre-requisite for this recipe is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Node.js 12+
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Node.js global objects that are required are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`@vue/cli`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@vue/cli-service-global`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will continue our to-do list project or you can create a new Vue project
    with Vue CLI, as learned in the '*Creating your first project with Vue CLI*' recipe
    in [Chapter 2](fef91898-2101-4746-b1eb-8df0af8ac6fc.xhtml)*, Introducing TypeScript
    and the Vue Ecosystem*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, follow these steps to add a conditional filter to sort your list data:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `App.vue` file, at the `<script>` part, we will update the `computed`
    properties, `filteredList`, `sortedList`, and `displayList`. We need to add three
    new variables to our project, `hideDone`, `reverse`, and `sortById`. All three
    are going to be Boolean variables and will start with a default value of `false`.
    The `filteredList` property will check if the `hideDone` variable is `true`. If
    it is, it will have the same behavior, but if not, it will show the whole list
    with no filter. The `sortedList` property will check if the `sortById`variableis
    `true`. If it is, it will have the same behavior, but if not, it will sort the
    list by the finished date of the task. The `displayList`propertywill check if
    the `reverse` variable is `true`. If it is, it will reverse the displayed list,
    but if not, it will have the same behavior:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'On the `<template>` part, we need to add the controllers for those variables.
    We will create three checkboxes, linked directly to the variables via the `v-model`
    directive:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'To run the server and see your component, you need to open Terminal (macOS
    or Linux) or Command Prompt/PowerShell (Windows) and execute the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is your component rendered and running:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/4d8eb6dc-0d68-4c98-9a23-594d2b8df916.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `computed` properties worked together as a cache for the list and made
    sure there weren''t any side effects on the manipulation of the elements. With
    the conditional process, it was possible to change the rules of the filtering
    and sorting through a variable, and the display was updated in real-time:'
  prefs: []
  type: TYPE_NORMAL
- en: At the `filteredList` property, we took the `baseList` property and returned
    just the tasks that weren't finished. When the `hideDone` variable was `false`,
    we returned the whole list without any filter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At the `sortedList` property, we sorted the tasks on the `filteredList` property.
    When the `sortById` variable was `true`, the list was sorted by ID in descending
    order; when it was `false`, the sorting was done by the task finish time in ascending
    order.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At the `displayList` property,  when the `reverse` variable was `true`, the
    final list was reversed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When all the manipulation was done, the `displayList`property returned the result
    of the data that was manipulated.
  prefs: []
  type: TYPE_NORMAL
- en: Those `computed` properties were controlled by the checkboxes on the user screen,
    so the user had total control of what they could see and how they could see it.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can find more information about `Array.prototype.map` at [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).
  prefs: []
  type: TYPE_NORMAL
- en: You can find more information about `Array.prototype.filter` at [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).
  prefs: []
  type: TYPE_NORMAL
- en: You can find more information about `Array.prototype.sort` at [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort).
  prefs: []
  type: TYPE_NORMAL
- en: Adding custom styles and transitions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Adding styles in your components is a good practice, as it allows you to show
    your user what is happening more clearly. By doing this, you are able to show
    a visual response to the user and also give a better experience on your application.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to add a new kind of conditional class binding.
    We will use CSS effects mixed with the re-rendering that comes with each new Vue
    update.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The pre-requisite for this recipe is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Node.js 12+
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Node.js global objects that are required are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`@vue/cli`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@vue/cli-service-global`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will continue our to-do list project or you can create a new Vue project
    with Vue CLI, as learned in the '*Creating your first project with Vue CLI*' recipe
    in [Chapter 2](fef91898-2101-4746-b1eb-8df0af8ac6fc.xhtml)*, Introducing TypeScript
    and the Vue Ecosystem*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow these steps to add custom styles and transitions to your component:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `App.vue` file, we will add a conditional class to the list items for
    the tasks that are done:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'At the `<style>` part of the component, we will create the CSS style sheet
    classes for the `taskDone` CSS class. We need to make the list have a separator
    between the items; then, we will make the list have a striped style; and when
    they get marked as done, the background will change with an effect. To add the
    separator between the lines and the striped list or zebra style, we need to add
    a CSS style sheet rule that applies for each `even nth-child`of our list:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'To add the effect on the background, when the task is done, at the end of the
    `<style>` part, we will add a CSS animation keyframe that indicates the background
    color change and apply this animation to the `.taskDone` CSS class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'To run the server and see your component, you need to open Terminal (macOS
    or Linux) or Command Prompt/PowerShell (Windows) and execute the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is your component rendered and running:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/b6bfb646-97a9-4db1-a4f4-ff5e1722f1d5.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Each time a new item in our application is marked as done, the `displayList` property
    gets updated and triggers the re-rendering of the component.
  prefs: []
  type: TYPE_NORMAL
- en: Because of this, our `taskDone` CSS class has an animation attached to it that
    is executed on rendering, showing a green background.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can find more information about CSS animations at [https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Animations/Using_CSS_animations](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Animations/Using_CSS_animations).
  prefs: []
  type: TYPE_NORMAL
- en: You can find more information about class and style bindings at [https://v3.vuejs.org/guide/class-and-style.html](https://v3.vuejs.org/guide/class-and-style.html)
  prefs: []
  type: TYPE_NORMAL
- en: Using vue-devtools to debug your application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`vue-devtools` is a must for every Vue developer. This tool shows us the depths
    of the Vue components, routes, events, and vuex.'
  prefs: []
  type: TYPE_NORMAL
- en: With the help of the `vue-devtools` extension, it's possible to debug our application,
    try new data before changing our code, execute functions without needing to call
    them in our code directly, and so much more.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will learn more about how we can use the devtools to find
    more information on your application and how it can be used to help your debug
    process.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The pre-requisite for this recipe is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Node.js 12+
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Node.js global objects that are required are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`@vue/cli`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@vue/cli-service-global`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You will need to install the `vue-devtools` extension in your browser:'
  prefs: []
  type: TYPE_NORMAL
- en: Chrome extension—[http://bit.ly/chrome-vue-devtools](http://bit.ly/chrome-vue-devtools)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Firefox extension—[http://bit.ly/firefox-vue-devtools](http://bit.ly/firefox-vue-devtools)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will continue our to-do list project or you can create a new Vue project
    with Vue CLI, as learned in the '*Creating your first project with Vue CLI*' recipe
    in [Chapter 2](fef91898-2101-4746-b1eb-8df0af8ac6fc.xhtml)*, Introducing TypeScript
    and the Vue Ecosystem*.
  prefs: []
  type: TYPE_NORMAL
- en: When developing any Vue application, it's always a good practice to develop
    with `vue-devtools` to hand.
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow these steps to understand how to use `vue-devtools` and how to properly
    debug a Vue application:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To enter `vue-devtools`, you need to have it installed in your browser first,
    so check the ''Getting ready'' section of this recipe for the links to the extension
    for Chrome or Firefox. In your Vue development application, enter **browser developer
    inspector** mode. A new tab with the name Vue must appear:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/423ad7ca-5967-4855-9f18-ed65a80156c6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The first tab that you are presented with is the **Components** tab. This tab
    shows your application component tree. If you click on a component, you will be
    able to see all the available data, the computed property, extra data injected
    by plugins such as `vuelidate`, `vue-router`, or `vuex`. You can edit the data
    to see the changes in the application in real time:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/510f837e-67e8-4f55-9988-82e00cf76724.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The second tab is for **vuex development**. This tab will show the history
    of the mutations, the current state, and the getters. It''s possible to check
    on each mutation the passed payload and do time-travel mutations, to "go back
    in time" in the vuex changes in the states:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/30c2819a-19b2-4d5f-98ce-ed4915549aaf.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The third tab is dedicated to **event emitters** in the application. All events
    that are emitted in the application will be shown here. You can check the event
    that was emitted by clicking on it. You can see the name of the event, the type,
    who was the source of the event (in this case, it was a component), and the payload:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/e211f6da-af01-4328-ad00-4bc3860f88f8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The fourth tab is dedicated to the **vue-router** plugin. There, you can see
    the navigation history, with all the metadata passed to the new route. You can
    check all the available routes in your application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/64d52f48-5546-4437-98bb-b71640903cff.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The fifth tab is a **Performance** tab. Here, you can check your component
    loading time, the frames per second that your application is running by the events
    that are happening in real time. This first screenshot shows the current frames
    per second of the current application, and for the selected component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/8eb92c33-2f51-465f-a770-136dfcc1db6d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This second screenshot shows the components lifecycle hooks performance and
    the time it took to execute each hook:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/0147e07e-1a25-4646-9d96-be9825945a4e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The sixth tab is your **Settings** tab; here, you can manage the extension,
    change how it looks, how it behaves internally, and how it will behave within
    the Vue plugins:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/14845284-4326-4234-99f5-96a2e6712e31.png)'
  prefs: []
  type: TYPE_IMG
- en: The last tab is a refresh button for the `vue-devtools`. Sometimes, when the
    `hot-module-reload` occurs or when some complex events happen in your application
    component tree, the extension can lose track of what is happening. This button
    forces the extension to reload and read the Vue application state again.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can find more information about `vue-devtools` at [https://github.com/vuejs/vue-devtools](https://github.com/vuejs/vue-devtools).
  prefs: []
  type: TYPE_NORMAL
