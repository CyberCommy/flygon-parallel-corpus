- en: Mastering Discretionary Access Control
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Discretionary Access Control, DAC, really just means that each user has the
    ability to control who can get into his or her stuff. If I wanted to open my home
    directory so that every other user on the system can get into it, I could do that.
    Having done so, I could then control who can access each specific file. In the
    next chapter, we'll use our DAC skills to manage shared directories, where members
    of a group might need different levels of access to the files within.
  prefs: []
  type: TYPE_NORMAL
- en: 'By this point in your Linux career, you likely know the basics of controlling
    access by setting file and directory permissions. In this chapter, we''ll do a
    review of the basics, and then we''ll look at some more advanced concepts. Topics
    that we''ll cover include:'
  prefs: []
  type: TYPE_NORMAL
- en: Using `chown` to change the ownership of files and directories
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using `chmod` to set permissions on files and directories
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What SUID and SGID settings can do for us on regular files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The security implications of having the SUID and SGID permissions set on files
    that don't need them
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to use extended file attributes to protect sensitive files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using chown to change ownership of files and directories
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Controlling access to files and directories really just boils down to ensuring
    that the proper users own files and directories, and that each file and directory
    has permissions set in such a way that only authorized users can access them.
    The `chown` utility covers the first part of this equation.
  prefs: []
  type: TYPE_NORMAL
- en: One unique thing about `chown` is that you must have sudo privileges to use
    it, even if you're working with your own files in your own directory. You can
    use it to change the user of a file or directory, the group that's associated
    with a file or directory, or both at the same time.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let''s say that you own the `perm_demo.txt` file and you want to change
    both the user and group association to that of another user. In this case, I''ll
    change the file ownership from me to Maggie:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The first `maggie` in `maggie:maggie` is the user to whom you want to grant
    ownership. The second `maggie`, after the colon, represents the group with which
    you want the file to be associated. Since I was changing both the user and group
    to `maggie`, I could have left off the second `maggie`, with the first `maggie`
    followed by a colon, and I would have achieved the same result:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'To just change the group association without changing the user, just list the
    group name, preceded by a colon:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, to just change the user without changing the group, list the username
    without the trailing colon:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'These commands work the same way on a directory as they do on a file. But,
    if you want to also change the ownership and/or the group association of the contents
    of a directory, while also making the change on the directory itself, use the
    `-R` option, which stands for *recursive*. In this case, I just want to change
    the group for the `perm_demo_dir` directory to `accounting`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: And, that's all there is to `chown`.
  prefs: []
  type: TYPE_NORMAL
- en: Using chmod to set permissions values on files and directories
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'On Unix and Linux systems, you would use the `chmod` utility to set permissions
    values on files and directories. You can set permissions for the user of the file
    or directory, the group that''s associated with the file or directory, and others.
    The three basic permissions are:'
  prefs: []
  type: TYPE_NORMAL
- en: '`r`: This indicates a read permission.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`w`: This is for a write permission.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`x`: This is the executable permission. You can apply it to any type of program
    file, or to directories. If you apply an executable permission to a directory,
    authorized people will be able to `cd` into it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Do an `ls -l` on a file, and you''ll see something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The first character of this line indicates the type of file. In this case,
    we see a dash, which indicates a regular file. (A regular file is pretty much
    every type of file that a normal user would be able to access in his or her daily
    routine.) The next three characters, `rw-`, indicate that the file has read and
    write permissions for the user, which is the person who owns the file. We then
    see `rw-` permissions for the group, and `r--` permissions for others. A program
    file would also have the executable permissions set:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Here, we see that the `xargs` program file has executable permissions set for
    everybody.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two ways that you can use `chmod` to change permissions settings:'
  prefs: []
  type: TYPE_NORMAL
- en: The symbolic method
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The numerical method
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting permissions with the symbolic method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Whenever you create a file as a normal user, by default, it will have read
    and write permissions for the user and the group, and read permissions for others.
    If you create a program file, you have to add the executable permissions yourself.
    With the symbolic method, you could use one of the following commands to do so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The first three commands add the executable permission for the user, the group,
    and others. The fourth command adds executable permissions for both the user and
    the group, and the last command adds executable permissions for everybody (`a`
    for all). You could also remove the executable permissions by replacing the `+`
    with a `-`. And, you can also add or remove the read or write permissions, as
    appropriate.
  prefs: []
  type: TYPE_NORMAL
- en: While this method can be handy at times, it also has a bit of a flaw. That is,
    it can only add permissions to what's already there, or remove permissions from
    what's already there. If you need to ensure that all of the permissions for a
    particular file get set to a certain value, the symbolic method can get a bit
    unwieldy. And for shell scripting, forget about it. In a shell script, you'd need
    to add all kinds of extra code just to determine which permissions are already
    set. The numerical method can vastly simplify things for us.
  prefs: []
  type: TYPE_NORMAL
- en: Setting permissions with the numerical method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'With the numerical method, you''ll use an octal value to represent the permissions
    settings on a file or directory. To the `r`, `w`, and `x` permissions, you assign
    the numerical values `4`, `2`, and `1`, respectively. Do this for the user, group,
    and others positions, and add them all up to get the permissions value for the
    file or directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **User** | **Group** | **Others** |'
  prefs: []
  type: TYPE_TB
- en: '| `rwx` | `rwx` | `rwx` |'
  prefs: []
  type: TYPE_TB
- en: '| `421` | `421` | `421` |'
  prefs: []
  type: TYPE_TB
- en: '| `7` | `7` | `7` |'
  prefs: []
  type: TYPE_TB
- en: 'So, if you have all the permissions set for everybody, the file or directory
    will have a value of `777`. If I were to create a shell script file, by default, it
    would have the standard `664` permissions, meaning read and write for the user
    and group, and read-only for others:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: If you create a file with root privileges, either with sudo or from the root
    user command prompt, you'll see that the default permissions setting is the more
    restrictive `644`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s say that I want to make this script executable, but I want to be the
    only person in the whole world who can do anything with it. I could do:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: With this one simple command, I've removed all permissions from the group and
    from others, and set the executable permission for myself. This is the sort of
    thing that makes the numerical method so handy for writing shell scripts.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you''ve been working with the numerical method for a while, looking at
    a file and figuring out its numerical permissions value will become second nature.
    In the meantime, you can use `stat` with the `-c %a` option to show you the values.
    For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Using SUID and SGID on regular files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When a regular file has its SUID permission set, whoever accesses the file will
    have the same privileges as the user of the file. When the SGID permission is
    set on a regular file, whoever accesses the file will have the same privileges
    as the group that's associated with the file. This is especially useful on program
    files.
  prefs: []
  type: TYPE_NORMAL
- en: 'To demo this, let''s say that Maggie, a regular, unprivileged user, wants to
    change her own password. Since it''s her own password, she would just use the
    one-word command, `passwd`, without using `sudo`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'To change a password, a person has to make changes to the `/etc/shadow` file.
    On my CentOS machine, the shadow file permissions look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'On the Ubuntu machine, they look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Either way, the permissions settings don''t allow Maggie to modify the shadow
    file. Yet, by changing her password, she is able to modify the shadow file. So,
    what''s going on? To answer this, let''s go into the `/usr/bin` directory and
    look at the permissions settings for the `passwd` executable file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: For the user permissions, you see `rws` instead of `rwx`. The `s` indicates
    that this file has the SUID permission set. Since the file belongs to the root
    user, anyone who accesses this file has the same privileges as the root user.
    The fact that we see a lower-case `s` means that the file also has the executable
    permission set for the root user. Since the root user is allowed to modify the
    shadow file, whoever uses this `passwd` utility to change his or her own password
    can also modify the shadow file.
  prefs: []
  type: TYPE_NORMAL
- en: 'A file with the SGID permission set has an `s` in the executable position for
    the group:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: The `write` utility, which is associated with the `tty` group, allows users
    to send messages to other users via their command-line consoles. Having `tty`
    group privileges allows users to do this.
  prefs: []
  type: TYPE_NORMAL
- en: The security implications of the SUID and SGID permissions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As useful as it may be to have SUID or SGID permissions on your executable files,
    we should consider it as just a necessary evil. While having SUID or SGID set
    on certain operating system files is essential to the proper operation of your
    Linux system, it becomes a security risk when users set SUID or SGID on other
    files. The problem is that, if intruders find an executable file that belongs
    to the root user and has the SUID bit set, they can use that to exploit the system.
    Before they leave, they might leave behind their own root-owned file with SUID
    set, which will allow them to easily gain entry into the system the next time.
    If the intruder's SUID file isn't found, the intruder will still have access,
    even if the original problem is fixed.
  prefs: []
  type: TYPE_NORMAL
- en: The numerical value for SUID is `4000`, and for SGID it's `2000`. To set SUID
    on a file, you'd just add `4000` to whichever permissions value that you would
    set otherwise. For example, if you have a file with a permissions value of `755`,
    you'd set SUID by changing the permissions value to `4755`. (This would give you
    read/write/execute for the user, read/execute for the group, and read/execute
    for others, with the SUID bit added on.)
  prefs: []
  type: TYPE_NORMAL
- en: Finding spurious SUID or SGID files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'One quick security trick is to run a `find` command to take inventory of the
    SUID and SGID files on your system. You could save the output to a text file,
    so that you can verify whether anything got added the next time you run the command.
    Your command would look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s the breakdown:'
  prefs: []
  type: TYPE_NORMAL
- en: '`/`: We''re searching through the entire filesystem. Since some directories
    are only accessible to someone with root privileges, we need to use `sudo`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-type f`: This means that we''re searching for regular files, which would
    include executable program files and shell scripts.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-perm 4000`: We''re searching for files with the `4000`, or SUID, permission
    bit set.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-o`: The or operator.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-perm 2000`: We''re searching for files with the `2000`, or SGID, permission
    bit set.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`>`: And, of course, we''re redirecting the output into the `suid_sgid_files.txt`
    text file with the `>` operator.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Note that the two `-perm` items need to be combined into a term that''s enclosed
    in a pair of parentheses. In order to prevent the Bash shell from interpreting
    the parenthesis characters incorrectly, we need to escape each one with a backslash.
    We also need to place a blank space between the first parenthesis character and
    the first `-perm`, and another between the `2000` and the last backslash. Also,
    the and operator between the `-type f` and the `-perm` term is understood to be
    there, even without inserting `-a`. The text file that you create should look
    something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Optionally, if you want to see details about which files are SUID and which
    are SGID, you can add in the `-ls` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s say that Maggie, for whatever reason, decides to set the SUID bit
    on a shell script file in her home directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the `find` command again, saving the output to a different text file. Then,
    do a `diff` operation on the two files to see what changed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: The only difference is the addition of Maggie's shell script file.
  prefs: []
  type: TYPE_NORMAL
- en: Hands-on lab – searching for SUID and SGID files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can do this lab on either of your virtual machines. You''ll save the output
    of the `find` command to a text file:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Search through the entire filesystem for all files that have either SUID or
    SGID set, saving the output to a text file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Log into any other user account that you have on the system, and create a dummy
    shell script file. Then, set the SUID permission on that file, and log back out
    into your own user account:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the `find` command again, saving the output to a different text file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'View the difference between the two files:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: End of lab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Preventing SUID and SGID usage on a partition
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As we said before, you don''t want users to assign SUID and SGID to files that
    they create, because of the security risk that it presents. You can prevent SUID
    and SGID usage on a partition by mounting it with the `nosuid` option. So, the
    `/etc/fstab` file entry for the `luks` partition that I created in the previous
    chapter would look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Different Linux distributions have different ways of setting up default partition
    schemes during an operating system installation. Mostly, the default way of doing
    business is to have all directories, except for the `/boot` directory, under the
    `/` partition. If you were to set up a custom partition scheme instead, you could
    have the `/home` directory on its own partition, where you could set the `nosuid`
    option. Keep in mind, you don't want to set `nosuid` for the `/` partition, or
    else you'll have an operating system that doesn't function properly.
  prefs: []
  type: TYPE_NORMAL
- en: Using extended file attributes to protect sensitive files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Extended file attributes are another tool for helping you to protect sensitive
    files. They won't keep intruders from accessing your files, but they can help
    you prevent sensitive files from being altered or deleted. There are quite a few
    extended attributes, but we only need to look at the ones that deal with file
    security.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let''s do an `lsattr` command to see which extended attributes you already
    have set. On the CentOS machine, your output would look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: So, as yet, I don't have any extended attributes set on any of my files.
  prefs: []
  type: TYPE_NORMAL
- en: 'On the Ubuntu machine, the output would look more like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: We won't worry about that `e` attribute, because that only means that the partition
    is formatted with the ext4 filesystem. CentOS doesn't have that attribute set,
    because its partition is formatted with the XFS filesystem.
  prefs: []
  type: TYPE_NORMAL
- en: 'The two attributes that we''ll look at are:'
  prefs: []
  type: TYPE_NORMAL
- en: '`a`: You can append text to the end of a file that has this attribute, but
    you can''t overwrite it. Only someone with proper sudo privileges can set or delete
    this attribute.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`i`: This makes a file immutable, and only someone with proper sudo privileges
    can set or delete it. Files with this attribute can''t be deleted or changed in
    any way. It''s also not possible to create hard links to files that have this
    attribute.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To set or delete attributes, you'll use the `chattr` command. You can set more
    than one attribute on a file, but only when it makes sense. For example, you wouldn't
    set both the `a` and the `i` attributes on the same file, because the `i` will
    override the `a`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start by creating the `perm_demo.txt` file with this text:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Setting the a attribute
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'I''ll now set the `a` attribute:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: You'll use a `+` to add an attribute, and a `-` to delete it. Also, it doesn't
    matter that the file does belong to me, and is in my own home directory. I still
    need sudo privileges to add or delete this attribute.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s see what happens when I try to overwrite this file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: With or without `sudo` privileges, I can't overwrite it. So, how about if I
    try to append something to it?
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'There''s no error message this time. Let''s see what''s now in the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'In addition to not being able to overwrite the file, I''m also unable to delete
    it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'So, the `a` works. But, I''ve decided that I no longer want this attribute
    set, so I''ll remove it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Setting the i attribute
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When a file has the `i` attribute set, the only thing you can do with it is
    view its contents. You can''t change it, move it, delete it, rename it, or create
    hard links to it. Let''s test this with the `perm_demo.txt` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, for the fun part:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'There are a few more commands that I could try, but you get the idea. To remove
    the `i` attribute, I''ll do:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Hands-on lab – setting security-related extended file attributes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For this lab, you''ll create a `perm_demo.txt` file with the text of your own
    choosing. You''ll set the `i` and `a` attributes, and view the results:'
  prefs: []
  type: TYPE_NORMAL
- en: Using your preferred text editor, create the `perm_demo.txt` file with a line
    of text.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'View the extended attributes of the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the `a` attribute:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Try to overwrite and delete the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, append something to the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Remove the `a` attribute, and add the `i` attribute:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Repeat Step 4.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Additionally, try to change the filename and to create a hard link to the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, try to create a symbolic link to the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: Note that the `i` attribute won't let you create hard links to a file, but it
    will let you create symbolic links.
  prefs: []
  type: TYPE_NORMAL
- en: End of lab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we reviewed the basics of setting ownership and permissions
    for files and directories. We then covered what SUID and SGID can do for us when
    used properly, and the risk of setting them on our own executable files. Finally,
    we completed this roundup by looking at the two extended file attributes that
    deal with file security.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we'll extend what we've learned here to more advanced file
    and directory access techniques. I'll see you there.
  prefs: []
  type: TYPE_NORMAL
