- en: Automating Regular Administrative Activities
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are various administrative activities performed by system administrators.
    These activities may contain file handling, logging, administrating CPU and memory,
    password handling, and, most importantly, making backups. These activities need
    automation. In this chapter, we're going to learn about automating these activities
    using Python.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Accepting input by redirection, pipe, and input files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Handling passwords at runtime in scripts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Executing external commands and getting their output
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Prompting for a password during runtime and validation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reading configuration files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding logging and warning code to scripts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Putting limits on CPU and memory usage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Launching a web browser
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the `os` module for handling directory and files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Making backups (with `rsync`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Accepting input by redirection, pipe, and input files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we are going to learn about how users can accept input by redirection,
    pipe, and external input files.
  prefs: []
  type: TYPE_NORMAL
- en: For accepting input by redirection, we use `stdin`. `pipe` is another form of
    redirection. This concept means providing the output of one program as the input
    to another program. We can accept input by external files as well as by using
    Python.
  prefs: []
  type: TYPE_NORMAL
- en: Input by redirection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`stdin` and `stdout` are objects created by the `os` module. We''re going to
    write a script in which we will use `stdin` and `stdout`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a script called `redirection.py` and write the following code in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the preceding program as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'We will receive the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Whenever the program runs in an interactive session, `stdin` is the keyboard
    input and `stdout` is the user's Terminal. The `input()` function is used to take
    input from the user, and `print()` is the way to write on the Terminal (`stdout`).
  prefs: []
  type: TYPE_NORMAL
- en: Input by pipe
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Pipe is another form of redirection. This technique is used to pass information
    from one program to another. The `|` symbol denotes pipe. By using the pipe technique,
    we can use more than two commands in such a way that the output of one command
    acts as input to the next command.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we are going to see how we can accept an input using pipe. For that, first
    we''ll write a simple script that returns a `floor` division. Create a script
    called `accept_by_pipe.py` and write the following code in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the script and you will get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding script, `stdin` is a keyboard input. We are performing a `floor`
    division on the number we enter at runtime. The floor division returns only the
    integer part of the quotient. When we run the program, we pass `15` followed by
    the pipe `|` symbol, and then our script name. So, we are providing `15` as input
    to our script. So the floor division is performed and we get the output as `7`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can pass multiple input to our script. So, in the following execution, we
    have passed multiple input values as `15`, `45`, and `20.` For handling multiple
    input values, we have written a `for` loop in our script. So, it will first take
    the input as `15`, followed by `45`, and then `20.` The output will be printed
    on a new line for each input, as we have written `\n` between the input value.
    To enable this interpretation of a backslash, we passed the `-e` flag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: After running this, we got floor divisions for `15`, `45` and `20` as `7`, `22`,
    and `10`, respectively, on new lines.
  prefs: []
  type: TYPE_NORMAL
- en: Input by input file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we are going to learn about how we can take input from an
    input file. Taking  input from an input file is easier in Python. We are going
    to look at an example for this. But first, we are going to create a simple text
    file called `sample.txt` and we''ll write the following code in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Sample.txt`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, create a script called `accept_by_input_file.py` and write the following
    code in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the program and you will get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Handling passwords at runtime in scripts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we will look at a simple example for handling passwords in
    script. We will create a script called `handling_password.py` and write the following
    content in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the preceding script and you will receive the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding script, we used the `paramiko` module. The `paramiko` module
    is a Python implementation of `ssh` that provides client-server functionality.
  prefs: []
  type: TYPE_NORMAL
- en: 'Install `paramiko` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding script, we are remotely connecting to the host, `192.168.2.106`.
    We have provided the host's username and password in our script.
  prefs: []
  type: TYPE_NORMAL
- en: After running this script, on the `192.168.2.106` desktop, you will find a `work`
    folder and `test_folder` can be found in the `home/` directory of `192.168.2.106`.
  prefs: []
  type: TYPE_NORMAL
- en: Executing external commands and getting their output
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we are going to learn about Python's subprocess module. Using
    `subprocess`, it's easy to spawn new processes and get their return code, execute
    external commands, and start new applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'We are going to see how we can execute external commands and get their output
    in Python by using the `subprocess` module. We will create a script called `execute_external_commands.py`
    and write the following code in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the program and you will get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Capturing output using the subprocess module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we are going to learn about how we can capture output. We
    will pass `PIPE` for the `stdout` argument to capture the output. Write a script
    called `capture_output.py` and write the following code in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Execute the script as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'On execution, we will receive the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding script, we imported the subprocess module of Python, which
    helps in capturing the output. The subprocess module is used for creating new
    processes. It also helps in connecting input/output pipes and getting return code.
    `subprocess.run()` will run the command passed as an argument. `Returncode` will
    be the exit status of your child process. In the output, if you get return code
    as `0`, it indicates it ran successfully.
  prefs: []
  type: TYPE_NORMAL
- en: Prompting for passwords during runtime and validation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we are going learn about the `getpass module` to handle passwords
    at runtime. The `getpass()` module in Python prompts the user to enter a password
    without echoing. The `getpass` module is used to handle the password prompt whenever
    programs interact with a user through the Terminal.
  prefs: []
  type: TYPE_NORMAL
- en: 'We are going to see some examples of how to use the `getpass` module:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a script called `no_prompt.py` and write the following code in it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: In this script, a prompt is not provided for the user. So, by default, it is
    set to the `Password` prompt.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the script as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'We will provide a prompt for entering a password. So, create a script callled `with_prompt.py`
    and write the following code in it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we have written a script that provides a prompt for a password. Run the
    program as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Here, we have provided the `Enter your password` prompt for the user.
  prefs: []
  type: TYPE_NORMAL
- en: Now, we will write a script where if we enter a wrong password, it will just
    print a simple message but it will not prompt again to enter a correct password.
  prefs: []
  type: TYPE_NORMAL
- en: 'Write a script called `getpass_example.py` and write the following code in
    it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the program as follows (here we are entering a correct password, that is, `#pythonworld`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we will enter a wrong password and will check what message we receive:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Here, we have written a script that never asks again to enter a password if
    we write a wrong password.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we will write a script that will ask to enter the correct password again
    when we provide a wrong password. To get the login name of the user, `getuser()`
    is used. The `getuser()` function will return the system logged-in user. Create
    a script called `password_prompt_again.py` and write the following code in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the program and you will get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Reading configuration files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we are going learn about the `configparser` module of Python.
    By using the `configparser` module, you can manage user-editable configuration
    files for the application.
  prefs: []
  type: TYPE_NORMAL
- en: The common use of these configuration files is that users or system administrators
    can edit the files using a simple text editor to set application defaults and
    then the application will read and, parse them and act based on the contents written
    in them.
  prefs: []
  type: TYPE_NORMAL
- en: 'To read a configuration file, `configparser` has the `read()` method. Now,
    we will write a simple script named `read_config_file.py`. Before that, create
    a `.ini` file named `read_simple.ini` and write the following content in it: `read_simple.ini`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Create `read_config_file.py` and enter the following content in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Run `read_config_file.py` and you will get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'The `read()` method accepts more than one filename. Whenever each filename
    gets scanned and if that file exists, then it will be opened and read. Now, we
    will write a script for reading more than one filename. Create a script called `read_many_config_file.py`
    and write the following code in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the preceding script and you will get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, we used the `configparser` module of Python, which
    helps in managing configuration files. First, we created a list named `files`.
    The `read()` function will read the configuration files. In the example, we created
    a variable called  `files_found`, which will store the names of the configuration
    files present in your directory. Next, we created another variable called `files_missing`,
    which will return filenames that aren't in your directory. And, lastly, we are
    printing the file names that are present and missing.
  prefs: []
  type: TYPE_NORMAL
- en: Adding logging and warning code to scripts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will learn about the logging and warnings modules of Python.
    The logging module will keep a track of events occurring within a program. The
    warnings module warns the programmers about the changes made in the language as
    well as the libraries.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we are going to see a simple logging example. We will write a script called `logging_example.py`
    and write the following code in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the program as follows::'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Check `hello.py` and you see the debug message printed in that script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we will write a script called `logging_warnings_codes.py` and write the
    following code in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the script as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Generating warnings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`warn()` is used to generate the warnings. Now, we will see a simple example
    of generating warnings. Write a script called `generate_warnings.py` and write
    a following code in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the script as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding script, we passed a warning message through `warn()`. We used
    a simple filter so that your warning will get treated as an error and that error
    will get solved accordingly by the programmer.
  prefs: []
  type: TYPE_NORMAL
- en: Putting limits on CPU and memory usage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we will learn about how we can limit CPU and memory usage.
    First, we will write a script for putting a limit on CPU usage. Create a script
    called `put_cpu_limit.py` and write the following code in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the preceding script as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding script, we used `setrlimit()` to limit the CPU usage. So, in
    our script, we have set the limit to 10 seconds.
  prefs: []
  type: TYPE_NORMAL
- en: Launching webbrowser
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we will learn about the `webbrowser` module of Python. This
    module has functions to open URLs in browser applications. We will see a simple
    example. Create a script called `open_web.py` and write the following code in
    it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the script as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also use the `webbrowser` module of Python through the command line
    and can use all of it. To use `webbrowser` through the command line, run the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, [https://www.google.com/](https://www.google.com/) will be opened in
    the browser window. You can use the following two options:'
  prefs: []
  type: TYPE_NORMAL
- en: '`-n`: Open a new window'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-t`: Open a new tab'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the os module for handling directory and files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will learn about the `os` module of Python. Python's `os`
    module helps in achieving operating system tasks. We need to import the `os` module
    if we want to perform operating system tasks.
  prefs: []
  type: TYPE_NORMAL
- en: We will look at some examples related to handling files and directories.
  prefs: []
  type: TYPE_NORMAL
- en: Creating and deleting the directory
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we are going to create a script where we will see what functions
    we can use for working with the directories on your filesystem, which will include
    creating, listing, and removing the content. Create a script called  `os_dir_example.py`
    and write the following code in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the script as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: When you create a directory using `mkdir()`, all of the parent directories must
    be already created. But, when you create a directory with `makedirs()` , it will
    create any directory, which is mentioned in a path that doesn't exist. `unlink()`
    will remove the file path and `rmdir()` will remove the directory path.
  prefs: []
  type: TYPE_NORMAL
- en: Examining the content of a filesystem
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we will list all of the content of a directory using `listdir()`.
    Create a script called `list_dir.py` and write the following code in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the script as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: So, by using `listdir()`, you can list of all the content of the folder.
  prefs: []
  type: TYPE_NORMAL
- en: Making backups (with rsync)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This is the most important work system administrators have to do. In this section,
    we will learn about making backups using `rsync`. The `rsync` command is used
    for copying files and directories locally, as well as remotely, and performing
    data backups using `rsync.` For that, we are going write a script called `take_backup.py`
    and write the following code in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the script as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, check `Desktop/directory` and you will see your work folder in that directory.
    There are a few options used with the `rsync` command, namely the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`-a`: Archive'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-u`: Update'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-h`: Human-readable format'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-v`: Verbose'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--delete`: Deletes extraneous files from the receiving side'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--exclude`: Exclude rule'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned about how we can automate regular administration
    tasks. We learned about accepting input by various techniques, prompting for passwords
    at runtime, executing external commands, reading configuration files, adding warnings
    in your script, launching `webbrowser` through the script as well as the command
    line, using the `os` module to handle files and directories, and making backups.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will learn more about the `os` module and handling
    data. Also, you will learn about the `tarfile` module and how you can use it.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: How to use `readline` module?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are the Linux commands used for reading, creating the new file, deletion
    of the file, list the file in current directory?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To run the Linux/windows commands in python which packages are available?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How to read, or set new values in configuration `ini` file
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: List the libraries available for finding the `cpu` usage?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: List the different methods to accept the input from the user?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the difference between sort and sorted?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Learn basic commands of linux:  [https://maker.pro/linux/tutorial/basic-linux-commands-for-beginners](https://maker.pro/linux/tutorial/basic-linux-commands-for-beginners)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Selenium webdriver documentation:[ https://selenium-python.readthedocs.io/index.html](https://selenium-python.readthedocs.io/index.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
