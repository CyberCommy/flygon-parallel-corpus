- en: Chapter 2. Shiny Buttons
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: CSS3 buttons have been considered a hot topic since they were first introduced
    on cutting-edge browsers' nightly builds. Buttons are important, well-recognized
    elements of the majority of user interfaces. What makes them a hot topic for web
    developers is that CSS3 buttons are easy to modify by simply changing the text
    or the stylesheet declarations.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we''ll create buttons that mimic their real-world counterparts
    using only CSS3\. While doing so, we''ll explore new CSS properties and tricks
    to achieve our goals. We will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: A coin-operated push button
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `:before` and `:after` pseudo-selectors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Gradients
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Avoiding experimental prefixes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Shadows
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding labels
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Handling mouse clicks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Small change in CSS, big results
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An ON/OFF switch
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The active state
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The checked state
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding colors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Supporting older browsers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A final note on CSS gradient syntax
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a coin-operated push button
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the first part of this chapter we focus on creating a realistic coin-operated
    push button. We want to use as much CSS as possible and to take advantage of the
    new features without using images. The following screenshot is a glimpse of the
    result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a coin-operated push button](img/3264OT_02_00.01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'To start with, let''s create a folder called `shiny_buttons`, where we''ll
    store all of the project''s files. Then, we need a file, `index.html`, filled
    with very little markup:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: As the markup shows, we are using a single `<a>` element to declare our button.
    An anchor tag may not seem sophisticated enough to produce a complex button and
    leads us to believe that we'll need more HTML, but this is not the case. We can
    achieve amazing results using only this tag, along with our CSS3 declarations.
  prefs: []
  type: TYPE_NORMAL
- en: The :before and :after pseudo-selectors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As we discovered in the previous chapter, pseudo-selectors can be treated as
    elements and styled without the need to add additional markup to the HTML page.
    If we set the `<a>` element to `position:relative`, and both `:after` and `:before`
    to `position:absolute`, we can place them using coordinates relative to the position
    of `<a>`. Let''s try this by creating an `application.css` file in a `css` folder
    within the project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'If we load what we''ve done so far in a browser, we start noticing the shape
    of a coin-op push button. Two circles, one within the other, positioned to the
    left of the label, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The :before and :after pseudo-selectors](img/3264OT_02_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: All we did to create the circle shape was to impose a border radius equal to
    half the size of the box. Well done! Now we can remove the green and red circle
    backgrounds and move on to explore gradients.
  prefs: []
  type: TYPE_NORMAL
- en: Gradients
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When using CSS gradients, we instruct the browser''s layout engine to draw
    patterns following our CSS directions. A **gradient** corresponds to a runtime-generated,
    size-independent image, and so it can be used wherever the `url()` notation is
    allowed. There are four types of gradients: `linear-gradient`, `repeating-linear-gradient`
    , `radial-gradient`, and `repeating-radial-gradient`. The following gradient code
    example provides an introductory overview of each of them:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The gradient syntax
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the preceding gradient code example, it is clear that each statement contains
    positional information (for example, `top left` or `45deg`) with color steps,
    which can optionally have a value indicating where the color is to stop. If two
    colors stop at exactly the same position, we obtain a sharp color change instead
    of a gradient.
  prefs: []
  type: TYPE_NORMAL
- en: 'Extra parameters are allowed for radial gradients. In particular, we can choose
    the shape of the gradient, between circle and ellipsis, and how the gradient fills
    the element''s area. To specify, we can choose among the following options:'
  prefs: []
  type: TYPE_NORMAL
- en: '`closest-side`: With this parameter, the gradient expands until it meets the
    closest side of the containing element'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`closest-corner`: With this parameter, the gradient expands until it meets
    the closest corner of the containing element'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`farthest-side`: With this parameter, the gradients expands until it meets
    the farthest side of the containing element'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`farthest-corner`: With this parameter, the gradients expands until it meets
    the farthest corner of the containing element'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`contain`: This is an alias to `closest-side`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cover`: This is an alias to `farthest-corner`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following screenshot shows the result of the preceding code executed in
    a browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The gradient syntax](img/3264OT_02_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Unfortunately, the previous screenshot does not illustrate what we see if we
    run the example code in a web browser. As a matter of fact, if we execute the
    previous code in a browser supporting CSS3 gradients, such as Google Chrome, what
    we obtain is a list of white boxes with black borders. This is because gradients
    are considered experimental and thus need to be prefixed with a browser-specific
    string for every browser we want to support (for example, `-webkit-`, `-ms-`,
    `-o-`, and `-moz-`). This means that we have to duplicate the statement for each
    browser we''d like to support. For example, in the `#linear` selector from the
    previous code, to achieve the maximum compatibility, we should have written:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Avoiding experimental prefixes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We need to find a way to avoid writing a lot of duplicated CSS code only to
    implement all the existing browser experimental prefixes. A good solution is provided
    by Prefix Free ([http://leaverou.github.com/prefixfree/](http://leaverou.github.com/prefixfree/)),
    a small JavaScript library created by Lea Verou that detects the user''s browser
    and dynamically adds the required prefixes. To install it, we just need to download
    the `.js` file in a `js` folder within our project, name it `prefixfree.js`, and
    add the corresponding script tag to `index.html` just after the `css` request:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: From this point on, we don't have to worry about prefixes anymore because this
    library will do the heavy lifting for us. There are, however, some minor drawbacks;
    some properties are not automatically detected and prefixed (for example, `radial-gradient`
    and `repeating-radial-gradient` are not prefixed with `-moz-`) and we have to
    suffer a brief delay, roughly equal to the script download time, before the CSS
    gets correctly prefixed.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, let''s move on and add some gradients to our push buttons:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: In order to focus specifically on the subject of adding new features to our
    buttons, the preceding code does not repeat the existing CSS declarations from
    `application.css`. It doesn't matter how we apply the new instructions; we can
    either append the previous statements or merge the properties of each selector.
    In any case, the results will be the same.
  prefs: []
  type: TYPE_NORMAL
- en: With the previous code, we created two light points, using radial gradients
    to simulate the shape and the reflection of our push button. CSS3 allows us to
    create this effect by supporting the `rgba()` notation, which accepts an alpha
    value between `0` (transparent) and `1` (opaque).
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s try the result in the browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Avoiding experimental prefixes](img/3264OT_02_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Upcoming syntax changes for CSS3 gradients
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The latest editor draft about CSS3 gradients ([http://www.w3.org/TR/2012/CR-css3-images-20120417/](http://www.w3.org/TR/2012/CR-css3-images-20120417/))
    introduced a small syntax change when providing keywords to define positional
    information. So, instead of writing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'We now need to write:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'For the radial gradient syntax there are a few more changes; so what we wrote
    earlier:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'was changed to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Unfortunately, this new syntax is not well supported across browsers at the
    time of writing this book. So we'll stick with the old syntax, which instead has
    a good support.
  prefs: []
  type: TYPE_NORMAL
- en: Shadows
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Shadows are implemented in CSS3 with two different properties sharing similar
    syntaxes, `box-shadow` and `text-shadow`. Let''s create another example to showcase
    how they work:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Essentially, `box-shadow` and `text-shadow` are similar. Both of these properties
    have shadow offset (first two parameters) and blur (third parameter). Only `box-shadow`
    has the optional fourth parameter that controls the spread of the shadow or distance
    of blur.
  prefs: []
  type: TYPE_NORMAL
- en: Next comes the color, and then, optionally and only for the `box-shadow` property,
    an extra keyword, `inset`, that results in a shadow dropped inside the element
    and not outside. Finally, more shadows can be defined, separated by commas (`,`).
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the result of the preceding code executed in
    a browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Shadows](img/3264OT_02_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'With this new knowledge, we can now add more effects to our push buttons. Let''s
    add some more properties to `application.css`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Then, reload the project in the browser.
  prefs: []
  type: TYPE_NORMAL
- en: '![Shadows](img/3264OT_02_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Adding labels
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Each button must have its own symbol on it. To obtain this result, we can use
    an HTML5 `data-*` attribute, such as `data-symbol`. HTML5 considers all `data-*`
    attributes valid and free for developers to be used to hold some application-specific
    information, such as in this case. We can then insert the value of the custom
    attribute inside the push button using the `content` property. Let''s see how,
    but first we need to update our `<a>` elements. So let''s edit `index.html`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To type the Black star (★) (Unicode character: U+2605), we can do a copy and
    paste from [http://www.fileformat.info/info/unicode/char/2605/index.htm](http://www.fileformat.info/info/unicode/char/2605/index.htm),
    or we can use the character map included in Windows.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we need to add proper instructions to `application.css`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the result in the browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding labels](img/3264OT_02_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Indeed, we can change the button's symbol simply by modifying the value of the
    `data-symbol` attribute.
  prefs: []
  type: TYPE_NORMAL
- en: Handling mouse clicks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Almost done! Now we need to make the button a bit more responsive. To achieve
    this, we can take advantage of the `:active` pseudo-selector to modify some shadows.
    Let''s add the following lines to `application.css`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'By increasing the value of the `line-height` property, we move the symbol down
    a bit, giving the illusion that it has been pushed down with the button. Let''s
    reload the project in the browser and check the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Handling mouse clicks](img/3264OT_02_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Small changes in CSS, big results
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We have now completed the first kind of buttons. Before moving on to the next
    one, we better pause for a second to realize that all the shadows and gradients
    we have coded are basically colorless; they simply add white or black to the underlying
    color. This means that we can choose a different background color for each button.
    So let''s add the following code to `application.css`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Small changes in CSS, big results](img/3264OT_02_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Creating an ON/OFF switch
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Ok, now we''ll style some checkbox buttons to try and match the appearance
    of some recording studio buttons ("REC"). The following is a screenshot of the
    final result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating an ON/OFF switch](img/3264OT_02_08.02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'First, let''s add the checkboxes to `index.html`, just after the previous `article`
    element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'As we did in the previous chapter, we now want to hide the `input` element.
    Let''s do this by adding a few lines to `application.css`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Good! We want this element to act like some sort of button, so we force the
    cursor to assume the pointer icon by using the `cursor` property.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a mask
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now we set a background color for the `article` element. This is fairly important
    for what we're going to build.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we focus on the `:before` and `:after` pseudo-selectors:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: What we've done now is to use a gradient as a sort of mask. In essence, we've
    created a transparent circle with a radius of `50px`, and then we used the background
    color to cover the remaining area.
  prefs: []
  type: TYPE_NORMAL
- en: 'Ok, now the tricky part. To emulate the shape of the button, we create a box
    with rounded corners, and then we use the `box-shadow` property to give the illusion
    of height:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: The last of the shadow declared (the one highlighted) is also used as a mask.
    It has the same color as the background, and it spreads for `30px` around the
    box we just created, covering the transparent area we declared with the previous
    gradient.
  prefs: []
  type: TYPE_NORMAL
- en: 'What is this all about? Let''s try to explain it with a scheme:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a mask](img/3264OT_02_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The preceding diagram displays the three shapes we used one above the other.
    If we turn off the `box-shadow` one, then every color set with the `background-color`
    property on `label:before` will be visible within the mask created by the `background-image`
    property of `label:before`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To see what we''ve done so far, let''s load the project in a browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a mask](img/3264OT_02_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The active state
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now we need to handle the active state as we've done before. To simulate the
    pressure, we lower the height of the element and change the offset of some shadows.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s try this in the browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The active state](img/3264OT_02_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Adding the checked state
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What we want to do now, basically, is to change the text of the label from OFF
    to ON and remove the `box-shadow` mask in order to expose a background color that
    we'll use to simulate a light propagating from the button.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: We don't want to activate this effect while the button is still pressed, so
    we have added the `:not(:active)` pseudo-selector.
  prefs: []
  type: TYPE_NORMAL
- en: Adding colors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s set different colors for each button. This time, we need to specify
    one color for the OFF state and one for the ON state:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'And the following screenshot shows the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding colors](img/3264OT_02_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Supporting older browsers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This project is not meant to degrade gracefully on older browsers, so we need
    to apply a different technique to detect when features essential to this project
    are missing and provide an alternative CSS2 stylesheet.
  prefs: []
  type: TYPE_NORMAL
- en: For this, we rely on a JavaScript library called `Modernizr.js` ([http://modernizr.com/](http://modernizr.com/)),
    which shows methods for each HTML5/CSS3 feature. These methods simply return `true`
    or `false` depending on the presence of the desired feature. Then, we are going
    to use a small library included in `Modernizr.js`, called yepnope.js, ([http://yepnopejs.com](http://yepnopejs.com))
    to dynamically choose which stylesheet we want to load.
  prefs: []
  type: TYPE_NORMAL
- en: First of all, we need to download the library. To do so, we have to mark the
    checkboxes corresponding to which features we want to test, from the download
    page at [http://modernizr.com/download/](http://modernizr.com/download/). Let's
    mark **border-radius**, **box-shadow**, **CSS Gradients**, and **multiple backgrounds**.
    Then, hit the **Generate** button, and then the **Download** button, saving the
    file as `modernizr.js` under the `js` folder for our project.
  prefs: []
  type: TYPE_NORMAL
- en: 'Ok, now we need to change something within the `<head>` tag of our `index.html`
    file to make this new trick work. The new `<head>` section is shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'We''ve just got to remember to create a `css/olderbrowsers.css` file containing
    some CSS2 instructions to style these elements for older browsers, such as the
    following instructions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: We also have to consider that relying only on JavaScript may sometimes be a
    hazardous choice because we aren't providing a non-JavaScript alternative. An
    easy workaround might be setting `olderbrowsers.css` as the default stylesheet
    and then dynamically loading `application.css` only when the required CSS3 properties
    are supported.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do so, however, we have to add a few lines to `application.css` to void
    the `olderbrowsers.css` properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we can change our previous HTML code as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Supporting IE10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Internet Explorer 10 supports all the CSS features shows in this project. However,
    we have to face the fact that Prefix Free doesn''t add the `-ms-` experimental
    prefix on the `radial-gradient` notation. This is not a big problem because our
    buttons works well without gradients too, except for the `radial-gradient` notation
    we used as a mask in the ON/OFF switch. To find a way around this, we can add
    the following lines to `application.css`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This project goes into details with gradients and shadows, demonstrating how
    these properties can be employed to achieve amazing effects using a very small
    set of HTML elements.
  prefs: []
  type: TYPE_NORMAL
- en: Before moving on to the next chapter, it might be useful to know that there
    are a few online gradient generators that let us compose a gradient using a nice
    UI and then provide us the right CSS syntax to include in our stylesheet. They
    can be found at [http://www.colorzilla.com/gradient-editor/](http://www.colorzilla.com/gradient-editor/),
    [http://www.cssbuttongenerator.com/](http://www.cssbuttongenerator.com/), and
    [http://css3generator.com/](http://css3generator.com/).
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we'll learn how to deal with multiple device visualizations
    by creating a menu that works on both desktop and smartphones!
  prefs: []
  type: TYPE_NORMAL
