- en: Chapter 4. Using Responsive Frameworks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, you will learn about:'
  prefs: []
  type: TYPE_NORMAL
- en: Using the Fluid 960 grid layout
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the Blueprint grid layout
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fluid layout using the rule of thirds
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Trying Gumby, a responsive 960 grid
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Bootstrap framework makes responsive layouts easy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The **layout** frameworks have become increasingly useful and widespread in
    layout design and development. Many web developers have found that by adapting
    their designs to a framework, they can speed up their production dramatically.
  prefs: []
  type: TYPE_NORMAL
- en: There are a number of good frameworks out there, which at first glance may seem
    like too much effort to spin up, otherwise you will have to sacrifice too much
    of your design to adapt to someone else's methodology. At least, that's what I
    thought at first. In practice, what I found was that learning and using frameworks
    allowed me to focus more on the parts of the project I enjoyed, and helped me
    get the project done faster. In essence, using a framework may cause your final
    products to look like the framework. Sometimes, this may not be such a terrible
    notion, that is, having a toolset at your disposal that helps you develop faster
    and better websites. There are many frameworks available; some are bare-bones,
    and require that you invest more time in design and development but you have more
    control over the final product; conversely, some provide more features, but the
    framework guides your design and it will be difficult to change without a full
    redesign.
  prefs: []
  type: TYPE_NORMAL
- en: So, which framework is right for you? The answer is of course; it depends on
    what is best for the project requirements. I suggest trying out the recipes in
    this chapter and having a number of tools at your disposal and ready to build
    with.
  prefs: []
  type: TYPE_NORMAL
- en: Using the Fluid 960 grid layout
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The **960 Grid System** has been around for a while and has already proven useful
    in deploying new projects quickly. It is fairly simple to learn, and after a quick
    learning curve you can jump right into using it.
  prefs: []
  type: TYPE_NORMAL
- en: The only snag in this is that it is not responsive. In fact, it behaves much
    like a table using column, spanned over fixed-width table headers. It lays out
    nicely in a 960px-wide window, and that's it, you are stuck with a good view in
    only one browser window size. So why even discuss the 960 grid at all in a book
    about responsive design? The answer is that some people liked it so much that
    they decided to fix the problem.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are good solutions for this, and hopefully you can find them in this chapter.
    Bear with me and I'll show you one of the simpler versions of it in this recipe.
    The simple responsive version of 960 Grid System could actually be more accurately
    described as a **fluid grid** . It replaces much of the fixed-width grid elements
    with percentage width, left-floating element. This works pretty well but when
    the columns get narrow, it can become difficult to read. We can fix this rather
    easily with some additional CSS.
  prefs: []
  type: TYPE_NORMAL
- en: What we eventually want for our page is to respond to the screen changes by
    exerting more granular change over how the grid is laid out in different screen
    sizes.
  prefs: []
  type: TYPE_NORMAL
- en: First, go get the Fluid 960 Grid System at [http://www.designinfluences.com/fluid960gs/](http://www.designinfluences.com/fluid960gs/).
    Then, download and expand the archived files. Copy the `grid.css` file from the
    archived `CSS` folder into your project's `CSS` folder. Next, create a new CSS
    file in your `CSS` directory called `responsive.css`. We'll come back to that
    later.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create a new HTML file in your IDE. Add links to the file `grid.css`, and to
    your new CSS file, `responsive.css`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Next, create some content within your HTML body. Then, to make the Fluid 960
    Grid work, you first add a wrapping `div` element with a class to define the number
    of columns inside it. For this recipe use the class `containter_16`, for a total
    of 16 usable columns. You also have the option of having 12 columns by assigning
    to the `div` element the `container_12` class.
  prefs: []
  type: TYPE_NORMAL
- en: Inside the `container_16` element, first create a container for a header. Create
    a new `div` element with a class `grid_16`. You probably have already guessed
    that the `grid_16` class takes the whole width of the `container_16` div. That
    was a pretty good guess; you are 98 percent correct; it actually takes 98 percent
    of the width, or all 16 columns with 2 percent outer padding. If you had instead
    used the `grid_11` class it would have taken up 11 columns, or 66.75 percent with
    2 percent padding on the outside.
  prefs: []
  type: TYPE_NORMAL
- en: To create a new line, we add the another `div` element, this time with the class
    `clear`. This works in a similar way to the *Enter* key on your keyboard, or a
    newline (`\n`) in some programming languages. This `clear` element is necessary
    between rows because their position is set by a `left:float` property, which does
    not have a vertical space.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The same could be accomplished by using an uncomplicated break, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: You will need to add the `clear` div or break between every row.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we will focus onto the content! Following your `clear` element, add six
    new `div` elements. Give the first element a `grid_3` class, the second element
    the `grid_5` class, and the rest of the elements the `grid_2` class. The order
    does not matter, as long as the number following the `grid_*` adds up to 16\.
    Insert a few lines of Ipsum filler text ([http://lipsum.com](http://lipsum.com))
    inside the `div` elements. Your code will look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'In the following screenshot, you can see how the fluid grid breaks down on
    smaller viewports:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/5442OT_04_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The next step is to update your CSS to add some responsiveness to the fluid
    layout. Now, open your `responsive.css` file in your IDE to edit it. Add media
    queries to cover the smaller screen breakpoints: `1024px`, `600px`, and `420px`,
    as shown in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Our intent is to make some new CSS that will override the fluid grid and make
    new sticking breakpoints for content elements. At narrower widths we want an element
    to have a greater percentage width, or a fixed width. To make the override, we
    will add a new class to the media queries: `.break-column`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Next add to the `max-width:420px` media query a `min-width` value of `360px`
    for the `.break-column` element class. Then, add to the new media queries, `max-width:600px`
    and `min-width:421px`, add the `.grid_2.break-column`, `.grid_3.break-column`,
    and `.grid_5.break-column` element classes and their `width:48%` property. In
    the largest of the three media queries, add the class with a property of `width:30%`
    followed by the `!important` override (be sure it is inserted before the semicolon),
    as shown in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'One last step to a responsive fluid grid! Open your HTML file again and add
    to each of the six `div` elements a class of `break-column`. And the recipe is
    complete. Refresh your browser, or open the HTML to view it. As you scale down
    your browser window or open the file in a mobile device, you will see the layout
    responds with a more optimized layout for the smaller views. The fluid grid is
    illustrated in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/5442OT_04_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When you open the un-updated (fluid and non-responsive) HTML file in your browser,
    you will see your six columns, and they will fluidly retain their same proportional
    width as the browser window or the device gets smaller. When viewed in a small
    window or mobile device, it will display six unreadable narrow columns.
  prefs: []
  type: TYPE_NORMAL
- en: 'Adding the media queries works by overriding the style properties of the `div`
    elements. I demonstrated overrides with three different methods: first, the `min-width`
    method overrides the percent width; next, as the `responsive.css` file follows
    the `grid.css` file and the CSS is explicitly name-spaced (`.grid_2.break-column`,
    `.grid_3.break-column`, and `.grid_5.break-column`), it overrides the fluid width
    declared in the `grid.css` file, and in the last case, the `!important` declaration
    trumps all in the override cascade.'
  prefs: []
  type: TYPE_NORMAL
- en: Using the Blueprint grid layout
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The **Blueprint CSS** framework is another popular static CSS grid system. There
    may be a case where you come across a need to make the static Blueprint CSS grid
    framework into your very own responsive Blueprint framework. This one is pretty
    easy to break apart into a responsive layout. There are only a few simple CSS
    breaks to insert and you have a responsive framework.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First go and get a hold of the Blueprint CSS framework. You can download it
    at [http://www.blueprintcss.org/](http://www.blueprintcss.org/). This framework
    works similarly to other static CSS grid frameworks.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it....
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Once you have downloaded the Blueprint framework, extract the files and copy
    the `blueprint` folder into your `CSS` directory. Next we'll start building the
    HTML file to work with the Blueprint CSS framework. Create a new HTML file in
    your IDE. Inside the body, add a title, and then an `hr` element.
  prefs: []
  type: TYPE_NORMAL
- en: '"Huh? A what?", you may ask. It''s a horizontal rule—a thematic break. Let
    me explain.'
  prefs: []
  type: TYPE_NORMAL
- en: In previous versions of HTML, `hr` was a horizontal rule. Meaning it acted like
    a break, but places a horizontal line across the page. It got an upgrade in HTML5,
    and is now a thematic break. So what's the difference? It still, by itself, does
    the same thing putting a horizontal line across the page. However, in the past
    it was used to define the layout, but now it emphasizes a change in theme or content.
  prefs: []
  type: TYPE_NORMAL
- en: However, in Blueprint CSS, the `hr` element is used specifically to capture
    a row. Okay? Let us get back to our task at hand.
  prefs: []
  type: TYPE_NORMAL
- en: 'After your `hr` element, you can start a row of content. First create a three-column
    layout for the first row. Then, insert some Ipsum ([http://Ipsum.com](http://Ipsum.com))
    text into the three `div` elements. This, like the 960 Grid, works like a table
    `colspan`, you assign a class to the `div` element corresponding to the number
    of columns you want the element to span across. The total number of columns is
    22\. The first three classes will be: `span-7`, `span-8`, and `span-7`. Follow
    the same steps with another thematic break:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'In your next row, add two large columns. Add two divs with the classes `span-15`
    and `span-7` in them. In the left-hand side `div` element, add a paragraph of
    Ipsum text and an image. In the right-hand side column, add an unordered list
    of Ipsum text sentences. Then close the row with a horizontal rule:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: This is most of the HTML we want to build for this recipe. If you want more,
    you can see the `sample.html` file in the `tests` folder of the archive you downloaded.
  prefs: []
  type: TYPE_NORMAL
- en: In your HTML header, add links to the Blueprint CSS framework stylesheets in
    the `css/Blueprint/` directory.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, let''s add our own stylesheet to make the framework a responsive one.
    Add a new link to the new stylesheet, `responsive.css`, in your header. If you
    have not already added the CSS file, then add the new `responsive.css` stylesheet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Open the `responsive.css` stylesheet. Create a media query for the smallest
    breakpoint, and for the next breakpoint. Make the media query breakpoints at `600px`
    and `1024px`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside it we''re going to use a CSS trick called an **attribute selector**
    . This is like using a wildcard `*`. To make a property apply to all of the column
    span classes in the Blueprint CSS grid, such as `span-1`, `span-2`, `span-3`,
    and more, you write it like this: `div[class*=''span'']{...}`. This is a wonderful
    trick for making responsive overrides in a CSS grid.'
  prefs: []
  type: TYPE_NORMAL
- en: At the `600px` media query, add CSS with the attribute selector, and add a width
    of `90%`. This will make all the spans expand to 100 percent when the browser
    window is less than `600px` wide. Do the same in the `1024px` media query with
    a width of `42%`. If you were expecting nice round numbers such as 100 percent
    and 50 percent, you may be surprised; but keep in mind that Blueprint CSS adds
    padding already.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Open the HTML in your browser or refresh your screen and you'll see that when
    you change the browser width, the spans adjust automatically to the new width.
  prefs: []
  type: TYPE_NORMAL
- en: You may notice that the second row leaves too much white space when you hit
    that `1024px` breakpoint. Let's fix that. Copy your attribute selector CSS line
    in the `1024px` media query and paste it beneath. Append a `.wide` class to the
    attribute selector. Give it a width of `90%`.
  prefs: []
  type: TYPE_NORMAL
- en: In your HTML file add a `wide` class to the first span after the second thematic
    break (`hr`), the one with the image inside it.
  prefs: []
  type: TYPE_NORMAL
- en: This works great on the most recent browsers, but not yet in old browsers. We'll
    need to add just a few lines of CSS to make this work in more browsers. In your
    `responsive.css` file, add on the first line the class `.container`, and give
    the attribute a width of `960px`. Then inside each media query add the same class,
    but change the width to `100%`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: That will help it from breaking in older browsers that don't support media queries.
  prefs: []
  type: TYPE_NORMAL
- en: For some extra fun, add some CSS3 transition to the spans. This will make a
    smooth animated transition to the width of the affected spans. Do this outside
    of any media queries.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'With this extra tidbit you can do some fancier responsive design in each media
    query. The new responsive Blueprint is illustrated in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it....](img/5442OT_04_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To make the Blueprint CSS framework responsive, we first changed its container
    width from a static width to a fluid maximum width, and added media queries at
    breakpoints. The key ingredient in this recipe was the attribute selector that
    allowed us to throw a wildcard at the CSS and avoid having to recode each span's
    property.
  prefs: []
  type: TYPE_NORMAL
- en: Fluid layout using the rule of thirds
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The **rule of thirds** is a design methodology that states that a layout or
    an image can be made more interesting if it is divided into three parts horizontally
    or vertically. And like everything else related to the Internet, there is endless
    discussion and debate on it. For the purpose of this book, all we care about is
    how to make it useful.
  prefs: []
  type: TYPE_NORMAL
- en: There is no indexed in search results, at least that I've seen, responsive and
    fluid layout based on the rule of thirds. However, there is a good static framework
    based on the Rule of Thirds. It's called the **Golden Grid**.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Search for `Golden Grid`, and [http://code.google.com/p/the-golden-grid/](http://code.google.com/p/the-golden-grid/)
    should be the first result. From the top navigation, go to the **Downloads** page
    and get the latest version.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Look inside the extracted files for a `CSS/golden-base` directory. Inside it,
    copy the `golden.css` file into your development directory. You will use this
    CSS file as your base framework for layout.
  prefs: []
  type: TYPE_NORMAL
- en: In a new HTML file add a link to the `golden.css` stylesheet.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Open this CSS file and edit the property of the `.main` class. Change `width:970px`
    to `max-width:970px`. This will break the static page template and allow the outer
    wrap to adjust as the browser's window shrinks.
  prefs: []
  type: TYPE_NORMAL
- en: While you have the `golden.css` stylesheet open, take a look at how this works.
    It's very simple; three vertical lines, and then for each division divide the
    page layout by half, and then in half again. The class spans start at `70px` width
    with the `80px` increments until they fill up their `width:950px;` attribute.
    To assign the `width` property to your element, assign it a class starting with
    the letter `g` plus the width and `10px` for a margin. These also have the `float:left;`
    and `display:inline;` styles. Because they are left-floating inline elements,
    when they run out of horizontal room, they will take a new line. Since they are
    left floated, they are aligned left, to move them to the right, you can either
    put empty elements in front of it, or use the framework's `.margin` class to put
    a left margin in front of it.
  prefs: []
  type: TYPE_NORMAL
- en: The margins work much like the grid span's widths, they increment by `80px`,
    the only difference is that they start at `90px` instead of `70px`. The difference
    is accounted for in the element's `margin-left:10px` property.
  prefs: []
  type: TYPE_NORMAL
- en: The elements line up in rows, and like the other frameworks we have worked with
    them in this chapter, it uses an element to clear the end of the row, before starting
    a new one. In this case, the framework uses a div with a `clear:both` property.
  prefs: []
  type: TYPE_NORMAL
- en: Let's now get back to editing the HTML file and create a responsive layout using
    the Rule of Thirds. We will start by creating a static layout. Create a header
    (`H1`) with a style of `width:100%`, and then add three divs to clear new rows.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'After the first clearing `div` element, add a `div` element with the class
    `.g960`, and we will insert a large image in which we will create responsiveness
    characteristics. You can refer to the *Resizing an image using percent width*
    recipe in [Chapter 1](ch01.html "Chapter 1. Responsive Elements and Media"), *Responsive
    Elements and Media*, for a refresher on to making images responsive:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'After the next break, insert six `div` elements, each with the class `g160`.
    Inside each, insert a paragraph of Ipsum text. For a more informative example,
    replace one of the `.g160` elements with an 80px-wide class. Be sure to also include
    the class for the margin, `ml80`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: That's likely enough for the HTML to get a clear demonstration of how to make
    this work. Let us now move on to adding our CSS to make this a responsive design.
  prefs: []
  type: TYPE_NORMAL
- en: Add a new CSS file to your `CSS` directory, `responsive.css`, and link to it
    in your HTML head.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Here, we'll add some CSS properties to make the CSS framework responsive. First,
    let's take care of that large image. We'd rather not let it stay large when the
    browser gets smaller.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Next, add media queries at two breakpoints, `600px` for mobile and `1024px`
    for tablets. You can add more as you like for larger screens, but for this recipe
    we're just covering the basics.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: For all screens smaller than `600px`, we want all the `div` elements to default
    to the full width of the screen. Do not forget that we have classes with left-margin
    properties; we'll want to shrink those to zero. To keep the new CSS minimal, let's
    use the CSS attribute selectors to wildcard select all the grid classes. Add `div[class*='g']{...}`
    and assign a width of `90%`, and `div[class*='ml'] {...}` to assign a left margin
    of `0`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: For screens ranging from 600px to 1024px, add the same but change the grid class'
    width to `48%`. For this `@media` query, we don't want every element to drop to
    half of the screen. That would kill all of the joy of this responsive framework.
    After your attribute selector, add `.wide` to make a distinct CSS property for
    this distinct class. Then, give it a width of `96%`. In your HTML, add the `wide`
    class to the title and the image parent `div` elements (they are the elements
    with the `g960` class).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot illustrates the Golden Grid behavior:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it…](img/5442OT_04_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The attribute selectors give us a tidy trick to break apart a rigid framework
    across limited column spans into a full width across the screen. Combine this
    with your custom media queries to only change the HTML on smaller screens, and
    you have an easy recipe for a responsive, and potentially visually, compelling
    layout for all sizes. This same technique can be used for a number of different
    frameworks.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's have some fun and take this a little further. We've so far in this chapter
    dealt mostly with making static frameworks that run on a mobile device. Let's
    do an experiment together to make the Golden Grid do something cool when displayed
    on a large screen. Add a new media query for the `1280px` breakpoint.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: This extra section of the recipe goes a little deeper into attribute selectors.
    It may be a bit disturbing at first to see basic logic in your CSS, but bear with
    me and you'll find some new tools for your toolbox, which you will find very useful.
    But, first let's add some more content and an HTML structure.
  prefs: []
  type: TYPE_NORMAL
- en: Copy the last row of your HTML and append it to the HTML page right after where
    you have copied it. Give it a parent `div` element with a class of `g960`. To
    the preceding `div` element, add the class `last clear`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Back to your CSS. The attribute selectors now allow more conditions, such as
    parents, children, and precedence. Let''s use this to apply CSS properties to
    the grid element preceded by the `.last` div. To do this we use a `~` symbol;
    the syntax is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: We want this element to change into a column on the right-hand side when the
    screen is bigger than 1280px to maximize our viewing area.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Next, we want all its children to line up nicely and take up the available space,
    as well as remove any margins from the `ml` classes. This syntax is much like
    the preceding one, but uses a `>` symbol; and is written like this `DIV.parent>DIV.child`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'We also need to prevent the wrapping `g960` grid element from being affected
    by the wildcard in the `max-width:1024px` media query. Add the same attribute
    selector to the grid div element preceded by the `.lost` div element and give
    it a width of `100%`, this is shown in the following code line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Now refresh your browser's window and expand it past the `1280px` breakpoint.
    You'll see that the last row move into a sidebar position. Who says frameworks
    are too rigid to be responsive?
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, you already know that media queries are not supported in old browsers,
    so since we care for all of our audience we want to give some love to the steadfast
    users of old browsers. Copy the CSS from the `1280px` media query breakpoint,
    and add it to a pre IE9-only stylesheet. Then make a conditional link to the stylesheet
    in your header:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: This will take care of the old-browser-support issues and your site will still
    look good in the older browsers.
  prefs: []
  type: TYPE_NORMAL
- en: Trying Gumby, a responsive 960 grid
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Gumby framework is a continued effort on the good old reliable static 960
    Grid framework. It was brought to you by the nice folks at Digital Surgeons. The
    framework itself has been updated, and a good number of bells and whistles have
    been added. There are, of course more features than we have time to go through
    in this recipe, so we're going to stick solely to the improved layout structure
    of the framework.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's take a look at the Gumby 960 Responsive framework's website [gumbyframework.com/](http://gumbyframework.com/).
    As you go through it, you can see the modernized framework features in action.
    The layout snaps nicely to a mobile version at 767px, and in addition transforms
    the menu into a usable mobile navigation. There are several useful UI elements
    included that you will want to spend some time to getting familiar with.
  prefs: []
  type: TYPE_NORMAL
- en: Click on the highly prominent **Download Gumby 2** button on the navigation
    to acquire the Gumby's master version archive. Included inside the package are
    Photoshop files to help you design your layout, the actual framework CSS, JavaScript,
    image files, and sample HTML files. The `demo.html` file could be a good place
    to examine the source and make some discoveries about how the framework is used.
  prefs: []
  type: TYPE_NORMAL
- en: But save the poking around for later, let's jump right into building a page.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Start by creating a new page in your HTML editor. This framework has a lean
    method of importing in your CSS scripts inside a singular link to `css/imports.css`.
    Inside that file, the different stylesheets are imported. This is a helpful concept
    in case you need to change or add stylesheets in the future, you can control it
    in this CSS file.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'This is what the CSS looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Just so you don''t forget, add your links to a jQuery library and the included
    JavaScript files: `gumby.min.js`, `plugins.js`, and `main.js`, at the end of the
    page directly before the closing `body` tag. You will need these later.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Now that the basics are taken care of, let's move on to some development. The
    Gumby Responsive Grid framework can use either 12 or 16 columns. Start with building
    a 12-column layout and later we will make the page a hybrid one by adding a 16-layer
    section.
  prefs: []
  type: TYPE_NORMAL
- en: Inside your HTML body, add a `div` element with the class `container`. The default
    layout inside the `container` class element is 12 columns. Next, inside the `container`
    class element, add a new `div` element with a `row` class assigned. The `row`
    class element encapsulates each entire range of the 12 column spans. Inside each
    row, you have 12 column spans to work with, to build your content divs with.
  prefs: []
  type: TYPE_NORMAL
- en: Insert inside the `row` class element three new div elements with classes, `four
    columns`, `three columns`, and `five columns`. The column classes can be of whatever
    number your design requires, as long as they together are equal to 12\. The number
    label of the class determines the number of column spans the element occupies.
    Inside each of these elements add a paragraph of Ipsum filler text ([http://ipsum.com](http://ipsum.com)),
    to help give a more illustrative demonstration of the layout.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Feel free to launch this page in your browser now and see how it looks. Test
    its responsiveness to see how it behaves on the smaller screens. The CSS for the
    class, `columns`, looks as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'The CSS for the number classes look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, the `columns` class gives a relative position and floats the
    element to the left, with padding and some other style.
  prefs: []
  type: TYPE_NORMAL
- en: Next add another `div` element with the `row` class. And inside the `row` div,
    add a row of the six smaller `div` elements. Each of the new `div` elements will
    have the classes, `two` and `columns`. These together will take up a span of 12
    columns. Include a short paragraph of text inside each element.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: In your browser, you can see that these align nicely into six columns of content.
    When you go to a small browser window, you will see that they jump to 100 percent
    width.
  prefs: []
  type: TYPE_NORMAL
- en: So far, the grids work in an orderly fashion if you have designed all your element
    to float against the left-hand side of the screen. However, that is not always
    the case; there will always be uses for content to be right, center, or some other
    arbitrary alignment. Don't worry, the Gumby 960 Responsive framework has thought
    of that. Let's add some more rows that demonstrate how to do that.
  prefs: []
  type: TYPE_NORMAL
- en: In the first row, we'll make two `div` elements, one on the left-hand side,
    and one on the right-hand side. Add a new `row` div element, and inside it, add
    two more `div` elements. Give the first one, which will lie on the left-hand side
    of the screen, the classes `two` and `columns`. With these two classes, the first
    `div` element floats left and spans across two columns. We want the next `div`
    element to only take up six columns, give it the classes, `six` and `columns`.
    We do not want this next column to float towards the left; instead, it should
    have some space between the previous `div` element and itself. To make this, there
    is a series of classes that have only a set percentage left-margin. In this case,
    we need to push the element four column spans to the right. To do so add the class,
    `push_four`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is the CSS for the `push_four` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'To make a column span of content *centered*, there is a special class for that.
    I put center in quotes, because it''s not really centered, it''s pseudo-centered.
    Instead of using a `text-align:center` or `float:center` property, the Gumby Grid
    uses a smart left-margin system. The CSS for the centered `six column` div element
    looks as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'It follows the same pattern as the number classes, a centered `five column`
    row has a greater left margin: `margin-left: 29.787282%`.'
  prefs: []
  type: TYPE_NORMAL
- en: Finally, before we end this recipe, let's make use the framework to build a
    responsive menu. This is worth the little extra time to show at least one of the
    responsive UI elements included in the framework.
  prefs: []
  type: TYPE_NORMAL
- en: Since the CSS is already built we'll just go through the HTML to build this
    menu. Back at the top of the `container` div element, add a `row` div element.
    In the `row` div element add a `nav` element with the `id` value of `"prettynav"`
    and the `pretty navbarclearfix` class. Next, inside the `nav` element, add an
    `a href` tag with a `link` value equal to `#`, a `toggle` class, and a `data-for`
    value as `#prettynav&gt;ul` element tag. Instead of text inside the `a href` element,
    add the image inside that is included in the `img` directory, `img/icon_nav_toggle.gif`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: The `a href` element works as a button to display the navigation menu, when
    it is hidden in the mobile version of the menu.
  prefs: []
  type: TYPE_NORMAL
- en: 'Following the `a href` element, add an unordered list (`ul`) with list items
    (`li`) that contain the links of your navigation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: This alone creates a nice responsive menu system and that would be exciting
    enough, but there's still more. You can add a submenu to each one of those menu
    list items. To add one submenu, add a `div` element with a class `dropdown`. Inside
    that `div` element, add a submenu `ul` with list items similar to the parent.
    They automatically are converted to a hidden submenu!
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot illustrates the Gumby framework:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it…](img/5442OT_04_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Gumby 960 Grid framework was designed and built to be an elegant and easy
    layout and element framework. There is not much needed to know how to make it
    work. First, learn how to class your `div` elements to make them work within the
    framework. Secondly, build it. Understanding how to use the UI elements included
    in the framework will require some more involvement, but it will be well worth
    your time.
  prefs: []
  type: TYPE_NORMAL
- en: The Bootstrap framework makes responsive layouts easy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Bootstrap framework (formerly known as the **Twitter Bootstrap** framework)
    stands out from most other frameworks, as it is completely responsive out of the
    box. You can either use it as a static framework, or use their additional files
    to quickly deploy a fully responsive site. This is a great tool to use when you
    need to produce fast and good sites, and you are willing to make minimal design
    adjustments to an external standard.
  prefs: []
  type: TYPE_NORMAL
- en: Acquiring the framework is as easy as searching for `Bootstrap Framework` and
    going to the first link, [http://twitter.github.com/bootstrap/](http://twitter.github.com/bootstrap/),
    and clicking on the big **Download Bootstrap** button. The package includes CSS
    files, images, and JavaScript, but no documentation. There is, however, plenty
    of good documentation online at their site, and the source of their examples is
    highly coherent. This recipe will get you started along the path of using the
    Bootstrap framework.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Building with the Bootstrap framework is remarkably easy; you can get a template
    spun up in a matter of minutes. That being said, let''s push through it. Spin
    up a new HTML file and get started. First, add a link in your header to the Bootstrap
    CSS files so we can on occasion see our work in action:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Let us start with a simple page with a top navigation and content. The navigation
    will respond to the screen's width and optimize for each display. The navigation
    `div` element uses several classes to achieve the desired results; they are `navbarnavbar-inverse
    navbar-fixed-top`. Inside it, add a `div` element with the class `container`.
    Inside the `container` div element, there is a button graphic that is displayed
    in the mobile version. When clicked, it displays the mobile version of the menu.
    The menu is displayed in an optimized manner for both mobile and desktop versions.
    Pretty cool, eh!
  prefs: []
  type: TYPE_NORMAL
- en: 'Following is a sample menu to show how it is put together:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: Then, insert into your header, a link to the jQuery library.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: Then, at the bottom of your HTML, right before the closing `body` tag, add a
    link to the `js/bootstrap.js` file.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: Finally, if you haven't already copied the JS directly into your `webroot`,
    do so.
  prefs: []
  type: TYPE_NORMAL
- en: Now, check your slick responsive navigation.
  prefs: []
  type: TYPE_NORMAL
- en: That was great, wasn't it? Now that we're both excited about the Bootstrap framework,
    let's get to work on some responsive content layout. Next, let's go through and
    build what Bootstrap calls a basic marketing site.
  prefs: []
  type: TYPE_NORMAL
- en: 'First thing to do is add a `div` element with the `container` class. If you
    look back at our menu, you''ll find that this class is a clever re-usable layout
    element used throughout, to control the responsive width of the containing elements.
    Inside the `container` element, add a new `div` element and give it a class, `hero-unit`.
    Inside the `hero-unit` class, add some content that you want to display in a large
    billboard style on the screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: Refresh your browser and try that on for size. Everything looks great without
    much effort. Beneath that we want to add some columns of the teaser text. This
    is starting to look like a good landing page. Aren't you glad you are doing this?
  prefs: []
  type: TYPE_NORMAL
- en: The Bootstrap framework uses a `div` element with a `row` class to outline its
    column spans. So to create a new *row* of content, add a new `div` element with
    the `row` class. Inside the row you have 12 spans available to work your content
    into. For this recipe, let's stick with simple, so insert three new `div` elements,
    each with a `span4` class, inside the `row` div element. Inside each `span4` element,
    add a secondary header and a paragraph of Ipsum ([http://lipsum.com](http://lipsum.com))
    filler text.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: Open up your browser window or refresh it and see this nice layout in action.
    The newest row takes up three columns and collapses nicely into a single column,
    when you go to a mobile browser or windows with a smaller widths.
  prefs: []
  type: TYPE_NORMAL
- en: You could copy the entire `row` class element and inner HTML, and paste it to
    add a whole new row of content, and it will behave nicely.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have made a good looking page and it did not take any earth-shattering
    exertion, let us add another level to the page. This part is an excellent demonstration
    of the flexibility of the Bootstrap framework. Next, you are going to add a side
    navigation to the page.
  prefs: []
  type: TYPE_NORMAL
- en: In the second `container` class element, wrap the `hero-unit` and `row` elements
    in a new `div` element and assign that element a `span9` class. Next, insert before
    your new element another `div` element with the class `span3`. That should take
    care of the change in layout of the page; next we are going to rapidly build a
    menu inside it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add a new `div` element inside your `span3` div class, and give it the classes:
    `well` and `sidebar-nav`. These give the sidebar navigation a good-looking style.
    Now, onto the menu list, add an unordered list (`ul`) with the classes, `nav`
    and `nav-list`. You can add list section headers by assigning a class `nav-header`
    to a list item. Add in each of the list items, a `href` link for the navigation
    items:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: You're almost done; there are only a couple of more steps in this recipe. Wrap
    your two new `span*` elements in another `div` element with a `row` or `row-fluid`
    class. Finally, change the `row` div element class name that contains the teaser
    content's elements to `row-fluid`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'Congratulations, you are done! You now have a firm base to a professional-looking
    responsive layout and design. You could only make a few modifications to this
    and have a finished product. The following screenshot shows the base Bootstrap
    framework:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/5442OT_04_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Like magic! No really, the Bootstrap framework has to be one of the easiest
    and well thought-out frameworks I've worked with yet. Once you go through the
    recipe and their documentation to get familiar with the classes and layout, it's
    very easy to rapidly develop your projects.
  prefs: []
  type: TYPE_NORMAL
- en: There are some specific items I want to discuss. First the responsive menu;
    the top `div` element inside the `container` class is `button`, which is displayed
    only in the mobile version, and its purpose is, when clicked, to reveal the hidden
    menu `div` element, `nav-collapse`, in a mobile style.
  prefs: []
  type: TYPE_NORMAL
- en: This, by itself, gives you a great starter for a usable and very elegant responsive
    menu. However, you will find that the button does not work by itself, that's because
    we need to add some JavaScript to make this battle-station fully operational.
  prefs: []
  type: TYPE_NORMAL
- en: The responsive layout does heavy lifting behind the scenes for you also. Each
    row of the columns you create takes up the specified columns, but collapses nicely
    into a single column when you go to a mobile browser, or a window with small width.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There is so much more you can do with this framework. There are rich elements,
    menus, UI functions, and animations galore included in the Bootstrap framework.
    Take some time and get a more in-depth understanding of the framework and you
    will be happy you did. After learning this I found that I could deploy new work
    much more quickly and with a much less frustrating process.
  prefs: []
  type: TYPE_NORMAL
