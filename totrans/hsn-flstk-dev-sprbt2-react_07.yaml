- en: Consuming the REST API with React
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter explains networking with React. We will learn about promises, which
    make asynchronous code cleaner and more readable. For networking, we will use
    the `fetch` library. As an example, we use the GitHub REST API to demonstrate
    how to consume RESTful Web Services with React.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will look at the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Using promises
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to use Fetch
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to make requests to the REST API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to handle responses from the REST API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to create a React app that consumes the REST API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this book, we are using the Windows operating system, but all tools are available
    for Linux and macOS as Node.js and `create-react-app` have to be installed.
  prefs: []
  type: TYPE_NORMAL
- en: Using promises
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The traditional way to handle an asynchronous operation is to use callback
    functions for the success or failure of the operation. One of the callback functions
    is called, depending on the result of the call. The following example shows the
    idea of using the callback function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: A promise is an object that represents the result of an asynchronous operation.
    The use of promises simplifies the code when doing asynchronous calls. Promises
    are non-blocking.
  prefs: []
  type: TYPE_NORMAL
- en: 'A promise can be in one of three states:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Pending**: Initial state'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fulfilled**: Successful operation'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Rejected**: Failed operation'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'With promises, we can do asynchronous calls if the API we are using supports
    promises. In the next example, the asynchronous call is done and, when the response
    is returned, the function inside `then` is executed and it takes the response
    as an argument:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'You can chain `thens` together, which means that you can run multiple asynchronous
    operations one after another:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also add error-handling to promises by using `catch()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'There is a more modern way to handle asynchronous calls, with `async`/`await`,
    which was introduced in ECMAScript 2017\. It is yet not as widely supported by
    browsers as promises. `async`/`await` is actually based on the promises. To use
    `async`/`await`, you have to define an `async` function that can contain await
    expressions. The following is an example of an asynchronous call with `async`/`await`.
    As you can see, you can write the code in a similar way to synchronous code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'For error-handling, you can use `try…catch` with `async`/`await`, as shown
    in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Using the Fetch API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With the Fetch API, you can make web requests. The idea of the Fetch API is
    similar to traditional `XMLHttpRequest`, but the Fetch API also supports promises
    that makes it more straightforward to use.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Fetch API provides a `fetch()` method that has one mandatory argument,
    which is the path of the resource you are calling. In the case of a web request,
    it will be the URL of the service. For a simple `GET` method call, which returns
    a JSON response, the syntax is the following. The `fetch()` method returns a promise
    that contains the response. You can use the `json()` method to parse the JSON
    body from the response:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'To use another HTTP method, such as `POST`, you can define it in the second
    argument of the `fetch` method. The second argument is the object where you can
    define multiple request settings. The following source code makes the request
    using the `POST` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also add headers inside the second argument. The following `fetch`
    call contains the `''Content-Type'' : ''application/json''` header:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'If you have to send JSON-encoded data inside the request body, the syntax is
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also use other libraries for the network calls. One very popular library
    is `axios` ([https://github.com/axios/axios](https://github.com/axios/axios)),
    which you can install to your React app with npm. axios has some benefits, such
    as automatic transform for JSON data. The following code shows the example call
    with `axios`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '`axios` has its own call methods for the different HTTP methods. For example,
    if you want to make a `DELETE` request, `axios` provides the `axios.delete` method.'
  prefs: []
  type: TYPE_NORMAL
- en: Practical examples
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will go through two examples of using some open REST APIs. First, we will
    make a React app that shows the current weather in London. The weather is fetched
    from **OpenWeatherMap** ([https://openweathermap.org/](https://openweathermap.org/)).
    You need to register to OpenWeatherMap to get an API key. We will use a free account
    as that is enough for our needs. When you have registered, navigate to your account
    info to find the API keys tab. There you''ll see the API key that you need for
    your React weather app:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5c8092f6-ddb2-4eb7-997e-0f8efb109fcc.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s create a new React app with `create-react-app`. Open the PowerShell
    or other terminal you are using, and type the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Move to the `weatherApp` folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Start your app with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Open your project folder with the VS Code and open the `App.js` file in the
    editor view. Remove all code inside the `<div className="App"></div>` divider.
    Now your source code should look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: If you have installed *Reactjs code snippets* to VS Code, you can create a default
    constructor automatically by typing `con`. There are lots of different shortcuts
    for typical React methods, such as `cdm` for `componentDidMount()`.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we add a necessary constructor and state. We will show the temperature,
    description, and weather icon in our app, therefore, we define three state values.
    We will also add one Boolean state to indicate the status of fetch loading. The
    following is the source code of the constructor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'When you are using a REST API, you should first inspect the response to be
    able to get values from the JSON data. In the following example, you can see the
    address that returns the current weather for London. Copy the address to a browser
    and you can see the JSON response data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'From the response, you can see that the `temp` can be accessed using `main.temp`.
    The `description` and `icon` are inside the `weather` array, which has only one
    element and we can access it using `weather[0].description` and `weather[0].icon`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/58d33570-1810-4bd8-b7bc-ee969bf1982b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The REST API call is done with the `fetch` in the `componentDidMount()` life
    cycle method. After the successful response, we save the weather data to the state
    and change the `loading` state to `false`. After the state has been changed, the
    component will be re-rendered. We will implement the `render()` method in the
    next step. The following is the source code of the `componentDidMount()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'After you have added the `componentDidMount()` method, the request is done
    when the component is mounted. We can check that everything is done correctly
    using the React Developer Tool. Open your app in a browser and open your browser
    developer tool''s React tab. Now you can see that the state is updated with the
    values from the response. You can also check from the Network tab that the request
    status is 200 OK:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6a5fcf09-fa18-4fe1-a7c8-056e19dfe85f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Finally, we implement the `render()` method to show weather values. We are
    using conditional rendering, otherwise, we get an error because we don''t have
    image code in the first render call and image upload won''t succeed. To show the
    weather icon, we have to add `http://openweathermap.org/img/w/` before the icon
    code and `.png` after the icon code. Then, we can set the concatenated image URL
    to the `img` element''s `src` attribute. The temperature and description are shown
    in the paragraph element. The °C  HTML entity shows the Celsius degrees symbol:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Now your app should be ready. When you open it in a browser, it should look
    like the following image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d49416f9-8258-45c6-abf7-b97051ccffb0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The source code of the whole `App.js` file looks as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: In this second example, we are going to use the GitHub API to fetch repositories
    by a keyword. With the same steps as in the previous example, create a new React
    app called `restgithub`. Start the app and open the project folder with the VS
    Code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Remove the extra code inside the `<div className="App"></div>` divider from
    the `App.js` file and again your `App.js` code should look like the following
    sample code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'The URL of the GitHub REST API is the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s inspect the JSON response by typing the URL into a browser and using
    the `react` keyword. From the response, we can see that repositories are returned
    as a JSON array called `items`. From the individual repositories, we will show
    the `full_name` and `html_url` values. We will present the data in the table and
    use the `map` function to transform the values to table rows, as shown in the
    previous chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c321abb3-1e98-45ad-801a-871562227449.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We are going to make the REST API call with the keyword from the user input.
    Therefore, we can''t make the REST API call in the `componentDidMount()` method
    because, in that phase, we don''t have the user input available. One way to implement
    this is to create an input field and button. The user types the keyword into the
    input field and the REST API call is done when the button is pressed. We need
    two states, one for the user input and one for the data from the JSON response.
    The following is the source code of the `constructor`. The type of data state
    is an array because repositories are returned as JSON arrays in the response:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we implement the input field and the button into the `render()` method.
    We also have to add a change listener to our input field to be able to save the
    input value to the state, called `keyword`. The button has a click listener that
    invokes the function that will do the REST API call with the given keyword:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `fetchData` function, we concatenate the `url` and `keyword` state by
    using template literals. Then we save the `items` array from the response to the
    state, called `data`. The following is the source code of the `fetchData` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `render` method, we first use the `map` function to transform the `data`
    state to table rows. The `url` repository will be the `href` of the link element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the final app when using the React keyword in
    the REST API call:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/57460be9-dbdb-4481-a62d-4d545ba5ea6a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The source code of the whole `App.js` file looks like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we focused on networking with React. We started with promises
    that make asynchronous network calls easier to implement. It is a cleaner way
    to handle calls, and much better than using traditional callback functions. In
    this book, we are using the Fetch API for networking, therefore we went through
    the basics of using `fetch`. We implemented two practical React apps that calling
    open REST APIs and we presented the response data in the browser. In the next
    chapter we will look some useful React component that we are going to use in our
    frontend.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What is a promise?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is `fetch`?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How should you call the REST API from the React app?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How should you handle the response of the REST API call?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Packt has other great resources for learning about React:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.packtpub.com/web-development/getting-started-react](https://www.packtpub.com/web-development/getting-started-react)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://www.packtpub.com/web-development/react-16-essentials-second-edition](https://www.packtpub.com/web-development/react-16-essentials-second-edition)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
