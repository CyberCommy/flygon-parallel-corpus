- en: Chapter 6. Displaying Your Views
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating and using a basic view
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Passing data into a view
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Loading a view into another view/nested views
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding assets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a view using Blade
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using TWIG templates
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Utilizing advanced Blade usage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating localization of content
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating menus in Laravel
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrating with Bootstrap
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using named views and view composers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In a Model-View-Controller setup, our **views** hold all the HTML and styles
    so we can display our data. In Laravel, our views can use either regular PHP files
    or we can use Laravel's Blade templating. Laravel is also extensible enough to
    allow us to use any templating engine we may want to include.
  prefs: []
  type: TYPE_NORMAL
- en: Creating and using a basic view
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we'll see some basic **view** functionality and how we can include
    views in our app.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we need a standard Laravel installation.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to complete the recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: In the `app/views` directory, create a folder name `myviews`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the new `myviews` directory, create two files: `home.php` and `second.php`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open `home.php` and add the following code in HTML:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Open the `second.php` file and add the following code in HTML:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'In our `app/routes.php` file, add the routes that will return these views:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Test the views by going to `http://{your-server}/home` (where `your-server`
    is our URL) and clicking on the link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: All of the views in Laravel are kept in the `app/views` directory. We start
    by creating two files that will hold our HTML. In this example, we're creating
    static pages, with each view holding its own full HTML markup.
  prefs: []
  type: TYPE_NORMAL
- en: In our routes file, we then return `View::make()`, with the name of the view
    passed in. Since our views are in a subdirectory of the views directory, we use
    the dot notation.
  prefs: []
  type: TYPE_NORMAL
- en: Passing data into a view
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In our web app, we will usually need to display some kind of data from our database
    or other data store. In Laravel, we can easily pass that data into our views.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we need to have completed the *Creating and using a basic view*
    recipe .
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To complete this recipe, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `routes.php` and replace our home and second routes to include the
    following data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `view/myviews` directory, open `home.php` and replace the code with
    the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `views/myviews` directory, open the `second.php` file and replace the
    code with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Test the views by going to `http://{your-server}/home` (where `your-server`
    is our URL) and then clicking on the link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If we want to get data into our views, Laravel offers various ways to accomplish
    this. We start by updating our first route by passing a single variable to the
    view, by chaining the `with()` method to `View::make()`. Then, in the view file,
    we can access the variable by using whichever name we chose.
  prefs: []
  type: TYPE_NORMAL
- en: In our next route, we assign `View::make()` to a variable, and then assign values
    as the object's properties. We can then access those properties as variables in
    our view. To display the view, we simply return the object variable.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'One other way to add data to our views is similar to the way in our second
    route; however we use an array instead of an object. So our code would look similar
    to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Loading a view into another view/nested views
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Very often, our web pages will have a similar layout and HTML structure. To
    help separate out the repeated HTML, we can use **nested views** in Laravel.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we need to have completed the *Creating and using a basic view*
    recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To complete this recipe, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: In the `app/view` directory, add a new folder named `common`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `common` directory, create a file named `header.php` and add the following
    code to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `common` directory, create a file named `footer.php` and add the following
    code to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `common` directory, create a file named `userinfo.php` and add the following
    code to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `routes.php` file, update the home and second route to include the following
    nested views:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `views/myviews` directory, open the `home.php` file and add the following
    code to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `views/myviews` directory, open the `second.php` file and add the following
    code to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Test the views by going to `http://{your-server}/home` (where `your-server`
    is our URL) and then clicking on the link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To begin, we need to separate out our header and footer code from our views.
    Since these will be the same on every page, we create a subdirectory in our `views`
    folder to hold our common files. The first file is our header, which will hold
    everything up until the `<body>` tag. Our second file is our footer, which will
    hold the HTML at the bottom of our page.
  prefs: []
  type: TYPE_NORMAL
- en: Our third file is a `userinfo` view. Very often, if we have user accounts with
    profiles, we may want to include the user's data in a sidebar or header. So that
    we can keep that one piece of our view separate, we create the `userinfo` view
    with some data that we will pass to it.
  prefs: []
  type: TYPE_NORMAL
- en: For our home route, we will use our home view and nest in the header and footer.
    The first parameter in the `nest()` method is the name we will use in the main
    view and the second parameter is the location of the view. For this example, our
    views are on the common subdirectory, so we use the dot notation to reference
    them.
  prefs: []
  type: TYPE_NORMAL
- en: In our home view, to display the nested views, we print out the variable name
    we used in our route.
  prefs: []
  type: TYPE_NORMAL
- en: For our second route, we nest in the header and footer as well but we also want
    to add in the `userinfo` view. For this, we pass in a third parameter to the `nest()`
    method, which is an array of the data we want to send to the view. Then, in our
    main view, when we print out the `userinfo` view, it will automatically have the
    variables included.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Passing data into a view* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding assets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A dynamic website almost requires the use of CSS and JavaScript. Using a Laravel
    asset package provides an easy way to manage these assets and include them in
    our views.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we'll need to use the code created in the *Loading a view into
    another view/nested views* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To complete this recipe, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `composer.json` file and add the `asset` package to the `require`
    section, so it looks similar to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'In the command line, run composer update to download the package as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Open the `app/config/app.php` file and add `ServiceProvider` to the end of
    the providers array as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'In the same file, in the `aliases` array, add the alias for the package as
    follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `app/filters.php` file, add a custom filter for our assets as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `views/common` directory, open `header.php` and use this code as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `views/common` directory, open `footer.php` and use the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Test the views by going to `http://{your-server}/home` (where `your-server`
    is our URL), clicking on the link, and viewing the source of the page to see the
    assets included.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `asset` package makes it very easy to add CSS and JavaScript files to our
    HTML. To begin, we need to "register" each asset with the routes. To make things
    a bit simpler, we'll add the assets in a filter that will be called before our
    routes. That way, we only have the code in one place and making changes will be
    easy. For our purposes, we'll use jQuery, jQueryUI, and bootstrap CSS from a CDN
    source.
  prefs: []
  type: TYPE_NORMAL
- en: The first parameter of the `add()` method is the name we're giving the asset.
    The second parameter is the URL of the asset; it could either be a relative path
    or a full URL. The third, optional parameter is the dependency of the asset. In
    our example, jQueryUI requires that jQuery already be loaded, so we pass in the
    name of our jQuery asset in the third parameter.
  prefs: []
  type: TYPE_NORMAL
- en: We then update our routes to add the filter. If we add or remove any assets
    in our filter, it will automatically be reflected in each of our routes.
  prefs: []
  type: TYPE_NORMAL
- en: Since we're using nested views, we only need to add the assets to our header
    and footer views. Our CSS files are called by the `styles()` method and the JavaScript
    is called by the `scripts()` method. Laravel checks the file extensions of the
    assets and automatically puts them in the right place. If we look at the source
    code, we'll notice that Laravel has also made sure to add the jQuery script before
    jQueryUI, since we set it as a dependency.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Using a filter on the route* recipe in [Chapter 5](ch05.html "Chapter 5. Using
    Controllers and Routes for URLs and APIs"), *Using Controllers and Routes for
    URLs and APIs*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a view using Blade
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: PHP has many templating libraries available and Laravel's Blade is one of the
    best. This recipe will show an easily extendable way to get up-and-running with
    Blade templates, and quickly.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we need a standard Laravel installation.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To complete this recipe, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `routes.php` file, create new routes for our pages as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: In the `views` directory, create a new folder named `layout`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `views/layout` directory, create a file named `index.blade.php` and
    add the following code to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: In the `views` directory, create a folder named `blade`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `views/blade` directory, create a file named `home.blade.php` and add
    the following code to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `views/blade` directory, create a file named `second.blade.php`, and
    add the following code to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Test the views by going to `http://{your-server}/blade-home` (where `your-server`
    is our URL) and then clicking on the link, and viewing the source of the page
    to see the Blade layout included.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To start, we create two simple routes that will return our Blade views. By using
    the dot notation, we can see that we'll be putting the files in the `blade` subdirectory
    of our `views` folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our next step is to create a Blade layout view. This will be the skeleton of
    our pages and will be put in the layout subdirectory of our `views` folder, and
    it must have `blade.php` as the file extension. This view is simple HTML, with
    two exceptions: the `@section()` and `@yield()` areas. This content is what will
    be replaced or added to in our views.'
  prefs: []
  type: TYPE_NORMAL
- en: In our routes' views, we begin the file by declaring which Blade layout to use,
    which for our case is `@extends('layout.index')`. Then we can add and alter the
    content sections we declared in our layout. For the `page_title` section, we want
    to display the text in the layout, but we want to add in some extra text to the
    end. To accomplish that, we call `@parent` as the first thing in that content
    area, and then put in any of our own content.
  prefs: []
  type: TYPE_NORMAL
- en: In `@section('content')`, there was no default text in the layout, so everything
    will be added. Using Blade, we can also use the `{{ }}` braces to print out any
    PHP we need. In our case, we're using the `HTML::link()` of Laravel to display
    a link. Now, when we go to the page, all the content area is put in the correct
    place in the layout.
  prefs: []
  type: TYPE_NORMAL
- en: Using TWIG templates
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Laravel's Blade templates may be nice but there are times when we need another
    PHP template library. A popular one is Twig. This recipe will show how to incorporate
    Twig templates into our Laravel application.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we'll just need a standard Laravel installation.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to complete this recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `composer.json` file and add the following line to the `require` section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'In the command line, update composer to install the package:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Open the `app/config/app.php` file and, in the `providers` array, add Twig
    ServiceProvider at the end as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'In the command line, run the following command to create our config file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'In `routes.php`, create a route as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `views` directory, create a file named `twiglayout.twig` and add the
    following code to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `views` directory, create a file named `twig.twig`, and add the following
    code to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Test the views by going to `http://your-server/twigview` (where `your-server`
    is our URL) and view the source of the page to see the twig layout included.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To start, we're going to install the `TwigBranch` package into our application.
    This package also installs the `Twig` library. After the package is installed,
    we create its configuration file using `artisan`, and add its service provider.
  prefs: []
  type: TYPE_NORMAL
- en: In our route, we'll use the same syntax as Laravel's built-in view library,
    and call view. We're also creating a simple link, saving it to a variable, and
    passing that variable into the view.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we create our layout. All Twig view files must have the `.twig` extension,
    so our layout is named `twiglayout.twig`. Inside the layout is a standard HTML
    skeleton, but we've added two Twig content blocks. The `page_title` block has
    some default content, while the `content` block is empty.
  prefs: []
  type: TYPE_NORMAL
- en: For our route's view, we begin by extending the layout view. For our `page_title`
    block, we start by printing out the default by using `{{ parent()}}` and then
    adding in our own content. Then our content block is added and will display the
    link we passed in as a variable. Using Twig, we don't need to use `$` for our
    variables, and if we pass in HTML, Twig will automatically escape it. So in our
    view, since we want to display the link, we need to make sure to add in the raw
    parameter.
  prefs: []
  type: TYPE_NORMAL
- en: Now, if we go to our page in the browser, we'll see all our content in its correct
    place.
  prefs: []
  type: TYPE_NORMAL
- en: Utilizing advanced Blade usage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using Laravel's Blade templating system, we have access to some powerful features
    that make our development much quicker. For this recipe, we'll pass some data
    to our blade views and loop through it, along with some conditionals.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we'll need the code created in the *Creating a view using Blade*
    recipe .
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to complete this recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `routes.php` file and update the `blade-home` and `blade-second` routes
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `views/blade` directory, update the `home.blade.php` file with the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `views/blade` directory, update the `second.blade.php` file with the
    following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `views/blade` directory, create a new file named `info.blade.php` and
    add the following code to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Test the views by going to `http://{your-server}/blade-home` (where `your-server`
    is our URL) and click on the links to see the views work.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we'll be passing some data to our Blade views, looping through
    it, and adding in some conditionals. Typically, we would use this with results
    from a database but, for our purposes, we'll create a simple data array in our
    routes.
  prefs: []
  type: TYPE_NORMAL
- en: Our first route contains an array of movies, with their year and a slug that
    we can use for the URL. Our second route will create an array with the slug as
    a key and accept the slug in the URL. We then pass in the details of a single
    movie into the view, by calling the movie that has the slug as a key.
  prefs: []
  type: TYPE_NORMAL
- en: In our first view, we create a `@foreach` loop, to run through also the data
    in the array. We've also included a simple `@if` statement that checks for a specific
    movie and then prints out some extra information. As we loop through, we display
    links to the second route, with the slug added on.
  prefs: []
  type: TYPE_NORMAL
- en: The second view displays the name of the movie, but all includes another Blade
    view by using `@include()` in the content block. This way, all the data is also
    available in the included view; thus, for our `info` view, we can just use the
    same variables that we set in our route.
  prefs: []
  type: TYPE_NORMAL
- en: Creating localization of content
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If our app is going to be used by people in different countries, or who speak
    different languages, we'll need to localize the content. Laravel provides an easy
    way to do this.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we just need a standard installation of Laravel.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For this recipe, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `app/lang` directory, add three new directories (if they aren''t already
    there) : `en`, `es`, and `de`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `en` directory, create a file named `localized.php` and add the following
    code to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `es` directory, create a file named `localized.php` and add the following
    code to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `de` directory, create a file named `localized.php` and add the following
    code to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'In our `routes.php` file, create four routes as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: In the `views` directory, create a folder named `language`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In `views/language`, create the file `choose.php` and add the following code
    to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `views/language` directory, create a file named `localized.php` and
    add the following code to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `views/language` directory, create a file named `localized-german.php`
    and add the following code to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: In the browser, go to `http://{your-server}/choose` (where `your-server` is
    our URL), submit the form, and test the localization.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we begin by setting up our language directories in the `app/lang`
    directory. We'll be using `en` for our English files, `es` for our Spanish files,
    and `de` for our German files. Inside each directory, we create a file using the
    exact same name, and add in an array, using the exact same keys.
  prefs: []
  type: TYPE_NORMAL
- en: Our first route is going to be a language selector page. On this page, we can
    choose either English or Spanish. When we submit, it will `POST` to the route,
    create a new session, add the choice, and redirect to the page to display the
    text in the chosen language.
  prefs: []
  type: TYPE_NORMAL
- en: Our localized route takes the session and passes the choice to `App::setLocale()`.
    We also have a default value of English if there was no session set.
  prefs: []
  type: TYPE_NORMAL
- en: In our localized view, we print out the text using `Lang::get()`. In the first
    line of our language file, we also included the `:name` placeholder, so we can
    pass in an array with the placeholder name as the key when we call the language
    file.
  prefs: []
  type: TYPE_NORMAL
- en: Our last route shows how we can statically set the language default in our route.
  prefs: []
  type: TYPE_NORMAL
- en: Creating menus in Laravel
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Menus are a common facet of most websites. In this recipe, we'll create menus
    using Laravel's nested views and change the default "state" of the menu item,
    depending on which page we're on.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this menu, we need a standard installation of Laravel.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We need to follow these steps to complete the recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `routes.php` file, create three routes as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'In the views directory, create a file named menu-layout.php and add the following
    code to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `views` directory, create a file named `menu-menu.php` and add the following
    code to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: In the `views` directory, create three view files with the names `menu-one.php`,
    `menu-two.php`, and `menu-three.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For `menu-one.php`, use the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'For `menu-two.php`, use the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'For `menu-three.php`, use the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: In the browser, go to `http://{your-server}/menu-one` (where `your-server` is
    our URL) and click through the menu links.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We begin by making three routes to hold our three pages. Each route will use
    a single layout view, and nest in a menu view and a content view that are specific
    to the route.
  prefs: []
  type: TYPE_NORMAL
- en: Our layout view is a basic HTML skeleton with some on-page CSS. Since we want
    to highlight the menu item of the current page, one of the class selectors is
    named `active` and will be added to our menu list item.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we create our menu view. We're using an unordered list, with links to
    each page. To add in the `active` class to our current page item, we use `Request::segment(1)`
    of Laravel to get the route we're on. If it's the same as the list item, we add
    the `active` class and otherwise leave it blank. Then we use the `HTML::link()`
    of Laravel to add in the links to our pages.
  prefs: []
  type: TYPE_NORMAL
- en: The other three views are just very simple content, with a header and a few
    words. Now, when we go to the page in our browser, we'll see the menu item of
    the page we're on is highlighted, while the others are not. If we click on a link,
    that item will then be highlighted and the others will not.
  prefs: []
  type: TYPE_NORMAL
- en: Integrating with Bootstrap
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Bootstrap CSS framework has become very popular recently. This recipe will
    show how we can use the framework with Laravel.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we need a standard Laravel installation. We'll also need to
    have the `assets` package installed, as demonstrated in the *Adding assets* recipe.
    Optionally, we could download the Bootstrap files and save them locally.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To complete this recipe, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `routes.php` file, create a new route as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `views` directory, create a file named `boot.php` add the following
    code to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: In the browser, go to `http://your-server/boot` (where `your-server` is our
    URL) and click through the tabs.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we'll be creating a single route and switch content using Bootstrap
    tabs. To get our route to respond to any request, we use `Route::any()` and pass
    in our closure. To add in the CSS and JavaScript, we could use a filter as with
    in the one in the *Adding assets* recipe; however, for a single route, we'll just
    include it in the closure. So we don't have to download them, we'll just use the
    CDN versions of Bootstrap and jQuery.
  prefs: []
  type: TYPE_NORMAL
- en: Next in our route, we need some data. This would be a good place to tie in a
    database but, for our purposes, we'll use a simple array, with the names of some
    super heroes. We then pass that array into our view.
  prefs: []
  type: TYPE_NORMAL
- en: We start the view with an HTML skeleton and include our styles in the head and
    the scripts just before the closing `</body>` tag. At the top of the page, we
    use Bootstrap's navigation styles and data attributes to create our tab links.
    Then in our body, we use three different tab panes, with IDs that correspond to
    the `<a href>` tag in our menu.
  prefs: []
  type: TYPE_NORMAL
- en: When we view the page, we'll see the first pane showing and everything else
    hidden. By clicking on the other tabs, we switch which tab pane is shown.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Adding assets* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using named views and view composers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe will show how to use Laravel's named views and view composers to
    simplify some of our routes' code.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we'll be using the code created in the *Creating menus in Laravel*
    recipe. We'll also need the `assets` package installed in the *Adding assets*
    recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To complete this recipe, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `routes.php` file, add a file named `view`, and add the following code
    to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'In `routes.php`, add a view composer as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'In `routes.php`, update the menu routes as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `views` directory, update the `menu-layout.php` file with the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: In the browser, go to `http://{your-server}/menu-one` (where `your-server` is
    our URL) and click through the menu links.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We begin the recipe by creating a name for one of our views. If we have views
    with long or complicated filenames or directory structures, this will allow us
    to create a simple alias in our routes. It will also let us change our view filename
    in the future; additionally, if we're using it in more than one place, we only
    need to change one line.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we create a view composer. Any code in the composer will automatically
    be called when you create the view. In our example, we''re including three things
    every time our view is created: an asset containing a Bootstrap CSS file, a nested
    view, and a variable to pass to the view.'
  prefs: []
  type: TYPE_NORMAL
- en: For our three routes, instead of `View::make('menu-layout')`, we'll use the
    name we created, call `View::of('layout')`, and nest it in our content. Since
    our layout view has a composer, it will automatically nest in our menu, add the
    CSS, and pass in a page title.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Creating menus in Laravel* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
