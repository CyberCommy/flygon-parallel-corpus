- en: Chapter 5.  Creating a Store Locator Application with MongoDB Geospatial Query
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will build an application to store **Geolocation** data
    with coordinates (latitude and longitude) and show them on the map by only using
    resources of the express framework, the **Google Maps API,** and pure JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: It is very common nowadays to use JavaScript libraries for this purpose, but
    most of them are used only on the frontend of the application, often consuming
    an endpoint with data in JSON format and updating the UI using Ajax. But we will
    use only JavaScript on the backend, building a MVC application.
  prefs: []
  type: TYPE_NORMAL
- en: Also, we will use a very powerful feature from MongoDB which is the ability
    to generate indexes in coordinates the using operators such as `$near`, `$geometry`,
    and others, to locate certain records in a map that are next to a particular location.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating models/schema to store coordinates in MongoDB
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating *2d*spheres indexes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dealing with the Google Maps API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dealing with the HTML5 Geolocation API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mixing Swig variables with pure JavaScript inside templates
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What we are building
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will be building a store locator application and a simple
    add store interface. The result will be as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![What we are building](img/image_05_001.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Home Screen
  prefs: []
  type: TYPE_NORMAL
- en: Creating the baseline application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will use the same version of the `express-generator` that we used in [Chapter
    4](ch04.html "Chapter 4. Dont Take a Photograph, Make It – An App for Photographers"),
    *Don''t Take a Photograph, Make it - An App for Photographers*. This time, we
    do not need any additional modules to complete our task:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a folder called `chapter05`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open your terminal/shell within the `chapter05` folder and type the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that we already installed the `generator-express` in [chapter 04](ch04.html
    "Chapter 4. Dont Take a Photograph, Make It – An App for Photographers"), *Don't
    Take a Photograph, Make it - An App for Photographers*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, fill in the questions in this order:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Choose `N`: we have already created a folder'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Choose `MVC`: for the application type'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Choose `Swig`: for the template engine'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Choose `None`: for the CSS preprocessor'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Choose `MongoDb`: for the database'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Choose `Gulp`: for LiveReload and other stuff'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Don't worry about `Gulp` if you've never heard of it; later in the book we will
    see and explain some building tools.
  prefs: []
  type: TYPE_NORMAL
- en: Refactoring the default structure
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As we know, and as we have done previously, we need to make some adjustments
    in our application structure to make it more scalable and follow our MVC pattern:'
  prefs: []
  type: TYPE_NORMAL
- en: Inside the `app/views` folder, create a folder called `pages`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inside the `app/views` folder, create a folder called `partials`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Move all files at the root of the `views` folder to the `pages` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Creating partial views for footer and head
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now, as a best practice, let''s create some partials files for footer and head:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a file called `footer.html` inside `app/view/partials/`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a file called `head.html` inside `app/view/partials/`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Setting Swig template to use HTML extension
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'As you can see, we used the `.html` file extension, unlike the previous example
    where we use the `.swig` file extension. Because of this, we need to change the
    express `app.engine` configuration file, so that it uses this type of extension:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `express.js` file from `app/config/`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Replace the following highlighted lines of code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This way we can use the `.html` file extension inside the applications templates.
  prefs: []
  type: TYPE_NORMAL
- en: Creating partial files
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now it''s time to create the partials file itself:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `head.html` from `app/views/partials` and add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Note that we already included a `CSS` framework called `materialize.css` and
    the Google maps API link: `<script src="img/js?key=<YOUR API KEY GOES HERE>"></script>`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `footer.html` from `app/views/partials` and add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Creating applications template files
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now we will replace the contents of the template files created by the `generator`:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `index.html` from `app/views/pages/` and add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note the `getCurrentPosition.js` file added to `index.html` template.Later in
    this chapter we will explain what happens with this file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `layout.html` from `app/views/pages/` and add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Open `error.html` from `app/views/pages/` and add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Now we have the necessary baseline to start the application development, but
    we need to set up the `getCurrentPosition.js` file.
  prefs: []
  type: TYPE_NORMAL
- en: Using the Geolocation HTML5 API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can use various resources to get the user''s position, so we are using the
    **HTML5 API** in this example. We will use an external JavaScript file to create
    a map with the exact location of the user:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a file called `getCurrentPosition.js` and save it within the `public/js`
    folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Place the following code in `getCurrentPosition.js`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'So, when we go to `http://localhost:3000/`, we can see our address pointed
    out on the map, as in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using the Geolocation HTML5 API](img/image_05_002.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Home Screen with Geolocation activated
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that your browser will ask permission to track your location
  prefs: []
  type: TYPE_NORMAL
- en: Creating the application controller
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now the next step is to create the application controller''s:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new file called `locations.js` inside `app/controllers/` and add the
    following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that we placed a fixed location to center the map and created 3 routes:'
  prefs: []
  type: TYPE_NORMAL
- en: '`router.get(''/locations'',...);` to get all the locations from MongoDB'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`router.get(''/locations/add'',...);` to render the add location form'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`router.post(''/locations'',...);` to add the new location to MongoDB'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Another important point to mention is the commented code on `get(/locations)`
    :'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: This way we can return a pure JSON object instead to render a template with
    variables.
  prefs: []
  type: TYPE_NORMAL
- en: Creating models
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now let''s create our model to hold the location data:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside the `app/models` folder, create a file called `locations.js` and add
    the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: It's important to note the data type of the coordinates property and the index
    of 2dsphere on the previous code.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can read more about 2dsphere in the official documentation of MongoDB at:
    [https://docs.mongodb.com/manual/core/2dsphere/](https://docs.mongodb.com/manual/core/2dsphere/).'
  prefs: []
  type: TYPE_NORMAL
- en: Creating the views template
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now let''s create the `view` file. This file is very important for our application,
    because that is where we integrate the resources of `Swig` variables with our
    JavaScript code:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a file called `locations.html` and save it within the `app/views/pages/`
    folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Place the following code inside the `locations.html` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The previous code is pretty simple; we just have an empty `map` div:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'We also have a simple form with a `POST` method to find the nearest location
    based on latitude and longitude:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '![Creating the views template](img/image_05_003.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Screenshot of locations.html
  prefs: []
  type: TYPE_NORMAL
- en: 'The most important code comes next:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following code at the end of the `locations.html` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'This code snippet does many things, including creating a new object map:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'And it adds the marks or points that came from MongoDB and are inside the loop
    of location the object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: You can see that each line of the previous code has a comment; in this way it
    is very easy to understand what is happening to each line.
  prefs: []
  type: TYPE_NORMAL
- en: Let's create a new file. Create a file called `add-location.html` and save it
    within the `app/views/pages/` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Place the following code in the `add-location.html` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'This is a simple form to add some locations to MongoDB, and will look like
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the views template](img/image_05_004.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Screenshot of add-location.html
  prefs: []
  type: TYPE_NORMAL
- en: Adding locations to MongoDB
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now is the fun part of our application. We need to insert the records in our
    application; for didactic purposes, we will use the form (`add-location.html`)
    to insert the records one by one.
  prefs: []
  type: TYPE_NORMAL
- en: The example shows how to insert a record, and you should do the same for others.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can skip this step and load the sample file that populates its database,
    but we recommend you follow the steps in this book.
  prefs: []
  type: TYPE_NORMAL
- en: At the end of this example, we will explain how to load all records at once
    using RoboMongo panel.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open terminal/shell at the project root folder and type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that you must have your MongoDB up and running before taking the previous
    action.
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to `http://localhost:3000/locations/add` and fill in the form with the following
    information:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Note you he map center to your own location too, at the `locations.js` controller
    on latitude and longitude properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Title = **Republica**
  prefs: []
  type: TYPE_NORMAL
- en: Longitude = **-46.642748**
  prefs: []
  type: TYPE_NORMAL
- en: Latitude = **-23.54312**
  prefs: []
  type: TYPE_NORMAL
- en: Press the **SUBMIT** button and you will see a success message above the map.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we will add the next seven locations using the RoboMongo interface. Copy
    the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: On the RoboMongo interface, select the maps-api-development database on the
    left-hand panel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Paste the code inside the RoboMongo interface:![Adding locations to MongoDB](img/image_05_005.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Screenshot of RoboMongo interface terminal
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s check the result: double-click on **locations** collection, on the left-hand
    menu.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the right-hand side of the RoboMongo view, click **view result in table mode**;
    you will see the following result:![Adding locations to MongoDB](img/image_05_006.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Screenshot of the RoboMongo panel
  prefs: []
  type: TYPE_NORMAL
- en: At this time, we already have all locations inside our map on http://localhost:3000/locations,
    but the find nearby stores form is still not working, so we need to set up a MongoDB
    2dsphere index.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding Geospatial indexes on MongoDB
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Starting from version *2.4* of MongoDB, we have the Geospatial search feature
    using **GeoJSON** format.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can find more information about GeoJSON at the official link: [http://geojson.org/](http://geojson.org/).'
  prefs: []
  type: TYPE_NORMAL
- en: '**GeoJSON** is an open source specification for formatting shapes in coordinates.
    It is widely used and very useful for making applications with geographical data.
    The format is pretty simple, and we used this format on the locations model, as
    you can see:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: The highlighted code is the GeoJSON format to store coordinates.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can read more about Geospatial query on MongoDB here: [https://docs.mongodb.com/manual/reference/operator/query-geospatial/](https://docs.mongodb.com/manual/reference/operator/query-geospatial/),
    and more geospatial indexes here: [https://docs.mongodb.com/manual/applications/geospatial-indexes/](https://docs.mongodb.com/manual/applications/geospatial-indexes/).'
  prefs: []
  type: TYPE_NORMAL
- en: Creating 2dsphere indexes in MongoDB
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s check our locations collection in MongoDB:'
  prefs: []
  type: TYPE_NORMAL
- en: Open your RoboMongo and select the **maps-api-development** database on the
    left panel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Double-click on **locations** collection, and you will see the following data:![Creating
    2dsphere indexes in MongoDB](img/image_05_007.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Screenshot of the locations collection before index
  prefs: []
  type: TYPE_NORMAL
- en: You will note that we have just one folder with an **id** index; this is the
    default from MongoDB.
  prefs: []
  type: TYPE_NORMAL
- en: 'Copy the following code and place in the RoboMongo interface:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Click on the **play** button in the top-right menu bar.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The result will be like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating 2dsphere indexes in MongoDB](img/image_05_008.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Screenshot after ensure.index()
  prefs: []
  type: TYPE_NORMAL
- en: Note that now we have created the 2dsphere indexes.
  prefs: []
  type: TYPE_NORMAL
- en: Checking the Geolocation application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This is the time to test the application. We have already created eight records
    in our database, already indexed all positions using the ensure.index () MongoDB,
    and we can already see all the points rendered in the map, as we can see in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Checking the Geolocation application](img/image_05_009.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Screenshot from locations.html
  prefs: []
  type: TYPE_NORMAL
- en: In this previous screenshot, you may notice that the points raised in the map
    are away from each other, which is able to show the difference in the distance
    of points shown when we change the distance search field.
  prefs: []
  type: TYPE_NORMAL
- en: In this example, we can insert any latitude and longitude in the search field,
    but we leave this field fixed only to illustrate the geolocation functionality
    of the application.
  prefs: []
  type: TYPE_NORMAL
- en: 'When we access the locations route for the first time, we show all records
    in the database, as we saw in the previous screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: Let's change the distance on the locations.html form to check what happens;
    go to http://localhost:3000/locations, select *2km* in the **Distance** field,
    and press the **SUBMIT** button.
  prefs: []
  type: TYPE_NORMAL
- en: 'The result of our new query in MongoDB using the $near and $geometry functions
    will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Checking the Geolocation application](img/image_05_010.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Screenshot of locations page filtered by 2km
  prefs: []
  type: TYPE_NORMAL
- en: This is very useful information for a store locator application, but we cannot
    see where the nearest point we are seeking is. To facilitate this view, we will
    add a list of points on the map, on the left-hand side, listed in order from the
    nearest to the furthest point.
  prefs: []
  type: TYPE_NORMAL
- en: Ordering points by distance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s add some code lines to make our search more intuitive:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following lines on app/views/pages/locations.html, between the highlighted
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that you can download the full code on the Packt Publishing website or
    on the official GitHub repository of the book.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following function, at the end of locations.html right after the {%
    endfor %} loop:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Now when we go back to the locations page, we can see a list of points on the
    left-hand side of the map, ordered by distance. See the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Ordering points by distance](img/image_05_011.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Screenshot of the stores list on the left-hand side
  prefs: []
  type: TYPE_NORMAL
- en: 'And now we can click on any store on the left-panel. We can also zoom in on
    the map, as we can see in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Ordering points by distance](img/image_05_012.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Screenshot of locations.html with a store selected
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we covered a lot of things related to the Google Maps API and
    the Geospatial query on MongoDB, and built a full store locator application using
    Node.js and a few default Express modules.
  prefs: []
  type: TYPE_NORMAL
- en: We covered such important points as the GeoJSON file format and how to create
    geospatial indexes on MongoDB.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter closes a series of five chapters covering MVC design patterns using
    different template engines and techniques. In the next chapter we will see how
    to build a Node.js API using some different tools to create and test the API.
  prefs: []
  type: TYPE_NORMAL
