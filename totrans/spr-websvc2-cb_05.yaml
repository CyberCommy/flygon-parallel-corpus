- en: Chapter 5. Logging and Tracing of SOAP Messages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Logging the message payload manually
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Logging both request and response SOAP Envelopes using log4j
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Logging both request and response using Spring-WS's Interceptors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Eclipse IDE to debug a Spring-WS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Logging and tracing refers to capturing and recording events and data structures
    about a software program's execution to provide an audit trail. It helps the developers
    and support team to collect runtime information on the execution of the software
    program. For any serious software development team, it is very important to implement
    logging in their system.
  prefs: []
  type: TYPE_NORMAL
- en: For Web-Service development, it is quite useful to be able to see the SOAP messages
    being transported between client and server. Spring Web-Services offer logging
    and tracing of SOAP messages, when they arrive, or just before they are sent.
    Logging, in Spring-WS, is managed by the standard Commons Logging interface.
  prefs: []
  type: TYPE_NORMAL
- en: Generally, log4j is used as the concrete logging library in Spring Projects
    (as Spring logging feature are build upon log4j). This chapter illustrates a few
    simple ways of logging SOAP messages.
  prefs: []
  type: TYPE_NORMAL
- en: The recipes illustrated here can be applied to project sources of any recipe
    in this book. For demonstration purpose, an existing project source of the recipe
    *Setting up an endpoint by annotating the payload-root* is used, as this can be
    applied to any project used in this book.
  prefs: []
  type: TYPE_NORMAL
- en: Logging message payload manually
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Message payload is the content of the SOAP message element, `SOAP-ENV:Body`.
    This is the exact message part of the whole SOAP Envelope for both request and
    response.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe demonstrates logging the message payload manually from inside the
    code.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this recipe, the project''s name is `LiveRestaurant_R-5.1` (for the server-side
    Web-Service) and has the following Maven dependencies:'
  prefs: []
  type: TYPE_NORMAL
- en: '`spring-ws-core-2.0.1.RELEASE.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`log4j-1.2.9.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'And `LiveRestaurant_R-5.1-Client` (for the client side), with the following
    Maven dependencies:'
  prefs: []
  type: TYPE_NORMAL
- en: '`spring-ws-core-2.0.1.RELEASE.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`log4j-1.2.9.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe uses projects used in the recipe *Setting up an endpoint by annotating
    the payload-root* in [Chapter 1](ch01.html "Chapter 1. Building SOAP Web-Services"),*Building
    SOAP Web-Services.*
  prefs: []
  type: TYPE_NORMAL
- en: Modify `log4j.properties` to default the log level into `INFO`. Remove any type
    of debug setting for any package or API in `log4j.properties`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Modify `OrderServiceEndpoint` to create two `xmlToString` methods and call these
    two methods to convert incoming messages into String and log it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Build and deploy the project in the Maven-embedded Tomcat server. Run `mvn clean
    package tomcat:run` from the root of the project in a command line window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To test this, open a new command line window and go to the folder `LiveRestaurant_R-5.1-Client`
    and run: `mvn clean package exec:java`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Here is the output from the server-side console:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The code simply logs the message payload manually, without any configuration
    change anywhere in the application. The changes in the `log4j.properties` makes
    sure that the log messages are printed to the console (as the appender is the
    `ConsoleAppender)` and no debug messages are printed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The method `xmlToString(...)` transforms the XML Source/Element Object into
    a `String` using a `StringWriter:`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `handleCancelOrderRequest()` and `handlePlaceOrderRequest()` methods,
    `xmlToString()` is invoked passing the Source/Element of the `RequestPayload`
    to return the message payload as a String instance, which is then logged into
    the configured logging appender (console in this case):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'As good practice, we log messages in debug mode. To get better performance,
    we do as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: During runtime, we can enable and disable a log based on requirements.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The example given in this recipe makes use of `SimpleMethodEndpointMapping`,
    which receives the message payload in the form of XML Source `(javax.xml.transform.Source)`
    or the Element `(org.w3c.dom.Element)` object as the method argument, with the
    help of the `RequestPayload` annotation, whereas in other cases, the incoming
    message will be in a different form. For example, marshalling endpoint the input
    is already a marshalled object. You will need to adopt the appropriate mechanisms
    to transform the incoming argument in those cases. The recipes after that will
    give you insights on other approaches of logging and tracing.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Setting up an endpoint by annotating the payload-root* in [Chapter 1](ch01.html
    "Chapter 1. Building SOAP Web-Services"),*Building SOAP Web-Services.*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Logging both request and response SOAP Envelopes using log4j
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Spring-WS framework allows the developer to log the entire SOAP message using
    simple logger configuration. This recipe illustrates configuring this internal
    logging of SOAP messages by the framework with log4j logger framework.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this recipe, the project''s name is `LiveRestaurant_R-5.2` (for the server-side
    Web Service) and has the following Maven dependencies:'
  prefs: []
  type: TYPE_NORMAL
- en: '`spring-ws-core-2.0.1.RELEASE.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`log4j-1.2.9.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'It also has `LiveRestaurant_R-5.2-Client` (for the client side) with the following
    Maven dependencies:'
  prefs: []
  type: TYPE_NORMAL
- en: '`spring-ws-core-2.0.1.RELEASE.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`log4j-1.2.9.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe uses projects used in the recipe *Setting up an endpoint by annotating
    the payload-root:*
  prefs: []
  type: TYPE_NORMAL
- en: Modify `log4j.properties` to set message tracing.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Build and deploy the project in the Maven-embedded Tomcat server. Run `mvn clean
    package tomcat:run` from the root of the project in a command-line window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To test this, open a new command-line window, go to the folder `LiveRestaurant_R-5.1-Client`,
    and run `mvn clean package exec:java`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following is the output from the server-side console (please note the `SOAP-Env:Envelope`
    element of the Web-Service response generated in the message):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The very core component of Spring-WS framework, namely, `MessageDispatcher`,
    logs every incoming SOAP message as soon as it receives it in the `receive()`
    method, after extracting the message content from the `MessageContext`, if logging
    is enabled for tracing or debugging.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `receive()` method, it checks for log settings for a named log instance,
    `org.springframework.ws.server.MessageTracing.received` checks for logging SOAP
    requests, and `org.springframework.ws.server.MessageTracing.sent` checks for SOAP
    responses. If those settings are given a value of either `TRACE` or `DEBUG`, it
    prints the entire SOAP Envelope of the corresponding request or response:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The easiest setting for the log tracing or debugging is in `log4j.properties`,
    as mentioned previously.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Previously, for security purposes, messages were encrypted, so enabling logging
    was not useful all the time. It's better to log the message after completion of
    the decryption inside the entry method.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Setting up an endpoint by annotating the payload-root* in [Chapter 1](ch01.html
    "Chapter 1. Building SOAP Web-Services"),*Building SOAP Web-Services.*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Logging both request and response using Spring-WS's Interceptors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Spring-WS provides features to log incoming/outgoing messages. These facilities
    are provided by using the `PayloadLoggingInterceptor` and `SoapEnvelopeLoggingInterceptor`
    classes that log using **Commons Logging Log**. While `PayloadLoggingInterceptor`
    logs only a message's payload, `SoapEnvelopeLoggingInterceptor` logs the whole
    SOAP Envelope including headers. To activate logging features using these two
    interceptors, log property within the `log4j` properties file should be set to
    debug for interceptors package.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, logging Web-Service messages using `PayloadLoggingInterceptor`
    and `SoapEnvelopeLoggingInterceptor` are explained.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this recipe, the project''s name is `LiveRestaurant_R-5.3` (for the server-side
    Web-Service) and has the following Maven dependencies:'
  prefs: []
  type: TYPE_NORMAL
- en: '`spring-ws-core-2.0.1.RELEASE.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`log4j-1.2.9.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'And `LiveRestaurant_R-5.3-Client` (for the client side) with the following
    Maven dependencies:'
  prefs: []
  type: TYPE_NORMAL
- en: '`spring-ws-core-2.0.1.RELEASE.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`log4j-1.2.9.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe uses projects used in the recipe *Setting up an endpoint by annotating
    the payload-root:*
  prefs: []
  type: TYPE_NORMAL
- en: Open `log4j.properties` and set logging to debug the package `org.springframework.ws.server.endpoint.interceptor`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Register `PayloadLoggingInterceptor` in the server-side application context.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Build and deploy the project in the Maven-embedded Tomcat server. Run `mvn clean
    package tomcat:run` from the root of the project in a command-line window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To test this, open a new command-line window, go to the folder `LiveRestaurant_R-5.3-Client`,
    and run `mvn clean package exec:java`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Here is the output from the server-side console:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'To log Web-Service messages using `SoapEnvelopeLoggingInterceptor`, follow
    these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Register `SoapEnvelopeLoggingInterceptor` in the server-side application context.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open `log4j.properties` and set logging to debug the package `org.springframework.ws.soap.server.endpoint.interceptor`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Build and deploy the project in the Maven-embedded Tomcat server. Run `mvn clean
    package tomcat:run` from the root of the project in a command-line window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To test this, open a new command-line window, go to folder `LiveRestaurant_R-5.3-Client`,
    and run `mvn clean package exec:java`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Here is the output from the server-side console:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`MessageDispatcherServlet` calls the Interceptor (if any) when the message
    is received as well as before calling the handler method in the endpoint and before
    sending back the response to the client.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Registering `PayloadLoggingInterceptor` inside `spring-ws-servlet.xml` only
    logs the message''s payload:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Similarly, registering `SoapEnvelopeLoggingInterceptor` inside `spring-ws-servlet.xml`
    logs the whole message''s SOAP Envelope:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'In both cases, the package name of these Interceptors should be set to debug
    for logging purpose:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Setting the `logRequest` and `logResponse` properties of `PayloadLoggingInterceptor`
    to true/false, enables/disables logging for request/response messages.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'In addition to `logRequest` and `logResponse`, there is a `logFault` property
    for `SoapEnvelopeLoggingInterceptor` that setting these to true/false, enables/disables
    logging for request/response/fault messages:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Setting up an endpoint by annotating the payload-root* in [Chapter 1](ch01.html
    "Chapter 1. Building SOAP Web-Services"),*Building SOAP Web-Services.*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Logging both request and response SOAP Envelope using Log4j*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Eclipse IDE to debug a Spring-WS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The ability to debug an application during the development phase is one of the
    most important features of an IDE, as it helps the developers to find out the
    bugs easily and hence speeds up the development. For a server-side application,
    which is more complex, the debug ability is more important for defect-discovery.
    A remote debugger attached to an IDE like Eclipse can shorten the problem analysis
    time significantly and make the process more enjoyable.
  prefs: []
  type: TYPE_NORMAL
- en: Eclipse can be configured for debugging within a web/app server with both embedded
    and remote servers. This recipe explains how to debug a Spring-WS project as a
    web application from inside Eclipse, with an external remote Tomcat instance.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To get started:'
  prefs: []
  type: TYPE_NORMAL
- en: Install Apache-Tomcat-6.0.14.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Download and install Eclipse IDE for Java EE Developers Helios.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In this recipe, the project''s name is `LiveRestaurant_R-5.4` (for the server-side
    WebService) and has the following Maven dependencies:'
  prefs: []
  type: TYPE_NORMAL
- en: '`spring-ws-core-2.0.1.RELEASE.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`log4j-1.2.9.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'It also has `LiveRestaurant_R-5.4-Client` (for the client side) with the following
    Maven dependencies:'
  prefs: []
  type: TYPE_NORMAL
- en: '`spring-ws-core-2.0.1.RELEASE.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`log4j-1.2.9.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Modify the profile in user home `(/home/weblogic)` for Linux, or in the system
    variable in Windows for Tomcat.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After installing Tomcat: On Linux > edit .profile>, add these lines for Tomcat:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: On Windows >edit system variable, set the system variable for Tomcat, as shown
    in the following screenshot:![How to do it...](img/978-1-849515-82-5_05_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `$TOMCAT_HOME/conf/tomcat-users.xml` file, set the role as `manager`
    and `username` and `password` as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `MAVEN_HOME/conf/settings.xml` file and if any `.m2/settings.xml` `(.m2`
    is maven repository folder), add a user login configuration named `tomcat` with
    the password `tomcat` as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Modify `debug.sh/debug.bat TOMCAT_HOME/bin/` at the end of the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'On Windows, modify debug.bat:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'On Linux, modify debug.sh:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Run Tomcat on Linux/Windows using `debug.sh/debug.bat` from `TOMCAT_HOME/bin/`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Modify the `pom.xml` file of `LiveRestaurant_R-5.4:`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Import the project `LiveRestaurant_R-5.4` into Eclipse and set a break point
    in the class `com.packtpub.liverestaurant.service.endpoint.OrderEndpoint.java`
    in the method `handleCancelOrderRequest`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run `mvn clean package` from `LiveRestaurant_R-5.4` and then copy the WAR file
    into `tomcat/webapp` (the application will be deployed into Tomcat).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In Eclipse, set Maven installation: **Windows** | **Preferences** | **Maven**
    | **Installations**, click on the **Add** button, and set external Maven:![How
    to do it...](img/978-1-849515-82-5_05_02.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open Eclipse. Right-click on **LiveRestaurant_R-5.4** | **Debug as** | **Debug
    Configurations** | **Remote Java Application**, click on **New**, and then click
    on the **Debug** button:![How to do it...](img/978-1-849515-82-5_05_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the project `LiveRestaurant_R-5.4-Client`, run `mvn clean package`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following is the output of this test:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/978-1-849515-82-5_05_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now you can try different options for debugging the application, such as:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Step Over (F5)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Step Into (F5)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Step Out (F7)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Watch
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Inspect
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe makes use of the **Java Debugger (JDB)** tool that helps find and
    fix bugs in the Java language programs both locally and on the server. JDB is
    part of the **Java Platform Debugging Architecture** (JPDA) that provides the
    infrastructure you need to build end-user debugger applications for the Java platform.
  prefs: []
  type: TYPE_NORMAL
- en: To use JDB in a Java EE application server or a servlet container, such as Tomcat,
    you must first launch it with debugging enabled and attach it to the server from
    the debugger through a JPDA port (the default port is 1044). At step 4, the JPDA
    port is set to 8000\. Instead of the `run.bat/run.sh`, this recipe starts the
    server using the `debug.bat/debug.sh`, which means the server is started in debug
    mode.
  prefs: []
  type: TYPE_NORMAL
- en: The JDB parameters specify the way the debugger will operate. For instance,
    `JPDA_TRANSPORT=dt_socket` instructs the JVM that the debugger connections will
    be made through a socket, while the `JPDA_ADDRESS=8000` parameter informs it that
    the port number will be 8000.
  prefs: []
  type: TYPE_NORMAL
- en: The Eclipse IDE is then attached to a JVM that accepts debugging connections.
    The project is set as a Remote Java Application inside Eclipse that listens to
    the same port, that is, 8000, for any debugging activity. In the next step, the
    break point will be set inside the service class that would be managed and redirected
    to the IDE by the JDB at runtime.
  prefs: []
  type: TYPE_NORMAL
- en: When the `LiveRestaurant_R-5.4-Client` project is executed as the client program
    of the service, the service class, `OrderServiceEndpoint`, is invoked and the
    break point is hit at the JVM, which is in the debug mode. It notifies the frontend
    as to where the JDI is implemented and which is the IDE in this case.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Similar to the Tomcat server, you can attach any application server to any IDE
    such as Eclipse, Net Beans, or JDeveloper. The concepts are the same. However,
    the steps may vary for each application server and IDE.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When debug mode is enabled, try to send the total time taken by a message in
    a given layer as one of the attributes in an XML message. This helps to troubleshoot
    in performance testing.
  prefs: []
  type: TYPE_NORMAL
