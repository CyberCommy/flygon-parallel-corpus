- en: '*Chapter 10*'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Functional Programming with JavaScript
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Learning Objectives
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'By the end of this chapter, you will be able to:'
  prefs: []
  type: TYPE_NORMAL
- en: Use pure functions in Redux reducers and selectors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Solve advanced function testing situations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Apply currying, partial application, and closures in modern JavaScript applications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implement a compose function for use in a backend for frontend (BFF) built with
    micro
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Apply JavaScript built-ins to write in an immutable style specifically in a
    Redux application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implement a query and a mutation in the context of a BFF using GraphQL
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Select from three approaches to handle side effects in a React/Redux application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this chapter, you will learn about the concepts of functional programming,
    how to apply them in JavaScript, and identify them "in the wild" in popular libraries
    such as React, Redux, and systems such as the GraphQL query language.
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Functional programming** leans heavily on the mathematical definition of
    functions. Mathematical functions are defined through a declaration expression.
    The functional programming style is also declarative (as opposed to imperative
    programming) and promotes expressions over statements.'
  prefs: []
  type: TYPE_NORMAL
- en: JavaScript has functional programming constructs built into it. Unlocking the
    functional programming style in JavaScript is crucial to reaching a deeper understanding
    of the language and its ecosystem.
  prefs: []
  type: TYPE_NORMAL
- en: As part of each section, React, Redux, and DOM access and testing patterns in
    JavaScript will be used to illustrate pragmatic functional programming in JavaScript.
    More recent developments such as GraphQL and **backend for frontends** (**BFFs**)
    will also be included to show how functional programming permeates both the present
    and the future of the JavaScript programming language.
  prefs: []
  type: TYPE_NORMAL
- en: Functional programming concepts can explain why Redux reducers and React render
    functions can't contain API calls. A lot of JavaScript patterns and best practices
    are enabled by functional constructs in the language; leveraging functional programming
    leads to more expressive, concise JavaScript programs that are easier to reason
    about, modify, and extend.
  prefs: []
  type: TYPE_NORMAL
- en: Functions – First-Class Citizens
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Functions being **first-class** means they are considered by the language to
    be like any other "value" type. This means that, in JavaScript, a function can
    be used just like a number, a string, a Boolean, an array, an object, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now would probably be a good time to see how well-versed in JavaScript data
    types everyone is. The primitives are Boolean, Null, Undefined, Number, (BigInt),
    String, Symbol, Object à Array/Set/Map. They can be found under the Object data
    type.
  prefs: []
  type: TYPE_NORMAL
- en: First-Class Functions – Idiomatic JavaScript Building Blocks
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Another way to define first-class support is as "functions are first-class if
    they are regular values." That means that a function can be assigned (as a value)
    to a variable, passed into other functions as a parameter, and be the return value
    of another function. Let's try and understand the preceding concept with code
    examples.
  prefs: []
  type: TYPE_NORMAL
- en: 'A function can be assigned to a variable in JavaScript and applied to function
    expressions (as follows) and arrow functions. A variable can hold a reference
    to an already defined function or a function that''s been declared inline. The
    function can be named or anonymous:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'A function can be set as a value in an Array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'A function can be set as a value in an object. This example uses ECMAScript
    6/2015 shorthand properties and methods. We also assert that the output of `Module.fn`
    is the same as the output of `fn`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'A function can be passed as an argument to another function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Inversion of Control Using First-Class Functions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Having first-class functions in JavaScript means that injecting a dependency
    can be as small as passing a function.
  prefs: []
  type: TYPE_NORMAL
- en: In languages where functions are not first-class, we might have to pass an object
    (instance of a class) into a constructor to be able to inject a dependency into
    the consumer of said dependency. In JavaScript, we can leverage the fact that
    functions are first-class citizens and simply inject a function implementation.
    The simplest example of this comes from the preceding `runner` function. It calls
    whatever function is passed into it as a parameter.
  prefs: []
  type: TYPE_NORMAL
- en: This type of dependency is very useful in JavaScript. Types are dynamic and
    tend to go unchecked. The benefit of class and class types such as checked errors
    and method overloading don't exist in JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: JavaScript functions have a simple interface. They are called with zero or more
    parameters and cause side effects (network requests, file I/O) and/or output some
    data.
  prefs: []
  type: TYPE_NORMAL
- en: In a dependency injection scenario without types or type checks, passing a single
    function instead of a whole instance is very beneficial for the dependency's consumer
    (the code where the dependency is injected into).
  prefs: []
  type: TYPE_NORMAL
- en: The following example illustrates a scenario where a JavaScript application
    can be run both on the client and the server. This is called a universal JavaScript
    application, that is, a JavaScript program that runs both in Node.js and in browsers.
    Universal JavaScript is usually achieved through a combination of build tools
    and patterns such as dependency injection.
  prefs: []
  type: TYPE_NORMAL
- en: In this case, when an HTTP call is made server-side, a header-based authorization
    mechanism is used. When the HTTP call is made from the client, a cookie-based
    authorization mechanism is used.
  prefs: []
  type: TYPE_NORMAL
- en: 'See the following function definition:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Server-side code that consumes `getData` would look like the following, where
    an `axios` function instance is created to default the authorization header. This
    function instance is then passed as `transport` to `getData`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Client-side code that consumes `getData` would look like the following. Again,
    an `axios` function instance is created, this time with the `withCredentials`
    option (which enables the sending/receiving of cookies) enabled:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The preceding example shows how we can leverage first-class function support
    to share code between applications running in different JavaScript environments
    by delegating the implementation of the transport mechanism for the HTTP request.
    Passing a function as a parameter is the idiomatic JavaScript way to do dependency
    injection.
  prefs: []
  type: TYPE_NORMAL
- en: Functions that Enable Asynchronous I/O and Event-Driven Programming in JavaScript
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: I/O, that is, non-blocking, and the JavaScript event loop are at the core of
    JavaScript's popularity both for browser-based applications and more recently
    server-side applications with Node.js. JavaScript is single-threaded, which means
    it is easy to reason about. Race conditions and deadlocks are nearly impossible
    to find in a JavaScript program.
  prefs: []
  type: TYPE_NORMAL
- en: JavaScript's asynchronous programming model of non-blocking interactions with
    input and output mechanisms means that if a program is I/O-bound, JavaScript is
    a very efficient way to handle it. JavaScript doesn't wait for the I/O to finish;
    instead, it schedules for the code to resume execution when the I/O has completed
    using the event loop.
  prefs: []
  type: TYPE_NORMAL
- en: For event-driven programming, the function is a lightweight container for logic
    that needs to be executed at a later point in time. Functions and event-driven
    programming in JavaScript have led to patterns such as the `addEventListener`
    Web API, the Node.js error-first callback, and the subsequent move to an A+ Promise-compliant
    specification in ECMAScript 6/ECMAScript 2015.
  prefs: []
  type: TYPE_NORMAL
- en: All the patterns here expose a function that accepts a function as one of its
    parameters.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `addEventListener` Web API allows JavaScript programs running in the browser
    to execute a function when an event occurs on a DOM element; for example, we can
    listen to `scroll`, `click`, or keyboard events. The following example will print
    `Scrolling…` if you scroll. It should be run in a browser JavaScript environment:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Node.js error-first callbacks are used in any I/O API it exposes. The following
    example shows how to handle errors from the Node.js filesystem module, `fs`. The
    callback that''s passed always has an error property as its first parameter. This
    error is `null` or `undefined` when there is no error and has an `Error` value
    if an error occurs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The Web Fetch API exposes an A+ Promise implementation. An A+ Promise is an
    object that encapsulates asynchronous logic and has `.then` and `.catch` functions,
    which accept a function as a parameter. Promises are a more recent and advanced
    way to abstract I/O in JavaScript compared to the error-first Node.js callback
    approach. The Fetch API is not available natively in Node.js; however, it is available
    as an npm module for use in Node.js. This means that the following code works
    in Node.js:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'More recent versions of Node.js (10+) expose a Promise interface for some of
    its APIs. The following is equivalent to the earlier filesystem access and error
    handling but using the Promise interface instead of error-first callbacks:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: JavaScript Built-In Array Methods that Showcase First-Class Function Support
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: JavaScript comes with several built-in methods on the Array object. A lot of
    these methods showcase first-class function support.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `Array#map` function returns the array of the output of the function that''s
    passed and is applied to each element. The following example shows a common use
    case, which is to convert an array of objects into an array of primitive values
    by extracting a certain object key for each element. In this case, the `id` property
    of the objects is returned in a new array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The `Array#filter` function returns elements of the array for which the function
    passed as a parameter returns a truthy value. In the following case, we filter
    out any element that is less than or equal to 2:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The `Array#reduce` function takes a function parameter is called for each element
    with an accumulator and the current element value. `Reduce` returns the last output
    of the passed function parameter. It is used to change the shape of the array,
    for example, summing over each element in the array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The `Array#flatMap` function returns the flattened output of the function that''s
    passed as a parameter and is applied to each of the elements in the array. The
    following example is a case where the new array is double the length of the initial
    one since we return a pair of values for `flatMap` to flatten into an array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`flatMap` is a stage 4 feature that''s works in Node.js 11+ and is supported
    natively in Chrome 69+, Firefox 62+, and Safari 12+.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `Array#forEach` function calls the function that''s passed as a parameter
    on each element of the array. It is equivalent to a for loop, except it can''t
    be broken. The function that''s passed will always be called on each element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The `Array#find` function calls the function that''s passed as a parameter
    on each element of the array until the function returns a truthy value, at which
    point it returns that value or there are no more elements to call it against,
    at which point it returns `undefined`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The `Array#findIndex` function calls the function that''s passed as a parameter
    on each element of the array until the function returns a truthy value, at which
    point it returns the index or there are no more elements to call it against, at
    which point it returns `-1`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'The `Array#every` function calls the function that''s passed as a parameter
    on each element of the array. At each iteration, if the passed function returns
    a `false` value, `.every` breaks and returns `false`. If `.every` gets to the
    end of the array without the function that''s being passed as the parameter returning
    a `false` value, it returns `true`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'The `Array#some` function calls the function that''s passed as a parameter
    on each element of the array. At each iteration, if the passed function returns
    a truthy value, `.some` breaks and returns `true`. If `.some` gets to the end
    of the array without the function that''s being passed as the parameter returning
    a truthy value, it returns `false`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'The `Array#sort` function calls the function that''s passed as a parameter
    to sort the array. The passed function is called with two elements of the array
    (which we will call `a` and `b`). If it returns a value greater than 0, `a` will
    appear before `b` in the sorted array. If the comparison function returns a value
    less than 0, `b` will appear before `a` in the sorted array. If the comparison
    function returns a value equal to 0, `a` and `b` will appear in the same order
    as in the original array, that is, relative to each other:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: There are other Array methods, specifically ones that operate on non-function
    arguments. This is a good way to show how much more powerful the methods that
    support passing a function are.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 70: Re-Implementing includes, indexOf, and join with some, findIndex,
    and reduce'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this exercise, you will reimplement `Array#includes`, `Array#indexOf`, and
    `Array#join` using the array methods `Array#some`, `Array#findIndex`, and `Array#reduce`
    by leveraging first-class function support. They are more powerful versions of
    their primitive-only counterparts.
  prefs: []
  type: TYPE_NORMAL
- en: 'The final output of `npm run Exercise70` should have all the assertions passing.
    This means that we have now got `includes`, `indexOf`, and `join` functions that
    are compliant with the following assertions:'
  prefs: []
  type: TYPE_NORMAL
- en: '`includes` should return true if the value is in array.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`includes` should return false if the value is in array.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`indexOf` should return the index if the value in the array.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`indexOf` should return `-1` if value not in the array.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`join` should work with no delimiter passed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`join` should work with a comma delimiter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In this exercise, we will have tests and a skeleton for the methods in the starter
    file, `exercise-re-implement-array-methods-start.js`. The file can be run with
    `node exercise-re-implement-array-methods-start.js`. This command has been aliased
    with npm scripts to `npm run Exercise70`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Perform the following steps to complete this exercise:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Change the current directory to `Lesson10`. This allows us to use pre-mapped
    commands to run our code. Now, run the `npm run Exercise70` command (or `node
    exercise-re-implement-array-methods-start.js`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: npm scripts are defined in the `scripts` section of `package.json`. The working
    solution for this exercise can be run using the `npm run` `Exercise70.js`. `The`
    file on GitHub.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.1: Initial output of npm run exercise1'
  prefs: []
  type: TYPE_NORMAL
- en: '](Images/C14587_10_01.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 10.1: Initial output of npm run Exercise70'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: These errors show that the tests that have been provided are currently failing
    because the implementations don't work as expected (since they currently do nothing).
  prefs: []
  type: TYPE_NORMAL
- en: 'Implement `includes` in `exercise-re-implement-array-methods-start.js`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: There is an `includes` skeleton that we will replace. The function we can use
    to implement includes is `.some`. What we will do is check that any/some element
    of the array is equal to the `needle` parameter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run `npm run Exercise70`. This should give the following output, which means
    that `includes` works as expected according to our two assertions (the assertion
    errors for `includes` are gone):![Figure 10.2: Output after implementing includes'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](Images/C14587_10_02.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 10.2: Output after implementing includes'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: The `needle` is a primitive type, so doing `el === needle` is good enough if
    we need to compare something.
  prefs: []
  type: TYPE_NORMAL
- en: 'Use `.findIndex` to implement `indexOf`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'After this step, running `npm run Exercise70` should give the following output,
    which means that `indexOf` works as expected according to our two assertions (the
    assertion errors for `indexOf` are gone):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.3: Output after implementing includes and indexOf'
  prefs: []
  type: TYPE_NORMAL
- en: '](Images/C14587_10_03.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 10.3: Output after implementing includes and indexOf'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Finally, we will implement `join` using `.reduce`. This function is trickier
    to implement since `reduce` is a very generic traversal/accumulation operator.
  prefs: []
  type: TYPE_NORMAL
- en: 'Start by concatenating the accumulator with the current element:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Run `npm run Exercise70`. You will see that "should work with no delimiter
    passed" now passes:![Figure 10.4: Implementing includes, indexOf, and a naïve
    join'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](Images/C14587_10_04.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 10.4: Implementing includes, indexOf, and a naïve join'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'In addition to concatenating the accumulator with the current element, add
    the delimiter in between them:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Following is the output of the preceding code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.5: Final output of npm after running the exercise'
  prefs: []
  type: TYPE_NORMAL
- en: '](Images/C14587_10_05.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 10.5: Final output of npm after running the exercise'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: This exercise shows how functions that support passing another function into
    them are more powerful than their equivalents, which only receive primitive parameters.
    We have shown this by reimplementing the primitive parameter functions using their
    function-parameter counterparts.
  prefs: []
  type: TYPE_NORMAL
- en: In the next exercise, we will show you another JavaScript use case for Array
    functions that support function parameters.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 71: Computing the Price of a Basket Using Map and Reduce'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this exercise, you will use the array's `map`, `filter`, and `reduce` functions
    to complete a simple transformation from a list of line items to a basket's total
    cost.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In this exercise, you will have tests and a skeleton for the methods in the
    starter file, `exercise-price-of-basket-start.js`. The file can be run with `node
    exercise-price-of-basket-start.js`. This command has been aliased with npm scripts
    to `npm run Exercise71`. The working solution for this exercise can be run using
    the `npm run Exercise71` file on GitHub.
  prefs: []
  type: TYPE_NORMAL
- en: 'Change the current directory to `Lesson10`. This allows us to use pre-mapped
    commands to run our code. Run `npm run Exercise71` (or `node exercise-price-of-basket-start.js`).
    You will see the following:![Figure 10.6: Initial output of npm run'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](Images/C14587_10_06.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 10.6: Initial output of npm run'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'The failing assertions show that our skeleton implementation doesn''t output
    what it is supposed to since the contents of `basket1` should tally to `5197`
    and the contents of `basket2` should tally to `897`. We can run this calculation
    manually: *1 * 199 + 2 * 2499* is *5197* and *2 * 199 + 1 * 499* is *897*.'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, get the line item price, which is done by mapping over each item in
    `totalBasket` and multiplying `item.price` by `item.quantity`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Running `npm run Exercise71` should give you the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.7: Output of npm run and totalBasket with line item calculation
    in a .map'
  prefs: []
  type: TYPE_NORMAL
- en: '](Images/C14587_10_07.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 10.7: Output of npm run and totalBasket with line item calculation in
    a .map'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Note how the assertions are still failing since we're not adding the line item
    prices up; we're just returning an array of the line item price.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, use `reduce` to sum the accumulator and current line item price, and
    remove the `console.log`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'The final output of `npm run Exercise71` should not have assertion errors:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.8: Final output with totalBasket implemented'
  prefs: []
  type: TYPE_NORMAL
- en: '](Images/C14587_10_08.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 10.8: Final output with totalBasket implemented'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Adding the `reduce` step sums over the line item prices that we calculated
    with the initial `map`. Now `totalBasket` returns the correct total price for
    both `basket1` and `basket2`, which is `5197` and `897`, respectively. Hence,
    the following assertions are now true:'
  prefs: []
  type: TYPE_NORMAL
- en: '`basket1` should tally up to `5197`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`basket2` should tally up to `897`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This exercise shows how to use map and reduce to first transform an array of
    objects into an array of primitive values and then aggregate data from that intermediate
    array.
  prefs: []
  type: TYPE_NORMAL
- en: Child-Parent Component Communication in React
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The popular JavaScript user interface library React leverages the first-class
    nature of functions in JavaScript for its Component API interface.
  prefs: []
  type: TYPE_NORMAL
- en: A Component only explicitly receives props from the component that is consuming
    it. This consumption of one Component by another in React is usually referred
    to as rendering since its own rendering is the only place where one component
    can use another.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this situation, the parent component (the one that renders) can pass props
    to the child component (the one that is being rendered), like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: In contrast to other popular user interface libraries such as Vue.js and Angular
    where there are two concepts for parent-child communication, in Vue.js, props
    are passed from parent to child and events are emitted from the child to the parent.
    In Angular, input binding is used for passing data from the parent to child. The
    parents listen to events that are emitted by the child and react to them.
  prefs: []
  type: TYPE_NORMAL
- en: 'React does not expose a construct that allows data to be passed back to the
    parent; there are only props. To achieve child-parent communication, React champions
    a pattern whereby a function is passed as a prop to the child. The passed function
    is defined in the parent''s context and therefore can do what it wishes in that
    parent component, such as updating the state, triggering a Redux action, and so
    on:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'This pattern also exposes one of the big problems of first-class functions
    in JavaScript. When mixing classes/instances and first-class functions, by default,
    the function on a class instance object is not automatically bound to it. In other
    words, we have the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Callback props are core to any sort of child-parent communication in React since
    their props are the only way to communicate from parent to child and child to
    parent. The next activity aims to implement an `onCheckout` prop that the consumer
    of the `Basket` component can use to react when the Basket's checkout button is
    clicked.
  prefs: []
  type: TYPE_NORMAL
- en: 'Activity 15: onCheckout Callback Prop'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this activity, we will implement an `onCheckout` prop to display the number
    of items in the shopping cart during checkout.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Activity 15 comes with a preconfigured development server and a skeleton for
    the methods in the starter files, that is, `activity-on-checkout-prop-start.js`
    and `activity-on-checkout-prop-start.html`. The development server can be run
    with `npm run Activity15`. The working solution for this activity can be run using
    the npm run `Activity15` file on GitHub.
  prefs: []
  type: TYPE_NORMAL
- en: Change the current directory to `Lesson10` and run `npm install` if you haven't
    done so in this directory before. `npm install` downloads the dependencies that
    are required in order to run this activity (React and Parcel). This command is
    an alias of `npx parcel serve activity-on-checkout-prop-start.html`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to `http://localhost:1234` (or whichever URL the start script output) to
    see the HTML page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Proceed to checkout** button. You will notice that nothing happens.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The solution for this activity can be found on page 625.
  prefs: []
  type: TYPE_NORMAL
- en: The next exercise will show you how to leverage state and props to add a product
    to our basket. This exercise's starting code isn't strictly the same as what we
    finished with after the activity. For example, the state was hoisted from the
    Basket component to the `App` component.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 72: Adding a Product to the Basket'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this exercise, we will modify the `addProduct` method to update the number
    of items in the basket when the `Add to basket` option is clicked.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Exercise 72 comes with a preconfigured development server and a skeleton for
    the methods in the starter files, that is, `exercise-add-product-start.js` and
    `exercise-add-product-start.html`. The development server can be run with `npm
    run Exercise72`. This command is an alias of `npx parcel serve exercise-add-product-start.html`.
    The working solution for this exercise can be run using the `npm run Exercise72`
    file on GitHub.
  prefs: []
  type: TYPE_NORMAL
- en: 'Change the current directory to `Lesson10`. Run `npm install` if you haven''t
    done so in this directory before. Now, run `npm run Exercise 72`. You will see
    the application starting up, as follows:![Figure 10.9: Output of npm run Exe'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](Images/C14587_10_09.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 10.9: Output of npm run Exercise 72'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: For the development server to live-reload our changes and to avoid configuration
    issues, edit the `exercise-add-product-start.js` file directly.
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to `http://localhost:1234` (or whichever URL the start script output). You
    should see the following HTML page:![Figure 10.10: Initial application in the
    browser'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](Images/C14587_10_10.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 10.10: Initial application in the browser'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: When clicking of **Add to Basket**, the application crashes and shows a blank
    HTML page.
  prefs: []
  type: TYPE_NORMAL
- en: Update `App#addProduct` to fix the crashes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Instead of setting the basket value to `{}`, we use the JavaScript Array''s
    `concatenate` method to take the current items in the basket (`this.state.basket.items`)
    and add the passed-in `product` parameter with `quantity: 1`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To find out what happens when we click **Add to Basket**, we need to find the
    `onClick` handler for the **Add to Basket** button and then diagnose the issue
    with the `this.addProduct()` call (basket being set to `{}`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'When we click the **Add to Basket** button, we will see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.11: Implemented Add to Basket after 1 click'
  prefs: []
  type: TYPE_NORMAL
- en: '](Images/C14587_10_11.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 10.11: Implemented Add to Basket after one click'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'When we click **Add to Basket** again, we will see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.12: Implemented Add to Basket after 2 clicks'
  prefs: []
  type: TYPE_NORMAL
- en: '](Images/C14587_10_12.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 10.12: Implemented Add to Basket after two clicks'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: First-Class Functions in React Render Props
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Render props are a React component pattern where a component delegates the rendering
    of a whole area to its parent.
  prefs: []
  type: TYPE_NORMAL
- en: A render prop is a function that returns JSX (since it needs to be renderable).
    It tends to be called with child-specific data. That data is then used by the
    implementation of the prop to render JSX. This pattern is very popular with library
    authors since it means they can focus on implementing the logic of the component
    without having to worry about how to allow the user to override the rendered output
    (since it is all delegated back to the user).
  prefs: []
  type: TYPE_NORMAL
- en: 'A very simple example of a render prop is to delegate the rendering to the
    parent component, but the action or data comes from the component that exposes
    a render prop. `ExitComponent` wraps the `window.close()` functionality but delegates
    render to its `renderExit` prop:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: This means that, for example, our `ExitComponent` can be used for both the links
    and buttons on the exit page.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is what the `ExitButton` code might look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Note how the actual page exit logic is not handled anywhere in the component;
    it is all left up to `ExitComponent` to implement. The rendering of the button
    is fully handled here; `ExitComponent` doesn't have to know about it.
  prefs: []
  type: TYPE_NORMAL
- en: The following is how an `ExitLink` component might be implemented. Again, note
    how `ExitComponent` knows nothing about links and how `ExitLink` knows nothing
    about closing the window.;
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Exercise 73: Rendering Basket Contents with a Render Prop'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this exercise, we will use render props to render items to the shopping basket,
    thereby making a flexible Basket component.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Exercise 73 comes with a preconfigured development server and a skeleton for
    the methods in the starter files, that is, `exercise-render-prop-start.js` and
    `exercise-render-prop-start.html`. The development server can be run with `npm
    run Exercise73`. This command is an alias of `npx parcel serve exercise-render-prop-start.html`.
    The working solution for this exercise can be run using the `npm run Exercise73`
    file on GitHub.
  prefs: []
  type: TYPE_NORMAL
- en: 'Perform the following steps to complete this exercise:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Change the current directory to `Lesson10` and run `npm install` if you haven''t
    done so in this directory before. `npm install` downloads the dependencies that
    are required in order to run this activity (React and Parcel). Now, run `npm run
    Exercise73`. You will see the application starting up, as follows:![Figure 10.13:
    Output after running the start file'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](Images/C14587_10_13.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 10.13: Output after running the start file'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: For the development server to live-reload our changes and to avoid configuration
    issues, edit the `exercise-render-prop-start.js` file directly.
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to `http://localhost:1234` (or whichever URL the starting script output).
    You should see the following HTML page:![Figure 10.14: Initial application in
    the browser'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](Images/C14587_10_14.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 10.14: Initial application in the browser'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Find where `Basket` is being rendered and add a `renderItem` prop, which is
    a function from the item to JSX. This is the implementation of the render prop
    that `Basket` will use to render each basket item:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Go to the `Basket#render` method and map over each `this.props.items`, using
    `this.props.renderItem` to render the item:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'To see our changes, we can go to the browser and see how the basket items are
    rendered:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.15: Rendering the basket items'
  prefs: []
  type: TYPE_NORMAL
- en: '](Images/C14587_10_15.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 10.15: Rendering the basket items'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Our `Basket` component now renders the items according to the function that's
    defined by the component rendering it. This makes `Basket` more powerful (it can
    render items) but still highly reusable. In different instances, we could use
    `Basket` with a `renderItem` prop that renders nothing, the breakdown of the item,
    or the line item price for the basket item, for example.
  prefs: []
  type: TYPE_NORMAL
- en: First-class functions and the patterns we have covered are crucial to writing
    idiomatic JavaScript. Another way we can leverage functional programming in JavaScript
    is by using pure functions.
  prefs: []
  type: TYPE_NORMAL
- en: Pure Functions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Pure functions** are functions that don''t have side effects and for the
    same input, arguments will return the same output value(s). A side effect can
    be anything from mutating the value of an argument passed by reference (which
    in JavaScript mutates the original) to mutating the value of a local variable,
    or doing any sort of I/O.'
  prefs: []
  type: TYPE_NORMAL
- en: A pure function can be thought of as a mathematical function. It only operates
    using input and only affects its own output.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a simple pure function, the `identity` function, which returns whatever
    is passed to it as a parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Notice how there are no side effects and no mutation of parameters or creation
    of new variables. This function doesn't even have a body.
  prefs: []
  type: TYPE_NORMAL
- en: Pure functions have the advantage of being simple to reason about. They're also
    easy to test; there is usually no need to mock any dependencies out since any
    and all dependencies should be passed as arguments. Pure functions tend to operate
    on data since they're not allowed to have side effects if data is their only dependency.
    This reduces the testing surface area.
  prefs: []
  type: TYPE_NORMAL
- en: The cons of pure functions are that pure functions technically can't do anything
    interesting such as I/O, which means no sending of HTTP requests and no database
    calls.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: An interesting gap in the definition of pure functions is JavaScript async functions.
    Technically they can still be pure if they don't contain side effects. In practice,
    an async function is likely to be used to run asynchronous operations with `await`
    such as accessing the filesystem, HTTP, or database requests. A good rule of thumb
    is that if a function is async, it likely uses `await` to do some sort of I/O
    and therefore it is not pure.
  prefs: []
  type: TYPE_NORMAL
- en: Redux Reducers and Actions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Redux is a state management library. It imposes a few constraints on the user
    to improve the predictability of state updates and the long-term scalability of
    the codebase.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s look at a simple Redux counter implementation to highlight some features:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'The store initializes its state to 0:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'The store''s internal state is only exposed through the read-only interface
    of `getState`. To update the state, an action needs to be dispatched. Calling
    `dispatch` with the `INCREMENT` and `DECREMENT` types show that the `counterReducer`
    works as expected and reduces the actions in the store:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'There are three pillars of Redux, as per the Redux documentation: [https://redux.js.org/introduction/three-principles](https://redux.js.org/introduction/three-principles).'
  prefs: []
  type: TYPE_NORMAL
- en: The three pillars of Redux are illustrated in the preceding example. We have
    a system with a single store, the state is read-only (and accessed through `getState`),
    and changes are made by our reducer, which is a pure function. `counterReducer`
    takes state and an action and returns a new value without mutating `state` or
    `action`.
  prefs: []
  type: TYPE_NORMAL
- en: In exchange for following these rules, we get a predictable and performant state
    container for our JavaScript applications. A single store means there is no question
    as to where the state is stored; the read-only state forces updates to be done
    through dispatching actions and reducing them. Since reducers are pure functions,
    they're both easy to test and reason about since they will give the same output
    for the same input and will not cause side effects or unwanted mutations.
  prefs: []
  type: TYPE_NORMAL
- en: Redux is used to manage the state. Up until now, we have been storing our data
    in a React state.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 74: Redux Dispatching Actions and Reducing Them into State'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this exercise, we will move the state of our data into Redux in order to
    separate data manipulation and state updates from code that renders data to the
    page.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Exercise 74 comes with a preconfigured development server and a skeleton for
    the methods in the starter files, that is, `exercise-redux-dispatch-start.js`
    and `exercise-redux-dispatch-start.html`. The development server can be run with
    `npm run Exercise74`. The working solution for this exercise can be run using
    the `npm run Exercise74` file on GitHub.
  prefs: []
  type: TYPE_NORMAL
- en: 'Perform the following steps to complete this exercise:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Change the current directory to `Lesson10` and run `npm install` if you haven''t
    done so in this directory before. This command is an alias of `npx parcel serve
    exercise-redux-dispatch-start.html`. Now, run `npm run Exercise74`. You will see
    the application starting up, as follows:![Figure 10.16: Output of npm run Exercise74](Images/C14587_10_16.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 10.16: Output of npm run Exercise74'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Go to `http://localhost:1234` (or whichever URL the starting script output).
    You should see the following HTML page:![Figure 10.17: Initial Exercise74 application
    in the browser](Images/C14587_10_17.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 10.17: Initial Exercise74 application in the browser'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Notice how clicking the buttons doesn't work.
  prefs: []
  type: TYPE_NORMAL
- en: 'Implement `App#continueShopping` by dispatching an action of the `CONTINUE_SHOPPING`
    type:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'In `appReducer`, implement the corresponding state reduction. For `CONTINUE_SHOPPING`,
    we only need to change the `status` in the state since it is what we use to display
    the checkout view or the main product and basket view:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Implement `App#finish` by dispatching an action of the `DONE` type:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'In `appReducer`, implement the corresponding state reduction. We only need
    to change the `status` in state since it is what we use to display the `Done`
    view:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'Implement `handleCheckout` by dispatching an action of the `START_CHECKOUT`
    type:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'In `appReducer`, implement the corresponding state reduction. For `START_CHECKOUT`,
    we only need to change the `status` in the state since it is what we use to display
    the checkout view or the main product and basket view:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `basket` object is not being reduced, so it can be omitted from the action
    at dispatch.
  prefs: []
  type: TYPE_NORMAL
- en: 'Implement `addProduct` by dispatching an action as follows. For `ADD_PRODUCT`,
    we need the `newProduct`, as well as the action type:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'In `appReducer`, implement the corresponding state reduction, which takes the
    new product and adds it to the current basket of items:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'The `appReducer`, in full, should now look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'Go to `http://localhost:1234` (or whichever URL the starting script output).
    The application should now respond to clicks, as expected:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.18: Application wo'
  prefs: []
  type: TYPE_NORMAL
- en: '](Images/C14587_10_18.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 10.18: Application with clicks responding'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Adding items to baskets and navigating through the application (proceed to checkout,
    done, continue shopping) should behave as it did prior to the Redux store implementation.
  prefs: []
  type: TYPE_NORMAL
- en: Testing Pure Functions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Pure functions are easy to test since they are fully encapsulated. The only
    thing that can change is the output, that is, the return value. The only thing
    that can affect the output is the parameter/argument values. What's more, for
    the same set of inputs, the output of a pure function needs to be the same.
  prefs: []
  type: TYPE_NORMAL
- en: 'Testing pure functions is as simple as calling them with different inputs and
    asserting on the outputs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: Redux reducers are pure functions, which means to test them, we can use the
    approach we just looked at in the previous example.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 75: Testing a Reducer'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this exercise, we will write tests for part of the reducer we used in the
    previous exercise, that is, the `ADD_PRODUCT` case of the `appReducer`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Exercise 75 comes with tests and a skeleton for the methods in the starter file,
    `exercise-reducer-test-start.js`. The file can be run with `node exercise-reducer-test-start.js`.
    This command has been aliased with npm scripts to `npm run Exercise75`. The working
    solution for this exercise can be run using the npm run exercise6 file on GitHub.
  prefs: []
  type: TYPE_NORMAL
- en: 'Perform the following steps to complete this exercise:'
  prefs: []
  type: TYPE_NORMAL
- en: Change the current directory to `Lesson10`. This allows us to use pre-mapped
    commands to run our code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, run `npm run Exercise75` (or `node exercise-reducer-test-start.js`). You
    will see the following output:![Figure 10.19: Empty tests passing after running
    the start file'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](Images/C14587_10_19.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 10.19: Empty tests passing after running the start file'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: A simplified `appReducer` that only contains the `ADD_PRODUCT` action reduction
    is present in this starter file, along with a `test` function, which is where
    the new tests are going to be added. The output doesn't contain errors because
    we haven't created any tests yet.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: To get the output of `appReducer`, it should be called with a `state` object
    and the relevant `action`. In this case, the type should be `'ADD_PRODUCT'`.
  prefs: []
  type: TYPE_NORMAL
- en: 'As in the previous examples, we will use `assert.deepStrictEqual`, which checks
    for the deep equality of two objects. We can write a failing test like so. We''re
    calling `appReducer` with `state` and the relevant `action`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'If we run `npm run Exercise75`, we will see the following error. This is expected
    since `appReducer` doesn''t return an empty object as the state:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.20: Errors shown after executing the start file'
  prefs: []
  type: TYPE_NORMAL
- en: '](Images/C14587_10_20.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 10.20: Errors shown after executing the start file'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'We should use `assert.deepStrictEqual` to ensure that `appReducer` adds the
    new product as expected. We will assign the expected value to an `expected` variable
    and the actual value to an `actual` variable. This will help keep the test more
    readable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'The output should now not be throwing any errors:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.21: Test passed as no errors were found'
  prefs: []
  type: TYPE_NORMAL
- en: '](Images/C14587_10_21.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 10.21: Test passed as no errors were found'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'The following is the output after we run the `node exercise-reducer-test.js`
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.22: Output showing assertion failing'
  prefs: []
  type: TYPE_NORMAL
- en: '](Images/C14587_10_22.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 10.22: Output showing assertion failing'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Redux Selectors
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Selectors are an additional Redux concept that means we can encapsulate internal
    store state shape with selectors. The consumer of a selector asks for what it
    wants; the selector is left to implement that with store state shape-specific
    knowledge. Selectors are pure functions; they take store state and return one
    or more sections of it.
  prefs: []
  type: TYPE_NORMAL
- en: Since selectors are pure functions, they are simple to implement. The following
    exercise shows us how to use selectors so that instead of putting messaging data
    in the render function or when passing props, we do it in a pure function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 76: Implementing a Selector'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this exercise, we will use selectors and take advantage of their simplicity
    to render items to the shopping basket.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Exercise 76 comes with a preconfigured development server and a skeleton for
    the methods in the starter files that is, `exercise-items-selector-start.js` and
    `exercise-items-selector-start.html`. The development server can be run with `npm
    run Exercise76`. The working solution for this exercise can be run using the npm
    run Exercise76 file on GitHub.
  prefs: []
  type: TYPE_NORMAL
- en: Change the current directory to `Lesson10` and run `npm install` if you haven't
    done so in this directory before.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run `npx parcel serve exercise-items-selector-start.html` and execute `npm
    run Exercise76`. You will see the application starting up, as follows:![Figure
    10.23: Output after running the start html file'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](Images/C14587_10_23.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 10.23: Output after running the start html file'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: For the development server to live-reload our changes and to avoid configuration
    issues, edit the `exercise-items-selector-start.js` file directly.
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to `http://localhost:1234` (or whichever URL the starting script output).
    You should see the following HTML page:![Figure 10.24: Initial application in
    the browser'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](Images/C14587_10_24.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 10.24: Initial application in the browser'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Note how no basket items are being rendered. This is because of the initial
    implementation of `selectBasketItems`. It returns an empty array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'Implement `selectBasketItems` by drilling down into the state with dot notation
    and short-circuiting. Default to `[]` if there is any issue with the state:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'The application should now work as expected again; the items will be displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.25: Application after implementing selectBasketItems'
  prefs: []
  type: TYPE_NORMAL
- en: '](Images/C14587_10_25.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 10.25: Application after implementing selectBasketItems'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: The `selectBasketItems` selector takes the full state and returns a slice of
    it (the items). Selectors allow us to further abstract the internal shape of state
    inside the Redux store from how it is used in the React components.
  prefs: []
  type: TYPE_NORMAL
- en: Selectors are a crucial part of a React/Redux application. As we have seen,
    they allow the React components to be decoupled from Redux's internal state shape.
    The following activity aims to give us the ability to write tests for selectors.
    This is a similar scenario to testing a reducer, which we did in a previous exercise.
  prefs: []
  type: TYPE_NORMAL
- en: 'Activity 16: Testing a Selector'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In this activity, we will test the selector for various states of the items
    array and ensure that the selector returns an array corresponding to the items
    in the basket. Let''s get started:'
  prefs: []
  type: TYPE_NORMAL
- en: Change the current directory to `Lesson10`. This allows us to use pre-mapped
    commands to run our code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Activity 16 comes with tests and a skeleton for the methods in the starter file,
    `activity-items-selector-test-start.js`. This file can be run with `node activity-items-selector-test-start.js`.
    This command has been aliased with npm scripts to `npm run Activity16`. The working
    solution for this exercise can be run using the npm run Activity16 file on GitHub.
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside the test function, using `assert.deepStrictEqual`, do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Test that, for empty state(s), the selector returns `[].`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Test that, for an empty basket object, the selector returns `[].`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Test that, if the `items` array is set but empty, the selector returns `[].`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Test that, if the items array is not empty and set, the selector returns it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The solution for this activity can be found on page 626.
  prefs: []
  type: TYPE_NORMAL
- en: 'Pure functions are predictable, easy to test, and easy to reason about. Both
    first-class functions and pure functions tie into the next JavaScript functional
    programming concept: higher-order functions.'
  prefs: []
  type: TYPE_NORMAL
- en: Higher-Order Functions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A higher-order function is a function that either takes a function as a parameter
    or returns a function as a value.
  prefs: []
  type: TYPE_NORMAL
- en: This builds on top of JavaScript's first-class function support. In a language
    that doesn't support first-class functions, it is difficult to implement higher-order
    functions.
  prefs: []
  type: TYPE_NORMAL
- en: Higher-order functions enable function composition patterns. In most instances,
    we use higher-order functions to augment an existing function.
  prefs: []
  type: TYPE_NORMAL
- en: bind, apply, and call
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'There are a few JavaScript built-in methods on the `Function` object: `bind`,
    `apply` and `call`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`Function#bind` allows you to set the execution context for a function. When
    called, bind returns a new function with the first parameter to the call bound
    as the `this` context of the function. The following arguments to bind are used
    when the returned function is called. When the bound function is called, parameters
    can be supplied. These will appear in the argument list, after the parameters
    are set during the call to bind.'
  prefs: []
  type: TYPE_NORMAL
- en: 'bind is used extensively in React code when passing functions as props that
    still need to access the current component''s `this` to do operations such as
    `setState` or to call other component methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'The `Function#bind` method can also be used when testing that a function is
    thrown in tests. For example, running the function would mean having to write
    a try/catch that somehow fails the test if the catch is not triggered. With bind
    and the `assert` module, this can be written in a much shorter form:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: '`Function#apply` and `Function#call` allow you to call a function without using
    the `fn(param1, param2, [paramX])` syntax, as well as setting the `this` context
    in a similar way to `Function#bind`. The first parameter to `Function#apply` is
    the `this` context, while the second parameter is an array or array-like and contains
    the parameters the function expects. Similarly, the first parameter to `Function#call`
    is the `this` context; the difference in regards to `Function#apply` lies in the
    definition of parameters. In `Function#call`, they''re an argument list, just
    like when using `Function#bind`, as opposed to the array that `Function#apply`
    expects.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Array-like objects, also known as indexed collections, the most used of which
    are the arguments object in functions, and the NodeList Web API, are objects that
    follow part of the Array API (for example, implementing `.length`) without implementing
    it fully. Array functions can still be used on them with JavaScript's apply/call.
  prefs: []
  type: TYPE_NORMAL
- en: '`Function#apply` and `Function#call` don''t strictly meet the higher-order
    function criteria. At a stretch, since they''re methods on function objects, we
    could say that they''re implicitly higher-order functions. The function object
    they''re called on is an implicit parameter to the apply/call method call. By
    reading from the function prototype, we can even use them like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: In this example, we show that apply and call are higher-order functions, but
    only in as far as they can be used with functions on other functions.
  prefs: []
  type: TYPE_NORMAL
- en: '`Function#apply` and `Function#call` have historically converted array-like
    objects into Arrays. In ECMAScript 2015+ compliant environments, the `spread`
    operator can be used in a similar fashion.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The three following functions allow you to convert Array-likes into Arrays
    using `Function#apply`, `Function#call`, and array spread, respectively:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: Currying and Partial Application
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A curried function is a function that, instead of taking the number of parameters
    it needs in one go, will accept one parameter at a time.
  prefs: []
  type: TYPE_NORMAL
- en: For example, if a function takes two parameters, its curried equivalent will
    be called twice, with one parameter each time.
  prefs: []
  type: TYPE_NORMAL
- en: 'Currying can, therefore, be expressed as taking an n-parameter function and
    turning it into a function that can be called n times with one parameter each
    time. The classic denomination for an n-parameter function is to call it n-ary.
    With that in mind, currying is the transformation from an n-ary function to an
    n-length set of unary function calls:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: Partial application and currying are often introduced together and conceptually,
    they go hand in hand.
  prefs: []
  type: TYPE_NORMAL
- en: 'With a two-parameter function that is curried, it takes two calls with one
    parameter, with each doing the same work as the two-parameter un-curried function.
    When it is called once, it has half the necessary parameters fully applied. The
    function resulting from that first call is a partial application of the overall
    function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: In other words, a partial application is a way of expressing the transformation
    from the function that takes n parameters to a function that takes `n` – `m` parameters,
    where m is the number of parameters that have been partially applied.
  prefs: []
  type: TYPE_NORMAL
- en: Currying and partial application are useful if we want to be able to reuse generic
    functionality. The partial application doesn't require currying; currying is the
    case of turning a function into one that can be partially applied. The partial
    application can also be done using bind.
  prefs: []
  type: TYPE_NORMAL
- en: Currying and partial application allow you to start with a very generic function
    and turn it into a more specialized function with every application.
  prefs: []
  type: TYPE_NORMAL
- en: Currying standardizes the number of parameters at each call. The partial application
    does not have such limitations. You can partially apply with more than one parameter
    at a time.
  prefs: []
  type: TYPE_NORMAL
- en: A unary function is simpler than a binary function, which is simpler than an
    N-ary (with N > 2) function.
  prefs: []
  type: TYPE_NORMAL
- en: Also, currying is simpler if we only allow one parameter to be applied at any
    time. We can see the arbitrary n-parameter partial application with more runtime
    complexity since each function needs to run some logic on whether this call is
    the final call or not.
  prefs: []
  type: TYPE_NORMAL
- en: 'A generic n-ary curry can be defined as follows in ES2015:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: Leveraging Closures React Function Components
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When defining a function, anything that''s in scope of the function at definition
    time will remain in scope at call/execution time. Historically, closures were
    used to create private variable scopes. The closure is this function and its remembered
    definition-time scope:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: We leverage this within React render functions to cache props and state in the
    local render scope.
  prefs: []
  type: TYPE_NORMAL
- en: 'React function components also leverage closures, especially with hooks:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: Function components are quite powerful since they're a bit simpler than class
    components.
  prefs: []
  type: TYPE_NORMAL
- en: When using a state management solution such as Redux, most of the important
    state is in the Redux store. This means that we can write mainly stateless functional
    components since the store manages any stateful part of our application.
  prefs: []
  type: TYPE_NORMAL
- en: Higher-order functions allow us to effectively deal with functions and augment
    them. Higher-order functions build on top of first-class function support and
    pure functions. Much in the same way, function composition builds on higher-order
    functions.
  prefs: []
  type: TYPE_NORMAL
- en: Function Composition
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Function composition is another concept that leaks over from mathematics.
  prefs: []
  type: TYPE_NORMAL
- en: Given two functions, a and b, compose returns a new function that applies a
    to the output of b, which is then applied to a given set of parameters.
  prefs: []
  type: TYPE_NORMAL
- en: Function composition is a way to create a complex function from a set of smaller
    ones.
  prefs: []
  type: TYPE_NORMAL
- en: This will mean you might end up with a bunch of simple functions that do one
    thing well. Functions with a single purpose are better at encapsulating their
    functionality and therefore help with separation of concerns.
  prefs: []
  type: TYPE_NORMAL
- en: 'Composing functions ties in with currying and the partial application of functions
    since currying/partial application is a technique that allows you to have specialized
    versions of generic functions, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'To explain the following code, it stands to reason that we have the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Doubling 2 and then adding 1 is 5 (4 + 1).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding 1 to 2 and then doubling is 6 (3 * 2).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding 2 to 2 and then doubling is 8 (4 * 2).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Doubling 2 and then adding 2 is 6 (4 + 2).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following uses our already defined functions, `add1`, `add2`, and `double`,
    and shows how we would use `compose` to implement the preceding cases. Note that
    compose applies the rightmost parameter first:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: An alternative way to define `compose` is using a left-to-right traversal (with
    `reduce`). This has the benefit of allowing us to pass an arbitrary number of
    arguments when calling the output of composing. To this effect, we reduce from
    the first parameter to the last parameter, but the output of `reducing` is a function
    that supports any number of arguments and calls the previous output after the
    current function when called.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code uses parameter rest to allow for an arbitrary number of
    functions to be composed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: Then, it returns a function that takes a single parameter, `x` (hence, it's
    unary). When this second function is called, it will call all the functions that
    were passed as parameters to `composeManyUnary` from right to left (the function
    that was the last parameter will be called first). The first iteration of `reduceRight`
    will call the rightmost function with `x` as its parameter. Subsequent functions
    are called on the output of the previous function call. The second-to-last function
    in the parameter list is called with the output of the last function in the parameter
    list that's applied to `x`. The third-to-last function in the parameter list is
    called with the output of the second-to-last function and so on until there are
    no more functions to call.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 77: A Binary to n-ary Compose Function'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this exercise, we will implement an n-ary `compose` function can be used
    to compose an arbitrary number of functions.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Exercise 77 comes with tests and a skeleton for the methods in the starter file,
    `exercise-2-to-n-compose-start.js`. The file can be run with `node exercise-2-to-n-compose-start.js`.
    This command has been aliased with npm scripts to `npm run Exercise77`. The working
    solution for this exercise can be run using the npm run Exercise77 file on GitHub.
  prefs: []
  type: TYPE_NORMAL
- en: Change the current directory to `Lesson10`. This allows us to use pre-mapped
    commands to run our code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, run `npm run Exercise77` (or `node exercise-to-n-compose-start.js`). You
    will see the following output:![Figure 10.26: Running the start file of the exercise'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](Images/C14587_10_26.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 10.26: Running the start file of the exercise'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: The assertions for `compose3`, `composeManyUnary`, and `composeManyReduce` are
    all failing, mainly because they're currently aliased to `compose2`.
  prefs: []
  type: TYPE_NORMAL
- en: 'A `compose` for two functions is already implemented:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: '`compose3` is a naive three-parameter `compose` function that takes the third
    parameter, calls it first, then calls the second parameter on the output of the
    first call.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, it calls the first parameter on the output of the second parameter,
    like so:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The function that is the furthest to the right of the parameter definition is
    called first.
  prefs: []
  type: TYPE_NORMAL
- en: Considering the parameters as an array and that JavaScript has a `reduceRight`
    function (which traverses an array from right to left while also keeping an accumulator,
    much like `reduce`), there is a path forward forming.
  prefs: []
  type: TYPE_NORMAL
- en: 'After implementing `compose3`, we can run `npm run Exercise77` again and see
    that the assertion for `compose3` is not failing anymore:![Figure 10.27: Output
    after implementing compose3'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](Images/C14587_10_27.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 10.27: Output after implementing compose3'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Use parameter rest to allow for an arbitrary number of functions to be composed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: 'After implementing `composeManyUnary`, the corresponding failing assertion
    is now passing:![Figure 10.28: Output after implementing compose3 and composeManyUnary'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](Images/C14587_10_28.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 10.28: Output after implementing compose3 and composeManyUnary'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Define that compose is using a left-to-right traversal (with `reduce`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: We can `composeManyReduce` with three functions, that is, `f`, `g`, and `h`.
    Our implementation will start reducing through the functions. At the first iteration,
    it will return a function that will take however many arguments (`args`). When
    called, it will call `f(g(args))`. On the second iteration, it will return a function
    that takes an arbitrary number of arguments and returns `f(g(h(args))`. At this
    point, there are no more functions to iterate through, so the final output of
    a function that takes a set of arguments and returns `f(g(h(arguments)))` is the
    output of the `composeManyReduce` function.
  prefs: []
  type: TYPE_NORMAL
- en: 'After implementing `composeManyReduce`, the corresponding failing assertion
    is now passing:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.29: Implementing compose3, composeManyUnary, and composeManyReduce'
  prefs: []
  type: TYPE_NORMAL
- en: '](Images/C14587_10_29.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 10.29: Implementing compose3, composeManyUnary, and composeManyReduce'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Function Composition in the Real World with a Simple BFF
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A BFF is a server-side component that wraps (API) functionality in a way that
    is specific to the user interface it serves. This is as opposed to an API that
    is designed to export general business logic. The backend for frontend might consume
    an upstream API or the backing service directly, depending on the architecture.
    A company might have a set of core services to implement business logic and then
    a BFF for their mobile application, another BFF for their web frontend, and a
    final BFF for their internal dashboard. Each of the BFFs will have different constraints
    and data shapes that make the most sense for their respective consumers.
  prefs: []
  type: TYPE_NORMAL
- en: General-purpose APIs tend to have a larger surface area, are maintained by a
    different team, and have multiple consumers, which in turn leads to the API's
    shape evolving slowly. The API endpoints are not specific to the user interface,
    so the frontend application might have to make a lot of API requests just to load
    up a single screen. A backend for frontend alleviates these issues since each
    page or screen can have its own endpoint or dataset that it uses. The backend
    for a frontend will orchestrate the fetching of any relevant data.
  prefs: []
  type: TYPE_NORMAL
- en: To implement the backend for frontend, `micro` will be used. micro is a library
    for "Asynchronous HTTP microservices" and was built by Zeit. It is very small
    compared to Express or Hapi. In order to do this, it leverages modern JavaScript
    features as async/await calls, and its composition model is based on function
    composition. That is, what would be a middleware in Express or Hapi is a higher-order
    function that takes a function as a parameter and returns a new function. This
    is a great opportunity to use `compose` since the interface of the functions that
    are being composed are function in as a parameter and function out as a return
    value.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The very brief documentation for micro can be found at [https://github.com/zeit/micro](https://github.com/zeit/micro).
    The library itself is barely a couple of hundred lines of JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: 'A micro "Hello world" might look as follows. micro accepts a single HTTP handler
    function that can be async or not. Either way, it is await-ed. It doesn''t have
    a built-in router, which is one of the core APIs that''s exposed by Express or
    Hapi. The output of the handler is sent back as the HTTP response body with a
    200 status code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: 'Adding request timer logging can be done with the built-in JavaScript `console.time`
    and `console.timeEnd` functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: Function composition is the frontend, while the center of micro is the API.
    Adding a more complex operation such as API key authentication doesn't make integration
    any more difficult.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `authenticate` function can have as much complexity as it wants. If it
    accepts a function parameter and returns a function that takes a `req` (request)
    and `res` (response) object, it will be compatible with other micro packages and
    handlers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: The micro library leverages function composition so that dependencies between
    each level of request handling are made obvious.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 78: Leveraging Compose to Simplify the Micro Server Creation Step'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this exercise, you will refactor the timer and authentication example from
    the previous section to use `compose`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Exercise 78 comes with a preconfigured server and a run method alias in the
    starter files, that is, `exercise-micro-compose-start.js`. The server can be run
    with `npm run Exercise78`. The working solution for this exercise can be run using
    the npm run Exercise78 file on GitHub.
  prefs: []
  type: TYPE_NORMAL
- en: 'Perform the following steps to complete this exercise:'
  prefs: []
  type: TYPE_NORMAL
- en: Change the current directory to `Lesson10` and run `npm install` if you haven't
    done so in this directory before.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'First, run the `node exercise-micro-compose-start.js` command. Then run `npm
    run Exercise78`. You will see the application starting up, as follows:![Figure
    10.30: Running the start file of this exercise'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](Images/C14587_10_30.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 10.30: Running the start file of this exercise'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Accessing the application with the following `curl` should yield an unauthorized
    response:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is the output of the preceding code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.31: cURL of the micro application'
  prefs: []
  type: TYPE_NORMAL
- en: '](Images/C14587_10_31.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 10.31: cURL of the micro application'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Note that the compose function is pre-populated in this module.
  prefs: []
  type: TYPE_NORMAL
- en: 'Instead of calling each function on the output of the previous one, we will
    use compose and call its output to create the server. This will replace the server-creation
    step:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: 'The server-creation step initially looked as follows, which is quite verbose
    and possibly difficult to read. The `compose` version clearly shows the pipeline
    that a request will have to come through:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: 'Restart the application for the changes to take place. Once `npm run Exercise78`
    is up and running, you should be able to `curl`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: 'Following is the output of the preceding code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.32: cURL of the micro application with "compose"'
  prefs: []
  type: TYPE_NORMAL
- en: '](Images/C14587_10_32.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 10.32: cURL of the micro application with compose'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: In this exercise, we saw that the `compose` refactor didn't affect the functionality
    of the application. It is possible to try different requests as per the response.
  prefs: []
  type: TYPE_NORMAL
- en: 'The preceding problem can be sorted with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: 'The following requests will fail with a 401 error since we are not setting
    a valid authorization header:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: 'For comparison, here is the equivalent BFF application using Express and its
    middleware-based composition model. It implements similar functionality to the
    micro BFF we finished this exercise with:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: Knowing about the possibilities that function composition brings will mean more
    reflection goes into the design of the function interface (inputs and outputs)
    so that, for example, `compose` can be leveraged. The next section covers immutability
    and side effects, which are necessary so that we can compose a set of partially
    applied or pure functions.
  prefs: []
  type: TYPE_NORMAL
- en: Immutability and Side Effects
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In a pure function context, the mutation of variables is considered a side effect
    and therefore a function where the mutation occurs, especially of variables that
    live beyond the execution of the function, is not pure.
  prefs: []
  type: TYPE_NORMAL
- en: Immutability in JavaScript is hard to enforce but the language gives us good
    primitives to write in an immutable style. This style leans heavily on operators
    and functions that create a copy of data instead of mutating in place.
  prefs: []
  type: TYPE_NORMAL
- en: It is possible to write entire sections of applications without using side effects.
    Any data manipulation is possible without side effects. Most applications, however,
    need to load the data so that it is displayed from somewhere and possibly save
    some of the data somewhere as well. These are side effects that need to be managed.
  prefs: []
  type: TYPE_NORMAL
- en: A Look at Redux Action Creators
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Action creators create Redux actions. They're useful to abstract the constants
    and centralize what actions the Redux store supports.
  prefs: []
  type: TYPE_NORMAL
- en: 'Action creators always return a new action object. Creating and returning a
    new object is a good way to guarantee the immutability of the return value at
    least as far as the action creator is concerned. If the action creators returned
    some version of their parameters, it could make for surprising outputs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: 'Instead of calling `dispatch` with a manually marshaled object, it can be called
    with the output of an action creator:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: 'Exercise 79: Refactoring the React/Redux Application to Use Action Creators'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Action creators are a great way to abstract the action shape from the React
    component.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Exercise 79 comes with a preconfigured development server and a skeleton for
    the methods in the starter files, that is, `exercise--refactor-action-creators-start.js`
    and `exercise-refactor-action-creators-start.html`. The development server can
    be run with `npm run Exercise79`. The working solution for this exercise can be
    run using the npm run exercise10 file on GitHub.
  prefs: []
  type: TYPE_NORMAL
- en: In this exercise, you will go from using inline action definitions to using
    action creators.
  prefs: []
  type: TYPE_NORMAL
- en: 'Perform the following steps to complete this exercise:'
  prefs: []
  type: TYPE_NORMAL
- en: Change the current directory to `Lesson10` and run `npm install` if you haven't
    done so in this directory before. `npm install` downloads the dependencies that
    are required in order to run this activity (React, Redux, react-redux, and Parcel).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'First, run `npx parcel serve exercise-refactor-action-creators-start.html`.
    To see the application during development, run `npm run Exercise79`. You will
    see the application starting up, as follows:![Figure 10.33: Running the start
    file of this exercise'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](Images/C14587_10_33.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 10.33: Running the start file of this exercise'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: For the development server to live-reload our changes and to avoid configuration
    issues, edit the `exercise-refactor-action-creators-start.js` file directly.
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to `http://localhost:1234` (or whichever URL the starting script output).
    You should see the following HTML page:![Figure 10.34: Initial application in
    the browser'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](Images/C14587_10_34.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 10.34: Initial application in the browser'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Implement the `startCheckout`, `continueShopping`, `done`, and `addProduct`
    action creators:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: 'These return the following action types, respectively: `START_CHECKOUT`, `CONTINUE_SHOPPING`,
    `DONE`, and `ADD_PRODUCT`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Update `handleCheckout` to use the corresponding `startCheckout` action creator:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: 'Update `continueShopping` to use the corresponding `continueShopping` action
    creator:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: 'Update `finish` to use the corresponding `done` action creator:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: 'Update `addProduct` to use the corresponding `addProduct` action creator:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: 'Check that the application still behaves as expected:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.35: Application after refactoring the action creators'
  prefs: []
  type: TYPE_NORMAL
- en: '](Images/C14587_10_35.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 10.35: Application after refactoring the action creators'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: React-Redux mapStateToProps and mapDispatchToProps
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The core proposition of react-redux is the connect function which, as its name
    suggests, connects components to the store. It has a signature of `connect(mapStateToProps,
    mapDispatchToProps) (component)` and returns a `connect` component.
  prefs: []
  type: TYPE_NORMAL
- en: 'In most examples, the `mapStateToProps` function has been `stated => state`,
    which makes sense in a small application where all the state is relevant for the
    connected component. In principle, selectors should be used in `mapStateToProps`
    to avoid passing too many props and therefore the component re-renders when data
    it doesn''t even use changes. The following is a small example of the `mapStateToProps`
    function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: Let's complete an exercise using `mapStateToProps`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 80: Abstracting State Management Using the mapDispatchToProps Function'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this exercise, you will manage the state using a `mapDispatchToProps` function
    that leverages selectors to abstract the internal shape of the redux store.
  prefs: []
  type: TYPE_NORMAL
- en: 'Perform the following steps to complete this exercise:'
  prefs: []
  type: TYPE_NORMAL
- en: Change the current directory to `Lesson10` and run `npm install` if you haven't
    done so in this directory before.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'First, run `npx parcel serve exercise-map-to-props-start.html`. Then, during
    development, run `npm run Exercise80`. You will see the application starting up,
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Exercise 80 comes with a preconfigured development server and a skeleton for
    the methods in the starter files, that is, `exercise-map-to-props-start.js` and
    `exercise-map-to-props-start.html`. The development server can be run with `npm
    run Exercise80`. The working solution for this exercise can be run using the npm
    run Exercise80 file on GitHub.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.36: Output of npm run Exercise80](Images/C14587_10_36.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10.36: Output of npm run Exercise80'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Go to `http://localhost:1234` (or whichever URL the starting script output).
    You should see a blank HTML page. This is due to `mapStateToProps` returning an
    empty state object.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The audit explains which pieces of state (from the store) are used by the App
    component and how product, items, and status are the slices of state being used.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new selector for `status`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new selector for `product`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: 'In `mapStateToProps`, map `items`, `product`, and `status` to their corresponding
    selectors, which are applied to the state:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: 'Take the functions that call `dispatch` in the App component and extract them
    to `mapDispatchToProps`, taking care to remove `this.props` from `this.props.dispatch`.
    Dispatch is the first parameter to `mapDispatchToProps`. Our code should now look
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: 'Replace the references in `App#render` to `this.handleCheckout`. Instead, call
    `this.props.handleCheckout`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: 'Replace the references in `App#render` to `this.continueShopping` and `this.finish`.
    Instead, call `this.props.continueShopping` and `this.props.finish`, respectively:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: 'Replace the references in `App#render` to `this.addProduct`. Instead, call
    `this.props.addProduct`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: 'Open `http://localhost:1234`, to see that the application now behaves as expected.
    You can add products, go to the checkout, and finish or continue shopping:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.37: Application after mapStateToProps/mapDispatchToProps refactor'
  prefs: []
  type: TYPE_NORMAL
- en: '](Images/C14587_10_37.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 10.37: Application after mapStateToProps/mapDispatchToProps refactor'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: The application now works with the properly implemented `mapStateToProps` and
    `mapDispatchToProps` functions. React and Redux are further abstracted from each
    other. There is no more state in React components, nor are there direct calls
    to the store's `dispatch` method. This means that, in principle, another state
    management library could be used to replace Redux and the React code wouldn't
    change; only the glue code between the state manager and the React `App` component
    would change.
  prefs: []
  type: TYPE_NORMAL
- en: Redux Reducers In Depth
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Redux reducers should not mutate the Redux store state. As compared to first
    principles, pure functions are easier to test, and their outcome is easier to
    predict. As a state management solution, Redux has two roles: to keep the state
    as expected and to make sure updates are propagated efficiently and promptly.'
  prefs: []
  type: TYPE_NORMAL
- en: Pure functions can help us achieve that goal by operating with immutability
    in mind. Returning copies helps with change detection. For example, it is costlier
    to detect that a large section of the keys within an object have been updated
    than to detect that an object has been replaced by a shallow copy of itself. In
    the first instance, an expensive deep comparison that walks through the whole
    object to detect differences in primitive values and/or structure would have to
    be done. In the shallow copy case, the fact that the object reference is different
    is all it takes to detect the change. This is trivial and has to do with the `===`
    JavaScript operator, which compares objects by reference.
  prefs: []
  type: TYPE_NORMAL
- en: Changing JavaScript-Native Methods to an Immutable Functional Style
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Map/filter/reduce do not mutate the initial array they operate on. Throughout
    the following snippet, the values for `initial` remain unchanged. `Array#map`
    returns a copy of the array so that it doesn''t mutate the array it is operating
    on. The same is true for `Array#reduce` and `Array#filter`; they''re both used
    on an array but don''t change any values in place. Instead, they create new objects:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs: []
  type: TYPE_PRE
- en: 'Object `rest` and `spread` syntax, which was introduced in ECMAScript 2018,
    is a great way to create shallow copies of objects and exclude/override keys.
    The following code combines `Array#map` and object rest/spread to create a shallow
    copy of the array (using `Array#map`) but also creates shallow copies of the objects
    inside the array using rest/spread:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE97]'
  prefs: []
  type: TYPE_PRE
- en: The array's `rest` and `spread` syntax predate the object's spread/rest since
    it was part of ECMAScript 2015 (also known as ES6). Much like its object counterpart,
    it is very useful for creating shallow copies. Another use case we have already
    seen is converting Array-like objects into fully-fledged Arrays. The same trick
    can also be used with iterrable such as `Set`.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following examples, Array spread is being used to create a copy of an
    array before sorting it and being used to convert a Set into an Array. Array spread
    is also being used to create a copy of all but the first element of an array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs: []
  type: TYPE_PRE
- en: '`Object.freeze` makes an object read-only if it''s running in strict mode.'
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, the following snippets of code will use throw since we''re trying
    to add a property to a frozen object in strict mode:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE99]'
  prefs: []
  type: TYPE_PRE
- en: '`Object.freeze` is seldom used in practice. JavaScript, as a language designed
    to run in the browser, is built to be very permissive. Runtime errors exist but
    should be avoided, especially for something that is bound to be an application
    issue: writing to a property that is read-only.'
  prefs: []
  type: TYPE_NORMAL
- en: 'What''s more, `Object.freeze` only throws in non-strict mode. Take a look at
    the following example, where accessing and mutating properties on a frozen object
    is allowed because, by default, JavaScript runs in non-strict mode:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs: []
  type: TYPE_PRE
- en: Instead of enforcing immutability, engineering teams often choose to adhere
    to coding standards that embrace an immutable style.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: It is also possible to leverage libraries such as Immutable.js, which provides
    persistent immutable data structures that are implemented in an efficient manner.
  prefs: []
  type: TYPE_NORMAL
- en: Handling Side Effects in a React/Redux Application React Life Cycle Hooks
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The React component's `render()` method should be pure, so it does not support
    side effects. Being able to predict whether a component needs to re-render based
    on its inputs (props and state) means a lot of otherwise wasteful updates can
    be avoided. Since every state or prop update can cause a call to `render`, it
    is probably not the best spot to place API calls.
  prefs: []
  type: TYPE_NORMAL
- en: What the React documentation suggests is to use the `componentDidMount` life
    cycle method. `componentDidMount` runs after the component is mounted. In other
    words, it runs the first time the component is rendered on a page if it wasn't
    being rendered in the previous state of the React application.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can use `componentDidMount` to send the HTTP request with `fetch`. The `fetch`
    Promise''s `.then` can be used to update the state from the server response:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE101]'
  prefs: []
  type: TYPE_PRE
- en: Handling Side Effects in a React/Redux Application React Hooks
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As a recent addition to React, hooks allow function components to leverage all
    the features that used to be specific to class components.
  prefs: []
  type: TYPE_NORMAL
- en: 'The previous example can be refactored into a function component that uses
    the `useState` and `useEffect` hooks. `useState` is a way we can use state with
    React function components using a hook. React will re-render the function component
    when the state from `useState` changes. `useEffect` is a counterpart to `componentDidMount`
    and is called before the render of the component if the component wasn''t being
    rendered in the application''s previous state:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE102]'
  prefs: []
  type: TYPE_PRE
- en: Handling Side Effects in a React/Redux Application Redux-Thunk
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'A thunk is a way to delay the evaluation of a function. It is a way to do lazy
    evaluation in languages that don''t support it out of the box:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE103]'
  prefs: []
  type: TYPE_PRE
- en: It is also a way to encapsulate side effects. Since we have first-class functions,
    we pass the thunk around, which is allowed in pure functions (the thunk is just
    a function), although calling the thunk itself might have side effects.
  prefs: []
  type: TYPE_NORMAL
- en: redux-thunk is quite simple; instead of passing an action creator that returns
    an object (with a type field and possibly a payload), the action creator returns
    a function that takes the store's dispatch and `getState` as parameters.
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside the thunk, it is possible to access the current store state and dispatch
    actions, which will be reduced into the store. See the following example with
    Redux and redux-thunk:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE104]'
  prefs: []
  type: TYPE_PRE
- en: Introduction to GraphQL Language Schemas and Queries
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: GraphQL is a query language. It exposes a typed schema to run queries against.
    The massive benefit of GraphQL is that the client requests what information it
    needs. This is a direct effect of having a typed schema.
  prefs: []
  type: TYPE_NORMAL
- en: We will add GraphQL to our BFF using `express-graphql`, which is compatible
    with micro. We need to provide our GraphQL endpoint with a schema and resolvers
    so that it can respond to client requests. Such a server is provided in the Exercise
    12 start file (change the working directory to `Lesson10`, run `npm install` followed
    by `npm run Exercise81`, and navigate to `http://localhost:3000` to see it in
    action).
  prefs: []
  type: TYPE_NORMAL
- en: 'A sample GraphQL query that returns a basket can work within the following
    GraphQL schema definition. Note how we have three types, that is, `Query`, `basket,`
    and `basketItem`. A `basket` contains a list of `basketItems` under an `items`
    property. The `query` contains the top-level GraphQL query fields, which in this
    case is just `basket`. To query for `basketItems`, we must load the corresponding
    `basket` and expand the `items` field:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE105]'
  prefs: []
  type: TYPE_PRE
- en: A tool that comes baked into Node.js GraphQL server components is GraphiQL.
    It is an interface for GraphQL that allows users to go through the schema and
    provides documentation of the schema.
  prefs: []
  type: TYPE_NORMAL
- en: 'The query that we entered reads as follows: load the `basket` top-level query
    field, expand its `items` field, and populate the `name`, `quantity`, and `price`
    of the `basketItem` elements in the basket''s `items` field:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.38: GraphiQL user interface and a GraphQL query that fetches'
  prefs: []
  type: TYPE_NORMAL
- en: fully expanded basket items
  prefs: []
  type: TYPE_NORMAL
- en: '](Images/C14587_10_38.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 10.38: GraphiQL user interface and a GraphQL query that fetches fully
    expanded basket items'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Running Updates with GraphQL Mutations and Resolvers
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In a query and schema world, one thing that's sorely missing is a way to run
    write operations. That is where GraphQL mutations come in. Mutations are structured
    update operations.
  prefs: []
  type: TYPE_NORMAL
- en: 'Resolvers are a server-side GraphQL implementation detail. A resolver is what
    resolves a GraphQL query. Resolvers run from the top to the bottom of the schema
    chain. When resolving a query, fields on an object are executed in parallel; when
    resolving a mutation, they''re resolved in sequence. The following is an example
    of a mutation being used:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE106]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: More guides on GraphQL can be found at [https://graphql.org](https://graphql.org).
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 81: Implementing a BFF Mutation with micro and GraphQL'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this exercise, we will use micro and GraphQL to implement a BFF mutation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Perform the following steps to complete this exercise:'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Exercise 81 comes with a preconfigured server and a skeleton for the methods
    in the starter file `exercise-graphql-micro-start.js`. The development server
    can be run with `npm run Exercise81`. The working solution for this exercise can
    be run using the `npm run Exercise81` file on GitHub.
  prefs: []
  type: TYPE_NORMAL
- en: Change the current directory to `Lesson10` and run `npm install` if you haven't
    done so in this directory before. `npm install` downloads the dependencies that
    are required so that we can run this activity (micro and `express-graphql`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run `node exercise-graphql-micro-start.js`. Then, during development, run `npm
    run Exercise81`. You will see the application starting up, as follows:![Figure
    10.39: Running the start file of this exercise'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](Images/C14587_10_39.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 10.39: Running the start file of this exercise'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Go to `http://localhost:3000` (or whichever URL the starting script output).
    You should see the following GraphiQL page:![Figure 10.40: Empty GraphiQL UI'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](Images/C14587_10_40.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 10.40: Empty GraphiQL user interface'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Add a `LineItemCost` constant, which is a field definition (plain JavaScript
    object):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE107]'
  prefs: []
  type: TYPE_PRE
- en: 'Our `LineItemCost` should have a `type` property set to `GraphQLInt` since
    the output of `LineItemCost` calculation is an integer. `LineItemCost` should
    also have an `args` field, which should be set to `{id: {type: GraphQLString}}`.
    In other words, our mutation takes an `id` argument that is a string (which is
    congruent with the sample data we have). For the mutation to return something,
    it needs a `resolve()` method. For now, it can return any integer. The `resolve`
    method of a mutations takes the root as the first parameter and the `args` as
    the second parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s implement the actual `resolve` method of `LineItemCost` now. First,
    we need to look up the item from `basketItems` by ID using `.find(el => el.id
    === args.id)`. Then, we can calculate the cost of the item (`item.price * item.quantity`),
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE108]'
  prefs: []
  type: TYPE_PRE
- en: Create a mutation constant that's a `GraphQLObjectType`. See how the query is
    initialized; its name should be `Mutation:`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE109]'
  prefs: []
  type: TYPE_PRE
- en: 'Add `LineItemCost` to the mutation `fields()` return value. This means that
    `LineItemCost` is now a top-level mutation. It can be called if `mutation` exists
    on the GraphQL schema:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE110]'
  prefs: []
  type: TYPE_PRE
- en: 'Add `mutation` to the `GraphQLSchema` schema:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE111]'
  prefs: []
  type: TYPE_PRE
- en: 'Send the following query to your server (through GraphiQL). Enter it on the
    left-hand side editor and click the **Play** button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE112]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This mutation is using what are called GraphQL aliases since we can't run the
    mutation under the same name twice.
  prefs: []
  type: TYPE_NORMAL
- en: 'The output should be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.41: GraphiQL with LineItemCost aliased mutation queries for IDs
    "1" and "2"'
  prefs: []
  type: TYPE_NORMAL
- en: '](Images/C14587_10_41.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 10.41: GraphiQL with LineItemCost aliased mutation queries for IDs "1"
    and "2"'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: To make the basket example more realistic, we will load the initial basket data
    from the GraphQL BFF, using the GraphQL query, redux-thunk, to handle the side
    effect, and a new reducer to update the Redux store state. The aim of the next
    activity is to show you how we can integrate a GraphQL BFF with a React/Redux
    application with redux-thunk.
  prefs: []
  type: TYPE_NORMAL
- en: 'Activity 17: Fetching the Current Basket From BFF'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In this activity, we will fetch initial basket data from GraphQL BFF to re-render
    items to the shopping basket, thus updating the initial state of the basket. Let''s
    get started:'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Activity 17 comes with a preconfigured development server and a skeleton for
    the methods in the starter files, that is, `activity-app-start.js` and `activity-app-start.html`.
    The development server can be run with `npm run Activity17`. The working solution
    for this activity can be run using the npm run Activity17 file on GitHub.
  prefs: []
  type: TYPE_NORMAL
- en: Change the current directory to `Lesson10` and run `npm install` if you haven't
    done so in this directory before.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the BFF for Activity 17 and `npx parcel serve activity-app-start.html`.
    During development, run `npm run Activity17`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to `http://localhost:1234` (or whichever URL the starting script output)
    to check the HTML page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Write a query that will fetch basket items from the BFF. You can use the GraphQL
    UI at `http://localhost:3000` to experiment with this.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a `requestBasket` (thunk) action creator that will call `fetchFromBff`
    with the query from the previous step.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Chain a `.then` onto the `fetchFromBff()` call to dispatch a `REQUEST_BASKET_SUCCESS`
    action with the right `basket` payload.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a case to the `appReducer` that will reduce a `REQUEST_BASKET_SUCCESS` action
    with a `basket` payload into the state.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add `requestBasket` to `mapDispatchToProps`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Call `requestBasket`, which is mapped to `dispatch`, in `App#componentDidMount`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The solution for this activity can be found on page 628.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First-class functions are part and parcel of using a popular library such as
    React and its patterns. They also power any and every delegation of implementation,
    especially on built-ins such as Array. Another core tenet of functional programming
    is pure functions. Using pure functions for complex data manipulation logic or
    an abstraction layer around a data structure is a great pattern that was put forward
    by the popular Redux state management solution. Any side effects and/or dependencies
    that must be mocked make it that much harder to reason about a complex data manipulation.
    Higher-order functions and specific techniques such as currying and partial application
    are widespread in day-to-day JavaScript development. Currying and partial application
    is a way to design functions with an interface that makes each step of specialization
    "savable" since it is already a function that has already been applied with a
    certain number of parameters.
  prefs: []
  type: TYPE_NORMAL
- en: The composition can have real value if a function application pipeline has been
    spotted. For example, modeling HTTP services as pipelines makes quite a lot of
    sense. On the other hand, the Node.js HTTP server ecosystem leaders use a middleware-based
    composition model, micro, which exposes a function composition model. Writing
    JavaScript in an immutable style allows libraries to have a cheap way to check
    whether something has changed or not. Side effects in React and Redux are handled
    outside the regular flow of pure functions, that is, render functions and reducers.
    Redux-thunk is quite a functional solution to the problem, albeit at the cost
    of making functions valid actions. Pure Redux actions are JavaScript objects with
    a type of property.
  prefs: []
  type: TYPE_NORMAL
- en: In this book, we've learned about various frameworks, including React, Angular,
    and related tools and libraries. It has taught us about the advanced concepts
    you need to know about to build modern applications. Then, we learned how to represent
    an HTML document in the Document Object Model (DOM). Later, we combined our knowledge
    of the DOM and Node.js to create a web scraper for practical situations.
  prefs: []
  type: TYPE_NORMAL
- en: In the next part, we created a Node.js-based RESTful API using the Express library
    for Node.js. We had a look at how modular designs can be used for better reusability
    and collaboration with multiple developers on a single project. We also learned
    how to build unit tests that ensure that the core functionality of our program
    is not broken over time. We saw how constructors, async/await, and events can
    load our applications with high speed and performance. The final part of this
    book introduced you to functional programming concepts such as immutability, pure
    functions, and higher-order functions.
  prefs: []
  type: TYPE_NORMAL
- en: '*Appendix*'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: About
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This section is included to assist the students to perform the activities in
    the book. It includes detailed steps that are to be performed by the students
    to achieve the objectives of the activities.
  prefs: []
  type: TYPE_NORMAL
- en: 'Chapter 1: JavaScript, HTML, and the DOM'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Activity 1: Extracting Data from a Page'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Solution**:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Initialize a variable to store the entire content of the CSV:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE113]'
  prefs: []
  type: TYPE_PRE
- en: 'Query the DOM to find all the elements that represent each product. Notice
    how we wrap the `HTMLCollection` instance returned in `Array.from` so that we
    can handle it like a normal array:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE114]'
  prefs: []
  type: TYPE_PRE
- en: 'Iterate over each element found:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE115]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside the closure, using the `product` element, query to find the price with
    the unit. Split the string using a slash:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE116]'
  prefs: []
  type: TYPE_PRE
- en: 'Then query for the name:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE117]'
  prefs: []
  type: TYPE_PRE
- en: 'Append all information to the variable initialized in step 1, separating the
    values with commas. Don''t forget to add newline characters to each line you append
    to:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE118]'
  prefs: []
  type: TYPE_PRE
- en: 'Print the variable containing the accumulated data using the `console.log`
    function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE119]'
  prefs: []
  type: TYPE_PRE
- en: 'Paste the code in the Chrome **Console** tab; it should look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.62: Code ready to run in the Console tab'
  prefs: []
  type: TYPE_NORMAL
- en: '](Images/C14587_01_62.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 1.62: Code ready to run in the Console tab'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'After pressing *Enter* to execute the code, you should see the CSV printed
    in the console, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.63: The storefront with the code and output in the Console tab'
  prefs: []
  type: TYPE_NORMAL
- en: '](Images/C14587_01_63.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 1.63: The storefront with the code and output in the Console tab'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Activity 2: Replacing the Tag Filter with a Web Component'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Solution**:'
  prefs: []
  type: TYPE_NORMAL
- en: Start by copying the code from `Exercise07` into a new folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new file called `tags_holder.js` and in it add a class called `TagsHolder`
    that extends `HTMLElement`, then define a new custom component called `tags-holder`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE120]'
  prefs: []
  type: TYPE_PRE
- en: 'Create two `render` methods: one to render the base state and one to render
    the tags or some text indicating that no tags are selected for filtering:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE121]'
  prefs: []
  type: TYPE_PRE
- en: 'In the constructor, call `w`, attach the component to the shadow root, initialize
    the list of selected tags, and call both `render` methods:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE122]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a getter to expose the list of selected tags:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE123]'
  prefs: []
  type: TYPE_PRE
- en: 'Create two trigger methods: one to trigger the changed event and one to trigger
    the `tag-clicked` event:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE124]'
  prefs: []
  type: TYPE_PRE
- en: 'Create two `mutator` methods: `addTag` and `removeTag`. These methods receive
    the tag name and add a tag if not present, or remove tag if present, in the list
    of selected tags. If the list was modified, trigger the `changed` event and call
    the method to re-render the list of tags:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE125]'
  prefs: []
  type: TYPE_PRE
- en: 'In the HTML, replace the existing code with the new component. Remove the following
    lines:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE126]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You can see the final HTML on GitHub at [https://github.com/TrainingByPackt/Professional-JavaScript/blob/master/Lesson01/Activity02/dynamic_storefront.html](https://github.com/TrainingByPackt/Professional-JavaScript/blob/master/Lesson01/Activity02/dynamic_storefront.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'In `filter_and_search.js`, do the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'At the top, create a reference to the `tags-holder` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE127]'
  prefs: []
  type: TYPE_PRE
- en: 'Add event listeners to handle the `changed` and `tag-clicked` events:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE128]'
  prefs: []
  type: TYPE_PRE
- en: 'Remove the following functions and all references to them: `createTagFilterLabel`
    and `updateTagFilterList`.'
  prefs: []
  type: TYPE_NORMAL
- en: In the `filterByTags` function, replace `tagsToFilterBy` with `filterByTagElement.selectedTags`.
  prefs: []
  type: TYPE_NORMAL
- en: In the `addTagFilter` method, replace the references to `tagsToFilterBy` with
    `filterByTagElement.addTag`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Chapter 2: Node.js and npm'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Activity 3: Creating a npm Package to Parse HTML'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Solution**:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In an empty folder, use npm to create a new package. You can use all the default
    values for the options:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE129]'
  prefs: []
  type: TYPE_PRE
- en: 'To install `cheerio`, run `npm install`. Make sure that you type the name of
    the library incorrectly:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE130]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside this folder, create a file called `index.js` and add the following to
    it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE131]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a variable that stores the HTML from the sample code from GitHub ([https://github.com/TrainingByPackt/Professional-JavaScript/blob/master/Lesson01/Example/sample_001/sample-page.html](https://github.com/TrainingByPackt/Professional-JavaScript/blob/master/Lesson01/Example/sample_001/sample-page.html)).
    When creating multiline strings, you can use backquotes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE132]'
  prefs: []
  type: TYPE_PRE
- en: 'Parse the HTML and pass it to cheerio. In cheerio''s examples, you are going
    to see that they name the parsed variable as "`$`" (dollar sign). That is an old
    convention that was used in the jQuery world. This is what it looks like:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE133]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we can use that variable to manipulate the HTML. To start, we will add
    a paragraph to the page with some text in it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE134]'
  prefs: []
  type: TYPE_PRE
- en: We can also query the HTML, similar to what we did in *Chapter 1, JavaScript,
    HTML, and the DOM*, using CSS selectors. Let's query for all the paragraphs and
    print their content to the console. Notice that cheerio elements do not behave
    exactly like DOM elements, but they are very similar.
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the `firstChild` attribute to find the first node of each paragraph and
    print its content, assuming it will be the text element:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE135]'
  prefs: []
  type: TYPE_PRE
- en: 'Lastly, inside `index.js`, print the manipulated HTML to the console by calling
    the `html` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE136]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, you can run your application by calling it from Node.js:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.7: Calling the application from node.js'
  prefs: []
  type: TYPE_NORMAL
- en: '](Images/C14587_02_07.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 2.7: Calling the application from Node.js'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Chapter 3: Node.js APIs and Web Scraping'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Activity 4 Scraping Products and Prices from Storefront
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Solution**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Start the dynamic server to serve the storefront application using the code
    from *Exercise 14, Serving Dynamic Content,* in this chapter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE137]'
  prefs: []
  type: TYPE_PRE
- en: 'In a new Terminal, create a new `npm` package, install `jsdom`, and create
    the `index.js` entry file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE138]'
  prefs: []
  type: TYPE_PRE
- en: 'Call the `require()` method to load all the modules you will need in the project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE139]'
  prefs: []
  type: TYPE_PRE
- en: 'Make an HTTP request to `http://localhost:3000`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE140]'
  prefs: []
  type: TYPE_PRE
- en: 'Ensure a successful response and collect the data from the body using the data
    event:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE141]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `close` event, parse the HTML using `JSDOM`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE142]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding callback calls two functions: `extractProducts` and `writeCSV`.
    These functions are described in the upcoming steps.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the `extractProducts` function to query the DOM and fetch product information
    from it. It stores all the products in an array, which is returned at the end:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE143]'
  prefs: []
  type: TYPE_PRE
- en: 'Use the `writeCSV` function, which opens the CSV file to write, ensuring that
    no error occurred:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE144]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that the file is open, we can write the product data to the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE145]'
  prefs: []
  type: TYPE_PRE
- en: 'In the new Terminal, run the application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE146]'
  prefs: []
  type: TYPE_PRE
- en: 'Chapter 4: RESTful APIs with Node.js'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Activity 5: Creating an API Endpoint for a Keypad Door Lock'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Solution**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new project folder and change the directories going to it to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE147]'
  prefs: []
  type: TYPE_PRE
- en: 'Initialize an `npm` project and install `express`, `express-validator`, and
    `jwt-simple`. Then, make a directory for `routes`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE148]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a `config.js` file, just as you did in *Exercise 21, Setting Up an Endpoint
    that Requires Authentication*. This should contain a randomly generated secret
    value:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE149]'
  prefs: []
  type: TYPE_PRE
- en: 'Make the `routes/check-in.js` file in order to create a check-in route. This
    can be copied in whole from *Exercise 21, Setting Up an Endpoint that Requires
    Authentication*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE150]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a second route file called `routes/lock.js`. Start the file off by importing
    the required libraries and modules, and create an empty array to hold our valid
    passcodes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE151]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a `GET` route for `/code` that requires a `name` value, which is continued
    after the code in the preceding step in the `routes/lock.js` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE152]'
  prefs: []
  type: TYPE_PRE
- en: 'Create another route in `routes/lock.js`. This one will be for `/open` and
    requires a four-digit code that will be checked against the `passCodes` array
    to see whether it is valid. Below that route, make sure to export `router`, so
    that it can be used in `server.js`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE153]'
  prefs: []
  type: TYPE_PRE
- en: 'Create the main file where our routes will be used in `server.js`. Start by
    importing the libraries needed and setting URL encoding the JSON:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE154]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, in `server.js`, below the preceding code, import the two routes, implement
    a `404` catch-all, and tell the API to listen on port `3000`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE155]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we will test the API to ensure it was done correctly. Start by running
    your program:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE156]'
  prefs: []
  type: TYPE_PRE
- en: 'With the program running, open a second Terminal window and use the `/check-in`
    endpoint to get a JWT and save the value as `TOKEN`. Then, echo that value to
    ensure it was successful:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE157]'
  prefs: []
  type: TYPE_PRE
- en: 'You should get back a long string of letters and numbers like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.24: Getting TOKEN from the check-in endpoint'
  prefs: []
  type: TYPE_NORMAL
- en: '](Images/C14587_04_24.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 4.24: Getting TOKEN from the check-in endpoint'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Next, we will use our JWT to use the `/lock/code` endpoint to get a one-time
    passcode for Sarah:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE158]'
  prefs: []
  type: TYPE_PRE
- en: 'You should get back an object containing a message and a four-digit code like
    in the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.25: A four-digit one-time code'
  prefs: []
  type: TYPE_NORMAL
- en: '](Images/C14587_04_25.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 4.25: A four-digit one-time code'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'To ensure the code works, send it to the `/lock/open` endpoint. We will send
    the following command once, expecting it to be successful. We will then send the
    same command a second time, expecting it to fail since each code is used only
    once. Run the following twice:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE159]'
  prefs: []
  type: TYPE_PRE
- en: 'Running the preceding command twice should return something like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.26: Running the command twice results in an error'
  prefs: []
  type: TYPE_NORMAL
- en: '](Images/C14587_04_26.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 4.26: Running the command twice results in an error'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: If your result is the same as shown in the preceding figure, then you have successfully
    completed the activity.
  prefs: []
  type: TYPE_NORMAL
- en: 'Chapter 5: Modular JavaScript'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Activity 6: Creating a Lightbulb with a Flash Mode'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Solution**:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install the `babel-cli` and `babel` preset as developer dependencies:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE160]'
  prefs: []
  type: TYPE_PRE
- en: 'Add a file called `.babelrc` to the root directory. In it, we will tell Babel
    to use the preset settings:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE161]'
  prefs: []
  type: TYPE_PRE
- en: 'Add a webpack configuration file at `webpack.config.js` in the root directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE162]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new file called `js/flashingLight.js`. This should start as a blank
    ES6 component that extends `Light`. In the constructor, we will include `state`,
    `brightness`, and `flashMode`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE163]'
  prefs: []
  type: TYPE_PRE
- en: Add a setter method for the `FlashingLight` object, which will also trigger
    stop and start flash methods.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE164]'
  prefs: []
  type: TYPE_PRE
- en: 'Add a getter method for the `FlashingLight` object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE165]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a `startFlashing` function that references the parent class''s `lightSwitch()`
    function. This step is tricky because we have to bind it to `setInterval`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE166]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a `stopFlashing` function that can be used to turn off the timer:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE167]'
  prefs: []
  type: TYPE_PRE
- en: 'As the last part of `flashingLight.js`, close the class and export it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE168]'
  prefs: []
  type: TYPE_PRE
- en: 'Open `src/js/viewer.js` and modify the button to create a flashing light instead
    of a colored light:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE169]'
  prefs: []
  type: TYPE_PRE
- en: 'Compile the code by running our `build` function with npm:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE170]'
  prefs: []
  type: TYPE_PRE
- en: 'Open up `build/index.html` and set the script location as `bundle.js`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE171]'
  prefs: []
  type: TYPE_PRE
- en: 'To test that everything is working as expected, run `npm start` and open `localhost:8000`
    in your browser. Hit the `build` button to create a full page of lights. If everything
    has been done correctly, you should see each light blink at 5-second intervals:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.20: Lightbulbs with flash mode'
  prefs: []
  type: TYPE_NORMAL
- en: '](Images/C14587_05_20.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 5.20: Lightbulbs with flash mode'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Chapter 6: Code Quality'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Activity 7: Putting It All Together'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Solution**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install the developer dependencies listed in the linting exercise (`eslint`,
    `prettier`, `eslint-config-airbnb-base`, `eslint-config-prettier`, `eslint-plugin-jest`,
    and `eslint-plugin-import`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE172]'
  prefs: []
  type: TYPE_PRE
- en: 'Add an `eslint` configuration file, `.eslintrc`, which contains the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE173]'
  prefs: []
  type: TYPE_PRE
- en: 'Add a .`prettierignore` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE174]'
  prefs: []
  type: TYPE_PRE
- en: 'Add a `lint` command to your `package.json` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE175]'
  prefs: []
  type: TYPE_PRE
- en: 'Open the `assignment` folder and install the developer dependencies for using
    Puppeteer with Jest:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE176]'
  prefs: []
  type: TYPE_PRE
- en: 'Modify your `package.json` file by adding an option telling Jest to use the
    `jest-puppeteer` preset:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE177]'
  prefs: []
  type: TYPE_PRE
- en: 'Add a `test` script to `package.json` that runs `jest`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE178]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a `jest-puppeteer.config.js` file containing the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE179]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a test file at `__tests__/calculator.js` that contains the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE180]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a Husky file at `.huskyrc` that contains the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE181]'
  prefs: []
  type: TYPE_PRE
- en: 'Install `husky` as a developer dependency by running `npm install --save-dev
    husky`:![Figure 6.19: Installing Husky'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](Images/C14587_06_19.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 6.19: Installing Husky'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Ensure that tests are working correctly using the `npm test` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE182]'
  prefs: []
  type: TYPE_PRE
- en: 'This should return positive results for two tests, as shown in the following
    figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.20: Showing the positive result of two tests'
  prefs: []
  type: TYPE_NORMAL
- en: '](Images/C14587_06_20.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 6.20: Showing the positive result of two tests'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Ensure the Git hook and linting is working by making a test commit.
  prefs: []
  type: TYPE_NORMAL
- en: 'Chapter 7: Advanced JavaScript'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Activity 8: Creating a User Tracker'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Solution**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `Activity08.js` file and define `logUser`. It will add the user to
    the `userList` argument. Make sure no duplicates are added:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE183]'
  prefs: []
  type: TYPE_PRE
- en: Here, we used an `includes` method to check whether the user already exists.
    If they don't, they will be added to our list.
  prefs: []
  type: TYPE_NORMAL
- en: 'Define `userLeft`. It will remove the user from the `userList` argument. If
    the user doesn''t exist, it will do nothing:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE184]'
  prefs: []
  type: TYPE_PRE
- en: Here, we are using `indexOf` to get the current index of the user we want to
    remove. If the item doesn't exist, `indexOf` will `return –1`, so we are only
    using `splice` to remove the item if it exists.
  prefs: []
  type: TYPE_NORMAL
- en: 'Define `numUsers`, which returns the number of users currently inside the list:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE185]'
  prefs: []
  type: TYPE_PRE
- en: 'Define a function called `runSite`. We will create a `users` array and call
    the function we declared previously to test our implementation. We will also invoke
    the function afterward:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE186]'
  prefs: []
  type: TYPE_PRE
- en: 'After defining the functions, running the preceding code will return the following
    output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.62: Output of running log_users.js'
  prefs: []
  type: TYPE_NORMAL
- en: '](Images/C14587_07_62.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 7.62: Output of running log_users.js'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Activity 9: Creating a Student Manager Using JavaScript Arrays and Classes'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Solution**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a `School` class that includes all the student''s information:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE187]'
  prefs: []
  type: TYPE_PRE
- en: In the `School` constructor, we simply initialize a list of students. Later,
    we will add new students to this list.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a `Student` class that includes all the relevant information about the
    student:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE188]'
  prefs: []
  type: TYPE_PRE
- en: In the student `constructor`, we are storing a list of courses, as well as the
    student's `age`, `name`, and `gradeLevel`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a `Course` class that will include information about the course''s `name`
    and `grade`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE189]'
  prefs: []
  type: TYPE_PRE
- en: The course constructor simply stores the name of the course and grade in the
    `object`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create `addStudent` in the `School` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE190]'
  prefs: []
  type: TYPE_PRE
- en: 'Create `findByGrade` in the `School` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE191]'
  prefs: []
  type: TYPE_PRE
- en: 'Create `findByAge` in the `School` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE192]'
  prefs: []
  type: TYPE_PRE
- en: 'Create `findByName` in the `School` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE193]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `Student` class, create a `calculateAverageGrade` method for calculating
    the average grade of the student:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE194]'
  prefs: []
  type: TYPE_PRE
- en: In the `calculateAverageGrade` method, we use array reduce to get the total
    grades of all the classes for our student. Then, we divide this by the number
    of courses in our courses list.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `Student` class, create a method called `assignGrade`, which will assign
    a number grade for a course the student is taking:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE195]'
  prefs: []
  type: TYPE_PRE
- en: 'You should do your work in the `student_manager.js` file and modify the provided
    method template. You should see the **TEST PASSED** message if you implemented
    everything correctly:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.63: Screenshot showing the TEST PASSED message'
  prefs: []
  type: TYPE_NORMAL
- en: '](Images/C14587_07_63.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 7.63: Screenshot showing the TEST PASSED message'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Activity 10: Refactoring Functions to Use Modern JavaScript Features'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Solution**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `Activity03.js`; it should contain various functions written in legacy
    JavaScript. When you run `Activity03.js` using Node.js, you should see the following
    output:![Figure 7.64: Output after running Lesson7-activity.js'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](Images/C14587_07_64.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 7.64: Output after running Lesson7-activity.js'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'You need to refactor `itemExist`, using the `includes` array:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE196]'
  prefs: []
  type: TYPE_PRE
- en: 'In `createFilledArray`, we will use `array.fill` to fill our array with an
    initial value:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE197]'
  prefs: []
  type: TYPE_PRE
- en: 'In `removeLast`, we will use `array.pop` to remove the last item:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE198]'
  prefs: []
  type: TYPE_PRE
- en: 'We will refactor our `Food` class using the `ES6` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE199]'
  prefs: []
  type: TYPE_PRE
- en: 'After you have finished the refactor and run the existing code, you should
    see the same output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.65: Output showing the TEST PASSED message'
  prefs: []
  type: TYPE_NORMAL
- en: '](Images/C14587_07_65.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 7.65: Output showing the TEST PASSED message'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Chapter 8: Asynchronous Programming'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Activity 11: Using Callbacks to Receive Results'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Solution**:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a `calculate` function that takes `id` and a `callback` as an argument:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE200]'
  prefs: []
  type: TYPE_PRE
- en: 'We will first call `getUsers` to get all of the users. This will give us the
    address we need:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE201]'
  prefs: []
  type: TYPE_PRE
- en: Here, we get all of the users, then we apply the `find` method to the `user`
    to find the user we want from the list. If that user does not exist, we call the
    `callback` function with the `User not found` error.
  prefs: []
  type: TYPE_NORMAL
- en: 'Call `getUsage` to get the user''s usage:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE202]'
  prefs: []
  type: TYPE_PRE
- en: Then, we need to put the call to `getUsage` inside the callback of `getUsers`
    so it will run after we have finished calling `getUsers`. Here, the callback will
    be called with a list of numbers, which will be the usage. We will also call the
    callback with the error object if we receive an error from `getUsage`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, call `getRate` to get the rate of the user we are doing the calculation
    for:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE203]'
  prefs: []
  type: TYPE_PRE
- en: We will put this call inside the callback for `getUsage`. This creates a nested
    chain request for all the information we need. Lastly, we will call the callback
    with the information we are calculating. For the final due amount, we use array
    reduce to calculate the total usage for that user, and then multiply that by the
    rate to get the final amount due.
  prefs: []
  type: TYPE_NORMAL
- en: 'When the function is completed, invoke it using an existing ID, as in the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE204]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see output like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.43: Invoking the function using an existing ID'
  prefs: []
  type: TYPE_NORMAL
- en: '](Images/C14587_08_43.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.43: Invoking the function using an existing ID'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Invoke the function using an ID that doesn''t exist:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE205]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see the following output with the error returned:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.44: Invoking a function using an ID that doesn’t exist'
  prefs: []
  type: TYPE_NORMAL
- en: '](Images/C14587_08_44.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.44: Invoking a function using an ID that doesn''t exist'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Activity 12: Refactor the Bill Calculator Using Async and Await'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Solution**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the `calculate` function as an `async` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE206]'
  prefs: []
  type: TYPE_PRE
- en: 'Use `await` to call `getUsers` to get the resolved result in `users`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE207]'
  prefs: []
  type: TYPE_PRE
- en: When we are using the `await` keyword, we must use `async` functions. The `await`
    keyword will break the control of our program and will only return and continue
    execution once the promise it is waiting for is resolved.
  prefs: []
  type: TYPE_NORMAL
- en: 'Use `await` to call `getUsage` to get the usage for the user:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE208]'
  prefs: []
  type: TYPE_PRE
- en: 'Use `await` to call `getRate` to get the rate for the user:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE209]'
  prefs: []
  type: TYPE_PRE
- en: 'Lastly, we will call `return` to retrieve `id`, `address`, and `due`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE210]'
  prefs: []
  type: TYPE_PRE
- en: 'Write the `calculateAll` function as an `async` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE211]'
  prefs: []
  type: TYPE_PRE
- en: 'Use `await` when we call `getUsers` and store the result in `result`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE212]'
  prefs: []
  type: TYPE_PRE
- en: 'Use a map array to create a list of promises and use `Promise.all` to wrap
    them. Then, should be use `await` on the promise returned by `Promise.all`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE213]'
  prefs: []
  type: TYPE_PRE
- en: Because `await` will work on any promise and will wait until the value is resolved,
    it will also wait for our `Promise.all`. After it is resolved, the final array
    will be returned.
  prefs: []
  type: TYPE_NORMAL
- en: 'Call `calculate` on one of the users:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE214]'
  prefs: []
  type: TYPE_PRE
- en: 'The output should be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.45: Calling calculate on one of the users'
  prefs: []
  type: TYPE_NORMAL
- en: '](Images/C14587_08_45.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.45: Calling calculate on one of the users'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Call the `calculateAll` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE215]'
  prefs: []
  type: TYPE_PRE
- en: 'The output should be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.46: Calling the calculateAll function'
  prefs: []
  type: TYPE_NORMAL
- en: '](Images/C14587_08_46.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.46: Calling the calculateAll function'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: As you can see, when we call `async` functions, we can treat them as functions
    that return a promise.
  prefs: []
  type: TYPE_NORMAL
- en: 'Chapter 9: Event-Driven Programming and Built-In Modules'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Activity 13: Building an Event-Driven Module'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Solution**:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Perform the following steps to complete this activity:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Import the `events` module:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE216]'
  prefs: []
  type: TYPE_PRE
- en: 'Create the `SmokeDetector` class that extends `EventEmitter` and set `batteryLevel`
    to `10`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE217]'
  prefs: []
  type: TYPE_PRE
- en: In our constructor, because we are extending the `EventEmitter` class and we
    are assigning a custom property, `batteryLevel`, we will need to call `super`
    inside the constructor and set `batteryLevel` to `10`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a `test` method inside the `SmokeDetector` class that will test the
    battery level and emit a `low battery` message in the event that the battery is
    low:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE218]'
  prefs: []
  type: TYPE_PRE
- en: Our `test()` method will check the battery level and emit a `low battery` event
    when the battery has less than 0.5 units. We will also reduce the battery level
    every time we run the `test` method.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the `House` class, which will store the instances of our event listeners:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE219]'
  prefs: []
  type: TYPE_PRE
- en: In the `House` class, we are storing some information about the house. We are
    also storing both of the event listener functions as properties of this object.
    This way, we can use the function reference to call `removeListener` when we want
    to detach a listener.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create an `addDetector` method in the `House` class. Here, we will attach the
    event listeners:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE220]'
  prefs: []
  type: TYPE_PRE
- en: Here, we are expecting the detector that's passed in to be an `EventEmitter`.
    We are attaching two event listeners to our `detector` argument. When these events
    are emitted, it will invoke our event emitter inside the object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a `removeDetector` method, which will help us remove the alarm event
    listeners we attached previously:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE221]'
  prefs: []
  type: TYPE_PRE
- en: Here, we are using the function reference and the alarm argument to remove the
    listener attached to our listener. Once this is called, the events should not
    invoke our listener again.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a `House` instance called `myHouse`. This will contain some sample information
    about our house. It will also be used to listen to events from our smoke detector:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE222]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a `SmokeDetector` instance called `detector`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE223]'
  prefs: []
  type: TYPE_PRE
- en: 'Add our `detector` to `myHouse`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE224]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a loop to call the test function `96` times:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE225]'
  prefs: []
  type: TYPE_PRE
- en: 'Because the testing function will reduce the battery level, we will expect
    a *low battery* alarm to be emitted if we call it `96` times. This will produce
    the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.50: Low battery alarm emitted'
  prefs: []
  type: TYPE_NORMAL
- en: '](Images/C14587_09_50.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 9.50: Low battery alarm emitted'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Emit an alarm on the `detector` object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE226]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is the output of the preceding code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.51: Alarm emitted for the detector object'
  prefs: []
  type: TYPE_NORMAL
- en: '](Images/C14587_09_51.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 9.51: Alarm emitted for the detector object'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Remove `detector` from the `myHouse` object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE227]'
  prefs: []
  type: TYPE_PRE
- en: 'Test this to emit the alarms on the `detector`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE228]'
  prefs: []
  type: TYPE_PRE
- en: 'Because we just removed `detector` from our house, we should see no output
    from this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.52: Testing the emit alarms on the detector'
  prefs: []
  type: TYPE_NORMAL
- en: '](Images/C14587_09_52.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 9.52: Testing the emit alarms on the detector'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Activity 14: Building a File Watcher'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Solution**:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Import `fs` and `events`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE229]'
  prefs: []
  type: TYPE_PRE
- en: Create a `fileWatcher` class that extends the `EventEmitter` class. Use a `modify`
    timestamp to keep track of the file change.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We need to create a `FileWatcher` class that extends `EventEmitter`. It will
    take the filename and delay as parameters in the constructor. In the constructor,
    we will also need to set the last modified time and the timer variable. We will
    keep them as undefined for now:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE230]'
  prefs: []
  type: TYPE_PRE
- en: This is the most basic way to see whether a file has been changed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the `startWatch` method to start watching the changes on the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE231]'
  prefs: []
  type: TYPE_PRE
- en: Here, we are using `fs.stat` to get the file's information and comparing the
    modified time with the last modified time. If they are not equal, we will output
    **modified** in the console.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the `stopWatch` method to stop watching the changes on the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE232]'
  prefs: []
  type: TYPE_PRE
- en: 'The `stopWatch` method is very simple: we will check if we have a timer in
    this object. If we do, then we run `clearInterval` on that timer to clear that
    timer.'
  prefs: []
  type: TYPE_NORMAL
- en: Create a `test.txt` file in the same directory as `filewatch.js`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a `FileWatcher` instance and start watching the file every `1000` ms:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE233]'
  prefs: []
  type: TYPE_PRE
- en: 'Modify some content in `test.txt` and save it. You should see the following
    output:![Figure 9.53: Output after modifying the content in the test.txt file'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](Images/C14587_09_53.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 9.53: Output after modifying the content in the test.txt file'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: We modified the file twice, which means we are seeing three modified messages.
    This is happening because when we start the watch, we class this as the file being
    modified.
  prefs: []
  type: TYPE_NORMAL
- en: 'Modify `startWatch` so that it also retrieves the new content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE234]'
  prefs: []
  type: TYPE_PRE
- en: 'When we modify `test.txt` and save it, our code should detect it and output
    the new content:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.54: The modifications that were made in the file can be seen using
    the startWatch function'
  prefs: []
  type: TYPE_NORMAL
- en: '](Images/C14587_09_54.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 9.54: The modifications that were made in the file can be seen using
    the startWatch function'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Modify `startWatch` so that it emits events when the file is modified and an
    error when it encounters an error:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE235]'
  prefs: []
  type: TYPE_PRE
- en: Instead of outputting the content, we will emit an event with the new content.
    This makes our code much more flexible.
  prefs: []
  type: TYPE_NORMAL
- en: 'Attach event handlers to `error` and change them on our file `watcher`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE236]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the code and modify `test.txt`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.55: Output after changing our file watcher'
  prefs: []
  type: TYPE_NORMAL
- en: '](Images/C14587_09_55.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 9.55: Output after changing our file watcher'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Chapter 10: Functional Programming with JavaScript'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Activity 15: onCheckout Callback Prop'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Solution**'
  prefs: []
  type: TYPE_NORMAL
- en: Change the current directory to `Lesson10` and run `npm install` if you haven't
    done so in this directory before. `npm install` downloads the dependencies that
    are required in order to run this activity (React and Parcel).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run `parcel serve activity-on-checkout-prop-start.html` and then execute `npm
    run Activity15`. You will see the application starting up, as follows:![Figure
    10.42: Output after running the start html script'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](Images/C14587_10_42.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 10.42: Output after running the start html script'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Go to `http://localhost:1234` (or whichever URL the start script output). You
    should see the following HTML page:![Figure 10.43: Initial application in the
    browser'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](Images/C14587_10_43.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 10.43: Initial application in the browser'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'The `onClick` of the **Proceed to checkout** can be implemented as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE237]'
  prefs: []
  type: TYPE_PRE
- en: 'This follows on from the following investigation:'
  prefs: []
  type: TYPE_NORMAL
- en: Finding the button in the `Basket` component's `render` method whose text is
    `Proceed to checkout`.
  prefs: []
  type: TYPE_NORMAL
- en: Noticing its `onClick` handler is currently a function that does nothing when
    called, `() => {}`.
  prefs: []
  type: TYPE_NORMAL
- en: Replacing the `onClick` handler with the correct call to `this.props.onCheckout`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We should see the following after clicking the `Proceed to checkout` button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.44: Output after clicking on the “Proceed to checkout” button'
  prefs: []
  type: TYPE_NORMAL
- en: '](Images/C14587_10_44.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 10.44: Output after clicking on the "Proceed to checkout" button'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Activity 16: Testing a Selector'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Solution**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Run `npm run Activity16` (or `node activity-items-selector-test-start.js`).
    You will see the following output:![Figure 10.45: Expected output after running
    the start file of the activity'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](Images/C14587_10_45.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 10.45: Expected output after running the start file of the activity'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Test that, for empty states, the selector returns `[]`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE238]'
  prefs: []
  type: TYPE_PRE
- en: 'Test that, for an empty basket object, the selector returns []:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE239]'
  prefs: []
  type: TYPE_PRE
- en: Test that, if the items array is set but empty, the selector returns `[]:`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE240]'
  prefs: []
  type: TYPE_PRE
- en: 'Test that, if the `items` array is not empty and set, the selector returns
    it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE241]'
  prefs: []
  type: TYPE_PRE
- en: 'There should be no errors in the output of the implemented test:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.46: Final output showing no errors'
  prefs: []
  type: TYPE_NORMAL
- en: '](Images/C14587_10_46.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 10.46: Final output showing no errors'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Activity 17: Fetching the Current Basket From BFF'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Solution**'
  prefs: []
  type: TYPE_NORMAL
- en: Change the current directory to `Lesson10` and run `npm install` if you haven't
    done so in this directory before.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the BFF for Activity 17 and `npx parcel serve activity-app-start.html`.
    During development, run `npm run Activity17`. You will see the application starting
    up, as follows:![Figure 10.47: Running the initial start file for the activity'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](Images/C14587_10_47.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 10.47: Running the initial start file for the activity'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Go to `http://localhost:1234` (or whichever URL the starting script output).
    You should see the following HTML page:![Figure 10.48: Initial application in
    the browser'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](Images/C14587_10_48.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 10.48: Initial application in the browser'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Run the following query in the GraphiQL UI:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE242]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is the output of the preceding code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.49: GraphiQL UI with basket query'
  prefs: []
  type: TYPE_NORMAL
- en: '](Images/C14587_10_49.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 10.49: GraphiQL UI with basket query'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Create a new `requestBasket` action creator (that leverages redux-thunk). It
    calls `fetchFromBff` with the query from the previous step and dispatches a `REQUEST_BASKET_SUCCESS`
    action with a basket payload extracted from the GraphQL response:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE243]'
  prefs: []
  type: TYPE_PRE
- en: 'Reduce the basket data into the store and add the following case to `appReducer`
    to reduce our new `REQUEST_BASKET_SUCCESS` action''s `basket` payload into the
    state:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE244]'
  prefs: []
  type: TYPE_PRE
- en: 'Add `requestBasket` in `mapDispatchToProps`, like so:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE245]'
  prefs: []
  type: TYPE_PRE
- en: 'Call `requestBasket` on `componentDidMount`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE246]'
  prefs: []
  type: TYPE_PRE
- en: 'When loading up the application with all the preceding steps completed, it
    flashes with the "You have 0 items in your basket" message before changing to
    the following screenshot. When the fetch from the BFF completes, it is reduced
    into the store and causes a re-render. This will display the basket once again,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.50: Final application once it has been integrated with the BFF](Images/C14587_10_50.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10.50: Final application once it has been integrated with the BFF'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
