- en: Extending MySQL 8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the previous chapter, we learned how to optimize MySQL 8\. We also learned
    what configurations need to be done to achieve optimization, and also how to leverage
    caching and buffering for optimization. We went through the use case study step
    by step for achieving optimization in the following components:'
  prefs: []
  type: TYPE_NORMAL
- en: Optimizing MySQL 8 server and client
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Optimizing data structures
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Optimizing queries
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Optimizing tables
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In this chapter, we will learn about extending MySQL 8\. We will check what
    MySQL 8 components are allowed to extend, and we will look at how to customize
    MySQL 8 for specific business needs. You will learn about the fundamental components
    prior to extending MySQL 8 and the features of the MySQL plugin API that will
    be used to extend MySQL 8\. The following is the list of topics covered in this
    chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: An overview of extending MySQL 8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Extending plugins and using services to call them
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding new functions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Debugging and porting
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An overview of extending MySQL 8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, you will learn about one of the most exciting topics on how
    to extend MySQL 8 as per your needs. There are several components of MySQL 8 that
    you should understand well prior attempting to extend MySQL 8\. Here is a list
    of the components that are important for extending MySQL 8:'
  prefs: []
  type: TYPE_NORMAL
- en: MySQL 8 internals
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MySQL 8 plugin API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MySQL 8 services for components and plugins
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding new functions to MySQL 8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Debugging and porting MySQL 8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MySQL 8 internals
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are few things you should know before you start working on the MySQL
    code. To contribute or track MySQL development you should follow the instructions
    for the installation of source code distribution as per your system or operating
    system platform. The source code includes internal documentation, which is very
    important to understand how MySQL internally works from developer''s perspective.
    You can also subscribe to the internals mailing list from [https://lists.mysql.com/internals](https://lists.mysql.com/internals),
    which includes people who work on MySQL code, and you can also discuss topics
    related to MySQL development or posting patches:'
  prefs: []
  type: TYPE_NORMAL
- en: '**MySQL 8 threads**: MySQL server creates threads such as connection manager
    threads, signal threads, read and write threads if using `InnoDB` storage engine,
    scheduler threads to handle connection, and replication and event processing.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**MySQL 8 test suite**: MySQL 8 provides the test systems included with Unix
    source distribution to help users and developers performing regression testing
    with MySQL code. You can also write your own test cases using the test framework.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MySQL 8 plugin API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: MySQL 8 provides support for plugin API by which server components themselves
    can be created. The plugins can be loaded during server startup and can also be
    loaded and unloaded during runtime; there is no need to restart the server. The
    API is very generic in that it does not specify what plugins can do in terms of
    limitation but instead they are allowed to do more than build-in components. The
    API supports interfaces for components such as storage engines plugins, full-text
    parser plugins, server extensions and so on.
  prefs: []
  type: TYPE_NORMAL
- en: The plugin interface makes use of the `plugin` table in the MySQL 8 database
    to store the information about installed plugins permanently by using the `INSTALL
    PLUGIN` statement. During the MySQL 8 installation process the `plugin` table
    is created. For single server invocation the plugins can also be installed using
    the `--plugin--load` option, but using this option does not record the installed
    plugin to the `plugin` table.
  prefs: []
  type: TYPE_NORMAL
- en: MySQL 8 also provides support API for client plugins to be used for specific
    purposes such as enabling the server connection by client through different authentication
    methods.
  prefs: []
  type: TYPE_NORMAL
- en: MySQL 8 services for components and plugins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The MySQL 8 server plugins can access and initiate server plugin services;
    similarly, the server components can also access and request component services.
    The MySQL 8 plugin Services interface complements the API plugin by exposing server
    functionality, which can be called by plugins. The following are the plugin service
    characteristics:'
  prefs: []
  type: TYPE_NORMAL
- en: The services enable plugins to access the server code using ordinary function
    calls and can also call user-defined functions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The services are portable and can work on multiple platforms
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The services provide versioning support that protects against incompatibilities
    between plugins and services
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The services also provide support for testing plugin services
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'MySQL provides two services types for plugins and components, listed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**The locking service**: The locking service interface is provided at two levels—that
    is, at C level and at SQL level. The interface works on lock namespace, lock name,
    and lock mode attributes.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**The keyring service**: The keyring service provides an interface for securely
    storing sensitive information for internal server components and plugins to retrieve
    later.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Adding new functions to MySQL 8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can add your own functions to MySQL 8, and this can be done with any one
    of the three supported types of function. The new function can be called the same
    way we invoke the built-in functions such as `ABS()`, and that is true irrespective
    of which function type you have newly added. The following list is of the supported
    three types of new function in MySQL 8:'
  prefs: []
  type: TYPE_NORMAL
- en: Adding a function through the **user-defined function** (**UDF**) interface.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Adding a function as native (built-in) MySQL function.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Adding a function by creating a stored function.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Debugging and porting MySQL 8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Porting MySQL 8 to other operating systems is currently supported by many operating
    systems; the list of supported operating systems is provided at [http://www.mysql.com/support/supportedplatforms/database.html](http://www.mysql.com/support/supportedplatforms/database.html).
    In case you have added a new port and are running into problems with the new port,
    you might use debugging of MySQL 8.
  prefs: []
  type: TYPE_NORMAL
- en: There are different possible ways to start debugging based on where you are
    running into the problems—they could be in MySQL server or in MySQL client. Depending
    on the problem's location, you can start debugging in MySQL server or client respectively
    and also get help from the `DBUG` package to trace the program's activities.
  prefs: []
  type: TYPE_NORMAL
- en: Extending plugins and using services to call them
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, you will gain an understanding of how the plugin API, its
    interface, and the MySQL services interact with one another and provide extensions
    in MySQL 8\. The plugins are also considered as components in the MySQL 8 architecture,
    and therefore you can use them to provide pluggable features. The plugin API and
    the plugin services interfaces have the following differences:'
  prefs: []
  type: TYPE_NORMAL
- en: The plugin API enables plugins that will be used by the server. The calling
    and invoking of plugins is initiated by the server, so the plugins can extend
    the server's functionality or can register themselves in order to receive server
    processing notifications.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The plugin services interface allows plugins to call the server code. The calling
    and invoking of service functions is initiated by the plugins so that the same
    server functionality can be leveraged by many plugins without requiring individual
    implementation for the functionality.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing plugins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To create a plugin library, providing the required descriptor information is
    a must, as it specifies which plugins the library file contains. Writing the interface
    function for each of the plugins specified is also necessary.
  prefs: []
  type: TYPE_NORMAL
- en: Every server plugin must have a general descriptor providing information to
    the plugin APIs, and a type specific descriptor providing information about the
    interface for specified plugin types. The structure for specifying a general descriptor
    is the same for all the plugin types, and the type specific descriptor can vary
    based on the requirements of the plugin's behavior or function. The server plugin
    interface allows plugins to expose system variables and status.
  prefs: []
  type: TYPE_NORMAL
- en: Client-side plugins have a slightly different architecture than that of server
    side plugins. For example, each plugin must have descriptor information, but there
    is no separate division between general and type specific descriptors.
  prefs: []
  type: TYPE_NORMAL
- en: Plugins can be written in C or C++ or any other language that can use C calling
    conventions. Plugins are loaded and unloaded dynamically, hence the operating
    system must dynamically support where you have dynamically compiled the calling
    application. Specifically, for server plugins this means that `mysqld` must be
    linked dynamically.
  prefs: []
  type: TYPE_NORMAL
- en: As we cannot be sure of what application will use the plugin, the dependencies
    on the symbols of the calling application should be avoided by the client plugin
    writers.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are the types of supported plugin creations that can implement
    several capabilities:'
  prefs: []
  type: TYPE_NORMAL
- en: Authentication
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Password validation and strength checking
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Protocol tracing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Query rewriting
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Secure keyring storage and retrieval
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Storage engines
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Full-text parsers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Daemons
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`INFORMATION_SCHEMA` tables'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Semisynchronous replication
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Auditing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Component and plugin services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can identify the component services and functions provided by MySQL by looking
    into the `include/mysql/components` and respective `services` directories of the
    MySQL 8 source distribution.
  prefs: []
  type: TYPE_NORMAL
- en: 'Similarly, you can identify the plugin services and functions provided by MySQL
    by looking into the `include/mysql` directory of the MySQL 8 source distribution
    and the relevant files as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The `plugin.h` file includes the `services.h` file, which `services.h` file
    contains all the available service-specific header files within it
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Service-specific header files will have names in the form of `service_xxx.h`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following is a list of available component services in MySQL 8:'
  prefs: []
  type: TYPE_NORMAL
- en: '`component_sys_variable_register`, `component_sys_variable_unregister`: For
    registering and unregistering system variables'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`log_builtins`, `log_builtins_string`: For log components services'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mysql_service_udf_registration`, `mysql_service_udf_registration_aggregate`:
    For enabling registration and unregistration of scalar and aggregate user-defined
    functions in components and plugins'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mysql_string`: For string service APIs'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pfs_plugin_table`: For dynamic Performance Schema table manipulation'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following is list of available plugins services in MySQL 8:'
  prefs: []
  type: TYPE_NORMAL
- en: '`get_sysvar_source`: For retrieving system variable settings'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`locking_service`: For lock implementation with C language and SQL level interfaces,
    having the attributes namespace, name, and mode'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`my_plugin_log_service`: For writing errors messages to logs'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`my_snprintf`: For string formatting to keep the output consistent across platforms'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`status_variable_registration`: For registering the status variable'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`my_thd_scheduler`: For thread scheduler selection'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mysql_keyring`: For keyring storage service'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mysql_password_policy`: For password strength and validation checking'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`plugin_registry_service`: For accessing the component registry and related
    services'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`security_context`: For managing thread security contexts'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`thd_alloc`: For memory allocation'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`thd_wait`: For reporting to sleep or stall'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now, you have a clear understanding of plugin services and component services.
    MySQL 8 provides the following types of services to support plugins and components
    services:'
  prefs: []
  type: TYPE_NORMAL
- en: The locking service
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The keyring service
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The following sections give detailed information on both types of services.
  prefs: []
  type: TYPE_NORMAL
- en: The locking service
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The locking service interface is provided at two levels: C level and at SQL
    level. The interface works on the lock namespace, lock name, and lock mode attributes.
    The C language interface is callable as a plugin service from user-defined functions
    or server plugins, and the SQL level interface is used as set of user-defined
    functions, being mapped to call the service routines.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are the characteristics of the locking interface:'
  prefs: []
  type: TYPE_NORMAL
- en: Lock namespace, lock name, and lock mode are three three attributes of locks.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Locks are identified by forming a lock namespace and lock name combination.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lock mode can be either read or write. Read locks are shared whereas write locks
    are exclusive.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lock names and namespaces can have a maximum of 64 characters and must be non-NULL
    and non-empty strings.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lock names and namespace are treated as binary strings so comparison will be
    case-sensitive.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Functions are provided to acquire and release locks and do not require any special
    privileges to call the functions.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Detects deadlock during lock acquisition calls in different sessions; a caller
    is chosen and terminated for its lock acquisition request and caller sessions
    holding read locks are preferred over the sessions holding write locks.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A typical session can request for multiple locks acquisition with a single lock
    acquisition call. It provides atomic behavior for the request and succeeds if
    all locks are acquired or fails if any of the lock acquisitions fail.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Multiple locks for the same lock identifier can be acquired by the session where
    the lock instances can be write locks, read locks, or a mix of both read and write
    locks.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Acquired locks are released from the session by explicitly calling the release-lock
    function, or implicitly if the session gets terminated.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All locks in the given namespace when released are released together within
    the session.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The keyring service
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The keyring service provides an interface for securely storing sensitive information
    for internal server components and plugins to retrieve later. In the keyring service,
    the record from the keystore itself consists of data—the key and unique identifier
    by which the key can be accessed. The identifier consists of the following two
    parts:'
  prefs: []
  type: TYPE_NORMAL
- en: '`key_id`: The name. `key_id` or key ID values beginning with `mysql_` are reserved
    by the MySQL server.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`user_id`: The `user_id` stands for an effective `user_id` per session. It
    can be `NULL` if there is no user context and the value does not necessarily need
    to be an actual `user` but depends upon the application.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following are the common characteristics of the keyring service functions:'
  prefs: []
  type: TYPE_NORMAL
- en: Each of the functions returns 1 for failure and 0 for success
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A unique combination is formed by the `user_id` and `key_id` arguments, indicating
    which key is to be used in the keyring
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Additional information about the key is provided with the `key_type` argument
    value as its intended use, its encryption method, or other such information
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: User names, key IDs, types, and values are treated as binary strings in keyring
    service functions so the comparisons are case sensitive
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following is the list of keyring service functions that are available:'
  prefs: []
  type: TYPE_NORMAL
- en: '`my_key_generate()`: As the name suggests, it generates a new random key of
    given type and length and is stored in the keyring. The function consists of the
    arguments `key_id`, `user_id`, `key_type`, and `key_len`, as well as the following
    function syntax:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '`my_key_fetch()`: Deobfuscates the argument value and retrieves a key from
    the keyring and its type. The function consists of the arguments `key_id`, `user_id`,
    `key_type`, `key`, and `key_len`, as well as the following function syntax:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '`my_key_remove()`: Removes an associated key from the keyring. The function
    consists of the arguments `key_id` and `user_id`, as well as the following function
    syntax:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '`my_key_store()`: Obfuscates the argument value and stores a key in the keyring.
    The function consists of the arguments `key_id`, `user_id`, `key_type`, `key`,
    and `key_len`, as well as the following function syntax:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Adding new functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: New functions can be added with any of the three supported types in MySQL 8\.
    Each of the types have their own advantages and disadvantages. Where and which
    type of function should be added or implemented depends on the requirements of
    the function.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the list of the supported three types of new function in MySQL
    8, which we will look at in the following section:'
  prefs: []
  type: TYPE_NORMAL
- en: Adding a function through the user-defined function interface.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Adding a function as a native (built-in) MySQL function.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Adding a function by creating a stored function.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Features of a user-defined function interface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A user-defined function interface provides independent capabilities to a user
    purpose function.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following features and capabilities are provided by the MySQL interface
    for user-defined functions:'
  prefs: []
  type: TYPE_NORMAL
- en: Functions can accept arguments of integer, string, or real values and can return
    values for the same types
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Simple functions can be defined to operate on a single row at a time or it can
    be aggregate functions to operate on groups of rows
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Functions are given information to enable them so that they can check the types,
    names, and numbers of arguments passed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Before passing arguments to the given function, you can also ask MySQL to coerce
    arguments
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Indications can be made if the function results in any error or returns `NULL`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a new user-defined function
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The UDF functions must be written in C or C++ and the underlying operating system
    must support dynamic loading behavior. There is a file, `sql/udf_example.cc`,
    that defines five UDF functions and it's included in the MySQL source distributions.
    Analyzing the file will let you know how calling conventions work for UDFs. User-defined
    function related symbols and data structures are defined in the `include/mysql_com.h`
    file and the file is included in the `mysql.h` header file.
  prefs: []
  type: TYPE_NORMAL
- en: Typical code contained in the UDFs gets executed in the running server, so all
    constraints are applicable when writing UDF code—server code. Currently applicable
    constraints may get revised when a server is upgraded, and this can possibly result
    into the need to rewrite UDF code, so it is essential to be careful when writing
    code for the UDF.
  prefs: []
  type: TYPE_NORMAL
- en: In order to use UDF, linking `mysqld` dynamically is a must. For any function
    to be used in SQL statements there must be underlying C or C++ functions. The
    convention for separating SQL and C/C++ code is followed where `xxx()` in uppercase
    indicates an SQL function call whereas `xxx()` with lowercase indicates a C/C++
    function call.
  prefs: []
  type: TYPE_NORMAL
- en: 'Encapsulate your C function as shown in following sentence when you are using
    C++: `extern "C"` `{ ... }` This way it is ensured that your C++ function names
    are readable in the completed user-defined function.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To write and implement the interface function name `XXX()`, the main function
    `xxx()` is a must and additionally requires one or more function to be implemented
    from the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`xxx()`: The main function where the function result is being produced'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`xxx_init()`: The initialization function for the main function `xxx()`, it
    can be used for any of the following purposes:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Checking number of arguments to be passed on to `XXX()`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Verifying argument types with a declaration when calling the main function
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Allocating memory to the main function whenever required
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Result's maximum length verification
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting a decimal number limit for maximum in the result
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Specifying whether the result can be `NULL` or not
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`xxx_deinit()`: Represents deinitialization for the main function and deallocates
    memory if any is allocated by the initialization function for the main function'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Aggregate UDFs are handled as in the following sequence in MySQL 8:'
  prefs: []
  type: TYPE_NORMAL
- en: Call `xxx_init()` so that it allocates the required memory to store result information.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Sort the table/result as specified by the `GROUP BY` function.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Call `xxx_clear()` so that it reset the current aggregate value for the first
    row in each new group.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Call `xxx_add()` that adds the argument to the current aggregate value.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Call `xxx()` to get the result of aggregate data on group by changes or after
    processing the last row.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Repeat steps 3-5 until all specified/resulted rows are processed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Call `xxx_deinit()` to free any allocated memory for the UDF.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: All the functions must be thread-safe, including the main function as well as
    other additional functions as required, along with the initialization and deinitialization
    functions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Similar to the above sequence, the following are important aspects that need
    to be taken care of while adding new user-defined functions:'
  prefs: []
  type: TYPE_NORMAL
- en: UDF argument processing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: UDF return values and error handling
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: UDF compiling and installing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: UDF security precautions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a new native function
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For adding a new native function, source distribution is required in order to
    compile using modified source that consists of the new native function. It is
    also required to repeat this when you migrate to another MySQL version.
  prefs: []
  type: TYPE_NORMAL
- en: In a case where a new native function is to be referred in the statements and
    also replicated to slave servers, ensure that each of the slave servers has the
    new native function available, otherwise replication on the slave server will
    fail when the new native function invocation is attempted.
  prefs: []
  type: TYPE_NORMAL
- en: 'The followings are the steps for adding a new native function in the source
    distribution files of the `sql` directory:'
  prefs: []
  type: TYPE_NORMAL
- en: 'A subclass for the function needs to be added in `item_create.cc`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In case of a fixed number of arguments, the subclass is to be created from `Create_func_arg0`,
    `Create_func_arg1`, `Create_func_arg2`, or `Create_func_arg3` depending upon the
    number of arguments required in your native function. You can refer to the `Create_func_abs`,
    `Create_func_uuid`, and `Create_func_pow` classes.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In case of a variable number of arguments, the subclass is to be created from
    `Create_native_func`. You can refer to the `Creat_func_concat` class.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The function name to be referred to in SQL statements needs to be registered
    in `item_create.cc` by adding the following line to the array: `static Native_func_registry
    func_array[]`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If required, several names can be registered for the same function. You can
    refer to lines for `LOWER` and `LCASE` which are aliases stands for `Create_func_lcase`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Declaring the class inherited from `Item_str_func` or `Item_num_func` is necessary,
    depending upon if your function return type is a string or a number in the `item_func.h` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Adding one of the following declarations is necessary, depending upon if your
    function defines as a string or numeric function in the `item_func.cc` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: If your object is inherited from any of the standard items then you probably
    need to define only one of the preceding functions, as the parent object will
    take care other of the function. You can refer to the `Item_str_func` class that
    has defined the `val()` function that executes the `atof()` function on the returned
    value of the `::str()` function.
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: If the function is nondeterministic—that is, if the returned result varies at
    different invocations for fixed given arguments - then the following statement
    needs to be included in the item constructor, indicating that the function results
    should not be cached: `current_thd->lex->safe_to_cache_query=0;`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You probably also need to define the following object function for your native
    function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`void Item_func_newname::fix_length_and_dec()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The function should at least include the `max_length` calculation on the given
    arguments
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You should also set `maybenull = 0` if your main function cannot return any
    `NULL` values
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can refer to `Item_func_mod::fix_length_and_dec` for the same
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Thread safety is a must for all functions. You should not be using any static
    or global variables in the functions without being protected by mutexes.
  prefs: []
  type: TYPE_NORMAL
- en: Debugging and porting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Porting MySQL 8 to other operating systems is currently supported by many operating
    systems. The list of the latest supported operating systems is provided at [http://www.mysql.com/support/supportedplatforms/database.html](http://www.mysql.com/support/supportedplatforms/database.html).
    If you have added or attempted to add new ports (supported platforms) and are
    running into problems, you might use debugging of MySQL 8 to find and fix the
    problems.
  prefs: []
  type: TYPE_NORMAL
- en: First, you should get the test program `mysys/thr_lock` to work before debugging `mysqld`.
    This makes sure that your thread installation can have a remote chance to work!
  prefs: []
  type: TYPE_NORMAL
- en: There are different possibilities for starting debugging, based on where you
    are running into the problems - it could be in MySQL server or in MySQL client.
    Depending on the problem's location you can start debugging in MySQL server or
    MySQL client respectively, and for tracing the program's activities you will get
    help from the `DEBUG` package.
  prefs: []
  type: TYPE_NORMAL
- en: The MySQL source code includes internal documentation written using `Doxygen`,
    which is very helpful in understanding the developer perspective on how MySQL
    works.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this section, you will see detailed information on the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Debugging MySQL server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Debugging MySQL client
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `DBUG` package
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Debugging MySQL server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you are using some of very new functionality in MySQL and facing some issues—let's
    say the server is crashing—you can try running `mysqld` with the `--skip-new` option.
    This option tells the MySQL server to disable all new and potentially unsafe functionality.
  prefs: []
  type: TYPE_NORMAL
- en: In cases where `mysqld` is not getting started, verify the `my.cnf` files, as
    they can interfere with the setup! You can check the arguments in `my.cnf` with
    the `mysqld --print-defaults` option and then start `mysqld` with the `--no-defaults`
    option to avoid using them.
  prefs: []
  type: TYPE_NORMAL
- en: In cases where `mysqld` starts to eat up memory or CPU or hangs, you can check
    `mysqladmin processlist status` and find out if a query executed by someone is
    taking a long time. In cases where you are facing performance issues or problems
    and new clients are not able to connect, you can use `mysqladmin -i10` process
    list status.
  prefs: []
  type: TYPE_NORMAL
- en: You can also use the debug command `mysqladmin`, which dumps information about
    query usage, memory usage, and locks in use to the MySQL log file and can solve
    some problems for you. This command also works in case you have not compiled MySQL
    for debugging, providing some useful information.
  prefs: []
  type: TYPE_NORMAL
- en: In cases where you are facing any issue with the table getting slower, you should
    try to optimize the table using `myisamchk` or `OPTIMIZE_TABLE`. You should probably
    check the slow queries, if there are any, using `EXPLAIN` to find and fix the
    problem with queries.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are the important areas to consider when debugging in MySQL 8:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Compiling MySQL for debugging**: In case of very specific problems you can
    always try to debug MySQL. To do that you must configure MySQL with the `-DWITH_DEBUG=1`
    option. The debugging configuration automatically enables lots of extra safety
    check functions that monitor the health of `mysqld`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Creating trace files**: You can attempt to find the problem by creating a
    trace file. To do that you must have `mysqld` compiled with debugging support.
    You can then use the `--debug` option, which will add trace logs in `/tmp/mysqld.trace`
    on Unix and `\mysqld.trace` on Windows.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Using WER with PDB to create a Windows crashdump**: Program database files
    are included in the ZIP archive debug binaries and test suite as a separate distribution
    of MySQL. These files provide information on debugging for a MySQL installation
    problem. They can be used with WinDbg or Visual Studio to debug `mysqld`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Debugging mysqld under gdb**: You can use this option when you are facing
    issues with threads or when the `mysqld` server hangs prior to `ready for connections`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Using a stack trace**: You can also use this option when `mysqld` dies unexpectedly
    and find out the problem.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Using server logs to find causes of errors in `mysqld`**: You can use this
    option by enabling the general query log - prior to that, you should check all
    your tables using the `myisamchk` utility and verify if there are any problems
    from the logs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Making a test case if you experience table corruption**: This option is used
    when you are facing an issue with table corruption and is applicable only to `MyISAM`
    tables.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Debugging MySQL client
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In cases where you are facing an issue in MySQL client you can also debug within
    MySQL client as well, but in order to do so you must have the integrated debug
    package. You need to configure MySQL with `-DWITH_DEBUG=1` to enable debugging
    in MySQL client.
  prefs: []
  type: TYPE_NORMAL
- en: 'Prior to running MySQL client, you should set the environment variable `MYSQL_DEBUG` as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: This makes MySQL client generate a trace file in `/tmp/client.trace` for Unix
    or `\client.trace` for Windows.
  prefs: []
  type: TYPE_NORMAL
- en: 'In cases where you have problems with your own client code, you can attempt
    to connect to the server by running your query using the client that is known
    to work. For doing this you should run `mysqld` in debugging mode:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: This trace will provide useful information if you want to mail a bug report
    for the problem.
  prefs: []
  type: TYPE_NORMAL
- en: In cases where your client crashes at some `legal` looking code, you can check
    that your `mysql.h` header file includes file matches with your MySQL library
    file. This is one of the very common mistakes, using an older `mysql.h` file from
    an old MySQL installation with a new MySQL library, resulting in this issue.
  prefs: []
  type: TYPE_NORMAL
- en: The DBUG package
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Fred Fish originally created the `DBUG` package with MySQL server and most of
    the MySQL clients. If MySQL is configured for debugging, this package makes it
    possible to generate a trace file that has information about what the program
    is doing.
  prefs: []
  type: TYPE_NORMAL
- en: There are debug options available to be specified in order to get specific information
    to the trace files using the `DBUG` package. It can be used in program invocation
    with the `-# [debug_options]` option or the `--debug[=debug_options]` option.
  prefs: []
  type: TYPE_NORMAL
- en: 'Most MySQL programs will use a default value if the `--debug` or `-#` option
    is specified without specifying a `debug_options` value. The server default value
    is `d:t:i:O,\mysqld.trace` on Windows and `d:t:i:o,/tmp/mysqld.trace` on Unix.
    The effect of this default is listed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`d`: Enables output for all debug macros'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`t`: Traces function calls and exits'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`i`: Adds `PID` to output lines in trace file'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`o,/tmp/mysqld.trace`,` O,\mysqld.trace`: Sets the debug output file in Unix
    and Windows respectively'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In most of the cases, use the default `debug_options` value of `d:t:o,/tmp/myprogram_name.trace`
    for most of the client programs irrespective of platform works. For Windows, use
    `\myprogram_name.trace`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are some examples of debug control strings to be specified on
    the shell command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned how to extend MySQL 8 through custom functions
    and APIs. You also got to know about writing functions and the associated characteristics
    of the plugin services and APIs. You can now create your own function or plugin,
    cater to specific business requirements, and also debug if a function does not
    work as per expectations, and test whether it does.
  prefs: []
  type: TYPE_NORMAL
- en: In next chapter, you will learn about MySQL 8 best practices and benchmarking
    in MySQL 8\. You will learn about benchmarking and tools used for benchmarking.
    You will also learn best practices for some of very important features of MySQL
    8, such as memcached, replication, data partitioning, and indexing.
  prefs: []
  type: TYPE_NORMAL
