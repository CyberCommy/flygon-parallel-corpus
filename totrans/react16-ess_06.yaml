- en: Chapter 6. Using Your React Components with Another Library
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'React is a great library for building user interfaces. What if we want to integrate
    it with another library that is responsible for receiving data? In the previous
    chapter, we outlined five tasks that our Snapterest web application should be
    able to perform. We decided that four of them were related to the user interface,
    but one of them was all about receiving data: receiving tweets from the Snapkite
    Engine server in real time.'
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you'll learn how to integrate React with the external JavaScript
    library and what React component lifecycle methods are, all while solving the
    important task of receiving data.
  prefs: []
  type: TYPE_NORMAL
- en: Using another library in your React component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we discussed earlier in this book, our Snapterest web application will consume
    a live stream of tweets. In [Chapter 2](ch02.html "Chapter 2. Installing Powerful
    Tools for Your Project"), *Installing Powerful Tools for Your Project*, you installed
    the **Snapkite Engine** library that connects to the Twitter Streaming API, filters
    incoming tweets, and sends them to our client application. In turn, our client
    application needs a way of connecting to that live stream and listening for new
    tweets.
  prefs: []
  type: TYPE_NORMAL
- en: 'Luckily, we don''t need to implement this functionality ourselves because we
    can reuse another Snapkite module called `snapkite-stream-client`. Let''s install
    this module:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Navigate to the `~/snapterest` directory and run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This will install the `snapkite-stream-client` module, and add it to `package.json`
    as a dependency.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now we're ready to reuse the `snapkite-stream-client` module in one of our React
    components.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the previous chapter, we created the `Application` component with two child
    components: `Stream` and `Collection`. In this chapter, we''ll create our `Stream`
    component.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start by creating the `~/snapterest/source/components/Stream.js` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'First, we will import the following modules that our `Stream` component depends
    on:'
  prefs: []
  type: TYPE_NORMAL
- en: '`React` and `ReactDOM`: This is part of the React library'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`StreamTweet` and `Header`: These are React components'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`snapkite-stream-client`: This is a ut ility library'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Then, we will define our React component. Let''s take a look at the methods
    that our `Stream` component implements:'
  prefs: []
  type: TYPE_NORMAL
- en: '`componentDidMount()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`componentWillUnmount()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`handleNewTweet()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`render()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We''re already familiar with the `render()` method. The `render()` method is
    part of React''s API. You already know that any React component must implement
    at least the `render()` method. Let''s take a look at the `render()` method of
    our `Stream` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, we created a new `tweet` constant that references the `tweet`
    property, which is part of a component's state object. We will then check whether
    that variable has a reference to an actual `tweet` object, and if it does, our
    `render()` method returns the `StreamTweet` component, or else, it returns the
    `Header` component.
  prefs: []
  type: TYPE_NORMAL
- en: The `StreamTweet` component renders a header and the latest tweet from a stream,
    whereas the `Header` component renders only a header.
  prefs: []
  type: TYPE_NORMAL
- en: Have you noticed that our `Stream` component doesn't render anything itself,
    but rather returns one of the two other components that do the actual rendering?
    The purpose of a `Stream` component is to encapsulate our application's logic
    and delegate rendering to the other React components. In React, you should have
    at least one component that encapsulates your application's logic, and stores
    and manages your application's state. This is usually a root component or one
    of the high-level components in your component hierarchy. All the other child
    React components should have no state, if possible. If you think of all the React
    components as `Views`, then our `Stream` component is a `ControllerView` component.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our `Stream` component will receive an endless stream of new tweets, and it
    needs to re-render its child components every time a new tweet is received. In
    order to achieve this, we need to store the current tweet in the component''s
    state. Once we update its state, React will call its `render()` method and re-render
    all of its child components. For this purpose, we will implement the `handleNewTweet()`
    method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The `handleNewTweet()` method takes a `tweet` object, and sets it as a new value
    for the component state's `tweet` property.
  prefs: []
  type: TYPE_NORMAL
- en: 'Where does that new tweet come from and when does it come? Let''s take a look
    at our `componentDidMount()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: This method calls the `initializeStream()` property of the `SnapkiteStreamClient`
    object, and passes a `this.handleNewTweet` callback function as its argument.
    `SnapkiteStreamClient` is an external library with an API that we're using to
    initialize a stream of tweets. The `this.handleNewTweet` method will be called
    for every new tweet that `SnapkiteStreamClient` receives.
  prefs: []
  type: TYPE_NORMAL
- en: Why did we name this method `componentDidMount()`? We didn't. React did. In
    fact, the `componentDidMount()` method is part of React's API. It's one of the
    React component's lifecycle methods. It's called only once, immediately after
    React has finished the initial rendering of our component. At this point, React
    has created a DOM tree, which is represented by our component, and now we can
    access that DOM with another JavaScript library.
  prefs: []
  type: TYPE_NORMAL
- en: The `componentDidMount()` library is a perfect place for integrating React with
    another JavaScript library. This is where we connect to a stream of tweets using
    the external `SnapkiteStreamClient` library.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we know when to initialize the external JavaScript libraries in our React
    components, but what about the reverse process—when should we uninitialize and
    clean up everything that we''ve done in the `componentDidMount()` method? It''s
    a good idea to clean up everything before we unmount our components. For this
    purpose, React API offers us another component lifecycle method—`componentWillUnmount()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The `componentWillUnmount()` method is called by React just before React unmounts
    the component. As you can see in the `componentWillUnmount()` method, you're calling
    the `destroyStream()` property of the `SnapkiteStreamClient` object. The `destroyStream()`
    property cleans up our connection to `SnapkiteStreamClient`, and we can safely
    unmount our `Stream` component.
  prefs: []
  type: TYPE_NORMAL
- en: You might be wondering what the component lifecycle methods are, and why we
    need them.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding React component's lifecycle methods
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Think about what a React component does? It describes what to render. We know
    that it uses the `render()` method for this. However, sometimes, having only the
    `render()` method is not enough because what if we want to do something before
    or after the component has rendered? What if we want to be able to decide whether
    a component's `render()` method should be called at all?
  prefs: []
  type: TYPE_NORMAL
- en: Looks like what we're describing is a process during which the React component
    is rendered. This process has various stages, for example, before render, render,
    and after render. In React, this process is called the **component's lifecycle**.
    Each React component goes through this process. What we want is a way to hook
    into that process, and call our own functions at different stages of that process
    in order to have a greater control over it. For this purpose, React provides a
    number of methods that we can use to get notified when a certain stage in a component's
    lifecycle process occurs. These methods are called the **component's lifecycle
    methods**. They are called in a predictable order.
  prefs: []
  type: TYPE_NORMAL
- en: 'All the React component''s lifecycle methods can be grouped into three phases:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Mounting**: This phase occurs when a component is being inserted into the
    DOM'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Updating**: This phase occurs when a component is being re-rendered into
    a virtual DOM to figure out if the actual DOM needs to be updated'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Unmounting**: This phase occurs when a component is being removed from the
    DOM:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Understanding React component''s lifecycle methods](graphics/B05915_06_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In React's terminology, inserting a component into the DOM is called "mounting,"
    whereas removing a component from the DOM is called "unmounting."
  prefs: []
  type: TYPE_NORMAL
- en: The best way to learn about the React component's lifecycle methods is to see
    them in action. Let's create our `StreamTweet` component that we discussed earlier
    in this chapter. This component will implement most of React's lifecycle methods.
  prefs: []
  type: TYPE_NORMAL
- en: 'Navigate to `~/snapterest/source/components/` and create the `StreamTweet.js`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, the `StreamTweet` component has no lifecycle methods yet, other
    than `render()`. We'll create and discuss them one by one as we move ahead.
  prefs: []
  type: TYPE_NORMAL
- en: 'The four methods are called during a component''s *mounting* phase, as shown
    in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Understanding React component''s lifecycle methods](graphics/B05915_06_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'As you can see from the preceding figure, the methods called are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`constructor()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`componentWillMount()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`render()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`componentDidMount()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this chapter, we'll discuss two of these four methods (except `render()`).
    They are called only once when the component is inserted into the DOM. Let's take
    a closer look at each of them.
  prefs: []
  type: TYPE_NORMAL
- en: Mounting methods
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now let's look at some of the useful mounting methods.
  prefs: []
  type: TYPE_NORMAL
- en: The componentWillMount method
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `componentWillMount()` method is invoked second. It is invoked *immediately
    before* React inserts a component into the DOM. Add this code right after the
    `constructor()` method in your `StreamTweet` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: We do a number of things in this method. First, we log the fact that this method
    is being invoked. In fact, for the purpose of demonstration, we'll log every component
    lifecycle method of this component. When you run this code in a web browser, you
    should be able to open the JavaScript console, and see these log messages printed
    in the expected ascending order.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we update the component''s state using the `this.setState()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: Set the `numberOfCharactersIsIncreasing` property to `true`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Set the `headerText` property to `'Latest public photo from Twitter'`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Because this is the very first tweet that this component will render, we know
    that the number of characters is definitely increasing from nothing to the number
    of characters in that first tweet. Hence, we set it to `true`. We also assign
    the default text to our header, `'Latest public photo from Twitter'`.
  prefs: []
  type: TYPE_NORMAL
- en: As you know, calling the `this.setState()` method should trigger the component's
    `render()` method, so it seems like `render()` will be called twice during the
    component's mounting phase. However, in this case, React knows that nothing has
    been rendered yet, so it will call the `render()` method only once.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, in this method, we define a `snapterest` global object with the following
    two properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '`numberOfReceivedTweets`: This property counts the number of all the received
    tweets'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`numberOfDisplayedTweets`: This property counts the number of only the displayed
    tweets'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We set `numberOfReceivedTweets` to `1` because we know that the `componentWillMount()`
    method is called only once when the very first tweet is received. We also know
    that our `render()` method will be called for this very first tweet, so we set
    `numberOfDisplayedTweets` to `1` as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: This global object is not part of React or our web application's logic; we can
    remove it and everything will still work as expected. In the preceding code, `window.snapterest`
    is a convenience tool used to keep track of how many tweets we've processed at
    any point in time. We use the global `window.snapterest` object for demonstration
    purposes only. I would strongly advise you against adding your own properties
    to a global object in real-life projects because you might overwrite the existing
    properties, and/or your properties might be overwritten later by some other JavaScript
    code that you don't own. Later on, if you decide to deploy Snapterest in production,
    then make sure to remove the global `window.snapterest` object and the related
    code from the `StreamTweet` component.
  prefs: []
  type: TYPE_NORMAL
- en: After viewing Snapterest in a web browser for a few minutes, you can open the
    JavaScript console and type the `snapterest.numberOfReceivedTweets` and `snapterest.numberOfDisplayedTweets`
    commands. These commands will output the numbers that will help you get a better
    understanding of how fast the new tweets are coming, and how many of them are
    not being displayed. In our next component lifecycle method, we'll add more properties
    to our `window.snapterest` object.
  prefs: []
  type: TYPE_NORMAL
- en: The componentDidMount method
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `componentDidMount()` method is invoked *immediately after* React inserts
    a component into the DOM. The updated DOM is now available for access, which means
    that this method is the best place for initializing other JavaScript libraries
    that need access to that DOM.
  prefs: []
  type: TYPE_NORMAL
- en: Earlier in this chapter, we created our `Stream` component with the `componentDidMount()`
    method that initializes the external `snapkite-stream-client` JavaScript library.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at this component''s `componentDidMount()` method. Add the
    following code to your `StreamTweet` component after the `componentWillMount()`
    method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we''re referencing the DOM that represents our `StreamTweet` component
    using the `ReactDOM.findDOMNode()` method. We pass `this` parameter that references
    the current component (in this case, `StreamTweet`). The `componentDOMRepresentation`
    constant references the DOM tree that we can traverse and, thereby, access its
    various properties. To get a good understanding of what this DOM tree looks like,
    let''s take a closer look at the `render()` method of our `StreamTweet` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'One of the greatest benefits of using JSX is that we can easily identify how
    many child elements our component will have just by looking at the component''s
    `render()` method. Here, we can see that a parent `<section>` element has two
    child components: `<Header/>` and `<Tweet/>`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'So when we traverse the resulting DOM tree using the DOM API `children` property,
    we can be sure that it will have two child elements as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '`componentDOMRepresentation.children[0]`: This is our `<Header />` component''s
    DOM representation'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`componentDOMRepresentation.children[1]`: This is our `<Tweet />` component''s
    DOM representation'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `outerHTML` attribute of each element gets the HTML string that represents
    the DOM tree of each element. We assign this HTML string to our global `window.snapterest`
    object for convenience, as we discussed earlier in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: If you are using another JavaScript library, such as **jQuery**, along with
    React, then use the `componentDidMount()` method as an opportunity to integrate
    the two. If you want to send an AJAX request, or set timers using the `setTimeout()`
    or `setInterval()` functions, then you can do that in this method as well. In
    general, `componentDidMount()` should be your preferred component lifecycle method
    for integrating the React library with nonReact libraries and APIs.
  prefs: []
  type: TYPE_NORMAL
- en: 'So far, in this chapter, you''ve learned the fundamental mounting methods that
    the React component provides us with. We used all three of them in our `StreamTweet`
    component. We also discussed the `StreamTweet` component''s `render()` method.
    This is all that we need to know to understand how React will render the `StreamTweet`
    component initially. On its very first render, React will execute the following
    sequence of methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '`componentWillMount()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`render()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`componentDidMount()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This is called the React component's **mounting phase**. It's executed only
    once, unless we unmount a component and mount it again.
  prefs: []
  type: TYPE_NORMAL
- en: Next, let's discuss the React component's **unmounting phase**.
  prefs: []
  type: TYPE_NORMAL
- en: Unmounting methods
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's now take a look at one of the popular unmounting methods.
  prefs: []
  type: TYPE_NORMAL
- en: The componentWillUnmount method
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'React offers only one method for this phase, that is, `componentWillUnmount()`.
    It is invoked *immediately before* React removes a component from the DOM and
    destroys it. This method is useful for cleaning up any data that is created during
    the component''s mounting or updating phases. This is exactly what we do in our
    `StreamTweet` component. Add this code to your `StreamTweet` component after the
    `componentDidMount()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `componentWillUnmount()` method, we delete our global `window.snapterest`
    object using the `delete` operator:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Removing `window.snapterest` will keep our global object clean. If you''ve
    created any additional DOM elements in the `componentDidMount()` method, then
    the `componentWillUnmount()` method is a good place to remove them. You can think
    of the `componentDidMount()` and `componentWillUnmount()` methods as a two-step
    mechanism for integrating the React component with another JavaScript API:'
  prefs: []
  type: TYPE_NORMAL
- en: Initialize it in the `componentDidMount()` method.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Terminate it in the `componentWillUnmount()` method.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In this way, your external JavaScript libraries that need to work with the DOM
    will stay in sync with the DOM rendered by React.
  prefs: []
  type: TYPE_NORMAL
- en: That's all we need to know to efficiently unmount React components.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we created our `Stream` component and learned how to integrate
    a React component with the external JavaScript library. You also learned about
    the React component's lifecycle methods. We also focused on and discussed the
    mounting and unmounting methods in detail and started implementing the `StreamTweet`
    component.
  prefs: []
  type: TYPE_NORMAL
- en: In our next chapter, we'll take a look at the component lifecycle's updating
    methods. We'll also implement our `Header` and `Tweet` components, and learn how
    to set the component's default properties.
  prefs: []
  type: TYPE_NORMAL
