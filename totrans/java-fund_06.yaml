- en: '*Chapter 6*'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Data Structures, Arrays, and Strings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Learning Objectives
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'By the end of this lesson, you will be able to:'
  prefs: []
  type: TYPE_NORMAL
- en: Create and manipulate various data structures such as arrays
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Describe the fundamentals behind algorithms for programming
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Write simple sorting programs for arrays
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Input and perform operations on strings
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is the last topic in our discussion on OOP. So far, we have already looked
    at classes and objects and how we can use classes as blueprints to create multiple
    objects. We saw how we can use methods to hold the logic of our classes and fields
    to hold the state. We've discussed how classes can inherit some properties from
    other classes to allow easy reusability of code.
  prefs: []
  type: TYPE_NORMAL
- en: We've also looked at polymorphism, or how a class can redefine the implementation
    of a method inherited from the superclass; and overloading, or how we can have
    more than one method using the same name, as long as they have different signatures.
    We've also discussed functions or methods.
  prefs: []
  type: TYPE_NORMAL
- en: We've looked at typecasting and interfaces in our previous lesson and how typecasting
    is a way for us to change an object from one type to another, as long as they
    are on the same hierarchy tree. We talked about upcasting and downcasting. Interfaces,
    on the other hand, are a way for us to define generic behaviors that our classes
    can provide specific implementations of their own.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will look at a few common classes that come with Java. These
    are classes that you will find yourself using on a daily basis, and therefore
    it's important that you understand them. We will also talk about data structures
    and discuss common data structures that come with Java. Remember that Java is
    a wide language and that this list will not be exhaustive. Do find time to look
    at the official Java specification to learn more about the other classes you have
    at your disposal. Throughout this lesson, we will be introducing a topic, giving
    sample programs to illustrate the concepts, and then we'll finish with an exercise.
  prefs: []
  type: TYPE_NORMAL
- en: Data Structures and Algorithms
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: An algorithm is a set of instructions that should be followed to achieve an
    end goal. They are specific to computing, but we often talk about algorithms to
    accomplish a certain task in a computer program. When we write computer programs,
    we generally implement algorithms. For example, when we wish to sort an array
    or list of numbers, we usually come up with an algorithm to do so. It is a core
    concept in computer science and important for any good programmer to understand.
    We have algorithms for sorting, searching, graph problems, string processing,
    and many more. Java comes with a number of algorithms already implemented for
    you. However, we still have the scope to define our own.
  prefs: []
  type: TYPE_NORMAL
- en: A data structure is a way to store and organize data in order to facilitate
    access and modifications. An example of a data structure is an array used to hold
    several items of the same type or a map used to hold key-value pairs. No single
    data structure works well for all purposes, and so it is important to know their
    strengths and limitations. Java has a number of predefined data structures for
    storing and modifying different kinds of data types. We will also cover some of
    them in the coming sections.
  prefs: []
  type: TYPE_NORMAL
- en: Sorting different types of data is a common task in a computer program.
  prefs: []
  type: TYPE_NORMAL
- en: Arrays
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We touched upon arrays in *Lesson 3*, *Control* *Flow*, when we were looking
    at looping, but it''s worth taking an even closer look because they are powerful
    tools. An array is a collection of ordered items. It is used to hold several items
    of the same type. An example of an array in Java could be `{1, 2, 3, 4, 5, 6,
    7}`, which is holding the integers 1 through 7\. The number of items in this array
    is 7\. An array can also hold strings or other objects as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: We can access an item from an array by using its index. An index is the location
    of the item in the array. Elements in an array are indexed from `0`. That is,
    the first number is at index `0`, the second number is at index `1`, the third
    number is at index `2`, and so on. In our first example array, the last number
    is at index `6`.
  prefs: []
  type: TYPE_NORMAL
- en: For us to be able to access an element from the array, we use `myArray[0]` to
    access the first item in `myArray`, `myArray[1]` to access the second item, and
    so on to `myArray[6]` to access the seventh item.
  prefs: []
  type: TYPE_NORMAL
- en: Java allows us to define arrays of primitive types and objects such as reference
    types.
  prefs: []
  type: TYPE_NORMAL
- en: Arrays also have a size, which is the number of items in that array. In Java,
    when we create an array, we must specify its size. This size cannot be changed
    once the array has been created.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.1: An empty array](img/C09581_Figure_06_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.1: An empty array'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Creating and Initializing an Array
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To create an array, you need to declare the name of the array, the type of
    elements it will contain, and its size as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: We use the square brackets `[ ]` to indicate an array. In this example, we are
    creating an array of integers that holds 10 items, indexed from 0 to 9\. We specify
    the number of items so that Java can reserve enough memory for the elements. We
    also use the `new` keyword to indicate a new array.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, to declare array of 10 doubles, use this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'To declare array of 10 Boolean values, use this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'To declare array of 10 `Person` objects, use this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also create an array and at the same time declare the items in the
    array (initialization):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Accessing Elements
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To access array elements, we use the index enclosed in square brackets. For
    example, to access the fourth element, we use `myArray[3]`, to access the tenth
    element, we use `myArray[9]`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'To get the length of the array, we use the `length` property. It returns an
    integer that is the number of items in the array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: If the array has no items, `length` will be 0\. We can use the `length` and
    a loop to insert items into the array.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 14: Creating an Array Using a Loop'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It can be useful to use control flow commands to create long arrays. Here we
    will use a `for` loop to create an array of numbers from 0-9.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new class with `DataStr` as the class name and set up the `main` method
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Create an array of integers of length 10 as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Initialize a `for` loop with a variable starting at zero, with loop incrementing
    one with each iteration and the condition being less than the array length:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Insert item `i` into the array:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Use a similar loop construct to print out the loop:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The full code should look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Your output should be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.2: Output of the DataStr class](img/C09581_Figure_06_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.2: Output of the DataStr class'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: In this exercise, we used the first `for` loop to insert items into `myArray`
    and the second to print out the items.
  prefs: []
  type: TYPE_NORMAL
- en: 'As we discussed previously, we can replace the second `for` loop with a `for-each`
    loop, which is much shorter and makes the code easier to read:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Java does automatic bound checking for us - if you have created an array of
    size N and use an index whose value is less than 0 or greater than N-1, your program
    will terminate with an `ArrayOutOfBoundsException` exception.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 15: Searching for a Number in an Array'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In this exercise, you will check whether the number entered by the user is
    present in the array or not. To do this, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Define a new class called `NumberSearch` and include the `main` method in it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Ensure that you import this package at the top, which is for reading values
    from the input devices:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Declare an array sample that store the integers 2, 4, 7, 98, 32, 77, 81, 62,
    45, 71:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Read a number from the user:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Check whether the `ele` variable matches any of the items in the array sample.
    To do this we iterate through the loop and check whether each element of the array
    matches the element entered by the user:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Your output should be similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.3: Output of the NumberSearch class](img/C09581_Figure_06_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.3: Output of the NumberSearch class'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Activity 21: Finding the Smallest Number in an Array'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this activity, we will take an array of 20 unsorted numbers and loop through
    the array to find the smallest number.
  prefs: []
  type: TYPE_NORMAL
- en: 'The steps are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a class called `ExampleArray` and create the `main` method.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create an array made up of 20 floating points as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Create a `for-each` loop through the array and find the minimum element in the
    array.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Print out the minimum float.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The solution for this activity can be found on page 335.
  prefs: []
  type: TYPE_NORMAL
- en: 'Activity 22: Calculator with Array of Operators'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this activity you'll change your calculator to be more dynamic and make it
    easier to add new operators. For that, instead of making all possible operators
    a different field, you'll add them into an array and use a for-loop to determine
    what operator to use.
  prefs: []
  type: TYPE_NORMAL
- en: 'To complete this activity you''ll need to:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a class `Operators` that will contain the logic of determining what operator
    to use based out of a String. In this class create a public constant field `default_operator`
    that is going to be an instance of the `Operators` class. Then create another
    constant field called `operators` of type array of `Operators` and initialize
    it with an instance of each of the operators you have.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the `Operators` class, add a public static method called `findOperator` that
    receives the operator as a String and return an instance of `Operators`. Inside
    it iterate over the possible operators array and, using the matches method for
    each operator, return the selected operator, or the default one if it didn't match
    any of them.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new `CalculatorWithDynamicOperator` class with three fields: `operand1`
    and `operator2` as double and `operator` of type `Operators`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add a constructor that receives three parameters: operand1 and operand2 of
    type double and operator as a String. In the constructor, instead of having an
    if-else to select the operator, use the `Operators.findOperator` method to set
    the operator field.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a `main` method where you call the `Calculator` class multiple times and
    print the results.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The solution for this activity can be found on page 336.
  prefs: []
  type: TYPE_NORMAL
- en: Two-Dimensional Arrays
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The arrays we have looked so far are referred to as one-dimensional because
    all the elements can be considered to be on one row. We can also declare arrays
    that have both columns and rows, just like a matrix or grid. Multidimensional
    arrays are arrays of one-dimensional arrays we saw earlier. That is, you can consider
    one of the rows as a one-dimensional array and then the columns are multiple one-dimensional
    arrays.
  prefs: []
  type: TYPE_NORMAL
- en: 'When describing a multidimensional array, we say the array is a M-by-N multidimensional
    array to denote that the array has M rows each of N length, for example, an array
    of 6 by 7:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.4: Graphical representation of a multi-dimensional array](img/C09581_Figure_06_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.4: Graphical representation of a multi-dimensional array'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: In java, to create a two-dimensional array, we use the double square brackets,
    `[M][N ]`. This notation creates a M-by-N array. We can then refer to an individual
    item in the array by using the notation `[ i ] [ j ]` to access the element in
    the *i**th* row and *j**th* column.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create an 8-by-10 multidimensional array of doubles we do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Java initializes all the numeric types to zeros and the Booleans to false.
    We could also loop through the array and initialize each item manually to a value
    of our choice:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Exercise 16: Printing a Simple Two-Dimensional Array'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To print a simple two-dimensional array, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Set up the `main` method in a new class file known as `Twoarray`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Define the `arr` array by adding elements to the array:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a nested `for` loop. The outer `for` loop is to print the elements row-wise,
    and the inner `for` loop is to print the elements column-wise:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the program. Your output should be similar to this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.5: Output of the Twoarray class](img/C09581_Figure_06_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.5: Output of the Twoarray class'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Most of the rest of the operations with arrays remain pretty much the same as
    with one-dimensional arrays. One important detail to remember is that in a multidimensional
    array, using `a[i]` returns a row that is a one-dimensional array. You have to
    use a second index to access the exact location you wish, `a[i][j]`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Java also allows you to create higher-order dimensional arrays, but dealing
    with them becomes complex. This is because our human brain can easily comprehend
    three-dimensional arrays but higher-order ones become hard to visualize.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 17: Creating a Three-Dimensional Array'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Here we will create a three-dimensional `(x,y,z)` array of integers and initialize
    each element to the product of its row, column, and depth (x * y * z) indices.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new class called `Threearray` and set up the `main` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Declare an `arr` array of dimension `[2][2][2]`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Declare the variables for iteration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Create three `for` loops nested within each other, in order to write values
    into the three-dimensional array:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Print the elements out of the array using the three `for` loops that are nested
    within each other:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'The full code should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.6: Output of the Threearray class](img/C09581_Figure_06_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.6: Output of the Threearray class'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: The Arrays Class in Java
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Java provides the `Arrays` class, which provides static methods we can use
    with our arrays. It is often easier to use this class because we have access to
    methods to sort, search, and much more. This class is available in the `java.util.Arrays`
    package, so before we work with it, place this line at the top of any file you
    want to use it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'In the following code, we can see how to use the `Arrays` class and a few methods
    that we have at our disposal. All the methods are explained after the snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'This is the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.7: Output of the ArraysExample class](img/C09581_Figure_06_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.7: Output of the ArraysExample class'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: In this program, we have three example uses of the `Arrays` class. In the first
    example, we see how we can use `Arrays.toString()` to easily print out the elements
    of an array without the need of the `for` loop we were using earlier. In the second
    example, we saw how we can use `Arrays.sort()` to quickly sort an array. If we
    were to implement such a method on our own, we would use many more lines and be
    prone to making a lot of errors in the process.
  prefs: []
  type: TYPE_NORMAL
- en: In the last example, we sort the arrays and then search for 7.0 by using `Arrays.binarySearch()`,
    which uses a searching algorithm called **binary search**.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`Arrays.sort()` uses an algorithm called double-pivot quicksort to sort large
    arrays. For smaller arrays, it uses a combination of Insertion sort and Merge
    sort. It is better to trust that `Arrays.sort()` is optimized to each use case
    instead of implementing your own sorting algorithm. `Arrays.binarySearch()` uses
    an algorithm called binary search to look for an item in the array. It first requires
    that the array be sorted, and that is why we called `Arrays.sort()` first. Binary
    search splits the sorted array into two equal halves recursively until it can
    no longer divide the array, at which point that value is the answer.'
  prefs: []
  type: TYPE_NORMAL
- en: Insertion sort
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Sorting is one of the fundamental applications of algorithms in computer science.
    Insertion sort is a classic example of a sorting algorithm, and although it is
    inefficient it is a good starting point when looking at arrays and the sorting
    problem. The steps in the algorithm are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Take the first element in the array and assume it is already sorted since it
    is only one.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Pick the second element in the array. Compare it with the first element. If
    it is greater that the first element, then the two items are already sorted. If
    it is smaller than the first element, swap the two elements so that they are sorted.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Take the third element. Compare it with the second element in the already sorted
    subarray. If smaller then swap the two. The compare it again with the first element.
    If it is smaller, then swap the two again so that it is the first. The three elements
    will now be sorted.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Take the fourth element and repeat this process, swapping if it smaller than
    its left neighbor, otherwise leaving it where it is.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Repeat this process for the rest of the items in the array.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The resultant array will be sorted.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Example
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Take the array `[3, 5, 8, 1, 9]`:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take the first element and assume it is sorted: `[3]`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Take the second element, 5\. Since it is greater than 3, we leave the array
    as it is: `[3, 5]`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Take the third element, 8\. It is greater than 5, so there''s no swapping here
    either: `[3, 5, 8]`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Take the fourth element, 1\. Since it is smaller than 8, we swap 8 and 1 to
    have: `[3, 5, 1, 8]`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Since 1 is still smaller than 5, we swap the two again: `[3, 1, 5, 8]`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '1 is still smaller than 3\. We swap again: `[1, 3, 5, 8]`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It is now the smallest.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Take the last element, 9\. It is greater than 8, so there's no swapping.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The whole array is now sorted : `[1, 3, 5, 8, 9]`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Exercise 18: Implementing Insertion Sort'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this exercise, we will implement the insertion sort.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new class called `InsertionSort`, and inside this class, create the
    `main` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside our `main` method, create a sample array of random integers and pass
    it to our `sort` method. Use the following array, [1, 3, 354, 64, 364, 64, 3,
    4, 74, 2, 46]:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'After calling `sort()` with our array, use a `foreach` loop to print each of
    the items in the sorted array with a space in a single line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a public static method called `sort()` that takes an array of integers
    and returns `void`. This is the method that will have our sorting algorithm:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Inside the `sort` method, implement the algorithm illustrated earlier.
  prefs: []
  type: TYPE_NORMAL
- en: 'Define the integer `num` as the length of the array in the `sort()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a `for` loop that executes until `i` has reached the length of the array.
    Inside the loop, create the algorithm that compares the numbers: `k` will be an
    integer defined by the index `i`, and `j` will be index `i-1`. Add a `while` loop
    inside the `for` loop that switches the integers at `i` and `i-1` with the following
    conditions: `j` is greater or equal to `0` and the integer at index `j` is greater
    than `k`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'The completed code looks as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.8: Output of the InsertionSort class](img/C09581_Figure_06_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.8: Output of the InsertionSort class'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Java makes it easy for us to deal with commonly used data structures such as
    lists, stacks, queues, and maps. It comes with the Java collections framework
    that provides easy-to-use APIs when dealing with such data structures. A good
    example is when we want to sort the elements in an array or want to search for
    a particular element in the array. Instead of rewriting such methods from scratch
    on our own, Java comes with methods that we can apply to our collections, as long
    as they conform to the requirements of the collections framework. The classes
    of the collections framework can hold objects of any type.
  prefs: []
  type: TYPE_NORMAL
- en: We will now look at a common class in the collections framework called `ArrayList`.
    Sometimes we wish to store elements but are not sure of the number of items we
    are expecting. We need a data structure to which we can add as many items as we
    wish and remove some when we need to. The arrays we have seen so far require us
    to specify the number of items when creating it. After that, we cannot change
    the size of that array unless we create a whole new array. An ArrayList is a dynamic
    list that can grow and shrink as needed; they are created with an initial size
    and when we add or remove an item, the size is automatically enlarged or shrank
    as needed.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an ArrayList and Adding Elements
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When creating an `ArrayList`, you need to specify the type of objects to be
    stored. Array lists only support storage of reference types (that is, objects)
    and don''t support primitive types. However, since Java provides `add()` method
    with the object to be added as a parameter. ArrayList also has a method to get
    the number of items in the list called `size()`. The method returns an integer,
    which is the number of items in the list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.9: Output of the Person class](img/C09581_Figure_06_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.9: Output of the Person class'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'In the first example, we create an `ArrayList` of size 0 called `myArrayList`
    holding `Integer` types. In the second example, we create an `ArrayList` of size
    5 of `Integer` types. Although the initial size is 5, when we add more items,
    the list will increase in size automatically. In the last example, we create an
    `ArrayList` of `Person` objects. From these three examples, the following should
    be adhered to when creating an array list:'
  prefs: []
  type: TYPE_NORMAL
- en: Import the `ArrayList` class from the `java.util` package.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Specify the data type of the objects between `<>`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Specify the name of the list.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the `new` keyword to create a new instance of `ArrayList`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Following are some ways to add elements to the ArrayList:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'In the first example, we create a new `Integer` object and add it to the list.
    The new object will be appended to the end of the list. In the second line, we
    inserted 1 but because `ArrayList` accepts only objects, the JVM will `Person`
    class and appended it to the list. We might also wish to insert the element at
    a specific index instead of appending at the end of the list in the same class.
    Here we specify the index to insert the object and the object to be inserted:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.10: Output after adding an element to the list](img/C09581_Figure_06_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.10: Output after adding an element to the list'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Inserting an object at an index less that 0 or greater than the size of the
    array list will result in an `IndexOutOfBoundsException` and your program will
    crash. Always check the size of the list before specifying the index to insert.
  prefs: []
  type: TYPE_NORMAL
- en: Replacing and Removing Elements
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`ArrayList` also allows us to replace an element at a specified location with
    a new element. Append the following in the previous code and observe the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.11: List after replacing the element](img/C09581_Figure_06_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.11: List after replacing the element'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Here we are replacing the element at index 2 with a new `Integer` object with
    a value of 3\. This method also throws `IndexOutOfBoundsException`if we try to
    replace the element at an index greater than the size of the list or an index
    below zero.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you also wish to remove a single element or all of the elements, ArrayList
    supports that too:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.12: List after clearing all elements](img/C09581_Figure_06_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.12: List after clearing all elements'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'To get an element at a specific index, use the `get()` method, passing in the
    index. The method returns an object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.13: Output of the element at given index](img/C09581_Figure_06_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.13: Output of the element at the given index'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'This method will also throw `IndexOutOfBoundsException` if the index passed
    is invalid. To avoid the exception, always check the size of the list first. Consider
    the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: '![Figure 6.14: IndexOutOfBounds exception message ](img/C09581_Figure_06_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.14: IndexOutOfBounds exception message'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Exercise 19: Adding, Removing, and Replacing Elements in an Array'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Arrays are basic, but useful ways of storing information. In this exercise
    we will look at how to add and subtract elements in a list of students:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Import the `ArrayList` and `List` class for `java.util`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a `public` class and the `main` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'Define the students `List` as new ArrayList that contains strings:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the names of four students:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'Print out the array and remove the last student:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'Print out the array:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'Replace the first student (at index 0):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'Print out the array:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.15: Output of the StudentList class](img/C09581_Figure_06_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.15: Output of the StudentList class'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Iterators
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The collections framework also provides iterators that we can use to loop through
    the elements of an `ArrayList`. Iterators are like pointers to the items in the
    list. We can use iterators to see if there is a next element in the list and then
    retrieve it. Consider iterators as loops for the collections framework. We can
    use the `array.iterator()` object with `hasNext()` to loop through an array.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 20: Iterating through an ArrayList'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In this exercise, we will create an `ArrayList` of the cities in the world
    and use an iterator to print out the cities in the whole `ArrayList` one at a
    time:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Import the ArrayList and the `Iterator` packages:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a `public` class and the `main` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new array and add the city names:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'Define an iterator containing strings:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'Loop through the iterator with `hasNext()`, printing out each city with `next()`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.16: Output of the Cities class](img/C09581_Figure_06_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.16: Output of the Cities class'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'In this class, we created a new ArrayList holding strings. We then inserted
    a few names and created an iterator called `citiesIterator`. Classes in the collections
    framework support the `iterator()` method, which returns an iterator to use with
    the collection. The iterator has the `hasNext()` method, which returns true if
    there is another element in the list after where we currently are, and a `next()`
    method that returns that next object. `next()` returns an object instance and
    then implicitly downcasts it to a string because our `citiesIterator` was declared
    to hold string types: `Iterator<String> citiesIterator`.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.17: Working of next()  and hasNext()](img/C09581_Figure_06_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.17: Working of next() and hasNext()'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Instead of using iterators for looping, we can also use a normal `for` loop
    to achieve the same goal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.18: Output of the Cities class using for loop](img/C09581_Figure_06_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.18: Output of the Cities class using a for loop'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Here, we are using the `size()` method to check the size of the list and `get()`
    to retrieve an element at a given index. There is no need to cast the object to
    string as Java already knows we are dealing with a list of strings.
  prefs: []
  type: TYPE_NORMAL
- en: 'Similarly, we can use a `for-each` loop, which is more concise but achieves
    the same goal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.19: Output of the Cities class using for-each loop](img/C09581_Figure_06_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.19: Output of the Cities class using a for-each loop'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Activity 23: Working with ArrayList'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We have several students we wish to keep track in our program. However, we
    are not sure of the exact number currently but expect the number to change as
    more and more students use our program. We also wish to also be able to loop over
    our students and print their names. We will create an ArrayList of objects and
    use an iterator to loop over the ArrayList:'
  prefs: []
  type: TYPE_NORMAL
- en: 'These steps will help you complete the activity:'
  prefs: []
  type: TYPE_NORMAL
- en: Import `ArrayList` and `Iterator` from `java.util`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new class called `StudentsArray`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the `main` method, define an `ArrayList` of `Student` objects. Insert four
    student instances, instantiated with the different kinds of constructors we created
    earlier.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create an iterator for your list and print the name of each student.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, clear all the objects from the `ArrayList`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The output will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.20: Output of the StudentsArray class'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/C09581_Figure_06_20.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 6.20: Output of the StudentsArray class'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: ArrayList is an important class to know, as you will find yourself using it
    in your day-to-day life. The class has more capabilities not covered here, such
    as swapping two elements, sorting the items, and much more.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The solution for this activity can be found on page 338.
  prefs: []
  type: TYPE_NORMAL
- en: Strings
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Java has the string data type, which is used to represent a sequence of characters.
    String is one of the fundamental data types in Java and you will encounter it
    in almost all programs.
  prefs: []
  type: TYPE_NORMAL
- en: A string is simply a sequence of characters. "Hello World", "London", and "Toyota"
    are all examples of strings in Java. Strings are objects in Java and not primitive
    types. They are immutable, that is, once they are created, they cannot be modified.
    Therefore, the methods we will consider in the following sections only create
    new string objects that contain the result of the operation but don't modify the
    original string object.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a String
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We use double quotes to denote a string, compared to single quotes for a char:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.21: Output of the StringsDemo class'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/C09581_Figure_06_21.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 6.21: Output of the StringsDemo class'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'The `hello` object is now a string and is immutable. We can use delimiters
    in strings, such as `\n` to represent a newline, `\t` to present a tab, or `\r`
    to represent a return:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.22: Output using delimiters'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/C09581_Figure_06_22.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 6.22: Output using delimiters'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: We have a tab before `Hello` and then a newline before `World`, which prints
    `World` on the next line.
  prefs: []
  type: TYPE_NORMAL
- en: Concatenation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We can combine more than one string literal in a process commonly referred
    to as concatenation. We use the `+` symbol to concatenate two strings as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: 'Concatenation is often used when we want to substitute a value that will be
    calculated at runtime. The code will look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: In the first line, we get `userName` from a method that we haven't defined here.
    Then we print out a welcome message, substituting the `userName` with `userName`
    we got earlier.
  prefs: []
  type: TYPE_NORMAL
- en: 'Concatenation is also important when we want to represent a string that spans
    more than one line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.23: Concatenated string'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/C09581_Figure_06_23.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 6.23: Concatenated string'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'In addition to the `+` symbol, Java also provides the `concat()` method for
    concatenating two string literals:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.24: Concatenated string using concat()'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/C09581_Figure_06_24.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 6.24: Concatenated string using concat()'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: String Length and Characters
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'String provides the **length()** method to get the number of characters in
    a string. The number of characters is the count of all the valid java characters,
    including newlines, spaces, and tabs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: 'To access a character at a given index, use the `charAt(i)`. This method takes
    the index of the character you want and returns a char of it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: 'Calling `charAt(i)` with an index greater than the number of characters in
    the string or a negative number will cause your program to crash with the `StringIndexOutOfBoundsException`
    exception:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: '![Figure 6.25: StringIndexOutOfBoundsException message'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/C09581_Figure_06_25.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 6.25: `StringIndexOutOfBoundsException message`'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'We can also convert a string to an array of chars by using the `getChars()`
    method. This method returns an array of chars that we can use. We can convert
    the whole string or part of the string:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.26: Characters array'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/C09581_Figure_06_26.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 6.26: Characters array'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Activity 24: Input a String and Output Its Length and as an Array'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In order to check that names being inputted into a system aren't too long, we
    can use some of the features mentioned previously to count the length of a name.
    In this activity, you will write a program that will input a name and then export
    the length of the name and the first initial.
  prefs: []
  type: TYPE_NORMAL
- en: 'The steps are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Import the `java.util.Scanner` package.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a public class called `nameTell` and a `main` method.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the `Scanner` and `nextLine` to input a string at the prompt "`Enter your
    name:`".
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Count the length of the string and find the first character.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Print the output as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.27: Output of the NameTell class'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/C09581_Figure_06_27.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 6.27: Output of the NameTell class'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The solution for this activity can be found on page 340.
  prefs: []
  type: TYPE_NORMAL
- en: 'Activity 25: Calculator Reads from Input'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: With all the calculator logic encapsulated we will write a command line calculator
    where you give the operator, the two operands and it will show you the result.
    A command line application like that starts with a while loop that never ends.
    Then reads the input from the user and makes decisions based on that.
  prefs: []
  type: TYPE_NORMAL
- en: 'For this activity you''ll write an application that has only two choices: exit
    or execute an operation. If the user types `Q` (or `q`), the application will
    exit the loop and finish. Anything else will be considered an operation. You''ll
    use the `Operators.findOperator` method to find and operator, then request to
    more inputs from the user. Each will be converted to a double (using `Double.parse`
    or `Scanner.nextDouble`). Operate on them using the Operator found and print the
    result to the console.'
  prefs: []
  type: TYPE_NORMAL
- en: Because of the infinite loop, the application will start over, asking for another
    user action.
  prefs: []
  type: TYPE_NORMAL
- en: 'To complete this activity you''ll have to:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new class called `CommandLineCalculator` with a `main` method in it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use an infinite loop to keep the application running until the user asks to
    exit.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Collect the user input to decide which action to execute. If the action is `Q`
    or `q`, exit the loop.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the action is anything else, find an operator and request two other inputs
    that will be the operands covering them to double.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Call the `operate` method on the Operator found and print the result to the
    console.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The solution for this activity can be found on page 341.
  prefs: []
  type: TYPE_NORMAL
- en: Conversion
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Sometimes we might wish to convert a given type to a string so we can print
    it out, or we might want to convert a string to a given type. An example is when
    we wish to convert the string "`100`" to the integer `100`, or convert the integer
    `100` to string "`100`".
  prefs: []
  type: TYPE_NORMAL
- en: Concatenating a primitive data type to a string using the `+` operator will
    return a string representation of that item.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, this is how to convert between an integer and a string:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: Here we used the `parseInt()` method to get the integer value of the string,
    and then used the `toString()` method to convert the integer back to a string.
  prefs: []
  type: TYPE_NORMAL
- en: 'To convert an integer to a string, we concatenate it with an empty String "":'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Every object in Java has a string representation. Java provides the `toString()`
    method in the `Object` superclass, which we can override in our classes to provide
    a string representation of our classes. String representations are important when
    we want to print our class in string format.
  prefs: []
  type: TYPE_NORMAL
- en: Comparing Strings and Parts of Strings
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `String` class supports a number of methods for comparing strings and portions
    of strings.
  prefs: []
  type: TYPE_NORMAL
- en: 'Comparing two strings for equality:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: 'Return `true` if this string ends with or begins with a given substring:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: StringBuilder
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We have stated that strings are immutable, that is, once they are declared they
    cannot be modified. However, sometimes we wish to modify a string. In such cases,
    we use the `StringBuilder` class. `StringBuilder` is just like a normal string
    except it is modifiable. `StringBuilder` also provides extra methods, such as
    `capacity()`, which returns the capacity allocated for it, and `reverse()`, which
    reverses the characters in it. StringBuilder also supports the same methods in
    the `String` class, such as `length()` and `toString()`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 21: Working with StringBuilder'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This exercise will append three strings to create one, then print out its length,
    capacity, and reverse:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a public class called `StringBuilderExample`, then create a `main` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new `StringBuilder()` object called `stringbuilder`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: 'Append three phrases:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: 'Print out the string using the `\n` as a line break:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: 'Find the length of the string and print it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: 'Find the capacity of the string and print it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: 'Reverse the string and print it out using the line break:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.28: Output of StringBuilder class'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/C09581_Figure_06_28.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 6.28: Output of StringBuilder class'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: In this exercise, we created a new instance of `StringBuilder` with the default
    capacity of 16\. We then inserted a few strings and then printed out the entire
    string. We also got the number of characters in the builder by using `length()`.
    We then got the capacity of `StringBuilder`. The capacity is the number of characters
    allocated for `StringBuilder`. It is usually higher than or equal to the length
    of the builder. We finally reversed all the characters in the builder and then
    print it out. In the last print out, we didn't use `stringBuilder.toString()`
    because Java implicitly does that for us.
  prefs: []
  type: TYPE_NORMAL
- en: 'Activity 26: Removing Duplicate Characters from a String'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In order to create secure passkeys, we have decided that we need to create lines
    of strings that do not contain duplicate characters. In this activity, you will
    be creating a program that takes in a string, removes any duplicate characters,
    and then prints out the result.
  prefs: []
  type: TYPE_NORMAL
- en: One way of doing this is to loop through all the characters of the string and
    for each character, we loop through the string again, checking if the character
    already exists. If we find a duplicate, we immediately remove it. This algorithm
    is a brute-force approach and not the best when it comes to running time. In fact,
    its running time is exponential.
  prefs: []
  type: TYPE_NORMAL
- en: 'These steps will help you complete the activity:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new class named `Unique` and inside it create a `main` method. Leave
    it empty for now.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new method `removeDups` called that takes and returns a string. This
    is where our algorithm will go. This method should be `public` and `static`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inside the method, check whether the string is null, empty, or has a length
    of 1\. If any of these cases are true, then just return the original string since
    there checking is not needed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a string called `result` that is empty. This will be unique string to
    be returned.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create `for` loop from 0 to the length of the string passed into the method.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inside the `for` loop, get the character at the current index of the string.
    Name the variable `c`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Also create a boolean called `isDuplicate` and initialize it to `false`. When
    we encounter a duplicate, we will change it to `true`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create another nested `for` loop from 0 to the `length()` of result.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inside the `for` loop, also get the character at the current index of result.
    Name it `d`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Compare `c` and `d`. If they are equal, then set `isDuplicate` to true and `break`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Close the inner `for` loop and go inside the first `for` loop.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check if `isDuplicate` is `false`. If it is, then append `c` to result.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go outside the first `for` loop and return the result. That concludes our algorithm.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Go back to our empty `main` method. Create a few test strings of the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: Pass the strings to our method and print out the result returned from the method.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check the result. Duplicate characters should be removed in the returned strings.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The output should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.29: Expected output of Unique class'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/C09581_Figure_06_29.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 6.29: Expected output of Unique class'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The solution for this activity can be found on page 342.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This lesson brings us to the end of our discussion on the core principles of
    object-oriented programming. In this lesson, we have looked at data types, algorithms,
    and strings.
  prefs: []
  type: TYPE_NORMAL
- en: We've seen how an array is an ordered collection of items of the same type.
    Arrays are declared with square brackets, `[ ]`, and their size cannot be modified.
    Java provides the `Arrays` class from the collections framework that has extra
    methods we can use on arrays.
  prefs: []
  type: TYPE_NORMAL
- en: We also saw the concept of `StringBuilder` class, which is basically a modifiable
    string. `stringbuilder` has `length` and `capacity` functions.
  prefs: []
  type: TYPE_NORMAL
