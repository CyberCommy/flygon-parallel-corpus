- en: Chapter 3. Obtaining File and Directory Information
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Determining the file content type
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Obtaining a single attribute at a time using the getAttribute method
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Obtaining a map of file attributes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting file and directory information
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Determining operating system support for attribute views
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Maintaining basic file attributes using the BasicFileAttributeView
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Maintaining POSIX file attributes using the PosixFileAttributeView
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Maintaining FAT table attributes using the DosFileAttributeView
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Maintaining file ownership attributes using the FileOwnerAttributeView
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Maintaining a file's ACL using the AclFileAttributeView
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Maintaining user-defined file attributes using the UserDefinedFileAttributeView
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Many applications need access to file and directory information. This information
    includes such attributes as whether the file can be executed or not, the size
    of the file, the owner of the file, and even its content type. In this chapter,
    we examine the various techniques available for obtaining information regarding
    a file or directory. We have organized the recipes according to the type of access
    desired.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are five general approaches to obtaining file and directory information
    using the `java.nio.file.Files` class that are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Obtaining a single attribute at a time using the `Files` class' specific methods,
    such as the `isDirectory` method. This is detailed in the *Getting file and directory
    information* recipe.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Obtaining a single attribute at a time using the `Files` class' `getAttribute`
    method. This is detailed in the *Obtaining a single attribute at a time using
    the getAttribute method* recipe.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returning a map of attributes using the `readAttributes` method using a `String`
    to specify which attributes to return. This is explained in the *Obtaining a map
    of file attributes* recipe.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the `readAttributes` method with a `BasicFileAttributes` derived class
    to return an attribute class for that set of attributes. This is detailed in the
    *Maintaining basic file attributes using the BasicFileAttributeView* recipe.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the `getFileAttributes` method to return a view that provides access to
    a specific set of attributes. This is also detailed in the *Using the BasicFileAttributeView
    method to maintain basic file attributes* recipe. It is found in the *There's
    More..*. section of the recipe.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dynamic access to attributes is supported through several methods and allows
    the developer to specify an attribute using a `String`. The `Files` class' `getAttribute`
    method typifies this approach.
  prefs: []
  type: TYPE_NORMAL
- en: 'Java 7 introduces a number of interfaces that are based on a file view. A view
    is simply a way of organizing information about a file or directory. For example,
    the `AclFileAttributeView` provides methods related to the file''s **Access Control
    List** (**ACL**). The `FileAttributeView` interface is the base interface for
    other interfaces that provide specific types of file information. Sub-interfaces
    found in the `java.nio.file.attribute` package include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`AclFileAttributeView:` This is used to maintain the file''s ACL and ownership
    attributes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`BasicFileAttributeView:` This is used to access basic information about a
    file and to set time-related attributes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DosFileAttributeView:` This is designed to be used with the legacy **Disk
    Operating System** (**DOS**) file attributes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`FileOwnerAttributeView:` This is used to maintain the ownership of a file'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PosixFileAttributeView:` This supports **Portable Operating System Interface**
    (**POSIX**) attributes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`UserDefinedFileAttributeView:` This supports user-defined attributes for a
    file'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The relationships between the views are shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The lower-level interfaces inherit from the interfaces above them.
  prefs: []
  type: TYPE_NORMAL
- en: '![Introduction](img/5627_03_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The `readAttributes` method''s second parameter specifies the type of attributes
    to be returned. Three attribute interfaces are supported and their relationship
    is illustrated in the following figure. These interfaces provide a means of accessing
    their corresponding view interfaces:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Introduction](img/5627_03_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: There is a recipe devoted to each of these views. The `FileStoreAttributeView`
    is not discussed here, but is covered in the *Getting FileStore information* recipe
    found in [Chapter 4](ch04.html "Chapter 4. Managing Files and Directories"), *Managing
    Files and Directories*.
  prefs: []
  type: TYPE_NORMAL
- en: Files and the directory structure used for examples in this chapter are described
    in the introduction to [Chapter 2](ch02.html "Chapter 2. Locating Files and Directories
    Using Paths"), *Locating Files and Directories Using Paths*.
  prefs: []
  type: TYPE_NORMAL
- en: Determining the file content type
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The type of a file can often be derived from its extension. However this can
    be misleading, and files with the same extension may contain different types of
    data. The `Files` class' `probeContentType` method is used to determine the content
    type of a file, if possible. This is useful when the application needs some indication
    of what is in a file in order to process it.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In order to determine the content type, the following steps need to be completed:'
  prefs: []
  type: TYPE_NORMAL
- en: Obtain a `Path` object that represents the file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the `Path` object as the argument to the `probeContentType` method.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the results to process the file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create a new console application. Add three different types of files to the
    `/home/docs` directory. Use the following for the `main` method. While you may
    use any files that you choose, this example uses a text file, a Word document,
    and an executable file as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Execute the application. Your output should appear as follows. The type returned
    is dependent on the actual files you used:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**text/plain**'
  prefs: []
  type: TYPE_NORMAL
- en: '**application/msword**'
  prefs: []
  type: TYPE_NORMAL
- en: '**application/x-msdownload**'
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A `java.nio.file.Path` variable was created and assigned to each of the three
    different files. The `Files` class' `probeContentPath` method was executed for
    each of these files. The result returned was a `String`, which was displayed for
    illustration purposes. The `probeContentType` method throws a `java.io.IOException`
    and we handle this by having the `displayConentType` method and the `main` method
    throw a base class exception. The `probeContentPath` method may also throw a `java.lang.SecurityException`,
    but you are not required to handle it.
  prefs: []
  type: TYPE_NORMAL
- en: In the files used for this example, the first file was a text file. The returned
    type was **text/plain**. The other two were a Word document and the executable
    `java.exe` file. The return types were **application/msword** and **application/x-msdownload**
    respectively.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The result of the method is a `String` as defined by the **Multipurpose Internet
    Mail Extension** (**MIME**): **RFC 2045: Multipurpose Internet Mail Extensions
    (**MIME**) Part One: Format of Internet Message Bodies**. This permits the `String`
    to be parsed using the RFC 2045 grammar specifications. If the content type is
    not recognized, then null is returned.'
  prefs: []
  type: TYPE_NORMAL
- en: A MIME type is composed of a type and a subtype with one or more optional parameters.
    The type is separated from the subtype using a forward slash. In the previous
    output, the text document type was text and its subtype was plain. The other two
    types were both of the type application, but had different subtypes. Subtypes
    that begin with x- are non-standard.
  prefs: []
  type: TYPE_NORMAL
- en: The implementation of the `probeContentType` method is system-dependent. The
    method will use a `java.nio.file.spi.FileTypeDetector` implementation to determine
    the content type. It may examine the filename or possibly access file attributes
    to determine the file content type. Most operating systems will maintain a list
    of file detectors. A detector from this list is loaded and used to determine the
    file type. The `FileTypeDetector` class is not extended, and it is not currently
    possible to determine which file detectors are available.
  prefs: []
  type: TYPE_NORMAL
- en: Obtaining a single attribute at a time using the getAttribute method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you are interested in getting a single file attribute, and you know the name
    of the attribute, then the `Files` class' `getAttribute` method is simple and
    easy to use. It will return information about the file based upon a `String` representing
    the attribute. The first part of this recipe illustrates a simple use of the `getAttribute`
    method. Other available attributes are listed in the *There's More..*. section
    of this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To obtain a single file attribute value:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a `Path` object representing the file of interest.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use this object as the first argument of the `getAttribute` method.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use a `String` containing the name of the attribute as the method's second argument.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create a new console application and use the following `main` method. In this
    method we determine the size of the file as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as follows, and will depend upon the actual size of the
    file used:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**30**'
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A `Path` was created representing the `users.txt` file. This path was then used
    as the first argument of the `Files` class' `getAttribute` method. When the code
    was executed the size of the file was displayed.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `Files` class'' `getAttribute` method possesses the following three arguments:'
  prefs: []
  type: TYPE_NORMAL
- en: A `Path` object representing the file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A `String` containing the name of the attribute
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An optional `LinkOption` to use when dealing with symbolic files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following table lists the valid attribute names that can be used with this
    method:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Attribute Name | Data Type |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `lastModifiedTime` | FileTime |'
  prefs: []
  type: TYPE_TB
- en: '| `lastAccessTime` | FileTime |'
  prefs: []
  type: TYPE_TB
- en: '| `creationTime` | FileTime |'
  prefs: []
  type: TYPE_TB
- en: '| `size` | long |'
  prefs: []
  type: TYPE_TB
- en: '| `isRegularFile` | Boolean |'
  prefs: []
  type: TYPE_TB
- en: '| `isDirectory` | Boolean |'
  prefs: []
  type: TYPE_TB
- en: '| `isSymbolicLink` | Boolean |'
  prefs: []
  type: TYPE_TB
- en: '| `isOther` | Boolean |'
  prefs: []
  type: TYPE_TB
- en: '| `fileKey` | Object |'
  prefs: []
  type: TYPE_TB
- en: If an invalid name is used then a runtime error occurs. This is the primary
    weakness of this approach. For example, if the name is misspelled, we will get
    a runtime error. This approach is shown as follows, where the attribute specified
    has an extra *s* at the end of the attribute `String:`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'When the application is executed, you should get results similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Exception in thread "main" java.lang.IllegalArgumentException: ''sizes''
    not recognized**'
  prefs: []
  type: TYPE_NORMAL
- en: '**at sun.nio.fs.AbstractBasicFileAttributeView$AttributesBuilder.<init>(AbstractBasicFile
    AttributeView.java:102)**'
  prefs: []
  type: TYPE_NORMAL
- en: '**at sun.nio.fs.AbstractBasicFileAttributeView$AttributesBuilder.create(AbstractBasicFileAttributeView.java:112)**'
  prefs: []
  type: TYPE_NORMAL
- en: '**at sun.nio.fs.AbstractBasicFileAttributeView.readAttributes(AbstractBasicFileAttributeView.java:166)**'
  prefs: []
  type: TYPE_NORMAL
- en: '**at sun.nio.fs.AbstractFileSystemProvider.readAttributes(AbstractFileSystemProvider.java:92)**'
  prefs: []
  type: TYPE_NORMAL
- en: '**at java.nio.file.Files.readAttributes(Files.java:1896)**'
  prefs: []
  type: TYPE_NORMAL
- en: '**at java.nio.file.Files.getAttribute(Files.java:1801)**'
  prefs: []
  type: TYPE_NORMAL
- en: '**at packt.SingleAttributeExample.main(SingleAttributeExample.java:15)**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Java Result: 1**'
  prefs: []
  type: TYPE_NORMAL
- en: A list of file attributes can be obtained as described in the *Obtaining a map
    of file attributes* recipe. This can be used to avoid using an invalid name.
  prefs: []
  type: TYPE_NORMAL
- en: Obtaining a map of file attributes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An alternative way of accessing file attributes is to use the `Files` class'
    `readAttributes` method. There are two overloaded versions of this method, and
    they differ in their second argument and their return data types. In this recipe,
    we will explore the version that returns a `java.util.Map` object as it allows
    more flexibility in what attributes it can return. The second version of the method
    is discussed in a series of recipes, each devoted to a specific class of attributes.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To obtain a list of attributes in the form of a `Map` object, the following
    steps need to be done:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a `Path` object representing a file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Apply the static `readAttributes` method against the `Files` class.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Specify the value of its arguments:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `Path` object representing the file of interest
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A `String` argument representing the attributes to be returned
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An optional third argument specifying whether symbolic links should be followed
    or not
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create a new console application. Use the following `main` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Execute the application. Your output should appear similar to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**lastModifiedTime: 2011-09-06T01:26:56.501665Z**'
  prefs: []
  type: TYPE_NORMAL
- en: '**fileKey: null**'
  prefs: []
  type: TYPE_NORMAL
- en: '**isDirectory: false**'
  prefs: []
  type: TYPE_NORMAL
- en: '**lastAccessTime: 2011-09-06T21:14:11.214057Z**'
  prefs: []
  type: TYPE_NORMAL
- en: '**isOther: false**'
  prefs: []
  type: TYPE_NORMAL
- en: '**isSymbolicLink: false**'
  prefs: []
  type: TYPE_NORMAL
- en: '**isRegularFile: true**'
  prefs: []
  type: TYPE_NORMAL
- en: '**creationTime: 2011-09-06T21:14:11.214057Z**'
  prefs: []
  type: TYPE_NORMAL
- en: '**size: 30**'
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The example used the `users.txt` file in the `docs` directory. A `Map` object
    with a key type of `String` and a value type of `Object` was declared and then
    assigned a value from the `readAttributes` method. A `java.util.Set` object was
    created using the `Map` interface's `keySet` method. This gives us access to both
    the keys and the values of the `Map`. In the for each loop, each member of the
    set was used as an argument to the `getAttribute` method. This corresponding attribute
    and its value were displayed for the file. The `getAttribute` method is explained
    in the *Obtaining a single attribute at a time using the getAttribute method*
    recipe.
  prefs: []
  type: TYPE_NORMAL
- en: In this example, we used the string literal, `"*`", as the second argument.
    This value instructs the method to return all available attributes of the file.
    As we will see shortly, other string values can be used to get different results.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `readAttributes` method is an atomic filesystem operation. By default,
    symbolic links are followed. To direct the method to not follow symbolic links,
    use the `java.nio.file` package''s `LinkOption.NOFOLLOW_LINKS` enumeration constant,
    shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The interesting aspect of this method is its second argument. The syntax for
    the `String` argument consists of an optional `viewName` and a colon followed
    by an attribute list. A `viewName` is typically one of the following:'
  prefs: []
  type: TYPE_NORMAL
- en: acl
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: basic
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: owner
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: user
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: dos
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: posix
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each of these `viewNames` corresponds to the name of a view interface.
  prefs: []
  type: TYPE_NORMAL
- en: The attribute list is a comma delimited list of attributes. The attribute list
    may contain zero or more elements. If an invalid element name is used, it is ignored.
    Using an asterisk will return all of the attributes associated with that `viewName`.
    If a `viewName` is not included, then all of the basic file attributes are returned
    as illustrated earlier.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the basic view as an example, the following table illustrates how we
    can be selective about which attributes we return:'
  prefs: []
  type: TYPE_NORMAL
- en: '| String | Attributes returned |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `"*"` | All of the basic file attributes |'
  prefs: []
  type: TYPE_TB
- en: '| `"basic:*"` | All of the basic file attributes |'
  prefs: []
  type: TYPE_TB
- en: '| `"basic:isDirectory,lastAccessTime`" | Only the `isDirectory` and `lastAccessTime`
    attributes |'
  prefs: []
  type: TYPE_TB
- en: '| `"isDirectory,lastAccessTime`" | Only the `isDirectory` and `lastAccessTime`
    attributes |'
  prefs: []
  type: TYPE_TB
- en: '| `""` | None - a `java.lang.IllegalArgumentException` is generated |'
  prefs: []
  type: TYPE_TB
- en: The attribute `String` is used in the same way with views other than basic.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There cannot be any embedded spaces in the attribute `String`. For example,
    the `String, "basic:isDirectory, lastAccessTime`", where there is a blank after
    the comma will result in an `IllegalArgumentException`.
  prefs: []
  type: TYPE_NORMAL
- en: Getting file and directory information
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is frequently necessary to retrieve basic information about a file or directory.
    This recipe examines how the `java.nio.file.Files` class provides the direct support.
    These methods provide only partial access to file and directory information and
    are typified by methods such as the `isRegularFile` method. A list of such methods
    are found in the *There's more..*. section of this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To use the methods of the `Files` class to display information is easy since
    most, if not all, of these methods are static. This means that the methods can
    easily be executed against the `Files` class name. To use this technique:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a `Path` object representing a file or directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the `Path` object as an argument to the appropriate `Files` class' method.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To demonstrate how to obtain file attributes, we will develop a method to display
    the attributes of a file. Create a new console application that contains the following
    `main` method. In the method, we create a reference to a file and then call a
    `displayFileAttribute` method. It uses several methods to display information
    about the path as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Execute the program. Your output should appear as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Exists: true**'
  prefs: []
  type: TYPE_NORMAL
- en: '**notExists: false**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Directory: false**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Regular: true**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Executable: true**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Readable: true**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Writable: true**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Hidden: false**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Symbolic: false**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Last Modified Date: 2011-10-20T03:18:20.338139Z**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Size: 29**'
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A `Path` to the `users.txt` file was created. This `Path` object was then passed
    to the `displayFileAttribute` method, which displayed many of the attributes of
    the file. The methods that return these attributes are summarized in the following
    table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Method | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `exists` | Returns `true` if the files exist |'
  prefs: []
  type: TYPE_TB
- en: '| `notExists` | Returns `true` if the file does not exist |'
  prefs: []
  type: TYPE_TB
- en: '| `isDirectory` | Returns `true` if the Path represents a directory |'
  prefs: []
  type: TYPE_TB
- en: '| `isRegularFile` | Returns `true` if the Path represents a regular file |'
  prefs: []
  type: TYPE_TB
- en: '| `isExecutable` | Returns `true` if the file can be executed |'
  prefs: []
  type: TYPE_TB
- en: '| `isReadable` | Returns `true` if the file can be read |'
  prefs: []
  type: TYPE_TB
- en: '| `isWritable` | Returns `true` if the file can be written to |'
  prefs: []
  type: TYPE_TB
- en: '| `isHidden` | Returns `true` if the file is hidden and not visible to the
    unprivileged user |'
  prefs: []
  type: TYPE_TB
- en: '| `isSymbolicLink` | Returns `true` if the file is a symbolic link |'
  prefs: []
  type: TYPE_TB
- en: '| `getLastModifiedTime` | Returns the last time the file was modified |'
  prefs: []
  type: TYPE_TB
- en: '| `size` | Returns the size of the file |'
  prefs: []
  type: TYPE_TB
- en: Several of these methods possess a second argument that specifies how to handle
    symbolic links. When `LinkOption.NOFOLLOW_LINKS` is present, then symbolic links
    are not followed. The second argument is optional. If it is left out then symbolic
    links are not followed. Symbolic links are discussed in the *Managing symbolic
    links* recipe of [Chapter 2](ch02.html "Chapter 2. Locating Files and Directories
    Using Paths"), *Locating Files and Directories Using Paths*.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following table summarizes the exceptions thrown, and whether the method
    is non-atomic. Methods that may throw a `SecurityException` will do so if the
    calling thread is not permitted to read the file.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When a method is said to be **non-atomic**, it means that other filesystem operations
    may execute concurrently with that method. Non-atomic operations can result in
    inconsistent results. That is, it is possible that concurrent operations against
    the method's target may result in possible modification of the state of the file
    while these methods are executing. This should be considered when using these
    methods.
  prefs: []
  type: TYPE_NORMAL
- en: The results of these methods marked as outdated are not necessarily valid upon
    their return. That is, there is no guarantee that any subsequent access will succeed
    as the file may have been deleted or otherwise modified.
  prefs: []
  type: TYPE_NORMAL
- en: 'Methods designated as **Cannot be determined** indicate that `false` may be
    returned if it is not possible to otherwise ascertain the results. For example,
    the `exists` method will return `false` if it cannot determine whether the file
    exists. It may exist, but the method was not able to determine definitively if
    it exists or not:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Method | SecurityException | IOException | Non-atomic | Outdated | Cannot
    be determined |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `exists` | Yes |   |   | Yes | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| `notExists` | Yes |   |   | Yes | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| `isDirectory` | Yes |   |   |   | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| `isRegularFile` | Yes |   |   |   | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| `isExecutable` | Yes |   | Yes | Yes | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| `isReadable` | Yes |   | Yes | Yes | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| `isWritable` | Yes |   | Yes | Yes | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| `isHidden` | Yes | Yes |   |   |   |'
  prefs: []
  type: TYPE_TB
- en: '| `isSymbolicLink` | Yes |   |   |   | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| `getLastModifiedTime` | Yes | Yes |   |   |   |'
  prefs: []
  type: TYPE_TB
- en: '| `size` | Yes | Yes |   |   |   |'
  prefs: []
  type: TYPE_TB
- en: Note that the `notExists` method is not the inverse of the `exists` method.
    With the use of either method, it may not be possible to determine if the file
    exists or not. When this is the case, both methods will return `false`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `isRegularFile` determines if the file is a regular file. Both the `isDirectory,
    isSymbolicLink`, and the `isRegularFile` methods may return `false` if:'
  prefs: []
  type: TYPE_NORMAL
- en: It is not one of those types
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the file does not exist or
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If it is not possible to determine whether it is a file or a directory
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For these methods, their corresponding methods in the `BasicFileAttributes`
    interface may provide better results. These methods are covered in the *Maintaining
    basic file attributes using the BasicFileAttributeView* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `isExecutable` method checks to see if the file exists and if the JVM has
    access rights to execute the file. If the file is a directory, then the method
    determines whether the JVM has sufficient privileges to search the directory.
    It will return `false` if:'
  prefs: []
  type: TYPE_NORMAL
- en: The file does not exist
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The file is not executable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If it is not possible to determine whether it is executable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The meaning of hidden is system-dependent. On UNIX systems, a file is hidden
    if its name begins with a period. On Windows, a file is hidden if the DOS hidden
    attribute is set.
  prefs: []
  type: TYPE_NORMAL
- en: Determining operating system support for attribute views
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An operating system may not support all the attribute views found in Java. There
    are three basic techniques for determining which views are supported. Knowing
    which views are supported allows the developer to avoid exceptions that can occur
    when trying to use a view that is not supported.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The three techniques include using:'
  prefs: []
  type: TYPE_NORMAL
- en: The `java.nio.file.FileSystem` class' `supportedFileAttributeViews` method to
    return a set of all views supported.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `java.nio.file.FileStore` class' `supportsFileAttributeView` method with
    a class argument. If that class is supported, the method will return `true`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `FileStore` class' `supportsFileAttributeView` method with a `String` argument.
    If the class represented by that `String` is supported, the method will return
    `true`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The first approach is the simplest and will be illustrated first.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create a new console application with the following `main` method. In this
    method, we will display all views supported on the current system as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'When the application is executed on a Windows 7 system, you should get the
    following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**acl**'
  prefs: []
  type: TYPE_NORMAL
- en: '**basic**'
  prefs: []
  type: TYPE_NORMAL
- en: '**owner**'
  prefs: []
  type: TYPE_NORMAL
- en: '**user**'
  prefs: []
  type: TYPE_NORMAL
- en: '**dos**'
  prefs: []
  type: TYPE_NORMAL
- en: 'When the application is executed under Ubuntu, version 10.10, you should get
    the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**basic**'
  prefs: []
  type: TYPE_NORMAL
- en: '**owner**'
  prefs: []
  type: TYPE_NORMAL
- en: '**user**'
  prefs: []
  type: TYPE_NORMAL
- en: '**unix**'
  prefs: []
  type: TYPE_NORMAL
- en: '**dos**'
  prefs: []
  type: TYPE_NORMAL
- en: '**posix**'
  prefs: []
  type: TYPE_NORMAL
- en: Notice that the **acl** view is not supported and a **unix** and **posix** view
    are supported. There is not a `UnixFileAttributeView` available as part of the
    Java 7 release. However, this interface can be found as part of the JSR203-backport
    project.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A `Path` object was created for the `users.txt` file. The filesystem for this
    `Path` was obtained next using the `getFileSystem` method. The `FileSystem` class
    possesses the `supportedFileAttributeViews` method, which returns a set of strings
    representing the views supported. A for each loop was then used to display each
    string value.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are two other methods that we can use to determine which views are supported:'
  prefs: []
  type: TYPE_NORMAL
- en: Using the `supportsFileAttributeView` method with a class argument
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the `supportsFileAttributeView` method with a `String` argument
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These two techniques are very similar. They both allow you to test for a specific
    view.
  prefs: []
  type: TYPE_NORMAL
- en: Using the supportsFileAttributeView method with a class argument
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The overloaded `supportsFileAttributeView` method accepts a class object representing
    the view in question. Add the following code to the previous example''s `main`
    method. In this code, we determine which of the several views are supported:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'When executed on a Windows 7 machine, you should get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '**FileAttributeView supported: false**'
  prefs: []
  type: TYPE_NORMAL
- en: '**BasicFileAttributeView supported: true**'
  prefs: []
  type: TYPE_NORMAL
- en: '**FileOwnerAttributeView supported: true**'
  prefs: []
  type: TYPE_NORMAL
- en: '**AclFileAttributeView supported: true**'
  prefs: []
  type: TYPE_NORMAL
- en: '**PosixFileAttributeView supported: false**'
  prefs: []
  type: TYPE_NORMAL
- en: '**UserDefinedFileAttributeView supported: true**'
  prefs: []
  type: TYPE_NORMAL
- en: '**DosFileAttributeView supported: true**'
  prefs: []
  type: TYPE_NORMAL
- en: Using the supportsFileAttributeView method with a String argument
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The overloaded `supportsFileAttributeView` method that accepts a `String` object
    works in a similar fashion. Add the following code to the try block of the `main`
    method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'When executed on a Windows 7 platform, you should get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '**FileAttributeView supported: false**'
  prefs: []
  type: TYPE_NORMAL
- en: '**BasicFileAttributeView supported: true**'
  prefs: []
  type: TYPE_NORMAL
- en: '**FileOwnerAttributeView supported: true**'
  prefs: []
  type: TYPE_NORMAL
- en: '**AclFileAttributeView supported: true**'
  prefs: []
  type: TYPE_NORMAL
- en: '**PosixFileAttributeView supported: false**'
  prefs: []
  type: TYPE_NORMAL
- en: '**UserDefinedFileAttributeView supported: true**'
  prefs: []
  type: TYPE_NORMAL
- en: '**DosFileAttributeView supported: true**'
  prefs: []
  type: TYPE_NORMAL
- en: Maintaining basic file attributes using the BasicFileAttributeView
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `java.nio.file.attribute.BasicFileAttributeView` provides a series of methods
    that obtain basic information about a file such as its creation time and size.
    The view possesses a `readAttributes` method, which returns a `BasicFileAttributes`
    object. The `BasicFileAttributes` interface possesses several methods for accessing
    file attributes. This view provides an alternative means of obtaining file information
    than that supported by the `Files` class. The results of this method may be more
    reliable at times than those of the `Files` class.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are two approaches for obtaining a `BasicFileAttributes` object. The first
    approach is to use the `readAttributes` method that uses the `BasicFileAttributes.class`
    as the second argument. The second approach uses the `getFileAttributeView` method
    and is explored in the *There's more..*. section of this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `Files` class'' `readAttributes` method is easiest to use:'
  prefs: []
  type: TYPE_NORMAL
- en: Use a `Path` object representing the file of interest as the first argument.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use `BasicFileAttributes.class` as the second argument.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the returned `BasicFileAttributes` object methods to access the file attributes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This basic approach is used for the other views illustrated in this chapter.
    Only the attribute view class differs.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create a new console application. Use the following `main` method. In the method,
    we create a `BasicFileAttributes` object and use its methods to display information
    about a file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Execute the application. Your output should be similar to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Creation Time: 2011-09-06T21:14:11.214057Z**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Last Accessed Time: 2011-09-06T21:14:11.214057Z**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Last Modified Time: 2011-09-06T01:26:56.501665Z**'
  prefs: []
  type: TYPE_NORMAL
- en: '**File Key: null**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Directory: false**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Other Type of File: false**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Regular File: true**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Symbolic File: false**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Size: 30**'
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First, we created a `Path` object representing the `users.txt` file. Next, we
    obtained a `BasicFileAttributes` object using the `Files` class' `readAttributes`
    method. The first argument of the method is a `Path` object. The second argument
    specifies the type of object that we want returned. In this case, it was a `BasicFileAttributes.class`
    object.
  prefs: []
  type: TYPE_NORMAL
- en: This was followed by a series of print statements that display specific attribute
    information about the file. The `readAttributes` method retrieves all of the basic
    file attributes for a file. Since it can throw an `IOException`, the code sequence
    was enclosed in a try block.
  prefs: []
  type: TYPE_NORMAL
- en: Most of the `BasicFileAttributes` interface methods are easy to follow, but
    a few require further explanation. First, if the `isOther` method returns `true`,
    it means that the file is not a regular file, directory, or a symbolic link. Additionally,
    although the file size is in bytes, due to issues such as file compression and
    implementation of sparse files, the actual size may be different. If the file
    is not a regular file, then the meaning of the return value is system-dependent.
  prefs: []
  type: TYPE_NORMAL
- en: The `fileKey` method returns an object that uniquely identifies that file. In
    UNIX, the device id or inode is used for this purpose. The file key will not necessarily
    be unique if the filesystem and its files are changed. They can be compared using
    the `equals` method, and can be used in collections. Again, the assumption is
    that the filesystem has not changed in a way that affects the file key. The comparison
    of two files is covered in the *Determining whether two paths are equivalent*
    recipe in [Chapter 2](ch02.html "Chapter 2. Locating Files and Directories Using
    Paths"), *Locating Files and Directories Using Paths*.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'An alternative approach to getting an object is to use the `Files` class''
    `getFileAttributeView` method. It returns an `AttributeView` derived `object`
    based on its second parameter. To get an instance of a `BasicFileAttributeView`
    object:'
  prefs: []
  type: TYPE_NORMAL
- en: Use a `Path` object representing the file of interest as the first argument.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the `BasicFileAttributeView` as the second argument.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Instead of using the following statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'We can replace it with the following code sequence:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'A `BasicFileAttributeView` object is returned using the getFileAttributeView
    method. The readAttributes method then returns the BasicFileAttributes object.
    This approach is longer, but we now have access to three additional methods, which
    are shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`name:` This returns the name of the attribute view'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`readAttributes:` This returns a `BasicFileAttributes` object'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`setTimes:` This is used to set the file''s time attributes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We then use the `name` method shown as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'This results in the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Name: basic**'
  prefs: []
  type: TYPE_NORMAL
- en: However, this does not provide us with much useful information. The `setTimes`
    method is illustrated in the *Setting time related attributes of a file or directory*
    recipe in [Chapter 4](ch04.html "Chapter 4. Managing Files and Directories"),
    *Managing Files and Directories*.
  prefs: []
  type: TYPE_NORMAL
- en: Maintaining POSIX file attributes using the PosixFileAttributeView
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Many operating systems support the **Portable Operating System Interface** (**POSIX**)
    standard. This provides a more portable way of writing applications that can be
    ported across operating systems. Java 7 supports access to file attributes using
    the `java.nio.file.attribute.PosixFileAttributeView` interface.
  prefs: []
  type: TYPE_NORMAL
- en: Not all operating systems support the POSIX standard. The *Determining operating
    system support for attribute views* recipe illustrates how to determine whether
    a specific operating system supports POSIX or not.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In order to obtain POSIX attributes for a file or directory, we need to do
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a `Path` object representing the file or directory of interest.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Obtain an instance of the `PosixFileAttributeView` interface using the `getFileAttributeView`
    method.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the `readAttributes` method to obtain a set of attributes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create a new console application. Use the `main` method that follows. In this
    method, we obtain attributes for the `users.txt` file as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Execute the application. Your output should appear as follows. The owner names
    will probably be different. In this case, it is **richard:**
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Group: richard**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Owner: richard**'
  prefs: []
  type: TYPE_NORMAL
- en: '**OWNER_READ OWNER_WRITE OTHERS_READ GROUP_READ**'
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A `Path` object was created for the `users.txt` file. This was used as the first
    argument of the `Files` class' `getFileAttributeView` method. The second argument
    was `PosixFileAttributeView.class`. A `PosixFileAttributeView` object was returned.
  prefs: []
  type: TYPE_NORMAL
- en: Next, an instance of the `PosixFileAttributes` interface was obtained using
    the `readAttributes` method. The `group` and `getName` methods were used to display
    the group and owner of the file. The permissions methods returned a set of `PosixFilePermission`
    enumerations. These enumerations represent the permissions assigned to the file.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `PosixFileAttributes` interface extends the `java.nio.file.attribute.BasicFileAttributes`
    interface, and thus has access to all of its methods. The `PosixFileAttributeView`
    interface extends the `java.nio.file.attribute.FileOwnerAttributeView` and `BasicFileAttributeView`
    interfaces and inherits their methods also.
  prefs: []
  type: TYPE_NORMAL
- en: The `PosixFileAttributeView` interface has a `setGroup` method that can be used
    to configure the group owner of the file. The permissions of the file can be maintained
    using the `setPermissions` method. Maintaining file permissions is discussed in
    the *Managing POSIX attributes* recipe in [Chapter 4](ch04.html "Chapter 4. Managing
    Files and Directories"), *Managing Files and Directories*.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Maintaining basic file attributes using the BasicFileAttributeView* recipe
    details the attributes available through this view. The *Maintaining file ownership
    attributes using the FileOwnerAttributeView* recipe discusses ownership issues.
    To determine whether POSIX is supported by an operating system, look at the *Determining
    operating system support for attribute views* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Maintaining FAT table attributes using the DosFileAttributeView
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `java.nio.file.attribute.DosFileAttributeView` is concerned with the older
    **Disk Operating System** (**DOS**) files. It has limited value on most computers
    today. However, this is the only interface that can be used to determine if a
    file is marked for archive or is a system file.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To use the `DosFileAttributeView` interface:'
  prefs: []
  type: TYPE_NORMAL
- en: Use the `Files` class' `getFileAttributeView` method to obtain an instance of
    a `DosFileAttributeView`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the view's `readAttributes` method to return an instance of `DosFileAttributes`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the `DosFileAttributes` class' methods to obtain file information.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This view supports the following four methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '`isArchive:` which is concerned with whether the file needs to be backed up
    or not'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`isHidden:` returns `true` if the file is not visible to users'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`isReadOnly:` returns `true` if the file can only be read'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`isSystem:` returns `true` if the file is part of the operating system'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create a new console application and add the following `main` method. In this
    method, we create an instance of the `DosFileAttributes` and then use its methods
    to display information about the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Execute the program. Your output should appear as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**isArchive: true**'
  prefs: []
  type: TYPE_NORMAL
- en: '**isHidden: false**'
  prefs: []
  type: TYPE_NORMAL
- en: '**isReadOnly: false**'
  prefs: []
  type: TYPE_NORMAL
- en: '**isSystem: false**'
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A `Path` object representing the `users.txt` file was created. This object was
    used as an argument to the `Files` class' `getFileAttributeView` method along
    with `DosFileAttributeView.class`. An instance of the `DosFileAttributeView` interface
    was returned. This was used to create an instance of the `DosFileAttributes` interface,
    which was used with the four methods of the interface.
  prefs: []
  type: TYPE_NORMAL
- en: The `DosFileAttributeView` extends the `BasicFileAttributes` interface, and
    thus inherits all of its attributes as detailed in the *Maintaining basic file
    attributes using the BasicFileAttributeView* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: See the *Maintaining basic file attributes using the BasicFileAttributeView*
    recipe for more information about its methods.
  prefs: []
  type: TYPE_NORMAL
- en: Maintaining file ownership attributes using the FileOwnerAttributeView
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If we are only interested in accessing information about the owners of a file
    or directory, then the `java.nio.file.attribute.FileOwnerAttributeView` interface
    provides methods for retrieving and setting this type of information. The setting
    of file ownership is covered in the *Setting file and directory owner* recipe
    of [Chapter 4](ch04.html "Chapter 4. Managing Files and Directories"), *Managing
    Files and Directories*.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To retrieve the owner of a file:'
  prefs: []
  type: TYPE_NORMAL
- en: Obtain an instance of the `FileOwnerAttributeView` interface.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use its `getOwner` method to return a `UserPrincipal` object representing the
    owner.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create a new console application. Add the following `main` method to it. In
    this method, we will determine the owner of the `users.txt` file as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Execute the application. Your output should be similar to the following, except
    the PC and usernames should be different.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Richard-PC\Richard**'
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A `Path` object was created for the `users.txt` file. Next, the `Files` class'
    `getFileAttributeView` method was called using the `Path` object as the first
    argument. The second argument was `FileOwnerAttributeView.class`, which results
    in a `FileOwnerAttributeView` object for the file being returned.
  prefs: []
  type: TYPE_NORMAL
- en: The view's `getOwner` method was then invoked to return a `UserPrincipal` object.
    Its `getName` method returns the name of the user, which was then displayed.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: See the *Maintaining basic file attributes using the BasicFileAttributeView*
    recipe for more information about its methods.
  prefs: []
  type: TYPE_NORMAL
- en: Maintaining a file's ACL using the AclFileAttributeView
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `java.nio.file.attribute.AclFileAttributeView` interface provides access
    to ACL attributes of a file or directory. These attributes include the user principal,
    the type of attribute, and flags and permissions for the file. The ability to
    use this interface allows the user to determine what permissions are available
    and to modify these attributes.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To determine the attributes of a file or directory:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a `Path` object representing that file or directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use this `Path` object as the first argument of the `Files` class' `getFileAttributeView`
    method.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use `AclFileAttributeView.class` as its second argument.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the `AclFileAttributeView` object, which was returned to access the list
    of ACL entries for that file or directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create a new console application. In the `main` method, we will examine the
    ACL attributes of the `users.txt` file. The `getFileAttributeView` method is used
    to obtain a view and access the ACL entry list. Two helper methods are used to
    support this example: `displayPermissions` and `displayEntryFlags`. Use the following
    `main` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Create the method `displayPermissions` to display the list of permissions for
    the file as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Create the method `displayEntryFlags` method to display the list of ACL flags
    for the file as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Execute the application. You should get an output similar to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**User Principal Name: BUILTIN\Administrators**'
  prefs: []
  type: TYPE_NORMAL
- en: '**ACL Entry Type: ALLOW**'
  prefs: []
  type: TYPE_NORMAL
- en: '**No ACL Entry Flags present**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Permissions**'
  prefs: []
  type: TYPE_NORMAL
- en: '**WRITE_ATTRIBUTES EXECUTE DELETE READ_ATTRIBUTES WRITE_DATA READ_ACL READ_DATA
    WRITE_OWNER READ_NAMED_ATTRS WRITE_ACL APPEND_DATA SYNCHRONIZE DELETE_CHILD WRITE_NAMED_ATTRS**'
  prefs: []
  type: TYPE_NORMAL
- en: '**User Principal Name: NT AUTHORITY\SYSTEM**'
  prefs: []
  type: TYPE_NORMAL
- en: '**ACL Entry Type: ALLOW**'
  prefs: []
  type: TYPE_NORMAL
- en: '**No ACL Entry Flags present**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Permissions**'
  prefs: []
  type: TYPE_NORMAL
- en: '**WRITE_ATTRIBUTES EXECUTE DELETE READ_ATTRIBUTES WRITE_DATA READ_ACL READ_DATA
    WRITE_OWNER READ_NAMED_ATTRS WRITE_ACL APPEND_DATA SYNCHRONIZE DELETE_CHILD WRITE_NAMED_ATTRS**'
  prefs: []
  type: TYPE_NORMAL
- en: '**User Principal Name: BUILTIN\Users**'
  prefs: []
  type: TYPE_NORMAL
- en: '**ACL Entry Type: ALLOW**'
  prefs: []
  type: TYPE_NORMAL
- en: '**No ACL Entry Flags present**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Permissions**'
  prefs: []
  type: TYPE_NORMAL
- en: '**READ_DATA READ_NAMED_ATTRS EXECUTE SYNCHRONIZE READ_ATTRIBUTES READ_ACL**'
  prefs: []
  type: TYPE_NORMAL
- en: '**User Principal Name: NT AUTHORITY\Authenticated Users**'
  prefs: []
  type: TYPE_NORMAL
- en: '**ACL Entry Type: ALLOW**'
  prefs: []
  type: TYPE_NORMAL
- en: '**No ACL Entry Flags present**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Permissions**'
  prefs: []
  type: TYPE_NORMAL
- en: '**READ_DATA READ_NAMED_ATTRS WRITE_ATTRIBUTES EXECUTE DELETE APPEND_DATA SYNCHRONIZE
    READ_ATTRIBUTES WRITE_NAMED_ATTRS WRITE_DATA READ_ACL**'
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A `Path` was created to the `users.txt` file. This was then used along with
    the `AclFileAttributeView.class` parameter as the arguments to the `getFileAttributeView`
    method. This returned an instance of the `AclFileAttributeView`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `AclFileAttributeView` interface has three methods: `name, getAcl`, and
    `setAcl`. For this example, only the `getAcl` method was used, which returned
    a list of `AclEntry` elements. Each entry represents a specific ACL for the file.'
  prefs: []
  type: TYPE_NORMAL
- en: A for each loop was used to iterate through the list. The user principal's name
    and the entry type were displayed. Next the `displayEntryFlags` and `displayPermissions`
    methods were invoked to display more information about the entries.
  prefs: []
  type: TYPE_NORMAL
- en: These two methods are similar in construction. A check was made to determine
    if there are any elements in the sets and the appropriate messages were displayed.
    Next, each element of the sets was displayed on a single line to conserve vertical
    space on the output.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `AclFileAttributeView` is derived from the `java.nio.file.attribute.FileOwnerAttributeView`
    interface. This provides access to the `getOwner` and `setOwner` methods. These
    methods either return or set a `UserPrincipal` object respectively for the file
    or directory.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are three `AclFileAttributeView` methods:'
  prefs: []
  type: TYPE_NORMAL
- en: The `getAcl` method, which returns a list of ACL entries as illustrated previously
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `setAcl` method, which allows us to add a new attribute to the file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `name` method, which simply returns **acl**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `getAcl` method will return a list of `AclEntrys`. One of the elements
    of an entry is a `java.nio.file.attribute.UserPrincipal` object. As we saw in
    the earlier example, this represents the users who have access to the file. An
    alternate technique to access a user is to use the `java.nio.file.attribute.UserPrincipalLookupService`
    class. An instance of this class can be obtained using the `FileSystem` class''
    `getUserPrincipalLookupService` method, shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: There are two methods available to the service that can look for the users either
    by username or by group name. In the previous code we used the `Administrators`
    group and the user `Richard`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add this code to the previous example and change the names to reflect groups
    and users on your system. When the code executes, you should receive output similar
    to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**BUILTIN\Administrators**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Richard-PC\Richard**'
  prefs: []
  type: TYPE_NORMAL
- en: However, note that the `UserPrincipal` and `java.nio.file.attribute.GroupPrincipal`
    objects' methods provide little more information than the names of the users.
    User or group names may or may not be case-sensitive depending on the operating
    system. If an invalid name is used, a `java.nio.file.attribute.UserPrincipalNotFoundException`
    is thrown.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Managing file ownership and permissions is discussed in [Chapter 4](ch04.html
    "Chapter 4. Managing Files and Directories"), *Managing Files and Directories*,
    in the *Setting file and directory owner* recipe. Also covered in [Chapter 4](ch04.html
    "Chapter 4. Managing Files and Directories") is the setting of ACL attributes
    as illustrated in the *Managing ACL file permissions* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Maintaining user-defined file attributes using the UserDefinedFileAttributeView
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `java.nio.file.attribute.UserDefinedFileAttributeView` interface permits
    the attachment of a non-standard attribute to a file or directory. These types
    of attributes are sometimes called **extended** attributes. Typically, a user-defined
    attribute stores metadata about a file. This data is not necessarily understood
    or used by the filesystem.
  prefs: []
  type: TYPE_NORMAL
- en: These attributes are stored as a name/value pair. The name is a `String` and
    the value is stored as a `ByteBuffer` object. The size of this buffer should not
    exceed `Integer.MAX_VALUE`.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A user-defined attribute must first be attached to a file. This is accomplished
    by:'
  prefs: []
  type: TYPE_NORMAL
- en: Obtaining an instance of a `UserDefinedFileAttributeView` object
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Creating an attribute in the form of a `String` name and a `ByteBuffer` value
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using the `write` method to attach the attribute to a file
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The process of reading a user-defined attribute is illustrated in the *There's
    more..*. section of this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create a new console application. In the `main` method, we will create a user-defined
    attribute called `publishable` and attach it to the `users.txt` file. Use the
    following `main` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Execute the application. Your output should appear as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Publishable set**'
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First, we created a `Path` object representing the `users.txt` file. We then
    used the `Files` class' `getFileAttributeView` method using the `Path` object,
    and `UserDefinedFileAttributeView.class` for the second argument. This returns
    an instance of the `UserDefinedFileAttributeView` for the file.
  prefs: []
  type: TYPE_NORMAL
- en: Using this object, we execute the `write` method against it using the attribute
    `publishable`, and created a `java.nio.ByteBuffer` object containing the attribute
    value `true`. The `java.nio.Charset` class' `defaultCharset` method returns a
    `Charset` object that uses the locale and character set used by the underlying
    operating system. The `encode` method took the `String` and returned a `ByteBuffer`
    for the attribute value. We then displayed a simple message indicating the successful
    completion of the process.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `read` method is used to read an attribute. To get a user-defined attribute
    associated with a file, the following steps need to be followed:'
  prefs: []
  type: TYPE_NORMAL
- en: Obtain an instance of a `UserDefinedFileAttributeView` object.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a `String` for the attribute name.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Allocate a `ByteBuffer` to hold the value.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the `read` method to get the attribute value.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following code sequence accomplishes this task for the previously attached
    `publishable` attribute:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: A `String` for the attribute name was created first. Next, a `ByteBuffer` was
    created to hold the attribute value to be retrieved. The `allocate` method allocates
    space as specified by the `UserDefinedFileAttributeView` interface's `size` method.
    This method determines the size of the attached attribute and returns the size.
  prefs: []
  type: TYPE_NORMAL
- en: The `read` method is then executed against the `view` object. The buffer is
    populated with the attribute value. The `flip` method resets the buffer. The buffer
    is converted to a `String` object using the `decode` method, which uses the operating
    system's default character set.
  prefs: []
  type: TYPE_NORMAL
- en: 'Replace the user-defined attribute `write` sequence in the `main` method with
    this `read` sequence. When the application is executed, you should get an output
    similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**true**'
  prefs: []
  type: TYPE_NORMAL
- en: There is also a `delete` method that is used to remove a user-defined attribute
    from a file or directory. In addition, note that the use of a `UserDefinedFileAttributeView`
    object requires a runtime permission of `accessUserDefinedAttributes`.
  prefs: []
  type: TYPE_NORMAL
