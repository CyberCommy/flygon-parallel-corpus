- en: Chapter 5. Working with Models
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The website we just created contains only static data; however, what we want
    to do is store data so as to automate all the tasks. That's why there are models;
    they will put a link between our views and the database.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: Django, like many frameworks, proposes database access with an abstraction layer.
    This abstraction layer is called **object-relational mapping** (**ORM**). This
    allows you to use the Python implementation object in order to access the data
    without worrying about using a database. With this ORM, we do not need to use
    the SQL query for simple and slightly complex actions. This ORM belongs to Django,
    but there are others such as **SQLAlchemy**, which is a quality ORM used especially
    in the Python TurboGears framework.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: A model is an object that inherits from the `Model` class. The `Model` class
    is a Django class that is specifically designed for data persistence.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: We define fields in models. These properties allow us to organize data within
    a model. To make a connection between databases and SQL, we can say that a model
    is represented by a table in the database, and a model property is represented
    by a field in the table.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will explain:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: How to set up access to the database
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to install South for the database migrations
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to create simple models
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to create a relationship between models
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to extend our models
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to use the administration module
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Databases and Django
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Django can interface with many databases. However, during the development of
    our application, we use SQLite libraries that are included in Django.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: 'We will modify `settings.py` to set our connection to the database:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The following is the description of the properties mentioned in the preceding
    code:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: The `ENGINE` property specifies the type of database to be used.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `NAME` property defines the path and final name of the SQLite database.
    We use a syntax using `os.path.join` to our code, and it is compatible with all
    operating systems. The file's database will be contained in the project directory.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The other properties are useful when we use a database server, but as we will
    use SQLite, we do not need to define them.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Migrations with South
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**South** is a very useful extension of Django. It facilitates the migration
    of the database when changing fields. It also keeps a history of the changes in
    the structure of the database.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: We talk about it now because it must be installed before the creation of the
    database to work correctly.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: Django 1.7 incorporates a migration system. You will not need to use South anymore
    to make the migration of a Django application. You can find more information about
    the migration systems integrated into Django 1.7 at [https://docs.djangoproject.com/en/dev/topics/migrations/](https://docs.djangoproject.com/en/dev/topics/migrations/).
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: Installing South
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To install South, we use the `pip` command. We have already used it to install
    Django. To do this, run the following command:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Before actually using South, we must change the `settings.py` file for South
    to be well integrated in Django. To do this, you must go to `INSTALLED_APPS` and
    add the following lines (depending on the version, it is possible that the installation
    of South added the line):'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Using the South extension
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before we make our first migrations and generate our database, we also have
    to create the schema migration. To do this, we must run the following command:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Then, we must perform an initial migration:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Django asks us to first create an account. This account will be a superuser.
    Remember the login and password that you enter; you will need this information
    later.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: 'South is now fully operational. Each time we need to modify the models, we
    will make a migration. However, for the migration to be made correctly, you must
    keep the following things in mind:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: Never perform the Django `syncdb` command. After running `syncdb --migrate`
    for the first time, never run it again. Use `migrate` afterwards.
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Always put a default value in the new fields; otherwise, we will be asked to
    assign a value.
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Each time we finish editing our models, we must execute the following two commands
    in the correct order:'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Creating simple models
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To create models, we must have already studied the application in depth. Models
    are the basis of any application because they will store all the data. Therefore,
    we must prepare them carefully.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: 'Concerning our `Tasksmanager` application, we need a user who saves tasks performed
    on a project. We''ll create two models: `User`_`django` and `Project`.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: We need to store our models in the `models.py` file. We will edit the `models.py`
    file in the `TasksManager` folder. We do not need to modify the configuration
    file, because when you need the model, we will have to import it.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: 'The file already exists and has a line. The following line allows you to import
    the base model of Django:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The UserProfile model
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To create the `UserProfile` model, we ask ourselves the question, "*what data
    about the user do we need to keep?*". We will need the following data:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: The user's real name
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A nickname that will identify each user
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A password that will be useful for user authentication
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Phone number
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Date of birth (this is not essential, but we must study the dates!)
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The date and time of the last connection
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: E-mail address
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Age (in years)
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The creation date of the user account
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A specialization, if it is supervisor
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The type of user
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A supervisor, if you are a developer
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The model that is needed is as follows:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: We have not defined the specialization, type of user, and supervisor, because
    these points will be seen in the next part.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding code, we can see that `Django_user` inherits from the `Model`
    class. This `Model` class has all the methods that we will need to manipulate
    the models. We can also override these methods to customize the use of models.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: 'Within this class, we added our fields by adding an attribute in which we specified
    the values. For example, the first name field is a character string type with
    a maximum length of 50 characters. The `verbose_name` property will be the label
    that defines our field in forms. The following is a list of the commonly used
    field types:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: '`CharField`: This is a character string with a limited number of characters'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TextField`: This is a character string with unlimited characters'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`IntegerField`: This is an integer field'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DateField`: This is a date field'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DateTimeField`: This field consists of the date as well as the time in hours,
    minutes, and seconds'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DecimalField`: This is a decimal number that can be defined precisely'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Django automatically saves an `id` field in auto increment. Therefore, we do
    not need to define a primary key.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: The Project model
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To save our projects, we will need the following data:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: Title
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Description
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Client name
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'These factors allow us to define the following model:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: To comply with good practices, we would not have had to define a text field
    for the customer, but define a relationship to a client table. To simplify our
    first model, we define a text field for the client name.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: The relationship between the models
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Relationships are elements that join our models. For example, in the case of
    this application, a task is linked to a project. Indeed, the developer performs
    a task for a particular project unless it is a more general task, but it's out
    of the scope of our project. We define the one-to-many type of relationship in
    order to denote that a task always concerns a single project but a project can
    be connected to many tasks.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two other kinds of relationships:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: The one-to-one relationship sets apart a model in two parts. The resulting database
    will create two tables linked by a relationship. We will see an example in the
    chapter on the authentication module.
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The many-to-many relationship defines relationships with any model that can
    be connected to several other models of the same type. For example, an author
    can publish several books and a book may have several authors.
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating the task model with relationships
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For the task model, we need the following elements:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: A way to define the task in a few words
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A description for more details about the task
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A past life
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Its importance
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The project to which it is attached
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The developer who has created it
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This allows us to write the following model:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'In this model, we have defined two foreign key field types: `project` and `app_user`.
    In the database, these fields contain the login details of the record to which
    they are attached in the other table.'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: 'The `project` field that defines the relationship with the `Project` model
    has two additional attributes:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: '`Null`: This decides whether the element can be defined as null. The fact that
    this attribute is in the `project` field means that a task is not necessarily
    related to a project.'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Default`: This sets the default value that the field will have. That is, if
    we do not specify the value of the project before saving the model, the task will
    not be connected to a domain.'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Extending models
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The inheritance model allows the use of common fields for two different models.
    For example, in our `App_user` model, we cannot determine whether a random recording
    will be a developer or supervisor.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: 'One solution would be to create two different models, but we would have to
    duplicate all the common fields such as name, username, and password, as follows:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: It would be a shame to duplicate the code, but it is the principle that Django
    and DRY have to follow. That is why there is an inheritance model.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: Indeed, the legacy model is used to define a master model (or supermodel), which
    contains the common fields to several models. Children models automatically inherit
    the fields of the supermodel.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: 'Nothing is more explicit than an example; we will modify our classes, `Developer`
    and `Supervisor`, to make them inherit `App_user`:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The result of the legacy database allows us to create three tables:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: A table for the `App_user` model that contains the fields for the properties
    of the model
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A table for the `Supervisor` model, with a text field for specialization and
    a field that has a foreign key relationship with the `App_user` table
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A `Developer` table with two fields: a field in liaison with the `Supervisor`
    table and a field that links to the `App_user` table'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now that we have separated our two types of users, we will modify the relationship
    with `App_user` because only the developer will record his or her tasks. In the
    `Tasks` model, we have the following line:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'This code is transformed as follows:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: For the generation of the database order to work, we must put models in the
    correct order. Indeed, if we define a relationship with a model that is not yet
    defined, Python will raise an exception. For the moment, the models will need
    to be defined in the order described. Later, we shall see how to work around this
    limitation.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will perform queries on the model. This requires the
    database to be synchronized with the models. We must first migrate South before
    starting the next chapter.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: 'To perform the migration, we must use the commands we''ve seen at the beginning
    of the chapter. To simplify the migration, we can also create a batch file in
    the Python folder, where we will put the following lines:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The following is a bash script you can create in the `Work_manager` folder
    that can perform the same thing on Debian Linux:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: This way, when you migrate South, it will execute this file. The `pause` command
    allows you to look at the results or errors displayed without closing the window.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: The admin module
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The administration module is very convenient and is included by default with
    Django. It is a module that will maintain the content of the database without
    difficulty. This is not a database manager because it cannot maintain the structure
    of the database.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: One question that you may ask is, "*what does it have other than a management
    tool database?*". The answer is that the administration module is fully integrated
    with Django and uses these models.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are its advantages:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: It manages the relationships between models. This means that if we want to save
    a new developer, the module will propose a list of all the supervisors. In this
    way, it will not create a non-existent relationship.
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It manages Django permissions. You can set permissions for users according to
    models and CRUD operations.
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is quickly established.
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Being based on Django models and not on the database, this module allows the
    user to edit the recorded data.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: Installing the module
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To implement the administration module, edit the `settings.py` file. In the
    `INSTALLED_APPS` setting, you need to add or uncomment the following line:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'You also have to edit the `urls.py` file by adding or uncommenting the following
    lines:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The line that imports the administration module has to be at the beginning of
    the file with other imports. The line that runs the `autodiscover()` method must
    be found after the imports and before the `urlpatterns` definition. Finally, the
    last line is a URL that should be in `urlpatterns`.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: 'We also have to create an `admin.py` file in the `TasksManager` folder in which
    we will define the styles we want to integrate into the management module:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Now that we have configured the administration module, we can easily manage
    our data.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
- en: Using the module
  id: totrans-140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To use the administration module, we must connect to the URL that we have just
    defined: `http://localhost:8000/admin/`.'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
- en: 'We must connect with the logins defined when creating the database:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: Once we are connected, the model list appears.
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If we click on the **Supervisor** model link, we arrive at a page where we can
    add a supervisor by using the button at the top-right corner of the window:![Using
    the module](img/00017.jpeg)
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: By clicking on this button, we load a page consisting of a form. This form automatically
    provides practical tools to manage dates and times:![Using the module](img/00018.jpeg)
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's add a new supervisor and then add a developer. When you want to choose
    the supervisor, you can see the one we have just created in a combobox. The green
    cross on the right-hand side allows you to quickly create a supervisor.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
- en: In the following chapter, we will define the `str` method for our models. This
    will improve the display lists of objects in this management module.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
- en: Advanced usage of models
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We studied the basics of the models that allow us to create simple applications.
    Sometimes, it is necessary to define more complex structures.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
- en: Using two relationships for the same model
  id: totrans-150
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Sometimes, it is useful to store two foreign keys (or more) in a single model.
    For example, if we want two developers to work in parallel on the same task, we
    must use the `related_name` property in our models. For example, our `Task` model
    contains two relationships with the following lines:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Further in this book, we will not use these two relationships. To effectively
    follow this book, we must return to our previously defined `Task` model.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-154
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Here, we define two developers on the same task. Best practices advise us to
    create a many-to-many relationship in the `Task` model. The thorough argument
    allows you to specify an intermediate table to store additional data. This is
    an optional step. An example of this type of relationship is as follows:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Defining the str method
  id: totrans-157
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As already mentioned in the section on the use of the admin module, the `__str__()`
    method will allow a better view of our models. This method will set the string
    that will be used to display our model instance. When Django was not compatible
    with Python 3, this method was replaced by the `__unicode__()` method.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, when we added a developer, the drop-down list that defines a supervisor
    showed us the "Supervisor object" lines. It would be more helpful to display the
    name of the supervisor. In order to do this, change our `App_user` class and add
    the `str()` method:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，当我们添加了一个开发者时，定义主管的下拉列表显示了“主管对象”行。显示主管的姓名会更有帮助。为了做到这一点，改变我们的`App_user`类并添加`str()`方法：
- en: '[PRE21]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'This method will return the name of the supervisor for the display and allows
    you to manage the administration easily:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 这个方法将返回主管的姓名以便显示，并允许您轻松管理管理：
- en: '![Defining the str method](img/00019.jpeg)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![定义str方法](img/00019.jpeg)'
- en: Summary
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: 'In this chapter, we learned migration with South. We also learned how to create
    simple models and relationships between the models. Furthermore, we learned how
    to install and use the admin module. In the next chapter, we will learn how to
    manipulate our data. We will learn how to use four main operations on the data:
    adding, reading (and research), modification, and deletion.'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了使用South进行迁移。我们还学习了如何创建简单的模型和模型之间的关系。此外，我们还学习了如何安装和使用管理模块。在下一章中，我们将学习如何操作我们的数据。我们将学习如何对数据进行四种主要操作：添加、读取（和研究）、修改和删除。
