- en: Chapter 5. Auditing Databases
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This chapter shows you how to do some things that in many situations might be
    illegal, unethical, a violation of the terms of service, or just not a good idea.
    It is provided here to give you information that may be of use to protect yourself
    against threats and make your own system more secure. Before following these instructions,
    be sure you are on the right side of the legal and ethical line... use your powers
    for good!
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Listing MySQL databases
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Listing MySQL users
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Listing MySQL variables
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finding root accounts with empty passwords in MySQL servers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Brute forcing MySQL passwords
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Detecting insecure configurations in MySQL servers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Brute forcing Oracle passwords
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Brute forcing Oracle SID names
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Retrieving MS SQL server information
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Brute forcing MS SQL passwords
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dumping the password hashes of an MS SQL server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running commands through the command shell on MS SQL servers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finding sysadmin accounts with empty passwords on MS SQL servers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Listing MongoDB databases
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Retrieving MongoDB server information
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Listing CouchDB databases
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Retrieving CouchDB database statistics
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Web applications must store different types of information. Depending on the
    case, there could be millions of records needed to be stored somewhere and that
    is where databases come in. Database servers are crucial since they provide a
    convenient way of managing information, and programming APIs are available for
    almost any language and database type.
  prefs: []
  type: TYPE_NORMAL
- en: Nmap NSE has added support for numerous database servers. System administrators
    will find it handy that with the help of Nmap we can automate several tasks when
    dealing with a bunch of database servers, such as running a query to informs us
    about the status. On the other hand, securing a database server must be done carefully
    and is as important as securing the web server. Nmap also helps us with this by
    supporting automated actions such as checking for empty root passwords and insecure
    configuration.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter covers different NSE scripts for the most common relational databases
    such as MySQL, MS SQL, and Oracle and `nosql` databases such as CouchDB and MongoDB.
    We start by introducing simple tasks such as retrieving status information and
    listing databases, tables, and instances. We also cover brute force password auditing,
    as finding weak passwords, or in some cases no password at all, in databases is
    a common occurrence during penetration testing assessments. In this chapter I
    also talk about one of my favorite NSE scripts that was written for auditing insecure
    configurations using parts of the CIS MySQL security benchmark. After this chapter
    I hope you will learn how to implement different security and integrity checks
    to your infrastructure with the help of these powerful NSE scripts.
  prefs: []
  type: TYPE_NORMAL
- en: Listing MySQL databases
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: MySQL servers may contain several databases. As system administrators with legitimate
    access or penetration testers who just compromised the server, we can list the
    available databases using Nmap.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe teaches how to use Nmap NSE to list databases in a MySQL server.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open a terminal and enter the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The databases should be listed under the script results.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The argument `-p3306 --script mysql-databases --script-args mysqluser=<user>,mysqlpass=<password>`
    tells Nmap to attempt a connection to the MySQL server using the given credentials
    (`--script-args mysqluser=<user>,mysqlpass=<password>`) and tries to list all
    the available databases in the server.
  prefs: []
  type: TYPE_NORMAL
- en: The script `mysql-databases` was written by Patrik Karlsson to help Nmap users
    enumerate databases in MySQL installations.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To try to enumerate databases if an empty root account is found we can use
    the command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: If the service is running on an port different than 3306 we can use Nmap's service
    detection (`-sV`), or set the port manually with the argument `-p`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Listing MySQL users* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Listing MySQL variables* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Finding root accounts with empty passwords in MySQL servers* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Brute forcing MySQL passwords* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Detecting insecure configurations in MySQL servers* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Listing MySQL users
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: MySQL servers support granular access to databases, meaning that there could
    be several users in a single installation.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe shows how to use Nmap to enumerate users in MySQL servers.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open a terminal and type the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'A list of usernames will be included in the `mysql-users` section:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The argument `-p3306 --script mysql-users --script-args mysqluser=<user>,mysqlpass=<pass>`
    makes Nmap launch the script `mysql-users` if a MySQL server is found on port
    3306.
  prefs: []
  type: TYPE_NORMAL
- en: The script `mysql-users` was submitted by Patrik Karlsson and it enumerates
    usernames in MySQL servers using the given authentication credentials. If no authentication
    credentials are set with the script arguments `mysqluser` and `mysqlpass`, it
    will attempt to use the results of `mysql-brute` and `mysql-empty-password`.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To enumerate databases and users in MySQL installations with root accounts
    with an empty password use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: If the MySQL server is running on a different port than 3306, you may use Nmap's
    service scan, or set the port manually with the argument `-p`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Listing MySQL databases* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Listing MySQL variables* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Finding root accounts with empty passwords in MySQL servers* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Brute forcing MySQL passwords* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Detecting insecure configurations in MySQL servers* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Listing MySQL variables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: MySQL servers have several environment variables that are used in different
    ways by system administrators and web developers.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe shows you how to use Nmap to list environment variables in MySQL
    servers.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open your terminal and enter the following Nmap command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The MySQL variables will be listed under `mysql-variables`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We used the arguments `-p3306 --script mysql-variables --script-args mysqluser=<root>,mysqlpass=<pass>`
    to make Nmap initiate the script `mysql-variables` if a MySQL server is found
    running on port 3306.
  prefs: []
  type: TYPE_NORMAL
- en: The script `mysql-variables` was submitted by Patrik Karlsson and it uses the
    script arguments `mysqluser` and `mysqlpass` as authentication credentials against
    a MySQL server to try to enumerate system variables.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If the MySQL server is running on a different port than 3306 we may use Nmap's
    service detection or manually set the port with the `-p` argument.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'To retrieve databases, usernames, and variables from a MySQL server with an
    empty root password, use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Listing MySQL databases* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Listing MySQL users* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Finding root accounts with empty passwords in MySQL servers* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Brute forcing MySQL passwords* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Detecting insecure configurations in MySQL servers* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finding root accounts with empty passwords in MySQL servers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: New system administrators often make the mistake of leaving the root account
    of a MySQL server with no password. This is a blatant security vulnerability that
    could be exploited by attackers. Penetration testers and system administrators
    need to detect these vulnerable installations before the bad guys do.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe will show you how to use Nmap to check for empty root passwords
    on MySQL servers.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open a terminal and enter the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'If the accounts `root` or `anonymous` have an empty password, it will be shown
    in the script results:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The argument `-p3306 --script mysql-empty-password` makes Nmap launch the NSE
    script `mysql-empty-password` if a MySQL server is found running on port 3306.
  prefs: []
  type: TYPE_NORMAL
- en: This script was submitted by Patrik Karlsson and it connects to a MySQL server
    and tries the accounts `root` and `anonymous` with an empty password.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To try a custom list of usernames you need to modify the NSE script `mysql-empty-password.nse`
    located in your script''s directory. Find the following line in the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'And replace it with your own username list, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Just save it and run it as shown previously:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Listing MySQL databases* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Listing MySQL users* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Listing MySQL variables* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Brute forcing MySQL passwords* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Detecting insecure configurations in MySQL servers* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Brute forcing MySQL passwords
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Web servers sometimes return database connection errors that reveal the MySQL
    username used by the web application. Penetration testers could use this information
    to perform brute force password auditing.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe describes how to launch dictionary attacks against MySQL servers
    by using Nmap.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To perform brute force password auditing against MySQL servers by using Nmap,
    use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'If valid credentials are found, they will be included in the `mysql-brute`
    output section:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The script `mysql-brute` was written by Patrik Karlsson and it is really helpful
    when auditing MySQL servers. It performs dictionary attacks to find valid credentials.
    The success rate will obviously depend on the dictionary files used when running
    the script.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The MySQL server might be running on a non-standard port. You can set the port
    manually by specifying the `-p` argument, or by using Nmap''s service detection:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: The script `mysql-brute` depends on the NSE libraries `unpwdb` and `brute`.
    These libraries have several script arguments that can be used to tune your brute
    force password auditing.
  prefs: []
  type: TYPE_NORMAL
- en: 'To use a different username and password lists, set the arguments `userdb`
    and `passdb`, respectively:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'To quit after finding one valid account, use the argument `brute.firstOnly`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'To set a different timeout limit, use the argument `unpwd.timelimit`. To run
    it indefinitely, set it to `0`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Brute modes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `brute` library supports different modes that alter the username/password
    combinations used in the attack. The available modes are:'
  prefs: []
  type: TYPE_NORMAL
- en: '`user`: For each user listed in `userdb`, every password in `passdb` will be
    tried'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '`pass`: For each password listed in `passdb`, every user in `userdb` will be
    tried'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '`creds`: This requires the additional argument `brute.credfile`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Listing MySQL databases* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Listing MySQL users* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Listing MySQL variables* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Finding root accounts with empty passwords in MySQL servers* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Detecting insecure configurations in MySQL servers* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Detecting insecure configurations in MySQL servers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Insecure configurations in databases could be abused by attackers. The **Center
    for Internet Security** (**CIS**) publishes a security benchmark for MySQL, and
    Nmap can use this to audit the security configurations of a MySQL server.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe shows how to detect insecure configurations in MySQL servers by
    using Nmap.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To detect insecure configurations in MySQL servers, enter the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Each control will be reviewed and a legend of `PASS`, `FAIL`, or `REVIEW` will
    be included in the results:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The script arguments `-p3306 --script mysql-audit` tell Nmap to initiate the
    NSE script `mysql-audit` if a MySQL server is found running on port 3306.
  prefs: []
  type: TYPE_NORMAL
- en: The script `mysql-audit` was developed by Patrik Karlsson and it checks for
    insecure configurations by using parts of the benchmark CIS MySQL. It is also
    very flexible and allows custom checks by specifying alternate rules.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If your MySQL server has administrative accounts other than `root` and `debian-sys-maint`,
    you should locate the following line in `$ nmap_path/nselib/data/mysql-cis.audit`
    and add them to set up the script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Remember that you can write your own rules in a separate file and use the script
    argument `mysql-audit.fingerprintfile` to reference this. Audit rules look something
    like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'MySQL servers may run on a non-standard port. Use Nmap''s service detection
    (`-sV`) or set the port manually by specifying the port argument (`-p`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Listing MySQL databases* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Listing MySQL users* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Listing MySQL variables* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Finding root accounts with empty passwords in MySQL servers* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Brute forcing MySQL passwords* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Brute forcing Oracle passwords
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: System administrators managing several databases often need to check for weak
    passwords as part of the organization's policy. Penetration testers also take
    advantage of weak passwords to gain unauthorized access. Conveniently, Nmap NSE
    offers a way of performing remote brute force password auditing against Oracle
    database servers.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe shows how to perform brute force password auditing against Oracle
    by using Nmap.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open a terminal and run Nmap with the following argument:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Any valid credentials found will be included in the results in the script output
    section:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The argument `-sV --script oracle-brute --script-args oracle-brute.sid=TEST`
    makes Nmap initiate the script `oracle-brute` against the instance `TEST` if an
    Oracle server is detected.
  prefs: []
  type: TYPE_NORMAL
- en: The script `oracle-brute` was submitted by Patrik Karlsson and it helps penetration
    testers and system administrators launch dictionary attacks against Oracle servers
    to try to obtain valid credentials.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Update the file `nselib/data/oracle-default-accounts.lst` to add any default
    accounts.
  prefs: []
  type: TYPE_NORMAL
- en: The script `oracle-brute` depends on the NSE libraries `unpwdb` and `brute`.
    These libraries have several script arguments that can be used to tune your brute
    force password auditing.
  prefs: []
  type: TYPE_NORMAL
- en: 'To use different username and password lists, set the arguments `userdb` and
    `passdb`, respectively:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'To quit after finding one valid account, use the argument `brute.firstOnly`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'To set a different timeout limit, use the argument `unpwd.timelimit`. To run
    it indefinitely, set it to `0`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Brute modes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The brute library supports different modes that alter the username/password
    combinations used in the attack. The available modes are:'
  prefs: []
  type: TYPE_NORMAL
- en: '`user`: For each user listed in `userdb`, every password in `passdb` will be
    tried'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: '`pass`: For each password listed in `passdb`, every user in `userdb` will be
    tried'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: '`creds`: This requires the additional argument `brute.credfile`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Brute forcing Oracle SID names* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Brute forcing Oracle SID names
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Oracle servers have SID names, and penetration testers need to find them. Thanks
    to Nmap we can attempt to list them by performing a dictionary attack against
    the TNS listener.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe shows how to brute force Oracle SID names by using Nmap.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To brute force Oracle SID names, use the following Nmap command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'All of the SIDs found will be included in the NSE script output section for
    `oracle-sid-brute`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The argument `-sV --script oracle-sid-brute` tells Nmap to initiate service
    detection (`-sV`) and use the NSE script `oracle-sid-brute`.
  prefs: []
  type: TYPE_NORMAL
- en: The NSE script `oracle-sid-brute` was submitted by Patrik Karlsson to help penetration
    testers enumerate Oracle SIDs by performing a dictionary attack against Oracle's
    TNS. This script will be executed if a host has a running service `oracle-tns`,
    or has port 1521 open.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'By default, the script uses the dictionary located at `nselib/data/oracle-sids`
    but you can specify a different file by setting the script argument `oraclesids`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Brute forcing Oracle passwords* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Retrieving MS SQL server information
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: System administrators and penetration testers often need to gather as much host
    information as possible. MS SQL databases are common in infrastructures based
    on Microsoft technologies, and Nmap can help us gather information from them.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe shows how to retrieve information from an MS SQL server.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To retrieve information from an MS SQL server by using Nmap, run the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'MS SQL server information, such as instance name, version number, and port,
    will be included in the script output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: MS SQL servers usually run on port 1433\. We used the argument `-p1433 --script
    ms-sql-info` to initiate the NSE script `ms-sql-info` if a MS SQL server was running
    on that port.
  prefs: []
  type: TYPE_NORMAL
- en: The script `ms-sql-info` was submitted by Chris Woodbury and Thomas Buchanan.
    It connects to an MS SQL server and retrieves the instance name, version name,
    version number, product name, service pack level, patch list, TCP/UDP port, and
    whether it is clustered or not. It collects this information from the SQL Server
    Browser service if available (UDP port 1434) or from a probe to the service.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If port 445 is open, you can use it to retrieve the information via pipes.
    It is required that you set the argument `mssql.instance-name` or `mssql.instance-all`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: Force scanned ports only in NSE scripts for MS SQL
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The NSE scripts `ms-sql-brute`, `ms-sql-config.nse`, `ms-sql-empty-password`,
    `ms-sql-hasdbaccess.nse,ms-sql-info.nse`, `ms-sql-query.nse`, `ms-sql-tables.nse`,
    and `ms-sql-xp-cmdshell.nse` may try to connect to ports that were not included
    in your scan. To limit NSE to only use scanned ports, use the argument `mssql.scanned-ports-only`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Brute forcing MS SQL passwords* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Dumping the password hashes of an MS SQL server* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Running commands through the command shell on MS SQL servers* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Finding sysadmin accounts with empty passwords on MS SQL servers* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Brute forcing MS SQL passwords
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: System administrators and penetration testers often need to check for weak passwords
    as part of the organization's security policy. Nmap can help us to perform dictionary
    attacks against MS SQL servers.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe shows how to perform brute force password auditing of MS SQL servers
    by using Nmap.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To perform brute force password auditing against an MS SQL server, run the
    following Nmap command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'If any valid accounts are found, they will be included in the script output
    section:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: MS SQL servers usually run on TCP port 1433\. The arguments `-p1433 --script
    ms-sql-brute` initiate the NSE script `ms-sql-brute` if an MS SQL server is found
    running on port 1433.
  prefs: []
  type: TYPE_NORMAL
- en: The script `ms-sql-brute` was written by Patrik Karlsson. It performs brute
    force password auditing against MS SQL databases. This script depends on the library
    `mssql`. You can learn more about it at `http://nmap.org/nsedoc/lib/mssql.html`.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The database server might be running on a non-standard port. You can set the
    port manually by specifying the `-p` argument or by using Nmap''s service detection:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'Remember that if an SMB port is open, we can use pipes to run this script by
    setting the argument `mssql.instance-all` or `mssql.instance-name`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: The script `ms-sql-brute` depends on the NSE libraries `unpwdb` and `brute`.
    These libraries have several script arguments that can be used to tune your brute
    force password auditing.
  prefs: []
  type: TYPE_NORMAL
- en: 'To use different username and password lists, set the arguments `userdb` and
    `passdb`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'To quit after finding one valid account, use the argument `brute.firstOnly`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'To set a different timeout limit, use the argument `unpwd.timelimit`. To run
    it indefinitely, set it to `0`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: Brute modes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The brute library supports different modes that alter the username/password
    combinations used in the attack. The available modes are:'
  prefs: []
  type: TYPE_NORMAL
- en: '`user`: For each user listed in `userdb`, every password in `passdb` will be
    tried'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: '`pass`: For each password listed in `passdb`, every user in `userdb` will be
    tried'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: '`creds`: This requires the additional argument `brute.credfile`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Retrieving MS SQL server information* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Dumping the password hashes of an MS SQL server* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Running commands through the command shell on MS SQL servers* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Finding sysadmin accounts with empty passwords on MS SQL servers* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dumping the password hashes of an MS SQL server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After gaining access to an MS SQL server, we can dump all of the password hashes
    of an MS SQL server to compromise other accounts. Nmap can help us to retrieve
    these hashes in a format usable by the cracking tool, **John the Ripper**.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe shows how to dump crackable password hashes of an MS SQL sever with
    Nmap.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To dump all the password hashes of an MS SQL server with an empty sysadmin
    password, run the following Nmap command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'The password hashes will be included in the `ms-sql-dump-hashes` script output
    section:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: MS SQL servers usually run on TCP port 1433\. The argument `-p1433 --script
    ms-sql-empty-password,ms-sql-dump-hashes` initiates the script `ms-sql-empty-password`,
    which finds an empty root sysadmin account, and then runs script `ms-sql-dump-hashes`
    if an MS SQL server is found running on port 1433.
  prefs: []
  type: TYPE_NORMAL
- en: The script `ms-sql-dump-hashes` was written by Patrik Karlsson and its function
    is to retrieve password hashes of MS SQL servers in a format usable by cracking
    tools like John the Ripper. This script depends on the `mssql` library. You can
    learn more about it at `http://nmap.org/nsedoc/lib/mssql.html`.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If an SMB port is open, you can use it to run this script using pipes by setting
    the arguments `mssql.instance-all` or `mssql.instance-name`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Retrieving MS SQL server information* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Brute forcing MS SQL passwords* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Running commands through the command shell on MS SQL servers* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Finding sysadmin accounts with empty passwords on MS SQL servers* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running commands through the command shell on MS SQL servers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: MS SQL servers have a stored procedure called `xp_cmdshell`. This feature allows
    programmers to execute commands through the MS SQL server. Nmap helps us execute
    custom shell commands when this option is enabled.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe shows how to run Windows commands through MS SQL servers by using
    Nmap.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open your terminal and enter the following Nmap command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'The results will be included in the script output section:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: MS SQL servers usually run on TCP port 1433\. The argument `--script-args 'mssql.username="<user>",mssql.password=""'
    --script ms-sql-xp-cmdshell -p1433` makes Nmap initiate the script `ms-sql-xp-cmdshell`
    and then sets the authentication credentials to be used if an MS SQL server is
    running on port 1433.
  prefs: []
  type: TYPE_NORMAL
- en: The script `ms-sql-xp-cmdshell` was written by Patrik Karlsson. It attempts
    to run an OS command through the stored procedure `xp_cmdshell` found on MS SQL
    servers. This script depends on the `mssql` library. Its documentation can be
    found at [http://nmap.org/nsedoc/lib/mssql.html](http://nmap.org/nsedoc/lib/mssql.html).
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'By default, `ms-sql-xp-cmdshell` will attempt to run the command `ipconfig
    /all`, but you can specify a different one by using the script argument `ms-sql-xp-cmdshell.cmd`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: 'If the server does not have the `xp_cmdshell` procedure enabled, you should
    see the following message:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'If you did not provide any valid credentials for authentication, the following
    message will be displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: 'Remember that you can use this script in combination with `ms-sql-empty-password`
    to automatically retrieve the network configuration of an MS SQL server with a
    sysadmin account with an empty password:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Retrieving MS SQL server information* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Brute forcing MS SQL passwords* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Dumping the password hashes of an MS SQL server* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Finding sysadmin accounts with empty passwords on MS SQL servers* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finding sysadmin accounts with empty passwords on MS SQL servers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Penetration testers often need to check that no administrative account has a
    weak password. With some help from Nmap NSE, we can easily check that no host
    (or hosts) has a sysadmin account with an empty password.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe teaches us how to use Nmap to find MS SQL servers with an empty
    sysadmin password.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To find MS SQL servers with an empty `sa` account, open your terminal and enter
    the following Nmap command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: 'If an account with an empty password is found, it will be included in the script
    output section:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The parameter `-p1433 --script ms-sql-empty-password` makes Nmap initiate the
    NSE script `ms-sql-empty-password` if an MS SQL server is found running on port
    1433.
  prefs: []
  type: TYPE_NORMAL
- en: The script `ms-sql-empty-password` was submitted by Patrik Karlsson and improved
    by Chris Woodbury. It tries to connect to an MS SQL server using the username
    `sa` (the sysadmin account) and an empty password.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If port 445 is open, you can use it to retrieve information via pipes. It is
    required that you set the arguments `mssql.instance-name` or `mssql.instance-all`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: Force scanned ports only in NSE scripts for MS SQL
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The NSE scripts `ms-sql-brute`, `ms-sql-config.nse`, `ms-sql-empty-password`,
    `ms-sql-hasdbaccess.nse,ms-sql-info.nse`, `ms-sql-query.nse`, `ms-sql-tables.nse`,
    and `ms-sql-xp-cmdshell.nse` may try to connect to ports that were not included
    in your scan. To limit NSE to only use scanned ports, use the argument `mssql.scanned-ports-only`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Retrieving MS SQL server information* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Brute forcing MS SQL passwords* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Dumping the password hashes of an MS SQL server* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Running commands through the command shell on MS SQL servers* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Listing MongoDB databases
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: MongoDB may contain several databases in a single installation. Listing databases
    is useful to both system administrators and penetration testers, and there is
    an NSE script that allows them to do this easily, and even in an automated manner.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe describes how to use Nmap to list databases in MongoDB.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To list MongoDB databases by using Nmap, enter the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: 'The databases will be shown in the script output section:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We launch the NSE script `mongodb-databases` if a MongoDB server is found running
    on port 27017 (`-p 27017 --script mongodb-databases`).
  prefs: []
  type: TYPE_NORMAL
- en: The script `mongodb-databases` was submitted by Martin Holst Swende and it attempts
    to list all databases in a MongoDB installation.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: MongoDB documentation is located at [http://www.mongodb.org/display/DOCS/Home](http://www.mongodb.org/display/DOCS/Home).
  prefs: []
  type: TYPE_NORMAL
- en: This script depends on the library `mongodb`, and its documentation can be found
    at [http://nmap.org/nsedoc/lib/mongodb.html](http://nmap.org/nsedoc/lib/mongodb.html).
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Retrieving MongoDB server information* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Retrieving MongoDB server information
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: During a security assessment for a MongoDB installation, it is possible to extract
    build information such as system details and server status, including the number
    of connections available, uptime, and memory usage.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe describes how to retrieve server information from a MongoDB installation
    by using Nmap.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open your terminal and enter the following Nmap command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: 'The MongoDB server information will be included in the script output section:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The argument `-p 27017 --script mongodb-info` makes Nmap initiate the NSE script
    `mongodb-info` if the service is found running on port 27017.
  prefs: []
  type: TYPE_NORMAL
- en: The script `mongodb-info` was written by Martin Holst Swende. It returns server
    information including status and build details for a MongoDB database.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: MongoDB documentation is located at [http://www.mongodb.org/display/DOCS/Home](http://www.mongodb.org/display/DOCS/Home).
  prefs: []
  type: TYPE_NORMAL
- en: This script depends on the library `mongodb`, and its documentation can be found
    at [http://nmap.org/nsedoc/lib/mongodb.html](http://nmap.org/nsedoc/lib/mongodb.html).
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Listing MongoDB databases* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Listing CouchDB databases
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: CouchDB installations may contain numerous databases. Nmap provides an easy
    way to list the available databases for penetration testers or system administrators
    who may need to monitor for rogue databases.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe will show you how to list databases in CouchDB servers by using
    Nmap.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To list all databases in a CouchDB installation with Nmap, enter the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: 'The results will include all the databases returned by CouchDB in the `couchdb-databases`
    output section:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The argument `-p5984 --script couchdb-databases` tells Nmap to initiate the
    NSE script `couchdb-databases` if a CouchDB HTTP service is found running on port
    5984.
  prefs: []
  type: TYPE_NORMAL
- en: 'The script `couchdb-databases` was written by Martin Holst Swende, and it lists
    all of the available databases in CouchDB services. It queries the URI `/_all_dbs`,
    and extracts the information from the returned data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can find more information about the API used by CouchDB HTTP by visiting
    [http://wiki.apache.org/couchdb/HTTP_database_API](http://wiki.apache.org/couchdb/HTTP_database_API).
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Retrieving CouchDB database statistics* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Retrieving CouchDB database statistics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: CouchDB HTTP servers can return statistics that are invaluable to system administrators.
    This information includes requests per second, sizes, and other useful statistics.
    Fortunately for us, Nmap provides an easy way of retrieving this information.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe describes how to retrieve database statistics for CouchDB HTTP service
    by using Nmap.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open your terminal and run Nmap with the following arguments:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: 'The results will be included in the script output section:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The argument `-p5984 --script couchdb-stats` tells Nmap to launch the NSE script
    `couchdb-stats` if a CouchDB HTTP server is running.
  prefs: []
  type: TYPE_NORMAL
- en: 'The script `couchdb_stats` was submitted by Martin Holst Swende and it only
    performs one task: retrieving the runtime statistics of a CouchDB HTTP service.
    It does so by requesting the URI `/_stats/` and parsing the serialized data returned
    by the server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you find an installation not protected by authentication, you should also
    inspect the following URIs:'
  prefs: []
  type: TYPE_NORMAL
- en: '`/_utils/`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/_utils/status.html`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/_utils/config.html`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can learn more about the runtime statistics on CouchDB HTTP servers at [http://wiki.apache.org/couchdb/Runtime_Statistics](http://wiki.apache.org/couchdb/Runtime_Statistics).
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Listing CouchDB databases* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
