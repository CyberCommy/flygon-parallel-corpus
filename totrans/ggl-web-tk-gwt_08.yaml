- en: Chapter 8. Unit Tests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: JUnit is a widely used open-source Java unit-testing framework created by Erich
    Gamma and Kent Beck ([http://junit.org](http://junit.org)). It allows you to incrementally
    build a suite of tests as an integral part of your development effort and goes
    a long way towards increasing your confidence in the stability of your code base.
    JUnit was originally designed and used for testing Java classes, but has since
    been emulated and used in several other languages such as Ruby, Python, and C#.
    GWT utilizes and extends the JUnit framework to provide a way to test your AJAX
    code as simply as any other Java code. In this chapter, we will learn how to create
    and run unit tests for testing GWT applications and RPC services.
  prefs: []
  type: TYPE_NORMAL
- en: 'The tasks that we will address are:'
  prefs: []
  type: TYPE_NORMAL
- en: Test a GWT page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Test an asynchronous service
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Test a GWT page with an asynchronous service
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create and run a test suite
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Test a GWT Page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A GWT page essentially consists of widgets and we can test the page by checking
    for the presence of the widgets and also by checking for the widget values or
    parameters that we want. In this section, we will learn how create a unit test
    for a GWT page.
  prefs: []
  type: TYPE_NORMAL
- en: Time for Action—Creating a Unit Test
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We are going to test the `AutoFormFillPanel` page that we created in[Chapter
    4](ch04.html "Chapter 4. Interactive Forms") by using the testing support built
    into the GWT framework to write our unit test.
  prefs: []
  type: TYPE_NORMAL
- en: 'The steps are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the `GWT_HOME\junitCreator` command script by providing these parameters:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '![Time for Action—Creating a Unit Test](img/1007_08_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Open the generated Java file `com.packtpub.gwtbook.samples.client.panels.AutoFormFillPanelTest.java`
    in the test directory that was automatically created when we ran the `junitCreator`
    command. Add a new method named `testPanel()` to the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Create the form and add assertions for checking the name of the `Customer ID`
    label and the style associated with it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Add similar assertions to test all the other elements on the page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Add an entry to the `Samples.gwt.xml` file to inherit from the JUnit testing
    module:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Run the test in Eclipse by launching the `AutoFormFillPanelTest-hosted` launch
    configuration from the **Run** menu and get a similar screen to this:![Time for
    Action—Creating a Unit Test](img/1007_08_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What Just Happened?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The GWT framework supports unit testing by providing the `GWTTestCase` base
    class that extends from `TestCase` in the JUnit testing library. We execute the
    unit tests by compiling and running the class that extends from `GWTTestCase`.
    An invisible web browser is launched by the GWT framework when we run this subclass,
    and the tests are run inside the browser instance.
  prefs: []
  type: TYPE_NORMAL
- en: We use the `junitCreator` command script provided by GWT to generate the scaffolding
    necessary for creating and running a unit test. We provide the name of the test
    class as one of the parameters to this command. A sample test case that extends
    from the `GWTTestCase` class is generated along with two launch scripts—one for
    running in the host mode and the other for running in the web mode. These launch
    configurations are generated in Eclipse format, and can be run directly from inside
    the Eclipse environment.
  prefs: []
  type: TYPE_NORMAL
- en: 'The class that extends `GWTTestCase` must implement `getModuleMethod()` and
    return the fully-qualified name of the GWT module that contains the test class.
    So in our case, we return `com.packtpub.gwtbook.samples.Samples` from this method.
    This enables GWT to resolve the dependencies and load the classes needed for running
    the test correctly. If we are creating tests in a completely separate module,
    this method will need to return the name of that containing module. We also need
    to inherit from the GWT JUnit module in the module file of our project. That is
    why we need to add this line to the `Samples.gwt.xml` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Using `junitCreator` is the simplest way to start using the unit testing features
    in GWT. However, if you decide to create the various artifacts that are generated
    by this command yourself, here are the steps involved in creating and running
    a unit test in your GWT project:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a class that extends `GWTTestCase`. Implement the `getModuleName()` method
    in this class to return the fully-qualified name of the module that contains this
    class.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Compile the test case. In order to run your test, you *must* compile it first.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In order to run the tests, your `classpath` must include `junit-dev-linux.jar`
    or `gwt-dev-windows.jar` file, and `junit.jar` file in addition to the normal
    requirements.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Since `GWTTestCase` is just a subclass of `TestCase`, you have access to all
    the normal assertion methods from the JUnit library. You can use these to assert
    and test all kinds of things about the page, such as the structure of the document,
    including tables and other HTML elements and their layout.
  prefs: []
  type: TYPE_NORMAL
- en: Test an Asynchronous Service
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous section, we learned how to create simple tests for unit testing
    a GWT page. However, most non-trivial GWT applications will access and use AJAX
    services to retrieve data asynchronously. In this section, we will go through
    the steps required to test an asynchronous service such as the `AutoFormFillPanel`
    service that we created earlier in this book.
  prefs: []
  type: TYPE_NORMAL
- en: Time for Action—Testing the Asynchronous Service
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We are going to test `AutoFormFillPanelService`, which we created in[Chapter
    4](ch04.html "Chapter 4. Interactive Forms") :'
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the `GWT_HOME\junitCreator` command script by providing these parameters:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Open the generated Java file `com.packtpub.gwtbook.samples.client.panels.AutoFormFillServiceTest.java`
    in the test directory that was automatically created when we ran the `junitCreator`
    command. Add a new method named `testService()` to the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `testService()` method, instantiate `AutoFormFillService` and set the
    entry point information:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new asynchronous callback, and in the `onSuccess()` method add assertions
    to test the data returned from invoking the service:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Call the `delayTestFinish()` method and invoke the asynchronous service:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Run the test in Eclipse by launching the `AutoFormFillPanelService-hosted` launch
    configuration from the **Run** menu. Here is the result:![Time for Action—Testing
    the Asynchronous Service](img/1007_08_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What Just Happened?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: JUnit provides support for testing normal Java classes, but lacks any support
    for testing modules that have any kind of asynchronous behavior. A unit test will
    start executing and will run through all the tests in the module in order. This
    approach will not work for testing asynchronous things, where you make a request
    and the response comes back separately. GWT has this unique functionality, and
    supports tests for asynchronous services; so you can call an RPC service and validate
    the response from the service.
  prefs: []
  type: TYPE_NORMAL
- en: You can also test other long-running services, such as timers. In order to provide
    this support, `GWTTestCase` extends `TestCase` class and provides two methods—`delayTestFinish()`
    and `finishTest()`—which enable us to delay finishing a unit test, and have control
    over when the test actually completes. This essentially lets us put our unit test
    in an asynchronous mode, so we can wait for a response from a call to a remote
    server and complete the test by validating the response when we receive it.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this sample, we structure our test using a standard pattern for testing
    long-lived events in GWT. The steps are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: We create an instance of the asynchronous service and set its entry point.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We set up an asynchronous event handler, which is our callback. In this callback,
    we validate the received response by asserting the returned values match our expected
    values. We then complete the test by calling `finishTest()` to indicate to GWT
    that we want to leave the asynchronous mode in the test:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'We set up a delay period for the test to finish. This makes the GWT test framework
    wait for the requisite amount of time. Here we set a delay of 2000 ms:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: This must be set to a time period that is slightly longer than the time that
    the service is expected to take to return the response.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we invoke the asynchronous event, providing it the `callback` object
    as a parameter. In this case we just call the requisite method on `AutoFormFillService:`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: You can use this pattern to test all asynchronous GWT services and classes that
    use timers.
  prefs: []
  type: TYPE_NORMAL
- en: Test a GWT Page with an Asynchronous Service
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will test a page that invokes an asynchronous service. This
    will enable us to create one test that combines the previous two examples.
  prefs: []
  type: TYPE_NORMAL
- en: Time for Action—Combining the Two
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We are going to combine the two tests that we wrote in the last two sections
    into one, and create a comprehensive test for the `AutoFormFillPanel` page that
    tests both the page elements and the asynchronous service used by the page. The
    steps are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add a new method named `simulateCustomerIDChanged()` to the existing `AutoFormFillPanel`
    class in the `com.packtpub.gwtbook.samples.client.panels` package:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Modify the `testPanel()` method name to `testEverything()`. At the bottom of
    the method, invoke the `simulateCustIDChanged()` method and provide an `ID` parameter
    of 1111:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new `Timer` object, and add the following to its `run()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Delay the test finish and run the timer:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Run the test by launching the `AutoFormFillPanelTest-hosted` launch configuration
    and get a similar result to this:![Time for Action—Combining the Two](img/1007_08_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What Just Happened?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We have so far written two separate tests—one to test the various HTML elements
    on the `AutoFormFillPanel` page, and the other to test `AutoFormFillPanelService`.
    We can combine the two tests into one, and create a single test for testing the
    panel. `AutoFormFillPanel` invokes the asynchronous service when the text in the
    `CustomerID` textbox is changed. In order to simulate the keyboard listener in
    the test, we create a new public method called `simulateCustIDChanged()` in the
    `AutoFormFillPanel` class, which essentially does the same thing as the keyboard
    listener event handler in that class. We are going to call this method to simulate
    the text typed in by the user at the keyboard to change the `CustomerID` text.
  prefs: []
  type: TYPE_NORMAL
- en: Once we test the various HTML elements on the page, we invoke the `simulateCustIDChanged()`
    method. We then set up an asynchronous event handler using a `Timer` object. When
    the timer runs, we validate that the right values are available from the panel,
    as given in step 3.
  prefs: []
  type: TYPE_NORMAL
- en: 'We set up a delay for the test to finish:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we schedule the timer to run, so that when the timer fires after the
    given delay, it will validate the expected results and then complete the test:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Create and Run a Test Suite
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have so far learned how to create and run individual unit tests. As your
    code base increases, it is very tedious to run the tests all one at a time. JUnit
    provides the concept of a test suite that lets you combine a set of tests into
    one suite and run them. In this section, we are going to learn how to create and
    run multiple unit tests as part of a suite.
  prefs: []
  type: TYPE_NORMAL
- en: Time for Action—Deploying a Test Suite
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We have so far been generating a test-launch script for every test that we
    create and running each test that we created separately. In this section, we will
    combine our tests into a test suite and run all of our tests in a single launch
    configuration. The steps are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the `GWT_HOME\junitCreator` command script by providing these parameters:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Modify the `SamplesTestSuite` class and add a `suite()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Run the test by launching the `SamplesTestSuite-hosted` launch configuration
    and get a similar result to this:![Time for Action—Deploying a Test Suite](img/1007_08_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What Just Happened?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'It can get tedious generating a separate launch script for each test that you
    write and then having to run each of these tests separately. Using a test suite
    lets us have one place to collect all of our tests. We can then use the launch
    script for the suite to run all the tests. A test suite is essentially a collector
    for all the tests in a project. We define a static factory method named `suite()`
    in our project. In this method, we add all the tests to the `suite` object, and
    return the `suite` object as the return value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: When we run this test by launching the script, the JUnit framework recognizes
    that we are running a suite of tests, and it runs each of the tests defined in
    the suite. There is currently no support for inferring all the tests present in
    a GWT project and generating a test suite automatically to contain those tests.
    So you have to manually add each test that you want to be a part of the suite
    to this method. Now that we have the test suite working, we can delete all the
    other test launch configurations from our `Samples` project, and just use this
    one configuration for running all our tests.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have learned to create unit test for a GWT page (`AutoFormFillPanel`)
    and an asynchronous service (`AutoFormFillPanelService`).We then combined these
    two and created a unit test for a GWT page that uses an asynchronous service.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we combined all our tests into a test suite and ran all of our tests
    in a single launch configuration.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn about the internationalization (I18N) and
    XML support in GWT.
  prefs: []
  type: TYPE_NORMAL
