- en: Chapter 10.  Creating and Deploying Using Continuous Integration and Docker
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will explore the continuous delivery development process
    with Node.js applications.
  prefs: []
  type: TYPE_NORMAL
- en: In previous chapters, we saw many ways to develop applications using Node.js
    and frameworks such as Express and Loopback, including using different databases,
    such as MongoDB and MySql, and some middleware for user authentication, sessions,
    cookies, and many others.
  prefs: []
  type: TYPE_NORMAL
- en: In [chapter 09](ch09.html "Chapter 9.  Building a Frontend Process with Node.js
    and NPM"), *Building a Frontend Process with Node.js and NPM,* we saw how to deploy
    an application using the command line and how to upload the project directly to
    the cloud using a few commands.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will see how to integrate some more tools into our development
    environment to deal with unit tests and automated deployment, how to set up environment
    variables to protect our database credentials, and how to create a full application
    using the concept of Docker containers.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: How to deal with CI solutions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to test Node.js applications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to configure a MongoDB cloud instance and environment variables
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to integrate GitHub, Heroku, and Codeship in build and test processes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to create Docker images and how to use Docker containers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What we are building
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will build an application with the Express framework using
    some techniques already used in previous chapters, such as user session and user
    authentication with email and password using the Passport middleware. We will
    also use MongoDB, Mongoose, and Swig templates.
  prefs: []
  type: TYPE_NORMAL
- en: 'The result will be the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![What we are building](img/image_10_001.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Screenshot of home screen
  prefs: []
  type: TYPE_NORMAL
- en: What Continuous Integration means
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The workflow of **Continuous Integration** (**CI**) consists generally of four
    steps. We will illustrate with diagrams and a simple description of all the four
    stages.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following diagram shows how CI solutions work:'
  prefs: []
  type: TYPE_NORMAL
- en: '![What Continuous Integration means](img/image_10_002.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Continuous Integration process
  prefs: []
  type: TYPE_NORMAL
- en: Commit the code to a repository.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The CI interface builds the application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Execute tests.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If all tests are successful, the code goes to deployment.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Creating the baseline application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's start building the application. First off, we will create an application
    folder and add some root files, such as .gitignore, package.json, .env, and many
    more.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the root files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a folder called chapter-10.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Inside the chapter-10 folder, create a new file called package.json and add
    the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that in devDependencies we will use some modules to write tests for our
    application. We will see how to do this later in the book.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a file called .env and add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Don't worry about the previous code; we will replace this code using environment
    variables on **Heroku** and **Codeship** later in the chapter, and we will also
    configure this file to use Docker containers.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For security reasons, never upload your credentials to open source repositories
    if you are working on a commercial project; even if you have a private repository,
    it is always recommended you use environment variables in production.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a file called Profile and add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: As we already saw in previous chapters, this file is responsible for making
    our application work on Heroku. Even though it is not mandatory, it's good practice
    to include it.
  prefs: []
  type: TYPE_NORMAL
- en: Also, as we are using git source control, it is good practice to include a .gitignore
    file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a file called .gitignore and add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Note that at this point we keep the .env file out of the gitignore file; later
    in the book, we will un-track this file.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the config folder and files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Generally, all Node.js applications uses a folder called Config, to store all
    the application configuration files. So let's create one.
  prefs: []
  type: TYPE_NORMAL
- en: At the root project folder, create a new folder called config.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a file called passport.js and add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The previous code will take care of user authentication using the **Flask**
    middleware for error messages, as we saw in [Chapter 01](ch01.html "Chapter 1. 
    Building a Twitter-Like Application Using the MVC Design Pattern"), *Building
    a Twitter-Like Application Using the MVC Design Pattern*.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the controllers folder and files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As we are building a simple application, we will have only two controllers,
    one for users and another for the home page:'
  prefs: []
  type: TYPE_NORMAL
- en: In the root project folder, create a new folder called controllers.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a file called home.js and add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Now let's add all the functions related to users, such as sign in, sign up,
    authorization, account, and log out. We will add each function after the previous
    one.
  prefs: []
  type: TYPE_NORMAL
- en: Adding modules and authentication middleware
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Inside the controllers folder, create a new file called user.js and add the
    following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Adding login GET and POST methods
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Add the following code to the controllers/user.js file, right after the previous
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Adding signup GET and POST methods
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Add the following code to the controllers/user.js file, right after the previous
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Adding account GET and UPDATE methods
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Add the following code to the controllers/user.js file, right after the previous
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Adding account DELETE method
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Add the following code to the controllers/user.js file, right after the previous
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Now we have finished the application controllers.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the model folder and files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: At the root project folder, create a folder called models.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new file called User.js and add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Creating the public folder and files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this example, we are using the SASS version of the Bootstrap framework,
    as we did in the previous chapter. But this time, we will store the source files
    in a different location, inside the public/css folder. Let''s create the folder
    and files:'
  prefs: []
  type: TYPE_NORMAL
- en: Inside the root project, create a folder called public.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Inside public folder we will create a folder called: css, inside css create
    a folder called: vendor and inside vendor, create a folder called: bootstrap.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to [https://github.com/twbs/bootstrap-sass/tree/master/assets/stylesheets/bootstrap](https://github.com/twbs/bootstrap-sass/tree/master/assets/stylesheets/bootstrap),
    copy all content, and paste it into the public/css/vendor/bootstrap folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Inside the public/css/vendor folder, create a new file called _bootstrap.scss
    and add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Creating a custom stylesheet
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Inside the public/css/ folder, create a new file called main.scss and add the
    following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Don't worry about the node-sass building process now;  we have already set up
    an NPM task in the package.json file at the beginning of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the fonts folder and adding font files
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'As we are using the Bootstrap framework, we need a folder to hold all the Bootstrap
    font files, let''s create:'
  prefs: []
  type: TYPE_NORMAL
- en: Inside the public folder, create a new folder called fonts.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to [https://github.com/twbs/bootstrap-sass/tree/master/assets/fonts/bootstrap](https://github.com/twbs/bootstrap-sass/tree/master/assets/fonts/bootstrap),
    copy all the content, and paste it into the public/fonts folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Creating the JavaScript folder and files
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'As we are using the Bootstrap framework, we need a folder to hold all the Bootstrap
    font files, let''s create:'
  prefs: []
  type: TYPE_NORMAL
- en: Inside the public folder, create a new folder called js.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inside the js folder, create a new folder called lib.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inside the js/lib create a new file called bootstrap.js.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to [https://github.com/twbs/bootstrap-sass/blob/master/assets/javascripts/bootstrap.js](https://github.com/twbs/bootstrap-sass/blob/master/assets/javascripts/bootstrap.js),
    copy all the content, and paste it into the public/js/lib/bootstrap.js file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inside js/lib, create a new file called jquery.js.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to [https://cdnjs.cloudflare.com/ajax/libs/jquery/2.1.4/jquery.js](https://cdnjs.cloudflare.com/ajax/libs/jquery/2.1.4/jquery.js),
    copy all content, and paste it into the public/js/lib/jquery.js file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Creating the views folder and files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now we will create a very similar folder structure to that in [Chapter 01](ch01.html
    "Chapter 1.  Building a Twitter-Like Application Using the MVC Design Pattern"),
    *Building a Twitter-Like Application Using the MVC Design Pattern*; the views
    folder will have the following directories:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Adding the layouts folder and file
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Inside the views/layouts folder, create a new file called main.html and add
    the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Adding the pages folder and files
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'It is time to create the application templates files:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside the views/pages folder, create a file called home.html and add the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside the views/pages folder, create a file called login.html and add the
    following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside the views/pages folder, create a file called profile.html and add the
    following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside the views/pages folder, create a file called signup.html and add the
    following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Adding the partial folder and files
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'As we did in previous chapter, we are using the partial views concept, so let''s
    create the views files:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside the views/partials folder, create a new file called footer.html and
    add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside the views/partials folder, create a new file called header.html and
    add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: At this point, we have the application almost ready for deployment, but before
    we go further, we need to create the test folder and file.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the test folder and test file
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To run tests on Node.js applications, we need to include some dependencies/modules
    to help us write these tests. Fortunately, within the Node ecosystem we have many
    options for modules to use.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we will describe how to write tests for a HTTP server using the **Supertest**
    module and **Mocha** test runner. The modules that we will need are inserted in
    our package.json file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '| **Module** | **Description** | **More information** |'
  prefs: []
  type: TYPE_TB
- en: '| **Mocha** | Test framework | [https://mochajs.org](https://mochajs.org) |'
  prefs: []
  type: TYPE_TB
- en: '| **Supertest** | For testing HTTP servers | [https://www.npmjs.com/package/supertest](https://www.npmjs.com/package/supertest)
    |'
  prefs: []
  type: TYPE_TB
- en: 'Tests for web applications are a very complex subject and deserves a deeper
    approach, but we''ll see how to write unit tests and how to run tests with Mocha
    in a Node.js application:'
  prefs: []
  type: TYPE_NORMAL
- en: Inside the root project folder, create a new folder called test.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Inside the test/ folder, create a new file called app-test.js and add the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'The test cases are pretty simple where:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Test 01:*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Checks the root URL and expect a HTTP status code of 200.
  prefs: []
  type: TYPE_NORMAL
- en: '*Test 02:*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Expects a HTTP status code of 404.
  prefs: []
  type: TYPE_NORMAL
- en: Now let's see how to execute these tests.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that you must have MongoDB up and running on your machine.
  prefs: []
  type: TYPE_NORMAL
- en: 'Replace the .env file at the root project folder with the following information:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Note that later in the book, we will restore this file to its original state.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the terminal/shell inside the root project and type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Now type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see the following result on your terminal output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the test folder and test file](img/image_10_003.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Terminal output after tests
  prefs: []
  type: TYPE_NORMAL
- en: Note that both tests passed with a green check icon on the left-hand side of
    the test description.
  prefs: []
  type: TYPE_NORMAL
- en: Running the application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now it is time to check the application:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the terminal and type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Go to http://localhost:3000/signup and create a new account with the following
    information:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Name**: John Doe'
  prefs: []
  type: TYPE_NORMAL
- en: '**Email**: john@doe.com'
  prefs: []
  type: TYPE_NORMAL
- en: '**Password**: 123456'
  prefs: []
  type: TYPE_NORMAL
- en: '![Running the application](img/image_10_004.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Signup page
  prefs: []
  type: TYPE_NORMAL
- en: 'After the signup process, go to http://localhost:3000/account and see the following
    screenshot, with the user information:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Running the application](img/image_10_005.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Account information
  prefs: []
  type: TYPE_NORMAL
- en: Creating a GitHub or Bitbucket free account
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can choose what service to use, as GitHub and Bitbucket do the same thing:
    host public and private repositories of code for collaborative software development.'
  prefs: []
  type: TYPE_NORMAL
- en: The functionality of both are similar and both use git as source control. We
    will see how to use GitHub, but the process for Bitbucket is very similar.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can find more information about Bitbucket at this link: [https://bitbucket.org/](https://bitbucket.org/).'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a GitHub free account
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s create a GitHub account:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to [https://github.com/join](https://github.com/join), fill in the form and
    click the **Create an account** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose the **Unlimited public repositories for free** checkbox and click the
    **Continue** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the third step, you must answer three questions or choose to skip this step;
    click the **Submit** button. From here, you can read the guide or start a project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that you need to verify your e-mail before starting a project.
  prefs: []
  type: TYPE_NORMAL
- en: Click the **Start a project** button and fill in the repository's name, remembering
    you can use this name on GitHub, but you need to choose another name for the Heroku
    and Codeship process. After that, you will see the following screenshot:![Creating
    a GitHub free account](img/image_10_006.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: GitHub project
  prefs: []
  type: TYPE_NORMAL
- en: Later in the chapter, we will see how to initialize a local GIT repository and
    how to push the source code to GitHub repository.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Heroku free account
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we deployed the application directly to Heroku using
    the Heroku toolbelt commands. This time, you can use the same account that we
    created in [Chapter 09](ch09.html "Chapter 9.  Building a Frontend Process with
    Node.js and NPM"), *Building a Frontend Process with Node.js and NPM* or create
    a new one at [https://www.heroku.com/](https://www.heroku.com/).
  prefs: []
  type: TYPE_NORMAL
- en: Creating a MongoLab free sandbox account
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'MongoLab is cloud service required to use MongoDB as a service. It offers a
    free limited account as a sandbox, so we can use it to deploy our project:'
  prefs: []
  type: TYPE_NORMAL
- en: Proceed to the **Sign Up** page; after that, you will receive two emails from
    MongoLab, one with a welcome message and another with a link to verify your account,
    if you don't have one yet.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After you verify your account, you will see the following screenshot when logging
    in to your dashboard:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a MongoLab free sandbox account](img/image_10_007.jpg)'
  prefs: []
  type: TYPE_IMG
- en: MongoLab welcome screen
  prefs: []
  type: TYPE_NORMAL
- en: Click on the **Create new** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose the S**ingle-node** tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the standard line panel, choose the first checkbox for **Sandbox**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Scroll down to the end of the page and insert a database name, **nb6**, and
    click on the C**reate new mongodb Deployment** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'At the end of these five steps, you should see the following screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a MongoLab free sandbox account](img/image_10_008.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Database created at MongoLab
  prefs: []
  type: TYPE_NORMAL
- en: Creating a user and password for the database
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'It'' time to create a user and password to protect our database on the cloud:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on the database name.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You will see the following warning, suggesting you create a user and password:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a user and password for the database](img/image_10_009.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Database warning: no user and password'
  prefs: []
  type: TYPE_NORMAL
- en: Click on the **Click here** link inside the warning message.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Insert the following information:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Click on the **Create User** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Getting the string connection
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now we have a MongoDB instance running on the MongoLab cloud service. And here''s
    the connection string that we will use later in the chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You must replace the previous code with your own user and password.
  prefs: []
  type: TYPE_NORMAL
- en: Initializing a git repository and pushing to GitHub
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'At this time we will create our local git repository and then uploads it to
    account we just created on GitHub:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the terminal/shell inside the root application folder and type the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Add a remote repository to project by typing the following command in the terminal/shell:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: You must use your own github username in the previous code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add all project files to source control by typing the following command in
    the terminal/shell:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Commit the project changes by typing the following command in the terminal/shell:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: The last command is to upload all files to the GitHub repository that we created
    before.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type the following command in the terminal/shell:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Creating a Heroku application using Heroku Dashboard
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This time, we will see another way to create a project using the Heroku cloud
    service:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to [https://dashboard.heroku.com/apps](https://dashboard.heroku.com/apps).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the Heroku dashboard, click on the **New** button, and then click on the
    create **new app** link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter the following name in the app input name field: chapter-10-yourname'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Create app** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Linking the Heroku application to your git repository
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now we need to set up our account on Heroku to link to our github account.
    So let''s do it the next steps:'
  prefs: []
  type: TYPE_NORMAL
- en: On Heroku dashboard, click on the chapter-10-yourname project name.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the **Settings** tab, scroll down the page to **Domains**, and copy
    the Heroku domain URL:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: chapter-10-yourname.herokuapp.com
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that we can't use the same name for all applications, so you need to provide
    your name after chapter-10.
  prefs: []
  type: TYPE_NORMAL
- en: Later we will use the app name to configure the Codeship deployment pipeline,
    so don't forget it.
  prefs: []
  type: TYPE_NORMAL
- en: Adding environment variables to Heroku
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now we need to create some environment variables to keep our database string
    safe in our public github repository:'
  prefs: []
  type: TYPE_NORMAL
- en: On Heroku dashboard, click on the chapter-10-yourname project name.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Settings** tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the **Settings** tab, click on the **Reveal Config Vars** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add your own variables, as shown in the following screenshot. On the left, add
    the variable name, and on the right, and add the value:![Adding environment variables
    to Heroku](img/image_10_010.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Heroku environment variables
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that you must repeat this process on the Codeship configuration project.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Codeship free account
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Codeship is a cloud service for Continuous Integration (CI) tools. It''s pretty
    simple to create an account:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to [https://codeship.com/sessions/new](https://codeship.com/sessions/new)
    and use the **SIGN UP** button in the top-right corner. You can use your GitHub
    or Bitbucket account; just click your preferred button. As we are using GitHub,
    we will choose GitHub.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **AUTHORIZE APPLICATION** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You should see the following screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a Codeship free account](img/image_10_011.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Codeship dashboard
  prefs: []
  type: TYPE_NORMAL
- en: 'The next step is to click on where you are hosting your code. In this case,
    we will click on the ****GitHub**** icon, so we will see the following screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a Codeship free account](img/image_10_012.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Second step for Codeship configuration
  prefs: []
  type: TYPE_NORMAL
- en: Copy and paste the GitHub repository URL (https://github.com/<yourusername>/n6b.git)
    created in the GitHub setup process, and paste it into the **Repository Clone
    URL** input, as shown in the previous image.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Connect** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now we have set up our development environment with three tools: GitHub, Codeship,
    and Heroku. The next step is to create setup and test commands and add a pipeline
    deployment to the Codeship dashboard.'
  prefs: []
  type: TYPE_NORMAL
- en: Adding environment variables to Codeship
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now let''s do the same as we did with the Heroku dashboard, and add the same
    variables to Codeship:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to [https://codeship.com/projects/](https://codeship.com/projects/) and select
    the chapter-10-yourname project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the P**roject Settings** link in the top-right corner, as shown here:![Adding
    environment variables to Codeship](img/image_10_013.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Project settings menu in the Codeship dashboard
  prefs: []
  type: TYPE_NORMAL
- en: Click on the **Environment Variables** link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add the Session and MongoDB variables and values, as we previously did with
    the configuration of the Heroku environment variables, and click the **Save configuration**
    button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Creating setup and test commands in the Codeship project configuration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now we go back to the codeship control panel, and configure the test and dploy
    commands for our application:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Paste the following code into the setup commands text area:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Paste the following code into the test commands text area:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Click on the **Save and go to dashboard** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Creating the pipeline for deployment on Heroku
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Well, we are almost there; now we need to create a pipeline to integrate the
    build with our deployment environment on Heroku:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on the **Project Settings** link in the top-right corner and then click
    on the **Deployment** link, as shown here:![Creating the pipeline for deployment
    on Heroku](img/image_10_014.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'At the **Enter branchname** input, type the following name: master.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Save** **Pipeline Setting** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the **Add new deployment pipeline** tab, choose the **Heroku** banner.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now we will fill in the input fields as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the pipeline for deployment on Heroku](img/image_10_015.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Codeship Heroku deployment configuration panel
  prefs: []
  type: TYPE_NORMAL
- en: Adding the Heroku API key to Codeship
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To provide the information required in the previous screenshot, we need to
    follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open a new browser window and go to Heroku dashboard at [https://id.heroku.com/login](https://id.heroku.com/login).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on your **Picture** in the top-right corner, and then click on **Account
    Settings**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Scroll down the page for API Key and click on **Show API Key**, as shown here:![Adding
    the Heroku API key to Codeship](img/image_10_016.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Show API Key Heroku dashboard
  prefs: []
  type: TYPE_NORMAL
- en: Insert your password and copy the API key.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go back to the Codeship browser window and paste the key into the **Heroku API
    key** input field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Name your application: n6b-your-own-name.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the application URL: http://chapter-10-your-own-name.herokuapp.com/.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Save Deployment** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This step completes our continuous integration. Every time we modify our code
    and send the changes to GitHub or Bitbucket, Codeship will run the code and the
    tests we set when we created the Node.js application earlier in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: At the end of testing, if everything is ok, our code is sent to Heroku and will
    be available at http://chapter-10-yourname.herokuapp.com/.
  prefs: []
  type: TYPE_NORMAL
- en: Checking the test and deploy steps on the Codeship dashboard
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'At this point we already have the necessary commands to set test and deploy,
    however we need to check that everything is correctly configured:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to [https://codeship.com/sessions/new](https://codeship.com/sessions/new).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Log in to your account.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In top-left corner, click on the **Select Project** link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the n6b-your-own-name project name and you will see all your commits
    with **Success**, R**unning**, or F**ailed** flags.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'When we click on one of then, we can see the following screenshot with a step-by-step
    process:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Checking the test and deploy steps on the Codeship dashboard](img/image_10_017.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Codeship building steps
  prefs: []
  type: TYPE_NORMAL
- en: Here we have a successful build, as we can see the green check icon on the right
    of each step.
  prefs: []
  type: TYPE_NORMAL
- en: Note that if the testing process fails at any time, the code doesn't go to the
    production server, in this case Heroku.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Docker and setting up the application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we go further, we need to understand what Docker is and the concept of
    containers.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can read more about containers at this link: [https://www.docker.com/what-docker#/VM](https://www.docker.com/what-docker#/VM).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Thinking in a very simple way, Docker creates micro machines (that is, operating
    systems) inside an isolated box to run your application, no matter what your platform
    is (Windows, Linux, or OSX). Let''s see what the official Docker site says:'
  prefs: []
  type: TYPE_NORMAL
- en: '*"Docker containers wrap a piece of software in a complete filesystem that
    contains everything needed to run: code, runtime, system tools, system libraries
    - anything that can be installed on a server."*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'So let''s install Docker on your machine. A Windows machine deserves special
    attention, but you can find the relevant information at the following link: [https://docs.docker.com/engine/installation/windows/](https://docs.docker.com/engine/installation/windows/).
    Go to [https://docs.docker.com/](https://docs.docker.com/) and follow the instructions
    for your platform.'
  prefs: []
  type: TYPE_NORMAL
- en: Checking the Docker version
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now it is time to check the Docker version installed on your machine:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the terminal/shell and type the following commands to check the version
    of each part:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Creating a Docker file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To dockerize our application in a container, we need to create two files, a
    Dockerfile and a docker-compose.yml file, to link our application container with
    a MongoDb database:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside the root folder, create a new file called Dockerfile and add the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: Note that the line ENV DB_PORT_27017_TCP_ADDR indicates the Docker container
    port for MongoDB; it's an environment variable.
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside the root folder, create a new file called docker-compose.yml and add
    the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: The db line was set up with the ENV DB_PORT_27017_TCP_ADDR db name.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we go further, let''s check out some useful Docker commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Command** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| docker ps -a | List all containers |'
  prefs: []
  type: TYPE_TB
- en: '| docker images | List all images |'
  prefs: []
  type: TYPE_TB
- en: '| docker rm containername | Remove a specific container |'
  prefs: []
  type: TYPE_TB
- en: '| docker rm $(docker ps -a -q) | Remove all containers |'
  prefs: []
  type: TYPE_TB
- en: '| docker rmi imagename | Remove a specific image |'
  prefs: []
  type: TYPE_TB
- en: '| docker rmi $(docker images -q) | Remove all images |'
  prefs: []
  type: TYPE_TB
- en: '| docker run containername | Run a container |'
  prefs: []
  type: TYPE_TB
- en: '| docker stop containername | Stop a container |'
  prefs: []
  type: TYPE_TB
- en: '| docker stop $(docker ps -a -q) | Stop all containers |'
  prefs: []
  type: TYPE_TB
- en: We have more commands, but during the course of the chapter we will see others.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Docker image
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'At this point we already have the necessary commands to set test and deploy,
    however we need to check that everything is correctly configured:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the Docker image for your project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'At the end of the output on the terminal, we can see a message similar to this:
    **Successfully built c3bbc61f92a6**. Now let''s check the image already created.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Check the images by opening terminal/shell and typing the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: Preparing and running the Docker image
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now let''s test our Docker image. Before we proceed, we need to make a small
    change to our application:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the server.js file at the root folder and replace the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Now open the .env file and replace the code with the following lines:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Step 1 and step 2 uses local credentials, different from what we do for deployment.
    So after configuring the environment variables on Heroku and Codeship, remove
    the .env file from GitHub tracking, but keep it on your local machine with your
    local credentials.
  prefs: []
  type: TYPE_NORMAL
- en: Now it is time to get a MongoDB image from Docker hub.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the terminal/shell and type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: The previous command will get a new image for MongoDB. You can use the same
    command to get any image from Docker hub.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can find more images at this link: [https://hub.docker.com/explore/](https://hub.docker.com/explore/).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Start a new MongoDB container named db with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we need to link one container to another; type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: Go to http://localhost:3000 and you will see your application running. It will
    look the same as it does on your machine.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Uploading the project image to your Docker hub account
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now, is time to upload your image to Docker hub, and make it available to other
    users.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can read more about **Docker hub** at this link: [https://docs.docker.com/docker-hub/](https://docs.docker.com/docker-hub/).'
  prefs: []
  type: TYPE_NORMAL
- en: Go to [https://cloud.docker.com/](https://cloud.docker.com/) and create a free
    account.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After confirming your e-mail address, go to the [https://cloud.docker.com](https://cloud.docker.com)
    sign in menu. You will see the following dashboard:![Uploading the project image
    to your Docker hub account](img/image_10_018.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Docker hub dashboard
  prefs: []
  type: TYPE_NORMAL
- en: When you click on the **REPOSITORIES** button, you will see it is empty. So
    now let's push our Docker image to Docker hub.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the terminal/shell and type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: Enter your credentials, the ones you created in the registration process.
  prefs: []
  type: TYPE_NORMAL
- en: 'To upload the project to Docker hub, run the following command on the terminal/shell:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: Go back to [https://cloud.docker.com/_/repository/list](https://cloud.docker.com/_/repository/list),
    refresh the page, and you will see your repository published on Docker hub.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Docker is a powerful tool and must be explored further, but from this chapter
    we have enough knowledge to build Node.js applications with MongoDB using Docker
    containers, which means that you can use the container we've created on any machine.
    It doesn't matter what platform you use, you just need to install Docker and pull
    the image to your machine.
  prefs: []
  type: TYPE_NORMAL
- en: You can get any image and start to play with it on your command line.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By the end of this chapter, you should be capable of building and deploying
    an application using all the most modern technologies and tools that we have available
    at the moment to create amazing web applications.
  prefs: []
  type: TYPE_NORMAL
- en: We've explored all the resource needed to build an application using continuous
    delivery and Continuous Integration, combining with Git source control, GitHub,
    Codeship, Heroku, and Docker. We also saw how to use environment variables on
    both Heroku cloud services for production and Codeship for tests and continuous
    integration.
  prefs: []
  type: TYPE_NORMAL
