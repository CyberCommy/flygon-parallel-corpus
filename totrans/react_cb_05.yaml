- en: Mastering Redux
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, the following recipes will be covered:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Redux store
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Making action creators and dispatching actions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing Firebase with Redux
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Redux is a predictable state container for JavaScript apps. That means Redux
    can be used with vanilla JavaScript or frameworks/libraries such as Angular and
    jQuery. Redux is mainly a library responsible for issuing state updates and responses
    to actions. Redux is widely used with React. Instead of directly modifying the
    state of the application, the modification is handled by emitting events called
    actions. These events are functions (also known as action creators) that always
    return two key properties, a `type` (which indicates the type of action being
    performed, and the types should typically be defined as string constants) and
    a `payload` (the data you want to pass within the action). These functions emit
    events that are subscribed to by the reducers. The reducers are pure functions
    written to decide how each action will transform the state of the application.
    All state changes are handled in a single place: the Redux Store.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Without Redux, complex patterns are needed to communicate changes between our
    application components. Redux simplifies this by broadcasting state changes to
    components by using an application store. Within a React Redux application, components
    will subscribe to the store while the store broadcasts changes to the components.
    This diagram describes perfectly how Redux works:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/1864eaa9-7cac-44ea-b7ab-c054633d32e6.png)Redux proposes to handle
    our Redux state as immutable. However, the objects and arrays in JavaScript are
    not, which can cause us to mutate the state by mistake directly*.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'These are the three principles of Redux:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Single source of truth:** The state of your whole application is stored in
    an object tree within a single store.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The state is read-only:** The only way to change the state is to emit an
    action, an object describing what happened.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Changes are made with pure functions:** To specify how the state tree is
    transformed by actions, you write pure reducers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This information was extracted from the Official site of Redux. To read more,
    visit [https://redux.js.org/introduction/three-principles](https://redux.js.org/introduction/three-principles).
  prefs: []
  type: TYPE_NORMAL
- en: '**What is an action?**'
  prefs: []
  type: TYPE_NORMAL
- en: Actions are payloads of information that send data from your application to
    your store. They are the only source of information for the store. You send them
    to the store using `store.dispatch()`. The actions are simple JavaScript objects
    and must have a property called `type` that indicates the type of the action being
    performed and a `payload` that is the information contained in action.
  prefs: []
  type: TYPE_NORMAL
- en: '**What is immutability?**'
  prefs: []
  type: TYPE_NORMAL
- en: Immutability is a fundamental concept in Redux. To change the state, a new object
    must be returned.
  prefs: []
  type: TYPE_NORMAL
- en: 'These are the immutable types in JavaScript:'
  prefs: []
  type: TYPE_NORMAL
- en: Number
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: String
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Boolean
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Undefined
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Null'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'These are the mutable types in JavaScript:'
  prefs: []
  type: TYPE_NORMAL
- en: Arrays
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Functions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Objects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Why immutability?**'
  prefs: []
  type: TYPE_NORMAL
- en: '**More clarity**: We know who changed the state (the reducer)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Better performance**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Easy debugging: **We can use Redux DevTools (we are going to cover that topic
    in [Chapter 12](1daa68c4-442d-479f-b1b6-3efa80592901.xhtml), *Testing and Debugging*)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We can work with immutability in the following ways:'
  prefs: []
  type: TYPE_NORMAL
- en: ES6**:**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Object.assign`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Spread` operator (...)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Libraries**:**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Immutable.js`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Lodash` (merge and extend)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**What is a reducer?**'
  prefs: []
  type: TYPE_NORMAL
- en: 'A reducer resembles a meat grinder. In the meat grinder, we add the ingredients
    on top (state and action), and at the other end we get the result (a new state):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/e9b74645-270f-453e-bbc2-42d4f76337d1.png)'
  prefs: []
  type: TYPE_IMG
- en: In technical terms, the reducer is a pure function that receives two parameters
    (the current state and the action), and you return a new immutable state depending
    on the action.
  prefs: []
  type: TYPE_NORMAL
- en: '**Types of components**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Container:'
  prefs: []
  type: TYPE_NORMAL
- en: Focuses on how things work
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Is connected to Redux
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dispatches Redux actions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Is generated by `react-redux`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Presentational:'
  prefs: []
  type: TYPE_NORMAL
- en: Focuses on how things look
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Is not connected to Redux
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Receives data or functions via props
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Most of the time are Stateless
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Redux Flow**'
  prefs: []
  type: TYPE_NORMAL
- en: 'The Redux Flow starts when we call an action from the UI (`React` component).
    This action will send the information (`type` and `payload`) to the store, which
    interacts with the reducers to update the state based on the action type. Once
    the state is updated by the reducer, it returns the value to the store, and then
    the store sends the new value to our React application:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/5814d1cd-42ca-41a5-b92e-365f01b5fd47.png)'
  prefs: []
  type: TYPE_IMG
- en: Creating a Redux Store
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A store holds the whole state of your application, and the only way to change
    the state inside is by dispatching an action. A store is not a class; it is just
    an object with a few methods on it.
  prefs: []
  type: TYPE_NORMAL
- en: 'The store methods are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`getState()`**: **Returns the current state of your application'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dispatch(action)`: Dispatches an action and is the only way to trigger a state
    change'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`subscribe(listener)`: Adds a change listener that is called any time an action
    is dispatched'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`replaceReducer(nextReducer)`:Replaces the reducer that is currently used by
    the store to calculate the state'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To work with Redux, we need to install the following packages:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First, we need to create a file for our store at `src/shared/redux/configureStore.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s go ahead and write the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/shared/redux/configureStore.js'
  prefs: []
  type: TYPE_NORMAL
- en: 'The second thing we need to do is to create our `initialState` variable in
    our `public/index.html` file. For now, we will create a device state to detect
    whether the user is using a mobile or a desktop:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'File: public/index.html'
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to create a `reducers` directory in our shared folder. The first reducer
    we need to create is `deviceReducer`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/shared/reducers/deviceReducer.js'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once we have created `deviceReducer`, we need to create an `index.js` file,
    where we are going to import all our reducers and combine them into a `rootReducer`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/shared/reducers/index.js'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s modify our `src/index.js` file. We need to create our Redux Store
    and pass it to our provider:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we can edit our `Home` component. We need to connect our component to Redux
    using `connect` from `react-redux`, and then, using `mapStateToProps`, we are
    going to retrieve the device''s state:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you followed all the steps correctly, you should be able to see this view
    using Chrome in your desktop:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/44c89862-1ff2-4b18-b5b8-a1ed4df7506e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'And if you activate the Chrome Device Emulator, or if you use a real device
    or the iPhone simulator, you will see this view:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/5e0f3f18-83f4-4ac5-a99b-5e974353eff2.png)'
  prefs: []
  type: TYPE_IMG
- en: '**What is mapStateToProps?**'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `mapStateToProps` function typically confuses many people, but it is easy
    to understand. It takes a piece of the state (from the store), and it passes it
    into your component as a `prop`. In other words, the parameter that receives `mapStateToProps`
    is the Redux state, and inside you will have all the reducers you have defined
    in `rootReducer`, and then you return an object with the data you need to send
    to your component. Here''s an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, the state has a `device` node, which is our `deviceReducer`;
    there are other ways to do this that, most of the time, confuse many people. One
    way is by using ES6 destructuring and arrow functions something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Also, there is another way to do it directly in the `connect` middleware. Usually,
    this can be confusing, to begin with, but once you get used to it, it''s the way
    to go. I typically do this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'After we map our Redux state to the props, we can retrieve the data like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, for the second parameter, `mapDispatchToProps`, I directly sent
    a null value since we are not dispatching an action in this component yet. In
    the next recipe, I am going to talk about `mapDispatchToProps`.
  prefs: []
  type: TYPE_NORMAL
- en: Making action creators and dispatching actions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Actions are the most crucial pieces of Redux; they are responsible for triggering
    state updates in our Redux Store. In this recipe, we are going to display the
    top 100 cryptocurrencies listed on [http://www.coinmarketcap.com](http://www.coinmarketcap.com) using
    their public API.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For this recipe, we need to install Axios (a promise-based HTTP client for
    the browser and Node.js) and Redux Thunk (a thunk is a function that wraps an
    expression to delay its evaluation):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We are going to use the same code we created in the last recipe (`Repository:
    /Chapter05/Recipe1/store`) and add some modifications:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to create new folders: `src/actions`, `src/reducers`, `src/components/Coins`,
    and `src/shared/utils`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The first file we need to create is`src/actions/actionTypes.js`, where we need
    to add our constants for our actions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/actions/actionTypes.js'
  prefs: []
  type: TYPE_NORMAL
- en: Maybe you are wondering why we need to create a constant with the same name
    as the string. It is because, when using constants, we can't have duplicate constant
    names (we will get an error if we repeat one by mistake). Another reason is that
    the actions are used in two files, in the actual actions file and then in our
    reducer. To avoid repeating the strings, I decided to create the `actionTypes.js`
    file and write our constants once.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'I like to divide my actions into three parts: `request`, `received`, and `error`.
    I called those main actions base actions, and we need to create a file for these
    actions in `src/shared/redux/baseActions.js`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/shared/redux/baseActions.js'
  prefs: []
  type: TYPE_NORMAL
- en: 'After we have built our `baseActions.js` file, we need to create another file
    for our actions, and this should be inside `src/actions/coinsActions.js`. For
    this recipe, we will use the public API from `CoinMarketCap` ([https://api.coinmarketcap.com/v1/ticker/](https://api.coinmarketcap.com/v1/ticker/)):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/actions/coinsActions.js'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once we have our actions file ready, we need to create our reducer file to
    update our Redux state based on our actions. Let''s create a file in `src/reducers/coinsReducer.js`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/reducers/coinsReducer.js'
  prefs: []
  type: TYPE_NORMAL
- en: 'Then we need to add our reducer to our `combineReducers` in `src/shared/reducers/index.js`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: File: src/shared/reducers/index.js
  prefs: []
  type: TYPE_NORMAL
- en: 'As you can see, I included the `getNewState` util; this is a basic function
    that performs an `Object.assign`, but is more explicit and easy to understand,
    so let''s create our `utils` file at `src/shared/utils/frontend.js`. The `isFirstRender`
    function is required for our component to validate whether our data is empty or
    not the first time we try to render:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/shared/utils/frontend.js'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we need to create a `Container` component at `src/components/Coins/index.js`.
    In the introduction, I mentioned there are two types of components: `container`
    and `presentational`. The container must be connected to Redux and should not
    have any JSX code, just our `mapStateToProps` and `mapDispatchToProps`, and then
    on the export, we can pass the `presentational` component that we are going to
    render, passing as props the values of the actions and our Redux state. To create
    our `mapDispatchToProps` function, we need to use the `bindActionCreators` method from
    our Redux library. This will bind our `dispatch` method to all the actions we
    pass. There are different ways to do this without `bindActionCreators`, but using
    this method is considered good practice:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/components/Coins/index.js'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `Coins` component that we are importing in our container is as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/components/Coins/Coins.jsx'
  prefs: []
  type: TYPE_NORMAL
- en: 'And the CSS for this component is as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/components/Coins/Coins.css'
  prefs: []
  type: TYPE_NORMAL
- en: 'In our `src/shared/redux/configureStore.js` file, we need to import `redux-thunk`
    and use the `applyMiddleware` method to use this library in our Redux Store:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/shared/redux/configureStore.js'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s add the link to `/coins` in our `Header` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/shared/components/layout/Header.jsx'
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, the last piece of the puzzle is to add our component (container) to
    our `src/routes.jsx` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/routes.jsx'
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you open the API ([https://api.coinmarketcap.com/v1/ticker/](https://api.coinmarketcap.com/v1/ticker/))
    you will see the JSON object like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/6194b6fa-fa14-43d5-9f57-8d1c34574af3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We will get an array of objects with the top 100 coins in [https://coinmarketcap.com](https://coinmarketcap.com).
    If you followed all the steps correctly, you would be able to see this view:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/eb37334a-f135-4f72-a4c7-d2e4515c541f.png)'
  prefs: []
  type: TYPE_IMG
- en: Implementing Firebase with Redux
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Firebase is a Backend-as-a-Service (BaaS) that is part of the Google Cloud Platform.
    One of the most popular services of Firebase is the Realtime Database, which uses
    a WebSocket to sync your data. Firebase also offers services for file storage,
    authentication (social media and email/password authentication), hosting, and
    more.
  prefs: []
  type: TYPE_NORMAL
- en: You can use Firebase mainly for real-time applications, but you can also use
    it as your regular database for non-real-time applications if you want to. Firebase
    is supported by many languages (such as JavaScript, Java, Python, and Go) and
    platforms such as Android, iOS, and the web.
  prefs: []
  type: TYPE_NORMAL
- en: Firebase is free but, of course, if you need more capacity, they have different
    plans depending on your project's requirements. You can check out the prices at
    [https://firebase.google.com/pricing](https://firebase.google.com/pricing).
  prefs: []
  type: TYPE_NORMAL
- en: For this recipe, we are going to use Firebase's free service to show some popular
    phrases. That means you will need to create an account using your Google email
    at [https://firebase.google.com](https://firebase.google.com).
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Once you are registered on Firebase, you need to create a new project by clicking
    on Add project in your Firebase console:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/715e8a41-7b17-4d52-a06d-a6c48842b8c6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'I''ll name my project `codejobs`; of course, you can name it as you want:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/395ac84e-ed2c-4ea6-9683-7023a52e1cad.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As you can see, Firebase automatically added a random code to our Project ID,
    but you can edit it if you want to make sure the Project ID does not exist, and
    after you must accept the terms and conditions and click on Create Project button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/1626d2ba-4dd5-48e9-9003-355a68174fad.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now you must select the Add Firebase to your web app option, and you will get
    information about your application:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/5d8f5531-196f-4fea-8a7c-ef13f09f47c5.png)'
  prefs: []
  type: TYPE_IMG
- en: Do not share this information with anyone. I'm sharing this with you because
    I want to show you the way to connect your application to Firebase.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now go to Develop *|* Database in your dashboard and click on the Create database
    button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/41d1cd5c-ca68-4f27-ba66-6f96aea56046.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After that, choose the Start option in locked mode and click on the Enable
    button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/30daac69-150e-4c72-b255-57ee04f83bbe.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Then, at the top of the page, select the dropdown and choose the Realtime Database option:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/60e337e6-df1d-4d35-a0fa-17a331d2c13d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once we have our Realtime Database created, let''s import some data. To do
    this, you can select the Import JSON option in the dropdown:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/42dbdd11-3a28-4b18-a838-f0ac5113aa8e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s create a basic JSON file to import our phrases data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/data/phrases.json'
  prefs: []
  type: TYPE_NORMAL
- en: 'Save this file in a data directory and then import it into your Firebase database:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/e8ac2bee-85ee-4748-88f4-c94389f76e35.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see in the red warning, All data at this location will be overwritten.
    This means that if you have any old data in the database, it will be replaced,
    so be careful with importing new data into your database.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you did everything correctly, you should see the imported data like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/7a614200-3f94-4d98-8552-969484e31c97.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now we need to alter our permissions to be able to read and write in our database.
    If you go to the Rules tab, you will see something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/8771fb35-9746-476e-9866-a2677d68d9ac.png)'
  prefs: []
  type: TYPE_IMG
- en: 'For now, let''s change them to true and then click on the Publish button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/0beaabd8-51fe-4e63-b360-a9a41da1e97a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Finally, we have finished all the needed steps on Firebase. Now let''s create
    the Firebase application in React. We will re-use the last recipe of the `CoinMarketCap`
    (`Repository: Chapter05/Recipe2/coinmarketcap`). The first thing we need to do
    is to install the firebase dependency:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'I removed some components from the last recipe, and I just focused on the Phrases
    application. Let''s create it by following these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Copy your project configuration and replace it in the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/config/firebase.js'
  prefs: []
  type: TYPE_NORMAL
- en: 'After this, we need to create a file to manage our Firebase database, and we
    will export our `ref` (our phrases table):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/shared/firebase/database.js'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s prepare everything for our component. First, go to the `routes` file
    and add the `Phrases` container to the root path of your router:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/routes.jsx'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s create our `actionTypes` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/actions/actionTypes.js'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, in our actions, we are going to perform four tasks (fetch, add, delete,
    and update) just like a CRUD (Create, Read, Update and Delete):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/actions/phrasesActions.jsIn Firebase, we don''t use a regular ID.
    Instead, Firebase uses a key value as an ID. The imported data is like a basic
    array, with keys 0, 1, 2, 3, 4, and so on, so for that data, each key is used
    as an ID. But when we create data through Firebase, the keys are going to be unique
    string values with random code, such as `-lg4fgFQkfm`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'After we have added our actions, we can create our reducer file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/reducers/phrasesReducer.js'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s now create our Redux container. We will include all the actions we will
    dispatch in our component and connect Redux to get the phrases state:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/components/Phrases/index.js'
  prefs: []
  type: TYPE_NORMAL
- en: 'Then our `Phrases` component will be as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/components/Phrases/Phrases.jsx'
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, our styles file is as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'File: src/components/Phrases/Phrases.css'
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The key to understanding how Firebase works with Redux is that you need to know
    that Firebase uses a WebSocket to sync the data, and that means the data is streaming
    in real time. The way to detect data changes is by using the `database.on()` method.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `fetchPhrases()` action, we have three Firebase listeners:'
  prefs: []
  type: TYPE_NORMAL
- en: '`database.on(''child_added'')`: It has two functionalities. The first one brings
    the data from Firebase (the first time) row by row. The second functionality is
    to detect when a new row is added to the database and updates the data in real
    time.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`database.on(''child_changed'')`: It detects changes in existing rows. This
    works when we perform an update of a row.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`database.on(''child_removed'')`: Detects when a row is removed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There is another method called `database.once('value')`, which does the same
    thing as `child_added` but returns the data in an array, and just once. That means
    it does not detect dynamic changes like `child_added`.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you run the application, you will see this view:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/2a493371-7335-4d8e-9952-25f69825b101.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The blockquotes are too big to put all of them in, but our last one is this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/f344e1b9-b181-40de-8728-3c64c4d7e994.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s modify our `phrases.json` and add a new row:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'If we go to Firebase and import the JSON again, we will see that, in real time,
    the data will be updated without refreshing the page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/950edc1d-c677-4a80-b8be-1fc01b41626e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, if you see an `X` link to remove phrases, let''s remove the first one
    (Marcus Tullius Cicero). If you open the Firebase page in another tab, you will
    see that the data is being deleted in real time:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/cb3e194a-1ab6-432e-8b3b-66836499fd93.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Also, if you add a new row (using textarea and input), you will see that reflected
    in real time:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/fc05bfe5-2848-448d-b9b8-d7b6c0b8448e.png)'
  prefs: []
  type: TYPE_IMG
- en: As I mentioned before, when we add new data from our React application, instead
    of importing a JSON Firebase will generate unique keys for the new data. In this
    case for the new phrase I added, the `-LJSYCHLHEe9QWiAiak4` key was created.
  prefs: []
  type: TYPE_NORMAL
- en: 'Even if we update a row, we can see that the change was reflected in real time:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/e5e8e088-2c9f-4881-bfa7-193f5fba29f5.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, all the operations are easy to implement, and with Firebase
    we saved a lot of time that would otherwise have been spent working on a backend
    service. Firebase is awesome!
  prefs: []
  type: TYPE_NORMAL
