- en: Having a Little Fun with Images with Pixel Manipulations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you will learn how to work with images at the pixel level.
    You will invert the colors, changing them around.
  prefs: []
  type: TYPE_NORMAL
- en: Manipulating an image
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To start, in my `c:\data` folder, I have a file called *lessonimage*. As you
    can see in *Figure 25.4.1*, the writing on the Coke can is red and the background
    seems to be reddish-brown:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2c7d9239-8c8a-4a96-b88a-d44b4da2ddb3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 25.4.1: The image to be used for inverting colors at the pixel level
    in this chapter'
  prefs: []
  type: TYPE_NORMAL
- en: What we will do is switch the colors around, so that the writing on the Coke
    can, for example, will become green, and you will learn how you can manipulate
    images at the individual pixel level.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a button and an image control to the HTML
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open up a new project. Delete the two lines that begin with `<div...`; also
    delete the `Label` line this time. You don't need any of them.
  prefs: []
  type: TYPE_NORMAL
- en: Next, you need to insert a `Button` control into the <html> page. To do this,
    go to Toolbox, grab a `Button` control, and drag and drop it below the line beginning
    with `<form id=...`. Change the text on the first button to say `Load`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now you need to insert an image control into the <html> page. So, go back to
    Toolbox, grab an `Image` control, and drag and drop it below the previous line,
    leaving a blank line in between the two. Your `Default.aspx` file should look
    like the one shown in *Figure 25.4.2*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c7e93955-7964-4e0f-8e4b-a3efcbbe7faf.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 25.4.2: The complete HTML for this chapter'
  prefs: []
  type: TYPE_NORMAL
- en: 'So, you have a very simple interface for this project: one button to load an
    image and the other one, which is an image control, to display the image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/98b33987-950b-4919-b68c-98cff49d3c45.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 25.4.3: The simple interface for our project'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, double-click on the Load button. This takes you into `Default.aspx.cs`.
    Delete the `Page_Load` event; we don''t care about that one. The relevant portion
    of the starting code for this project should look like *Figure 25.4.4*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/602ab30a-1c41-427c-8f78-a94a0aed207e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 25.4.4: The starting code for this project'
  prefs: []
  type: TYPE_NORMAL
- en: Adding a namespace
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Naturally enough, the first thing to do is to add a new namespace that''s relevant.
    For this, enter the following line under `using System`, near the top of the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: To make things nice and clean, you can collapse all of the code groups at the
    top of the file if you like so that basically the first clearly visible line is
    `public partial class...`.
  prefs: []
  type: TYPE_NORMAL
- en: Making a bitmap
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The next stage, of course, is to put in the code that will do what you want
    to do. First, you will make a bitmap. Enter the following between a set of curly
    braces below the line that begins with `protected void Button1_Click...`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Here, `Bitmap` is a class that we will call `image`. Basically, you have a map
    of bits that can be manipulated. Then, to initialize it, you pass in a path. In
    this case, it is `(@"c:\data\lessonimage.bmp");`.
  prefs: []
  type: TYPE_NORMAL
- en: Saving an image as a bitmap picture
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Next, open Paint and load the image to be manipulated in this chapter, as shown
    in *Figure 25.4.5*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/23cc9d1c-8265-41b0-850f-0491cb363b4a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 25.4.5: The image to be manipulated in Paint'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, to save it as a bitmap, go to File | Save As, and then select BMP picture,
    as shown in *Figure 25.4.6*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/160c3084-1002-40b2-879c-c6c78c91b2de.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 25.4.6: Save As options in Paint'
  prefs: []
  type: TYPE_NORMAL
- en: 'The description of BMP picture says Save any kind of picture with high quality
    and use it on your computer. When you go to save the file, the Save as type: field
    in the Save As dialog box says 24-bit bitmap (*.bmp;*.dib). You can save any images
    as a bitmap there.'
  prefs: []
  type: TYPE_NORMAL
- en: Accessing a pixel's location
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Next, enter the following after `Bitmap image = new Bitmap...` line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: You need this line to get each pixel's location inside the image.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, to access each pixel''s location, you need nested `for` loops. Start by
    entering this line next:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The outer `for` loop here is for controlling the horizontal movement of the
    `x` coordinate.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, between a set of curly braces, enter the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: This inner `for` loop is needed to control the `y` coordinate of each pixel,
    or its vertical position.
  prefs: []
  type: TYPE_NORMAL
- en: Manipulating the pixels
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Once you''ve done all of that, the next stage is to manipulate the pixels.
    So, start with another set of curly braces, and begin by entering the following,
    indented, between them:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: This line begins by reading each pixel's color first. If you hover your mouse
    over `GetPixel` in this line, you will see that it returns a color, not the location.
    The tooltip says that it Gets the color of the specified pixel in this Bitmap.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now you''ll make a new color. Enter the following, also indented, next:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Here, `Color` following the `=` sign is a `struct` value type. In addition to
    `FromArgb`, you can also use `FromKnownColor` or `FromName`. This means that the
    string name is known. Following `FromArgb`, you say `pixelColor.B` to get the
    blue component of this color structure, `pixelColor.R` to get the red component,
    and then `pixelColor.G` to get the green component. Thus, you make a new `Color`
    object with this line.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, enter the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: If you hover your mouse over `SetPixel`, the tooltip says Sets the color of
    the specified pixel in this Bitmap. Then, `(x, y, newColor)` represents the new
    color to be used to color that pixel.
  prefs: []
  type: TYPE_NORMAL
- en: Converting the picture to a byte array
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now you need to be able to display the picture. You need to write some code
    to accomplish the conversion. So, start by entering the following beneath the
    closed curly brace of the outer `for` loop:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Here, you make a byte array, called `picBytes`, then `(byte[])` is used to convert
    for casting. There's an image converter class, so you make a new `ImageConverter()`
    class, and then you convert to a destination type, `typeof`, and then `byte`.
    So, here you convert the picture to a byte array.
  prefs: []
  type: TYPE_NORMAL
- en: Now if you were to remove the `(byte[])` cast, the tooltip would then say that
    your byte array Cannot implicitly convert type 'object' to byte[]. This is the
    case because `ConvertTo` returns an object. Thus, you need to have that `(byte[])`
    cast right there in front of it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that you have this, you can say the following next:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Inside `Convert`, you can now enter `Convert.ToBase64String`, and `picBytes`
    can be converted to `base64` string.
  prefs: []
  type: TYPE_NORMAL
- en: Sending out the image URL
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now you can send out the image URL, so enter the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The `baseString` variable at the end of this line is the result of running two
    `base64` strings on an array of picture bytes.
  prefs: []
  type: TYPE_NORMAL
- en: Running the program
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'With this in place, now let''s take a look at the results; open your browser
    and click on the Load button. The altered image is shown in *Figure 25.4.7*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/963e3bbc-bced-4496-a792-cc7f8e6a6842.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 25.4.7: The manipulated image that resulted when the program was run'
  prefs: []
  type: TYPE_NORMAL
- en: 'You''ll see now that the picture has been inverted as promised: the colors
    are green. The background was kind of a reddish-brown in the original, and now
    it''s green. The man''s hair was kind of brown and now it''s kind of dark, and
    likewise with the table. Some of the things, however, do not appear to be much
    affected, like the money color, right? That is still kind of grayish. The same
    thing with the black objects in the image.'
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, you can manipulate images, change them around, and make them
    look very different, so nothing is really permanently fixed. That's the point.
    Also, you can access each pixel individually, change the color, and then the last
    three lines of code in the program are responsible for allowing you to write `Image1.ImageUrl`.
    To set this image URL, you need to go through the first two lines in that group
    of three. There could be some simpler ways of doing it, but this is one way that
    works.
  prefs: []
  type: TYPE_NORMAL
- en: Chapter review
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The complete version of the `Default.aspx.cs` file for this chapter, including
    comments, is shown in the following code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned how to work with images at the pixel level. You
    inverted the colors, changing them around. You inserted a button and image control
    into the HTML, made a bitmap, saved an image as a bitmap picture, wrote the code
    to access each pixel's location to manipulate the pixels, converted the picture
    to a byte array, and sent out the image URL.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will learn how to read files and then save them to
    SQL Server as images.
  prefs: []
  type: TYPE_NORMAL
