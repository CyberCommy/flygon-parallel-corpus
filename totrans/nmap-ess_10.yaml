- en: Chapter 10. Penetration Testing with Metasploit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A vulnerability assessment is only part of a full security sweep. After vulnerabilities
    are identified or misconfigurations are discovered, the security assessor should
    strive to actually exploit these vulnerabilities. The reasons for taking the assessment
    to the exploitation stage are numerous, but the most important parts are to eliminate
    false positive findings and to demonstrate the full criticality of potentially
    severe findings.
  prefs: []
  type: TYPE_NORMAL
- en: There is very little that will catch a Director of IT or CIO's attention faster
    than exfiltrating sensitive data from a supposedly secured system!
  prefs: []
  type: TYPE_NORMAL
- en: Metasploit is a very effective attack platform, with many modules being added
    to the system at a very quick rate. Leveraging the power of Metasploit with scanning
    tools such as Nmap, and vulnerability scanners such as Nessus, can complete the
    Trifecta of a well-prepared security tool suite.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing Metasploit
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scanning with Metasploit
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Attacking services with Metasploit
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What to learn next
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing Metasploit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we can begin using Metasploit, we need to install it to our system. Unlike
    Nmap, installing Metasploit can be a little bit trickier—but it's nothing that
    a little careful work can't overcome!
  prefs: []
  type: TYPE_NORMAL
- en: 'The first step is to make sure that all the dependencies that Metasploit requires
    are installed. To do so is relatively simple, we just need to run `sudo apt-get
    install build-essential libreadline-dev libssl-dev libpq5 libpq-dev libreadline5
    libsqlite3-dev libpcap-dev openjdk-7-jre git-core autoconf postgresql pgadmin3
    curl zlib1g-dev libxml2-dev libxslt1-dev vncviewer libyaml-dev curl zlib1g-dev`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing Metasploit](img/4065OS_10_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As you can see in the preceding screenshot, most Linux machines will need to
    install several packages from this list that aren't included by default. Don't
    worry if you don't know what these individual packages do—we just need them installed
    so that Metasploit can function correctly.
  prefs: []
  type: TYPE_NORMAL
- en: 'In addition to installing various packages, we need to make sure that we have
    an up-to-date version of Ruby installed. Using a tool called "RVM" makes this
    relatively straightforward; full documentation of RVM is available at [http://rvm.io](http://rvm.io).
    At the time of writing, we are installing Ruby 2.1.5 to run Metasploit:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing Metasploit](img/4065OS_10_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Once Ruby is installed, the only other requirements are Nmap (which we've already
    installed), configuring Postgres, and installing Metasploit itself.
  prefs: []
  type: TYPE_NORMAL
- en: 'Configuring Postgres is very straightforward: as `root`, simply run `su postgres`
    to assume that user role, and run the following two commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Once the Postgres database is configured, we can start working with Metasploit
    itself. The first step is to clone the Git repository to get the code locally,
    which can be achieved by running `git clone https://github.com/rapid7/metasploit-framework.git`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the files have been created (in a directory called "metasploit-framework"),
    we can `cd` into that directory and run `bundle install`, in order to make sure
    Ruby gem dependencies are up-to-date. If the gems are out-of-date, `bundle update`
    will verify that the latest specified versions are running:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing Metasploit](img/4065OS_10_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: At this stage, Metasploit is installed! We have no need to compile anything,
    since Metasploit is written in Ruby (which is an interpreted language, rather
    than a compiled one). To start Metasploit, simply run `./msfconsole` while in
    the metasploit-framework directory—and that's all it takes!
  prefs: []
  type: TYPE_NORMAL
- en: Scanning with Metasploit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'While Nmap''s primary strength lies in performing fast, scalable port scans,
    and Nessus''s forte is conducting in-depth vulnerability scans and misconfiguration
    detection checks, Metasploit excels in actually exploiting vulnerabilities on
    a one-off basis. In a security assessment, Metasploit is generally brought to
    the table as a last step: once the vulnerabilities are enumerated from other tools,
    Metasploit can actually exploit them. Sensitive data, compromised machines, and
    more, can easily be exfiltrated using Metasploit and a variety of tools that come
    packaged with the framework.'
  prefs: []
  type: TYPE_NORMAL
- en: Metasploit can easily have a whole book dedicated to its usage—and, in fact,
    it does—but we'll go over the basic scanning and exploitation techniques so that
    you can implement it into your everyday processes, without too much of a hassle.
  prefs: []
  type: TYPE_NORMAL
- en: 'The easiest way to launch a scan for a particular vulnerability (or information
    gathering technique) is simply to use it. The way to specify a `use` command is
    simply run `use primary/secondary/module` in Metasploit. The following screenshot
    shows us setting up an HTTP version scan in Metasploit:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Scanning with Metasploit](img/4065OS_10_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'As you can easily see in the preceding screenshot, we''ve decided to use the
    `auxiliary/scanner/http/http_version` module to check HTTP versions. Once we have
    the module selected, we check what options are available by running "show options."
    In this case, we need to specify that `rhosts` should be our target web server.
    Because this is plural (hosts, not ''host''), you can tell that we can theoretically
    scan an Internet range from this directive. A brief description is also written
    in the **Description** tab of this window. The following screenshot shows options
    for a Metasploit scan:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Scanning with Metasploit](img/4065OS_10_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The preceding screenshot illustrates that running the module is simple—done
    just by invoking the `run` command—and we get the results we're looking for! In
    this case, we receive `nginx` as the version for my web server.
  prefs: []
  type: TYPE_NORMAL
- en: It's worth noting that there are many auxiliary modules, especially "scanners"
    for various different vulnerabilities and exploits. You don't always have to actually
    attack a service in order to find out whether it's vulnerable!
  prefs: []
  type: TYPE_NORMAL
- en: Attacking services with Metasploit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we learned earlier in this chapter, Metasploit's claim to fame is as an attack
    platform. Every day, Metasploit modules are being written and submitted to the
    Metasploit project; each of which can either perform a scan or, more often, actually
    attack a given vulnerability.
  prefs: []
  type: TYPE_NORMAL
- en: 'Metasploit''s ability to act as an attack was revolutionary when it first debuted:
    rather than searching for proofs of concepts—or writing their own, after a vulnerability
    was announced—security professionals were immediately able to use a reliable platform
    with vetted modules to launch their attacks. Metasploit is written in Ruby, so
    it''s portable to almost any platform—and since all the modules run on the framework,
    there is no reason to hope a proof of concept will run on whatever type of machine
    the user happens to currently be using.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The first step to launch a successful attack is using the "search" feature
    of Metasploit to look for a given module. There are a lot of ways you can use
    the search functionality, but for our purposes, we''re just going to look for
    something relatively straightforward: MS08-067, a well-known vulnerability in
    Windows that can give us quite a lot of access if we use it correctly!'
  prefs: []
  type: TYPE_NORMAL
- en: '![Attacking services with Metasploit](img/4065OS_10_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We can select the module by invoking `use`, and then set the options we need
    by listing them out with `show options`. It's worth noting in the preceding screenshot
    that each Metasploit module can have a rank—in our case, the matching module came
    back "great." Great! Lastly, you might notice that the initial response from Metasploit
    is that we don't have a database connected, so we're using `slow search`. While
    it's true that connecting the Postgres database that we made earlier to Metasploit
    would make a lot of sense, it's not always the fastest way to proceed if we're
    just looking to run a quick exploit.
  prefs: []
  type: TYPE_NORMAL
- en: After setting our target with `rhost`, we can run the exploit by typing `exploit`.
    Note that this is different than simply running a scan—Metasploit wants to ensure
    that you're well aware that you're launching an exploit.
  prefs: []
  type: TYPE_NORMAL
- en: When the exploit is successfully run, you will open a `meterpreter` session.
    You can always view open sessions by running the `sessions` command.
  prefs: []
  type: TYPE_NORMAL
- en: Meterpreter is a powerful tool that lives in the memory of a compromised machine.
    From Meterpreter, it is possible to run a large variety of commands—including
    attacks from Metasploit itself—in order to exfiltrate data to another system,
    or to pivot further into a compromised network. A chain of Meterpreter shells
    can easily compromise an entire network, and exfiltrate all sensitive data back
    to the source of the attacks—in this case, us!
  prefs: []
  type: TYPE_NORMAL
- en: What to learn next
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Like a security program itself, learning about information security is always
    a process—never a finished state. Although we have learned the basics of networking;
    how to become a power user of Nmap (and the other tools in the Nmap suite); how
    to conduct a vulnerability scan; and, now, how to conduct a penetration test—there
    are millions of other topics available to pursue.
  prefs: []
  type: TYPE_NORMAL
- en: While there's no set curriculum to become a security professional or to continue
    one's education in the field, there are many more books on the subject—and many
    different topics to cover. I strongly recommend you to look into *The Web Application
    Hacker's Handbook*, if web application assessments is interesting to you. There
    are also countless books on Metasploit, Burp Suite Professional, exploit development,
    reverse engineering, malware analysis, and many more topics that you can explore.
  prefs: []
  type: TYPE_NORMAL
- en: Never stop learning!
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned how to install Metasploit, conduct scans for specific
    vulnerabilities or information leaks using Metasploit, and actually exploit these
    vulnerabilities in order to conduct a successful attack. From there, we learned
    about Meterpreter, including how to view sessions and the ability to pivot further
    into a target network.
  prefs: []
  type: TYPE_NORMAL
- en: Metasploit is a powerful framework used to exploit network-based vulnerabilities,
    and it deserves a front-row seat to any security assessment.
  prefs: []
  type: TYPE_NORMAL
- en: Thank you for taking the time to read this book. While we have made every effort
    to keep the information in this book as up-to-date as possible, the security world—especially
    the world of security tools—is always changing. Please feel free to reach out
    to me for updated information, should it become necessary. Happy hacking!
  prefs: []
  type: TYPE_NORMAL
