- en: Chapter 1. Foundations and Tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is important to learn about the foundations in each area. You need to have
    basic information to be a professional. Good usage of tools is almost as important
    as the foundation. Without good tools, your foundation won't be used well.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter is about tools that will help to build better CSS code. It describes
    features of preprocessors and finally the foundation knowledge about SASS. In
    this chapter, you can get basic knowledge about automatization of repeatable processes
    in frontend development with `GULP.js`. Finally, you can find an example of file
    structure, which will partialize your project into small, easy to edit, and maintainable
    files.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will:'
  prefs: []
  type: TYPE_NORMAL
- en: Learn about the usage of preprocessors.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a CSS project with a proper structure.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Choosing the right IDE
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Building CSS code is pretty simple. If you want to start, you just need a simple
    text editor and start writing your code. If you want to speed up the process,
    you will need to choose the right text editor or integrated development environment
    (IDE). Currently the most popular editors/IDEs for frontend developers are as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Sublime Text
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Atom
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: WebStorm/PHPStorm
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Eclipse/Aptana
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Brackets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Your choice will be based on price and quality. You should use the editor that
    you feel most comfortable with.
  prefs: []
  type: TYPE_NORMAL
- en: Speeding up the programming process with snippets/Emmet
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When you are creating a code, you have parts of codes that you repeat in all
    projects/files. You will need to create snippets that will help you to speed up
    the process of writing code. As a frontend developer, I recommend you to get a
    basic knowledge about **Emmet** (previously Zen Coding). This is a collection
    of HTML/CSS snippets, which will help you build code faster. How to use it? It
    is basically included in modern frontend editors (Sublime Text, Atom, Brackets,
    WebStorm, and so on). If you want to check how Emmet works in CSS you need to
    start a declaration of some class for example `.className`, open the brackets
    (`{}`) and write for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Following are examples of the most used properties and values:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Emmet form | Result |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `bg` | Background |'
  prefs: []
  type: TYPE_TB
- en: '| `bgc` | Background color |'
  prefs: []
  type: TYPE_TB
- en: '| `m` | Margin |'
  prefs: []
  type: TYPE_TB
- en: '| `ml`, `mr`, `mt`, `mb` | Margin-left, margin-right, margin-top, margin-bottom
    |'
  prefs: []
  type: TYPE_TB
- en: '| `ml20px` | Margin-left: 20px |'
  prefs: []
  type: TYPE_TB
- en: '| `c` | Color |'
  prefs: []
  type: TYPE_TB
- en: '| `fl` | Float: left |'
  prefs: []
  type: TYPE_TB
- en: '| `p20px20p` | Padding: 20px 20% |'
  prefs: []
  type: TYPE_TB
- en: '| `tac` | Text-align: center |'
  prefs: []
  type: TYPE_TB
- en: '| `tdn` | Text-decoration: none |'
  prefs: []
  type: TYPE_TB
- en: '| `ttu` | Text-transform: uppercase |'
  prefs: []
  type: TYPE_TB
- en: '| `dib` | Display: inline-block |'
  prefs: []
  type: TYPE_TB
- en: '| `!` | !important |'
  prefs: []
  type: TYPE_TB
- en: 'For a better understanding of Emmet and to get a full list of features, it
    is recommended to check the official website of the project at: [http://emmet.io/](http://emmet.io/).'
  prefs: []
  type: TYPE_NORMAL
- en: Keyboard shortcuts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Do you remember when you learned the most impressive keyboard shortcuts *Ctrl*
    + *C* ,*Ctrl* + *V*? It helped you to save about 2 seconds each time you wanted
    to make an operation of copying and pasting some text or any other element. But
    what about automizing some processes in building code? Yeah, it's going to be
    helpful and you can do it with keyboard shortcuts.
  prefs: []
  type: TYPE_NORMAL
- en: 'Shortcuts that you should know in your IDE are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Duplicating line
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deleting line
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Moving line
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Formatting code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cross browser compatibility – which browsers should you install?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To test your code, you will need all the modern web browsers. In your list,
    you should have the following browsers:'
  prefs: []
  type: TYPE_NORMAL
- en: Google Chrome (newest version)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mozilla Firefox (newest version)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mozilla Firefox developers edition (newest version)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Opera (newest version)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Safari (newest version)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Internet Explorer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Internet Explorer (IE) is the biggest issue in frontend developers' lives because
    you will need a bunch of IEs on your machine, for example, 9, 10, and 11\. The
    list is getting smaller because back in the days the list was longer. IE6, 7,
    8, 9, and so on. Now IE6, 7, and 8 are mostly not supported by the biggest web
    projects like YouTube and Facebook. But it sometimes occurs in big companies in
    which the changing of operating systems is a pretty complicated process.
  prefs: []
  type: TYPE_NORMAL
- en: 'To easily test your code on a bunch of browsers, it is good to use online tools
    dedicated for this test:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://crossbrowsertesting.com/](https://crossbrowsertesting.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://www.browserling.com/](https://www.browserling.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://www.browserstack.com/](https://www.browserstack.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: But an easy and free way to do it is to create a virtual machine on your computer
    and use the system and browser which you need. To collect the required versions
    of IE, you can refer to [http://modern.ie](http://modern.ie). With `modern.ie`,
    you can select the IE version you need and your version of virtual machine platform
    (VirtualBox, Parallels, Vagrant, VMware).
  prefs: []
  type: TYPE_NORMAL
- en: How to use inspector
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Dealing with HTML and CSS code is almost impossible nowadays without inspector.
    In this tool, you can see the markup and CSS. Additionally, you can see the box
    model. This is well known too in browsers for web developers. A few years ago,
    everybody was using Firebug dedicated for Firefox. Now each modern browser has
    its own built-in inspector, which helps you to debug a code.
  prefs: []
  type: TYPE_NORMAL
- en: The easiest way to invoke inspector is to right-click on an element and choose
    **Inspect**. In Chrome, you can do it with a key shortcut. In Windows, you have
    to press *F12*. In MAC OSX, you can use *cmd* + *alt* + *I* to invoke inspector.
  prefs: []
  type: TYPE_NORMAL
- en: '![How to use inspector](img/00002.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Key shortcuts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For faster using of your browser, it's good to know some key combinations that
    will speed up the process.
  prefs: []
  type: TYPE_NORMAL
- en: '| Key combination | Function |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| *Ctrl* + *R*, *cmd* + *R* | Reload |'
  prefs: []
  type: TYPE_TB
- en: '| *Ctrl* + *Shift* + *R*, *cmd* + *shift* + *R* | Reload with cache |'
  prefs: []
  type: TYPE_TB
- en: '| *cmd* + *I*, *F12* | Inspector |'
  prefs: []
  type: TYPE_TB
- en: '| *Ctrl* + *U*, *cmd* + *alt* + *U* | Source of page |'
  prefs: []
  type: TYPE_TB
- en: Preprocessor – why should you use them?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A preprocessor is a program that will build CSS code from other syntax similar
    or almost identical to CSS. The main advantages of preprocessors are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Code nesting
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ability of using variables
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ability of creating mixins
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ability of using mathematical/logical operations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ability of using loops and conditions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Joining of multiple files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Nesting elements in preprocessors
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Preprocessors give you the advantage of building code with nesting of declarations.
    In simple CSS, you have to write the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preprocessor, you just need to write the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Or in SASS with the following indentation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'And it will simply compile to code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The proper usage of nesting will give you the best results. You need to know
    that good CSS code.
  prefs: []
  type: TYPE_NORMAL
- en: Using variables to parametrize your CSS code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In good CSS code, there is no possibility to use variables in all browsers.
    Sometimes you are using same value in the few places, but when you have change
    requests from client/project manager/account manager, you just immediately need
    to change some colors/margins, and so on. In CSS, usage of variables is not supported
    in old versions of Internet Explorer. Usage of variables is possible with CSS
    preprocessors.
  prefs: []
  type: TYPE_NORMAL
- en: Using mixins in preprocessors
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In classic programming language, you can use functions to execute some math
    operations or do something else like displaying text. In CSS, you haven''t got
    this feature, but in preprocessors you can create mixins. For example, you need
    prefixes for border-radius (old IE, Opera versions):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'You can create a mixin (in SASS):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'And then invoke it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Mathematical operations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In preprocessors, you can use math operations like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Addition
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Subtraction
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Multiplying
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dividing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'As an example, we can create simple grid system. You will need, for example,
    10 columns with a resolution of 1,000 pixels:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Logic operations and loops
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Without a logical operator's comparison of operations and loops, you cannot
    create a good program in classic programming language. The same applies to preprocessors.
    You need them to automatize the creation of classes/mixins, and so on. The following
    is the list of possible operators and loops.
  prefs: []
  type: TYPE_NORMAL
- en: 'The list of comparison operators is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`<`: less than'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`>`: greater than'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`==`: equal to'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`!=`: not equal to'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<=`: less or equal than'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`>=`: greater or equal than'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The list of logical operators is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`and`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`or`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`not`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The list of loops is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`if`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`for`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`each`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`while`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Joining of multiple files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In classic CSS, you can import files into one CSS document. But in a browser,
    it still makes additional requests to the server. So, let''s say when you have
    a file with the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: It will generate four additional requests to CSS files. With a preprocessor,
    each `@import` makes a merging for you, and in this place you will have the content
    of the mentioned file. So, finally, you have four files in one.
  prefs: []
  type: TYPE_NORMAL
- en: Less – a short introduction
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Less is a preprocessor mainly used in a Bootstrap framework. It has all the
    features of a preprocessor (mixins, math, nesting, and variables).
  prefs: []
  type: TYPE_NORMAL
- en: '![Less – a short introduction](img/00003.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'One of the good features is the quick invoking of declared mixins. For example,
    you have created a class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Then you can add declared properties with its values in other elements declared
    in your less file (it works like a mixin):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'You will finally get the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: CSS with Stylus
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Stylus has two versions of code (like SASS): one with braces/semicolons and
    the other without braces/semicolons. Additionally (over SASS), you can omit colons.
    If it continues to be developed and still retains its present features, it''s
    going to be the biggest competitor for SASS.'
  prefs: []
  type: TYPE_NORMAL
- en: '![CSS with Stylus](img/00004.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: SASS – the most mature preprocessor
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: SASS stands for **Syntactically Awesome Stylesheets**. It first appeared in
    2006 and was mainly connected to **Ruby on Rails** (**RoR**) projects. Agile methodology
    used in RoR had an influence on frontend development. This is currently the best
    known CSS preprocessor used in the Foundation framework with the combination of
    Compass. A new version of the Twitter Bootstrap (fourth version) framework is
    going to be based on SASS too.
  prefs: []
  type: TYPE_NORMAL
- en: '![SASS – the most mature preprocessor](img/00005.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'In SASS, you can write code in a CSS-like version called **SCSS**. This version
    of code looks pretty similar to CSS syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The second version of code is SASS. It uses indentations and is the same as
    the preceding code, but written in SASS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'You can see bigger differences in mixins. To invoke a mixin in SCSS, write
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'To invoke a mixin in SASS, write the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, SASS is a shorter version than SCSS. Because of the shortcuts
    and the automatization processes it is highly recommend to use SASS over SCSS—write
    Less—get more.
  prefs: []
  type: TYPE_NORMAL
- en: Personally I'm using SASS. Why? The first reason is its structure. It looks
    very similar to Jade (an HTML preprocessor). Both of them are based on indentation
    and it is easy stylize Jade code. The second reason is the shorter versions of
    functions (especially mixins). And the third reason is its readability. Sometimes,
    when your code is bigger, the nesting in SCSS looks like a big mess. If you want,
    for example, to change a nested class to be in any other element, you have to
    change your `{}`. In SASS, you are just dealing with indentation.
  prefs: []
  type: TYPE_NORMAL
- en: Short comparison
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'I''ve been working a lot with Less and SASS. Why did I finally chose SASS?
    Because of the following reasons:'
  prefs: []
  type: TYPE_NORMAL
- en: It's a mature preprocessor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It has very good math operations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It has extensions (Compass, Bourbon)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Usage of Compass is recommended because:'
  prefs: []
  type: TYPE_NORMAL
- en: It has a collection of modern mixins
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It creates sprites
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Most preprocessors have the same options and the reason you will choose one
    is your own preferences. In this book, I will be using SASS and Compass. In the
    following table, you can find a short comparison:'
  prefs: []
  type: TYPE_NORMAL
- en: '|   | Less | Stylus | SASS |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Variables | Yes | Yes | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| Nesting | Yes | Yes | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| Mixins | Yes | Yes | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| Math | Yes | Yes | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| Additional collections of mixins | No | No | Yes (Compass/Bourbon) |'
  prefs: []
  type: TYPE_TB
- en: SASS foundation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Using the SASS preprocessor is really simple. You can use it in two ways: SCSS
    and SASS itself. Using the SASS preprocessor is really simple. You can use it
    in two ways: SCSS and SASS. The SCSS syntax looks like extended CSS. You can nest
    your definitions using new braces. SASS syntax is based on indent (similar for
    example to Python language).'
  prefs: []
  type: TYPE_NORMAL
- en: Variables – where and how to use
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Using variables is the essential feature of SASS, which is mostly impossible
    in CSS that is used on most modern browsers. Variables can be used in every element
    that you want to parametrize, such as colors, margins, paddings, and fonts.
  prefs: []
  type: TYPE_NORMAL
- en: To define variables in SASS, you just need to do it with the `$` sign and add
    the name of your variable after it.
  prefs: []
  type: TYPE_NORMAL
- en: 'In SCSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Usage:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Simple mixins – where and how to use (@mixin, @include)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As mentioned in the previous section, variables can be used to parametrize the
    code. The second best known feature is to add some predefined block of code that
    you can invoke with some shorter version.
  prefs: []
  type: TYPE_NORMAL
- en: 'In SCSS, you can predefine it this way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'And then invoke with:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'In the SASS version:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'And invoke it with:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Example:'
  prefs: []
  type: TYPE_NORMAL
- en: 'SASS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Compiled CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Extending classes (@extend)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'What does `@extend` make in SASS code? For example, you have a part of code
    that is repeating in all fonts:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'And you don''t want to repeat this part of code in the next selector. You will
    write in SASS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'The code it will generate will look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: This SASS feature is great to build optimized code. Remember to use it in your
    project over mixins, which will generate more code.
  prefs: []
  type: TYPE_NORMAL
- en: Importing files (@import)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In CSS, you could import CSS files into one root file with `@import`. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'In SASS, you can import SASS/SCSS files into one with an automatic merge option.
    In case you have, for example, two files that you want to include in one SASS
    file, you need to write the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: As you can see in the preceding code, you don't need to add an extension of
    the file into `import` as it automatically loads the SASS or SCSS file. The only
    thing you need to remember is to have only one file in this example named, `typography`.
  prefs: []
  type: TYPE_NORMAL
- en: Let's check how it will behave in real code. Imagine that we have two files,
    `_typography.sass` and `_grid.sass`.
  prefs: []
  type: TYPE_NORMAL
- en: 'File `_grid.sass`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'File `_typography.sass`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let''s create a `style.sass` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'After compilation of `style.sass`, you will see a `style.css` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, two files are merged into one CSS, so, additionally, we made
    a small optimization of code because we reduced the number of requests to the
    server. In case of three files, we have three requests (`style.css`, then `typography.css`,
    and `grid.css`). Now there will be only one request.
  prefs: []
  type: TYPE_NORMAL
- en: Using of & in SASS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Sometimes, in nesting, you will need to use the name of the selector that you
    are currently describing. As a best description of the problem, you need to first
    describe a link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'and then:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'In SCSS, you can use `&` to do that:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'In SASS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'You can resolve with this element other problems like combining names:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'In SCSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'In SASS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: This option has been possible since SASS 3.5\. It will be very helpful in creating
    code build in BEM methodologies.
  prefs: []
  type: TYPE_NORMAL
- en: Compass features
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Compass is a very useful SASS framework, especially when you are working with
    a big list of icons/reusable images. What you need to do is gather all the images
    in one folder in your project. For example, `yourfolder/envelope.png` and `yourfloder/star.png`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then in your SASS code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Then in your code, you can use images as an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'And it will add a code to your classes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: Where `-100px` and `-200px` are examples of offset in your sprite.
  prefs: []
  type: TYPE_NORMAL
- en: Simple automatization (with Gulp)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Every time we are compiling project files (for example, Compass, Jade, image
    optimization, and so on), we are thinking about how we can automatize and speed
    up the process. The first idea—some terminal snippets and compiling invokers.
    But we can use `grunt.js` and `gulp.js`. What are Grunt and Gulp? In short—task
    runners. You can define a list of tasks, which you repeat all the time, group
    them into some logical structure, and run.
  prefs: []
  type: TYPE_NORMAL
- en: In most projects, you can use them to automatize a process of SASS/Compass compilation.
  prefs: []
  type: TYPE_NORMAL
- en: 'I assume that you have installed Node.js, Ruby, sass, and Compass. If not,
    I recommend you to do this first. To install all of the listed software, you need
    to visit:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://nodejs.org/en/](https://nodejs.org/en/) to install Node.js'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://www.ruby-lang.org/en/](https://www.ruby-lang.org/en/) to install Ruby'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://sass-lang.com/](http://sass-lang.com/) to install SASS'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://compass-style.org/](http://compass-style.org/) to install Compass'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://gulpjs.com/](http://gulpjs.com/) to install Gulp globally on your machine'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: On these pages, you can find guides and tutorials on how to install all of this
    software.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then you will need to create a basic structure for your project. It is best
    to create folders:'
  prefs: []
  type: TYPE_NORMAL
- en: '`src`: In this folder we will keep our source files'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dist`: In this folder we will keep our compiled files'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the `src` folder, please create a `css` folder, which will keep our SASS
    files.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then in the `root` folder, run the following command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'In `gulpfile.js` add the following lines of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'Now you can run your automatizer with the following in your command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: This will run the `default` task from your `gulpfile.js`, which will add a watcher
    to the files with `.sass` extensions, which are located in the `src/css` folder.
    Every time you change any file in this location, your task `compass` will run.
    It means that it will run the `compass` task and create a sourcemap for us. We
    could use a default `compass` command, but `gulp.js` is a part of the modern frontend
    developer workflow. We will be adding new functions to this automatizer in the
    next chapters.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s analyze the code a little deeper:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code defines the default task. It appends a watcher, which checks
    the `src/css/**/*.sass` location for sass files. It means that every file in a
    `src/css` folder and any subsequent folder, for example, `src/css/folder/file.sass`,
    will have a watcher. When files in this location are changed, the task defined
    in the array `[compass]`will run. Our `task compass` is the only element in the
    array but it, of course, can be extended (we will do this in the next chapters).
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s analyze the `task compass`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'It will compile the `gulp.src(''src/styles/main.sass)`file and save the compiled
    file in `pipe` (`gulp.dest(''style.css'')`). The `compass` task is defined in
    `pipe`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: The first line of this task defines the source folder for SASS files. The second
    line defines the images folder. The third line sets the destination of the CSS
    file. The fourth line is set to generate a source map for the file (for easier
    debugging).The fifth line defines the style of the saved CSS file; in this case,
    it will be compressed (it means that it will be ready for production code).
  prefs: []
  type: TYPE_NORMAL
- en: Pixelperfect layouts tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In a common workflow, a graphic designer creates the design of a website/application.
    Then, next in the process is the HTML/CSS coding. After the development process,
    the project is in the **quality assurance** (**QA**) phase. Sometimes it's focused
    only on the functional side of the project, but in a good workflow, it checks
    of graphic design phase. During the QA process, the designer is involved, he/she
    will find all pixels that are not good in your code. How would check all the details
    in a pixelperfect project?
  prefs: []
  type: TYPE_NORMAL
- en: The question is about mobile projects. How to check if it is still pixel perfect
    when it needs to be flexible in browsers? You will need to make it in described
    ranges. For example, you have to create HTML/CSS for the web page, which has three
    views for mobile, tablet, and desktop. You will need plugins, which will help
    you to build pixel perfect layouts.
  prefs: []
  type: TYPE_NORMAL
- en: Pixelfperfect plugin
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Pixelperfect plugin will help you to compare design with your HTML/CSS in your
    browser. This plugin is available on Firefox and Chrome. To work with it, you
    need to make a screenshot of your design and add it in a plugin. Then you can
    set a position of image and opacity. This plugin is one of the most used by frontend
    developers to create pixel perfect HTML layouts.
  prefs: []
  type: TYPE_NORMAL
- en: '![Pixelfperfect plugin](img/00006.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: MeasureIT plugin
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This plugin will help you to keep proper distances between elements, fonts,
    and so on. As you can see in the following screenshot, it looks like a ruler over
    your web page. It is easy to use—just click on the plugin icon in the browser
    and then click on the website (it will start the ruler), and move the cursor to
    the place to which you want to know the distance, and voila!
  prefs: []
  type: TYPE_NORMAL
- en: '![MeasureIT plugin](img/00007.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Checking compatibility
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Some CSS features don't work in all browsers. Some new properties need browser-specific
    prefixes (like `-ms`, `-o`, `-webkit`) to work properly across all modern browsers.
    But how to check if you can use some properties in your project? Of course, you
    can check it yourself, but the easiest way is to check it on [http://caniuse.com/](http://caniuse.com/).
    You can open this web page and check which properties you can use.
  prefs: []
  type: TYPE_NORMAL
- en: '![Checking compatibility](img/00008.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Good assumptions in code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'While you are creating CSS code, you have to remember initial assumptions that
    will help you to keep clear and very readable code. These assumptions are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Naming convention—You need to remember that your code needs to be the exact
    names of classes.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use comments, but not everywhere, only in places where they are needed. Yeah,
    but when they are needed? They are especially needed when you have some exception
    or when you have some quick fixes for browsers. With comments, you can describe
    blocks of code, which describes the views, for example, of footer/header, or any
    other element.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Try to keep code which is readable and logical. But how does unlogical code
    look like? Look at the following two examples:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Example 1 is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'Example 2 is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: Which code looks better? Yeah, of course, the second example because it has
    grouped declarations. First the description of the box model, then the font and
    text behaviors, and finally color. You can try to keep it in another hierarchy
    which will be more readable for you.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using sample 2 in SASS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: Isn't it shorter and more logical?
  prefs: []
  type: TYPE_NORMAL
- en: Create proper selectors (this will be described later in this chapter).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create an elastic structure for your files.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating proper selectors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The main problem of the CSS coder is creating proper selectors. Knowledge about
    priors in selectors is mandatory. It will help you to omit the `!important` statement
    in your code and will help you to create smaller and more readable files.
  prefs: []
  type: TYPE_NORMAL
- en: Using IDs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Using of IDs in CSS is rather bad behavior. The foundation of HTML says that
    an ID is unique and should be used only once in an HTML code. It is good to omit
    IDs in CSS and use them only when it is the only way to style some element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'Usage of IDs in CSS code is bad behavior because selectors based on ID are
    stronger than selectors based on classes. This is confusing in legacy code when
    you see that some part of the code is still preceded by another selector because
    it is added in the ID''s parents-based selector as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: It is good to omit this problem in your projects. First, think twice if a selector
    based on an ID is a good idea in this place and if this cannot be replaced with
    any other "weaker" selector.
  prefs: []
  type: TYPE_NORMAL
- en: Using classes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Classes are the best friends of the HTML/CSS coder. They are reusable elements
    that you can define and then reuse as much as you want in your HTML code, for
    example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: Grouping selectors
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can group and nest selectors. First, let''s nest them:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'Then let''s group them:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: Interesting selectors
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In CSS code, you need to be a selector specialist. It is a very important skill
    to make a right selector that will match a specific element in the DOM structure.
    Let's provide a little bit of fundamental knowledge about selectors.
  prefs: []
  type: TYPE_NORMAL
- en: Adjacent sibling combinatory +
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The plus sign in CSS can be used in selectors in which you will need to select
    an element right after the element on the left side of the plus sign, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'This selector will return `a`, which is right after the `p` selector, like
    in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'But it won''t work in the following case:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: Child combinator ">"
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'With element (`>`) in the selector, you can match every element that is right
    into the element. Let''s analyze the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'This selector will return all `<a>` elements which are into`<p>` element but
    are not nested deeper, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: 'But this won''t work in the following case:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: Adjacent sibling combinatory ~
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'With `~,` you can create a selector that will match every element that is parallel
    in the DOM structure, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: 'This selector will work in the following cases:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: 'and:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: Getting elements by attributes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Sometimes, there is no way to create a selector based on elements, classes,
    and IDs. So this is the moment when you need to search for any other possibility
    to create the right selector. It is possible to get elements by their attributes
    (`data`, `href`, and so on):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: 'It will return the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: 'And will also return the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: Attributes with exact value [attribute="value"]
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In real CSS/HTML code, there are examples when you will need a selector which
    is based on attributes with an exact value like inputs with the type as text or
    when elements data attribute is set with some value. It is possible with a selector
    which is similar to this example code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: 'will match:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: Attributes which begin with [attribute^="value"]
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This selector is very useful when you want to match elements with attributes
    that begin with some specific string. Let''s check an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: 'SASS code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: 'Compiled CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s analyze this fragment in SASS code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: 'This selector will match every element that has an attribute with a `grid`
    word in the beginning of this attribute. This will match in our case: `.grid-1of2`
    and `.grid-1of4`. Of course, we could do it with SASS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: 'And get it in compiled code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: 'But let''s imagine that we have about `10` or maybe `40` classes like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: 'In compiled CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: 'And now we want to apply a `float: left` to these elements like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: 'In CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: 'It is easier to use a selector based on `[attribute^="value"]` and match all
    of the elements with a class which starts with a grid string:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: Whitespace separated attribute values [attribute~="value"]
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: With this selector you can match all elements which in list of "attributes"
    that contains a string described as a "value". Let's analyze the following example.
  prefs: []
  type: TYPE_NORMAL
- en: 'HTML:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: 'Now in SASS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: 'Compiled CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: 'And the effect in the browser is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Whitespace separated attribute values [attribute~="value"]](img/00009.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Attribute values ending with [attribute$="value"]
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In one of the previous sections, we had an example of a selector based on beginning
    of an attribute. But what if we need an attribute ending? With this feature comes
    a selector based on a pattern `[attribute$="value"]`. Let''s check the following
    example code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: 'SASS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: 'Compiled CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: 'The effect in the browser is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Attribute values ending with [attribute$="value"]](img/00010.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: With the selector `[href$="form"],`we matched all elements whose attribute `href`
    ends with the string `form`.
  prefs: []
  type: TYPE_NORMAL
- en: Attributes containing strings [attribute*="value"]
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: With this selector, you can match every element that contains a string in a
    value in any place. Let's analyze the following example code.
  prefs: []
  type: TYPE_NORMAL
- en: 'HTML:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: 'SASS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: 'Compiled CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: 'In the browser we will see:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Attributes containing strings [attribute*="value"]](img/00011.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: With the selector `[href*="contact"]`, we matched every element that contains
    the `contact` string in the value of the attribute `href`.
  prefs: []
  type: TYPE_NORMAL
- en: Using !important in CSS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Hah… the magic word in CSS, which you can see in some special cases. With `!important`,
    you can even overwrite inline code added by JavaScript in your HTML.
  prefs: []
  type: TYPE_NORMAL
- en: 'How to use it? It is very simple:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: Remember to use it properly and in cases where you really need it. Don't overuse
    it in your code because it can have a big impact in the future, especially in
    cases when somebody will read your code and will try to debug it.
  prefs: []
  type: TYPE_NORMAL
- en: Preparing your project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Starting your project and planning it is one of the most important processes.
    You need to create a simple strategy for keeping variables and mixins and also
    create a proper file structure. This chapter is about the most known problems
    in planning your file structure and the partialization of files in your project.
  prefs: []
  type: TYPE_NORMAL
- en: Files structure
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The most important thing when you are starting a project is to make a good
    plan of its process. First, you will need to separate settings:'
  prefs: []
  type: TYPE_NORMAL
- en: Fonts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Variables
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mixins
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Then you will need to partialize your project. You will need to create files
    for repeatable elements along all sites:'
  prefs: []
  type: TYPE_NORMAL
- en: Header
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Footer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Forms
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Then you will need to prepare next partialization—specific views of styling
    and elements, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: View home
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: View blog
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: View single post
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: View contact page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to keep variables in a project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'What can you keep in variables? Yeah, that is a good question, for sure:'
  prefs: []
  type: TYPE_NORMAL
- en: Colors (of fonts, backgrounds, and elements)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Global font sizes (like H1-H6, p, and so on)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Grid dividers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Global paddings/margins
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How and where to keep mixins (local and global)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this file, you can collect your mostly used mixins. I've divided it into
    local and global. In global mixins, I'm gathering the most used mixins I'm using
    along all projects.
  prefs: []
  type: TYPE_NORMAL
- en: 'In local mixins, I recommend to gather those mixins that you will use only
    in this project:'
  prefs: []
  type: TYPE_NORMAL
- en: Dedicated gradient
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Font styling including font family size and so on
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hover/active states and so on
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Keep typography styles in a separate file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This file is dedicated for all the most important text elements:'
  prefs: []
  type: TYPE_NORMAL
- en: '`h1`-`h6`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`p`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`a`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`strong`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`span`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Additionally, you can add classes like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`.h1`-`h6`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.red .blue` (or any other which you know that will repeat in your texts)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.small`, `.large`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Why should you use classes like `.h1`-`.h6`?
  prefs: []
  type: TYPE_NORMAL
- en: 'Yeah, it''s a pretty obvious question. Sometimes you cannot repeat `h1`-`h6`
    elements, but, for example, on a blog, you need to make them the same font style
    as `h1`. This is the best usage of this style, for example (HTML structure):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: Views of specific elements
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the following listed files, you can gather all elements that are visible
    in some specific views. For example, in a blog structure, you can have a view
    of single post or page view. So you need to create files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Downloading the example code**'
  prefs: []
  type: TYPE_NORMAL
- en: You can download the example code files for this book from your account at [http://www.packtpub.com](http://www.packtpub.com).
    If you purchased this book elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can download the code files by following these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in or register to our website using your e-mail address and password.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hover the mouse pointer on the **SUPPORT** tab at the top.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Click on **Code Downloads & Errata**.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enter the name of the book in the **Search** box.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Select the book for which you're looking to download the code files.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Choose from the drop-down menu where you purchased this book from.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Click on **Code Download**.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can also download the code files by clicking on the **Code Files** button
    on the book's webpage at the Packt Publishing website. This page can be accessed
    by entering the book's name in the **Search** box. Please note that you need to
    be logged in to your Packt account.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the file is downloaded, please make sure that you unzip or extract the
    folder using the latest version of:'
  prefs: []
  type: TYPE_NORMAL
- en: WinRAR / 7-Zip for Windows
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Zipeg / iZip / UnRarX for Mac
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 7-Zip / PeaZip for Linux
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you gathered information about the fundamentals of modern CSS
    workflow. We started with choosing an IDE and then we focused on speeding up the
    process through the usage of snippets, preprocessors, and processes automatization.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will focus on the basics of CSS theory, box models,
    positions, and displaying modes in CSS.
  prefs: []
  type: TYPE_NORMAL
