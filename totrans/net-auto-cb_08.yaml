- en: Deploying and Operating Azure Networking Resources with Ansible
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we explored how to provision network resources on the
    AWS cloud and how to use Ansible as the orchestration engine to deploy those resources
    on AWS. In this chapter, we will look at another major cloud provider, Microsoft,
    and its Azure cloud offering.
  prefs: []
  type: TYPE_NORMAL
- en: 'Azure provides multiple networking services to facilitate the deployment of
    highly scalable cloud solutions on the Azure cloud. Ansible provides multiple
    modules to interact with multiple services within the Azure cloud and is an excellent
    tool to automate cloud deployments on the Azure cloud. We will explore the basic
    networking constructs available in Azure and outline how to use several modules
    in Ansible to build and validate the following basic network setup in the Azure
    cloud:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/e85778f2-7cfa-405d-8b7d-caf44f81a271.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The main recipes covered in this chapter are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing the Azure SDK
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building an Ansible inventory
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Authenticating to your Azure account
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a resource group
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating virtual networks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating subnets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building user-defined routes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying network security groups
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deployment validation using Ansible
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Decommissioning Azure resources using Ansible
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To be able to start working with Azure, you need to create an account. You can
    set up a free account at [https://Azure.microsoft.com/en-au/free/.](https://azure.microsoft.com/en-au/free/)
  prefs: []
  type: TYPE_NORMAL
- en: 'The following link is to the GitHub code used in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/PacktPublishing/Network-Automation-Cookbook/tree/master/ch8_azure](https://github.com/PacktPublishing/Network-Automation-Cookbook/tree/master/ch8_azure)'
  prefs: []
  type: TYPE_NORMAL
- en: 'The software releases that this chapter is based on are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: An Ansible machine running CentOS 7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ansible 2.9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Python 3.6.8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Check out the following video to see the Code in Action:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://bit.ly/3esy3fS](https://bit.ly/3esy3fS)'
  prefs: []
  type: TYPE_NORMAL
- en: Installing the Azure SDK
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will outline how to install the Python libraries required
    to start interacting with the Azure orchestration system using Ansible. This step
    is mandatory as these Python libraries must be installed on the Ansible control
    machine in order for all of the Ansible Azure modules to work.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You will need to have sudo access on the machine in order to install the Azure
    Python library. You also need to have Python installed with a Python PIP package,
    which we will use to install the Azure package.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Install the `boto3` package, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new folder, entitled `ch8_Azure`, to host all of the code for this
    chapter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The default installation of Ansible doesn''t include all of the Python modules
    needed to run the Ansible Azure modules. That is why our first step is to install
    the required Python libraries. We install all of these packages using the Python
    pip program. We can verify that all of the Azure modules were installed with the
    following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: As previously outlined, multiple Python packages need to be installed to be
    able to begin interacting with the Azure API from Ansible. With this step complete,
    we are now ready to build our playbooks and infrastructure in Azure.
  prefs: []
  type: TYPE_NORMAL
- en: See also…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For more information about how to start interacting with the Azure cloud using
    Ansible, refer to the following link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://docs.Ansible.com/Ansible/latest/scenario_guides/guide_Azure.html](https://docs.ansible.com/ansible/latest/scenario_guides/guide_azure.html)'
  prefs: []
  type: TYPE_NORMAL
- en: Building an Ansible inventory
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will outline how to build an Ansible inventory to describe
    the network infrastructure setup that we will build across the Azure public cloud.
    This is a necessary step as we will define all of our virtual networks across
    all of the regions in which we will deploy our infrastructure.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Create the `hosts` file inside the `ch8_Azure` directory with the following
    data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Create the `Ansible.cfg` file with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Create the `group_var` folder and the `eu.yml` and `us.yml` files with the
    following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We created the host's Ansible inventory file and declared the different virtual
    networks that we will provide in the Azure cloud. We also created two groups that
    describe the location of each virtual network.
  prefs: []
  type: TYPE_NORMAL
- en: 'In short, we created the following groups to define and group our virtual networks:'
  prefs: []
  type: TYPE_NORMAL
- en: '`az_net`: This groups all of our virtual networks across the Azure cloud.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`eu`: This lists all of the virtual networks in the EU region (and will map
    to a specific region in the Azure cloud, as we will outline later).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`us`: This lists all of the virtual networks in the US region (and will map
    to a specific region in the Azure cloud, as we will outline later).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We can use this regional grouping to specify the exact region where this virtual
    network will be used across the Azure cloud. We can declare the exact region in
    a variable called `region`, which can be defined in both the `eu.yml` and `us.yml`
    files under the `group_vars` directory.
  prefs: []
  type: TYPE_NORMAL
- en: We are going to use this variable in the subsequent recipes to deploy our resources
    in the respective Azure regions.
  prefs: []
  type: TYPE_NORMAL
- en: Authenticating to your Azure account
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will outline how to create the credentials required to programmatically
    authenticate to our Azure account from Ansible. We will also learn how to secure
    those credentials using Ansible Vault. This step is required in order to be able
    to run any Ansible modules in the following recipes.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Ansible controller must have internet access and the Ansible inventory must
    be set up as outlined in the previous recipe. The user performing these steps
    must have administrative access to the Azure portal to be able to create the required
    resources that will enable programmatic interaction with the Azure APIs.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Log in to the Azure portal with an account that has administrative rights:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[https://portal.Azure.com/](https://portal.azure.com/)'
  prefs: []
  type: TYPE_NORMAL
- en: 'On the home page, select Azure Active Directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/c1badbd7-1ce5-467a-bd1b-6c4f7642adb8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'From the left panel, select App registrations:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/c170b963-f66c-489a-8e60-00f2f6b24b8f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click the New Registration option and supply the following information to create
    a new application. The option highlighted in blue is the active option here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/ad335022-b818-4a36-9c61-d844339e2b85.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you click on the register button, the new application will be created
    and its information displayed, as in the following screenshot (we need the client_id
    and tenant_id data):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/41b1408c-e543-46ba-b97c-cf0698aa2ec9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Select Certificates & secrets in the left panel:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/0691a69e-4921-4440-bd37-376fcdfb8454.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on New client secret:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/ee85938d-158c-4415-951b-32679a0f8a66.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Specify a name for the password for this app and select its expiry date:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/92169a62-0318-447f-9714-2f9c332ba69d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once created, keep a record of the secret string that is displayed (this is
    the only time that we will be able to see this password in plain text):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/e2bc9436-b6fd-45b2-82b6-7faed34ee304.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Go to All Services and select Subscriptions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/9ce45c61-e9c8-4e5f-ae29-d1883ee7c876.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on Subscription name (Free Trial, in my case):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/01a9ccb9-59c6-49b9-805d-59d1e41f1cc2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Record the Subscription ID string (as we need it for authentication), and then
    click on the Access control (IAM) tab on the left:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/36ec156d-31dd-413f-a403-08eb06435b04.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on Add role assignment and assign the Contributor role to the Ansible
    app that we created:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/06ef5c6a-577d-42b5-b699-fe9efbc65ea4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'On the Ansible control node, create a new file that will hold our Ansible Vault
    password:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new file called `Azure_secret.yml` using Ansible Vault, as in the
    following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Populate the `Azure_secret.yml` file with the data that we got from the Azure
    portal for `client_id`, `tenant_id`, and `subscription_id`, and the secret we
    created for our app:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To be able to have programmatic access to the Azure API (this is how Ansible
    communicates with the Azure cloud to provision resources), we need to create a
    construct known as a *service principal* in our Azure account. This service principal
    is similar to a user but only has API access to the Azure account. We can create
    this service principal and call it Ansible. We can then assign the contributor
    role to it in access management in order to be able to create resources in our
    account. To authenticate to the Azure API using this service principal, we need
    to supply the following four components:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Client_id`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Tenant_id`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Subscription_id`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Service principal password`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We can locate all of this information in the Azure portal using the steps outlined
    in this recipe. We can create a new file, called `Azure_secrets.yml`, which we
    will encrypt using Ansible Vault, and place all of the preceding variables in
    this file.
  prefs: []
  type: TYPE_NORMAL
- en: We will use these parameters in all the subsequent recipes to authenticate to
    our Azure account and create the required infrastructure.
  prefs: []
  type: TYPE_NORMAL
- en: See also…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For more information about how to create a new service principal, use the following
    URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://docs.microsoft.com/en-au/Azure/active-directory/develop/howto-create-service-principal-portal](https://docs.microsoft.com/en-au/azure/active-directory/develop/howto-create-service-principal-portal)'
  prefs: []
  type: TYPE_NORMAL
- en: 'For more information about the Azure built-in roles that can be assigned to
    users/apps, use the following URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://docs.microsoft.com/en-au/Azure/role-based-access-control/built-in-roles](https://docs.microsoft.com/en-au/azure/role-based-access-control/built-in-roles)'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a resource group
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will outline how to deploy resource groups in Azure. Resource
    groups are a part of the Azure Resource Manager deployment model, which is the
    preferred method for deploying resources in the Azure cloud. This is because it
    allows us to group similar resources (such as the VM, the VM NIC, and the VM IP
    address) that share the same life cycle in a single container, which is the resource
    group. We are going to deploy all of the related resources that we will provision
    using resource groups.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Ansible control machine must be connected to the internet with reachability
    to the Azure public API endpoints. The Azure account should be configured as outlined
    in the previous recipes.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Update the `eu.yml` and `us.yml` files under `group_vars` with the following
    data to define the resource group''s name:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new `pb_build_Azure_net.yml` playbook with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We declare the name of the resource group that we will deploy in each region
    in the YAML file that describes each region. We use the `rg_name` parameter to
    hold the name of the resource group. We use the `Azure_rm_resourcegroup` Ansible
    module to create the resource group on Azure. It takes the following parameters
    to authenticate to the Azure API and deploy the resource group:'
  prefs: []
  type: TYPE_NORMAL
- en: The `location` parameter, which describes the region into which we will deploy
    this resource group
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `tenant`, `secret`, `client_id`, and `subscription_id` parameters to authenticate
    to our Azure account
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `name` parameter, which is the name of our resource group
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In our playbook, we read the `Azure_secrets.yml` file, using the `vars_files`
    parameter, in order to capture all the parameters stored in this file. We set
    the connection to `local` to instruct Ansible to run the playbook locally on the
    Ansible control machine and to not attempt to SSH to the hosts defined in our
    inventory. This is mandatory as all Azure modules need to run from the Ansible
    control machine to invoke the REST API calls to the Azure orchestration system.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once we run our playbook, we can see that the resource groups are provisioned
    on the Azure portal, as in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/dc345da7-732b-4906-994e-50d2fc839cd4.png)'
  prefs: []
  type: TYPE_IMG
- en: See also...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For more information about the Azure resource module in Ansible, and all the
    other parameters supported by this module, use the following URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://docs.Ansible.com/Ansible/latest/modules/Azure_rm_resourcegroup_module.html](https://docs.ansible.com/ansible/latest/modules/azure_rm_resourcegroup_module.html)'
  prefs: []
  type: TYPE_NORMAL
- en: Creating virtual networks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Virtual networks in the Azure cloud are our virtual data center, which groups
    all of our infrastructure in a similar manner to a physical data center. We can
    have multiple virtual networks in the same and across different regions, and we
    can deploy our infrastructure inside these virtual networks. In this recipe, we
    will outline how to define and provision a virtual network in Azure.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Ansible control machine must be connected to the internet with reachability
    to the Azure public API endpoints and the Azure account should be configured as
    outlined in the previous recipes. The resource group should also be provisioned
    as in the previous recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Update the `eu.yml` and `us.yml` files under `group_vars` with the virtual
    network''s name and **CIDR** address:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Update the `pb_build_Azure_net.yml` playbook with the task to create the virtual
    networks:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to create the virtual network, we need to supply its name, along with
    the CIDR IP range that this virtual network will take. We define these two parameters
    in the region YAML files as `vnet_name` and `vnet_cidr`. We use the `Azure_rm_virtualnetwork` Ansible
    module to create all of the required virtual networks and we supply the following
    parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: The resource group name in `resource_group`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `location` parameter, which describes the region into which we will deploy
    this resource group.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The name of each subnet in the `name` parameter, along with the CIDR IP range
    in the `address_prefixes_cidr` parameter.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `tenant`, `secret`, `client_id`, and `subscription_id` parameters are all
    used to authenticate to our Azure account.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Once we run the playbook, we can see that the virtual networks are created,
    as in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/291c9eed-115a-420a-b745-4c447bd68ed7.png)'
  prefs: []
  type: TYPE_IMG
- en: See also...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For more information regarding the Azure virtual network module in Ansible,
    and all the other parameters supported by this module, use the following URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://docs.Ansible.com/Ansible/latest/modules/Azure_rm_virtualnetwork_module.html](https://docs.ansible.com/ansible/latest/modules/azure_rm_virtualnetwork_module.html)'
  prefs: []
  type: TYPE_NORMAL
- en: Creating subnets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A subnet is the networking construct within the Azure cloud that is used to
    segment the virtual network. It is used to provide us with the tools to segregate
    our virtual network into distinct routing and security domains that we can control
    in order to provide different routing and security behaviors within each subnet.
    In this recipe, we will outline how to define and provision subnets within the
    Azure cloud.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Ansible control machine must be connected to the internet, with reachability
    to the Azure public API endpoints. The Azure account should be configured as outlined
    in the previous recipes. The resource group and virtual networks should also be
    provisioned as outlined in the previous recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Update the `eu.yml` and `us.yml` files under `group_vars` with the subnet information:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Update the `pb_build_Azure_net.yml` playbook with the task to create the subnets:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to create the subnets within the virtual network, we need to supply
    the virtual network and the CIDR prefix for the subnet, which must be within the
    CIDR of the virtual network. We define these in the subnet's data structure, which
    includes the name and CIDR for each subnet we want to provision. We can use the `Azure_rm_subnet` Ansible
    module to create all of the required subnets and we can loop over the subnet's
    data structure to supply the required parameters.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once we run the playbook, we can see the subnets created within each virtual
    network, as in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/628b6dcc-093f-4d86-8983-30bfcbbc2711.png)'
  prefs: []
  type: TYPE_IMG
- en: See also...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For more information regarding the Azure subnets module in Ansible, and all
    the other parameters supported by this module, use the following URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://docs.Ansible.com/Ansible/latest/modules/Azure_rm_subnet_module.html](https://docs.Ansible.com/Ansible/latest/modules/Azure_rm_subnet_module.html)'
  prefs: []
  type: TYPE_NORMAL
- en: Building user-defined routes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will outline how to control routing within a subnet using
    user-defined routers. This user-defined routes object can be associated with a
    specific subnet. We can define custom routes to adjust the forwarding behavior
    within a subnet in the Azure cloud.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Ansible control machine must be connected to the internet, with reachability
    to the Azure public API endpoints. The Azure account should be configured as outlined
    in the previous recipes. The resource group, virtual networks, and subnets should
    also be provisioned as outlined in the previous recipes.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Update the `eu.yml` and `us.yml` files under `group_vars` with the `route_tables`
    data, as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Update the `pb_build_Azure_net.yml` playbook with the following task to create
    the custom route table:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Update the playbook with the following task to provision the routes within
    the custom route table:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Update the playbook with the following task to associate the custom route with
    the subnet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In our setup, we have two subnets (`web` and `DB`) and we need to provide a
    different routing treatment for the `DB` subnet so that it does not have public
    internet access. We can do this by creating a new custom route table and installing
    a default route with `next-hop` set to `none` in order to drop all the traffic
    destined for the internet.
  prefs: []
  type: TYPE_NORMAL
- en: We need to define our custom route table that we will deploy in the `route_tables`
    variable and include it in each region definition. We can then use the `Azure_rm_routetable`
    Ansible module to create the route table in the specific resource group and use
    the `Azure_rm_route` module to create the required routes within each route table.
    Finally, we can attach the route table to the specific subnet using the `Azure_rm_subnet`
    module in order to modify the default routing behavior for this subnet.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot outlines the new route table that was created:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/13d57b60-7f68-4d42-8403-f2daf584e5d7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The following screenshot outlines the exact details for one of the route tables,
    the custom routes, and the subnet this custom route is attached to:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/b1cda5aa-5419-488a-b641-d100d3081d3e.png)'
  prefs: []
  type: TYPE_IMG
- en: See also...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For more information regarding the Azure route table modules in Ansible, and
    all the other parameters supported by this module, use the following URLs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://docs.Ansible.com/Ansible/latest/modules/Azure_rm_routetable_module.html#Azure-rm-routetable-module](https://docs.ansible.com/ansible/latest/modules/azure_rm_routetable_module.html#azure-rm-routetable-module)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://docs.Ansible.com/Ansible/latest/modules/Azure_rm_route_module.html#Azure-rm-route-module](https://docs.ansible.com/ansible/latest/modules/azure_rm_route_module.html#azure-rm-route-module)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying network security groups
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Security in cloud environments is critical, and the Azure cloud provides different
    tools and services to help build a secure cloud environment for the application.
    In this recipe, we will look at one of these services: **network security groups**
    (**NSGs**). An NSG is a stateful firewall that can be attached to a virtual machine
    or subnet in order to restrict the traffic flowing through the virtual machine
    or subnet. In this recipe, we will outline how to define and provision an NSG
    on the Azure cloud.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Ansible control machine must be connected to the internet, with reachability
    to the Azure public API endpoints. The Azure account should be configured as outlined
    in the previous recipes. The resource group, virtual networks, and subnets should
    also be provisioned as outlined in the previous recipes.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Update the `eu.yml` and `us.yml` files under `group_vars` with the ACL data,
    as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Update the `pb_build_Azure_net.yml` playbook with the following task to create
    the security group and populate all of its rules:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Update the playbook with the following task to attach the security group with
    the corresponding subnet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Azure provides default NSGs that are attached to subnets. These provide basic
    security controls to the computer resources deployed in these subnets. The default
    policy includes these default rules for inbound traffic:'
  prefs: []
  type: TYPE_NORMAL
- en: Allow inbound traffic between virtual network CIDR ranges (inter-subnet communication).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Allow inbound traffic from Azure load balancers.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deny any other traffic.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In the outbound direction, the default rules are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Allow outbound traffic between the virtual network CIDR (inter-subnet communication).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Allow outbound traffic to the internet.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deny any other traffic.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure NSGs provide a mechanism to augment the default NSG applied by Azure by
    defining a custom NSG that is appended to the default one. The resultant NSG is
    evaluated based on the priority value for each rule (a rule with a lower value
    is evaluated first) and once a rule is matched, the rule is applied to the traffic
    traversing the subnet.
  prefs: []
  type: TYPE_NORMAL
- en: As we are deploying a web application in the `Web_tier` subnet, we need to allow
    inbound HTTP and HTTPs traffic to this subnet. So, we can create an ACL definition
    to create a custom NSG and define the required parameters in order to allow this
    traffic in the inbound direction.
  prefs: []
  type: TYPE_NORMAL
- en: We can use the `Azure_rm_securitygroup` Ansible module to loop over all of our
    custom ACLs and create the NSG and respective rules. We can use `Azure_rm_subnet`
    to attach the security group to the subnet.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the new NSG that is defined:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/180fc909-2925-4d6b-9418-117f66b562e2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The following screenshot shows the resultant NSG rules that are defined (both
    custom and default) for the inbound and outbound directions:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/c2dc486f-610b-4478-9b49-eb036c844ce7.png)'
  prefs: []
  type: TYPE_IMG
- en: See also...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For more information regarding the Azure NSG module in Ansible, and all the
    other parameters supported by this module, use the following URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://docs.Ansible.com/Ansible/latest/modules/Azure_rm_securitygroup_module.html](https://docs.ansible.com/ansible/latest/modules/azure_rm_securitygroup_module.html#azure-rm-securitygroup-module)'
  prefs: []
  type: TYPE_NORMAL
- en: Deployment validation using Ansible
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Ansible provides multiple modules to collect the operational state of the different
    resources deployed in Azure. We can use these modules to validate the current
    state of our network in the Azure cloud. This provides a programmatic approach
    to validating a deployment, without the need to log in via a GUI to the portal
    to check the status of the different components within the infrastructure of Azure.
    In this recipe, we will outline how to use multiple modules to validate the resource
    groups and virtual networks that we have deployed.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Ansible control machine must be connected to the internet, with reachability
    to the Azure public API endpoints. The Azure account should also be configured
    as outlined in the previous recipes.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Create a new file, `~/.Azure/credentials`, to host all of the credentials to
    authenticate to Azure, as in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new playbook, `pb_validate_Azure_net.yml`, to validate our deployment
    and include the following tasks to collect resource group facts and validate it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Update the `pb_validate_Azure_net.yml` playbook to include the tasks that will
    collect the virtual network''s facts and validate its state:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we outline an alternative method to authenticate to the Azure
    cloud. We create the `~/.Azure/credentials` file and we put the same information
    into it that is needed to authenticate to the Azure API (`tenant_id`, `client_id`,
    and so on). As we have this information in the file, we don't need to include
    these parameters in our Ansible modules.
  prefs: []
  type: TYPE_NORMAL
- en: In order to validate our deployment, Ansible provides multiple fact modules
    to collect the operational state of multiple objects in the Azure cloud. In this
    example, we are outlining two of these modules to collect the facts for resource
    groups and virtual networks. We can use the `Azure_rm_resourcegroup_facts` module
    to collect resource group facts and `Azure_rm_virtualnetwork_facts` to collect
    virtual network facts. All the Azure fact modules register the data retrieved
    by these modules as Ansible facts— that is why we don't need to register the data
    returned by the module in a custom-defined variable.
  prefs: []
  type: TYPE_NORMAL
- en: The `Azure_rm_resourcegroup_facts` module saves the output in the `Azure_resourcegroups`
    Ansible fact and we use the `assert` module to loop over all the resource groups
    within this variable. We can then confirm that it is created with the correct
    parameters.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a snippet from `Azure_resourcegroups`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: We can use the exact same technique to collect the facts for virtual networks
    deployed using `Azure_rm_virtualnetwork_facts` and use the `assert` module to
    validate its state.
  prefs: []
  type: TYPE_NORMAL
- en: See also...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For more information about the multiple modules for fact collection for different
    network resources in Azure, use the following links:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Resource group** facts:[https://docs.Ansible.com/Ansible/latest/modules/Azure_rm_resourcegroup_info_module.html#Azure-rm-resourcegroup-info-module](https://docs.ansible.com/ansible/latest/modules/azure_rm_resourcegroup_info_module.html#azure-rm-resourcegroup-info-module)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Virtual network** facts:[https://docs.Ansible.com/Ansible/latest/modules/Azure_rm_virtualnetwork_info_module.html#Azure-rm-virtualnetwork-info-module](https://docs.ansible.com/ansible/latest/modules/azure_rm_virtualnetwork_info_module.html#azure-rm-virtualnetwork-info-module)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Subnet** facts:[https://docs.Ansible.com/Ansible/latest/modules/Azure_rm_subnet_info_module.html#Azure-rm-subnet-info-module](https://docs.ansible.com/ansible/latest/modules/azure_rm_subnet_info_module.html#azure-rm-subnet-info-module)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Route table** facts:[https://docs.Ansible.com/Ansible/latest/modules/Azure_rm_routetable_info_module.html#Azure-rm-routetable-info-module](https://docs.ansible.com/ansible/latest/modules/azure_rm_routetable_info_module.html#azure-rm-routetable-info-module)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Security group** facts: [https://docs.Ansible.com/Ansible/latest/modules/Azure_rm_securitygroup_info_module.html#Azure-rm-securitygroup-info-module](https://docs.ansible.com/ansible/latest/modules/azure_rm_securitygroup_info_module.html#azure-rm-securitygroup-info-module)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Decommissioning Azure resources using Ansible
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Similar to how we can create resources at scale using automation, we can also
    destroy those resources once we decide we don't need them. This is simplified
    with Ansible and the resource groups implemented by Azure – with a single API
    call with the correct parameters, we can decommission all the resources within
    a resource group that we have defined. In this recipe, we will outline how to
    perform this action to destroy all the resources we have provisioned so far.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Ansible control machine must be connected to the internet, with reachability
    to the Azure Public API endpoints. The Azure account should also be configured
    as outlined in the previous recipes.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Create a new `pb_destroy_Azure_net.yml` playbook and add the following task
    to delete all the resource groups:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can use the `Azure_rm_resourcegroup` Ansible module to destroy all the resources
    within the resource group as well as to delete the resource group itself. We can
    supply two important parameters to the module in order to perform the `delete`
    function:'
  prefs: []
  type: TYPE_NORMAL
- en: Set `state` to `absent`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Include the `force_delete_nonempty` parameter and set it to `yes`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With these parameters set, all the resources within the resource group (the
    virtual networks, subnets, and so on) will be deleted, along with the resource
    group itself.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following output shows that our two resource groups are no longer present:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/a0b7c68d-2098-4107-8b7b-fff1858922b5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The following output also confirms that all of the virtual networks were deleted
    after running the playbook:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/061e372c-f4a8-4f0b-a108-4efeecece7b9.png)'
  prefs: []
  type: TYPE_IMG
- en: The preceding screenshot shows that all the virtual networks have been deleted.
  prefs: []
  type: TYPE_NORMAL
