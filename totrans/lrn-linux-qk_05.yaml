- en: Read Your Manuals!
  prefs: []
  type: TYPE_NORMAL
- en: You may be telling yourself right now, "Linux is so hard! There are a lot of
    commands and even more command options! There is no way I can master all of these
    commands and commit them to memory." If this is what you think, believe me, you
    are smart. It's insane to remember all the Linux commands that exist, even the
    most experienced Linux administrator would never be able to remember all commands,
    not even Linus Torvalds himself!
  prefs: []
  type: TYPE_NORMAL
- en: So wait? If that's the case, what is the solution then? The answer lies in the
    beautiful world of Linux documentation. Linux is very well documented to the extent
    that it's hard to get lost in it. There are a variety of tools in Linux that help
    you in not just remembering the commands, but also in understanding how to use
    them.
  prefs: []
  type: TYPE_NORMAL
- en: Having met a lot of Linux professionals throughout my career, I noticed that
    the most skilled Linux administrators are not the ones who remember, but the ones
    who know how to make the most use of the Linux documentation. Ladies and gentlemen,
    I highly recommend you fasten your seatbelt and read this chapter carefully. I
    promise you that the fear in your heart will go away soon!
  prefs: []
  type: TYPE_NORMAL
- en: The four categories of linux commands
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'All Linux commands must fall into one of these following four categories:'
  prefs: []
  type: TYPE_NORMAL
- en: '**An executable program**: Which is usually written in the C programming language.
    The `cp` command is an example of an executable command.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**An alias**: Which is basically another name for a command (or a group of
    commands).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**A shell builtin**: The shell supports internal commands as well. The `exit`
    and `cd` commands are two examples of a shell builtin command.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**A shell function**: These are functions that help us achieve a specific task
    and are essential in writing shell scripts.Â  We will cover this in more detail
    later, for now, just know they exist.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Determining a command's type
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can use the `type` command to determine the type (category) of a command.
    For example, if you want to know the type of the `pwd` command you can simply
    run the `type pwd` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'So now you know that the `pwd` command is a shell builtin command. Now let''s
    figure out the type of the `ls` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, the `ls` command is aliased to `ls --color=auto`. Now you know
    why you see a colorful output every time you run the `ls` command. Let''s see
    the type of the `date` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Any command that lives in `/bin` or `/sbin` is an executable program. Therefore,
    we can conclude that the `date` command is an executable program as it resides
    in `/bin`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, let''s determine the type of the `type` command itself:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: It turns out the `type` command is a shell builtin command.
  prefs: []
  type: TYPE_NORMAL
- en: Finding a command's location
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Every time you run an executable command, there a file somewhere on the system
    that gets executed. You can use the `which` command to determine the location
    of an executable command. For example, if you want to know the location of the
    `rm` command, you can run the `which rm` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'So now you know that `rm` lives in the `/bin` directory. Let''s see the location
    of the `reboot` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, the `reboot` command lives in the `/sbin` directory.
  prefs: []
  type: TYPE_NORMAL
- en: What does the command do?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can use the `whatis` command to get a brief description of what a command
    does. For example, if you want to know the purpose of the `free` command, you
    can run the `whatis free` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, the `free` command, as we already know, displays the amount
    of free and used memory in the system. Cool! Now let''s see what the `df` command
    does:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, let''s see what the `which` command does:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: As we already know, `which` displays a command's location.
  prefs: []
  type: TYPE_NORMAL
- en: The man page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `whatis` command gives you a brief description of what a command does; however,
    it doesn't teach you how to use a command. For that, you can use the `man` pages.
  prefs: []
  type: TYPE_NORMAL
- en: The `man` page is a **manual** page that has proper documentation to help you
    understand how to use a command. The same as when you buy a new phone, you get
    a manual that shows you how to use your phone and how to update your software
    on your phone, etc.
  prefs: []
  type: TYPE_NORMAL
- en: 'In general, if you want to read the `man` page of a command, you can run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'For example, if you want to view the `man` page of the `touch` command, you
    can run the `man touch` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/f8c6a647-777e-4f3b-88db-a75530e8e132.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1: touch man page'
  prefs: []
  type: TYPE_NORMAL
- en: As you can see in the preceding screenshot, the `touch` man page shows you how
    to use the command, and it also lists and explains all the command options.
  prefs: []
  type: TYPE_NORMAL
- en: '`Table 9` shows you how to move around while browsing `man` pages.'
  prefs: []
  type: TYPE_NORMAL
- en: '| **man keys** | **What it does** |'
  prefs: []
  type: TYPE_TB
- en: '| Space | Scrolls forward one page. |'
  prefs: []
  type: TYPE_TB
- en: '| *Ctrl*+*F* | Scrolls forward one page (same as space). |'
  prefs: []
  type: TYPE_TB
- en: '| *Ctrl*+*B* | Scrolls backward one page. |'
  prefs: []
  type: TYPE_TB
- en: '| `/word` | Will search for a word (pattern) in the `man` page. For example,
    `/access` will search for the word `access` in the `man` page |'
  prefs: []
  type: TYPE_TB
- en: '| *q* | Will quit the `man` page. |'
  prefs: []
  type: TYPE_TB
- en: '| *n* | After you search for a word, you can use *n* to look for the next occurrence
    of the word in the `man` page. |'
  prefs: []
  type: TYPE_TB
- en: '| *N* | After you search for a word, you can use *N* to look for the previous
    occurrence of the word in the `man` page. |'
  prefs: []
  type: TYPE_TB
- en: I can't stress enough the importance of `man` pages. They can be your best friend
    in the darkest moments, trust me!
  prefs: []
  type: TYPE_NORMAL
- en: 'You should also know that there is a man page for `man` itself:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: It describes how to use `man` pages.
  prefs: []
  type: TYPE_NORMAL
- en: Help for shell builtins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you play around enough with `man` pages, you may notice that a lot of shell
    builtin commands do not have a `man` page. For instance, there is no `man` page
    for the `cd` or the `exit` commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'That''s because shell builtin commands do not have `man` pages, but do not
    freak out just yet! You can still find help on how to use shell builtins by using
    the `help` command. For example, to get help on how to use the `exit` command,
    you can run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Similarly, to get help on how to use the `cd` command, you can run the `help
    cd` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: The info page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The GNU project launched the `info` pages as an alternative documentation to
    the `man` pages. The GNU project once claimed that `man` pages are outdated and
    needed replacement and so they came up with the `info` pages.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can view the `info` page of any command by running:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'For example, to view the `info` page of the `ls` command, you can run the `info
    ls` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: The `info` pages sometimes offer more details compared to `man` pages. However,
    `man` pages remain the most popular go-to destination for help documentation on
    Linux.
  prefs: []
  type: TYPE_NORMAL
- en: The very helpful apropos command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `apropos` command is one of the most helpful and yet underrated Linux commands.
    Let''s see a brief description of what the `apropos` command does:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'WOW! The `apropos` command helps you in searching for the right command to
    use to achieve a specific task. For example, let''s say you want to rename a file,
    but you are unsure which Linux command to use; in this case, you can run the `apropos
    rename` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: BOOM! It listed all the commands that have the word `rename` showing in the
    description of their man pages. I bet you can spot the `mv` command in the output.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s say you want to view the calendar but you''re unsure which command to
    use; in this case, you can run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: You can see that it displayed the `cal` command in the output.
  prefs: []
  type: TYPE_NORMAL
- en: 'For the last example, let''s say you want to display your CPU information,
    but you don''t know which command to use; in this case, you can run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Here you go! You can see that it listed the `lscpu` command that we have used
    earlier. The `apropos` command is here to rescue you whenever you forget a command
    or you''re unsure which command to use. You just have to supply a keyword (preferably
    a verb) that highlights what you want to accomplish to the `apropos` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '**COOL TIP**'
  prefs: []
  type: TYPE_NORMAL
- en: The `man -k` command will display the same result as the `apropos` command.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: The /usr/share/doc directory
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `/usr/share/doc` directory is another excellent place to look for help in
    Linux. This directory has very intensive documentation; it doesn't just show you
    how to use a command; sometimes, it will even show the name and contact information
    of the authors who developed the command. Moreover, it may also include a `TODO`
    file that contains a list of unfinished tasks/features; contributors usually check
    the `TODO` files to help fix bugs and develop new features.
  prefs: []
  type: TYPE_NORMAL
- en: 'To demonstrate, let''s go to the `nano` documentation directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Now list the contents of the directory to see what''s inside:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Cool! You can view the `AUTHORS` file to see the team of developers who contributed
    to the `nano` editor program. You can also view the `TODO` file if you are eager
    to know if there is anything left for you to do! You can also check the `README`
    file for a general description of the `nano` editor. There is even a link `faq.html`
    that contains frequently asked questions.
  prefs: []
  type: TYPE_NORMAL
- en: As you saw in this chapter, Linux has a variety of helpful tools available at
    your disposal; so make sure you utilize them!
  prefs: []
  type: TYPE_NORMAL
- en: Knowledge check
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For the following exercises, open up your Terminal and try to solve the following
    tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: You need to know if the `echo` command is a shell builtin or an executable program,
    which command would you run?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Display the location of the `uptime` command executable file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Show a brief description of the `mkdir` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You forgot how to use the `mv` command, what are you going to do?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You forgot which command is used to display the calendar, what are you going
    to do?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `history` command is a shell builtin and so it doesn't have a man page.
    You want to clear your history but don't know how. What are you going to do?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: True or false
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The command `whereis` is used to locate commands.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can use `man -p` and `apropos` interchangeably.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can use the `whatis` command to get a brief description of a command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can use the `type` command to determine if a command is an alias, shell
    builtin, or an executable program.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
