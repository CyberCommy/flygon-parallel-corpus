- en: Chapter 2. Configuring Authentication and Security
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are many ways of configuring authentication in phpMyAdmin—depending on
    our goals, the presence of other applications, and the level of security we need.
    This chapter explores the available possibilities.
  prefs: []
  type: TYPE_NORMAL
- en: Logging in to MySQL through phpMyAdmin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When we type in a username and password, although it seems that we are logging
    in to phpMyAdmin, we are not! We are merely using phpMyAdmin (which is running
    on the web server) as an interface that sends our username and password information
    to the MySQL server. Strictly speaking, we do not log in *to* phpMyAdmin, but
    *through* phpMyAdmin.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This is why in user-support forums about phpMyAdmin, people asking for help
    about authentication are often referred back to their MySQL server's administrator,
    because a lost MySQL user or password is not a phpMyAdmin problem.
  prefs: []
  type: TYPE_NORMAL
- en: This section explains the various authentication modes offered by phpMyAdmin.
  prefs: []
  type: TYPE_NORMAL
- en: Logging in to an account without a password
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: MySQL's default installation leaves a server open to intrusion because it creates
    a MySQL account named `root` without a password—unless a password has been set
    by the MySQL distributor. The recommended remedy for this weakness in security
    is to set a password for the `root` account. In the eventuality that we cannot
    set one or do not want to set one, we will have to make a configuration change
    to phpMyAdmin. Indeed, a server-specific configuration parameter, `$cfg['Servers'][$i]['AllowNoPassword']`
    exists. Its default value is `false`, which means that no account is permitted
    to log in without a password. Generally, this directive should remain `false`
    to avoid this kind of access through phpMyAdmin, as hackers are actively probing
    the web for insecure MySQL servers. Go through the *Securing phpMyAdmin* section
    for other ideas about protecting your server.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If the `AllowNoPassword` parameter is left to `false` and a login attempt is
    made without a password, an **Access denied** message is displayed.
  prefs: []
  type: TYPE_NORMAL
- en: Authenticating a single user with config
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We might have the need to automatically connect to a MySQL server via phpMyAdmin,
    using a fixed username and password, without even having been asked for it. This
    is the precise goal of the `config` authentication type.
  prefs: []
  type: TYPE_NORMAL
- en: For our first example, we will use this `config` authentication. However, in
    the *Authenticating multiple users* section, we will see more powerful and versatile
    ways of authenticating.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Using the `config` authentication type leaves our phpMyAdmin open to intrusion,
    unless we protect it as explained in the *Securing phpMyAdmin* section of this
    chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, we ask for `config` authentication, and enter our username and password
    for this MySQL server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: We can then save the changes we made in `config.inc.php`.
  prefs: []
  type: TYPE_NORMAL
- en: Testing the MySQL connection
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now it''s time to start phpMyAdmin and try connecting to it with the values
    we configured. This will test the following:'
  prefs: []
  type: TYPE_NORMAL
- en: The values we entered in the `config` file or on the web-based setup
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The setup of the PHP component inside the web server, if we did a manual configuration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Communication between web and MySQL servers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We start our browser and point it to the directory where we installed phpMyAdmin,
    as in[http://www.mydomain.com/phpMyAdmin/](http://www.mydomain.com/phpMyAdmin/).
    If this does not work, we try[http://www.mydomain.com/phpMyAdmin/index.php](http://www.mydomain.com/phpMyAdmin/index.php).
    (This would mean that our web server is not configured to interpret `index.php`
    as the default starting document.)
  prefs: []
  type: TYPE_NORMAL
- en: If you still get an error, refer to the [Appendix A](apa.html "Appendix A. Troubleshooting
    and Support") for troubleshooting and support. We should now see phpMyAdmin's
    home page. [Chapter 3](ch03.html "Chapter 3. Over Viewing the Interface") gives
    an overview of the panels seen now.
  prefs: []
  type: TYPE_NORMAL
- en: Authenticating multiple users
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We might want to allow a single copy of phpMyAdmin to be used by a group of
    persons, each having their own MySQL username and password, and seeing only the
    databases they have rights to. Or we might prefer to avoid having our username
    and password in clear text in `config.inc.php`.
  prefs: []
  type: TYPE_NORMAL
- en: Instead of relying on a username and password stored in `config.inc.php`, phpMyAdmin
    will communicate with the browser and get authentication data from it. This enables
    true login for all users defined in a specific MySQL server, without having to
    define them in the configuration file. There are three modes offered that allow
    a controlled login to MySQL via phpMyAdmin— `http, cookie`, and `signon`. We will
    have to choose the one that suits our specific situation and environment (more
    on this in a moment). The `http` and `cookie` modes may require that we first
    define a control user, as covered in [Chapter 1](ch01.html "Chapter 1. Getting
    Started with phpMyAdmin").
  prefs: []
  type: TYPE_NORMAL
- en: Authenticating with HTTP
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This mode`—http—`is the traditional mode offered in HTTP, in which the browser
    asks for the username and password, sends them to phpMyAdmin, and keeps sending
    them until all the browser windows are closed.
  prefs: []
  type: TYPE_NORMAL
- en: 'To enable this mode, we simply use the following line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: We can also define the HTTP **basic auth realm** ( [http://en.wikipedia.org/wiki/Basic_access_authentication](http://en.wikipedia.org/wiki/Basic_access_authentication)),
    which is a message to be displayed to the user at login time, via `$cfg['Servers'][$i]['auth_http_realm']`.
    This can help indicate the purpose of this server.
  prefs: []
  type: TYPE_NORMAL
- en: 'This mode has the following limitations:'
  prefs: []
  type: TYPE_NORMAL
- en: PHP, depending on the version, might not support HTTP authentication for all
    kinds of web servers.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If we want to protect phpMyAdmin's directory with a `.htaccess` file (refer
    to the *Securing phpMyAdmin* section in this chapter), this will interfere with
    HTTP authentication type; we cannot use both.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Browsers usually store the authentication information to save retyping credentials
    but bear in mind that these credentials are saved in an unencrypted format.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There is no support for proper logout in the HTTP protocol; hence we have to
    close all browser windows to be able to log in again with the same username.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Authenticating with cookie values
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `cookie` authentication mode is superior to `http` in terms of the functionalities
    it offers. This mode permits true login and logout, and can be used with PHP running
    on any kind of web server. It presents a login panel (as shown in the following
    screenshot) from within phpMyAdmin. This can be customized as we have the application
    source code. However, as you may have guessed, for `cookie` authentication, the
    browser must accept cookies coming from the web server—but this is the case for
    all authentication modes anyway.
  prefs: []
  type: TYPE_NORMAL
- en: This mode stores the username typed in the login screen into a permanent cookie
    in our browser while the password is stored as a temporary cookie. In a multi-server
    configuration, the username and password corresponding to each server are stored
    separately. To protect the username and password secrecy against attack methods
    that target cookie content, they are encrypted using the Blowfish cipher. So,
    to use this mode, we have to define (once) in `config.inc.php`, a secret string
    that will be used to securely encrypt all passwords stored as cookies from this
    phpMyAdmin installation.
  prefs: []
  type: TYPE_NORMAL
- en: 'This string is set via the `blowfish_secret` directive:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: In the previous example, an arbitrary string of characters was used; this string
    can be very complex as nobody will ever need to type it on a login panel. If we
    fail to configure this directive, a random secret string is generated by phpMyAdmin
    but it will last only for the current working session. Therefore, some features
    such as recalling the previous username on the login panel won't be available.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, for each server-specific section, use the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The next time we start phpMyAdmin, we will see the login panel as shown in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Authenticating with cookie values](img/7782_02_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: By default, phpMyAdmin displays (in the login panel) the last username for which
    a successful login was achieved for this particular server, as retrieved from
    the permanent cookie. If this behavior is not acceptable (someone else who logs
    in from the same workstation should not see the previous username), we can set
    the following parameter to `FALSE:`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: There is a security feature to add a specific time limit for the validity of
    a password. This feature helps to protect the working session. After a successful
    login, our password is stored (encrypted) in a cookie, along with a timer. Every
    action in phpMyAdmin resets the timer. If we stay inactive for a certain number
    of seconds, as defined in `$cfg['LoginCookieValidity']`, we are disconnected and
    have to log in again. Increasing this parameter does not work in all cases, because
    PHP's own `session.gc_maxlifetime` directive can get in the way. Please refer
    to [http://php.net/manual/en/session.configuration.php](http://php.net/manual/en/session.configuration.php)
    for an explanation of this directive. Therefore, if phpMyAdmin detects that the
    value of `session.gc_maxlifetime` is less than the configured `$cfg['LoginCookieValidity']`,
    a warning is displayed on the main page. The default is 1440 seconds; this matches
    the `php.ini's` default value of the `session.gc_maxlifetime` parameter.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Blowfish algorithm used to protect the username and password requires many
    computations. To achieve the best possible speed, the PHP's `mcrypt` extension
    and its accompanying library must be installed on our web server.
  prefs: []
  type: TYPE_NORMAL
- en: To help users realize that this extension is really important, a message is
    displayed on the main page when phpMyAdmin detects its absence. The `$cfg['McryptDisableWarning']`
    directive controls this message. By default, a value of `false` implies that the
    message is shown.
  prefs: []
  type: TYPE_NORMAL
- en: Authenticating with signon mode
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: During the course of a working session, a user may encounter several requests
    to authenticate, from different web applications. The reason is these applications
    don't talk to each other and this situation inconveniences most users.
  prefs: []
  type: TYPE_NORMAL
- en: The `signon` mode enables us to use the credentials from another application
    to skip the authentication phase of phpMyAdmin. In order for this to work, this
    other application has to store the proper credentials into PHP's session data
    to be retrieved later by phpMyAdmin.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Storing credentials in PHP''s session is not guaranteed to be safe, according
    to the PHP manual: [http://php.net/manual/en/session.security.php](http://php.net/manual/en/session.security.php).'
  prefs: []
  type: TYPE_NORMAL
- en: 'To enable this mode, we start with the following directive:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Let us suppose that the authenticating application has used a session named
    `FirstApp` to store the credentials. We tell this to phpMyAdmin by adding the
    following line of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'We must take care of users that would try to access phpMyAdmin before the other
    application; in this case, phpMyAdmin will redirect users to the authenticating
    application. This is done with:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'How does the authenticating application store credentials in a format that
    phpMyAdmin can understand? An example is included as `scripts/signon.php`. In
    this script, there is a simple HTML form to input the credentials and logic that
    initializes the session—we would use `FirstApp` as a session name, and create
    the user, password, host, and port information into this session, shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that the authenticating first application does not need to ask the MySQL's
    credentials to the user. These could be hard coded inside the application, as
    they are secret or there is a known correspondence between the credentials of
    this application and that of MySQL's.
  prefs: []
  type: TYPE_NORMAL
- en: To pass additional configuration parameters to the `signon` module, `$_SESSION['PMA_single_signon_cfgupdate']`
    can receive an array containing any additional server parameters that are permitted
    in `$cfg['Servers'][$i]`.
  prefs: []
  type: TYPE_NORMAL
- en: The authenticating application then uses a way of its choosing—a link or a button—to
    let its users start phpMyAdmin. If an error happens during the login (for example,
    a denied access), the `signon` module saves into `$_SESSION['PMA_single_signon_error_message']`
    the appropriate error message.
  prefs: []
  type: TYPE_NORMAL
- en: In another example, `scripts/openid.php` shows how to log in using the popular
    OpenID mechanism.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring for multiple server support
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `config.inc.php` file contains at least one server-specific section; however,
    we can add more, enabling a single copy of phpMyAdmin to manage many MySQL servers.
    Let us see how to configure more servers.
  prefs: []
  type: TYPE_NORMAL
- en: Defining servers in the configuration file
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In the server-specific sections of the `config.inc.php` file, we see lines referring
    to `$cfg['Servers'][$i]` for each server. Here, the variable `$i` is used so that
    one can easily cut and paste whole sections of the configuration file to configure
    more servers. While copying such sections, we should take care that the `$i++`;
    instruction, which precedes each section and is crucial to delimit the server
    sections, is also copied.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, at the end of the sections, the following line controls the startup:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The default value, `1`, means that phpMyAdmin will use by default the first
    server defined. We can specify any number, for the corresponding server-specific
    section. We can also enter the value `0`, signifying no default server; in this
    case a list of available servers will be presented at login time.
  prefs: []
  type: TYPE_NORMAL
- en: This configuration can also be done via web-based setup. Given here is an example
    of a multi-server definition, with the default server being set to **let the user
    choose:**
  prefs: []
  type: TYPE_NORMAL
- en: '![Defining servers in the configuration file](img/7782_02_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'With no default server defined, phpMyAdmin will present a server choice:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Defining servers in the configuration file](img/7782_02_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Authenticating through an arbitrary server
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Another mechanism can be used if we want to be able to connect to an undefined
    MySQL server. First, we have to set the following parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: We also have to put back the default value of `1` into `$cfg['ServerDefault']`.
    Then, we need to use the `cookie` authentication type. We will be able to choose
    the server and enter a username and a password.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Allowing an arbitrary server implies that any MySQL server accessible from our
    web server could be connected to via phpMyAdmin. Therefore, this feature should
    be used in conjunction with a reinforced security mechanism (refer to the *Securing
    phpMyAdmin* section).
  prefs: []
  type: TYPE_NORMAL
- en: 'As seen here, we still can choose one of the defined servers in **Server Choice**.
    In addition, we can also enter an arbitrary server name, a username, and a password:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Authenticating through an arbitrary server](img/7782_02_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Logging out
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A mechanism is available to tell phpMyAdmin which URL it should reach after
    a user has logged out. This feature eases integration with other applications
    and works for all authentication types that permit to log out. Here is an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: This directive must contain an absolute URL, including the protocol.
  prefs: []
  type: TYPE_NORMAL
- en: Securing phpMyAdmin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Security can be examined at the following various levels:'
  prefs: []
  type: TYPE_NORMAL
- en: How we can protect the phpMyAdmin installation directory
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Which workstations can access phpMyAdmin
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The databases that a legitimate user can see
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Protecting phpMyAdmin at directory level
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Suppose an unauthorized person is trying to use our copy of phpMyAdmin. If we
    use the simple `config` authentication type, anyone knowing the URL of our phpMyAdmin
    will have the same effective rights to our data as we do. In this case, we should
    use the directory protection mechanism offered by our web server (for example,
    `.htaccess`, a file name with a leading dot) to add a level of protection. More
    details are available at [http://en.wikipedia.org/wiki/Basic_access_authentication](http://en.wikipedia.org/wiki/Basic_access_authentication).
  prefs: []
  type: TYPE_NORMAL
- en: If we decide on using `http` or `cookie` authentication types, our data would
    be safe enough. However, we should take normal precautions with our password (including
    its periodic change).
  prefs: []
  type: TYPE_NORMAL
- en: The directory where phpMyAdmin is installed contains sensitive data. Not only
    the configuration file but also all scripts stored there must be protected from
    alteration. We should ensure that apart from us, only the web server effective
    user has read access to the files contained in this directory, and that only we
    can write to them.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: phpMyAdmin's scripts never have to modify anything inside this directory, except
    when we use the **Save export file to server** feature (explained in [Chapter
    6)](ch06.html "Chapter 6. Exporting Structure and Data (Backup)").
  prefs: []
  type: TYPE_NORMAL
- en: Another recommendation is to rename the default `phpMyAdmin` directory to something
    less obvious; this discourages probing of our server. This is called security
    by obscurity and can be very effective—but avoid choosing other obvious names
    such as `admin`.
  prefs: []
  type: TYPE_NORMAL
- en: Another possible attack is from other developers having an account on the same
    web server as we do. In this kind of attack, someone can try to open our `config.inc.php`
    file. As this file is readable by the web server, someone could try to include
    our file from their PHP scripts. This is why it is recommended to use PHP's `open_basedir`
    feature, possibly applying it to all directories from which such attacks could
    originate. More details can be found at [http://php.net/manual/en/ini.core.php#ini.open-basedir](http://php.net/manual/en/ini.core.php#ini.open-basedir).
  prefs: []
  type: TYPE_NORMAL
- en: Displaying error messages
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'phpMyAdmin uses the PHP''s custom error-handler mechanism. One of the benefits
    of this error handler is to avoid path disclosure, which is considered a security
    weakness. The default settings related to this are:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: You should let the default value for display be `false`, unless you are developing
    a new phpMyAdmin feature and want to see all PHP errors and warnings.
  prefs: []
  type: TYPE_NORMAL
- en: Protecting with IP-based access control
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: An additional level of protection can be implemented, this time verifying the
    **Internet Protocol (IP)** address of the machine from which the request is received.
    To achieve this level of protection, we construct rules allowing or denying access,
    and specify the order in which these rules will be applied.
  prefs: []
  type: TYPE_NORMAL
- en: Defining rules
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The format of a rule is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The `from` keyword being optional; here are some examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Rule | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `allow Bob from 1.2.3/24` | User `Bob` is allowed from any address matching
    the network `1.2.3` (this is CIDR IP matching, more details at [http://en.wikipedia.org/wiki/CIDR_notation)](http://en.wikipedia.org/wiki/CIDR_notation)).
    |'
  prefs: []
  type: TYPE_TB
- en: '| `deny Alice from 4.5/16` | User `Alice` cannot access when located on network
    `4.5`. |'
  prefs: []
  type: TYPE_TB
- en: '| `allow Melanie from all` | User `Melanie` can log in from anywhere. |'
  prefs: []
  type: TYPE_TB
- en: '| `deny % from all` | `all` can be used as an equivalent to `0.0.0.0/0`, meaning
    any host. Here, the `%` sign means any user. |'
  prefs: []
  type: TYPE_TB
- en: 'Usually we will have several rules. Let us say we wish to have the following
    two rules:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'We have to put them in `config.inc.php` (in the related server-specific section)
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: When defining a single rule or multiple rules, a PHP array is used. We must
    follow its syntax, enclosing each complete rule within single quotes and separating
    each rule from the next with a comma. Thus, if we have only one rule, we must
    still use an array to specify it. The next parameter explains the order in which
    rules are interpreted.
  prefs: []
  type: TYPE_NORMAL
- en: Order of interpretation for rules
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'By default, this parameter is empty:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: This means that no IP-based verification is made.
  prefs: []
  type: TYPE_NORMAL
- en: 'Suppose we want to allow access by default, denying access only to some username/IP
    pairs, we should use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'In this case, all `deny` rules will be applied first, followed by `allow` rules.
    If a case is not mentioned in the rules, access is granted. Being more restrictive,
    we would want to deny by default. We can use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'This time, all `allow` rules are applied first, followed by `deny` rules. If
    a case is not mentioned in the rules, access is denied. The third (and most restrictive)
    way of specifying rules order is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Now, `deny` rules are applied before `allow` rules. A username/IP address pair
    must be listed in the `allow` rules and must not be listed in the `deny` rules,
    for access to be granted.
  prefs: []
  type: TYPE_NORMAL
- en: Blocking root access
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'As the `root` user is present in almost all MySQL installations, it''s often
    the target of attacks. A parameter permits us to easily block all phpMyAdmin logins
    of the MySQL''s `root` account, using the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Some system administrators prefer to disable the `root` account at the MySQL
    server level, creating another less obvious account possessing the same privileges.
    This has the advantage of blocking `root` access from all sources, not just from
    phpMyAdmin.
  prefs: []
  type: TYPE_NORMAL
- en: Protecting in-transit data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: HTTP is not inherently immune to network sniffing (grabbing sensitive data off
    the wire). So, if we want to protect not only our username and password but all
    the data that travels between our web server and browser, then we have to use
    HTTPS.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do so, assuming that our web server supports HTTPS, we just have to start
    phpMyAdmin by putting `https` instead of `http` in the URL as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'If we are using `PmaAbsoluteUri` auto-detection, shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: phpMyAdmin will see that we are using HTTPS in the URL and react accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: 'If not, we must put the `https` part in this parameter as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'We can automatically switch users to an HTTPS connection with the following
    setting:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter gave us an overview of how to use a single copy of phpMyAdmin to
    manage multiple servers, and also of using authentication types to fulfill the
    needs of a users' group while protecting authentication credentials. The chapter
    also covered the ways of securing our phpMyAdmin installation.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will have a look at all the panels and windows that
    comprise the user interface of phpMyAdmin.
  prefs: []
  type: TYPE_NORMAL
