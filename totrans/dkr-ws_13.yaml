- en: 13\. Monitoring Docker Metrics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Overview
  prefs: []
  type: TYPE_NORMAL
- en: This chapter will provide you with the skills needed to set up a monitoring
    environment for your system to start collecting container and resource metrics.
    By the end of this chapter, you will be able to devise a monitoring strategy for
    your metrics and determine what you need to think about before you start development
    on your project. You will also implement a basic Prometheus configuration on your
    system. The chapter will extend your knowledge of Prometheus by exploring the
    user interface, the PromQL query language, configuration options, and the collection
    of your Docker and application metrics. It will also enhance your visualizations
    and dashboarding with the inclusion of Grafana as part of your Prometheus installation.
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter of this book, we spent some time investigating how our
    containers use resources on their host system. We did this to ensure our applications
    and containers were running as efficiently as possible, but when we start to move
    our applications and containers into a larger production environment, using command-line
    tools such as `docker stats` will start to become cumbersome. You'll notice that
    as the number of your containers increases, it becomes difficult to understand
    the metrics by only using the `stats` command. As you'll see in the following
    pages, with a little bit of planning and configuration, setting up monitoring
    for our container environment will allow us to easily keep track of how our containers
    and system are functioning and ensure uptime for our production services.
  prefs: []
  type: TYPE_NORMAL
- en: As we move into more agile development processes, the development of applications
    needs to incorporate the monitoring of our applications. Having a clear plan to
    monitor our applications at the start of the project will allow developers to
    incorporate monitoring tools as part of their development process. This means
    that it is important to have a clear understanding of how we're planning to collect
    and monitor our applications even before we create them.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to applications and services, it is also important to monitor the
    infrastructure, orchestration, and containers that run in our environments so
    that we have a complete view of everything that is happening in our environment.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some things you will need to consider when you establish your metrics monitoring
    policy are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Applications and Services**: This includes third-party applications on which
    your code may be relying that don''t reside on your hardware. It would also include
    the orchestration services your applications are running on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Hardware**: It is sometimes good to step back and make sure you take note
    of all the hardware your services rely on as well, including databases, API gateways,
    and servers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Services to Monitor and Alert**: As your applications grow, you may not only
    want to monitor a specific service or web page; you may also want to ensure that
    users are able to perform all the transactions. This could increase the complexity
    of your alerting and monitoring system.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Dashboarding and Reporting**: Dashboards and reports can provide a lot of
    useful information to non-technical users.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**What Application Fits Your Needs**: If you are working for a larger company,
    they will most likely have a list of applications you can choose from. It should
    not be one size fits all though. The application you decide to use to monitor
    your environment should be fit for purpose and agreed upon by everyone involved
    in the project.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This is where **Prometheus** comes in. In this chapter, we will use Prometheus
    as a monitoring solution as it is widely adopted, open-source, and free to use.
    There are a number of other free and enterprise applications available in the
    market that provide similar monitoring, including self-hosted applications such
    as Nagios and SCOM, through to newer subscription-based services, including New
    Relic, Sumo Logic, and Datadog. Prometheus was built from a specific need to monitor
    services on the cloud. It provides class-leading functionality that is ahead of
    the other major players in the market.
  prefs: []
  type: TYPE_NORMAL
- en: Some of the other applications also provide log collection and aggregation,
    but we have assigned this to a separate application and will be dedicating our
    next chapter to log management for our Docker environment. Prometheus is only
    focused on metrics collection and monitoring, and as there are suitable free and
    open-source alternatives in log management, it has not moved to incorporate log
    management as part of its focus.
  prefs: []
  type: TYPE_NORMAL
- en: Monitoring Environment Metrics with Prometheus
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Prometheus was originally created and developed by SoundCloud as they needed
    a way to monitor their highly dynamic container environments and were not satisfied
    with the current tooling at the time because they felt it didn't fit their needs.
    Prometheus was developed as a way for SoundCloud to monitor not only their containers
    but also the underlying hosting hardware and orchestration running their services.
  prefs: []
  type: TYPE_NORMAL
- en: Its initial creation was back in 2012, and since then, the project has been
    free and open source and part of the Cloud Native Computing Foundation. It has
    also been widely adopted by companies across the globe needing to gain more insight
    into how their cloud environments are performing.
  prefs: []
  type: TYPE_NORMAL
- en: Prometheus works by gathering metrics of interest from our system and stores
    these in its local on-disk, time-series database. It does this by scraping an
    HTTP endpoint provided by the service or application you are collecting data from.
  prefs: []
  type: TYPE_NORMAL
- en: The endpoint can either be written into the application to provide a basic web
    interface providing metrics related to the application or service, or it can be
    provided by an exporter that will take data from the service or application and
    then expose it in a form that is understandable to Prometheus.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: This chapter mentions the HTTP endpoint on a number of occasions, and this may
    lead to confusion. You will see later in this chapter that the HTTP endpoint is
    a very basic HTTP web page provided by the service or an application. As you'll
    see shortly, this HTTP web page provides a list of all the metrics the service
    exposes to Prometheus and also provides a metrics value that is stored in the
    Prometheus time-series database.
  prefs: []
  type: TYPE_NORMAL
- en: 'Prometheus includes a number of components:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Prometheus**: The Prometheus application performs the scraping and collecting
    of metrics and stores them in its time-series database.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Grafana**: The Prometheus binary also includes a basic web interface to help
    you start to query the database. In most cases, Grafana will also be added to
    the environment to allow a more visually appealing interface. It will allow dashboards
    to be created and stored to allow metric monitoring in a much easier manner.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Exporters**: Exporters provide Prometheus with the metrics endpoints needed
    to collect data from the different applications and services. In this chapter,
    we will enable the Docker daemon to export data and install `cAdvisor` to provide
    metrics on the specific containers running on our system.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**AlertManager**: Although not covered in this chapter, `AlertManager` will
    usually be installed with Prometheus to trigger an alert when services are down
    or other alerts that are triggered in your environment.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Prometheus also provides a web-based expression browser to allow you to then
    view and aggregate the time-series metrics you have collected using the functional
    PromQL query language. This means you are able to view your data as you collect
    it. The expression browser is a little limited but can be integrated with Grafana
    to allow you to create dashboards, monitoring services, and `AlertManager` to
    allow you to trigger alerts and be notified when needed.
  prefs: []
  type: TYPE_NORMAL
- en: Prometheus is easy to install and configure (as you'll see shortly) and collects
    data on itself to allow you to start testing your application.
  prefs: []
  type: TYPE_NORMAL
- en: Due to the rate of adoption and popularity of Prometheus, many companies have
    created exporters for their applications and services. We will be giving you some
    examples of the exporters available throughout this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: It's now time to get your hands dirty. In the following exercise, you will download
    and run the Prometheus binary on your own system to start monitoring the services.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Please use `touch` command to create files and `vim` command to work on the
    file using vim editor.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 13.01: Installing and Running Prometheus'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this exercise, you will download and unpack the Prometheus binary, start
    the application, and explore the web interface and some basic configurations of
    Prometheus. You will also practice monitoring metrics, such as the total HTTP
    requests made to the Prometheus interface.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'As of the time of writing this book, the latest version of Prometheus is version
    2.15.1\. The latest version of the application can be found at the following URL:
    https://prometheus.io/download/.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Locate the latest version of Prometheus to install. Use the `wget` command
    to bring the compressed archive onto your system. The URL you use in your command
    may differ from the one here, depending on your operating system and the version
    of Prometheus you are using:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Uncompress the Prometheus archive you downloaded in the previous step using
    the `tar` command. The following command uses the `zxvf` options to unzip the
    file, and then extract the archive and files, with verbose output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The archive provides a fully created Prometheus binary application ready to
    be started up. Move into the application directory to look through some of the
    import files included in the directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'List the files in the application directory using the `ls` command to look
    into the important files in our application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Make note of the output as it should look similar to the following, with the
    `prometheus.yml` file being our configuration file. The `prometheus` file is the
    application binary and the `tsdb` and data directories are where our time-series
    database data is stored:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding directory listing, take note that the `console_libraries` and
    `consoles` directories include the binaries provided to view the Prometheus web
    interface we will work in shortly. The `promtool` directory includes tools you
    can use to work with Prometheus, including a configuration check tool to make
    sure your `prometheus.yml` file is valid.
  prefs: []
  type: TYPE_NORMAL
- en: 'If there is no issue with your binary and the application is ready to run,
    you should be able to verify the version of Prometheus. Run the application from
    the command line using the `--version` option:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The output should look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'You won''t be making any changes to your configuration file, but before you
    get started, make sure it has valid information for Prometheus. Run the `cat`
    command to view the content of the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The number of lines in the output has been reduced here. As you can see from
    the following output, your global `scrap_interval` parameter and `evaluation_interval`
    parameter is set to `15` seconds:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'If you have a moment to look over the `prometheus.yml` configuration file,
    you will notice that it is separated into four main sections:'
  prefs: []
  type: TYPE_NORMAL
- en: '`global`: This controls the server''s global configurations. The configurations
    include `scrape_interval`, to know how often it will scrape the target, and `evaluation_interval`,
    to control how often it will evaluate rules to create time-series data and generate
    rules.'
  prefs: []
  type: TYPE_NORMAL
- en: '`alerting`: By default, the configuration file will also have alerting set
    up via AlertManager.'
  prefs: []
  type: TYPE_NORMAL
- en: '`rule_files`: This is where Prometheus will locate additional rules to load
    as part of its metric gathering. `rule_files` points to a location where the rules
    are stored.'
  prefs: []
  type: TYPE_NORMAL
- en: '`scrape_configs`: These are the resources Prometheus will monitor. Any additional
    targets we wish to monitor will be added to this section of the configuration
    file.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Starting Prometheus is simply a matter of running the binary and specifying
    the configuration file you would like it to use with the `--config.file` command-line
    option. Run the following command to start Prometheus:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'After a few seconds, you should hopefully see the message that the `"Server
    is ready to receive web requests."`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Enter the URL `http://localhost:9090`. Prometheus provides an easy-to-use web
    interface. If the application has started up correctly, you should now be able
    to open a web browser on your system. You should have the expression browser presented
    to you, similar to the following screenshot.Although the expression browser doesn't
    look very impressive, it does have some good functionality out of the box. It
    is set up in three distinct sections.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**The Main Menu**: The main menu across the top of the screen, with a black
    background, allows you to view extra configuration details via the `Status` drop-down
    menu, shows you the alert history with the `Alerts` option, and brings you back
    to the main expression browser screen with the `Prometheus` and `Graph` options.'
  prefs: []
  type: TYPE_NORMAL
- en: '**The Expression Editor**: This is the top textbox where we can enter our PromQL
    queries or select a metric from the drop-down list. You then click on the `Execute`
    button to start displaying data.'
  prefs: []
  type: TYPE_NORMAL
- en: '**The Graph and Console Display**: Once you decide what data you wish to query,
    it will be displayed in both the `Console` tab in a table format and in a time-series
    graph format in the `Graph` tab, with the option to add more graphs down the web
    page using the `Add Graph` button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.1: Loading the expression browser for the first time'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B15021_13_01.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 13.1: Loading the expression browser for the first time'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the `Status` drop-down menu. You''ll get to see the following image with
    useful information, including `Runtime & Build Information` to display details
    of the version running, `Command-Line Flags` to run the application with, `Configuration`,
    which displays the current `config` file running, and `Rules` for alerting rules.
    The final two options in the drop-down menu show `Targets`, which you are currently
    scraping data from, and `Service Discovery`, which is showing automatic services
    that are being monitored:![Figure 13.2: Status drop-down menu'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B15021_13_02.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 13.2: Status drop-down menu'
  prefs: []
  type: TYPE_NORMAL
- en: 'From the `Status` menu, select the `Targets` option and you will be able to
    see what Prometheus is scraping data from. You can also get the same result by
    going to the URL `HTTP:localhost:9090/targets`. You should see a screenshot similar
    to the following, as Prometheus is currently only monitoring itself:![Figure 13.3:
    The Prometheus Targets page'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B15021_13_03.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 13.3: The Prometheus Targets page'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the target endpoint. You will be able to see the metrics exposed by the
    target. You can now see how Prometheus makes use of its pull architecture to scrape
    data from its targets. Click the link or open a browser and enter the URL `http://localhost:9090/metrics`
    to see the Prometheus metrics endpoint. You should see something similar to the
    following, showing all the metrics points Prometheus is exposing to then be scraped
    by itself:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Return to the expression browser by either clicking the back button or by entering
    the URL `http://localhost:9090/graph`. Click the drop-down list next to the `Execute`
    button to see all the metric points available:![Figure 13.4: Prometheus metrics
    available from the expression browser'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B15021_13_04.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 13.4: Prometheus metrics available from the expression browser'
  prefs: []
  type: TYPE_NORMAL
- en: 'From the drop-down list or in the query editor, add the `prometheus_http_requests_total`
    metrics to view all the HTTP requests made to the Prometheus application. Your
    output may differ from the following. Click the `Execute` button and click the
    `Graphs` tab to see a visual view of our data:![Figure 13.5: Prometheus HTTP requests
    graph displayed from the expression browser'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B15021_13_05.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 13.5: Prometheus HTTP requests graph displayed from the expression browser'
  prefs: []
  type: TYPE_NORMAL
- en: Don't worry if you are still a little confused about what we have achieved so
    far. In a short period, we've set up Prometheus and started collecting data on
    it. Even though we have only been collecting data on Prometheus itself, we have
    been able to demonstrate how we can now quickly and easily visualize the HTTP
    requests being performed by the application. The next section will show you how
    to start to capture data from Docker and your running containers by making small
    changes to your Prometheus configurations.
  prefs: []
  type: TYPE_NORMAL
- en: Monitoring Docker Containers with Prometheus
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Prometheus monitoring is a great way to understand what the application is capable
    of, but it doesn't do much more to help us with monitoring Docker and the containers
    that we have running on our system. Fortunately, there are two ways we can collect
    data to give us greater insights into our running containers. We can expose metrics
    using the Docker daemon to Prometheus and can also install some extra applications,
    such as `cAdvisor`, to collect further metrics on the containers running on our
    system.
  prefs: []
  type: TYPE_NORMAL
- en: With some minor changes to the Docker configurations, we are able to expose
    metrics to Prometheus to allow it to collect specific data of the Docker daemon
    running on our system. This will go part of the way to collecting the metrics
    but will not give us the metrics of the actual running containers. This is where
    we will then need to install `cAdvisor`, which was created by Google specifically
    to collect our running container metrics.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'If we needed to gather more metrics on the underlying hardware, Docker and
    our containers are running on, we could also gather further metrics using `node_exporter`.
    We will not be covering `node_exporter` in this chapter but supporting documentation
    can be found at the following URL:'
  prefs: []
  type: TYPE_NORMAL
- en: https://github.com/prometheus/node_exporter.
  prefs: []
  type: TYPE_NORMAL
- en: 'With Docker already running on your host system, setting it up to allow Prometheus
    to connect metrics from it is a matter of adding a configuration change to the
    `/etc/docker/daemon.json` file. In most instances, the file will most likely be
    blank. If you already have details in the file, you will simply add *lines 2*
    and *3* from the following example to your configuration file. *Line 2* enables
    this `experimental` feature to expose metrics for Prometheus to collect, and *line
    3* sets up the IP address and port for these data points to be exposed to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Due to a change in configuration, the Docker daemon on your system will need
    to be restarted for it to take effect. But once that occurs, you should then have
    metrics available at the specified IP address and port you added to the `daemon.json`
    file. In our instance above, this will be at `http://0.0.0.0:9191`.
  prefs: []
  type: TYPE_NORMAL
- en: To install `cAdvisor`, Google has provided an easy-to-use Docker image that
    can be pulled from Google's Cloud Registry and run on your environment.
  prefs: []
  type: TYPE_NORMAL
- en: To run `cAdvisor`, you will run the image mounting all the directories that
    are relevant to the Docker daemon and running containers. You also need to make
    sure that you expose the port the metrics will be available on. By default, `cAdvisor`
    is configured to expose metrics on port `8080`, which you will not be able to
    change unless you make changes to the underlying image of `cAdvisor`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following `docker run` command mounts the volumes on the container, such
    as `/var/lib/docker` and `/var/run`, exposes port `8080` to the host system, and
    finally uses the latest `cadvisor` image available from Google:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Making changes to the underlying image of `cAdvisor` is not something we will
    cover in this chapter, but you will need to refer to the `cAdvisor` documentation
    and make specific changes to the `cAdvisor` code.
  prefs: []
  type: TYPE_NORMAL
- en: The `cAdvisor` image will also provide a useful web interface to view these
    metrics. `cAdvisor` does not hold any historical data, so you need to collect
    the data with Prometheus.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the Docker daemon and `cAdvisor` have data available for Prometheus to
    collect, we need to ensure we have a scheduled configuration to have the data
    added to the time-series database. The `prometheus.yml` configuration file in
    the application directory allows us to do this. You simply add a configuration
    to the `scrape_configs` section of the file. As you can see from the following
    example, you need to add a `job_name` parameter and provide details of where the
    metrics are being provided as a `targets` entry:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Once the targets are available to Prometheus, you can then start searching for
    data. Now that we've provided a breakdown of how you can start to collect Docker
    metrics using Prometheus, the following exercise will show you how to perform
    this on your running system.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 13.02: Collecting Docker Metrics with Prometheus'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this exercise, you will configure Prometheus to start collecting data from
    our Docker daemon. This will allow you to see what resources are specifically
    being used by the Docker daemon itself. You will also run the `cAdvisor` Docker
    image to start collecting specific metrics on your running containers:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To start collecting data from the Docker daemon, you first need to enable this
    functionality on your system. Start by opening the `/etc/docker/daemon.json` file
    with your text editor and add in the following details:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: The changes you've made to the configuration file will expose the Docker daemon
    metrics to allow Prometheus to scrape and store these values. To enable this change,
    save the Docker configuration file and restart the Docker daemon.
  prefs: []
  type: TYPE_NORMAL
- en: 'Verify this has worked by opening your web browser and using the URL and port
    number you have set up in your configuration. Enter the URL `http://0.0.0.0:9191/metrics`,
    and you should see a list of metrics being exposed to allow Prometheus to scrape:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'You now need to let Prometheus know where it can find the metrics Docker is
    exposing to it. You do this through the `prometheus.yml` file in the application
    directory. Before you do this though, you will need to stop the Prometheus service
    from running, so the additions to the configuration file will take effect. Open
    the terminal Prometheus is running on and press *Ctrl* + *C*. You should see an
    output similar to the following when you do this successfully:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Open the `prometheus.yml` configuration file in the application directory with
    your text editor. Move to the end of the file in the `scrape_configs` section
    and add *lines 21* to *34*. The additional lines will tell Prometheus that it
    can now obtain metrics from the Docker daemon that has been exposed on IP address
    `0.0.0.0` and port `9191`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: prometheus.yml
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: The complete code for this step can be found at https://packt.live/33satLe.
  prefs: []
  type: TYPE_NORMAL
- en: 'Save the changes you have made to the `prometheus.yml` file and start the Prometheus
    application again from the command line as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'If you move back to the expression browser for Prometheus, you can once again
    verify it is now configured to collect data from the Docker daemon. Either select
    `Targets` from the `Status` menu or use the URL `http://localhost:9090/targets`,
    which should now include the `docker_daemon` job we specified in our configuration
    file:![Figure 13.6: Prometheus Targets now with docker_daemon'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B15021_13_06.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 13.6: Prometheus Targets now with docker_daemon'
  prefs: []
  type: TYPE_NORMAL
- en: 'Verify that you are collecting data by searching `engine_daemon_engine_cpus_cpus`.
    This value should be the same as the number of CPUs or cores available on your
    host system. Enter this into the Prometheus expression browser and click the `Execute`
    button:![Figure 13.7: docker_daemon CPUs available on the host system'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B15021_13_07.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 13.7: docker_daemon CPUs available on the host system'
  prefs: []
  type: TYPE_NORMAL
- en: 'The Docker daemon is limited to the amount of data it can expose to Prometheus.
    Set up the `cAdvisor` image to collect details about your running containers.
    Run this as a container made available by Google with the following `docker run`
    command on the command line. The `docker run` command uses the `cadvisor:latest`
    image stored in the Google Container Registry, similar to Docker Hub. There is
    no need to log in to this registry; the image will automatically be pulled to
    your system:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '`cAdvisor` comes with a web interface that will give you some basic functionality,
    but as it does not store historical data, you will be collecting the data and
    storing it on Prometheus. For now, open another web browser session and enter
    the URL `http://0.0.0.0:8080` and you should see a web page similar to the following:![Figure
    13.8: The cAdvisor welcome page'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B15021_13_08.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 13.8: The cAdvisor welcome page'
  prefs: []
  type: TYPE_NORMAL
- en: Enter the URL `http://0.0.0.0:8080/metrics` to view all the data that `cAdvisor`
    is displaying on the web interface.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: When changes are being made to the Prometheus configuration file, the application
    will need to be restarted for the changes to take effect. In the exercises we
    have been performing, we have been achieving this by stopping the service instead
    to achieve the same result.
  prefs: []
  type: TYPE_NORMAL
- en: 'As you did with the Docker daemon, configure Prometheus to periodically scrape
    data from the metrics endpoint. Stop the Prometheus application running and, once
    again, open the `prometheus.yml` configuration file with your text editor. At
    the bottom of the configuration, add in another configuration for `cAdvisor` with
    the following details:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: prometheus.yml
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: The complete code for this step can be found at https://packt.live/33BuFub.
  prefs: []
  type: TYPE_NORMAL
- en: 'Save your configuration changes once again and run the Prometheus application
    from the command line, as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'If you now view the `Targets` available on the Prometheus web interface, you
    should see something similar to the following, showing `cAdvisor` also available
    on our interface:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.9: Prometheus Targets page with cAdvisor added'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B15021_13_09.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 13.9: Prometheus Targets page with cAdvisor added'
  prefs: []
  type: TYPE_NORMAL
- en: 'With the `Targets` page of Prometheus showing that `cAdvisor` is now available
    and connected, it verifies that Prometheus is now collecting metrics data from
    `cAdvisor`. You can also test this from the expression browser to verify it is
    working as it should. Move into the expression browser by selecting `Graphs` or
    `Prometheus` from the top menu. When the page loads, add the following PromQL
    query to the query editor and click the `Execute` button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: We are starting to use some more advanced PromQL queries, and it may look a
    little confusing. The next part of this chapter is dedicated to providing you
    with a better understanding of the PromQL query language.
  prefs: []
  type: TYPE_NORMAL
- en: 'The query is using the `process_start_time_seconds` metric, specifically for
    the `cAdvisor` application and the `time()` function to add the total seconds.
    You should see a result similar to the following on the expression browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.10: cAdvisor uptime from the expression browser'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B15021_13_10.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 13.10: cAdvisor uptime from the expression browser'
  prefs: []
  type: TYPE_NORMAL
- en: With this exercise, we now have a running instance of Prometheus and are collecting
    data from the Docker daemon. We have also set up `cAdvisor` to give us some further
    information on the running container instances. The next part of this chapter
    will discuss the PromQL query language in greater depth to help you become more
    comfortable querying the metrics available from Prometheus.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the Prometheus Query Language
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we've seen in the previous parts of this chapter, Prometheus provides its
    own query language called PromQL. It allows you to search, view, and aggregate
    the time-series data stored in the Prometheus database. This section helps you
    understand the query language further. There are four core metric types in Prometheus,
    and we will start by describing each.
  prefs: []
  type: TYPE_NORMAL
- en: Counter
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A counter counts elements over time; for example, this could be the number of
    visits to your website. The count will only go up or it will reset when a service
    or application is restarted. They are suited to counting the number of certain
    events at a point in time. Each time the counter changes, the number will also
    be reflected in the data you collect.
  prefs: []
  type: TYPE_NORMAL
- en: Counters usually end with the `_total` suffix. But due to the nature of counters,
    each time a service is restarted, the counter will be set back to 0\. Using the
    `rate()` or `irate()` functions in our query, we will be able to view our metric
    rate over time and disregard any time the counter is reset to 0\. The `rate()`
    and `irate()` functions both take in a range of values using the square brackets
    `[ ]` where you specify a time value, such as `[1m]`.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are interested in examples of counters in the data we are collecting,
    open the metrics page for the data being collected for `cAdvisor` at the URL `http://0.0.0.0:8080/metrics`.
    One of the first metrics provided is `container_cpu_system_seconds_total`. If
    we look through the metrics page, we will see the information provided on the
    metric value and the type as listed here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Now, we will look into the second metric type available in Prometheus, in other
    words, gauges.
  prefs: []
  type: TYPE_NORMAL
- en: Gauges
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Gauges are designed to handle values that may decrease over time and are designed
    for any metric exposing the current state of something. Just like a thermometer
    or fuel gauge, you would be able to see the current state value. Gauges are restricted
    in their functionality because not all the data will be collected as there may
    be missing values between time points. Therefore, they are less reliable than
    a counter, and so counters are still used for time-series representations of data.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we once again move to the metrics page for `cAdvisor`, you can see some
    of our metrics being displayed as a gauge. One of the first metrics we see is
    `container_cpu_load_average_10s`, which is provided as a gauge, similar to the
    following values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: The next section will take you through histograms, the third type of metric
    available in Prometheus.
  prefs: []
  type: TYPE_NORMAL
- en: Histograms
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Histograms are a lot more complex than gauges and counters and provide additional
    information, like the sum of an observation. They are used to provide a distribution
    of a set of data. Histograms use sampling and can be used to estimate quantiles
    on the Prometheus server.
  prefs: []
  type: TYPE_NORMAL
- en: 'Histograms are less common than gauges and counters and do not seem to be set
    up for `cAdvisor`, but we can see some available in our Docker daemon metrics.
    Move to the URL `http://0.0.0.0:9191/metrics` and you''ll be able to see that
    one of the first histogram metrics listed is `engine_daemon_container_actions_seconds`.
    This is the number of seconds the Docker daemon takes to process each action:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: The next section will now cover the fourth metric type available, in other words,
    summaries.
  prefs: []
  type: TYPE_NORMAL
- en: Summaries
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Summaries are an extension of histograms and are calculated on the client-side.
    They have the advantage of being more accurate, but they can be expensive for
    the client, too. We can see an example of a summary in the Docker daemon metrics
    where `http_request_duration_microseconds` is listed here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Now, since we've explained the type of metrics available in PromQL, we can take
    a further look at how these metrics can be implemented as a part of our queries.
  prefs: []
  type: TYPE_NORMAL
- en: Performing PromQL Queries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Running queries on the expression browser is easy, but you may not always get
    the information you need. By simply adding the metric name, such as `countainer_cpu_system_seconds_total`,
    we can get quite a few responses. Though, the amount depends on the number of
    containers we have on our system along with the returning values for each of the
    filesystems that are running on our host system. To limit the number of responses
    provided in our result, we can search for specific text using curly braces `{
    }`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider the following examples. The following command provides the full name
    of the `"cadvisor"` container we wish to view:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'The following example uses a regular expression compatible with GO. The command
    looks for any names that start with `ca` and have further characters afterward:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'The following code snippet is searching for any containers that do not have
    the name value as blank by using the not equal to ( `!=` ) value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'If we placed any of these metrics searches in the expression browser and created
    a graph, what you would notice is that the graph would simply climb in a linear
    fashion over time. As we mentioned earlier, this is because the metric `container_cpu_system_seconds_total`
    is a counter and will only ever increase over time or be set back to zero. With
    the use of functions, we can calculate more useful time-series data. The following
    example uses the `rate()` function to calculate the per-second rate for the matching
    time-series data. We have used `[1m]`, which represents 1 minute. The higher the
    number, the smoother the graph will be:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'The `rate` function can only be used for a counter metric. If we had more than
    one container running, we could then use the `sum()` function to add all the values
    together and provide a graph by container name using the `(name)` function as
    we have here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'If you would like to see a list of all the functions available in PromQL, go
    to the following link provided by the official Prometheus documentation:'
  prefs: []
  type: TYPE_NORMAL
- en: https://prometheus.io/docs/prometheus/latest/querying/functions/.
  prefs: []
  type: TYPE_NORMAL
- en: 'PromQL also lets us perform arithmetic from our queries. In the following example,
    we are using the `process_start_time_seconds` metric and searching for the Prometheus
    instance. We can subtract this time from the `time()` function, which gives us
    the current date and time in epoch time:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Epoch time is the number of seconds from January 1, 1970, and is represented
    by a number; for example, 1578897429 is converted to 6:37 a.m. (GMT) on January
    13, 2020.
  prefs: []
  type: TYPE_NORMAL
- en: We're hoping this primer in PromQL has given you some more insight into using
    the query language within your projects. The following exercise will help enforce
    what we have learned by specifically working further with monitoring our running
    Docker containers.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 13.03: Working with the PromQL Query Language'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the following exercise, we will introduce a new Docker image onto your system
    to help you demonstrate some of the available metrics specific to Docker while
    using Prometheus. The exercise will reinforce what you have learned so far about
    the PromQL query language with a tangible use case of gathering and displaying
    metrics data for a basic website:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open a new terminal and create a new directory, calling it `web-nginx`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new file in the `web-nginx` directory and call it `index.html`. Open
    the new file with your text editor and add the following HTML code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Run a new Docker container with the following command. By now, you should be
    familiar with the syntax, but the following command will pull the latest `nginx`
    image, name it `web-nginx`, and expose port `80` so that you can then view the
    mounted `index.html` file you created in the previous step:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Open a web browser and access `http://0.0.0.0`. The only thing you should see
    is the greeting `Hello Prometheus`:![Figure 13.11: Sample web page'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B15021_13_11.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 13.11: Sample web page'
  prefs: []
  type: TYPE_NORMAL
- en: 'If Prometheus is not running on your system, open a new terminal and, from
    the Prometheus application directory, start the application from the command line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: We will not show screenshots of all the PromQL queries that we perform in this
    part of the chapter as we don't want to waste too much space. But the queries
    should all be valid for the running containers and system we have set up.
  prefs: []
  type: TYPE_NORMAL
- en: 'The bulk of the `cAdvisor` metrics now available in Prometheus will start with
    the word `container`. Use the `count()` function with the metric `container_memory_usage_bytes`
    to see the count of the current memory usage in bytes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: The preceding query provides the 28 results on the system on which it is running.
  prefs: []
  type: TYPE_NORMAL
- en: 'To limit the information you are looking for, either use the curly brackets
    to search or, as in the following command, use not search (`!=`) for specific
    image names. Currently, you only have two containers running with image names,
    `cAdvisor` and `web-nginx`. By using the `scalar()` function, you can count the
    number of containers you have running on your system over time. Click the `Execute`
    button after entering the following query:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Click the `Graphs` tab, and you should now have a plotted graph of the preceding
    query. The graph should be like the following image in which you started up a
    third image `web-nginx` container to show how the Prometheus expression browser
    displays this type of data. Remember that you are only seeing one line in the
    graph as this is the memory used by the two containers on our system and there
    is not a separate memory usage value for both:![Figure 13.12: cAdvisor metrics
    from the expression browser'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B15021_13_12.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 13.12: cAdvisor metrics from the expression browser'
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the `container_start_time_seconds` metric to get the Unix timestamp of
    when the container started up:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: You will see something like 1578364679, which is the number of seconds past
    epoch time, which is 1 January 1970.
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the `time()` function to get the current time and then subtract `container_start_time_seconds`
    from this value to show how many seconds the container has been running for:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Monitor HTTP requests on your application via Prometheus'' `prometheus_http_request_duration_seconds_count`
    metric. Use the `rate()` function to plot a graph of the duration of each HTTP
    request to Prometheus:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: It would be great to be using the `web-nginx` container to view its HTTP request
    time and latency, but the container has not been set up to provide this information
    to Prometheus yet. We will address this shortly in the chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Use an arithmetic operator to divide `prometheus_http_request_duration_seconds_sum`
    by `prometheus_http_request_duration_seconds_count`, which will then provide the
    HTTP latency of the requests made:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the following command using the `container_memory_usage_bytes` metric to
    see the memory being used by each of the running containers on your system. In
    this query, we are using the `sum by (name)` command to add the values per container
    name:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'If you execute the preceding query, you''ll see the graph in the expression
    browser showing the memory used by the `web-nginx` and `cAdvisor` containers:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.13: Memory of both the containers running on our system'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B15021_13_13.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 13.13: Memory of both the containers running on our system'
  prefs: []
  type: TYPE_NORMAL
- en: This section has helped you gain a little more familiarity with the `PromQL`
    query language and put together your queries to start viewing your metrics from
    the expression browser. The following section will provide details on how you
    can start to collect metrics from the apps and services you have created in Docker
    using exporters to expose data in a Prometheus-friendly way.
  prefs: []
  type: TYPE_NORMAL
- en: Using Prometheus Exporters
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have configured application metrics to provide data for
    Prometheus to scrape and collect, so why do we need to worry about exporters?
    As you have seen, Docker and `cAdvisor` have nicely exposed data endpoints from
    which Prometheus can gather metrics. But these have limited functionality. As
    we have seen from our new `web-nginx` site, there is no relevant data exposed
    by the web page running on our image. We can use exporters to help gather metrics
    from the application or service, and then provide data in a way that Prometheus
    can understand and gather.
  prefs: []
  type: TYPE_NORMAL
- en: Although this may seem to be a major flaw in how Prometheus works, due to the
    increase in the use of Prometheus and the fact that it is open-source, vendors
    and third-party providers are now providing exporters to help you get your metrics
    from the application.
  prefs: []
  type: TYPE_NORMAL
- en: This means that, by installing a specific library or using a prebuilt Docker
    image to run your application, you can expose your metrics data for collection.
    As an example, the `web-nginx` application we created earlier in this chapter
    is running on NGINK. To get metrics on our web application, we could simply install
    the `ngx_stub_status_prometheus` library onto our NGINX instance that is running
    our web application. Or better still, we can find a Docker image that someone
    has already built to run our web application.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: This section of the chapter has focused on NGINX Exporter, but exporters for
    a large number of applications can be found in their supporting documentation
    or with the Prometheus documentation.
  prefs: []
  type: TYPE_NORMAL
- en: In the following exercise, we will use our `nginx` container as an example and
    use an exporter with our `web-nginx` container to expose metrics available to
    Prometheus to collect.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 13.04: Using Metrics Exporters with Your Applications'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'So far, we''ve used an `nginx` container to provide a basic web page, but we
    do not have specific metrics available for our web page. In this exercise, you
    will use a different NGINX image, built with a metrics exporter that can be exposed
    to Prometheus:'
  prefs: []
  type: TYPE_NORMAL
- en: 'If the `web-nginx` container is still running, stop the container with the
    following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'Within Docker Hub, you have an image called `mhowlett/ngx-stud-status-prometheus`,
    which already has the `ngx_stub_status_prometheus` library installed. The library
    will allow you to set up an HTTP endpoint to provide metrics to Prometheus from
    your `nginx` container. Pull this image down onto your working environment:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'In the previous exercise, you used the default NGINX configuration on the container
    to run your web application. To expose the metrics to Prometheus, you will need
    to create your configuration to override the default configuration and provide
    your metrics as an available HTTP endpoint. Create a file named `nginx.conf` in
    your working directory and add the following configuration details:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: The preceding configuration will ensure that your server is still available
    on port `80` in *line 8*. *Line 11* will ensure that your current `index.html`
    page is provided, and *line 14* will then set up a subdomain of `/metrics` to
    provide the details available from the `ngx_stub_status_prometheus` library.
  prefs: []
  type: TYPE_NORMAL
- en: 'Provide the mount point for the `index.html` file to start up the `web-nginx`
    container and mount the `nginx.conf` configuration you created in the previous
    step using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'Your `web-nginx` application should be running again, and you should be able
    to see it from your web browser. Enter the URL `http://0.0.0.0/metrics` to see
    the metrics endpoint. The results in your web browser window should look similar
    to the following information:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'You still need to let Prometheus know that it needs to collect the data from
    the new endpoint. So, stop Prometheus from running. Move into the application
    directory again, and with your text editor, add the following target to the end
    of the `prometheus.yml` configuration file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: prometheus.yml
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: The complete code for this step can be found at https://packt.live/3hzbQgj.
  prefs: []
  type: TYPE_NORMAL
- en: 'Save the changes to the configuration and start Prometheus running again:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'Confirm whether Prometheus is configured to collect data from the new metrics
    endpoint you have just created. Open your web browser and enter the URL `http://0.0.0.0:9090/targets`:![Figure
    13.14: Targets page showing web-nginx'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B15021_13_14.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 13.14: Targets page showing web-nginx'
  prefs: []
  type: TYPE_NORMAL
- en: In this exercise, you learned to add an exporter to an application running on
    your environment. We first expanded on our previous `web-nginx` application to
    allow it to display more than one HTTP endpoint. We then used a Docker image that
    included the `ngx_stub_status_prometheus` library to allow us to display our `web-nginx`
    statistics. We then configured Prometheus to gather these details from the endpoint
    provided.
  prefs: []
  type: TYPE_NORMAL
- en: In the following section, we will set up Grafana to allow us to view our data
    a lot more closely and provide user-friendly dashboards for the data we are collecting.
  prefs: []
  type: TYPE_NORMAL
- en: Extending Prometheus with Grafana
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Prometheus web interface provides a functional expression browser that allows
    us to search and view the data in our time-series database with limited installation.
    It provides a graphical interface but doesn't allow us to save any of our searches
    or visualizations. The Prometheus web interface is also limited as it cannot group
    queries in dashboards. Also, there are not many visualizations that are provided
    by the interface. This is where we can expand our collected data further with
    the use of an application such as Grafana.
  prefs: []
  type: TYPE_NORMAL
- en: Grafana allows us to connect directly with the Prometheus time-series database
    and perform queries and create visually appealing dashboards. Grafana can run
    as a standalone application on a server. We can preconfigure the Grafana Docker
    image to deploy onto our system, configured with a connection to our Prometheus
    database, and with a basic dashboard already set up to monitor our running containers.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screen, Grafana Home Dashboard, is presented when you first log
    in to Grafana. You can always return to this page by clicking on the Grafana icon
    at the top left of the screen. This is the main work area where you can start
    to build dashboards, configure your environment, and add users'' plugins:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.15: Grafana Home Dashboard'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B15021_13_15.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 13.15: Grafana Home Dashboard'
  prefs: []
  type: TYPE_NORMAL
- en: The left side of the screen is a handy menu that will help you configure Grafana
    further. The plus symbol will allow you to add new dashboards and data sources
    to your installation, while the dashboard icon (four squares) organizes all your
    dashboards into one area to search and view. Underneath the dashboard icon is
    the explore button, which provides an expression browser just like Prometheus
    has in order to run PromQL queries, while the alerts icon (bell) takes you to
    the window where you can configure alerts to trigger after different events occur.
    The configuration icon takes you to the screen where you can configure how Grafana
    operates, while the server admin icon allows you to manage who can access your
    Grafana web interface and what privileges they can have.
  prefs: []
  type: TYPE_NORMAL
- en: Feel free to explore the interface further when you install Grafana in the next
    exercise, but we will be working to automate the process as much as possible to
    avoid making any changes to your working environment.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 13.05: Installing and Running Grafana on Your System'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this exercise, you will set up Grafana on your system and allow the application
    to start using the data you have stored in your Prometheus database. You will
    install Grafana using its Docker image, provide a brief explanation of the interface,
    and begin to set up basic dashboards:'
  prefs: []
  type: TYPE_NORMAL
- en: 'If Prometheus is not running, start it up again. Also, make sure that your
    containers, `cAdvisor`, and the test NGINX server (`web-nginx`) are running:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'Open the `/etc/hosts` file of your system and add a domain name to the host
    IP of `127.0.0.1`. Unfortunately, you will not be able to use the localhost IP
    address you have been using to access Prometheus to automatically provision a
    data source for Grafana. IP addresses such as `127.0.0.1`, `0.0.0.0`, or using
    localhost will not be recognized as a data source for Grafana. Depending on your
    system, you may have a number of different entries already added to the `hosts`
    file. You will usually have the IP address of `127.0.0.1` listed as one of the
    first IP addresses that will reference the domain of `localhost` and amend `prometheus`
    to this line, as we have in the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: Save the `hosts` file. Open your web browser and enter the URL `http://prometheus:9090`.
    The Prometheus expression browser should now be displayed. You no longer need
    to provide the system IP address.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To automatically provision your Grafana image, you will need to mount a `provisioning`
    directory from your host system. Create a provisioning directory and ensure this
    directory includes extra directories for `dashboards`, `datasources`, `plugins`
    and `notifiers`, as in the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a file called `automatic_data.yml` in the `provisioning/datasources`
    directory. Open the file with your text editor and enter the following details
    to tell Grafana what data it will use to provide dashboards and visualizations.
    The following details simply name the data source, provide the type of data, and
    where to find the data. In this instance, this is your new Prometheus domain name:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, create a file, `automatic_dashboard.yml`, in the `provisioning/dashboards`
    directory. Open the file with your text editor and add the following details.
    This simply provides the location of where future dashboards can be stored on
    startup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: You've done enough to start up our Grafana Docker image. You are using the supported
    Grafana image provided as `grafana/grafana`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: We don't have any code to add as a dashboard as yet, but in the following steps,
    you will create a basic dashboard that will be automatically provisioned later
    in this exercise. If you wanted to, you could also search the internet for existing
    dashboards that Grafana users have created and provision them instead.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following command to pull and start up the Grafana image. It mounts
    your provisioning directory to the `/etc/grafana/provisioning` directory on your
    Docker image using the `-v` option. It also uses the `-e` option to set the administration
    password to `secret` using the `GF_SECURITY_ADMIN_PASSWORD` environment variable,
    which will mean you won''t need to reset the administration password each time
    you log in to a newly started container. Finally, you also use `-p` to expose
    port `3000` of your image to port `3000` of our system:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Although using a Grafana Docker image is convenient, you will lose all your
    changes and dashboards each time the image restarts. That is why we will provision
    the installation while demonstrating how to use Grafana at the same time.
  prefs: []
  type: TYPE_NORMAL
- en: 'You have started up the image on port `3000`, so you should now be able to
    open a web browser. Enter the URL `http://0.0.0.0:3000` in your web browser. It
    should display the welcome page for Grafana. To log in to the application, use
    the default administrator account that has a username of `admin` and the password
    we specified as the `GF_SECURITY_ADMIN_PASSWORD` environment variable:![Figure
    13.16: The Grafana login screen'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B15021_13_16.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 13.16: The Grafana login screen'
  prefs: []
  type: TYPE_NORMAL
- en: 'When you log in, you''ll be presented with the Grafana Home Dashboard. Click
    the plus symbol on the left of the screen and select `Dashboard` to add a new
    dashboard:![Figure 13.17: The Grafana welcome screen'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B15021_13_17.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 13.17: The Grafana welcome screen'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Your Grafana interface will most likely be displayed in the dark default theme.
    We have changed ours to the light theme to make it easier to read. To change this
    preference on your own Grafana application, you can click the user icon at the
    bottom left of the screen, select `Preferences`, and then search for `UI Theme`.
  prefs: []
  type: TYPE_NORMAL
- en: Click on the `Add new panel` button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To add a new query using `Prometheus` data, select `Prometheus` as the data
    source from the drop-down list:![Figure 13.18: Creating our first dashboard in
    Grafana'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B15021_13_18.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 13.18: Creating our first dashboard in Grafana'
  prefs: []
  type: TYPE_NORMAL
- en: In the metrics section, add the PromQL query `sum (rate (container_cpu_usage_seconds_total{image!=""}[1m]))
    by (name)`. The query will provide the details of all the containers running on
    your system. It will also provide the CPU usage of each overtime. Depending on
    the amount of data you have, you may want to set `Relative time` to `15m` in the
    `Query options` drop down menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This example uses `15m` to make sure you have enough data for the graph, but
    this time range could be set to whatever you wish:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.19: Adding dashboard metrics'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B15021_13_19.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 13.19: Adding dashboard metrics'
  prefs: []
  type: TYPE_NORMAL
- en: 'Select the `Show options` button to add a title to your dashboard panel. In
    the following image, the title of your panel is set as `CPU Container Usage`:![Figure
    13.20: Adding a dashboard title'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B15021_13_20.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 13.20: Adding a dashboard title'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the save icon at the top of the screen. This will give you the option
    to name the dashboard— `Container Monitoring` in this instance. When you click
    `Save`, you will then be taken to your completed dashboard screen, similar to
    the one here:![Figure 13.21: Dashboard screen'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B15021_13_21.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 13.21: Dashboard screen'
  prefs: []
  type: TYPE_NORMAL
- en: 'At the top of the dashboard screen, to the left of the save icon, you will
    have the option to export your dashboard in `JSON` format. If you do this, you
    can use this `JSON` file to add to your provisioning directory. It will help you
    install the dashboard into your Grafana image when you run it. Select `Export`
    and save the file to the `/tmp` directory where the name of the file will default
    to something similar to the name of the dashboard and the timestamp data. In this
    example, it saved the `JSON` file as `Container Monitoring-1579130313205.json`.
    Also make sure the `Export for sharing externally` option is not turned on, as
    shown in the image below:![Figure 13.22: Exporting your dashboard as JSON'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B15021_13_22.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 13.22: Exporting your dashboard as JSON'
  prefs: []
  type: TYPE_NORMAL
- en: 'To add the dashboard to your provisioning file, you need to first stop the
    Grafana image from running. Do this with the following `docker kill` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the dashboard file you saved in *Step 15* to the `provisioning/dashboards`
    directory and name the file `ContainerMonitoring.json` as a part of the copy,
    shown in the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'Start the Grafana image again and log in to the application using the default
    administration password:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: By provisioning the dashboard and data sources in this manner, this means you
    will no longer be able to create dashboards from the Grafana web interface. When
    you create a dashboard from now on, you will be presented with an option to save
    the dashboard as a JSON file, as we did during the exporting of our dashboard.
  prefs: []
  type: TYPE_NORMAL
- en: 'Log in to the home dashboard now. You should see the `Container Monitoring`
    dashboard available as a recently accessed dashboard, but if you click the home
    icon at the top of the screen, it will also show it available in the `General`
    folder of your Grafana installation:![Figure 13.23: Container monitoring dashboard
    available and provisioned'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B15021_13_23.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 13.23: Container monitoring dashboard available and provisioned'
  prefs: []
  type: TYPE_NORMAL
- en: We have now set up a fully functional dashboard that loads automatically when
    we run our Grafana Docker image. As you can see, Grafana provides a professional
    user interface to help us monitor the resource usage of our running containers.
  prefs: []
  type: TYPE_NORMAL
- en: This has brought us to the end of this section, where we've shown you how you
    can collect your metrics using Prometheus to help monitor how your container applications
    are running. The following activities will use the knowledge you have learned
    in the previous sections to expand your installation and monitoring further.
  prefs: []
  type: TYPE_NORMAL
- en: 'Activity 13.01: Creating a Grafana Dashboard to Monitor System Memory'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In previous exercises, you''ve set up a quick dashboard to monitor the system
    CPU being used by our Docker containers. As you saw in the previous chapter, it''s
    also important to monitor the system memory being used by our running containers
    as well. In this activity, you are asked to create a Grafana dashboard that will
    monitor the system memory being used by our running containers and add it to our
    `Container Monitoring` dashboard, ensuring it can be provisioned when our Grafana
    image is started up:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The steps you''ll need to complete this activity are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Ensure your environment is being monitored by Prometheus and that Grafana is
    installed on your system. Make sure you use Grafana to search over the time-series
    data stored on Prometheus.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a PromQL query to monitor the container memory being used by your running
    Docker containers.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save the new dashboard panel on your `Container Monitoring` dashboard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ensure that the new and improved `Container Monitoring` dashboard is now available
    and provisioned when you start up your Grafana container.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Expected Output**:'
  prefs: []
  type: TYPE_NORMAL
- en: 'You should see the newly created `Memory Container usage` panel on the top
    of the dashboard when you start the Grafana container:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.24: New dashboard panel displaying memory usage'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B15021_13_24.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 13.24: New dashboard panel displaying memory usage'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The solution for this activity can be found via [this link](B15021_Solution_Final_SMP.xhtml#_idTextAnchor353).
  prefs: []
  type: TYPE_NORMAL
- en: The next activity will make sure you are comfortable using exporters and adding
    new targets to Prometheus to start tracking extra metrics in your panoramic trekking
    app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Activity 13.02: Configuring the Panoramic Trekking App to Expose Metrics to
    Prometheus'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Your metrics monitoring environment is starting to look pretty good, but there
    are some applications in your panoramic trekking app that could be providing extra
    details and metrics to monitor—for example, the PostgreSQL application running
    on your database. Choose one of the applications in the panoramic trekking app
    to expose metrics to your Prometheus environment:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The steps you''ll have to take in order to complete this activity are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Ensure Prometheus is running on your system and collecting metrics.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose a service or application running as part of the panoramic trekking app
    and research how you can expose metrics for Prometheus to collect.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Implement your changes to your application or service.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Test your changes and verify that the metrics are available to be collected.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configure a new target on Prometheus to collect the new panoramic trekking app
    metrics.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Verify that you are able to query your new metrics on Prometheus.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Upon successful completion of the activity, you should see the `postgres-web`
    target displayed on the Prometheus `Targets` page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.25: New postgres-web Targets page displayed on Prometheus'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B15021_13_25.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 13.25: New postgres-web Targets page displayed on Prometheus'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The solution for this activity can be found via [this link](B15021_Solution_Final_SMP.xhtml#_idTextAnchor354).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we took a long look at metrics and monitoring our container
    applications and services. We started with a discussion on why you need to have
    a clear strategy on your metric monitoring and why you need to make a lot of decisions
    before your project even starts development. We then introduced Prometheus and
    gave an overview of its history, how it works, and why it has grown in popularity
    over a very short period. It was then time to get back working again and we installed
    Prometheus onto our system, became familiar with using the web interface, started
    to gather metrics from Docker (with some minor changes), and by using `cAdvisor`,
    collected metrics on the running containers.
  prefs: []
  type: TYPE_NORMAL
- en: The query language used by Prometheus can sometimes be a little confusing, so
    we took some time to explore PromQL before looking at using exporters to collect
    even more metrics. We finished up this chapter by integrating Grafana into our
    environment, displaying our times-series data from Prometheus, and creating useful
    dashboards and visualizations on the data we are collecting.
  prefs: []
  type: TYPE_NORMAL
- en: Our next chapter is going to continue the monitoring theme with the collection
    and monitoring of log data from our running containers.
  prefs: []
  type: TYPE_NORMAL
