- en: Ionic 3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the final chapter of Learning Ionic, Second Edition, we will look at the
    latest changes to the Ionic framework -- Ionic 3\. We will also quickly touch
    upon Angular and its releases. In this chapter, we will look at the following
    topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Angular 4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ionic 3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ionic 3 updates
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ionic 2 versus Ionic 3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Angular 4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Since the launch of Angular 2, the Angular team has been working towards making
    Angular a stable and reliable framework for building applications. On 23 March,
    2017, the Angular team released Angular 4.
  prefs: []
  type: TYPE_NORMAL
- en: What? Angular 4? What happened to Angular 3!!
  prefs: []
  type: TYPE_NORMAL
- en: 'Simply put, the Angular team adopted Semantic Versioning ([http://semver.org/](http://semver.org/))
    to manage all the packages and dependences within the framework. In this process,
    one of the packages (`@angular/router`) has moved a complete major version ahead
    of the other packages, something like the following, due to the changes to the
    router package.:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Frameworks** | **Versions** |'
  prefs: []
  type: TYPE_TB
- en: '| `@angular/core` | v2.3.0 |'
  prefs: []
  type: TYPE_TB
- en: '| `@angular/compiler` | v2.3.0 |'
  prefs: []
  type: TYPE_TB
- en: '| `@angular/compiler-cli` | v2.3.0 |'
  prefs: []
  type: TYPE_TB
- en: '| `@angular/http` | v2.3.0 |'
  prefs: []
  type: TYPE_TB
- en: '| `@angular/router` | V3.3.0 |'
  prefs: []
  type: TYPE_TB
- en: Due to this misalignment and to avoid future confusion, the Angular team went
    ahead with Angular 4 instead of Angular 3.
  prefs: []
  type: TYPE_NORMAL
- en: 'Also, the **tentative release schedule** for future versions of Angular will
    be as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Versions** | **Release dates** |'
  prefs: []
  type: TYPE_TB
- en: '| Angular 5 | September/October 2017 |'
  prefs: []
  type: TYPE_TB
- en: '| Angular 6 | March 2018 |'
  prefs: []
  type: TYPE_TB
- en: '| Angular 7 | September/October 2018 |'
  prefs: []
  type: TYPE_TB
- en: You can read more about this at [http://angularjs.blogspot.in/2016/12/ok-let-me-explain-its-going-to-be.html](http://angularjs.blogspot.in/2016/12/ok-let-me-explain-its-going-to-be.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'With Angular 4, there have been some significant under-the-hood changes. The
    following are the updates as part of Angular 4:'
  prefs: []
  type: TYPE_NORMAL
- en: Smaller and faster with a smaller generated code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Updates to the `Animation` package
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Updates to `*ngIf` and `*ngFor`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Upgrade to the latest TypeScript version
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To know more about this release, refer to [http://angularjs.blogspot.in/2017/03/angular-400-now-available.html](http://angularjs.blogspot.in/2017/03/angular-400-now-available.html).
  prefs: []
  type: TYPE_NORMAL
- en: Since Ionic follows Angular, they have upgraded the Ionic framework from version
    2 to version 3 to move their base Angular version from 2 to 4.
  prefs: []
  type: TYPE_NORMAL
- en: Ionic 3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With the release of Angular 4, Ionic has upgraded itself and moved to Ionic
    3.
  prefs: []
  type: TYPE_NORMAL
- en: Ionic version 3 ([https://blog.ionic.io/ionic-3-0-has-arrived/](https://blog.ionic.io/ionic-3-0-has-arrived/))
    has added a couple of new features, such as IonicPage and LazyLoading. They have
    updated the base version of Angular to version 4 and pushed out some critical
    bug fixes as well. For more information, take a look at the change log for 3.0.0
    at [https://github.com/driftyco/ionic/compare/v2.3.0...v3.0.0](https://github.com/driftyco/ionic/compare/v2.3.0...v3.0.0).
  prefs: []
  type: TYPE_NORMAL
- en: Ionic 2 to Ionic 3 changes are not breaking as we have seen from Ionic 1 to
    Ionic 2\. Changes to Ionic 3 are more along the lines of enhancements and bug
    fixes, which are on top of Ionic 2.
  prefs: []
  type: TYPE_NORMAL
- en: Ionic 3 updates
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, we will take a look at a few key updates to Ionic 3.
  prefs: []
  type: TYPE_NORMAL
- en: TypeScript update
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For the Ionic 3 release, the Ionic team has updated the version of TypeScript
    to the latest version. The latest version of TypeScript has enhanced build times
    and type checking among other things. For a complete list of TypeScript updates,
    refer to the TypeScript 2.2 release notes at: [https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-2.html](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-2.html).
  prefs: []
  type: TYPE_NORMAL
- en: Ionic Page decorator
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Ionic Page decorator helps implement deep linking better. If you remember our
    navigation example from [Chapter 4](part0079.html#2BASE0-9757c8e51afd47e0a7a9ced32db749b8),
    *Ionic Decorators and Services*, we have referred to actual class names while
    pushing and popping pages using the Nav Controller.
  prefs: []
  type: TYPE_NORMAL
- en: 'I am referring to `example9/src/pages/home/home.ts` here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: We can implement the same using the `@IonicPage` decorator, as shown.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s update `example9/src/pages/about/about.ts`, as illustrated:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that the `@IonicPage` decorator has been added along with the `@Component`
    decorator. Now, we will update `example9/src/pages/home/home.ts`, as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Note the change to `this.navCtrl.push()`. Instead of passing the reference to
    the class, we are passing the name we have provided as a property on the `@IonicPage`
    decorator in `example9/src/pages/about/about.ts`. Also, now the pages will have
    the name added to the URL, that is, [http://localhost:8100/#/about](http://localhost:8100/#/about).
  prefs: []
  type: TYPE_NORMAL
- en: To know more about Ionic Page decorator, check out [http://ionicframework.com/docs/api/navigation/IonicPage](http://ionicframework.com/docs/api/navigation/IonicPage).
  prefs: []
  type: TYPE_NORMAL
- en: Also, check out IonicPage Module [http://ionicframework.com/docs/api/IonicPageModule/](http://ionicframework.com/docs/api/IonicPageModule/)
    for bundling multiple pages/components into one child module and referencing the
    same in `@NgModule` in `app.module.ts`.
  prefs: []
  type: TYPE_NORMAL
- en: Lazy Loading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Lazy loading is another new feature that has been added as part of the Ionic
    3 release. Lazy loading lets us load a page only when needed. This will improve
    the start up time of the app and increase the overall experience.
  prefs: []
  type: TYPE_NORMAL
- en: You can take a look at the process by visiting [https://docs.google.com/document/d/1vGokwMXPQItZmTHZQbTO4qwj_SQymFhRS_nJmiH0K3w/edit](https://docs.google.com/document/d/1vGokwMXPQItZmTHZQbTO4qwj_SQymFhRS_nJmiH0K3w/edit)
    to start implementing Lazy Loading in your Ionic app.
  prefs: []
  type: TYPE_NORMAL
- en: At the time of writing this chapter, Ionic 3 is about a week old. There were
    a couple of issues/inconsistencies in the CLI as well as the scaffolded apps.
    Hopefully, these will be resolved by the time the book is out.
  prefs: []
  type: TYPE_NORMAL
- en: Ionic 2 versus Ionic 3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this book, all the examples have been written with Ionic 2 in mind. Having
    said that, if you are using Ionic 3 to develop your Ionic apps, there should not
    be much of a change in the code. One key difference you will note in all the scaffolded
    apps is the introduction of IonicPage decorator and IonicPage Module.
  prefs: []
  type: TYPE_NORMAL
- en: You can always refer to the Ionic documentation to get more information on the
    latest version of these APIs.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With this, we conclude our Ionic journey.
  prefs: []
  type: TYPE_NORMAL
- en: To quickly summarize, we started with understanding why Angular, why Ionic,
    and why Cordova. Then, we saw how Mobile Hybrid apps work and where Cordova and
    Ionic fit in. Next, we looked at various templates of Ionic and went through Ionic
    components, decorators, and services. After that, we looked at theming Ionic apps.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we went through Ionic Native and saw how to work with it. Using this knowledge,
    we built a Riderr app, which implements REST APIs, interfaces with device features
    using Ionic Native, and gives you the feel of a complete app that can be built
    using Ionic.
  prefs: []
  type: TYPE_NORMAL
- en: After that, we looked at Migrating Ionic 1 apps to Ionic 2 and how to test Ionic
    2 apps. In [Chapter 10](part0158.html#4MLOS0-9757c8e51afd47e0a7a9ced32db749b8),
    *Releasing the Ionic App*, we saw how to release and manage our app.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we saw the key changes in Ionic 3.
  prefs: []
  type: TYPE_NORMAL
- en: Check out the [Appendix](part0179.html#5AMKM0-9757c8e51afd47e0a7a9ced32db749b8)
    for more helpful information and a few Ionic services that are ready to be test
    driven/used in production apps.
  prefs: []
  type: TYPE_NORMAL
