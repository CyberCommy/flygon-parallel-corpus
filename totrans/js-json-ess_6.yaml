- en: Chapter 6. Building the Carousel Application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have come a long way in our journey to master JavaScript and JSON; it is
    time to get busy and build an end-to-end project that is powered by JSON. In our
    journey, we have come across a variety of concepts such as JavaScript, JSON, the
    use of server-side programming, AJAX, and JSONP. In this photo gallery application,
    let us put all of these to use. We will be building a rotating notification board
    application, which should display the top students for the month. This application
    should provide the Carousel functionality, such as navigational buttons, auto
    play of content, displaying a single item at a given point, and keeping track
    of the first and last piece of content.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let us begin by building a folder that will hold the files for this application.
    This application will need an HTML file that will hold the Carousel; it will need
    a few libraries such as jQuery and jQuery Cycle. We will have to import these
    libraries; we also need a JSON file that holds the data for this exercise. To
    download the jQuery file, please visit [http://www.jquery.com](http://www.jquery.com).
    As we have already observed, jQuery is the most popular JavaScript library available
    to developers. There is a growing community of developers who make jQuery more
    and more popular by the day. We will be using the jQuery Cycle library to power
    our Carousel application. The jQuery Cycle is one the most popular and lightweight
    cycle libraries with numerous features; it can be downloaded from [http://malsup.github.io/jquery.cycle.all.js](http://malsup.github.io/jquery.cycle.all.js).
  prefs: []
  type: TYPE_NORMAL
- en: 'These files have to be in a folder inside your document root; in this project
    we will be working with a live Apache Server, and we will be ingesting the JSON
    feed via AJAX. The following is an example of how the folder should look once
    the files have been added:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up the application](img/6034OS_06_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now that we have the libraries arranged in the document root, let us work on
    the basic HTML file that will import these files into the web page, as shown in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up the application](img/6034OS_06_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: index-v1.html
  prefs: []
  type: TYPE_NORMAL
- en: This is our initial index web page that will load the JavaScript files onto
    the web page. When this file is fired up via a web browser, both the JavaScript
    libraries have to be loaded and `ready` should be printed onto the console window.
    Now, let's move forward and build our Carousel application. Next in the line of
    requirements is the data file; it will be similar to the `students` JSON feed
    that we have worked with in our previous chapters. Rather than printing them all
    in a single line, we will be loading them into a rotator application.
  prefs: []
  type: TYPE_NORMAL
- en: Building the JSON file for the Carousel application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let us assume that we are an educational institution, and we have a tradition
    of acknowledging the efforts of our students on a monthly basis. We will pick
    the top students from each course for that month, and display their names on our
    notice board rotator application. This notice board rotator application has often
    served as a motivation for other students, who always aim to get themselves onto
    that board. This is the way our educational institution is encouraging the students
    to do well in their courses. The example JSON feed will look like the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Building the JSON file for the Carousel application](img/6034OS_06_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: For our notice board rotator application, we will need basic student information,
    such as the first name, last name, current level of education, and the course
    that they have excelled in.
  prefs: []
  type: TYPE_NORMAL
- en: '![Building the JSON file for the Carousel application](img/6034OS_06_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: index-v2.html
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding screenshot, we are using jQuery's `getJSON()` function to bring
    the JSON feed into the document. When the `index-v2.html` file is loaded into
    the browser, the `students` JSON object array will be loaded onto the console
    window. It is about time to start extracting data from the JSON object, and to
    start embedding them onto the DOM. Let's use the jQuery `each()` function to loop
    over the `students` JSON feed and load the data onto the page.
  prefs: []
  type: TYPE_NORMAL
- en: The `each()` function in jQuery is similar to the `foreach()` iterative loop,
    which is available with the popular server-side languages, and the `for in()`
    iterative loop, which is available in the native JavaScript. The `each()` iterator
    takes the data as its first argument, and passes the `each` item in that data
    iteratively as a single key-value pair into a callback. This callback is a collection
    of a number of scripts that are executed on that key-value pair. In this callback,
    we are building the HTML file that will be appended to a `div` element on the
    DOM. We are using this callback to iteratively build the HTML file for all the
    elements that exist in that `students` JSON object.
  prefs: []
  type: TYPE_NORMAL
- en: '![Building the JSON file for the Carousel application](img/6034OS_06_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: index-v3.html
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `index-v3.html` file, we are using the jQuery `each()` function to iterate
    through the `students` JSON feed, and build the HTML file that will display the
    student information, such as the first name, last name, the year of college, and
    the course that they are enrolled in. We are building the dynamic HTML and assigning
    it to the `html` variable. The data in the `html` variable will be added later
    to the `div` element with an ID of `students`. This is shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Building the JSON file for the Carousel application](img/6034OS_06_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The proceeding screenshot shows the output of the `index-v3.html` body:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Building the JSON file for the Carousel application](img/6034OS_06_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: When the script is loaded into a web browser, the script checks to see if the
    document is ready. Once the document is ready, an AJAX call is made to the server
    to retrieve the JSON data. Once the JSON data is retrieved, each object in the
    `students` JSON object array feed will be passed into the callback that generates
    an HTML `div` element with a class `student`. This repeats until the callback
    is run on the last element, and once the callback is executed on the last element,
    this HTML file will be appended to a `div` element in the HTML with an ID of `students`.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the Carousel application with jQuery Cycle
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have developed a web page that loads all the student data into an HTML file;
    now it is time to build the Carousel application using this data. We will be using
    a jQuery Cycle plugin to rotate the student information on our notice board application.
    The jQuery Cycle is a slideshow plugin that supports various types of transition
    effects on multiple browsers. Effects such as `fade`, `toss`, `wipe`, `zoom`,
    `scroll`, and `shuffle` are available. The plugin also supports the interesting
    pause on hover feature; click triggers and response callbacks are also supported.
  prefs: []
  type: TYPE_NORMAL
- en: For our Carousel example, let's keep it simple and use the basic options, such
    as a fade effect to rotate the students, enabling the pause so that whenever a
    user hovers onto the cycle, the rotator application is paused to display the information
    of the current student. Finally, we will be setting the speed and the timeout
    values that will determine how much time it will take to transition from one student
    to another.
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the Carousel application with jQuery Cycle](img/6034OS_06_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: index-v4.html
  prefs: []
  type: TYPE_NORMAL
- en: 'In the preceding screenshot, we set up the `cycle` plugin, and added the `cycle`
    plugin to the `div` element of `students`. The `cycle` plugin takes a JSON object
    as its parameter, to add the rotator functionality to a `div` element. In this
    JSON object we have added four properties: `fx`, `pause`, `speed`, and `timeout`.
    `fx` determines the effect that is performed on the `html` element. `fade` is
    a prominent effect that is used for the `cycle` plugin. The other popular effects
    that are supported by the jQuery Cycle plugin are shuffle, zoom, turndown, scrollRight,
    and curtainX. The second property we are using is the `pause` property, this determines
    whether the rotation has stopped when the user hovers onto the `rotator` element;
    it takes a true and false value to determine if the rotation can be paused or
    not. We could either supply a Boolean value such as True or False, or pass one
    or zero that signify True and False respectively. The next two properties are
    `speed` and `timeout`; they determine the speed with which the rotation occurs
    and how much time it will take before the next item is displayed. When the web
    page with the updated script is loaded into a web browser, the whole `students`
    object is parsed into a local JavaScript string variable and is appended to the
    DOM, and only the first element in that rotator object is displayed while the
    rest of them are hidden. This functionality is handled behind-the-scenes by the
    `cycle` plugin. The following screenshot displays a Carousel generated from the
    earlier code sample:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the Carousel application with jQuery Cycle](img/6034OS_06_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let us enhance the user experience of this page by adding the earlier and following
    handlers to give the users custom controllers to handle the rotator functionality,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the Carousel application with jQuery Cycle](img/6034OS_06_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: index-v5.html
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `cycle` object, we are adding two new properties called `prev` and `next`.
    The values for the `prev` and `next` properties will be the HTML `id` attributes
    of elements that are on the DOM. The HTML file has to be modified as follows in
    order to handle this change:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the Carousel application with jQuery Cycle](img/6034OS_06_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding screenshot, we have added two anchor element with `id` values
    of `prev` and `next` that are being referenced in the `cycle` object.
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the Carousel application with jQuery Cycle](img/6034OS_06_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The **Prev** and **Next** links that are shown in the preceding screenshot are
    going to handle the rotation of our notice board rotation application. This is
    a quick way of building a Carousel application that is powered by jQuery and JSON.
    This example can used to build more complex Carousel applications that can contain
    images and videos for the photo and video gallery Carousel applications respectively.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter we put our JavaScript, jQuery, and JSON knowledge to work, and
    built up a neat little Carousel notice board rotator application. We went through
    a step-by-step process to ingest the data feed, build a dynamic template on the
    fly from that data feed, append the data feed to a `div` element, and then bind
    the `div` element to the `cycle` plugin. This notice board rotator application
    gives us an insight to bigger Carousel projects that can be developed with very
    little development effort. In the next chapter, we will look at the alternative
    implementations of JSON.
  prefs: []
  type: TYPE_NORMAL
