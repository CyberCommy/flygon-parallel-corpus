- en: Chapter 4. A Traditional Approach to Monitoring Containers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'So far, we have looked at only a few technologies to monitor our containers,
    so in this chapter, we will be looking more at a traditional tool for monitoring
    services. By the end of this chapter, you should know your way around Zabbix and
    the various ways you can monitor your containers. We will cover the following
    topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: How to run a Zabbix Server using containers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to launch a Zabbix Server on a vagrant machine
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to prepare our host system for monitoring containers using the Zabbix agent
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to find your way around the Zabbix web interface
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Zabbix
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: First things first, what is Zabbix and why use it?
  prefs: []
  type: TYPE_NORMAL
- en: 'I have personally been using it since version 1.2; the Zabbix site describes
    it as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '*"With Zabbix, it is possible to gather virtually limitless types of data from
    the network. High-performance real-time monitoring means that tens of thousands
    of servers, virtual machines, and network devices can be monitored simultaneously.
    Along with storing the data, visualization features are available (overviews,
    maps, graphs, screens, and so on), as well as very flexible ways of analyzing
    the data for the purpose of alerting.*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: '*Zabbix offers great performance for data gathering and can be scaled to very
    large environments. Distributed monitoring options are available with the use
    of Zabbix proxies. Zabbix comes with a web-based interface, secure user authentication,
    and a flexible user permission schema. Polling and trapping is supported, with
    native high-performance agents gathering data from virtually any popular operating
    system; agent-less monitoring methods are available as well."*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'At the time I started using Zabbix, the only real viable options were as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Nagios: [https://www.nagios.org/](https://www.nagios.org/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Zabbix: [http://www.zabbix.com/](http://www.zabbix.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Zenoss: [http://www.zenoss.org/](http://www.zenoss.org/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Out of the these three options, Zabbix seemed to be the most straightforward
    one at the time. It was doing enough work to manage the several hundred servers
    I was going to monitor without having to have the extra work of learning the complexities
    of setting up Nagios or Zenoss; after all, given the task the software had, I
    needed to be able to trust that I had set it up correctly.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, while I am going to go into some detail about the setup and
    the basics of using Zabbix, we will only be touching on some of the functionalities,
    which can do a lot more than just monitor your containers. For more information,
    I would recommend the following as a good starting point:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Zabbix blog: [http://blog.zabbix.com](http://blog.zabbix.com)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Zabbix 2.4 manual: [https://www.zabbix.com/documentation/2.4/manual](https://www.zabbix.com/documentation/2.4/manual)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Further reading: [https://www.packtpub.com/all/?search=zabbix](https://www.packtpub.com/all/?search=zabbix)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing Zabbix
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you may have noticed from the links in the previous section, there are a
    lot of moving parts in Zabbix. It leverages several open source technologies,
    and a production-ready installation needs a little more planning than we can go
    into in this chapter. Because of this we are going to look at two ways of installing
    Zabbix quickly rather go into too much detail.
  prefs: []
  type: TYPE_NORMAL
- en: Using containers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: At the time of writing, there are over a hundred Docker images available on
    the Docker Hub ([https://hub.docker.com](https://hub.docker.com)) that mentions
    Zabbix. These range from full server installations to just the various parts,
    such as the Zabbix agent or proxy services.
  prefs: []
  type: TYPE_NORMAL
- en: 'Out of the ones listed, there is one that is recommend by Zabbix itself. So,
    we will look at this one; it can be found at the following URLs:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Docker Hub: [https://hub.docker.com/u/zabbix/](https://hub.docker.com/u/zabbix/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Project page: [https://github.com/zabbix/zabbix-community-docker](https://github.com/zabbix/zabbix-community-docker)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To get the `ZabbixServer` container up and running, we must first launch a
    database container. Let''s start afresh with our vagrant instance by running the
    following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we have a clean environment and it''s time to launch our database container,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This will download the `million12/mariadb` image from [https://hub.docker.com/r/million12/mariadb/](https://hub.docker.com/r/million12/mariadb/)
    and launch a container called `zabbix-db`, running MariaDB 10 ([https://mariadb.org](https://mariadb.org))
    with a user called `zabbix` who has a password `zabbix_password`. We have also
    opened the MariaDB port `3306` up on the container, but as we will be connecting
    to it from a linked container, there is no need to expose that port on the host
    machine.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we have the database container up and running, we now need to launch our
    Zabbix Server container:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This downloads the image, which at the time of writing is over 1 GB so this
    process could take several minutes depending on your connection, and launches
    a container called `zabbix`. It maps the web server (port `80`) and the Zabbix
    Server process (port `10051`) on the host to the container, creates a link to
    our database container, sets up the alias `db`, and injects the database credentials
    as environment variables so that the scripts that launch when the container boots
    can populate the database.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can verify that everything worked as expected by checking the logs on the
    container. To do this, enter `docker logs zabbix`. This will print details of
    what happened when the container launched on screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using containers](../images/00026.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Now, once we have the container up and running, it is time to move to the browser
    for our first taste of the web interface. Go to `http://192.168.33.10/` in your
    browser and you will be greeted by a welcome page; before we can start using Zabbix,
    we need to complete the installation.
  prefs: []
  type: TYPE_NORMAL
- en: On the welcome page, click on **Next** to be taken to the first step. This will
    verify that everything we need to run a Zabbix Server is installed. As we have
    launched it in a container, you should see **OK** next to all of the prerequisites.
    Click on **Next** to move onto the next step.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we need to configure the database connection for the web interface. Here,
    you should have the same details as you did when you launched the container, as
    illustrated in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using containers](../images/00027.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Once you have entered the details, click on **Test connection** and you should
    receive an **OK** message; you will not be able to proceed until this test completes
    successfully. Once you have entered the details and have an **OK** message, click
    on **Next**.
  prefs: []
  type: TYPE_NORMAL
- en: Next up, are the details on the Zabbix Server that the web interface needs to
    connect to; click on **Next** here. Next up, you will receive a summary of the
    installation. To proceed, click on **Next** and you will be get confirmation that
    the `/usr/local/src/zabbix/frontends/php/conf/zabbix.conf.php` file has been created.
    Click on **Finish** to be taken to the login page.
  prefs: []
  type: TYPE_NORMAL
- en: Using vagrant
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'While writing this chapter, I thought a lot about providing another set of
    installation instructions for the Zabbix Server service. While the book is all
    about Monitoring Docker containers, having a service as resource intensive as
    Zabbix running inside a container feels a little counter intuitive. Because of
    this, there is a vagrant machine that uses Puppet to bootstrap a working installation
    of Zabbix Server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: As you may have noticed, there is a lot of output streamed to the terminal,
    so what just happened? First of all, a CentOS 7 vagrant instance was launched
    and then a Puppet agent was installed. Once installed, the installation was handed
    off to Puppet. Using the Zabbix Puppet module by Werner Dijkerman, Zabbix Server
    was installed; for more details on the module, see its Puppet Forge page at [https://forge.puppetlabs.com/wdijkerman/zabbix](https://forge.puppetlabs.com/wdijkerman/zabbix).
  prefs: []
  type: TYPE_NORMAL
- en: Unlike the containerized version of Zabbix Server, there is no additional configuration
    required, so you should be able to access the Zabbix login page at [http://zabbix.media-glass.es/](http://zabbix.media-glass.es/)
    (an IP address of `192.168.33.11` is hardcoded into the configuration).
  prefs: []
  type: TYPE_NORMAL
- en: Preparing our host machine
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For the remainder of this chapter, I will assume that you are using the Zabbix
    Server that is running on its own vagrant instance. This helps to ensure that
    your environment is consistent with the configuration of the Zabbix agent we will
    be looking at.
  prefs: []
  type: TYPE_NORMAL
- en: 'To pass the statistics from our containers to the Zabbix agent, which will
    then in turn expose them to the Zabbix Server, we will be installing using the
    `Zabbix-Docker-Monitoring` Zabbix agent module that has been developed by Jan
    Garaj. For more information on the project, see the following URLs:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The Project page: [https://github.com/monitoringartist/Zabbix-Docker-Monitoring/](https://github.com/monitoringartist/Zabbix-Docker-Monitoring/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Zabbix share page: [https://share.zabbix.com/virtualization/docker-containers-monitoring](https://share.zabbix.com/virtualization/docker-containers-monitoring)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To get the agent and module installed, configured, and running, we need to
    execute the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Install the Zabbix package repository.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Install the Zabbix agent.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Install the prerequisites for the module.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add the Zabbix agent user to the Docker group.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Download the auto-discovery bash script.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Download the precompiled `zabbix_module_docker` binary.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configure the Zabbix agent with the details of our Zabbix Server and also the
    Docker module.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the correct permissions on all the files we have downloaded and created.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start the Zabbix agent.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'While the steps remain the same for both CentOS and Ubuntu, the actions taken
    to do the initial package installation differ slightly. Rather than going through
    the process of showing the commands to install and configure the agent, there
    is a script for each of the host operating systems in the `/monitoring_docker/chapter04/`
    folder. To view the scripts, run the following command from your terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, you have taken a look at the scripts its time to run them, to do this
    type one of the following commands. If you are running CentOS, run this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'For Ubuntu, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'To verify that everything ran as expected, check the Zabbix agent log file
    by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see that the end of the file confirms that the agent has started
    and that the `zabbix_module_docker.so` module has been loaded:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Preparing our host machine](../images/00028.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Before we move onto the Zabbix web interface, let''s launch a few containers
    using the `docker-compose` file from [Chapter 2](part0021_split_000.html#K0RQ2-fcf7b4d102f841bba77b823d677470e0
    "Chapter 2. Using the Built-in Tools"), *Using the Built-in Tools*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: We should now have three web server containers running and a running Zabbix
    agent on the host.
  prefs: []
  type: TYPE_NORMAL
- en: The Zabbix web interface
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Once you have Zabbix installed you can open the Zabbix web interface by going
    to [http://zabbix.media-glass.es/](http://zabbix.media-glass.es/) in your browser,
    this link will only work when you have the Zabbix vagrant box up and running,
    if you don't have it running the page will time out. You should be presented with
    a login screen. Enter the default username and password here, which is `Admin`
    and `zabbix` (note that the username has a capital *A*), to login.
  prefs: []
  type: TYPE_NORMAL
- en: Once logged in, you will need to add the host templates. These are preconfigured
    environment settings and will add some context around the statistics that the
    Zabbix agent is sending to the server, along with the auto-discovery of containers.
  prefs: []
  type: TYPE_NORMAL
- en: To add the templates, go to the **Configuration** tab in the top menu and select
    **Template**; this will bring up a list of all the templates that are currently
    installed. Click on the **Import** button in the header and upload a copy of the
    two template files you can find in the `~/Documents/Projects/monitoring-docker/chapter04/template`
    folder on your main machine; there is no need to change the rules when uploading
    the templates.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once both templates have been successfully imported, it is time to add our
    Docker host. Again, go to the **Configuration** tab, but this time select **Hosts**.
    Here, you need to click on **Create host**. Then, enter the following information
    in the **Host** tab:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Zabbix web interface](../images/00029.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Here are the details of the preceding information:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Host name**: This is the host name of our Docker host'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Visible name**: Here, the name server will appear as in Zabbix'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Groups**: Which group within Zabbix the server you would like the Docker
    host to be part of'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Agent Interfaces**: This is the IP address or the DNS name of our Docker
    host'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Enabled**: This should be ticked'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Before clicking on **Add**, you should click on the **Templates** tab and link
    the following two templates to the host:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Template App Docker**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Template OS Linux**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here is the screenshot of the host:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Zabbix web interface](../images/00030.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you have added the two templates, click on **Add** to configure and enable
    the host. To verify that the host has been added correctly, you should go to the
    **Monitoring** tab and then **Latest data**. From here, click on **Show filter**
    and enter the host machine in the **Hosts** box. You should then start to see
    items appearing:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Zabbix web interface](../images/00031.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Don't worry if you don't see the **Docker** section immediately, by default,
    Zabbix will attempt to auto-discover new containers every five minutes.
  prefs: []
  type: TYPE_NORMAL
- en: Docker metrics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For each container, Zabbix discovers the following metrics that will be recorded:'
  prefs: []
  type: TYPE_NORMAL
- en: Container (your Containers name) is running
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CPU system time
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CPU user time
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Used cache memory
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Used RSS memory
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Used swap
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Apart from "Used swap", these are the same metrics recorded by cAdvisor.
  prefs: []
  type: TYPE_NORMAL
- en: Create custom graphs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can access a time-based graph for any of the metrics collected by Zabbix;
    you can also create your own custom graphs. In the following graph, I have created
    a graph that plots all the CPU System stats from the three web containers we launched
    earlier in the chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Create custom graphs](../images/00032.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, I performed a few tests using ApacheBench to make the graph
    a little more interesting.
  prefs: []
  type: TYPE_NORMAL
- en: For more information on how to create custom graphs, see the graphs section
    of the documentation site at [https://www.zabbix.com/documentation/2.4/manual/config/visualisation/graphs](https://www.zabbix.com/documentation/2.4/manual/config/visualisation/graphs).
  prefs: []
  type: TYPE_NORMAL
- en: Compare containers to your host machine
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As we added the Linux OS template and the Docker template to the host and we
    are also recording quite a lot of information about the system, here we can tell
    the effect the testing with ApacheBench had on the overall processor load:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Compare containers to your host machine](../images/00033.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'We can drill down further to get information on the overall utilization:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Compare containers to your host machine](../images/00034.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Triggers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Another feature of Zabbix is triggers: you can define actions to happen when
    a metric meets a certain set of criteria. In the following example, Zabbix has
    been configured with a trigger called **Container Down**; this changes the status
    of the monitored item to **Problem** with a severity of **Disaster**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Triggers](../images/00035.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'This change in status then triggers an e-mail to inform that, for some reason
    the container is no longer up and running:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Triggers](../images/00036.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: This could have also triggered other tasks, such as running a custom script,
    sending an instant message via Jabber, or even triggering a third-party service
    such as PagerDuty ([https://www.pagerduty.com](https://www.pagerduty.com)) or
    Slack ([https://slack.com](https://slack.com)).
  prefs: []
  type: TYPE_NORMAL
- en: 'For more information on Triggers, Events, and Notifications, see the following
    sections of the documentation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.zabbix.com/documentation/2.4/manual/config/triggers](https://www.zabbix.com/documentation/2.4/manual/config/triggers)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://www.zabbix.com/documentation/2.4/manual/config/events](https://www.zabbix.com/documentation/2.4/manual/config/events)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://www.zabbix.com/documentation/2.4/manual/config/notifications](https://www.zabbix.com/documentation/2.4/manual/config/notifications)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So, how does this traditional approach to monitoring fit into a container's
    lifecycle?
  prefs: []
  type: TYPE_NORMAL
- en: 'Going back to the Pets versus Cattle analogy, at first glance, Zabbix seems
    to be geared more towards Pets: its feature set is best suited to monitoring services
    that are static over a long period of time. This means that the same approach
    to monitoring a pet can also be applied to long-running processes running within
    your containers.'
  prefs: []
  type: TYPE_NORMAL
- en: Zabbix is also the perfect option for monitoring mixed environments. Maybe you
    have several database servers that are not running as containers, but you have
    several hosts running Docker, and have equipment such as switches and SANs that
    you need to monitor. Zabbix can provide you with a single pane of glass showing
    you metrics for all your environments, along with being able to alert you to problems.
  prefs: []
  type: TYPE_NORMAL
- en: So far, we have looked at using APIs and metrics provided by Docker and LXC,
    but what about other metrics can we use? In the next chapter, we will look at
    a tool that hooks straight into the host machine's kernel to gather information
    on your containers.
  prefs: []
  type: TYPE_NORMAL
