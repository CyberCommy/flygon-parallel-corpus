- en: Styling Our Chat Page as a Web App
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, you learned about Socket.io and WebSockets, which enable
    two-way communication between the server and the client. In this chapter, we'll
    continue our discussion on styling our chat page and make it look more like a
    real web app. We'll look into timestamps and formatting time and date using Moment
    methods. We'll create and render templates for `newMessage` and `newLocation`
    messages. We'll also look into auto scrolling, making the chat a little less annoying.
  prefs: []
  type: TYPE_NORMAL
- en: Styling the chat page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section you're going to get some styles in place so our app looks a
    little less like an unstyled HTML page, and a little more like a real web app.
    Now in the following screenshot, on the left we have People panel, we're not going
    to be wiring that up yet although we are giving it a place inside of our page.
    Eventually this is going to store a list of all the people connected to the individual
    chatroom, that's going to come a bit later.
  prefs: []
  type: TYPE_NORMAL
- en: 'Over right side, in the main area is going to be the messages panel:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9a3f33b5-d119-46c8-8f60-fa0e1285ac9c.png)'
  prefs: []
  type: TYPE_IMG
- en: Now the individual messages are still unstyled, that's going to come later,
    but we do have a place to put all of that stuff. We have our footer, this includes
    our form for sending a message, the textbox, and the button, and it also includes
    our Send Location button.
  prefs: []
  type: TYPE_NORMAL
- en: Now to get all of this done we're going to add a CSS template that I've created
    for this project. We're also going to be adding some classes to our HTML; this
    is going to let us apply the various styles. Finally we'll be making a few small
    tweaks to our JavaScript to improve the user experience. Let's go ahead and dive
    in.
  prefs: []
  type: TYPE_NORMAL
- en: Storing the template styles
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first thing we're going to do is make a new folder and a new file to store
    our styles. This is going to be the template styles we'll be grabbing in just
    a moment, then we're going to go ahead and load it into `index.html` so those
    styles are used when we render the chat app.
  prefs: []
  type: TYPE_NORMAL
- en: Now the first thing we're going to do is create a new folder inside of `public`,
    and call this folder `css`. We're going to add just one file to it, a new file
    called `styles.css`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now before we go off and grab any styles, let''s go ahead and import this file
    into our application, and in order to test and make sure that it''s working what
    we''re going to do is write a very simple selector, we''re going to select everything
    using the `*`, then inside of curly braces we''re going to add a style, setting
    the `color` for everything equal to `red`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Go ahead and make your file just like this one, we''re going to save it and
    then we''ll import it over inside of `index.html`. Right at the bottom of the
    `head` tag following our `meta` tag, we''re going to add a `link` tag, this is
    going to let us link a style sheet. We have to provide two attributes to get that
    done, first off we have to tell HTML exactly what we''re linking to by specifying
    the `rel`, or relation attribute. In this case we''re trying to link a `style
    sheet`, so we''re going to provide that as the value. Now the next thing we need
    to do is provide the `href` attribute. This is similar to the `src` attribute
    for the `script` tag, it''s the path to the file you want to link. In this case
    we have that at `/css` and we just created the file `style.css`, `/styles.css`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'With this in place we can save `index.html` and give our page a refresh over
    inside of the browser or load it up for the very first time, and what we see is
    a hideously ugly page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6d31f100-5cd6-410c-bb6c-8d752975e20a.png)'
  prefs: []
  type: TYPE_IMG
- en: We've managed to make it even uglier than it was previously, but this is great
    because it means our style sheet file is getting imported correctly.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now in order to grab the actual template we''re going to be using for the chat
    app, we''re going to visit a URL, [http://links.mead.io/chat-css](http://links.mead.io/chat-css).
    This is just a bitly link that''s going to redirect you over to a Gist, and here
    we have two options, we can grab either the minified style template or the unminified
    one:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4306879d-b4db-4cc9-ad71-c78af27bcbeb.png)'
  prefs: []
  type: TYPE_IMG
- en: I'm going to go ahead and grab minified one by either highlighting it or clicking
    Raw link which brings us to the file. We're going to grab the entire contents
    we see there, head over into Atom and paste it inside of our `styles.css` file,
    removing obviously the previous selector.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have this in place we can give our page a refresh, although we''re
    not really going to see much improvement. Over inside of `localhost:3000` I''ll
    give the browser a refresh and clearly things are different:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3c2a1846-aa3b-4702-907f-b8890f1494ae.png)'
  prefs: []
  type: TYPE_IMG
- en: That is because we need to apply some classes to our HTML in order to get everything
    to work correctly.
  prefs: []
  type: TYPE_NORMAL
- en: Tweaking the structure for alignment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We''re going to need to tweak the structure, adding a few container elements
    to help with alignment. Over inside of Atom we can get this done in just a few
    moments. This template was built around a few key classes. The first one needs
    to get applied to the `body` tag by setting the `class` attribute equal to, inside
    of quotes, `chat`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This tells the style sheet load these styles for this chat page, and we're going
    to go ahead and remove `Welcome to the chat app`, this is no longer necessary.
    Now the next thing we're going to do is create a `div` tag and this `div` is going
    to house that `People` list we saw on the left-hand side. It's going to be empty
    for the moment but that's fine we can still go ahead and create it.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''re going to make `div` and we''re going to give this `div`&nbsp;class,
    and that `class` is going to get set equal to the following, `chat__sidebar`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This is a naming convention used in some style sheet templates, it's really
    a matter of preference, you could call this whatever you want when you create
    the style sheet, I happen to call it `chat__sidebar`. It's a sub-element inside
    of the greater chat app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now inside the `div` tag, we''re going to add a little title using the `h3`
    tag, we''re going to give this a title of `People`, or whatever you want to call
    that sidebar list, and we''re also going to provide a `div` which will eventually
    house the individual users, although as I mentioned we''re not going to be wiring
    that up yet. Now we can go ahead and give this an `id` setting it equal to `users`
    so we can target it a bit later. And that''s all we need for the chat sidebar
    at the moment:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Now the next thing that we're going to do is create a `div` tag, and this `div`
    is going to house that main area which means it's going to contain not only our
    chat messages, but also the little form at the bottom, everything on the right-hand
    side of the sidebar.
  prefs: []
  type: TYPE_NORMAL
- en: 'This also is going to require a custom class for some styles, this one is called
    `chat__ main`, and inside of here we''re going to add not only our unordered list,
    but also our `form` and `button`. Let''s go ahead and take all of our current
    markup, the unordered list, down to the Send Location button, cut it out and paste
    it inside of `chat__main`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we''re not quite done yet there are a few more things to tweak. First up
    we have to add a class to our ordered list, we''ll set `class` equal to `chat__messages`,
    this is going to provide the necessary styles, and the last `div` we need to create
    is going to be for that footer. This is going to be the gray bar at the bottom
    that contains both your `form` as well as the `Send Location` button. We''re going
    to make `div` which is going to help with alignment, and we''re going to add the
    `form` and the `button` tag inside of it by cutting it out and pasting it inside
    `div` of ordered list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we are going to need a class here too as you might have guessed, setting
    the `class` attribute equal to the string `chat__footer`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we have all of our classes in place and we can head over to the browser
    and see what we get when we give the page a refresh:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/53cf8f51-0996-4d47-bb0a-6107bcca7226.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We have our styled chat application and we can still do whatever we were able
    to do before. I can send off a message, `Hey this should still work`, hit *enter*
    and `Hey this should still work` shows up to the screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/62ddfd76-dcec-4f81-b919-975b667317d1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The same thing is true for Send Location, I can send off my location, this
    is going to send it to the server, it''s going to send it to all the clients,
    and I can click the My current location link and the location is going to show
    up inside of Google Maps. We''ve maintained all of the old functionality while
    adding a nice set of styles:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/789c941c-cddd-4baf-b710-d5bd55b0ff1b.png)'
  prefs: []
  type: TYPE_IMG
- en: Making user experience improvements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now for the second half of this section I want to make some user experience
    improvements to the form next.
  prefs: []
  type: TYPE_NORMAL
- en: One improvement we're going to make is wiping the text value once a message
    was successfully sent. We're also going to do something similar with Send Location.
    As you might have noticed it can take up to a second or two for the Send Location
    geolocation call to actually complete, we're going to set this button to be disabled
    so someone doesn't spam it wondering what's happened. We're also going to update
    the text to say `Sending Location` so someone knows that something is happening
    in the background.
  prefs: []
  type: TYPE_NORMAL
- en: In order to get both those things done all we need to do is modify a few lines
    over inside of `index.js`. Near the bottom of the file we have our two jQuery
    event listeners, both of these are going to get changed.
  prefs: []
  type: TYPE_NORMAL
- en: Changing the form submit listener
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now the first thing we''re going to change is going to be the form submit listener.
    In `socket.emit` we fetch the value from the field, and that''s what we pass along.
    What we want to do next inside of the acknowledgment callback is clear the value.
    Once the request has been received by the server there''s no reason to keep it
    around, so what we can do is add the same `jQuery` selector, targeting the field
    where the `name` attribute equals `message`. We''re going to go ahead and clear
    its value by calling `val` once again, but instead of getting a value by providing
    no arguments, we''re going to set the value to an empty string by passing in an
    empty string as the first argument:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: You could set the value to anything you like, but in this case we just want
    to clear it so we're going to use the following method call.
  prefs: []
  type: TYPE_NORMAL
- en: 'We have the same selector twice to speed things up, we''re going to make a
    variable, we''ll call that variable `messageTextbox`, and then we can go ahead
    and set it equal to the selector we just created, and now we can refer to `messageTextbox`
    anywhere we need access to that input. We can reference it, `messageTextbox` and
    next, `messageTextbox` like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Now the listener for `createMessage`, which is over inside of `server.js`,
    and we do indeed call the callback with a string. For now, we''re going to just
    remove that bogus value passing in zero arguments, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'This means that the acknowledgement function will still get called but we don''t
    actually need any data we just need to know when the server responded. Now that
    we have this in place we can go ahead and refresh things over inside `localhost:3000`,
    type a message, `Here is a message` and hit the *enter* key and we get the value
    cleared and it was indeed sent:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bddd95fd-11ce-469d-b628-ccda5ee99506.png)'
  prefs: []
  type: TYPE_IMG
- en: The same thing is going to hold true if I type in a message, `Andrew` and click
    the Send button.
  prefs: []
  type: TYPE_NORMAL
- en: Updating the input tag
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now one thing we're going to do real quick is update the `input` tag for the
    textbox. If I refresh the page we're currently not brought right into the message
    field, it would be really nice to do that. It would also be really nice to turn
    off autocomplete, as you can see autocomplete isn't really a useful feature and
    the values inside of it are usually trash.
  prefs: []
  type: TYPE_NORMAL
- en: 'So what we''re going to do over inside of Atom is add two attributes to customize
    the input. The first one is going to be `autofocus` which doesn''t require a value,
    `autofocus` is going to autofocus on the input when the HTML gets rendered, and
    the second one we''re going to add is `autocomplete`, and we''re going to set
    that equal to the string `off`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: With this in place we can save `index.html`, head back over to Chrome, refresh
    the page and test things out. I'm going to type in `test`, I have no autocomplete
    which is good we turned that off, and if I click the Send button I am indeed still
    sending the message. I was also brought right into the textbox when I reloaded
    the page, I didn't need to do anything in order to start typing.
  prefs: []
  type: TYPE_NORMAL
- en: Customizing the Send Location
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The next thing we're going to do is customize that Send Location button using
    a bit more jQuery. Now we're new to jQuery and this isn't really a jQuery course.
    The goal here is to change the button text and disable it while the process is
    occurring. When the process is complete, meaning that the location was either
    sent or not sent, we can return the button to its normal state, but while the
    geolocation call is happening we don't want someone spamming away.
  prefs: []
  type: TYPE_NORMAL
- en: To get that done we're going to make some tweaks to the final on listener we
    have inside of `index.js`, just next our on submit listener we have our on click
    listener. Here we're going to need to make some changes to the button, the `locationButton`
    variable we have defined. We're going to set an attribute that's going to disable
    the button.
  prefs: []
  type: TYPE_NORMAL
- en: To get that done we will reference the selector, `locationButton`, and we're
    going to call a jQuery method.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we''re only going to disable it after we''ve confirmed they even have support
    for it, if they don''t have support for the feature there''s no reason to go ahead
    and disable it. Here `locationButton.attr` is going to let us set an attribute,
    we''re going to set the `disabled` attribute equal to the value `disabled`. Now
    this disabled needs to be in quotes as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we have disabled the button we can actually test this out, we never
    undisable it so it''s going to be broken after clicking it once, but we can confirm
    that this line works. Over in the browser I''m going to give things a refresh,
    click Send Location and you can see right away that the button it does get disabled:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c72cf1b4-68f0-40ff-94b9-981ea76ab097.png)'
  prefs: []
  type: TYPE_IMG
- en: Now it is going to send off the location once but if I try to click it again
    the button is disabled and it's never going to refire the `click` event. The goal
    here is to only disable it while the process is actually occurring, once it's
    sent like it is here we want to re-enable it so someone can send an updated location.
  prefs: []
  type: TYPE_NORMAL
- en: 'To get that done over inside of Atom we''re going to add a line of jQuery into
    both the success handler and the error handler. If things go well we''re going
    to reference `locationButton` and we''re going to remove the disabled attribute
    by using `removeAttr`. This takes just one argument, the name of the attribute,
    in this case we have that, it''s a string, `disabled`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'This is going to remove the `disabled` attribute we defined previously re-enabling
    the button. And we can do the exact same thing, literally copying and pasting
    the line next inside `function`. If for some reason we''re not able to fetch the
    location, maybe the user denied the request for `geolocation`, we still want to
    disable that button so they can try again:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Now that we have this set up we can test out that code by refreshing the browser
    and trying to send off our location. We should see the button is disabled for
    a little bit and then it gets re-enabled. We can click it to prove that it is
    working as expected, and the button was re-enabled, which means we can go ahead
    and click it at a later time sending our location once again.
  prefs: []
  type: TYPE_NORMAL
- en: Updating the button text
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now the last thing we're going to do is update the button text while the process
    is occurring. To get that done over inside of Atom we're going to use that `text`
    method we've used in the past.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `locationButton.attr` line, we''re going to set the `text` property
    equal to, by calling text, `Sending location...`. Now, in the `index.js` file,
    the real button text is `Send Location`, I''m going to go ahead and lowercase
    `location` that to keep things uniform:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we have this set up we are updating the text while the process occurs,
    the only thing left to do is tweak it back to its original value next by setting
    `text` equal to the string `Send location`, and we''re going to do the exact same
    thing in error handler, calling `text` passing in the string `Send location`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Now we can go ahead and test that this is working as expected, both of these
    lines (in success as well as error handler) are identical, regardless of whether
    it succeeds or fails we're going to do the same thing.
  prefs: []
  type: TYPE_NORMAL
- en: 'Over inside of Chrome I''m going to give my page a refresh one more time, we''re
    going to click that Send Location button and you can see the button is disabled
    and the text was changed, Sending location... shows up:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5a9f7e91-19f8-4de8-863f-b3c48283d145.png)'
  prefs: []
  type: TYPE_IMG
- en: And as soon as the process is complete and the location was actually sent, the
    button returns to its default state.
  prefs: []
  type: TYPE_NORMAL
- en: With this in place we now have a much nicer user experience than we had previously.
    Not only do we have a nice set of styles, we also have a better UI for our form
    and the Send location button. That is where we are going to stop for this section.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s go ahead and make a quick commit by shutting down the server, running
    `git status`, running `git add .` to add all of those files, and finally we''re
    going to go ahead and run `git commit` with the `-m` flag providing a message,
    `Add css for chat page`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: We can go ahead and push this up to GitHub using `git push` and I'm going to
    avoid deploying for Heroku as of now, although you are welcome to deploy and test
    your application live.
  prefs: []
  type: TYPE_NORMAL
- en: Timestamps and formatting with Moment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Throughout the course we have used timestamps quite a bit, we've generated them
    in the to-do app and we also have them generated for all of our messages in the
    chat app, but we've never gone as far as formatting them to something human-readable.
    That's going to be the topic in this section, and in the next section we'll put
    that into action.
  prefs: []
  type: TYPE_NORMAL
- en: By the end of the next section we'll have a formatted message area with the
    name, timestamp and message, and we'll have some better styles for it as well.
    Now in this section, it's going to be all about time and timestamp, we're not
    going to make any changes to the frontend of our app, we're simply going to learn
    how time works inside of Node.
  prefs: []
  type: TYPE_NORMAL
- en: Timestamps in Node
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To explore this we're going to create a new `playground` file, over inside of
    Atom we're going to make a `playground` folder to store this file, and inside
    of the `playground` folder we can make a new file calling it `time.js`. In here
    it will play around with time, and we'll take what we learn here into the frontend
    of the application in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: 'We are no strangers to timestamps, we know they''re nothing more than just
    integers whether positive or negative, something like `781` is a perfectly valid
    timestamp, so is something like minus a couple of billion or whatever any number
    happens to be, all valid, even `0` is a perfectly valid timestamp. Now all of
    these numbers, they''re all relative to a certain moment in history referred to
    as the Unix epoch, which is January 1,&nbsp;`1970` at midnight 0 hours 0 minutes
    and 0 seconds am. This is stored in UTC which means it''s timezone independent:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Now my time stamp `0` actually represents this moment in history perfectly,
    and positive numbers like 1000 head into the future, while negative numbers like
    -1000 head into the past. -1000 as a timestamp would represent December 31,&nbsp;1969
    at 11:59 and 59 seconds, we've gone one second into the past from January 1, `1970`.
  prefs: []
  type: TYPE_NORMAL
- en: Now these timestamps inside of JavaScript, they're stored in milliseconds since
    the Unix epoch inside of regular Unix timestamps, they're actually stored in seconds.
    Since we are using JavaScript in this course, we will always be using milliseconds
    as our timestamp values, which means at a timestamp like this, 1000, represents
    one second into January 1^(st), since there's 1000 milliseconds in a second.
  prefs: []
  type: TYPE_NORMAL
- en: A value like 10000 would be ten seconds into this day and so on and so forth.
    Now the problem for us was never getting the timestamp, getting the timestamp
    was really easy, all we had to do was call `new Date` calling its `getTime` method.
    Things are going to get a lot harder though and we want to format a human-readable
    value like the one we have earlier.
  prefs: []
  type: TYPE_NORMAL
- en: We're going to want to print something to the screen inside of our web app that's
    not just the timestamp, we're going to want to print something like maybe five
    minutes ago, letting a user know the message was sent five minutes ago, or maybe
    you want to print the actual date with the month, day, hour, minute and A.M or
    P.M value. Regardless of what you want to print we are going to need to talk a
    bit about formatting, and this is where the default `Date` object falls short.
  prefs: []
  type: TYPE_NORMAL
- en: Yes there are methods that allow you to get the specific values out of a date,
    like the year, the month, or the day of month, but they are very limited and it
    is a huge burden to customize.
  prefs: []
  type: TYPE_NORMAL
- en: The Date object
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To talk about exactly the problem let''s go ahead and pull up the documentation
    for date by Googling `mdn date`, this is going to bring us to the Mozilla Developer
    Network documentation page for *Date*, which is a really great set of documentation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a5e48e45-f523-4562-8de3-e78d4b060e5c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'On this page, we have access to all of the methods available, these are all
    methods kind of like `getTime` that return something specific about the date:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c353a7e9-2a2a-41e1-862f-cb4f97496086.png)'
  prefs: []
  type: TYPE_IMG
- en: For example, as shown in the previous screenshot, we have a `getDate` method
    that returns the day of the month, a value from 1 to 31\. We have something like
    `getMinutes`, which returns the current minutes for the timestamp. All of these
    exist inside of `Date`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now the problem is that these are really unflexible. For example, inside Atom
    we have this little date, `Jan 1st 1970 00:00:10 am`. It''s a shorthand version
    for January. Now we can get the actual month to show you how we''ll create a variable
    called `date`. We''ll go ahead and create `new Date` and then we''re going to
    go ahead and call a method. I''m going to use `console.log` to print the value
    to the screen, and we''re going to call `date.getMonth`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'The `getMonth` method, as defined over inside of the documentation, is going
    to return a 0-based month value from 0 to 11, where 0 is January and 11 is December.
    Over inside the Terminal, I''m going to kick off our app using `nodemon`, since
    we''re going to be restarting it quite a bit. Nodemon is in the `playground` folder
    not the `server` folder, and the file itself is called `time.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Once it''s up and running we see we get `2` back which is expected:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/701c0e5c-0ba2-4507-8477-803d6720a833.png)'
  prefs: []
  type: TYPE_IMG
- en: It's currently March 25th 2018 and a `0` index value for March would be `2`,
    even though you commonly think of it as 3.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now the previous result is fine. We have the number 2 to represent the month,
    but getting an actual string Jan or January is going to be much more difficult.
    There is no built-in way to get this value. This means if you do want to get that
    value you''re going to have to create an array, maybe you call the array `months`,
    and you store all of the values like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: This is going to be fine and it might not seem like that big of a deal for month,
    but things get just as confusing for the day of the month, like the `1st` we have.
    All we can really get back is the number 1\. Actually formatting it to 1st, 2nd,
    or 3rd is going to be much more difficult. There just are not a good set of methods
    for formatting your date.
  prefs: []
  type: TYPE_NORMAL
- en: Things get even more complex when you want to have a relative time string, something
    like three minutes ago. It would be nice to print that inside the web app alongside
    the message, printing the actual month, the day and the year is not particularly
    useful. It would be cool if we could say hey this message was sent three hours
    ago, three minutes ago, or three years ago like a lot of chat applications do.
  prefs: []
  type: TYPE_NORMAL
- en: Using Moment for timestamps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now when you get into formatting like this, your first instinct is usually to
    create some utility methods that help with formatting a date. But there is no
    need to do that because what we're going to look at in this section is a fantastic
    time library called **Moment**. Moment is pretty much the only library of its
    kind. It is universally accepted as the go-to library for working with time and
    JavaScript, I've never worked on a Node or frontend project that didn't have Moment
    used, it is truly essential when you're working with dates in any capacity.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now in order to show off why Moment is so great we are going to first install
    it over inside of the Terminal. Then we''re going to play around with all of its
    capabilities, it has a lot. We can install it by running `npm i`, I''m going to
    go ahead and use the current version `moment@` version `2.21.0`, and I will also
    use the `--save` flag to add it as a dependency, a dependency that we''re going
    to need on Heroku as well as locally:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Now once it's installed I can use `clear` to clear the Terminal output, and
    we can go ahead and restart `nodemon`. Over inside the `playground` folder it's
    time to require Moment and take a look at exactly what it can do for us.
  prefs: []
  type: TYPE_NORMAL
- en: 'To kick things off, let''s go ahead and try to fix the problem we tried to
    solve with date. We want to print the shorthand version of a month like Jan, Feb,
    and so on. The first step is going to be to comment the previous code out and
    load in Moment previous at the top, requiring it. I''m going to make a variable
    called `moment` and `require` it by requiring the `moment` library:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Then next to this code, we''ll kick things off by making a new moment. Now
    just like we create a new date to get a specific date object, we''re going to
    do the same thing with moment. I''m going to call this variable `date` and we''re
    going to set it equal to a call to `moment`, the function we loaded in previous,
    without any arguments:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'This creates a new moment object that represents the current point in time.
    From here we can go ahead and try to format things using its really useful format
    method. The format method is one of the main reasons I just love Moment, it makes
    it dead simple to print whatever you want as a string. Now in this case, we have
    access to our `date` and we''re going to go ahead and call that method I just
    talked about, `format`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Before we get into what we pass to format let''s go ahead and run it just like
    this. When we do that over inside the Terminal,&nbsp;`nodemon` is going to go
    ahead and restart itself, and right here we have our formatted date:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/09dfe202-8b94-4d2e-9148-910bc280f381.png)'
  prefs: []
  type: TYPE_IMG
- en: We have the year, the month, the day, and other values. It's not still really
    user-friendly but it is a step in the right direction. The real power of the `format`
    method comes when you pass a string inside of it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now what we pass inside the format method is patterns, which means that we
    have access to a specific set of values we can use to output certain things. We''re
    going to explore all of the patterns available to you in just a second. For now,
    let''s go ahead and just use one; it''s the triple uppercase `M` pattern:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'When Moment sees this pattern inside, format it''s going to go ahead and grab
    the shorthand version of the month, which means if I save this file and restart
    it over inside the Terminal once again. We should now see the shorthand version
    for the current month September, which would be `Mar`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7f448c25-b528-4178-a784-c7e91e0edb68.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Right here we have `Sep` just as expected and we were able to do that super
    simply by using the format method. Now format returns a string that has just the
    things you specify. Here we only specified that we want the shorthand version
    of the month, so all we got back was the shorthand version of the month. We can
    also add on another pattern, four Ys, which prints out the full year; in the current
    case, it would print out 2016 in numbers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'I''m going to go ahead and save time again and right here we get `Mar 2018`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f4841c9e-078c-442a-aabb-c73d488643ad.png)'
  prefs: []
  type: TYPE_IMG
- en: Now Moment has a fantastic set of documentation so you can use whatever patterns
    you like.
  prefs: []
  type: TYPE_NORMAL
- en: The Moment documentation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Over inside the browser we can pull it up by going to [momentjs.com](http://momentjs.com/).
    The documentation for Moment is fantastic. It''s available on the Docs page, and
    to get started in order to figure out how to use format we''re going to go to
    the Display section:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/42fd1a1c-2659-4e82-8f78-0fe72fb74169.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The first item in Display is format. There are a few examples about how to
    use format, but the really useful information is what we have here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/391118ab-b11c-4efb-894c-a3aa20754a99.png)'
  prefs: []
  type: TYPE_IMG
- en: Here we have all the tokens that we can put inside the string to format our
    day as we like. Up previous you can see you can use as many of these tokens as
    you like to create really complex date outputs. Now we already explored two. We
    explored `MMM`, which is defined right under the Month header, as you can see
    there are five different ways to represent the month.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `YYYY` pattern which we used for a year is also defined here. There are
    three ways to use year. We just explored one of them. And there are sections for
    everything, year, day of week, day of month, AM/PM, hour, minute, second, all
    of those are defined, and all of them can be put inside a format just like we
    did for the current values:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/aabd1d7f-6ccc-40dc-bc81-02384046a1c7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now in order to explore this just a little more, let''s head back into Atom
    and take advantage of some of these. What we''re going to try to do is print the
    date like this: `Jan 1st 1970`, the shorthand month and the year which we already
    have, but now we also need the day of the month formatted like 1st, 2nd, 3rd,
    as opposed to 1, 2, 3.'
  prefs: []
  type: TYPE_NORMAL
- en: Formatting date using Moment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to do that what I would do if I had not used Moment before is I would
    look in the docs for the Day of Month section, and I look at the available options.
    I have the D pattern that prints 1 through 31, Do&nbsp;that prints what we want,
    1st, 2nd, 3rd, so on and so forth, and DD that prints the number with a 0 in front
    of it for the values less than 10.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now in this case we want to use Do pattern so all we have to do is type it
    over inside format. I''m going to open up the Terminal and Atom so we can see
    it refresh in the background, and we''re going to type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Saving the file, when it starts, we get `March 25th 2018`, which is indeed
    correct:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/778ba947-0c63-4da7-bbd9-6b78057a4fb2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now we can also add other characters like a comma:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'A comma is not part of the patterns that format expects so it''s simply going
    to pass it through, which means the comma gets shown just as we typed it in `March
    25th, 2018`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ebb449d2-2791-4690-ae46-ab4b89d4df45.png)'
  prefs: []
  type: TYPE_IMG
- en: Using format in this way gives us a lot of flexibility as to how we want to
    print the date. Now format is just one of the many methods. There are a ton of
    methods on Moment for doing just about anything, although I find I use pretty
    much the same six in most of my projects. There really isn't a lot of need for
    most of them although they do exist because they are useful in certain situations.
  prefs: []
  type: TYPE_NORMAL
- en: The Manipulate section in Moment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To take a quick peek at some other things Moment can do, let''s head back into
    the docs and go to the Manipulate section:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1f543e15-164e-4eb2-b000-386e09066ace.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The first two methods defined under Manipulate are `add` and `subtract`. This
    lets you easily add and subtract time. We can call `add` adding seven days and
    we can call `subtract` subtracting seven months as shown in this example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f6c2f71b-2557-4069-957e-110252ce734d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To this example, you can get a quick idea about what you can add and subtract,
    years, quarters, months, weeks, pretty much any unit of time can be added or subtracted:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8f677abb-6bc9-4411-bd7d-a1e66db606d1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now to take a look at what exactly that does to the timestamp, we can go ahead
    and add and subtract some values. I''m going to call `date.add` and we''re going
    to go ahead and add a year by putting `1` in as the value and `year` in as the
    unit:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Now it doesn''t matter if you use the single or plural version, both are going
    to work the same. Here you can see we get `2019` in the Terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bbb1d15e-0df1-44ba-a8b4-382c79e6d877.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If I change it to year singular, I also get that same value. We can add as
    many years as we like, I''m going to go ahead and add `100` years:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'And now we''re at `2118`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/817d6368-31ce-4b36-a887-1014350bd131.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The same thing is true with `subtract`. We can chain on the call or we can
    add it as a separate statement. I''m going to subtract just like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'And we are currently in September, and when we subtract 9 months we go back
    to June:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1117f12c-1fa8-4385-ae25-7eecc14f2671.png)'
  prefs: []
  type: TYPE_IMG
- en: Now you notice we went from `2118`&nbsp;to `2117`&nbsp;because subtracting those
    9 months required us to change years. Moment is really great at handling just
    about anything you throw at it. Now we're going to be to play around with format
    a little more. I'm going add an output I would like and we'll need to figure out
    which patterns to use over inside of the documentation to get that output.
  prefs: []
  type: TYPE_NORMAL
- en: Now the current time at the writing, this is 10:35, and it is in the am, so
    I have a lowercase am. Your goal is to print a format like this. Now obviously
    if it's 12:15 when you run the code you're going to see 12:15 as opposed to 10:35;
    it's just the format that matters, the actual values aren't that important. Now
    as you'll see when you try to print hours and minutes, you're going to have a
    lot of options. For both of them you're going to have a padded version like 01
    or an unpadded version like 1.
  prefs: []
  type: TYPE_NORMAL
- en: I want you to use the padded version for minutes and the unpadded version for
    hours, which would be 6, like this, and 01\. If you padded the hour it looks kind
    of weird, and if you don't pad the minute it looks just terrible. So we would
    want to print something like this if it happened to be 6:01 am. Now for hour,
    you're also going to have the option to do either 1 to 12 or 1 to 24, I usually
    use a 12-hour clock so I'm going to do that using am.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we start, I am going to comment out the previous code, I would like
    you to write everything from scratch. I am going to make a new variable `date`
    by calling `moment` with no arguments, and we''re also going to go ahead and call
    format inside `console.log` so we can print that formatted value to the screen,
    `date.format`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside the quotes, we''re going to provide our pattern and start with the unpadded
    hour and the padded minute. We can grab both of those patterns by heading over
    to the docs, going back to Display, and taking a peek. If we scroll next, the
    first one we''re going to run into is Hour and we have quite a few options:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f836266a-224d-4adf-91c0-01008d912590.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We have 24-hour options, we have 1 through 12; what we want is lowercase h
    which is 1 through 12 unpadded. The padded version, which is hh, exists right
    next that is not what we want for this one. We''re going to kick things off by
    adding an h:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'I''m also going to save the file, check it out in the Terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/29f7e70c-cfb1-4cb1-ac86-4de5ca809c5b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We have `4`, which looks great. Next up is that padded minute, we''re going
    to go ahead and find that pattern just next. For minute we have a lot fewer options,
    either padded or unpadded, we want to use mm. Now before I add mm, I am going
    to add a colon. This is going to get passed through in plain text, meaning it''s
    not going to get changed. We''re going to add our two lowercase ms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'We can then save `time.js` and make sure the correct thing prints in the Terminal,
    and it does, `4:22` shows up:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/12f27b35-dc2c-4dbc-a5a3-ed7814d0f806.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next up is going to be grabbing that lowercase am and pm values. We can find
    that pattern over inside&nbsp; Google Chrome just previous to&nbsp;Hour:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/45ac7096-5808-4b55-b400-7cfbdac0151a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Here we can either use uppercase A for uppercase AM and PM, or lowercase a
    for the lowercase version. I''m going to go ahead and use a lowercase `a` after
    a space to use that lowercase version:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'I can save the file and over inside the Terminal, I do indeed have `4:24` printing
    to the screen, and we have the `pm` after it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/62454ab9-24db-4c05-b989-2c76c6b79e69.png)'
  prefs: []
  type: TYPE_IMG
- en: Everything looks great. That is it for this section! In the next one, we're
    going to actually integrate Moment into our server and our client rather than
    just having it in a `playground` file.
  prefs: []
  type: TYPE_NORMAL
- en: Printing message timestamps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, you're going to be formatting your timestamps, and you're going
    to be displaying them to the screen along with the chat message. Currently, we
    show who it's from and the text, but the `createdAt` timestamp is not used anywhere.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now the first thing we need to figure out is how we can take that timestamp
    and get a Moment object back, because at the end of the day we want to call the
    `format` method to format it as we like. In order to do that, all you have to
    do is take your timestamp. We''ll make a variable called `createdAt` to represent
    that value, and pass it in as the first argument to `moment`, which means I simply
    pass in `createdAt`, just like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'When I do this, we''re creating a moment with the same methods like format,
    add, and subtract, but it''s representing a different point in time. By default,
    it uses the current time. If you pass in a timestamp, it uses that time. Now this
    number, `1234`, is barely a second past the Unix epoch, but if we go ahead and
    run the file, we should see the correct thing printing. Using the `nodemon` command,
    in the `playground` folder, we''re going to run `time.js`, and we get `5:30 am`
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/32fec2fc-4e5c-44c0-b210-a86f04340808.png)'
  prefs: []
  type: TYPE_IMG
- en: This would be expected since it's taking into account our local timezone.
  prefs: []
  type: TYPE_NORMAL
- en: Getting the formatted values back from timestamps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have this in place, we have everything we need to actually take
    those timestamps and get back formatted values. The other thing we can do is we
    can create timestamps with Moment, it has the exact same effect as the `new Date().getTime`
    method we've used.
  prefs: []
  type: TYPE_NORMAL
- en: In order to do this, all we do is we call `moment.valueOf`. For example, we
    can make a variable called `someTimestamp`, setting it equal to a call to `moment`.
    We're going to generate a new moment and we're going to call its `valueOf` method.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is going to go ahead and return a timestamp in milliseconds since the
    Unix epoch, `console.log`. We''re going to log out the `someTimestamp` variable
    just to make sure it looks correct, and here we have our timestamp value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: Updating the message.js file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The first thing we''re going to do is tweak our `message.js` file. Currently
    inside `message.js`, we generate timestamps using `new Date().getTime`. We''re
    going to switch over to Moment, not because it changes anything, I just want to
    be consistent with using Moment everywhere we use time. This is going to make
    it a lot easier to maintain and figure out what''s going on. At the top of the
    `message.js`, I''m going to make a variable called `moment` setting it equal to
    `require(''moment'')`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: And we're going to go ahead and replace the `createdAt` property with calls
    to `valueOf`. What I would like you to do is go ahead and do just that, call `moment`,
    call the `valueOf` method in `generateMessage` and in `generateLocationMessage`,
    and then go ahead and run the test suite and make sure both tests pass.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first thing we need to do is tweak the `createdAt` property for `generateMessage`.
    We''re going to call `moment`, call `valueOf` getting back the timestamp, and
    we''re going to do the same thing for `generateLocationMessage`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we can go ahead and save `message.js`. Head over into the Terminal and
    run our test suite using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'We get two tests and they both still pass, which means the value we''re getting
    back is indeed a number as our tests assert:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0ac0eec6-3999-486a-8592-d06fd9ea1d99.png)'
  prefs: []
  type: TYPE_IMG
- en: Now that we have Moment integrated on the server, we're going to go ahead and
    do the same thing on the client.
  prefs: []
  type: TYPE_NORMAL
- en: Integrating Moment on client
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first thing we need to do is load in Moment. Currently, the only library
    we load in on the frontend is jQuery. We can do this a few different ways; I'm
    going to go ahead and actually grab a file out of the&nbsp;`node_modules` folder.
    We've installed Moment, version 2.15.1, and we can actually grab the file we need
    for the frontend, which is sitting inside the `node_modules` folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''re going to go into `node_modules`, we have a really long list of alphabetical
    folders, I''m looking for the one called `moment`. We''re going to go into `moment`
    and grab `moment.js`. I''m going to right-click to copy it, then I''m going to
    scroll up to the very top, close `node_modules`, and I''m going to paste it right
    inside of our `js` | `libs` directory. We now have `moment.js` and if you open
    it, it''s a really long library file. There''s no need to make any changes to
    that file, all we have to do is load in `index.js`. Just next to our jQuery import,
    we''re going to add a brand new `script` tag, we''ll then provide that `src` attribute
    setting it equal to `/js/js/moment.js`, just like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we have this in place, we have access to all those Moment functions
    only on the client side, which means that over inside `index.js` we can properly
    format the timestamp that comes back inside the message. Now before we make any
    changes, let''s go ahead and start up our server using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'We can go ahead and move into the browser, going to `localhost:3000` and giving
    it a refresh, and our app is working as expected. If I open up the Developer Tools,
    inside the Console tab we can actually use Moment. We have it accessible via moment
    just like we did over inside Node. I can use `moment`, calling `format`: `moment().format()`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We get back our string:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e5ea026a-c6bd-426b-a078-e17ae6a3d70b.png)'
  prefs: []
  type: TYPE_IMG
- en: You should be able to make this call if you've successfully imported Moment.
    If you are seeing this, then you are ready to move on to the actual updating of
    `index.js`.
  prefs: []
  type: TYPE_NORMAL
- en: Updating the newMessage property
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you remember, on message we have a `createdAt` property for both `newMessage`
    and `newLocationMessage`. All we need to do is get that value, pass it in to `moment`,
    and then generate our formatted string.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can make a new variable called `formattedTime`, and we can set this equal
    to a call to `moment` passing in the timestamp, `message.createdAt`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we can go ahead and do whatever we like. We could call format passing in
    the exact same string we use over in `time.js`, the hour, the minutes and the
    am/pm; `h:`, two lowercase `m`s, followed by a space and a lowercase `a`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'With this in place we now have that formatted time and we can go ahead and
    add it inside&nbsp;`li.text`. Now I know I''m using template strings inside of
    our client-side code. We''ll be removing this pretty soon so there''s no need
    to make that tweak yet since I''m not testing in Internet Explorer or any other
    browser, although the final version of the app will not include template strings.
    Right after the `from` statement, we''re going to go ahead and inject another
    value, the `formattedTime` which we just created previous. So our message should
    read name like Admin, the time followed by the text:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'I''m going to go ahead and save `index.js`, and give the browser a refresh
    to load that client-side code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/560650fc-c7aa-4e9b-9b89-28fe85257516.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As shown in the preceding screenshot, we see Admin 4:49 pm: Welcome to the
    chat app, and that is the correct time. I can go ahead and send a message, `This
    is from a user`, send it off, and we can see it''s now 4:50 pm:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b7c14c75-7f5b-41f5-baf1-4b772a65bcf2.png)'
  prefs: []
  type: TYPE_IMG
- en: This is from a user shows up, everything is working great.
  prefs: []
  type: TYPE_NORMAL
- en: Updating the newLocationMessage property
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now for Send Location, we currently don't use Moment; we only updated the `newMessage`
    event listener. This means that when we print that location message, we don't
    have the timestamp. We're going to modify `newLocationMessage`, you can go ahead
    and use the same techniques we used previously to get the job done. Now in terms
    of where to actually render the formatted time, you can simply put it in `li.text`
    just like we did earlier in case of `newMessage` property.
  prefs: []
  type: TYPE_NORMAL
- en: 'Step one in the process is going to be to make that variable called `formattedTime`.
    We can actually go ahead and copy the following line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'And pasting it right above the&nbsp;`var li = jQuery(''<li></li>'');` line
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: We want to do the exact same thing, we want to take that `createdAt` field,
    get a moment object, and call `format`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next up, we do have to modify what gets displayed, show this `formattedTime`
    variable, and put it right in the&nbsp;`li.text` statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we can go ahead and refresh the app, and we should see our timestamp for
    regular messages. We can send off a regular message and everything still works:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/875b19b5-6d68-4414-bf4f-0d63f1be85f1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Then we can send off a location message, which we just changed. It should take
    just a second to get going and we have our current location link. We have our
    name and we have the timestamp, which is fantastic:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f9bd9025-4a9b-4c66-a5a9-8323ba05af08.png)'
  prefs: []
  type: TYPE_IMG
- en: That is it for this section. Let's go ahead and actually make a commit to save
    our changes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Even though we''re not quite done with the message area, we have all the data
    correctly showing up. It''s just showing up in a way that''s not really pleasing
    to the eye. For now though, we will head into the Terminal and shut down the server.
    I''m going to run `git status`, and we have new files as well as some modified
    files:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/cbf98a1b-c044-416b-bb21-cdf891e495d8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Then, `git add .`&nbsp;is going to take care of all of that. Then we can make
    our commit, `git commit` with the `-m` flag, and a good message for this one is
    `Format with an timestamps using momentjs`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: I am going to go ahead and push this up to GitHub using the&nbsp;`git push`
    command, and we are done.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we'll talk about a templating engine Mustache.js.
  prefs: []
  type: TYPE_NORMAL
- en: Mustache.js
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have our timestamps rendering correctly to the screen. We're going
    to go ahead and talk about a templating engine called **Mustache.js**. This is
    going to make it much easier to define some markup and render it multiple times.
    In our case, our messages are going to have the same set of elements in order
    to render properly. We're going to have a header tag for the user's name, we're
    going to add the text into a paragraph, all that sort of stuff.
  prefs: []
  type: TYPE_NORMAL
- en: Now instead of doing that inside `index.js`, like we currently are, we're going
    to create some templates, some markup in `index.html`, and we're going to render
    those, which means we're not going to need to manually create and manipulate these
    elements. This can be a huge burden.
  prefs: []
  type: TYPE_NORMAL
- en: Adding mustache.js to the directory
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now in order to get started before we actually create any templates or render
    them, we do need to download the library. We can get this by going to Google Chrome
    and Googling `mustache.js`, and we''re looking for the GitHub repository, which
    in this case happens to be the first link. You can also go to [mustache.github.io](http://mustache.github.io/)
    and click on the JavaScript link to get to the same location:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6c4e4823-618f-44cd-be84-d04b763563b2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now once you''re here, we do want to grab a specific version of the library.
    We can go to the Branch drop-down and switch from Branches to Tags. This is going
    to show us all the versions that were released; the version I''m going to be using
    here is the most recent one 2.3.0\. I''m going to grab that, it''s going to refresh
    the repository next, and we''re looking for a file called `mustache.js`. This
    is the library file we''re going to need to download and add in to `index.html`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/919c3e60-a5d3-478a-a403-490897428d4b.png)'
  prefs: []
  type: TYPE_IMG
- en: I can click on&nbsp;Raw to grab the raw JavaScript file, and I can go ahead
    and save it into the project by right-clicking and clicking on&nbsp;Save As....
    I'm going to go into the project on the desktop, the `public` | `js` | `libs`
    directory, and right there we're going to add the file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now once you have the file in place, we can kick things off by importing it
    inside `index.html`. Near the bottom, we currently have `script` tags for `jquery`
    and `moment`. This one is going to look pretty similar. It''s going to be a `script`
    tag, then we''ll add that `src` attribute so we can load in the new file, `/js/libs`,
    and finally it''s `/mustache.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: Now with this in place, we can go ahead and create a template and render it.
  prefs: []
  type: TYPE_NORMAL
- en: Creating and rendering template for newMessage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Creating a template and rendering it, is going to give you a pretty good idea
    about exactly what Mustache can do, then we'll go ahead and actually wire it up
    with our `newMessage` and `newLocationMessage` callbacks. To kick things off over
    inside `index.html` we are going to make a new template by defining a `script`
    tag just next the `chat__footer` div.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now inside of the `script` tag, we''re going to add our markup, but before
    we can do that we have to provide a couple of attributes on `script`. First up
    this is going to be a reusable template and we''re going to need a way to access
    it, so we''ll give it an `id`, I''m going to call this one `message-template`,
    and the other property we''re going to define is something called the `type`.
    The `type` property lets your editor and the browser know what''s stored inside
    the `script` tag. We''re going to set the type equal to, inside quotes, `text/template`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we can write some markup and it''s going to work as expected. To kick things
    off let''s just go ahead and make a really simple paragraph tag. We''re going
    to make a `p` tag inside of the `script` tag, and we''ll add some text inside
    of it, `This is a template`, and we''re going to go ahead and close the paragraph
    tag, and that is it, this is where we''re going to start:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: We have a message-template `script` tag. We can go ahead and now render this
    over inside&nbsp;`index.js` by commenting out all the code inside the `newMessage`
    listener. I'm going to comment out all of that code and now we can implement the
    Mustache.js rendering method.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing the Mustache.js rendering method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First up, we have to grab the template, make a variable called `template` to
    do just this, and all we''re going to do is select it with `jQuery` using the
    ID we just provided, `#message-template`. Now we need to call the `html` method,
    which is going to return the markup inside `message-template`, which is the template
    code, our paragraph tag in this case:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: Once we have that we can go ahead and actually call a method on Mustache, which
    was available to us because we added that `script` tag. Let's make a variable
    called `html`; this is the thing we're eventually going to add it to the browser
    and we're going to set it equal to a call to `Mustache.render`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now `Mustache.render` takes the `template` you want to render:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'We''re going to go ahead and render it and now we can spit it out in the browser
    by adding it to the `messages` ID just like we do earlier. We''re going to select
    the element with an ID of messages, call `append`, and append the template we
    just rendered which we have access to inside of HTML:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'Now with this in place our server restarted and we can actually play around
    with this by refreshing the browser. I''m going to give the browser a refresh:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9ec1c84b-571a-4278-b14d-61fe73dee8af.png)'
  prefs: []
  type: TYPE_IMG
- en: We get This is a template for our welcome message, and if I type anything else
    we also get This is a template. Not super interesting, not super useful, what
    is cool though is that Mustache lets you inject values, which means we can set
    up places in our template where we expect a value to get passed in.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, we have that `text` property. In order to reference a value, you
    can use the double curly braces syntax like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'Then you can go ahead and type the name, like `text`. Now in order to actually
    provide this value, we have to send in a second argument to the render method.
    Instead of just passing in the template, we''re going to pass in the template
    and an object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'This object is going to have all the properties that you''re going to be allowed
    to render. Now we''re currently expecting the `text` property, so we should probably
    go ahead and provide it. I''m going to set `text` equal to the value that comes
    back on `message.text`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we''re rendering the template in a dynamic way. The template serves as
    the reusable structure but the data is always going to change because it gets
    passed in when we call render:'
  prefs: []
  type: TYPE_NORMAL
- en: 'With this in place we can go ahead and refresh Chrome, and right here we see
    Welcome to the chat app, and if I go ahead and type a message, that is going to
    show to the screen, which is fantastic:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7f32c199-d48f-4f28-928b-74fe2fe30fc8.png)'
  prefs: []
  type: TYPE_IMG
- en: Getting all the data showing up
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now the next step in the process is going to be to get all the data showing,
    we have a `from` property and a `createdAt` property too. We actually have access
    to that `createdAt` property via `formattedTime`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''re going to go ahead and uncomment the `formattedTime` line, and this is
    the only one we''re actually going to carry over to the new system. I''m going
    to add it up inside `newMessage` callback:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'Because we do still want to use `formattedTime` when we render. Now before
    we do anything else with the template, let''s go ahead and simply pass in the
    values. We already passed the `text` value in. Next up, we can pass in `from`,
    it''s accessible via `message.from`, and we can also pass in a timestamp. You
    can call that property whatever you like, I''m going to continue to call it `createdAt`
    and set it equal to the `formattedTime`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: Providing a custom structure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now with this in place all the data is indeed getting passed in. We just need
    to actually go ahead and use it. In `index.html` we can use all of it, and we're
    also going to provide a custom structure. Just like we did when we set up the
    code previously, we're going to be using some classes I've defined inside the
    template for this project.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the list item tag
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We''re going to start off with a list item using the `li` tag. We''re going
    to go ahead and add a class, and we''re going to call this class `message`. In
    there, we can add two `div`s. The first `div` is going to be the title area where
    we add the `from` and `createdAt` values, and the second `div` is going to be
    the body of the message:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'Now for the first `div` we are going to provide a class, the class will equal
    `message__title`. This is where the message title information is going to go.
    We''re going to kick things off in here by providing an `h4` tag, which is going
    to render a nice header to the screen, and all we''re going to put inside `h4`
    is the `from` data, which we can do by using those double curly braces, `{{from}}`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: 'The same exact thing holds true for `span`, that''s going to happen next. We''ll
    add a `span` tag, and inside the `span` tag, we''re going to inject `createdAt`,
    adding our double curly braces, and specifying the property name:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: Adding the message body tag
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now we can go ahead and move on to the actual message body itself. That''s
    going to happen next inside our second `div`, which we will be giving a class.
    The second `div` is going to have a class equal to `message__body`, and for a
    basic message, a non location-based message. All we''re going to do is add a paragraph
    tag, and we''re going to render our text inside by providing it two curly braces
    followed by `text`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: With this in place we actually have a really great system for rendering our
    message template. The code, the markup, it's defined over inside `message-template`,
    which means that it's reusable and inside&nbsp;`index.js`. We just have a little
    bit of code to get everything wired up. This is a much more scalable solution,
    and it's a lot easier than managing the elements like we did next for `newLocationMessage`.
    I'm going to go ahead and save `index.js`, move into the browser, and give things
    a refresh.
  prefs: []
  type: TYPE_NORMAL
- en: 'When we do we can see we now have a nice set of styles for the message, `This
    is some message`. I''m going to send that off; we get the name, the timestamp,
    and the text all printing. It looks a lot better than it did earlier:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/770a7137-9d6a-47d7-b5cb-e461af13f88c.png)'
  prefs: []
  type: TYPE_IMG
- en: Creating template for the newLocation message
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now our send location message is still going to look like trash. If I click
    on&nbsp;Send Location, it's going to take a few seconds to get the job done and
    here it is! It's unstyled because it is not using a template. What we're going
    to do is add a template for the `newLocationMessage`. We're going to set up the
    markup for the template, and then we'll be to render it and pass in the necessary
    values.
  prefs: []
  type: TYPE_NORMAL
- en: 'Over inside `index.html` we can get started doing this by creating a second
    template. Now the second template is going to be pretty similar to the first.
    We can actually go ahead and duplicate this template by copying and pasting it
    next. All we need to do is change the `id` attribute from `message-template` to
    `location-message-template`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: Now the title area is going to be the same. We're going to have our `from` property
    as well as `createdAt`; it's the body that's going to change.
  prefs: []
  type: TYPE_NORMAL
- en: 'Instead of rendering a paragraph with the text. We''re going to render a paragraph
    that has the link using an anchor tag. Now to add that anchor tag, we''re going
    to add the `a` tag. Then inside the `href` attribute, we''re going to be injecting
    the value. This is going to be the URL that gets passed from server to client.
    We''re going to add our equal signs, our curly braces, and the value we want to
    add is `url`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: 'Next up, we are going to carry over that `target` property, setting an equal
    to `_blank`, which will open up the link in a new tab. And finally, we can go
    ahead and close the anchor tag, adding the text for the link inside. Some good
    text for this link would be `My current location`, just like we have right now:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: This is all we need to do for the template. Next, we are going to wire up all
    of this inside of `index.js`, which means inside `newLocationMessage`, you want
    to do something pretty similar to what we have previous in `newMessage`. Instead
    of rendering everything with jQuery, you're going to render the template, passing
    in the necessary data, text, URL, and the formatted timestamp.
  prefs: []
  type: TYPE_NORMAL
- en: Rendering the newLocation template
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The first thing we''re going to do is comment out the code we no longer need;
    that''s everything but the variable `formattedTime`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: 'Next up we''re going to go ahead and grab the template from the HTML by making
    a variable called `template`, and we''re going to use `jQuery` to select it by
    ID. Right inside the quotes, we''ll add our selector. We want to select by ID
    so we''ll add that.&nbsp;`#location-message-template` is the ID we provided, and
    now we want to go ahead and call `html` to get its inner HTML back:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: 'Next up, we''re going to go ahead and actually render the template by creating
    a variable called `html` to store the return value. We''re going to call `mustache.render`.
    This takes those two arguments, the template you want to render and data you want
    to render into that template. Now the data is optional, but we do indeed need
    to pass some data through so we will be providing that as well. `template` is
    our first argument and the second one is going to be an object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: 'I''m going to start by setting `from` equal to `message.from`, and we can do
    the same thing with `url`, setting it equal to `message.url`. For `createdAt`,
    we''re going to use the `formattedTime` variable instead, `createdAt` gets set
    equal to `formattedTime`, which is defined in case of `newMessage` template:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we have access to the HTML we need to render. We can use a jQuery
    selector to select the element with an ID of messages, and we''re going to call
    append to add a new message. The new message we want to add is available via the
    `html` variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we have our function completely converted over. We can remove the
    old commented out code, save the file, and test things out over inside Chrome.
    I''m going to give the page a refresh to load that latest code, I''ll send a text
    message to make sure that still works, and now we can go ahead and send a location
    message. We should see in just a second the new data rendering and it is indeed
    working as expected:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/588f4431-45f8-4da6-8a3d-e16c1e5d485b.png)'
  prefs: []
  type: TYPE_IMG
- en: We have the name, the timestamp, and the link. I can go ahead and click on the
    link to make sure it is still working.
  prefs: []
  type: TYPE_NORMAL
- en: With this in place we now have a much better setup for creating these frontend
    templates. Instead of having to do the heavy lifting inside `index.js`, we can
    do the template inside of `index.html`, simply passing the data in, it's a much
    more scalable solution.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have this in place we are done, and we can go ahead and commit
    our changes by shutting down the server and running `git status`. We have a new
    file as well as a couple of modified ones, `git add .` is going to take care of
    all of that for us, and we can make our commits, `git commit` with the `-am` flag.
    Actually, we already added it so we can just use the `-m` flag, `Add mustache.js
    for message templates`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: 'I''m going to push this up to GitHub and we can go ahead and take a quick moment
    to deploy to Heroku too using `git push heroku master`. I''m going to push this
    up just to make sure all the templates are rendering properly on Heroku just like
    they are locally. It should take just a second to deploy. Once it''s up, we can
    open it up by either running `heroku open` or grabbing that URL as we''ve done
    before. Here it''s launching the app:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ee9cc7c6-6ca7-4b02-879f-4e6640264c8a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'It looks like everything did go as expected. I''m going to grab the app URL,
    move into Chrome, and open it up:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3f3cf584-e3ba-4d58-bea7-d8c10f0fb2da.png)'
  prefs: []
  type: TYPE_IMG
- en: And now we're viewing our application live inside of Heroku, and the message
    data is showing up as expected. The same thing should hold true for sending the
    location, the send location message should use the new setup, and it is indeed
    working as expected.
  prefs: []
  type: TYPE_NORMAL
- en: Autoscrolling
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If we''re going to build a frontend we might as well do it right. In this section,
    we''re going to add an autoscrolling feature. So if a new message comes in, it
    is visible inside of the messages panel. Now right away this is not a problem.
    I type an `a`, I hit *enter*, and it shows up. However, as we get further down
    the list, you''ll see the messages start to disappear down the bottom of the bar:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e37dee8f-f002-4f61-8a4a-c287e11454a9.png)'
  prefs: []
  type: TYPE_IMG
- en: Now I can indeed scroll down to see the most recent messages, but it would be
    nice if I'm automatically scrolled to the most recent message. So if a new message
    comes in like `123`, I'm automatically brought to the bottom.
  prefs: []
  type: TYPE_NORMAL
- en: Now, obviously, if someone does scroll up to read an old message, we're going
    to want to keep them there; we're not going to want to scroll them to the bottom,
    that would be just as annoying as not being able to see the new messages in the
    first place. This means that we're going to go ahead and calculate a threshold.
    If someone can see that last message, we're going to go ahead and scroll them
    to the bottom when a new message comes in. If I'm previous that message, we're
    going to go ahead and leave them alone, there's no reason to scroll them to the
    bottom if they're digging through the archives.
  prefs: []
  type: TYPE_NORMAL
- en: Running a height properties calculation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now in order to do that we are going to have to run a calculation, grabbing
    a few properties, mostly the height properties, of various things. Now to talk
    about those height properties and figure out exactly how we''re going to run this
    calculation, I''ve put together a really short section. Let''s go ahead and dive
    right in. To illustrate exactly how we''re going to run this calculation, let''s
    take a look at the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c3a1643b-6242-48a0-893a-7c39fe046cc3.png)'
  prefs: []
  type: TYPE_IMG
- en: We have this light purple box, it's taller than the dark purple one. This is
    the entire messages container. It's probably going to contain way more messages
    than we can actually see in the browser. The dark purple area is what we actually
    see. As we scroll down the dark purple area is going to move down to the bottom,
    and as we scroll up it's going to shift up to the top.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we have access to three height properties that are going to let us make
    the calculations necessary to determine whether or not we should scroll down a
    user. These are the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b155c03b-f571-4b32-9dcf-3623782a6d28.png)'
  prefs: []
  type: TYPE_IMG
- en: First up `scrollHeight`. This is the entire height of our messages container
    regardless of how much is actually visible inside of the browser. This means that
    if we have messages before and after what we can see. They are still going to
    be accounted for in `scrollHeight`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Next up, we have `clientHeight`. This is the visible height container.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, we have `scrollTop`. This is the number of pixels we've scrolled down
    into the purple container.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now in the current situation what do we want to do? We want to do nothing, the
    user really isn't scrolled that far down. It would be a burden to them if they
    got brought to the bottom every time a new message came in.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the next scenario we scroll down just a little bit more:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1b5ab944-51fd-4c61-8d9f-cc5ae40fa0e6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The `scrollTop` has increased, the `clientHeight` has stayed the same, and
    so has the `scrollHeight`. Now if we keep going down the list, eventually we''re
    going to get to the very bottom. Currently, we should do nothing, but when we
    get to the bottom the calculations look a little different:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c99707bd-fdc8-4a2f-a1b1-4211bfb86e00.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Here you can see the `scrollTop` value, which is the space previous what we
    can see, plus the `clientHeight` value is identical to `scrollHeight`. This is
    going to be the basics of our equation. If the `scrollTop` plus the `clientHeight`
    equals the `scrollHeight`, we do want to scroll the user down when a new message
    comes in, because we know they''re at the very bottom of the panel. So in this
    situation what should we do? We should scroll to the bottom when a new message
    comes in. Now there is one slight little quirk:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7d47ee10-2dd8-44cc-9b5a-589951c1f5b7.png)'
  prefs: []
  type: TYPE_IMG
- en: We are going to have that message already added so we're going to take into
    account the new `messageHeight` in our calculation, adding up `scrollTop`, `clientHeight`,
    and `messageHeight`, comparing that value to the `scrollHeight`. Using this we
    will once again be able to scroll the user to the bottom.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s go ahead and wire this up in Atom. Now that we know how we''re going
    to run that calculation, let''s go ahead and actually do it over inside `index.js`.
    We''re going to make a new function that''s going to do all this heavy lifting
    for us. It''s going to determine whether or not we should scroll the user to the
    bottom depending on their position. Let''s make a function inside at the top `index.js`.
    It''s not going to take any arguments and we''re going to go ahead and call this
    function `scrollToBottom`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: 'We''re going to call `scrollToBottom` every time we add a new message to the
    chat area, which means we need to do it twice once inside of `newMessage` and
    `newLocationMessage`. Right inside the&nbsp;`newLocationMessage` callback, I can
    call `scrollToBottom` passing in no arguments:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: 'I''ll do the same thing next when we append `scrollToBottom`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: 'Now all we need to do is wire up this function to:'
  prefs: []
  type: TYPE_NORMAL
- en: Determine if we should scroll them to the bottom, and
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scroll them to the bottom if it's necessary.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a new variable to scroll messages to the bottom
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To get started, we are going to select the messages container creating a new
    variable to store that in. We're going to actually be creating quite a few variables
    to run our calculation, so I'm going to add two comments, `Selectors` and `Heights`.
    This is going to help us just break up the long list of variables.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can make a variable, we''ll call this variable `messages`, and we''re going
    to set `messages` equal to a `jQuery` selector call. We''re going to select all
    elements with an ID equal to `messages`, which is just our one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we have messages in place we can focus on getting those heights. We
    are going to go ahead and fetch `clientHeight`, `scrollHeight`, and `scrollTop`.
    First up, we can make a variable called `clientHeight` setting that equal to `messages`,
    and then we''re going to call a `prop` method, which gives us a cross-browser
    way to fetch a property. This is a jQuery alternative to doing it without jQuery.
    This makes sure it works across all browsers regardless of what they call the
    `prop`. We''re going to go ahead and provide, inside quotes, `clientHeight` to
    fetch that `clientHeight` prop:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: 'We''re going to do the exact same thing two more times for the other two values.
    `scrollTop` is going to get set equal to `messages.prop` fetching the prop `scrollTop`,
    and last but not least `scrollHeight`. A new variable called `scrollHeight` will
    store that value and we''re going to set it equal to `messages.prop`, passing
    in the prop we want to fetch `scrollHeight`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: Now that we have this in place we can get started with our calculation.
  prefs: []
  type: TYPE_NORMAL
- en: Determining the calculation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We want to figure out if the `scrollTop` plus the `clientHeight` is greater
    than or equal to the `scrollHeight`. If it is, then we want to go ahead and scroll
    the user to the bottom because we know they''re already near the bottom, `if (clientHeight
    + scrollTop is >= scrollHeight)`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: 'Now if this is the case then, we are going to go ahead and do something. For
    now, we''ll just use `console.log` to print a little message to the screen. We''ll
    just print `Should scroll`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: Now our calculation is not quite complete, since we are running this function.
    After we append the new message, we do need to take that into account also. As
    we saw over inside Atom, if we can see that last message, we do want to scroll
    them to the bottom; if I'm further up the list we won't scroll them. But if I'm
    pretty close to the bottom, a few pixels up previous, we should scroll them to
    the bottom because that's most likely what they want.
  prefs: []
  type: TYPE_NORMAL
- en: Taking into account the height of new message
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to get this done, we have to take into account the height of that new
    message and the height of the previous message. Inside Atom, we're going to go
    ahead and get that done, by first up adding a selector.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''re going to make a variable called `newMessage`, and this is going to store
    the selector for the last list item, the one that was just added before the call
    to scroll to bottom. I''m going to use `jQuery` to get this done, but instead
    of creating a new selector, we can actually build off of our previous one, `messages`,
    and we''re going to call its `children` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: 'This lets you write a selector specific to the children of the message, which
    means that we have all our list items so we could select our list items in another
    context, maybe we want to select all the children that are paragraphs. In our
    case, though, we''re going to select the list items that are the last child using
    this `last-child` modifier:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we have just one item, the last list item in the list, and we can go ahead
    and get its height by making a variable called `newMessageHeight`, just next to
    the `scrollHeight` variable. We''re going to set that equal to `newMessage`, and
    we''re going to call its `innerHeight` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: This is going to calculate the height of the message taking into account the
    padding that we've also applied via CSS.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we need to take into account the height of the second-to-last message as
    well. To do that, we''re going to create a variable `lastMessageHeight`, and we''ll
    set it equal to `newMessage`, and we''re going to call the `prev` method. This
    moves us to the previous child, so if we were at the last list item we are now
    at the second-to-last list item, and we can get its height by once again calling
    `innerHeight`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we can account for both of these values inside our `if` statement as well.
    We''re going to add them up, `newMessageHeight`, and we''re also going to add
    `lastMessageHeight` taking that into account as we make our calculation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: Now that our calculation is complete we can actually test out that things are
    working as expected. We should see `Should scroll` when we should scroll.
  prefs: []
  type: TYPE_NORMAL
- en: Testing the calculations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Over inside the browser, I''m going to go ahead and give things a refresh,
    and I''m also going to open up the Developer Tools so we can view our `console.log`
    statement. You''ll notice on smaller screens the styles remove the sidebar. Now
    I''m going to hit *enter* a few times. Obviously, we shouldn''t be able to send
    empty messages but we can for the moment, and you can see that `Should scroll`
    is printing:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8172b50e-4ce4-401c-b428-cf25b08d83e5.png)'
  prefs: []
  type: TYPE_IMG
- en: It's not actually going to scroll because the height of our messages container
    doesn't actually exceed the height of the browser space given to it, but it does
    indeed pass the condition. Now as we get down further and messages start to drop
    off the bottom of the screen, you'll notice the count in front of the message
    stops going up. The count incremented every time Should scroll printed, but now
    it stays at 2&nbsp;even though I'm adding new messages further.
  prefs: []
  type: TYPE_NORMAL
- en: In this case, we can scroll back down to the bottom and add a new message, `abc`.
    This should cause the browser to scroll, we're kind of near the bottom. When I
    do it Should scroll increments to 3, which is fantastic.
  prefs: []
  type: TYPE_NORMAL
- en: If I scroll up to the top of the list and type `123` and hit *enter*, Should
    scroll does not increment to 4, which would be correct. We do not want to scroll
    a user to the bottom if they're up at the very top.
  prefs: []
  type: TYPE_NORMAL
- en: Scrolling a user when necessary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now the only thing left to do is actually scroll a user when necessary. That''s
    going to happen over inside our `if` statement, we can remove our `console.log(''Should
    scroll'')` call and we''re going to replace it with a call to `messages.scrollTop`,
    which is the jQuery method for setting that `scrollTop` value, and we''re going
    to set it to the `scrollHeight`, which is the total height of the container. This
    means that we''re going to be moving to the bottom of the messages area:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: Over inside Google Chrome, we can now refresh the page to grab that latest `index.js`
    file, and I'm just going to hold the *enter* key for a little bit. As you can
    see we are scrolling down the list automatically. If I add a new message, it'll
    show up correctly.
  prefs: []
  type: TYPE_NORMAL
- en: If I'm up near the top and a new message comes in, like `123`, I am not going
    to scroll down the list, which is correct. Now if I'm not quite at the bottom
    but I'm pretty close, and a new message comes in, I am scrolled to the bottom.
    But if I'm a little past that last message, we're not going to get scrolled to
    the bottom which is exactly what we wanted. This is all happening because of our
    calculations.
  prefs: []
  type: TYPE_NORMAL
- en: Committing the calculation-related changes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s wrap this up with a commit over inside the Terminal. If we run `git
    status`, you''ll see we just have one changed file. I can use `git commit -am`
    to make a commit, `Scroll to bottom if user is close to bottom`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: I'm going to go ahead and push that up to GitHub using the `git push` command,
    and this is considered a wrap on the first part of this project.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we looked into styling the basic chat application in the HTML
    format. We also discussed timestamps and formatting the page using the Moment
    method. After that, we went through the concept of the Mustache.js, creating and
    rendering templates for the messages. At last, we learned about autoscrolling
    and running calculations with message height properties. With this, we have a
    basic chat application in place.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, the goal is going to be to add chat rooms and names, so
    I go to a signup page. I enter the room, I'd like to join and the name I'd like
    to use. Then I get brought to a chat page, but only for that specific room. So
    if there are two rooms, users in room 1 are not going to be able to talk to users
    in room 2, and vice versa.
  prefs: []
  type: TYPE_NORMAL
