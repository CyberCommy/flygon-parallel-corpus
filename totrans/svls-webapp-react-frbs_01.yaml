- en: Getting Started with Firebase and React
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Realtime web applications are said to include the benefits of superfast responses
    to the user and are highly interactive, which increases the user engagement flow.
    In this modern web, there are many frameworks and tools that are available to
    develop Realtime applications. JavaScript is one of the most popular scripting
    languages that is used for building applications on the web. This book introduces
    you to ReactJS and Firebase, which you will likely come across as you learn about
    modern web app development. They both are used for building fast, scalable, and
    realtime user interfaces that use data and can change over time without reloading
    the page.
  prefs: []
  type: TYPE_NORMAL
- en: React is famously known as a View in **Model**-**View**-**Controller** (**MVC**) pattern
    and can be used with other JavaScript libraries or frameworks in MVC. For managing
    the data flow in React app, we can use Flux or Redux. In this book, we will also
    go through how we can implement redux with React and firebase app.
  prefs: []
  type: TYPE_NORMAL
- en: Redux is the alternative to Flux. It shares the same key benefits. Redux works
    especially well with React, for managing the state of the UI. If you have ever
    worked with flux, then it's easy too.
  prefs: []
  type: TYPE_NORMAL
- en: Before jumping into the code, let's refresh our knowledge of ReactJS and see
    what we can do with Firebase and their features, to know the power of firebase.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the list of topics that we''ll cover in this section:'
  prefs: []
  type: TYPE_NORMAL
- en: Introduction of React
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: React Component LifeCycle
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This will give you a better understanding of dealing with React Components.
  prefs: []
  type: TYPE_NORMAL
- en: React
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: React is an open source JavaScript library that provides a view-layer for rendering
    data as HTML to create interactive UI components. Components have been used typically
    to render React views that contain additional components specified as custom HTML
    tags. React views efficiently update and re-render the components without reloading
    the page when your data changes. It gives you a trivial virtual DOM, powerful
    views without templates, unidirectional data flow, and explicit mutation. It is
    a very systematic way of updating the HTML document when the data changes and
    provides a clean separation of components in a modern, single-page application.
  prefs: []
  type: TYPE_NORMAL
- en: The React Component is built entirely with Javascript, so it's easy to pass
    rich data through your app. Creating components in React lets you split the UI
    into reusable and independent pieces, which makes your application component reusable,
    testable, and makes the separation of concerns easy.
  prefs: []
  type: TYPE_NORMAL
- en: React is only focused on View in MVC, but it also has stateful components that
    remember everything within `this.state`. It handles mapping from input to state
    changes and it renders components. Let's look at React's component life cycle
    and its different levels.
  prefs: []
  type: TYPE_NORMAL
- en: Component lifecycle
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In React, each component has its own lifecycle methods. Every method can be
    overridden as per your requirements.
  prefs: []
  type: TYPE_NORMAL
- en: When the data changes, React automatically detects the change and re-renders
    the component. Also, we can catch the errors in the Error Handling phase.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following image shows the phases of a React Component:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/03a987fd-5f96-41d6-9c61-adada00864f3.png)'
  prefs: []
  type: TYPE_IMG
- en: Methods info
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's take a quick look at the preceding methods.
  prefs: []
  type: TYPE_NORMAL
- en: The constructor() method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The constructor method of React Component gets invoked first when the component
    is mounted. Here, we can set the state of the component.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s an example of constructor in `React.Component`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Using `this.props` inside the constructor, we need to call `super(props)` to
    access and call functions of parents; otherwise, you will get `this.props` undefined
    in the constructor because React sets the `.props` on the instance from outside immediately after
    calling constructor, but it will not affect when you are using `this.props` inside
    the render method.
  prefs: []
  type: TYPE_NORMAL
- en: The render() method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `render()` method is required to render the UI component and examine `this.props` and
    `this.state` and return one of the following types:'
  prefs: []
  type: TYPE_NORMAL
- en: '**React elements**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**String and numbers**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Portals**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**null**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Booleans**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The componentWillMount() method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This method is invoked immediately before `componentDidMount`. It is triggered
    before `render()method`.
  prefs: []
  type: TYPE_NORMAL
- en: The componentDidMount() method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This method is invoked immediately after a component gets the mount. We can
    use this method to load the data from a remote endpoint to instantiate a network
    request.
  prefs: []
  type: TYPE_NORMAL
- en: The componentWillReceiveProps() method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This method will be invoked when the mounted component receives new props. This
    method also allows comparing the current and next values to ensure the changes
    in props.
  prefs: []
  type: TYPE_NORMAL
- en: The shouldComponentUpdate() method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `shouldComponentUpdate()` method is invoked when the component has received
    the new props and state. The default value is `true`; if it returns `false`, React
    skips the update of the component.
  prefs: []
  type: TYPE_NORMAL
- en: The componentWillUpdate() method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `componentWillUpdate()` method is invoked immediately before rendering when
    a new prop or state is being received. We can use this method to perform an action
    before the component gets updated.
  prefs: []
  type: TYPE_NORMAL
- en: This method will not be invoked if `shouldComponentUpdate()` returns `false`.
  prefs: []
  type: TYPE_NORMAL
- en: The componentDidUpdate() method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `componentDidUpdate()` method is invoked immediately when component gets
    updated. This method is not called for the initial render.
  prefs: []
  type: TYPE_NORMAL
- en: Similar to `componentWillUpdate()`, this method is also not invoked if `shouldComponentUpdate()`
    returns false.
  prefs: []
  type: TYPE_NORMAL
- en: The componentWillUnmount() method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This method is invoked immediately before a React Component is unmounted and
    destroyed. Here, we can perform any necessary cleanup, such as canceling network
    requests or cleaning up any subscription that was created in `componentDidMount`.
  prefs: []
  type: TYPE_NORMAL
- en: The componentDidCatch() method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This method allows us to catch the JavaScript errors in React Components. We
    can log those errors and display another fallback UI instead of the component
    tree that crashed.
  prefs: []
  type: TYPE_NORMAL
- en: Now we have a clear idea about component methods that are available in React
    Components.
  prefs: []
  type: TYPE_NORMAL
- en: 'Observe the following JavaScript code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, observe the following ReactJS code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Now, after observing the preceding examples of React and JavaScript, we will
    have a clear idea of normal HTML encapsulation and ReactJS custom HTML tags.
  prefs: []
  type: TYPE_NORMAL
- en: React isn't an MVC framework; it's a library for building a composable user
    interface and reusable components. React is used at Facebook in its production
    stages and [instagram.com](https://www.instagram.com/) is entirely built on React.
  prefs: []
  type: TYPE_NORMAL
- en: Firebase
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Firebase platform helps you develop high-quality apps and focus on your
    users.
  prefs: []
  type: TYPE_NORMAL
- en: Firebase is a mobile and web application development platform backed by Google.
    It is a one-stop solution for all your needs to develop high-quality mobile and
    web applications. It includes various products, such as Realtime Database, Crash
    reporting, Cloud Firestore, Cloud Storage, Cloud functions, Authentication, Hosting,
    Test lab for Android, and Performance monitoring for iOS, which can be used to
    develop and test Realtime applications by focusing on the user's needs, rather
    than the technical complexities.
  prefs: []
  type: TYPE_NORMAL
- en: It also includes products such as Cloud Messaging, Google Analytics, Dynamic
    Links, Remote Config, Invites, App Indexing, AdMob, and AdWords that help you
    grow user base and also increase the engagement of your audience.
  prefs: []
  type: TYPE_NORMAL
- en: 'Firebase provides multiple Firebase services. We can access each service with
    the Firebase namespace:'
  prefs: []
  type: TYPE_NORMAL
- en: '`firebase.auth()` - Authentication'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`firebase.storage()` - Cloud Storage'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`firebase.database()` - Realtime Database'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`firebase.firestore()` - Cloud Firestore'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We'll cover all the preceding services in the upcoming chapters. In this chapter,
    we will go through the preceding products/services briefly to get a basic understanding
    of all features of the Firebase platform. In the upcoming chapters, we will explore
    web-related products  which can integrate with React platform, in more detail.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s the list of topics that we''ll cover in this section:'
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to Firebase and its features
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: List of Firebase Features and how we can use it
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cloud Firestore
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Firebase project setup with JavaScript
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sample application "Hello World" with Firebase and JavaScript
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As you can see, Firebase offers two types of Cloud Database and Realtime Database,
    and both support real-time data syncing. We can use both of them in the same application
    or project. Okay, let's go into detail and learn more about them.
  prefs: []
  type: TYPE_NORMAL
- en: Realtime Database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For any Realtime application, we need a Realtime Database. The Firebase Realtime
    Database is a cloud-hosted NoSQL database that synchronizes the data in Realtime
    to every connected client. Instead of a typical request-response model, the Firebase
    database uses the synchronization mechanism that synchronizes the data to all
    the connected devices within milliseconds. Another key capability is its offline
    feature. The Firebase SDK persists the data on the disk; so, even if a user loses
    their internet connection, the app remains responsive. It automatically synchronizes
    the data once the connection is reestablished. It is supported by iOS, Android,
    Web, C++, and Unity platforms. We will cover this in detail in the upcoming chapters.
  prefs: []
  type: TYPE_NORMAL
- en: Firebase Realtime Database can scale around 100,000 concurrent connections and
    1,000 writes/second in a single database.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the list of features on the left, which are
    available in Firebase, and we have selected the Realtime Database in the database
    section. In that section, we have four tabs available:'
  prefs: []
  type: TYPE_NORMAL
- en: DATA
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: RULES
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: BACKUPS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: USAGE
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](Images/d483f47d-f69c-41db-8390-b3d6fe253d52.png)'
  prefs: []
  type: TYPE_IMG
- en: Database rules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Firebase database rules are the only way to secure the data. Firebase provides
    flexibility and expression-based rules language with JavaScript-like syntax to
    developers to define how your data should be structured, how it should be indexed,
    and when the user can read and write the data. You can also combine authentication
    services with this to define who has access to what data and protect your users from
    unauthorized access. To validate the data, we need to add a rule separately using
    `.validate` in the rules.
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider this example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Here are some other sample blocks of code for applying rules in the Rules tab:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Default**: Rule configuration for authentication:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '**Public**:These rules give full access to everyone, even people who are not
    users of your app. They give read and write access to your database:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '**User**: These rules authorize access to a node matching the user''s ID from
    the Firebase authentication token:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '**Private**: These rule configs don''t allow anyone to read and write to a
    database:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: We can also use REST API with Firebase Secret code to write and update Rules
    for your Firebase app by making a `PUT` request to the `/.settings/rules.json`
    path and it will overwrite the existing rules.
  prefs: []
  type: TYPE_NORMAL
- en: 'Take, for example, `curl -X PUT -d ''{ "rules": { ".read": true } }''` `''https://docs-examples.firebaseio.com/.settings/rules.json?auth=FIREBASE_SECRET''`.'
  prefs: []
  type: TYPE_NORMAL
- en: Backups
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Firebase allows us to save the daily backup of our database, but that is only
    available in the Blaze plan. It also applies the security rules automatically
    to secure your data.
  prefs: []
  type: TYPE_NORMAL
- en: Usage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Firebase allows seeing the usage of the database with the help of an analytical
    chart. It shows us the connections, storage, downloads, and load in Realtime on
    our firebase database:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/2ba2765c-6d08-445d-82bf-f81e78b2b262.png)'
  prefs: []
  type: TYPE_IMG
- en: Cloud Firestore
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Cloud Firestore is also a cloud-hosted, NoSQL database. You might be thinking
    that we already have Realtime Database, which is also a NoSQL database, so why
    do we need Firestore? The answer to this question is that Firestore can be considered
    as an advanced version of Realtime Database that provides live synchronization
    and offline support along with efficient data queries. It scales globally and
    lets you focus on developing apps instead of worrying about server management.
    It can be used with Android, iOS, and web platforms.
  prefs: []
  type: TYPE_NORMAL
- en: We can use both databases within the same Firebase application or project. Both
    are NoSQL databases, can store the same types of data, and have client libraries
    that work in a similar manner.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to try out Cloud Firestore while it''s in beta, use our guide to
    get started:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to the [https://console.firebase.google.com/](https://console.firebase.google.com/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Select your project, ``DemoProject``
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Click on the Database in the left section navigation and select the Cloud Firestore database:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](Images/ac60a4ce-21da-48e5-9af3-cae9d46762eb.png)'
  prefs: []
  type: TYPE_IMG
- en: Once we select the database, it prompts you to apply the security rules before
    creating the database.
  prefs: []
  type: TYPE_NORMAL
- en: Security rules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before creating a database and collection in Cloud Firestore, it prompts you
    to apply the security rules for our database.
  prefs: []
  type: TYPE_NORMAL
- en: 'Take a look at the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/cfec66de-5807-4a3d-9bc6-9367e52836c9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Here are some code example of Firestore rules:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Public**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '**Users**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '**Private**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Difference between Realtime Database and Cloud Firestore
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have seen that both Realtime Database and Cloud Firestore are NoSQL Databases
    with Realtime capabilities of syncing the data. So, let's see the difference between
    both of them based on the features.
  prefs: []
  type: TYPE_NORMAL
- en: Data model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Both databases are cloud-hosted, NoSQL databases, but the data model of both
    databases is different:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Realtime Database** | **Cloud Firestore** |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: Simple data is very easy to store.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Complex, hierarchical data is harder to organize at scale.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: Simple data is easy to store in documents, which are very similar to JSON.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Complex and hierarchical data is easier to organize at scale, using subcollections
    within documents.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Requires less denormalization and data flattening.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: Real-time and offline support
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Both have mobile-first, Realtime SDKs, and both support local data storage
    for offline-ready apps:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Realtime Database** | **Cloud Firestore** |'
  prefs: []
  type: TYPE_TB
- en: '| Offline support for mobile clients on iOS and Android only. | Offline support
    for iOS, Android, and web clients. |'
  prefs: []
  type: TYPE_TB
- en: Querying
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Retrieve, sort, and filter data from either database through queries:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Realtime Database** | **Cloud Firestore** |'
  prefs: []
  type: TYPE_TB
- en: '| **Deep queries with limited sorting and filtering functionality:**'
  prefs: []
  type: TYPE_NORMAL
- en: You can only sort or filter on a property, not sort and filter on a property,
    in a single query.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Queries are deep by default. They always return the entire subtree.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| **Indexed queries with compound sorting and filtering:**'
  prefs: []
  type: TYPE_NORMAL
- en: You can chain filters and combine filtering and sort on a property in a single
    query.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Write shallow queries for sub collections; you can query subcollections within
    a document instead of an entire collection, or even an entire document.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Queries are indexed by default. Query performance is proportional to the size
    of your result set, not your dataset.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: Reliability and performance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When we choose the database for our project, then reliability and performance
    are the most important parts that come to our mind:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Realtime Database** | **Cloud Firestore** |'
  prefs: []
  type: TYPE_TB
- en: '| **Realtime Database is a mature product:**'
  prefs: []
  type: TYPE_NORMAL
- en: Stability you'd expect from a battle-tested, tried-and-true product.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Very low latency, so it's a great option for frequent state-syncing.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Databases are limited to zonal availability in a single region.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| **Cloud Firestore is currently in beta:**'
  prefs: []
  type: TYPE_NORMAL
- en: Stability in a beta product is not always the same as that of a fully launched
    product.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Houses your data across multiple data centers in distinct regions, ensuring
    global scalability, and strong reliability.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When Cloud Firestore graduates from beta, it will have stronger reliability
    than Realtime Database.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: Scalability
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When we develop a large-scale application, we must know how much we can scale
    our database:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Realtime Database** | **Cloud Firestore** |'
  prefs: []
  type: TYPE_TB
- en: '| **Scaling requires sharding:**Scale to around 100,000 concurrent connections
    and 1,000 writes/second in a single database. Scaling beyond that requires sharing
    your data across multiple databases. | **Scaling will be automatic:**Scales completely
    automatically (after beta), which means that you don''t need to share your data
    across multiple instances. |'
  prefs: []
  type: TYPE_TB
- en: Security
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As per the security concern, every database has a different way of securing
    data from unauthorized users:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Source**: [https://firebase.google.com/docs/firestore/rtdb-vs-firestore?authuser=0](https://firebase.google.com/docs/firestore/rtdb-vs-firestore?authuser=0).'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Realtime Database** | **Cloud Firestore** |'
  prefs: []
  type: TYPE_TB
- en: '| **Cascading rules that require separate validation.**'
  prefs: []
  type: TYPE_NORMAL
- en: Firebase Database Rules are the only security option.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Read and write rules cascade.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You need to validate data separately using `.validate` in the rule.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| **Simpler, more powerful security for mobile, web, and server SDKs.**'
  prefs: []
  type: TYPE_NORMAL
- en: Mobile and web SDKs use Cloud Firestore Security Rules, and server SDKs use **Identity
    and Access Management** (**IAM**).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rules don't cascade unless you use a wildcard.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data validation happens automatically.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rules can constrain queries; if a query's results might contain data the user
    doesn't have access to, the entire query fails.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: As of now, Cloud Firestore is available in beta version; so, in this book, we
    are only focusing on Realtime Database.
  prefs: []
  type: TYPE_NORMAL
- en: Crash reporting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Crash reporting services help you diagnose problems in your Android and iOS
    mobile apps. It produces detailed reports of bugs and crashes and also sends them
    to the configured email address for quick notifications of the problems. It also
    provides a rich dashboard where you can monitor the overall health of your apps.
  prefs: []
  type: TYPE_NORMAL
- en: Authentication
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Firebase Authentication provides a simple and secure solution to manage user
    authentication for your mobile and web apps. It offers multiple methods to authenticate,
    including traditional form-based authentication using email and password, third-party
    providers such as Facebook or Twitter, and using your existing account system
    directly.
  prefs: []
  type: TYPE_NORMAL
- en: FirebaseUI authentication for web
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Firebase UI is completely open source and easily customizes to fit in with your
    app that includes some set of libraries. It allows you to quickly connect UI elements
    to the Firebase database for data storage, allowing views to be updated in Realtime,
    and it also provides the simple interfaces for common tasks such as displaying
    lists or collections of items.
  prefs: []
  type: TYPE_NORMAL
- en: FirebaseUI Auth is a recommended way to add authentication in Firebase app,
    or we can do it manually with Firebase Authentication SDK. It allows users to
    add a complete UI flow for signing in with email and passwords, phone numbers,
    and with most popular identity providers, including Google and Facebook Login.
  prefs: []
  type: TYPE_NORMAL
- en: FirebaseUI is available at [https://opensource.google.com/projects/firebaseui](https://opensource.google.com/projects/firebaseui).
  prefs: []
  type: TYPE_NORMAL
- en: We will explore more about Authentication in detail in the upcoming chapters.
  prefs: []
  type: TYPE_NORMAL
- en: Cloud Functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Cloud Functions allow you to have serverless apps; you can run your custom
    application backend logic without a server. Your custom functions can be executed
    on specific events that can be emitted by integrating the following Firebase products:'
  prefs: []
  type: TYPE_NORMAL
- en: Cloud Firestore triggers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Realtime Database triggers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Firebase Authentication triggers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Google Analytics for Firebase triggers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cloud Storage triggers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cloud Pub/Sub triggers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: HTTP Triggers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How does it work?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once you write and deploy a function, Google's servers start listening to those functions
    immediately, that is listening for events and running the function when it gets
    triggered. As the load of your app increases or decreases, it responds by rapidly
    scaling the number of virtual server instances needed to run your function faster.
    If the function is deleted, idle, or updated by you, then instances are cleaned
    up and replaced by new instances. In the case of deletion, it also removes the
    connection between functions and the event provider.
  prefs: []
  type: TYPE_NORMAL
- en: 'Given here are the events that are supported by Cloud Functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '`onWrite()`: It triggers when data is created, destroyed, or changed in the
    Realtime Database'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onCreate()`: It triggers when new data is created in the Realtime Database'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onUpdate()`: It triggers when data is updated in the Realtime Database'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onDelete()`: It triggers when data is deleted from the Realtime Database'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here''s a code sample of the cloud function `makeUppercase`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: After you write the cloud function, we can also test and monitor our functions.
  prefs: []
  type: TYPE_NORMAL
- en: Cloud Storage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Any mobile or web app will need a storage space that stores user-generated content
    such as documents, photos, or videos in a secure manner and scales well. Cloud
    Storage is designed with the same requirement in mind and helps you easily store
    and serve user-generated content. It provides a robust streaming mechanism for
    a best end-user experience.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s how we can configure Firebase Cloud Storage:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: The total length of `reference.fullPath` must be between 1 and 1,024 bytes,
    with no Carriage Return or Line Feed characters.
  prefs: []
  type: TYPE_NORMAL
- en: 'Avoid using #, [, ], *, or ?, as these do not work well with other tools such
    as Firebase Realtime Database.'
  prefs: []
  type: TYPE_NORMAL
- en: Hosting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Firebase provides a hosting service where you can easily deploy your web apps
    and static content with a simple command. Your web content will be deployed on
    a **global delivery network** (**GDN**), so it will be delivered fast regardless
    of end-user location. It provides a free SSL for your domain to serve the content
    over a secure connection. It also provides full versioning and releases management
    with one-click rollbacks.
  prefs: []
  type: TYPE_NORMAL
- en: Test lab for Android
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We test our Android app with a variety of devices running on different Android
    API versions to ensure that the end user can use our app with any Android device
    without any issues. However, it is not always possible to make all the different
    devices available to the testing team. To overcome such problems, we can use Test
    Lab, which provides cloudhosted infrastructure to test the apps with a variety
    of devices. It also makes it easy to collect test results with logs, videos, and
    screenshots. It also tests your app automatically to identify any possible crashes.
  prefs: []
  type: TYPE_NORMAL
- en: Performance Monitoring
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Firebase Performance Monitoring is specifically designed for iOS apps' performance
    testing. You can easily identify the performance bottlenecks of your app with
    performance traces. It also provides an automated environment to monitor HTTP
    requests, which helps identify network issues. Performance traces and network
    data gives better insights on how your app is performing.
  prefs: []
  type: TYPE_NORMAL
- en: The following category of products is used in terms of increasing your user
    base and also engaging them in a better way.
  prefs: []
  type: TYPE_NORMAL
- en: Google Analytics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Google Analytics is a very well-known product and I think no developer needs
    its introduction. Google Analytics for Firebase is a free analytics solution to
    measure the user engagement with your app. It also provides insights on app usage.
    Analytics reports help you understand the user behavior and hence better decisions
    can be made regarding app marketing and performance optimizations. You can generate
    reports based on different parameters, such as device types, custom events, user
    location, and other properties. Analytics can be configured for Android, iOS,
    and C++ and Unity apps.
  prefs: []
  type: TYPE_NORMAL
- en: Cloud Messaging
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Any Realtime app needs to send Realtime notifications. **Firebase Cloud Messaging**
    (**FCM**) provides a platform that helps you send the messages and notifications
    to the app user in Realtime. You can send hundreds of billions of messages per
    day for free across different platforms: Android, iOS, and web. We can also schedule
    the message delivery—immediately or in future. Notification messages are integrated
    with Firebase Analytics, so no coding is required to monitor user engagement.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Service Workers are supported on the following browsers:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Chrome: 50+'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Firefox: 44+'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Opera Mobile: 37+'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: The FCM SDK is supported only in HTTPS pages because of service workers, which
    are available only on HTTPS sites.
  prefs: []
  type: TYPE_NORMAL
- en: Dynamic Links
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Dynamic Links are URLs that help you redirect users to a specific content location
    in your mobile app or web application. If a user opens a dynamic link in a Desktop
    browser, the respective web page will be open, but if a user opens it up in your
    Android or iOS, the user will be redirected to the respective location in your
    Android or iOS. In addition, Dynamic Links work across the app; the user will
    be prompted to install the app if it is not installed yet. Dynamic Links increase
    the chances of conversion of mobile web users to native app users. Dynamic Links
    as part of online social networking campaigns also increase app installation and
    they are free forever.
  prefs: []
  type: TYPE_NORMAL
- en: Remote config
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: How cool is it to change the color theme of your app without redeploying it
    on the app store? Yes, it is possible to make on the fly changes to your app through
    Firebase Remote Config. You can manage the app behavior and appearance through
    server-side parameters. For example, you can give the certain discount on a specific
    group of audience based on the region without any redeployment of your app.
  prefs: []
  type: TYPE_NORMAL
- en: Invites
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Generally, everybody refers the good apps to their friends and colleagues. We
    do it by copying and pasting the app links. However, it doesn't always work, due
    to a number of reasons, for example, the link was for Android, so an iOS user
    can't open it. Firebase Invites make it very simple to share the content or app
    referrals via email or SMS. It works with Firebase Dynamic Links to give the users
    the best experience with their platform. You can associate the Dynamic Links to
    the content you want to share and Firebase SDK will handle it for you, giving
    the best user experience to your app users.
  prefs: []
  type: TYPE_NORMAL
- en: App indexing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For any app, it is equally important to get the app installed as well as to
    retain those users with some engagement. To re-engage the users who have installed
    your app, App indexing is a way to go. With Google search Integration, your app
    links will be shown whenever users will search for the content your app provides.
    Also, App Indexing helps you improve Google search ranking for your app links
    to show them in top search results and autocompletion.
  prefs: []
  type: TYPE_NORMAL
- en: AdMob
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The ultimate goal of the app developer is mostly to monetize it. AdMob helps
    you monetize your app through in-app advertising. You can have different kinds
    of ads, such as a banner ad, a video ad, or even a native ad. It allows you to
    show the ads from AdMob mediation platform or from Google Advertisers. AdMob mediation
    platform has Ad optimization strategy built to maximize your revenue. You can
    also see the monetization reports generated by AdMob to define your product strategy.
  prefs: []
  type: TYPE_NORMAL
- en: AdWords
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the best marketing strategies in today's world is online advertisements.
    Google AdWords helps you reach the potential customers or app users through ad
    campaigns. You can link your Google AdWords account to your Firebase project to
    define the specific target audiences to run your ad campaigns.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have an understanding of all the products of Firebase platform,
    we can mix and match these products to solve the common development issues and
    get the best product out in the market.
  prefs: []
  type: TYPE_NORMAL
- en: Getting started with Firebase
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we actually use Firebase in our sample app, we have to create our Firebase
    project through Firebase Console at [https://console.firebase.google.com/](https://console.firebase.google.com/).
    Opening this link will redirect you to the Google sign in the page where you will
    have to log in to your existing Google Account or by creating a new one.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you successfully log in to the Firebase console, you will see a dashboard
    like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/08005632-39e7-459f-8cd6-86e3f82d5a0a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We will create our first project by clicking on the Add project button. Once
    you click on the Add project button, it will show a pop-up window asking for the
    name of your project and the country of your organization. I will call it a `DemoProject`,
    set country to the United States, and click on the CREATE PROJECT button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/fb88bf3c-f082-42c6-8a9a-5f0d86f81235.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the project is created, you are good to go. You will be redirected to
    the project dashboard where you can configure the products/services you want to
    use in your project:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/33b39356-9f67-4973-905a-713fa55bf80d.png)'
  prefs: []
  type: TYPE_IMG
- en: Next, we will look at how we can integrate this Firebase project in a web app.
    Your web app can be any JavaScript Or NodeJS project.
  prefs: []
  type: TYPE_NORMAL
- en: First, we will create an example with plain JavaScript, and then we will move
    further and include React.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now you need to create a directory in your system with the name of `DemoProject`
    and inside it, you will create a couple of folders named `images`, `css`, and
    `js` (JavaScript) to make your application manageable. Once you have completed
    the folder structure, it will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/20b83747-0e37-4322-8a97-43205e7a46fc.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To integrate our Firebase project to our JavaScript app, we will need a code
    snippet that has to be added in our JavaScript code. To get it, click on Add Firebase
    to your web app and note the initialization code it has generated, which should
    look like the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/b7726c54-087e-4351-8c80-4d3303073cd3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'When we start making an application with ReactJS or plain JavaScript, we need
    to do some setup, which just involves an HTML page and includes a few files. First,
    we create a directory (folder) called `chapter1`. Open it up in any of your code
    editors. Create a new file called `index.html` directly inside it and add the
    following HTML5 Boilerplate code:'
  prefs: []
  type: TYPE_NORMAL
- en: For example, I have created a folder called `DemoProject`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a file called `index.html` in the folder
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In your HTML, add the code snippet we copied from Firebase console:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](Images/9545c90c-3af6-4f46-ab86-d5a785e6422c.png)I prefer and recommend
    that you use Visual Studio code editor for any type of JavaScript application
    development over the listed text editors because of its vast array of features.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we need to copy the Firebase code snippet into the HTML:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The following shows the data in our database, which we will fetch and display
    on the UI with JavaScript:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/9399942c-46ab-4989-8a92-8c56fae2a22a.png)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, we are using the `on()` method to retrieve the data.
    It takes the event type as `value` and then retrieves the snapshot of the data.
    When we add the `val()` method to the snapshot, we will get data to show in the
    `messageField`.
  prefs: []
  type: TYPE_NORMAL
- en: Let me give you a brief of the available events in Firebase that we can use
    to read the data.
  prefs: []
  type: TYPE_NORMAL
- en: 'As for now, in Database rules, we are allowing anyone to read and write the
    data in the database; otherwise, it shows the permission denied error. Consider
    this as an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '`{`'
  prefs: []
  type: TYPE_NORMAL
- en: '`   "rules": {`'
  prefs: []
  type: TYPE_NORMAL
- en: '`      ".read": true,`'
  prefs: []
  type: TYPE_NORMAL
- en: '`     ".write": true`'
  prefs: []
  type: TYPE_NORMAL
- en: '`    }`'
  prefs: []
  type: TYPE_NORMAL
- en: '`}`'
  prefs: []
  type: TYPE_NORMAL
- en: Firebase events
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you can see the preceding code, we have used the callback function that receives
    a DataSnapshot, which holds the data of snapshot. A snapshot is a picture of the
    data at a particular database reference at a single point in time, and if no data
    exists at the reference's location, the snapshot's value returns null.
  prefs: []
  type: TYPE_NORMAL
- en: value
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Recently, we have used this valuable event to read the data from Realtime Database.
    This event type will be triggered every time the data changes, and the callback
    function will retrieve all the data including children.
  prefs: []
  type: TYPE_NORMAL
- en: child_added
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This event type will be triggered once when we need to retrieve the list of
    items object and every time when a new object is added to our data as given path.
    Unlike `value`, which returns the entire object of that location, this event callback
    is passed as a snapshot that contains two arguments, which include the new child
    and previous child data.
  prefs: []
  type: TYPE_NORMAL
- en: For example, if you want to retrieve the data on each new comment added to your
    post in blogging app, you can use `child_added`.
  prefs: []
  type: TYPE_NORMAL
- en: child_changed
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `child_changed` event is triggered when any child object is changed.
  prefs: []
  type: TYPE_NORMAL
- en: child_removed
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `child_removed` event is triggered when an immediate child is removed. It
    is typically used in combination with `child_added` and `child_changed`. This
    event callback contains the data for the removed child.
  prefs: []
  type: TYPE_NORMAL
- en: child_moved
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `child_moved` event is triggered when you're working with ordered data like
    drag and drop in list items.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s take quick look at our full code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, open `index.html` in your browser, and let''s look at the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/e989b866-a12a-4233-b2ef-10bbe437fdd6.png)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding screen excerpt, we can see the database value on `MessageLabel`
    and JavaScript data representation in the browser console.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s extend this example further by taking the input value from the user
    and save those values in the database. Then, using the events, we will display
    that messages in the browser in Realtime:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/4d462cc7-ccf3-48cd-9fb5-5ecee3c675c5.png)'
  prefs: []
  type: TYPE_IMG
- en: As shown here, I have added a child node `messages` in the database. Now, we
    will add the form input in our HTML with the Save button and at the bottom, we
    will display those messages list in Realtime when the user submits.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s the HTML Code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we will create the `addData()` function to get and save the data to Firebase:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'In the next screenshot, I have added some messages to the input text:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/6a1d1ab3-f606-44ea-b526-dbe561ea0a6c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, we need to display those messages into HTML at the bottom of the messages
    title:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: We have used the `child_added` event, which means whenever any child is added
    in the messages on node, we need to take that value and update the messages list.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, open your browser and note the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/ae0a520c-16dd-43d8-9621-8ad9b5ffaba3.png)'
  prefs: []
  type: TYPE_IMG
- en: That looks great. We are now be able to see the message that users have submitted
    and our data is also getting updated with the new message in Realtime.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s take a quick look at how our code looks:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Our simple Hello World application and Hello World examples are looking great
    and working exactly as they should; so, let's review what we've learned in this
    chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'To begin with, we covered React and Firebase and how easy it is to set up the
    Firebase account and configuration. We also looked at the difference between Realtime
    Database and Firestore. Apart from that, we learned how simple it is to initialize
    Realtime Firebase Database with JavaScript and started building our first Hello
    World application. The Hello World application that we created demonstrates some
    of Firebase''s basic features, such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: About Realtime Database and Firestore
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Difference between Realtime Database and Firestore
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Firebase account creation and configuration with JavaScript App
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Firebase Events (value and `child_data`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Saving the values into the database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Read the values from the database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In [Chapter 2](77d4d4ec-e6e1-47c4-8b2a-8c9620341ba7.xhtml), *Integrate React
    App with Firebase*, let's build a React application with Firebase. We will explore
    some more React and Firebase fundamentals and introduce the project that we will
    build over the course of this book.
  prefs: []
  type: TYPE_NORMAL
