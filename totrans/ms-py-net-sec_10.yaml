- en: Interacting with the Vulnerabilities Scanner
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter covers `nessus` and `nexpose` as a vulnerabilities scanner and
    gives you reporting tools for the main vulnerabilities found in servers and web
    applications. Also, we cover how to use them programmatically from Python with
    the `nessrest` and `Pynexpose` modules.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding vulnerabilities
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding the `nessus` vulnerabilities scanner
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding the `nessrest` module that allows us to connect with a `Nessus`
    server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding the `nexpose` vulnerabilities scanner
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding the `Pynexpose` module that allows us to connect with a `Nexpose`
    server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Examples and source code for this chapter are available in the GitHub repository
    in the `chapter 10` folder: [https://github.com/PacktPublishing/Mastering-Python-for-Networking-and-Security](https://github.com/PacktPublishing/Mastering-Python-for-Networking-and-Security).
  prefs: []
  type: TYPE_NORMAL
- en: You will need to install a Python distribution on your local machine with at
    least 4 GB memory. In this chapter, we will use a **virtual machine** with which
    some tests related to port analysis and vulnerability detection will be carried
    out. It can be downloaded from the sourceforge page at [https://sourceforge.net/projects/metasploitable/files/Metasploitable2](https://sourceforge.net/projects/metasploitable/files/Metasploitable2).
  prefs: []
  type: TYPE_NORMAL
- en: To log in, you must use as **msfadmin** as the username and **msfadmin** as
    the password.
  prefs: []
  type: TYPE_NORMAL
- en: Introducing vulnerabilities
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we review concepts related to vulnerabilities and exploits,
    detailing the formats in which we can find a vulnerability.
  prefs: []
  type: TYPE_NORMAL
- en: Vulnerabilities and exploits
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we introduce a couple of definitions about vulnerabilities
    and exploits.
  prefs: []
  type: TYPE_NORMAL
- en: What is a vulnerability?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A vulnerability is an error on the code in our application or on the configuration
    that it produces that an attacker can use to change the behaviour of the application,
    such as injecting code or accessing private data.
  prefs: []
  type: TYPE_NORMAL
- en: 'A vulnerability also can be a weakness in the security of a system, which can
    be exploited to gain access to it. These can be exploited in two ways: remote
    and local. A remote attack is one that is made from a different machine than the
    one being attacked, while a local attack is one performed, as its name implies,
    locally on the machine to be attacked. The latter is based on a series of techniques
    to gain access and elevate privileges on that machine.'
  prefs: []
  type: TYPE_NORMAL
- en: What is an exploit?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As the software and hardware industry has developed, the products launched on
    the market have presented different vulnerabilities that have been found and exploited
    by attackers to compromise the security of the systems that use these products.
    For this, exploits have been developed, which are a piece of software, fragment
    of data, or a script that take advantage of an error, failure, or weakness, in
    order to cause unwanted behavior in a system or application, being able to force
    changes in its execution flow with the possibility of being controlled at will.
  prefs: []
  type: TYPE_NORMAL
- en: There are some vulnerabilities that are known by a small group of people, called
    zero-day vulnerabilities, which can be exploited through some exploit, also known
    by few people. This type of exploit is called exploit zero-day, which is an exploit
    that has not been made public. Attacks through these exploits occur as long as
    there is an exposure window; that is, since a weakness is found until the moment
    the provider remedies it. During this period, those who do not know of the existence
    of this problem are potentially vulnerable to an attack launched with this type
    of exploit.
  prefs: []
  type: TYPE_NORMAL
- en: Vulnerabilities format
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The vulnerabilities are uniquely identified by the CVE (Common Vulnerabilities
    and Exposures) code, which was created by MITRE Corporation. This code allows
    a user to understand in a more objective way a vulnerability in a program or system.
  prefs: []
  type: TYPE_NORMAL
- en: 'The identifier code has the format CVE - year - number mode; for example CVE-2018-7889
    identifies a vulnerability discovered in 2018 with identifier 7889. There are
    several databases in which you can find information about the different existing
    vulnerabilities, such as:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Common Vulnerabilities and Exposures – The Standard for Information Security
    Vulnerability Names: [https://cve.mitre.org/cve/](https://cve.mitre.org/cve/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: National Vulnerability Database (NVD) :[ http://nvd.nist.gov](http://nvd.nist.gov)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Usually, the published vulnerabilities are assigned their corresponding exploit,
    by way of a proof of concept. This allows the security administrators of an organization
    to prove the real existence of the vulnerability and measure its impact. There
    is a repository called Exploit Database ([http://www.exploit-db.com](http://www.exploit-db.com)),
    where you can find many exploits developed for different vulnerabilities.
  prefs: []
  type: TYPE_NORMAL
- en: CVE provides a database of vulnerabilities that is very useful, because in addition
    to analyzing the vulnerability in question, it offers a large number of references
    among which we often find direct links to exploits that attack this vulnerability.
  prefs: []
  type: TYPE_NORMAL
- en: 'As an example, if we look for "heartbleed" (vulnerability discovered in Open
    SSL version 1.0.1 that allows the attacker to read memory from servers and clients)
    in CVE, it offers us the following information:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/3d089e98-a3fb-45a0-a10e-699afb5c8cfd.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In this screenshot, we can see the details of the CVE-2014-0160 vulnerability:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/fc1ff3d2-e952-4011-b747-b481e9b89649.png)'
  prefs: []
  type: TYPE_IMG
- en: '**CVSS** (**Common Vulnerabilities Scoring System**) codes are also available,
    which is a public initiative sponsored by **FIRST** (**Forum for International
    Response Teams **– **[http://www.first.org](http://www.first.org)**) and allows
    us to solve the problem of the lack of a standard criterion that makes it possible
    to determine which vulnerabilities are more likely to be successfully exploited.
    The CVSS code introduces a system for scoring vulnerabilities, taking into account
    a set of standardized and easy-to-measure criteria.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Vulnerabilities in the scan report are assigned a severity of high, medium,
    or low. Severity is based on the Common Vulnerability Scoring System (CVSS) score
    assigned to the CVE. Most vulnerability scanners use the vendor’s score in order
    to capture the severity accurately:'
  prefs: []
  type: TYPE_NORMAL
- en: '**High:** The vulnerability has a CVSS base score that ranges from 8.0 to 10.0.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Medium: **The vulnerability has a CVSS base score that ranges from 4.0 to
    7.9.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Low:** The vulnerability has a CVSS base score that ranges from 0.0 to 3.9.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introducing the Nessus Vulnerabilities scanner
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we review the `Nessus` Vulnerabilities scanner, which gives
    you reporting tools for the main vulnerabilities we find in servers and web applications.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the Nessus Vulnerabilities scanner
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`Nessus` is a popular vulnerability-scanning tool – it is very robust, and
    convenient for large corporate networks. It has a client-server architecture,
    which allows scans to be more scalable, manageable, and precise. In addition,
    it employs several security elements that allow easy adaptation to security infrastructures,
    and has very robust encryption and authentication mechanisms.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To install it, go to [https://www.tenable.com/downloads/nessus](https://www.tenable.com/downloads/nessus)
    and follow the instructions for your operating system:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/48eebb10-53ae-4fc2-a5f5-961c36f24f7c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Also, you need to get the activation code from [https://www.tenable.com/products/nessus/activation-code](https://www.tenable.com/products/nessus/activation-code):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/551cb6bb-66a0-4866-b832-aaed11ac6e1e.png)'
  prefs: []
  type: TYPE_IMG
- en: Executing the Nessus Vulnerabilities scanner
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After the install, if you are running on Linux, you can execute the "`/etc/init.d/nessusd
    start`" command; this tool is accessed through the browser at [https://127.0.0.1:8834](https://127.0.0.1:8834)
    and then is entered the user account activated during the installation process.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once in the main interface of `Nessus`, you must enter the user''s access data.
    Then, you must access the **Scans tab**, which can be seen in the image and the
    option of **Basic Network Scan** is selected:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/8e46b41c-53a1-4572-9e15-492d447e0452.png)'
  prefs: []
  type: TYPE_IMG
- en: When this selection is made, the interface is opened where the scanner's objective
    must be established, be it a computer or a network, the scanner's policy and a
    name to be able to identify it. Once this data has been selected, the scanner
    is started and, once it is finished, we can see the result by selecting the analysis
    from the Scan tab.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the Scans tab, the objective to be scanned is added, and the process is
    executed. With the use of this tool, together with the search in the specialized
    databases, the different vulnerabilities present in the system to be attacked
    are obtained, which allows us to advance to the next phase: exploitation.'
  prefs: []
  type: TYPE_NORMAL
- en: Identifying vulnerabilities with Nessus
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This tool complements the process of identifying vulnerabilities through queries
    made in specialized databases. As a disadvantage of this type of automatic scanning,
    there are false positives, the non-detection of some vulnerabilities, and sometimes
    the classification of low priority to some whose exploitation allows access to
    the system.
  prefs: []
  type: TYPE_NORMAL
- en: With this analysis, you can observe the different vulnerabilities that could
    exploit any user, since they are accessible from the internet.
  prefs: []
  type: TYPE_NORMAL
- en: The report consists of an executive summary of the different existing vulnerabilities.
    This summary presents the different vulnerabilities ordered according to a color
    code based on their criticality. Each vulnerability is presented with its severity,
    the vulnerability code, and a brief description.
  prefs: []
  type: TYPE_NORMAL
- en: The result obtained after applying `Nessus` to the Metasploitable environment
    is illustrated in the next images.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here we can see a summary of all the vulnerabilities found, in order of criticality:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/59906823-523d-439a-9e96-e27a48defbe8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Here, we can see in detail all the vulnerabilities, together with a description
    of the level of criticality:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/25969e69-0780-4154-879f-cd46b74d4236.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The vulnerability called Debian OpenSSh/OpenSSL Package Random Number Generator
    Weakness is one of the most critical in the metasplolitable virtual machine. We
    can see that it has a score of 10 for CVSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/481c7fdb-83a8-4cb3-8c31-9aa236118818.png)'
  prefs: []
  type: TYPE_IMG
- en: Accessing the Nessus API with Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we review `python` modules for interacting with the `Nessus`
    Vulnerabilities scanner.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the nessrest Python module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`Nessus` provides an API to access it programmatically from Python. Tenable
    provides a REST API that we can use any library that allows HTTP requests. We
    also have the possibility to use specific libraries in Python, such as `nessrest`: [https://github.com/tenable/nessrest](https://github.com/tenable/nessrest).'
  prefs: []
  type: TYPE_NORMAL
- en: 'To use this module in our Python script, import it as we did for other modules
    after installation. We can install the `nessrest` module with pip:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: If we try to build the project from the github source code, the dependencies
    can be satisfied via
  prefs: []
  type: TYPE_NORMAL
- en: '`pip install -r requirements.txt`**:**'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/24c12ea5-00f8-4df1-84a2-a81d43f83012.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You can import the module in your script in this way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Interacting with the nesssus server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To interact with `nessus` from python, we have to initialize the scanner with
    the `ness6rest.Scanner` class, passing as url parameters, username and password
    to access the `nessus` server instance:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/e6383286-6e66-4763-8e98-f131e32a1598.png)We can use the Scanner
    init constructor method to initialize the connection with the server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'By default, we are running `Nessus` with a self-signed certificate, but we
    have the ability to disable SSL certificate-checking. For that, we need to pass
    another parameter, `insecure=True`, to the scanner initializer:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'In the module documentation, we can see the methods to scan a specific target,
    and with `scan_results()` we can get the scan results:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/c223199b-3b55-4819-a9a7-6abfff3d7261.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To add and launch a scan, specify the target with the `scan_add` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Introducing the Nexpose Vulnerabilities scanner
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we review the `Nexpose` Vulnerabilities scanner, which gives
    you reporting tools for the main vulnerabilities we can find in servers and web
    applications.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the Nexpose Vulnerabilities scanner
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`Nexpose` is a vulnerability scanner with a similar approach to `nessus`, since
    in addition to allowing us to run scans against multiple machines on the network,
    it also has a plugin system and an API that allows the integration of external
    code routines with the engine.'
  prefs: []
  type: TYPE_NORMAL
- en: '`NeXpose` is a tool developed by `Rapid7` for the scanning and discovery of
    vulnerabilities. There is a community version that can be used for non-commercial
    purposes and although it has limitations, we can use it to perform some tests.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To install the software, you must obtain a valid license from the official
    page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.rapid7.com/products/nexpose/download/](https://www.rapid7.com/products/nexpose/download/)'
  prefs: []
  type: TYPE_NORMAL
- en: Once we have installed `nexpose` through the official page, we can access the
    URL where the server is running.
  prefs: []
  type: TYPE_NORMAL
- en: 'Running the `nscsvc.bat` script, we will be running the server on localhost
    3780:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://localhost:3780/login.jsp](https://localhost:3780/login.jsp)'
  prefs: []
  type: TYPE_NORMAL
- en: The default installation on a Windows machine is done in the `C:\ProgramFiles\rapid7\nexpose\nsc`
  prefs: []
  type: TYPE_NORMAL
- en: path.
  prefs: []
  type: TYPE_NORMAL
- en: Executing the Nexpose Vulnerabilities scanner
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`Nexpose` allows you to analyze a specific IP, domain name, or server. First
    of all, it is necessary to create a set of resources, known as assets, which define
    all the elements auditable by the engine.'
  prefs: []
  type: TYPE_NORMAL
- en: 'For this, there is a series of resources, also called **Assets**, and within
    the asset, we define the site or domain we want to analyze:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/5c2f897a-3302-4ec2-9001-f2f2037db366.png)'
  prefs: []
  type: TYPE_IMG
- en: In our case, we are going to analyze the **metasploitable virtual machine** with
    the IP address 192.168.56.101**:**
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/7372ea22-8e32-4e1f-95cb-f2fea3cbe6d5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'At the end of the analysis, we see the results of the scan and the vulnerabilities
    that have been detected:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/ea956670-b26e-4344-917a-d094c841da5f.png)'
  prefs: []
  type: TYPE_IMG
- en: '`Nexpose` has an **API** that allows us to access its functionalities from
    other applications; in this way, it allows the automation of tasks that a user
    must carry out from the administration interface.'
  prefs: []
  type: TYPE_NORMAL
- en: The API documentation is available as a PDF at [http://download2.rapid7.com/download/NeXposev4/Nexpose_API_Guide.pdf](http://download2.rapid7.com/download/NeXposev4/Nexpose_API_Guide.pdf).
  prefs: []
  type: TYPE_NORMAL
- en: The available functions, together with detailed information on its use, can
    be found in the guide. In Python, there are some libraries that allow interaction
    with HTTP services in a fairly simple way. To simplify things, it is possible
    to use a script that is already responsible for consulting the functions available
    in a `nexpose` instance and returning a string with all the information about
    vulnerabilities in XML format.
  prefs: []
  type: TYPE_NORMAL
- en: Accessing the Nexpose API with Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we review the `pynexpose` module for interacting with the `Nexpose`
    Vulnerabilities scanner.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the pynexpose Python Module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`Nexpose` has an API that allows us to access its functionalities from external
    applications, in such a way that it enables the automation of the tasks that a
    user must carry out from the administration interface or from the `nexpose` console.
    The API allows any routine code to interact with a `nexpose` instance using HTTPS
    invocations to return functions in XML format. It is important to use the HTTPS
    protocol, not only for security reasons, but also because the API does not support
    calls using HTTP.'
  prefs: []
  type: TYPE_NORMAL
- en: In Python, we have the `Pynexpose` module, whose code can be found at [https://code.google.com/archive/p/pynexpose/](https://code.google.com/archive/p/pynexpose/).
  prefs: []
  type: TYPE_NORMAL
- en: The `Pynexpose` module allows programmatic access from Python to the vulnerability
    scanner located on a web server. For this, we have to communicate with said server
    through HTTP requests.
  prefs: []
  type: TYPE_NORMAL
- en: 'To connect from Python with the `nexpose` server, we use the `NeXposeServer`
    class that is inside the **pynexposeHttps.py** file. To do this, we call the constructor,
    passing through parameters the server''s IP address, the port, and the user and
    password with which we log in to the server administration web page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: We could create a **NexposeFrameWork** class that would initialize the connection
    with the server and create some methods to obtain the list of sites and vulnerabilities
    detected. To parse the vulnerability data in **XML** format, we need to use a
    **parser** such as **BeautifulSoup**.
  prefs: []
  type: TYPE_NORMAL
- en: In the `siteListing()` function, we are parsing the contents returned after
    executing the `site_listing()` function and subsequently all the **"sitesummary"**
    elements of the document have been located, which correspond to the information
    of each of the sites created on the server.
  prefs: []
  type: TYPE_NORMAL
- en: In the same way, in the **`vulnerabilityListing()`** function we are parsing
    the contents returned after executing the `vulnerability_listing()` function and
    once all the "**vulnerabilitysummary**" elements of the document have been located.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can find the following code in the **NexposeFrameWork.py** file inside
    the `nexpose` folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'In this code section, we can see the method that obtains the list of vulnerabilities;
    for each one it shows information related to the identifier, severity, title,
    and a description:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'In this code section, we can see our main program where we are initializing
    the parameters related to the IP address, port, user, and password for connecting
    to the `nexpose` server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Once an object has been created with the connection to the `nexpose` server,
    we can use some functions that allow us to list the sites created on the server,
    and list the analyses that have been performed and reports generated from the
    web interface. Finally, the `logout` function allows us to disconnect from the
    server and destroy the session that was created:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The functions created in the **NexposeFrameWork** class make use of the following
    methods from the `pynexpose` script. The `vulnerability_listing()` and `vulnerability_details()` methods
    are responsible for listing all detected vulnerabilities and returning the details
    of a particular vulnerability:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: These methods are defined in the **NeXposeServer** class within the **pynexposeHttps.py**
    file
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: One thing to keep in mind is that the replies returned are in XML format. A
    simple way of parsing and getting the information is to use the `BeautifulSoup`
    module along with the '`lxml`' parser.
  prefs: []
  type: TYPE_NORMAL
- en: In this way, we can parse the contents returned and look for the labels corresponding
    to the sites and the registered vulnerabilities.
  prefs: []
  type: TYPE_NORMAL
- en: '`Nexpose` is used to collect new data, discover new vulnerabilities, and –
    through real-time monitoring – can quickly resolve vulnerabilities that may arise
    at the network or application level. By using this tool, you can also transform
    your data into a detailed visualization so that you can focus resources and easily
    share each action with other IT departments in the organization.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this image, we can see the result of executing **NexposeFrameWork.py** over
    the metasploitble virtual machine:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/72f93933-ef40-4ec3-8050-3e57ae59311e.png)'
  prefs: []
  type: TYPE_IMG
- en: The results for this scan can be found in the attached `nexpose_log.txt` file.
  prefs: []
  type: TYPE_NORMAL
- en: These types of tools are capable of performing vulnerability scans at regular
    intervals, and comparing what you have discovered using the different tools with
    the previous results. In this way, we will highlight the changes to check whether
    they are real discoveries. The possible security problems are not ignored until
    they change their status, ideal for drastically reducing the time of vulnerability
    analysis.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the objectives of this chapter was to learn about the modules that allow
    us to connect with vulnerability scanners such as `nessus` and `nexpose`. We reviewed
    some definitions about vulnerabilities and exploits. After having obtained the
    services, ports, and operating system, among other elements, a search must be
    made of the their vulnerabilities in the different databases, which are available
    on the internet. However, there are also several tools that allow you to perform
    vulnerability scans automatically, such as `Nessus` and `Nexpose`.
  prefs: []
  type: TYPE_NORMAL
- en: In the next [chapter](4373c429-e683-4d3b-854c-06e033900ffa.xhtml), we will explore
    identifying server vulnerabilities in web applications with tools such as `w3a`
    and `fsqlmap` for detecting SQL vulnerabilities, and other tools for identifying
    server vulnerabilities such as ssl and heartbleed.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What are the main mechanisms for scoring vulnerabilities, taking into account
    a set of standardized and easy-to-measure criteria?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which package and class did we use to interact with `nessus` from python?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which method in the `nessrest` module launches a scan in a specify the target?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which method in the `nessrest` module gets the details of a scan in a specify
    the target?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the main class to connect from Python with the `nexpose` server?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are the methods responsible for listing all detected vulnerabilities and
    returning the details of a particular vulnerability in the `nexpose` server?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the name of the `Python` module that allows us to parse and get the
    information obtained from the `nexpose` server?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the name of the `Python` module that allows us to connect to the `NexPose`
    vulnerability scanner?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the name of the `Python` module that allows us to connect to the `Nessus`
    vulnerability scanner?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In what format does the `Nexpose` server return the responses to be processed
    from Python in a simple way?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In these links, you will find more information and the official documentation
    for `nessus` and `nexpose`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://docs.tenable.com/nessus/Content/GettingStarted.htm](https://docs.tenable.com/nessus/Content/GettingStarted.htm)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://nexpose.help.rapid7.com/docs/getting-started-with-nexpose](https://nexpose.help.rapid7.com/docs/getting-started-with-nexpose)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://help.rapid7.com/insightvm/en-us/api/index.html](https://help.rapid7.com/insightvm/en-us/api/index.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Today, there are a lot of tools for vulnerability scanning. Nessus, Seccubus,
    openvas, the well-known Nmap scanner, and even OWASP ZAP are some of the most
    popular for scanning vulnerabilities to networks and computer systems:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.seccubus.com/](https://www.seccubus.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://www.openvas.org/](http://www.openvas.org/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Open Vulnerability Assessment System (OpenVAS) is a free security-scanning platform,
    with most of its components licensed under the GNU General Public License (GNU
    GPL). The main component is available through several Linux packages or as a downloadable
    virtual application for testing/evaluation purposes.
  prefs: []
  type: TYPE_NORMAL
