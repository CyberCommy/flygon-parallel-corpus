- en: Chapter 11. Production-ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will discuss the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Picking a web stack
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hosting approaches
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deployment tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Monitoring
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Performance tips
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: So, you have developed and tested a fully functional web application in Django.
    Deploying this application can involve a diverse set of activities from choosing
    your hosting provider to performing installations. Even more challenging could
    be the tasks of maintaining a production site working without interruptions and
    handling unexpected bursts in traffic.
  prefs: []
  type: TYPE_NORMAL
- en: The discipline of system administration is vast. Hence, this chapter will cover
    a lot of ground. However, given the limited space, we will attempt to familiarize
    you with the various aspects of building a production environment.
  prefs: []
  type: TYPE_NORMAL
- en: Production environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Although, most of us intuitively understand what a production environment is,
    it is worthwhile to clarify what it really means. A production environment is
    simply one where end users use your application. It should be available, resilient,
    secure, responsive, and must have abundant capacity for current (and future) needs.
  prefs: []
  type: TYPE_NORMAL
- en: Unlike a development environment, the chance of real business damage due to
    any issues in a production environment is high. Hence, before moving to production,
    the code is moved to various testing and acceptance environments in order to get
    rid of as many bugs as possible. For easy traceability, every change made to the
    production environment must be tracked, documented, and made accessible to everyone
    in the team.
  prefs: []
  type: TYPE_NORMAL
- en: As an upshot, there must be no development performed directly on the production
    environment. In fact, there is no need to install development tools, such as a
    compiler or debugger in production. The presence of any additional software increases
    the attack surface of your site and could pose a security risk.
  prefs: []
  type: TYPE_NORMAL
- en: Most web applications are deployed on sites with extremely low downtime, say,
    large data centers running 24/7/365\. By designing for failure, even if an internal
    component fails, there is enough redundancy to prevent the entire system crashing.
    This concept of avoiding a **single point of** **failure** (**SPOF**) can be applied
    at every level—hardware or software.
  prefs: []
  type: TYPE_NORMAL
- en: Hence, it is crucial which collection of software you choose to run in your
    production environment.
  prefs: []
  type: TYPE_NORMAL
- en: Choosing a web stack
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: So far, we have not discussed the stack on which your application will be running
    on. Even though we are talking about it at the very end, it is best not to postpone
    such decisions to the later stages of the application lifecycle. Ideally, your
    development environment must be as close as possible to the production environment
    to avoid the "but it works on my machine" argument.
  prefs: []
  type: TYPE_NORMAL
- en: By a web stack, we refer to the set of technologies that are used to build a
    web application. It is usually depicted as a series of components, such as OS,
    database, and web server, all piled on top of one another. Hence, it is referred
    to as a stack.
  prefs: []
  type: TYPE_NORMAL
- en: We will mainly focus on open source solutions here because they are widely used.
    However, various commercial applications can also be used if they are more suited
    to your needs.
  prefs: []
  type: TYPE_NORMAL
- en: Components of a stack
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A production Django web stack is built using several kinds of application (or
    layers, depending on your terminology). While constructing your web stack, some
    of the choices you might need to make are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Which OS and distribution? For example: Debian, Red Hat, or OpenBSD.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Which WSGI server? For example: Gunicorn, uWSGI.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Which web server? For example: Apache, Nginx.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Which database? For example: PostgreSQL, MySQL, or Redis.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Which caching system? For example: Memcached, Redis.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Which process control and monitoring system? For example: Upstart, Systemd,
    or Supervisord.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'How to store static media? For example: Amazon S3, CloudFront.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There could be several more, and these choices are not mutually exclusive either.
    Some use several of these applications in tandem. For example, username availability
    might be looked up on Redis, while the primary database might be PostgreSQL.
  prefs: []
  type: TYPE_NORMAL
- en: There is no 'one size fits all' answer when it comes to selecting your stack.
    Different components have different strengths and weaknesses. Choose them only
    after careful consideration and testing. For instance, you might have heard that
    Nginx is a popular choice for a web server, but you might actually need Apache's
    rich ecosystem of modules or options.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes, the selection of the stack is based on various non-technical reasons.
    Your organization might have standardized on a particular operating system, say,
    Debian for all its servers. Or your cloud hosting provider might support only
    a limited set of stacks.
  prefs: []
  type: TYPE_NORMAL
- en: Hence, how you choose to host your Django application is one of the key factors
    in determining your production setup.
  prefs: []
  type: TYPE_NORMAL
- en: Hosting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When it comes to hosting, you need to make sure whether to go for a hosting
    platform such as Heroku or not. If you do not know much about managing a server
    or do not have anyone with that knowledge in your team, then a hosting platform
    is a convenient option.
  prefs: []
  type: TYPE_NORMAL
- en: Platform as a service
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A Platform as a Service (PaaS) is defined as a cloud service where the solution
    stack is already provided and managed for you. Popular platforms for Django hosting
    include Heroku, PythonAnywhere, and Google App Engine.
  prefs: []
  type: TYPE_NORMAL
- en: In most cases, deploying a Django application should be as simple as selecting
    the services or components of your stack and pushing out your source code. You
    do not have to perform any system administration or setup yourself. The platform
    is entirely managed.
  prefs: []
  type: TYPE_NORMAL
- en: Like most cloud services, the infrastructure can also scale on demand. If you
    need an additional database server or more RAM on a server, it can be easily provisioned
    from a web interface or the command line. The pricing is primarily based on your
    usage.
  prefs: []
  type: TYPE_NORMAL
- en: The bottom line with such hosting platforms is that they are very easy to set
    up and ideal for smaller projects. They tend to be more expensive as your user
    base grows.
  prefs: []
  type: TYPE_NORMAL
- en: Another downside is that your application might get tied to a platform or become
    difficult to port. For instance, Google App Engine is used to support only a non-relational
    database, which means you need to use `django-nonrel`, a fork of Django. This
    limitation is now somewhat mitigated with Google Cloud SQL.
  prefs: []
  type: TYPE_NORMAL
- en: Virtual private servers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A **virtual private server** (**VPS**) is a virtual machine hosted in a shared
    environment. From the developer's perspective, it would seem like a dedicated
    machine (hence, the word private) preloaded with an operating system. You will
    need to install and set up the entire stack yourself, though many VPS providers
    such as WebFaction and DigitalOcean offer easier Django setups.
  prefs: []
  type: TYPE_NORMAL
- en: If you are a beginner and can spare some time, I highly recommend this approach.
    You would be given root access, and you can build the entire stack yourself. You
    will not only understand how various pieces of the stack come together but also
    have full control in fine-tuning each individual component.
  prefs: []
  type: TYPE_NORMAL
- en: Compared to a PaaS, a VPS might work out to be more value for money, especially
    for high-traffic sites. You might be able to run several sites from the same server
    as well.
  prefs: []
  type: TYPE_NORMAL
- en: Other hosting approaches
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Even though hosting on a platform or VPS are by far the two most popular hosting
    options, there are plenty of other options. If you are interested in maximizing
    performance, you can opt for a bare metal server with colocation from providers,
    such as Rackspace.
  prefs: []
  type: TYPE_NORMAL
- en: On the lighter end of the hosting spectrum, you can save the cost by hosting
    multiple applications within Docker containers. Docker is a tool to package your
    application and dependencies in a virtual container. Compared to traditional virtual
    machines, a Docker container starts up faster and has minimal overheads (since
    there is no bundled operating system or hypervisor).
  prefs: []
  type: TYPE_NORMAL
- en: Docker is ideal for hosting micro services-based applications. It is becoming
    as ubiquitous as virtualization with almost every PaaS and VPS provider supporting
    them. It is also a great development platform since Docker containers encapsulate
    the entire application state and can be directly deployed to production.
  prefs: []
  type: TYPE_NORMAL
- en: Deployment tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once you have zeroed in on your hosting solution, there could be several steps
    in your deployment process, from running regression tests to spawning background
    services.
  prefs: []
  type: TYPE_NORMAL
- en: The key to a successful deployment process is automation. Since deploying applications
    involve a series of well-defined steps, it can be rightly approached as a programming
    problem. Once you have an automated deployment in place, you do not have to worry
    about deployments for fear of missing a step.
  prefs: []
  type: TYPE_NORMAL
- en: In fact, deployments should be painless and as frequent as required. For example,
    the Facebook team can release code to production up to twice a day. Considering
    Facebook's enormous user base and code base, this is an impressive feat, yet,
    it becomes necessary as emergency bug fixes and patches need to be deployed as
    soon as possible.
  prefs: []
  type: TYPE_NORMAL
- en: A good deployment process is also idempotent. In other words, even if you accidentally
    run the deployment tool twice, the actions should not be executed twice (or rather
    it should leave it in the same state).
  prefs: []
  type: TYPE_NORMAL
- en: Let's take a look at some of the popular tools for deploying Django applications.
  prefs: []
  type: TYPE_NORMAL
- en: Fabric
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Fabric is favored among Python web developers for its simplicity and ease of
    use. It expects a file named `fabfile.py` that defines all the actions (for deployment
    or otherwise) in your project. Each of these actions can be a local or remote
    shell command. The remote host is connected via SSH.
  prefs: []
  type: TYPE_NORMAL
- en: The key strength of Fabric is its ability to run commands on a set of remote
    hosts. For instance, you can define a `web` group that contains the hostnames
    of all web servers in production. You can run a Fabric action only against these
    web servers by specifying the web group name on the command line.
  prefs: []
  type: TYPE_NORMAL
- en: To illustrate the tasks involved in deploying a site using Fabric, let's take
    a look at a typical deployment scenario.
  prefs: []
  type: TYPE_NORMAL
- en: Typical deployment steps
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Imagine that you have a medium-sized web application deployed on a single web
    server. Git has been chosen as the version control and collaboration tool. A central
    repository that is shared with all users has been created in the form of a bare
    Git tree.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s assume that your production server has been fully set up. When you run
    your Fabric deployment command, say, `fab deploy`, the following scripted sequence
    of actions take place:'
  prefs: []
  type: TYPE_NORMAL
- en: Run all tests locally.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Commit all local changes to Git.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Push to a remote central Git repository.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Resolve merge conflicts, if any.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Collect the static files (CSS, images).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the static files to the static file server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At remote host, pull changes from a central Git repository.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At remote host, run (database) migrations.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At remote host, touch `app.wsgi` to restart WSGI server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The entire process is automatic and should be completed in a few seconds. By
    default, if any step fails, then the deployment gets aborted. Though not explicitly
    mentioned, there would be checks to ensure that the process is idempotent.
  prefs: []
  type: TYPE_NORMAL
- en: Note that Fabric is not yet compatible with Python 3, though the developers
    are in the process of porting it. In the meantime, you can run Fabric in a Python
    2.x virtual environment or check out similar tools, such as PyInvoke.
  prefs: []
  type: TYPE_NORMAL
- en: Configuration management
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Managing multiple servers in different states can be hard with Fabric. Configuration
    management tools such as Chef, Puppet, or Ansible try to bring a server to a certain
    desired state.
  prefs: []
  type: TYPE_NORMAL
- en: Unlike Fabric, which requires the deployment process to be specified in an imperative
    manner, these configuration-management tools are declarative. You just need to
    define the final state you want the server to be in, and it will figure out how
    to get there.
  prefs: []
  type: TYPE_NORMAL
- en: For example, if you want to ensure that the Nginx service is running at startup
    on all your web servers, then you need to define a server state having the Nginx
    service both running and starting on boot. On the other hand, with Fabric, you
    need to specify the exact steps to install and configure Nginx to reach such a
    state.
  prefs: []
  type: TYPE_NORMAL
- en: One of the most important advantages of configuration-management tools is that
    they are idempotent by default. Your servers can go from an unknown state to a
    known state, resulting in easier server configuration management and reliable
    deployment.
  prefs: []
  type: TYPE_NORMAL
- en: Among configuration-management tools, Chef and Puppet enjoy wide popularity
    since they were one of the earliest tools in this category. However, their roots
    in Ruby can make them look a bit unfamiliar to the Python programmer. For such
    folks, we have Salt and Ansible as excellent alternatives.
  prefs: []
  type: TYPE_NORMAL
- en: Configuration-management tools have a considerable learning curve compared to
    simpler tools, such as Fabric. However, they are essential tools for creating
    reliable production environments and are certainly worth learning.
  prefs: []
  type: TYPE_NORMAL
- en: Monitoring
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Even a medium-sized website can be extremely complex. Django might be one of
    the hundreds of applications and services running and interacting with each other.
    In the same way that the heart beat and other vital signs can be constantly monitored
    to assess the health of the human body, so are various metrics collected, analyzed,
    and presented in most production systems.
  prefs: []
  type: TYPE_NORMAL
- en: While logging keeps track of various events, such as arrival of a web request
    or an exception, monitoring usually refers to collecting key information periodically,
    such as memory utilization or network latency. However, differences get blurred
    at application level, such as, while monitoring database query performance, which
    might very well be collected from logs.
  prefs: []
  type: TYPE_NORMAL
- en: Monitoring also helps with the early detection of problems. Unusual patterns,
    such as spikes or a gradually increasing load, can be signs of bigger underlying
    problems, such as a memory leak. A good monitoring system can alert site owners
    of problems before they happen.
  prefs: []
  type: TYPE_NORMAL
- en: Monitoring tools usually need a backend service (sometimes called *agents*)
    to collect the statistics, and a frontend service to display dashboards or generate
    reports. Popular data collection backends include StatsD and Monit. This data
    can be passed to frontend tools, such as Graphite.
  prefs: []
  type: TYPE_NORMAL
- en: There are several hosted monitoring tools, such as New Relic and Status.io,
    which are easier to set up and use.
  prefs: []
  type: TYPE_NORMAL
- en: Measuring performance is another important role of monitoring. As we will soon
    see, any proposed optimization must be carefully measured and monitored before
    getting implemented.
  prefs: []
  type: TYPE_NORMAL
- en: Performance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Performance is a feature. Studies show how slow sites have an adverse effect
    on users, and therefore, revenue. For instance, tests at Amazon in 2007 revealed
    that for every 100 ms increase in load time of [amazon.com](http://amazon.com),
    the sales decreased by 1 percent.
  prefs: []
  type: TYPE_NORMAL
- en: Reassuringly, several high-performance web applications such as Disqus and Instagram
    have been built on Django. At Disqus, in 2013, they could handle 1.5 million concurrently
    connected users, 45,000 new connections per second, 165,000 messages/second, with
    less than 0.2 seconds latency end-to-end.
  prefs: []
  type: TYPE_NORMAL
- en: 'The key to improving performance is finding where the bottlenecks are. Rather
    than relying on guesswork, it is always recommended that you measure and profile
    your application to identify these performance bottlenecks. As Lord Kelvin would
    say:'
  prefs: []
  type: TYPE_NORMAL
- en: '*If you can''t measure it, you can''t improve it.*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: In most web applications, the bottlenecks are likely to be at the browser or
    the database end rather than within Django. However, to the user, the entire application
    needs to be responsive.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at some of the ways to improve the performance of a Django
    application. Due to widely differing techniques, the tips are split into two parts:
    frontend and backend.'
  prefs: []
  type: TYPE_NORMAL
- en: Frontend performance
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Django programmers might quickly overlook frontend performance because it deals
    with understanding how the client-side, usually a browser, works. However, to
    quote Steve Souders'' study of Alexa-ranked top 10 websites:'
  prefs: []
  type: TYPE_NORMAL
- en: '*80-90% of the end-user response time is spent on the frontend. Start there.     > *'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: A good starting point for frontend optimization would be to check your site
    with Google Page Speed or Yahoo! YSlow (commonly used as browser plugins). These
    tools will rate your site and recommend various best practices, such as minimizing
    the number of HTTP requests or gzipping the content.
  prefs: []
  type: TYPE_NORMAL
- en: As a best practice, your static assets, such as images, style sheets, and JavaScript
    files must not be served through Django. Rather a static file server, cloud storages
    such as Amazon S3 or a **content** **delivery network** (**CDN**) should serve
    them for better performance.
  prefs: []
  type: TYPE_NORMAL
- en: 'Even then, Django can help you improve frontend performance in a number of
    ways:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Cache infinitely with** `CachedStaticFilesStorage`: The fastest way to load
    static assets is to leverage the browser cache. By setting a long caching time,
    you can avoid re-downloading the same asset again and again. However, the challenge
    is to know when not to use the cache when the content changes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CachedStaticFilesStorage` solves this elegantly by appending the asset''s
    MD5 hash to its filename. This way, you can extend the TTL of the cache for these
    files infinitely.'
  prefs: []
  type: TYPE_NORMAL
- en: To use this, set the `STATICFILES_STORAGE` to `CachedStaticFilesStorage` or,
    if you have a custom storage, inherit from `CachedFilesMixin`. Also, it is best
    to configure your caches to use the local memory cache backend to perform the
    static filename to its hashed name lookup.
  prefs: []
  type: TYPE_NORMAL
- en: '**Use a static asset manager**: An asset manager can preprocess your static
    assets to minify, compress, or concatenate them, thereby reducing their size and
    minimizing requests. It can also preprocess them enabling you to write them in
    other languages, such as **CoffeeScript** and **Syntactically awesome stylesheets**
    (**Sass**). There are several Django packages that offer static asset management
    such as `django-pipeline` or `webassets`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Backend performance
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The scope of backend performance improvements covers your entire server-side
    web stack, including database queries, template rendering, caching, and background
    jobs. You will want to extract the highest performance from them, since it is
    entirely within your control.
  prefs: []
  type: TYPE_NORMAL
- en: For quick and easy profiling needs, `django-debug-toolbar` is quite handy. We
    can also use Python profiling tools, such as the `hotshot` module for detailed
    analysis. In Django, you can use one of the several profiling middleware snippets
    to display the output of hotshot in the browser.
  prefs: []
  type: TYPE_NORMAL
- en: A recent live-profiling solution is `django-silk`. It stores all the requests
    and responses in the configured database, allowing aggregated analysis over an
    entire user session, say, to find the worst-performing views. It can also profile
    any piece of Python code by adding a decorator.
  prefs: []
  type: TYPE_NORMAL
- en: As before, we will take a look at some of the ways to improve backend performance.
    However, considering they are vast topics in themselves, they have been grouped
    into sections. Many of these have already been covered in the previous chapters
    but have been summarized here for easy reference.
  prefs: []
  type: TYPE_NORMAL
- en: Templates
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As the documentation suggests, you should enable the cached template loader
    in production. This avoids the overhead of reparsing and recompiling the templates
    each time it needs to be rendered. The cached template is compiled the first time
    it is needed and then stored in memory. Subsequent requests for the same template
    are served from memory.
  prefs: []
  type: TYPE_NORMAL
- en: If you find that another templating language such as Jinja2 renders your page
    significantly faster, then it is quite easy to replace the built-in Django template
    language. There are several libraries that can integrate Django and Jinja2, such
    as `django-jinja`. Django 1.8 is expected to support multiple templating engines
    out of the box.
  prefs: []
  type: TYPE_NORMAL
- en: Database
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Sometimes, the Django ORM can generate inefficient SQL code. There are several
    optimization patterns to improve this:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Reduce database hits with** `select_related`: If you are using a `OneToOneField`
    or a Foreign Key relationship, in forward direction, for a large number of objects,
    then `select_related()` can perform a SQL join and reduce the number of database
    hits.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Reduce database hits with** `prefetch_related`: For accessing a `ManyToManyField`
    method or, a Foreign Key relation, in reverse direction, or a Foreign Key relation
    in a large number of objects, consider using `prefetch_related` to reduce the
    number of database hits.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fetch only needed fields with values or** `values_list`: You can save time
    and memory usage by limiting queries to return only the needed fields and skip
    model instantiation using `values()` or `values_list()`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Denormalize models**: Selective denormalization improves performance by reducing
    joins at the cost of data consistency. It can also be used for precomputing values,
    such as the sum of fields or the active status report into an extra column. Compared
    to using annotated values in queries, denormalized fields are often simpler and
    faster.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Add an Index**: If a non-primary key gets searched a lot in your queries,
    consider setting that field''s `db_index` to True in your model definition.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Create, update, and delete multiple rows at once**: Multiple objects can
    be operated upon in a single database query with the `bulk_create()`, `update()`,
    and `delete()` methods. However, they come with several important caveats such
    as skipping the `save()` method on that model. So, read the documentation carefully
    before using them.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As a last resort, you can always fine-tune the raw SQL statements using proven
    database performance expertise. However, maintaining the SQL code can be painful
    over time.
  prefs: []
  type: TYPE_NORMAL
- en: Caching
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Any computation that takes time can take advantage of caching and return precomputed
    results faster. However, the problem is stale data or, often, quoted as one of
    the hardest things in computer science, cache invalidation. This is commonly spotted
    when, despite refreshing the page, a YouTube video's view count doesn't change.
  prefs: []
  type: TYPE_NORMAL
- en: Django has a flexible cache system that allows you to cache anything from a
    template fragment to an entire site. It allows a variety of pluggable backends
    such as file-based or data-based backed storage.
  prefs: []
  type: TYPE_NORMAL
- en: Most production systems use a memory-based caching system such as Redis or Memcached.
    This is purely because volatile memory is many orders of magnitude faster than
    disk-based storage.
  prefs: []
  type: TYPE_NORMAL
- en: Such cache stores are ideal for storing frequently used but ephemeral data,
    like user sessions.
  prefs: []
  type: TYPE_NORMAL
- en: Cached session backend
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'By default, Django stores its user session in the database. This usually gets
    retrieved for every request. To improve performance, the session data can be stored
    in memory by changing the `SESSION_ENGINE` setting. For instance, add the following
    in `settings.py` to store the session data in your cache:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Since some cache storages can evict stale data leading to the loss of session
    data, it is preferable to use Redis or Memcached as the session store, with memory
    limits high enough to support the maximum number of active user sessions.
  prefs: []
  type: TYPE_NORMAL
- en: Caching frameworks
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: For basic caching strategies, it might be easier to use a caching framework.
    Two popular ones are `django-cache-machine` and `django-cachalot`. They can handle
    common scenarios, such as automatically caching results of queries to avoid database
    hits every time you perform a read.
  prefs: []
  type: TYPE_NORMAL
- en: The simplest of these is Django-cachalot, a successor of Johnny Cache. It requires
    very little configuration. It is ideal for sites that have multiple reads and
    infrequent writes (that is, the vast majority of applications), it caches all
    Django ORM read queries in a consistent manner.
  prefs: []
  type: TYPE_NORMAL
- en: Caching patterns
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Once your site starts getting heavy traffic, you will need to start exploring
    several caching strategies throughout your stack. Using Varnish, a caching server
    that sits between your users and Django, many of your requests might not even
    hit the Django server.
  prefs: []
  type: TYPE_NORMAL
- en: Varnish can make pages load extremely fast (sometimes, hundreds of times faster
    than normal). However, if used improperly, it might serve static pages to your
    users. Varnish can be easily configured to recognize dynamic pages or dynamic
    parts of a page such as a shopping cart.
  prefs: []
  type: TYPE_NORMAL
- en: '**Russian doll caching**, popular in the Rails community, is an interesting
    template cache-invalidation pattern. Imagine a user''s timeline page with a series
    of posts each containing a nested list of comments. In fact, the entire page can
    be considered as several nested lists of content. At each level, the rendered
    template fragment gets cached.'
  prefs: []
  type: TYPE_NORMAL
- en: So, if a new comment gets added to a post, only the associated post and timeline
    caches get invalidated. Notice that we first invalidate the cache content directly
    outside the changed content and move progressively until at the outermost content.
    The dependencies between models need to be tracked for this pattern to work.
  prefs: []
  type: TYPE_NORMAL
- en: Another common caching pattern is to cache forever. Even after the content changes,
    the user might get served stale data from the cache. However, an asynchronous
    job, such as, a Celery job, also gets triggered to update the cache. You can also
    periodically warm the cache at a certain interval to refresh the content.
  prefs: []
  type: TYPE_NORMAL
- en: Essentially, a successful caching strategy identifies the static and dynamic
    parts of a site. For many sites, the dynamic parts are the user-specific data
    when you are logged in. If this is separated from the generally available public
    content, then implementing caching becomes easier.
  prefs: []
  type: TYPE_NORMAL
- en: Don't treat caching as integral to the working of your site. The site must fall
    back to a slower but working state even if the caching system breaks down.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Cranos**'
  prefs: []
  type: TYPE_NORMAL
- en: It was six in the morning and the S.H.I.M. building was surrounded by a grey
    fog. Somewhere inside, a small conference room had been designated the "War Room."
    For the last three hours, the SuperBook team had been holed up here diligently
    executing their pre-go-live plan.
  prefs: []
  type: TYPE_NORMAL
- en: 'More than 30 users had logged on the IRC chat room #superbookgolive from various
    parts of the world. The chat log was projected on a giant whiteboard. When the
    last item was struck off, Evan glanced at Steve. Then, he pressed a key triggering
    the deployment process.'
  prefs: []
  type: TYPE_NORMAL
- en: The room fell silent as the script output kept scrolling off the wall. One error,
    Steve thought—just one error can potentially set them back by hours. Several seconds
    later, the command prompt reappeared. It was live! The team erupted in joy. Leaping
    from their chairs they gave high-fives to each other. Some were crying tears of
    happiness. After weeks of uncertainty and hard work, it all seemed surreal.
  prefs: []
  type: TYPE_NORMAL
- en: However, the celebrations were short-lived. A loud explosion from above shook
    the entire building. Steve knew the second breach had begun. He shouted to Evan,
    "Don't turn on the beacon until you get my message," and sprinted out of the room.
  prefs: []
  type: TYPE_NORMAL
- en: As Steve hurried up the stairway to the rooftop, he heard the sound of footsteps
    above him. It was Madam O. She opened the door and flung herself in. He could
    hear her screaming "No!" and a deafening blast shortly after that.
  prefs: []
  type: TYPE_NORMAL
- en: By the time he reached the rooftop, he saw Madam O sitting with her back against
    the wall. She clutched her left arm and was wincing in pain. Steve slowly peered
    around the wall. At a distance, a tall bald man seemed to be working on something
    with the help of two robots.
  prefs: []
  type: TYPE_NORMAL
- en: '"He looks like…." Steve broke off, unsure of himself.'
  prefs: []
  type: TYPE_NORMAL
- en: '"Yes, it is Hart. Rather I should say he is Cranos now."'
  prefs: []
  type: TYPE_NORMAL
- en: '"What?"'
  prefs: []
  type: TYPE_NORMAL
- en: '"Yes, a split personality. A monster that laid hidden in Hart''s mind for years.
    I tried to help him control it. Many years back, I thought I had stopped it from
    ever coming back. However, all this stress took a toll on him. Poor thing, if
    only I could get near him."'
  prefs: []
  type: TYPE_NORMAL
- en: Poor thing indeed—he nearly tried to kill her. Steve took out his mobile and
    sent out a message to turn on the beacon. He had to improvise.
  prefs: []
  type: TYPE_NORMAL
- en: With his hands high in the air and fingers crossed, he stepped out. The two
    robots immediately aimed directly at him. Cranos motioned them to stop.
  prefs: []
  type: TYPE_NORMAL
- en: '"Well, who do we have here? Mr. SuperBook himself. Did I crash into your launch
    party, Steve?"'
  prefs: []
  type: TYPE_NORMAL
- en: '"It was our launch, Hart."'
  prefs: []
  type: TYPE_NORMAL
- en: '"Don''t call me that," growled Cranos. "That guy was a fool. He wrote the Sentinel
    code but he never understood its potential. I mean, just look at what Sentinels
    can do—unravel every cryptographic algorithm known to man. What happens when it
    enters an intergalactic network?"'
  prefs: []
  type: TYPE_NORMAL
- en: The hint was not lost on Steve. "SuperBook?" he asked slowly.
  prefs: []
  type: TYPE_NORMAL
- en: Cranos let out a malicious grin. Behind him, the robots were busy wiring into
    S.H.I.M.'s core network. "While your SuperBook users will be busy playing SuperVille,
    the tentacles of Sentinel will spread into new unsuspecting worlds. Critical systems
    of every intelligent species will be sabotaged. The Supers will have to bow to
    a new intergalactic supervillain—Cranos."
  prefs: []
  type: TYPE_NORMAL
- en: As Cranos was delivering this extended monologue, Steve noticed a movement in
    the corner of his eyes. It was Acorn, the super-intelligent squirrel, scurrying
    along the right edge of the rooftop. He also spotted Hexa hovering strategically
    on the other side. He nodded at them.
  prefs: []
  type: TYPE_NORMAL
- en: Hexa levitated a garbage bin and flung it towards the robots. Acorn distracted
    them with high-pitched whistles. "Kill them all!" Cranos said irritably. As he
    turned to watch his intruders, Steve fished out his phone, dialed into FaceTime
    and held it towards Cranos.
  prefs: []
  type: TYPE_NORMAL
- en: '"Say hello to your old friend, Cranos," said Steve.'
  prefs: []
  type: TYPE_NORMAL
- en: Cranos turned to face the phone and the screen revealed Madam O's face. With
    a smile, she muttered under her breath, "Taradiddle Bumfuzzle!"
  prefs: []
  type: TYPE_NORMAL
- en: The expression on Cranos' face changed instantly. The seething anger disappeared.
    He now looked like a man they had once known.
  prefs: []
  type: TYPE_NORMAL
- en: '"What happened?" asked Hart confused.'
  prefs: []
  type: TYPE_NORMAL
- en: '"We thought we had lost you," said Madam O over the phone. "I had to use hypnotic
    trigger words to bring you back."'
  prefs: []
  type: TYPE_NORMAL
- en: Hart took a moment to survey the scene around him. Then, he slowly smiled and
    nodded at her.
  prefs: []
  type: TYPE_NORMAL
- en: '----------------------------------------------------'
  prefs: []
  type: TYPE_NORMAL
- en: '**One Year Later**'
  prefs: []
  type: TYPE_NORMAL
- en: Who would have guessed Acorn would turn into an intergalactic singing sensation
    in less than a year? His latest album "Acorn Unplugged" debuted at the top of
    Billboard's Top 20 chart. He had thrown a grand party in his new white mansion
    overlooking a lake. The guest list included superheroes, pop stars, actors, and
    celebrities of all sorts.
  prefs: []
  type: TYPE_NORMAL
- en: '"So, there was a singer in you after all," said Captain Obvious holding a martini.'
  prefs: []
  type: TYPE_NORMAL
- en: '"I guess there was," replied Acorn. He looked dazzling in a golden tuxedo with
    all sorts of bling-bling.'
  prefs: []
  type: TYPE_NORMAL
- en: Steve appeared with Hexa in tow—who looked ravishing in a flowing silver gown.
  prefs: []
  type: TYPE_NORMAL
- en: '"Hey Steve, Hexa.... It has been a while. Is SuperBook still keeping you late
    at work, Steve?"'
  prefs: []
  type: TYPE_NORMAL
- en: '"Not so much these days. Knock on wood," replied Hexa with a smile.'
  prefs: []
  type: TYPE_NORMAL
- en: '"Ah, you guys did a fantastic job. I owe a lot to SuperBook. My first single,
    ''Warning: Contains Nuts'', was a huge hit in the Tucana galaxy. They watched
    the video on SuperBook more than a billion times!"'
  prefs: []
  type: TYPE_NORMAL
- en: '"I am sure every other superhero has a good thing to say about SuperBook too.
    Take Blitz. His AskMeAnything interview won back the hearts of his fans. They
    were thinking that he was on experimental drugs all this time. It was only when
    he revealed that his father was Hurricane that his powers made sense."'
  prefs: []
  type: TYPE_NORMAL
- en: '"By the way, how is Hart doing these days?"'
  prefs: []
  type: TYPE_NORMAL
- en: '"Much better," said Steve. "He got professional help. The sentinels were handed
    back to S.H.I.M. They are developing a new quantum cryptographic algorithm that
    will be much more secure."'
  prefs: []
  type: TYPE_NORMAL
- en: '"So, I guess we are safe until the next supervillain shows up," said Captain
    Obvious hesitantly.'
  prefs: []
  type: TYPE_NORMAL
- en: '"Hey, at least the beacon works," said Steve, and the crowd burst into laughter.'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this final chapter, we looked at various approaches to make your Django application
    stable, reliable, and fast. In other words, to make it production-ready. While
    system administration might be an entire discipline in itself, a fair knowledge
    of the web stack is essential. We explored several hosting options, including
    PaaS and VPS.
  prefs: []
  type: TYPE_NORMAL
- en: We also looked at several automated deployment tools and a typical deployment
    scenario. Finally, we covered several techniques to improve frontend and backend
    performance.
  prefs: []
  type: TYPE_NORMAL
- en: The most important milestone of a website is finishing and taking it to production.
    However, it is by no means the end of your development journey. There will be
    new features, alterations, and rewrites.
  prefs: []
  type: TYPE_NORMAL
- en: Every time you revisit the code, use the opportunity to take a step back and
    find a cleaner design, identify a hidden pattern, or think of a better implementation.
    Other developers, or sometimes your future self, will thank you for it.
  prefs: []
  type: TYPE_NORMAL
