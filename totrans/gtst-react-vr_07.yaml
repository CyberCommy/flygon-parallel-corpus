- en: Sitting Down with a (Virtual) Teapot
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the last chapter, we found out a lot about polygons and how to use them in
    real-time graphics. We will continue the work with polygons, and learn more about
    texturing them.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will learn the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Basics of how to use Blender
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to apply basic UV texture mapping
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to export texture maps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to create an MTL file to properly show real-time OBJ texturing and materials
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pulling it all together for our teapot gallery
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Blender is just one of many polygon modelers that you can use to make virtual
    objects for use with WebVR. If you are already familiar with the concepts of polygon
    modeling, and creating and editing UV maps, you wouldn't really need most of this
    chapter. Once we do the UV mapping, we import the model into the world. I've also
    placed the static files for this chapter at: [http://bit.ly/VR_Chap7](http://bit.ly/VR_Chap7)
    so you can download them instead of building them.
  prefs: []
  type: TYPE_NORMAL
- en: UV modeling can be tedious. You won't hurt my feelings if you just download
    the files. Please skim through the following though, as we build these models
    we will put them in the virtual world.
  prefs: []
  type: TYPE_NORMAL
- en: The teapot in Blender
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To learn how to UV map, let's put a teapot in Blender. Today, this will work
    pretty well, but normally a teapot wouldn't fit in a Blender.
  prefs: []
  type: TYPE_NORMAL
- en: You can download Blender at [blender.org](http://www.blender.org). While there,
    I highly recommend the tutorials on the site at [bit.ly/BlendToots](http://bit.ly/BlendToots).
    Packt also has quite a few good books on Blender. You can find these at: [http://bit.ly/BlenderBooks](http://bit.ly/BlenderBooks).
    You might be a little confused or frustrated with basic cursor movements, and
    selecting if you haven't been through these tutorials; seeing an animation of
    the cursor moving helps more than writing about it would. In particular, please
    watch the cursor selection tutorials under *Getting Started* at: **[http://bit.ly/BlendStart](http://bit.ly/BlendStart).**
  prefs: []
  type: TYPE_NORMAL
- en: 'To start texturing, we will use the venerable Utah teapot by Martin Newell.
    It is one of the more famous "test models" for computer graphics. This is the
    original Utah teapot, currently on display at the Computer History Museum in Mountain
    View, California (courtesy of Marshall Astor):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/cea99f22-c6bf-43ba-9d63-a22b5c08e0eb.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The computer graphics version was *squished* in a demo and the squish stuck.
    You can read more about this at: [http://bit.ly/DrBlinn](http://bit.ly/DrBlinn).
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s the teapot in Blender. You can get here by turning on extra shapes
    in the preferences:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the menu File, then User Preferences (File->User Preferences), and
    then click on Extra Objects:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/d9c25243-15ab-461b-b28f-c76b97fc0164.png)'
  prefs: []
  type: TYPE_IMG
- en: Don't forget to then click the button at the bottom of the screen,  Save User
    Settings, or the objects won't be there the next time you go in. Once you save,
    close the Blender User Preferences window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Then, on the menu at the bottom of the 3D window, click on Add->Mesh->Extras->Teapot+:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/7924a823-1062-4737-8076-f3c7e934e84a.png)'
  prefs: []
  type: TYPE_IMG
- en: Once you do that, for instructional purposes only, choose a resolution of 3
    on the pane on the bottom left hand side as shown here.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/60d476ca-e3a2-4cd4-83da-3507fe2e2404.png)'
  prefs: []
  type: TYPE_IMG
- en: It is pretty neat that you can increase the resolution of the teapot; this would
    have saved me an hour of poking around on the internet while writing this chapter,
    had I noticed that earlier. We change it to 3 to make the polygons bigger, which
    will be a lot easier to click on while doing this tutorial.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, you want to click on the teapot (left-click) in the 3D window to select
    it; the teapot will then have an orange outline. Then get back to Edit Mode by
    clicking on the word Object Mode next to the menu item Object, then select Edit
    Mode:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/565c43a6-b8eb-47d2-8590-2893b57c37a4.png)'
  prefs: []
  type: TYPE_IMG
- en: Once you are in Edit Mode, we'll need to be able to see the UV map while we
    select polygons on the teapot. Initially, there won't be a UV map though; keep
    following and we'll create one.
  prefs: []
  type: TYPE_NORMAL
- en: With your mouse over the slight line above the timeline window, the bottom window
    of the screen (the area circled in red in the following screenshot), drag the
    window *up*. This will make enough room for the window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/1218c37e-12e8-4ad4-a848-0e84e3687ce4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We aren''t doing animations, so we don''t need that window, we''ll change it
    to a UV display. To do this, change the timeline display to show UV map information
    by clicking (red arrow) on the small icon of a clock face (wow, remember analog
    clocks?), and choose UV/Image Editor:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/58e2c261-e51d-4359-b0a2-456fd1651d1f.png)This is just one way of
    changing your window layouts. One of the confusing things with Blender is that
    you can really mess up your UI by accidentally clicking on a few things, but one
    of the great things is that you can make windows, subwindows, pull outs, shelves,
    and much more with a few clicks of the mouse. The way I just showed you is the
    most straightforward way for teaching, but for real work, you should customize
    the windows the way you want to.'
  prefs: []
  type: TYPE_NORMAL
- en: Once you have changed this view, note that you can zoom in, pan, and move the
    window around just like any other Blender window. For how to zoom, pan, and so
    on. you should watch the tutorial video files located at: [http://bit.ly/BlendStart](http://bit.ly/BlendStart)
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/c7a5a7e1-be11-42f2-b8da-ba53509765a2.png)'
  prefs: []
  type: TYPE_IMG
- en: So, we can see what our texture looks like with our model; click on Open and
    find a texture file you want to map onto your teapot (or model). I'm using `ButcherTile_Lettered.jpg`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once you''ve done that, do the first UV unwrapping! In the upper window''s
    menu, click on Mesh->UV Unwrap->Unwrap, like so:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/fd838f50-b071-4ba8-9552-fc1641598535.png)'
  prefs: []
  type: TYPE_IMG
- en: In the bottom window, it'll show you how it has unwrapped the texture.
  prefs: []
  type: TYPE_NORMAL
- en: It looks terrible. Your results may vary with different models.
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/f14a37bb-044d-4182-975b-3f2ea1dd80ed.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Why is this UV map terrible? From a real-time graphics'' standpoint, it''s
    not bad; it packs all the polygons onto just one texture map, which will help
    with video card RAM:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/f315f1e9-805d-42af-b1fb-aa20b20bc79f.png)'
  prefs: []
  type: TYPE_IMG
- en: For some objects, it may be fine. If you look at the upper-right and lower-right,
    we see the spout and handle, and they look odd. It may look a little funny rendered;
    let's take a look at what it looks like. To do that, we have to assign some textures
    and then export the teapot. (We will cover exporting in a bit; for now, we just
    need to see that we have additional work to do in Blender.)
  prefs: []
  type: TYPE_NORMAL
- en: Note that you can get a quick look by rendering inside Blender, but this may
    disappoint you, as Blender will almost certainly render your model totally differently.
    The overall colors and textures will be the same, but the more subtle (and important)
    texture details that React VR, and WebGL are capable of will be lost (or better,
    with an offline, non real-time renderer); conversely, if you really work with
    Blender or look better, rendering can produce phenomenal work.
  prefs: []
  type: TYPE_NORMAL
- en: For example, in Blender, using the cycles renderer, it took me 11.03 seconds
    to render our teapot.
  prefs: []
  type: TYPE_NORMAL
- en: In React VR, to maintain at least 60 frames per second, this has to happen in
    less than .016 seconds. Blender took over 600 times longer to generate the same
    image; shouldn't it look better? The teapot doesn't look bad, but the UV mapping
    is just weird.
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/9b253590-7dce-4ade-bf21-b0e3239a6587.png)'
  prefs: []
  type: TYPE_IMG
- en: We can see that the squares are stretched a little oddly over the teapot. (If
    you stop and think about what we're doing, we just put a tile pattern on a teapot;
    these are the wonders of computer graphics. I'm using the checkerboard pattern,
    so we can see stretching on the pot. Later on, I'll have a better texture that
    I made with Substance Designer.)
  prefs: []
  type: TYPE_NORMAL
- en: You can experiment in Blender by clicking on a polygon (in Edit Mode) and see
    where that polygon is in the UV map. In Blender's defense, the map isn't terrible,
    it's just not what we want. Sometimes (nearly all the time), a human is required
    to really make art.
  prefs: []
  type: TYPE_NORMAL
- en: Fixing the UV maps for the teapot
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To texture the pot a little easier, first let's create separate materials for
    the spout, handle, and lid. This will make our texture maps larger and less "stretched".
    You can also do this by packing textures together in one larger bitmap, which
    honestly is sometimes a little better for VR; the overall approach is the same,
    just more packed into a smaller area.
  prefs: []
  type: TYPE_NORMAL
- en: Let's create four materials for the pot, handle, spout, and lid (you should
    still be in Edit Mode).
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the little icon that sort of looks like a shiny globe. Then, click
    on the "+" key four times, as shown, and then on the new key:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/1e79d266-1f7f-435b-af00-67f763c45aaa.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you''ve clicked on the + key four times, you''ll have four slots for the
    materials we are creating. You then click on New to actually add a material. It
    seems slightly clunky, but that''s how Blender works:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/c681b81f-f816-4361-9236-b4959d235118.png)'
  prefs: []
  type: TYPE_IMG
- en: 'When you click on New, you will get a Material.001:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/f47e3f20-36b1-48b7-8f38-5df633f7670b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You can click on the area in the red circle and change the name. In this way,
    create four materials, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a Pot material (will be a ceramic coated metal).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a Lid material (the same texture as the pot).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a Spout material (let's make that copper).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a Handle material (let's make that worn rubber).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We don't really need to create these materials; you can overlay the same texture
    map on several UVs, but I wanted to do a fresh take on the teapot (which, as we
    can see, was a solid piece of ceramic), and it's instructive to see different
    materials.
  prefs: []
  type: TYPE_NORMAL
- en: Now that these extra materials are created, you can move the UVs to map the
    object better. UV mapping is a large subject, and it takes a certain technical
    and artistic skill to do well, or the PC could do it automatically. This is a
    little beyond the scope of this book, but I'll show you a quick and dirty method
    to UV map some common objects. Many of the files you find on the web may not have
    good UV maps applied, so you may find yourself in a situation where you think
    you don't need to learn a modeler, but will use it to correct UV maps (which is
    a pretty high-end activity when it comes to polygon modeling!).
  prefs: []
  type: TYPE_NORMAL
- en: Once you have created the four materials, you can map each section independently
    to its own UV maps; when it is time to present this in our VR world, we will use
    different texture maps for each piece. You can use the same texture map if you
    want to make a single ceramic pot, but our battered metal one may look better.
  prefs: []
  type: TYPE_NORMAL
- en: It's art; beauty is in the eye of the beholder.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you''ve established the four materials as we did above, select the polygons
    in each major area and click on Assign to make them part of this material:'
  prefs: []
  type: TYPE_NORMAL
- en: Press the "A" key on the keyboard (or Select->(De)select All | A) to deselect
    all the polygons. We will then select the ones in each of the areas, the lid,
    handle, spout, and pot (main body).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Switch to ''Poly Selection''. Blender has different selection modes–point,
    line, polygon. For this, you want to switch to selecting polygons, by clicking
    on this icon:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/bb39fef6-4c4a-4cbe-beac-66c590740113.png)'
  prefs: []
  type: TYPE_IMG
- en: Click on the main pot polygons by using *Shift + click* to select multiple polygons.
    Blender has a wealth of selection tools like box select, and others, per the tutorials
    at: [http://bit.ly/BlendStart](http://bit.ly/BlendStart)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once you've selected the polygons in the main body, you click on the Assign
    button to assign that polygon to a material, in this case the 'Pot' material.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/1ca11b68-d453-4d9d-8074-347fdd697398.png)'
  prefs: []
  type: TYPE_IMG
- en: Once you have the polygons assigned, click on View->Front then click on Mesh->UV
    Unwrap->Cylinder Projection. You will then have a UV map in our image editor we
    set up earlier, although it stretches off of the image you could assign.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To fix this, in the menu on the lower half of the screen, select UVs->Pack
    Islands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/84ef1212-462e-4063-8b3e-a6602ef5e9a5.png)'
  prefs: []
  type: TYPE_IMG
- en: That's a basic texture mapping. You can fiddle with this a lot (and it can be
    frustrating). Blender has a number of useful automatic UV assignment tools; in
    the 3D (modeling) window, as we saw earlier, Mesh->UV Unwrap->(options) offers
    a lot of ways to do the unwrapping. I found that Project from View as well as
    Cylinder Projection, both from a strict top/bottom/left/right view can unwrap
    UVs pretty well. After having said that, some artistry comes into play. The spout,
    lid, and handle are smaller than the body, so you may want to waste some UV space
    and make these smaller if you want your texture to line up more or less with the
    main, pot, and texture.
  prefs: []
  type: TYPE_NORMAL
- en: Or you can download the `teapot2.obj` and `teapot2_Mats.mtl` from the GitHub
    files at: [http://bit.ly/VR_Chap7](http://bit.ly/VR_Chap7) and save yourself some
    sanity.
  prefs: []
  type: TYPE_NORMAL
- en: 'These four UV mappings would not be bad (but feel free to learn, study, and
    do better! I''m not an artist!). The UV mapping for the main body, the Pot material
    is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/914310a7-3d31-4dbb-8dfd-1ebb347d5712.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The UV Mapping for the Lid material:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/6e8328b9-eee9-45dd-a3e4-b0a4a8d8e48f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The UV mapping for the Handle material (intentionally made smaller, to make
    the squares line up, more or less, with the main pot):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/1f517cbe-5870-4e70-ba01-979dabba3e21.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The UV mapping for the Spout material (intentionally made smaller, to make
    the squares line up, more or less, with the main pot):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/3f615e41-95ec-45e2-bead-6b691258b85f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'With these UV assignments, our teapot, displayed twice, rotated slightly between
    each one, looks much better:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/83dd97bd-c0d4-4ac1-a030-6558a7f31993.png)'
  prefs: []
  type: TYPE_IMG
- en: You can fiddle with UVs a lot. In the preceding screenshot, if we were mapping
    a texture that was mostly tile squares over the pot, we can see that although
    the handle and the spout match the main body pretty well, the lid, although it
    doesn't look stretched as our first picture did, still looks a little smaller
    than the other squares. The fix for this is to go into the 3D panel, select just
    the lid polygons (first hit "a" until nothing is selected), go to the material
    in the properties tab and click on the Lid material, "select" to select all polygons,
    and then go to the UV window and scale the UV mapped polygons down a little smaller.
  prefs: []
  type: TYPE_NORMAL
- en: However, in our case, we want to make totally different materials for these
    items anyway, so getting too worried about UVs at this point may be misdirected.
  prefs: []
  type: TYPE_NORMAL
- en: Your mileage may vary.
  prefs: []
  type: TYPE_NORMAL
- en: Importing materials
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At the same time, we can use all the capabilities that React VR offers with
    regard to materials. The MTL file, unfortunately, doesn't always have the values
    possible. If you are using a modern material, that has base color, bump map or
    normal map, height, specular (shinyness), or metallic (similar to shinyness) maps,
    I've found that you may need to just hand edit the MTL file.
  prefs: []
  type: TYPE_NORMAL
- en: You would think with the wealth of computer graphics programs out there, that
    we wouldn't be at this point. Unfortunately, different rendering systems, especially
    nodal based ones, are too sophisticated for an OBJ exporter to really understand;
    as a result, typically most MTL files (materials) that go along with an OBJ file
    have only the base color as a texture map.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are using a program such as Quixel or Substance Designer, most **Physically
    Based Rendering** (**PBR**) materials consist of most of the following texture
    maps (images), which are also supported by the OBJ file format:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Base color**: This is what the material usually looks like, almost always
    exported with most CAD systems to OBJ (MTL) files as `map_Ka`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Diffuse map**: Usually the same thing as the base color, it is the "diffuse"
    color of the object. You would implement this as `map_Ka` as well.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Bump map**: Bump maps are "height" information, but do not physically deform
    the polygons. They will look like they are carved, but if you look closely, the
    polygons will not actually displace. *This may cause an issue in VR*. One of your
    eyes will say *this is dented*, but your stereoscopic depth perception will say
    *no it''s not*. Bumps can, however, make things look really good in the right
    circumstances. This is written as* bump*in the MTL file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Height map**:Very similar to bump maps, the height map will usually physically
    displace polygons off of the surface. However, in most web rendering, it will
    displace only the modeled polygons, so it''s far less useful than with offline
    renderers. (Game engines can do microdisplacements, however.)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Normal map:** A normal map is an RGB representation for something similar,
    but more complex than the height or bump maps, which are gray scale. A normal
    map is an RGB map, and can displace polygons to the *left* or *right* in addition
    to up or down. Modern game engines calculate the normal map from a high resolution
    (hundreds of thousands to millions) model to a lower resolution model. It allows
    for an object with simple polygons to look like it is built out of millions of
    polygons. It may or may not physically deform the model (depending on the shader).
    It is not directly supported by the OBJ/MTL file format, but *is* supported by
    WebGL, and thus three.js, although implementation is left as an exercise for the
    reader.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Specular map**: This controls (use glTF) how shiny or dull an object is.
    Usually a gray map (no color information). More specifically, a specular map controls
    "if" an area of a texture is shiny or not. This is map_Ns. Map_Ks is also a specular
    map, but controls what color the highlights are. This can be used for "ghost paint"
    on cars, for example.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Glossiness**: Not quite the same thing as specular, but is often confused.
    Glossiness is how tight the specular highlight is; it could be broad but shiny,
    like dull rubber, or tight and shiny, like a candy apple, or Chrome. It is basically
    the *value* that is applied to the specular map. Often used with PBR, it is not
    used by the OBJ/MTL file format.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Roughness**: Very similar to the specular and glossiness maps, it''s often
    included instead or along with the preceding. Often used with PBR, it is not used
    by the OBJ/MTL file format.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Reflectivity**: Generally speaking, the OBJ file format is used for offline
    rendering, which does raytracing reflections that approximate the way the real
    world works. WebGL, for performance reasons, doesn''t ray trace everything, but
    can simulate reflectivity with a reflection map. In the OBJ file, the amount of
    reflection is static; you can''t directly make patchy reflection. This map is
    coded as *refl* in the OBJ file, but is not simulated by React VR in the OBJ/MTL
    file format.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Transparency**: Mapped as *d* and *map_d*. (d stood for "density" in the
    original MTL file.) This is not refractive transparency; light will either go
    through or not. It''s useful for things like glass bottles and is not used by
    React VR.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Decal**: This applies a stencil on top of objects, and is very useful for
    avoiding the repeating texture look, and adding words on top. In the MTL, the
    file is coded as *decal*. This can be very useful, and decal is supported in React
    VR. However, I find that most modelers will not export it, so you may need to
    hand edit a material file to include a decal. This is not so bad, as typically
    you''ll have different decals (such as signs, stains, and more) with different
    models in your world.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixing the deck plates
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have learned how to UV map, let's fix those cubes that we use to
    represent the deck plates. We found out, while doing textures on top of the basic
    React VR objects, that the cube represented the same texture on all six sides
    of the cube. As a result, when we make a thin cube, like we did for the top and
    bottom of the pedestals, or with the deck plates, the texture map looks "squished"
    on the sides.  The red arrow shows the squished texture; it's because we have
    a box that's only .1 high and 5 wide, with a texture that's square (the double
    red arrows), so it looks squished.
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/3744dade-d866-4648-a30c-814e04b1085a.png)'
  prefs: []
  type: TYPE_IMG
- en: We can fix that with a cube in Blender. We'll also add the additional texture
    maps that we downloaded.
  prefs: []
  type: TYPE_NORMAL
- en: 'I have Substance Designer, which is a fantastic texturing tool; there are many
    others, such as Quixel. It will output different texture maps depending on how
    you set it up. You can also use any of a variety of packages that will allow you
    to bake textures. WebGL will allow you to use shaders, but this is somewhat complex.
    It is supported through React Native, but this is a bit difficult at this point,
    so let''s cover the case of individual texture maps for the different material
    values. It will all break down to that in the .obj file usually anyway (.obj doesn''t
    have the concept of modern GPU shaders):'
  prefs: []
  type: TYPE_NORMAL
- en: Create a cube in Blender, and resize it (in Edit Mode) so that it is much shorter
    than it is wide or high. This will make our deck plate. In our VR world, we made
    it 5x5x.1, so let's make the Blender cube 5x5x.1.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Then, we texture map it roughly, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/d1cebd8a-ccad-4a5c-b6e8-432306bf50a0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Export it to OBJ and choose the following parameters; the important ones are
    -Z forward, Y up (Y is up!) and Strip Path (otherwise, it''ll include your physical
    disk location, which the Asset call from a web server obviously can''t serve up):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/991b6521-104d-4a12-86c4-0b8828b62ee2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once this is done, we''ll do it the hard but direct way, which is to modify
    the deck plate''s MTL file to directly include the textures we want:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Displacement textures are somewhat useless; the current rendering engines will
    apply a displacement map, but will not automatically subdivide any polygons to
    achieve microdisplacement. So you've got to generate geometry with as many polygons
    to whatever you want to displace.
  prefs: []
  type: TYPE_NORMAL
- en: If you are generating that many polygons, a better way is to just bake in the
    displacement in your modeling program, and export the polygons already displaced.
    It's the same number of polygons anyway, and you have more control. You can selectively
    decimate (reduce polygon count) with this method as well and still preserve your
    surface detail.
  prefs: []
  type: TYPE_NORMAL
- en: Baking displacement will dramatically increase the number of vertices and polygons
    in your scene, of course, so it is a tradeoff. Using displacement maps in offline
    renderers (non–Virtual Reality rendering) is often done to reduce polygon counts,
    but doesn't always work for VR. It is possible that VR shaders will do microdisplacement
    and adaptive subdivision, as the state of the art constantly moves forward.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you get a blindingly white texture, or something doesn''t look like you
    expect, double-check the node.js console and look for a 404, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Transforming modules 100.0% (557/557), done.`'
  prefs: []
  type: TYPE_NORMAL
- en: '`::1 - - [20/Sep/2017:21:57:12 +0000] "GET /static_assets/1_New_Graph_Metallic_Color.jpg
    HTTP/1.1" **404** 57 "http://localhost:8081/vr`'
  prefs: []
  type: TYPE_NORMAL
- en: '`/?hotreload" "Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:57.0) Gecko/20100101
    Firefox/57.0"`'
  prefs: []
  type: TYPE_NORMAL
- en: This means you misspelled the texture name.
  prefs: []
  type: TYPE_NORMAL
- en: Then, we'll use object-oriented design coding to modify the class we created,
    which will update all the deck plates! Make the change to the platform call to
    the new deck plates OBJ file instead of a box.
  prefs: []
  type: TYPE_NORMAL
- en: The finished VR world
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Your complete code should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: That's a lot to type, and a lot of UV modeling. You can download all of these
    files at: [http://bit.ly/VR_Chap7](http://bit.ly/VR_Chap7)
  prefs: []
  type: TYPE_NORMAL
- en: 'In the preceding code, I make use of this:'
  prefs: []
  type: TYPE_NORMAL
- en: '`<Platform MyX=''0'' MyZ=''-5.1''/>`'
  prefs: []
  type: TYPE_NORMAL
- en: 'This will work, but it is more correct to do this:'
  prefs: []
  type: TYPE_NORMAL
- en: '`<Platform MyX={0} MyZ={-5.1}/>`'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you know JSX and React, this will be an obvious goof, but not everyone will
    pick up on it (honestly, as a C++ programmer I missed it at first). Anything inside
    `{}` braces is *code* and anything that is quoted is text. The documentation says
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Props - Components can take arguments such as a name in* `<Greeting name=''Rexxar''/>`*.
    Such arguments are known as properties or props and are accessed through the this.props
    variable. Name, from this example, is accessible as `{this.props.name}`. You can
    read more about this interaction under Components, Props, and State.*'
  prefs: []
  type: TYPE_NORMAL
- en: The mention about the argument is only true for text props. For numeric props,
    using the quoted syntax like `'0.5*'*` will seem to work, but have weird consequences.
    We'll see more in [Chapter 11](707dc6f5-9666-4f49-952b-fbcf20fc8afc.xhtml), *Take
    a Walk on the Wild Side*, but basically, for numeric variables, you *should* use
    `{0.5}` (braces).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned how to do polygon modeling with Blender, and how
    to override texture assignments and wrap textures around models. We learned to
    make textures that can make your world seem more real.
  prefs: []
  type: TYPE_NORMAL
- en: However, the world is still static. In the next chapter, you will learn how
    to make things move to really bring your worlds to life.
  prefs: []
  type: TYPE_NORMAL
