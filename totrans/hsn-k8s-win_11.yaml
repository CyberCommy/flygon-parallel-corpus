- en: Deploying a Hybrid Azure Kubernetes Service Engine Cluster
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The previous chapter gave an overview of how to create a hybrid Windows/Linux
    Kubernetes cluster in an on-premises environment. This approach can also be used
    for Deployments in Infrastructure-as-a-Service cloud environments, but if you
    are working with Azure, you have an easier solution: **Azure Kubernetes Service**
    (**AKS**) **Engine** ([https://github.com/Azure/aks-engine](https://github.com/Azure/aks-engine)).
    This project aims to provide an Azure-native way of deploying self-managed Kubernetes
    clusters using **Azure Resource Manager** (**ARM**) templates, which can leverage
    all Azure cloud integrations for Kubernetes, for example LoadBalancer services.
    What''s more, with AKS Engine, you have support for the Deployment of a Kubernetes
    cluster with Windows nodes, requiring minimal configuration and node preparation
    compared to on-premises environments. In other words, you will be able to provision
    a production-grade, highly available hybrid cluster in a matter of minutes.'
  prefs: []
  type: TYPE_NORMAL
- en: 'It is important to briefly summarize how AKS Engine relates to other concepts,
    such as AKS, acs-engine, and the Azure Stack:'
  prefs: []
  type: TYPE_NORMAL
- en: AKS Engine and AKS are not the same Azure offering. AKS is an Azure service
    that offers you the ability to create a fully managed Kubernetes cluster – we
    gave an overview of AKS and demonstrated how to deploy a hybrid Windows/Linux
    cluster using AKS in [Chapter 4](118e3c89-786e-4718-ba67-6c38928e2a42.xhtml),
    *Kubernetes Concepts and Windows Support*. AKS Engine is internally used by AKS
    but you cannot manage AKS using AK
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: acs-engine is a predecessor of AKS Engine, so you may find a lot of documentation
    mentioning acs-engine instead of AKS Engine. AKS Engine is a backward-compatible
    continuation of acs-engine.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technically, you can also use AKS Engine for on-premises environments if you
    use the Azure Stack. You can read more here: [https://docs.microsoft.com/en-us/azure-stack/user/azure-stack-kubernetes-aks-engine-overview](https://docs.microsoft.com/en-us/azure-stack/user/azure-stack-kubernetes-aks-engine-overview).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In this chapter, we will focus on AKS Engine and deploying a hybrid Windows/Linux
    cluster in the Azure cloud. We will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing AKS Engine
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating an Azure resource group and a service principal
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the API model and generating an Azure resource manager template
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying a cluster
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying and inspecting your first application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For this chapter, you will need the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Windows 10 Pro, Enterprise, or Education (version 1903 or later, 64-bit) installed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An Azure account
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Chocolatey package manager for Windows installed ([https://chocolatey.org/](https://chocolatey.org/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Optionally, Visual Studio Code installed if you would like to visualize the
    ARM template produced by AKS Engine
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the Chocolatey package manager is not mandatory but it makes the installation
    process and application version management much easier. The installation process
    is documented here: [https://chocolatey.org/install](https://chocolatey.org/install).
  prefs: []
  type: TYPE_NORMAL
- en: To follow along, you will need your own Azure account in order to create Azure
    resources for Kubernetes clusters. If you haven't already created an account in
    the previous chapters, you can read more about how to obtain a limited free account
    for personal use here: [https://azure.microsoft.com/en-us/free/](https://azure.microsoft.com/en-us/free/).
  prefs: []
  type: TYPE_NORMAL
- en: You can download the latest code samples for this chapter from the official
    GitHub repository: [https://github.com/PacktPublishing/Hands-On-Kubernetes-on-Windows/tree/master/Chapter08](https://github.com/PacktPublishing/Hands-On-Kubernetes-on-Windows/tree/master/Chapter08).
  prefs: []
  type: TYPE_NORMAL
- en: Installing AKS Engine
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'AKS Engine itself is a command-line tool that can generate an Azure Resource
    Manager (ARM) template based on a supplied configuration file. To use AKS Engine,
    you need the following which have installation processes described in previous
    chapters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**The Azure CLI and** **Azure Cloud Shell**: Instructions are available in [Chapter
    2](43d5e48b-311c-462c-a68e-6a0b5c4224e8.xhtml), *Managing State in Containers*,
    in the *Using remote/cloud storage for container storage* storage.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**kubectl**: Instructions are available in [Chapter 6](791e78c0-f625-4232-9907-36e25ec2767d.xhtml), *Interacting
    with Kubernetes Clusters*, in the *Installing Kubernetes command-line tooling* section.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**SSH client for Windows:** Instructions are available in [Chapter 7](165c2fcc-4ce8-4dbc-a19c-c7fd427b3379.xhtml), *Deploying
    a Hybrid On-Premises Kubernetes Cluster*, in the *Creating a Kubernetes master
    node using kubeadm* section.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'With all the tools installed on your machine, you can proceed to installing
    AKS Engine itself. The recommended installation approach on Windows is using Chocolatey.
    Alternatively, you can download AKS Engine binaries ([https://github.com/Azure/aks-engine/releases/latest](https://github.com/Azure/aks-engine/releases/latest)),
    extract them, and add them to your `$env:PATH` environment variable. To install
    AKS Engine using Chocolatey, proceed with the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open a PowerShell window as an administrator.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To install the `aks-engine` package, execute the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'If you want to install a specific version of AKS Engine, for example `0.42.0`,
    use the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Verify that your installation was successful:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Now, you are ready to continue to the next step – configuring prerequisites
    for your Kubernetes cluster. Let's begin by gathering initial cluster information
    and creating an Azure resource group.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an Azure resource group and a service principal
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before we deploy a Kubernetes cluster using AKS Engine, we need to perform
    the following initial steps:'
  prefs: []
  type: TYPE_NORMAL
- en: You need to ensure that you have appropriate permissions within the Azure subscription
    to create and assign Azure Active Directory service principals. If you created
    an Azure account just for the walk through, you will have the permissions by default.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Determine `SubscriptionId` of the Azure subscription that you are going to
    use for deploying the cluster. You can do that by opening a PowerShell window
    and executing the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: We will use `cc9a8166-829e-401e-a004-76d1e3733b8e` as the `SubscriptionId` in
    the next paragraphs.
  prefs: []
  type: TYPE_NORMAL
- en: Determine a globally unique `dnsPrefix` that you would like to use for the hostnames
    within your cluster. Alternatively, you can rely on an auto generated prefix by
    AKS Engine. We will use `handson-aks-engine-win` as the prefix in the next paragraphs.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose which Azure location you would like to use for deploying the cluster.
    We will use `westeurope` in the examples that follow.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose a name for your new Azure resource group for your cluster. We will use `aks-engine-windows-resource-group`
    in the next paragraphs.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose a username and password for the Windows nodes. We will use `azureuser`
    and `S3cur3P@ssw0rd` for this purpose – remember to use your own secure password!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Generate an SSH key pair that you can use for connecting to Linux nodes. If
    you choose to have an OpenSSH server on Windows nodes, you can later use the same
    key pair for accessing the Windows nodes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The steps described in the next paragraphs for prerequisite creation and AKS
    Engine Deployment are captured in the PowerShell script available here: [https://github.com/PacktPublishing/Hands-On-Kubernetes-on-Windows/blob/master/Chapter08/01_aks-engine/01_CreateAKSEngineClusterWithWindowsNodes.ps1](https://github.com/PacktPublishing/Hands-On-Kubernetes-on-Windows/blob/master/Chapter08/01_aks-engine/01_CreateAKSEngineClusterWithWindowsNodes.ps1).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, please follow the steps for creating an Azure resource group and an Azure
    Active Directory service principal:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open a PowerShell window and log in using the Azure CLI:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Create an Azure resource group for your cluster using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Create an Azure Active Directory service principal for your cluster. Use an
    appropriate `Subscription ID` and `Resource Group` name:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Please note that if scope is limited to a given resource group, you will not
    be able to use the Container Monitoring add-on. We'll cover the configuration
    of the AAD service principal for this purpose in the next sections.
  prefs: []
  type: TYPE_NORMAL
- en: 'Examine the output of the previous command and take note of `appId` and `password`.
    You cannot retrieve the password later:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The last step is generating an SSH key pair for accessing Linux nodes in the
    cluster:'
  prefs: []
  type: TYPE_NORMAL
- en: Open a PowerShell window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If you have followed the previous chapters, you may already have an SSH key
    pair generated that you can reuse and skip the next step. To check whether you
    have an existing SSH key pair, use the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'If you need to generate a key pair, execute the following command (using defaults
    is advised):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Now, you have all the information that is required for AKS Engine Deployment.
    All we need to do is to prepare the AKS Engine apimodel and generate an ARM template
    for our cluster.
  prefs: []
  type: TYPE_NORMAL
- en: Using apimodel and generating an Azure resource manager template
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'At its core, AKS Engine uses an **apimodel** (or a cluster definition) JSON
    file in order to generate Azure resource manager templates that can be used for
    deploying a Kubernetes cluster directly to Azure. The documentation and schema
    for apimodel can be found here: [https://github.com/Azure/aks-engine/blob/master/docs/topics/clusterdefinitions.md](https://github.com/Azure/aks-engine/blob/master/docs/topics/clusterdefinitions.md).
    AKS Engine comes with out-of-the-box support for Windows nodes in cluster definitions.
    You can find examples in the official AKS Engine GitHub repository: [https://github.com/Azure/aks-engine/tree/master/examples/windows](https://github.com/Azure/aks-engine/tree/master/examples/windows).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s now create a custom apimodel based on the minimal Windows cluster example
    definition ([https://github.com/Azure/aks-engine/blob/master/examples/windows/kubernetes.json](https://github.com/Azure/aks-engine/blob/master/examples/windows/kubernetes.json)).
    We will also include two Linux nodes in order to run a hybrid Windows/Linux configuration
    (one Linux master, two Windows nodes, and two Linux nodes). Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Download the following file and save it as `kubernetes-windows.json`: [https://raw.githubusercontent.com/Azure/aks-engine/master/examples/windows/kubernetes.json](https://raw.githubusercontent.com/Azure/aks-engine/master/examples/windows/kubernetes.json).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change `properties.orchestratorProfile.orchestratorRelease` to the desired Kubernetes
    release, for example, `1.16`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Modify `properties.masterProfile.dnsPrefix` to the selected DNS prefix. In examples,
    we use `handson-aks-engine-win`, but you need to choose your unique prefix.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add a Linux nodes pool by adding the following JSON object to `properties.agentPoolProfiles`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Modify `properties.windowsProfile.adminUsername` and `properties.windowsProfile.adminPassword` to
    your selected username and password for Windows nodes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the contents of `~\.ssh\id_rsa.pub` to `properties.linuxProfile.ssh.publicKeys.keyData`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the service principal `appId` in `properties.servicePrincipalProfile.clientId`
    and `password` in `properties.servicePrincipalProfile.secret`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'An example customized file has the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The apimodel is ready to be used by AKS Engine. Generate the ARM template using
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'This will generate the ARM template (with parameters), the full apimodel, and
    kubeconfigs (for each possible Azure location) in the `_output\<dnsPrefix>` directory.
    You can inspect these files in order to understand how the cluster is designed
    – optionally, if you have Visual Studio Code installed, you can use the following
    excellent extension for visualizing ARM templates – [https://marketplace.visualstudio.com/items?itemName=bencoleman.armview](https://marketplace.visualstudio.com/items?itemName=bencoleman.armview):'
  prefs: []
  type: TYPE_NORMAL
- en: In VS Code, after you have installed the extension, open the `_output\<dnsPrefix>\azuredeploy.json` ARM
    template file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Use the following icon to visualize the ARM template:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/0c7a2ed2-e1da-4a5f-8c71-39fcd491d5a0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Load the ARM template parameters `_output\<dnsPrefix>\azuredeploy.parameters.json`
    using the following icon:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/2a732b78-e8bc-4bb7-a93d-5fb04f0aceae.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You can now inspect the ARM template in a convenient way:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/e1cf1e78-dea2-465b-b44d-e4273c0fa74b.png)'
  prefs: []
  type: TYPE_IMG
- en: At this point, we are ready to proceed with deploying the cluster using the
    Azure CLI!
  prefs: []
  type: TYPE_NORMAL
- en: Deploying the cluster
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to deploy the Kubernetes cluster from the Azure resource manager template,
    we will use the `az group deployment create` command. This Azure CLI command requires
    passing the ARM template (`_output\<dnsPrefix>\azuredeploy.json`) and the ARM
    parameters file (`_output\<dnsPrefix>\azuredeploy.parameters.json`). To deploy
    the cluster, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Execute the command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'If you run into any problems, you can check the ARM Deployment failure details
    in the Azure portal by navigating to your resource group and clicking the Deployment:
    Failed link in the upper-right corner. For any `InternalServerErrors`, you may
    just try choosing another Azure location, such as `westus`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'After a few minutes, when the Deployment is finished, the list of created resources
    and output variables will be returned in JSON format:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Extract the `masterFQDN` property. This is your Kubernetes master DNS name.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Alternatively, you can take the approach of using the `aks-engine deploy` command,
    which combines customizing cluster definition and generating and deploying an
    ARM template into one command. Note that in order to use container monitoring
    features you must use the `aks-engine deploy` command at this point.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we need to connect to our new cluster. AKS Engine, along with the ARM
    template, generates a set of `kubeconfigs` for all possible Azure locations in
    the form of `.\_output\<dnsPrefix>\kubeconfig\kubeconfig.<azureLocation>.json`.
    In our case, we used the location `westeurope`, so the kubeconfig is `.\_output\<dnsPrefix>\kubeconfig\kubeconfig.westeurope.json`.
    To use this kubeconfig for your kubectl, you can use one of the config management
    techniques provided in [Chapter 6](791e78c0-f625-4232-9907-36e25ec2767d.xhtml), *Interacting
    with Kubernetes Clusters*. For example, to merge this file with your existing,
    default kubeconfig, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Inspect the contents of `.\_output\<dnsPrefix>\kubeconfig\kubeconfig.westeurope.json`
    in order to know the cluster name and context name. Both should be the same as
    your `<dnsPrefix>`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Perform a test merge of the file with the default kubeconfig. Use the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Carefully inspect the output in order to determine whether the merged config
    contains all the clusters and contexts you expect.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Save the merged file as the default config and switch to using the new `<dnsPrefix>`
    context:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Test the connection to your new cluster:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Please note that clusters deployed by AKS Engine are billed depending on the
    resources that have been used in the ARM templates. You should use the Azure pricing
    calculator in order to determine the predicted cost. If you do not need the cluster
    anymore, it is advised to delete it to avoid any unwanted costs. To delete the
    AKS Engine cluster, use the following command: `az group delete --name aks-engine-windows-resource-group --yes --no-wait`.
  prefs: []
  type: TYPE_NORMAL
- en: Congratulations! You have deployed a fully functional, hybrid Windows/Linux
    cluster on Azure using AKS Engine! Let's take a look at how to deploy a simple
    application to the cluster and how to interact with the cluster.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying and inspecting your first application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will perform a similar exercise as in the previous chapter
    – we are going to deploy a sample ASP.NET Core 3.0 application (using a Deployment
    Object) to our AKS Engine cluster and demonstrate basic kubectl operations. Many
    aspects of working with an AKS Engine cluster remain the same as in the case of
    on-premises clusters – the biggest difference is that you can easily utilize Azure
    features and integrations. To demonstrate this, we will expose the application
    using a service of type LoadBalancer instead of NodePort. Thanks to the Kubernetes
    cloud provider for Azure, the LoadBalancer service will be natively integrated
    with an Azure Load Balancer instance.
  prefs: []
  type: TYPE_NORMAL
- en: Basic operations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To deploy the sample application, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a `windows-example.yaml` manifest file that contains a Deployment and
    Service definition. You can download it from the GitHub repository ([https://raw.githubusercontent.com/PacktPublishing/Hands-On-Kubernetes-on-Windows/master/Chapter08/03_windows-example/windows-example.yaml](https://raw.githubusercontent.com/PacktPublishing/Hands-On-Kubernetes-on-Windows/master/Chapter08/03_windows-example/windows-example.yaml))
    or directly apply it to the cluster:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'There are three important points in this manifest file, which have been marked
    in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Scheduling for Windows nodes** requires using `nodeSelector` with the `"beta.kubernetes.io/os":
    windows` value. Similarly, if you need to schedule the Pods for Linux nodes, you
    should use the `"beta.kubernetes.io/os": linux` node selector in hybrid clusters.
    This remains exactly the same as for on-premises clusters.'
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: The Pod definition consists of one container based on the `mcr.microsoft.com/dotnet/core/samples:aspnetapp-nanoserver-1809` image.
    It is important to ensure **compatibility** between the container's host operating
    system version and the container's base image version – this requirement is the
    same as in an on-premises cluster. You can control what Windows Server version
    you have in your AKS Engine cluster using the custom `windowsSku` property in `properties.windowsProfile`
    in the AKS Engine apimodel JSON file. You can read more in the official documentation: [https://github.com/Azure/aks-engine/blob/master/docs/topics/windows-and-kubernetes.md#choosing-the-windows-server-version](https://github.com/Azure/aks-engine/blob/master/docs/topics/windows-and-kubernetes.md#choosing-the-windows-server-version).
    For an existing cluster, you can check the Windows Server version of nodes using
    the `kubectl get nodes -o wide` command.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Service spec has the type set to `LoadBalancer`. This will result in the
    creation of an externally accessible Azure Load Balancer for the Service. You
    can read more about this type of Service in [Chapter 5](da2ee6af-a754-4fc8-ae62-86d8e68f0bd0.xhtml), *Kubernetes
    Networking*.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Open a PowerShell window and apply the manifest file using `kubectl`. If you
    haven''t merged your `kubeconfigs`, remember to set the proper `$env:KUBECONFIG`
    variable first and switch to an appropriate kubectl context:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Wait for the Pods to start – the initial image pull may take a few minutes.
    You can observe the status of the Pods with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Wait for external IP creation of the Service. You can observe the status of
    the Service using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Open your internet browser and navigate to the Azure Load Balancer address
    – in the case of this example, it is `http://52.136.234.203/`. You should see
    the sample application web page, which confirms that the deployment was successful:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/aa17aac0-0438-40da-9dc4-a7e93889c539.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Performing common operations, such as accessing Pod container logs or executing
    ad hoc processes inside of a Pod container is exactly the same as for on-premises
    clusters – we will briefly revise how to do that:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to access logs for one of the Pods (`windows-example-66cdf8c4bf-f5bd8`)
    created as part of the Deployment, use the following `kubectl logs` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'To **exec** into the same Pod container, for example, start an interactive
    `cmd` shell and run the `kubectl exec` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'You can now freely access and modify the container, which is useful in debugging
    and testing scenarios. For example, you can get the contents of the `appsettings.json`
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Next, let's see how to connect to the actual virtual machines that are used
    in the AKS Engine cluster.
  prefs: []
  type: TYPE_NORMAL
- en: Connecting to virtual machines
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to connect to a Linux master virtual machine, you can use SSH and
    directly connect to it as it is exposed to the public network:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In a PowerShell window, execute the following command (your public SSH key
    will be used for authentication):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Now you can perform any maintenance or debugging operations, for example, accessing
    kubelet service logs:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'For Windows nodes (or other Linux nodes), the procedure is a bit more complicated
    as the VMs are in a private IP range. This means you need to use SSH local port
    forwarding via the Linux master node in order to connect using a remote desktop
    connection or SSH:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, query for the private IP address of the Windows node that you would
    like to connect to. You can see all the names of the nodes using the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Use the name to get the private IP address of the node, for example, `7001k8s000`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Use one of the private IPs in order to create an SSH tunnel from your local
    `5500` port via the master node to the `3389` port (RDP) on the Windows node:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'In a different PowerShell window, start an RDP session via the tunnel:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Provide your Windows node credentials (as in apimodel) and connect:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/31e251f6-97de-4d3e-a536-bc1ca8bd94bd.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Alternatively, you can also use SSH from the master node:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Now, let's take a look at how to enable Azure Log Analytics and Azure Monitor
    for containers.
  prefs: []
  type: TYPE_NORMAL
- en: Enabling Azure Log Analytics and Azure Monitor for containers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: AKS Engine comes with integration for Azure Log Analytics and Azure Monitor
    for containers, which is provided by **Operations Management Suite** (**OMS**)
    agents running on cluster nodes. When deploying your Kubernetes cluster, you can
    specify an additional `container-monitoring` add-on in the Kubernetes cluster
    definition – please note that, currently, you have to enable container monitoring
    when creating a new cluster; you cannot modify an existing cluster definition.
  prefs: []
  type: TYPE_NORMAL
- en: 'Additionally, this feature comes out of the box only if you use the `aks-engine
    deploy` command. If you would like to use this feature, perform the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: If you have an existing cluster in `aks-engine-windows-resource-group`, delete
    it first.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Modify your cluster definition (apimodel) so that the `properties.orchestratorProfile.kubernetesConfig` property
    has the following contents. Alternatively, you can use [https://github.com/PacktPublishing/Hands-On-Kubernetes-on-Windows/tree/master/Chapter08/05_windows-apimodel-container-monitoring/kubernetes-windows.json](https://github.com/PacktPublishing/Hands-On-Kubernetes-on-Windows/tree/master/Chapter08/05_windows-apimodel-container-monitoring/kubernetes-windows.json)
    as the base:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Ensure that your service principal (in this example `appId: 7614823f-aca5-4a31-b2a5-56f30fa8bd8e`)
    additionally has the `Log Analytics Contributor` role for your Azure subscription:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Execute AKS Engine Deployment, using the service principal `appId` as `--client-id`
    and the `password` as `--client-secret`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: After a few minutes, your cluster will be ready and you can merge your default
    kubeconfig with the AKS Engine kubeconfig.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This `container-monitoring` add-on will make two things possible:'
  prefs: []
  type: TYPE_NORMAL
- en: Using Azure Log Analytics to query Kubernetes and your application logs using
    the Kusto query language ([https://docs.microsoft.com/en-us/azure/azure-monitor/log-query/get-started-portal](https://docs.microsoft.com/en-us/azure/azure-monitor/log-query/get-started-portal))
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using the Azure Monitor service to monitor containers running in your cluster
    ([https://docs.microsoft.com/en-us/azure/azure-monitor/insights/container-insights-overview](https://docs.microsoft.com/en-us/azure/azure-monitor/insights/container-insights-overview))
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note that until the [https://github.com/Azure/aks-engine/issues/2066](https://github.com/Azure/aks-engine/issues/2066) issue
    in AKS Engine is resolved, Kubernetes 1.16 will not integrate with the Log Analytics
    and Monitor services properly. You can try deploying your cluster again with a
    different Kubernetes version in apimodel.
  prefs: []
  type: TYPE_NORMAL
- en: 'These services provide the basic building blocks for monitoring, alerting,
    and debugging for your containerized applications running on Kubernetes – you
    can leverage the multiple Azure portal UI features to make analysis and management
    easier, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the following URL to access Azure Monitor for containers: [https://aka.ms/azmon-containers](https://aka.ms/azmon-containers).
    Azure Monitor deserves a separate, dedicated book to cover all its features –
    as a quick example, you can explore the default dashboards that are provided for
    monitoring your Kubernetes cluster:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/9790777b-a47b-4e13-ac18-58f306bba459.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Use the following URL to access Azure Log Analytics: [https://portal.azure.com/#blade/Microsoft_Azure_Monitoring/AzureMonitoringBrowseBlade/logs](https://portal.azure.com/#blade/Microsoft_Azure_Monitoring/AzureMonitoringBrowseBlade/logs).
    Expand the ContainerInsights database and select, for example, the KubeEvents table.
    You can now execute a simple Kusto query to check what data is in the table:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the output of the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/dc0209e5-b5a3-40ea-acdc-3a7884553108.png)'
  prefs: []
  type: TYPE_IMG
- en: You can learn more about the Log Analytics tables available for container monitoring
    in the official documentation: [https://docs.microsoft.com/en-us/azure/azure-monitor/insights/containers#monitor-containers](https://docs.microsoft.com/en-us/azure/azure-monitor/insights/containers#monitor-containers).
    For the Kusto query language documentation, please refer to [https://docs.microsoft.com/en-us/azure/azure-monitor/log-query/query-language](https://docs.microsoft.com/en-us/azure/azure-monitor/log-query/query-language).
    Setting up proper monitoring and log analytics solutions is **crucial** for running
    distributed applications. If you are not using Azure for your clusters, you can
    consider different solutions, such as Prometheus and Elasticsearch, that provide
    similar functionalities.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you have learned how to deploy a hybrid Windows/Linux Kubernetes
    cluster running on Azure using AKS Engine. Currently, this approach is the most
    suitable solution for running self-managed, production-grade clusters with Windows
    nodes. The Deployment procedure is simple – first, install all prerequisites and
    AKS Engine on your local machine, then create a dedicated Azure resource group
    and Azure Active Directory service principal. After that, you need to define an
    apimodel (cluster definition) JSON file for AKS Engine to generate an Azure resource
    manager template and use the template to deploy the cluster. Additionally, you
    have learned how to deploy a sample Windows container application and how to perform
    basic operations using kubectl. On top of that, we have shown how to connect to
    the virtual machines in the cluster for debugging and monitoring purposes and
    how to enable Azure Monitor and Azure Log Analytics for your cluster.
  prefs: []
  type: TYPE_NORMAL
- en: The next chapter will focus further on deploying applications to a Kubernetes
    cluster and how to perform "day-2" operations in your cluster.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What is the difference between AKS and AKS Engine?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the basic principle of how AKS Engine works?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Can you manage AKS clusters using AKS Engine and vice versa?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are the prerequisites for using AKS Engine?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is apimodel in AKS Engine?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do you connect to the Kubernetes Linux master?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do you connect to a Kubernetes Windows node?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can find the answers to these questions in *Assessments* of this book.
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Currently, most of the resources regarding the Deployment of hybrid Windows/Linux
    clusters using **AKS Engine** are available online. Please check the official
    documentation on GitHub for more details:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://github.com/Azure/aks-engine/blob/master/docs/topics/windows.md](https://github.com/Azure/aks-engine/blob/master/docs/topics/windows.md)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://github.com/Azure/aks-engine/blob/master/docs/topics/windows-and-kubernetes.md](https://github.com/Azure/aks-engine/blob/master/docs/topics/windows-and-kubernetes.md)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In general, many of the topics concerning **AKS **(the managed Kubernetes Azure
    offering, **not** AKS Engine itself) are useful, as they touch on how to integrate
    Kubernetes with the Azure ecosystem. You can find more about AKS itself in the
    following Packt book:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*DevOps with Kubernetes – Second Edition* ([https://www.packtpub.com/virtualization-and-cloud/devops-kubernetes-second-edition](https://www.packtpub.com/virtualization-and-cloud/devops-kubernetes-second-edition))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If you need help with troubleshooting and common problems, you can use the
    following guides:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://github.com/Azure/aks-engine/blob/master/docs/howto/troubleshooting.md](https://github.com/Azure/aks-engine/blob/master/docs/howto/troubleshooting.md)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://docs.microsoft.com/en-us/virtualization/windowscontainers/kubernetes/common-problems](https://docs.microsoft.com/en-us/virtualization/windowscontainers/kubernetes/common-problems)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://kubernetes.io/docs/setup/production-environment/windows/intro-windows-in-kubernetes/#troubleshooting](https://kubernetes.io/docs/setup/production-environment/windows/intro-windows-in-kubernetes/#troubleshooting)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://techcommunity.microsoft.com/t5/Networking-Blog/Troubleshooting-Kubernetes-Networking-on-Windows-Part-1/ba-p/508648](https://techcommunity.microsoft.com/t5/Networking-Blog/Troubleshooting-Kubernetes-Networking-on-Windows-Part-1/ba-p/508648) –
    a troubleshooting guide specifically for Windows container networking problems'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
