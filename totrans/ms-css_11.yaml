- en: Wrapping Up
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Welcome to the last chapter of this book. As we're at the end of this journey,
    I wanted to walk you through some steps in your web development learning progression
    as well as go through some links and resources for more information on everything
    you've learned up to this point.
  prefs: []
  type: TYPE_NORMAL
- en: The next steps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The next logical progression when learning CSS is moving to a CSS preprocessor,
    like Sass or Less. CSS preprocessors allow you to write CSS using programming
    features like nesting, imports, variables, and mixins that get compiled down to
    regular CSS. Another logical step in front end development is learning JavaScript.
    First though, let's talk about the CSS preprocessor, Sass.
  prefs: []
  type: TYPE_NORMAL
- en: CSS preprocessors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I've used both *Less* and *Sass*, but I've been using Sass for a while now.
    When I started to create the course materials for this book I had almost forgotten
    what it was like to write CSS without Sass. Needless to say, writing CSS is much
    easier using Sass. It keeps your code much more organized and clean, and I highly
    recommend it. Let's go over some of the notable features of Sass.
  prefs: []
  type: TYPE_NORMAL
- en: Variables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'One simple yet powerful feature of Sass is variables. Let''s set up variables
    called `$blue`, and `$red` which respectively equal the colors I''ve been using
    throughout the site for basically anything you saw that was blue or red:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Now when I need to put enter the hard-to-remember hex value of `#0072AE`, I
    can just type in `$blue` and Sass magically takes care of it. An equally good
    use of variables is they with fonts, and that''s where I think it really gets
    powerful. With fonts, you can usually type in a `font-family` and then create
    a stack of fonts. But, this can get lengthy and repetitive. So plugging all of
    this information into a variable, a very simple one such as `$maven` or `$droid`,
    makes it really easy to use fonts quickly and at any time you need to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Then I can use those variables anywhere I set a `font-family`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'This will be compiled into this whole string:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Mixins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There''s an even better feature in Sass called **mixins**. Basically, they
    are a method for abstracting out repetition. For instance, it''s a drag to type
    in vendor prefixes for CSS3, but I can declare a mixin using the `@mixin` keyword
    and then create a template chock-full of vendor prefixes. Here, I have declared
    a mixin named `transition`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The mixin has parenthesis with arguments inside of it, `$property`, `$duration`,
    and `$timing-function`. Each argument has a default assigned to it, `all`, `.25s`,
    and `ease`. Then I have the -webkit- prefixed transition property and the un-prefixed
    verison. Both have the arguments of the mixin as their values.
  prefs: []
  type: TYPE_NORMAL
- en: 'This allows me to go into my CSS and, if I want to use a transition, just add
    the `@include transition`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'This compiles down to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Another thing I can do is update the default values of this mixin anytime I
    call it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'This will compile down to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: SASS nesting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Beyond variables and mixins, there''s nesting, which on the surface may not
    seem too powerful but is extremely convenient. Instead of writing descendant selectors,
    you can nest selectors inside of each other. You can see in the following CSS
    code that I''ve actually nested the `focus` and `hover` selectors inside of `.button`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'This compiles down in to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: As a rule of thumb, don't nest if you don't have to because the selector gets
    more specific and weighs more each time you nest. The trick to modular CSS is
    keeping your selectors lightweight. For more information on nesting and using
    the special ampersand character in Sass check out my article I wrote for CSS-Tricks.com
    entitled, *The Sass Ampersand* ([https://css-tricks.com/the-sass-ampersand/](https://css-tricks.com/the-sass-ampersand/)).
  prefs: []
  type: TYPE_NORMAL
- en: Creating and importing partial files with SASS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the *Font kits and font services* section in [Chapter 7](part0158.html#4MLOS0-a72d261cc09f412988422c8a08f12cd5),
    *Web Fonts,* we also discussed that Sass allows you to create partial files for
    different parts of your CSS and import them into your main Sass file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Sass will compile all partial Sass files into one main CSS file. So I have my
    CSS broken down into smaller chunks. They all compile down into `style.css`.
  prefs: []
  type: TYPE_NORMAL
- en: The best part about having these multiple organized files is that they compile
    down into one file, so that means just one HTTP request instead of multiple requests.
    That's a performance gain right there. Not to mention it keeps my CSS very organized.
  prefs: []
  type: TYPE_NORMAL
- en: So these are just a few of the very nice features of a preprocessor, specifically
    Sass. Using Sass or Less is definitely the most logical step at this point. The
    Sass style sheet you write will need to go through a compiler though that turns
    it into regular old CSS; otherwise, the browsers won't understand the Sass code.
    For compiling, you have a few options. You can install Ruby and Sass and use your
    command line to watch for any changes made to the Sass files. You could also check
    out software like CodeKit to do the same. Or you can use a task runner like Gulp,
    as we talked about at the end of the last section.
  prefs: []
  type: TYPE_NORMAL
- en: 'To learn more about SASS, I recommend *Brock Nunn''s Rapid SASS* video course
    in the Packt library:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00485.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Also, check out *SASS for Web Designers* by *Dan Cederholm*. This book does
    a really great job at explaining Sass in simple terms, and it''s a quick read:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00486.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: JavaScript and jQuery
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Another logical step for front end developers is to learn JavaScript if you
    haven't done so already. With CSS, we can add interactivity through the `hover`
    and `focus` states, but we can't have the on-click or swipe feature or anything
    like that. Enter JavaScript and jQuery. I recommend that you learn the basics
    of JavaScript; however, if you want to get a springboard in it, you can start
    out by learning jQuery.
  prefs: []
  type: TYPE_NORMAL
- en: 'So let''s say we want to do something like display a modal when we click on
    the Learn more >> link:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00487.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'We could have a modal that shows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00488.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'So we have an animation that will fade in and out. Therefore, it is relatively
    easier to set up animations with jQuery than JavaScript. The idea is to create
    a modal in HTML and CSS as if it has been there always. I created the modal and
    put that HTML at the very bottom of the HTML file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Then I have a Sass partial file called `modal.scss`, which styles the modal
    and positions it where it''s supposed to be:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The `.modal` class is also set to `display: none`, so by default, it''s not
    present. It''s like our drop-down menu; by default, it''s hidden.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here we have some jQuery to open the modal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'This basically watches for a click on the link with a class of `learn-more`,
    then fade in the element with the class of `modal-learn-more`. If we go back to
    the HTML, we''ll see that we have the `modal-learn-more` class on the outermost
    parent `div` of the modal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'This is readable and a very small amount of jQuery. The same thing goes if
    we want to tell the modal that we want to close it when we click on the close
    link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'We''re basically saying when you click on the close modal, we''re going to
    have `modal-learn-more` fade out. jQuery handles the animation of fading in and
    fading out through predefined methods that they have created. Selecting the `div`
    that we want to fade out and selecting the item or the element that we want to
    click on is very easy in jQuery. To learn more about jQuery, I recommend checking
    out the jQuery books in the Packt library, particularly *jQuery for Designers:
    Beginner''s Guide*.'
  prefs: []
  type: TYPE_NORMAL
- en: Sass and jQuery are the next logical steps going forward. Sass takes CSS authoring
    to the next level, and jQuery will give you the ability to add functionality and
    deeper interaction to your website. Not to mention that it will round you out
    as a front end developer. In the next section, I'm going to wrap up by recapping
    everything we've discussed and point out a few good resources you can use to get
    more information.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion and links
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Thank you for reading *Mastering CSS*. I truly enjoyed putting this book together.
    We covered a lot of ground, so I'm going to do a recap of the things we've learned
    and point you in the direction of where you can get more information on the topics.
  prefs: []
  type: TYPE_NORMAL
- en: The box model and block versus inline elements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We started this book by reviewing the basics, such as the box model, and the
    difference between block and inline elements. A great place to learn more about
    these two important, fundamental topics is on Sitepoint''s A to Z CSS screencasts.
    For block vs inline elements: [https://www.sitepoint.com/atoz-css-screencast-display/](https://www.sitepoint.com/atoz-css-screencast-display/)
    and for the box model [https://www.sitepoint.com/atoz-css-screencast-box-model/](https://www.sitepoint.com/atoz-css-screencast-box-model/).
    Here you can view some really helpful box models and display videos.'
  prefs: []
  type: TYPE_NORMAL
- en: Floats
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We also talked a lot about floats and how to use them to create a multicolumn
    layout, as we did on our home page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00489.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: We talked about the problems created by floats, such as collapse, and other
    content flowing around the float. We also discussed different ways, such as using
    the `clear-fix`, to avoid these problems. To learn more about floats, I'm going
    to point you right back to Sitepoint's A to Z CSS, and the short six-minute video
    ([https://www.sitepoint.com/atoz-css-screencast-float-and-clear/](https://www.sitepoint.com/atoz-css-screencast-float-and-clear/))
    that covers the basics of floats and how to get used to their quirks.
  prefs: []
  type: TYPE_NORMAL
- en: Modular CSS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Next you learned how to create modular CSS. We didn't want to style one piece
    of our site and then redo all those styles again if we felt like styling another
    similar piece of our site. We wanted to be able to reuse the CSS we had already
    created by employing modular techniques. I emphasized this when we built our buttons
    using modular classes. To learn more about modular CSS, you can get smacked over
    at **SMACSS** (**Scalable and modular architecture for CSS**); refer to the [smacss.com](http://smacss.com)
    website.
  prefs: []
  type: TYPE_NORMAL
- en: CSS3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We ended up using a lot of CSS3 at this point for our buttons. We used a lot
    of hover effects throughout the site. On the movies page, we added a hover effect
    to one of the movie images. If you want to learn more about CSS3, there's a great
    book in the Packt library called *Designing Next Generation Web Projects with
    CSS3* by *Sandro Paganotti*.
  prefs: []
  type: TYPE_NORMAL
- en: Also, you might want to check out *CSS3 for Web Designers*, *second edition*
    by *Dan Cederholm*, available through [abookapart.com](http://abookapart.com).
  prefs: []
  type: TYPE_NORMAL
- en: Creating the navigation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We went on to build one heck of navigation that was in a fixed position to
    the top with our content scrolled underneath it. It had a nice drop-down menu
    that animated downward nicely using CSS animations:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00490.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'We also had our shark animate upon browser refresh; we made it look like it
    was swimming, and that was a lot of fun. I''m proud of an article I wrote on CSS
    animations: [http://www.richfinelli.com/css-animations-arent-that-tough/](http://www.richfinelli.com/css-animations-arent-that-tough/).
    In this article, I get into all the animation properties in detail and slowly
    progress to creating a rather complex animation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00491.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'I find myself constantly referring to the **Mozilla Developer Network** (**MDN**)
    website for a quick reference on animation properties. I think MDN is a very reliable
    and deep resource for all things web:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00492.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Making the site responsive
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We did a great job in making our site responsive, especially when we completely
    transformed our menu into a small screen to accommodate mobile devices:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00493.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: In my opinion, the best place to learn more about responsive web design is from
    the man who invented it himself-Ethan Marcotte. Check out the ground breaking
    book that started it all – *Responsive Web Design.* The second edition of the
    book was released at the end of 2014.
  prefs: []
  type: TYPE_NORMAL
- en: Web fonts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [Chapter 7](part0158.html#4MLOS0-a72d261cc09f412988422c8a08f12cd5), *Web
    Fonts*, we talked about web fonts and icon fonts. We learned how a good font can
    really make a site look great. Back to the [abookapart.com](https://abookapart.com/)
    website, there is a very good book you can use to learn how to set and pair type
    phases. It's called *On Web Typography* by *Jason Santa Maria*.
  prefs: []
  type: TYPE_NORMAL
- en: HiDPI devices
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Finally, in [Chapter 8](part0176.html#57R300-a72d261cc09f412988422c8a08f12cd5),
    *Workflow for HiDPI Devices*, we got our site "retina ready" by learning what
    we needed to do with images in order to make them look crisp on double density
    displays such as the iPad Retina. We looked at a number of approaches to account
    for Retina. One of the things I'm most excited about in web development is SVG.
    It really solves some of the glaring problems of Retina. Chris Coyier of CSS tricks
    ([https://css-tricks.com](https://css-tricks.com/)) has written a few great articles
    that sum up SVG and how to use it, including the one titled – Using SVG.
  prefs: []
  type: TYPE_NORMAL
- en: Also for more information on the `srcset` attribute I wrote two articles on
    that topic. One on the W descriptor and `sizes` attribute ([http://www.richfinelli.com/srcset-part-2/](http://www.richfinelli.com/srcset-part-2/))
    and another on the X descriptor ([http://www.richfinelli.com/srcset-part-1/](http://www.richfinelli.com/srcset-part-1/)).
  prefs: []
  type: TYPE_NORMAL
- en: Flexbox
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Flexbox is so much fun! We converted our 3 column float-based layout to a flexbox-based
    layout and built a new section, our product listing, using flexbox. For more information
    on flexbox I recommend checking out Wes Bos' video course, *What the Flexbox!
    at* flexbox.io or for a quick and comprehensive reference to all flexbox properties
    check out *CSS Tricks' A Complete Guide to Flexbox* at [https://css-tricks.com/snippets/css/a-guide-to-flexbox/](https://css-tricks.com/snippets/css/a-guide-to-flexbox/).
  prefs: []
  type: TYPE_NORMAL
- en: 'Final tidbit of advice: Audio Podcasts are terrific'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you're like me and have a strong desire to learn and a long drive to work,
    audio podcasts can be a great resource. Two of my favorite podcasts on front end
    development are Shoptalk ([http://shoptalkshow.com/](http://shoptalkshow.com/))
    and Syntax ([https://syntax.fm/](https://syntax.fm/)). Both are very fun and informative.
    Listening to podcasts on my way to work is my way of staying up to date in what's
    happening in web development and what's new out there to learn.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the end, I think we created one heck of a little site here, learning a lot
    about CSS and web development. So once again thanks for reading. I really did
    have a lot of fun putting it together. I wish you much success and hope that you
    continue to hone your CSS skills.
  prefs: []
  type: TYPE_NORMAL
