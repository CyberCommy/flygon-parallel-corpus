- en: '*Chapter 3*'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Control Flow
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Learning Objectives
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'By the end of this lesson, you''ll be able to:'
  prefs: []
  type: TYPE_NORMAL
- en: Control the flow of execution using the `if` and `else` statements in Java
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Check through multiple conditions using the switch case statements in Java
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Utilize the looping constructs in Java to write concise code to perform repetitive
    actions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: So far, we have looked at programs that consist of a series of statements that
    the Java compiler executes sequentially. However, in certain cases, we might need
    to perform actions based on the current state of the program.
  prefs: []
  type: TYPE_NORMAL
- en: Consider the example of the software that's installed in an ATM machine â€“ it
    performs a set of actions, that is, it allows a transaction to occur when the
    PIN that's been entered by the user is correct. However, when the PIN that's been
    entered is incorrect, then the software performs another set of actions, that
    is, it informs the user that the PIN does not match and asks the user to reenter
    the PIN. You'll find that such logical constructs that depend upon values or stages
    are present in almost all real-world programs.
  prefs: []
  type: TYPE_NORMAL
- en: There are also times where a particular task might need to be performed repeatedly,
    that is, for a particular time duration, for a particular set number of times,
    or until a condition is met. Continuing from our example of the ATM machine, if
    the number of times an incorrect password is entered exceeds three, then the card
    is blocked.
  prefs: []
  type: TYPE_NORMAL
- en: 'These logical constructs act as building blocks, as we move toward building
    complex programs in Java. This lesson will dive into these basic constructs, which
    can be categorized into two general classes, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Conditional statements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Looping statements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Conditional Statements
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Conditional statements are used to control the flow of execution of the Java
    compiler based on certain conditions. This implies that we are making a choice
    based on a certain value or the state of a program. The conditional statements
    that are available in Java are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The `if` statement
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `if-else` statement
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `else-if` statement
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `switch` statement
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The if Statement
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The if statement tests a condition, and when the condition is true, the code
    contained in the if block is executed. If the condition is not true, then the
    code in the block is skipped and the execution continues from the line after the
    block.
  prefs: []
  type: TYPE_NORMAL
- en: 'The syntax for an `if` statement is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Consider the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Since the condition `a<10` is true, the print statement is executed.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can check for multiple values in the `if` condition as well. Consider the
    following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code snippet checks whether the value of `age` is above 50, but
    at most 70, excluding 60.
  prefs: []
  type: TYPE_NORMAL
- en: 'When the statement in the `if` block is just one line, then we don''t need
    to include the enclosing braces:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The else Statement
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For some scenarios, we need a different block of code to be executed if the
    `if` condition fails. For that, we can use the `else` clause. It is optional.
  prefs: []
  type: TYPE_NORMAL
- en: 'The syntax for the `if else` statement is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Exercise 6: Implementing a Simple if-else Statement'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In this exercise, we are going to create a program that checks whether bus
    tickets can be book based on the number of empty seats. Complete the following
    steps to do so:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click the `src` folder and select **New** | **Class**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `Booking` as the class name, and then click **OK**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Set up the `main` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Initialize two variables, one for the number of empty seats and the other for
    the requested ticket numbers:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Use the `if` condition to check whether the requested ticket numbers are lower
    than or equal to the empty seats available, and print the appropriate messages:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Run the program.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You should get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The else-if Statement
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`else if` statements are used when we wish to compare multiple conditions before
    the `else` clause is evaluated.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The syntax for the `else if` statement is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Exercise 7: Implementing the else-if Statements'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We are building an e-commerce application that calculates the delivery fee
    based on the distance between the seller and the buyer. A buyer purchases an item
    on our website and enters the delivery address. Based on the distance, we calculate
    the delivery fee and display it to the user. In this exercise, we are given the
    following table and need to write a program to output the delivery fee to the
    user:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Table 3.1: Table showing the distance and its corresponding fee](img/C09581_Table_03_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Table 3.1: Table showing the distance and its corresponding fee'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'To do this, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click the `src` folder and select **New** | **Class**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `DeliveryFee` as the class name, and then click **OK**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the created class, and then create the main method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Within the `main` method, create two integer variables, one called `distance`
    and another called `fee`. The two variables will hold the `distance` and delivery
    fees, respectively. Initialize the di`stance` to 10 and the `fee` to zero:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Create an `if` block to check the first condition in the table:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: This `if` statement checks whether the `distance` is above 0 but below 5 and
    sets the delivery `fee` to 2 dollars.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add an `else if` statement to check the second condition in the table and set
    the `fee` to 5 dollars:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Add two more `else if` statements to check for the third and fourth conditions
    in the table, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, add an `else` statement to match the last condition in the table and
    set the appropriate delivery `fee`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Print out the value of the fee:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the program and observe the output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Nested if Statements
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We can have `if` statements inside other `if` statements. This construct is
    called a nested `if` statement. We evaluate the outer condition first and if it
    succeeds, we then evaluate a second inner `if` statement and so on until all the
    `if` statements have finished:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: We can nest as many statements as we wish to, and the compiler will evaluate
    them, starting from the top going downward.
  prefs: []
  type: TYPE_NORMAL
- en: switch case Statements
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `switch case` statements are an easier and more concise way of doing multiple
    `if` `else` statements when the same value is being compared for equality. The
    following is a quick comparison:'
  prefs: []
  type: TYPE_NORMAL
- en: 'A traditional `else if` statement would look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'However, with the same logic, when implemented using a `switch case` statement,
    it would look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Notice how this code is more readable.
  prefs: []
  type: TYPE_NORMAL
- en: To use a `switch` statement, first you need to declare it with the keyword `switch`,
    followed by a condition in parentheses. The `case` statements are used to check
    these conditions. They are checked in a sequential order.
  prefs: []
  type: TYPE_NORMAL
- en: The compiler will check the value of `age` against all the cases and if it finds
    a match, the code in that `case` will execute and so will all the cases following
    it. For example, if our `age` was equal to 10, the first `case` will be matched
    and then the second `case`, the third `case`, and the `default` `case`. The `default`
    `case` is executed if all the other cases are not matched. For example, if `age`
    is not 10, 20, or 30, then the discount would be set to 50\. It can be interpreted
    as the `else` clause in `if-else` statements. The `default` `case` is optional
    and can be omitted.
  prefs: []
  type: TYPE_NORMAL
- en: If `age` was equal to 30, then the third `case` would be matched and executed.
    Since the `default` `case` is optional, we can leave it out and the execution
    will end after the third `case`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Most of the time, what we really wish for is the execution to end at the matched
    `case`. We want it to be so that if the first `case` is matched, then the code
    in that `case` is executed and the rest of the cases are ignored. To achieve this,
    we use a `break` statement to tell the compiler to continue to execute outside
    the `switch` statement. Here is the same `switch case` with `break` statements:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Because the default is the last `case`, we can safely ignore the `break` statement
    because the execution will end there anyway.
  prefs: []
  type: TYPE_NORMAL
- en: 'Note:'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: It is good design to always add a break statement in case another programmer
    adds extra cases in the future.
  prefs: []
  type: TYPE_NORMAL
- en: 'Activity 6: Controlling the Flow of Execution Using Conditionals'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'A factory pays its workers $10 per hour. The standard working day is 8 hours,
    but the factory gives extra compensation for additional hours. The policy it follows
    to calculate the salary is like so:'
  prefs: []
  type: TYPE_NORMAL
- en: If a person works for less than 8 hours â€“ number of hours * $10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the person works for more than 8 hours but less than 12 â€“ 20% extra for the
    additional hours
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More than 12 hours â€“ additional day's salary is credited
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a program that calculates and displays the salary earned by the worker
    based on the number of hours worked.
  prefs: []
  type: TYPE_NORMAL
- en: 'To meet this requirement, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Initialize two variables and the values of the working hours and salary.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the `if` condition, check whether the working hours of the worker is below
    the required hours. If the condition holds `true`, then the salary should be (working
    hours * 10).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the `else if` statement to check if the working hours lies between 8 hours
    and 12 hours. If that is true, then the salary should be calculated at $10 per
    hour for the first eight hours and the remaining hours should be calculated at
    $12 per hour.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the `else` block for the default of $160 (additional day's salary) per day.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Execute the program to observe the output.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The solution for this activity can be found on page 308.
  prefs: []
  type: TYPE_NORMAL
- en: 'Activity 7: Developing a Temperature System'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Write a program in Java that displays simple messages, based on the temperature.
    The temperature is generalized to the following three sections:'
  prefs: []
  type: TYPE_NORMAL
- en: 'High: In this case, suggest the user to use a sunblock'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Low: In this case, suggest the user to wear a coat'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Humid: In this case, suggest the user to open the windows'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To do this perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Declare two strings, `temp` and `weatherWarning`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Initialize `temp` with either `High`, `Low`, or `Humid`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a switch statement that checks the different cases of `temp`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Initialize the variable `weatherWarning` to appropriate messages for each case
    of temp (`High`, `Low`, `Humid`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the default case, initialize `weatherWarning` to "The weather looks good.
    Take a walk outside".
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After you complete the switch construct, print the value of `weatherWarning`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the program to see the output, it should be similar to:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The solution for this activity can be found on page 309.
  prefs: []
  type: TYPE_NORMAL
- en: Looping Constructs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Looping constructs are used to perform a certain operation a given number of
    times as long as a condition is being met. They are commonly used to perform a
    specific operation on the items of a list. An example is when we want to find
    the summation of all the numbers from 1 to 100\. Java supports the following looping
    constructs:'
  prefs: []
  type: TYPE_NORMAL
- en: '`for` loops'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`for each` loops'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`while` loops'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`do while` loops'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: for Loops
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The syntax of the `for` loop is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'The initialization statements are executed when the `for` loop starts executing.
    It can be more than one expression, all separated by commas. The expressions must
    all be of the same type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: The condition section of the `for` loop must evaluate to true or false. If there
    is no expression, the condition defaults to true.
  prefs: []
  type: TYPE_NORMAL
- en: The expression part is executed after each iteration of the statements, as long
    as the condition is true. You can have more than one expression separated by a
    comma.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The expressions must be valid Java expressions, that is, expressions that can
    be terminated by a semicolon.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is how a `for` loop works:'
  prefs: []
  type: TYPE_NORMAL
- en: First, the initialization is evaluated.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, the condition is checked. If the condition is true, the statements contained
    in the `for` block are executed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After the statements are executed, the expression is executed, and then the
    condition is checked again.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If it is still not false, the statements are executed again, then the expression
    is executed, and the condition is evaluated again.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This is repeated until the condition evaluates to false.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When the condition evaluates to false, the `for` loop completes and the code
    sections after the loop are executed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Exercise 8: Implementing a Simple for Loop'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To print all the single digit numbers in increasing and decreasing order, perform
    the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click the `src` folder and select **New** | **Class**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `Looping` as the class name, and then click **OK**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Set up the `main` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Implement a `for` loop that initializes a variable `i` at zero, a condition
    so that the value remains below 10, and `i` should be incremented by one in each
    iteration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Implement another `for` loop that initializes a variable `k` at 9, a condition
    so that the value remains above 0, and `k` should be decremented by one in each
    iteration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Activity 8: Implementing the for Loop'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: John, a peach grower, picks peaches from his trees, puts them into fruit boxes
    and ships them. He can ship a fruit box if it is full with 20 peaches. If he has
    less than 20 peaches, he has to pick more peaches so he can fill a fruit box with
    20 peaches and ship it.
  prefs: []
  type: TYPE_NORMAL
- en: 'We would like to help John by writing an automation software that initiates
    the filling and shipping of boxes. We get the number of peaches from John, and
    we print a message for each group of 20 peaches and say how many peaches have
    been shipped so far. We print "shipped 60 peaches so far" for the third box, for
    example. We would like to do this with a `for` loop. We do not need to worry about
    the peaches leftover. To achieve this, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new class and enter `PeachBoxCounter` as the class name
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the `java.util.Scanner` package:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the `main()` use `System.out.print` to ask the user for the `numberOfPeaches`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Write a for loop that counts the peaches that are shipped so far. This starts
    from zero, increases 20 by 20 until the peaches left is less than 20\.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the `for` loop, print the number of peaches shipped so far.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the main program.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The output should be similar to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The solution for this activity can be found on page 310.
  prefs: []
  type: TYPE_NORMAL
- en: All three sections of the `for` loop are optional. This implies that the line
    `for( ; ;)` will provide any error. It just provides an invite loop.
  prefs: []
  type: TYPE_NORMAL
- en: 'This `for` loop doesn''t do anything and won''t terminate. Variables declared
    in the for loop declaration are available in the statements of the `for` loop.
    For example, in our first example, we printed the value of `i` from the statements
    sections because the variable `i` was declared in the `for` loop. This variable
    is, however, not available after the `for` loop and can be freely declared. It
    can''t however be declared inside the `for` loop again:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'For loops can also have braces enclosing the statements if we have more than
    one statement. This is just as we discussed in the `if-else` statements earlier.
    If we have only one statement, then we don''t need to have braces. When the statements
    are more than one, they need to be enclosed within braces. In the following example,
    we are printing out the value of `i` and `j`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The expressions must be valid Java expressions, that is, expressions that can
    be terminated by a semicolon.
  prefs: []
  type: TYPE_NORMAL
- en: A `break` statement can be used to interrupt the `for` loop and break out of
    the loop. It takes the execution outside the `for` loop.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, we might wish to terminate the `for` loop we created earlier if
    `i` is equal to 5:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: The preceding `for` loop iterates from 0, 1, 2, and 3 and terminates at 4\.
    This is because after the condition `i`, that is, 5 is met, the break statement
    is executed, which ends the `for` loop and the statements after it are not executed.
    Execution continues outside the loop.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `continue` statement is used to tell the loop to skip all the other statements
    after it and continue execution to the next iteration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: The number 5 is not printed because once the continue statement is encountered,
    the rest of the statements after it are ignored, and the next iteration is started.
    The `continue` statements can be useful when there are a few exceptions you wish
    to skip when processing multiple items.
  prefs: []
  type: TYPE_NORMAL
- en: Nested for Loops
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The block of statements within a loop can be another loop was well. Such constructs
    are known as nested loops:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'For each single loop of `i`, we loop `j` three times. You can think of these
    `for` loops as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Repeat `i` three times and for each repetition, repeat `j` three times. That
    way, we have a total of 9 iterations of `j`. For each iteration of `j`, we then
    print out the value of `i` and `j`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 9: Implementing a Nested for Loop'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Our goal in this exercise is to print a pyramid of * with seven rows, like
    so:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/C09581_Figure_03_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.1: Pyramid of * with seven rows'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'To achieve this goal, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click the `src` folder and select **New** | **Class**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `NestedPattern` as the class name, and then click **OK**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the main method, create a `for` loop that initializes the variable `i` at
    1, introduces the condition so that the value of `i` is at most 15, and increments
    the value of `i` by 2:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Within this loop, create two more `for` loops, one to print the spaces and
    the other to print the *:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Within the outer `for` loop, add the following code to add the next line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: Run the program. You will see the resultant pyramid.
  prefs: []
  type: TYPE_NORMAL
- en: for-each Loops
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`for each` loops are an advanced version of `for` loops that were introduced
    in Java 5\. They are used to perform a given operation on every item in an array
    or list of items.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at this `for` loop:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: The first line declares an array of integers. An array is a collection of items
    of the same type. In this case, the variable arr is holding a collection of 10
    integers. We then use a `for` loop from `0` to `10`, printing the elements of
    this array. We are using `i < 10` because the last item is at index `9`, not `10`.
    This is because the elements of an array start with index 0\. The first element
    is at index `0`, the second at index `1`, the third at `2`, and so on. `arr[0]`
    will return the first element, `arr[1]` the second, `arr[2]` the third, and so
    on.
  prefs: []
  type: TYPE_NORMAL
- en: 'This `for` loop can be replaced with a shorter `for each` loop. The syntax
    of a `for each` loop is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'For our preceding example, the `for each` loop would be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: '`int` `item` is the current element in the array we are at. The `for each`
    loop will iterate for all the elements in the array. Inside the braces, we print
    out the item. Note that we didn''t have to use `arr[i]` like in the `for` loop
    earlier. This is because the `for each` loop automatically extracts the value
    for us. In addition, we didn''t have to use an extra `int` `i` to keep the current
    index and check if we are below `10` `(i < 10)`, like in the `for` loop we used
    earlier. `for each` loops are shorter and automatically check the range for us.'
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, we can use the `for each` loop to print the squares of all the
    elements present in the array, `arr`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'Output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: The while and do while Loops
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Sometimes, we wish to execute certain statements repeatedly, that is, as long
    as a certain Boolean condition is true. Such cases require us to use a `while`
    loop or a `do while` loop. A `while` loop first checks a Boolean statement and
    executes a block of code if the Boolean is true, otherwise it skips the `while`
    block. A `do while` loop first executes a block of code once before it checks
    the Boolean condition. Use a `do while` loop when you want the code to be executed
    at least once and a `while` loop when you want the Boolean condition to be checked
    first before the first execution. The following are the formats of the `while`
    and `do while` loops:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The syntax for the `while` loop:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'The syntax for the `do while` loop:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'For example, to print all of the numbers from 0 to 10 using a `while` loop,
    we would use the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'Output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'We could also write the preceding code using a `do while` loop:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: With the `do while` loop, the condition is evaluated last, so we are sure that
    the statements will be executed at least once.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 10: Implementing the while Loop'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To print the first 10 numbers in the Fibonacci series using the `while` loop,
    perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click the `src` folder and select **New** | **Class**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `FibonacciSeries` as the class name, and then click **OK**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Declare the variables that are required in the `main` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: Here, `i` is the counter, `x` and `y` store the first two numbers of the Fibonacci
    series, and `sum` is a variable that is used to calculate the sum of the variables
    `x` and `y`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Implement a `while` loop with the condition so that the counter `i` does not
    go beyond 10:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'Within the `while` loop, implement the logic to print the value of `x`, and
    then assign the appropriate values to `x`, `y`, and `sum` so that we are always
    printing the `sum` of the last and the penultimate number:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'Activity 9: Implementing the while Loop'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Remember John, who is a peach grower. He picks peaches from his trees, puts
    them into fruit boxes and ships them. He can ship a fruit box if it is full with
    20 peaches. If he has less than 20 peaches, he has to pick more peaches so he
    can fill a fruit box with 20 peaches and ship it.
  prefs: []
  type: TYPE_NORMAL
- en: 'We would like to help John by writing an automation software that initiates
    the filling and shipping of boxes. We get the number of peaches from John, and
    we print a message for each group of 20 peaches and say how many boxes we have
    shipped and how many peaches we have left, e.g., "2 boxes shipped, 54 peaches
    remaining". We would like to do this with a `while` loop. The loop will continue
    as we have a number of peaches that would fit at least one box. In contrast to
    the previous activity with `for`, we will also keep track of the remaining peaches.
    To achieve this, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new class and enter `PeachBoxCounter` as the class name
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the `java.util.Scanner` package:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the `main()` use `System.out.print` to ask the user for the `numberOfPeaches`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a `numberOfBoxesShipped` variable.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Write a while loop that continues as we have at least 20 peaches.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the loop, remove 20 peaches from `numberOfPeaches` and increment `numberOfBoxesShipped`
    by 1\. Print these values.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the main program.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The output should be similar to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The solution for this activity can be found on page 311.
  prefs: []
  type: TYPE_NORMAL
- en: 'Activity 10: Implementing Looping Constructs'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Our goal is to create a ticketing system so that when the user puts in a request
    for the tickets, the tickets are approved based on the number of seats remaining
    in the restaurant.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create such a program, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Import the packages that are required to read data from the user.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Declare the variables to store the total number of seats available, remaining
    seats, and tickets requested.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Within a `while` loop, implement the `if else` loop that checks whether the
    request is valid, which implies that the number of tickets requested is less than
    the number of seats remaining.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the logic in the previous step is true, then print a message to denote that
    the ticket is processed, set the remaining seats to the appropriate value, and
    ask for the next set of tickets.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the logic in step 3 is false, then print an appropriate message and break
    out of the loop.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The solution for this activity can be found on page 312.
  prefs: []
  type: TYPE_NORMAL
- en: 'Activity 11: Continuous Peach Shipment with Nested Loops.'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Remember John, who is a peach grower. He picks peaches from his trees, puts
    them into fruit boxes and ships them. He can ship a fruit box if it is full with
    20 peaches. If he has less than 20 peaches, he has to pick more peaches so he
    can fill a fruit box with 20 peaches and ship it.
  prefs: []
  type: TYPE_NORMAL
- en: We would like to help John by writing an automation software that initiates
    the filling and shipping of boxes. In this new version of our automation software,
    we will let John bring in the peaches in batches of his own choosing and will
    use the remaining peaches from the previous batch together with the new batch.
  prefs: []
  type: TYPE_NORMAL
- en: 'We get the incoming number of peaches from John and add it to the current number
    of peaches. Then, we print a message for each group of 20 peaches and say how
    many boxes we have shipped and how many peaches we have left, e.g., "2 boxes shipped,
    54 peaches remaining". We would like to do this with a `while` loop. The loop
    will continue as we have a number of peaches that would fit at least one box.
    We will have another `while` loop that gets the next batch and quits if there
    is none. To achieve this, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new class and enter `PeachBoxCount` as the class name
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the `java.util.Scanner` package:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a `numberOfBoxesShipped` variable and a `numberOfPeaches` variable.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the `main()`, write an infinite `while` loop.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use `System.out.print` to ask the user for the `incomingNumberOfPeaches`. If
    this is zero, `break` out of this infinite loop.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add the incoming peaches to the existing peaches.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Write a `while` loop that continues as we have at least 20 peaches.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the for loop, remove 20 peaches from `numberOfPeaches` and increment `numberOfBoxesShipped`
    by 1\. Print these values.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the main program.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The output should be similar to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The solution for this activity can be found on page 313.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this lesson, we've covered some of the fundamental and important concepts
    in Java and programming by looking at some simple examples. Conditional statements
    and looping statements are normally essential to implementing logic.
  prefs: []
  type: TYPE_NORMAL
- en: In the next lesson, we will focus on a couple more fundamental concepts, such
    as functions, arrays, and strings. These concepts will help us in writing concise
    and reusable code.
  prefs: []
  type: TYPE_NORMAL
