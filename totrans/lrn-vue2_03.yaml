- en: Chapter 3. Components – Understanding and Using
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, you learned how Vue.js works. You saw behind the scenes
    and even made a slight debug of the core Vue.js code. You learned some of Vue's
    key concepts. You also learned and tried different ways of installing Vue.js.
    We have bootstrapped the applications; we will develop and enhance from this chapter
    on. We have also seen how to debug and to test our applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the first chapter, we talked about components and even created some. In
    this chapter, we will use components in our applications and see some interesting
    directives in action. That being said, in this chapter, we are going to do the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: Revisit the components topic and review what components are
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create components for our applications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learn what single-file components are
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learn how to achieve reactive CSS transitions with special attributes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Revisiting components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As you surely remember from the previous chapters, components are special parts
    of the Vue application that have their own scope of data and methods. Components
    can be used and reused throughout the application. In the previous chapter, you
    learned that a component is created by using the `Vue.extend({...})` method and
    registered using the `Vue.component()` syntax. So, in order to create and use
    a component, we would write the following JavaScript code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we will use `hello-component` inside the HTML:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Both initialization and registration can be written as a single `Vue.component`
    invocation with corresponding options:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Vue.component(''hello-component'', { template: ''<h1>Hello</h1>'' });`'
  prefs: []
  type: TYPE_NORMAL
- en: Benefits of using components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are some things that we need to learn before going deep into the components
    and rewrite our applications using them. In this section, we will cover things
    such as handling `data` and `el` properties inside a component, component templates,
    scope, and preprocessors.
  prefs: []
  type: TYPE_NORMAL
- en: Declaring templates in HTML
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In our previous example, we created a Vue component with a template written
    as a string. It's actually easy and nice because we have everything we need inside
    our component. Now imagine our component with a more complex HTML structure. Writing
    a complex HTML string template is error-prone, ugly, and against best practices.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: By best practices, I mean clean and maintainable code. Complex HTML written
    as a string is anything but maintainable.
  prefs: []
  type: TYPE_NORMAL
- en: Vue allows declaring templates inside an HTML file within a special `<template>`
    tag!
  prefs: []
  type: TYPE_NORMAL
- en: 'So, to rewrite our example, we will declare an HTML tag template with the corresponding
    markup inside:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'And then, inside our component, instead of the HTML string, we will just use
    the ID of the template:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Our whole code will look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, we had only used the `template` attribute for the
    component. Let's move on and see how the `data` and `el` attributes should be
    treated inside a component.
  prefs: []
  type: TYPE_NORMAL
- en: Handling data and el properties inside a component
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As already mentioned, the component''s syntax is the same as the Vue instance''s
    syntax, but it must extend the Vue instead of calling it directly. With this premise,
    it seems correct to create a component like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'But this would lead to a scope leak. Every instance of `HelloComponent` would
    share the same `data` and `el`. And this is not exactly what we want. That is
    why Vue explicitly demands to declare these properties as functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Even if you make a mistake and declare the `data` or the `el` properties as
    an object or an element, Vue will kindly warn you:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Handling data and el properties inside a component](../Images/image00260.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Vue's warning when using data as an object instead of a function inside of a
    Vue component
  prefs: []
  type: TYPE_NORMAL
- en: Scope of the components
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As already mentioned, all components have their own scope that is inaccessible
    by other components. Nevertheless, the global application scope is accessible
    by all the registered components. You can see the components' scope as local and
    the application scope as global scopes. It's the same. However, using the parent's
    data inside a component is not straightforward. You have to explicitly indicate
    inside a component which parent's data properties should be accessed using the
    `prop` attribute and bind them to the component instance using the `v-bind` syntax.
    Let's see how it works on our `HelloComponent` example.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start by declaring `HelloComponent` with data that contains the attribute
    `msg`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s create a `Vue` instance with some data inside it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside our HTML, let''s create a template and apply it to the component using
    the template''s ID:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'In order to see the component on the page, we should invoke it inside the HTML
    of our `app` container:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'If you open the page in the browser, you will only see **`Hello`**; the `user`
    data property is still not bound to the component:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Scope of the components](../Images/image00261.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The parent's data property is not yet bound to our Vue component
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to bind the data from the parent Vue application, we have to do the
    following two things:'
  prefs: []
  type: TYPE_NORMAL
- en: Indicate this property inside of the `prop` attribute of a component
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Bind it to the `hello-component` invocation:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Refresh the page and you will see how it now presents you with a greeting:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Scope of the components](../Images/image00262.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: After the correct binding of the parent's `data` property to the component,
    everything works as expected.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Actually, the `v-bind:user` syntax can be shortcut just by using the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`:user<hello-component **:user="user"**></hello-component>`'
  prefs: []
  type: TYPE_NORMAL
- en: Components inside other components
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The beauty of the components is that they can be used and reused inside other
    components as Lego bricks and blocks! Let''s build another component; let''s call
    it **greetings,** which will be composed of two sub-components: the form asking
    for the user''s name and our `hello` component.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to do this, let''s declare the template for the form and our already
    familiar `hello` template:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we will register two Vue components based on these templates:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we will create our greetings template that will use both `form` and
    `hello` components. Do not forget that we have to bind the `user` property on
    the components invocation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'At this point, we can create our greetings component and use the greetings
    template inside it. Let''s initialize, which `data` function with the name of
    the user in this component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside our main application container, we will now invoke the greetings component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Do not forget to initialize the Vue application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Open the page in the browser. You should see something like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Components inside other components](../Images/image00263.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The page built from various Vue components
  prefs: []
  type: TYPE_NORMAL
- en: Try to change the name in the input. You are expecting it to change also in
    the greetings header because we bound it to it. But strangely, it doesn't change.
    Well, this is actually the normal behavior. By default, all props follow one-way
    data binding. This means that if the data changes within the parent's scope, these
    changes are propagated to the child component, but not vice versa. It is done
    this way in order to prevent children components from accidentally mutating the
    parent state. It is, however, possible to force children components to communicate
    with their parents by invoking events. Check the Vue documentation at [https://vuejs.org/guide/components.html#Custom-Events](https://vuejs.org/guide/components.html#Custom-Events)
    .
  prefs: []
  type: TYPE_NORMAL
- en: In our case, we can bind a user model to our form `input` component and emit
    the `input` event every time the user types in the input box. We achieve it by
    using the `v-on:input` modifier, just like it is described in this section at
    [https://vuejs.org/guide/components.html#Form-Input-Components-using-Custom-Events](https://vuejs.org/guide/components.html#Form-Input-Components-using-Custom-Events)
    .
  prefs: []
  type: TYPE_NORMAL
- en: 'Thus, we have to pass `v-model:user` to `form-component`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, `form-component` should accept the `value` prop and emit the `input`
    event:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'The input box inside the `form-component` template should bind the `v-on:input` and
    the `onInput` method to the `v-on:input` modifier:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Actually, prior to Vue 2.0, this kind of two-way synchronization between components
    and their parents was possible by explicitly telling the property being bound
    to **sync** using the `.sync` modifier: `<form-component :user.sync="user"></form-component>`
  prefs: []
  type: TYPE_NORMAL
- en: 'Refresh the page. Now you can change the name inside the input and it is immediately
    propagated to the parent''s scope, and thus to other children components that
    rely on this property:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Components inside other components](../Images/image00264.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Binding properties with the .sync modifier allows two-way data binding between
    parent and children components
  prefs: []
  type: TYPE_NORMAL
- en: You can find the complete code for this example in the JSFiddle at [https://jsfiddle.net/chudaol/1mzzo8yn/](https://jsfiddle.net/chudaol/1mzzo8yn/)
    .
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Before the Vue 2.0 release, there was one more data-binding modifier, `.once`.
    With this modifier, the data would be bound only once, and any other changes would
    not affect the state of components. Compare the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`<form-component **:user="user"**></form-component>`'
  prefs: []
  type: TYPE_NORMAL
- en: '`<form-component **:user.sync="user"**></form-component>`'
  prefs: []
  type: TYPE_NORMAL
- en: '`<form-component **:user.once="user"**></form-component>`'
  prefs: []
  type: TYPE_NORMAL
- en: Rewriting the shopping list with simple components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we already know a lot about components, let's rewrite our shopping
    list application using them.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For the rewriting of the application, we will use this version of the shopping
    list application as a base: [https://jsfiddle.net/chudaol/vxfkxjzk/3/](https://jsfiddle.net/chudaol/vxfkxjzk/3/)
    .'
  prefs: []
  type: TYPE_NORMAL
- en: 'We have already done it previously, when we started talking about components.
    But at that time, we used string templates inside the components'' options. Let''s
    do it now using templates as we have just learned to do. Let''s just have a look
    at the interface and identify the components again:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Rewriting the shopping list with simple components](../Images/image00265.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Our shopping list application will have four components
  prefs: []
  type: TYPE_NORMAL
- en: 'Thus, I suggest that our shopping list application consists of the following
    four components:'
  prefs: []
  type: TYPE_NORMAL
- en: '`AddItemComponent`: The component responsible for adding a new item to the
    shopping list'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ItemComponent`: The component responsible for the rendering of the new item
    in the shopping list'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ItemsComponent`: The component responsible for rendering and managing the
    list of `ItemComponent`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ChangeTitleComponent`: The component responsible for changing the title of
    the list'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defining templates for all the components
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's create templates for these components assuming that the components themselves
    are already defined and registered.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**`CamelCase VS kebab-case`** You have probably noticed that while we declare
    variables describing components in CamelCase (`var HelloComponent=Vue.extend({...})`),
    we name them in kebab-case: `Vue.component(''hello-component'', {...})`. We do
    this because of the case-insensitive HTML attribute nature. Thus, our components
    for the shopping list application will be called as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`add-item-component`'
  prefs: []
  type: TYPE_NORMAL
- en: '`item-component`'
  prefs: []
  type: TYPE_NORMAL
- en: '`items-component`'
  prefs: []
  type: TYPE_NORMAL
- en: '`change-title-component`'
  prefs: []
  type: TYPE_NORMAL
- en: Have a look at how our markup was previously ( [https://jsfiddle.net/chudaol/vxfkxjzk/3/](https://jsfiddle.net/chudaol/vxfkxjzk/3/)
    ).
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s rewrite it using templates and components'' names. In this part, we
    will just worry about the presentation layer, leaving the data binding and actions
    handling for a future implementation. We just copy and paste the HTML part of
    the application and distribute it over our components. Our four templates will
    look something like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Thus, our main components'' markup will consist of some components:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, the majority of each template is a plain copy and paste of the
    corresponding HTML code.
  prefs: []
  type: TYPE_NORMAL
- en: However, there are some significant differences. The list item template, for
    example, is slightly changed. You have already learned and used the `v-for` directive
    previously. In the previous examples, we used this directive with HTML elements
    such as `<li>`. Now you see that it can also be used with Vue custom components.
  prefs: []
  type: TYPE_NORMAL
- en: You might have also noticed a small difference in the change title template.
    Now it has a value bound to it and emits the `onInput` method bound to the `v-on:input`
    modifier. As you have learned in the previous section, children components cannot
    directly affect directly a parent's data, which is why we have to use the events
    system.
  prefs: []
  type: TYPE_NORMAL
- en: Defining and registering all the components
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Have a look at the JavaScript code in our previous shopping list application:
    [https://jsfiddle.net/chudaol/c8LjyenL/](https://jsfiddle.net/chudaol/c8LjyenL/)
    . Let''s add the code that creates Vue components. We will use the IDs of already
    defined templates for their `template` attribute. Also, do not forget about the
    `props` attribute to pass the properties from the parent application. Thus, we
    add the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, in `props` of each component, we have passed different data
    attributes—only those that specifically concern the component. We have also moved
    the `newItem` attribute to the `data` attribute of `add-item-component`. In `change-title-component`,
    we have added the `onInput` method that emits the input event, so the title in
    the parent component is affected by whatever the user types in the input box.
  prefs: []
  type: TYPE_NORMAL
- en: Open the HTML file in the browser. The interface is exactly the same as it was
    earlier! The complete code of what we have done in this section can be found in
    the JSFiddle at [https://jsfiddle.net/chudaol/xkhum2ck/1/](https://jsfiddle.net/chudaol/xkhum2ck/1/)
    .
  prefs: []
  type: TYPE_NORMAL
- en: Exercise
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Although our application looks exactly as it was looking earlier, its functionality
    was lost. Not only does it not add items, but it also shows the ugly error in
    the devtools console.
  prefs: []
  type: TYPE_NORMAL
- en: Please use the events emitting system to bring the adding items functionality
    back.
  prefs: []
  type: TYPE_NORMAL
- en: A possible solution for this exercise can be found in the Appendix, *Solutions
    to Exercises.*
  prefs: []
  type: TYPE_NORMAL
- en: Single-file components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We know from the old best practices that it is always good to separate HTML
    from CSS and JavaScript files. Some modern frameworks such as React are relaxing
    and gradually wiping out this rule. Nowadays, you will not be shocked by looking
    at the small file or the component that contains its own markup, style, and application
    code inside it. Actually, for small components, we even find it more convenient
    to have such architecture. Vue also allows defining everything related to the
    same component in the same file. This kind of component is known as a single-file
    component.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A single-file Vue component is a file with a `.vue` extension. The application
    that contains such components can be built using the `webpack vue` configuration.
    To scaffold an app with such a configuration, the easiest way is to use `vue-cli`
    ( [https://github.com/vuejs-templates/webpack](https://github.com/vuejs-templates/webpack)).
  prefs: []
  type: TYPE_NORMAL
- en: 'A Vue component can have up to three sections in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '`<script>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<template>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<style>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each of these sections is responsible for exactly what you are thinking. Put
    into the `<template>` tag whatever the HTML template should be responsible for,
    put into the `<script>` tag the JavaScript code responsible for the Vue component,
    methods, data, props, and so on. The `<style>` tag shall contain the CSS style
    for the given component.
  prefs: []
  type: TYPE_NORMAL
- en: Do you remember our `hello-component`? Have a look at it in the JSFiddle at
    [https://jsfiddle.net/chudaol/mf82ts9a/2/](https://jsfiddle.net/chudaol/mf82ts9a/2/)
    .
  prefs: []
  type: TYPE_NORMAL
- en: 'Start by scaffolding the app using the `webpack-simple` configuration with
    `vue-cli`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'To rewrite it as a Vue component, we create our `HelloComponent.vue` file and
    add the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Note that we do not need to specify the template in our JavaScript component
    definition. Being a single-file component, it is implicit that the template that
    should be used is the one defined in this file. You might also have noticed that
    we use ES6 style in here. Also, do not forget that the `data` attribute should
    be a function and not an object.
  prefs: []
  type: TYPE_NORMAL
- en: 'In our main script, we have to create the Vue app and instruct it to use `HelloComponent`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Our `index.html` markup will not change. It will still invoke `hello-component`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we just need to install `npm` dependencies (if you still haven''t done
    so) and build the application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Once you do it, your browser will automatically open the `localhost:8080` page!
  prefs: []
  type: TYPE_NORMAL
- en: Check the complete code in the [chapter3/hello](https://github.com/PacktPublishing/Learning-Vue.js-2/tree/master/chapter3/hello)
    folder.
  prefs: []
  type: TYPE_NORMAL
- en: You can also test, modify, retest, and check the `hello` component in the webpackbin
    at [http://www.webpackbin.com/N1LbBIsLb](http://www.webpackbin.com/N1LbBIsLb)
    .
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Webpackbin is a nice service to run and test applications built with Webpack.
    It is a very nice tool even though it's still in beta. As it's still young, it
    still has some minor issues. For instance, if you try to download the package
    of the entire project, it will not build.
  prefs: []
  type: TYPE_NORMAL
- en: Plugins for IDEs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Vue creators and contributors thought about developers and developed plugins
    for a large set of modern IDEs. You can find them at [https://github.com/vuejs/awesome-vue#syntax-highlighting](https://github.com/vuejs/awesome-vue#syntax-highlighting)
    . If you are like me and use WebStorm IDE by IntelliJ, follow these instructions
    to install the Vue support plugin:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to **`Preferences`** | **`P`****`lugins`**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **`Browse repositories`**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type `vue` in the search box.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select **`Vue.js`** and click on the **`Install`** button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Plugins for IDEs](../Images/image00266.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Installing the Vue plugin for webstorm IDE
  prefs: []
  type: TYPE_NORMAL
- en: Style and scope
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'It is pretty obvious that the template and the script of the component belong
    only to it. However, the same does not apply to style. Try, for example, to add
    a `style` tag to our `hello` component and add the CSS rule for the `<h1>` tag
    to have the red color:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, when the page is refreshed, it is quite expected that the color of the
    **`Hello!`** header changes to red. Now try to add the `<h1>` tag to the main
    `index.html` file. You might be surprised, but it will also be red:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: '![Style and scope](../Images/image00267.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: All the <h1> tags have the style that we defined inside a component
  prefs: []
  type: TYPE_NORMAL
- en: 'To make the style be attached only to the scope of the component, we need to
    indicate the attribute `scoped` to the `<style>` tag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Look at the page and you'll see that only the **`Hello!`** text is red, the
    other `h1` has its default style.
  prefs: []
  type: TYPE_NORMAL
- en: Hot-reloading
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You might have noticed that now I no longer ask you to refresh the page but
    to look at the page. This is because the page is automatically refreshed on each
    change when the application is bootstrapped using `vue-cli` Webpack scaffolding
    approach. The magic happens thanks to the `vue-hot-reload` API that watches the
    application's files and tells the browser to automatically reload every time something
    has changed! Yay!
  prefs: []
  type: TYPE_NORMAL
- en: Preprocessors
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you are into preprocessors, you are more than welcome to use them in your
    `.vue` components. This is possible due to `vue-loader` that allows using Webpack
    loaders.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can find more about `vue-loaders` and preprocessors in the tutorial at [http://vue-loader.vuejs.org/en/](http://vue-loader.vuejs.org/en/)
    .
  prefs: []
  type: TYPE_NORMAL
- en: HTML preprocessors
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In order to be able to use a preprocessor in a single-file Vue components,
    just add the `lang` attribute to the `<template>` tag! Do not forget to install
    the corresponding node module:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Using `jade`, for example, in our `hello` component''s template, would be as
    easy as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: CSS preprocessors
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The same logic applies to the CSS preprocessors. Let''s see how to use, for
    example, a sass preprocessor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Like in the previous example, do not forget to install the corresponding loader
    for this to work: `npm install sass-loader node-sass --save-dev`'
  prefs: []
  type: TYPE_NORMAL
- en: JavaScript preprocessors
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It is also possible to use any JavaScript preprocessors. Like in the two previous
    examples, just use the `lang` attribute to specify the preprocessor to use. And
    do not forget to install it via `npm`!
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Rewriting our shopping list application with single-file components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we already know so much about components and how to use them, and
    also know nice techniques to make our code easier to write, let''s get back to
    our shopping list and rewrite it as single-file component''s Vue application.
    To have an easy setup, we can use `vue-cli` with Webpack configuration. Actually,
    we''ve already done it in [Chapter 2](part0027.xhtml#aid-PNV61 "Chapter 2. Fundamentals
    – Installing and Using"), *Fundamentals - Installing and Using*. So, just find
    this application and be prepared to start working on it. If you cannot find it,
    you can easily create it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Ensure that your `index.html` file looks like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'And your `main.js` file should look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'We are now ready to create our components and to populate our application with
    them. Of course, you remember that our shopping list has essentially four components:'
  prefs: []
  type: TYPE_NORMAL
- en: '`AddItemComponent`: The component responsible for adding a new item to the
    shopping list'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ItemComponent`: The component responsible for the rendering of the new item
    in the shopping list items list'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ItemsComponent`: The component responsible for the rendering and managing
    the list of `ItemComponent`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ChangeTitleComponent`: The component responsible for changing the title of
    the list'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s create all of them in the `components` folder. To start with, just include
    three empty sections `(<template>`, `<script>`, and `<style>`) in each of them
    and invoke them in the correct places within the main `App.vue` component. Please
    put something into the template that will allow us to visibly identify the different
    components on the page. So, the code of all our four components will look like
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Rewriting our shopping list application with single-file components](../Images/image00268.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The code for all four components of the shopping list application
  prefs: []
  type: TYPE_NORMAL
- en: Now open the `App.vue` component. This is our main component that will assemble
    all the components together.
  prefs: []
  type: TYPE_NORMAL
- en: Remove everything from the `<template>`, `<script>`, and `<style>` tags. We
    will now start to build our application.
  prefs: []
  type: TYPE_NORMAL
- en: First of all, we must import the components that will be used by `App.vue` (in
    this case, all of them).
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Do not forget that, as we are using ES2015 in this application, we can use import/export
    and all the other beautiful ES2015 things.
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside the `<script>` tag, let''s import the components and export the object
    that will contain the imported components and data function that returns the shopping
    list''s items:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Our template can basically be the same as the template that we have built in
    the shopping list application using simple components. Let's just remove everything
    concerning the models and data binding for now. First, insert the component responsible
    for adding items, then the component containing all the items, and then, in the
    footer, the component responsible for changing the title.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our template will then look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'You still remember that the names of the components'' variables are CamelCased,
    and when they are used inside the template, they should be invoked using kebab-case,
    right? Good, let''s see how it looks in the browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Rewriting our shopping list application with single-file components](../Images/image00269.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Shopping list application built of single-file components
  prefs: []
  type: TYPE_NORMAL
- en: Doesn't seem that beautiful, right? Let's fill each of the components with their
    templates.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We will continue using Bootstrap''s CSS style for this application. Include
    it globally in the `index.html` file: `<link rel="stylesheet" href=" https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css">`'
  prefs: []
  type: TYPE_NORMAL
- en: AddItemComponent
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open `AddItemComponent.vue`. Let''s fill its `<template>`. It will look like
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: If you look at the page in your browser, you can already see that it changed
    and became more recognizable as our shopping list application.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring ItemComponent and ItemsComponent
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s now move to the `ItemComponent`. We will just copy and paste the HTML
    from the simple component example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s also add some `scoped` style for this component. This component''s specific
    style is the style that has to do with the `<li>`, `<span>`, and class `.removed`.
    Let''s copy and paste them into this component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'Now open `ItemsComponents`. As you remember, it is a list of the `ItemComponent`
    elements. Even if you do not remember, I guess that the plural characteristics
    of the name of this component suggests this. In order for it to be able to use
    the `ItemComponent`, it must import it and register in the `components` property.
    So, let''s modify the script first:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'Now you can use `item-component` in `<template>`! Do you still remember how
    to iterate with `vue.js`? Of course you do! That is why you are opening the `<template>`
    tag right now and writing the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: If you check the page now, you'll be surprised to see that things actually do
    not work. The web console is full of errors. Can you figure out why?
  prefs: []
  type: TYPE_NORMAL
- en: Do you remember that when children components want to have access to the parent's
    data, they must declare "props" on the component initialization? This is exactly
    what we've forgotten about on the declaration of both `ItemsComponent` and `ItemComponent`.
  prefs: []
  type: TYPE_NORMAL
- en: 'First of all, within `App.vue`, bind items to the `items-component` invocation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'Then add the `props` attribute to `ItemsComponent`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'Now go back to `ItemComponent` and add the `props` property:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: Check the page now. Now it indeed contains the list of items and has a look
    and feel almost the same as it had when we first created it. Check the full code
    for this section in the [chapter3/shopping-list](https://github.com/PacktPublishing/Learning-Vue.js-2/tree/master/chapter3/shopping-list)
    folder.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Finish the shopping list application so that it has the same functionality as
    before.
  prefs: []
  type: TYPE_NORMAL
- en: There's not so much left and I'm sure you will be done with it in less than
    half an hour. The possible solution to this exercise can be found in the [Appendix](part0083.xhtml#aid-2F4UM1
    "Chapter 10. Solutions to Exercises"), *Solutions to Exercises.*
  prefs: []
  type: TYPE_NORMAL
- en: Rewriting the Pomodoro application with single-file components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I hope you still remember and possibly even use the Pomodoro application that
    we developed in the first chapter of this book.
  prefs: []
  type: TYPE_NORMAL
- en: I would like to revisit it now and to do the same exercise we did in the previous
    section—define the components of the application and rewrite it using these components.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s have a look at our Pomodoro application. And now I am going to spoil
    you: I''ll include a screenshot that already contains the kittens that are being
    shown during the resting time using [http://thecatapi.com/api](http://thecatapi.com/api):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Rewriting the Pomodoro application with single-file components](../Images/image00270.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The Pomodoro application in its Rest! state
  prefs: []
  type: TYPE_NORMAL
- en: 'There are some easily identifiable components:'
  prefs: []
  type: TYPE_NORMAL
- en: The component of the controls (start, pause, end), let's name it `**ControlsComponent**`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The component of the time countdown, `**CowntdownComponent**`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The component of the title of the current state (**`Work!`**/**`Rest!`**), `**StateTitleComponent**`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The component of the kittens rendering that depends on the state (working or
    resting), `**KittensComponent**` (this is my favorite one!)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now, please stop staring at the kitten and let''s start implementing our Pomodoro
    application using single-file components! Some first steps to scaffold the application
    are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Start by opening the scaffolded Pomodoro application from the previous chapter
    or create a new application based on the Webpack template.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run `npm install` and `npm run dev` in the `application` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Ensure that your `index.html` looks like the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'Ensure that your `main.js` file looks like the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: Open your browser to the page `localhost:8080`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, like in the previous example, go to the `components` folder and create
    all the necessary `.vue` components.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to `App.vue`, and import and register all the created components.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the `<template>` section of each of the components, put something that will
    uniquely identify it so that we can easily recognize it when checking the page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You will almost certainly come to the structure and the initial code, which
    looks something like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Rewriting the Pomodoro application with single-file components](../Images/image00271.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The very initial state of the Pomodoro application implemented with single-file
    components
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's assume that our components are ready to use and let's place them
    where they belong into the application's layout, accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: 'I will just slightly remind you how the whole application''s markup looked earlier:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: You've probably noticed that I removed some parts that are responsible for the
    class bindings or actions handlers. Do not worry. Remember Scarlett O'Hara in *Gone
    with the Wind*? She used to say,
  prefs: []
  type: TYPE_NORMAL
- en: '*"I can''t think about that right now. I''ll think about that tomorrow."*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '( [http://goo.gl/InYm8e](http://goo.gl/InYm8e) ). Scarlett O''Hara was a wise
    woman. Be like Scarlett O''Hara. For now, we will focus merely on the `<template>`
    tag for our `App.vue`. Everything else will come later and we will think about
    it then. Now we can basically copy and paste this HTML snippet and replace the
    sections that we identify, such as the components with their kebab-case names.
    So, the template in `App.vue` will look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: A bit smaller, huh? Check your browser with your app opened. Not very beautiful
    and for sure has nothing to do with our Pomodoro application, but... it works!
  prefs: []
  type: TYPE_NORMAL
- en: '![Rewriting the Pomodoro application with single-file components](../Images/image00272.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Pomodoro application bootstrapped as a single-file components application
  prefs: []
  type: TYPE_NORMAL
- en: What should we do now? Copy the corresponding markup to their component's `<template>`
    sections. Please do this tiny copy and paste by yourself, let it be a small home
    exercise. However, if you want to check yourself, take a look at the [chapter3/pomodoro](https://github.com/PacktPublishing/Learning-Vue.js-2/tree/master/chapter3/pomodoro)
    folder. That's it for now! All the data bindings and interesting stuff will come
    in the next chapter. So do not close the book. However, do not forget to take
    some Pomodoro pauses.
  prefs: []
  type: TYPE_NORMAL
- en: Reactive binding of CSS transitions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Just before the *transition* to the next chapter, which will talk a lot about
    different types of data binding, I would like to give you just a tiny flavor of
    something interesting that is possible to bind. I know that you pay a lot of attention
    to the words, my dear reader. So, you've already found the word transition two
    times until now, and you have probably guessed that we can actually bind CSS transitions
    to the data changes.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, imagine that you have an element that should only be shown if the `data`
    attribute `show` is `true`. This is easy, right? You already know the `v-if` directive:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'Thus, whenever the `show` attribute is changed, this `<div>` behaves accordingly.
    Imagine that on hiding/showing, you would like to apply some CSS transition. With
    Vue you can use the special `transition` wrapper component to specify the transition
    to use on data changing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: After that, you just have to define CSS rules for the `fade-enter`, `fade-leave`,
    `fade-enter-active`, and `fade-leave-active` classes. Check the official Vue documentation
    page regarding these classes at [https://vuejs.org/v2/guide/transitions.html#Transition-Classes](https://vuejs.org/v2/guide/transitions.html#Transition-Classes)
    .
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s see how it works in our `kittens` component example. Let''s start by
    adding the `v-if` directive to the `kittens-component` inside `App.vue`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'Also, we should add the `data` function in the `<script>` tag of `App.vue`
    (let''s also make it global so that we can modify it from the devtools console):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'Look at the browser: everything seems unchanged. Open the devtools console
    and type the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'You''ll see that the `kittens` component will disappear from the page. If you
    type the following, it will appear again:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: I hope you haven't forgotten to include Bootstrap's CSS in the main `index.html`
    file. Without it, you'll see no appearing/disappearing at all because our `<div>` tag
    has no information nor any class applied to it:  `<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css">`
  prefs: []
  type: TYPE_NORMAL
- en: 'However, we are talking about the *CSS* tr*ansitions* and not about simply
    hiding/showing stuff. Now let''s apply the CSS `fade` transition to our `kittens`
    component. Just add a wrapper component `transition` with a name attribute `fade`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'Now if we define nice rules to the correct classes, we''ll see a nice CSS transition.
    Let''s do it. Add the following CSS rules inside the `<style>` tag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: Look at the page again. Open the console and type `data.kittens = false` and
    `data.kittens = true` again. Now you can see a nice `fade` transition happening
    on each data change. In the next chapter, we will talk more about transitions
    in Vue.js and apply them to our applications.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, you learned about Vue components and how to use them. You
    saw how to create and register them using a classic approach (application that
    uses HTML, CSS, and JavaScript) and you also saw how easy it is to create and
    manipulate them using a single-file components approach. Things to retain:'
  prefs: []
  type: TYPE_NORMAL
- en: While variables are created using CamelCased format, in order to be able to
    use components inside templates, you must apply the corresponding kebab-cased
    format, for example, `MyBeautifulComponent` -> `my-beautiful-component`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Attributes `data` and `el` inside the component must be functions and not objects:
    `{data: function () {}}`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If you want the style of the component not to leak to the global scope, add
    a `scoped` attribute to it: `<style scoped></style>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We have also rewritten our applications using single-file components and touched
    on the data binding to the CSS transitions slightly.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will dive deeply into all the types of data binding,
    including CSS and JavaScript transitions. We will bring our applications back
    to life using data binding. Last but not least, we will see more cats!
  prefs: []
  type: TYPE_NORMAL
