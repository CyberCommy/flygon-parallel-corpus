- en: Chapter 3. Components – Understanding and Using
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章。组件-理解和使用
- en: In the previous chapter, you learned how Vue.js works. You saw behind the scenes
    and even made a slight debug of the core Vue.js code. You learned some of Vue's
    key concepts. You also learned and tried different ways of installing Vue.js.
    We have bootstrapped the applications; we will develop and enhance from this chapter
    on. We have also seen how to debug and to test our applications.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，你学习了Vue.js的工作原理。你了解了幕后情况，甚至对Vue.js核心代码进行了轻微的调试。你学习了一些Vue的关键概念。你还学习并尝试了不同的安装Vue.js的方式。我们已经启动了应用程序；从本章开始，我们将开发和增强它。我们还学会了如何调试和测试我们的应用程序。
- en: 'In the first chapter, we talked about components and even created some. In
    this chapter, we will use components in our applications and see some interesting
    directives in action. That being said, in this chapter, we are going to do the
    following:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一章中，我们谈论了组件，甚至创建了一些。在本章中，我们将在我们的应用程序中使用组件，并看到一些有趣的指令在其中的作用。也就是说，在本章中，我们将做以下事情：
- en: Revisit the components topic and review what components are
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重新讨论组件主题并回顾组件的定义
- en: Create components for our applications
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为我们的应用程序创建组件
- en: Learn what single-file components are
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习什么是单文件组件
- en: Learn how to achieve reactive CSS transitions with special attributes
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习如何使用特殊属性实现响应式CSS过渡
- en: Revisiting components
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重新讨论组件
- en: 'As you surely remember from the previous chapters, components are special parts
    of the Vue application that have their own scope of data and methods. Components
    can be used and reused throughout the application. In the previous chapter, you
    learned that a component is created by using the `Vue.extend({...})` method and
    registered using the `Vue.component()` syntax. So, in order to create and use
    a component, we would write the following JavaScript code:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你在之前的章节中肯定记得的，组件是Vue应用程序的特殊部分，具有自己的数据和方法范围。组件可以在整个应用程序中被使用和重复使用。在上一章中，你学到了组件是通过使用`Vue.extend({...})`方法创建的，并且使用`Vue.component()`语法进行注册。因此，为了创建和使用一个组件，我们需要编写以下JavaScript代码：
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Then, we will use `hello-component` inside the HTML:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将在HTML中使用`hello-component`：
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Tip
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'Both initialization and registration can be written as a single `Vue.component`
    invocation with corresponding options:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 初始化和注册都可以写成单个`Vue.component`调用，带有相应的选项：
- en: '`Vue.component(''hello-component'', { template: ''<h1>Hello</h1>'' });`'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '`Vue.component(''hello-component'', { template: ''<h1>Hello</h1>'' });`'
- en: Benefits of using components
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用组件的好处
- en: There are some things that we need to learn before going deep into the components
    and rewrite our applications using them. In this section, we will cover things
    such as handling `data` and `el` properties inside a component, component templates,
    scope, and preprocessors.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入了解组件并重写应用程序之前，有一些东西我们需要学习。在本节中，我们将涵盖处理组件内的`data`和`el`属性、组件模板、作用域和预处理器等内容。
- en: Declaring templates in HTML
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在HTML中声明模板
- en: In our previous example, we created a Vue component with a template written
    as a string. It's actually easy and nice because we have everything we need inside
    our component. Now imagine our component with a more complex HTML structure. Writing
    a complex HTML string template is error-prone, ugly, and against best practices.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们之前的例子中，我们创建了一个Vue组件，模板是以字符串形式编写的。这实际上很容易和不错，因为我们在组件内有我们需要的一切。现在想象一下我们的组件具有更复杂的HTML结构。编写复杂的HTML字符串模板容易出错，丑陋，并且违反最佳实践。
- en: Tip
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: By best practices, I mean clean and maintainable code. Complex HTML written
    as a string is anything but maintainable.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 通过最佳实践，我指的是清晰和可维护的代码。将复杂的HTML写成字符串是不可维护的。
- en: Vue allows declaring templates inside an HTML file within a special `<template>`
    tag!
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: Vue允许在特殊的`<template>`标签内声明模板！
- en: 'So, to rewrite our example, we will declare an HTML tag template with the corresponding
    markup inside:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'And then, inside our component, instead of the HTML string, we will just use
    the ID of the template:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Our whole code will look like the following:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In the preceding example, we had only used the `template` attribute for the
    component. Let's move on and see how the `data` and `el` attributes should be
    treated inside a component.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: Handling data and el properties inside a component
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As already mentioned, the component''s syntax is the same as the Vue instance''s
    syntax, but it must extend the Vue instead of calling it directly. With this premise,
    it seems correct to create a component like the following:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'But this would lead to a scope leak. Every instance of `HelloComponent` would
    share the same `data` and `el`. And this is not exactly what we want. That is
    why Vue explicitly demands to declare these properties as functions:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Even if you make a mistake and declare the `data` or the `el` properties as
    an object or an element, Vue will kindly warn you:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: '![Handling data and el properties inside a component](../Images/image00260.jpeg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
- en: Vue's warning when using data as an object instead of a function inside of a
    Vue component
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: Scope of the components
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As already mentioned, all components have their own scope that is inaccessible
    by other components. Nevertheless, the global application scope is accessible
    by all the registered components. You can see the components' scope as local and
    the application scope as global scopes. It's the same. However, using the parent's
    data inside a component is not straightforward. You have to explicitly indicate
    inside a component which parent's data properties should be accessed using the
    `prop` attribute and bind them to the component instance using the `v-bind` syntax.
    Let's see how it works on our `HelloComponent` example.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start by declaring `HelloComponent` with data that contains the attribute
    `msg`:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now, let''s create a `Vue` instance with some data inside it:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Inside our HTML, let''s create a template and apply it to the component using
    the template''s ID:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'In order to see the component on the page, we should invoke it inside the HTML
    of our `app` container:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'If you open the page in the browser, you will only see **`Hello`**; the `user`
    data property is still not bound to the component:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: '![Scope of the components](../Images/image00261.jpeg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
- en: The parent's data property is not yet bound to our Vue component
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to bind the data from the parent Vue application, we have to do the
    following two things:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: Indicate this property inside of the `prop` attribute of a component
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Bind it to the `hello-component` invocation:'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Refresh the page and you will see how it now presents you with a greeting:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: '![Scope of the components](../Images/image00262.jpeg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
- en: After the correct binding of the parent's `data` property to the component,
    everything works as expected.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Actually, the `v-bind:user` syntax can be shortcut just by using the following:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: '`:user<hello-component **:user="user"**></hello-component>`'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: Components inside other components
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The beauty of the components is that they can be used and reused inside other
    components as Lego bricks and blocks! Let''s build another component; let''s call
    it **greetings,** which will be composed of two sub-components: the form asking
    for the user''s name and our `hello` component.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to do this, let''s declare the template for the form and our already
    familiar `hello` template:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Now we will register two Vue components based on these templates:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Finally, we will create our greetings template that will use both `form` and
    `hello` components. Do not forget that we have to bind the `user` property on
    the components invocation:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'At this point, we can create our greetings component and use the greetings
    template inside it. Let''s initialize, which `data` function with the name of
    the user in this component:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Inside our main application container, we will now invoke the greetings component:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Do not forget to initialize the Vue application:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Open the page in the browser. You should see something like the following:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: '![Components inside other components](../Images/image00263.jpeg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
- en: The page built from various Vue components
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: Try to change the name in the input. You are expecting it to change also in
    the greetings header because we bound it to it. But strangely, it doesn't change.
    Well, this is actually the normal behavior. By default, all props follow one-way
    data binding. This means that if the data changes within the parent's scope, these
    changes are propagated to the child component, but not vice versa. It is done
    this way in order to prevent children components from accidentally mutating the
    parent state. It is, however, possible to force children components to communicate
    with their parents by invoking events. Check the Vue documentation at [https://vuejs.org/guide/components.html#Custom-Events](https://vuejs.org/guide/components.html#Custom-Events)
    .
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: In our case, we can bind a user model to our form `input` component and emit
    the `input` event every time the user types in the input box. We achieve it by
    using the `v-on:input` modifier, just like it is described in this section at
    [https://vuejs.org/guide/components.html#Form-Input-Components-using-Custom-Events](https://vuejs.org/guide/components.html#Form-Input-Components-using-Custom-Events)
    .
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: 'Thus, we have to pass `v-model:user` to `form-component`:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Then, `form-component` should accept the `value` prop and emit the `input`
    event:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The input box inside the `form-component` template should bind the `v-on:input` and
    the `onInput` method to the `v-on:input` modifier:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Tip
  id: totrans-85
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Actually, prior to Vue 2.0, this kind of two-way synchronization between components
    and their parents was possible by explicitly telling the property being bound
    to **sync** using the `.sync` modifier: `<form-component :user.sync="user"></form-component>`
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: 'Refresh the page. Now you can change the name inside the input and it is immediately
    propagated to the parent''s scope, and thus to other children components that
    rely on this property:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: '![Components inside other components](../Images/image00264.jpeg)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
- en: Binding properties with the .sync modifier allows two-way data binding between
    parent and children components
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: You can find the complete code for this example in the JSFiddle at [https://jsfiddle.net/chudaol/1mzzo8yn/](https://jsfiddle.net/chudaol/1mzzo8yn/)
    .
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-91
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Before the Vue 2.0 release, there was one more data-binding modifier, `.once`.
    With this modifier, the data would be bound only once, and any other changes would
    not affect the state of components. Compare the following:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: '`<form-component **:user="user"**></form-component>`'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: '`<form-component **:user.sync="user"**></form-component>`'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: '`<form-component **:user.once="user"**></form-component>`'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: Rewriting the shopping list with simple components
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we already know a lot about components, let's rewrite our shopping
    list application using them.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-98
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For the rewriting of the application, we will use this version of the shopping
    list application as a base: [https://jsfiddle.net/chudaol/vxfkxjzk/3/](https://jsfiddle.net/chudaol/vxfkxjzk/3/)
    .'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: 'We have already done it previously, when we started talking about components.
    But at that time, we used string templates inside the components'' options. Let''s
    do it now using templates as we have just learned to do. Let''s just have a look
    at the interface and identify the components again:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: '![Rewriting the shopping list with simple components](../Images/image00265.jpeg)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
- en: Our shopping list application will have four components
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: 'Thus, I suggest that our shopping list application consists of the following
    four components:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: '`AddItemComponent`: The component responsible for adding a new item to the
    shopping list'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ItemComponent`: The component responsible for the rendering of the new item
    in the shopping list'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ItemsComponent`: The component responsible for rendering and managing the
    list of `ItemComponent`'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ChangeTitleComponent`: The component responsible for changing the title of
    the list'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defining templates for all the components
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's create templates for these components assuming that the components themselves
    are already defined and registered.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-110
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**`CamelCase VS kebab-case`** You have probably noticed that while we declare
    variables describing components in CamelCase (`var HelloComponent=Vue.extend({...})`),
    we name them in kebab-case: `Vue.component(''hello-component'', {...})`. We do
    this because of the case-insensitive HTML attribute nature. Thus, our components
    for the shopping list application will be called as follows:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: '`add-item-component`'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: '`item-component`'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: '`items-component`'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: '`change-title-component`'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: Have a look at how our markup was previously ( [https://jsfiddle.net/chudaol/vxfkxjzk/3/](https://jsfiddle.net/chudaol/vxfkxjzk/3/)
    ).
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s rewrite it using templates and components'' names. In this part, we
    will just worry about the presentation layer, leaving the data binding and actions
    handling for a future implementation. We just copy and paste the HTML part of
    the application and distribute it over our components. Our four templates will
    look something like the following:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Thus, our main components'' markup will consist of some components:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: As you can see, the majority of each template is a plain copy and paste of the
    corresponding HTML code.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: However, there are some significant differences. The list item template, for
    example, is slightly changed. You have already learned and used the `v-for` directive
    previously. In the previous examples, we used this directive with HTML elements
    such as `<li>`. Now you see that it can also be used with Vue custom components.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: You might have also noticed a small difference in the change title template.
    Now it has a value bound to it and emits the `onInput` method bound to the `v-on:input`
    modifier. As you have learned in the previous section, children components cannot
    directly affect directly a parent's data, which is why we have to use the events
    system.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: Defining and registering all the components
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Have a look at the JavaScript code in our previous shopping list application:
    [https://jsfiddle.net/chudaol/c8LjyenL/](https://jsfiddle.net/chudaol/c8LjyenL/)
    . Let''s add the code that creates Vue components. We will use the IDs of already
    defined templates for their `template` attribute. Also, do not forget about the
    `props` attribute to pass the properties from the parent application. Thus, we
    add the following code:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: As you can see, in `props` of each component, we have passed different data
    attributes—only those that specifically concern the component. We have also moved
    the `newItem` attribute to the `data` attribute of `add-item-component`. In `change-title-component`,
    we have added the `onInput` method that emits the input event, so the title in
    the parent component is affected by whatever the user types in the input box.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: Open the HTML file in the browser. The interface is exactly the same as it was
    earlier! The complete code of what we have done in this section can be found in
    the JSFiddle at [https://jsfiddle.net/chudaol/xkhum2ck/1/](https://jsfiddle.net/chudaol/xkhum2ck/1/)
    .
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: Exercise
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Although our application looks exactly as it was looking earlier, its functionality
    was lost. Not only does it not add items, but it also shows the ugly error in
    the devtools console.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: Please use the events emitting system to bring the adding items functionality
    back.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: A possible solution for this exercise can be found in the Appendix, *Solutions
    to Exercises.*
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: Single-file components
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We know from the old best practices that it is always good to separate HTML
    from CSS and JavaScript files. Some modern frameworks such as React are relaxing
    and gradually wiping out this rule. Nowadays, you will not be shocked by looking
    at the small file or the component that contains its own markup, style, and application
    code inside it. Actually, for small components, we even find it more convenient
    to have such architecture. Vue also allows defining everything related to the
    same component in the same file. This kind of component is known as a single-file
    component.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-135
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A single-file Vue component is a file with a `.vue` extension. The application
    that contains such components can be built using the `webpack vue` configuration.
    To scaffold an app with such a configuration, the easiest way is to use `vue-cli`
    ( [https://github.com/vuejs-templates/webpack](https://github.com/vuejs-templates/webpack)).
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: 'A Vue component can have up to three sections in it:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: '`<script>`'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<template>`'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<style>`'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each of these sections is responsible for exactly what you are thinking. Put
    into the `<template>` tag whatever the HTML template should be responsible for,
    put into the `<script>` tag the JavaScript code responsible for the Vue component,
    methods, data, props, and so on. The `<style>` tag shall contain the CSS style
    for the given component.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
- en: Do you remember our `hello-component`? Have a look at it in the JSFiddle at
    [https://jsfiddle.net/chudaol/mf82ts9a/2/](https://jsfiddle.net/chudaol/mf82ts9a/2/)
    .
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: 'Start by scaffolding the app using the `webpack-simple` configuration with
    `vue-cli`:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'To rewrite it as a Vue component, we create our `HelloComponent.vue` file and
    add the following code:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Note that we do not need to specify the template in our JavaScript component
    definition. Being a single-file component, it is implicit that the template that
    should be used is the one defined in this file. You might also have noticed that
    we use ES6 style in here. Also, do not forget that the `data` attribute should
    be a function and not an object.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
- en: 'In our main script, we have to create the Vue app and instruct it to use `HelloComponent`:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Our `index.html` markup will not change. It will still invoke `hello-component`:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Now we just need to install `npm` dependencies (if you still haven''t done
    so) and build the application:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Once you do it, your browser will automatically open the `localhost:8080` page!
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
- en: Check the complete code in the [chapter3/hello](https://github.com/PacktPublishing/Learning-Vue.js-2/tree/master/chapter3/hello)
    folder.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
- en: You can also test, modify, retest, and check the `hello` component in the webpackbin
    at [http://www.webpackbin.com/N1LbBIsLb](http://www.webpackbin.com/N1LbBIsLb)
    .
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-157
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Webpackbin is a nice service to run and test applications built with Webpack.
    It is a very nice tool even though it's still in beta. As it's still young, it
    still has some minor issues. For instance, if you try to download the package
    of the entire project, it will not build.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
- en: Plugins for IDEs
  id: totrans-159
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Vue creators and contributors thought about developers and developed plugins
    for a large set of modern IDEs. You can find them at [https://github.com/vuejs/awesome-vue#syntax-highlighting](https://github.com/vuejs/awesome-vue#syntax-highlighting)
    . If you are like me and use WebStorm IDE by IntelliJ, follow these instructions
    to install the Vue support plugin:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
- en: Go to **`Preferences`** | **`P`****`lugins`**.
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **`Browse repositories`**.
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type `vue` in the search box.
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select **`Vue.js`** and click on the **`Install`** button:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Plugins for IDEs](../Images/image00266.jpeg)'
  id: totrans-165
  prefs: []
  type: TYPE_IMG
- en: Installing the Vue plugin for webstorm IDE
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
- en: Style and scope
  id: totrans-167
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'It is pretty obvious that the template and the script of the component belong
    only to it. However, the same does not apply to style. Try, for example, to add
    a `style` tag to our `hello` component and add the CSS rule for the `<h1>` tag
    to have the red color:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Now, when the page is refreshed, it is quite expected that the color of the
    **`Hello!`** header changes to red. Now try to add the `<h1>` tag to the main
    `index.html` file. You might be surprised, but it will also be red:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '![Style and scope](../Images/image00267.jpeg)'
  id: totrans-172
  prefs: []
  type: TYPE_IMG
- en: All the <h1> tags have the style that we defined inside a component
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
- en: 'To make the style be attached only to the scope of the component, we need to
    indicate the attribute `scoped` to the `<style>` tag:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Look at the page and you'll see that only the **`Hello!`** text is red, the
    other `h1` has its default style.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
- en: Hot-reloading
  id: totrans-177
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You might have noticed that now I no longer ask you to refresh the page but
    to look at the page. This is because the page is automatically refreshed on each
    change when the application is bootstrapped using `vue-cli` Webpack scaffolding
    approach. The magic happens thanks to the `vue-hot-reload` API that watches the
    application's files and tells the browser to automatically reload every time something
    has changed! Yay!
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
- en: Preprocessors
  id: totrans-179
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you are into preprocessors, you are more than welcome to use them in your
    `.vue` components. This is possible due to `vue-loader` that allows using Webpack
    loaders.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-181
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can find more about `vue-loaders` and preprocessors in the tutorial at [http://vue-loader.vuejs.org/en/](http://vue-loader.vuejs.org/en/)
    .
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
- en: HTML preprocessors
  id: totrans-183
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In order to be able to use a preprocessor in a single-file Vue components,
    just add the `lang` attribute to the `<template>` tag! Do not forget to install
    the corresponding node module:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Using `jade`, for example, in our `hello` component''s template, would be as
    easy as follows:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: CSS preprocessors
  id: totrans-188
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The same logic applies to the CSS preprocessors. Let''s see how to use, for
    example, a sass preprocessor:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Tip
  id: totrans-191
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Like in the previous example, do not forget to install the corresponding loader
    for this to work: `npm install sass-loader node-sass --save-dev`'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
- en: JavaScript preprocessors
  id: totrans-193
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It is also possible to use any JavaScript preprocessors. Like in the two previous
    examples, just use the `lang` attribute to specify the preprocessor to use. And
    do not forget to install it via `npm`!
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Rewriting our shopping list application with single-file components
  id: totrans-196
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we already know so much about components and how to use them, and
    also know nice techniques to make our code easier to write, let''s get back to
    our shopping list and rewrite it as single-file component''s Vue application.
    To have an easy setup, we can use `vue-cli` with Webpack configuration. Actually,
    we''ve already done it in [Chapter 2](part0027.xhtml#aid-PNV61 "Chapter 2. Fundamentals
    – Installing and Using"), *Fundamentals - Installing and Using*. So, just find
    this application and be prepared to start working on it. If you cannot find it,
    you can easily create it:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Ensure that your `index.html` file looks like the following:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'And your `main.js` file should look like the following:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'We are now ready to create our components and to populate our application with
    them. Of course, you remember that our shopping list has essentially four components:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
- en: '`AddItemComponent`: The component responsible for adding a new item to the
    shopping list'
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ItemComponent`: The component responsible for the rendering of the new item
    in the shopping list items list'
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ItemsComponent`: The component responsible for the rendering and managing
    the list of `ItemComponent`'
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ChangeTitleComponent`: The component responsible for changing the title of
    the list'
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s create all of them in the `components` folder. To start with, just include
    three empty sections `(<template>`, `<script>`, and `<style>`) in each of them
    and invoke them in the correct places within the main `App.vue` component. Please
    put something into the template that will allow us to visibly identify the different
    components on the page. So, the code of all our four components will look like
    the following:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
- en: '![Rewriting our shopping list application with single-file components](../Images/image00268.jpeg)'
  id: totrans-209
  prefs: []
  type: TYPE_IMG
- en: The code for all four components of the shopping list application
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
- en: Now open the `App.vue` component. This is our main component that will assemble
    all the components together.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
- en: Remove everything from the `<template>`, `<script>`, and `<style>` tags. We
    will now start to build our application.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
- en: First of all, we must import the components that will be used by `App.vue` (in
    this case, all of them).
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-214
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Do not forget that, as we are using ES2015 in this application, we can use import/export
    and all the other beautiful ES2015 things.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside the `<script>` tag, let''s import the components and export the object
    that will contain the imported components and data function that returns the shopping
    list''s items:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Our template can basically be the same as the template that we have built in
    the shopping list application using simple components. Let's just remove everything
    concerning the models and data binding for now. First, insert the component responsible
    for adding items, then the component containing all the items, and then, in the
    footer, the component responsible for changing the title.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
- en: 'Our template will then look like the following:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'You still remember that the names of the components'' variables are CamelCased,
    and when they are used inside the template, they should be invoked using kebab-case,
    right? Good, let''s see how it looks in the browser:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
- en: '![Rewriting our shopping list application with single-file components](../Images/image00269.jpeg)'
  id: totrans-222
  prefs: []
  type: TYPE_IMG
- en: Shopping list application built of single-file components
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
- en: Doesn't seem that beautiful, right? Let's fill each of the components with their
    templates.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-225
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We will continue using Bootstrap''s CSS style for this application. Include
    it globally in the `index.html` file: `<link rel="stylesheet" href=" https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css">`'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
- en: AddItemComponent
  id: totrans-227
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open `AddItemComponent.vue`. Let''s fill its `<template>`. It will look like
    the following:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: If you look at the page in your browser, you can already see that it changed
    and became more recognizable as our shopping list application.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
- en: Configuring ItemComponent and ItemsComponent
  id: totrans-231
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s now move to the `ItemComponent`. We will just copy and paste the HTML
    from the simple component example:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Let''s also add some `scoped` style for this component. This component''s specific
    style is the style that has to do with the `<li>`, `<span>`, and class `.removed`.
    Let''s copy and paste them into this component:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Now open `ItemsComponents`. As you remember, it is a list of the `ItemComponent`
    elements. Even if you do not remember, I guess that the plural characteristics
    of the name of this component suggests this. In order for it to be able to use
    the `ItemComponent`, it must import it and register in the `components` property.
    So, let''s modify the script first:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Now you can use `item-component` in `<template>`! Do you still remember how
    to iterate with `vue.js`? Of course you do! That is why you are opening the `<template>`
    tag right now and writing the following code:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: If you check the page now, you'll be surprised to see that things actually do
    not work. The web console is full of errors. Can you figure out why?
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
- en: Do you remember that when children components want to have access to the parent's
    data, they must declare "props" on the component initialization? This is exactly
    what we've forgotten about on the declaration of both `ItemsComponent` and `ItemComponent`.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
- en: 'First of all, within `App.vue`, bind items to the `items-component` invocation:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Then add the `props` attribute to `ItemsComponent`:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Now go back to `ItemComponent` and add the `props` property:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: Check the page now. Now it indeed contains the list of items and has a look
    and feel almost the same as it had when we first created it. Check the full code
    for this section in the [chapter3/shopping-list](https://github.com/PacktPublishing/Learning-Vue.js-2/tree/master/chapter3/shopping-list)
    folder.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
- en: Exercise
  id: totrans-249
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Finish the shopping list application so that it has the same functionality as
    before.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
- en: There's not so much left and I'm sure you will be done with it in less than
    half an hour. The possible solution to this exercise can be found in the [Appendix](part0083.xhtml#aid-2F4UM1
    "Chapter 10. Solutions to Exercises"), *Solutions to Exercises.*
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
- en: Rewriting the Pomodoro application with single-file components
  id: totrans-252
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I hope you still remember and possibly even use the Pomodoro application that
    we developed in the first chapter of this book.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
- en: I would like to revisit it now and to do the same exercise we did in the previous
    section—define the components of the application and rewrite it using these components.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s have a look at our Pomodoro application. And now I am going to spoil
    you: I''ll include a screenshot that already contains the kittens that are being
    shown during the resting time using [http://thecatapi.com/api](http://thecatapi.com/api):'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
- en: '![Rewriting the Pomodoro application with single-file components](../Images/image00270.jpeg)'
  id: totrans-256
  prefs: []
  type: TYPE_IMG
- en: The Pomodoro application in its Rest! state
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
- en: 'There are some easily identifiable components:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
- en: The component of the controls (start, pause, end), let's name it `**ControlsComponent**`
  id: totrans-259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The component of the time countdown, `**CowntdownComponent**`
  id: totrans-260
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The component of the title of the current state (**`Work!`**/**`Rest!`**), `**StateTitleComponent**`
  id: totrans-261
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The component of the kittens rendering that depends on the state (working or
    resting), `**KittensComponent**` (this is my favorite one!)
  id: totrans-262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now, please stop staring at the kitten and let''s start implementing our Pomodoro
    application using single-file components! Some first steps to scaffold the application
    are as follows:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
- en: Start by opening the scaffolded Pomodoro application from the previous chapter
    or create a new application based on the Webpack template.
  id: totrans-264
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run `npm install` and `npm run dev` in the `application` folder.
  id: totrans-265
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Ensure that your `index.html` looks like the following:'
  id: totrans-266
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Ensure that your `main.js` file looks like the following:'
  id: totrans-268
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  id: totrans-269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: Open your browser to the page `localhost:8080`.
  id: totrans-270
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, like in the previous example, go to the `components` folder and create
    all the necessary `.vue` components.
  id: totrans-271
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to `App.vue`, and import and register all the created components.
  id: totrans-272
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the `<template>` section of each of the components, put something that will
    uniquely identify it so that we can easily recognize it when checking the page.
  id: totrans-273
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You will almost certainly come to the structure and the initial code, which
    looks something like the following:'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
- en: '![Rewriting the Pomodoro application with single-file components](../Images/image00271.jpeg)'
  id: totrans-275
  prefs: []
  type: TYPE_IMG
- en: The very initial state of the Pomodoro application implemented with single-file
    components
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's assume that our components are ready to use and let's place them
    where they belong into the application's layout, accordingly.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
- en: 'I will just slightly remind you how the whole application''s markup looked earlier:'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  id: totrans-279
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: You've probably noticed that I removed some parts that are responsible for the
    class bindings or actions handlers. Do not worry. Remember Scarlett O'Hara in *Gone
    with the Wind*? She used to say,
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
- en: '*"I can''t think about that right now. I''ll think about that tomorrow."*'
  id: totrans-281
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '( [http://goo.gl/InYm8e](http://goo.gl/InYm8e) ). Scarlett O''Hara was a wise
    woman. Be like Scarlett O''Hara. For now, we will focus merely on the `<template>`
    tag for our `App.vue`. Everything else will come later and we will think about
    it then. Now we can basically copy and paste this HTML snippet and replace the
    sections that we identify, such as the components with their kebab-case names.
    So, the template in `App.vue` will look like the following:'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  id: totrans-283
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: A bit smaller, huh? Check your browser with your app opened. Not very beautiful
    and for sure has nothing to do with our Pomodoro application, but... it works!
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
- en: '![Rewriting the Pomodoro application with single-file components](../Images/image00272.jpeg)'
  id: totrans-285
  prefs: []
  type: TYPE_IMG
- en: Pomodoro application bootstrapped as a single-file components application
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
- en: What should we do now? Copy the corresponding markup to their component's `<template>`
    sections. Please do this tiny copy and paste by yourself, let it be a small home
    exercise. However, if you want to check yourself, take a look at the [chapter3/pomodoro](https://github.com/PacktPublishing/Learning-Vue.js-2/tree/master/chapter3/pomodoro)
    folder. That's it for now! All the data bindings and interesting stuff will come
    in the next chapter. So do not close the book. However, do not forget to take
    some Pomodoro pauses.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
- en: Reactive binding of CSS transitions
  id: totrans-288
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Just before the *transition* to the next chapter, which will talk a lot about
    different types of data binding, I would like to give you just a tiny flavor of
    something interesting that is possible to bind. I know that you pay a lot of attention
    to the words, my dear reader. So, you've already found the word transition two
    times until now, and you have probably guessed that we can actually bind CSS transitions
    to the data changes.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
- en: 'So, imagine that you have an element that should only be shown if the `data`
    attribute `show` is `true`. This is easy, right? You already know the `v-if` directive:'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  id: totrans-291
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'Thus, whenever the `show` attribute is changed, this `<div>` behaves accordingly.
    Imagine that on hiding/showing, you would like to apply some CSS transition. With
    Vue you can use the special `transition` wrapper component to specify the transition
    to use on data changing:'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  id: totrans-293
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: After that, you just have to define CSS rules for the `fade-enter`, `fade-leave`,
    `fade-enter-active`, and `fade-leave-active` classes. Check the official Vue documentation
    page regarding these classes at [https://vuejs.org/v2/guide/transitions.html#Transition-Classes](https://vuejs.org/v2/guide/transitions.html#Transition-Classes)
    .
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s see how it works in our `kittens` component example. Let''s start by
    adding the `v-if` directive to the `kittens-component` inside `App.vue`:'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  id: totrans-296
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'Also, we should add the `data` function in the `<script>` tag of `App.vue`
    (let''s also make it global so that we can modify it from the devtools console):'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  id: totrans-298
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'Look at the browser: everything seems unchanged. Open the devtools console
    and type the following:'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  id: totrans-300
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'You''ll see that the `kittens` component will disappear from the page. If you
    type the following, it will appear again:'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  id: totrans-302
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: Tip
  id: totrans-303
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: I hope you haven't forgotten to include Bootstrap's CSS in the main `index.html`
    file. Without it, you'll see no appearing/disappearing at all because our `<div>` tag
    has no information nor any class applied to it:  `<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css">`
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
- en: 'However, we are talking about the *CSS* tr*ansitions* and not about simply
    hiding/showing stuff. Now let''s apply the CSS `fade` transition to our `kittens`
    component. Just add a wrapper component `transition` with a name attribute `fade`:'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  id: totrans-306
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'Now if we define nice rules to the correct classes, we''ll see a nice CSS transition.
    Let''s do it. Add the following CSS rules inside the `<style>` tag:'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  id: totrans-308
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: Look at the page again. Open the console and type `data.kittens = false` and
    `data.kittens = true` again. Now you can see a nice `fade` transition happening
    on each data change. In the next chapter, we will talk more about transitions
    in Vue.js and apply them to our applications.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-310
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, you learned about Vue components and how to use them. You
    saw how to create and register them using a classic approach (application that
    uses HTML, CSS, and JavaScript) and you also saw how easy it is to create and
    manipulate them using a single-file components approach. Things to retain:'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
- en: While variables are created using CamelCased format, in order to be able to
    use components inside templates, you must apply the corresponding kebab-cased
    format, for example, `MyBeautifulComponent` -> `my-beautiful-component`
  id: totrans-312
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Attributes `data` and `el` inside the component must be functions and not objects:
    `{data: function () {}}`'
  id: totrans-313
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If you want the style of the component not to leak to the global scope, add
    a `scoped` attribute to it: `<style scoped></style>`'
  id: totrans-314
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We have also rewritten our applications using single-file components and touched
    on the data binding to the CSS transitions slightly.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will dive deeply into all the types of data binding,
    including CSS and JavaScript transitions. We will bring our applications back
    to life using data binding. Last but not least, we will see more cats!
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
