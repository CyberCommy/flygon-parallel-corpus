- en: Building a Network Inventory with Ansible and NetBox
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapters of this book, we described network infrastructure using
    Ansible variables stored in YAML files. While this approach is perfectly acceptable,
    it is not the optimal solution for adopting automation across an organization.
    We need to have our network inventory, IP addresses, and VLANs in a central system,
    which will act as the authoritative source of truth for our network. This system
    should have a robust and powerful API that can be queried by other automation
    and OSS/BSS systems to retrieve and update the network inventory.
  prefs: []
  type: TYPE_NORMAL
- en: '**NetBox** is an open source inventory system for network infrastructure, which
    was initially developed by the network engineering team at DigitalOcean to document
    their data center infrastructure. It is a simple yet powerful and highly extensible
    inventory system, which can act as a source of truth regarding our network. It
    allows us to document and describe the following features on any network infrastructure:'
  prefs: []
  type: TYPE_NORMAL
- en: '**IP address management (IPAM)**: IP networks and addresses, VRFs, and VLANs'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Equipment racks**: Organized by groups and sites'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Devices**: Types of devices and where they are installed'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Connections**: Network, console, and power connections between devices'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Virtualization**: Virtual machines and clusters'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Data circuits**: Long-haul communication circuits and providers'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Secrets**: Encrypted storage of sensitive credentials'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: NetBox is a Django-based Python application that uses PostgreSQL as backend
    data storage and NGINX as a frontend web server, along with other optional components
    that work together to deliver the NetBox system. It has a powerful REST API, which
    can be used to retrieve or update the data stored in the NetBox database.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will outline the following three main use cases for integration
    between Ansible and NetBox:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Ansible can be used to populate data in NetBox for the various types of network
    information that are modeled by NetBox, such as sites, devices, and IP addresses.
    The following diagram outlines the high-level integration between Ansible and
    NetBox in this use case:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](assets/859de243-fe05-451c-9af7-60f949df6b4a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'NetBox can be used as the dynamic inventory source for Ansible to retrieve
    and build an Ansible inventory. The following diagram outlines this integration:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](assets/fd507d70-2842-4cfe-8c32-6e70363e69fa.png)'
  prefs: []
  type: TYPE_IMG
- en: 'NetBox can be used as the source of information for data required by Ansible
    to provision and configure network devices. The following diagram outlines this
    use case:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](assets/5f38834f-b0fc-43be-b410-7325903f07f8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We are going to use a sample network composed of two data center sites with
    a spine or leaf fabric in each site. We will model all the information and populate
    it in NetBox. The following table captures this sample network infrastructure:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Site** | **Device** | **Role** |'
  prefs: []
  type: TYPE_TB
- en: '| DC1 | dc1-spine01 | Spine switch |'
  prefs: []
  type: TYPE_TB
- en: '| DC1 | dc1-spine02 | Spine switch |'
  prefs: []
  type: TYPE_TB
- en: '| DC1 | dc1-leaf01 | Leaf switch |'
  prefs: []
  type: TYPE_TB
- en: '| DC1 | dc1-leaf02 | Leaf switch |'
  prefs: []
  type: TYPE_TB
- en: '| DC2 | dc2-spine01 | Spine switch |'
  prefs: []
  type: TYPE_TB
- en: '| DC2 | dc2-spine02 | Spine Switch |'
  prefs: []
  type: TYPE_TB
- en: '| DC2 | dc2-leaf01 | Leaf switch |'
  prefs: []
  type: TYPE_TB
- en: '| DC2 | dc2-leaf02 | Leaf switch |'
  prefs: []
  type: TYPE_TB
- en: 'The main recipes covered in this chapter are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing NetBox
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrating NetBox with Ansible
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Populating sites in NetBox
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Populating devices in NetBox
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Populating interfaces in NetBox
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Populating IP addresses in NetBox
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Populating IP prefixes in NetBox
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using NetBox as a dynamic inventory source for Ansible
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generating a configuration using NetBox data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'All of the code used in this chapter can be found in the following GitHub repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/PacktPublishing/Network-Automation-Cookbook/tree/master/ch11_netbox](https://github.com/PacktPublishing/Network-Automation-Cookbook/tree/master/ch11_netbox)'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are the software releases that this chapter is based on:'
  prefs: []
  type: TYPE_NORMAL
- en: An Ansible machine running CentOS 7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ansible 2.9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Python 3.6.8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Arista vEOS running EOS 4.20.1F
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: NetBox v2.6.5 running on a CentOS 7 Linux machine
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing NetBox
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will outline how to install NetBox using Docker containers
    and how to start all the required containers to have a functional NetBox server.
    Using Docker containers to install NetBox is the simplest way of getting started.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to start installing NetBox on a Linux machine, the machine needs to
    have internet connectivity to pull the required Docker image for NetBox operation
    from Docker Hub.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Install Docker on your CentOS Linux machine using the following URL:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[https://docs.docker.com/install/linux/docker-ce/centos/](https://docs.docker.com/install/linux/docker-ce/centos/)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install Docker Compose using the following URL:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[https://docs.docker.com/compose/install/](https://docs.docker.com/compose/install/)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Clone the NetBox repository into a new directory (`netbox_src`), as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Change to the `netbox_src` directory and pull all the required Docker images
    using `docker-compose`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Update the `docker-compose.yml` file to set the correct port for the NGINX
    web server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Start all the Docker containers, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As outlined in this chapter''s introduction, NetBox is composed of multiple
    services that integrate together to deliver the required NetBox application. The
    simplest installation method for NetBox is by using Docker containers. We use
    a single `docker-compose` definition file to describe the interaction between
    the different Docker containers needed to deliver the NetBox application. The
    following diagram outlines the high-level architecture of NetBox and how each
    service runs in its own container:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/fd502617-1ce0-45b8-b98d-9a738c847e12.png)'
  prefs: []
  type: TYPE_IMG
- en: In this recipe, we described the steps required to install NetBox using Docker
    and `docker-compose`, which greatly simplifies the installation steps that lead
    to a functional NetBox server. The developers behind NetBox created the Docker
    images required to run NetBox using Docker and the `docker-compose` file, which
    describes the overall interaction between the different NetBox components in order
    to set up a NetBox server. All the NetBox setup instructions, along with the Docker
    files and the `docker-compose` file to build and deploy NetBox using Docker containers,
    can be found at [https://github.com/netbox-community/netbox-docker](https://github.com/netbox-community/netbox-docker).
  prefs: []
  type: TYPE_NORMAL
- en: After installing Docker and `docker-compose` on our Linux machine, we cloned
    the GitHub repository and edited the `docker-compose.yml` file to set the port
    that the NGINX web server will listen to on the host machine. Finally, we ran
    the `docker-compose pull` command to download all the Docker containers defined
    in the `docker-compose.yml` file and we ran `docker-compose `to start up all the
    Docker containers.
  prefs: []
  type: TYPE_NORMAL
- en: Once all the Docker containers are downloaded and started, we can access NetBox
    at `https://<netbox-server-ip>/`.
  prefs: []
  type: TYPE_NORMAL
- en: 'This will take us to the following page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/0f7e77e6-3ee4-4977-bff7-02aa70bd807d.png)'
  prefs: []
  type: TYPE_IMG
- en: The default username is `admin` and the password is `admin`.
  prefs: []
  type: TYPE_NORMAL
- en: There's more
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To simplify the installation of NetBox, I have created an Ansible role within
    this chapter''s code to deploy NetBox. To use this role, we need to perform the
    following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'On the Ansible control machine, clone the following chapter code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Update the `hosts` file with the correct IP address for your NetBox server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the `pb_deploy_netbox.yml` Ansible playbook:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: See also...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For more information about how to install NetBox using Docker containers, go
    to **[https://github.com/netbox-community/netbox-docker](https://github.com/netbox-community/netbox-docker)**.
  prefs: []
  type: TYPE_NORMAL
- en: Integrating NetBox with Ansible
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will outline how to integrate Ansible and NetBox via the
    NetBox API. This integration is mandatory as it will allow us to populate the
    NetBox database through Ansible playbooks, as well as to use NetBox as our dynamic
    inventory source to create an Ansible inventory in later recipes.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: NetBox should be installed as outlined in the previous recipe, and the IP needs
    to stretch between the Ansible control machine and the NetBox server. Ansible
    will communicate with NetBox over port 80, so this port needs to be open on the
    NetBox server.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'On the Ansible control machine, install the `pynetbox`Python package:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Log in to the NetBox server using the admin user details and click on the Admin
    tab to create a new user, as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/7f6e7559-6279-49ad-bb11-da663cbb4705.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Create a new user and set its username and password:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/fcfe90ed-95e5-4a44-99bb-fa4886ddbf7b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Assign superuser privileges to this new user so that you will be able to write
    to the NetBox **Database** (**DB**):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/c443e44b-2204-4f9d-942b-d691791f68c8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Create a new token for this new user:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/9c284d6e-5684-476a-b1e5-aecc610de60b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Go to the Tokens screen to locate the new token that we created for the Ansible
    user:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/5bc9af19-a48c-4475-8fa2-e16fc0a9c905.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the `ch11_netbox` project directory, create our `hosts` Ansible inventory
    file, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Create the `group_vars` folder and the `all.yml` file and populate the file,
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we are setting up the integration between Ansible and NetBox.
    In order to start using Ansible modules to populate the NetBox DB, we installed
    the `pynetbox` Python module. This module is mandatory for all the NetBox Ansible
    modules that we are going to use in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: On the NetBox site, we started by creating a new user with complete admin rights.
    This granted the user the full privileges to create, edit, or delete any object
    within the NetBox DB. Then, we created a token, which will be used to authenticate
    all the API requests from Ansible to NetBox.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we created our Ansible inventory and declared two parameters in our
    Ansible variables,`netbox_url` and `netbox_token`, to hold the API endpoint and
    the token for the Ansible user on NetBox.
  prefs: []
  type: TYPE_NORMAL
- en: See also...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For more information about the `pynetbox` Python library that interacts with
    NetBox, go to [https://pynetbox.readthedocs.io/en/latest/](https://pynetbox.readthedocs.io/en/latest/).
  prefs: []
  type: TYPE_NORMAL
- en: Populating sites in NetBox
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will outline how to create sites in NetBox. Sites are a logical
    construct within NetBox that allow us to group our infrastructure based on their
    physical location. We need to define our sites before we can start declaring our
    devices and place them in these sites.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Ensure integration between Ansible and NetBox is in place, as outlined in the
    previous recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Update the `group_vars/all.yml` file with the following data about our physical
    sites:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Create a new `roles` directory under `ch11_netbox`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new Ansible role, called `build_netbox_db`, and populate the `tasks/main.yml`
    file, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Update the `defaults/main.yml` file with the following data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new playbook, called `pb_build_netbox_db.yml`, with the following
    contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we began by populating the sites in our sample network and defining
    the `sites` data structure, which describes the physical locations of our data
    centers in the `all.yml` file under `group_vars`. We created an Ansible role in
    order to populate the NetBox database and the first task we performed within this
    role was to use the `netbox_site` module to create all the sites within our network.
    We looped across all the sites defined in the `sites` data structure and pushed
    the data to NetBox using the `netbox_site` module.
  prefs: []
  type: TYPE_NORMAL
- en: We created a new playbook, which will be our master playbook, to populate the
    contents of our network inventory into NetBox and we referenced the role that
    we created in order to start executing all the tasks within this role.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once we run this playbook, the sites are populated in NetBox, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/99aeb2d2-d2ad-46af-b01d-e057e2585d14.png)'
  prefs: []
  type: TYPE_IMG
- en: See also...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For more information about the `netbox_site` module, go to [https://docs.ansible.com/ansible/latest/modules/netbox_site_module.html](https://docs.ansible.com/ansible/latest/modules/netbox_site_module.html).
  prefs: []
  type: TYPE_NORMAL
- en: Populating devices in NetBox
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will outline how to create and populate network devices in
    NetBox. This will include declaring the device model and manufacturer, along with
    their role in our network. This will help us to build an accurate inventory of
    our network infrastructure, which we can use later on in the last recipe of this
    chapter to build a dynamic inventory for Ansible using NetBox.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Ansible and NetBox integration should be in place and the sites should be
    defined and populated in NetBox, as outlined in the previous recipe. This is critical
    since when we start to populate devices in NetBox, we need to tie them to an existing
    site.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Update the `group_vars/all.yml` file with the `devices` information, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Create the `group_vars/leaf.yml` and `group_vars/spine.yml` files, then update
    them with the following information:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new task to create the manufacturer for all of the devices in our
    inventory under the `tasks/create_device_vendors.yml` file, as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Update the `tasks/main.yml` file to include the `create_device_vendors.yml `file,
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new task to create all the device models for all of the network devices
    in our inventory under the `tasks/create_device_types.yml` file, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Update the `tasks/main.yml` file to include the `create_device_types.yml`files,
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new task to create all the device roles for all of the network devices
    in our inventory under the `tasks/create_device_roles.yml` file, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Update the `tasks/main.yml` file to include the `create_device_roles.yml `file,
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new task to populate all of the devices in our inventory under the
    `tasks/create_device.yml` file, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Update the `tasks/main.yml` file to include the `create_device.yml `file, as
    follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to populate our network devices in NetBox, we first need to populate
    the following parameters related to the devices in NetBox:'
  prefs: []
  type: TYPE_NORMAL
- en: All the manufacturers for all of our network devices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All the device models for our network equipment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All the device roles that will be assigned to each network device
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'There is no pre-built module in Ansible that will populate all of this information
    and build these objects in NetBox. So, in order to populate this information in
    NetBox, we need to use the `URI` module, which allows us to trigger REST API calls
    to the correct API endpoint responsible for each of these objects. To carry out
    all of these tasks, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: First, query the API endpoint using the `GET` method to get a matching object
    in the NetBox DB.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If an object is not present, we can create one by using a `POST REST` call and
    supplying the necessary data.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If an object is already present, we can skip the previous step.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Using the previous approach, we are simulating the idempotent nature of Ansible
    modules. When we run our playbook, we can see that all the device types have been
    populated in NetBox:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/6d59398f-dd9a-4760-8272-ef9945bcde8e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Also, all the device roles for our equipment are populated, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/9c53cdd7-e87b-4b70-9470-89f928f83fb5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once we have built all the objects required to define a device in NetBox (such
    as the device role and device types), we can use the `netbox_device` Ansible built-in
    module to create all of the devices in our Ansible inventory. The following screenshot
    outlines all of the devices that have been correctly populated in the NetBox DB:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/8a54fe36-6513-4e59-b76c-5ef9ef9f90db.png)'
  prefs: []
  type: TYPE_IMG
- en: In this recipe, we used the `URI` module to trigger API calls to the NetBox
    API in order to create objects within its DB. In order to understand more about
    what APIs are available and which parameters need to be passed in each API call,
    we need to check the API documentation for NetBox. The documentation for the API
    is contained within the NetBox installation and can be accessed at `http:///api/docs/`.
  prefs: []
  type: TYPE_NORMAL
- en: See also...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For more information about the NetBox API, go to[ https://netbox.readthedocs.io/en/stable/api/overview/](https://netbox.readthedocs.io/en/stable/api/overview/).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For more information about the Ansible module to create devices on NetBox, go
    to [https://docs.ansible.com/ansible/latest/modules/netbox_device_module.html](https://docs.ansible.com/ansible/latest/modules/netbox_device_module.html).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Populating interfaces in NetBox
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will outline how to populate interfaces on network devices
    in NetBox. This provides us with a complete inventory for our devices and will
    allow us to assign IP addresses for each interface on our network device, as well
    as to model the network links within our network.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to create the network interfaces, the devices need to already be created,
    as outlined in the previous recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Update the `group_vars/all.yml ` file with the point-to-point links within
    our network fabric in each data center, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new task to create all the interfaces for all of the network devices
    in our inventory under the `tasks/create_device_intf.yml` file, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Update the `tasks/main.yml` file to include the `create_device_intfs.yml ` file,
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to populate all the point-to-point interfaces in our data center fabric,
    we first created the `p2p_ip` data structure, which holds all the parameters needed
    to model these point-to-point links. We then used the `netbox_interface` module
    to create all of these links in NetBox. Using the same module and following the
    exact same procedures, we can model the management (out-of-band management) and
    the loopback interface on our network devices.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the interfaces on one of our devices in NetBox
    and how the interfaces are populated:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/d7b0e9b8-44af-49c5-bfcc-cd1f8487490a.png)'
  prefs: []
  type: TYPE_IMG
- en: See also...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For more information about the Ansible module used to create interfaces on NetBox,
    go to [https://docs.ansible.com/ansible/latest/modules/netbox_interface_module.html#netbox-interface-module](https://docs.ansible.com/ansible/latest/modules/netbox_interface_module.html#netbox-interface-module).
  prefs: []
  type: TYPE_NORMAL
- en: Populating IP addresses in NetBox
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will outline how to create IP addresses in NetBox and how
    to bind these addresses to the interfaces on each of our network devices.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The network interfaces on each device within our inventory need to be defined
    and populated in NetBox, as outlined in the previous recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Create a new task to create all the IP addresses attached to the network interfaces.
    This is carried out for all of the network devices in our inventory under the
    `tasks/create_device_intf_ip.yml` file, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Update the `tasks/main.yml` file to include the `create_device_intf_ip.yml `file,
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to populate all the point-to-point IP addresses used on each data center
    fabric, we captured this information in the `p2p_ip` data structure, which holds
    all of the IP addresses assigned on each interface within our data center fabric.
    We used the `netbox_ip_address` module to loop across this data structure and
    populate all the IP addresses assigned to each interface on each device within
    our data center fabric. The same process is used for the management and loopback
    interfaces.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the IP addresses assigned to the interfaces
    for one of our devices (dc1-leaf01):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/1a6c4c89-c37e-401c-88e7-2e628ee8c985.png)'
  prefs: []
  type: TYPE_IMG
- en: See also...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For more information about the Ansible module used to create IP addresses on
    NetBox, go to [https://docs.ansible.com/ansible/latest/modules/netbox_ip_address_module.html#netbox-ip-address-module](https://docs.ansible.com/ansible/latest/modules/netbox_ip_address_module.html#netbox-ip-address-module).
  prefs: []
  type: TYPE_NORMAL
- en: Populating IP prefixes in NetBox
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will look at how to create IP prefixes in NetBox. This allows
    us to utilize NetBox as our IPAM solution to manage IP address assignments within
    our network.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: No specific requirements are needed to be able to populate IP subnets or prefixes
    in NetBox, as long as we don't bind these prefixes to a specific site. If we bind
    some subnets to a specific site, then these sites need to be defined in NetBox
    prior to this assignment.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Update the `group_vars/all.yml` file with the IP prefix information, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Update the `tasks/main.yml` file in our role definition to include the following
    task:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We defined our subnets in the `group_vars/all.yml` file under the `subnets`
    data structure and then used the `netbox_prefix` module to loop over this data
    structure and populate the prefixes in NetBox.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the populated prefixes within NetBox and their
    respective utilization:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/7478c453-1a0e-4cad-a377-5736bd62b923.png)'
  prefs: []
  type: TYPE_IMG
- en: See also...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For more information about the Ansible module used to create IP prefixes on
    NetBox, go to [https://docs.ansible.com/ansible/latest/modules/netbox_prefix_module.html#netbox-prefix-module](https://docs.ansible.com/ansible/latest/modules/netbox_prefix_module.html#netbox-prefix-module).
  prefs: []
  type: TYPE_NORMAL
- en: Using NetBox as a dynamic inventory source for Ansible
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will outline how to use NetBox as a dynamic inventory source.
    With this approach, NetBox will have the inventory for our network infrastructure
    and we will use the different groupings available (such as sites, device roles,
    and so on) to build a dynamic inventory for Ansible and group them according to
    NetBox.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Integration between NetBox and Ansible needs to be in place, as outlined in
    the previous recipes.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In your main directory, create a new folder called `netbox_dynamic_inventory`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In this new directory, create a new YAML file, called `netbox_inventory_source.yml`,
    with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new playbook, called `pb_create_report.yml`, with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In all of the examples and recipes that we have outlined in this book so far,
    we have used a static inventory file (in most cases `hosts`) where we defined
    our inventory, which Ansible will parse before executing our playbooks. In this
    recipe, we will use a different inventory source: a dynamic inventory. In this
    situation, we don''t have a static file that holds our inventory, but we will
    build our inventory dynamically when we run our playbooks at execution time. All
    of our inventories, in this example, are maintained in NetBox and we have used
    NetBox as our inventory source.'
  prefs: []
  type: TYPE_NORMAL
- en: 'For Ansible to use a dynamic inventory source, a plugin must be in place to
    talk to this inventory source in order to retrieve our inventory and any variables
    associated with it. Ansible, as of version 2.9, has introduced NetBox as a plugin
    that can be used as an inventory source. In order to use this plugin, we need
    to define a YAML file that outlines the different parameters needed by Ansible
    to communicate with the NetBox API. The mandatory parameters are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The **Plugin** name: In our case, `NetBox`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`**Api_endpoint**`: The API endpoint for our NetBox server'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The **Token**: The authentication token that we have created to establish communication
    between Ansible and our NetBox server'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the YAML declaration file, we can specify how we will group our inventory
    that is coming from NetBox. We can use the `group_by` attribute to outline the
    parameters that we will use to group our infrastructure. In our case, we are using
    `device_roles` and `sites` to group our infrastructure.
  prefs: []
  type: TYPE_NORMAL
- en: There's more
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can test our dynamic inventory by executing the following command to see
    how Ansible generates the inventory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is a snippet of the output for the preceding command. It outlines
    the host variables that were retrieved from NetBox for a single device:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'The following snippet shows the groups that Ansible built based on the grouping
    from NetBox:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: We have created a new playbook to test the integration between Ansible and NetBox
    and ensured that we can use the data retrieved from NetBox as a dynamic inventory
    source. Using our new playbook, we can create a simple report for each device
    in the NetBox dynamic inventory along with some of the parameters sent from NetBox.
  prefs: []
  type: TYPE_NORMAL
- en: 'When we run the playbook, we get the following report:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: See also...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For more information about the NetBox plugin, go to [https://docs.ansible.com/ansible/latest/plugins/inventory/netbox.html](https://docs.ansible.com/ansible/latest/plugins/inventory/netbox.html).
  prefs: []
  type: TYPE_NORMAL
- en: To learn more about the Ansible dynamic inventory, go to [https://docs.ansible.com/ansible/latest/user_guide/intro_dynamic_inventory.html](https://docs.ansible.com/ansible/latest/user_guide/intro_dynamic_inventory.html).
  prefs: []
  type: TYPE_NORMAL
- en: Generating a configuration using NetBox
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will outline how to generate a configuration and push the
    configuration to network devices using the data retrieved from NetBox.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will continue to use NetBox as our dynamic inventory source,
    so all of the configurations outlined in the previous recipe need to be implemented.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Under the `netbox_dynamic_inventory` directory, create the `netbox_data.yml`
    file with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Create the `pb_build_config.yml `playbook with an initial task to read the
    `netbox_data.yml` file, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Update the `pb_build_config.yml` playbook to include a task to query NetBox
    for all interfaces in its DB for the current device:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Update the playbook with the following task to push the configuration to the
    device:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to run our playbook, we need to use the NetBox dynamic inventory script
    as our inventory source and execute the playbook, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: In this recipe, we will use NetBox as our source of truth to both construct
    our inventory as well as to retrieve interfaces on a given device. We will use
    a `GET API` call to the interface endpoints on NetBox and filter this API call
    by specifying only the interfaces for this specific device. The API call to achieve
    this is `api/dcim/interfaces/?device=<deivce-name>/`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following snippet shows the response we get from NetBox:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: We will use the data retrieved from the API to configure the description on
    all the ports on all the devices in our network, as per the data in the NetBox
    DB. In this case, we will use `eos_config` to push this data to our Arista EOS
    boxes. We can loop over the data returned from NetBox, which is stored in `netbox_interfaces.json.results`,
    and extract the interface name and description from this data. We can also push
    this information using the `eos_config` module to set up the correct description
    on all the devices in our network.
  prefs: []
  type: TYPE_NORMAL
