- en: Chapter 2. Introduction to IPCop
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we look at how we use IPCop, we need to first look at the background
    of IPCop and the tools it is built with. We also need to look at the licenses
    those tools are distributed under, and therefore the IPCop license. This chapter
    will be less beneficial for those who would like to get straight to the installation
    and configuration and already know the background of open-source software, the
    GPL, and Linux. We will, however, also look at the reasons to choose IPCop in
    this chapter and the unique features it has, which will be useful when deciding
    whether to or how to deploy IPCop. It is, therefore, extremely important.
  prefs: []
  type: TYPE_NORMAL
- en: Free and Open Source Software
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Many people might have heard of several common types of software, such as freeware,
    which is software you are allowed to use for free and (more generically), commercial
    software such as Microsoft Windows or Adobe Photoshop. Commercial software, generally,
    comes with a license restricting you to use the software in a certain way, and
    usually banning you from copying or modifying it.
  prefs: []
  type: TYPE_NORMAL
- en: IPCop is a type of software known as **Open Source Software** (**OSS**). As
    a piece of OSS, IPCop is released under a license called the **GNU General Public
    License** (**GPL**).
  prefs: []
  type: TYPE_NORMAL
- en: As with all Open Source Software packages distributed under this license and
    others like it, IPCop affords its users some basic freedoms.
  prefs: []
  type: TYPE_NORMAL
- en: Under the GPL, IPCop users are given the freedom to read, modify, and redistribute
    the source code of the software. The only caveat attached to this is that if you
    decide to redistribute this software (for instance, if you make a copy of IPCop
    with some improvements and give it to a friend) you must provide the modified
    work under the same license, and provide access to the source code. As we will
    see when we look at the history of IPCop, this can be very beneficial for users
    who would like to take a project in a new direction.
  prefs: []
  type: TYPE_NORMAL
- en: The GPL is one of the best-known open-source licenses. There are many others,
    however, such as the **Berkeley Software Distribution License** (**BSD License**).
    Each license differs in exactly what freedom it gives you, but all of them must
    allow at least the ability to read, modify, and redistribute the source code in
    order to be considered an open-source license by the Open Source Initiative.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**What is Source Code?**'
  prefs: []
  type: TYPE_NORMAL
- en: Source code is a set of instructions written by a computer programmer in a human-readable
    language. This set of instructions is usually then converted by a **compiler**
    into an executable program that the computer can run. With closed-source software
    such as Microsoft Windows and ISA Server, you don't get to see this. With Open
    Source Software such as Linux and IPCop, you do!
  prefs: []
  type: TYPE_NORMAL
- en: The Open Source Initiative is a non-profit organization involved in promoting
    open-source software and aiding developers in creating and using open-source licenses.
    It also maintains a list of all licenses accepted as open source.
  prefs: []
  type: TYPE_NORMAL
- en: You can find all of the licenses recognized by the Open Source Initiative at
    [http://www.opensource.org/](http://www.opensource.org/).
  prefs: []
  type: TYPE_NORMAL
- en: The GPL itself can be found on the GNU website, [http://www.gnu.org/copyleft/gpl.html](http://www.gnu.org/copyleft/gpl.html).
  prefs: []
  type: TYPE_NORMAL
- en: In addition to being the best-known OSS license, the GPL is also the license
    chosen by the best-known piece of OSS, the Linux kernel, which is a key component
    of IPCop. The release of the Linux kernel under the GPL is what makes systems
    like IPCop possible. The Linux kernel is the core of a Linux-based operating system
    (such as any of the Linux distributions that are variants of GNU/Linux). The kernel
    is developed by a team of developers mostly comprising volunteers around the world,
    but including many developers who are paid by companies that rely on Linux for
    some of their business, such as Red Hat Linux, Canonical, IBM, Novell, and Sun
    Microsystems.
  prefs: []
  type: TYPE_NORMAL
- en: As we are now aware, creating Open Source Software means giving our users the
    ability to modify our source code and then redistribute their modifications. This
    is what has been done with IPCop. IPCop has taken the Linux kernel as well as
    a large number of other tools, bundled them into a **distribution** of software
    and enabled users to create a feature-rich easy-to-use firewall system. This is
    how a lot of Open Source Software is created and is a function of the philosophy
    behind OSS.
  prefs: []
  type: TYPE_NORMAL
- en: Forking IPCop
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Not only can you build your software on top of other components with OSS, but
    you can take it a step further and take one of those components (or a collection
    of those—called a **distribution**) and modify it to become something that suits
    your needs better than the design of the original developers. For example, if
    the users and developers of a particular piece of software decide they want something
    more from the software or want the software to be taken in another direction,
    they have the full freedom to do so. This is what happened with IPCop.
  prefs: []
  type: TYPE_NORMAL
- en: Before IPCop was created, SmoothWall existed ([http://www.smoothwall.org](http://www.smoothwall.org)).
    SmoothWall is a very similar distribution to IPCop at the present time and all
    of the initial code in IPCop was SmoothWall code. SmoothWall, however, employed
    *dual licensing* to release variants of its free firewall commercially. The commercial
    variants of SmoothWall had greater functionality, possibly causing conflict between
    the development goals of the free and commercial packages as there is a disincentive
    to improve a free product if it will cause your non-free product to make less
    money.
  prefs: []
  type: TYPE_NORMAL
- en: This led to tension between users of the software and some of the developers.
    The current IPCop developers decided to develop the system based on the work already
    put in to SmoothWall but they didn't want to follow SmoothWall's current philosophy
    and direction. As such, there was a decision to create a new branch of the software—to
    **fork** it. One of the main reasons behind the fork was a desire to create a
    firewall with the features available in commercial SmoothWall and then release
    this as a purely non-commercial piece of OSS.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a new branch of software like this is called *forking* for quite obvious
    reasons. A fork is generally carried out by users and/or current developers by
    taking a snapshot of the source code and deciding to develop it in a different
    direction. They add different features, possibly remove some things that are not
    important for the project, and an alternative piece of software is created, which
    often competes with the original software, or provides an alternative to it.
  prefs: []
  type: TYPE_NORMAL
- en: Other examples of *forked* software are the many different distributions of
    the GNU tools and Linux such as Mandrake, Debian, Slackware, Ubuntu, and so on.
    Some of them are derived from their own packaging of the Linux kernel and GNU
    tools and some of them are derived from each other. For example Adamantix and
    Ubuntu are derived from Debian and they feature different design goals from each
    other and from their parent software.
  prefs: []
  type: TYPE_NORMAL
- en: Forking is also a process that commercial software undergoes—the many different
    versions of the Windows operating system, for instance, are ultimately forked
    from the same source code. By *forking* the source code and developing *server*
    versions of Windows (such as Windows 2003 Server) and *client* versions of Windows
    (such as Windows XP), Microsoft is better able to provide functionality in each
    version that is fitting to the purpose of the version, and the price charged for
    it.
  prefs: []
  type: TYPE_NORMAL
- en: There is a rich diversity of OSS, and without the freedom involved in licensing
    IPCop itself wouldn't exist, since it is derived from the GNU tools, Linux, SmoothWall,
    and many other open-source packages. This is by no means an exhaustive list and
    the number of developers involved in creating all of the code involved in such
    a system is very hard to estimate.
  prefs: []
  type: TYPE_NORMAL
- en: The license that IPCop is released under means that if a company chooses to
    use the system internally and subsequently decides that it would like to make
    some changes to it, it is free to do this—modifications are a right that is taken
    for granted under the license, and there is no obligation for you to redistribute
    changes you make that are only used internally. If you do decide to redistribute
    your modifications (to a friend, partner, or another company), all that is asked
    is that you afford your users the same benefits you received initially; i.e. if
    you decide to release the software, then you must release the software under the
    GPL. The license even makes a provision to charge a (reasonable) distribution
    fee to cover costs (although the people you redistribute it to are themselves
    free to redistribute the software to whomever they want, at no cost!). The added
    power this gives a piece of software is hard to measure, but it is very easy to
    see how this could be beneficial.
  prefs: []
  type: TYPE_NORMAL
- en: The example of forking in OSS was that of IPCop forking from SmoothWall. There
    is logically nothing to stop that happening again and in the opinion of the authors,
    diversity and choice when it comes to software is a good thing.
  prefs: []
  type: TYPE_NORMAL
- en: If we don't yet have a handle on the power of this license, one excellent example
    is that of highly secure installations. In a situation in which you need complete
    source code control and the ability to modify software at will to accommodate
    a secure environment, having IPCop with its source code gives you a firewall that
    is fully functional from which you can create a more customized system in order
    to secure your network if you need that sort of flexibility. This can be a change
    to the kernel underneath the system or changes to the configuration options, or
    even adding and removing firewall capabilities. Since there is no requirement
    to redistribute you can decide to keep this fully private and essentially have
    an in-house system where only a small amount of development investment was needed.
    There are a lot of software options that offer this and this is one of the biggest
    benefits OSS such as IPCop has over closed-source and commercial competitors in
    the marketplace.
  prefs: []
  type: TYPE_NORMAL
- en: If you don't need this flexibility, you still benefit from the developers that
    did use this flexibility in order to create a very useful system. The open nature
    of the development process is a direct consequence of the open nature of the code,
    and the sheer number of people who are able to get their hands on projects such
    as IPCop, the Linux kernel, or the Apache web server, means that these software
    packages can be highly polished and kept free of bugs, which commercial products
    with development teams that are comparatively tiny might not be so assiduous about.
  prefs: []
  type: TYPE_NORMAL
- en: The Purpose of IPCop
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: IPCop is a firewall for the Small Office/Home Office (SOHO) network, which is
    extremely easy to use. It provides most of the basic features that you would expect
    a modern firewall to have, and what is most important is that it sets this all
    up for you in a highly automated and simplified way. It's very easy to get an
    IPCop system up and running and takes hardly any time.
  prefs: []
  type: TYPE_NORMAL
- en: For features such as those in IPCop, we would usually have to pay for a high-end
    firewall system or string something together with a collection of other tools.
    IPCop takes some of these powerful tools and creates a pre-built package for us.
  prefs: []
  type: TYPE_NORMAL
- en: IPCop was created to fill what appears to be a void in the market, where users
    with small networks need some features that generally only large networks can
    afford, as far as the requirement for expertise or money is concerned. This book
    hopes to provide the additional expertise to make an adequate replacement for
    a commercial product really shine, as well as give a look at how to set up IPCop
    in a number of different scenarios.
  prefs: []
  type: TYPE_NORMAL
- en: The Benefits of Building on Stable Components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: IPCop could very well be developed as an add-on to an operating system in the
    way that Shorewall is an application to be installed on a Linux system or ISA
    server on a Windows system, making it an application you install over your existing
    setup. You would then be left with the maintenance of the system underlying the
    software package.
  prefs: []
  type: TYPE_NORMAL
- en: The disadvantage of this is that if your server's purpose is only to be a firewall
    for your network you would be required to have an adequate basic understanding
    of the Linux operating system in order to get the software installed and if you
    want it to perform well you would have to configure both the operating system
    and IPCop itself. However, since IPCop installs as an operating system of its
    own, you have no real need to know Linux in order to use the system. When it comes
    to stability, this means that the IPCop developers can concentrate on one platform
    for their development and can be completely confident that they are in control
    of that environment. They are fully responsible for configuring this and when
    it comes to support they can be relatively sure the users haven't destabilized
    the system by wrongly configuring the operating system—and if they have, then
    hopefully they understand the consequences such that they either do it properly
    or understand why IPCop breaks after they tinker with it!
  prefs: []
  type: TYPE_NORMAL
- en: Stability, security, reliability, and ease of use are probably the most important
    factors for smaller networks and are the areas in which IPCop, then, seems to
    excel. Being built on the 2.4 series of the Linux kernel, the system has a noteworthy
    level of security, stability, and reliability. Also, having tools installed that
    are used in networks of different sizes around the world provides a massive user
    base meaning that the systems in use are well-tested and have a lot of individuals
    and companies using them, reporting bugs on them, and relying on them for their
    business.
  prefs: []
  type: TYPE_NORMAL
- en: The Linux kernel is one of the largest single pieces of OSS and includes millions
    of lines of source code developed by a multitude of developers from all over the
    world. Linux has many modern operating system features such as support for wireless
    and Bluetooth devices as well as the most current encrypted network communications.
    As we will see throughout the course of this book, some of these features have
    become invaluable to the IPCop developers and therefore the IPCop users who benefit
    from the features that can be included in the IPCop distribution. The developers
    of IPCop don't have to worry terribly much about lower-level network communication,
    because they have built IPCop on top of the pre-existing kernel code, which manages
    this.
  prefs: []
  type: TYPE_NORMAL
- en: This sort of layering—software on top of other software—enables developers to
    concentrate on the area they know best, and for the IPCop developers, this area
    is making an easy-to-use firewall. You may find this a concept familiar from the
    network layering of the OSI model, which we covered in the previous chapter. This
    interoperability, whether it occurs in an application stack, operating system,
    or set of network protocols, is crucial to build reliable, secure systems. *Open
    Standards*, from network protocols like HTTP to document formats like the Open
    Document Format, are of critical importance to it.
  prefs: []
  type: TYPE_NORMAL
- en: Some of the other software we have mentioned includes Apache and OpenSSH. Apache,
    the web server that serves the pages used to configure IPCop, powers some of the
    largest websites in the world. According to the latest web server survey, Apache
    is used on almost 70% of the world's web servers ([http://news.netcraft.com/archives/2005/11/07/november_2005_web_server_survey.html](http://news.netcraft.com/archives/2005/11/07/november_2005_web_server_survey.html)).
  prefs: []
  type: TYPE_NORMAL
- en: Apache therefore seems like an extremely stable and trustworthy system and gives
    the IPCop developers incredible flexibility when working on their user interface,
    which is almost entirely web-based. Other than the set-up procedure there is no
    real need to go beyond the web interface. By combining the built-in functions
    of the Apache server and IPCop's own scripts it is possible for the developers
    to accomplish very advanced tasks with minimal effort. This stability and ease
    of use is then transparently transferred to the user. Completely unaware that
    Apache is part of the system doing the work, the user can go about configuring
    the firewall with only the knowledge required to browse the Web. Since this is
    fast becoming an essential skill and has joined reading and writing as one of
    the skill-sets taught in school classrooms, it makes IPCop extremely approachable.
    The use of approachable technology such as this is one of the many ways in which
    IPCop strives to achieve its goals.
  prefs: []
  type: TYPE_NORMAL
- en: Equally in networks with no full time IT staff and those with staff for whom
    IPCop constitutes only a small allocation of time, ease of use becomes vital.
    Most IPCop users don't want to know about the inner workings of creating and maintaining
    session state rules for packet filtering. IPCop aims to make this sort of knowledge
    unnecessary. The front end allows us to quickly configure the basic and advanced
    features of our firewall without knowing the in-depth details of underlying systems.
    With this ease of use there are also some powerful configuration options, which
    allow us to set up configurations that are quite advanced and would be much more
    difficult to set up using the tools IPCop is built on. **Virtual Private Networking**
    and **Quality of Service** controls are excellent examples of this—individually,
    the packages providing these services have a very steep learning curve, but when
    incorporated into IPCop, they are relatively easy to configure.
  prefs: []
  type: TYPE_NORMAL
- en: The Gap IPCop Fills
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are a variety of different levels of firewall available. At one end of
    the spectrum, there are enterprise systems such as Check Point and ISA, which
    perform all kinds of powerful functions and can control the traffic for networks
    of vastly varying sizes and topologies. At the other end of the spectrum, we have
    personal firewalls running on host machines such as Agnitum, ZoneAlarm, and the
    built-in firewall in Windows XP Service Pack 2, which protect a single machine.
    There are also many home routers that provide basic firewall functionality. This
    leaves us with the question as to which of these roles IPCop is appropriate for,
    and whether it suits our needs.
  prefs: []
  type: TYPE_NORMAL
- en: IPCop is best suited, as we discussed earlier, to the SOHO network. If our network
    is relatively small with a single Internet connection, such as a home network
    or small business, or we have a couple of sites with separate internet connections
    that require linking together in a medium-sized business then we can certainly
    benefit from using IPCop to handle these connections. Another important aspect
    of IPCop is cost. Since IPCop itself is free of charge our only expenses for the
    firewall are the cost of the hardware (which is usually a low-specification machine)
    and the cost of administering the machine (which is relatively low due to the
    easy-to-use interface). For smaller networks this is highly attractive.
  prefs: []
  type: TYPE_NORMAL
- en: Systems such as ISA server and checkpoint are extremely expensive and require
    a great deal of background knowledge to configure and secure properly. Compare
    this to IPCop, which functions as a very well-secured router and firewall almost
    by default. Larger enterprise systems also have much higher system requirements
    and are usually overkill for smaller networks. The expense and time it takes to
    set these up is unlikely to provide a good return on investment for networks outside
    the larger enterprise. IPCop also benefits from simplicity that is not available
    when using a general purpose OS such as Windows or even a Linux distribution with
    all the unnecessary services they usually come with. IPCop has a specific role,
    so many services and other applications can be removed such that you are left
    with a specialized system.
  prefs: []
  type: TYPE_NORMAL
- en: At the other end of the spectrum, there are personal firewalls such as those
    provided by Agnitum, ZoneAlarm, et al. Commonly within SOHO offices Windows Internet
    Connection Sharing (or a cheap router) is used to fulfill the role frequently
    occupied by IPCop.
  prefs: []
  type: TYPE_NORMAL
- en: These firewalls generally provide basic features and don't allow us to create
    VPNs or to protect multiple machines from a single centralized device. When you
    consider the features such as the ability to create a DMZ, the Intrusion Detection
    System and the network services provided by IPCop you can see that simple host-based
    systems may not be adequate for us and something with the power of IPCop as well
    as its ease of use becomes a compelling option.
  prefs: []
  type: TYPE_NORMAL
- en: The most common use of IPCop, at the moment, is among people who have some firewall
    and Linux knowledge but don't want to spend time setting up a firewall from scratch.
    This is by no means the only use for IPCop. No real Linux or firewall experience
    is necessary and the purpose of this book is to walk through IPCop in an easy-to-follow
    way, which enables a user with the most basic computer knowledge to get up and
    running with a simple firewall to protect their network.
  prefs: []
  type: TYPE_NORMAL
- en: Features of IPCop
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Throughout this book we will be discussing version 1.4.10 of IPCop, which is
    the latest release at time of writing. As IPCop is continually being developed
    new features will be added and some of these features may change.
  prefs: []
  type: TYPE_NORMAL
- en: Web Interface
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A lot of firewalls come with a cluttered, complex user front end that requires
    significant amount of training and experience to become familiar with. The ISA
    server interface, for instance, is famously unintuitive and often interfaces aren't
    designed in order to make common tasks simple and easy to accomplish.
  prefs: []
  type: TYPE_NORMAL
- en: Frequently, proprietary firewalls such as ISA server and BorderWare will rename
    common functions such as **port forwarding** and refer to them as something entirely
    different, not making life any easier even for an administrator with experience
    of firewalls, but no knowledge of the particular user interface in question. As
    an easy example of this, BorderWare refers to port forwarding as an **internal
    proxy**, ISA as **publishing**, and DrayTek's line of (reliable and full-featured,
    but somewhat tricky-to-configure) routers refer to it as a virtual server. These
    definitions in some instances have a reason (application-layer firewalls will
    proxy traffic, as we discovered earlier), but don't really make life easier, even
    if they have a justification!
  prefs: []
  type: TYPE_NORMAL
- en: We will take a close look at how to set up IPCop and therefore will spend a
    lot of time inside the interface. It is therefore extremely fortunate that the
    interface is quite easy to use and very intuitive. The IPCop developers have decided
    to use an interface based on a website built into the system with the consequence
    that for most people, the interface is a familiar environment as it is quite unlikely
    that anyone setting up a firewall has never used a website.
  prefs: []
  type: TYPE_NORMAL
- en: '![Web Interface](img/1361_02_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Merely using a website as the **Graphical User Interface** (**GUI**) is not
    enough. The interface still has to be set out so that it is easy to figure out
    and access all of the common functions. Most of the functions we will look at
    will consist of filling simple forms, which is an effective and easy-to-manage
    interface. IPCop isn't unique in using such an interface. Many devices such as
    SOHO cable routers made by Linksys, DrayTek, and D-Link have a similar setup,
    and many high-end products from Cisco appliances to HP Procurve switches do too,
    but few of these contain all of the features and the ease of use provided by IPCop.
  prefs: []
  type: TYPE_NORMAL
- en: Network Interfaces
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: IPCop provides up to four network interfaces, each of which is usually connected
    to a separate network. This is an adequate number for most IPCop deployments as
    it is rare to have many networks converging at one point in a small to medium
    sized network, but IPCop can accommodate connections to more networks than this
    through use of Virtual Private Network (VPN). The four networks available are
    given identifying colors for ease of administration.
  prefs: []
  type: TYPE_NORMAL
- en: The Green Network Interface
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Green network segment of an IPCop deployment represents the *internal* network,
    and is implicitly trusted. An IPCop firewall will automatically allow all connections
    *from* the Green segment *to* all other segments.
  prefs: []
  type: TYPE_NORMAL
- en: The Green segment is always an Ethernet Network Interface Card (NIC), and there
    is no support for any other device utilized in this capacity. A local network
    may be as simple as a small hub plugged into the Green interface, or may encompass
    several dozen switches, a layer two bridge to another site, or even a router.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Addressing on the Green Interface**'
  prefs: []
  type: TYPE_NORMAL
- en: The Green network should use a private address range (private address ranges
    can be found in RFC1918). Although it is possible to set this up with a publicly
    addressable address range, the default IPCop configuration is one in which NAT
    is used to expose only one IP address, and as such, using a public address range
    on the Green network segment would be pointless, as IPCop would treat it as if
    it were a private address range! Using IPCop as a routing firewall (rather than
    a firewall performing NAT, which is the default configuration) requires more advanced
    configuration and cannot be accomplished through the GUI.
  prefs: []
  type: TYPE_NORMAL
- en: Typically, a network approaching this complexity would choose to segment its
    network with one or more firewalls or routers built on IPCop, another free software
    package, or a commercial package, but with adequate knowledge of networking and
    several hardware platforms, one could build a complex, secure network topology
    using IPCop.
  prefs: []
  type: TYPE_NORMAL
- en: The Red Network Interface
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Similar to the Green network interface, the Red network interface is always
    present. The Red network interface represents either the Internet or an untrusted
    network segment (in a larger topology).
  prefs: []
  type: TYPE_NORMAL
- en: The principle goal of the IPCop firewall is to protect the Green, Blue, and
    Orange segments and the networked hosts on them from traffic, users, and hosts
    on the Red segment. The Red network segment is typically well-firewalled and will
    not open a large number of ports into the internal network segments (if any at
    all). The default is none.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Addressing on the Red Interface**'
  prefs: []
  type: TYPE_NORMAL
- en: The Red segment will almost always use a public address range, assigned by your
    Internet Service Provider. It is possible (but less common) for Internet Service
    Providers to use private address ranges for large portions of their internal networks
    and to perform NAT at the border in between their network and the Internet-exposed
    backbone.
  prefs: []
  type: TYPE_NORMAL
- en: GPRS and 3G networks commonly do this, as do some cable ISPs. If in doubt, ask
    your ISP or check an existing machine or router connected to your ISP. The website
    [www.dnsstuff.com](http://www.dnsstuff.com) can be used to **WHOIS** an IP address
    to check the registration, and if you're unsure as to whether an IP address is
    *private* or *public*, this can be an excellent way to check the ownership.
  prefs: []
  type: TYPE_NORMAL
- en: The Red network segment is the *only* network segment on which IPCop has support
    for hardware other than an Ethernet Network Interface Card. The Red segment may
    be an Ethernet network interface allocated statically or using DHCP, it may be
    a USB ADSL modem, an ISDN card, or even a dial-up, analog modem connected to the
    Public Switched Telephone Network.
  prefs: []
  type: TYPE_NORMAL
- en: 'Other hardware interfaces that IPCop will support on this interface include:'
  prefs: []
  type: TYPE_NORMAL
- en: USB and PCI ADSL Modems
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**DSL** is a technology that allows a broadband, high-speed internet or network
    signal to be sent over an existing copper phone line. This form of internet provision
    is extremely popular, particularly in countries with traditionally lower uptake
    of services like cable, as it requires no expensive digging up and rewiring of
    streets and premises with new wiring for cable or network infrastructure. One
    of the downsides of DSL is the comparatively short range of DSL signals, necessitating
    proximity to a telephone exchange, although this limit increases as technology
    advances.'
  prefs: []
  type: TYPE_NORMAL
- en: IPCop will allow users with DSL services (both **SDSL** and **ADSL**) to attach
    certain brands of modem directly to the IPCop firewall. There are three principle
    ways to attach an IPCop firewall to a DSL line.
  prefs: []
  type: TYPE_NORMAL
- en: The first of these is to attach the IPCop host to an ADSL modem via Ethernet.
    Generally the most stable way, this has the disadvantage of being more difficult
    to set up. Modems that are full-fledged routers, such as the many routers based
    around Conexant chipsets, are generally designed to act as the NAT router in a
    network themselves. These devices have either one Ethernet port (which plugs into
    a switch or hub) or several Ethernet ports (and a small built-in switch), and
    hand out private addresses (frequently in the 10.0.0.0/8 range) to clients on
    the network themselves, acting as a firewall. Connecting an IPCop host to the
    rear of one of these routers without altering the default configuration is a bad
    idea, as you are performing Network Address Translation twice.
  prefs: []
  type: TYPE_NORMAL
- en: While NAT frequently breaks protocols when performed once, performing it twice
    is almost a guaranteed way to give you networking headaches. In addition to the
    routing issues caused by essentially having two networks between you and the Internet,
    it is very hard to achieve port forwarding through these routers for protocols
    such as BitTorrent, SIP, online gaming, or incoming services like SMTP mail, as
    each port forward must be configured twice. These routers must therefore be configured
    *not* to act as NAT gateways, but instead fallback to behaving like *normal* routers.
    Without more than one IP address this is impossible, leaving home users or businesses
    without a fixed pool of IP addresses from their ISP in a conundrum if they wish
    to use IPCop!
  prefs: []
  type: TYPE_NORMAL
- en: Some ADSL routers that are Ethernet-based, therefore, have a feature referred
    to as **PPP Half Bridge**. This feature allows the device plugged in via Ethernet
    (i.e. your IPCop firewall) to get the *public* IP address from your ISP, and disables
    the router from acting as a firewall or NAT gateway. When acting in this mode,
    an ADSL router takes the IP address allocated by the ISP during authentication,
    and gives it to the first device that requests a DHCP address via DHCP. This function
    should be documented in your ADSL manual.
  prefs: []
  type: TYPE_NORMAL
- en: The second way to configure ADSL is using a USB ADSL modem attached directly
    to the PC or firewall. While perhaps simplest (as it requires minimal knowledge
    of networking, and no complex cabling or hardware installation), these modems
    are the cheapest, least reliable, and have the poorest performance of all three
    methods.
  prefs: []
  type: TYPE_NORMAL
- en: The third way to configure ADSL is using internal ADSL or SDSL cards, occupying
    one PCI slot inside a firewall, PC, or server. This is perhaps the least common
    method of configuring ADSL.
  prefs: []
  type: TYPE_NORMAL
- en: 'IPCop supports all three, to an extent: Wherever possible, the authors strongly
    recommend the use of an Ethernet ADSL modem either configured as a router using
    a static set of addresses, or (if this isn''t possible) using DHCP either natively
    or using a workaround like PPP Half Bridge. Here is a list of supported devices
    in IPCop:'
  prefs: []
  type: TYPE_NORMAL
- en: The Alcatel SpeedTouch series of USB ADSL modems
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ECI USB ADSL devices (including BT Voyager Modems, the Zoom 5510 ADSL modem,
    and several dozen other similar devices)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: BeWan USB/PCI ADSL modems (the ST series of USB modem, and the ST series of
    PCI modem)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Conexant USB modems (including the Zoom 5510, DrayTek Vigor 318, and several
    others)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Conexant PCI modems
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Amedyn ADSL modems (for which the HCL lists only the Zyxel 630-11, Asus AAM6000UG
    USB)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The 3com 3CP4218 USB ADSL modem
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ISDN Modems
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Integrated Services Digital Network** (**ISDN**) is a form of (slow) broadband
    internet access provision predating ADSL or Cable connections. ISDN is essentially
    a form of digital circuit telephone line. ISDN was frequently used before the
    widespread adoption of broadband via cable, DSL, and satellite, and still sees
    usage in some branch offices, for remote working, and in areas with no DSL, cable,
    or satellite availability.'
  prefs: []
  type: TYPE_NORMAL
- en: IPCop has support for a large number of ISDN modems (the 1.4.10 HCL lists 34).
    The full list is available on the IPCop Wiki site ([http://www.ipcop.org/modules.php?op=modload&name=phpWiki&file=index&pagename=IPCopHCLv01](http://www.ipcop.org/modules.php?op=modload&name=phpWiki&file=index&pagename=IPCopHCLv01)).
  prefs: []
  type: TYPE_NORMAL
- en: Analog (POTS) Modems
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: IPCop should support any hardware analog (dial-up) modem. Hardware devices are
    generally attached via a serial port or as an ISA card.
  prefs: []
  type: TYPE_NORMAL
- en: Newer modems using the PCI interface are frequently *software* based. This means
    that a certain proportion of the modem's work is performed on the CPU of the computer
    it is attached to, by software, rather than by the modem itself.
  prefs: []
  type: TYPE_NORMAL
- en: Without device drivers that perform this work, such modems will not work, and
    as there are typically no drivers for these devices written for the Linux operating
    system, they are generally viewed as *broken* in Linux. USB modems should also
    work in IPCop.
  prefs: []
  type: TYPE_NORMAL
- en: The IPCop HCL lists one PCI modem that works with IPCop, the *PCI Smartlink
    5634PCV*.
  prefs: []
  type: TYPE_NORMAL
- en: Cable and Satellite Internet
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Generally speaking, internet services via cable from providers in Europe and
    the USA provide Ethernet modems that will *just work* in IPCop as they provide
    a public, routable IP address via DHCP. Some cable providers, however, provide
    USB modems that are unlikely to work in IPCop. The same is true of satellite internet
    (that USB modems are unlikely to work in IPCop).
  prefs: []
  type: TYPE_NORMAL
- en: The Orange Network Interface
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *optional* Orange network interface is designed as a **DMZ** network (see
    [http://www.firewall.cx/dmz.php](http://www.firewall.cx/dmz.php) for more information
    on DMZ firewalls). In military terminology, a DMZ (DeMiliatized Zone) is an area
    where military activity is not permitted, such as a frontier in between two distinct
    (and hostile) countries. In firewall terminology, then, the term *DMZ* takes on
    a similar meaning, as a network segment in between the internal network of an
    organization and an external network such as the Internet. In this segment, servers
    are protected from the Internet by firewalls, but segregated (as they have internet
    exposure) from internal clients that are in a more protected zone behind the front
    line.
  prefs: []
  type: TYPE_NORMAL
- en: It is into this untrusted but segregated network that an organization will generally
    put any service designed to face the outside world, such as a web server (which
    serves outside clients for website requests), or more commonly a mail server (to
    which outside servers connect in order to deliver mail via SMTP).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Addressing on the Orange Interface**'
  prefs: []
  type: TYPE_NORMAL
- en: The Orange network interface generally uses a private address range as NAT is
    performed by IPCop. As with the Green zone, a *routing* rather than *NATing* firewall
    requires advanced configuration.
  prefs: []
  type: TYPE_NORMAL
- en: For this reason, the DMZ is considered to be an untrusted network segment, second
    only to the Red network interface. Hosts on the Orange network segment *cannot*
    connect to the Green or Blue network segments—all traffic from the Orange network
    segment to these internal segments must be explicitly allowed via **DMZ pinholes**.
    Traffic from the Red network segment to the Orange segment is allowed via port
    forwarding.
  prefs: []
  type: TYPE_NORMAL
- en: Clients on the Orange network should *not*, however, use the IPCop firewall
    as a DNS or DHCP server. There are valid security reasons for this—additional
    exposure to services on the IPCop host for this segment, apart from being harder
    to configure, increases the exposure of the IPCop host to attack from the Orange
    zone, decreasing the ability to provide secure services for clients in the Green
    zone.
  prefs: []
  type: TYPE_NORMAL
- en: The Blue Network Interfaces
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *optional* Blue network interface is a comparatively recent addition to
    IPCop, arriving with the 1.4 release series. This network is designed specifically
    for a separate wireless segment. Hosts on the Blue segment cannot get to the Green
    network other than through specific *pinholes* in a similar manner to the Orange
    network.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Addressing on the Blue Network Segment**'
  prefs: []
  type: TYPE_NORMAL
- en: The Blue network will almost always use a private address range.
  prefs: []
  type: TYPE_NORMAL
- en: IPCop also allows for the capability to connect to the Green zone via a Virtual
    Private Network, allowing clients to fully access resources on this network segment.
  prefs: []
  type: TYPE_NORMAL
- en: The Blue segment does not necessarily have to be a wireless segment—as the Blue
    segment is simply another network segment, and the wireless connection of hosts
    is transparent to IPCop, there is absolutely nothing stopping you from using the
    Blue segment as another subnet on your network if you are outgrowing the number
    of hosts available to you in your Green zone.
  prefs: []
  type: TYPE_NORMAL
- en: Using the Blue zone in this manner would also be a good way to separate hosts
    with distinct usage of the network, such as a subnet of workstations used by a
    particular group of staff, in public areas, or on a factory floor. The Blue zone
    might even be used as the default zone for a network in which the administrator
    did not want the hosts on the network to automatically have access to every resource
    on the network, as the Green zone does.
  prefs: []
  type: TYPE_NORMAL
- en: In such a topology, the IT staff might be allocated the Green zone in order
    to access network resources, while workstations might be kept in the Blue zone,
    with specific access to areas of the network they required.
  prefs: []
  type: TYPE_NORMAL
- en: Simple Administration and Monitoring
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As a device that aims to be easy to use, it would not be of much use to the
    user if he or she had to reinstall each time a new version came out. It would
    also be extremely beneficial if the user didn't have to log in to the Linux console
    on the machine at any time. The IPCop developers obviously agree with this and
    therefore have a built in a simple upgrade system. This can be managed entirely
    from the web interface. If, however, the user did want to log in to the Linux
    console and make changes this could be done quite simply by using a keyboard/monitor
    attached to the machine or by using SSH from a computer on the local network (Green
    interface). SSH, for added security, is disabled by default and would have to
    be enabled before it could be used.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Local Console**'
  prefs: []
  type: TYPE_NORMAL
- en: It is quite common to run servers such as IPCop firewalls on PCs with keyboard
    and monitor detached, as they are rarely used. Although convenient, this can cause
    problems as some motherboards (and software packages) do not like keyboards and
    mice (particularly with PS/2 connectors) being hotplugged. Although monitors are
    hot-swappable (so you can disconnect and reconnect the monitor to an IPCop system
    at will), we recommend that you leave your IPCop system attached either to a keyboard
    or a KVM switch.
  prefs: []
  type: TYPE_NORMAL
- en: Another side effect of leaving the keyboard detached is that the BIOS in many
    computers will *halt* on startup and await a keypress if it does not see a keyboard
    attached. For computers that do not have keyboards attached, this behavior can
    (and really should) usually be disabled in the BIOS configuration.
  prefs: []
  type: TYPE_NORMAL
- en: You can also back up and restore your configuration from this same interface,
    which ensures that all common administration tasks for the firewall can be managed
    very easily and more importantly without any knowledge about Linux or the bash
    shell.
  prefs: []
  type: TYPE_NORMAL
- en: With the status provided on the web interface we can see exactly how the system
    is doing. For example we can see which services are currently running on the firewall,
    memory and disk usage, as well as traffic graphs, if we have an interest in this.
  prefs: []
  type: TYPE_NORMAL
- en: '![Simple Administration and Monitoring](img/1361_02_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Again these features show the power of the web-based interface and why this
    particular interface was chosen. We can also quickly see important system information
    without logging in to the system with an interactive shell.
  prefs: []
  type: TYPE_NORMAL
- en: Logs can also be viewed using the web-based log viewer, which means you can
    keep an eye on the system quite easily with absolutely no need to log directly
    into the system. IPCop also has the ability to export these logs to a remote Syslog
    server for simplified management and log aggregation, especially if you have a
    few devices to monitor.
  prefs: []
  type: TYPE_NORMAL
- en: Modem Settings
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As many home users are using ISDN or ADSL modems for dial-up (including USB/ADSL
    modems), it's important that IPCop supports them. A variety of common modems are
    supported and IPCop has the functionality to have additional drivers loaded for
    modems it does not support by default, and the configuration options for these
    are fairly flexible. It's not very common for firewalls to support modems and
    drivers for them in this manner; this is one of the most unique features of IPCop
    and why it fits so well in the SOHO network.
  prefs: []
  type: TYPE_NORMAL
- en: '![Modem Settings](img/1361_02_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Services
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: IPCop provides a variety of essential services for a small network. It's not
    strictly firewall best practice to provide such services on the same box that
    is supposed to be a network protection mechanism, but economy comes into play
    on smaller networks and it's very useful to have all the basic network services
    provided by a single machine.
  prefs: []
  type: TYPE_NORMAL
- en: Web Proxy
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: IPCop can be used as a proxy as well as a firewall. You can easily manage the
    cache and configure the proxy on the Green interface. The benefit of the defined
    interfaces becomes quite apparent here as it means a simple checkbox click is
    all that is required to set up proxying on IPCop.
  prefs: []
  type: TYPE_NORMAL
- en: '![Web Proxy](img/1361_02_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: DHCP
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As a network grows, allocating network configuration to clients manually becomes
    extremely difficult, and it's fairly important to be able to automate this, as
    well as manage the use of the network addresses you use. The **Dynamic Host Configuration
    Protocol** (**DHCP**) configuration in IPCop makes it easy for you to provide
    DHCP services to the clients on the Green interface if you're unsure of how to
    do this. Doing this via DHCP simplifies client-side configuration, meaning that
    most machines will connect to the network and have internet access automatically
    without any configuration required on the host.
  prefs: []
  type: TYPE_NORMAL
- en: '![DHCPservices, IPCopweb proxy](img/1361_02_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Dynamic DNS
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Generally speaking, internet connections for SOHO users will have a **Fully
    Qualified Domain Name** (**FQDN**) something like 31-34-43-10.some ISP.net. The
    FQDN of a computer on the Internet can be used to make connections to it—so a
    connection made to Google, for instance, goes to [www.google.com](http://www.google.com).
    For a home user, your FQDN is not a domain name like **google.com**, but instead
    a domain name used by your ISP to identify what ISP you're coming from and which
    client you are on your network, and generally make things a bit more understandable
    for humans.
  prefs: []
  type: TYPE_NORMAL
- en: While this makes sense for an ISP managing its clients, it makes connecting
    remotely to a network that has internet connectivity provided like this difficult.
    Even if you could memorize and hand out your ISP's allocated domain name, it would
    still not be a solution if you want people to be able to access services you host,
    as the IP address, and therefore the FQDN of your firewall or router would change
    from time to time.
  prefs: []
  type: TYPE_NORMAL
- en: Therefore, many networks use **Dynamic DNS**. Using a dynamic DNS system, a
    small piece of software running on a firewall or client attached to the Internet
    will update a server on the Internet (a dynamic DNS server) with your IP address,
    and redirect a fixed hostname (such as yourname.dynamicdnsprovider.com) to whatever
    your IP address is at present. If you connect to an IPSec VPN, or another service
    such as HTTP, VNC, or a terminal service, or if clients connect to you remotely
    using these protocols, the connections can be made to this dynamic DNS hostname,
    and will seamlessly go to the IP updated with the dynamic DNS server.
  prefs: []
  type: TYPE_NORMAL
- en: '![Dynamic DNSservices, IPCopDHCP](img/1361_02_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Since these services require constantly updating a server with your current
    IP address in order to keep the DNS working, use of dynamic DNS requires a computer
    or other device running software constantly talking to a Dynamic DNS Provider.
  prefs: []
  type: TYPE_NORMAL
- en: Dynamic DNS is a feature not commonly found in larger firewall products and
    certainly isn't common in most low-end home routers.
  prefs: []
  type: TYPE_NORMAL
- en: '![Dynamic DNSservices, IPCopDHCP](img/1361_02_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Time Server
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Hosts on the network commonly need to be configured to keep the same time, whether
    this is because of authentication mechanisms such as Kerberos or merely for convenience.
    IPCop provides the **Network Time Protocol** (**NTP**) service, which can be used
    to keep all clients on the network synchronized.
  prefs: []
  type: TYPE_NORMAL
- en: Using NTP, the IPCop server connects to an NTP timeserver on the Internet, from
    which it ascertains the correct time. It then keeps this internally using the
    computer's clock, and acts as an NTP server for clients within the network. By
    regularly updating from an upstream NTP server, the IPCop box can ensure that
    the time is kept to a reasonable degree of accuracy.
  prefs: []
  type: TYPE_NORMAL
- en: By updating from a local source, rather than having every local client update
    from an external time source, you keep clients accurate to each other (so even
    if the time isn't strictly accurate, you know all of your local clients keep approximately
    the same time, important for things like log auditing and Kerberos). Most importantly,
    it also reduces the load on NTP servers, which are providing you with a free service!
  prefs: []
  type: TYPE_NORMAL
- en: 'Information on how to configure client operating systems to talk to an NTP
    server can be found here:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Windows: [http://www.boulder.nist.gov/timefreq/service/pdf/win2000xp.pdf](http://www.boulder.nist.gov/timefreq/service/pdf/win2000xp.pdf)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Linux: [http://Linuxreviews.org/howtos/ntp/](http://Linuxreviews.org/howtos/ntp/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'OS X: Select **System Preferences**, and **Use Network Time**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Time Serverservices, IPCopdynamic DNS, settings](img/1361_02_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Advanced Network Services
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Traffic shaping and intrusion detection are quite advanced network services
    that we wouldn't expect to see in most SOHO devices. IPCop not only provides these,
    but also makes them very easy to manage, and as we look at configuring IPCop,
    we will see exactly how easily these quite complicated systems can be maintained.
  prefs: []
  type: TYPE_NORMAL
- en: '![Advanced Network Services](img/1361_02_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Port Forwarding
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This is a feature that is quite common in a firewall from SOHO to large enterprises.
    The benefits of IPCop here are twofold. Firstly, we don't have any limitations
    on the number of forwardings we can add and secondly it is very easy to set up.
    With some SOHO devices not only do we have limitations on the number of ports
    we can forward, but we also often find very complicated configurations surrounding
    it. Enterprise systems are complicated by nature and in this particular feature
    the complication is exacerbated.
  prefs: []
  type: TYPE_NORMAL
- en: '![Port Forwarding](img/1361_02_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As we can see, the IPCop firewall appears to the client to be both a mail server
    *and* a web server, but connections to ports 25 and 80 in this example configuration
    are in fact forwarded to the servers configured in the port forwarding menu. These
    servers in an IPCop configuration would probably be in the Orange zone.
  prefs: []
  type: TYPE_NORMAL
- en: '![Port Forwarding](img/1361_02_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Virtual Private Networking
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This gives you the ability to join to more networks across the Internet with
    a (virtually) private link. This is one of the main features of IPCop, which means
    it can also be used in a medium-sized business and not just a SOHO network. The
    ins and outs of the IPCop VPN implementation are thoroughly discussed in a later
    chapter.
  prefs: []
  type: TYPE_NORMAL
- en: '![Virtual Private Networking](img/1361_02_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: ProPolice Stack Protection
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: IPCop has been built to use ProPolice, which is a mechanism used to protect
    the services running on the firewall from being attacked via the Internet. The
    stack protection provided by ProPolice is a fairly effective mechanism to prevent
    a particular kind of vulnerability common in network services.
  prefs: []
  type: TYPE_NORMAL
- en: Why IPCop?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When evaluating IPCop for use within our environment, we should look at the
    functionality it provides, which is evident from the feature list that we have
    just seen. Then, we need to determine if it will be the most effective solution
    for our network. Generally for a small to medium sized network IPCop is extremely
    beneficial and can simplify network administration greatly. However, for very
    large networks where we have a variety of segments all interconnecting with varying
    mechanisms we may find IPCop inadequate. It's important to figure out how exactly
    our network will fit together and then choose IPCop if there is a role it could
    fit in to. For the SOHO network this may be a very simple topology and may require
    little thought. In a larger network IPCop may have scope for deployment in specific
    roles within the infrastructure, for example as the gateway device of key remote
    networks, such as branch offices.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter we had a look at the feature-set available in IPCop. We have
    an idea of what exactly IPCop can do, and combined with the knowledge of the previous
    chapter, we know how it stacks up as a firewall. We now also have an idea of the
    situations in which IPCop could be useful and what we will need to understand
    in order to use it. Some of the screenshots may look a little bit complicated
    at this point, if we are new to any of the topics. As we go through these functions,
    everything will be explained so that we understand each option fully and know
    whether we need to configure that particular area and how exactly we would want
    it set up. For those more familiar with the technologies this may have served
    to give an overview of how some of the features work within IPCop.
  prefs: []
  type: TYPE_NORMAL
