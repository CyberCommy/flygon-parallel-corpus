- en: Understanding the Core Router, and Configuring the BrowserRouter and HashRouter
    components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The React-Router library provides several components that address various use
    cases, such as adding navigation links with `<Link>` and `<NavLink>`, redirecting
    the user using the `<Redirect>`  component, and so on. The `<BrowserRouter>` component
    wraps the application's root component (`<App />`) and enables these components
    to interact with the `history` object. When the application initializes, the `<BrowserRouter>`
    component initializes the `history` object and makes it available to all its child
    components using React's `context`.
  prefs: []
  type: TYPE_NORMAL
- en: Routing in a single-page application is not really routing; rather, it's conditional
    rendering of components. The `<BrowserRouter>` component creates the `history`
    object, and the `history` object has methods such as `push`, `replace`, `pop`,
    and so on, which are used when navigation occurs. The `history` object enables
    the application to maintain history when the user is navigating between the pages.
    Other than `<BrowserRouter>`, React-Router provides various Router implementations—`<HashRouter>`,
    `<StaticRouter>`, `<MemoryRouter>`, and `<NativeRouter>`. These Routers make use
    of the low-level `Router` interface, which is included in the `react-router` core
    package.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will take a look at the low-level `<Router>` component
    and various router implementations:'
  prefs: []
  type: TYPE_NORMAL
- en: '`<Router>` and the `react-router` package'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<BrowserRouter>` props'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`HashRouter`—a Router implementation for use in legacy browsers'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Other `<Router>` implementations, such as `<StaticRouter>`, `<MemoryRouter>`,
    and `<NativeRouter>`, are discussed in the next chapters.
  prefs: []
  type: TYPE_NORMAL
- en: <Router> component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As previously mentioned, React-Router provides various Router implementations:'
  prefs: []
  type: TYPE_NORMAL
- en: '`<BrowserRouter>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<HashRouter>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<MemoryRouter>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<StaticRouter>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<NativeRouter>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These Routers make use of a low-level interface—`<Router>`. The `<Router>` component
    is part of the core `react-router` package, and the functionality provided by
    the `<Router>` interface is extended by these Router implementations.
  prefs: []
  type: TYPE_NORMAL
- en: The `<Router>` component accepts two props—`history` and `children`. The `history`
    object can be a reference to the browser's history or it can be the application's
    history maintained in memory (which is useful in native applications where an
    instance of browser's history is not available). The `<Router>` component accepts
    one child component, which is generally the application's root component. Also,
    it creates a `context` object, `context.router`, through which all its descendent
    child components, such as `<Route>`, `<Link>`, `<Switch>`, and so on, get a reference
    for the `history` object.
  prefs: []
  type: TYPE_NORMAL
- en: 'From reactjs.org:'
  prefs: []
  type: TYPE_NORMAL
- en: Context provides a way to pass data through the component tree without having
    to pass props down manually at every level.
  prefs: []
  type: TYPE_NORMAL
- en: The `<Router>` interface is generally not used in building applications; instead,
    one of the high-level Router components that is suitable for the given environment
    is used. One of the common use cases for using the `<Router>` interface is to
    synchronize a custom `history` object with state–management libraries such as `Redux`
    and `MobX`.
  prefs: []
  type: TYPE_NORMAL
- en: Including <Router> from react-router
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The core `react-router` package can be installed via `npm`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The `Router` class can then be included in the application file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The next step is to create a `history` object that can then be provided as
    a value to the `history` prop of `<Router>`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Here, the `createBrowserHistory` class from the `history` package is used to
    create a `history` object for the browser environment. The `history` package includes
    classes suitable for various environments.
  prefs: []
  type: TYPE_NORMAL
- en: 'The last step is to wrap the application''s root component with the `<Router>`
    component and render the application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Notice that the `<Router>` component accepts a `history` prop whose value is
    the `history` object created with `createBrowserHistory`. Similar to the `<BrowserRouter>`
    component, the `<Router>` component accepts only one child, and throws an error
    when there is more than one child component.
  prefs: []
  type: TYPE_NORMAL
- en: 'React allows its prop values to change and it re-renders the component whenever
    a change is detected. In this case, if we try to change the value assigned to
    the history prop, React-Router throws a warning message. Consider the following
    code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding example, the state property `customHistory` contains the `history`
    object, which is provided to the `<Router>` component. However, when the value
    of `customHistory` changes in the `componentDidMount` lifecycle function, React-Router
    throws the warning message Warning: You cannot change <Router> history.'
  prefs: []
  type: TYPE_NORMAL
- en: react-router package
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `react-router` package includes some of the core components, such as the
    `<Router>` component mentioned previously. The package also includes several other
    components that are then used by components available in the `react-router-dom` and
    `react-router-native` packages. The `react-router` package exports these components:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Some of the components mentioned here were discussed in earlier chapters. The
    package also provides helper functions, such as `generatePath` and `matchPath`,
    and router implementations, such as `<MemoryRouter>` and `<StaticRouter>`. The
    components and services defined in `react-router-dom` and `react-router-native` import
    these components and services, and are included in their respective packages.
  prefs: []
  type: TYPE_NORMAL
- en: react-router-dom package
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `react-router-dom` package provides components that can be used in a browser-based
    application. It declares a dependency on the `react-router` package and exports
    the following components:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Notice that some of the components mentioned here are also included in the
    `react-router` package. The components in `react-router-dom` import the components
    defined in `react-router` and then export them. For example, take a look at the
    `<Route>` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The Router implementations `BrowserRouter`, `<HashRouter>`, and `<MemoryRouter>`
    create a `history` object specific to the given environment, and render the `<Router>`
    component. We will take a look at these Router implementations shortly.
  prefs: []
  type: TYPE_NORMAL
- en: The `react-router-native` package makes use of the `<MemoryRouter>` implementation
    in `react-router`, and provides a `<NativeRouter>` interface. The `NativeRouter`
    implementation and its packaging details are discussed in upcoming chapters.
  prefs: []
  type: TYPE_NORMAL
- en: <BrowserRouter> component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `<BrowserRouter>` component was discussed briefly in the first chapter.
    As the name suggests, the `<BrowserRouter>` component is used in browser-based
    applications and it uses HTML5's history API to keep the UI in sync with the browser's
    URL. Here, we take a look at how the component creates a `history` object for
    the browser environment and provides this `history` object to the `<Router>`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `<BrowserRouter>` component accepts the following props:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Similar to the `<Router>` interface, the `<BrowserRouter>` accepts only one
    child component (usually the application''s root component). The `children` prop
    mentioned in the preceding code snippet refers to this child node. The `createBrowserHistory`
    method from the  `history`  package is used to create a `history` object for initializing
    the `<Router>`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code snippet, the `<BrowserRouter>` uses the provided props
    to create a `history` object using the `history/createBrowserHistory` class. The
    component then renders the `<Router>` component, and provides the created `history`
    object and the `children` object from props.
  prefs: []
  type: TYPE_NORMAL
- en: basename prop
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `basename` prop is used to provide a base URL path for all the locations
    in the application. For example, if you want to render your application at the `/admin` path
    instead of rendering at the root path `/`, then specify the `basename` prop in
    `<BrowserRouter>`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The `basename` prop now adds the base URL path `/admin` to the application.
    When you navigate using `<Link>` and `<NavLink>`, the `basename` path is added
    to the URL. For example, consider the following code with two `<Link>` components:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'When you click on the `Home` link (path `/`), you''ll notice that the URL path
    is updated to `/admin` instead of `/`. And, when you click on the `Dashboard`
    link, the updated URL path is `/admin/dashboard`. With the `basename` prop in
    `<BrowserRouter>`, the preceding `<Link>` components translate to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: The anchor link's `href` attribute is prefixed with the `/admin` path.
  prefs: []
  type: TYPE_NORMAL
- en: forceRefresh prop
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `forceRefresh` prop is a Boolean prop, and when set to `true`, navigation
    to any route will result in a page refresh—instead of updating specific sections
    of the page, the entire page is reloaded:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: When you click on the navigation link `Dashboard`, you'll notice that the page
    reloads when requesting for the URL path `/dashboard`.
  prefs: []
  type: TYPE_NORMAL
- en: keyLengthprop
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `keyLength` prop is used to specify the length for the `location.key`.
    The `locaction.key` property represents a unique key that is provided to a location.
    Take a look at the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: When you navigate to either of the `/dashboard` or `/user` paths, the value
    of `location.key` will be a random alphanumeric string of length 10\. By default,
    the value of `keyLength` prop used to generate the key is 6.
  prefs: []
  type: TYPE_NORMAL
- en: When you navigate back and forth between the `/dashboard` and `/user` paths
    by using the navigation links, you'll notice that a new key is generated for every
    navigation. This is because will you navigate using the navigation links, `history.push`
    is called and a new key is generated, and the key is unique for each entry in
    the history stack. Thus, when you navigate by clicking the browser's back button, `history.pop`
    is called, and you'll notice that the key generated for the location is shown
    and a new key is not generated.
  prefs: []
  type: TYPE_NORMAL
- en: getUserConfirmation prop
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `getUserConfirmation` prop accepts a function as its value, and it's executed
    when the user-initiated navigation is blocked using the `<Prompt>` component.
    The `<Prompt>` component shows a confirmation dialog box using the `window.confirm`
    method, and navigates the user to the selected path only if the user clicks the
    OK button. However, when the `<BrowserRouter>` component specifies the `getUserConfirmation` prop,
    the function provided as a value to this prop will be executed. This provides
    an opportunity to display a custom dialog box.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at the following configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Suppose the current URL path is `/user` and you try to navigate to a different
    route, such as `/dashboard`, by clicking the navigation link provided in the `nav`
    menu. The `<Prompt>` message will be shown if the `getUserConfirmation` prop is
    not specified. In this case, the function `userConfirmationFunc`, which is defined
    in the component's class, is executed.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can call `window.confirm` to display a confirmation dialog box asking the
    user about the navigation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: The function accepts two parameters—`message` and `callback`. The `message` parameter
    specifies the message that needs to be displayed, and the `message` prop included
    in the `<Prompt>` component provides this value. The function is expected to execute
    the callback function provided as the second parameter.
  prefs: []
  type: TYPE_NORMAL
- en: Here, a callback function is provided as the second parameter by the `<BrowserRouter>`.
    The `window.confirm` function is called with the provided `message`, and the user
    is presented with two buttons—OK and CANCEL; on clicking OK, `status` is set to
    true, and, on clicking CANCEL, `status` is set to `false`. The `callback` function
    provided as the second parameter is called with this `status` value; it is a true
    value that allows the user to navigate to the selected route.
  prefs: []
  type: TYPE_NORMAL
- en: This the default behavior; a native-browser-confirmation dialog box is shown
    before allowing the user to navigate to the selected page. However, this behavior
    can be changed in the `userConfirmationFunc` mentioned previously; you can show
    a custom dialog box instead of displaying the browser's native-confirmation dialog
    box.
  prefs: []
  type: TYPE_NORMAL
- en: Showing a custom dialog box using the getUserConfirmation prop
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For the purpose of this example, let''s add `material-UI`, which includes a
    custom dialog box component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s create a custom dialog box that wraps the `Dialog` component in `@material-ui/core`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: This component accepts three props—`message`, `handleClose`, and `isOpen`. The
    `message` prop is the message that you want to show in the custom dialog box,
    and the `handleClose` prop is a function reference provided to the component that
    is invoked when the user clicks on the buttons OK or CANCEL, which allow or cancel
    the transition to the selected path, respectively.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s use this in our root component file (in `App.js`), and show the `ConfirmationDialog`
    when the user tries to navigate to a different route:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'We will first set the `state` properties to their initial values in the React
    Component. The `state` properties mentioned previously change when the user tries
    to navigate to a different route:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: The preceding `userConfirmationFunc` function sets the `state` properties such
    that it will display the custom confirmation dialog box (`ConfirmationDialog`)
    when the user tries to navigate away from the current route.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following `handleClose` function, defined in the `App` component, will
    be provided to the `ConfirmationDialog` component that we created earlier:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: This provides us with a way to hide the custom confirmation dialog box and to
    reset the component's `state` properties to their initial values. The `this.state.callback(status)` statement
    will close the confirmation dialog box, and either navigate the user to the selected
    route (if the status is true) or cancel the navigation (if the status is false).
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s the updated render method of the component class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding render method, the custom `ConfirmationDialog` box is included,
    and it''s rendered only if the state property `showConrfirmationDialog` is set
    to `true`. The `userConfirmationFunc` sets the `state` properties and the custom
    dialog is shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/afdee1c8-4d60-4068-a613-05f1941e945e.png)'
  prefs: []
  type: TYPE_IMG
- en: The `handleClose` function in the preceding code snippet is called by the `ConfirmDialog`
    box when the user clicks either of the buttons OK or CANCEL. The OK button will
    send the value `true`, whereas the CANCEL button sends a `false` value to the
    `handleClose` function defined previously.
  prefs: []
  type: TYPE_NORMAL
- en: <HashRouter> component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `<HashRouter>` component is part of the `react-router-dom` package, and,
    similar to `<BrowserRouter>`, it''s also used in building applications for the
    browser environment. The primary difference between `<BrowserRouter>` and `<HashRouter>`
    is the URL that the component creates:'
  prefs: []
  type: TYPE_NORMAL
- en: 'A `<BrowserRouter>` creates a URL as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Whereas the `<HashRouter>` adds a hash to the URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: The `<BrowserRouter>` component leverages the HTML5 History API to keep track
    of the router history, whereas the `<HashRouter>` component uses `window.location.hash`
    (the hash portion of the URL) to remember the changes in the browser's history
    stack. The `<BrowserRouter>` should be used in building applications that work
    on modern browsers that support the HTML5's History API, and the `<HashRouter>`
    should be used in applications that need to support legacy browsers.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `<HashRouter>` uses the `createHashHistory` class to create the `history`
    object. This `history` object is then provided to the core `<Router>` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'The `<HashRouter>` accepts the following props:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Similar to `<BrowserRouter>`, the props `basename` and `getUserConfirmation`
    are used to specify the base URL path and function to confirm navigation to the
    selected URL respectively. However, the `<HashRouter>` does not support `location.key`
    and `location.state`, thus the prop `keyLength` is not supported. Also, the prop
    `forceRefresh` is not supported.
  prefs: []
  type: TYPE_NORMAL
- en: Let's take a look at the `hashType` prop.
  prefs: []
  type: TYPE_NORMAL
- en: hashType prop
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `hashType` prop is used to specify the encoding method to use for `window.location.hash`.
    The possible values are `slash`, `noslash`, and `hashbang`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at how the URLs are formed when you include the `hashType`
    prop with one of these values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: When you specify `slash` as the value to the `hashType` prop, a slash (`/`)
    is added after the hash (`#`). Thus, the URLs will be of the forms —`#/`, `#/dashboard`,
    `#/user`, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Please note, `slash` is the default value for the prop `hashType`, and it's
    not required to include the `hashType` prop when you want to add a slash after
    the `#`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Similarly, when the value of the `hashType` prop is `noslash`, the URLs are
    of the forms —`#`, `#dashboard`, `#user`, and so on:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'When the value `hashbang` is assigned to the `hashType` prop, it creates URLs
    of the form—`#!/`, `#!/dashboard`, `#!/user`, and so on:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: The `hashbang` was added so that the search engine bots can crawl and index
    single-page application. However, Google has deprecated this crawling strategy.
    Read about it here:  [https://webmasters.googleblog.com/2015/10/deprecating-our-ajax-crawling-scheme.html](https://webmasters.googleblog.com/2015/10/deprecating-our-ajax-crawling-scheme.html).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `<Router>` component in the `react-router` package provides a low-level
    implementation of the router interface. Various routers in `react-router-dom` and
    `react-router-native` use this low-level `<Router>` interface to provide routing
    features for the given environment. The `history` prop in `<Router>` is used to
    specify the `history` object for the given environment. For example, the `<BrowserRouter>`
    component uses `history/createBrowserHistory` to create a `history` object in
    the browser environment. All the Router components accept only one child, and
    it's usually the application's root component.
  prefs: []
  type: TYPE_NORMAL
- en: The `BrowserRouter` component in `react-router-dom` makes use of the HTML5 history
    API to keep the application's URL in sync with the browser's history. It accepts
    props—`basename`, `keyLength`, `forceRefresh`, and `getUserConfirmation`. The
    `<HashRouter>`, on the other hand, adds a hash (#) to the browser's URL and uses
    `window.location.hash` to track history. It accepts props `basename`, `getUserConfirmation`,
    and `hashType`. The `hashType` prop is used to specify the encoding method to
    use for `window.location.hash`; possible values are `slash`, `noslash`, and `hashbang`.
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 6](990cdd9a-efde-4922-a931-3f4db8421e13.xhtml), *Using StaticRouter
    in a Server-Side Rendered React Application*, we will take a look at server-side
    rendering with the `<StaticRouter>` component.
  prefs: []
  type: TYPE_NORMAL
