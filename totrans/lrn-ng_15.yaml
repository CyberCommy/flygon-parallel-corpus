- en: Webpack with Angular
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Webpack is a module bundler. It is able to bundle together different assets
    such as JavaScript, CSS, and HTML. The webpack is quite popular and is becoming
    the preferred way of setting up your app. In the world of frontend though, things
    come and go at a high rate. This makes it important to understand what problem
    needs solving, rather than the technical details of a specific bundler tool.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this appendix, you will:'
  prefs: []
  type: TYPE_NORMAL
- en: Discover the important concepts in webpack
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learn how to use webpack in a simple web project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Utilize webpack to set up an Angular project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Core concepts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Essentially, webpack tries to create a graph of dependencies by crawling all
    the import statements in your files. Imagine you have the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: In this case, it would deduce that `main.js` is dependent on `lib.js`, which
    is dependent on `otherlib.js`, thereby creating a chain of dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: The end result from crawling all the import statements and figuring out all
    dependencies is to produce a bundle that you can make part of your `index.html` and
    present to the browser for rendering.
  prefs: []
  type: TYPE_NORMAL
- en: Loaders
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The webpack needs a loader to understand a certain file extension and operate
    on it. By extension we mean `.ts`, `.js`, `.html`, and so on. Why do we care?
    When it comes to setup, we need to ensure that the proper loaders have been set
    up so that a certain file extension that we care about will be processed. In webpack,
    when you want to handle extensions you set up rules. A rule can look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The `test` property is a regex where you specify what file extensions to look
    for.
  prefs: []
  type: TYPE_NORMAL
- en: The `loader` property is where you specify the name of your loader. The webpack
    comes built-in with a lot of loaders, but it's also possible to download it, should
    you need it.
  prefs: []
  type: TYPE_NORMAL
- en: Plugins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A plugin can fire at different steps in the build process. This means you can
    carry out extra work at a certain step. To use a plugin, you specify it in the `plugins` property,
    like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Before we venture into an Angular webpack setup, let us first establish what
    we've learned so far. The webpack is able to deal with JavaScript, CSS, TypeScript,
    and more, and create bundles that we can include in our starter HTML file, usually
    called `index.html`. Furthermore, if configured through a `config` file, we can
    set up a number of rules. Each rule consists of a regular expression that will
    capture all files of a certain file ending and will point to a loader that will
    process the captured files. There are also things called plugins, which are able
    to give us further functionality at specific life cycle steps. It would, however,
    be nice if we put that knowledge into practice, so let's do that in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Webpack - first project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To prepare us properly for setting up an Angular project, let's first go through
    a simple project that showcases all the common scenarios that we will be using
    to set up Angular.
  prefs: []
  type: TYPE_NORMAL
- en: 'First off, we need to install webpack. This is accomplished by running the
    following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'After successful installation, it''s time to try it out. First off, let''s
    create a few files with the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'This will crawl all dependencies starting with `app.js` and create a `bundle.js` file
    from them. To use said `bundle.js`, add a script tag to `index.html` so it now
    looks as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'To see your app in a browser, you need a web server that can host your files.
    There are many small, lightweight web servers; Python comes with one, for example.
    I am going to recommend one called `http-server`. It can easily be installed by
    typing the following in the Terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'After it is installed, place yourself in the same directory as the `index.html` file
    and invoke the web server by typing the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Navigate to `http://localhost:5000` in your browser and open up `devtools`;
    the following should be displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Congratulations, you have successfully created your first webpack bundle and
    you have a working app.
  prefs: []
  type: TYPE_NORMAL
- en: Improving our project - using a configuration file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'It was nice and all to be able to create a bundle that easily, but it wasn''t
    really realistic. Most webpack projects will be using a `config` file instead
    of invoking webpack on the command line. So let''s do that: let''s create a `config`
    file called`Webpack.config.js` and add the following code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: This essentially recreates what we wrote on the command line, that is, start
    with `app.js` and ensure that the resulting bundle is called `bundle.js`.
  prefs: []
  type: TYPE_NORMAL
- en: Now type `webpack` on the command line.
  prefs: []
  type: TYPE_NORMAL
- en: Fire up your app again and ensure that everything still works. Success! We have
    moved from the command line to the config file.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, we don''t want to have to type `webpack` in the Terminal all the time.
    What we want is for the bundle to be rebuilt when we change something, so let''s
    add that functionality:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Note the extra property, `watch`.
  prefs: []
  type: TYPE_NORMAL
- en: Entering `webpack` in the Terminal at this point will now lead to the webpack
    process not actually quitting, like it did before, but still running and waiting
    for us to make a change.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s, as an example, change what the `app.js` does to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Save the file and note how the bundle is being rebuilt in the Terminal. That''s
    great, but we can do even better. We can add a web server that automatically launches
    and relaunches our app upon changes. I am talking about something called **hot
    reloading**. Essentially, a change is made to the code, the bundle is recreated,
    and the browser reflects said change. We need to do two things for this to happen:'
  prefs: []
  type: TYPE_NORMAL
- en: Install an HTTP server utility that works well with webpack
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enable hot reloading in the `config` file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To install the webpack HTTP server utility, we type the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s now update the `config` file to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Two things have been added. Here is the first:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the second:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'We have added a hot reload plugin. Fire up the app using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: This now leads to the web server listening for changes; it will rebuild the
    bundle if a change happens, and will display said change in the web browser.
  prefs: []
  type: TYPE_NORMAL
- en: Adding more capabilities to our project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are more interesting things we can do in a modern web app project. One
    such thing is to be able to use all the latest ES2015 features, as well as being
    able to split our bundle into more dedicated bundles, such as one for the application
    and one for third-party libraries. webpack supports both these things with ease.
  prefs: []
  type: TYPE_NORMAL
- en: Creating several bundles
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are multiple reasons why you would want several bundles for your application.
    It might be that you have several pages and you don't want each page to load a
    heavy bundle, but only the JavaScript that it needs. You might also want to separate
    third-party libraries from the app itself. Let's try to look at how we could create
    several bundles.
  prefs: []
  type: TYPE_NORMAL
- en: Our ideal scenario is that we want three different files, `app.js`, `init.js`,
    and `vendor.js`*:*
  prefs: []
  type: TYPE_NORMAL
- en: '`app.js`: This is where our application lives'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`init.js`: This should contain what the bundles have in common, that is, our
    webpack runtime'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`vendor.js`: This is where the third-party libraries we are dependent on live,
    such as `query` and `lodash`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To accomplish this, we need to change the configuration file to say the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s break that down:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: We used to have one entry here pointing to `app.js`. Now we want to have two
    entries, but for different things. Vendor points to an array of libraries. This
    means that when webpack sees `a:require('angular')`, it knows to place the `node_modules/angular` library
    in the `vendor.js`, that it will create.
  prefs: []
  type: TYPE_NORMAL
- en: 'The second piece of interest is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Here we are saying to take everything we have in common (the webpack runtime
    in this case) and place it in `init.js`.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up Angular with webpack
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Armed with knowledge of webpack''s core concepts and how to add extra capabilities, we
    should now feel ready to take on bootstrapping an Angular project. First off,
    create the following files:'
  prefs: []
  type: TYPE_NORMAL
- en: '`webpack`: When setting up webpack, it''s usually a good idea to set up your
    config to consist of the following three files:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`webpack.common.js`: This is where most of the configuration will happen'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`webpack.dev.js`: This is the `dev` environment-specific configuration'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`webpack.prod.js`: This is the `prod` environment-specific configuration'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`package.json`: This file will list what libraries we are dependent on for
    Angular to be properly bootstrapped. This is listed in `devDependencies` and `depedencies`.
    We will also list some commands in the script that allow us to fire up the application,
    so it can be run on a web server. We will furthermore create commands for testing
    and a command for creating a production bundle.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tsconfig.json`: This file is meant for the TypeScript compiler. It is worth
    noting that we want to enable certain functionalities for the app to work, such
    as `emitDecoratorMetadata` and `experimentalDecorators`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Common configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A brief overview of this file looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Entry`, the entry points of the application'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Module.rules`, an object that specifies how certain files should be loaded,
    with what loader'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Plugins`, an array of plugins that give us extra functionality during the
    life cycle of webpack'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `entry` session specifies that there will be three different bundles: `polyfills`, `vendor`,
    and `app`. Why these three bundles, you might ask? Well, to have a separate bundle
    for `polyfills`makes sense as it is a separate concept from the others. The `polyfills`bundle
    ensures our selected browser has all the latest features from ES2015\. The `vendor`bundle
    is where we place all the libraries that are considered helpers to our app, but
    not really the app itself. The `app` bundle is really where our app lives; it
    contains our business code.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code snippet shows what the configuration should look like to
    create the three previously-mentioned bundles:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: The `module` section defines a list of rules. Just as a reminder, rules are
    about processing certain file extensions. Every rule consists of a `test`property
    that defines what file extension to look for. It also consists of the `loader`property,
    which points to loaders capable of processing said file extensions. For example,
    if the file extension is `.sass`, the loader is capable of compiling the Sass
    into a CSS file.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code snippet exemplifies how a rule can be set up to handle HTML
    files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: We can see that a regular expression tests for the `.html` extension and lets `HTML-loader` handle
    it. The complete rules list for our project should set up rules for handling TypeScript,
    assets (images), CSS, and HTML. If we have all that, we are good to go.
  prefs: []
  type: TYPE_NORMAL
- en: 'We also need to enhance the building process by setting up some plugins, namely:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ContextReplacementPlugin`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CommonChunksPlugin`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`HTMLWebpackPlugin`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The job of `ContextReplacementPlugin` is to replace one context for another.
    But what does that even mean? The most common use case is using `require` statements
    that are dynamic, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'At compile time, webpack is unable to figure out what files to include. To
    ensure it will work at runtime, it includes everything in that directory. A common
    case is dealing with translation files. You might have hundreds of files in such
    a directory, and having all those files included will make the bundle unnecessarily
    big. So what you do is use said plugin and give it a filter parameter that narrows
    down the number of files, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'The `CommonChunksPlugin` is used when you are trying to create several bundle
    files, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'To avoid that, every single bundle contains the webpack runtime and other common
    parts; the mentioned plugin can be used to extract the common parts. There are
    many ways to call this plugin; here is one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: This will create an `init.js` file.
  prefs: []
  type: TYPE_NORMAL
- en: The webpack generates a lot of files, such as HTML and JavaScript files. You
    could link to all those files in your `index.html`, but that becomes quite cumbersome.
    A better way to handle this is to use `HTMLWebpackPlugin`, which will inject these `link` and `script` tags
    for you.
  prefs: []
  type: TYPE_NORMAL
- en: 'Without this plugin, your `index.html` would look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: You get the idea, using this plugin is pretty much a must, at least if you want
    to make sure to keep `index.html` in sync with your solution and avoid unnecessary
    typing by having to add/alter script tags.
  prefs: []
  type: TYPE_NORMAL
- en: 'What we need to do to make this plugin work is to point to where the `script` and `link` tags
    need to be injected, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: So far, we have covered what bundles are created, what rules need to be set
    up to handle all different file extensions, and lastly what plugins are needed.
    This is the core of the webpack setup. However, the configuration needs to differ
    a bit depending on whether we are dealing with a development environment or a
    production environment.
  prefs: []
  type: TYPE_NORMAL
- en: Dev configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The webpack treats your files differently in development mode from production
    mode. For one, your JavaScript files are all in-memory, that is, no files are
    actually written to the output directory, as specified here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'In development environments, we care about setting up source maps. Source maps
    remember what the file structure used to look like, before everything was concatenated
    into one or more bundles. It makes for easier debugging when the files resemble
    your project structure in your IDE. One way to set up source maps is to type the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Production configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In a production configuration, it''s important to set up minification by using
    the `UglifyJS` plugin. It''s important because we want our app to be as small
    as possible so it loads quickly. More of our users will probably be on a 3G connection,
    so we need to cater to all types of users:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Testing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Any developer worth their salt should care about writing tests. Testing is not
    that hard to set up.
  prefs: []
  type: TYPE_NORMAL
- en: 'We need the following file to make testing work:'
  prefs: []
  type: TYPE_NORMAL
- en: '`karma.conf.js`: We are using karma as a test runner. This needs a `config`
    file that sets up where to find the tests, whether to run our tests in a headless
    browser or a real one, and lots of other things.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The noteworthy `config` needed in this file is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: The preprocessing step is needed so that it compiles our TypeScript files into
    ES5 JavaScript. It will also set up proper source maps, as well as point out what
    files are needed from the Angular framework for our tests to run properly.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another property worth mentioning is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: This points to config specified in the `Webpack.test.js ` file.
  prefs: []
  type: TYPE_NORMAL
- en: '`webpack.test.js`: This is just a copy of `Webpack.common.js`, normal config.
    However, by making it into a separate file, we have the ability to override certain
    configs later should we wish to.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`karma-test-shim.js`: This file, as mentioned before, is responsible for importing
    all parts of the Angular framework that are needed to run, core parts of the framework,
    as well as dedicated parts related to testing. The full file looks as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'It is worth nothing the following line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'This defines what it looks for when trying to locate what tests to run. So,
    let''s create a test that matches this pattern, `test.spec.ts`, under the `src` directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'With all this set up correctly, you should be able to type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'This should start up the Chrome browser. You should see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/a4ff3e50-74d1-4a08-98b8-72c9a2009fdf.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Pressing the debug button will show the following screen, where it clearly
    indicates that it is running our test and the result, which is a passing test:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/63607909-e5c3-4b90-95fa-8db6252df8e4.png)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This appendix has described how webpack works in conjunction with Angular. Furthermore,
    we have explored the parts related to setting up an Angular application, and even
    how to set up unit tests, which is highly recommended to adapt early. Hopefully
    you feel empowered by this appendix, and are left with a feeling that the setup
    is not all that complicated. Oftentimes, setup for a project is a one-off, something
    you just do at the beginning of a project and barely touch afterwards. For brevity,
    a lot of configuration was not shown and we instead discussed how different configuration
    files worked together to make our setup work. However, if you want to study the
    configuration in detail, it is available at the following GitHub repository: [https://github.com/softchris/angular4-Webpack](https://github.com/softchris/angular4-webpack).
  prefs: []
  type: TYPE_NORMAL
