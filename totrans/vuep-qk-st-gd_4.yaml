- en: Creating a Site in VuePress
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [Chapter 3](490b74d6-1bb0-4194-9173-c04c98e2b1e9.xhtml), *VuePress Development
    – Preliminary Steps*, we learned the basics related to VuePress configuration
    and how to work with variables and functions. We learned about various values
    that we can tweak to personalize and set up our VuePress site.
  prefs: []
  type: TYPE_NORMAL
- en: Beyond that, in [Chapter 2](9d07fb55-5bf4-4719-a86e-56f62ba9796f.xhtml), *Getting
    Started with VuePress*, we already installed VuePress on our system. Depending
    on the requirements that we may face, we can choose to install VuePress either
    globally, or as a dependency within an existing package.
  prefs: []
  type: TYPE_NORMAL
- en: Irrespective of the method of installation, all that matters currently is that
    we should have a working installation of VuePress. Plus, now that we have mastered
    the capabilities of static site generators such as VuePress, and how to configure
    them, it is high time we started seeing things in action.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, therefore, we will be turning our attention toward a practical
    implementation of VuePress. In other words, we will be building an actual website
    using VuePress. This will help us better understand the workflow in VuePress and
    also give us a more thorough understanding of its underlying concepts.
  prefs: []
  type: TYPE_NORMAL
- en: So, without wasting any further time, let us get things rolling!
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, you will look at the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Building a site in VuePress
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to create Markdown files and run the VuePress dev engine
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to build and render static sites in VuePress
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An introduction to `.vuepress/config.js` files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building a site in VuePress
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is worth noting that at this stage, you should have a running instance of
    VuePress. If you have not yet installed VuePress, refer to [Chapter 2](9d07fb55-5bf4-4719-a86e-56f62ba9796f.xhtml), *Getting
    Started with VuePress*, of this book.
  prefs: []
  type: TYPE_NORMAL
- en: Furthermore, you will need to work with basic Markdown files in order to input
    content. Most web developers are well aware of Markdown, and a majority of them
    use it on a regular basis. If, by chance, you do not know what Markdown is, or
    are not comfortable working with it, refer to [Chapter 5](fc128d37-9c99-4f63-9a3d-95bdf66b4825.xhtml),
    *Using Markdown in VuePress*, of this book. That said, we will only be touching
    the surface of Markdown elements in this chapter, such as paragraphs, headings,
    and links. So, even a basic awareness about Markdown is more than sufficient for
    now.
  prefs: []
  type: TYPE_NORMAL
- en: Lastly, while we will actually build a site in this chapter, we will not be
    deploying it to a live server on the web. For the deployment details, we have
    set aside a separate chapter of its own. If you wish to deploy your project files
    as soon as you have built the site, refer to [Chapter 8](a159687e-1fb2-43ce-bbc3-494aed2906e2.xhtml),
    *Deploying VuePress to the Web*, of this book.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have got the introduction out of the way, it is time to start off
    with site development in VuePress!
  prefs: []
  type: TYPE_NORMAL
- en: What will we be building?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The big question is: what exactly are we looking to build?'
  prefs: []
  type: TYPE_NORMAL
- en: We will be creating a simple website using VuePress. For the sake of the example,
    let us assume that this given site is about coffee.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is how we intend to structure it:'
  prefs: []
  type: TYPE_NORMAL
- en: A home page, detailing what the site is about (and having a call-to-action button)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An about page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A sample page, about coffee itself
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Furthermore, our site will also have a navigation menu with links to all our
    pages, as well as an external link. In essence, we are looking to build a multi-page
    static site in VuePress, with a customized home page view.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example of what the final home page is supposed to look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/c9a66607-bc1e-4917-b633-1a7a0535ad3d.png)'
  prefs: []
  type: TYPE_IMG
- en: Creating a VuePress site
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have understood what we are trying to do, let us get started with
    building our site.
  prefs: []
  type: TYPE_NORMAL
- en: The README.md file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In VuePress, the `README.md` file acts as our home page. Naturally, this is
    where everything that goes in the index.html file should go.
  prefs: []
  type: TYPE_NORMAL
- en: We can edit this file in Markdown to include everything that we require. Beyond
    that, we can make use of YAML Front Matter syntax to specify custom options for
    the home page, such as locale, metadata related to SEO, and custom layout.
  prefs: []
  type: TYPE_NORMAL
- en: 'After we have installed VuePress, we can create a `README.md` file straight
    away by using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'This command will create a simple file in Markdown that contains the line Hello
    World! Here is how the output will look:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/551ae3e7-d7b5-4c1e-b312-d3d0dc2e3121.png)'
  prefs: []
  type: TYPE_IMG
- en: Obviously, this is not sufficient for our home page, is it? We will be building
    a custom home page shortly.
  prefs: []
  type: TYPE_NORMAL
- en: Starting the dev engine
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'At this point, it is a good idea to open a Terminal (or command line) and run
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'This will start the VuePress dev engine, which will appear like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/ee5f242c-6278-4a90-9bc5-cab24e6b09a3.png)'
  prefs: []
  type: TYPE_IMG
- en: Now we can open the provided URL, as shown in the above screenshot, in our web
    browser, and as we make changes to our file structure, the page will automatically be
    refreshed to showcase the live changes the minute they are saved. As long as the
    dev engine is running (that is, the Terminal is open), then we can view live changes
    as and when we save our content.
  prefs: []
  type: TYPE_NORMAL
- en: Be sure to run the `vuepress dev` command in the exact directory where you have
    installed VuePress. All files will be placed and created therein, including Markdown
    files, and any media elements, as well as any JS configuration files.
  prefs: []
  type: TYPE_NORMAL
- en: Building the home page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Remember the `README.md` file that we just created? Let us open it and edit
    it a little.
  prefs: []
  type: TYPE_NORMAL
- en: Any editor can be used to edit Markdown files. I personally just use the xed
    or gedit default text editors in Linux. You can also choose to use popular code
    editors for editing Markdown files.
  prefs: []
  type: TYPE_NORMAL
- en: We will be adding our front matter so as to generate a custom home page. We
    will be making use of YAML front matter. If you are not familiar with it, have
    no fear—we will be covering it in greater length in the next chapter itself, when
    we discuss Markdown.
  prefs: []
  type: TYPE_NORMAL
- en: Our home page should have a heading, followed by a call-to-action button to
    encourage our visitors to learn more about the product. Then, we will also add
    three separate sections to tell the world more about our offering. Lastly, we
    will add footer layout.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let us build the home page.
  prefs: []
  type: TYPE_NORMAL
- en: 'It is really vital to know that the VuePress default theme ships with its own
    home page layout. All we have to do is specify in the front matter that we wish
    to make use of the home page layout. To do that, we just need to enter the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we will add additional entries, such as our call-to-action button text
    and link, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Now we can save our file to preview the changes. Once again, be reminded that
    we are making changes to the `README.md` file that we just created.
  prefs: []
  type: TYPE_NORMAL
- en: As we can see in the following screenshot, a call-to-action button has been
    added that links to an *about* page (not yet created, so clicking on the button
    will show a 404 error).
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/4e0593f4-7cde-4304-b19e-c86543203743.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, we can add the remaining content to our front matter. The following is
    how the front matter should look now:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: We have added a features section to our home page. We have added three features,
    each with its own title and body content.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our home page, therefore, should become something like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/c5bad76e-fb41-41c2-998f-a9507214a166.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, all that is left to do is add the footer. We just need to specify a footer
    clause in our Front Matter, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: We have chosen the MIT License because VuePress also comes with this license.
    This, of course, depends entirely on you how you wish to license your content.
  prefs: []
  type: TYPE_NORMAL
- en: 'After adding the footer, our home page should look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/fcf4fa9d-5480-40e9-a309-8a2754710737.png)'
  prefs: []
  type: TYPE_IMG
- en: Adding metadata
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Once we have built the home page, we can add some metadata to the front matter
    too, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: In the preceeding snippet, we have added a meta description for our site, and
    also specified some keywords. Plus, we have told the engine and crawlers that
    our site is using US English.
  prefs: []
  type: TYPE_NORMAL
- en: 'At this point, our `README.md` file should look something like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/3af276f0-ad11-4568-938c-977704284048.png)'
  prefs: []
  type: TYPE_IMG
- en: It is noticeable that the entire file is composed solely of front matter. We
    will be learning about YAML front matter in detail in [Chapter 5](fc128d37-9c99-4f63-9a3d-95bdf66b4825.xhtml),
    *Using Markdown in VuePress*, as well as in [Chapter 6](905d5d93-1344-4d8c-aa47-5969daa6609f.xhtml),
    Theme Development in VuePress, when we discuss theme development.
  prefs: []
  type: TYPE_NORMAL
- en: For now, our home page is ready. We can optionally add any other content to
    this file in Markdown. Such content needs be added after the front matter, albeit
    it will be shown above the footer and below the home page hero content.
  prefs: []
  type: TYPE_NORMAL
- en: Adding other content pages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now our site needs additional pages to showcase further bits of content. Considering
    the fact that VuePress is a static site generator, we only need to add content
    accordingly and VuePress does the rest.
  prefs: []
  type: TYPE_NORMAL
- en: 'Yes, it is that simple!:'
  prefs: []
  type: TYPE_NORMAL
- en: We add our content as Markdown files
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: VuePress churns HTML files from those Markdown files, as long as the said files
    are in valid format
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: That is all. Because VuePress is still not a blogging or e-commerce engine,
    there are no custom taxonomies to be added, or likewise.
  prefs: []
  type: TYPE_NORMAL
- en: For our site, we will be adding two pages. The first one will be an *about*
    page, and the second one will be a page about coffee.
  prefs: []
  type: TYPE_NORMAL
- en: 'For our *about* page, we create an `about.md` file in the same directory as
    the `README.md` file. Then, we can populate our site with any content that we
    feel like. Here is the sample that we are using on our site:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/c6b20e73-e679-46f0-a087-3132460aa337.png)'
  prefs: []
  type: TYPE_IMG
- en: 'And this is what the output should show (be sure to run the `vuepress dev`
    command again, once you have added this file):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/35b9da51-5822-4988-b9d9-e0565c64c76f.png)'
  prefs: []
  type: TYPE_IMG
- en: To view the output, simply navigate the web browser to `/about.html`, based
    on the localhost address that the dev engine shows.
  prefs: []
  type: TYPE_NORMAL
- en: 'It is noticeable that VuePress takes care of a couple of things all by itself:'
  prefs: []
  type: TYPE_NORMAL
- en: Emoji are shown based on the GitHub emoji service.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More importantly, every H1, H2, H3, and other similar heading tags in Markdown
    are treated as anchor links in HTML. You can hover your cursor over any heading,
    and notice that there is an anchor link automatically generated for it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Along similar lines, we can add the `coffee.md` file as well. In fact, we can
    add as many pages as we feel like. All we need to do is to add the Markdown files
    and inform VuePress about the correct location.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the navigation menu
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At this stage, we have added all the pages and content to our site. We have
    also built a home page, and we can browse and preview everything in the web browser.
  prefs: []
  type: TYPE_NORMAL
- en: But it is obvious that we are simply entering the URL for every page in order
    to preview them. Real-world users will not be able to guess the file name. Therefore,
    our site cannot function in the absence of a navigation menu.
  prefs: []
  type: TYPE_NORMAL
- en: It is logical for us to to consider adding a navbar to our site. When we study
    theme development for VuePress in greater detail in [Chapter 6](905d5d93-1344-4d8c-aa47-5969daa6609f.xhtml),
    *Theme Development in VuePress*, we will touch every single aspect of navbar customization
    (including permanently disabling the navbar). But, for now, our priority is to
    showcase a functional and useful navbar so that our users can navigate through
    the site with ease.
  prefs: []
  type: TYPE_NORMAL
- en: The good thing is that VuePress supports navbar functionality out of the box.
    With that said, unless we explicitly add items to it, it will not be shown.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to create a navigation menu, we need to use the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code exports a navbar array for our theme configuration. Here,
    we are adding four links to the following pages:'
  prefs: []
  type: TYPE_NORMAL
- en: The home page, located at `/`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The about page, located at `/about`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The coffee page, located at `/coffee`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An external link to our GitHub repository for this book
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'It is noteworthy that all external links need to be entered in full, with the
    HTTP/HTTPS protocol at the start of the URL, as seen in this screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/bbdc5f3e-65f2-4286-ad46-92622140d817.png)'
  prefs: []
  type: TYPE_IMG
- en: We will need to add this code to our `config.js` file. This particular file
    is located in the `.vuepress` directory of our VuePress site (if, by chance, the
    file does not exist, feel free to create a blank file named `config.js` and then
    enter the preceding code therein). If we place this file outside of the `.vuepress`
    directory, things may not work as desired.
  prefs: []
  type: TYPE_NORMAL
- en: What is the `config.js` file?
  prefs: []
  type: TYPE_NORMAL
- en: In VuePress, the `config.js` file contains, as the name suggests, all the configuration-related
    code. This means any function or code that tweaks the VuePress configuration should
    be added to this file itself. In the absence of this file, VuePress will fall
    back to default configuration values.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once we save the config.js entries, we can refresh the output and the navbar
    will be added, as seen at the top of the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/e6eb3268-ebed-4f05-a1d8-377a58814bfd.png)'
  prefs: []
  type: TYPE_IMG
- en: You may notice that a search bar has been added too. But wait, we didn't actually
    add the search bar anywhere, did we?
  prefs: []
  type: TYPE_NORMAL
- en: Yes, that's right—VuePress comes with its own search bar functionality that
    does not need to be tinkered with. It is placed right next to the navigation menu.
    We can, however, extend or replace the default search method with an external
    search indexing service.
  prefs: []
  type: TYPE_NORMAL
- en: The search bar shows results right as we type; there is no need to refresh the
    page. This is the beauty of JavaScript; several other web development languages
    would have shown the results only after forcing a full page reload.
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/677e12c9-5d3c-4a43-b9d0-fd7b034b5d26.png)'
  prefs: []
  type: TYPE_IMG
- en: VuePress native search, unlike that of WordPress and other software, does not
    search within the content body. Instead, it searches just the headings for the
    entered term. This is why, in the preceding screenshot, we are just shown the
    `Coffee is awesome` page as the result, whereas the term `coffee` appears on the
    home page, as well as the *about* page too.
  prefs: []
  type: TYPE_NORMAL
- en: As a result, for a more powerful search experience, using an external service
    is often advisable. We will learn how to integrate this in [Chapter 6](905d5d93-1344-4d8c-aa47-5969daa6609f.xhtml),
    *Theme Development in VuePress*, of this book.
  prefs: []
  type: TYPE_NORMAL
- en: Final build
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now we have managed to build our complete site. We have added content as well
    as separate pages and even created a navigation menu.
  prefs: []
  type: TYPE_NORMAL
- en: So far, we used the `vuepress dev` command to run the dev engine and preview
    the site. Once we are sure we have built the site, we can safely (and literally)
    *build* it.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do so, we need to enter the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'This command will extract our site metadata and compile the info. It will then
    render static HTML pages based on the Markdown content, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/8602d2ef-e97a-4255-972b-a14502d14517.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The generated content is placed by default in the dist directory within the
    `.vuepress` directory. The general directory structure of our VuePress site, thus,
    is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/2894978d-8b61-404a-bef2-4a937ae403b1.png)'
  prefs: []
  type: TYPE_IMG
- en: It is worth pointing out that VuePress generates HTML files based on the Markdown
    files that we have created. It further places all media elements, JS files, and
    CSS files in the assets sub-directory at the `.vuepress/dist` path. The `/img`
    directory consists of images, whereas the `/js` sub-directory consists of, as
    the name suggests, JS files.
  prefs: []
  type: TYPE_NORMAL
- en: Beyond that, VuePress also creates a `404` file that is displayed in case of
    *page not found* errors. We can customize this file to suit our needs, or leave
    it as it is.
  prefs: []
  type: TYPE_NORMAL
- en: 'Fun fact: The final build of this example site, all zipped together, is approx
    68 KB. A similar site of three pages in a dynamic database-driven CMS, such as
    WordPress or Drupal, would have easily spanned 50+ MB.'
  prefs: []
  type: TYPE_NORMAL
- en: That's all! We have successfully built a VuePress site! Easy, wasn't it?
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned how to build a static site using VuePress. We learned
    about custom home page layout, adding a call-to-action button alongside other
    content, as well as additional pages.
  prefs: []
  type: TYPE_NORMAL
- en: Not just that—we even added a navigation menu to our site. Furthermore, we then
    learned about the role of `config.js` file. In the coming chapters, we will be
    learning additional customization-related tweaks. Most of such tweaks will be
    placed within the `config.js` file.
  prefs: []
  type: TYPE_NORMAL
- en: Lastly, we learned how to *build* a VuePress site using the `vuepress build`
    command. At this point, we have generated a static site using our own content.
  prefs: []
  type: TYPE_NORMAL
- en: You can find the raw code of this site, including all Markdown files, over at
    the book's GitHub repository, as a zipped file. You can also download the exported
    `build` files, including the static content, as another zipped file. The GitHub
    repository can be found at [https://github.com/packtpublishing/vuepress-quick-start-guide](https://github.com/packtpublishing/vuepress-quick-start-guide).
  prefs: []
  type: TYPE_NORMAL
- en: This particular site can now easily be deployed to any cloud hosting service
    of our choice. However, we shall turn toward deployment only in the final chapter
    of this book, wherein we will learn how to deploy our site to various hosting
    services, such as Heroku, Netlify, and Google Firebase!
  prefs: []
  type: TYPE_NORMAL
- en: For now, we will be digging deeper into Markdown so as to gain better command
    over content formatting and presentation. We will then be learning a bit about
    theme development to enable us to customize our website to be just the way we
    want it.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will turn our attention toward content editing in Markdown
    and how VuePress works with Markdown.
  prefs: []
  type: TYPE_NORMAL
