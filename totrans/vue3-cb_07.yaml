- en: Managing the Application State with Vuex
  prefs: []
  type: TYPE_NORMAL
- en: Transferring data between sibling components can be very easy, but imagine making
    a tree of components react to any data change. You will need to trigger an event
    in an event bus or send the event through all the parent components until it reaches
    over the top of the event chain and then gets sent all the way down to the desired
    component; this process can be very tedious and painful. If you are developing
    a large-scale application, this process is not sustainable.
  prefs: []
  type: TYPE_NORMAL
- en: Flux libraries were developed to help with this process, with the idea of bringing
    the reactivity outside of the component bounds, as Vuex is capable of maintaining
    one single source of truth of your data and, at the same time, is the place for
    you to have your business rules.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will learn how to use Vuex, develop our store, apply it
    to our components, and namespace it so we can have different modules of Vuex inside
    the same store.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we''ll cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a simple Vuex store
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating and understanding the Vuex state
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating and understanding the Vuex mutations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating and understanding the Vuex actions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating and understanding the Vuex getters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a dynamic component with Vuex
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding hot module reload for development
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a Vuex module
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will be using **Node.js** and **Vue-CLI**.
  prefs: []
  type: TYPE_NORMAL
- en: 'Attention, Windows users, you need to install an NPM package called `windows-build-tools`,
    to be able to install the following required packages. To do it, open PowerShell
    as administrator and execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '`> npm install -g windows-build-tools`'
  prefs: []
  type: TYPE_NORMAL
- en: 'To install Vue-CLI, you need to open Terminal (macOS or Linux) or Command Prompt/PowerShell (Windows)
    and execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Creating a simple Vuex store
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Creating a single source of truth in your application gives you the power to
    simplify the flow of your data, enabling the reactivity of the data to flow into
    another perspective, where you are not tied to a parent-child relationship anymore.
    The data can now be stored in a single place and everyone can fetch or request
    data.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to install the Vuex library and create our
    first single store, and how we can manipulate it with reactive actions and data
    getters.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The prerequisite for this recipe is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Node.js 12+
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Node.js global objects that are required are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`@vue/cli`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@vue/cli-service-global`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To create a Vue-CLI project, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to open Terminal (macOS or Linux) or the Command Prompt/PowerShell (Windows)
    and execute the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The CLI will ask some questions that will help with the creation of the project.
    You can use the arrow keys to navigate, the *Enter* key to continue, and the *Spacebar*
    to select an option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'There are two methods for starting a new project. The default method is a basic
    `babel` and `eslint` project without any plugin or configuration, and the `Manually`
    mode, where you can select more modes, plugins, linters, and options. We will
    go for `Manually`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we are asked about the features that we will want in the project. Those
    features are some Vue plugins such as Vuex or Router (`Vue-Router`), testers,
    linters, and more. Select `Babel`, `Router`**,** `Vuex`**,** and `Linter / Formatter`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Continue this process by selecting a linter and formatter. In our case, we
    will select the `ESLint + Airbnb` config:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'After the linting rules are set, we need to define when they are applied to
    your code. They can be either applied `on save` or fixed `on commit`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'After all those plugins, linters, and processors are defined, we need to choose
    where the settings and configs are stored. The best place to store them is on
    a dedicated file, but it is also possible to store them in the `package.json` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Now you can choose if you want to make this selection a preset for future projects,
    so you don''t need to reselect everything again:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Our recipe will be divided into two parts:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating the store
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating the reactive component with Vuex
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's get started.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the store
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now you have the project with the Vuex library, and we need to create our first
    store. In the following steps, we will create the Vuex store:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `index.js` from the `src/store` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `state` property, add a new key called `counter` and set the value to
    `0`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `mutations` property, add two new functions, `increment` and `decrement`.
    Both of the functions will have a `state` argument, which is the current Vuex
    `state` object. The `increment` function will increment the `counter` by `1` and
    the `decrement` function will decrement the `counter` by `1`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, in the `actions` property, add two new functions, `increment` and `decrement`.
    Both of the functions will have a deconstructed argument, `commit`, which is a
    function to call the Vuex mutation. In each function, we will execute the `commit`
    function, passing as a parameter the name of the current function as a string:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Creating the reactive component with Vuex
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now that you have your Vuex store defined, you need to interact with it. We
    will create a reactive component that will display the current state `counter`
    on the screen, and show two buttons, one for incrementing the `counter`, and another
    for decrementing the `counter`.
  prefs: []
  type: TYPE_NORMAL
- en: Single file component <script> section
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Here we are going to write the `<script>` section of the single file component:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `App.vue` file from the `src` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create the `<script>` section in the file, with an `export default` object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'In the newly created object, add the Vue `computed` property with a property
    called `counter`. In this property we need to return the current `$store.state.counter`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, create a Vue `methods` property with two functions, `increment` and
    `decrement`. Both of the functions will execute a `$store.dispatch` with a parameter
    being the function name as a string:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Single file component <template> section
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let''s code the `<template>` section of the single file component:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `App.vue` file in the `src` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the `<template>` section, remove everything inside the `div#app`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create an `h1` HTML element with the counter variable inside of it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a button with an event listener on the `@click` directive that calls
    the `increment` function, and have `+` as a label:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a button with an event listener on the `@click` directive that calls
    the `decrement` function, and `-` as a label:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'To run the server and see your component, you need to open Terminal (macOS
    or Linux) or Command Prompt/PowerShell (Windows) and execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is your component rendered and running:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/0846f103-aada-46b7-a0a2-92e7481f19b5.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When you declare your Vuex store, you need to create three main properties,
    `state`, `mutations`, and `actions`. Those properties act as a single structure,
    bounded to the Vue application through the `$store` injected prototype or the
    exported `store` variable.
  prefs: []
  type: TYPE_NORMAL
- en: A `state` is a centralized object that holds your information and makes it available
    to be used by the `mutation`, `actions,` or the components. Changing the `state`
    always requires a synchronous function executed through a `mutation`.
  prefs: []
  type: TYPE_NORMAL
- en: A `mutation` is a synchronous function that can change the `state` and is traceable,
    so when developing, you can time travel through all the executed `mutations` in
    the Vuex store.
  prefs: []
  type: TYPE_NORMAL
- en: An `action` is an asynchronous function, which can be used to hold business
    logic, API calls, dispatch other `actions`, and execute `mutations`. Those functions
    are the common entrance point of any change in a Vuex store.
  prefs: []
  type: TYPE_NORMAL
- en: 'A simple representation of a Vuex store can be seen in this chart:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/20737403-4144-48e7-9ee0-6b70a4df9851.png)'
  prefs: []
  type: TYPE_IMG
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can find more information about Vuex at [https://vuex.vuejs.org/](https://vuex.vuejs.org/).
  prefs: []
  type: TYPE_NORMAL
- en: Creating and understanding the Vuex state
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Vuex state can seem straightforward to understand. However, as the data
    gets more in-depth and nested, its complexity and maintainability can get more
    complicated.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to create a Vuex state that can be used in
    the scenarios of both a **Progressive Web Application (PWA)**/ **Single Page Application
    (SPA)** and a **Server Side Rendering (SSR)**, without any problems.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The prerequisite for this recipe is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Node.js 12+
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Node.js global objects that are required are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`@vue/cli`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@vue/cli-service-global`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To start our component, we will use the Vue project with Vue-CLI that we used
    in the '*Lazy Loading your pages asynchronously*' recipe in [Chapter 6](369b473f-d58b-49e7-b675-047ef354d4ce.xhtml),
    *Managing Routes with vue-router*, or we can start a new one.
  prefs: []
  type: TYPE_NORMAL
- en: 'To start a new one, open Terminal (macOS or Linux) or Command Prompt/PowerShell (Windows)
    and execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Choose the manual features, add `Router` and `Vuex` as required features, as
    indicated in the '*How to do it...*' section of the '*C**reating a simple Vuex
    store*' recipe.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our recipe will be divided into two parts:'
  prefs: []
  type: TYPE_NORMAL
- en: Adding Vuex via the `vue ui`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating the `Vuex` state
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's get started.
  prefs: []
  type: TYPE_NORMAL
- en: Adding Vuex via the vue ui
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When importing an old project that was created via the Vue-CLI, it is possible
    to automatically add Vuex through the `vue ui` interface without any effort at
    all. We will learn how to add the Vuex library to the old project, so we can continue
    developing the recipe.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following steps, we will add the Vuex with the `vue ui` interface:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the project folder, open the `vue ui` by executing the following command on
    Terminal (macOS or Linux) or Command Prompt/PowerShell (Windows):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Select the correct project that you are working on. In the right sidebar, click
    on the Plugins menu icon:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/9795f7d3-5585-42ff-b0d1-8d4ea162b369.png)'
  prefs: []
  type: TYPE_IMG
- en: 'On the plugins page, on the top bar, click on the Add vuex button. This will
    trigger a pop-up modal, then click on the **Continue** button to finish the installation
    of Vuex on the application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/1494d414-1e39-402d-b8aa-1de4b5fca347.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Adding the Vuex to our application will change the structure of the application.
    First, we will notice that there is a new folder called `store` in the `src` folder,
    and in the `main.js` file, it was added to the imports and the injection of the
    `store` in the Vue application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Creating the Vuex state
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In order to save the data inside of Vuex, you need to have an initial state
    that is loaded with the application and defined as the default one when the user
    enters your application. Here, we are going to learn how to create the Vuex state
    and use it as a singleton, so that Vuex can be used in an SPA and an SSR page:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we will create a Vuex store that can be used in an SSR and an SPA:'
  prefs: []
  type: TYPE_NORMAL
- en: In the `src/store` folder, create a new folder called `user`, and inside this
    folder create a new file named `state.js`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new `generateState` function. This function will return a JavaScript
    object, with three main properties, `data`, `loading`, and `error`. The `data`
    property will be a JavaScript object, with a property called `usersList` defined
    as an empty array as default, and a property called `userData` with the default
    object of a user. The `loading` property will be a boolean, set to `false` by
    default, and `error` will have a default value initializing to `null`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'After creating the function, we will create an `export default` object at the
    end of the file, which will be a JavaScript object, and we will destruct the return
    of the `generateState` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Create a new file named `index.js` in the `user` folder and open it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the newly created `state`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'At the end of the file, create an `export default` file as a JavaScript object.
    In this object, we will add the imported `state`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Open the `index.js` file from the `src/store` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the `index.js` file from the `user` folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `export default` function, which creates a new Vuex store, we will remove
    all the properties inside of it,  and put the imported `UserStore` deconstructed
    object inside the `Vuex.Store` parameter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When using the `vue ui` to add Vuex as a plugin, the `vue ui` will automatically
    add the required files, and import everything that is needed. This is the initial
    phase of the creation of a Vuex `store`.
  prefs: []
  type: TYPE_NORMAL
- en: First is the creation of an exclusive file for managing the `state` that we
    can use to separate, from the `store`, the process of how the state begins and
    how it can be initialized.
  prefs: []
  type: TYPE_NORMAL
- en: In this case of this `state`, we used a function to generate a completely new
    `state` every time it's called. This is a good practice, because in an SSR environment,
    the `state` of the server will always be the same, and we need to create a new
    `state` for each new connection.
  prefs: []
  type: TYPE_NORMAL
- en: After the creation of the `state`, we needed to create the default file for
    exporting the Vuex files that will be created in the `user` folder. This file
    is a simple import of all the files that will be created in the folder, `state`,
    `actions`, `mutation`, and `getters`. After the import, we export an object with
    the name of the required Vuex properties, `state`, `actions`, `mutations`, and `getters`.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, in the Vuex `store`, we import the file that aggregates everything
    and deconstructs it into our store to initialize it.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `Vuex` state is a single source of truth in your application, it works like
    a global data manager, and it should not be changed directly. This is because
    we need to prevent the mutation of data with a concurrent mutation of the same
    data. To avoid that, we always need to change our state through the mutations,
    because the functions are synchronous and controlled by Vuex.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Find more information about the Vuex state at [https://vuex.vuejs.org/guide/state.html](https://vuex.vuejs.org/guide/state.html).
  prefs: []
  type: TYPE_NORMAL
- en: Creating and understanding the Vuex mutations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When there is a change in Vuex, we need a way to execute this change in asynchronous
    form and keep track of it so it won't execute over another change before the first
    change finishes.
  prefs: []
  type: TYPE_NORMAL
- en: For this case, we need the mutations, which are functions that are only responsible
    for changing the state of your application.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to create Vuex mutations and the best practices
    by which to do it.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The prerequisite for this recipe is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Node.js 12+
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Node.js global objects that are required are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`@vue/cli`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@vue/cli-service-global`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To start our component, we will use the Vue project with Vue-CLI that we used
    in the '*Creating and understanding the Vuex state*' recipe, or we can start a
    new one.
  prefs: []
  type: TYPE_NORMAL
- en: 'To start a new one, open Terminal (macOS or Linux) or Command Prompt/PowerShell (Windows)
    and execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Choose the manual features, add `Router` and `Vuex` as required features, as
    indicated in the '*How to do it...*' section of the '*Creating a simple Vuex store*' recipe.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we create a Vuex mutation and base type for the mutations:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new file called `types.js` in the `user` folder inside the `src/store`
    folder, and open it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In this file, we will create an `export default` JavaScript object, with a
    group of keys that will be the names of our mutations. Those keys will be `LOADING`,
    `ERROR`, `SET_USER_LIST`, `SET_USER_DATA`, `UPDATE_USER`, and `REMOVE_USER`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Create a new file called `mutations.js` in the `user` folder, and open it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the newly created `types.js` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new function called `setLoading`, which will receive the Vuex `state` as
    an argument and will define the loading property of the state to `true` when executed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new function called `setError`, which will receive the Vuex `state` as
    an argument and `payload`. This function will set the `loading` property of the
    `state` to `false`, and the `error` property to the received `payload` argument:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new function called `setUserList`, which will receive the Vuex `state` and `payload` as
    an argument. This function will define the `usersList` property of the `state.data` to the
    received `payload` argument, set the `loading` property of the `state` to `false`,
    and the `error` property to `null`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new function called `setUserData`, which will receive the Vuex `state` and
    `payload` as arguments. This function will define the `userData` property of the `state.data` to the
    received `payload` argument, set the `loading` property of the `state` to `false`,
    and the `error` property to `null`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new function called `updateUser`, which will receive the Vuex `state` and `payload`
    as an argument. This function will update the user data in the `usersList` property
    of the `state.data`, define the `loading` property of the `state` to `false`,
    and the `error` property to `null`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new function called `removeUser`, which will receive the Vuex `state` and `payload` as
    an argument. This function will remove the user data from the `usersList` property
    of the `state.data`, define the `loading` property of the `state` to `false`,
    and the `error` property to `null`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, create an `export default` object, with the keys being the types we
    created in the `types.js` file, and define each of the keys to the functions we
    created:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Open the `index.js` file in the `user` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the newly created `mutations.js` file, and add it to the `export default`
    JavaScript object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Each `mutation` is a function that will be called as a `commit`, and will have
    an *identifier* in the Vuex store. This identifier is the `mutation` key in the
    exported JavaScript object. In this recipe, we created a file that holds all the
    identifiers as an object value so that it can be used as a constant inside our
    code.
  prefs: []
  type: TYPE_NORMAL
- en: This pattern helps us in the development of Vuex `actions`, which need to know
    each `mutation` name.
  prefs: []
  type: TYPE_NORMAL
- en: When exporting the `mutation` JavaScript object, we use the constant as the
    key and the corresponding function as its value, so the Vuex store can execute
    the correct function when called.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Find more information about Vuex mutations at [https://vuex.vuejs.org/guide/mutations.html](https://vuex.vuejs.org/guide/mutations.html).
  prefs: []
  type: TYPE_NORMAL
- en: Creating and understanding the Vuex getters
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Accessing data from `Vuex` can be done through the state itself, which can be
    very dangerous, or via the getters. The getters are like data that can be preprocessed
    and delivered without touching or messing with the Vuex store state.
  prefs: []
  type: TYPE_NORMAL
- en: The whole idea behind getters is the possibility to write custom functions that
    can extract data from your state in a single place when you need it, so that you
    get just the data you need.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to create a Vuex getter and a dynamic getter
    that can be used as a high-order function.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The prerequisite for this recipe is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Node.js 12+
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Node.js global objects that are required are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`@vue/cli`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@vue/cli-service-global`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To start our component, we will use the Vue project with Vue-CLI that we used
    in the 'Creating and understanding the Vuex mutations' recipe, or we can start
    a new one.
  prefs: []
  type: TYPE_NORMAL
- en: 'To start a new one, open Terminal (macOS or Linux) or Command Prompt/PowerShell (Windows)
    and execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Choose the manual features, and add Router and `Vuex` as needed features, as
    indicated in the 'How to do it...' section of the 'Creating a simple Vuex store' recipe.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following steps, we will create the Vuex getters:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new file called `getters.js` in the `src/store/user` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new function called `getUsersList`, and return the `state.data.usersList`
    property:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: In a `getter` function, the first argument that the function will receive will
    be always the current `state` of the Vuex `store`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new function called `getUserData`, and return the `state.data.userData` property:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new function called `getUserById`, and return another function that
    receives `userId` as an argument. This returning function will return the result
    of a search of `state.data.usersList` that matches the same `id` as the `userId`
    received:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new function called `isLoading`,  and return the `state.loading` property:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new function called `hasError`, and return the `state.error` property:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, create an `export default` JavaScript object, with all the created
    functions as properties:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: Open the `index.js` file in the `src/store/user` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the newly created `getters.js` file, and add it to the export default
    JavaScript object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Getters are like a GET function from an object and are static cached functions
    – they only change the returned value when the `state` has changed. But if you
    add the return as a high-order function, you can give it more power to use a more
    sophisticated algorithm and provide specific data.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this recipe, we created two types of getters: the most basic, with simple
    data return, and the high-order function, which needs to be called as a function
    to retrieve the value you want.'
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Using getters with business logic is a good way to gather more data on the state.
    This is a good pattern because, on larger projects, it helps other developers
    to understand more what is going on in each of the GET functions and how it works
    behind the curtain.
  prefs: []
  type: TYPE_NORMAL
- en: You always need to remember that getters are synchronous functions and reactive
    to the state change, so the data on the getters is memoized and cached until the
    single source of truth receives a commit and changes it.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can find more information about Vuex getters at [https://vuex.vuejs.org/guide/getters.html](https://vuex.vuejs.org/guide/getters.html).
  prefs: []
  type: TYPE_NORMAL
- en: Creating and understanding the Vuex actions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You have all your state ready, your dataset, and now you need to fetch new data from
    an outside source or change this data inside your application. Here comes the
    part where actions do their job.
  prefs: []
  type: TYPE_NORMAL
- en: Actions are responsible for orchestrating the process in this communication
    between the application and the outside world. Controlling when the data need
    to be mutated on the state and returned to the caller of the action.
  prefs: []
  type: TYPE_NORMAL
- en: Usually, the action is a dispatch through a component or a view, but there are
    some occasions where actions can dispatch another action to create a chain of
    actions in your application.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to create the actions needed in our application
    to define a user's list, update a user, and remove a user.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The prerequisite for this recipe is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Node.js 12+
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Node.js global objects that are required are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`@vue/cli`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@vue/cli-service-global`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To start our component, we will use the Vue project with Vue-CLI that we used
    in the '*Creating and understanding the Vuex getters*' recipe, or we can start
    a new one.
  prefs: []
  type: TYPE_NORMAL
- en: 'To start a new one, open Terminal (macOS or Linux) or Command Prompt/PowerShell (Windows)
    and execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: Choose the manual features, and add `Router` and `Vuex` as required features,
    as indicated in the '*How to do it...* section of the '*Creating a simple Vuex
    store*' recipe.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now follow these steps to create the Vuex actions:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new file called `actions.js` in the `src/store/user` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the mutation types files (`types.js`), and the `getHttp`, `patchHttp`,
    `postHttp`, and `deleteHttp` functions from the `fetchApi` wrapper:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new `asynchronous` function called `createUser`, which receives as
    the first argument a deconstructed JavaScript object, with the `commit` property, and
    `userData` as the second argument, which will be used to create the user. Add
    a `try/catch` statement, in the `try` context. First, we execute `commit(MT.LOADING)`,
    then we fetch the users lists from the API, and finally, `commit(MT.SET_USER_DATA,
    data)`, passing the users lists to be mutated. If we receive an exception and
    get into the `Catch` statement, we will execute `commit(MT.ERROR, error)`, passing
    the error that we receive to the `state`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new `asynchronous` function called `fetchUsersList`, which receives
    as the first argument a deconstructed JavaScript object, with the `commit` property. Add
    a `try/catch` statement in the `try` context. We execute `commit(MT.LOADING)`,
    then we fetch the users lists from the API, and finally, `commit(MT.SET_USER_LIST,
    data)`, passing the users lists to be mutated. If we receive an exception and
    get into the `catch` statement, we will execute a mutation of `commit(MT.ERROR,
    error)`, passing the error that we receive to the `state`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new `asynchronous` function called `fetchUsersData`, which receives
    as the first argument a deconstructed JavaScript object, with the `commit` property, and
    the second argument the `userId` that will be fetched. Add a `try/catch` statement,
    in the `try` context. We execute `commit(MT.LOADING)`, then we fetch the users
    lists from the API, and finally, `commit(MT.SET_USER_DATA, data)`, passing the
    users lists to be mutated. If we receive an exception and get into the `catch` statement,
    we will execute a mutation of `commit(MT.ERROR, error)`, passing the error that
    we receive to the `state`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new `asynchronous` function called `updateUser`, which receives as
    the first argument a deconstructed JavaScript object, with the `commit` property, and `payload`
    as the second argument. Add a `try/catch` statement, in the `try` context. We
    execute `commit(MT.LOADING)`, then we patch the user data to the API and finally `commit(MT.UPDATE_USER,
    payload)`, passing the user new data to be mutated. If we receive an exception
    and get into the `catch` statement, we will execute a mutation of `commit(MT.ERROR,
    error)`, passing the error that we received to the `state`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new `asynchronous` function called `removeUser`, which receives as
    the first argument a deconstructed JavaScript object, with the `commit` property,
    and `userId` as the second argument. Add a `try/catch` statement, in the `try` context.
    We execute `commit(MT.LOADING)`, then we delete the user data from the API and
    finally, `commit(MT.REMOVE_USER, userId)`, passing the `userId` to be used in
    the mutation. If we receive an exception and get into the `Catch` statement, we
    will execute a mutation of `commit(MT.ERROR, error)`, passing the error that we
    receive to the `state`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we will create an export default JavaScript object, with all the created
    functions as properties:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'Import the newly created `actions.js` file in the `index.js` in the `src/store/user`
    folder, and add it to the `export default` JavaScript object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Actions are the initializers of all the Vuex life cycle changes. When dispatched,
    the action can execute a mutation commit, or another action dispatch, or even
    an API call to the server.
  prefs: []
  type: TYPE_NORMAL
- en: In our case, we took our API calls and put it inside the actions, so when the
    asynchronous function returns, we can execute the commit and set the state to
    the result of the function.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Find more information about Vuex actions at [https://vuex.vuejs.org/guide/actions.html](https://vuex.vuejs.org/guide/actions.html).
  prefs: []
  type: TYPE_NORMAL
- en: Creating a dynamic component with Vuex
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Combining Vuex with Vue components, it's possible to employ the reactivity between
    multiple components without the need for direct parent-child communication, and
    split the responsibilities of the components.
  prefs: []
  type: TYPE_NORMAL
- en: Using this method allows the developer to enhance the scale of the application,
    where there is no need to store the state of the data inside the components itself,
    but using a single source of truth as a store for the whole application.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will use the last recipes to improve an application, where
    it was using parent-child communication and making it as a single source of truth
    available in the whole application.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The prerequisite for this recipe is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Node.js 12+
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Node.js global objects that are required are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`@vue/cli`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@vue/cli-service-global`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To create our dynamic component, we will transform the components from stateful
    to stateless, and will extract some parts that can be made into new components
    as well.
  prefs: []
  type: TYPE_NORMAL
- en: We will use the Vue project with Vue-CLI that we used in the '*Creating and
    understanding the Vuex actions*' recipe, or we can start a new one.
  prefs: []
  type: TYPE_NORMAL
- en: 'To start a new one, open Terminal (macOS or Linux) or Command Prompt/PowerShell (Windows)
    and execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: Choose the manual features, and add `Router` and `Vuex` as required features,
    as indicated in the '*How to do it...*' section of the '*Creating a simple Vuex
    store*' recipe.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our recipe will be divided into five parts:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating the user list component
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Editing the user list page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Editing the user view page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Editing the user view page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Editing the user create page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's get started.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the user list component
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Because Vuex gives us the ability to have a single source of truth on our application,
    we can create a new component for our application that will handle the user listing
    and triggers the Vuex action that fetches the users list from the server. This
    component can be stateless and execute the `Vuex` actions by itself.
  prefs: []
  type: TYPE_NORMAL
- en: Single file component <script> section
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let''s code the `<script>` section of the single file component:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new file called `userList.vue` in the `src/components` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the `changeRouterMixin` from the `src/mixin` folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'Create an `export default` JavaScript object, and add a new Vue property called
    `mixin`, with a default value of an array. To this array, add the imported `changeRouteMixin`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new Vue property called `computed`. In this property, create a new
    value called `userList`. This property will be a function returning the Vuex store
    getter `getUsersList`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: Single file component <template> section
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Here, we are going to code the `<template>` section of the single file component:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `List.vue` file from the `users` folder inside the `views` folder and
    copy the content and component from the `VsTable` component.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `userList.vue` file from the `src/components` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Paste the content you''d copied from the `List.vue` file inside the `<template>`
    section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: Editing the user list page
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now that we have extracted the user list into a new component, we need to import
    this component and remove the old VsTable that was cluttering our view.
  prefs: []
  type: TYPE_NORMAL
- en: Single file component <script> section
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In this step, we are going to write the `<script>` section of the single file
    component:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `List.vue` file in the `users` folder inside the `views` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the newly created Users List component, from the `components` folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `export default` JavaScript object, add a new property called `components`.
    Declare the property as a JavaScript object, and add the imported `UserTableList`
    component to the object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `methods` property, at the `getAllUsers` function, we need to change
    the content to execute a Vuex dispatch when called. This method will perform the
    `fetchUsersList` Vuex action:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, in the `deleteUser` function, we need to change the content to execute
    a Vuex dispatch when called. This method will perform the `removeUser` Vuex action,
    passing the `userId` as the argument:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: Single file component <template> section
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let''s code the `<template>` section of the single file component:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `List.vue` file in the `users` folder inside the `view` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Replace the `VsTable` component and its contents with the newly imported `UserTableList`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: Editing the user view page
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now we can add the Vuex to the user view page. We will add the Vuex actions
    and getters to manipulate the data, and extract from the page the responsibility
    of managing it.
  prefs: []
  type: TYPE_NORMAL
- en: Single file component <script> section
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Now you are going to create the `<script>` section of the single file component:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `View.vue` file from the `users` folder inside the `view` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Remove the Vue `data` property.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Inside the Vue `computed` property, add the `userData`, returning a Vuex getter, `getUserData`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, in the `getUserById` method, change the content to dispatch a Vuex
    action, `fetchUserData`, passing the computed `userId` property as a parameter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: Single file component <template> section
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'It''s time to write the `<template>` section of the single file component:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `View.vue` file in the `users` folder inside the `view` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the UserForm component, change the `v-model` directive to a `:value` directive:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: When using a read-only value, or you need to remove the syntactic sugar of the
    `v-model` directive, you can declare the input value as a `:value` directive and
    the value change event to an `@input` event listener.
  prefs: []
  type: TYPE_NORMAL
- en: Editing the user edit page
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We need to edit our user. In the last recipe, we used a stateful page and executed
    everything within the page. We will transform the state into a temporary state,
    and execute the API calls on the Vuex actions.
  prefs: []
  type: TYPE_NORMAL
- en: Single file component <script> section
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Here, we are going to create the `<script>` section of the single file component:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `Edit.vue` file in the `users` folder inside the `view` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the Vue `data` property, change the name of the data from `userData` to
    `tmpUserData`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: 'In the Vue `computed` property, add a new property called `userData`, which
    will return the Vuex getter `getUserData`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: 'Add a new Vue property named `watch`, and add a new property, `userData`, which
    will be a JavaScript object. In this object, add three properties, `handler`,
    `immediate`, and `deep`. The `handler` property will be a function that receives
    an argument called `newData`, which will set `tmpUserData` to this argument. The
    `immediate` and `deep` properties are both boolean properties set to `true`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: 'In the Vue `methods` property, we need to change the contents of `getUserById` to
    dispatch a Vuex action named `fetchUserData`, passing the `computed` property
    `userId` as a parameter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `updateUser` method, change the content to dispatch a Vuex action named `updateUser`,
    passing `tmpUserData` as a parameter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: Single file component <template> section
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In this part, we are going to write the `<template>` section of the single
    file component:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `Edit.vue` in the `users` folder inside the `view` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Change the target of the `v-model` directive of the `UserForm` component to
    `tmpUserData`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: Editing the user create page
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For the user create page, the changes will be minimal, as it only executes an
    API call. We need to add the Vuex action dispatch.
  prefs: []
  type: TYPE_NORMAL
- en: Single file component <script> section
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Here, we are going to create the `<script>` section of the single file component:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `Create.vue` file in the `users` folder inside the `view` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Change the content of the `createUser` method to dispatch a Vuex action named
    `createUser`, passing `userData` as the parameter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In all four pages, we made changes that removed the business logic or API calls
    from the page to the Vuex store and tried making it less responsible for maintaining
    the data.
  prefs: []
  type: TYPE_NORMAL
- en: Because of that, we could place a piece of code into a new component that can
    be placed anywhere in our application, and will show the current users lists without
    any limitations from the container that is instantiating it.
  prefs: []
  type: TYPE_NORMAL
- en: This pattern helps us in the development of more prominent applications, where
    there is a need for components that are less business-oriented and more focused
    on their tasks.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can find more information about Vuex application structures at [https://vuex.vuejs.org/guide/structure.html](https://vuex.vuejs.org/guide/structure.html).
  prefs: []
  type: TYPE_NORMAL
- en: Adding hot-module-reload for development
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The **hot-module-reload** (**HMR**) is a technique used for the faster development
    of the application, where you don't need to refresh the whole page to get the
    new code you have just changed on the editor. The HMR will change and refresh
    only the part that were updated by you on the editor.
  prefs: []
  type: TYPE_NORMAL
- en: In all the Vue-CLI projects or Vue-based frameworks, such as Quasar Framework,
    the HMR is present in the presentation of the application. So each time you change
    any file that is a Vue component and it's rendered, the application will replace
    the old code for the new one on the fly.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to add HMR to a Vuex store and be able to
    change the Vuex store without the need to refresh our entire application.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The prerequisite for this recipe is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Node.js 12+
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Node.js global objects that are required are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`@vue/cli`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@vue/cli-service-global`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To start our component, we will use the Vue project with Vue-CLI that we used
    in the '*Creating a dynamic component with Vuex*' recipe, or we can start a new
    one.
  prefs: []
  type: TYPE_NORMAL
- en: 'To start a new one, open Terminal (macOS or Linux) or Command Prompt/PowerShell (Windows)
    and execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: Choose the manual features, add `Router` and `Vuex` as required features, as
    indicated in the '*How to do it...*' section of the '*Creating a simple Vuex store*' recipe.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following steps, we will add HMR to Vuex:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `index.js` file in the `src/store` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Transform the `export default` into a constant called `store`, and make it
    exportable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: 'Check if the webpack `hot-module-reload` plugin is active:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new constant called `hmr`, which is an array containing the direction
    to the `index.js`, `getters.js`, `actions.js`, and `mutations.js` files of the
    `user` folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new function called `reloadCallback`. In this function, create three
    constants, `getters`, `actions`, and `mutations`. Each constant will point to
    the equivalent file inside the `user` folder, and call the `store.hotUpdate` function,
    passing an object as an argument with the values for the constants you created:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: Because of the Babel output of the files, you need to add the `.default` in
    the end of the files that you are dynamically importing with the webpack `require`
    function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Execute the webpack HMR `accept` function, passing as the first argument the
    `hmr` constant and `reloadCallback` as the second argument:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, default export the created `store`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Vuex store supports HMR with the API of the webpack HMR plugin.
  prefs: []
  type: TYPE_NORMAL
- en: When it's available, we create a list of possible files that can be updated,
    so that webpack can be aware of any updates to those files. When any of those
    files are updated, a special callback that you created is executed. This callback
    is the one that enables Vuex to update or change the behavior of the updated file
    entirely.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can find more information about Vuex hot reloading at [https://vuex.vuejs.org/guide/hot-reload.html](https://vuex.vuejs.org/guide/hot-reload.html).
  prefs: []
  type: TYPE_NORMAL
- en: You can find more information about webpack HMR at [https://webpack.js.org/guides/hot-module-replacement/](https://webpack.js.org/guides/hot-module-replacement/).
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Vuex module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As our application grows, working in a single object can be very risky. The
    maintainability of the project and the risks that it can generate on every change
    get worse each time.
  prefs: []
  type: TYPE_NORMAL
- en: Vuex has an approach called modules that helps us to separate our store into
    different branches of stores. These branches, or modules, have on each one of
    them a different set of state, mutation, getter, and action. This pattern helps
    with development and cuts the risk of adding new features to the application.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to create a module and how to work with it,
    separating it into dedicated branches.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The prerequisite for this recipe is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Node.js 12+
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Node.js global objects that are required are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`@vue/cli`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@vue/cli-service-global`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To start our component, we will use the Vue project with Vue-CLI that we used
    in the '*Creating a dynamic component with Vuex*' recipe, or we can start a new
    one.
  prefs: []
  type: TYPE_NORMAL
- en: 'To start a new one, open Terminal (macOS or Linux) or Command Prompt/PowerShell (Windows)
    and execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: Choose the manual features and add `Router` and `Vuex` as required features,
    as indicated in the '*How to do it...*' section of the '*Creating a simple Vuex
    store*' recipe.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our recipe will be divided into two parts:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating the new authentication module
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding modules to Vuex
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's get started.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the new authentication module
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To start, we need to create a new `Vuex` module. This example module will be
    called `authentication`, and will store the credentials data for the user.
  prefs: []
  type: TYPE_NORMAL
- en: 'In these steps, we will create the `authentication` module for `Vuex`:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new folder called `authentication` in the `src/store` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In this newly created folder, create a new file called `state.js`, and open
    it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a function called `generateState` that will return a JavaScript object
    with the properties of `data.username`, `data.token`, `data.expiresAt`, `loading`,
    and `error`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: 'Create an `export default` object at the end of the file. This object will
    be a JavaScript object. We will destruct the return of the `generateState` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: Create a new file called `index.js` in the `authentication` folder inside the
    `src/store` folder, and open it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the newly created `state.js` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: 'Create an `export default` object at the end of the file. This object will
    be a JavaScript object. Add a new property called `namespaced` with the value
    set to `true`, and add the imported `state`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: Adding the modules to Vuex
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now that we've created our modules, we will add them to the Vuex store. We can
    integrate the new modules with our old code. This is not a problem because Vuex
    will handle the new module as a namespaced object, with a completely separate
    Vuex store.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now in these steps, we will add the created modules to the Vuex:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `index.js` file in the `src/store` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the `index.js` file from the `authentication` folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `Vuex.Store` function, add a new property called `modules`, which is
    a JavaScript object. Then add the imported `User` and `Authentication` modules:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Modules work like separate Vuex stores but in the same Vuex single source of
    truth. This helps in the development of larger-scale applications because you
    can maintain and work with a more complex structure without the need to check
    for problems in the same file.
  prefs: []
  type: TYPE_NORMAL
- en: In the meantime, it's possible to work with modules and the plain Vuex store,
    migrating from legacy applications so you don't have to re-write everything from
    the ground up to be able to use the module structure.
  prefs: []
  type: TYPE_NORMAL
- en: In our case, we added a new module named `authentication` with just a state
    present in the store, and continued with the old user Vuex store, so that in the
    future we can refactor the user store into a new module and separate it off into
    a more specific, domain-driven architecture.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can find more information about Vuex modules at [https://vuex.vuejs.org/guide/modules.html](https://vuex.vuejs.org/guide/modules.html).
  prefs: []
  type: TYPE_NORMAL
