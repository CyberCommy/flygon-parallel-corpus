- en: Chapter 7. Members Inheritance and Polymorphism
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will learn about one of the most exciting features of object-oriented
    programming in Java 9: polymorphism. We will code many classes and then we will
    work with their instances in JShell to understand how objects can take many different
    forms. We will:'
  prefs: []
  type: TYPE_NORMAL
- en: Create concrete classes that inherit from abstract superclasses
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Work with instances of subclasses
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understand polymorphism
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Control whether subclasses can or cannot override members
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Control whether classes can be subclassed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use methods that perform operations with instances of different subclasses
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating concrete classes that inherit from abstract superclasses
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the previous chapter, we created an abstract base class named `VirtualAnimal`
    and then we coded the following three abstract subclasses: `VirtualMammal`, `VirtualDomesticMammal`,
    and `VirtualHorse`. Now, we will code the following three concrete classes. Each
    class represents a different horse breed and is a subclass of the `VirtualHorse`
    abstract class.'
  prefs: []
  type: TYPE_NORMAL
- en: '`AmericanQuarterHorse`: This class represents a virtual horse that belongs
    to the American Quarter Horse breed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ShireHorse`: This class represents a virtual horse that belongs to the Shire
    Horse breed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Thoroughbred`: This class represents a virtual horse that belongs to the Thoroughbred
    breed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The three concrete classes will implement the following three abstract methods
    they inherited from abstract superclasses:'
  prefs: []
  type: TYPE_NORMAL
- en: '`String getAsciiArt()`: This abstract method is inherited from the `VirtualAnimal`
    abstract class.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`String getBaby()`: This abstract method is inherited from the `VirtualAnimal`
    abstract class.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`String getBreed()`: This abstract method is inherited from the `VirtualHorse`
    abstract class.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following UML diagram shows the members for the three concrete classes
    that we will code: `AmericanQuarterHorse`, `ShireHorse`, and `Thoroughbred`. We
    don''t use bold text format for the three methods that each of these concrete
    classes will declare because they aren''t overriding the methods; they are implementing
    the abstract methods that the classes inherited.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating concrete classes that inherit from abstract superclasses](img/00068.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: First, we will create the `AmericanQuarterHorse` concrete class. The following
    lines show the code for this class in Java 9\. Notice that there is no `abstract`
    keyword before `class`, and therefore, our class must make sure that it implements
    all the inherited abstract methods. The code file for the sample is included in
    the `java_9_oop_chapter_07_01` folder, in the `example07_01.java` file.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Now we will create the `ShireHorse` concrete class. The following lines show
    the code for this class in Java 9\. The code file for the sample is included in
    the `java_9_oop_chapter_07_01` folder, in the `example07_01.java` file.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Finally, we will create the `Thoroughbred` concrete class. The following lines
    show the code for this class in Java 9\. The code file for the sample is included
    in the `java_9_oop_chapter_07_01` folder, in the `example07_01.java` file.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: As it happened in the other subclasses that we coded, we have more than one
    constructor defined for the three concrete classes. The first constructor that
    requires four arguments uses the `super` keyword to call the constructor from
    the base class or superclass, that is, the constructor defined in the `VirtualHorse`
    class. After the constructor defined in the superclass finishes its execution,
    the code prints a message indicating that an instance of each specific concrete
    class has been created. The constructor defined in each class prints a different
    message.
  prefs: []
  type: TYPE_NORMAL
- en: The second constructor uses the `this` keyword to call the previously explained
    constructor with the received arguments and with `false` as the value for the
    `isPregnant` argument.
  prefs: []
  type: TYPE_NORMAL
- en: Each class returns a different `String` in the implementation of the `getBaby`
    and `getBreed` methods. In addition, each class returns a different ASCII art
    representation for a virtual horse in the implementation of the `getAsciiArt`
    method.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding polymorphism
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We can use the same method, that is, a method with the same name and arguments,
    to cause different things to happen according to the class on which we invoke
    the method. In object-oriented programming, this feature is known as **polymorphism**.
    Polymorphism is the ability of an object to take on many forms, and we will see
    it in action by working with instances of the previously coded concrete classes.
  prefs: []
  type: TYPE_NORMAL
- en: The following lines create a new instance of the `AmericanQuarterHorse` class
    named `american` and use one of its constructors that doesn't require the `isPregnant`
    argument. The code file for the sample is included in the `java_9_oop_chapter_07_01`
    folder, in the `example07_01.java` file.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The following lines show the messages that the different constructors displayed
    in JShell after we entered the previous code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The constructor defined in the `AmericanQuarterHorse` calls the constructor
    from its superclass, that is, the `VirtualHorse` class. Remember that each constructor
    calls its superclass constructor and prints a message indicating that an instance
    of the class is created. We don't have five different instances; we just have
    one instance that calls the chained constructors of five different classes to
    perform all the necessary initialization to create an instance of `AmericanQuarterHorse`.
  prefs: []
  type: TYPE_NORMAL
- en: If we execute the following lines in JShell, all of them will display `true`
    as a result, because `american` belongs to the `VirtualAnimal`, `VirtualMammal`,
    `VirtualDomesticMammal`, `VirtualHorse`, and `AmericanQuarterHorse` classes. The
    code file for the sample is included in the `java_9_oop_chapter_07_01` folder,
    in the `example07_01.java` file.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The results of the previous lines mean that the instance of the `AmericanQuarterHorse`
    class, whose reference is saved in the `american` variable of type `AmericanQuarterHorse`,
    can take on the form of an instance of any of the following classes:'
  prefs: []
  type: TYPE_NORMAL
- en: '`VirtualAnimal`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`VirtualMammal`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`VirtualDomesticMammal`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`VirtualHorse`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`AmericanQuarterHorse`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following screenshot shows the results of executing the previous lines
    in JShell:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Understanding polymorphism](img/00069.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'We coded the `printBreed` method within the `VirtualHorse` class, and we didn''t
    override this method in any of the subclasses. The following is the code for the
    `printBreed` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The code prints the `String` returned by the `getBreed` method, declared in
    the same class as an abstract method. The three concrete classes that inherit
    from `VirtualHorse` implemented the `getBreed` method and each of them returns
    a different `String`. When we called the `american.printBreed` method, JShell
    displayed `American Quarter Horse`.
  prefs: []
  type: TYPE_NORMAL
- en: The following lines create an instance of the `ShireHorse` class named `zelda`.
    Note that, in this case, we use the constructor that requires the `isPregnant`
    argument. As happened when we created an instance of the `AmericanQuarterHorse`
    class, JShell will display a message for each constructor that is executed as
    a result of the chained constructors we coded. The code file for the sample is
    included in the `java_9_oop_chapter_07_01` folder, in the `example07_01.java`
    file.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The next lines call the `printAverageNumberOfBabies` and `printAsciiArt` instance
    methods for `american`, the instance of `AmericanQuarterHorse`, and `zelda`, which
    is the instance of `ShireHorse`. The code file for the sample is included in the
    `java_9_oop_chapter_07_01` folder, in the `example07_01.java` file.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: We coded the `printAverageNumberOfBabies` and `printAsciiArt` methods in the
    `VirtualAnimal` class, and we didn't override them in any of its subclasses. Hence,
    when we call these methods for either `american` or `Zelda`, Java will execute
    the code defined in the `VirtualAnimal` class.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `printAverageNumberOfBabies` method uses the `int` value returned by `getAverageNumberOfBabies`
    and the `String` returned by the `getBaby` method to generate a `String` that
    represents the average number of babies for a virtual animal. The `VirtualHorse`
    class implemented the inherited `getAverageNumberOfBabies` abstract method with
    code that returns `1`. The `AmericanQuarterHorse` and `ShireHorse` classes implemented
    the inherited `getBaby` abstract method with code that returns a `String` that
    represents a baby for the virtual horse breed: `"AQH baby"` and `"ShireHorse baby"`.
    Thus, our call to the `printAverageNumberOfBabies` method will produce different
    results in each instance because they belong to a different class.'
  prefs: []
  type: TYPE_NORMAL
- en: The `printAsciiArt` method uses the `String` returned by the `getAsciiArt` method
    to print the ASCII art that represents a virtual horse. The `AmericanQuarterHorse`
    and `ShireHorse` classes implemented the inherited `getAsciiArt` abstract method
    with code that returns a `String` with the ASCII art that is appropriate for each
    virtual horse that the class represents. Thus, our call to the `printAsciiArt`
    method will produce different results in each instance because they belong to
    a different class.
  prefs: []
  type: TYPE_NORMAL
- en: The following screenshot shows the results of executing the previous lines in
    JShell. Both instances run the same code for the two methods that were coded in
    the `VirtualAnimal` abstract class. However, each class provided a different implementation
    for the methods that end up being called to generate the result and cause the
    differences in the output.
  prefs: []
  type: TYPE_NORMAL
- en: '![Understanding polymorphism](img/00070.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The following lines create an instance of the `Thoroughbred` class named `willow`,
    and then call its `printAsciiArt` method. As happened before, JShell will display
    a message for each constructor that is executed as a result of the chained constructors
    we coded. The code file for the sample is included in the `java_9_oop_chapter_07_01`
    folder, in the `example07_01.java` file.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The following screenshot shows the results of executing the previous lines in
    JShell. The new instance is from a class that provides a different implementation
    of the `getAsciiArt` method, and therefore, we will see different ASCII art from
    what we saw in the previous two calls to the same method for the other instances.
  prefs: []
  type: TYPE_NORMAL
- en: '![Understanding polymorphism](img/00071.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The following lines call the `neigh` method for the instance named `willow`
    with a different number of arguments. This way, we take advantage of the `neigh`
    method that we overloaded four times with different arguments. Remember that we
    coded the four `neigh` methods in the `VirtualHorse` class and the `Thoroughbred`
    class inherits the overloaded methods from this superclass through its hierarchy
    tree. The code file for the sample is included in the `java_9_oop_chapter_07_01`
    folder, in the `example07_01.java` file.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the results of calling the `neigh` and `nicker`
    methods with the different arguments in JShell:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Understanding polymorphism](img/00072.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: We called the four versions of the `neigh` method defined in the `VirtualHorse`
    class for the `Thoroughbred` instance named `willow`. The third and fourth lines
    that call the `neigh` method specify a value for the `otherDomesticMammal` argument
    of type `VirtualDomesticMammal`. The third line specifies `american` as the value
    for `otherDomesticMammal` and the fourth line specifies `zelda` as the value for
    the same argument. Both the `AmericanQuarterHorse` and `ShireHorse` concrete classes
    are subclasses of `VirtualHorse`, and `VirtualHorse` is a subclass of `VirtualDomesticMammal`.
    Hence, we can use `american` and `zelda` as arguments where a `VirtualDomesticMammal`
    instance is required.
  prefs: []
  type: TYPE_NORMAL
- en: Then, we called the four versions of the `nicker` method defined in the `VirtualHorse`
    class for the `AmericanQuarterHorse` instance named `american`. The third and
    fourth lines that call the `nicker` method specify `willow` as the value for the
    `otherDomesticMammal` argument of type `VirtualDomesticMammal`. The `Thoroughbred`
    concrete class is also a subclass of `VirtualHorse`, and `VirtualHorse` is a subclass
    or `VirtualDomesticMammal`. Hence, we can use `willow` as an argument where a
    `VirtualDomesticMammal` instance is required.
  prefs: []
  type: TYPE_NORMAL
- en: Controlling overridability of members in subclasses
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will code the `VirtualDomesticCat` abstract class and its concrete subclass:
    `MaineCoon`. Then, we will code the `VirtualBird` abstract class, its `VirtualDomesticBird`
    abstract subclass, and the `Cockatiel` concrete subclass. Finally, we will code
    the `VirtualDomesticRabbit` concrete class. While coding these classes, we will
    use Java 9 features that allow us to decide whether the subclasses can or cannot
    override specific members.'
  prefs: []
  type: TYPE_NORMAL
- en: 'All the virtual domestic cats must be able to talk, and therefore, we will
    override the `talk` method inherited from `VirtualDomesticMammal` to print the
    word that represents a cat meowing: `"Meow"`. We also want to provide a method
    to print `"Meow"` a specific number of times. Hence, at this point, we realize
    that we can take advantage of the `printSoundInWords` method we declared in the
    `VirtualHorse` class.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We cannot access this instance method in the `VirtualDomesticCat` abstract
    class because it doesn''t inherit from `VirtualHorse`. Thus, we will move this
    method from the `VirtualHorse` class to its superclass: `VirtualDomesticMammal`.'
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We will use the `final` keyword before the return type for the methods that
    we don't want to be overridden in subclasses. When a method is marked as a final
    method, the subclasses cannot override the method and the Java 9 compiler shows
    an error if they try to do so.
  prefs: []
  type: TYPE_NORMAL
- en: Not all the birds are able to fly in real-life. However, all our virtual birds
    are able to fly, and therefore, we will implement the inherited `isAbleToFly`
    abstract method as a final method that returns `true`. This way, we make sure
    that all the classes that inherit from the `VirtualBird` abstract class will always
    run this code for the `isAbleToFly` method and that they won't be able to override
    it.
  prefs: []
  type: TYPE_NORMAL
- en: The following UML diagram shows the members for the new abstract and concrete
    classes that we will code. In addition, the diagram shows the `printSoundInWords`
    method moved from the `VirtualHorse` abstract class to the `VirtualDomesticMammal`
    abstract class.
  prefs: []
  type: TYPE_NORMAL
- en: '![Controlling overridability of members in subclasses](img/00073.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: First, we will create a new version of the `VirtualDomesticMammal` abstract
    class. We will add the `printSoundInWords` method that we have in the `VirtualHorse`
    abstract class and we will use the `final` keyword to indicate that we don't want
    to allow subclasses to override this method. The following lines show the new
    code for the `VirtualDomesticMammal` class. The code file for the sample is included
    in the `java_9_oop_chapter_07_01` folder, in the `example07_02.java` file.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'After we enter the previous lines, JShell will display the following messages:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: JShell indicates us that the `VirtualHorse` class and its subclasses cannot
    be referenced until we correct an error for this class. The class declares the
    `printSoundInWords` method and overrides the recently added method with the same
    name and arguments in the `VirtualDomesticMammal` class. We used the `final` keyword
    in the new declaration to make sure that any subclass cannot override it, and
    therefore, the Java compiler generates the error message that JShell displays.
  prefs: []
  type: TYPE_NORMAL
- en: Now, we will create a new version of the `VirtualHorse` abstract class. The
    following lines show the new version that removes the `printSoundInWords` method
    and uses the `final` keyword to make sure that many methods cannot be overridden
    by any of the subclasses. The declarations that use the `final` keyword to avoid
    the methods to be overridden are highlighted in the next lines. The code file
    for the sample is included in the `java_9_oop_chapter_07_01` folder, in the `example07_02.java`
    file.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'After we enter the previous lines, JShell will display the following messages:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: We replaced the definition for the `VirtualHorse` class and the subclasses were
    also updated. It is important to know that the variables we declared in JShell
    that held references to instances of subclasses of `VirtualHorse` were set to
    null.
  prefs: []
  type: TYPE_NORMAL
- en: Controlling subclassing of classes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `final` keyword has one additional usage. We can use `final` as a modifier
    before the `class` keyword in the class declaration to indicate Java that we want
    to generate a **final class**, that is, a class that cannot be extended or subclassed.
    Java 9 won't allow us to create a subclass for a final class.
  prefs: []
  type: TYPE_NORMAL
- en: Now, we will create the `VirtualDomesticCat` abstract class and then we will
    declare a concrete subclass named `MaineCoon` as a final class. This way, we will
    make sure that nobody will be able to create a subclass of `MaineCoon`. The following
    lines show the code for the `VirtualDomesticCat` abstract class. The code file
    for the sample is included in the `java_9_oop_chapter_07_01` folder, in the `example07_02.java`
    file.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: The `VirtualDomesticCat` abstract class implements many of the abstract methods
    inherited from the `VirtualDomesticMammal` superclass as final methods, and overrides
    the `talk` method with a final method. Thus, we won't be able to create a subclass
    of `VirtualDomesticCat` that overrides the `isAbleToFly` method to return `true`.
    We won't have virtual cats that will be able to fly.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following lines show the code for the `MaineCoon` concrete class that inherits
    from `VirtualDomesticCat`. We declare `MaineCoon` as a final class and it overrides
    the inherited `getAverageNumberOfBabies` method to return `6`. In addition, the
    final class implements the following inherited abstract methods: `getBaby` and
    `getAsciiArt`. The code file for the sample is included in the `java_9_oop_chapter_07_01`
    folder, in the `example07_02.java` file.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We didn't mark any method as `final` because all the methods in a final class
    are implicitly final.
  prefs: []
  type: TYPE_NORMAL
- en: However, when we run Java code outside of JShell, the final class will be created
    and we won't be able to subclass it.
  prefs: []
  type: TYPE_NORMAL
- en: Now, we will create the `VirtualBird` abstract class that inherits from `VirtualAnimal`.
    The following lines show the code for the `VirtualBird` abstract class. The code
    file for the sample is included in the `java_9_oop_chapter_07_01` folder, in the
    `example07_02.java` file.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: The `VirtualBird` abstract class inherits the members from the previously declared
    `VirtualAnimal` abstract class and adds a new `String` mutable field named `feathersColor`.
    The new abstract class declares a constructor that requires initial values for
    `age` and `feathersColor` to create an instance of the class. The constructor
    uses the `super` keyword to call the constructor from the base class or superclass,
    that is, the constructor defined in the `VirtualAnimal` class that requires the
    `age` argument. After the constructor defined in the superclass finishes its execution,
    the code sets the value for the `feathersColor` mutable field and prints a message
    indicating that a virtual bird has been created.
  prefs: []
  type: TYPE_NORMAL
- en: The `VirtualBird` abstract class implements the inherited `isAbleToFly` method
    as a final method that returns `true`. We want to make sure that all the virtual
    birds in our application domain are able to fly.
  prefs: []
  type: TYPE_NORMAL
- en: Now, we will create the `VirtualDomesticBird` abstract class that inherits from
    `VirtualBird`. The following lines show the code for the `VirtualDomesticBird`
    abstract class. The code file for the sample is included in the `java_9_oop_chapter_07_01`
    folder, in the `example07_02.java` file.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: The `VirtualDomesticBird` abstract class inherits the members from the previously
    declared `VirtualBird` abstract class and adds a new `String` immutable field
    called `name`. The new abstract class declares a constructor that requires initial
    values for `age`, `feathersColor`, and `name` to create an instance of the class.
    The constructor uses the `super` keyword to call the constructor from the superclass,
    that is, the constructor defined in the `VirtualBird` class that requires the
    `age` and `feathersColor` arguments. After the constructor defined in the superclass
    finishes its execution, the code sets the value for the `name` immutable field
    and prints a message indicating that a virtual domestic bird has been created.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following lines show the code for the `Cockatiel` concrete class that inherits
    from `VirtualDomesticBird`. We declare `Cockatiel` as a final class and it implements
    the following inherited abstract methods: `isRideable`, `isHerbivore`, `isCarnivore`,
    `getAverageNumberOfBabies`, `getBaby`, and `getAsciiArt`. As previously explained,
    all the methods in a final class are implicitly final. The code file for the sample
    is included in the `java_9_oop_chapter_07_01` folder, in the `example07_02.java`
    file.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'The following lines show the code for the `VirtualDomesticRabbit` concrete
    class that inherits from `VirtualDomesticMammal`. We declare `VirtualDomesticRabbit`
    as a final class because we don''t want additional subclasses. We will just have
    one type of virtual domestic rabbit in our application domain. The final class
    implements the following inherited abstract methods: `isAbleToFly`, `isRideable`,
    `isHerbivore`, `isCarnivore`, `getAverageNumberOfBabies`, `getBaby`, and `getAsciiArt`.
    The code file for the sample is included in the `java_9_oop_chapter_07_01` folder,
    in the `example07_02.java` file.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: JShell ignores the `final` modifier, and therefore, a class declared with the
    `final` modifier will allow subclasses in JShell.
  prefs: []
  type: TYPE_NORMAL
- en: Creating methods that work with instances of different subclasses
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'After we declare all the new classes, we will create the following two methods
    that receive a `VirtualAnimal` instance as an argument, that is, a `VirtualAnimal`
    instance or an instance of any subclass of `VirtualAnimal`. Each method calls
    a different instance method defined in the `VirtualAnimal` class: `printAverageNumberOfBabies`
    and `printAsciiArg`. The code file for the sample is included in the `java_9_oop_chapter_07_01`
    folder, in the `example07_02.java` file.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Then the following lines create instances of the next classes: `Cockatiel`,
    `VirtualDomesticRabbit`, and `MaineCoon`. The code file for the sample is included
    in the `java_9_oop_chapter_07_01` folder, in the `example07_02.java` file.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: The following screenshot shows the results of executing the previous lines in
    JShell. We will see the messages that the different constructors displayed in
    JShell after we enter the code to create each instance. These messages will allow
    us to easily understand all the chained constructors that were called when Java
    created each instance.
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating methods that work with instances of different subclasses](img/00074.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Then the following lines call the `printBabies` and `printAsciiArt` methods
    with the previously created instances as arguments. The code file for the sample
    is included in the `java_9_oop_chapter_07_01` folder, in the `example07_02.java`
    file.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'The three instances become a `VirtualAnimal` argument for the different methods,
    that is, they take the form of a `VirtualAnimal` instance. However, the values
    used for the fields and the methods aren''t those declared in the `VirtualAnimal`
    class. The call to the `printAverageNumberOfBabies` and `printAsciiArt` instance
    methods take into account all the members declared in the subclasses because each
    instance is an instance of a subclass of `VirtualAnimal`:'
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `printBabies` and `printAsciiArt` methods that receive a `VirtualAnimal`
    instance as an argument can only access the members defined in the `VirtualAnimal`
    class for the instances that they receive as arguments because the argument type
    is `VirtualAnimal`. We can unwrap the `Cockatiel`, `VirtualDomesticRabbit`, and
    `MaineCoon` instances that are received in the `animal` argument if necessary.
    However, we will work with these scenarios later as we cover more advanced topics.
  prefs: []
  type: TYPE_NORMAL
- en: The following screenshot shows the results of executing the previous lines for
    the `Cockatiel` instance named `tweety` in JShell.
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating methods that work with instances of different subclasses](img/00075.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The following screenshot shows the results of executing the previous lines for
    the `VirtualDomesticRabbit` instance named `bunny` in JShell.
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating methods that work with instances of different subclasses](img/00076.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The following screenshot shows the results of executing the previous lines for
    the `MaineCoon` instance named `garfield` in JShell.
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating methods that work with instances of different subclasses](img/00077.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Now we will create another method that receives a `VirtualDomesticMammal` instance
    as an argument, that is, a `VirtualDomesticMammal` instance or an instance of
    any subclass of `VirtualDomesticMammal`. The following function calls the `talk`
    instance method defined in the `VirtualDomesticMammal` class. The code file for
    the sample is included in the `java_9_oop_chapter_07_01` folder, in the `example07_02.java`
    file.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, the following two lines call the `makeItTalk` method with the `VirtualDomesticRabbit`
    and `MaineCoon` instances as arguments: `bunny` and `garfield`. The code file
    for the sample is included in the `java_9_oop_chapter_07_01` folder, in the `example07_02.java`
    file.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'The call to the same method for a `VirtualDomesticMammal` instance received
    as an argument produces different results. The `VirtualDomesticRabbit` didn''t
    override the inherited `talk` method while the `MaineCoon` class inherited the
    `talk` method overridden in the `VirtualDomesticCat` abstract class to make domestic
    cat meow. The following screenshot shows the results of the two method calls in
    JShell:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating methods that work with instances of different subclasses](img/00078.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The `VirtualAnimal` abstract class declared two instance methods that allow
    us to determine whether a virtual animal is younger or older than an other virtual
    animal: `isYoungerThan` and `isOlderThan`. These two methods receive a `VirtualAnimal`
    argument and return the results of applying an operator between the `age` value
    for the instance and the `age` value of the received instance.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following lines call the `printAge` method for the three instances: `tweety`,
    `bunny`, and `garfield`. This method was declared in the `VirtualAnimal` class.
    Then, the next lines call the `isOlderThan` and `isYoungerThan` methods with these
    instances as arguments to display the results of comparing the age of the different
    instances. The code file for the sample is included in the `java_9_oop_chapter_07_01`
    folder, in the `example07_02.java` file.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the results of executing the previous lines
    in JShell:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating methods that work with instances of different subclasses](img/00079.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Test your knowledge
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Which of the following lines declares an instance method that cannot be overridden
    in any subclass:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`public void talk(): final {`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`public final void talk() {`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`public notOverrideable void talk() {`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We have an abstract superclass named `Shape`. The `Circle` class is a subclass
    of `Shape` and is a concrete class. If we create an instance of `Circle` named
    `circle`, this instance will also be:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: An instance of `Shape`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A subclass of `Circle`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: An abstract superclass of `Circle`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In UML diagrams, class names that use italic text format indicate that they
    are:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Concrete classes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Classes that override at least one member inherited from its superclass.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Abstract classes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Which of the following lines declares a class that cannot be subclassed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`public final class Dog extends VirtualAnimal {`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`public final class Dog subclasses VirtualAnimal {`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`public final Dog subclasses VirtualAnimal {`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Which of the following lines declares a concrete class named `Circle` that
    can be subclassed and whose superclass is the `Shape` abstract class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`public final class Shape extends Circle {`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`public class Shape extends Circle {`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`public concrete class Shape extends Circle {`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we created many abstract and concrete classes. We learned to
    control whether subclasses can or cannot override members, and whether classes
    can be subclassed.
  prefs: []
  type: TYPE_NORMAL
- en: We worked with instances of many subclasses and we understood that objects can
    take many forms. We worked with many instances and their methods in JShell to
    understand how the classes and the methods that we coded are executed. We used
    methods that performed operations with instances of different classes that had
    a common superclass.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have learned about members inheritance and polymorphism, we are
    ready to use contract programming with interfaces in Java 9, which is the topic
    we are going to discuss in the next chapter.
  prefs: []
  type: TYPE_NORMAL
