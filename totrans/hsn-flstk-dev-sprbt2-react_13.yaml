- en: Securing Your Application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter explains how to implement authentication to our frontend when we
    are using JWT authentication in the backend. At the beginning, we switch on security
    to our backend to enable JWT authentication. Then, we create a component for the
    login functionality. Finally, we modify our CRUD functionalities to send the token
    in the request's `Authorization` header to the backend.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will look at the following:'
  prefs: []
  type: TYPE_NORMAL
- en: How to create a login functionality on our frontend
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to implement conditional rendering after authentication
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is needed for CRUD functionalities when the JWT authentication is enabled
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to show messages when authentication fails
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Spring Boot application that we created in [Chapter 4](936ad378-25d8-43c4-9e7f-b1cb9bc373cf.xhtml), *Securing
    and Testing Your Backend*, (GitHub: [https://github.com/PacktPublishing/Hands-On-Full-Stack-Development-with-Spring-Boot-2.0-and-React/tree/master/Chapter%204](https://github.com/PacktPublishing/Hands-On-Full-Stack-Development-with-Spring-Boot-2.0-and-React/tree/master/Chapter%204)).
  prefs: []
  type: TYPE_NORMAL
- en: The React app that we used in the previous chapter (GitHub: [https://github.com/PacktPublishing/Hands-On-Full-Stack-Development-with-Spring-Boot-2.0-and-React/tree/master/Chapter%2011](https://github.com/PacktPublishing/Hands-On-Full-Stack-Development-with-Spring-Boot-2.0-and-React/tree/master/Chapter%2011)).
  prefs: []
  type: TYPE_NORMAL
- en: Securing the backend
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We have implemented CRUD functionalities to our frontend using an unsecured
    backend. Now, it is time to switch on security again for our backend and go back
    to the version that we created in [Chapter 4](936ad378-25d8-43c4-9e7f-b1cb9bc373cf.xhtml),
    *Securing and Testing Your Backend*:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open your backend project with the Eclipse IDE and open the `SecurityConfig.java`
    file in the editor view. We commented the security out and allowed everyone access
    to all endpoints. Now, we can remove that line and also remove the comments from
    the original version. Now your `SecurityConfig.java` file''s `configure` method
    should look like the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Let's test what happens when the backend is now secured again.
  prefs: []
  type: TYPE_NORMAL
- en: Run the backend by pressing the Run button in Eclipse and check from the Console
    view that the application started correctly. Run the frontend by typing the `npm
    start` command into your terminal and the browser should be opened to the address `localhost:3000`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You should now see the list page and the table are empty. If you open the developer
    tools, you will notice that the request ends in the `403 Forbidden` HTTP error.
    This is actually what we wanted because we haven''t done the authentication yet
    to our frontend:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d221b71b-6510-43ce-8142-7c8e9a27a488.png)'
  prefs: []
  type: TYPE_IMG
- en: Securing the frontend
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The authentication was implemented to the backend using JWT. In [Chapter 4](936ad378-25d8-43c4-9e7f-b1cb9bc373cf.xhtml), *Securing
    and Testing Your Backend*, we created JWT authentication, and the `/login` endpoint
    is allowed to everyone without authentication. In the frontend's login page we
    have to first call `/login` endpoint to get the token. After that, the token will
    be included to all requests we are sending to the backend, as was demonstrated
    in [Chapter 4](936ad378-25d8-43c4-9e7f-b1cb9bc373cf.xhtml), *Securing and Testing
    Your Backend*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s first create a login component that asks for credentials from the user
    to get a token from the backend:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new file, called `Login.js`, in the `components` folder. Now, your
    file structure of the frontend should be the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f8c04420-2884-43b0-bce4-8beeca7f691d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Open the file in the VS Code editor view and add the following base code to
    the login component. We are also importing `SERVER_URL` because it is needed in
    a login request:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'We need three state values for authentication. Two for the credentials (`username`
    and `password`) and one Boolean value to indicate the status of authentication.
    The default value of the authentication status state is `false`. Create the `constructor`
    and introduce states inside the `constructor`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'In the user interface, we are going to use the Material-UI component library,
    as we did with the rest of the user interface. We need text field components for
    the credentials and a button to call a login function. Add imports for the components
    to the `login.js` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Add imported components to a user interface by adding these to the `render()`
    method. We need two `TextField` components, one for the username and one for the
    password. One `RaisedButton` component is needed to call the `login` function
    that we are going to implement later in this section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Implement the change handler for the `TextField` components to save typed values
    to the states:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'As shown in [Chapter 4](936ad378-25d8-43c4-9e7f-b1cb9bc373cf.xhtml), *Securing
    and Testing Your Backend*, the login is done by calling the `/login` endpoint
    using the `POST` method and sending the user object inside the body. If authentication
    succeeds, we get a token in a response `Authorization` header. We will then save
    the token to session storage and set the `isAuthenticated` state value to `true`.
    The session storage is similar to local storage but it is cleared when a page
    session ends. When the `isAuthenticated` state value is changed, the user interface
    is re-rendered:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'We can implement conditional rendering, which renders the `Login` component
    if the `isAuthenticated` state is `false` or the `Carlist` component if `isAuthenticated`
    state is `true`. We first have to import the `Carlist` component to the `Login`
    component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'And then implement the following changes to the `render()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'To show the login form, we have to render the `Login` component instead of
    the `Carlist` component in the `App.js` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, when your frontend and backend are running, your frontend should look
    like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/50d978f6-f9a4-4bab-b3d3-e600d1417f03.png)'
  prefs: []
  type: TYPE_IMG
- en: 'And if you log in using the `user/user` or `admin/admin` credentials, you should
    see the car list page. If you open the developer tools, you can see that the token
    is now saved to session storage:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fa1b25e3-8e29-4d64-bf20-330b0dce417c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The car list is still empty, but that is correct because we haven''t included
    the token to the request yet. That is needed for JWT authentication, which we
    will implement in the next phase:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `Carlist.js` file in the VS Code editor view. To fetch the cars, we
    first have to read the token from the session storage and then add the `Authorization`
    header with the token value to the request. You can see the source code of the
    fetch function here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'If you log in to your frontend, you should see the car list populated with
    cars from the database:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e012fc8c-8e04-47ac-a9be-4fd30696ead4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Check the request content from the developer tools; you can see that it contains
    the `Authorization` header with the token value:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/09be0970-1398-44ce-b138-f04da57cb258.png)'
  prefs: []
  type: TYPE_IMG
- en: 'All other CRUD functionalities need the same modification to work correctly.
    The source code of the delete function looks like the following, after the modifications:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The source code of the add function looks as follows, after the modifications:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'And finally, the source code of the update function looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Now, all the CRUD functionalities are working after you have logged in to the
    application.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the final phase, we are going to implement an error message that is shown
    to an end user if authentication fails. We are using the Material-UI `SnackBar`
    component to show the message:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following import to the `Login.js` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Open the state for Snackbar, as we did in [Chapter 10](7c4d1f35-e2d0-453e-b3a4-aa0a754fc0ce.xhtml),
    *Adding CRUD Functionalities*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'We also need a state handler for the `Snackbar` open state to close `Snackbar`
    after the time that we set in the `Snackbar` `autoHideDuration` props:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Add `Snackbar` to the `render()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Set the `open` state value to `true` if the authentication fails:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'If you now log in with the wrong credentials, you can see the toast message:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/33d4ed39-e0a1-483e-8b19-695b009cfe9f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The logout functionality is much more straightforward to implement. You basically
    just have to remove the token from session storage and change the `isAuthenticated`
    state value to `false`, as shown in the following source code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Then with conditional rendering, you can render the `Login` component instead
    of `Carlist`.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to implement a menu using React Router, it is possible to implement
    so-called secured routes that can be accessed only when a user is authenticated.
    The following source code shows the secured route that shows the routed component
    if the user is authenticated, otherwise it redirects to a login page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the example of the `Switch` router that is using `SecuredRoute`, which
    we defined in the previous example. The `Login` and `Contact` components can be
    accessed without authentication, but `Shop` needs authentication:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned how to implement a login functionality for our frontend
    when we are using JWT authentication. After successful authentication, we used
    session storage to save the token that we received from the backend. The token
    was then used in all requests that we sent to the backend, therefore, we had to
    modify our CRUD functionalities to work properly with authentication. In the next
    chapter, we will deploy our application to Heroku and we demonstrate how to create
    Docker containers.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: How should you create a login form?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How should you log in to the backend using JWT?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How should you store tokens to session storage?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How should you send a token to the backend in CRUD functions?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Packt has other great resources for learning about React:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.packtpub.com/web-development/react-16-tooling](https://www.packtpub.com/web-development/react-16-tooling)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://www.packtpub.com/web-development/react-16-essentials-second-edition](https://www.packtpub.com/web-development/react-16-essentials-second-edition)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
