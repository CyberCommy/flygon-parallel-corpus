- en: Chapter 11. Custom Materials and Shaders
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Material definition and creation tools in UE4 are fantastic, not to mention
    its real-time rendering performance. When you see your first glittering gold shader,
    you will be amazed at UE4''s Material shading capabilities, which are possible
    with a bit of math. We will show you how to use these tools through the following
    recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Modifying color using a basic Material
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Modifying position using a Material
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Shader code via Custom node
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Material function
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Shader parameters and Material instances
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Glimmer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Leaves and Wind
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reflectance dependent on the viewing angle
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Randomness – Perlin noise
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Shading a Landscape
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In computer graphics, a **shader** is used to color something. Traditionally,
    shaders were so called since they defined the shade that an object got based on
    its original color and light source position.
  prefs: []
  type: TYPE_NORMAL
- en: Nowadays, shaders aren't really thought of as providing shading to an object
    as much as a textured, final color.
  prefs: []
  type: TYPE_NORMAL
- en: '![Introduction](img/00261.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Shaders are about determining the final color of an object given the light source,
    geometric positions, and initial colors (including textures, and more expensively,
    material properties).
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two flavors of shader: vertex shaders and pixel shaders.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Vertex shaders**: Color at the vertex (point in the mesh), and smoothly shade
    from one 3-space point to another 3-space point.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Pixel shaders**: Color at the pixel (point on the screen). The 3-space physical
    location of a pixel (aka fragment) is calculated using some simple math.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In UE4, we just call a shader a Material. Materials abstract the vertex and
    fragment processing pipelines into block-programmable functions, so you don't
    have to think about the GPU or code to get the graphical output you desire. You
    simply think in terms of blocks and pictures. You can construct Materials and
    build GPU shading functionality without ever writing a line of **High Level Shading
    Language** (**HLSL**), **OpenGL Shading Language** (**GLSL**), or Cg (C for graphics)
    code!
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You will commonly hear of three major GPU programming languages: HLSL, GLSL,
    and Cg. GLSL is OpenGL''s GPU programming language, while HLSL is Microsoft''s
    offering. After battling it out for popularity through the 90s and the first decade
    of the twenty-first century, Cg was born in an attempt to unify all GPU programming
    under it. Cg is still popular, but GLSL and HLSL also remain in popular use.'
  prefs: []
  type: TYPE_NORMAL
- en: Modifying color using a basic Material
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The primary usage of Materials is to make surfaces appear in the color you want
    them. In your scene, you will have light sources and surfaces. Surfaces are coated
    in materials that reflect and refract the light, which you then see using the
    camera's eye. The basic thing to do with a material is to modify the color of
    a surface.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Do not ignore the importance of tuning your light sources to make materials
    look as you wish them to look!
  prefs: []
  type: TYPE_NORMAL
- en: Getting used to the Material Editor takes some practice, but once you get used
    to it, you can do amazing things with it. In this recipe, we'll just use some
    of the very basic functionality to construct a wooden textured material.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Texture versus Material: Keep in mind that there is a big difference between
    the terms texture and material. A texture is just an image file (such as a photograph
    of some `wood.png`); a material, on the other hand, is a combination of textures,
    colors, and mathematical formulae for describing how a surface appears under light.
    Materials will account for surface properties, such as color absorption, reflectance,
    and shininess, while a texture is just a group of colored pixels (or texels, as
    the GPU calls them).'
  prefs: []
  type: TYPE_NORMAL
- en: Shaders are programmed just like normal C++ code, only far more restricted.
    There are several parameter types you can choose from. Most of them will be floats
    or packages of floats arranged in a vector format (`float`, `float2`, `float3`,
    `float4`). For things such as positions and colors, you'll use `float3` or `float4`;
    for things such as texture coordinates, you'll use `float2`.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You need a clean UE4 project into which you want to place your new material.
    Install the **GameTexture Materials** pack from the UE4 Marketplace (Epic Games
    Launcher Application) in your UE4 project. It contains some required textures
    that we'll need for this recipe. You also need a piece of simple geometry to show
    the results of your shader.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To create a basic material, right-click in the **Content Browser,** and create
    a **Material** (available from the top four Basic Asset elements).![How to do
    it...](img/00262.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name your material (for example, `GoldenMaterial`), then double-click on it
    to edit it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Welcome to the Material Editor:![How to do it...](img/00263.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can tell it is the Material Editor because of the presence of the Material
    output node on the right. To the left is a 3D rendered sphere demonstrating what
    your material looks like. Materials start out as a kind of coal-ish black semi-shiny
    material. We can adjust all the material parameters, believe it or not, to make
    anything from a material that emits light like the Sun, to water, or to the texture
    of a unit's armor. Let us begin by adjusting the output colors of the material
    to create a gold-colored metallic material.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change the **Base Color** to yellow by right-clicking on any blank spot in the
    Material Editor window and choosing a **Constant3Vector** (which represents an
    RGB color). Adjust the color by double-clicking on the node and dragging around
    the value of the color swatches. Connect the output of the Constant3Vector to
    **Base Color,** and wait for the 3D picture on the left to reload with your new
    material's appearance. Connect the output of the Constant3Vector to the **Base
    Color** to give the material a yellow appearance as shown in the following screenshot:![How
    to do it...](img/00264.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select a metallicness level for all channels by attaching a constant value to
    the **Metallic** input, and setting it to 1\. 1 is very metallic, and 0 is not
    metallic at all (and so will look plasticy, like the material shown in the next
    screenshot).![How to do it...](img/00265.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose a **Specular** value for the material, again between 0 and 1\. **Specular**
    materials are shiny, while non-specular ones are not.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose a **Roughness** value for the material. **Roughness** refers to how spread
    out the specular highlight is. If **Roughness** is high (near 1.0), then the surface
    is clay-like, with almost specular highlight. The specular highlight appears fat
    and wide near the values 0.7 or 0.8\. When roughness is near 0, then the specular
    highlight is very sharp and thin (extremely shiny/mirror-like surface).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![How to do it...](img/00266.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The material on the left has roughness = 0, and the material on the right has
    roughness = 1.
  prefs: []
  type: TYPE_NORMAL
- en: Apply your material to an object in your scene by clicking and dragging the
    material onto the model mesh that you want the material to apply to. Alternatively,
    select a model mesh component, and the new material that you have created by name
    in the **Details** panel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, create a light in the scene to examine your material's response properties
    further. Without a light, every material appears black (unless its an emissive
    material). Add a light via **Modes** | **Lights**.![How to do it...](img/00267.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Modifying position using a Material
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A less common thing to do is to use a Material to modify an object's position.
    This is commonly done in things such as water shaders. We do it using the **World
    Position Offset** node inside the Material's output.
  prefs: []
  type: TYPE_NORMAL
- en: '![Modifying position using a Material](img/00268.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: We can modulate the output position of a vertex using some GPU math. This lightens
    the load of rendering realistic water on the CPU by a significant amount.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a piece of geometry in your world. Construct a new shader called `Bob`,
    which we'll edit to produce a simple bobbing motion for objects rendered with
    the material.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In your new Material (named `Bob`), right-click and add **Texcoord** and **Time
    Input** nodes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Cascade the sum of the **Texcoord** (for spatial) and **Time Input** nodes through
    a `sin()` function call to create some wavy displacement. Multiply the output
    of the `sin()` function, and pass as Z-inputs to **World Displacement**.![How
    to do it...](img/00269.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Part of the simple water shader given in the code of `Chapter11` that produces
    the displacement.
  prefs: []
  type: TYPE_NORMAL
- en: Select **PN Triangles** under **Tessellation** | **D3D11Tessellation Mode**,
    and set **Tessellation Multiplier** in the material to 1.0.![How to do it...](img/00270.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Normally, specularity and translucency cannot be combined in UE4 shaders. However,
    the Surface Perpixel (experimental, limited features) Lighting Mode does allow
    you to enable both. In addition to selecting this lighting mode, you must remember
    to ensure to press [PRE0]
  prefs: []
  type: TYPE_NORMAL
- en: return float3( x*x, y*y, z*z );
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/00272.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: What this does is construct a 3-float vector, and return the square of *X* in
    the `x` value, the square of *Y* in the `y` value, and the square of *Z* in the
    `z` value.
  prefs: []
  type: TYPE_NORMAL
- en: To return different values for *X*, *Y*, *Z* components of a vector type, we
    had to return a call to a `float3` or `float4` constructor. If you're not returning
    a vector type, you can just use a `return` statement (without calling a `float`
    constructor).
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A custom node is really just a bit of HLSL code. Any valid HLSL code can be
    used in the code text field. A vertex or pixel shader program has several standard
    inputs in it. These standard inputs have been defined for a very long time, and
    they are the parameters you can use to change the way your geometry renders.
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works…](img/00273.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: HLSL and Cg have a concept called semantics, which attaches a kind of concrete
    typing to a float. This is done so that the external program calling the shader
    knows where to put which input when calling your vertex or pixel shading program.
  prefs: []
  type: TYPE_NORMAL
- en: In the following Cg function signature, in addition to being a `float` variable,
    `inPosition` is semantically a `POSITION` typed variable `inTexcoord` a `TEXCOORD`
    typed variable, and `inColor` a `COLOR` typed variable. Inside the shader, you
    can use the variables for anything you want, the semantics are simply for routing
    the correct input to the correct variable (to make sure that the color comes in
    on the `COLOR` typed variable—otherwise, we'd have to do something like track
    the order in which the parameters are specified or something!)
  prefs: []
  type: TYPE_NORMAL
- en: The output parameters of the function specify how the output of the shader is
    to be interpreted. Interpretation is only for the recipient of the output data
    of your program (the next step in the rendering pipeline). Inside your shader
    program you know you are just writing out a bunch of floats to the shader pipeline.
    There's nothing that forbids you from mixing different types of semantics inside
    the shader. A `COLOR` semantic variable can be multiplied by a `POSITION` semantic
    input, and sent out as a `TEXCOORD` semantic output if you so desired.
  prefs: []
  type: TYPE_NORMAL
- en: The Material function
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As always, **modularity** is one of the best practices in programming. Material
    shaders are no exception: it is far better if your shader blocks are modular,
    and can be boxed out and identified as named functions. This way, not only are
    your shader blocks clearer, but they can also be reused in multiple Material shaders,
    or even exported to your local UE4 library for future use in other projects.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A reusable or repeatable block of shader functionality can be factored out of
    your custom material shader program. In this example, we'll write a simple function
    series—`Square`, `Square2`, `Square3`, and `Square4`—that squares input values.
    Get ready to perform the work in this recipe by opening a UE4 project and navigating
    to the **Content Browser**.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Right-click in the **Content Browser,** and select **Materials & Textures**
    | **Material Function**.![How to do it...](img/00274.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name your **Material Function** `Square`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Double-click on **Material Function**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As soon as you open **Material Function**, deselect the **Output Result** node
    by left-clicking anywhere in the blank canvas space of the Material Editor. Take
    a look at the **Details** panel, and note that the Function's exposure to the
    UE4 library is optionally available:![How to do it...](img/00275.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **Expose to Library** checkbox appears in the **Details** panel when no
    nodes are selected in the **Material Function** Editor screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click anywhere in the blank space in the **Material Function** editor,
    and select **Input**. Name your input. Notice how **Input** nodes are only available
    in the **Material Functions** editor, not in the normal Material editing view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'From any regular Material, invoke your function by doing one of the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click in the blank space, and select `MaterialFunction`, then select your
    `MaterialFunction` from the drop-down menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click and type the name of your **Material Function** (this requires you
    to have exposed your **Material Function** previously).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you don't want to expose your **Material Function** to the UE4 library, then
    you have to use a `MaterialFunction` block to call your custom function.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click anywhere in the **Material Function** editor, and select **Output**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Material Function**s are some of the most useful blocks you can create. With
    them, you can modularize your shader code to be much more neat, compact, and reusable.'
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Migrating your functionality to the shader library is a good idea. You can make
    your custom function appear in the function library by choosing **Expose to Library**
    in the root of the shader (provided you have nothing selected in the Material
    Editor window).
  prefs: []
  type: TYPE_NORMAL
- en: When developing a **Material Function**, sometimes, it's helpful to change the
    Material Preview node to a node other than the output node. Preview a specific
    node's output by right-clicking the output jack for any node and selecting **Start
    Previewing Node**.
  prefs: []
  type: TYPE_NORMAL
- en: '![There''s more…](img/00276.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The window in the top-left corner of the Material Editor will now show the output
    of the node you are previewing. In addition, the text **Previewing** will be added
    to the node you are previewing (if it's not the final output node). Ensure that
    **Live Preview** is enabled in the menu bar at the top of the Material Editor.
    Typically, you would want the final output to be previewed.
  prefs: []
  type: TYPE_NORMAL
- en: Shader parameters and Material instances
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A parameter to a shader is going to be a variable input to that shader. You
    can configure scalars or vectors to be used as input parameters to your shader.
    Some materials within UE4 come preprogrammed with material parameters exposed.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In order to set up a parameter to a shader, you first need a shader with something
    that you want to modify with a variable. A good thing to modify with a variable
    is the suit color of a character. We can expose the color of the suit as a shader
    parameter that we multiply suit color by.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Construct a new Material.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Within the Material, create a `VectorParameter`. Give the parameter a name,
    such as `Color`. Give it a default value, such as blue or black.![How to do it...](img/00277.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Close the Material.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In **Content Browser**, right-click on the Material with the parameter in it,
    and select **Create Material Instance**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Double-click on your Material instance. Check the box beside your `VectorParameter`
    name, and voila! Your `VectorParameter` is customizable without further affecting
    the base functionality of the Material.![How to do it...](img/00278.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further, if you change the base functionality of the Material, the Material
    instance will inherit those changes without needing any further configurations.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Material Parameters allow you to edit the value of variables sent to a Material
    without editing the Material itself. In addition, you can also change a Material
    instance's values from C++ code quite easily. This is useful for things such as
    team colors, and the like.
  prefs: []
  type: TYPE_NORMAL
- en: Glimmer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Some shader functionality is easily accessible using the standard nodes inside
    the UE4 Material Editor. You can come up with some neat speckled effects, such
    as the glittering gold shader we show you how to construct in the following recipe.
    The purpose of this recipe is to familiarize you with the Material Editor's base
    functions so that you can learn to construct your own material shaders.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create an asset (such as a treasure chest) that you want to glow, or open the
    the source code package of `Chapter11` to find the `treasureChest.fbx` model.
  prefs: []
  type: TYPE_NORMAL
- en: What we'll do is move a plane across the object of a certain thickness *W*.
    When the plane passes over the geometry, the emissive color channel is activated,
    and a glimmer effect is created across the treasure.
  prefs: []
  type: TYPE_NORMAL
- en: We expose several parameters to control the glimmer, including **Speed**, **Period**
    (time between glimmers), **Width**, **Gain**, **PlaneDirection**, and finally,
    **Color**.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new Material by right-clicking in the **Content Browser,** and selecting
    **Material**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add input parameters to scale time as shown in the following image, pulling
    in a `Time` input, and making it periodic by calling `Fmod` with the period of
    time:![How to do it...](img/00279.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Fmod` with period will make time follow a sawtooth pattern. The value of time
    read will not increase past the **Period**, because we will keep kicking it down
    to 0 using the `fmod` operation.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Provide the `OnPlane` function in a separate file. The `OnPlane` function uses
    the Plane Equation *Ax + By + Cz + D = 0* to determine if an input point is on
    a plane or not. Pass the `LocalPosition` coordinates into the `OnPlane` function
    to determine if, in the given frame, this section should be highlighted with emissive
    glow in the geometry or not.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: An imaginary plane of light passes through the geometry at the speed specified
    by speed, once every **Period** seconds. The plane starts at the corner of a bounding
    box, in the direction specified by **PlaneDirection**. The plane always starts
    at the corner of the box where it will pass through the entire volume when the
    plane is shifted forward with time.
  prefs: []
  type: TYPE_NORMAL
- en: Leaves and Wind
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we'll write a simple particle shader demonstrating how to create
    leaves in wind. We can do so using a **Particle Emitter** combined with a Material
    Shader that "shades" our leaves to give them the appearance of blowing in the
    wind.
  prefs: []
  type: TYPE_NORMAL
- en: '![Leaves and Wind](img/00280.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To begin, you'll need a leaf texture as well as a scene in which to place the
    falling leaves. In the `Chapter11` code package, you'll find a scene called `LeavesAndTree`
    that contains a deciduous tree that you can use.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a new particle emitter by right-clicking in the **Content Browser,**
    and choosing **Particle System**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Construct a new Material shader by right-clicking in the **Content Browser**
    and choosing **Material**. Your leaf material should contain a texture of a leaf
    in the `BaseColor` component. We'll edit the **World Position** of the leaf in
    a later step to represent a jitter in motion represented by the wind.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add a couple of parameters to modify the Leaves particle emitter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Spawn** should have a nice high rate of about 100.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Initial Location** can be distributed in a cube of 100 units per side.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Lifetime** can be 4-5 seconds.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Initial Velocity** should be something like ranging from (-50,-50,-100) to
    (25,25,-10).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Initial Color** can be a distribution vector with values at green, yellow,
    and red.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Acceleration** can be (0,0,-20).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Initial Rotation Rate** can be 0.25 (max).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: An **Orbit** parameter can be added with distribution (0,0,0) to (0,10,10).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Wind**: Create a **Material Parameter Collection** (**MPC**) by right-clicking
    anywhere in the blank space in **Content Browser** and selecting **New Material
    Parameter Collection**.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Double-click to edit your new Material Parameter Collection, and enter a new
    parameter `TheWind`. Give it initial values of `(1, 1, 1)`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In your level Blueprint (**Blueprints** | **Level Blueprint**), create a client-side
    variable called `TheWind`. We will send this variable down to the GPU in each
    frame after we change it locally at the CPU. Initialize the `TheWind` variable
    to `(1, 1, 1)` in event `BeginPlay`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Event `Tick`, modify the wind to your liking. In my version of the wind,
    I have multiplied the wind in each frame by a random vector with values between
    [-1,1] in three dimensions. This gives the wind a nice jittery look per-frame.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Send the wind variable update down to the GPU by choosing a **Set Vector Parameter
    Value** node immediately after you modify the wind vector. The **Set Vector Parameter
    Value** must reference a variable inside a Material Parameter Collection, so reference
    `TheWind` variable inside the Material Parameter Collection that we created in
    *STEP 4*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Modify `WorldPositionOffset` by some multiple of `TheWind` each frame. Since
    `TheWind` variable varies slowly, the modification presented in each frame will
    be a slight variation of the modification presented in the last frame, producing
    a smooth leaf motion.![How to do it...](img/00281.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The leaves fall at more or less a constant rate with additional light gravity,
    but they are pulled around by a constantly varying wind vector inside the shader.
  prefs: []
  type: TYPE_NORMAL
- en: Reflectance dependent on the viewing angle
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The tendency of the reflectance of a material to depend on the viewing angle
    is called the **Fresnel** effect. A material may be more specular from a grazing
    angle than from a head-on angle.
  prefs: []
  type: TYPE_NORMAL
- en: '![Reflectance dependent on the viewing angle](img/00282.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Fresnel effect has magnitude at a grazing angle. This water material seen
    in the preceding screenshot has high specularity and opacity at a grazing angle
    due to use of the Fresnel effect.
  prefs: []
  type: TYPE_NORMAL
- en: UE4 has a specially built-in capability to account for this. We'll construct
    a water shader that has view-angle dependence for translucency to give an example
    of how to use the Fresnel effect realistically.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You need a new shader to which you want to add the Fresnel effect. Preferably,
    select a material that you want to look a bit different depending on the viewing
    angle.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Inside your material, drive a channel (either Opacity, Specularity, or a diffuse
    color) by the output of a Fresnel node.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The Fresnel node''s parameters Exponent and Base Reflect Fraction can be adjusted
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Exponent**: Describes how Fresnel the material is. Higher values here exaggerate
    the Fresnel effect.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Base Reflect Fraction**: Lower numbers exaggerate the Fresnel Effect. For
    a value of 1.0, the Fresnel effect will not manifest.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There is a fair bit of math behind implementing the Fresnel effect, but using
    it to drive a component in a material is fairly easy, and can help you come up
    with some very beautiful looking materials.
  prefs: []
  type: TYPE_NORMAL
- en: Randomness – Perlin noise
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Some shaders benefit from the ability to use random values. Each Material has
    a few nodes that can help add randomness to a shader. Randomness from a **Perlin**
    noise texture can be used to generate interesting-looking materials such as marbled
    materials. The noise can also be used to drive bump maps, height maps, and displacement
    fields for some neat effects.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Choose a material to which you'd like to add some randomness. Open the Material
    in the Material Editor, and follow the steps.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Insert a **Noise** node into your Material Editor window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Normalize the coordinates of the object you're adding the noise to. You can
    use math such as the following to do so:![How to do it...](img/00283.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Subtract the minimum from each processed vertex in the system to take the object
    to sit at the origin.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Divide the vertex by the size of the object to put the object in a unit box.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Multiply the vertex value by 2 to expand the unit box from 1x1 to 2x2.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Subtract 1 from the vertex values to move the unit to being centered in the
    origin with values from *[-1,-1,-1]* to *[+1,+1,+1]*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select a value from which to draw noise. Keep in mind that noise works extremely
    well with input values between ![How to do it...](img/00284.jpeg). Outside of
    this range, Perlin's noise starts to appear snowy when zoomed out (because there
    will be too much variation in the output values over your input *x*).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Perlin's noise can help you produce some beautiful marbly textures and patterns.
    Besides using it in graphics, you can also use Perlin noise to drive motion and
    other phenomena in a natural looking way.
  prefs: []
  type: TYPE_NORMAL
- en: Shading a Landscape
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Landscape shaders are relatively easy to construct. They allow you to specify
    multi-texturing for a very large custom piece of geometry called a Landscape.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Landscape objects are fantastic for use as a ground plane for your game world
    level. You can construct multiple landscapes in the same level using the Landscape
    tab. Access the Landscape palette in the **Modes** panel by clicking on the picture
    of a mountain, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/00285.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Construct a new Landscape object by clicking on **Modes** | Landscape. Under
    the **New Landscape** heading, select the **Create New** radio button. You will
    see a green wireframe overlay proposing the new landscape. You can adjust its
    size using the **Section Size** and **Sections Per Component** settings.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The landscape will tile the textures we select for it **Section Size** * **Sections
    Per Component** * **Number of Components** times when we finally texture. You
    can keep note of this number if you want to make the landscape texture tile fewer
    times—simply divide the UV coordinates fed to the textures by the number computed
    in the preceding line.
  prefs: []
  type: TYPE_NORMAL
- en: Do not click on anything else in this dialog yet, as we still have to construct
    our Landscape Material. This is outlined in the following steps.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to **Content Browser** and create a new Material for use by your landscape.
    Call it `LandscapeMaterial`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Edit your `LandscapeMaterial` by double-clicking on it. Right-click anywhere
    in the blank space and select a `LandscapeCoordinate` node to feed the UV coordinates
    through the textures that we're about to apply.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To reduce the tiling on the Landscape, you'll need to divide the output of the
    `LandscapeCoordinate` node by the total size of the landscape (**Section Size**
    * **Sections Per Component** * **Number of Components**) (as described in a tip
    in *Step 1*)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add a `LandscapeLayerBlend` node to the canvas. Lead the output of the node
    to the **Base Color** layer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the `LandscapeLayerBlend` node, and add a few Layers to the element
    in the **Details** tab. This will allow you to blend between the textures using
    **Texture Painting**. Name each, and select the method for blending from among
    the following options:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: By painted weight (LB Weight Blend).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By alpha value inside the texture (LB Alpha Blend).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By height (LB Height Blend).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Set other parameters for each `LandscapeLayer` you're adding as you desire.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Feed in the textures, one for each layer of Landscape blend.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Reduce the specularity of the landscape to 0 by adding a constant 0 input to
    the Specular input.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save and close your material.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to the **Modes** | Landscape tab now, and select your newly created `LandscapeMaterial`
    in the drop-down menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Under the **Layers** section, click on the **+** icon beside each of the Landscape
    layers that are available. Create and save a Target Layer object for each Landscape
    layer that you have.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, scroll down the Landscape tab, and click on the **Create** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Paint tab, select a brush size and a texture to paint with, and
    begin texture painting your landscape.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Landscape materials can be blended either by height, or by manual artistry,
    as shown in this recipe.
  prefs: []
  type: TYPE_NORMAL
