- en: Chapter 3. Code Style in Django
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you are coming from the Python background, you must already have written
    lots of code, and, of course have enjoyed it too.
  prefs: []
  type: TYPE_NORMAL
- en: Python code is easy to maintain and works on both small projects or in solving
    any competitive programming contest; you can do either by storing Python code
    locally or by storing it in a public folder for easier sharing. But, if you are
    working on a collaborative project, especially web development, then it makes
    everything different from other traditional coding. This not only needs discipline,
    like following the project's code syntax, but you may also end up writing extensive
    documentation for your code. While working with any version control tools, such
    as GIT, your commit messages (which play an important role in making it easier
    for other developers to understand what you have been working on or have completed)
    also broadcast the current progress of project.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter will cover all the basic topics which you would require to follow,
    such as coding practices for better Django web development, which IDE to use,
    version control, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will learn the following topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Django coding style
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using IDE for Django web development
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Django project structure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Best practices—using version control
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Django rescue team (where to ask Django questions)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Faster web development—using Twitter-Bootstrap
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This chapter is based on the important fact that code is read much more often
    than it is written. Thus, before you actually start building your projects, we
    suggest that you familiarize yourself with all the standard practices adopted
    by the Django community for web development.
  prefs: []
  type: TYPE_NORMAL
- en: Django coding style
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Most of Django's important practices are based on Python. Though chances are
    you already know them, we will still take a break and write all the documented
    practices so that you know these concepts even before you begin. Of course, you
    can come back to this chapter for a quick look when you are building your projects.
  prefs: []
  type: TYPE_NORMAL
- en: To mainstream standard practices, Python enhancement proposals are made, and
    one such widely adopted standard practice for development is PEP8, the style guide
    for Python code–the best way to style the Python code authored by Guido van Rossum.
  prefs: []
  type: TYPE_NORMAL
- en: The documentation says, "PEP8 deals with semantics and conventions associated
    with Python docstrings." For further reading, please visit [http://legacy.python.org/dev/peps/pep-0008/](http://legacy.python.org/dev/peps/pep-0008/).
  prefs: []
  type: TYPE_NORMAL
- en: Understanding indentation in Python
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When you are writing Python code, indentation plays a very important role. It
    acts as a block like in other languages, such as **C** or **Perl**. But it's always
    a matter of discussion amongst programmers whether we should use tabs or spaces,
    and, if space, how many–two or four or eight. Using four spaces for indentation
    is better than eight, and if there are a few more nested blocks, using eight spaces
    for each indentation may take up more characters than can be shown in single line.
    But, again, this is the programmer's choice.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is what incorrect indentation practices lead to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'So, which one we should use: tabs or spaces?'
  prefs: []
  type: TYPE_NORMAL
- en: Choose any *one* of them, but never mix up tabs and spaces in the same project
    or else it will be a nightmare for maintenance. The most popular way of indention
    in Python is with spaces; tabs come in second. If any code you have encountered
    has a mixture of tabs and spaces, you should convert it to using spaces exclusively.
  prefs: []
  type: TYPE_NORMAL
- en: Doing indentation right – do we need four spaces per indentation level?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'There has been a lot of confusion about it, as of course, Python''s syntax
    is all about indentation. Let''s be honest: in most cases, it is. So, what is
    highly recommended is to use four spaces per indentation level, and if you have
    been following the two-space method, stop using it. There is nothing wrong with
    it, but when you deal with multiple third party libraries, you might end up having
    a spaghetti of different versions, which will ultimately become hard to debug.'
  prefs: []
  type: TYPE_NORMAL
- en: Now for indentation. When your code is in a continuation line, you should wrap
    it vertically aligned, or you can go in for a hanging indent. When you are using
    a hanging indent, the first line should not contain any argument and further indentation
    should be used to clearly distinguish it as a continuation line.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A hanging indent (also known as a negative indent) is a style of indentation
    in which all lines are indented except for the first line of the paragraph. The
    preceding paragraph is the example of hanging indent.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following example illustrates how you should use a proper indentation method
    while writing the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'We do not encourage the following coding style, and it will not work in Python
    anyway:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Although extra indentation is not required, if you want to use extra indentation
    to ensure that the code will work, you can use the following coding style:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Ideally, you should limit each line to a maximum of 79 characters. It allows
    for a `+` or `–` character used for viewing difference using version control.
    It is even better to limit lines to 79 characters for uniformity across editors.
    You can use the rest of the space for other purposes.
  prefs: []
  type: TYPE_NORMAL
- en: The importance of blank lines
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The importance of two blank lines and single blank lines are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Two blank lines**: A double blank lines can be used to separate top-level
    functions and the class definition, which enhances code readability.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Single blank lines**: A single blank line can be used in the use cases–for
    example, each function inside a class can be separated by a single line, and related
    functions can be grouped together with a single line. You can also separate the
    logical section of source code with a single line.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Importing a package
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Importing a package is a direct implication of code reusability. Therefore,
    always place imports at the top of your source file, just after any module comments
    and document strings, and before the module's global and constants as variables.
    Each import should usually be on separate lines.
  prefs: []
  type: TYPE_NORMAL
- en: 'The best way to import packages is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'It is not advisable to import more than one package in the same line, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'You may import packages in the following fashion, although it is optional:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'If your import gets longer, you can use the following method to declare them:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Grouping imported packages
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Package imports can be grouped in the following ways:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Standard library imports**: Such as `sys`, os, `subprocess`, and so on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '**Related third party imports**: These are usually downloaded from the Python
    cheese shop, that is, **PyPy** (using pip install). Here is an example:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '**Local application / library-specific imports**: This included the local modules
    of your projects, such as models, views, and so on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Naming conventions in Python/Django
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Every programming language and framework has its own naming convention. The
    naming convention in Python/Django is more or less the same, but it is worth mentioning
    it here. You will need to follow this while creating a variable name or global
    variable name and when naming a class, package, modules, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is the common naming convention that we should follow:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Name the variables properl**y: Never use single characters, for example,
    ''x'' or ''X'' as variable names. It might be okay for your normal Python scripts,
    but when you are building a web application, you must name the variable properly
    as it determines the readability of the whole project.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Naming of packages and modules**: Lowercase and short names are recommended
    for modules. Underscores can be used if their use would improve readability. Python
    packages should also have short, all-lowercase names, although the use of underscores
    is discouraged.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Since module names are mapped to file names (`models.py`, `urls.py`, and so
    on), it is important that module names be chosen to be fairly short as some file
    systems are case insensitive and truncate long names.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Naming a class**: Class names should follow the **CamelCase** naming convention,
    and classes for internal use can have a leading underscore in their name.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Global variable names**: First of all, you should avoid using global variables,
    but if you need to use them, prevention of global variables from getting exported
    can be done via `__all__`, or by defining them with a prefixed underscore (the
    old, conventional way).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Function names and method argument**: Names of functions should be in lowercase
    and separated by an underscore and `self` as the first argument to instantiate
    methods. For classes or methods, use CLS or the objects for initialization.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Method names and instance variables**: Use the function naming rules—lowercase
    with words separated by underscores as necessary to improve readability. Use one
    leading underscore only for non-public methods and instance variables.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using IDE for faster development
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are many options on the market when it comes to source code editors.
    Some people prefer full-fledged IDEs, whereas others like simple text editors.
    The choice is totally yours; pick up whatever feels more comfortable. If you already
    use a certain program to work with Python source files, I suggest that you stick
    to it as it will work just fine with Django. Otherwise, I can make a couple of
    recommendations, such as these:'
  prefs: []
  type: TYPE_NORMAL
- en: '**SublimeText**: This editor is lightweight and very powerful. It is available
    for all major platforms, supports syntax highlighting and code completion, and
    works well with Python. The editor is open source and you can find it at [http://www.sublimetext.com/](http://www.sublimetext.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**PyCharm**: This, I would say, is most intelligent code editor of all and
    has advanced features, such as code refactoring and code analysis, which makes
    development cleaner. Features for Django include template debugging (which is
    a winner) and also quick documentation, so this look-up is a must for beginners.
    The community edition is free and you can sample a 30-day trial version before
    buying the professional edition.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up your project with the Sublime text editor
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Most of the examples that we will show you in this book will be written using
    **Sublime text editor**. In this section, we will show how to install and set
    up the Django project.
  prefs: []
  type: TYPE_NORMAL
- en: '**Download and installation**: You can download Sublime from the download tab
    of the site [www.sublimetext.com](http://www.sublimetext.com). Click on the downloaded
    file option to install.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Setting up for Django**: Sublime has a very extensive plug-in ecosystem,
    which means that once you have downloaded the editor, you can install plug-ins
    for adding more features to it.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After successful installation, it will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up your project with the Sublime text editor](img/image00275.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Most important of all is **Package Control**, which is the manager for installing
    additional plugins directly from within Sublime. This will be your only manual
    installation of the package. It will take care of the rest of the package installation
    ahead.
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up your project with the Sublime text editor](img/image00276.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Some of the recommendations for Python development using Sublime are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Sublime Linter**: This gives instant feedback about the Python code as you
    write it. It also has PEP8 support; this plugin will highlight in real time the
    things we discussed about better coding in the previous section so that you can
    fix them.![Setting up your project with the Sublime text editor](img/image00277.jpeg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Sublime CodeIntel**: This is maintained by the developer of **SublimeLint**.
    Sublime CodeIntel have some of advanced functionalities, such as directly go-to
    definition, intelligent code completion, and import suggestions.![Setting up your
    project with the Sublime text editor](img/image00278.jpeg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can also explore other plugins for Sublime to increase your productivity.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the PyCharm IDE
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can use any of your favorite IDEs for Django project development. We will
    use pycharm IDE for this book. This IDE is recommended as it will help you at
    the time of debugging, using breakpoints that will save you a lot of time figuring
    out what actually went wrong.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is how to install and set up **pycharm** IDE for Django:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Download and installation**: You can check the features and download the
    pycharm IDE from the following link:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[http://www.jetbrains.com/pycharm/](http://www.jetbrains.com/pycharm/)'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up the PyCharm IDE](img/image00279.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: '**Setting up for Django**: Setting up pycharm for Django is very easy. You
    just have to import the project folder and give the `manage.py` path, as shown
    in the following figure:![Setting up the PyCharm IDE](img/image00280.jpeg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Django project structure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Django project structure has been changed in the 1.6 release version. Django
    (`django-admin.py`) also has a `startapp` command to create an application, so
    it is high time to tell you the difference between an application and a project
    in Django.
  prefs: []
  type: TYPE_NORMAL
- en: A **project** is a complete website or application, whereas an **application**
    is a small, self-contained Django application. An application is based on the
    principle that it should do one thing and do it right.
  prefs: []
  type: TYPE_NORMAL
- en: To ease out the pain of building a Django project right from scratch, Django
    gives you an advantage by auto-generating the basic project structure files from
    which any project can be taken forward for its development and feature addition.
  prefs: []
  type: TYPE_NORMAL
- en: Thus, to conclude, we can say that a project is a collection of applications,
    and an application can be written as a separate entity and can be easily exported
    to other applications for reusability.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create your first Django project, open a terminal (or Command Prompt for
    Windows users), type the following command, and hit *Enter*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: This command will make a folder named `django_mytweets` in the current directory
    and create the initial directory structure inside it. Let's see what kind of files
    are created.
  prefs: []
  type: TYPE_NORMAL
- en: 'The new structure is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'This is the content of `django_mytweets/`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is a quick explanation of what these files are:'
  prefs: []
  type: TYPE_NORMAL
- en: '`django_mytweets` (the outer folder): This folder is the project folder. Contrary
    to the earlier project structure in which the whole project was kept in a single
    folder, the new Django project structure somehow hints that every project is an
    application inside Django.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This means that you can import other third party applications on the same level
    as the Django project. This folder also contains the `manage.py` file, which include
    all the project management settings.
  prefs: []
  type: TYPE_NORMAL
- en: '`manage.py`: This is utility script is used to manage our project. You can
    think of it as your project''s version of `django-admin.py`. Actually, both `django-admin.py`
    and `manage.py` share the same backend code.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Further clarification about the settings will be provided when are going to
    tweak the changes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s have a look at the `manage.py` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: The source code of the `manage.py` file will be self-explanatory once you read
    the following code explanation.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: The first line is just the declaration that the following file is a Python file,
    followed by the import section in which `os` and `sys` modules are imported. These
    modules mainly contain system-related operations.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: The next piece of code checks whether the file is executed by the main function,
    which is the first function to be executed, and then loads the Django setting
    module to the current path. As you are already running a virtual environment,
    this will set the path for all the modules to the path of the current running
    virtual environment.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Django projects are Python packages, and this file is required to tell Python
    that this folder is to be treated as a package. A package in Python's terminology
    is a collection of modules, and they are used to group similar files together
    and prevent naming conflicts.
  prefs: []
  type: TYPE_NORMAL
- en: '`settings.py`: This is the main configuration file for your Django project.
    In it, you can specify a variety of options, including database settings, site
    language(s), what Django features need to be enabled, and so on. Various sections
    of this file will be explained as we progress with building our application during
    the following chapters.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By default, the database is configured to use SQLite Database, which is advisable
    to use for testing purposes. Here, we will only see how to enter the database
    in the settings file; it also contains the basic setting configuration, and with
    slight modification in the `manage.py` file, it can be moved to another folder,
    such as `config` or `conf`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To make every other third-party application a part of the project, we need
    to register it in the `settings.py` file. `INSTALLED_APPS` is a variable that
    contains all the entries about the installed application. As the project grows,
    it becomes difficult to manage; therefore, there are three logical partitions
    for the `INSTALLED_APPS` variable, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`DEFAULT_APPS`: This parameter contains the default Django installed applications
    (such as the admin)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`THIRD_PARTY_APPS`: This parameter contains other application like **SocialAuth**
    used for social authentication'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`LOCAL_APPS`: This parameter contains the applications that are created by
    you'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`url.py`: This is another configuration file. You can think of it as a mapping
    between URLs and the Django view functions that handle them. This file is one
    of Django''s more powerful features, and we will see how to utilize it in the
    next chapter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When we start writing code for our application, we will create new files inside
    the project's folder. So, the folder also serves as a container for our code.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have a general idea of the structure of a Django project, let's
    configure our database system.
  prefs: []
  type: TYPE_NORMAL
- en: Best practices – using version control
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Version control is a system that remembers all the changes you make to your
    projects as you keep progressing. At any point of time, you can see the changes
    made to a particular file; over a period of time, you can revert it or edit it
    further.
  prefs: []
  type: TYPE_NORMAL
- en: It makes much more sense for a project that has multiple contributors, mainly
    for those working on the same file concurrently. Version control is a lifesaver
    because it keeps records of both the versions of files and allows options such
    as saving both by merging or discarding any one copy.
  prefs: []
  type: TYPE_NORMAL
- en: We will be using distributed version control, that is, each developer has a
    complete copy of the project (contrary to subversion, where repositories are hosted
    on a system server).
  prefs: []
  type: TYPE_NORMAL
- en: Git – the latest and most popular version control tool
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Git** is a version control tool we will be using for our projects. It is
    the best available tool out there for version control and is open source too.
    Git works well with other types of files, apart from source code files, life images,
    PDFs, and so on. You can download Git from the following URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://git-scm.com/downloads](http://git-scm.com/downloads)'
  prefs: []
  type: TYPE_NORMAL
- en: Most of the modern IDEs already have built-in version control system support;
    like PyCharm, Sublime has a plugin that can integrate Git in the working directory.
    Git can be initialized form the terminal using the `git` command, and you can
    check out further options provided by it using the `git --help` command.
  prefs: []
  type: TYPE_NORMAL
- en: How Git works
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We, as developers, have a local copy of the project synchronized with a remote
    server (often called repository) and can send it to a remote repository. When
    the other developer wants to push changes to the remote repository, they have
    to pull your changes first. This minimizes chances of any conflict on the central
    repository where every developer is in sync. This whole work flow is shown in
    the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up your Git
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Any project can be added to Git for version control to creating a folder into
    a Git repository. To do this, use the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '`$git init`: If you want to copy an existing Git repository, which might be
    the case if your friend has already hosted it somewhere on **GitHub** or **Bitbucket**,
    use the following command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`$git clone URL`: The URL of the remote repository, like [https://github.com/AlienCoders/web-development.git](https://github.com/AlienCoders/web-development.git).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Staging area**: The staging area is the place where all your files have to
    be listed first before you commit them. In short, staging is needed as an intermediate
    step, rather than a direct commit, because, when conflicts occur, they are flagged
    in the staging area. Only after the conflicts are resolved can the files be committed.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at the following commands and their uses:'
  prefs: []
  type: TYPE_NORMAL
- en: '`$git add <file-name>` or `$git add`: For adding all files to the staging area
    in bulk.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`$git status`: To know the status of your working directory, which files have
    been added, and which files have not been added.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`$git diff`: To get the status of what is modified and staged, or what is modified
    and has not been staged.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`$ git commit -m`: To commit the changes made, first you have to add them to
    the staging area; then, you have to commit them using this command.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`$ git rm <file-name>`: If you have mistakenly added any file to the staging
    area, you can remove it from the staging area by using this command.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`$git stash`: Git doesn''t track the renamed files. In other words, if you
    have renamed already staged files, you will have to add them again to the staging
    and then commit. You can save the changes by not actually committing to the repository
    by using the following command.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`$git stash apply`: It takes all the current changes and saves it to the stack.
    Then, you can continue working with your changes. Once you are in a position to
    get your saved changes, you can do so using this command.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Branching in Git
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Another concept of version control is **branching** (Git). A branch is like
    a path for your commits, and by default, all commits are made on the master branch.
    A branch is mainly used to track the feature in a project. Every feature can be
    made as branch to be worked on; once the feature is complete, it can be merged
    back to the master.
  prefs: []
  type: TYPE_NORMAL
- en: 'The basic work flow of branch is this: you initially have a master branch and
    make a new branch for each new feature. Changes are committed into the new branch,
    and once done with the feature, you can merge it back to the master branch. This
    can be visually represented as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`$git branch`: To list an existing branch using Git, we need to use this command.![Branching
    in Git](img/image00281.jpeg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`git checkout -b <new-branch-name>`: A new branch can be created in the existing
    repository using this command. We can see logically how it looks with the help
    of the following block diagram:![Branching in Git](img/image00282.jpeg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You will get a message informing you that you have switched to the new branch.
    If you want to switch back to the old branch, you can use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '`$git checkout <old-branch-name>`: You will see the message `Switched to branch
    <old-branch-name>`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`$git merge <branch-name>`: After the feature is complete, you can merge it
    to the branch of your choice using this command. This will merge the branch `<branch-name>`
    to your current branch. To sync the changes back to the `<branch-name>`, you can
    check out from your current branch to the branch `<branch-name>` and merge again.
    You can also mark the important points in your commit history by using tags.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: After the commit, you can tag an important commit by using the `$git tag -a
    v1.0` command.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To get new changes from the remote server, you can fetch the changes from Git
    using the `$git fetch` command.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To merge the changes directly to your current branch, you can use the `$git
    pull` command.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: After you are done with your changes, you can commit and push them to the remote
    repository using the `$git push` command.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up the database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will start working with code for the first time. Therefore,
    we will have to choose a source code editor to enter and edit code. You can use
    any of your favorite source code editors. As mentioned in the previous section,
    we have used the Sublime text editor to write code for this book.
  prefs: []
  type: TYPE_NORMAL
- en: 'OK, now that you have a source code editor ready, let''s open `settings.py`
    in the project folder and see what it contains:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: There are many more lines in the `settings.py` file, but we have trimmed the
    remaining contents of this file.
  prefs: []
  type: TYPE_NORMAL
- en: As you may have already noticed, the file contains a number of variables that
    control various aspects of the application. Entering a new value for a variable
    is as simple as doing a Python assignment statement. In addition, the file is
    extensively commented, and comments explain what variables control in detail.
  prefs: []
  type: TYPE_NORMAL
- en: What concerns us now is configuring the database. As mentioned before, Django
    supports several database systems, so first of all, we have to specify what database
    system we are going to use. This is controlled by the `DATABASE_ENGINE` variable.
    If you have SQLite installed, set the variable to `sqlite3`. Otherwise, pick the
    value that matches your database engine from the comment next to the variable
    name.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next is the database name. We will choose a descriptive name for your database;
    edit `DATABASE_NAME` and set it to `django_mytweetsdb`. If you are using SQLite,
    this is all you need to do. On the other hand, if you are using a database server,
    follow these instructions:'
  prefs: []
  type: TYPE_NORMAL
- en: Enter the relevant information for the database–the username, password, host,
    and port (SQLite does not require any of these).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create the actual database inside the database server, as Django won't do this
    by itself. In MySQL, for example, this is done through the `mysql` command-line
    utility or `phpMyAdmin`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'After these simple edits, the database section in `settings.py` now looks like
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we will tell Django to populate the configured database with tables.
    Although we haven''t created any tables for our data yet (and we won''t do so
    until the next chapter), Django requires several tables in the database for some
    of its features to function properly. Creating these tables is as easy as issuing
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: If everything is correct, status messages will scroll on the screen, indicating
    that tables are being created. When prompted for the superuser account, enter
    your preferred username, e-mail, and password. If, on the other hand, the database
    is misconfigured, an error message will be printed to help you troubleshoot the
    issue.
  prefs: []
  type: TYPE_NORMAL
- en: With this done, we are ready to launch our application.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Using python manage.py**'
  prefs: []
  type: TYPE_NORMAL
- en: When you run a command that starts with `python manage.py`, make sure that you
    are currently in the project's directory where the `manage.py` file is located.
  prefs: []
  type: TYPE_NORMAL
- en: Launching the development server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As discussed before, Django comes with a lightweight web server for developing
    and testing applications. This server is pre-configured to work with Django, and
    more importantly, it restarts whenever you modify the code.
  prefs: []
  type: TYPE_NORMAL
- en: 'To start the server, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, open your browser and navigate to this URL: `http://localhost:8000/`.
    You should see a welcome message, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Launching the development server](img/image00283.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Congratulations! You have created and configured your first Django project.
    This project will be the basis on top of which we will build our bookmarking application.
    In the next chapter, we will start developing our application, and the page displayed
    by the web server will be replaced by something we wrote ourselves!
  prefs: []
  type: TYPE_NORMAL
- en: 'As you may have noticed, the web server runs on port `8000` by default. If
    you want to change the port, you can specify it on the command line using the
    following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Also, the development server is only accessible from the local machine by default.
    If you want to access the development server from another machine on your network,
    use the following command line arguments:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Faster web development
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When it comes to web development, one thing which majorly helps the success
    of the web project is its user interface and user experience. Although Django
    takes care of all the business logic at the backend, there is undoubtedly a need
    for an awesome frontend design framework that not only eases the developer's life
    while coding, but also enhances the user experience of the whole web project.
    Thus, we choose to explain **Twitter Bootstrap** here.
  prefs: []
  type: TYPE_NORMAL
- en: Minimal Bootstrap
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Bootstrap** is a complete frontend framework, and it''s beyond the scope
    of this book to familiarize you with each and every aspect of it. What you must
    be wondering is why we would discuss Bootstrap in Django book. You are being told
    about a frontend framework. The idea here is to help you build a web application
    that you can directly use in production, and which you will be deploying to clouds
    such as **AWS** and **Heroku**. You need your project to be of a production grade
    once you finish this book. Thus, by keeping Bootstrap as simple as possible, you
    can still build a great-looking Django web application.'
  prefs: []
  type: TYPE_NORMAL
- en: There are many ways to lay out your web pages based on the permutation and combination.
    To help you to get an understanding of that, we will take a look at a few examples.
  prefs: []
  type: TYPE_NORMAL
- en: '**Wire-framing** is the first step in the web development, which means it has
    to deal with the location of the content on the page. If you already know the
    basics of web designing, this section will make much more sense to you. If not,
    first do some reading to get a basic idea of web development. Look up the difference
    between `div` and `span`, and then everything will make sense to you. You can
    learn more from here: [https://developer.mozilla.org/en-US/Learn/HTML](https://developer.mozilla.org/en-US/Learn/HTML).
    Bootstrap basic page wire-framing is divided into rows and columns; each column
    is further divided into 12 sections. With these subsections, you can use the permutation
    to get your layout designed.'
  prefs: []
  type: TYPE_NORMAL
- en: When we see a website from a developer's perspective, the first thing we notice
    is the wire-frame being used. For example, when you visit [www.facebook.com](http://www.facebook.com),
    you see your news feed in the center of the page and other important links (such
    as links to messages, pages, and groups) on the left-hand side of the page. On
    the right-hand side, you see your friends who are available to chat.
  prefs: []
  type: TYPE_NORMAL
- en: The same layout can be imagined in Bootstrap as 2-8-2\. The column for the left-hand
    side links will be a "2 column", the news feed will be an "8 column", and the
    chat section will be a "2 column". This is a basic wire-frame.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Remember the sum always has to be 12, as a live fluid grid system in Bootstrap
    works on 12-grid column principle for better and flexible layout.
  prefs: []
  type: TYPE_NORMAL
- en: Now, Bootstrap is not just for making a web page responsive–it has many other
    components to make web page look better and cleaner.
  prefs: []
  type: TYPE_NORMAL
- en: 'To use Bootstrap with Django, there are two ways:'
  prefs: []
  type: TYPE_NORMAL
- en: '**The Django way**: `pip install django-bootstrap3`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The Manual way**: Downloading the Bootstrap resources and copying them to
    a static location'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Django way
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you want to install Bootstrap using a command, then you have to append the
    `INSTALLED_APPS` variable from the `settings.py` file with `bootstrap3`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a sample Django template using this method for a simple HTML form:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To learn and explore more, you can refer to the following link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://django-bootstrap3.readthedocs.org/](http://django-bootstrap3.readthedocs.org/)'
  prefs: []
  type: TYPE_NORMAL
- en: Manual installation of Bootstrap
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This method is recommended for beginners, but once you are confident, you can
    make shortcuts by following the command method.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here we will learn the basic inclusion for the project files, and the rest
    will be covered in the upcoming chapters. Once you have downloaded the Bootstrap
    from the online source ([http://getbootstrap.com](http://getbootstrap.com)), the
    unzipped folder structure looks something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'There are two types of local file conventions used in Django: one is "Static"
    and another is "media". Static files refers to the assets of your project, such
    as CSS, JavaScript, and so on. Media files are represented by uploaded files in
    the project, mainly consisting of images, video for display or download, and so
    on.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Adding static files to your project can be done by adding following lines to
    the `setting.py` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Now, all you have to do is to create a folder inside your project directory
    and copy all the Bootstrap resources.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We prepared our development environment in this chapter, created our first project,
    set up the database, and learned how to launch the Django development server.
    We learned the best way to write code for our Django project and saw the default
    Django project structure. We learned about the naming convention, the significance
    of blank lines, and which style of import we should use and where.
  prefs: []
  type: TYPE_NORMAL
- en: We saw which editor and which IDE would be better for Python- and Django-based
    web development. We learned how to use Git to keep our code updated at the repository.
    We learned a bit about Bootstrap to work on frontend development.
  prefs: []
  type: TYPE_NORMAL
- en: The next chapter will take you through a tour of the main Django components
    and will help develop a working prototype for our Twitter application. It's going
    to be a fun chapter with many new things to learn, so keep reading!
  prefs: []
  type: TYPE_NORMAL
