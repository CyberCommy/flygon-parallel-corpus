- en: Chapter 9. Scaling Laravel
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A characteristic of frameworks built in any programming language is the use
    of various components. As we saw in the previous chapters, frameworks provide
    a software developer with many different prebuilt tools to accomplish tasks such
    as authentication, database interaction, and RESTful API creation.
  prefs: []
  type: TYPE_NORMAL
- en: However, regarding frameworks, scalability issues are always the worst fears
    of any manager in the information technology field. As with any library that uses
    existing code, there will be always some amount of overhead, some amount of bloat,
    something more than is actually needed.
  prefs: []
  type: TYPE_NORMAL
- en: Scalability issues
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are many reasons why a framework could not easily scale. Let''s look
    at a short list of issues:'
  prefs: []
  type: TYPE_NORMAL
- en: One issue is unnecessary code and packages that are not directly related to
    the actual application being built. Not every project needs authentication, for
    example, a database drivers per MySQL. Packages that are part of the core of the
    framework must be monitored for compatibility issues.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Design patterns, opinions, and learning curves often prevent new team members
    from getting familiar quickly. As the project expands, the day-to-day development
    needs to grow, and a software development group must continually recruit members
    who are either already somewhat familiar with a framework or at least understand
    its basic concepts.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Framework security issues require continual monitoring of the framework community's
    website or repository to gather information regarding emergency security updates
    that are required. Even the underlying web server and operating system itself
    need to be monitored. At the time of writing, Laravel 5.1 is nearing its release
    and it will require PHP 5.5, since PHP 5.4 will be declared end-of-life later
    in 2015.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ORMs such as Eloquent always add a slight amount of overhead, since the code
    needs to be converted first from Eloquent into the fluent query builder and then
    into PDO code. Obviously, using an object-oriented approach to query the database
    is a wise choice, but it has a cost.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Towards the enterprise
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Despite possible roadblocks, Laravel will continue to be a strong option in
    the future of enterprise. PHP 7 is going to be very fast, and frameworks such
    as Zend Framework 3 have already announced PHP 7 optimization in their road map.
    Also, by using the **FastCGI Process Manager** (**FPM**), NGINX web server, and
    allowing PHP's caching mechanisms to work properly, application scalability will
    continue to become more accepted in the enterprise space as its renaissance continues
    and new developers contribute to its core.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you will learn how to allow Laravel to perform better in the
    enterprise setting where scalability issues are paramount. First, router caching
    will be discussed. Then, you will learn about the many tools, techniques, and
    even new microframeworks that are being developed with scalability at the forefront.
    Specifically, we will discuss an official microframework derived from Laravel,
    **Lumen**. Finally, you will learn how to use the database efficiently through
    a technique called *read* and *write*.
  prefs: []
  type: TYPE_NORMAL
- en: In terms of the size of the code base, Laravel has one of the smallest code
    bases as compared to Zend or Symfony, although it does use some Symfony components.
    As mentioned in previous chapters, different packages were removed to lighten
    up the footprint, taking cues from Symfony's component-based ideology. For example,
    the HTML, SSH, and annotations packages are no longer included by default.
  prefs: []
  type: TYPE_NORMAL
- en: Route caching
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Route caching helps to speed things up. In Laravel 5, a caching mechanism was
    introduced to speed up the execution.
  prefs: []
  type: TYPE_NORMAL
- en: 'The example `routes.php` is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'By running the following command, Laravel will cache the routes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, place them into the following directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is a small portion of the resultant file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'As the DocBlock states, the routes are encoded in base64 and then serialized:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'This performs some precompilation. If we base64 decode the contents of the
    file, we obtain the serialized data. The following code is an extract of the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'If the `/vendor/routes.php` file exists, it is used instead of the `routes.php`
    file that is located at `/app/Http/routes.php`. If at some point using the route
    caching file is no longer desired, use the following `artisan` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: This command will delete the cached `routes` file and Laravel will begin using
    the `/app/Http/routes.php` file again.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'It is important to note that if there are any closures used in the `routes.php`
    file, then caching will fail. Here is an example of a closure in a route:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: It is inadvisable to use closure in the `routes.php` file for any reason. To
    be able to use route caching, relocate the code used within the closure into a
    controller.
  prefs: []
  type: TYPE_NORMAL
- en: Illuminate routing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'All of this work speeds up an important part of the request life cycle, the
    routing. In Laravel, the routing class is located inside the `illuminate/routing`
    namespace:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Examining the `use` operators, it is clear that the routing mechanism consists
    of quite a few classes. The most important line is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Laravel uses Symfony's routing class. However, a new routing package written
    by Nikita Popov has emerged. `FastRoute` is a fast request router that is faster
    than other routing packages and addresses some of the issues of the existing routing
    packages. This component is one of the major advantages of the of the Lumen microframework.
  prefs: []
  type: TYPE_NORMAL
- en: Lumen
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In soda marketing terms, Lumen could be considered Laravel *Light* or Laravel
    *Zero*. In addition to using the `FastRoute` routing package, many packages have
    been removed from Lumen, allowing it to be minimal and reduce its footprint.
  prefs: []
  type: TYPE_NORMAL
- en: Comparison between Laravel and Lumen
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The packages in Laravel and Lumen were compared and listed in the following
    table. These packages are installed when the following command is run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The preceding command is used when the development is completed and the application
    is ready for deployment on the server. Tools such as PHPUnit and PHPSpec are obviously
    excluded at this stage.
  prefs: []
  type: TYPE_NORMAL
- en: 'The package names are aligned to illustrate where the packages are present
    in both Laravel and Lumen:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Laravel Packages | Lumen Packages |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| - | `nikic/fast-route` |'
  prefs: []
  type: TYPE_TB
- en: '| `illuminate/cache` | - |'
  prefs: []
  type: TYPE_TB
- en: '| `illuminate/config` | `illuminate/config` |'
  prefs: []
  type: TYPE_TB
- en: '| `illuminate/console` | `illuminate/console` |'
  prefs: []
  type: TYPE_TB
- en: '| `illuminate/container` | `illuminate/container` |'
  prefs: []
  type: TYPE_TB
- en: '| `illuminate/contracts` | `illuminate/contracts` |'
  prefs: []
  type: TYPE_TB
- en: '| `illuminate/cookie` | `illuminate/cookie` |'
  prefs: []
  type: TYPE_TB
- en: '| `illuminate/database` | `illuminate/database` |'
  prefs: []
  type: TYPE_TB
- en: '| `illuminate/encryption` | `illuminate/encryption` |'
  prefs: []
  type: TYPE_TB
- en: '| `illuminate/events` | `illuminate/events` |'
  prefs: []
  type: TYPE_TB
- en: '| `illuminate/exception` | - |'
  prefs: []
  type: TYPE_TB
- en: '| `illuminate/filesystem` | `illuminate/filesystem` |'
  prefs: []
  type: TYPE_TB
- en: '| `illuminate/foundation` | - |'
  prefs: []
  type: TYPE_TB
- en: '| `illuminate/hashing` | `illuminate/hashing` |'
  prefs: []
  type: TYPE_TB
- en: '| `illuminate/http` | `illuminate/http` |'
  prefs: []
  type: TYPE_TB
- en: '| `illuminate/log` | - |'
  prefs: []
  type: TYPE_TB
- en: '| `illuminate/mail` | - |'
  prefs: []
  type: TYPE_TB
- en: '| `illuminate/pagination` | `illuminate/pagination` |'
  prefs: []
  type: TYPE_TB
- en: '| `illuminate/pipeline` | - |'
  prefs: []
  type: TYPE_TB
- en: '| `illuminate/queue` | `illuminate/queue` |'
  prefs: []
  type: TYPE_TB
- en: '| `illuminate/redis` | - |'
  prefs: []
  type: TYPE_TB
- en: '| `illuminate/routing` | - |'
  prefs: []
  type: TYPE_TB
- en: '| `illuminate/session` | `illuminate/session` |'
  prefs: []
  type: TYPE_TB
- en: '| `illuminate/support` | `illuminate/support` |'
  prefs: []
  type: TYPE_TB
- en: '| `illuminate/translation` | `illuminate/translation` |'
  prefs: []
  type: TYPE_TB
- en: '| `illuminate/validation` | `illuminate/validation` |'
  prefs: []
  type: TYPE_TB
- en: '| `illuminate/view` | `illuminate/view` |'
  prefs: []
  type: TYPE_TB
- en: '| `jeremeamia/superclosure` | - |'
  prefs: []
  type: TYPE_TB
- en: '| `league/flysystem` | - |'
  prefs: []
  type: TYPE_TB
- en: '| `monolog/monolog` | `monolog/monolog` |'
  prefs: []
  type: TYPE_TB
- en: '| `mtdowling/cron-expression` | `mtdowling/cron-expression` |'
  prefs: []
  type: TYPE_TB
- en: '| `nesbot/carbon` | - |'
  prefs: []
  type: TYPE_TB
- en: '| `psy/psysh` | - |'
  prefs: []
  type: TYPE_TB
- en: '| `swiftmailer/swiftmailer` | - |'
  prefs: []
  type: TYPE_TB
- en: '| `symfony/console` | - |'
  prefs: []
  type: TYPE_TB
- en: '| `symfony/css-selector` | - |'
  prefs: []
  type: TYPE_TB
- en: '| `symfony/debug` | - |'
  prefs: []
  type: TYPE_TB
- en: '| `symfony/dom-crawler` | - |'
  prefs: []
  type: TYPE_TB
- en: '| `symfony/finder` | - |'
  prefs: []
  type: TYPE_TB
- en: '| `symfony/http-foundation` | `symfony/http-foundation` |'
  prefs: []
  type: TYPE_TB
- en: '| `symfony/http-kernel` | `symfony/http-kernel` |'
  prefs: []
  type: TYPE_TB
- en: '| `symfony/process` | - |'
  prefs: []
  type: TYPE_TB
- en: '| `symfony/routing` | - |'
  prefs: []
  type: TYPE_TB
- en: '| `symfony/security-core` | `symfony/security-core` |'
  prefs: []
  type: TYPE_TB
- en: '| `symfony/var-dumper` | `symfony/var-dumper` |'
  prefs: []
  type: TYPE_TB
- en: '| `vlucas/phpdotenv` | - |'
  prefs: []
  type: TYPE_TB
- en: '| `classpreloader/classpreloader` | - |'
  prefs: []
  type: TYPE_TB
- en: '| `danielstjules/stringy` | - |'
  prefs: []
  type: TYPE_TB
- en: '| `doctrine/inflector` | - |'
  prefs: []
  type: TYPE_TB
- en: '| `ext-mbstring` | - |'
  prefs: []
  type: TYPE_TB
- en: '| `ext-mcrypt` | - |'
  prefs: []
  type: TYPE_TB
- en: At the time of writing, there are 51 packages (shown in the left column) that
    are installed in Laravel 5.0 using the nondevelopment configuration. Compare this
    number of packages to the number of packages installed in Lumen (shown in the
    right column)—there are just 24.
  prefs: []
  type: TYPE_NORMAL
- en: The aforementioned `nikic/fast-route` package is the only package that Lumen
    has which Laravel does not. The `symfony/routing` package is the complimentary
    package found in Laravel.
  prefs: []
  type: TYPE_NORMAL
- en: Lean application development
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will use an example, a simple public-facing RESTful API. This RESTful API
    displays the names and addresses of a list of accommodations in JSON format to
    any user via `GET`:'
  prefs: []
  type: TYPE_NORMAL
- en: If no passwords are to be used, then `ext/mcrypt` is not needed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If no date calculations are to performed, then `nesbot/carbon` is not needed.
    Since there is no HTML interface, then the following libraries involved in testing
    the HTML of an application, `symfony/css-selector` and `symfony/dom-crawler`,
    will not be needed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If no e-mail is to be sent to the user, then neither `illuminate/mail` nor `swiftmailer/swiftmailer`
    is needed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If no special interaction with the filesystem is needed, then there is no need
    for `league/flysystem`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If not commands that are to run from the command line, then the `symfony/console`
    is not needed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If Redis is not needed, then `illuminate/redis` may be left out.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If specific configuration values will not be needed for different environments,
    then `vlucas/phpdotenv` is not needed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `vlucas/phpdotenv` package is a suggested package in the `composer.json`
    file.
  prefs: []
  type: TYPE_NORMAL
- en: It is clear that the decision to remove certain packages has been done carefully
    so as to lighten up Lumen as needed with the simplest of applications in mind.
  prefs: []
  type: TYPE_NORMAL
- en: Read/write
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Laravel has another great mechanism for helping its performance in the enterprise:
    read and write. This is related to database performance, but the functionality
    is so easy to set up that any application can take advantage of its usefulness.'
  prefs: []
  type: TYPE_NORMAL
- en: Regarding MySQL, the original MyISAM database engine required a lock on the
    entire table during inserts, updates, and deletes. This caused massive bottlenecks
    during large operations that modified the data and select queries waited to access
    these tables. With the introduction of InnoDB, `UPDATE`, `INSERT`, and `DELETE`
    SQL statements required a lock only at the row-level. This tremendously impacted
    performance, since selects could read from various parts of a table where other
    operations were taking place.
  prefs: []
  type: TYPE_NORMAL
- en: MariaDB, a MySQL fork, claims faster performance than the traditional MySQL.
    Replacing the database engine with TokuDB will give even higher performance, especially
    in a big data setting.
  prefs: []
  type: TYPE_NORMAL
- en: Another mechanism to speed up performance of the database is the use of a master/slave
    configuration. In the following diagram, all of the operations are performed on
    a single table. The inserts and updates will lock down single rows and the select
    statements will be performed as allocated.
  prefs: []
  type: TYPE_NORMAL
- en: '![Read/write](graphics/B04559_09_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Traditional database table actions
  prefs: []
  type: TYPE_NORMAL
- en: Master table
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The master/slave configuration uses a master table that allows `SELECT`, `UPDATE`,
    and `DELETE` statements. These statements modify the table or write to it. There
    may also be multiple master tables. Each master table is kept continually synchronized:
    changes made to any table needs to be communicated to the master table.'
  prefs: []
  type: TYPE_NORMAL
- en: Slave table
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The slave table is a slave to the master. It depends on the master table for
    its changes. SQL clients can only perform read operations (`SELECT`) from it.
    There may also be multiple slaves that depend on one or more multiple master tables.
    The master table communicates all of its changes to all the slaves. The following
    diagram shows the basic architecture of a master/slave setup:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Slave table](graphics/B04559_09_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Master and slave (read/write setup)
  prefs: []
  type: TYPE_NORMAL
- en: 'This continual synchronization adds slight overhead to the database structure;
    however, it presents important advantages:'
  prefs: []
  type: TYPE_NORMAL
- en: Since only `SELECT` statements can be performed on the slave table while `INSERT`,
    `UPDATE`, and `DELETE` statements can be performed on the master table, the slave
    table is free to accept many `SELECT` statements freely, without having to "wait"
    for any operations involving the same rows to finish.
  prefs: []
  type: TYPE_NORMAL
- en: An example of this would be a currency exchange rate or stock price table. This
    table would be continually updated in real time with the latest values, possibly
    even many times per second. Obviously, a website that allows many users to access
    this information could potentially have thousands of visitors. Also, the web page
    used to display this data may make continual multiple requests per user.
  prefs: []
  type: TYPE_NORMAL
- en: Performing many `SELECT` statements would be slightly slower when there are
    `UPDATE` statements that need to access the same data at the same time.
  prefs: []
  type: TYPE_NORMAL
- en: By using a master/slave configuration, the `SELECT` statements would be performed
    only on the slave table. This table receives only the data that has changed in
    an extremely optimized way.
  prefs: []
  type: TYPE_NORMAL
- en: 'In plain PHP using a library such as `mysqli`, there could be two database
    connections configured:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: In this simplified example, the slave is set up on the same server machine.
    In a real application, it would most likely be set up on another server machine
    to take advantage of separate hardware.
  prefs: []
  type: TYPE_NORMAL
- en: Then, all of the SQL statements which involve a *write* statement would be performed
    on the slave and *read* would be performed on the master.
  prefs: []
  type: TYPE_NORMAL
- en: 'This would add some overhead to the programming efforts, as a different connection
    would need to be passed into each SQL statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code example, it would be prudent to remember which SQL statements
    should be used for the master and which SQL statements should be used for the
    slave.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring read/write
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As stated before, code written in Eloquent is converted into fluent query-builder
    code. This code is then converted to PDO, which is a standard wrapper around the
    various database drivers.
  prefs: []
  type: TYPE_NORMAL
- en: Laravel provides the ability to manage master/slave configurations though its
    read/write configuration. This allows programmers to write Eloquent and fluent
    query-builder code without having to worry about whether the queries will be executed
    on the master or slave table. Also, a software project that starts out with a
    non-master/slave configuration and later needs to scale up to a master/slave setup
    will only need to change one aspect of the database configuration. The database
    configuration file is located at `config/database.php`.
  prefs: []
  type: TYPE_NORMAL
- en: 'As an element of the `connections` array, an entry with the key `mysql` will
    be created with the following configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: The read and write represent slave and master respectively. Since the parameters
    cascade, if the username, password, and database name are the same, then only
    the IP address of the host name needs to be listed. However, any values can be
    overridden. In this example, the read has a password that is different from that
    of the master and the write has a username that is different from the slave.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a master/slave database configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To set up a master/slave database, perform the following steps from the command
    line.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first step is to determine which address the MySQL server is bound to.
    To do this, locate the line of the MySQL configuration file that contains the
    bind-address parameter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: This IP address will be set to whichever IP address the master server uses.
  prefs: []
  type: TYPE_NORMAL
- en: Next, uncomment the line of the MySQL configuration file that contains the `server-id`,
    which is most probably located at `/etc/my.cn` or `/etc/mysql/mysql.conf.d/mysqld.cnf`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The Unix `sed` command can perform this easily:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `/etc/mysql/my.cnf` string will need to be substituted with the correct
    filename.
  prefs: []
  type: TYPE_NORMAL
- en: 'Uncomment the line of the MySQL configuration file that contains the `server-id`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Again, the `/etc/mysql/my.cnf` string will need to be substituted with the correct
    filename.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, MySQL needs to be restarted. You can do this using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'The following placeholders should be substituted with the actual values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Master server set up
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following are the steps for setting up a master server:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Grant permission to the slave database user:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, the permissions must be flushed using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, switch to the master database using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, flush the tables using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Display the master database status using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Take note of the position and filename from the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Dump the master database using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Unlock the tables using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Slave server set up
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following are the steps for setting up a slave server:'
  prefs: []
  type: TYPE_NORMAL
- en: 'On the slave server, create the slave database using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Import the dump file created from the master database using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, the MySQL configuration file uses server-id 2:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'In the MySQL configuration file, two lines should be uncommented, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'You will get the following result:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Additionally, the following line needs to be added below `binglog_do_db`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, MySQL needs to be restarted using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, the master password is set. The master log file and positions are
    to be set to the filename and the position recorded in step 5\. Run the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned how to speed up the routing through route caching.
    You also learned how to replace Laravel entirely with Lumen, the microframework
    entirely derived from Laravel. Finally, we discussed how Laravel can use a read
    and write configuration to take full advantage of a master and slave configuration.
  prefs: []
  type: TYPE_NORMAL
- en: Symfony 2.7 was released in May, 2015\. It is a long-term support version. This
    version will be supported for 36 months. Shortly after that, Taylor Otwell made
    the decision to create the first LTS version of Laravel. This is the first sign
    that Laravel is firmly positioned in the enterprise space. There is no formal
    company behind Laravel yet, as there is in the case of Symfony and Zend. Yet there
    is a large ecosystem of community packages and services such as Laracasts, run
    by Jeffrey Way who works very closely with Taylor to provide official training
    videos.
  prefs: []
  type: TYPE_NORMAL
- en: Also, Taylor Otwell runs a service called Envoyer that removes any and all of
    the initial barriers to Laravel deployment and provides *zero downtime* deployment
    for Laravel as well as other types of modern PHP projects.
  prefs: []
  type: TYPE_NORMAL
- en: With the arrival of Laravel 5.1 LTS, many new and exciting things will be happening
    for Laravel. The decision to use many community packages allows Taylor and his
    community to focus on the most important aspects of the framework without having
    to reinvent the wheel and maintain many redundant packages. Also, Laravel Collective
    maintained the packages that have been deprecated—even packages that are eventually
    removed from Laravel will continue to be supported for many years to come.
  prefs: []
  type: TYPE_NORMAL
- en: 'In addition to convenient services, such as Envoyer, the next chapter will
    present a great automation tool that has recently emerged: Elixir.'
  prefs: []
  type: TYPE_NORMAL
