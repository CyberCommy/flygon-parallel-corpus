- en: Chapter 14. Creating an E-Commerce Application Using the Ionic Framework
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will bring together all the knowledge that we accumulated
    in this book until now and implement it in an easy-to-use Ionic framework, which
    can be applied in our own projects.
  prefs: []
  type: TYPE_NORMAL
- en: In particular, in this chapter, we will build on the work that has already been
    done in [Chapter 3](ch03.html "Chapter 3. Creating an API"), *Creating an API*,
    and we will use this work with an Ionic project, which will be accessible through
    an Android or iOS smartphone.
  prefs: []
  type: TYPE_NORMAL
- en: Designing our application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As part of the application development process, it is important that we understand
    how we will structure our application and connect it to the product API in order
    to achieve our final goal of creating a basic e-commerce application.
  prefs: []
  type: TYPE_NORMAL
- en: For this particular project, we will work on two main screens—the product's
    list items, the controller, and the product page. In addition to this, we will
    also focus on creating a basic functional side menu and a rudimentary purchasing
    option, which is nonfunctional at this stage.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an Ionic project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will start off our project by creating a project based on one of the Ionic
    starter templates that we didn't have an opportunity to use in the previous chapters.
    The side menu templates provide us with a side menu, a list item's view, and a
    list item's detailed view. This template should give us the necessary groundwork
    to create the ideal e-commerce application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open your terminal and input the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding command will create a project folder with the `sidemenu` project.
    In order to further understand how this template works, we encourage you to first
    navigate to the `project` folder and then input the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'This will open the browser of your choice and give you a side-by-side view
    of how the application will look on an Android and iOS device:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating an Ionic project](img/B04653_14_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Implementing our designs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When implementing our designs, we need to reflect the necessary changes within
    the app's code. We will first start off by modifying our controllers.
  prefs: []
  type: TYPE_NORMAL
- en: We will first begin by navigating to `app.js`, which is available at the path
    `www/js/app.js`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will replace the existing code in `app.js` with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The aforementioned code will allow us to implement the different screens that
    form a part of our app, namely the `products` page, the individual product, and
    the search functionality, which will not be implemented in the current version
    of the application.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next step in our modification stage is to implement the necessary changes
    in our app `controllers`, which are based in the `controllers.js` file. Go ahead
    and replace the existing code with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: As you can see in the preceding code, we declared an array of `products`. At
    this point in time, this declares a product title through the `title` variable,
    the product ID through `id`, and price through `price`. Last but not least, in
    order to spice things up, we also added a link to a thumbnail image generator
    supported by [http://loremflickr.com](http://loremflickr.com).
  prefs: []
  type: TYPE_NORMAL
- en: The current setup will not reflect in the frontend of our mobile application
    because we haven't done the necessary changes in the HTML files.
  prefs: []
  type: TYPE_NORMAL
- en: We will first rename `playlist.html` and `playlists.html` to `product.html`
    and `products.html` respectively. We can find both of these files at the `www/templates/playlist.html`
    and `www/templates/playlists.html` path.
  prefs: []
  type: TYPE_NORMAL
- en: We will then navigate to the `menu.html` file, which is available at the `www/templates/menu.html`
    path.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will replace the existing code in the preceding path with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, we replaced the old reference to different template files
    with the more recent ones, which reflect our most recent changes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Following this, we will proceed and modify the `product.html` file to to give
    our application a more product-like appearance. In addition to this, this page
    will also include an image placeholder, `Product Description`, `Price`, and a
    rudimentary `Add to Basket` button. In future iterations of the application, this
    will allow users to add a product to a virtual shopping basket when they wish
    to buy the necessary items. We will replace the existing code in `product.html`
    with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'In the final step of modifying the HTML files, we will need to modify the `products.html`
    file to show the product title and product image using AngularJS. Replace the
    existing code with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: In the aforementioned code, we extracted the `product.image` and `product.title`
    declared in `app.js` and reproduced it in the `ion-view` tag. We also personalized
    it and included the currency and how much the product costs per kilogram.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the product API
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: What we have implemented until now is a very simplified version of what we would
    like to achieve. Since we want to create projects that use MongoDB, Node.js and
    Ionic, we should take the opportunity to create an application that connects to
    our locally stored backend with a view of using this knowledge to connect to Internet-based
    servers powered by Node.js and MongoDB.
  prefs: []
  type: TYPE_NORMAL
- en: In order to take advantage of this section, you will need to follow the instructions
    available in [Chapter 3](ch03.html "Chapter 3. Creating an API"), *Creating an
    API*, that are required to set up your very own Node.js server and include a basic
    set of data.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you''ve performed all the necessary steps, go ahead and find out what
    the current entries on our server are by first running the `mongodb` database.
    We will do this by first navigating to the `order_api` folder and running the
    following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'We shall start the Node.js server in our terminal by using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'If you adhered to the instructions given in [Chapter 3](ch03.html "Chapter 3. Creating
    an API"), *Creating an API*, the following message will appear:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Up, running and ready for action!**'
  prefs: []
  type: TYPE_NORMAL
- en: 'At this point, we will open the installed REST client and pass the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'If you have a response similar to the one as follows, then you should consider
    your attempt at creating a server to be successful:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Connecting the product API to our Ionic app
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Once you have managed to get a response from the server and have the server
    and database up and running, you need to replace the existing array in the `app.js`
    file with the one from the local host.
  prefs: []
  type: TYPE_NORMAL
- en: 'Since the web server is based locally, you will need to enable cross-origin
    resource sharing, which is currently attainable in the easiest way through Google
    Chrome and by enabling the **CORS** (**cross-origin Resource sharing**) Chrome
    extension, which is available at [https://goo.gl/oQNhwh](https://goo.gl/oQNhwh).
    The extension is also available at the Chrome Web Store if you look for **Allow-Control-Allow-Origin:
    ***.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We will first start off our project by navigating to the `ionic.project` file,
    which is available in the `root` folder, and adding the following code to `ionic.project`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: The `http://cors.api.com/api` URL here acts as a placeholder URL in order to
    enable local development and cross-origin resource sharing.
  prefs: []
  type: TYPE_NORMAL
- en: This modification will help us add a proxy URL, which will allow cross-origin
    resource sharing.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will also modify the `gulpfile.js` file by adding two variables and two
    tasks, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'To make sure that the `gulpfile` functions correctly, we encourage you to make
    sure that `gulp` is installed correctly by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Using `gulp`, we will also need to install `replace`. This is a `gulp` dependency,
    which will allow us to add the proxy functionality to the project by allowing
    for string replacement. This can be enabled by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'In order to facilitate cross-origin resource sharing in Ionic, we will also
    need to use a `factory` method, which will be done by creating a new JavaScript
    file entitled `services` in the `www/js` folder, which contains the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'In order to create the preceding code, we will need to reference `services.js`
    in the `index.html` file and `app.js` file. We will add the following code to
    the `index.html` `head` tag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'In addition to this, we will update the `app.js` file to include our new constant,
    which has already been referenced in the `services.js` file. This will be updated
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In order to facilitate your coding experience, we uploaded all our code to the
    GitHub repository, which is available at [https://github.com/stefanbuttigieg/nodejs-ionic-mongodb/tree/master/chapter-14](https://github.com/stefanbuttigieg/nodejs-ionic-mongodb/tree/master/chapter-14).
  prefs: []
  type: TYPE_NORMAL
- en: 'The connection of our locally created REST API to our Angular controller will
    be made available to the user by updating the `product` controller entitled `ProductsCtrl`.
    The code needs to be updated as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'This code modification removes the JSON array and replaces it with code that
    extracts data from the JSON available on the local web server and makes it available
    in our `controller`. The finishing touch has to be implemented through the `products.html`
    file. Here, we will update the file to contain a generic image placeholder. We
    will make slight modifications to the `products.html` file to make it work with
    our very own JSON file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the preceding code is implemented, feel free to navigate to the `root`
    folder of the `grocerApp` software and run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'The final app should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Connecting the product API to our Ionic app](img/B04653_14_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we brought together a number of skills that we managed to develop
    over the past few chapters. It's important to note that we managed to connect
    an API that we created from scratch and a cross-platform application that we implemented
    via the Ionic framework. As regards to e-commerce, there are a number of open
    source solutions such as **Traider.io** and **ReactionCommerce**. These solutions
    have expanded functionalities and are in the process of improving through community
    contributions, especially with regards to the REST API services. In addition to
    this, they make use of MongoDB and Node.js.
  prefs: []
  type: TYPE_NORMAL
- en: The Ionic framework is an ever-growing platform in all aspects. As we mentioned
    earlier in this book, the Ionic framework team released a number of updates with
    a number of new features. We are excited about this, and we believe that it's
    priceless to invest energy and time to further understand this platform.
  prefs: []
  type: TYPE_NORMAL
