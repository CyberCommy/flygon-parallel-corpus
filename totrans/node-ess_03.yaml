- en: Chapter 3. Authentication
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We can now create RESTful APIs, but we don't want everyone to access everything
    we expose. We want the routes to be secure and to be able to track who is doing
    what.
  prefs: []
  type: TYPE_NORMAL
- en: Passport is a great module and another middleware that helps us authenticate
    requests.
  prefs: []
  type: TYPE_NORMAL
- en: Passport exposes a simple API for providers to expand on and create strategies
    to authenticate users. At the time of writing, there are 307 officially supported
    strategies; however, there is no reason why you can't write your own strategy
    and publish it for others to use.
  prefs: []
  type: TYPE_NORMAL
- en: Basic authentication
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The simplest strategy for passport is the local strategy that accepts a username
    and password.
  prefs: []
  type: TYPE_NORMAL
- en: We will introduce the express framework for these examples and, now that you
    know the basics of how it all works underneath, we can put it all together.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can install `express`, `body-parser`, `passport`, and `passport-local`.
    Express is a batteries-included Web framework for Node.js, and includes routing
    and the ability to use middleware:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'For now, we can store our users in a simple object to reference later, as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Once we have a few users, we need to set up passport. When we create an instance
    of the local strategy, we need to provide a `verify` callback where we check the
    username and password, while returning a user:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The `verify` callback in this case is expecting `done` to be called with a user.
    It also allows us to provide information if the user was invalid or the password
    was wrong.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, that we have a strategy we can pass this to passport, which allows us
    to reference it later and use it to authenticate our requests, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: You can use multiple strategies per application and reference each one by the
    name you passed, in this case `'local'`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s create our server, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'We will have to use the `body-parser` middleware. This will ensure that, when
    we post to our login route, we can read our body; we also need to initialize passport:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'To login to our application, we need to create a `post` route that uses authentication
    as one of the handlers. The code for this is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Now, when we send a `POST` request to `/login` the server will authenticate
    our requests.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once authenticated, the `user` property will be populated on the request object,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Lastly, we need to listen for requests, as with all the other servers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Lets run the example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Now, we can authenticate users when we send a `POST` request at our server.
    If the user hasn't passed both the username and password the server will return
    `400 Bad Request`.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you aren''t familiar with `curl` you could use a tool, such as Advanced
    REST Client:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://chromerestclient.appspot.com/](https://chromerestclient.appspot.com/)'
  prefs: []
  type: TYPE_NORMAL
- en: In the following examples I will be using the command line interface `curl`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can execute a login request by executing a `POST` to `/login` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'If the user provides the wrong details then `401 Unauthorized` will be returned:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'If we provide the correct details then we can see our handler was called and
    the correct data was returned:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Bearer tokens
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have an authenticated user, we can generate a token that can be
    used with the rest of our requests rather than passing our username and password
    everywhere. This is commonly known as a Bearer token and, conveniently, there
    is a passport strategy for this.
  prefs: []
  type: TYPE_NORMAL
- en: For our tokens, we will use something called a **JSON Web Token** (**JWT**).
    JWT allows us to encode tokens from JSON objects and then decode them and verify
    them. The data stored in them is open and simple to read, so passwords shouldn't
    be stored in them; however, it makes verifying a user very simple. We can also
    provide these tokens with expiry dates, which helps limit the severity of tokens
    being exposed.
  prefs: []
  type: TYPE_NORMAL
- en: You can read more about JWT at [http://jwt.io/](http://jwt.io/).
  prefs: []
  type: TYPE_NORMAL
- en: 'We can install JWT using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Once a user is authenticated, we can safely provide them with a token to use
    in future requests:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Now, when the user logs in they will be presented with a token to use that we
    can verify.
  prefs: []
  type: TYPE_NORMAL
- en: 'Lets run our Node.js server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'When we login now we receive a token:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'We can enter this into the debugger at [http://jwt.io/](http://jwt.io/) and
    see the contents, as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'If we had the secret we could verify that the token is correct. The signature
    changes every time we request a token:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'We can authenticate a user using `passport-bearer`; it is set up very similar
    to `passport-local`. However, rather than accepting a username and password from
    the body, we accept a bearer token; this can be passed using the query string,
    body, or the `Authorization` header:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First we must install `passport-http-bearer`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'The let''s create our verifier. There are two steps: the first is ensuring
    the decoded information matches our user, this will be where we usually retrieve
    our user; then'' once we have a user and it''s valid, we can check whether the
    token is valid based on the user''s secret:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'We can register this strategy as the bearer so we can use it later:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'We can create a simple route where we retrieve user details for an authenticated
    user:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s run the Node.js server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Once we receive a token:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'We can use the result in our requests:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: OAuth
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: OAuth provides many advantages; for instance, it does not need to deal with
    the actual identification of users. We can let users login using services they
    trust, such as Google, Facebook, or Auth0.
  prefs: []
  type: TYPE_NORMAL
- en: 'For the following examples, I will be using `Auth0`. They provide a free account
    for you to get up-and-running: [https://auth0.com/](https://auth0.com/).'
  prefs: []
  type: TYPE_NORMAL
- en: You will need to sign up and create an `api` (choose `AngularJS + Node.js`),
    then go to Settings and take down the domain, client id, and client secret. You
    will need these to set up `OAuth`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can authenticate using OAuth using `passport-oauth2`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'As with our bearer tokens, we want to validate what the server returns, which
    will be a user object that has an id. We will match this with a user that is in
    our data or create a new user:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Once we have a function to validate our users we can put together the options
    for our OAuth strategy:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Then we create our strategy, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Before we use our strategy we need to duck type the strategies `userProfile`
    method with our own, this is so we can request the user object to use in `validateOAuth`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'We can register this strategy as `oauth` so we can use it later:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'We need to create two routes to handle our OAuth authentication: one route
    to start the flow and the other for the identification server to return to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: We can use our `generateTokenHandler` here, as our request will have a user
    on it.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: We can now start our server and request `http://localhost:8080/oauth`; the server
    will redirect you to `Auth0`. Once logged in, you will receive a token that you
    can use with `/userinfo`.
  prefs: []
  type: TYPE_NORMAL
- en: If you were using sessions, you could save the user to the session and redirect
    them back to your front page (or the default page set for a logged in user). For
    a single-page app, when using something like Angular, you may want to redirect
    the user with a token in the URL for the client framework to grab onto and save.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We can now authenticate users; this is great as we can now figure out who the
    people are and then limit the users to certain resources.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter we will cover debugging, we may need to use it if our users
    aren't being authenticated.
  prefs: []
  type: TYPE_NORMAL
- en: 'Prepared for Bentham Chang, Safari ID bentham@gmail.com User number: 2843974
    © 2015 Safari Books Online, LLC. This download file is made available for personal
    use only and is subject to the Terms of Service. Any other use requires prior
    written consent from the copyright owner. Unauthorized use, reproduction and/or
    distribution are strictly prohibited and violate applicable laws. All rights reserved.'
  prefs: []
  type: TYPE_NORMAL
