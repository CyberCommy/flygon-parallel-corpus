- en: Instrumenting Application State with Redux
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Redux is the de facto library for managing state in your React applications.
    On their own, React applications can manage the state of their components using
    nothing but `setState()`. The challenge with this approach is that there's nothing
    controlling the ordering of state changes (think about asynchronous calls like
    HTTP requests).
  prefs: []
  type: TYPE_NORMAL
- en: The aim of this chapter isn't to introduce you to Redux—there are plenty of
    resources for this, including Packt books and the official Redux documentation.
    So, if you're new to Redux, you might want to spend 30 minutes familiarizing yourself
    with the basics of Redux before continuing here. The focus of this chapter is
    the tooling that you can enable within your web browser. I think that a significant
    portion of the value of Redux comes from the Redux DevTools browser extension.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, you''ll learn:'
  prefs: []
  type: TYPE_NORMAL
- en: How to build a basic Redux app (without going into depth on Redux concepts)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing the Redux DevTools Chrome extension
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Selecting Redux actions and examining their contents
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to use time-travel debugging techniques
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Triggering actions manually to change state
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exporting application state and importing it later
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building a Redux app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The example application that you'll use in this chapter is a basic book manager.
    The goal is to have something that has enough functionality to demonstrate different
    Redux actions, but simple enough that you can learn Redux DevTools without feeling
    overwhelmed.
  prefs: []
  type: TYPE_NORMAL
- en: 'The high-level functionality of this application is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Renders a list of books that you want to keep track of. Each book displays the
    title, author, and cover image of the book.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Allows the user to filter the list by typing in a text input.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The user can create a new book.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The user can select a book to view more details.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Books can be deleted.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's spend a few minutes walking through the implementation of this app before
    you dive into the Redux DevTools extension.
  prefs: []
  type: TYPE_NORMAL
- en: The App component and state
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `App` component is the outer shell of the book manager application. You
    can think of `App` as the container for every other component that gets rendered.
    It is responsible for rendering the left-hand side navigation, and for defining
    the routes of the application so that the appropriate components are mounted and
    unmounted as the user moves around. Here''s what the implementation of `App` looks
    like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The `connect()` function from the `react-redux` package is used to connect the
    `App` component to the Redux store (where your application state lives). The `mapState()`
    and `mapDispatch()` functions add props to the `App` component—state values and
    action dispatcher functions respectively. So far, the `App` component has only
    one state value and no action dispatcher functions.
  prefs: []
  type: TYPE_NORMAL
- en: 'For a more in-depth look at how to connect React components to Redux stores,
    take a look at this page: [https://redux.js.org/basics/usage-with-react](https://redux.js.org/basics/usage-with-react).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at the `app()` reducer function next:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: There isn't much to the state used by `App` except a `title`. In fact, this
    `title` never changes. The reducer function simply returns the state that's passed
    to it. You don't actually need a `switch` statement here because there are no
    actions to handle. However, the `title` state is likely something that will change
    based on actions—you just don't know yet. It's never a bad idea to set up reducer
    functions like this so that you can connect a component to the Redux store, and
    so that once you identify an action that should cause a state change, you have
    a reducer function ready to handle it.
  prefs: []
  type: TYPE_NORMAL
- en: The Home component and state
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `Home` component is the first component that is rendered as a child component
    of `App`. The route for `Home` is `/`, and this is where the filter text input
    and book list are rendered. Here is what the user will see when they first load
    the app:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/0a050df1-aad0-4cee-8122-e23050da6408.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To the left, you have the two navigation links that are rendered by the `App`
    component. To the right of these links you have the filter text input, followed
    by the list of books—React books no less. Now, let''s take a look at the `Home`
    component implementation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The key things to pay attention to here:'
  prefs: []
  type: TYPE_NORMAL
- en: The `componentWillMount()` calls `fetchBooks()` to load book data from the API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `Loading` component is used to display loading text while books are being
    fetched
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `Home` component defines functions that dispatch actions, something you'll
    want to look at using Redux DevTools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The book and filter data come from the Redux store
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here''s the reducer function that handles actions and maintains state relevant
    to this component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: If you look at the `initialState` object, you can see that `Home` depends on
    a `books` array, a `filterValue` string, and a `loading` Boolean. Each of the
    action cases within the `switch` statement changes part of this state. While it
    might be a little tricky to decipher what's happening by looking at this reducer
    code, combined with Redux browser tooling, the picture becomes clear because you
    can map what you're seeing in the app back to this code.
  prefs: []
  type: TYPE_NORMAL
- en: The NewBook component and state
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Under the Home link in the left-hand side navigation, there is a NewBook link.
    Clicking on this link will take you to the form that allows you to create a new
    book. Let''s take a look at the `NewBook` component source now:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: If you look at the markup that's used to render this component, you'll see that
    there are three input fields. The values of these fields are passed as props.
    The connection to the Redux store is actually where these props come from. As
    their state changes, the `NewBook` component is re-rendered.
  prefs: []
  type: TYPE_NORMAL
- en: 'The dispatch functions that are mapped to this component are responsible for
    dispatching actions that maintain the state of this component. Their responsibilities
    are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`onTitleChange()`: Dispatches the `SET_NEW_BOOK_TITLE` action along with the
    new `title` state'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onAuthorChange()`: Dispatches the `SET_NEW_BOOK_AUTHOR` action along with
    the new `author` state'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onImageURLChange()`: Dispatches the `SET_NEW_BOOK_IMAGE_URL` action along
    with the new `imgURL` state'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`onCreateBook()`: Dispatches the `CREATING_BOOK` action then dispatches the
    `CREATED_BOOK` action when the `createBook()` API call returns'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Don't worry if it's not clear how all of these actions result in high-level
    application behavior. This is why you're going to install Redux DevTools shortly,
    so that you can understand what's happening with your application state as it
    changes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s the reducer function that handles these actions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, here''s what the new book form looks like when rendered:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/dbcc1d82-4baf-4e9a-9c23-2ce022aad8c2.png)'
  prefs: []
  type: TYPE_IMG
- en: When you fill out these fields and click on the Create button, the new book
    will be created by the mock API and you'll be taken back to the Home page, where
    the new book should be listed.
  prefs: []
  type: TYPE_NORMAL
- en: The API abstraction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For this application, I''m using a simple API abstraction. In Redux apps, you
    should be able to have your asynchronous functionality—API or otherwise—encapsulated
    in its own module or package. Here''s what the `api.js` module looks like, with
    some of the mock data redacted for brevity:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: To get started with building your Redux app, this is all you need. The important
    thing to note here is that each of these API functions returns a `Promise` object.
    For good measure, I'm adding some simulated latency because this more closely
    resembles a real API. Something you don't want to do with your API abstractions
    is have them return regular values—like objects or arrays. If they're going to
    be asynchronous when interacting with a real API, make sure that the initial mocks
    are asynchronous as well. Otherwise, this is exceedingly difficult to correct.
  prefs: []
  type: TYPE_NORMAL
- en: Putting it all together
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s quickly look at the source files that bring everything together to give
    you a sense of completeness. Let''s start with `index.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'This looks just like most `index.js` files in `create-react-app` that you''ve
    worked with so far in this book. Instead of rendering an `App` component, it''s
    rendering a `Root` component. Let''s look at this next:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The job of `Root` is to wrap the `App` component with a `Provider` component
    from `react-redux`. This component takes a `store` prop, which is how you're able
    to ensure that connected components have access to Redux store data.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at the `store` prop next:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Redux has a `createStore()` function that builds a store for your React app.
    The first argument is the reducer function that handles actions and returns the
    new state of the store. The second argument is an enhancer function that can respond
    to changes in store state. In this case, you want to check if the Redux DevTools
    browser extension is installed and if it is, then connect it to your store. Without
    this step, you won't be able to use browser tooling with your Redux app.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''re almost done. Let''s look at the `reducers/index.js` file that combines
    your reducer functions into one function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Redux has only one store. In order to subdivide your store into slices of state
    that map to the concepts of your application, you name the individual reducer
    functions that handle the various slices of state and pass them to `combineReducers()`.
    With this app, your store has the following slices of state that can be mapped
    to components:'
  prefs: []
  type: TYPE_NORMAL
- en: '`app`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`home`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`newBook`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`bookDetails`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now that you've seen how this app is put together and how it works, it's time
    to start instrumenting it with the Redux DevTools browser extension.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Redux DevTools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Installing the Redux DevTools browser extension follows a process similar to
    the one used to install the React Developer Tools extension. The first step is
    to open the Chrome Web Store and search for `redux`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/a957174c-636f-4f30-95c0-6003d056f060.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The extension that you''re looking for will likely be the first result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/4096be9e-1222-468c-9bb0-f7584bcc05f4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Go ahead and click on the Add To Chrome button. You''ll then see a dialog that
    asks for your permission to install the extension after showing you what it can
    change:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/2bd0242f-e927-4bb9-b575-790da2950230.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After you click on the Add extension button, you''ll see a notification that
    the extension has been installed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/b3d17380-897b-4aee-ada0-3589c61405f5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Just like the React Developer Tools extension, the Redux DevTools icon will
    remain disabled until you open a page that is running Redux and has added support
    for the tool. Recall that you explicitly added support for this tool in the book
    manager app with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let''s fire up the book manager app and make sure that you can use the
    extension with it. After running `npm start` and waiting for the UI to open and
    load in a browser tab, the React and Redux developer tool icons should both be
    enabled:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/16668166-462b-4619-a3bd-8a90e1e74ac4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, open up the developer tools browser pane. You can access the Redux DevTools
    the same way that you would access the React Developer Tools:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/a4b67925-eece-47eb-9666-4e153302dddf.png)'
  prefs: []
  type: TYPE_IMG
- en: 'When you select the Redux tool, you should see something similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/6ba88c51-acc2-466d-bdd3-8546902118ac.png)'
  prefs: []
  type: TYPE_IMG
- en: The left pane in the Redux DevTools has the most important data—the actions
    in your application. As reflected here, three actions have been dispatched by
    your book manager app, so you know that everything's working!
  prefs: []
  type: TYPE_NORMAL
- en: Selecting and examining actions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The actions displayed on the left-hand side pane of Redux DevTools are listed
    chronologically, based on when they were dispatched. Any action can be selected,
    and by doing so, you can use the right-hand side pane to examine different aspects
    of the application state and of the action itself. In this section, you'll learn
    how to look deeper into how Redux actions drive your application.
  prefs: []
  type: TYPE_NORMAL
- en: Action data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'By selecting an action, you can view the data that''s dispatched as part of
    the action. But first, let''s generate some actions. Once the app loads, the `FETCHING_BOOKS`
    and `FETCHED_BOOKS` actions are dispatched. Click on the React Native Blueprints
    link, which loads the book data and takes you to the book details page. This results
    in two new actions being dispatched: `FETCHING_BOOK` and `FETCHED_BOOK`. The rendered
    React content should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/e574e27f-5535-4f5e-9eb9-6d67c411b22c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The list of actions in Redux DevTools should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/62944f30-feff-4817-9ed8-228666916afb.png)'
  prefs: []
  type: TYPE_IMG
- en: The `@@INIT` action is dispatched automatically by Redux and is always the first
    action. Typically, you don't need to worry about this action unless you need to
    know what the state of your application looked like before dispatching and actions—we'll
    cover this in the following section.
  prefs: []
  type: TYPE_NORMAL
- en: 'For now, let''s select the `FETCHING_BOOKS` action. Then, in the right-hand
    side pane, select the Action toggle button to see action data. You should see
    something that looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/0bbf2c89-66a2-4724-85e6-50753006196c.png)'
  prefs: []
  type: TYPE_IMG
- en: The tree view of the action is selected by default. You can see here that the
    action data has a single property called `type` and its value is the name of the
    action. This tells you that the reducer should know what to do with this action
    and that it doesn't need any additional data.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s select the `FETCHED_BOOKS` action now and see what the action data looks
    like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/dd659a0a-b418-478b-a04f-8dedf308ef97.png)'
  prefs: []
  type: TYPE_IMG
- en: Once again, you have the `type` property with the name of the action. This time,
    you also have a `books` property with an array of books. This action is dispatched
    in response to API data resolving and how book data makes its way into the store—its
    carried in by an action.
  prefs: []
  type: TYPE_NORMAL
- en: By looking at action data, you can compare what's actually dispatched versus
    what you're seeing in your application state. The only way to change application
    state is by dispatching actions with new state. Next, let's look at how individual
    actions change the state of the application.
  prefs: []
  type: TYPE_NORMAL
- en: Action state trees and charts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous section, you saw how to use Redux DevTools to select specific
    actions to view their data. Actions and the data that they carry lead to changes
    in application state. When you select an action, you can view the effect that
    the action has on the overall application state.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s select the `FETCHING_BOOK` action and then select the State toggle button
    in the right-hand side pane:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/8dd1c0a5-9e74-4e19-a8dc-08f794b32d83.png)'
  prefs: []
  type: TYPE_IMG
- en: This Tree view shows you the entire state of the application after the `FETCHING_BOOK`
    action is dispatched. The `bookDetails` state is expanded here so that you can
    see the effect the action has on the state. In this case it's the `loading` value—which
    is now `true`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s select the Chart view of this action now:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/d006104a-453c-4e8d-82a9-199f2a7b6f51.png)'
  prefs: []
  type: TYPE_IMG
- en: I happen to like the Chart view better than the Tree view for visualizing the
    entire state of the application. At the far left of the chart you have the root
    state. To the right of this, you have the main slices of application state—`app`,
    `home`, `newBook`, and `bookDetails`. As you move further and further right, you're
    drilling down into the specific state of components in your app. As you can see
    here, the deepest level is the individual books within the `books` array, which
    is part of the `home` state.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `FETCHING_BOOK` action is still selected, which means that this chart is
    a reflection of the application state after reducers have responded to this action.
    This action changes the `loading` state within `bookDetails`. If you move your
    mouse pointer over the state label, you''ll see its value:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/aa1973ca-bf4d-427e-bab2-57c092b02fc8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now let''s select the `FETCHED_BOOK` action. This action is dispatched when
    the book detail data is resolved from the API call that is made to get it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/e231a49f-95ce-4e91-8f9b-353b5a3c5717.png)'
  prefs: []
  type: TYPE_IMG
- en: If you keep the Chart view activated while switching to a different action,
    you'll notice that the chart actually animates the changes in state. It looks
    cool, no doubt, but it also calls your attention to the values that actually changes
    so that they're easier to see. In this example, if you look at the `book` object
    under `bookDetails`, you'll see that it now has new properties. You can move your
    mouse pointer over each of them to reveal their value. You can also check the
    `loading` value—it should be back to `false`.
  prefs: []
  type: TYPE_NORMAL
- en: Action state diffs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Another way to view action data in Redux DevTools is to look at the state diff
    that results from dispatching the action. Instead of trying to glean the changes
    in state by looking at the entire state tree, this view only shows you what changed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s try adding a new book to generate some actions. I''m going to add the
    book you''re reading right now. First, I''ll paste in the title of the book that
    generates a change event on the input element, which in turn dispatches a `SET_NEW_BOOK_TITLE`
    action. If you select the action, you should see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/0184a821-7191-4608-bcb9-63c7002f8de5.png)'
  prefs: []
  type: TYPE_IMG
- en: The `title` value of the `newBook` state went from an empty string to the value
    that was pasted into the title text input. Rather than having to hunt this change
    down, it is clearly marked for you to see, with all irrelevant state data hidden
    from view.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, let''s paste in the author and select the `SET_NEW_BOOK_AUTHOR` action:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/0b08d994-a1c6-4b75-8c78-ebfd3e6a0d5f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once again, only the `author` value is shown here because it''s the only value
    that changed as a result of dispatching `SET_NEW_BOOK_AUTHOR`. Here''s the final
    form field—the image URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/1c1eb8d9-3ba2-4342-bb2f-00ee52fb5a72.png)'
  prefs: []
  type: TYPE_IMG
- en: By using the Diff view of actions, you only see data that has changed as a result
    of the action. If this doesn't give you enough perspective, you can always jump
    to the State view so that you can see the state of the entire application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create the new book by clicking the Create button. This will dispatch
    two actions: `CREATING_BOOK` and `CREATED_BOOK`. First, let''s look at `CREATING_BOOK`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/422ddb74-c474-4959-95c3-3da974d73a7a.png)'
  prefs: []
  type: TYPE_IMG
- en: This action is dispatched before the API call to *create the book* is made.
    This gives your React component an opportunity to handle the asynchronous nature
    of the user interaction. In this case, you don't want the user to be able to interact
    with any form controls while the request is pending. As you can see by looking
    at this diff, the `controlsDisabled` value is now `false`, which the React component
    can use to disable any form controls.
  prefs: []
  type: TYPE_NORMAL
- en: 'Lastly, let''s look at the `CREATED_BOOK` action:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/04ae06c1-2447-4ed7-96c6-63cd93fbdae2.png)'
  prefs: []
  type: TYPE_IMG
- en: The `title`, `author`, and `imgURL` values are set to empty strings, which resets
    the form field values. The form fields are also re-enabled by setting `controlsDisabled`
    to `false`.
  prefs: []
  type: TYPE_NORMAL
- en: Time travel debugging
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One requirement of reducer functions in Redux is that they're pure; that is,
    they only return new data as opposed to mutating existing data. One consequence
    of this is that it enables time travel debugging. Because nothing ever changes,
    you can move the state of your application forward, backward, or to an arbitrary
    point in time. The Redux DevTools make this easy to do.
  prefs: []
  type: TYPE_NORMAL
- en: 'To see time travel debugging in action, let''s type some filter text into the
    filter input box:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/4890fad5-a3b9-40bd-b13e-5f0638cb5528.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Looking at the actions in Redux DevTools, you should see something along these
    lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/44479dd4-612e-464c-9b36-686871a88bd3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'I''ve selected the last `SET_FILTER_VALUE` action that was dispatched. The
    `filterValue` value should be `native b`, which reflects the titles that are currently
    displayed. Now, let''s travel back to two actions ago. To do this, move your mouse
    pointer over the action that''s two positions behind the currently selected action.
    Click on the Jump button, and the state of the application will be changed to
    the state when this `SET_FILTER_VALUE` was dispatched:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/2fefa33d-f519-4a4f-a49a-426a1cf58691.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You can see that `filterValue` has changed from `native b` to `native`. You''ve
    effectively undone the last two keystrokes, updating the state and the UI accordingly:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/b7527dd9-15a2-423a-a19a-a019ebd351ab.png)'
  prefs: []
  type: TYPE_IMG
- en: To bring the application state back to the current time, follow the same process
    but in reverse. Click on Jump on the most recent state.
  prefs: []
  type: TYPE_NORMAL
- en: Manually triggering actions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The ability to manually trigger actions during development of a Redux application
    can be helpful. For instance, you might have components ready, but you''re unsure
    of how the user interaction will work or you just need to troubleshoot something
    that should be working but isn''t. You can use Redux DevTools to manually trigger
    actions by clicking on the button with the keyboard icon, near the bottom of the
    pane:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/e6616ed3-8773-4ad3-a25e-9d017bd38697.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This will display a text input where you can enter the action payload. For
    example, I''ve navigated to the book detail page for React Native By Example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/d9e90133-2813-482c-9715-d665919f4fc2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Instead of clicking on the Delete button, I only want to see what happens regarding
    the state of the application, without triggering DOM events or API calls. To do
    this, I can click on the keyboard button in Redux DevTools, which allows me to
    manually enter an action and dispatch it. For example, here is how I would dispatch
    the `DELETING_BOOK` action:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/3b466c6a-a022-42a3-a804-bf839d911c73.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This results in the action being dispatched and consequently, the UI is updated.
    Here''s the `DELETING_BOOK` action:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/97ce8c9c-12b6-46fd-af51-6546958aa2fc.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To set `controlsDisabled` back to `false`, you can dispatch the `DELETED_BOOK`
    action:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/6e2d96cc-df1f-4e33-8a6b-a6a5d6eea9b0.png)'
  prefs: []
  type: TYPE_IMG
- en: Exporting and importing state
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As your Redux applications grow in size and complexity, the size and complexity
    of your state trees will grow in tandem. Because of this, there will be times
    when playing around with individual actions and to get your app into a specific
    state could be too cumbersome to perform manually over and over again.
  prefs: []
  type: TYPE_NORMAL
- en: Using Redux DevTools, you can export the current state of the application. Then,
    when you're troubleshooting later on and you need a specific state as a starting
    point, you can load it directly, rather than manually recreate it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s try exporting the application state. First, navigate to the details
    page for React 16 Essentials:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/9788df87-be18-4f79-9e26-9fd41416a8a3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To export the current state using Redux DevTools, click on the button with
    the down arrow:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/7a98ac22-dbe4-4483-afc2-270a94abf852.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Then, you can use the up arrow to import the state. But before you do that,
    navigate to a different book title, such as Getting Started with React VR:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/a7901dfa-fd1a-495c-8bab-a173b0ddd1d8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, you can use the upload button in the Redux DevTools pane:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/bf99d7ef-83a4-44ff-907e-1df3592edd9b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Since you''re already on the book details page, loading this state will replace
    the state values that are rendered by components on this page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/bf29eba2-d5d9-42c3-81b1-0e61af7e6d61.png)'
  prefs: []
  type: TYPE_IMG
- en: Now you know how to restore the state of your Redux store to any given point
    that you've exported and saved locally. The idea is to avoid having to remember
    and perform the correction actions in the correct order to arrive at a particular
    state. This is error-prone and exporting the exact state that's needed obviates
    the whole process.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you put together a simple book manager Redux app. With the
    app in place, you then learned how to install the Redux DevTools browser extension
    in Chrome. From there, you learned how to view and select actions.
  prefs: []
  type: TYPE_NORMAL
- en: There are a number of ways to view information about the application once you've
    selected an action. You can look at the action payload data. You can look at the
    application state in its entirety. You can look at diffs between the app state
    and the last dispatched action. These are all different approaches you can use
    to instrument your Redux applications.
  prefs: []
  type: TYPE_NORMAL
- en: Then, you learned how time travel debugging works in Redux DevTools. Because
    state changes are immutable in Redux, you can use Redux DevTools to jump around
    from action to action. This can drastically simplify debugging cycles. Lastly,
    you learned how to manually dispatch actions and import/export the state of your
    application.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you'll learn how to use Gatsby to generate static content
    from React components.
  prefs: []
  type: TYPE_NORMAL
