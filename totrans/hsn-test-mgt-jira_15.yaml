- en: Test Execution Status Reporting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Project status reports give us insights into a project's health throughout the
    project development phase. This helps in monitoring and controlling project progress
    so that deliveries meet the required quality standards and deadlines. There are
    various types of reports available through Jira. The main goal of reports is to
    identify any runtime issues and obstacles or last-minute changes that need to
    be implemented. Reports help all project stakeholders to be on the same page about
    the current status of the project and allow them to make democratic decisions
    on containing any deviations from the plan.
  prefs: []
  type: TYPE_NORMAL
- en: Project managers plan ahead in order to identify risks and create risk mitigation
    strategies as well. They also address activities in change management and communication
    management. Reporting is a part of communication management.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will be covering the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Test plan execution reports
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ad hoc test run reports
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Requirement-based reports
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defect matrix reports
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Test suite reports
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Burndown charts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will also cover reports created during the test execution phase of the project,
    as Jira plugins are useful for generating these reports.
  prefs: []
  type: TYPE_NORMAL
- en: Test plan execution reports
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: During the test execution phase, test execution is carried out in terms of test
    cycles, or iterations. Each iteration or test cycle has a set of planned test
    cases. It is useful to track the progress of test execution based on the cycle
    or iteration. If the iteration or test cycle is a part of the test plan, then
    generating a test plan execution report gives us clarity about the currently executed
    test cases and their statuses.
  prefs: []
  type: TYPE_NORMAL
- en: Let's generate a test plan execution report using Jira plugins.
  prefs: []
  type: TYPE_NORMAL
- en: synapseRT
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'synapseRT has an option to generate a test plan execution report, with the
    help of which a project team can track the progress of the current execution:'
  prefs: []
  type: TYPE_NORMAL
- en: synapseRT has a SynapseRT Reports tab from where we can select the Test Plan
    Execution Report option to customize and generate the test plan execution report.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'As shown in the following screenshot, we have the option to select the Test
    Plan and specific cycle, or all the cycles, along with the test case execution
    status. After selecting all the appropriate values, click on the Generate Report
    button to create the report:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/890ee2dc-323a-48bb-aa31-624e789b089b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This creates the report shown in the following screenshot. The report lists
    all the test cases that belong to the selected test cycle, their current statuses
    in the Result column, the Tester to whom the test case has been assigned, and
    who has executed the test case (in the Tested By column). There are a few more
    details, such as Executed On (which specifies the date and time of execution),
    Defects, Estimate, and Effort. We also have an option to extract this report in
    Excel format:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/c5939910-150f-4bf2-b3d0-bfefe7f7d4fb.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Through the Test Plan section, we can also view the status of the current execution
    of the test plan. Navigate to the Test Plan tab and go to the Unresolved Plans
    section. It lists all the test plans that do not have a closed status. Simply
    click on the drop-down icon and it shows the execution progress segregated by
    test cycles. As shown in the following screenshot, we have two test cycles with
    the status as ACTIVE. It also shows details such as Test Run, Defect, and their
    current Status:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/1bd17e82-e167-4bdf-9752-989bc5967c28.png)'
  prefs: []
  type: TYPE_IMG
- en: Zephyr
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In Zephyr, we can generate a test case execution report to view the progress
    of each cycle and its associated test cases:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to generate the report, navigate to the Report section in Jira. There
    are two main sections—All reports and Other. Testcase Execution Report is listed
    under the Other section. Click on it to create one. As shown in the following
    screenshot, doing this shows the configuration page for customizing the report
    as per the project, test cycles, versions, and so on. Provide the appropriate
    values and click on Next. In the following screenshot, we have set the number
    of test cycles as `3`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/469d6d3c-c5df-4ef3-a212-19d4851aa61e.png)'
  prefs: []
  type: TYPE_IMG
- en: The following report ...
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Test Management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Test Management has an option to create a test plan consisting of test cycles:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to generate a test report by test plan, navigate to the Tests tab
    and go to the Reports section. This shows a number of options for generating the
    report; select the Test execution results by test plan option. It lets you customize
    the report as per the project, start and end date, and execution based on the
    most recent or all. After selecting all the required options, click on the Generate
    button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/322f2271-9916-494a-a1ad-c560efe0b94a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'It generates the following report. The *y* axis indicates the number of test
    plans selected and the *x* axis shows the number of test cases with their current
    execution statuses. The following screenshot shows that we have a total of eight
    test cases planned, out of which one had been blocked, one has passed, two have
    failed, and four test cases were not executed. We also have an option to either
    print or export the report in Excel format:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/eac4a202-bf21-4499-b25e-2b4c3b3368d1.png)'
  prefs: []
  type: TYPE_IMG
- en: Ad hoc test run reports
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Ad hoc test run reports indicate the number of times a selected test case has
    been executed as a part of an ad hoc test run. In this case, the test case is
    not a part of any test plan and is executed independently. It's also useful to
    track its status changes. If any artifacts are attached during the ad hoc test
    run, such as test data, screenshots, or logs, testers can use this information
    to compare the results from its last execution. Jira plugins have the option to
    generate such reports. Let's create them one by one.
  prefs: []
  type: TYPE_NORMAL
- en: synapseRT
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'synapseRT has the option to view the ad hoc test run details at an individual
    test case level from the Ad hoc Test Run section. As shown in the following screenshot,
    the selected test case has been executed three times and its status varies from
    BLOCKED to FAILED and PASSED. It also shows details such as the ID of the test
    run, who it was executed by, the execution date and time, and relevant defects,
    if any:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/3e2292e5-ae8b-4f6f-bba7-6944276d5bcf.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Ad hoc test run reports can be generated for all test cases:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to generate such reports, navigate to the **SynapseRT Reports** tab
    and select the option as Ad hoc Test Run Report. As shown in the following screenshot,
    enter the required details, such as Execution type and Start Date and End Dates,
    and click on the **Generate Report** button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/79c94ea1-2773-4eb3-aafb-486751261c4d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As shown in the following screenshot, the ad hoc test run report gets generated.
    It shows details such as the names of the test cases; their current status in
    the **Result** column; who tested it, in the Tested By column; the execution date
    and time in **Executed on**; and linked defects, if any, in the **Defects** column:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/8fc7c895-e9d8-46e3-ae2d-fb3e5c1774ff.png)'
  prefs: []
  type: TYPE_IMG
- en: Zephyr
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Zephyr has an ad hoc test cycle to which test cases can be added and executed.
    We can view the status of the selected cycle from the **Cycle Summary** tab:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to the Tests | Test Summary | Cycle Summary tab. It shows all the test
    cycles for all the releases.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Hover a mouse on the ad hoc cycle and observe that it lists the current status
    of all the test cases in this cycle. It also indicates a color bar to show the
    progress of the status in green, red, and blue to indicate statuses as pass, fail,
    and blocked. As shown in the following screenshot, the ad hoc test cycle has a
    total of four test cases, out of which two, which is 50% of total test cases,
    are in the PASS status,  while one has its status as FAIL, and one is in the BLOCKED
    ...
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Test Management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the case of the Test Management tool, we can view the number of times a
    selected test case has been executed by navigating to the Reports | Test Execution
    | Test execution results (list) report:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to create this report, navigate to the Test | Reports | Test Execution
    tab and select the Test execution results (list) option. Enter the required details,
    such as the cycle that you want to test. As shown in the following screenshot,
    we have selected the test cycle and project. After entering all the required details,
    click on the Generate button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/79e5c40f-505d-4ce4-8c90-3507cbe750f6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This generates the report shown in the following screenshot. It has the list
    of test cases added under the selected test cycle. In our case, we have the `TESTP-T2`
    test case, which has been executed a total four times as a part of test cycle
    `TESTP-C1`. The Status column indicates its status during each execution, and
    there are other columns that give other details:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/ec7adf0a-bc72-42d6-99c0-0fb88ab20f65.png)'
  prefs: []
  type: TYPE_IMG
- en: Requirement-based reports
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Requirement-based reports help us to understand the current execution status
    for the selected requirement. In the case of projects where there are multiple
    requirements, these reports are helpful as they group the test cases based on
    the requirement tickets in Jira. Let's create one using Jira plugins.
  prefs: []
  type: TYPE_NORMAL
- en: synapseRT
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'synapseRT has an option to generate requirement-based reports and track the
    progress of the current execution based on requirements:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to create a requirement-based report in synapseRT, navigate to the
    SynapseRT Reports tab and select the Requirement Based Reports option. This lets
    you customize the report based on requirements. As shown in the following screenshot,
    enter all the required details along with the Test Plan, and it will generate
    the report to which the selected requirement ticket has been linked:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/f91b8e2d-ba84-4b39-b4bb-01d844f9c0a0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'It generates the report shown in the following screenshot. The graph shows
    the status of the execution for the selected requirement ticket. It also has the
    Summary Report and Detailed Report sections. The Summary Report section shows
    the details such as Project name, its Requirements, and linked Test Cases with
    their current execution statuses:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/34a2e6c7-4c96-4f5e-89e6-716d8b7ae1c1.png)'
  prefs: []
  type: TYPE_IMG
- en: The Detailed Report section shows details about the selected requirement and
    its linked Test Cases, Test Cycle, and Result of the execution.
  prefs: []
  type: TYPE_NORMAL
- en: Zephyr
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Zephyr doesn't have a feature to generate requirement-based reports.
  prefs: []
  type: TYPE_NORMAL
- en: Test Management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Test Management tool uses the test execution results by coverage report,
    which indicates the current status of the test cases based on the linked requirements:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to create a test execution results by coverage report, navigate to
    the Tests | Reports | Test Execution tab and select the option as Test execution
    results by coverage. This shows the configuration page to customize the report
    and generate it as needed. As shown in the following screenshot, on the configuration
    page, enter the required details, such as Project, Folder, and Start date and
    End date, and click on the Generate button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/f05a0067-465e-47f5-8929-1d2f2d754bb9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This generates the report shown in the following screenshot. The *y* axis shows
    the list of user stories and the *x* axis shows the number of the test cases grouped
    by user stories. The following graph indicates that the `TESTP-6` user story has
    a total of eight test cases linked to it, of which two have been blocked, two
    have failed, and four have passed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/44072644-240f-4b16-b314-88b8820f2d48.png)'
  prefs: []
  type: TYPE_IMG
- en: Defect matrix reports
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As the name suggests, defect matrix reports can be used to find out the current
    status of the defects linked to the test cases. Hence, it helps to know the progress
    of the current test cycle and test plan for the selected project. There are various
    options for customizing and generating such reports based on the defect's current
    status, assignee, priority, components, and so on. Let's try to generate a defect
    matrix report using Jira plugins.
  prefs: []
  type: TYPE_NORMAL
- en: synapseRT
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'synapseRT has an option to create a defect matrix report and verify the status
    of the current cycle or test plan execution in terms of the defects reported by
    the team:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to generate a defect matrix report in synapseRT, navigate to the SynapseRT
    Reports tab and select the Defect Matrix Report option. This shows the option
    to configure the report. We can also select the way we want to view the report
    by selecting *x* axis and *y* axis values. After entering all the required details,
    click on the Generate Report button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/dc7dc669-cad3-44a8-8df8-579ae651d830.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The following report is generated, which indicates the defect status in graphical
    format. As shown in the following screenshot, the selected test cycle has a total
    of three defects, of which two are of Medium priority and one is of High priority.
    It also provides details of the defects, such as its defect number in the Defect
    column and Resolution:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/52fb64f8-f976-440d-b5e2-a61a065e6441.png)'
  prefs: []
  type: TYPE_IMG
- en: Zephyr
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Zephyr doesn''t have a feature to generate defect matrix reports. However,
    it helps us to identify defects that are highly impacting the test execution phase:'
  prefs: []
  type: TYPE_NORMAL
- en: In order to generate this report, navigate to the Reports tab and select the
    option of Top Defects Impacting Testing from the Other reports section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To customize the report, enter the required details, enter the number of defects
    that you want to view, and the status of the defect. Now, as shown in the following
    screenshot, the number of defects selected is 10 and the status is draft. Click
    on Next to generate the report:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/439ff02f-bf07-49b5-ada0-b103af8d6030.png)'
  prefs: []
  type: TYPE_IMG
- en: The following report gets generated. It lists the Defect ...
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Test Management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Test Management has a Test Execution (Issues) report, which lists all the issues
    reported during the selected cycle, test plan, version, iteration, or even folder.
    This report can be generated from the Reports tab:'
  prefs: []
  type: TYPE_NORMAL
- en: In order to create the Test Execution (Issues) report, navigate to the Tests
    | Reports | Test Execution tab. Test Management has added additional reports;
    however, we can still use the legacy report option to generate the report.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the Switch to legacy reports option to use the legacy report format.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once you switch the view, navigate to the Test Execution tab and select the
    Test Execution (Issues) option. As shown in the following screenshot, doing this
    shows the report configuration page. Enter the required details. Select the test
    cycle, enter start and end dates, and click on the Generate button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/b3864562-7256-48fa-bfd4-1bc5e27755d6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The following report gets generated, which shows the total defects created
    with their Priority, Status, and so on:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/0acb2a2c-1e88-4a56-b415-069d34ef2e29.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the Issues section, you can also see the defect details, such as the issue
    ID in the Key column and Summary:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/feb447aa-0093-414b-9401-007f23869153.png)'
  prefs: []
  type: TYPE_IMG
- en: Test suite report
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If the test cases are added and executed based on test suites, then it's good
    to generate test execution reports based on the test suite. This gives details
    about the current execution status of the test cases, who has executed them, and
    who the responsible tester is. Let's generate this report using Jira plugins.
  prefs: []
  type: TYPE_NORMAL
- en: synapseRT
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'synapseRT has an option to generate test suite reports, with the help of which
    test suite progress can be tracked:'
  prefs: []
  type: TYPE_NORMAL
- en: In order to generate a test suite report in synapseRT, navigate to the SynapseRT
    Reports tab and select the Test Suite Report option. This gives you the options
    to configure a report based on the Project, Test Suite, Test Plan, Test Cycle,
    and so on.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter data in all the required fields and click on the Generate Report button.
    As shown in the following screenshot, we have provided details about the Project,
    Test Suite, and Test Plan in which these test cases have been added:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/0abf0616-c678-47df-8419-27547179d4f3.png)'
  prefs: []
  type: TYPE_IMG
- en: This generates the report shown in the following screenshot. The report has
    sections such as those to do with test suite coverage and search details. The
    Test Suite Coverage section indicates the total number of test cases and their
    current status for the selected cycle.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Cycle and Run details indicate the test cycles under which these test cases
    have been added and their current execution status and other details. This report
    also lists all the defects linked to these test cases:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/b5dbd22a-f5f6-4283-93a6-0108b15be32e.png)'
  prefs: []
  type: TYPE_IMG
- en: Zephyr
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Zephyr doesn't have a feature to generate test suite reports. However, we can
    still view the status of the executed tests for the selected test cycle, as shown
    in the preceding Zephyr ad hoc test run report for the ad hoc test cycle.
  prefs: []
  type: TYPE_NORMAL
- en: Test Management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Test Management has a folder structure for organizing test cases, hence when
    generating a report based on a test suite, we will have to select the option based
    on the folder:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to generate the test suite report in Test Management, navigate to
    the Tests | Reports | Test Execution tab and enter the required details. As shown
    in the following screenshot, enter the project name, the Folder (test suite) for
    which a report needs to be generated, and so on, and click on the Generate button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/439bc269-1db9-409f-b509-89a1eae5bcaa.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This generates the report shown in the following screenshot. It lists details
    such as the folder name for which this report has been created, the total number
    of test cases, and their execution statuses. It also indicates the percentage
    of the test cases in any given status. In this case, we have 33.33% of test cases
    in the Pass status. It also shows details regarding how much of the test execution
    is remaining, has been Completed, and so on. The Issues section lists defects
    linked to the test cases, if any:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/c50b1fbf-701e-4744-8e92-6e87d9fde5ed.png)'
  prefs: []
  type: TYPE_IMG
- en: Burndown chart
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A test case burndown chart helps a project team to track the rate of the execution
    of the test cases for the selected test cycle. It also indicates the number of
    the test cases that have been executed for the selected date, week, or month,
    and the remaining test cases. It helps a team to know how much more effort is
    required to finish the selected test cycle. Let's create this report with the
    help of Jira plugins.
  prefs: []
  type: TYPE_NORMAL
- en: synapseRT
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'synapseRT has an option to generate a test case burndown report, which can
    be used to track the rate of test execution:'
  prefs: []
  type: TYPE_NORMAL
- en: In order to generate a test case burndown report in the synapseRT tool, navigate
    to the SynapseRT Reports section and select the Test Case Burndown Report option.
    This lets you choose the Project, Test Plan, and Test Cycles for which the report
    must be generated.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'As shown in the following screenshot, enter all the required details, then
    click on the Generate Report button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/b2da79f5-6098-4cff-a80d-8f1d71fdc64c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This generates the test case burndown report, as shown in the following screenshot.
    The *x* axis indicates the number of test cases and the *y* axis indicates the
    dates on which these test cases were executed. As shown in the following screenshot,
    the execution start date is Jan 7 and last date of the execution is Jan 22, as
    that''s the date when this report was generated:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/9621a855-650b-4732-a7fe-ef72d64f10c9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If we hover the mouse on a node, it provides further details, such as the date
    and the remaining number of test cases that need to be executed. As shown in the
    following screenshot, the selected node has a date of January 17, 2019, and there
    are two test cases that were yet to be executed as of that day:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/8a966fb5-9e98-4647-afa5-3149820a2b4a.png)'
  prefs: []
  type: TYPE_IMG
- en: Zephyr
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Zephyr has an option to generate a test execution burndown chart, which helps
    a team to understand the status of the current test execution phase:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to create this report, navigate to the Reports section and select
    the option as Test Execution Burndown Chart from the Other section of the reports.
    Enter the details, as shown in the following screenshot, to generate the test
    execution burndown chart for all the cycles:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/9447c9c1-9e87-4633-a6ae-9ce0b94e7210.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This generates the following graph. The graph indicates the Average rate of
    execution, the Total unexecuted tests remaining, and the Expected completion date:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this case, these values are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Average ...
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Test Management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Test Management has an option to generate a test execution burndown chart,
    with the help of which the rate of test execution can be tracked:'
  prefs: []
  type: TYPE_NORMAL
- en: In order to generate a test execution burndown chart in the Test Management
    tool, navigate to the Tests | Reports | Test execution tab, and select the Test
    execution burn down option. This shows the configuration page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter the details, select the duration of the report, and click on the Generate
    button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/749d537f-0b04-4670-9f69-083d6060d74f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This generates the following report, which indicates the rate of the daily
    execution of the test cases for the two selected test cycles. The *y* axis indicates
    the total number of the test cases and the *x* axis shows the days on which these
    test cases were executed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/d3028b3c-0600-4478-9884-85309eb04986.png)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned how to create various reports using Jira plugins,
    and understood the purpose for each type. We saw how reports help in monitoring
    and controlling testing activities.
  prefs: []
  type: TYPE_NORMAL
- en: As we know, reporting serves as a great communication tool to provide insights
    about a project throughout the project development life cycle. Hence, it is essential
    that the project team and management understand its importance and find ways to
    utilize essential reports for their projects appropriately.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will explore how third-party automated testing tools
    can be integrated with Jira to manage automated test cases.
  prefs: []
  type: TYPE_NORMAL
