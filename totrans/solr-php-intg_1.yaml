- en: Chapter 1. Installing and Integrating Solr and PHP
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Are you a PHP programmer? Do you feel the need to incorporate search in your
    applications? Are you aware of Apache Solr? Do you feel it is a very tedious job
    to integrate Solr into your PHP applications? This book will make the integration
    easy for you. We will be looking at an end-to-end integration of Apache Solr with
    PHP. We will start with Solr installation. We will look at how Solr can be integrated
    with PHP. We will then explore the features provided by Solr through PHP code.
    After going through the book, you should be able to integrate almost all features
    provided by Solr into your PHP applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter will help us in installing Apache Solr in two major environments:
    Windows and Linux. We will also go ahead and explore installation of Solr as part
    of Apache Tomcat Server. We will discuss the options available for talking to
    Solr via PHP and also learn how to set up the Solarium library for Solr PHP integration.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We will be covering the following topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: What is Solr?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Downloading and installing Solr on Windows and Linux
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring Tomcat to run Solr.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Executing ping queries on Solr using PHP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Discussing different libraries for Solr PHP integration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing Solarium on Windows and Linux
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Connecting PHP to Solr using Solarium
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running ping queries using PHP and Solarium
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Checking Solr logs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Solr
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You are PHP programmers and you build websites such as a job site, an e-commerce
    website, a content website, or others. You need to provide a search box for searching
    either jobs or products or other content in your website. How do you go about
    it? Do you do a "like" search in your database or probably use the full-text search
    available in MySQL—if you are using MySQL. Would you prefer to use some other
    platform that does the search for you and also provides you a huge set of features
    to tune the search as per your requirements?
  prefs: []
  type: TYPE_NORMAL
- en: Solr is an open source Java application providing an interface to the full-text
    search library known as Lucene. Both Solr and Lucene are a part of the Apache
    Lucene project. Apache Solr uses Apache Lucene as its core for search. Apache
    Lucene is an open source search API built in Java. In addition to full-text search,
    Solr also provides a huge set of features such as hit highlighting and faceted
    search.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Solr
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Solr requires the presence of Java on your system. To check the presence of
    Java on your system, run `java –version` in Linux console or Windows command prompt.
    If the version of Java is greater than 1.6 then we are ready to go. It is preferable
    to use the official Java Runtime Environment rather than the one provided by OpenJDK.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Let us download the latest Solr. For this book we are using Solr Version 4.3.1,
    which can be downloaded from the following link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://lucene.apache.org/solr/downloads.html](http://lucene.apache.org/solr/downloads.html)'
  prefs: []
  type: TYPE_NORMAL
- en: 'To install Solr on Windows or Linux simply unzip or extract the `solr-4.3.1.zip`
    file into a folder. The installation process for Windows and Linux is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'For installation on Windows, simply right-click on the zip file and extract
    it into the `C:\solr-4.3.1` folder. To start Solr, go to the Windows command prompt
    **Start** | **Run**. In the **Run** window, type `cmd`. On the Windows command
    prompt type the following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'For installation on Linux, simply extract the zip file in your home folder.
    Follow these commands to extract and run Solr using your console:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'When we start Solr with the `java –jar start.jar` option, Solr runs on the
    port 8983\. It uses a built-in web server known as jetty. To see Solr working,
    simply point your browser to the following address:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'You will be able to see the following interface. This means that Solr is running
    fine. The following screenshot shows the **Solr Admin** interface:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing Solr](graphics/4920OS_01_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Configuring Tomcat to run Solr
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The web server jetty used by default Solr is meant for development purposes
    only. For production environment, we would want Solr to run as a part of a more
    convenient setup involving a more reliable web server. Solr can be configured
    to run on any J2EE container such as IBM Websphere or JBoss or any other server.
    Apache Tomcat is the most commonly used server. Let us see how to set up Solr
    as a part of Apache Tomcat web server. We have Apache Tomcat installed on our
    Windows or Linux environment.
  prefs: []
  type: TYPE_NORMAL
- en: To run Solr as a part of Apache Tomcat web server, you need to create a context
    for `/solr` in the configuration. The following `solr.xml` file needs to be put
    at the appropriate location in Windows and Linux inside the Tomcat configuration
    folder at `<tomcat_home>/conf/Catalina/localhost`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Change `docBase` to `<solr_path>/example/webapps/solr.war` and the value attribute
    in `Environment` to `<solr_path>/example/solr`. The environment named `solr/home`
    tells Tomcat the location where Solr configuration files are to be found. In addition
    to this, let us change the configuration of Solr in the `<solr_path>/example/solr/solr.xml`
    file. Search for `hostPort` and change it to match Tomcat's port `8080`. Similarly
    search for `hostContext` and change it to `solr`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Windows users, use `\` instead of `/` in your configuration XML files for path
    variables. Do not change the `/` in `solr/home`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Restart your Tomcat server and you should be able to go to the following URL
    to see Solr working along with Tomcat:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you see an error "404 not found" on the preceding URL, it may be because
    of some libraries of Solr that Tomcat is not able to find. You can check the exact
    error in Tomcat error logs in the `<tomcat_home>/logs/catalina.out` folder. To
    resolve the missing library issue, copy all JAR files from the `<solr_home>/example/lib/ext
    to <tomcat_home>/lib` folder.
  prefs: []
  type: TYPE_NORMAL
- en: You can also enable advanced logging in your Tomcat logs by copying the `log4j.properties`
    file from the `<solr_home>/example/resources` folder to your `<tomcat_home>/lib`
    folder.
  prefs: []
  type: TYPE_NORMAL
- en: Executing a ping query on Solr using PHP
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Ping queries are used in Solr to monitor the health of the Solr server. Let
    us first see how the ping query works on the **Solr Admin** web interface:'
  prefs: []
  type: TYPE_NORMAL
- en: Open up the browser and go to the URL for Solr.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **collection1** from the dropdown on the left-hand side panel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Ping** and you will see the ping time in milliseconds appear next
    to the ping's link. Our ping is working fine.![Executing a ping query on Solr
    using PHP](graphics/4920OS_01_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let us check the version of PHP installed. We need Version 5.3.2 and above.
    To check the version, run `php –v` on the Windows or Linux command line as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'To get ping working from our PHP code, we will need a utility called cURL.
    For Linux environments, we need to install the `curl`, `libcurl`, and `php5-curl`
    packages. On Ubuntu distribution of Linux it can be installed using the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'For enabling cURL on windows, we need to edit the `php.ini` file in our PHP
    installation. Search for the extensions directory setting and change it to where
    `php_curl.dll` is located. Also, uncomment the line which loads `php_curl.dll`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The following URL is the URL that is being called for executing the ping query.
    On going to this URL, we can see the response that contains the response header
    and the status, which is OK.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'We can see that the response is in XML. To convert the response to JSON, simply
    add `wt=json` to the earlier URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Linux users can check the response of a curl call using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'A direct call to Solr via PHP requires us to call the ping with a JSON response
    URL via cURL and decode the JSON response to show the result. Here is a piece
    of code to do the same. This code can be executed using the PHP command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'On executing the preceding code via command line, we will get the output as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Downloading the example code**'
  prefs: []
  type: TYPE_NORMAL
- en: You can download the example code files for all Packt books you have purchased
    from your account at [http://www.PacktPub.com](http://www.PacktPub.com). If you
    purchased this book elsewhere, you can visit [http://www.PacktPub.com/support](http://www.PacktPub.com/support)
    and register to have the files e-mailed directly to you.
  prefs: []
  type: TYPE_NORMAL
- en: Libraries available for PHP-Solr integration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Every call to Solr for executing any task is eventually a URL which needs particular
    parameters depending on what we need to get done. So, adding documents to Solr,
    deleting documents from Solr, and searching of documents can all be done by building
    URLs with parameters for their respective commands. We can call these URLs using
    PHP and cURL and interpret the response in JSON. However, instead of remembering
    every command to be sent in the URL, we can use a library to create the Solr URL
    and interpret the response. Some of the libraries available are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Solr-PHP-client
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Apache Solr-PHP extension
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Solarium
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Solr-PHP-client can be obtained from the following location:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://code.google.com/p/solr-php-client/](https://code.google.com/p/solr-php-client/)'
  prefs: []
  type: TYPE_NORMAL
- en: It can be seen that the latest release for this library was in November 2009\.
    There have been no developments on this library since 2009\. This is a very basic
    client and does not support a lot of features that are now available in Solr.
  prefs: []
  type: TYPE_NORMAL
- en: 'Apache SolrPhp extension can be obtained from the following location:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://pecl.php.net/package/solr](http://pecl.php.net/package/solr)'
  prefs: []
  type: TYPE_NORMAL
- en: 'The latest release for this library was in November 2011\. This is a comparatively
    better library. And is also the library suggested for integrating with Solr on
    [www.php.net](http://www.php.net). It is intended to be very fast and lightweight
    compared to others. The complete API of the library can be obtained from following
    location:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://php.net/manual/en/book.solr.php](http://php.net/manual/en/book.solr.php)'
  prefs: []
  type: TYPE_NORMAL
- en: Solarium is the latest library for Solr PHP integration. It is open source and
    is continuously updated. It is fully object oriented and provides features almost
    as soon as they are made available in Solr. It is fully flexible where you can
    add a functionality that you feel is missing. Also custom parameters can be used
    to achieve almost any task. On the downside, the library is somewhat heavy as
    it has many files. Solarium replicates the concepts of Solr to some extent. And
    it is being actively developed. We will install Solarium and explore the comprehensive
    list of features of Solr via PHP code using the Solarium library.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Solarium
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Solarium can be downloaded and used directly or it can be installed using a
    package manager for PHP called Composer. If we download the Solarium library directly,
    we will have to get other dependencies for installation. Composer, on the other
    hand, manages all dependencies by itself. Let us have a quick look at installing
    Composer on both Windows and Linux environments.
  prefs: []
  type: TYPE_NORMAL
- en: 'For Linux, the following commands will help in installation of Composer:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'These command downloads the Composer installer PHP script and passes the output
    to the PHP program for interpretation and execution. During execution, the PHP
    script downloads the Composer code into a single executable PHP program `composer.phar`
    (PHP Archive). We are renaming the `composer.phar` executable to Composer for
    ease of use purposes. On Linux, Composer can be installed at a user level or at
    a global level. To install Composer at user level, simply add it to your environment
    path using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: To install Composer on a global level simply move it to the system path suchas
    `/usr/bin` or `/usr/local/bin`. To check if Composer has been installed successfully,
    simply run Composer on your console and check the various options provided by
    Composer.
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing Solarium](graphics/4920OS_01_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Windows user can download `composer-setup.exe` from the following link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://getcomposer.org/Composer-Setup.exe](http://getcomposer.org/Composer-Setup.exe)'
  prefs: []
  type: TYPE_NORMAL
- en: Double-click on the executable and follow instructions to install Composer.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We will need to install a web server—mostly Apache and configure it to enable
    the execution of PHP scripts on it.
  prefs: []
  type: TYPE_NORMAL
- en: Alternatively, we can use the built-in web server in PHP 5.4\. This server can
    be started by going to the directory where all HTML and PHP files are and by using
    the `php –S localhost:8000` command to start the PHP development server on port
    `8000` on our local machine.
  prefs: []
  type: TYPE_NORMAL
- en: Once Composer is in place, installing Solarium is pretty easy. Let us install
    Solarium on both Linux and Windows machine.
  prefs: []
  type: TYPE_NORMAL
- en: For Linux machines, open the console and navigate to the Apache `documentRoot`
    folder. This is the folder where all our PHP code and web applications will reside.
    In most cases, it is `/var/www` or it can be changed to any folder by changing
    the configuration of the web server. Create a separate folder where you want your
    applications to reside and also create a `composer.json` file inside this folder
    specifying the version of Solarium that needs to be installed.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Now install Solarium by running the `composer install` command. Composer automatically
    downloads and installs Solarium and its related dependencies such as symfony event
    dispatcher. This can be seen in the output of Composer.
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing Solarium](graphics/4920OS_01_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: For installation on Windows, open up your command prompt and navigate to the
    Apache `documentRoot` folder. Create a new folder inside `documentRoot` and run
    `composer install` inside the folder.
  prefs: []
  type: TYPE_NORMAL
- en: We can see that during installation, `symfony event dispatcher` and `solarium
    library` are downloaded in a separate folder named `vendor`. Let us check the
    contents of the `vendor` folder. It consists of a file called `autoload.php` and
    three folders namely `composer`, `symfony`, and `solarium`. The `autoload.php`
    file contains the code to load Solarium library in our PHP code. Other folders
    are self explanatory. The `solarium` folders is the library and the `symfony`
    folder contains a dependency known as event dispatcher, which is being used by
    Solarium. The `composer` folder contains files which help in loading all the required
    libraries in PHP.
  prefs: []
  type: TYPE_NORMAL
- en: Executing ping queries on Solr using PHP and Solarium library
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For using the Solarium library, we need to load the Solarium library in our
    PHP code. Let us see how to execute the same ping query that we fired earlier
    using PHP and Solarium.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We have installed Solarium inside the `code` folder in our Apache `documentroot`.
    Apache `documentRoot` points to `~/htdocs` (inside our home folder).
  prefs: []
  type: TYPE_NORMAL
- en: 'First include the Solarium library in our code using the following line of
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Create a Solarium configuration array that defines how to connect to Solr.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Solarium has the concept of endpoints. An **endpoint** is basically a collection
    of settings that can be used to connect to a Solr server and a core. For each
    query that we execute via Solarium, we can specify an endpoint using which we
    want to execute the query. If no endpoint is specified, the query is executed
    using the first endpoint, which is the default endpoint. The benefit of using
    endpoints is that we need to create a single Solarium client instance irrespective
    of the number of servers or cores we use.
  prefs: []
  type: TYPE_NORMAL
- en: Create the Solarium client with the configuration we created earlier. And call
    the `createPing()` function to create the ping query.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally execute the ping query and get the result using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'It can be seen that the result is an array. But we can also call the `getStatus()`
    function to get the ping''s status. We can execute the code using PHP command
    line or call the following URL to see the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: More about endpoints
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Solarium provides us with the flexibility of adding multiple Solr servers as
    endpoints and using a single Solarium client to fire query on any Solr server.
    To add another endpoint to our Solarium configuration for Solr running on another
    port `8983` on our `localhost` and to use it to execute our query, we will use
    the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'The Solarium client provides functionality of adding and removing endpoints
    using the `addEndpoint(array $endpointConfig)` and `removeEndpoint(string $endpointName)`
    functions. To modify an endpoint during runtime, we can call `getEndpoint(String
    $endPointName)` to get the endpoint and the use functions such as `setHost(String
    $host)`, `setPort(int $port)`, `setPath(String $path)`, and `setCore(String $core)`
    to change the endpoint settings. Additional settings provided for endpoints are:'
  prefs: []
  type: TYPE_NORMAL
- en: The `setTimeout(int $timeout)` setting is used for specifying a timeout for
    a Solr connection
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `setAuthentication(string $username, string $password)` setting is used
    for providing authentication if your Solr or Tomcat requires HTTP authentication
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `setDefaultEndpoint(string $endpoint)` setting can be used to set the default
    endpoint for a Solarium client
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Checking Solr query logs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We have now been able to execute a ping query on Solr using the Solarium library.
    To see how this works, open up Tomcat logs. It can be found at `<tomcat_path>/logs/solr.log`
    or `<tomcat_path>/logs/catalina.out`. On Linux, we can do a tail of the log to
    see fresh entries as they appear:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'On running the cURL-based PHP code that we wrote earlier, we can see the following
    hits in the log:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: On running the Solarium-based code, we get similar output but with an additional
    parameter `omitHeader=true`. This parameter causes the response header to be ignored
    in the output.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: So eventually, Solarium also creates a Solr URL and makes a cURL call to Solr
    to fetch the results. How does Solarium know which Solr server to hit? This information
    is provided in the endpoint settings in the `$config` parameter.
  prefs: []
  type: TYPE_NORMAL
- en: Solarium adapters
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'What about systems that do not have cURL installed? Solarium comes with a concept
    of **adapters**. Adapters define the way in which PHP will communicate with the
    Solr server. The default adapter is cURL, which we used earlier. But in the absence
    of cURL, the adapter can be switched to HTTP. **CurlAdapter** is dependent on
    the curl utility, which needs to be installed or enabled separately. **HttpAdapter**
    on the other hand uses the `file_get_contents()` PHP function to get a Solr response.
    This uses more memory and is not recommended when the numbers of queries on Solr
    are very large. Let us see the code to switch adapter in Solarium:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: We can call `getAdapter()` to check the current adapter. There are other adapters
    available—the **ZendHttp** adapter that is used with Zend Framework. There is
    a **PeclHttp** adapter, which uses the `pecl_http` package to make HTTP calls
    to Solr. The HTTP, Curl, and Pecl adapter support authentication, which can be
    used by the `setAuthentication()` function discussed earlier. **CurlAdapter**
    also supports the usage proxy. You can also create a custom adapter using the
    adapter interface if required.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have successfully installed Solr as a part of Apache Tomcat server. We saw
    how to communicate with Solr using PHP and cURL but without using a library. We
    discussed a few libraries and concluded that Solarium is feature rich and an actively
    developed and maintained library. We were able to install Solarium and were able
    to communicate with Solr using PHP and Solarium library. We were able to see actual
    queries being executed on Solr in the Solr logs. We explored some features of
    the Solarium client library such as endpoints and adapters.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter we will see how to use the Solarium library for inserting,
    updating, and deleting documents in Solr using our PHP code.
  prefs: []
  type: TYPE_NORMAL
