- en: Chapter 8. Additional Nmap Tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have now successfully written our first Nmap script, and launched a variety
    of scans against a plethora of different target types (and defenses). However,
    scanning a host is only a small part of the full power of the Nmap suite.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to creating a powerful scanning tool and the NSE, Nmap developers
    have included several additional tools—including Ncrack, Nping, Ncat, and Ndiff—into
    default install bundles of Nmap. These tools can help analyze existing scans,
    pivot to other hosts, transfer files, or compare scan results over time.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Attacking services with Ncrack
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Host detection with Nping
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: File transfers and backdoors with Ncat
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Comparing Nmap results with Ndiff
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Attacking services with Ncrack
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the most aggressive tools included in the Nmap suite is Ncrack—a tool
    for aggressively brute-forcing (or "cracking") network services. While it's not
    unique in its functionality (as there are many software tools that can brute force
    network accounts), the ability to easily (and natively) integrate with Nmap (and
    Nmap results) makes it ideal for use after scans.
  prefs: []
  type: TYPE_NORMAL
- en: Before using Ncrack, we need to ensure that it's installed. Although most Nmap
    tools come installed with Nmap suite packages, since Ncrack is technically (at
    the time of writing) an alpha build, it is not included in many installations.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Documentation and the most recent download link is available at [http://nmap.org/ncrack/](http://nmap.org/ncrack/).
  prefs: []
  type: TYPE_NORMAL
- en: 'Installation, like many Nmap tools, is extraordinarily simple; perform the
    following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: '`wget http://nmap.org/ncrack/dist/ncrack-0.4ALPHA.tar.gz`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`tar -xzf ncrack-0.4ALPHA.tar.gz`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`cd ncrack-0.4ALPHA`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`./configure`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`make` ; `sudo make install`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You will be able to see the output of the preceding steps as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Attacking services with Ncrack](img/4065OS_08_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Upon configuration, you may notice a scorpion ASCII art (as shown in the preceding
    screenshot). This art pays homage to the Nmap dragon that you may remember from
    when we first installed Nmap, several chapters ago!
  prefs: []
  type: TYPE_NORMAL
- en: Once Ncrack is installed, there are several useful and interesting ways we can
    invoke it to do our bidding.
  prefs: []
  type: TYPE_NORMAL
- en: '![Attacking services with Ncrack](img/4065OS_08_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The most straightforward way to run Ncrack is very simple; as shown in the preceding
    screenshot, one may simply run `ncrack` followed by the protocol URI and hostname
    (or IP address) of the targeted service. Used in this way, we can attack services
    (such as SSH) by running `ncrack ssh://TARGET`.
  prefs: []
  type: TYPE_NORMAL
- en: Ncrack is most effective when used with a known username. For example, if we
    knew that a given system had a root login that allowed password authentication,
    we would run `ncrack --user root ssh://TARGET` to brute force against that username.
  prefs: []
  type: TYPE_NORMAL
- en: Although this functionality is very useful, it is by no means unique; many tools,
    such as **Hydra** and **Medusa** can run brute force attacks. The true benefits
    of Ncrack are revealed when Ncrack is run based on the results from an Nmap scan.
  prefs: []
  type: TYPE_NORMAL
- en: Let's say that we are conducting a penetration test or security assessment on
    a series of hosts across a Class C (/24) network. If, for example, 200 hosts are
    online—and each one has between five and ten services listening—you're looking
    at a lot of different brute force attempts to implement over the command line.
    Ncrack, however, can do this for you.
  prefs: []
  type: TYPE_NORMAL
- en: 'Just as Nmap can export different log types, Ncrack can read them as input—and
    automatically attack the services in question. For example, if we have an `-oX`
    flag (XML output) from an Nmap scan, Ncrack can use `-iX` to input that same list
    as a target file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Attacking services with Ncrack](img/4065OS_08_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We can easily see that by scanning `nmap.scanme.org` and exporting an XML file,
    we can easily import it to Ncrack. Although this is just one host, you can imagine
    how much time we would save if we used this for a large network! It's also worth
    noting that services that either don't support login, or that Ncrack doesn't know
    how to use, are by default excluded from the scan. In this case, `nping-echo`
    was excluded due to not having a login prompt.
  prefs: []
  type: TYPE_NORMAL
- en: There are a few flags that are absolutely necessary to run Ncrack effectively,
    in addition to specifying target files. The two most important flags for Ncrack
    are `-U` and `-P` flags, which each point to a text file containing usernames
    and passwords.
  prefs: []
  type: TYPE_NORMAL
- en: There are a plethora of other flags, configuration settings, and uses for Ncrack—all
    of which can be found on the very useful main page.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before using Ncrack, a word of caution: while port scanning with Nmap can be
    irritating to many system administrators (and is, in fact, illegal in some areas),
    attempting to compromise a service using Ncrack is illegal and should only be
    done with explicit permission of the system owner. If you''re trying to perform
    a security assessment on your own assets or if you have a signed consent form
    (such as in the case of a penetration test), you''ll be okay—but do not attempt
    to compromise arbitrary hosts on the Internet!'
  prefs: []
  type: TYPE_NORMAL
- en: Host detection with Nping
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Much like Ncrack, Nping was added into the Nmap suite only very recently—its
    first iteration was created in August 2009 (along with Ncrack), and was first
    included in the actual Nmap suite in March 2010.
  prefs: []
  type: TYPE_NORMAL
- en: 'Although you might not expect it from its name, Nping does much more than ICMP
    echo requests (what we typically call a ping)—primarily, it can also execute ARP
    probes and TCP or UDP requests to given ports, in order to find out if those hosts
    are online based on the response. For example, if we want to debug certain network
    connections, we can easily use Nping to determine what''s happening on the wire.
    The following screenshot shows a basic Nping command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Host detection with Nping](img/4065OS_08_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding screenshot, we ran Nping with two checks per port (`-c 2`,
    where "c" stands for "count"), and scanned ports on `dshaw.net`—80\. In this case,
    80 is an open port (it is running my web server), and we can clearly see the responses
    we're expecting. As we remember from earlier chapters, we can now see exactly
    what is happening as the TCP handshake is attempted through network connection
    information (packets sent and received). If we were debugging a network connection,
    we would also specify `-v` to see even more packet information.
  prefs: []
  type: TYPE_NORMAL
- en: One of the most unique features of Nping is its built-in echo mode. The echo
    mode allows Nping to work as both a server and a client, and sends packets back
    and forth. By showing the entirety of a network connection (the packets that the
    client is sending, in their original state, and the packets as they are received
    by a server), it is extremely easy to detect network address translation, interfering
    intrusion prevention systems, packet shaping, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For a full list of Nping echo commands, as well as a variety of intended uses,
    view the Nmap documentation portal (NSEDoc), which has a comprehensive tutorial
    located at [http://nmap.org/book/nping-man-echo-mode.html](http://www.nmap.org/book/nping-man-echo-mode.html).
  prefs: []
  type: TYPE_NORMAL
- en: File transfers and backdoors with Ncat
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For those who may not be familiar, a wonderful network administration tool was
    unveiled in 1995; it was called Netcat. This had a variety of uses, from file
    transfers, to network monitoring, to chat servers—even so functional as to create
    a backdoor—by mirroring its input to a specified network address of the user's
    choice. Netcat was in many ways a very lightweight port scanner—by using a quick
    shell script, it was extremely easy to check whether certain ports were responding
    on a given host.
  prefs: []
  type: TYPE_NORMAL
- en: Netcat is still in heavy use today, but the Nmap development team saw some pretty
    serious improvements—both in stability and usability—that they can make to the
    software. As such, in 2009, Ncat was released as a part of the Nmap suite.
  prefs: []
  type: TYPE_NORMAL
- en: Unlike Netcat, Ncat has SSL support (natively), great connection redirection
    reliability, and several other built-in features that make it a great tool in
    a security administrator's toolbox.
  prefs: []
  type: TYPE_NORMAL
- en: 'Ncat has two modes: the "listen" mode, which listens on a provided port for
    incoming connections, and the "connect" mode, through which commands are sent
    and feedback is received. In the connect mode, we can use Ncat to connect to a
    variety of services, including HTTP-based web servers.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Sending the `GET / HTTP/1.0` request after invoking Ncat via `ncat nmap.org
    80` yields the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![File transfers and backdoors with Ncat](img/4065OS_08_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Although it clearly doesn't render as well as a web browser like Chrome or Firefox
    would, you can see the HTTP/HTML response from the web server quite clearly. This
    same functionality of Ncat can also be used to connect to many different types
    of services, including SMTP, FTP, POP3, and so on. When trying to send different
    inputs to different protocols, Ncat can be invaluable!
  prefs: []
  type: TYPE_NORMAL
- en: Ncat is also very useful when conducting a penetration test or security assessment,
    as it can be used as both a method for data exfiltration, and as a way to have
    a persistent backdoor into a compromised system.
  prefs: []
  type: TYPE_NORMAL
- en: 'The ability to send a file through Ncat uses both the "listen" and "connect"
    functionalities of the tool. The following screenshot shows a very basic Ncat
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![File transfers and backdoors with Ncat](img/4065OS_08_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: To begin, we set up an Ncat listener using the `-l` or `listen` flag. Since
    we are expecting a file, we can pipe the output to `received.txt`. We always want
    to make sure that we are outputting the type of file that we're expecting so that
    we don't have to deal with changing file types at a later date. When setting up
    the listener, we can also set up a specific port (which is useful on penetration
    tests); but in this case, we left the default port of 31337 intact.
  prefs: []
  type: TYPE_NORMAL
- en: '![File transfers and backdoors with Ncat](img/4065OS_08_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We can see in the preceding screenshot that somewhere else (not in the listener)
    we have a file called `send.txt` with the `this is the file that we are going
    to send!` content. Sending the file is easy! All we need to do is invoke Ncat,
    point it at a localhost (again, we''re using the default port of 31337 so no port
    specification is necessary), and pipe the input from `send.txt`. The following
    screenshot demonstrates opening a received text file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![File transfers and backdoors with Ncat](img/4065OS_08_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As we can see in the preceding screenshot, Ncat will automatically close out
    once the file is received. Once we actually receive the file, it's as simple as
    "cat"-ing the file we received to see that it is in fact the same content as the
    one we sent.
  prefs: []
  type: TYPE_NORMAL
- en: 'Lastly, Ncat can also be used as a backdoor, in order to create persistent
    access to a compromised system. The following screenshot shows this basic functionality:'
  prefs: []
  type: TYPE_NORMAL
- en: '![File transfers and backdoors with Ncat](img/4065OS_08_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'As seen in the preceding screenshot, establishing a shell connection via Ncat
    is very simple. We used `ncat -l -e /bin/bash` to listen on the default, and executed
    `/bin/bash` (our shell) when a client connected. It''s worth noting that in this
    form, the backdoor is not persistent—meaning that it will not stay listening after
    the client has disconnected. The following screenshot demonstrates the ability
    to run Linux commands on a remote system through Ncat:'
  prefs: []
  type: TYPE_NORMAL
- en: '![File transfers and backdoors with Ncat](img/4065OS_08_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In order to connect to the shell, as shown in the preceding screenshot, we can
    simply invoke `ncat localhost` (since the port is still default) and have a bash
    shell spawn our prompt. In this case, we ran `whoami` and received back `dshaw`,
    then executed a `ls` command and received a directory listing of the remote directory.
    While other backdoor access methods may be more reliable or complicated, it is
    hard to think of one more simple!
  prefs: []
  type: TYPE_NORMAL
- en: Comparing Nmap results with Ndiff
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The last tool that comes packed with the Nmap suite is Ndiff. For those unfamiliar
    with the traditional *NIX tool "diff," it is designed to visually show the differences
    between two separate files of text. In other words, if you (for example) want
    to see which lines of code changed when a patch was applied, you can "diff" the
    new patch and the old code, and visually see the differences. The following screenshot
    shows a basic Nmap command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Comparing Nmap results with Ndiff](img/4065OS_08_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding screenshot, we launched a scan against my web server—`dshaw.net`—for
    ports 80 and 81\. We named our first scan `scan1.xml` and ran another scan against
    the same host—we called it `scan2.xml`. The only difference is that I used Ncat
    (which we learned about earlier in this chapter) to open up port 81 to the Internet.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to compare the results, we simply have to call `ndiff scan1.xml scan2.xml`—very
    straightforward. The following screenshot demonstrates this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Comparing Nmap results with Ndiff](img/4065OS_08_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As you can clearly see in the preceding screenshot, the Ndiff output—which uses
    the same format as the traditional "diff" tool—shows `+` and `–` to indicate which
    lines are new or old. Since it parses through the actual XML file, rather than
    just the text output, Ndiff can successfully determine when new hosts were added
    in their entirety, rather than just being in a different place in the output.
    In this case, it's very clear that port 81 (with only a default "service" tag,
    rather than actual version scanning) was open in the second scan, but not the
    first. This tool is very useful for system administrators who want to view the
    state of their network over time.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter gave an overview of the additional tools that ship with the Nmap
    suite, and the various tasks that we can accomplish using them. Although Nmap
    itself is wonderful, in order to have the full breadth of Nmap's usefulness, we
    need to use some of the packaged tools as well.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn how to use Nmap with other tools outside
    of the Nmap suite, in order to conduct a fully functional security assessment,
    or penetration tests.
  prefs: []
  type: TYPE_NORMAL
