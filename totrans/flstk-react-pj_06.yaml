- en: Exercising New MERN Skills with an Online Marketplace
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As more businesses continue to move to the web, the ability to buy and sell
    in an online marketplace setting has become a core requirement for many web platforms.
    In this and the next chapter, we will utilize the MERN stack technologies to develop
    an online marketplace application complete with features that enable users to
    buy and sell.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will start building the online marketplace by extending
    the MERN skeleton with the following features:'
  prefs: []
  type: TYPE_NORMAL
- en: Users with seller accounts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Shop management
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Product management
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Product search by name and category
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MERN Marketplace
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The MERN Marketplace application will allow users to become sellers, who can
    manage multiple shops, and add the products they want to sell in each shop. Users
    who visit MERN Marketplace will be able to search for and browse products they
    want to buy, and add products to their shopping cart to place an order:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/3a5e153a-60bd-4cba-8f79-523426175c96.png)The code for the complete
    MERN Marketplace application is available on GitHub: [github.com/shamahoque/mern-marketplace](https://github.com/shamahoque/mern-marketplace). The
    implementations discussed in this chapter can be accessed in the seller-shops-products
    branch of the repository. You can clone this code and run the application as you
    go through the code explanations in the rest of this chapter.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The views needed for the features related to seller accounts, shops, and products
    will be developed by extending and modifying the existing React components in
    the MERN skeleton application. The component tree pictured next shows all the
    custom React components that make up the MERN Marketplace frontend developed in
    this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/80051e3f-cad6-4cc1-b7ff-457b701d9998.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Users as sellers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Any user that signs up on the MERN Marketplace can choose to become a seller
    by updating their profile:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/59234305-80cf-4846-9bf4-def391fdfd9b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In contrast to being a regular user, becoming sellers will allow users to create
    and manage their own shops where they can manage products:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/5c7b9488-dd1a-474d-977f-75f6a80fa956.png)'
  prefs: []
  type: TYPE_IMG
- en: To add this seller feature, we need to update the user model, the Edit Profile
    view, and add a MY SHOPS link to the menu that will only be visible to sellers.
  prefs: []
  type: TYPE_NORMAL
- en: Updating the user model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The user model will need a seller value that will be set to `false` by default
    to represent regular users, and can be set to `true` to represent users who are
    also sellers.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/server/models/user.model.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The seller value must be sent to the client with the user details received on
    successful sign-in, so the view can be rendered accordingly to show information
    relevant to the seller.
  prefs: []
  type: TYPE_NORMAL
- en: Updating the Edit Profile view
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A signed-in user will see a toggle in the Edit Profile view, to either activate
    or deactivate the seller feature. We will update the `EditProfile` component to
    add a `Material-UI` `Switch` component in `FormControlLabel`.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/user/EditProfile.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Any changes to the switch will be set to the value of the `seller` in state
    by calling the `handleCheck` method.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/user/EditProfile.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: On submit, the `seller` value is added to details sent in the update to the
    server.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/user/EditProfile.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: On successful update, the user details stored in `sessionStorage` for auth purposes
    should also be updated. The `auth.updateUser` method is called to do this `sessionStorage`
    update. It is defined with the other `auth-helper.js` methods, and passed the
    updated user data and a callback function that updates the view, as parameters.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/auth/auth-helper.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Updating the menu
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the navigation bar, to conditionally display a link to *My Shops*, which
    is only visible to the signed-in users who are also sellers, we will update the
    `Menu` component, as follows, within the previous code that only renders when
    a user is signed in.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/core/Menu.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Shops in the Marketplace
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sellers on MERN Marketplace can create shops and add products to each shop.
    To store the shop data and enable shop management, we will implement a Mongoose
    Schema for shops, backend APIs to access and modify the shop data, and frontend
    views for the shop owner and buyers browsing through the marketplace.
  prefs: []
  type: TYPE_NORMAL
- en: Shop model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Shop schema defined in `server/models/shop.model.js` will have simple fields
    to store shop details, along with a logo image, and a reference to the user who
    owns the shop.
  prefs: []
  type: TYPE_NORMAL
- en: '**Shop name and description**: Name and description fields will be string types,
    with `name` as a required field:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '**Shop logo image**: The `image` field will store the logo image file to be
    uploaded by the user, as data in the MongoDB database:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '**Shop owner**: The owner field will reference the user who is creating the
    shop:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '**Created and updated at times**: The `created` and `updated` fields will be
    `Date` types, with `created` generated when a new shop is added, and `updated`
    changed when any shop details are modified:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The fields in this schema definition will enable us to implement all shop-related
    features in MERN Marketplace.
  prefs: []
  type: TYPE_NORMAL
- en: Create a new shop
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In MERN Marketplace, a user who is signed in and also a seller will be able
    to create new shops.
  prefs: []
  type: TYPE_NORMAL
- en: Create shop API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the backend, we will add a POST route that verifies that the current user
    is a seller and creates a new shop with the shop data passed in the request.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/server/routes/shop.routes.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The `shop.routes.js` file will be very similar to the `user.routes` file, and
    to load these new routes in the Express app, we need to mount the shop routes
    in `express.js`, like we did for the auth and user routes.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/server/express.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: We will update the user controller to add the `isSeller` method, this will ensure
    the current user is actually a seller before creating the new shop.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/server/controllers/user.controller.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: The `create` method, in the shop controller, uses the `formidable` npm module
    to parse the multipart request that may contain an image file uploaded by the
    user for the shop logo. If there is a file, `formidable` will store it temporarily
    in the filesystem, and we will read it using the `fs` module to retrieve the file
    type and data to store it to the `image` field in the shop document.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/server/controllers/shop.controller.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: The logo image file for the shop is uploaded by the user and stored in MongoDB
    as data. Then, in order to be shown in the views, it is retrieved from the database
    as an image file at a separate GET API. The GET API is set up as an Express route
    at `/api/shops/logo/:shopId`, which gets the image data from MongoDB and sends
    it as a file in the response. The implementation steps for file upload, storage,
    and retrieval are outlined in detail in the *Upload profile photo* section in
    [Chapter 5](8af4986f-1f37-45f2-ba05-85caa119a652.xhtml), *Starting with a Simple
    Social Media Application*.
  prefs: []
  type: TYPE_NORMAL
- en: Fetch the create API in the view
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the frontend, to use this create API, we will set up a `fetch` method in
    `client/shop/api-shop.js` to make a post request to the create API by passing
    the multipart form data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: NewShop component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the `NewShop` component, we will render a form that allows a seller to create
    a shop by entering a name and description, and uploading a logo image file from
    their local filesystem:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/df926141-6696-4db6-ac6e-40059ccba860.png)'
  prefs: []
  type: TYPE_IMG
- en: We will add the file upload elements using a Material-UI button and an HTML5
    file input element.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/shop/NewShop.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: The name and description form fields will be added with the `TextField` components.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/shop/NewShop.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: These form field changes will be tracked with the `handleChange` method.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/shop/NewShop.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: The `handleChange` method updates the state with the new values and populates
    `shopData`, which is a `FormData` object that ensures the data is stored in the
    correct format needed for the `multipart/form-data` encoding type. The `shopData`
    object is initialized in `componentDidMount`.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/shop/NewShop.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: On form submit, the `create` fetch method is called in the `clickSubmit` function.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/shop/NewShop.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: On successful shop creation, the user is redirected back to the `MyShops` view.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/shop/NewShop.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: The `NewShop` component can only be viewed by a signed-in user who is also a
    seller. So we will add a `PrivateRoute` in the `MainRouter` component, that will
    render this form only for authorized users at `/seller/shop/new`.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/MainRouter.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: This link can be added to any of the view components that may be accessed by
    the seller.
  prefs: []
  type: TYPE_NORMAL
- en: List shops
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In MERN Marketplace, regular users will be able to browse through a list of
    all the shops on the platform, and a shop owner will manage a list of their own
    shops.
  prefs: []
  type: TYPE_NORMAL
- en: List all shops
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A list of all the shops will be fetched from the backend and displayed to the
    end user.
  prefs: []
  type: TYPE_NORMAL
- en: Shops list API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the backend, we will add a route in `server/routes/shop.routes.js` to retrieve
    all the shops stored in the database when the server receives a GET request at
    `''/api/shops''`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: The `list` controller method in `shop.controller.js` will query the Shop collection
    in the database to return all the shops.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/server/controllers/shop.controller.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Fetch all shops for the view
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the frontend, to fetch the shops using this list API, we will set up a `fetch`
    method in `client/shop/api-shop.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Shops component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the `Shops` component, we will render the list of shops in a Material-UI
    `List`, after fetching the data when the component mounts and setting the data
    to state:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/c67be761-9fe9-4ad4-bd31-e1f4418fb682.png)'
  prefs: []
  type: TYPE_IMG
- en: The `loadShops` method is called in `componentDidMount` to load the shops when
    the component mounts.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/shop/Shops.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: It uses the `list` fetch method to retrieve the shop list and sets the data
    to state.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/shop/Shops.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: In the `Shops` component, the retrieved shops array is iterated over using `map`,
    with each shop's data rendered in the view in a Material-UI `ListItem`, and each
    `ListItem` is also linked to the individual shop's view.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/shop/Shops.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: The `Shops` component will be accessed by the end user at `/shops/all`, set
    up with React Router and declared in `MainRouter.js`.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/MainRouter.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: List shops by owner
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Authorized sellers will see a list of the shops they created, which they can
    manage by editing or deleting any shop on the list.
  prefs: []
  type: TYPE_NORMAL
- en: Shops by owner API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will add a GET route to retrieve the shops owned by a specific user to the
    shop routes declared in the backend.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/server/routes/shop.routes.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: To process the `:userId` param and retrieve the associated user from the database,
    we will utilize the `userByID` method in user controller. We will add the following
    to the `Shop` routes in `shop.routes.js`, so the user is available in the `request`
    object as `profile`.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/server/routes/shop.routes.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: The `listByOwner` controller method in `shop.controller.js` will query the `Shop`
    collection in the database to get the matching shops.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/server/controllers/shop.controller.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: In the query to the Shop collection, we find all the shops where the `owner`
    field matches the user specified with the `userId` param.
  prefs: []
  type: TYPE_NORMAL
- en: Fetch all shops owned by a user for the view
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the frontend, to fetch the shops for a specific user using this list by
    owner API, we will add a fetch method in `client/shop/api-shop.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: MyShops component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `MyShops` component is similar to the `Shops` component, it fetches the
    list of shops owned by the current user in `componentDIdMount`, and renders each
    shop in a `ListItem`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/616c4231-1720-4919-beac-fe405b705498.png)'
  prefs: []
  type: TYPE_IMG
- en: Additionally, each shop has an `edit` and a `delete` option, unlike the list
    of items in `shops`.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/shop/MyShops.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: The `Edit` button links to the Edit Shop view. The `DeleteShop` component handles
    the delete action, and updates the list by calling the `removeShop` method passed
    from `MyShops`, to update the state with the modified list of shops for the current
    user.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/shop/MyShops.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: The `MyShops` component can only be viewed by a signed-in user who is also a
    seller. So we will add a `PrivateRoute` in the `MainRouter` component, which will
    render this component only for authorized users, at `/seller/shops`.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/MainRouter.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Display a shop
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Any users browsing MERN Marketplace will be able to browse each individual shop.
  prefs: []
  type: TYPE_NORMAL
- en: Read a shop API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the backend, we will add a `GET` route that queries the `Shop` collection
    with an ID and returns the shop in the response.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/server/routes/shop.routes.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: The `:shopId` param in the route URL will call the `shopByID` controller method,
    which is similar to the `userByID` controller method, retrieves the shop from
    the database, and attaches it to the request object to be used in the `next` method.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/server/controllers/shop.controller.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: The `read` controller method then returns this `shop` object in the response
    to the client.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/server/controllers/shop.controller.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: Fetch the shop in the view
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In `api-shop.js`, we will add a `fetch` method to use this read API in the frontend.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/shop/api-shop.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Shop component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `Shop` component will render the shop details and also a list of products
    in the specified shop using a product list component, which will be discussed
    in the *Products* section:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/ea0dcb6f-6c84-49b8-b545-6f7fb64e2d01.png)'
  prefs: []
  type: TYPE_IMG
- en: The `Shop` component can be accessed in the browser at the `/shops/:shopId`
    route, which is defined in `MainRouter` as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/MainRouter.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: In `componentDidMount`, the shop details are fetched using the `read` method
    from `api-shop.js`.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/shop/Shop.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: The retrieved shop data is set to state and rendered in the view to display
    the shop's name, logo, and description.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/shop/Shop.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: The `logoUrl` points to the route that retrieves the logo image from the database
    if it exists, and it's defined as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/shop/Shop.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: Edit a shop
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Authorized sellers will also be able to edit the details of the shops they own.
  prefs: []
  type: TYPE_NORMAL
- en: Edit shop API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the backend, we will add a `PUT` route that allows an authorized seller to
    edit one of their shops.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/server/routes/shop.routes.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: The `isOwner` controller method ensures that the signed-in user is actually
    the owner of the shop being edited.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/server/controllers/shop.controller.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: The `update` controller method will use `formidable` and `fs` modules as in
    the `create` controller method discussed earlier, to parse the form data and update
    the existing shop in the database.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/server/controllers/shop.controller.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: Fetch the edit API in the view
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The edit API is called in the view using a `fetch` method that takes the form
    data and sends the multipart request to the backend.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/shop/api-shop.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: EditShop component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `EditShop` component will show a form similar to the create new shop form,
    pre-populated with the existing shop details. This component will also show a
    list of the products in this shop, to be discussed in the *Products* section:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/7d0e26cb-2b0f-4f2f-8ba5-21e567bf8905.png)'
  prefs: []
  type: TYPE_IMG
- en: The form part is similar to the form in the `NewShop` component, with the same
    form fields and a `formData` object that holds the multipart form data sent with
    the `update` fetch method.
  prefs: []
  type: TYPE_NORMAL
- en: The `EditShop` component is only accessible by authorized shop owners. So we
    will add a `PrivateRoute` in the `MainRouter` component, which will render this
    component only for authorized users at `/seller/shop/edit/:shopId`.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/MainRouter.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: This link is added with an edit icon for each shop in the `MyShops` component.
  prefs: []
  type: TYPE_NORMAL
- en: Delete a shop
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An authorized seller can delete any of their own shops from the `MyShops` list.
  prefs: []
  type: TYPE_NORMAL
- en: Delete shop API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the backend, we will add a `DELETE` route that allows an authorized seller
    to delete one of their own shops.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/server/routes/shop.routes.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: The `remove` controller method deletes the specified shop from the database,
    if `isOwner` confirms that the signed-in user is the owner of the shop.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/server/controllers/shop.controller.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: Fetch the delete API in the view
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will add a corresponding method in the frontend to make a delete request
    to the delete API.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/shop/api-shop.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: DeleteShop component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `DeleteShop` component is added to the `MyShops` component for each shop
    in the list. It takes the `shop` object and a `onRemove` method as props from
    `MyShops`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/9dc19d06-d474-4b66-bbaa-070dd8d16b12.png)'
  prefs: []
  type: TYPE_IMG
- en: This component is basically an icon button that, on click, opens a confirm dialog
    to ask the user whether they are sure they want to delete their shop.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/shop/DeleteShop.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: On delete confirmation from the user in the dialog, the `delete` fetch method
    is called in `deleteShop`.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/shop/DeleteShop.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: On successful deletion, the dialog is closed and the shop list in `MyShops`
    is updated by calling the `onRemove` prop, which gets the `removeShop` method
    passed in as a prop from `MyShops`.
  prefs: []
  type: TYPE_NORMAL
- en: These shop views will allow both buyers and sellers to interact with the shops.
    The shops will also have products, discussed next, which the owners will manage
    and the buyers will browse through with an option to add to their cart.
  prefs: []
  type: TYPE_NORMAL
- en: Products
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Products are the most crucial aspect in a marketplace application. In the MERN
    Marketplace, sellers can manage products in their shops, and visitors can search
    for and browse products.
  prefs: []
  type: TYPE_NORMAL
- en: Product model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Products will be stored in a product collection in the database, with a schema
    defined using Mongoose. For MERN Marketplace, we will keep the product schema
    simple with support for fields such as product name, description, image, category,
    quantity, price, created at, updated at, and a reference to the shop.
  prefs: []
  type: TYPE_NORMAL
- en: '**Product name and description**: The `name` and `description` fields will
    be `String` types, with `name` as a `required` field:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: '**Product image**: The `image` field will store an image file to be uploaded
    by the user as data in the MongoDB database:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: '**Product category**: The `category` value will allow grouping products of
    the same type together:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: '**Product quantity**: The `quantity` field will represent the amount available
    for selling in the shop:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: '**Product price**: The `price` field will hold the unit price this product
    will cost the buyer:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: '**Product shop**: The `shop` field will reference the shop in which the product
    was added:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: '**Created and updated at times**: The `created` and `updated` fields will be
    `Date` types, with `created` generated when a new product is added, and the `updated`
    time changed when the same product''s details are modified:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: The fields in this schema definition will enable us to implement all product-related
    features in MERN Marketplace.
  prefs: []
  type: TYPE_NORMAL
- en: Create a new product
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sellers in MERN Marketplace will be able to add new products to the shops they
    own and create on the platform.
  prefs: []
  type: TYPE_NORMAL
- en: Create product API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the backend, we will add a route at `/api/products/by/:shopId`, which accepts
    a `POST` request containing product data, to create a new product associated with
    the shop identified by the `:shopId` param. The code to handle this request will
    first check that the current user is the owner of the shop in which the new product
    will be added, before creating the new product in the database.
  prefs: []
  type: TYPE_NORMAL
- en: This create product API route is declared in the `product.routes.js` file, and
    it utilizes the `shopByID` and `isOwner` methods from the shop controller to process
    the `:shopId` param, and to verify the current user as the shop owner.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/server/routes/product.routes.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: The `product.routes.js` file will be very similar to the `shop.routes.js` file,
    and to load these new routes in the Express app, we need to mount the product
    routes in `express.js`, like we did for the shop routes.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/server/express.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: The `create` method, in the product controller, uses the `formidable` npm module
    to parse the multipart request that may contain an image file uploaded by the
    user along with the product fields. The parsed data is then saved to the `Product`
    collection as a new product.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/server/controllers/product.controller.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: Fetching the create API in the view
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the frontend, to use this create API, we will set up a `fetch` method in
    `client/product/api-product.js` to make a post request to the create API by passing
    the multipart form data from the view.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/product/api-product.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: The NewProduct component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `NewProduct` component will be similar to the `NewShop` component. It will
    contain a form that allows a seller to create a product by entering a name, description,
    category, quantity, and price, and uploading a product image file from their local
    filesystem:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/651b5ab8-bc62-48ac-8ff4-c5acdfeb28ea.png)'
  prefs: []
  type: TYPE_IMG
- en: This `NewProduct` component will only load at a route that is associated with
    a specific shop, so only signed-in users who are sellers can add a product to
    a shop they own. To define this route, we add a `PrivateRoute` in the `MainRouter`
    component, which will render this form only for authorized users at `/seller/:shopId/products/new`.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/MainRouter.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: List products
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In MERN Marketplace, products will be presented to users in multiple ways, the
    two main distinctions will be in the way products are listed for sellers and the
    way they are listed for buyers.
  prefs: []
  type: TYPE_NORMAL
- en: List by shop
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Visitors to the marketplace will browse products in each shop, and sellers will
    manage a list of products in each of their shops.
  prefs: []
  type: TYPE_NORMAL
- en: Products by shop API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To retrieve products from a specific shop in the database, we will set up a
    GET route at `/api/products/by/:shopId`, as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/server/routes/product.routes.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: The `listByShop` controller method executed in response to this request will
    query the Product collection to return the products matching the given shop's
    reference.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/server/controllers/product.controller.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: In the frontend, to fetch the products in a specific shop using this list by
    shop API, we will add a fetch method in `api-product.js`.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/product/api-product.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: Products component for buyers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `Products` component is mainly for displaying the products to visitors
    who may buy the products. We will use this component to render product lists relevant
    to the buyer. It will receive the product list as props from a parent component
    displaying a list of products:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/ac725381-88fc-4ed2-8d4e-73c76d340bf1.png)'
  prefs: []
  type: TYPE_IMG
- en: The list of products in a shop will be displayed to the user in an individual
    `Shop` view. So this `Products` component is added to the `Shop` component and
    given the list of relevant products as props. The `searched` prop relays whether
    this list is a result of a product search, so appropriate messages can be rendered.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/shop/Shop.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: In the `Shop` component, we need to add a call to the `listByShop` fetch method
    on `componentDidMount` to retrieve the relevant products and set it to state.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/shop/Shop.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: In the `Products` component, if the product lists sent in the props contains
    products, the list is iterated over and the relevant details of each product are
    rendered in a Material-UI `GridListTile`, with a link to the individual product
    view and an `AddToCart` component (implementation for which is discussed in [Chapter
    7](b73b9122-dd0c-45dc-ac34-94ce990e0437.xhtml), *Extending the Marketplace for
    Orders and Payments*).
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/product/Products.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: This `Products` component is used to render products in a shop, products by
    category, and products in search results.
  prefs: []
  type: TYPE_NORMAL
- en: MyProducts component for shop owners
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In contrast to the `Products` component, the `MyProducts` component in `client/product/MyProducts.js`
    is only for displaying products to sellers so they can manage the products in
    each shop:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/1179071d-86e9-4026-8dac-527e64f4fe67.png)'
  prefs: []
  type: TYPE_IMG
- en: The `MyProducts` component is added to the `EditShop` view, so sellers can manage
    a shop and its contents in one place. It is provided the shop's ID in a prop,
    so relevant products can be fetched.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/shop/EditShop.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: In `MyProducts`, the relevant products are first loaded in `componentDidMount`.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/product/MyProducts.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: The `loadProducts` method uses the same `listByShop` fetch method to retrieve
    the products in the shop and sets it to state.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/product/MyProducts.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: This list of products is iterated over and each product is rendered in `ListItem`
    along with an edit and delete option, similar to the `MyShops` list view. The
    edit button links to the Edit Product view. The `DeleteProduct` component handles
    the delete action, and reloads the list by calling an `onRemove` method passed
    from `MyProducts`, to update the state with the updated list of products for the
    current shop.
  prefs: []
  type: TYPE_NORMAL
- en: The `removeProduct` method, defined in `MyProducts`, is provided as the `onRemove`
    prop to the `DeleteProduct` component.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/product/MyProducts.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: List product suggestions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Visitors to MERN Marketplace will see product suggestions, such as the latest
    products added to the marketplace and products related to the product they are
    currently viewing.
  prefs: []
  type: TYPE_NORMAL
- en: Latest products
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: On the homepage of the MERN Marketplace, we will display five of the latest
    products added to the marketplace. To fetch the latest products, we will set up
    an API that will receive a GET request at `/api/products/latest`.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/server/routes/product.routes.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: The `listLatest` controller method will sort the list of products in the database
    with the `created` date from newest to oldest and return the first five from the
    sorted list in the response.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/server/controllers/product.controller.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: In the frontend, we will set up a corresponding fetch method in `api-product.js`
    for this latest `products` API, similar to the `fetch` for retrieving the list
    by shop. This retrieved list will then be rendered in the `Suggestions` component
    added to the homepage.
  prefs: []
  type: TYPE_NORMAL
- en: Related products
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In each individual product view, we will show five related products as suggestions.
    To retrieve these related products, we will set up an API that accepts a request
    at `/api/products/related`.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/server/routes/product.routes.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: The `:productId` param in the route URL route will call the `productByID` controller
    method, which is similar to the `shopByID` controller method, and retrieves the
    product from the database and attaches it to the request object to be used in
    the `next` method.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/server/controllers/product.controller.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: The `listRelated` controller method queries the `Product` collection to find
    other products with the same category as the given product, excluding the given
    product, and returns the first five products in the resulting list.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/server/controllers/product.controller.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: In order to utilize this related-products API in the frontend, we will set up
    a corresponding fetch method in `api-product.js`. The fetch method will be called
    in the `Product` component with the product ID to populate the `Suggestions` component
    rendered in the product view.
  prefs: []
  type: TYPE_NORMAL
- en: Suggestions component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `Suggestions` component will be rendered on the homepage and on an individual
    product page to show the latest products and related products, respectively:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/81546059-ce0f-4787-9d3c-a6c9d41cb1de.png)'
  prefs: []
  type: TYPE_IMG
- en: 'It will receive the relevant list of products from the parent component as
    props, along with a title for the list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: In the `Suggestions` component, the received list is iterated over and individual
    products rendered with relevant details, a link to the individual product page,
    and an `AddToCart` component.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/product/Suggestions.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: Display a product
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Visitors to the MERN Marketplace will be able to browse each product with more
    details displayed in a separate view.
  prefs: []
  type: TYPE_NORMAL
- en: Read a product API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the backend, we will add a GET route that queries the `Product` collection
    with an ID and returns the product in the response.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/server/routes/product.routes.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: The `:productId` param invokes the `productByID` controller method, which retrieves
    the product from the database and appends it to the request object. The product
    in the request object is used by the `read` controller method to respond to the
    `read` request.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/server/controllers/product.controller.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: In `api-product.js`, we will add a fetch method to use this read API in the
    frontend.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/product/api-product.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: Product component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `Product` component will render the product details, include an add to
    cart option, and also show a list of related products:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/5ade3fb1-cdb7-40a3-8d9c-75a03b55131d.png)'
  prefs: []
  type: TYPE_IMG
- en: The `Product` component can be accessed in the browser at the `/product/:productID`
    route, which is defined in `MainRouter` as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/MainRouter.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: The product details and the related list data will be fetched when the component
    mounts or will receive new props when the `productId` changes in the frontend
    route path after the user clicks on another product in the related list.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/product/Product.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: The `loadProduct` method calls the `read` and `listRelated` fetch methods to
    get the product and related list data, then sets the data to state.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/product/Product.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: The product details part of the component displays relevant information about
    the product and an `AddToCart` component in a Material-UI `Card` component.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/product/Product.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: The `Suggestions` component is added in the Product view with the related list
    data passed as a prop.
  prefs: []
  type: TYPE_NORMAL
- en: Edit and delete a product
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Implementations to edit and delete products in the application are similar to
    editing and deleting shops, as covered in previous sections. These functionalities
    will require corresponding APIs in the backend, fetch methods in the frontend,
    and React component views with forms and actions.
  prefs: []
  type: TYPE_NORMAL
- en: Edit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The edit functionality is very similar to create product and the `EditProduct`
    form component is also only accessible by verified sellers at `/seller/:shopId/:productId/edit`.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/MainRouter.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: The `EditProduct` component contains the same form as `NewProduct` with populated
    values of the product retrieved using the read product API, and it uses a fetch
    method to send multipart form data with a PUT request to the edit product API
    in the backend at `/api/products/by/:shopId`.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/server/routes/product.routes.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: The `update` controller is similar to the product `create` method and shop `update`
    method; it handles the multipart form data using `formidable` and extends the
    product details to save the updates.
  prefs: []
  type: TYPE_NORMAL
- en: Delete
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `DeleteProduct` component is added to the `MyProducts` component for each
    product in the list, as discussed earlier. It takes the `product` object, `shopID`,
    and a `loadProducts` method as a prop from `MyProducts`. The component is similar
    to `DeleteShop`, and when the delete intent is confirmed by the user, it calls
    the fetch method for delete, which makes the DELETE request to the server at `/api/product/:shopId/:productId`.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/server/routes/product.routes.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: Product search with category
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In MERN Marketplace, visitors will be able to search for specific products by
    name and also in a specific category.
  prefs: []
  type: TYPE_NORMAL
- en: Categories API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To allow users to select a specific category to search in, we will set up an
    API that retrieves all the distinct categories present in the `Product` collection
    in the database. A GET request to `/api/products/categories` will return an array
    of unique categories.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/server/routes/product.routes.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: The `listCategories` controller method queries the `Product` collection with
    a `distinct` call against the `category` field.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/server/controllers/product.controller.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: This categories API can be used in the frontend with a corresponding fetch method
    to retrieve the array of distinct categories and display in the view.
  prefs: []
  type: TYPE_NORMAL
- en: Search products API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The search products API will take a GET request at `/api/products?search=value&category=value`,
    with query parameters in the URL to query the `Product` collection with provided
    search text and category values.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/server/routes/product.routes.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs: []
  type: TYPE_PRE
- en: The `list` controller method will first process the query parameters in the
    request, then find products in the given category, if any, with names that partially
    match with the provided search text.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/server/controllers/product.controller.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE97]'
  prefs: []
  type: TYPE_PRE
- en: Fetch search results for the view
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To utilize this search API in the frontend, we will set up a method that constructs
    the URL with query parameters and calls a fetch to the API.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/product/api-product.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs: []
  type: TYPE_PRE
- en: In order to construct the query parameters in the correct format, we will use
    the `query-string` npm module, which will help stringify the params object into
    a query string that can be attached to the request route.
  prefs: []
  type: TYPE_NORMAL
- en: Search component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The first use case for applying the categories API and search API is the `Search`
    component:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/c2c169cb-0551-44c2-b0ac-862e033f86ac.png)'
  prefs: []
  type: TYPE_IMG
- en: The `Search` component provides the user with a simple form containing a search
    `input` text field and a dropdown of the category options received from a parent
    component that will retrieve the list using the distinct categories API.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/product/Search.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE99]'
  prefs: []
  type: TYPE_PRE
- en: Once the user enters a search text and hits *Enter*, a call is made to the search
    API to retrieve the results.
  prefs: []
  type: TYPE_NORMAL
- en: '`mern-marketplace/client/product/Search.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs: []
  type: TYPE_PRE
- en: Then the results array is passed as a prop to the `Products` component to render
    the matching products below the search form.
  prefs: []
  type: TYPE_NORMAL
- en: Categories component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `Categories` component is the second use case for the distinct categories
    and search APIs. For this component, we first fetch the list of categories in
    a parent component and send it as props to display the categories to the user:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/6f0f8fd3-ab5c-4441-8e25-b50c38df2bf8.png)'
  prefs: []
  type: TYPE_IMG
- en: When the user selects a category in the displayed list, a call is made to the
    Search API with just a category value, and the backend returns all the products
    in the selected category. The returned products are then rendered in a `Products`
    component.
  prefs: []
  type: TYPE_NORMAL
- en: In this first version of the MERN Marketplace, users can become sellers to create
    shops and add products, and visitors can browse shops and search for products,
    while the application also suggests products to the visitor.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we started building an online marketplace application using
    the MERN stack. The MERN skeleton was extended to add a seller role to users,
    so they can create shops and add products to each shop intended for selling to
    other users. We also explored how to utilize the stack to implement features such
    as product browsing, searching, and suggestions for regular users who are interesting
    in buying. But a marketplace application is incomplete without a shopping cart
    for checkout, order management, and payments processing.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will grow our application to add these features and
    learn more about how the MERN stack can be used to implement these core aspects
    of an e-commerce application.
  prefs: []
  type: TYPE_NORMAL
