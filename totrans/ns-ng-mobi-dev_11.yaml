- en: Polish with SASS
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After covering some under the hood plumbing improvements with ngrx state management
    in the previous chapter,  it's finally time to polish this app to improve it's
    overall look and feel. The timing of styling is completely up to your flow of
    development, and oftentimes, we like to polish as we go. In this book, we chose
    to avoid intermixing polishing via CSS with feature development to keep the concepts
    more focused. However, now that we're here, we couldn't be more excited about
    getting that nice look on our app.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: Since standard CSS can become burdensome to maintain as styling grows, we will
    integrate SASS for help. In fact, we will utilize a community plugin developed
    by the man who helped come up with the NativeScript brand name itself, Todd Anglin.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: Integrating SASS into your app
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Best practices when building the core theme's SASS setup
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building a scalable styling setup to maximize style reuse across iOS and Android
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using font icons, such as *Font Awesome*, using the nativescript-ngx-fonticon
    plugin
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Polishing with SASS
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: SASS is the most mature, stable, and powerful professional grade CSS extension
    language in the world... Sass is an extension of CSS that adds power and elegance
    to the basic language. It allows you to use variables, nested rules, mixins, inline
    imports, and more, all with a fully CSS-compatible syntax. SASS helps keep large
    stylesheets well-organized and get small stylesheets up and running.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: http://sass-lang.com/documentation/file.SASS_REFERENCE.html
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sounds good? You bet.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: 'We will first want to install a community plugin published by Todd Anglin:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This plugin will set up a hook that will autocompile your SASS to CSS before
    building your app, so you don't need to worry about installing any other build
    tools.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: We now want to organize our SASS source files in a particular way that will
    lend itself to ease of maintenance for not only shared styles between iOS and
    Android, but also easily allow platform-specific tweaks/overrides. The core theme
    installed by default (`nativescript-theme-core`) ships with a complete set of
    SASS source files, which are already organized to help you build your custom SASS
    on top of it easily.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start by renaming the following:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: '`app.ios.css` to `app.ios.**scss**`'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`app.android.css` to `app.android.**scss**`'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Then for the contents of `app.ios.scss`:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'And for `app.android.scss`:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Okay, now, let''s create that `style` folder with the various partial SASS
    import files to aid our setup, starting with the variables:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: '`style/_variables.scss`:'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: There are actually many different skins/colors you could base your app's style
    sheets on. Check out the following section of the docs to see what's available: [http://docs.nativescript.org/ui/theme#color-schemes](http://docs.nativescript.org/ui/theme#color-schemes).
    For our app, we will base our colors off the *dark* skin.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, create the common shared SASS file, which is where the bulk of the shared
    styles will go. In fact, we will take everything we had defined in the `common.css`
    file and place them here (thereafter, removing the `common.css` file we had before):'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: '`style/_common.scss`:'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This uses our variables file we just created, which enables us to provide our
    own baseline variables from the core theme with our own custom tweaks to the color.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, create the Android override file in case we need it:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: '`styles/_android-overrides.scss`:'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This imports the Android overrides from the core theme while still allowing
    us to apply our own custom overrides if needed.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: 'We can now do the same for iOS:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: '`styles/_ios-overrides.scss`:'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Lastly, we can now convert any component-specific `.css` files to `**.scss**`.
    We had one component using its own defined styles, `record.component.css`. Just
    rename it to `**.scss**`. The NativeScript SASS plugin will autocompile any nested
    `.scss` files it finds.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two more things you may want to do:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: Ignore all `*.css` files from git in addition to hiding `.css` and `.js` files
    in your IDE.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: You don't want to end up with merge conflicts in the future with other developers
    since your `.css` files will all be generated fresh via the SASS compilation each
    time you build the app.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following to your `.gitignore` file:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Then, to hide `.js` and `.css` files in VS Code, we could do this:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Here''s a screenshot of what the structure should look like now:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/00048.jpeg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
- en: Using font icons with the nativescript-ngx-fonticon plugin
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It sure would be nice to swap all those boring label buttons out with nice crisp
    icons, so let's do that. NativeScript provides support for custom font icons out
    of the box using Unicode values on text attributes on buttons, labels, and much
    more. However, with Angular, we can take advantage of another nifty plugin, which
    will provide a nice Pipe allowing us to use the font names for ease of use and
    clarity.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: 'Install the following plugin:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: For this app, we will use the versatile font-awesome icons, so let's download
    that package here from the official site: [http://fontawesome.io/](http://fontawesome.io/).
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside of it, we will find the font files and the css we will need. We want
    to first copy the `fontawesome-webfont.ttf` file into a `new fonts` folder we
    will create in the `app` folder. NativeScript will look for any custom font files
    in that folder when it builds the app:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/00049.jpeg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
- en: We now want to copy the `css/font-awesome.css` file into our app folder as well.
    We can either place it in the root of the folder or in a subfolder. We will create
    an `assets` folder to house this and potentially other similar items in the future.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: 'However, we need to modify this `.css` file slightly. The `nativescript-ngx-fonticon`
    plugin only works with the font class names and doesn''t need any of the utility
    classes font-awesome provides. So, we will need to modify it to remove a lot of
    what was at the top to look like this instead:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/00050.jpeg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
- en: You can learn more about this in the following video: [https://www.youtube.com/watch?v=qb2sk0XXQDw](https://www.youtube.com/watch?v=qb2sk0XXQDw).
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: 'We also set up git to ignore all `*.css` files previously; however, we don''t
    want to ignore the following file:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Now, we are ready to set up the plugin. Since this should be part of the core
    setup of our app, we will modify `app/modules/core/core.module` with our plugin
    configuration:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Since the module relies on the `TNSFontIconService`, let's modify our root component
    to inject it, making sure that Angular's DI instantiates the singleton for us
    to use app-wide.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: '`app/app.component.ts`:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Next, we want to make sure that the `fonticon` pipe is accessible to any of
    our view components, so let''s import and export the module from our `SharedModule`
    at `app/modules/shared/shared.module.ts`:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Lastly, we will need a class to designate which components should be used from
    font-awesome to render themselves. Since this class will be shared across iOS/Android,
    modify `app/style/_common.scss` with the following:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The reason we define two font families is because of the differences between
    iOS and Android. Android uses the name of the file for the font-family (in this
    case, `fontawesome-webfont.ttf`). Whereas iOS uses the actual name of the font;
    examples can be found at [https://github.com/FortAwesome/Font-Awesome/blob/master/css/font-awesome.css#L8](https://github.com/FortAwesome/Font-Awesome/blob/master/css/font-awesome.css#L8).
    You *could* rename the font filename to `FontAwesome.ttf` to use just `font-family:
    FontAwesome` if you wanted. You can learn more at [http://fluentreports.com/blog/?p=176](http://fluentreports.com/blog/?p=176).'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s try out this new ability to render icons in our app. Open `app/modules/mixer/components/mix-list.component.html`:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Let''s also tweak the background color of our `ListView` to be black for now.
    We can even use predefined variables from the core theme now with SASS in `app/style/_common.scss`:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '![](../images/00051.jpeg)Our composition listing view is now starting to look
    pretty decent.'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s keep going and add some icons to our track listing view in `app/modules/player/components/track-list/track-list.component.html`:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: We are swapping out the Switch we had with a Label designed to toggle two different
    icons instead. We are also taking advantage of the core theme's handy color classes
    like c-ruby.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: 'We can also improve our custom `ActionBar` template with some icons:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'We can now style up the player controls at `app/modules/player/components/player-controls/player-controls.component.html`:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'We will take advantage of more helper classes from the core theme. The `c-white`
    class turns our icon white, and `t-30` sets the `font-size: 30`. The latter is
    short for `text-30`, and the other `color-white`.'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/00052.jpeg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
- en: 'It''s amazing how some styling polish can really bring out the personality
    of your app. Let''s crack out the brush one more time on our record view at `app/modules/recorder/components/record.component.html`:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'We can adjust our component class to handle the `recordBtn` and `playBtn` now:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Then, to paint everything into place, we can add this to our `app/modules/recorder/components/record.component.scss`:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'With this polish, we now have the following screenshot:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/00053.jpeg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
- en: Finishing touches
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s use color to finalize our initial app style. It''s time to change the
    base color used in the `ActionBar` to provide the overall feeling we want with
    the app. Let''s start by defining a few variables in `app/style/_variables.scss`:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用颜色来最终确定我们初始应用的样式。现在是改变`ActionBar`中使用的基本颜色，以提供我们想要的整体感觉的时候了。让我们从在`app/style/_variables.scss`中定义一些变量开始：
- en: '[PRE23]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'With those few changes, we have given our app a different (objectively sleeker)
    vibe:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这些少量的改变，我们给我们的应用赋予了不同的（客观上更时尚）氛围：
- en: '![](../images/00054.jpeg)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00054.jpeg)'
- en: Summary
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we were finally able to add some nice polishing touches to
    the app's look and feel. We were able to install the `nativescript-dev-sass` plugin,
    which adds a compilation step to build our CSS while maintaining a clean approach
    to styling. Knowing how best to take advantage of the core theme's SASS with proper
    file organization is key to gaining a flexible base to work with. Take the concepts
    presented in this chapter and let us know how they helped you achieve the styling
    goals you are after; we would love to hear about it!
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们终于能够为应用的外观添加一些精美的修饰。我们成功安装了`nativescript-dev-sass`插件，它在保持清晰的样式处理方法的同时，为我们的CSS添加了编译步骤。了解如何最好地利用核心主题的SASS，并进行适当的文件组织，是获得灵活基础的关键。将本章介绍的概念应用到实践中，并告诉我们它们如何帮助您实现所需的样式目标；我们很乐意听到您的见解！
- en: We also took a look at how to work with the `nativescript-ngx-fonticon` plugin
    to utilize font icons throughout our app. This helped clean up clunky textual
    labels with concise iconic visuals.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还学习了如何使用`nativescript-ngx-fonticon`插件，在整个应用中利用字体图标。这有助于用简洁的图标视觉清理笨重的文本标签。
- en: In the next chapter, we will take a look at how to unit test several key features
    to future proof our app's codebase against new feature integrations, which might
    introduce regressions. Testing to the rescue!
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将看看如何对一些关键功能进行单元测试，以未来保护我们应用的代码库免受新功能集成可能引入的回归。测试来拯救！
