- en: The World of IoT
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Welcome to advanced IoT with JavaScript. In this book, we will look at building
    IoT solutions using JavaScript as our programming language. Before we start with
    the technical deep dive, I would like to talk about the world of IoT, the solutions
    offered by it, and what responsibilities fall on bestows on us developers who
    make these products. In this chapter, we will look at the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: The world of IoT
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: History of IoT
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: IoT uses cases
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technology overview
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Product engineering
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The world of IoT
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Imagine a scenario where you have run out of milk; you have noticed it and put
    it on your shopping list. But due to unforeseen reasons, you forgot to buy milk;
    well, you don't have milk for the next day.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now imagine another scenario: you have a smart fridge, and it noticed that
    you are running out of milk, puts milk on your shopping list, and then updates
    your GPS route to come home via the supermarket, but you still forget it.'
  prefs: []
  type: TYPE_NORMAL
- en: You have to now face the wrath of your refrigerator.
  prefs: []
  type: TYPE_NORMAL
- en: Now that things are getting real, imagine another situation where your fridge
    has skipped the middleman, you, and now directly places an order on Amazon, and
    Amazon delivers it by the time you need your breakfast the next day.
  prefs: []
  type: TYPE_NORMAL
- en: Scenario three is what is we are after. Let one machine talk to another machine
    and take decisions accordingly; things such as the type of milk, quantity, and
    expiry date are automatically validated before purchase.
  prefs: []
  type: TYPE_NORMAL
- en: We humans are now using the world of connected devices and smart devices to
    make our lives better.
  prefs: []
  type: TYPE_NORMAL
- en: What is IoT?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you have been breathing for at least a decade, you must have heard terms
    such as smart living, smart spaces, and intelligent devices. All these refer to
    a parent concept called the **Internet of Things** (**IoT**).
  prefs: []
  type: TYPE_NORMAL
- en: In simple words, IoT is when we have our electronic, electrical, or electro-mechanical
    devices connect to the internet and talk to each other.
  prefs: []
  type: TYPE_NORMAL
- en: 'Smart devices primarily revolve around two things:'
  prefs: []
  type: TYPE_NORMAL
- en: Sensors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Actuators
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Any solution in the IoT space is either sensing something or actuating something.
  prefs: []
  type: TYPE_NORMAL
- en: 'With this technology, we have found the solution for Sheldon Cooper (from the
    Big Bang theory, CBS TV series), where he wants to know who sits on his spot as
    soon as someone sits on it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/00005.jpeg)Source: http://bigbangtheory.wikia.com/wiki/Sheldon%27s_Spot'
  prefs: []
  type: TYPE_NORMAL
- en: All we do is place a weight sensor underneath the cushion, and if the weight
    increases, the sensor will trigger the camera pointing at the sofa to take a picture
    and send a push notification to him with the picture. How about that?
  prefs: []
  type: TYPE_NORMAL
- en: I know I have pushed the examples a bit, but you get the point, right?
  prefs: []
  type: TYPE_NORMAL
- en: A bit of history
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: IoT has existed in various forms for more than 35 years. The earliest example
    I found was a Coke machine at Carnegie Mellon University in 1982\. Developed by
    four graduate students, Mike Kazar, David Nichols, John Zsarnay, and Ivor Durham,
    they hooked up the Coke machine to the internet so that they could check from
    their desks whether the machine was loaded with cold Coke. Source ([https://www.cs.cmu.edu/~coke/](https://www.cs.cmu.edu/~coke/)).
  prefs: []
  type: TYPE_NORMAL
- en: Sir Timothy John Berners-Lee invented the first webpage in 1991.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another example is the internet toaster by John Romkey. He connected his toaster
    to the internet using the TCP/IP protocol. He created one control to turn on the
    toaster and one control to turn it off. Of course, someone had to put the bread
    in the toaster:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/00006.jpeg)Source: http://ieeexplore.ieee.org/document/7786805/'
  prefs: []
  type: TYPE_NORMAL
- en: 'Another interesting IoT example is the Trojan Room coffee pot. This was created
    by Quentin Stafford-Fraser and Paul Jardetzky in 1993\. A camera was located in
    the Trojan Room in the computer laboratory of the University of Cambridge. It
    monitored the coffee pot levels, with an image being updated about three times
    a minute and sent to the building''s server:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/00007.jpeg)Source: https://en.wikipedia.org/wiki/Trojan_Room_coffee_pot'
  prefs: []
  type: TYPE_NORMAL
- en: As mentioned previously, we can see that even before we could imagine the possibilities,
    people had already worked on internet-related solutions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Over the past 2 years, there was one thing that I kept on seeing and started
    believing strongly:'
  prefs: []
  type: TYPE_NORMAL
- en: '"Laziness is the mother of Invention."'
  prefs: []
  type: TYPE_NORMAL
- en: Not necessity, not boredom, but laziness. In this day and age, nobody wants
    to do mundane things such as grocery shopping, walking up to a switch, and turning
    on a light or AC. So, we are searching for new and innovative ways to solve these
    problems.
  prefs: []
  type: TYPE_NORMAL
- en: IoT use cases
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that you have a feel for IoT, you can imagine the literally infinite possibilities
    that can be built using this piece of technology.
  prefs: []
  type: TYPE_NORMAL
- en: 'Based on my observations, IoT use cases can be crudely classified into three
    parts:'
  prefs: []
  type: TYPE_NORMAL
- en: Problem solving
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Convenience
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Showing off
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The problem solving part comes in where IoT is used to solve a real-world problem,
    for instance, a farmer whose farm is located half a kilometre from their home,
    and they have to walk all the way to the farm to turn on their water pumps/motors
    . Another scenario is where a post-operation patient's vital statistics can be
    sent to the hospital periodically after his/her discharge, to monitor the patient
    for any abnormalities. This is where IoT fits in pretty well.
  prefs: []
  type: TYPE_NORMAL
- en: Convenience is where you can turn on your air conditioner 30 mins before you
    reach your home so you can chill as you enter or unlock your door from your work
    if someone you know knocks at your door and you are not nearby.
  prefs: []
  type: TYPE_NORMAL
- en: showing off is where you go to another country just to turn on or off your porch
    light, just to show that IoT works.
  prefs: []
  type: TYPE_NORMAL
- en: All of them are forms of consumption of this technology.
  prefs: []
  type: TYPE_NORMAL
- en: In this book, we will look at covering a few solutions that fall into previous
    use cases.
  prefs: []
  type: TYPE_NORMAL
- en: Technology overview
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we know what IoT is, we can start defining the technology stack. In
    this book, we will build a generic framework using JavaScript for developing IoT
    applications.
  prefs: []
  type: TYPE_NORMAL
- en: We will follow the approach of cloud computing, where we have a bunch of devices
    that are connected to the cloud, compared to a fog computing approach, where there
    is a gateway that can do almost all the things a cloud can but is locally available
    in the on-premises.
  prefs: []
  type: TYPE_NORMAL
- en: Our smart devices will be powered by Raspberry Pi 3, which has the ability to
    talk to the cloud over Wi-Fi and also, using its GPIO pins, talk to the sensors
    and actuators. Using this simple piece of hardware, we will connect sensors and
    actuators and build some real-world solutions in this book.
  prefs: []
  type: TYPE_NORMAL
- en: Another alternative to Raspberry Pi 3 is Raspberry Pi Zero W, which is a miniature
    version of Raspberry Pi 3, in case you are looking to build a compact solution.
  prefs: []
  type: TYPE_NORMAL
- en: We will walk through each piece of technology in [Chapter 2](part0032.html#UGI00-ce91715363d04669bca1c1545beb57ee),
    *IoTFW.js - I* and [Chapter 3](part0072.html#24L8G0-ce91715363d04669bca1c1545beb57ee),
    *IoTFW.js - II,* and from there on use these technologies to build IoT solutions
    in various domains.
  prefs: []
  type: TYPE_NORMAL
- en: Product engineering
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Unlike software development, hardware development is well hard. The time taken,
    the complexity, and the execution are expensive. Imagine a syntax error in a JavaScript
    console; all we need to do is go to the specific line number, make the changes,
    and then refresh the browser.
  prefs: []
  type: TYPE_NORMAL
- en: Now compare this with hardware product development. From the time a piece of
    hardware is identified to when it is put on a supermarket shelf as a shrink-wrapped
    product takes at least 8 months, with at least four iterations of the product
    being made to validate and test it in the real world.
  prefs: []
  type: TYPE_NORMAL
- en: To give another example, the positioning of components on a product makes or
    breaks it. Imagine if there were no ridges or grip on a charger plug; your hand
    will always slip while pulling the charger out of the socket. This is value engineering.
  prefs: []
  type: TYPE_NORMAL
- en: Putting together a **Proof Of Concept** (**POC**) is very simple, as you will
    see in the rest of this book. Turning this POC into a shrink-wrapped product is
    a different ball game altogether. The difference is the same as between singing
    in your bathroom and singing on a stage with millions of people watching you.
  prefs: []
  type: TYPE_NORMAL
- en: Remember that the examples that we will build in this book are all POCs, and
    none of them are remotely close to being used in the production of a product.
    You can always use the solutions we will work on in this book to gain a better
    understanding of implementation and then design your own solution around them.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we looked at what IoT is and a bit of history about it. Next,
    we saw a couple of use cases, a high-level technology overview, and a bit about
    product engineering.
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 2](part0032.html#UGI00-ce91715363d04669bca1c1545beb57ee), *IoTFW.js
    - I*, we will get started with building the IoT framework on which we will build
    our solutions.
  prefs: []
  type: TYPE_NORMAL
