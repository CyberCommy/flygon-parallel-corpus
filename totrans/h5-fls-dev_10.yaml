- en: Chapter 10. Preparing for Release
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Throughout the chapters of this book we have covered many different applications
    and tools for developing your HTML5 content. As with the Flash development cycle
    you have become accustomed to, you will usually need to spend some time optimizing
    your application for use on the web in the final stages of your HTML5 application
    development flow. Thankfully, just like the asset management and coding stages
    of our HTML5 development, there are a ton of great resources to aid in the preparation
    of moving your application onto a public-facing web server. When testing your
    HTML5 applications locally on the computer you are developing them on, your local
    network, unless specially configured, will not allow the content to be viewed
    on any other computer, either on your local network or on the Internet. If you
    were to install a web server on your computer and configure your networking to
    allow incoming connections, only then could you share your work with others on
    the Internet. To avoid any domain name or security issues, the common way to host
    your work on the Internet is to purchase a web hosting plan from a vendor online.
    This way your content is external from your working version and is placed on a
    server specifically dedicated to host your web content. This process isn't new
    for HTML5 by any means and is typical of what you would have done with your Flash
    **SWF** files, provided you had the same intentions. However, since HTML5 projects
    are not compiled into a single binary file such as Flash, we will need to take
    great care in making sure our project assets and code are properly set up to deliver
    a fast and secure experience to our end users. In this chapter, we will conclude
    the book by looking over many of the most optimal ways to prepare your project
    for the web.
  prefs: []
  type: TYPE_NORMAL
- en: Targeting supported web browsers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Many developers fail to constantly test their work in multiple web browsers
    during HTML5 development, either because they are too lazy to spend the time to
    do it, or they just all together forget. Easily one of the biggest issues you
    will encounter when testing and publishing your final application for public usage
    will be browser support. If you didn't manage to test your project in various
    browsers on different platforms, you may be surprised when a user complains that
    your application doesn't work for them. As HTML5 still is the new kid on the block,
    many browsers are still running to catch up with the feature support needed to
    display your HTML5 content properly.
  prefs: []
  type: TYPE_NORMAL
- en: 'Keeping up-to-date with what current web browsers support in the realm of HTML5
    feature support can be an extremely important asset to gain as a developer. Keeping
    yourself and your project out of impending doom, because you were able to spot
    a lack of support on a specific device or platform early, cannot only save you
    tons of time, but money as well. A great "One Stop Shop" for web browser HTML5
    feature support checks is [http://caniuse.com](http://caniuse.com). After opening
    the site in a web browser you can easily select any of the specified HTML5 features
    and look into what browsers, and more importantly what browser versions support
    that specific feature:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Targeting supported web browsers](img/3325OT_10_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Taking a look at the preceding screenshot of the **Canvas** tag element support
    statistics (at the time of writing this book), we can see that the **Canvas**
    element is now supported by around 85 percent of browsers. This site is almost
    a must have when sitting down to create your initial technical outline for your
    project. With even a slight idea of some of the features in HTML5 you may use
    in your project, you can simply jump over to [http://caniuse.com](http://caniuse.com)
    and determine what your end users will be required to use to properly view your
    content.
  prefs: []
  type: TYPE_NORMAL
- en: '[http://html5readiness.com](http://html5readiness.com) is a great example of
    a great HTML5 project in action as the site uses the data from [http://caniuse.com](http://caniuse.com)
    to display the HTML5 **Readiness** in an easy to view, single page, interactive
    graphic.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Targeting supported web browsers](img/3325OT_10_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This can be a great resource just like [http://caniuse.com](http://caniuse.com),
    however your clients or designers may like it even more for its ease of use and
    feature support timeline visualizations.
  prefs: []
  type: TYPE_NORMAL
- en: Having the overview of global browser support is a great resource, but if you
    are interested in digging into the specifications and statistics of the browser
    you use on your computer, head over to [http://html5test.com](http://html5test.com)
    and let the site score your browser.
  prefs: []
  type: TYPE_NORMAL
- en: '![Targeting supported web browsers](img/3325OT_10_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The score generated by the site can be taken as a general overview of all of
    the HTML5 features that this site tests your browser for. Scrolling down the results
    page, you will find the complete outline of each of the tested features and if
    it passed the test or not.
  prefs: []
  type: TYPE_NORMAL
- en: '![Targeting supported web browsers](img/3325OT_10_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: With these easy to use tools that are all accessible online for free, you have
    all of the data at your fingertips to allow for proper planning and outlining
    of your HTML5 applications. Keep in mind that as new browsers are released and
    current versions are updated, this data will continue to evolve. You may even
    find that some of the data you referenced at the beginning of your project development
    has changed by the time you finish. Therefore, testing your project for browser
    compatibility during development is always worth the extra effort.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Be sure to also checkout the HTML5 tests for mobile browsers as well at [http://html5test.com/results/mobile.html](http://html5test.com/results/mobile.html).
    There you can easily find out which current mobile devices best support not only
    the features your HTML5 application utilizes, but also the HTML5 specification
    as a whole. This resource can be of great help when also looking to purchase your
    next mobile phone or tablet.
  prefs: []
  type: TYPE_NORMAL
- en: Client-side tests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With the amount of mobile and desktop devices that have an HTML5-compliant browser,
    growing at an exponential rate, the requirement for developers to test applications
    or web content on a variety of different setups has become a requirement. Unfortunately,
    the amount of time required to set yourself up with testing environments on all
    of these devices can add up very quickly. To save yourself copious amounts of
    time during the testing phase, you may be interested in checking out [http://www.browserstack.com](http://www.browserstack.com).
  prefs: []
  type: TYPE_NORMAL
- en: '![Client-side tests](img/3325OT_10_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: After signing up with BrowserStack, you can easily access all of the modern
    desktop and mobile browsers right from the service. Rather than having to configure
    each machine and browser independently, BrowserStack has done all of the hard
    work for you by only delivering access to the specific browser of your choice
    already preconfigured with development tools. BrowserStack is a paid service,
    but free trials are available if you are interested. Personally I still suggest
    doing this type of testing manually at least once, to see how much you can justify
    the cost of a service like this. If you are the type of person with 10 computers
    sitting in your basement, by all means set up your own testing environment. You
    can also always set up a number of virtual machines on your development computer
    to enable you to turn on and off your testing machines from a single computer.
    Regardless of how you do it, it will only usually be a matter of time before you
    are sick and tired of spending countless hours just maintaining your testing environment
    and a service such as BrowserStack may be the ultimate solution.
  prefs: []
  type: TYPE_NORMAL
- en: Browser Nightly builds
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you are really pushing the limits of what HTML5 can do, it may be a wise
    decision to test your content on the absolute latest version of all of the intended
    browsers that will be viewing your site. With privately developed browsers such
    as Internet Explorer, you will have to wait for Microsoft to release or prerelease
    the next version, but with open source browsers such as Google Chrome ([https://www.google.com/intl/en/chrome/browser/](https://www.google.com/intl/en/chrome/browser/))
    or Mozilla's Firefox ([http://www.mozilla.org/en-US/firefox/new/](http://www.mozilla.org/en-US/firefox/new/)),
    you can download the Nightly or actively developed version of the software to
    see what direction the next version is heading in.
  prefs: []
  type: TYPE_NORMAL
- en: '![Browser Nightly builds](img/3325OT_10_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Google Chrome browser's nightly build is referred to as the Canary build and
    can be found at [https://www.google.ca/intl/en/chrome/browser/canary.html](https://www.google.ca/intl/en/chrome/browser/canary.html).
    As you can see from the tagline in the preceding project website screenshot, this
    build of Chrome is absolute latest and comes with the warning of its possible
    instability right out front. It's worth keeping in mind that you can safely install
    the standard version of Google Chrome on your computer to continue to utilize
    for normal web usage. The Canary build can be opened at any time and is preset
    to continually update itself from the Google distribution server when a new version
    is posted for public usage.
  prefs: []
  type: TYPE_NORMAL
- en: Of course, as mentioned, Mozilla has their own nightly build of Firefox available
    for download as well at [http://nightly.mozilla.org](http://nightly.mozilla.org).
  prefs: []
  type: TYPE_NORMAL
- en: '![Browser Nightly builds](img/3325OT_10_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The nightly builds of Firefox currently come in both the desktop and mobile
    versions of the web browser and again can easily be installed side-by-side with
    your preexisting version of Firefox stable on your computer. Using these development
    versions of popular web browsers not only allows you to test your code on software
    that will soon be available, but it also give you an inside look at some of the
    new and exciting features that the general public may not be able to use until
    the next stable release.
  prefs: []
  type: TYPE_NORMAL
- en: So is it really worth the time to test on these browsers, that, in effect, no
    one is really using yet? Well, being preemptive with your development can really
    pay off for applications that may go untouched from updates or patches on the
    Internet. If you don't manage to catch the fact that your HTML5 web application
    isn't working in the browser that was released a couple months after you published
    your application, that could be a really bad thing. On top of that, spending time
    with these new web browsers will only make you more aware and savvy to what features
    you can utilize when developing your applications. You will begin to learn more
    about the inner workings of a specific browser's development and release cycles
    as well.
  prefs: []
  type: TYPE_NORMAL
- en: WebRTC
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The move to utilize media inputs, such as camera and microphones, within your
    HTML5 applications at an all-time high, WebRTC has come to provide a solution
    to this issue. The WebRTC project is currently supported by Google, Mozilla, and
    Opera, and the project website can be found at [http://www.webrtc.org](http://www.webrtc.org).
    From a Flash developers perspective, the concept of using web cameras and microphones
    without the need for third party plugins should get you even more excited about
    HTML5 development. The features that WebRTC has started to bring to the hands
    of HTML5 developers pushes the limits of what HTML5 can do even closer to that
    of Flash.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you have a friend online and you want to test a simple WebRTC web cam chat
    application, head over to [http://apprtc.appspot.com](http://apprtc.appspot.com)
    and connect to the server which will return an ID for your user. Send that ID
    to a friend along with the URL to the site and connect to each other online in
    a pure HTML5 audio and video chat.
  prefs: []
  type: TYPE_NORMAL
- en: 'Since WebRTC is still a very new specification, only some of the modern browsers
    available right now support it and unfortunately for developers, the support methods
    are a little bit different for each browser. This initial step that any developer
    working with WebRTC should make is to check if the current browser even supports
    this feature. This can be done with some JavaScript function such as the following
    code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, the methods for interacting with the User Media object element
    within JavaScript differ from `getUserMedia` all the way to `msGetUserMedia`,
    depending on the type of web browser attempting to load it. By conditioning all
    of the ways to lookup the user media object into a single return statement, this
    function will either return the user media object, if the browser supports it,
    or return a value of false if nothing was found. With this `hasGetUserMedia` function
    applied into an HTML5 project, we can easily incorporate the function call into
    further code, that applies the user's web cam feed onto the web page if available.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The initial line of this code example applies the element with the ID of `camera`
    to the variable `video`. This element in the HTML document is actually a video
    tag element and looks like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: You may also recall that the video element can be styled by CSS3 properties,
    giving you a ton of design options for displaying the web camera video feed. So
    let's extend these WebRTC related code snippets into a working example with some
    CSS3 styles. We will start by creating our initial HTML page to be displayed in
    the web browser.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Within this HTML page we have also added some simple CSS3 filters with unique
    class names for each. Each of the different CSS styles appended into the HTML
    document also have an HTML button element to correspond with it, located within
    the body of the document. Finally we reference the external JavaScript file that
    will deal with the WebRTC functionality which we will create next.
  prefs: []
  type: TYPE_NORMAL
- en: With the HTML file saved and a new file open to write our JavaScript into, we
    can append the code snippets we have already looked at, as well as some code to
    append the CSS styles, to the video element, when the user clicks the buttons
    on the HTML page.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, the bulk of this JavaScript is dealing with the CSS manipulation
    of the video element and not the setup of the web camera stream. Setting up a
    WebRTC connection to the end user, provided their browser supports it, is easily
    accomplished with a few lines of a JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: '![WebRTC](img/3325OT_10_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Thankfully, I was smart enough to add in the blur effect to hide myself using
    this example in the preceding screenshot. Keep in mind that just like camera and
    microphone connections in Flash, the stream is completely local to the user and
    not sent to any other server unless you have manually added that feature into
    the application. For applications such as multi-user chat and public streaming,
    you will require a server to send your audio or video stream to. Node.js would
    be a perfect place to begin if this type of HTML5 development sounds exciting
    to you. There is even a Node.js package dedicated to dealing with WebRTC ([https://npmjs.org/package/webrtc.io](https://npmjs.org/package/webrtc.io))
    to help get you started in the right direction.
  prefs: []
  type: TYPE_NORMAL
- en: Privacy can be a huge issue when it comes to gaining the ability to stream audio
    and video over the Internet without the use of third party plugins such as Flash
    Player. Therefore, web browsers will always prompt the end user for approval,
    when an attempt is made to connect to their media channels via WebRTC. If you
    are developing HTML5 applications that plan on utilizing features in WebRTC, this
    is an important fact to remember. If a user decides to opt out of enabling their
    microphone or web camera, the user experience of your application may break all
    together. Another step that some browsers such as Google Chrome are taking to
    keep you safe online is by applying a unique icon to any browser tab that has
    an active media stream attached to it. Regardless of whether the stream is delivering
    the content to a third party server or just using it locally, the icon will always
    be visible.
  prefs: []
  type: TYPE_NORMAL
- en: '![WebRTC](img/3325OT_10_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As you can see in the preceding screenshot, when WebRTC has been activated in
    Google Chrome and the user is streaming audio or video to the website, the browser
    tab gains a glowing red recording icon to alert you that the feed is active.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you are interested in learning more about not only the origins of the WebRTC
    project and its support on modern browsers, but also about how to properly utilize
    it in your projects, check out the great article on *Capturing Audio & Video in
    HTML* on [http://www.html5rocks.com/en/tutorials/getusermedia/intro/](http://www.html5rocks.com/en/tutorials/getusermedia/intro/).
  prefs: []
  type: TYPE_NORMAL
- en: What's even more exciting about WebRTC is the possible future for the technology.
    As you have seen in the overview of this technology so far, the aim is really
    to get audio and video working without dependencies on the web. However, there
    is also a goal to get a dedicated data channel working in WebRTC, which could
    enable a slew of amazing new web-based technology, as your computer could really
    act as its own server while using specific web applications.
  prefs: []
  type: TYPE_NORMAL
- en: WebGL support
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: WebGL, like WebRTC, is one of the new and exciting features to start seeing
    high quality support on many modern web browsers on desktop and on mobile. Taking
    advantage of hardware-accelerated graphics on a client's computer or device can
    enable you to bring many of the fully-featured 2D and 3D animations and interactions
    you may have used while developing Flash projects in the past. When attempting
    to verify if the browser you are using supports WebGL, the easiest tool for verification
    can be found at [http://get.webgl.org](http://get.webgl.org).
  prefs: []
  type: TYPE_NORMAL
- en: '![WebGL support](img/3325OT_10_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: If your browser passed the WebGL verification tests, the site will be displayed
    as shown in the previous screenshot, rendering a 3D wireframe rotating cube, and
    the text alerting you of the results. You can of course utilize [http://caniuse.com](http://caniuse.com)
    to check what browsers currently support WebGL as well as dig into the official
    WebGL public wiki found at [http://www.khronos.org/webgl/wiki/Main_Page](http://www.khronos.org/webgl/wiki/Main_Page).
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you are interested in learning more about the exciting world of WebGL in
    HTML5, check out the *WebGL Beginner's Guide* found on the Packt Publishing website
    ([http://www.packtpub.com/webgl-javascript-beginners-guide/book](http://www.packtpub.com/webgl-javascript-beginners-guide/book)).
  prefs: []
  type: TYPE_NORMAL
- en: WebGL on mobile browsers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Depending on the intensity of the WebGL application you are viewing, you may
    notice extremely slow frame rates, as well as, applications that may become unresponsive.
    As WebGL has gained support on a small number of devices and browsers, the development
    community is slowly creating optimizations for mobile experiences utilizing this
    technology. Unfortunately, the processing power between most desktop and a mobile
    devices are still pretty far apart, therefore the requirement for developers to
    optimize their experiences if intending for mobile browsers to view them is critical.
  prefs: []
  type: TYPE_NORMAL
- en: A great resource for checking out WebGL content on your mobile device is the
    Three.js project page found at [http://threejs.org](http://threejs.org). From
    the index of projects and examples on the main page, you can easily get a sense
    of how some of the coolest WebGL examples run on any device.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you are interested in getting a more in depth look at any web browsers' WebGL
    capabilities, check out [http://webgl-bench.appspot.com](http://webgl-bench.appspot.com)
    for an online benchmarking tool to help examine and display your WebGL rendering
    statistics.
  prefs: []
  type: TYPE_NORMAL
- en: Allowing users to find your work
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Although search engine indexing is not directly related to HTML5, since you
    are coming from a Flash developer's perspective, it is definitely worth noting.
    Many search engines have become increasingly better at parsing Flash content for
    search engine results, but at the end of the day, creating a full Flash site will
    require you to perform some work around to have your content displayed properly,
    when someone attempts to search for it. Search engine bots will have a much easier
    time reading your HTML5 projects as they have a more direct approach to reading
    the important data about the pages on your website.
  prefs: []
  type: TYPE_NORMAL
- en: With the growth in what HTML element tags may now contain, the ability to tag
    specific elements on your site, specifically for search engines, is a new and
    exciting way to optimize your website's search engine optimization. One of the
    key aspects of web content the Google search engine is looking for in recent years
    is content related to authorship. For instance, if you have an article or piece
    written by a specific author on your site, you can easily integrate the author's
    information as meta data within the HTML page.
  prefs: []
  type: TYPE_NORMAL
- en: 'When tagged properly, this will not only allow the search engines, but also
    social websites, to easily parse those specific pages'' content with ease. For
    instance, consider some of these methods for defining specific elements in your
    HTML source:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: In these examples, we append the `rel` and `hreflang` tag elements to aid in
    describing a link's content preemptively.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Although none of these tags are technically required when developing your HTML
    documents, the effort to put meta data into your content, especially if it will
    be dynamically supplied, will more likely than not result in better traffic and
    search engine result ranking once your web site has been published online.
  prefs: []
  type: TYPE_NORMAL
- en: As mentioned, many social websites such as Google+ or Facebook will attempt
    to parse your web pages content to create a detailed link structure back to your
    site. The more viable content and meta data that you can supply to the websites
    and systems that attempt to read it, will result in better link structure and
    information output when users link back to your site.
  prefs: []
  type: TYPE_NORMAL
- en: The HTML5 History API
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you happen to have built a website completely in Flash before, you may have
    had experience with using JavaScript libraries such as SWFAddress ([http://www.asual.com/swfaddress](http://www.asual.com/swfaddress))
    to emulate the URL update functionality typical to normal web page display. If
    you are unaware of this project, or the idea of URL updating, the concept is simply
    that when you load a new page on the Internet, the URL in the address bar changes
    according to the location of the page you are viewing. With typical HTML web content,
    each page is displayed in a new HTML document, therefore the URL could easily
    be defined for each section of the website. With a website built in Flash, all
    of the content will be compiled into a single SWF that will be embedded on a single
    HTML page. So when the content changes in the Flash, there will be no change in
    the address bar of the web browser as no new page was requested. By including
    SWFAddress into your Flash project for the web, you can easily send a command
    via the SWFAddress JavaScript API to append customized updates to the address
    bar of the web browsers. Most importantly, if a user was to hit one of the custom
    URLs that your application has utilized, you can easily skip the user experience
    directly to a section of your application that they originally intended to visit.
    With the rise in popularity of features such as the Canvas element and AJAX requests
    in HTML5, the need for many websites to physically reload the web page on every
    request is dropping. Therefore, a system similar to SWFAddress is needed to properly
    integrate your sites on the web.
  prefs: []
  type: TYPE_NORMAL
- en: The HTML5 History API ([http://www.whatwg.org/specs/web-apps/current-work/multipage/history.html](http://www.whatwg.org/specs/web-apps/current-work/multipage/history.html))
    is your key to not only controlling the address bar of the clients web browser,
    but also to control many elements of their browsers history records to enable
    the browsers' back-and-forward functionality to continue to work. Although some
    of the older versions of popular modern browsers lack support for the HTML5 History
    API, the overwhelming majority of the latest versions of all browsers available
    now seem to support this feature ([http://caniuse.com/#feat=history](http://caniuse.com/#feat=history)).
    However, when attempting to use any feature where you are not 100 percent positive
    every use will have support, some initial checks are usually worth the effort.
    To check for history API support, we can attempt to lookup the type of the `history.pushState`
    object which is responsible for writing changes to the browsers page history.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Provided everything passes, you are good to read and write data to the clients
    browser history. Mozilla has written a fantastic outline of the History API and
    its usage which can be found at [https://developer.mozilla.org/en/docs/DOM/Manipulating_the_browser_history](https://developer.mozilla.org/en/docs/DOM/Manipulating_the_browser_history).
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For a down to earth example of the HTML5 History API in action, check out the
    online demo and source code from HTML5 Demos ([http://html5demos.com/history](http://html5demos.com/history)).
  prefs: []
  type: TYPE_NORMAL
- en: The important factor to note in regards to the History API and search engine
    optimization is the freedom that your applications have when it comes to referencing
    application state in the URL displayed in the browser address bar. Setting unique
    URLs to specific locations and elements in your content will allow for easier
    debugging and generation of user statistics and analytics.
  prefs: []
  type: TYPE_NORMAL
- en: Premade testing and benchmark solutions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In previous chapters, we have covered and utilized features of many modern web
    browser developer tool sets, mainly utilizing the JavaScript console for easy
    output and code debugging during development. Many of these pre-installed developer
    tool sets within popular web browsers also include many tools that allow you to
    not only dig into your own websites structure to locate issues, but debug other
    websites on the Internet to get an idea of their inner workings as well.
  prefs: []
  type: TYPE_NORMAL
- en: Google's web development toolset
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When it comes to tools for debugging and analyzing HTML5 content in the browser,
    Google has really stepped up to the plate by creating not only the Chrome Developer
    Tools ([https://developers.google.com/chrome-developer-tools/](https://developers.google.com/chrome-developer-tools/))
    but the Google Web Toolkit ([https://developers.google.com/web-toolkit/overview](https://developers.google.com/web-toolkit/overview))
    as well. All of these tools combined can be utilized to do a majority of the deep
    down application debugging that your application may require prior to public deployment.
    For instance, if you have managed to develop your own HTML5 game and need to dig
    into the game structure and flow to determine where optimizations are required,
    you can go through the process of writing tests for each and every element of
    the game, or you can use a tool like Google's Speed Tracer ([https://developers.google.com/web-toolkit/speedtracer/index](https://developers.google.com/web-toolkit/speedtracer/index)).
  prefs: []
  type: TYPE_NORMAL
- en: '![Google''s web development toolset](img/3325OT_10_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As you can see in the screenshot of Speed Tracer in action, the application
    manages to dig deep into the application runtime to display statistics on many
    aspects of how the active application is actually running on a given machine.
    Within the statistical output is the time to load, time to execute, time to display,
    and so much more. Simple websites that display content and video in a traditional
    manner may not find any benefit in using a tool that digs this deep. However,
    for anyone interested in building robust interactive Canvas, WebGL or any other
    heavy computation, or calculation applications that may require debugging of the
    runtime, this tool is defiantly worth looking into.
  prefs: []
  type: TYPE_NORMAL
- en: For the vast majority of HTML5 development, the Chrome Developer Tools is a
    browser feature that many web developers can't live without. With the entire toolset
    included in every installation of Chrome, you can easily open and start debugging
    any website with the tool in seconds. From inspecting the page elements and their
    associated styles with the Elements Inspector, displayed in the following screenshot,
    to displaying the load time of every internal and external request made by your
    page on load and during runtime with the Network Inspector, almost everything
    you need to debug your content is in one handy built in window.
  prefs: []
  type: TYPE_NORMAL
- en: '![Google''s web development toolset](img/3325OT_10_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Since Google has been promoting this piece of software extremely well in the
    last couple years, I really don't need to go into great detail of its usage here.
    There are more than a couple of amazing video tutorials that can easily be found
    on the project website along with great documentation of every feature within
    the application feature set.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Chrome Developer Tools project website contains a bunch of great resources
    both video and in text to aid in understanding everything the extension is capable
    of doing. Be sure to head over to [https://developers.google.com/chrome-developer-tools/docs/videos](https://developers.google.com/chrome-developer-tools/docs/videos)
    and check it out.
  prefs: []
  type: TYPE_NORMAL
- en: As time passes, you will probably find yourself quickly opening and closing
    this extension as you browse the web. As a developer, one the great aspects of
    HTML5 development is that when the content is public, so is the code that run
    it. Digging into how someone managed to create web content that amazed you is
    a very easy way to get extremely knowledgeable about the HTML5 stack.
  prefs: []
  type: TYPE_NORMAL
- en: YSlow website grading
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Although many of us hated getting our grades in school, having someone grade
    your website can be an incredibly useful resource. The YSlow ([http://yslow.org](http://yslow.org))
    browser extension is an open source project that can be added to Chrome, Firefox,
    Opera, Safari, and many other forms of web-based content. Upon opening and activating
    the extension, you can run the system on the website you currently have opened
    in your web browser. Consider the YSlow extension window after we run the tests
    on [http://www.packtpub.com](http://www.packtpub.com).
  prefs: []
  type: TYPE_NORMAL
- en: '![YSlow website grading](img/3325OT_10_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In the top left corner of the extension window, you can see that the website
    was given a B grade. Now without any detail on what makes up the grade, that data
    is effectively useless. So to confirm the graded result, let's dig into why this
    site received the grade it did. Below the grade in a color coded list you will
    find the individual tests results from all of the areas that are examined by YSlow.
    For the vast majority of the tests, the Packt Publishing website scored very well.
    However, the test concluded that for one, the site can make fewer HTTP requests,
    meaning that too much of the code and assets that make up the page are referenced
    from a variety of external resources. Secondly, the test results also display
    bad results for the inclusion of expire headers.
  prefs: []
  type: TYPE_NORMAL
- en: This means that there are many assets on the page with caching expire times
    very far in the future. Configurations like this could very well cause some users
    to see page content during page load that has actually been updated on the server.
    Because the cache time for some assets is set so far in the future, if the user
    has been to your site before, their web browser may not re-request the same asset,
    thinking that since the cache time is so far away, there is no possibility that
    the data could have changed.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you are interested into how YSlow manages to do what it does, be sure to
    head over to the project GitHub page to learn more ([https://github.com/marcelduran/yslow](https://github.com/marcelduran/yslow)).
  prefs: []
  type: TYPE_NORMAL
- en: YSlow covers a lot more than just the short list of results you can see in the
    previous screenshot. Since the test literally only takes a couple seconds and
    the browser extension setup of the application allows you to install it in seconds,
    I highly recommend downloading this extension and testing it out; not only on
    your web content but others as well.
  prefs: []
  type: TYPE_NORMAL
- en: Code minimizing and obfuscation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After you have finished developing your HTML5 application, you may notice that
    the amount of referencing to external JavaScript and CSS files may have gotten
    a little out of hand. One of the easiest ways to begin the battle for faster page
    loads is to minimize your JavaScript and CSS source code into the smallest file
    size possible. This will allow for the client to retrieve the content over the
    Internet in a shorter time allowing the remainder of the page to finish loading.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some CSS compilers such as LESS ([http://lesscss.org](http://lesscss.org))
    and SAS ([http://sass-lang.com](http://sass-lang.com)) contain the ability to
    minimize your CSS automatically, saving you the hassle of remembering to do it
    yourself after every update to your site. However, if you are not using a CSS
    compiler, there are still many great ways to accomplish the same task. One of
    my personal favorite online resources for CSS compression is [http://www.csscompressor.com](http://www.csscompressor.com).
    This easy to use CSS compressor gives you the ability to not only configure the
    actions performed to optimize your CSS, but also control the level of compression
    as well. To get a better idea of what this compression looks like, consider the
    following example CSS syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: There is nothing really special about these CSS styles other than the fact that
    we are styling only the `#example` tag element and its inner content. This CSS
    example really will just serve as an example as to what you would probably be
    used to seeing all over your projects. Of course your final application will probably
    contain far more than four CSS properties, but the end result will be the same
    regardless of CSS source code size. To keep things simple and conserve space within
    the book, we will just use these styles.
  prefs: []
  type: TYPE_NORMAL
- en: After opening up a web browser and heading over to [http://www.csscompressor.com](http://www.csscompressor.com),
    we can copy these styles into the large text area on the site.
  prefs: []
  type: TYPE_NORMAL
- en: '![Code minimizing and obfuscation](img/3325OT_10_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Before we begin our CSS compressor, take note of the options above the text
    input area. Although this specific CSS minimizing website is only one of many
    freely available on the Internet, the general configuration properties are the
    same. As you can see by the previous screenshot, you also have the option of selecting
    **Sort Properties** which will output your CSS styles sorted into minimalistic
    configurations effectively optimizing your code. Most important is the dropdown
    selector which allows you to choose the Compression Mode for the compressed output.
    For instance, selecting **High** and compressing our example CSS would output
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Since our example CSS is simple to begin with, the amount of work done to compress
    our code in the configuration is pretty minimal. Effectively all the compressor
    needed to do was remove all extra whitespace from the supplied CSS and place all
    of the element properties on single lines. This may seem like a minimal amount
    of work and output, but the fact of the matter is that the compressed CSS source
    is now 14.8 percent smaller in file size than the originally supplied source.
    For only a couple minutes of work, that is a huge amount of optimization. We can
    take it even one step further by selecting the **Highest** option for the Compression
    Mode. With this option selected, the compressor will now put the entire compressed
    CSS source on a single line. With this setup, our file size drops another 2.2
    percent totaling 16 percent file size reduction.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: As mentioned, file compression like this is not only for your CSS source code.
    This technique is actually even more useful for JavaScript. As your JavaScript
    source is usually responsible for all of the client side actions, the size of
    your source code can grow extremely large. Not only can this external source code
    be large in file size, but it may also contain some semi-sensitive code that you
    would prefer the end user not to be aware of. Of course JavaScript is no place
    for hard coding user names and passwords, but if you were to write a game in JavaScript,
    you probably wouldn't want users to locate the method to progress to the next
    level. You can use JavaScript compression to aid in your fight for code privacy,
    but of course always remember that JavaScript is a client-side language. No matter
    how hard you try, the end user will always have access to your source code, so
    always keep that in mind while developing your applications.
  prefs: []
  type: TYPE_NORMAL
- en: JavaScript compression is common amongst many popular JavaScript libraries and
    frameworks, many of which we have already looked at in this book. The jQuery ([http://jquery.com](http://jquery.com))
    library comes in two different packages, Development and Production. The difference
    between the two being that the Production version is compressed, ready for use
    online, whereas the development version is the user friendly JavaScript source
    ready for further manipulation. Websites such as [http://www.minifyjavascript.com](http://www.minifyjavascript.com)
    are a great online resource for accomplishing this task with your own custom JavaScript
    that is included within your HTML5 projects.
  prefs: []
  type: TYPE_NORMAL
- en: External dependencies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As your HTML5 projects become more and more feature rich, the requirement to
    include external dependencies such as jQuery or various jQuery plugins will probably
    increase just the same. By the end of your application development cycle you could
    possibly have over a dozen external JavaScript files referenced from a single
    HTML file. Although from a human standpoint, the segregation of all of your application's
    functionality in separate files may be optimal for ease of development, when it
    comes to publishing all of these files on the web you are effectively making your
    end users connection do more work when attempting to load your content. Since
    each piece of the JavaScript (or CSS) functionality may be broken in different
    files, the browser will need to individually request and receive each and every
    file referenced in the document before the document can finish loading. One solution
    to this issue is to combine all of the external third party JavaScript or CSS
    files into a single file for your HTML documents to request. This way only a single
    request will be made to the server, cutting down on page load times and bandwidth
    consumption. However, in most cases you will probably only want to combine JavaScript
    and CSS content that you do not plan on editing in the future. When all of your
    files are combined into one, the difficulty factor when the time comes to debug
    issues can be increased. Keeping your custom JavaScript and CSS in their own files
    can allow for far easier editing and republishing.
  prefs: []
  type: TYPE_NORMAL
- en: After your published site is live on the Internet for a while, regardless of
    whether you update it or not, there is a high likelihood of the dependencies that
    your application utilizes may fall out of date. Developers behind the projects
    your application uses may release small bug fixes to entire version updates to
    their libraries or frameworks without your knowledge. Although your application
    should live on without issue, provided it did before, you may be so inclined to
    update a specific plugin to gain the newest feature set or security fixes. If
    the updated version of, for example, a jQuery Plugin was published to a site where
    the utilized version of jQuery was either out of date or incompatible, you will
    probably encounter various issues when attempting to run your application.
  prefs: []
  type: TYPE_NORMAL
- en: The issue may be easily resolved by updating your site's utilized version of
    jQuery to the required version; however if the other plugins you are using are
    not compatible with the newest version of jQuery you appended, those may break
    as well.
  prefs: []
  type: TYPE_NORMAL
- en: It is because of this downward spiral that I stress two specific things all
    HTML5 developers should be aware of. Firstly, attempt to stay on top of the development
    progression of the external dependencies you utilize in your projects. Even if
    you are not interested in an expanded feature set, the developers of these projects
    often release security updates and code optimizations. Finally, attempt to spend
    the time to properly research and test if updating any of the dependencies your
    projects uses will directly affect any of the other dependencies that work alongside
    it.
  prefs: []
  type: TYPE_NORMAL
- en: Making deployment easy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you are working on a HTML5 site or application that will require constant
    updates, you may be interested in finding ways to ease the pain of manual file
    updating when it comes to publishing updates to your web server. Manually updating
    specific files over a FTP or SFTP connection to your web server that may be in
    different directories can easily become a pain. Finding ways to automate any time
    wasting process is usually a point of interest for any developer. So for the sake
    of your sanity in future projects, let's cover a few of the interesting options
    available to web developer for automating many processes from compressing code
    to deploying a website.
  prefs: []
  type: TYPE_NORMAL
- en: Creating tasks with Grunt
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Grunt ([http://gruntjs.com](http://gruntjs.com)) is a relatively new kid on
    the web development block but has seen extremely active development since its
    inception in 2011\. The concept behind the software is pretty simple—automation.
    The key to Grunt's success in the HTML5 web developer community is the fact that
    the scripts you write to perform your customized tasks automatically are entirely
    written in JavaScript. This allows anyone, with experience writing JavaScript,
    to create tasks that would normally be created with BASH scripts or some other
    command line deployed programming language.
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating tasks with Grunt](img/3325OT_10_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Grunt is built on the Node.js ([http://nodejs.org/](http://nodejs.org/)) framework
    and requires Node.js to be installed on the machine utilizing it. Because of Grunt's
    relationship with Node.js, you can locate plugins to begin the foundation of your
    Grunt tasks and install them the same way you install the Node.js packages. In
    terms of automated deployment of your website source to a web server, you would
    probably need to start by figuring out how to establish a connection from your
    Grunt scripts code to a web server via FTP or SFTP. Fortunately, as mentioned,
    the Node.js Package Manager or NPM system can set you off on the right foot with
    a quick search for Grunt SFTP on [https://npmjs.org](https://npmjs.org). In the
    results you will locate the grunt-sftp-deploy ([https://npmjs.org/package/grunt-sftp-deploy](https://npmjs.org/package/grunt-sftp-deploy))
    plugin which will give your Grunt tasks the ability to easily connect and deploy
    your local website source to an external web server over a SFTP connection.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you are interested in learning more about Grunt or want to install it on
    your computer, head over to the official Grunt documentation at [http://gruntjs.com/getting-started](http://gruntjs.com/getting-started)
    and follow the *Getting Started* tutorial.
  prefs: []
  type: TYPE_NORMAL
- en: In reality, when it comes to creating customized tasks with Grunt, your imagination
    is really the limit. If you ever find yourself doing the same task over and over
    and want to automate the repetition, regardless if the issue is a personal or
    global one, writing some code to perform the automation for you can be a really
    great learning experience and time saver. Head over to the Grunt Plugins page
    on the office project site ([http://gruntjs.com/plugins](http://gruntjs.com/plugins))
    to find more inspiration for great tasks that you can create or utilize.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying content with Git
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Another piece of software you will probably find yourself using if you haven't
    already is Git ([http://git-scm.com/](http://git-scm.com/)). Git is a free and
    open source version control system utilized by both large and small projects around
    the world. Most developers can't fathom a world where they didn't use version
    control software of some kind and most web developers who use it, use Git. The
    majority of Git's success in the world of web development is not only because
    it is such a great and reliable piece of software, but because websites such as
    Github ([https://github.com](https://github.com)) and BitBucket ([https://bitbucket.org](https://bitbucket.org))
    have been created to allow developer to store their code privately or share it
    publically. Rather than freely distributing code as an archived ZIP file, developers
    can download the entire repository of code which include all of the previous edit
    history made by other developers who have contributed. This also means that if
    you were to make a change to someone else's code, they can still retain the right
    to choose to integrate your edits into their release. The benefits of version
    control could fill an entire book, so if you are not using Git or some other form
    of version control yet, be sure to dig deeper into it.
  prefs: []
  type: TYPE_NORMAL
- en: Using Git to automatically deploy your web content can be a little tricky to
    set up at first, but once configured, the setup can not only allow you to publish
    content to your web server easily, but any other developer that may be working
    on the same application as well. Git utilizes the idea of branches to allow developers
    to work in their own environment of the applications code without stepping on
    other developer's toes. When both developers have completed the updates to the
    application in each of their branches, Git can be utilized to merge the edits
    in the two branches back into a single file automatically. By utilizing the concepts
    of branches, developers can agree to make a specific branch (usually the Master
    branch) the working branch that is deployed on the applications web server. If
    you were to append the Git repository on the web server itself and call the Git
    pull command from a web based script, anyone from your development team could
    easily push the latest version of the website from the Git repository to the active
    web server without ever having to connect via FTP or SFTP and manually copy files
    over.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you are interested in learning more or curious as to how to go about setting
    this type of solution up for one of your web based HTML5 project, check out the
    git-deploy project on Github ([https://github.com/git-deploy/git-deploy](https://github.com/git-deploy/git-deploy)).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we spent some time going over some of the common aspects for
    preparing your HTML5 application or website for deployment on a public web server.
    Although there is no common practice for project preparation for the web, there
    are many aspects like optimization of code and file structure that, when given
    the proper amount of time, will keep your content stable and keep delivery times
    from server requests to a minimum. Sometimes anticipating issues is not a reality
    until you have had valid user testing completed on your project. This form of
    user testing, unless you have a team at your disposal, usually comes in the initial
    launch of your application to the public. Making sure that your application is
    set up in a way to report errors or generate statistics will decrease the time
    it takes for you to locate and correct any issues that may arise. Even additions
    as simple as appending Google Analytics ([http://www.google.ca/analytics/](http://www.google.ca/analytics/))
    into your site will enable you to view where users may have hit a dead end or
    bad request.
  prefs: []
  type: TYPE_NORMAL
- en: The road to learning HTML5 and what it has to offer the web development community
    is an endless commitment that will extremely benefit your career as a developer.
    Though still in its early stages, this latest version of the HTML specification
    has proved to be one of the most important aspects of moving the web into a more
    application-like infrastructure. The world of HTML5 development has opened its
    doors to developers coming from many development skillsets in other languages.
    As a developer with experience in Flash and ActionScript 3, not only do you already
    have a leg up in terms of the learning curve JavaScript has to offer, but the
    understanding every Flash developer has of multimedia and its integration in code
    will be an invaluable skill to constantly fall back on as you continue to learn.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, I would like to give you my full appreciation for taking the time to
    read through the pages of this book. It is my hope that your venture into HTML5
    development was as pleasant as my own. The amazing projects that have sprung up
    in the last couple years are a testament to the excitement surrounding HTML5 and
    the new features that have been added to the specification. Some new and exciting
    framework or library is put into the community spotlight every week it seems.
    As great as the variety of projects can be, the vast sea of great 3rd party content
    available to utilize in your project means to make valid decisions of what to
    use, you need to keep up to date with as much as you can. Hop on your favorite
    social network, find some other developers with similar interest to your own,
    and start a new project to push the limits of what you can accomplish with HTML5\.
    Who knows, maybe I will end up using a library you wrote in my next project!
  prefs: []
  type: TYPE_NORMAL
