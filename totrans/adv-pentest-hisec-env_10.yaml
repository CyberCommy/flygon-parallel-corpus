- en: Chapter 10. Setting Up Virtual Test Lab Environments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Keeping skills up to date is extremely important in most professions; it is
    no different for penetration testing. Penetration testing skills take time to
    develop and to top it off the information security landscape changes on a daily
    basis. With this in mind, it is not difficult in this day and age to obtain a
    semi-powerful computer system with 4-16 gigs of RAM and a four or six core processor.
    Equipment such as this allows a penetration tester to build out full-fledged virtual
    networks that can be used as practice labs. In this chapter, we review building
    such environments. We will attempt to emulate the types of secured networks we
    might see in use, using limited system resources.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will discuss the following items in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Emulating a simple network with a firewall
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up a multi-tiered DMZ
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Emulating more complex networks in a virtual environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Why bother with setting up labs?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It may seem that experimenting in a more comprehensive testing environment will
    always be the best choice once you have your labs built out, but in fact, you
    may only be adding unnecessary complexities that may divert or completely ruin
    the test.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at setting up a web server to run a simple web application.
    We will need to determine what we are testing before we choose our lab environment.
    Some of the questions that should be asked include:'
  prefs: []
  type: TYPE_NORMAL
- en: Are there any specific services that are required to ensure the testing accurately
    emulates an environment as seen in real world testing?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Load Balancing?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Specific versions of software?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Firewalls?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Are there any factors that will cause the results to be an inaccurate representation
    of what occurs in true production environments?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Does your lab provide you with the hands-on experience necessary to duplicate
    your findings in the real world; if not, what needs to be changed to make it so?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hopefully this quick list of basic questions will prepare you for the considerations
    that should be taken into account when choosing which type of lab is preferable
    and for which task. There are many scenarios that can be tested with a simple
    virtual guest machine speaking to another; on the other hand there are some scenarios
    that will require the usage of tens and even hundreds of systems to accurately
    represent the experience you will have in a real world environment. Regardless
    of how you choose to build out your lab it should always allow you to make modifications
    or to build upon existing systems. It should also be simple to manage and update
    as needed.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Taking snapshots of systems that have been freshly built can be an effective
    and efficient method of ensuring the necessary operating system builds are ready
    when needed.
  prefs: []
  type: TYPE_NORMAL
- en: Keeping it simple
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At times it is possible to set up a simple lab that meets your testing requirements.
    Many times, especially in a learning environment, keeping it simple reduces the
    learning curve and enables quick absorption of the pertinent material rather than
    being inundated with trivial facts or configuration settings that do not relate.
    Throughout this book each section attempted to use the minimum system setup required
    to review the task at hand. This option should not be taken lightly when building
    out your labs.
  prefs: []
  type: TYPE_NORMAL
- en: No-nonsense test example
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Many of the examples of new exploits and vulnerabilities can be tested with
    a simple configuration such as:'
  prefs: []
  type: TYPE_NORMAL
- en: '![No-nonsense test example](img/7744OS_10_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This network is about as simple as it gets (besides simply testing from the
    target machine itself which could definitely be useful for many situations).
  prefs: []
  type: TYPE_NORMAL
- en: We have a BackTrack machine connected on the same LAN segment as the vulnerable
    target machine. There is no inline firewall or anything else to get in the way
    of validating that exploit code works as intended. This would be a good sanity
    check if there are problems that you are running into when testing certain methodologies
    or techniques with a more complicated environment.
  prefs: []
  type: TYPE_NORMAL
- en: We will not go over setting up this type of environment as it has been covered
    repeatedly throughout the book.
  prefs: []
  type: TYPE_NORMAL
- en: Network segmentation and firewalls
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The addition of inline firewalls and proper network segmentation has made it
    commonplace to see the following basic network infrastructure with a gateway or
    firewall separating the testing machine from the vulnerable target. This layered
    defense is but one small step to securing a typical environment:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Network segmentation and firewalls](img/7744OS_10_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'From the outside world the system will have a publically accessible IP address
    and then on the backend it will have a real IP address (possibly using NAT non
    routable addresses). Any traffic that passes back and forth will be processed
    through the gateway or firewall. Let''s take a look at how we would emulate an
    environment such as this:'
  prefs: []
  type: TYPE_NORMAL
- en: Requirements
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To follow along with building out this example you will require the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Oracle's Virtualbox Latest version
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 2 GB RAM
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: M0n0Wall virtual guest machine
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: BackTrack virtual guest machine
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ubuntu Server 10.04 stable with LAMP (connected to MyLab2)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This is all that is necessary to get started!
  prefs: []
  type: TYPE_NORMAL
- en: Setup
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We will begin with setting up the **M0n0Wall** firewall installation. If you
    have used pfSense in previous chapters you will notice that the setup is very
    similar. Our M0n0Wall instance will have three adapters in this case: WAN, LAN,
    OPT1\. Begin by downloading M0n0Wall at [http://m0n0.ch/wall/downloads.php](http://m0n0.ch/wall/downloads.php).
    We will be using the `cdrom-1.33.iso` release, although any future releases should
    be very similar in setup. M0n0Wall is a well established small firewall that will
    work perfectly for our needs due to the limited resources required.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In VirtualBox use the following settings to set up a new guest machine:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Name: M0n0Wall_Base_Install'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'OS Type: BSD/FreeBSD'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Memory: 128 MB'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Virtual Hard Disk: **Start-up Disk** checked, **Create New Hard Disk** selected'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Create New Virtual Disk: VDI'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Virtual Disk Storage Details: Dynamically Allocated'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Virtual disk file location and size: (Locate in a folder to be used for future
    labs), 200 MB in size'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This machine will need three network adapters configured using the VirtualBox
    Manager.
  prefs: []
  type: TYPE_NORMAL
- en: '**Network Adapter 1** should be configured to use **NAT** which will be our
    WAN connection'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Network Adapter 2** needs to be configured for the Internal Network name
    `MyLab1` which will represent our LAN connection and'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Network Adapter 3** should be set up at Internal Network name `MyLab2` and
    will be tied to our internal network (the OPT device)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Using the **PCnet-PCI II** adapter will reduce the chance of possible issues.
    Also, it is advised to change the MAC address of each adapter to make it simpler
    to determine which adapter you are choosing from within the server setup. For
    instance, if the current MAC for Network Adapter 1 is 0800270DD321 then changing
    it to 0800270DD31A would provide an easy to remember visual que: 1A is adapter
    1, 2B could be adapter 2, and so on.'
  prefs: []
  type: TYPE_NORMAL
- en: '`M0n0Wall` will need to be installed on the new VirtualBox Machine.'
  prefs: []
  type: TYPE_NORMAL
- en: Start `M0n0Wall_Base_Install` and choose the installation media downloaded from
    [http://m0n0.ch/wall/downloads.php](http://m0n0.ch/wall/downloads.php).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose the **7) Install on Hard Drive** option:![Setup](img/7744OS_10_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When asked which hard drive to install on, choose your hard drive (in this case
    it is `ad0)`.![Setup](img/7744OS_10_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Reboot when prompted and ensure that the system is booting from the hard disk
    install rather than the ISO.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now that M0n0Wall has been installed we must configure the interfaces:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Choose **1) Interfaces: assign network ports** and press *Enter*.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When prompted with a listing of available interfaces continue by setting up
    your VLANs. Press *y* to continue.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the parent interface name for the first adapter. This will be listed next
    to the MAC addresses on your display:![Setup](img/7744OS_10_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Continue through the creation process for each adapter. In this case our `lnc0`
    adapter is assigned to VLAN 1, `lnc1` to 2, and `lnc2` to VLAN 3\. These VLANs
    can be any unused number between 1 and 4094.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When determining the LAN interface name choose the adapter that is assigned
    to MyLab1, the WAN adapter should be assigned to the NAT adapter, and the MyLab2
    adapter should be assigned as the OPT device:![Setup](img/7744OS_10_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Reboot the firewall to save your changes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The firewall has been installed on our hard drive and the adapters have been
    assigned to VLANs. Now we need to set up the LAN IP address and connect to the
    web interface for further configuration. As an optional step the default password
    can be changed. For the sake of simplicity, we will continue using the default
    password for the rest of this exercise.
  prefs: []
  type: TYPE_NORMAL
- en: Select option **2) Set up LAN IP address** and press *Enter* to continue.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When prompted type the IP address you would like your LAN to use. We will choose
    `192.168.50.1`.![Setup](img/7744OS_10_07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We can now boot up a BackTrack instance on the MyLab1 internal network and connect
    to the web interface of the firewall by first obtaining a new DHCP address on
    the appropriate range and then directing our web browser to `http://192.168.50.1:`
  prefs: []
  type: TYPE_NORMAL
- en: '![Setup](img/7744OS_10_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We need to set up our other interfaces to perform the tasks we have in mind
    which is to provide the `192.168.75.0/24` subnet with a firewalled route to our
    vulnerable host which will be located at `192.168.75.100` (connect a Ubuntu machine
    to MyLab2). Select the **OPT1 interface** from the navigation menu on the left
    of the screen and enable it by checking the appropriate box. Leave the **Bridge
    with** option as none and type the IP address for this interface: `192.168.75.1`.
    Ensure that the drop down lists `24`. Click on the **Save** button after applicable
    changes have been made.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setup](img/7744OS_10_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We can enable the DHCP server on the OPT1 interface. Choose **DHCP server**
    on the left navigation menu and chose the **OPT1** tab under **Services: DHCP
    server**. Check the box that enables the DHCP service on this port and enter the
    **Range** as `192.168.75.100` to `192.168.75.150`. After your changes have been
    selected click on the **Save** button to continue.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setup](img/7744OS_10_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: There are currently no default rules set up for the OPT1 interface. Let's set
    up some basic rules to allow our system in `192.168.50.0/24` to ping those in
    `192.168.75.0/24`.
  prefs: []
  type: TYPE_NORMAL
- en: Click the **Firewall Rules** option in the left-hand navigation bar and select
    the OPT1 tab. Selecting the icon that looks like a plus **(+)** symbol within
    a circle will bring you to the screen that allows new rules to be configured.
    Click on this icon to continue.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this initial rule we want to allow ICMP packets to the OPT1 interface from
    everywhere. The following settings need to be selected:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Action:** Pass'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Interface:** OPT1'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Protocol:** ICMP'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ICMP** Type: any'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'All others: Default Settings'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Save your settings and click on the **APPLY** button to load the changes.
  prefs: []
  type: TYPE_NORMAL
- en: We can now traceroute from our **BackTrack Machine** to our **Target Machine**
    (in this case an Ubuntu Server install set up to receive a DHCP address).
  prefs: []
  type: TYPE_NORMAL
- en: '![Setup](img/7744OS_10_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Using M0n0Wall allows us to use a lot of powerful options with very limited
    space. This can become very important when you want to place several firewalls
    in your virtual lab environment.
  prefs: []
  type: TYPE_NORMAL
- en: Adding complexity or emulating target environments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At times it may become beneficial to mimic a customer's network in order to
    perform offline testing prior to the real test. This practice can allow you to
    sometimes determine the path of least resistance after some simple enumeration.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at the following network example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding complexity or emulating target environments](img/7744OS_10_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Looking at the diagram we can determine that there are at least four known
    subnets, two firewalls, and six machines that fulfill various duties. Also found
    are a web application firewall and an intrusion detection system that is located
    between `192.168.25.0/24` and `192.168.50.0/24` and the DMZ''d Web1 server. It
    would not take much of a discussion to understand what type of shop we are dealing
    with and let us assume that this client prides itself in using only the latest
    and greatest in open source community driven software. Ideally, we would try to
    emulate the customer environment as closely as possible to determine if there
    may be any security controls that are not positioned correctly or that are known
    to be frequently misconfigured. With this in mind, we will attempt to emulate
    using the following configurations:'
  prefs: []
  type: TYPE_NORMAL
- en: 1 M0n0Wall firewall
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 1 pfSense firewall with IDS and WAF modules installed and configured
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 5 Ubuntu server systems
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 1 FreeBSD system running MySQL (for example, the fictional owner of the business
    let it slip that he would like to start using FreeBSD for all of his servers because
    of the great experience they have had with their FreeBSD server)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: That is a total of eight virtual servers that will need to be emulated if we
    performed a direct system to system build in our lab. Looking at the diagram again
    we determine that we can make this a bit more resource friendly if we combined
    some of the servers. Each of our virtual units can have up to four network adapters
    by default.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There are detailed instructions on how to configure each machine further in
    this section. Do not build out these systems until you reach the section for each
    machine. The following listing is to be used as an overview of what will be required.
  prefs: []
  type: TYPE_NORMAL
- en: 'With this in mind we will configure our virtual lab as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Firewall1
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: pfSense
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 256 MB RAM
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 1 GB HDD
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: IDS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: WAF
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DHCP service
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Adapter 1: 192.168.25.0/24 Internal Network Name: MyLab1'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Adapter 2: 192.168.50.0/24 Internal Network Name: MyLab2'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Adapter 3: 192.168.75.0/24 Internal Network Name: MyLab3'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Firewall2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: M0n0Wall
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 128 MB RAM
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 200 MB HDD
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DHCP service
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Adapter 1: 192.168.75.0/24 Internal Network Name: MyLab3'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Adapter 2: 192.168.101.0/24 Internal Network Name: MyLab4'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Web1
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ubuntu server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 512 MB RAM
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 1 GB HDD
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: LAMP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Adapter 1: 192.168.25.0/24 Internal Network Name: MyLab1'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: WordPress 3.1
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DB1
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: FreeBSD 8.2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MySQL
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 256 MB RAM
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 6 GB HDD (Can be reduced if limited resources are a problem)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Adapter 1: 192.168.50.0/24 Internal Network Name: MyLab2'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Adapter 2: 192.168.75.0/24 Internal Network Name: MyLab3'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: App1
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ubuntu server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 256 MB RAM
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 1 GB HDD
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: LAMP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Adapter 1: 192.168.75.0/24 Internal Network Name: MyLab3'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Adapter 2: 192.168.101.0/24 Internal Network Name: MyLab4'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: WordPress 3.1
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Admin1
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ubuntu server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 256 MB RAM
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 1 GB HDD
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: LAMP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Adapter 2: 192.168.101.0/24 Internal Network Name: MyLab4'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Various administrative tools installed (Wireshark, Nmap, and so on)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This puts us at a total of 1664 MB of RAM and just over 10 GB of HDD. Most modern
    systems are able to handle this type of virtual network, but if your system is
    not able to, please strategically reduce the amount of RAM or HDD as needed.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that this does not include any RAM or HDD space reserved for your BackTrack
    machine or the host machine. If you have 16 GB of RAM do not assign it ALL to
    your virtual machines or you may run into some issues!
  prefs: []
  type: TYPE_NORMAL
- en: Configuring firewall1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Download and install a pfSense virtual machine using the settings determined
    above:'
  prefs: []
  type: TYPE_NORMAL
- en: Firewall1
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: pfSense 2.0
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 256 MB RAM
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 300 MB HDD
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: IDS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: WAF
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DHCP Service
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Adapter 1: 192.168.25.0/24 Internal Network Name: MyLab1'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Adapter 2: 192.168.50.0/24 Internal Network Name: MyLab2'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Adapter 3: 192.168.75.0/24 Internal Network Name: MyLab3'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Be sure to use an adapter type that is compatible with FreeBSD to avoid any
    issues. We will not review setting up the pfSense base adapter configuration again
    as that has been covered extensively in previous chapters. Once the base configuration
    has been completed you should end up with something similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Configuring firewall1](img/7744OS_10_013.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the IPs have been configured the settings should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Configuring firewall1](img/7744OS_10_014.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Connect to one of the networks using a BackTrack virtual machine and configure
    the following pfSense web console settings:'
  prefs: []
  type: TYPE_NORMAL
- en: 'DHCP server: Enable for all interfaces on ranges X.X.X.100 X.X.X.150.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a rule to allow ICMP, 80, 443, 53, 161, 25, 22, 23 and 21 TCP/UDP from
    192.168.25.0/24 (WAN) to 192.168.50.0/24 (LAN). Remove existing WAN rules.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a rule that allows all traffic from 192.168.50.0/24 (LAN) to 192.168.75.0/24
    (OPT1).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Allow all traffic from LAN to WAN interfaces.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here is an example of a work in progress of setting the Firewall1 rules for
    the LAN:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Configuring firewall1](img/7744OS_10_015.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Installing additional packages in pfSense
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Firewall1 also had an IDS and a WAF listed. We can use the package manager that
    pfSense makes available to us to install this additional functionality on our
    system.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The pfSense system will need temporary access to the Internet to be able to
    access and download these packages. This can be configured using NAT. Be sure
    to disable any of the other test machines before connecting to the Internet. Enabling
    Internet on the WAN interface will enable all of the systems using Firewall1 to
    access the Internet! Also note that the machine will need to be shut down prior
    to changing from Internal Network to NAT.
  prefs: []
  type: TYPE_NORMAL
- en: Click on **System** | **Packages** and choose the **Available Packages** tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose **Proxy Server with mod_security** and install it.![Installing additional
    packages in pfSense](img/7744OS_10_016.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Snort** package and install it as well.![Installing additional
    packages in pfSense](img/7744OS_10_017.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Take some time and familiarize yourself with the various one-click install packages
    that are available to be used in conjunction with pfSense. The ease of use and
    availability of excellent choices makes using these software installs quick and
    efficient.
  prefs: []
  type: TYPE_NORMAL
- en: Each installed package will be added to the **Services** menu in the navigation
    bar for further configuration. Update the packages and configure as you desire.
    As we do not know how the client in this fictional exercise has configured the
    WAF or IDS, we can assume that the defaults are being used until we were to perform
    initial enumeration at which point we could more closely emulate the environment
    that is being targeted.
  prefs: []
  type: TYPE_NORMAL
- en: Firewall2 setup and configuration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will need to set up a M0n0wall virtual instance as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Firewall2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: M0n0Wall
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 128 MB RAM
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 200 MB HDD
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DHCP service
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Adapter 1: 192.168.75.0/24 Internal Network Name: MyLab3'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Adapter 2: 192.168.101.0/24 Internal Network Name: MyLab4'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As we have already gone over setting up M0n0wall in this chapter we will skip
    to the next machine type.
  prefs: []
  type: TYPE_NORMAL
- en: Web1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Download and install Ubuntu Server 10.04 from the typical repositories. The
    virtual machine will need to be defined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Web1
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ubuntu server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Hostname: Web1'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 512 MB RAM
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 1 GB HDD
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: LAMP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OpenSSH
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Adapter 1: 192.168.25.0/24 Internal Network Name: MyLab1'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Once the machine has been installed, updated, and configured we will need to
    install WordPress.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Ubuntu website supplies excellent resources that assist with proceeding
    with the intuitive install.
  prefs: []
  type: TYPE_NORMAL
- en: Installing WordPress in Ubuntu Server can be simple; there are great instructions
    available at [http://codex.wordpress.org/Installing_WordPress#Famous_5-Minute_Install](http://codex.wordpress.org/Installing_WordPress#Famous_5-Minute_Install).
    To sum up the instructions you can simply `wget` the package at [http://wordpress.org/latest.tar.gz](http://wordpress.org/latest.tar.gz),
    unzip it and then move it to the `/var/www` directory on your server. This will
    enable you to access the WordPress install via `http://192.168.25.100/wordpress`
    if you have followed along with the previous instructions. Keep in mind that the
    goal of this exercise is to understand how to create a simulation that mimics
    what is found in a common configuration. In this case, the database is abstracted
    and stored on the FreeBSD machine. This allows more granular control of whom and
    what has access to specific data on the network. It also makes it more difficult
    for an attacker to access the machine indirectly and oftentimes is enough to prevent
    direct attacks on the machine itself (attackers will use SQL injection and other
    web application-based flaws to access and take control of the system instead of
    targeting it directly).
  prefs: []
  type: TYPE_NORMAL
- en: DB1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: DB1 is a very basic install of FreeBSD 8.2 with only a MySQL server, Telnet,
    and SSH running as a service. Grab the ISO at [http://www.freebsd.org/where.html](http://www.freebsd.org/where.html)
    and install the machine using the following virtual machine settings. Please note
    that this machine is multi-homed for direct management from the administrator
    on the `192.168.101.0/24` segment. In a perfect world, you would also restrict
    direct access to this machine to only the MySQL port, Telnet port, and SSH port
    to only the administrator and the Web1 server.
  prefs: []
  type: TYPE_NORMAL
- en: DB1
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: FreeBSD 8.2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MySQL
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 256 MB RAM
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 6 GB HDD (Can be reduced if limited resources are a problem)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Adapter 1: 192.168.50.0/24 Internal Network Name: MyLab2'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Adapter 2: 192.168.75.0/24 Internal Network Name: MyLab3'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Once the system has been set up and configured it should be used as the MySQL
    database server for the Web1 and App1 instances using a `WP_production` and `WP_Test`
    database.
  prefs: []
  type: TYPE_NORMAL
- en: App1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is basically a clone of the Web1 server. In a typical environment, this
    machine would probably have the latest and greatest changes available which also
    means it is probably not as secure as the server located in the DMZ. This is a
    great target for further intrusion into the network as many administrators will
    not use strong passwords or the certificates used on these systems may not be
    up to par with what you see out in the wild.
  prefs: []
  type: TYPE_NORMAL
- en: App1
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ubuntu server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 256 MB RAM
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 1 GB HDD
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: LAMP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Adapter 1: 192.168.75.0/24 Internal Network Name: MyLab3'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Adapter 2: 192.168.101.0/24 Internal Network Name: MyLab4'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: WordPress 3.1
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Simply use the VirtualBox cloning mechanism to create this machine, rename the
    appropriate items and ensure that the adapter MAC addresses are reset. You will
    also need to assign the **Network Adapters** in VirtualBox appropriately.
  prefs: []
  type: TYPE_NORMAL
- en: Admin1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As this machine would be very likely to contain many tools and critical data
    you should be sure to include certain power tools such as Nmap, WireShark, and
    so on that are typically used by an administrator. This machine would be used
    as a management tool and island for the administrator to perform different administrative
    tasks on the network. Have fun with this one and install Ubuntu server and any
    services or software that you feel comfortable with. Ideally, at this point the
    enumeration efforts you have performed during a real test would have given you
    more information on what this system really has so that you could mimic it more
    closely. Many of the systems throughout the network will probably have rules that
    allow direct access from this system regardless of network location.
  prefs: []
  type: TYPE_NORMAL
- en: 'For this example, build out an Ubuntu server that meets the following specs:'
  prefs: []
  type: TYPE_NORMAL
- en: Admin user
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ubuntu server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 256 MB RAM
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 1 GB HDD
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: LAMP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Adapter 1: 192.168.101.0/24 Internal Network Name: MyLab4'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Various administrative tools installed (Wireshark, Nmap, and so on)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By this point you should have a fully functional multi-tier environment that
    somewhat mimics those frequently found in smaller shops. To test truly secured
    networks you will also have to add additional modules and count on heavily monitored
    logs, file integrity checking, network-based antivirus scanning (try this on pfSense!!),
    and more. Regardless of how many security controls are in place, they must all
    work together to be fully functional. Through hard work and out of the box thinking
    a penetration tester will push these environments to the limits and ascertain
    if the customer is fully protected (or not…).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we reviewed setting up various types of virtual labs. It should
    be apparent that almost any type of virtual environment can be emulated using
    commonly available tools and given sufficient resources. This is especially true
    of any systems that use open source software as it is readily available and does
    not require the purchase of licenses (typically and depending on what the software
    is).
  prefs: []
  type: TYPE_NORMAL
- en: We also learned more about the capabilities of pfSense and how it can be leveraged
    to more closely emulate the types of environments we will find when testing highly
    secured networks. It is simple to install and configure WAF, IDS, IPS, and even
    reverse proxies using these technologies.
  prefs: []
  type: TYPE_NORMAL
- en: We also covered the installation and configuration of M0n0wall, which is perfect
    for those times when resources are at a premium and a small footprint is required.
    Some penetration testers have built test labs that spanned several host machines
    and hundreds of guests. This is probably beyond the necessity of most, but the
    fact that it can be accomplished inexpensively remains a fact.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will create a very special lab that is intended to simulate
    a real life penetration test. You will need to use all of the methods discussed
    within this book (and possibly more as no book can cover everything involved in
    penetration testing!) to be able to test the fictional company from start to finish.
  prefs: []
  type: TYPE_NORMAL
- en: See you in the next chapter!
  prefs: []
  type: TYPE_NORMAL
