- en: '*Chapter 3*: Working with Cypress Command-Line Tools'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we learned how Cypress differs from other test automation
    tools such as Selenium and how it stands out when it comes to web automation testing.
    In this chapter, we will build on our knowledge of using Cypress using command-line
    tools. To do this, we will cover commands that you can use to make use of Cypress'
    functionality.
  prefs: []
  type: TYPE_NORMAL
- en: Some of the commands will involve functions such as running individual or all
    tests, debugging Cypress, and launching Cypress tests on different browsers, among
    other Cypress command-line functions. We will be referencing the GitHub repository
    folder for this chapter, and every command and piece of code that will be written
    will be included in the repository for your reference and practice.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the following key topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Running Cypress commands
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding basic Cypress commands
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cypress debugging on the command line
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Once you've worked through each of these topics, you will be ready to write
    your first test.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The GitHub repository for this chapter can be found at [https://github.com/PacktPublishing/End-to-End-Web-Testing-with-Cypress](https://github.com/PacktPublishing/End-to-End-Web-Testing-with-Cypress).
  prefs: []
  type: TYPE_NORMAL
- en: The source code for this chapter can be found in the `chapter-03` directory.
  prefs: []
  type: TYPE_NORMAL
- en: To run the examples in this chapter, you will need to clone this book's GitHub
    repository and follow the `READMe.md` file's instructions on how to properly set
    up and run the tests. You can read more about how to use GitHub to clone projects
    on your local machine at [https://docs.github.com/en/free-pro-team@latest/github/creating-cloning-and-archiving-repositories/cloning-a-repository](mailto:https://docs.github.com/en/free-pro-team@latest/github/creating-cloning-and-archiving-repositories/cloning-a-repository).
  prefs: []
  type: TYPE_NORMAL
- en: Running Cypress commands
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Effective utilization of the Cypress framework requires you to have an understanding
    of Cypress and how different functionalities can be run using the command line.
    Cypress commands allow the users of the Cypress framework to automate processes,
    and also to provide specific instructions to the framework and to the tests during
    initialization and runtime.
  prefs: []
  type: TYPE_NORMAL
- en: In most instances, running Cypress tests through the command line is quicker
    than running them using the browser. This is because running tests through the
    command line reduces the number of resources required to run a specific test.
    The reason for this is that tests that run in the command line are normally headless,
    which means less resources are allocated to run the tests, which is not the same
    for test execution in headed mode.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: Headed mode is when tests can be visually seen running on a browser, while in
    headless mode, the test execution process does not open a visible browser. Instead,
    all the tests are run and output on the command line.
  prefs: []
  type: TYPE_NORMAL
- en: First, let's look at how to run global and local Cypress commands.
  prefs: []
  type: TYPE_NORMAL
- en: Global and local commands
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Cypress commands can either be run from a specific directory containing a Cypress
    installation and code, or run from the global Cypress installation. Globally installing
    Cypress ensures that users can run Cypress from any directory in the operating
    system, while with a local Cypress installation, Cypress can only be accessed
    from the single directory that it has been installed in.
  prefs: []
  type: TYPE_NORMAL
- en: Running global Cypress commands
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Global commands in Cypress are run by accessing the globally installed version
    of Cypress. The commands that are invoked when running the global version of Cypress
    are not necessarily generated or defined by the user since they are built into
    the framework. To be able to run Cypress commands globally, you need to install
    Cypress globally with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The preceding command will install Cypress globally and ensure that invoking
    any known Cypress command from any Cypress installation directory will yield a
    result or an error, depending on the execution of the provided command.
  prefs: []
  type: TYPE_NORMAL
- en: To run a global command, you need to define the command using the `cypress`
    keyword, then the command; for example, `cypress run` or `cypress open`.
  prefs: []
  type: TYPE_NORMAL
- en: Running local Cypress commands
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Local Cypress commands are derived from Cypress global commands and are an
    alternative to running commands globally. To run Cypress commands locally, you
    will need to install Cypress in your directory with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'We can integrate the required commands into the development environment by
    defining them in the `package.json` file, under the `scripts` section, as shown
    here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Adding commands to `package.json` allows us to use these commands in the same
    way we would execute npm commands for JavaScript packages. The commands defined
    in the `package.json` file are interpreted by the Node.js environment at runtime
    and when executed, they are executed as if the commands are global commands.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: It is recommended that you run the `npm init` command in a Terminal before running
    the `npm install cypress` command. If Cypress is run without a project being initialized,
    Cypress' directories will not be visible. By running the `init` command, cypress
    recognizes the project directory as an existing project, so it initializes and
    creates its directories without us needing to run additional commands on the Terminal.
  prefs: []
  type: TYPE_NORMAL
- en: Defining commands in `package.json` not only makes it easier for developers
    and QA engineers to know which commands to run, but it also simplifies the nature
    of the commands that a person needs to run when running, debugging, or maintaining
    their tests.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: The Cypress development team recommends installing Cypress per project and not
    using the global installation approach. The local installation provides certain
    advantages, such as users having the ability to quickly update the Cypress dependency
    and reducing the Cyclic dependency problems that would break some tests in a different
    project, while Cypress runs fine in another project.
  prefs: []
  type: TYPE_NORMAL
- en: 'To run scripts in the command line, you need to invoke `npm run`, followed
    by the command''s name. In the commands we defined previously, you would simply
    need to run the following to execute the commands simultaneously:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Time for a quick recap.
  prefs: []
  type: TYPE_NORMAL
- en: Recap â€“ running Cypress commands
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we learned how to invoke either local or global commands, as
    well as how to run tests from the Cypress Terminal or the test runner, which utilizes
    a graphical user interface. In the next section, we build on the knowledge we
    have garnered of running Cypress commands to understand how different commands
    are utilized within Cypress.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding basic Cypress commands
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we will explore various Cypress commands that we can use to
    run our tests either via the Terminal or using the Cypress test runner. We will
    also observe how the commands can be used to achieve different results. This section
    will also introduce us to customizing different tests that interact with our applications
    to achieve specific results. We will dive into the most common Cypress commands
    and how they can be extended with options that come pre-built into the Cypress
    framework. The commands we will explore are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`cypress run`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cypress open`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cypress info`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cypress version`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's start with `cypress run`.
  prefs: []
  type: TYPE_NORMAL
- en: cypress run
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `cypress run` command executes all the tests in a Cypress suite in a headless
    manner, and runs the tests in the Electron browser by default. If it''s not extended
    with any other configurations, the command will run all the files in `.spec.js`
    format in the `integration` folder of Cypress. The `Cypress run` commands can
    be run with the following configuration options:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The most common Cypress configuration options include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](image/Table_3.1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The next few sections will expand on each configuration option shown in the
    preceding table.
  prefs: []
  type: TYPE_NORMAL
- en: cypress run --env <env-variable>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Cypress environment variables are *dynamic name-value pairs* that influence
    the way Cypress executes tests. These environment variables are useful when there
    is a need to run the tests in multiple environments, or when the values defined
    are prone to quickly changing.
  prefs: []
  type: TYPE_NORMAL
- en: In Cypress, you can define single or multiple environment variables either as
    strings or JSON objects.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will write tests for an open source **todoMVC** application.
    The code base for these tests can be found in the `chapter 03` directory, in the
    GitHub repository for this book. The application under test is a **To-do list**
    application that's been developed in React. Using the application, we can add
    our todo items, mark them as completed, delete them, view completed items, and
    even toggle between the *active*, *all*, and *completed* todo items.
  prefs: []
  type: TYPE_NORMAL
- en: Using this application, we may have plans to extend the application to serve
    a secure version of the application using **HTTPS** instead of the current **HTTP**
    protocol. Even though the functionality for HTTPS is not currently supported,
    we can add provisions for it using our environment variables in the Cypress tests.
    To achieve this, we will define the **Transfer protocol** URL portion as an environment
    variable, then pass this to our commands in `package.json`, as shown in the following
    examples.
  prefs: []
  type: TYPE_NORMAL
- en: The following code snippets can be found in the GitHub repository mentioned
    in the subfolder in `chapter 03`. The full source code for the `Todo-app.spec.js`
    file is located under the `Cypress/integration/examples` folder. The Cypress tests
    we will be exploring in this chapter are the version 1 tests.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following `Todo-app.spec.js` file demonstrates how to use environment variables
    when navigating to a URL. It is the main test file and is located in `chapter-03/cypress/integration/examples/todo-app.spec.js`
    in this book''s GitHub repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The following `package.json` file is also located in the `chapter-03/` directory
    and holds all the commands that are used to execute the testing or execution commands
    of the JavaScript application. It is located in the root location of the `chapter-03/`
    directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The preceding script demonstrates that in the event of a change occurring in
    the URL protocol, we can run any of the aforementioned test commands to replace
    the environment variable we declared in the URL when we are running our Cypress
    tests. We can execute the preceding scripts with `npm run cypress:run` and `npm
    run cypress:run:v2` consecutively.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: HTTPS is the same as HTTP, with the difference being that HTTPS is more secure.
    This is because the process of sending requests and receiving responses is encrypted
    using the TLS(SSL) security protocol.
  prefs: []
  type: TYPE_NORMAL
- en: The transfer protocol is the portion of the URL that determines whether the
    URL uses the HTTP or HTTPS protocol. A URL using the HTTP protocol begins with
    `http://`, while one that uses HTTPS begins with `https://`.
  prefs: []
  type: TYPE_NORMAL
- en: cypress run --browser <browser-name>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Cypress command line has the built-in capability to run Cypress tests in
    different browsers that have been installed on the host computer, and that are
    supported by the Cypress framework. Cypress tries to automatically detect the
    installed browsers and can run the tests in either `chrome`, `chromium`, `edge`,
    `firefox`, or `electron`. To run tests in a specific browser, you will need to
    supply the browser name using the `--browser` configuration option. You can also
    choose to supply the browser path instead of the browser name; Cypress will still
    run the tests in the supplied browser path, as long as it is valid and supported
    by Cypress.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code snippet shows scripts that have been defined in the `scripts`
    section of `package.json` in the `chapter-03` directory of this book''s GitHub
    repository. The scripts define the browsers that our tests will run in and also
    pass in an environment variable for a part of the URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding commands, we can run our tests in either Chrome or Firefox
    using the `npm run cypress:chrome` and `npm run cypress:firefox` commands, respectively.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: To run tests in a specific browser, the browser must be installed on your machine
    and it must also be among the list of Cypress supported browsers.
  prefs: []
  type: TYPE_NORMAL
- en: Cypress run --config <configuration(s)-option>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Cypress can set and override configurations using commands running on the terminal.
    Cypress' configuration can either be passed as a single value, as multiple values
    separated by commas, or as a stringified JSON object. Any defined configuration
    in Cypress can be changed or modified by the `cypress run --config` configuration
    option. Configuration options may include specifying an alternative `viewportHeight`
    and `ViewportWidth`, timeouts, and file changes, among other configurations. In
    our script, we will change the viewport that Cypress runs our tests on, and instead
    of the default viewport, which is 1000x660, we will run our tests in the tablet
    viewport of 763x700.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code snippet is defined in the `package.json` file of our `chapter-03`
    root directory. The following script is used to run tests in a tablet viewport.
    To do this, you must override the Cypress default configuration for the viewport''s
    height and width:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The previous script can be run with the `npm run cypress:tablet-view` command.
  prefs: []
  type: TYPE_NORMAL
- en: Important Note
  prefs: []
  type: TYPE_NORMAL
- en: When passing more than one configuration option in Cypress, leave no spaces
    between the comma-separated values for the different configurations (as shown
    in the preceding code); otherwise, Cypress will throw an error.
  prefs: []
  type: TYPE_NORMAL
- en: cypress run --config-file <configuration-file>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Cypress can override the default configuration file located at `/cypressRootDirectory/cypress.json`.
    You can define one or more secondary Cypress configuration files in order to run
    their tests. Cypress also allows you to entirely disable the use of a configuration
    file.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following script, which is located in `package.json` in the root directory
    of our `chapter-03` directory, is a command that enables Cypress to override the
    configuration file that it uses to run the tests. When the command is executed,
    rather than using the default `cypress.json` file located in `chapter-03`, it
    will use the `cypress-config.json` file, which is located under `chapter-03/config/cypress-config.json`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: To run the preceding script, you will need to run the `npm run cypress:run:secondary-configuraton`
    command, which will run the tests with the configuration file located at `/cypressRootDirectory/config/cypress-config.json`.
  prefs: []
  type: TYPE_NORMAL
- en: cypress run --headed
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Cypress provides a command that allows you to run browsers in both headless
    and headed mode. When headed mode is defined, the tests open a browser when they
    are run. This option can be used in the default Electron browser that Cypress
    comes bundled with. The default mode for running Cypress tests using the `run`
    command in Electron is headless, and to override this, we need to pass the `--headed`
    configuration when the tests are running.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following script can be found in the `package.json` file, which is located
    in the `chapter-03` directory of this book''s GitHub repository. Running the following
    script command will enable Cypress to be run in headed mode, which allows tests
    being run to be visible on the browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The previous script can be run with the `npm run cypress:electron:headed` command.
  prefs: []
  type: TYPE_NORMAL
- en: cypress run --headless
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Cypress runs tests in both Chrome and Firefox browsers in headed mode, and this
    launches a browser every time the tests are run. To change this behavior and ensure
    that test runs occur without launching a browser, you need to configure the commands
    running either the Chrome or Firefox browser so that they run headlessly.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following script can be found in the `package.json` file, which is located
    in the `chapter-03` directory of this book''s GitHub repository. Running the following
    command will enable Cypress to run in headless mode, where the test commands can
    only be seen running on the command-line interface:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: To run Chrome in headless mode using the preceding commands, you will need to
    run `npm run cypress:chrome:headless`. To run the commands in headless mode in
    Firefox, you will need to run the `npm run cypress:firefox:headless` command.
  prefs: []
  type: TYPE_NORMAL
- en: cypress run --spec <spec-file>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Cypress allows us to specify the different test files that can be run. With
    this command, it is possible to specify a *single* test file to be run in a directory,
    instead of running *all* the test files in a directory. It is also possible to
    specify different tests in different directories so that they run simultaneously,
    and to specify a regex pattern that matches a specific directory.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code snippet is part of the `package.json` file, which is located
    in the `chapter-03` directory of this book''s GitHub repository. The first script
    can only run a specific file in a directory, while the second script can run multiple
    files within a single directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: The first command specifies that the test will run the `todo-app.spec.js` file,
    which is located in the `integration-v2` folder. The second command will run all
    the test files that are located in the `integration-v2` folder.
  prefs: []
  type: TYPE_NORMAL
- en: cypress open
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `cypress open` command runs Cypress tests in a test runner, with the configuration
    options being applied to the tests of the project that you are running. The configuration
    options that are passed when you''re running the `cypress open` command also override
    the specified defaults in the `cypress.json` file, which is located in the `tests
    root` folder, if configurations are specified when the tests are running. The
    following command shows how to run any `cypress open` commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: The first part of the command shows the `cypress open` command, while the second
    part shows the configuration options that can be chained with it.
  prefs: []
  type: TYPE_NORMAL
- en: 'The most common Cypress configuration options include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](image/Table_3.2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We will look at each option in detail in the next few sections.
  prefs: []
  type: TYPE_NORMAL
- en: cypress open --env <env-variable(s)>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Just like running the `cypress run` commands, the `cypress open` command can
    be run with specified environment variables that are declared when the tests are
    running. Similar to the `cypress run` command, it is possible to declare one or
    multiple environment variables using the `--env` configuration option when running
    the tests in the test runner.
  prefs: []
  type: TYPE_NORMAL
- en: In the previous section, we specified how we can run tests via the command line
    by passing an environment variable in the `cypress run` command. We will pass
    the same environment variable to run the tests using our Cypress test runner,
    and the tests should run okay. The environment variable that's passed will determine
    whether the transfer protocol of the **todoMVC** application URL is **HTTP** or
    the secure **HTTPS**.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code snippet is located in the `Todo-app.spec.js` file, which
    is the main test file in our `chapter-03/` directory. The `todo-app.spec.js` file
    can be found under `integration/examples` in the `chapter-03/` directory. In the
    following snippet, just like in `cypress run`, we can pass environment variables
    to the URL using the `cypress open` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The following code snippet is located in the `chapter-03/` root directory in
    the `package.json` file. Using this snippet, we pass the `''http''` environment
    variable to our tests. This is when we can complete our URL and execute our tests:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: To open the test runner and verify that the tests run, you can run `npm run
    cypress:open`, which should automatically add the **TransferProtocol** environment
    variable to the running tests' configuration.
  prefs: []
  type: TYPE_NORMAL
- en: cypress open --browser </path/to/browser>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When specified, the `--browser` option points to a custom browser that will
    be added to the list of available browsers in the test runner. The browser to
    be added must be supported by Cypress and must be installed on the machine that
    is running the Cypress tests.
  prefs: []
  type: TYPE_NORMAL
- en: 'By default, all the available browsers can be viewed in Cypress by clicking
    on the browser selection button in the test runner, before selecting the spec
    to run. The browser selection dropdown contains all the browsers that have been
    installed on the system and are supported by Cypress. The browser selection dropdown
    also allows you to switch the test browsers, and therefore test the functionality
    under different browsers:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.1 â€“ Test browser selection dropdown'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Chapter_3_Image01.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.1 â€“ Test browser selection dropdown
  prefs: []
  type: TYPE_NORMAL
- en: To specify a path so that the browser can be added (for example, Chromium),
    you need to have the following configuration to add Chromium to the list of available
    browsers. Here, you need to run the `npm run cypress:chromium` command.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following script is located in the `chapter-03/` directory under the `package.json`
    file in this book''s GitHub repository. When the script is executed as a command,
    it will look for a browser in the specified location and add it to the list of
    browsers used to run the Cypress tests:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: To execute the preceding script to run our tests, we need to run the `npm run
    cypress:chromium` command in our Terminal. This will locate the Chromium browser
    in the `location` `/usr/bin/chromium` and use it to run our tests.
  prefs: []
  type: TYPE_NORMAL
- en: cypress open --config <configuration-option(s)>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Cypress framework allows us to run tests in a test runner and provide configuration
    options that must be passed when initializing the test runner. While passing the
    `--config` option, it is possible to either pass one environment variable or multiple
    environment variables that are separated by commas. The following script specifies
    that the viewport dimensions should be for a tablet and that the configurations
    are passed through the `â€“config` option. To run the required command, you need
    to run `npm run cypress:open:tablet-view`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following script, located in the `package.json` file in this book''s `chapter-03/`
    root directory, is used to change the configuration of the viewport for a test
    running on the visible browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: When executed, the command modifies the default Cypress configuration for the
    browser's size. The provided viewport height and viewport width will show content
    in a similar fashion to a tablet display.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: The configuration options specified using the `--config` option will overwrite
    the default configuration specified in the `cypress.json` file.
  prefs: []
  type: TYPE_NORMAL
- en: cypress open --config-file <configuration-file>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Just like in the case of the `Cypress run` command, Cypress tests running through
    the test runner can have an override configuration file that overrides the default
    `cypress.json` file, which contains the default Cypress configuration. It is located
    in the root folder of the test file.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code snippet, located in the root folder of the `chapter-03/`
    directory''s `package.json` file, overrides the default Cypress configuration
    file, which is identified as `cypress.json`. When executed, the command will read
    an alternative configuration file that has already been declared in `chapter-03/config/cpress-config.json`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'To execute the previous command and change the default Cypress configuration
    file''s location, you need to run the following command in your command-line interface:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Now, let's look at another command.
  prefs: []
  type: TYPE_NORMAL
- en: cypress open --global
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'As we mentioned earlier, Cypress can be installed globally. Instead of installing
    it in every project, you can use the global Cypress installation to run different
    Cypress tests. This global installation also allows you to trigger global commands
    without necessarily having an installation of Cypress in the specific directory
    where the Cypress commands are invoked. To open Cypress in global mode, you need
    to pass in the `--global` option, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: By running this command, Cypress will recognize that we want to execute the
    tests using the global version of Cypress, not our local instance.
  prefs: []
  type: TYPE_NORMAL
- en: cypress open --project <project-path>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Cypress comes with the built-in capability to override the default path that
    Cypress starts when running the tests. When the `--project` option is defined,
    it instructs Cypress to abandon the default directory/project path, and instead
    use the provided project path to run the Cypress tests that are located in the
    specified project path. In this setup, it is possible to run totally different
    Cypress projects located in different directories or nested directories.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code snippet, located in the `package.json` file of this book''s
    `chapter-03/` root directory, executes tests in a totally different Cypress project.
    The script executes a project located in `chapter-03/cypress/todo-app-v3`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'In the previous script, a user can run a different Cypress project located
    in the `cypress/todo-app-v3` folder. To run the script, we need to run the `npm
    run:cypress:project:v3` command. The `version-3` project is a standalone project
    that does not depend on the parent Cypress project. It can use its `cypress.json`
    file to determine its run configurations, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.2 â€“ todo-app-v3 project test folder'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Chapter_3_Image02.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.2 â€“ todo-app-v3 project test folder
  prefs: []
  type: TYPE_NORMAL
- en: As shown in the preceding screenshot, we have modified the `integrationFolder`
    property in the `todo-app-v3` project to set the test folder from `cypress/integration`
    in the main tests folder to `cypress/tests` in the todo-app-v3 project.
  prefs: []
  type: TYPE_NORMAL
- en: cypress open --port <port-number>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: By default, Cypress runs on port `8080`. Running the `cypress run` command while
    passing the `--port` option enables you to override the default port where the
    tests are run, to a specific port that is chosen by you.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code snippet is part of the `package.json` file located in the
    `chapter-03/` directory of this book''s GitHub repository. Running the following
    command changes the default port that Cypress runs on:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'To run the previous Cypress script, you need to run the `npm run cypress:open:changed-port`
    command. Running this command will ensure that the tests are being run on port
    `3004`, instead of the port where Cypress runs its tests by default on the test
    runner:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.3 â€“ Overriding the default Cypress tests port'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Chapter_3_Image03.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.3 â€“ Overriding the default Cypress tests port
  prefs: []
  type: TYPE_NORMAL
- en: The preceding screenshot shows how to run tests on port `3004` after an override
    using the `--port` option, which was passed to the `cypress run` command. The
    port being used here is for demonstration purposes only; any usable port on a
    user's machine can be passed as an override port for a Cypress application.
  prefs: []
  type: TYPE_NORMAL
- en: Using the cypress info command
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Running the `cypress info` command on a Terminal will print the Cypress installation
    information and the environment configuration on the Terminal. The information
    that the command prints includes the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Browsers that have been installed on the machine and that have been detected
    by Cypress.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Information about the host operating system.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The location of the Cypress binary cache.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The location of the runtime data storage.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Environment variables that have been prefixed with **CYPRESS** and that control
    configurations such as the system proxy.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the cypress version command
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `cypress version` command prints out the binary version of Cypress and
    the npm version of the Cypress module that''s been installed. While most of the
    time, the versions should be the same, they can differ when the installed module,
    such as the binary version, was unable to be installed as a package module from
    npm, hence resulting in a difference in versions. The output from the `cypress
    version` command is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.4 â€“ cypress version command''s output'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Chapter_3_Image04.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.4 â€“ cypress version command's output
  prefs: []
  type: TYPE_NORMAL
- en: The preceding screenshot shows both the Cypress package and binary version that
    have been installed on my machine. Both the package and binary versions of Cypress
    are the same versions.
  prefs: []
  type: TYPE_NORMAL
- en: Optional exercise for Cypress command usage
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Using the **todoMVC** project defined in our project specifications, create
    a script that can run the following test scenarios:'
  prefs: []
  type: TYPE_NORMAL
- en: Headless tests using the edge browser.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tests on the test runner where the `TransferProtocol` environment variable is
    specified in `cypress.json` in the `chapter 03` root folder.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By the end of this exercise, you will understand how to run headed and headless
    tests, as well as how to add environment variables to scripts that we can use
    to execute different Cypress commands. You will also learn how to use different
    browsers to execute Cypress tests.
  prefs: []
  type: TYPE_NORMAL
- en: Recap â€“ understanding basic Cypress commands
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we learned how to use different Cypress commands to run Cypress
    using the command line or using the Cypress test runner, which runs using different
    browsers that have been installed on the system. We learned that although Cypress
    comes with default commands to run tests, we can extend these commands and increase
    the efficiency of running our tests by utilizing the commands and options available
    to customize Cypress for our use cases. We also provided an exercise so that you
    can apply the knowledge you've gained of using the `cypress run` and `cypress
    open` commands. In the next section, you will learn how to use the built-in Cypress
    debugger to view important debugging information that's necessary for troubleshooting
    errors using our terminals.
  prefs: []
  type: TYPE_NORMAL
- en: Cypress debugging on the command line
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will explore how to use the command line debugging properties
    of Cypress to troubleshoot the problems that we may encounter when running our
    tests. We will also explore the different debugging options that Cypress offers
    through the command line.
  prefs: []
  type: TYPE_NORMAL
- en: Cypress has a built-in debug module that can be exposed to users by passing
    debug commands before you run the tests using either `cypress run` or `cypress
    open`. To receive debugging output from the Terminal, the `DEBUG` environment
    variable needs to be set prior to the Cypress test runs in Mac or Linux environments.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following scripts can be found in the `chapter-03/` root directory''s `package.json`
    file and are used to show debug output when the commands are executed. The first
    script can be used to show debug output when the `cypress open` command is used
    to run tests, while the second script can be used to show debug output when the
    `cypress run` command is used to run tests:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: As shown in the preceding commands, running `npm run cypress:open:debugger`
    will run the Cypress tests in a Terminal and log the debug output from the run.
    The second command, which can be run with `npm run cypress:run:debugger`, will
    run the debugger while running the tests on the Cypress test runner.
  prefs: []
  type: TYPE_NORMAL
- en: Cypress makes it easy to filter through the debug output since you can choose
    to have debugging information about specific modules, such as the Cypress server,
    the CLI, or the launcher modules.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following script is located in the `package.json` file in the `chapter-03/`
    directory of this book''s GitHub repository. When run, it will provide debug output
    for all the logs that are under the Cypress server module:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Running the preceding command with `npm run cypress:run:server-debugger` will
    only output the debugger information related to the Cypress server. Using the
    filtering commands not only makes it easy to narrow down issues in Cypress, but
    also helps filter out noise, leaving logs that are important for debugging Cypress
    information and that will lead us to the source of the problem.
  prefs: []
  type: TYPE_NORMAL
- en: Optional exercise for Cypress debugging
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Using the **todoMVC** project defined in our project''s specifications, create
    a script that will run the following test scenarios:'
  prefs: []
  type: TYPE_NORMAL
- en: Debugging the Cypress CLI module
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Debugging the `cypress:server` project module
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By the end of this exercise, you will have a grasp of the concepts of debugging
    in Cypress, and also have knowledge of how to create and run Cypress scripts in
    the `package.json` file.
  prefs: []
  type: TYPE_NORMAL
- en: Recap â€“ Cypress debugging on the command line
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we learned how to utilize Cypress to view additional information
    about our test runs by setting the `DEBUG` environment variable. We also learned
    how to utilize Cypress' `debug` variable to filter out the debug output that we
    require, and performed an exercise to extend our knowledge on debugging using
    the command line.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned about the `cypress open` and `cypress run` commands,
    as well as how the two commands can be chained with configuration options to extend
    their usage. We also learned how to check the Cypress information and Cypress
    versions that have been installed on our system. In the final section, we learned
    how to use Cypress to provide debug output and find out the cause of failures
    in our tests. In the next chapter, we will dive into writing Cypress tests and
    understanding the different parts of a test.
  prefs: []
  type: TYPE_NORMAL
