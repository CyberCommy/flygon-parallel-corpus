- en: Chapter 17. Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let us think back on our progress.
  prefs: []
  type: TYPE_NORMAL
- en: We started out with a spaghetti mess of a legacy application. The entire application
    was based in the document root, and users browsed directly to page scripts. It
    used an include-oriented architecture, where merely including a file caused logic
    to be executed. Global variables were scattered everywhere, which made debugging
    difficult to impossible. There were no tests of any sort, much less unit tests,
    so every change raised the possibility of breaking something else. There was no
    clear separation of model, view, and controller layers. SQL statements were embedded
    throughout our code, and domain logic was mixed in with presentation and action
    logic.
  prefs: []
  type: TYPE_NORMAL
- en: Now, after a great deal of effort, dedication, and commitment, we have modernized
    our legacy application. The document root consists only of public resources and
    a front controller. All the page scripts have been distilled into separate model,
    view, and controller layers. These layers are represented by a well-structured
    series of classes, each with its own set of unit tests. The application objects
    are built inside a dependency injection container, keeping their operation separate
    from their creation.
  prefs: []
  type: TYPE_NORMAL
- en: What could possibly be left to do?
  prefs: []
  type: TYPE_NORMAL
- en: Opportunities for improvement
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Even though we have modernized our application, it is still not perfect. Frankly,
    it will *never* be perfect (whatever that may happen to mean). There will always
    be some opportunity to improve it. Indeed, the modernization process itself has
    revealed many opportunities for us.
  prefs: []
  type: TYPE_NORMAL
- en: The data source layer is composed of a series of Gateways. While they serve
    our purpose nicely for now, it may be better to restructure these as Data Mappers
    that interact more cleanly with our domain objects.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The domain layer is built on top of Transaction Scripts. These, too, are fine
    in their own way, but as we work with them, we may realize that they are insufficient
    for our needs. They combine too many aspects of our domain logic into monolithic
    classes and methods. We will probably want to begin to tease out the different
    aspects of our domain logic into a Domain Model and wrap it with a series of Service
    Layers.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The presentation layer is still relatively monolithic in nature. We may want
    to convert our view files to a Two Step View system. That will give us a unified
    layout across the entire application, provide a reusable series of "partial" templates,
    and help us reduce each view file to its central core.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Our controllers may be handling several unrelated actions as an artifact of
    the legacy architecture. We may wish to reorganize them into more sensible groups
    for quicker understanding. Indeed, each controller may be doing too much work
    (i.e., a fat controller instead of a skinny one) that could better be handled
    by helper classes or a Service Layer.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The response system combines the concerns of content building with HTTP response
    building. We may wish to refactor the entire response-sending process to two or
    more separate layers: one that deals with the body of the response and one that
    deals with the response headers. Indeed, we may wish to represent the response
    as a Data Transfer Object that describes our intentions, but leaves the actual
    response building-and-sending to a separate handler.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The routing system is definitely transitional. We probably still depend on query
    parameters in the URL to pass client request information into the application,
    instead of using "pretty URLs" where the parameters are represented as parts of
    the path information. The routes themselves merely describe the class to be invoked,
    and do not carry as much information as they should about the action that the
    application should be executing. We will want to replace this basic router with
    a more powerful one.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The front controller is acting as our dispatcher, instead of handing off route
    dispatch to a separate object. We may wish to separate the task of discovering
    the route information from the task of dispatching that route.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, our dependency injection container is very "manual" in nature. We may
    wish to find a container system that automates some of the more basic aspects
    of object creation, allowing us to concentrate on the more complex aspects of
    service definition.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In other words, we have the problems of a modern codebase, not a legacy one.
    We have traded the low-quality problems of a spaghetti mess for the "high-quality"
    problems of an autoloaded, dependency-injected, unit-tested, layer-separated,
    front-controlled codebase.
  prefs: []
  type: TYPE_NORMAL
- en: Because we have modernized our codebase, we can address these problems in a
    completely different way than we did under a legacy regime. We can bring the tools
    of Refactoring to bear against the code. Now that we have better separation of
    concerns, we can make small changes in limited sections of the code to improve
    the quality of that code. Each change can be tested for regressions via our unit
    test suite.
  prefs: []
  type: TYPE_NORMAL
- en: Each new feature that we add can be plugged into our new application architecture
    using the techniques we have acquired while modernizing it. No longer do we toss
    in a new page script copied-and-modified from some previous one. Instead, we add
    a unit-tested controller class and route to it through the front controller. New
    functionality in our domain logic is added as a unit-tested class or method in
    the domain layer. Changes and additions to presentation can be tested separately
    from our models and controllers via our view layer.
  prefs: []
  type: TYPE_NORMAL
- en: Conversion to Framework
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There is also the possibility of converting our application over to the latest,
    hottest framework. Although switching to a public framework is a little bit like
    an application rewrite, it should be much easier now that we have a well-separated
    series of application layers. We should be able to determine which parts would
    be ported over to a public framework, and which are merely incidental to the operation
    of our particular architecture.
  prefs: []
  type: TYPE_NORMAL
- en: I advise neither for nor against this approach. I will only point out that,
    in the course of modernizing our legacy application, we have essentially built
    our own custom-tailored framework. We have done so with what is probably a more
    disciplined and rigorous approach than most public frameworks in PHP land. While
    we gain the community that goes along with a public framework, we also gain the
    baggage of the framework developers themselves. These and other tradeoffs are
    beyond my ability to judge on your behalf; you will have to decide for yourself
    if the benefits outweigh the costs.
  prefs: []
  type: TYPE_NORMAL
- en: Review and next steps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Regardless of how we proceed from here, there can be no doubt that the improvement
    of the *application* has led to an improvement in our quality of life and in our
    professional approach. The time we have invested in the code has paid off not
    only in terms of our employment, where we now spend less time feeling frustrated
    and demoralized, and more time feeling competent and productive. It has paid off
    in terms of our skills, our knowledge, and our experience regarding application
    architecture, patterns, and practices.
  prefs: []
  type: TYPE_NORMAL
- en: Our goals now are to continue improving our code, to continue improving ourselves,
    and to help others to improve as well. We need to share our knowledge. In doing
    so, we will reduce the amount of suffering in the world that comes from having
    to deal with legacy applications. As more people learn to apply what we have learned
    here, we can ourselves go on to bigger and better and more interesting issues
    in our professional lives.
  prefs: []
  type: TYPE_NORMAL
- en: So go forth and spread the good news to your colleagues, compatriots, and co-workers,
    that they need not suffer with legacy applications if they do not want to. They,
    can also modernize their codebases, and improve their own lives in doing so.
  prefs: []
  type: TYPE_NORMAL
