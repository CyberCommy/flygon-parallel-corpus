- en: Building Your Own Hooks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we learned about the limitations and rules of Hooks.
    We learned where to call Hooks, why the order of Hooks matters, and the naming
    conventions for Hooks. Finally, we learned about enforcing the rules of Hooks
    and dealing with `useEffect` dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we are going to learn how to create custom Hooks by extracting
    existing code from our components. We are also going to learn how to use custom
    Hooks and how Hooks can interact with each other. Then, we are going to learn
    how to write tests for our custom Hooks. Finally, we are going to learn about
    the full React Hooks API.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Extracting custom Hooks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using custom Hooks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Interactions between Hooks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing Hooks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploring the React Hooks API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A fairly recent version of Node.js should already be installed (v11.12.0 or
    higher). The `npm` package manager for Node.js also needs to be installed.
  prefs: []
  type: TYPE_NORMAL
- en: The code for this chapter can be found on GitHub: [https://github.com/PacktPublishing/Learn-React-Hooks/tree/master/Chapter10](https://github.com/PacktPublishing/Learn-React-Hooks/tree/master/Chapter10).
  prefs: []
  type: TYPE_NORMAL
- en: 'Check out the following video to see the code in action:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://bit.ly/2Mm9yoC](http://bit.ly/2Mm9yoC)'
  prefs: []
  type: TYPE_NORMAL
- en: Please note that it is highly recommended that you write the code on your own.
    Do not simply run the code examples provided previously. It is important to write
    the code yourself in order to learn and understand properly. However, if you run
    into any issues, you can always refer to the code example.
  prefs: []
  type: TYPE_NORMAL
- en: Now let's get started with the chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Extracting custom Hooks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After getting a good grasp on the concept of Hooks by learning about the State
    and Effect Hooks, community Hooks, and the rules of Hooks, we are now going to
    build our own Hooks. We start by extracting custom Hooks from existing functionalities
    of our blog application. Usually, it makes the most sense to first write the component,
    and then later extract a custom Hook from it if we notice that we use similar
    code across multiple components. Doing so avoids prematurely defining custom Hooks
    and making our project unnecessarily complex.
  prefs: []
  type: TYPE_NORMAL
- en: 'We are going to extract the following Hooks in this section:'
  prefs: []
  type: TYPE_NORMAL
- en: A `useTheme` Hook
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `useUserState` and `usePostsState` Hooks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A `useDispatch` Hook
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: API Hooks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A `useDebouncedUndo` Hook
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a useTheme Hook
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In many components, we use the `ThemeContext` to style our blog app. Functionality
    that is used across multiple components is usually a good opportunity for creating
    a custom Hook. As you might have noticed, we often do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: We could abstract this functionality into a `useTheme` Hook, which will get
    the `theme` object from the `ThemeContext`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start creating a custom `useTheme` Hook:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new `src/hooks/` directory, which is where we are going to put our
    custom Hooks.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new `src/hooks/useTheme.js` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In this newly created file, we first import the `useContext` Hook and the `ThemeContext` as
    follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we export a new function called `useTheme`; this will be our custom Hook.
    Remember, Hooks are just functions prefixed with the `use` keyword:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'In our custom Hook, we can now use the essential Hooks provided by React to
    build our own Hook. In our case, we simply return the `useContext` Hook:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: As we can see, custom Hooks can be quite simple. In this case, the custom Hook
    only returns a Context Hook with the `ThemeContext` passed to it. Nevertheless,
    this makes our code more concise and easier to change later. Furthermore, by using
    a `useTheme` Hook, it is clear that we want to access the theme, which means our
    code will be easier to read and reason about.
  prefs: []
  type: TYPE_NORMAL
- en: Creating global state Hooks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Another thing that we often do is access the global state. For example, some
    components need the `user` state and some need the `posts` state. To abstract
    this functionality, which will also make it easier to adjust the state structure
    later on, we can create custom Hooks to get certain parts of the state:'
  prefs: []
  type: TYPE_NORMAL
- en: '`useUserState`: Gets the `user` part of the `state` object'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`usePostsState`: Gets the `posts` part of the `state` object'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defining the useUserState Hook
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Repeating a similar process to what we did for the `useTheme` Hook, we import
    the `useContext` Hook from React and the `StateContext`. However, instead of returning
    the result of the Context Hook, we now pull out the `state` object via destructuring
    and then return `state.user`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new `src/hooks/useUserState.js` file with the following contents:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Similarly to the `useTheme` Hook, the `useUserState` Hook makes our code more
    concise, easier to change later, and improves readability.
  prefs: []
  type: TYPE_NORMAL
- en: Defining the usePostsState Hook
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We repeat the same process for the `posts` state. Create a new `src/hooks/usePostsState.js` file
    with the following contents:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Similarly to the `useTheme` and `useUserState` Hooks, the `usePostsState` Hook
    makes our code more concise, easier to change later, and improves readability.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a useDispatch Hook
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In many components, we need the `dispatch` function to do certain actions,
    so we often have to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: We can abstract this functionality into a `useDispatch` Hook, which will get
    the `dispatch` function from our global state context. Doing this will also make
    it easier to replace the state management implementation later on. For example,
    later on, we could replace our simple Reducer Hook with a state management library
    such as Redux or MobX.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s define the `useDispatch` Hook now using the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new `src/hooks/useDispatch.js` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the `useContext` Hook from React and the `StateContext` as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we define and export the `useDispatch` function; here, we allow passing
    a different `context` as an argument for making the Hook more generic (in case
    we want to use the `dispatch` function from a local state context later on). However,
    we set the default value of the `context` argument to the `StateContext` like
    so:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we pull out the `dispatch` function from the Context Hook via destructuring
    and return it with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: As we can see, creating a custom Dispatch Hook makes our code easier to change
    later on, as we only need to adjust the `dispatch` function in one place.
  prefs: []
  type: TYPE_NORMAL
- en: Creating API Hooks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We can also create Hooks for the various API calls. Putting these Hooks in a
    single file allows us to adjust the API calls easily later on. We are going to
    prefix our custom API Hooks with `useAPI` so it is easy to tell which functions
    are API Hooks.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create custom Hooks for our API now using the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new `src/hooks/api.js` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the `useResource` Hook from the `react-request-hook` library as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'First, we define a `useAPILogin` Hook to log in a user; we simply cut and paste
    the existing code from the `src/user/Login.js` file like so:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we define a `useAPIRegister` Hook; we simply cut and paste the existing
    code from the `src/user/Register.js` file as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we define a `useAPICreatePost` Hook, cutting and pasting the existing code
    from the `src/post/CreatePost.js` file, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we define a `useAPIThemes` Hook, cutting and pasting the existing
    code from the `src/ChangeTheme.js` file as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: As we can see, having all API-related functionality in one place makes it easier
    to adjust our API code later on.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a useDebouncedUndo Hook
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We are now going to create a slightly more advanced Hook for debounced undo
    functionality. We already implemented this functionality in the `CreatePost` component.
    Now, we are going to extract this functionality into a custom `useDebouncedUndo` Hook.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create the `useDebouncedUndo` Hook with the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new `src/hooks/useDebouncedUndo.js` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the `useState`, `useEffect`, and `useCallback` Hooks from React, as
    well as the `useUndo` Hook and the `useDebouncedCallback` Hook:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we are going to define the `useDebouncedUndo` function, which accepts a
    `timeout` argument for the debounced callback:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'In this function, we copy over the `useState` Hook from the previous implementation,
    as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we copy over the `useUndo` Hook; however, this time, we store all other
    undo-related functions in an `undoRest` object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Then we copy over the `useDebouncedCallback` Hook, replacing the fixed `200`
    value with our `timeout` argument:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we copy over the Effect Hook, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we define a `setter` function, which is going to set a new input `value`
    and call `setDebounce`. We can wrap the `setter` function with a `useCallback` Hook
    here to return a memoized version of the function and avoid recreating the function
    every time the component that uses the Hook re-renders. Similar to the `useEffect`
    and `useMemo` Hooks, we also pass a dependency array as the second argument of
    the `useCallback` Hook:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we return the `content` variable (containing the current input `value`),
    the `setter` function, and the `undoRest` object (which contains the `undo`/`redo`
    functions and the `canUndo`/`canRedo` booleans):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Creating a custom Hook for debounced undo means that we can reuse that functionality
    across multiple components. We could even provide this Hook as a public library,
    allowing others to easily implement debounced undo/redo functionality.
  prefs: []
  type: TYPE_NORMAL
- en: Exporting our custom Hooks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'After creating all our custom Hooks, we are going to create an `index.js` file
    in our Hooks directory and re-export our Hooks there, so that we can import our
    custom Hooks as follows: `import { useTheme } from ''./hooks''`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s export all our custom Hooks now using the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new `src/hooks/index.js` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In this file, we first import our custom Hooks as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we re-export these imported Hooks with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we re-export all Hooks from the `api.js` file as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Now that we have exported all our custom Hooks, we can simply import Hooks directly
    from the `hooks` folder, making it easier to import multiple custom Hooks at once.
  prefs: []
  type: TYPE_NORMAL
- en: Example code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The example code can be found in the `Chapter10/chapter10_1` folder.
  prefs: []
  type: TYPE_NORMAL
- en: Just run `npm install` to install all dependencies and `npm start` to start
    the application, and then visit `http://localhost:3000` in your browser (if it
    does not open automatically).
  prefs: []
  type: TYPE_NORMAL
- en: Using our custom Hooks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After creating our custom Hooks, we can now start using them throughout our
    blog application. Using custom Hooks is quite straightforward as they are similar
    to community Hooks. Just like all other Hooks, custom Hooks are simply JavaScript
    functions.
  prefs: []
  type: TYPE_NORMAL
- en: 'We created the following Hooks:'
  prefs: []
  type: TYPE_NORMAL
- en: '`useTheme`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`useDispatch`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`usePostsState`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`useUserState`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`useDebouncedUndo`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`useAPILogin`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`useAPIRegister`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`useAPICreatePost`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`useAPIThemes`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this section, we are going to refactor our app to use all of our custom Hooks.
  prefs: []
  type: TYPE_NORMAL
- en: Using the useTheme Hook
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Instead of using the `useContext` Hook with the `ThemeContext`, we can now use
    the `useTheme` Hook directly! If we end up changing the theming system later on,
    we can simply modify the `useTheme` Hook and our new system will be implemented
    throughout our application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s refactor our app to use the `useTheme` Hook:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit `src/Header.js` and replace the existing imports with an import of the
    `useTheme` Hook. The `ThemeContext` and `useContext` imports can be removed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, replace the current Context Hook definition with the `useTheme` Hook,
    as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Now edit `src/post/Post.js` and adjust the imports similarly there:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, replace the `useContext` Hook with the `useTheme` Hook as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: As we can see, using a custom Hook makes our code much more concise and easier
    to read. We now move on to using the global state Hooks.
  prefs: []
  type: TYPE_NORMAL
- en: Using the global state Hooks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Similarly to what we did with the `ThemeContext`, we can also replace our state
    Context Hooks with the `usePostsState`, `useUserState`, and `useDispatch` Hooks.
    This is optimal if we want to change the state logic later. For example, if our
    state grows and we want to use a more sophisticated system such as Redux or MobX,
    then we can simply adjust the existing Hooks and everything will work the same
    way as before.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this section, we are going to adjust the following components:'
  prefs: []
  type: TYPE_NORMAL
- en: '`UserBar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Login`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Register`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Logout`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CreatePost`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PostList`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adjusting the UserBar component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First, we are going to adjust the `UserBar` component. Here, we can use the
    `useUserState` Hook by following these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit `src/user/UserBar.js` and import the `useUserState` Hook:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we remove the following Hook definition:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'We replace it with our custom `useUserState` Hook:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Now the `UserBar` component makes use of our custom Hook instead of directly
    accessing the `user` state.
  prefs: []
  type: TYPE_NORMAL
- en: Adjusting the Login component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Next, we are going to adjust the `Login` component, where we can use the `useDispatch`
    Hook. This process is outlined in the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit `src/user/Login.js` and import the `useDispatch` Hook, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Then remove the following Context Hook:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Replace it with our custom `useDispatch` Hook:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Now the `Login` component makes use of our custom Hook instead of directly accessing
    the `dispatch` function. Next, we are going to adjust the `Register` component.
  prefs: []
  type: TYPE_NORMAL
- en: Adjusting the Register component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Similarly to the `Login` component, we can also use the `useDispatch` Hook
    in the `Register` component, as shown in the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit `src/user/Register.js` and import the `useDispatch` Hook:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, replace the current Context Hook with our custom Dispatch Hook, as shown
    here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Now the `Register` component also makes use of our custom Hook instead of directly
    accessing the `dispatch` function.
  prefs: []
  type: TYPE_NORMAL
- en: Adjusting the Logout component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Then, we are going to adjust the `Logout` component to use both the `useUserState`
    and the `useDispatch` Hooks with the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit `src/user/Logout.js` and import the `useUserState` and `useDispatch` Hooks:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, replace the current Hook definitions with the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Now the `Logout` component makes use of our custom Hooks instead of directly
    accessing the `user` state and the `dispatch` function.
  prefs: []
  type: TYPE_NORMAL
- en: Adjusting the CreatePost component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Next we are going to adjust the `CreatePost` component, which is similar to
    what we did with the `Logout` component. This process is outlined in the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit `src/post/CreatePost.js` and import the `useUserState` and `useDispatch` Hooks:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, replace the current Context Hook definition with the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: Now the `CreatePost` component makes use of our custom Hooks instead of directly
    accessing the `user` state and the `dispatch` function.
  prefs: []
  type: TYPE_NORMAL
- en: Adjusting the PostList component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Finally, we are going to use the `usePostsState` Hook to render the `PostList`
    component, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit `src/post/PostList.js` and import the `usePostsState` Hook:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Then replace the current Hook definition with the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: Now the `PostList` component makes use of our custom Hook instead of directly
    accessing the `posts` state.
  prefs: []
  type: TYPE_NORMAL
- en: Using the API Hooks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Next, we are going to replace all the `useResource` Hooks with our custom API
    Hooks. Doing so allows us to have all the API calls in one file so that we can
    easily adjust them later on, in case the API changes.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this section, we are going to adjust the following components:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ChangeTheme`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Register`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Login`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CreatePost`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's get started.
  prefs: []
  type: TYPE_NORMAL
- en: Adjusting the ChangeTheme component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First, we are going to adjust the `ChangeTheme` component and replace the Resource
    Hook, accessing `/themes` with our custom `useAPIThemes` Hook in the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In `src/ChangeTheme.js`, remove the following `useResource` Hook import statement:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'Replace it with our custom `useAPIThemes` Hook:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, replace the `useResource` Hook definition with the following custom Hook:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: Now the `ChangeTheme` component uses our custom API Hook to pull themes from
    the API.
  prefs: []
  type: TYPE_NORMAL
- en: Adjusting the Register component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Next, we are going to adjust the `Register` component with the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit `src/user/Register.js` and adjust the import statement to also import
    the `useAPIRegister` Hook:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, replace the current Resource Hook with the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: Now the `Register` component uses our custom API Hook to `register` users via
    the API.
  prefs: []
  type: TYPE_NORMAL
- en: Adjusting the Login component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Similar to the `Register` component, we are also going to adjust the `Login`
    component:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit `src/user/Login.js` and adjust the import statement to also import the
    `useAPILogin` Hook:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, replace the current Resource Hook with the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: Now the `Login` component uses our custom API Hook to log in users via the API.
  prefs: []
  type: TYPE_NORMAL
- en: Adjusting the CreatePost component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Finally, we are going to adjust the `CreatePost` component by following these
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit `src/post/CreatePost.js` and adjust the import statement to also import
    the `useAPICreatePost` Hook:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, replace the current Resource Hook with the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: Now the `CreatePost` component uses our custom API Hook to create new posts
    via the API.
  prefs: []
  type: TYPE_NORMAL
- en: Using the useDebouncedUndo Hook
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Finally, we are going to replace all debounced undo logic in the `src/post/CreatePost.js`
    file with our custom `useDebouncedUndo` Hook. Doing so will make our component
    code much cleaner and easier to read. Furthermore, we can reuse the same debounced
    undo functionality in other components later.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s get started using the Debounced Undo Hook in the `CreatePost` component
    by following these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit `src/post/CreatePost.js` and import the `useDebouncedUndo` Hook:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, remove the following code related to debounced undo handling:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'Replace it with our custom `useDebouncedUndo` Hook, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, remove the following setter functions in our `handleContent` function
    (marked in bold):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'We can now use the `setContent` function provided by our custom Hook instead:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, our code is much cleaner, more concise, and easier to read now.
    Furthermore, we can reuse the Debounced Undo Hook in other components later on.
  prefs: []
  type: TYPE_NORMAL
- en: Example code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The example code can be found in the `Chapter10/chapter10_2` folder.
  prefs: []
  type: TYPE_NORMAL
- en: Just run `npm install` to install all dependencies and `npm start` to start
    the application, and then visit `http://localhost:3000` in your browser (if it
    does not open automatically).
  prefs: []
  type: TYPE_NORMAL
- en: Interactions between Hooks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Our whole blog app now works in the same way as before, but it uses our custom
    Hooks! Until now, we have always had Hooks that encapsulated the whole logic,
    with only constant values being passed as arguments to our custom Hooks. However,
    we can also pass values of other Hooks into custom Hooks!
  prefs: []
  type: TYPE_NORMAL
- en: 'Since Hooks are simply JavaScript functions, all Hooks can accept any value
    as arguments and work with them: constant values, component props, or even values
    from other Hooks.'
  prefs: []
  type: TYPE_NORMAL
- en: We are now going to create local Hooks, which means that they will be placed
    in the same file as the component, because they are not needed anywhere else.
    However, they will still make our code easier to read and maintain. These local
    Hooks will accept values from other Hooks as arguments.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following local Hooks will be created:'
  prefs: []
  type: TYPE_NORMAL
- en: A local Register Effect Hook
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A local Login Effect Hook
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's see how to create them in the following subsections.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a local Register Effect Hook
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First of all, we are going to extract the Effect Hook from our `Login` component
    to a separate `useRegisterEffect` Hook function. This function will accept the
    following values from other Hooks as arguments: `user` and `dispatch`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create a local Effect Hook for the `Register` component now using the
    following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit `src/user/Register.js` and define a new function outside of the component
    function, right after the import statements:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'For the contents of the function, cut the existing Effect Hook from the `Register`
    component and paste it here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, define our custom `useLoginEffect` Hook where we cut out the previous
    Effect Hook, and pass the values from the other Hooks to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: As we can see, extracting an effect into a separate function makes our code
    easier to read and maintain.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a local Login Effect Hook
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Repeating a similar process to the local Register Effect Hook, we are also
    going to extract the Effect Hook from our `Login` component to a separate `useLoginEffect` Hook
    function. This function will accept the following values from other Hooks as arguments:
    `user`, `dispatch`, and `setLoginFailed`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create a local Hook for the `Login` component now using the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit `src/user/Login.js` and define a new function outside of the component
    function, right after the import statements:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'For the contents of the function, cut the existing Effect Hook from the `Login`
    component and paste it here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: Here, we also added `setLoginFailed` to the Effect Hook dependencies. This is
    to make sure that whenever the `setter` function changes (which could happen eventually
    when using the Hook) the Hook triggers again. Always passing all dependencies
    of an Effect Hook, including functions, prevents bugs and unexpected behavior
    later on.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, define our custom `useLoginEffect` Hook, where we cut out the previous
    Effect Hook, and pass the values from the other Hooks to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: As we can see, extracting an effect into a separate function makes our code
    easier to read and maintain.
  prefs: []
  type: TYPE_NORMAL
- en: Example code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The example code can be found in the `Chapter10/chapter10_3` folder.
  prefs: []
  type: TYPE_NORMAL
- en: Just run `npm install` to install all dependencies and `npm start` to start
    the application, and then visit `http://localhost:3000` in your browser (if it
    does not open automatically).
  prefs: []
  type: TYPE_NORMAL
- en: Testing Hooks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now our blog application makes full use of Hooks! We even defined custom Hooks
    for various functions to make our code more reusable, concise, and easy to read.
  prefs: []
  type: TYPE_NORMAL
- en: When defining custom Hooks, it makes sense to write tests for them to ensure
    they work properly, even when we change them later on or add more options.
  prefs: []
  type: TYPE_NORMAL
- en: To test our Hooks, we are going to use the Jest test runner, which is included
    in our `create-react-app` project. However, as a result of the rules of Hooks,
    we cannot call Hooks from the test functions because they can only be called inside
    the body of a function component.
  prefs: []
  type: TYPE_NORMAL
- en: Because we do not want to create a component specifically for each test, we
    are going to use the React Hooks Testing Library to test Hooks directly. This
    library actually creates a test component and provides various utility functions
    to interact with the Hook.
  prefs: []
  type: TYPE_NORMAL
- en: Using the React Hooks Testing Library
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In addition to the React Hooks Testing Library, we also need a special renderer
    for React. To render React components to the DOM, we used `react-dom`; for tests,
    we can use the `react-test-renderer`. We are now going to install the React Hooks
    Testing Library and the `react-test-renderer` via `npm`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'The React Hooks Testing Library should be used in the following circumstances:'
  prefs: []
  type: TYPE_NORMAL
- en: When writing libraries that define Hooks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When you have Hooks that are used throughout multiple components (global Hooks)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: However, the library should not be used when a Hook is only defined and used
    in a single component (local Hooks).
  prefs: []
  type: TYPE_NORMAL
- en: In that case, we should test the component directly using the React Testing
    Library. However, testing React components is beyond the scope of this book. More
    information about testing components can be found on the library website: [https://testing-library.com/docs/react-testing-library/intro](https://testing-library.com/docs/react-testing-library/intro).
  prefs: []
  type: TYPE_NORMAL
- en: Testing simple Hooks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: First of all, we are going to test a very simple Hook that does not make use
    of contexts or asynchronous code such as timeouts. To do this, we are going to
    create a new Hook called `useCounter`. Then, we are going to test various parts
    of the Hook.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following tasks will be covered in this section:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating the `useCounter` Hook
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing the result
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing Hook actions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing the initial value
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing reset and forcing re-rendering
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's get started now.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the useCounter Hook
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `useCounter` Hook is going to provide a current `count` and functions to `increment` and `reset` the
    counter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create the `useCounter` Hook now using the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new `src/hooks/useCounter.js` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the `useState` and `useCallback` Hooks from React as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: 'We define a new `useCounter` Hook function with an argument for the `initialCount`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we define a new State Hook for the `count` value with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we define functions for incrementing and resetting the `count`, as shown
    here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we return the current `count` and the two functions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: Now that we have defined a simple Hook, we can start testing it.
  prefs: []
  type: TYPE_NORMAL
- en: Testing the useCounter Hook result
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s now write tests for the `useCounter` Hook we created, by following these
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new `src/hooks/useCounter.test.js` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the `renderHook` and `act` functions from the React Hooks Testing Library,
    as we are going to use these later:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: 'Also, import the to-be-tested `useCounter` Hook, as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we can write our first test. To define a test, we use the `test` function
    from Jest. The first argument is the name of the test and the second argument
    is a function to be run as the test:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: 'In this test, we use the `renderHook` function to define our Hook. This function
    returns an object with a `result` key, which is going to contain the result of
    our Hook:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we can check the values of the `result` object using `expect` from Jest.
    The `result` object contains a `current` key, which will contain the current result
    from the Hook:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: As we can see, writing tests for Hook results is quite simple! When creating
    custom Hooks, especially when they are going to be used publicly, we should always
    write tests to ensure they work correctly.
  prefs: []
  type: TYPE_NORMAL
- en: Testing useCounter Hook actions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using the `act` function from the React Hooks Testing Library, we can execute
    functions from the Hook and then check the new result.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s now test actions of our Counter Hook:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Write a new `test` function, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: 'Call the `increment` function of the Hook within the `act` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we check whether the new `count` is now `1`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: As we can see, we can simply use the `act` function to trigger actions in our
    Hook and then test the value just like we did before.
  prefs: []
  type: TYPE_NORMAL
- en: Testing the useCounter initial value
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We can also check the result before and after calling `act` and pass an initial value
    to our Hook.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s now test the initial value of our Hook:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Define a new `test` function, passing the initial value `123` to the Hook:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we can check if the `current` value equals the initial value, call `increment`,
    and ensure the `count` was increased from the initial value:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: As we can see, we can simply pass the initial value to the Hook and check whether
    the value is the same.
  prefs: []
  type: TYPE_NORMAL
- en: Testing reset and forcing re-rendering
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We are now going to simulate the props of a component changing. Imagine the
    initial value for our Hook is a prop and it is initially `0`, which then changes
    to `123` later on. If we reset our counter now, it should reset to `123` and not
    `0`. However, to do so, we need to force the re-rendering of our test component
    after changing the value.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s now test resetting and forcing the component to re-render:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Define the `test` function and a variable for the `initial` value:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we are going to render our Hook, but this time, we also pull out the
    `rerender` function via destructuring:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we set a new `initial` value and call the `rerender` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: 'Our `initial` value should now have changed, so when we call `reset`, the `count`
    will be set to `123`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: As we can see, the testing library creates a dummy component, which is used
    for testing the Hook. We can force this dummy component to re-render in order
    to simulate what would happen when props change in a real component.
  prefs: []
  type: TYPE_NORMAL
- en: Testing Context Hooks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using the React Hooks Testing Library, we can also test more complex Hooks,
    such as Hooks making use of React context. Most of the custom Hooks we created
    for our blog app make use of contexts, so we are now going to test those. To test
    Hooks that use context, we first have to create a context wrapper, and then we
    can test the Hook.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this section, we are going to perform the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a `ThemeContextWrapper` component
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Test the `useTheme` Hook
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a `StateContextWrapper` component
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Test the `useDispatch` Hook
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Test the `useUserState` Hook
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Test the `usePostsState` Hook
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's get started.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the ThemeContextWrapper
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To be able to test the Theme Hook, we first have to set up the context and provide
    a wrapper component for the Hook's test component.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s now create the `ThemeContextWrapper` component:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new `src/hooks/testUtils.js` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import `React` and the `ThemeContext`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: 'Define a new function component called `ThemeContextWrapper`; it will accept
    `children` as props:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: '`children` is a special prop of React components. It will contain all other
    components passed to it as `children`; for example, `<ThemeContextWrapper>{children}</ThemeContextWrapper>`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We return a `ThemeContext.Provider` with our default theme, and then pass `children`
    to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: As we can see, a context wrapper simply returns a context provider component.
  prefs: []
  type: TYPE_NORMAL
- en: Testing the useTheme Hook
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have defined the `ThemeContextWrapper` component, we can make use
    of it while testing the `useTheme` Hook.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s now test the `useTheme` Hook as outlined in the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new `src/hooks/useTheme.test.js` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the `renderHook` function as well as the `ThemeContextWrapper` and the `useTheme` Hook:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, define the `test` using the `renderHook` function and pass the `wrapper`
    as a second argument to it. Doing this will wrap the test component with the defined
    `wrapper` component, which means that we will be able to use the provided context
    in the Hook:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we can check the result of our Hook, which should contain the colors defined
    in the `ThemeContextWrapper`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: As we can see, after providing the context wrapper, we can test Hooks that use
    context just like we tested our simple Counter Hook.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the StateContextWrapper
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For the other Hooks, which make use of the `StateContext`, we have to define
    another wrapper to provide the `StateContext` to the Hooks.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s now define the `StateContextWrapper` component with the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit `src/hooks/testUtils.js` and adjust the import statements to import the
    `useReducer` Hook, the `StateContext`, and the `appReducer` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: 'Define a new function component called `StateContextWrapper`. Here we are going
    to use the `useReducer` Hook to define the app state, which is similar to what
    we did in the `src/App.js` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, define and return the `StateContext.Provider`, which is similar to what
    we did for the `ThemeContextWrapper`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: As we can see, creating a context wrapper always works similarly. However, this
    time, we are also defining a Reducer Hook in our wrapper component.
  prefs: []
  type: TYPE_NORMAL
- en: Testing the useDispatch Hook
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have defined the `StateContextWrapper`, we can use it to test the
    `useDispatch` Hook.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s test the `useDispatch` Hook with the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new `src/hooks/useDispatch.test.js` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the `renderHook` function, the `StateContextWrapper` component, and
    the `useDispatch` Hook:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, define the `test` function, passing the `StateContextWrapper` component
    to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, check whether the result of the Dispatch Hook is a function (the `dispatch`
    function):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: As we can see, using a `wrapper` component always works the same way, even if
    we use other Hooks within the `wrapper` component.
  prefs: []
  type: TYPE_NORMAL
- en: Testing the useUserState Hook
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using the `StateContextWrapper` and the Dispatch Hook, we can now test the `useUserState` Hook
    by dispatching `LOGIN` and `REGISTER` actions and checking the result. To dispatch
    these actions, we use the `act` function from the testing library.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s test the `useUserState` Hook:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new `src/hooks/useUserState.test.js` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the necessary functions, the `useDispatch` and `useUserState` Hooks,
    and the `StateContextWrapper`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we write a `test` that checks the initial `user` state:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE97]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we write a `test` that dispatches a `LOGIN` action and then checks the
    new state. Instead of returning a single Hook, we now return an object with the
    results of both Hooks:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we write a `test` that dispatches a `REGISTER` action and then checks
    the new state:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE99]'
  prefs: []
  type: TYPE_PRE
- en: As we can see, we can access both the `state` object and the `dispatch` function
    from our tests.
  prefs: []
  type: TYPE_NORMAL
- en: Testing the usePostsState Hook
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Similarly to how we tested the `useUserState` Hook, we can also test the `usePostsState` Hook.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s test the `usePostsState` Hook now:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new `src/hooks/usePostsState.test.js` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the necessary functions, the `useDispatch` and `usePostsState` Hooks,
    and the `StateContextWrapper`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we `test` the initial state of the `posts` array:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE101]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we `test` whether a `FETCH_POSTS` action replaces the current `posts`
    array:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE102]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we `test` whether a new post gets inserted on a `CREATE_POST` action:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE103]'
  prefs: []
  type: TYPE_PRE
- en: As we can see, the tests for the `posts` state are similar to the `user` state,
    but with different actions being dispatched.
  prefs: []
  type: TYPE_NORMAL
- en: Testing async Hooks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sometimes, we need to test Hooks that do asynchronous actions. This means that
    we need to wait a certain period of time until we check the result. To implement
    tests for these kind of Hooks, we can use the `waitForNextUpdate` function from
    the React Hooks Testing Library.
  prefs: []
  type: TYPE_NORMAL
- en: Before we can test async Hooks, we need to learn about the new JavaScript construct
    called `async`/`await`.
  prefs: []
  type: TYPE_NORMAL
- en: The async/await construct
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Normal functions are defined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE104]'
  prefs: []
  type: TYPE_PRE
- en: 'Normal anonymous functions are defined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE105]'
  prefs: []
  type: TYPE_PRE
- en: 'Asynchronous functions are defined by adding the `async` keyword:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE106]'
  prefs: []
  type: TYPE_PRE
- en: 'We can also make anonymous functions asynchronous:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE107]'
  prefs: []
  type: TYPE_PRE
- en: 'Within `async` functions, we can use the `await` keyword to resolve promises.
    We do not have to do the following anymore:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE108]'
  prefs: []
  type: TYPE_PRE
- en: 'Instead, we can now do this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE109]'
  prefs: []
  type: TYPE_PRE
- en: As we can see, `async` functions make our code much more concise and easier
    to read! Now that we have learned about the `async`/`await` construct, we can
    start testing the `useDebouncedUndo` Hook.
  prefs: []
  type: TYPE_NORMAL
- en: Testing the useDebouncedUndo Hook
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We are going to use the `waitForNextUpdate` function to test debouncing in
    our `useDebouncedUndo` Hook by following these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new `src/hooks/useDebouncedUndo.test.js` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import the `renderHook` and `act` functions as well as the `useDebouncedUndo` Hook:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE110]'
  prefs: []
  type: TYPE_PRE
- en: 'First of all, we `test` whether the Hook returns a proper `result`, including
    the `content` value, `setter` function, and the `undoRest` object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE111]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we `test` whether the `content` value gets updated immediately:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE112]'
  prefs: []
  type: TYPE_PRE
- en: Remember that we can give any name to variables we pull out from an array using
    destructuring. In this case, we first name the `content` variable as `content`,
    then, later, we name it `newContent`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, we use `waitForNextUpdate` to wait for the debounced effect to trigger.
    After debouncing, we should now be able to undo our change:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE113]'
  prefs: []
  type: TYPE_PRE
- en: As we can see, we can use `async`/`await` in combination with the `waitForNextUpdate`
    function to easily handle testing asynchronous operations in our Hooks.
  prefs: []
  type: TYPE_NORMAL
- en: Running the tests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To run the tests, simply execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE114]'
  prefs: []
  type: TYPE_PRE
- en: 'As we can see from the following screenshot, all our tests are passing successfully:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/d962f6c3-dd93-44f6-8685-80c8fdbb5456.png)'
  prefs: []
  type: TYPE_IMG
- en: All Hook tests passing successfully
  prefs: []
  type: TYPE_NORMAL
- en: The test suite actually watches for changes in our files and automatically reruns
    tests. We can use various commands to manually trigger test reruns and we can
    press *Q* to quit the test runner.
  prefs: []
  type: TYPE_NORMAL
- en: Example code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The example code can be found in the `Chapter10/chapter10_4` folder.
  prefs: []
  type: TYPE_NORMAL
- en: Just run `npm install` to install all dependencies and `npm start` to start
    the application, and then visit `http://localhost:3000` in your browser (if it
    does not open automatically).
  prefs: []
  type: TYPE_NORMAL
- en: Exploring the React Hooks API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The official React library provides certain built-in Hooks, which can be used
    to create custom Hooks. We have already learned about the three basic Hooks that
    React provides:'
  prefs: []
  type: TYPE_NORMAL
- en: '`useState`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`useEffect`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`useContext`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Additionally, React provides more advanced Hooks, which can be very useful
    in certain use cases:'
  prefs: []
  type: TYPE_NORMAL
- en: '`useReducer`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`useCallback`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`useMemo`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`useRef`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`useImperativeHandle`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`useLayoutEffect`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`useDebugValue`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The useState Hook
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `useState` Hook returns a value that will persist across re-renders, and
    a function to update it. A value for the `initialState` can be passed to it as
    an argument:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE115]'
  prefs: []
  type: TYPE_PRE
- en: Calling `setState` updates the value and re-renders the component with the updated
    value. If the value did not change, React will not re-render the component.
  prefs: []
  type: TYPE_NORMAL
- en: 'A function can also be passed to the `setState` function, with the first argument
    being the current value. For example, consider the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE116]'
  prefs: []
  type: TYPE_PRE
- en: 'Furthermore, a function can be passed to the first argument of the Hook if
    the initial state is the result of a complex computation. In that case, the function
    will only be called once during the initialization of the Hook:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE117]'
  prefs: []
  type: TYPE_PRE
- en: The State Hook is the most basic and ubiquitous Hook provided by React.
  prefs: []
  type: TYPE_NORMAL
- en: The useEffect Hook
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `useEffect` Hook accepts a function that contains code with side effects,
    such as timers and subscriptions. The function passed to the Hook will run after
    the render is done and the component is on the screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE118]'
  prefs: []
  type: TYPE_PRE
- en: 'A cleanup function can be returned from the Hook, which will be called when
    the component unmounts and is used to, for example, clean up timers or subscriptions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE119]'
  prefs: []
  type: TYPE_PRE
- en: The cleanup function will also be called before the effect is triggered again,
    when dependencies of the effect update.
  prefs: []
  type: TYPE_NORMAL
- en: 'To avoid triggering the effect on every re-render, we can specify an array
    of values as the second argument to the Hook. Only when any of these values change,
    the effect will get triggered again:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE120]'
  prefs: []
  type: TYPE_PRE
- en: This array passed as the second argument is called the dependency array of the
    effect. If you want the effect to only trigger during mounting, and the cleanup
    function during unmounting, we can pass an empty array as the second argument.
  prefs: []
  type: TYPE_NORMAL
- en: The useContext Hook
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `useContext` Hook accepts a context object and returns the current `value`
    for the context. When the context provider updates its `value`, the Hook will
    trigger a re-render with the latest `value`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE121]'
  prefs: []
  type: TYPE_PRE
- en: It is important to note that the context object itself needs to be passed to
    the Hook, not the consumer or provider.
  prefs: []
  type: TYPE_NORMAL
- en: The useReducer Hook
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `useReducer` Hook is an advanced version of the `useState` Hook. It accepts
    a `reducer` as the first argument, which is a function with two arguments: `state`
    and `action`. The `reducer` function then returns the updated state computed from
    the current state and the action. If a reducer returns the same value as the previous
    state, React will not re-render components or trigger effects:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE122]'
  prefs: []
  type: TYPE_PRE
- en: We should use the `useReducer` Hook instead of the `useState` Hook when dealing
    with complex `state` changes. Furthermore, it is easier to deal with global `state`
    because we can simply pass down the `dispatch` function instead of multiple setter
    functions.
  prefs: []
  type: TYPE_NORMAL
- en: The `dispatch` function is stable and will not change on re-renders, so it is
    safe to omit it from `useEffect` or the `useCallback` dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: We can specify the initial `state` by setting the `initialState` value or specifying
    an `initFn` function as the third argument. Specifying such a function makes sense
    when computing the initial `state` takes a long time or when we want to reuse
    the function to reset `state` through an `action`.
  prefs: []
  type: TYPE_NORMAL
- en: The useMemo Hook
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `useMemo` Hook takes a result of a function and memoizes it. This means
    that it will not be recomputed every time. This Hook can be used for performance
    optimizations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE123]'
  prefs: []
  type: TYPE_PRE
- en: In the previous example, `computeVal` is a performance-heavy function that computes
    a result from `a`, `b`, and `c`.
  prefs: []
  type: TYPE_NORMAL
- en: '`useMemo` runs during rendering, so make sure the computation function does
    not cause any side effects, such as resource requests. Side effects should be
    put into a `useEffect` Hook.'
  prefs: []
  type: TYPE_NORMAL
- en: The array passed as the second argument specifies the dependencies of the function.
    If any of these values change, the function will be recomputed; otherwise, the
    stored result will be used. If no array is provided, a new value will be computed
    on every render. If an empty array is passed, the value will only be computed
    once.
  prefs: []
  type: TYPE_NORMAL
- en: Do not rely on `useMemo` to only compute things once. React may forget some
    previously memoized values if they are not used for a long time, for example,
    to free up memory. Use it only for performance optimizations.
  prefs: []
  type: TYPE_NORMAL
- en: The `useMemo` Hook is used for performance optimizations in React components.
  prefs: []
  type: TYPE_NORMAL
- en: The useCallback Hook
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `useCallback` Hook works similarly to the `useMemo` Hook. However, it returns
    a memoized callback function instead of a value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE124]'
  prefs: []
  type: TYPE_PRE
- en: 'The previous code is similar to the following `useMemo` Hook:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE125]'
  prefs: []
  type: TYPE_PRE
- en: The function returned will only be redefined if one of the dependency values
    passed in the array of the second argument changes.
  prefs: []
  type: TYPE_NORMAL
- en: The useRef Hook
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `useRef` Hook returns a ref object that can be assigned to a component
    or element via the `ref` prop. Refs can be used to deal with references to elements
    and components in React:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE126]'
  prefs: []
  type: TYPE_PRE
- en: After assigning the ref to an element or component, the ref can be accessed
    via `refContainer.current`. If `InitialValue` is set, `refContainer.current` will
    be set to this value before assignment.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following example defines an `input` field that will automatically be focused
    when rendered:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE127]'
  prefs: []
  type: TYPE_PRE
- en: 'It is important to note that mutating the current value of a ref does not cause
    a re-render. If this is needed, we should use a `ref` callback using `useCallback` as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE128]'
  prefs: []
  type: TYPE_PRE
- en: 'Refs can be used to access the DOM, but also to keep mutable values around,
    such as storing references to intervals:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE129]'
  prefs: []
  type: TYPE_PRE
- en: Using refs like in the previous example makes them similar to instance variables
    in classes, such as `this.intervalRef`.
  prefs: []
  type: TYPE_NORMAL
- en: The useImperativeHandle Hook
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `useImperativeHandle` Hook can be used to customize instance values that
    are exposed to other components when pointing a `ref` to it. Doing this should
    be avoided as much as possible, however, as it tightly couples components together,
    which harms reusability.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `useImperativeHandle` Hook has the following signature:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE130]'
  prefs: []
  type: TYPE_PRE
- en: 'We can use this Hook to, for example, expose a `focus` function that other
    components can trigger via a `ref` to the component. This Hook should be used
    in combination with `forwardRef` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE131]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we can access the `focus` function as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE132]'
  prefs: []
  type: TYPE_PRE
- en: As we can see, using refs means that we can directly access elements and components.
  prefs: []
  type: TYPE_NORMAL
- en: The useLayoutEffect Hook
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `useLayoutEffect` Hook is identical to the `useEffect` Hook, but it fires
    synchronously after all DOM mutations are completed and before the component is
    rendered in the browser. It can be used to read information from the DOM and adjust
    the appearance of components before rendering. Updates inside this Hook will be
    processed synchronously before the browser renders the component.
  prefs: []
  type: TYPE_NORMAL
- en: Do not use this Hook unless it is really needed, which is only in certain edge
    cases. `useLayoutEffect` will block visual updates in the browser, and thus, is
    slower than `useEffect`.
  prefs: []
  type: TYPE_NORMAL
- en: The rule here is to use `useEffect` first. If your mutation changes the appearance
    of the DOM node, which can cause it to flicker, you should use `useLayoutEffect`
    instead.
  prefs: []
  type: TYPE_NORMAL
- en: The useDebugValue Hook
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `useDebugValue` Hook is useful for developing custom Hooks that are part
    of shared libraries. It can be used to show certain values for debugging in React
    DevTools.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, in our `useDebouncedUndo` custom Hook, we could do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE133]'
  prefs: []
  type: TYPE_PRE
- en: 'Adding these `useDebugValue` Hooks will show the following in the React DevTools:'
  prefs: []
  type: TYPE_NORMAL
- en: 'When the Hook is initialized: DebouncedUndo: init'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'When a value was entered: DebouncedUndo: waiting 200 ms'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'After debouncing (after `200` ms): DebouncedUndo: added to history'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we first learned how to extract custom Hooks from existing
    code in our blog app. We extracted various Context Hooks into custom Hooks, then
    created API Hooks and a more advanced Hook for debounced undo functionality. Next, we
    learned about interactions between Hooks and how we can use values from other
    Hooks in custom Hooks. We then created local Hooks for our blog app. Then, we
    learned about testing various Hooks with Jest and the React Hooks Testing Library.
    Finally, we learned about all the Hooks provided by the React Hooks API, at the
    time of writing.
  prefs: []
  type: TYPE_NORMAL
- en: Knowing when and how to extract custom Hooks is a very important skill in React
    development. In a larger project, we are probably going to define many custom
    Hooks, specifically tailored to our project's needs. Custom Hooks can also make
    it easier to maintain our application, as we only need to adjust functionality
    in one place. Testing custom Hooks is very important, because if we refactor our
    custom Hooks later on, we want to make sure that they still work properly. Now
    that we know the full React Hooks API, we can make use of all the Hooks that React
    provides to create our own custom Hooks.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we are going to learn how to migrate from React class components
    to a Hook-based system. We will first create a small project using class components
    and then we will replace them with function components using Hooks, taking a closer
    look at the differences between the two solutions.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To recap what we have learned in this chapter, try answering the following
    questions:'
  prefs: []
  type: TYPE_NORMAL
- en: How can we extract a custom Hook from existing code?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the advantage of creating API Hooks?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When should we extract functionality into a custom Hook?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do we use custom Hooks?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When should we create local Hooks?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which interactions between Hooks are possible?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which library can we use to test Hooks?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How can we test Hook actions?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How can we test contexts?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How can we test asynchronous code?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you are interested in more information about the concepts we learned in
    this chapter, take a look at the following reading material:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating custom Hooks: [https://reactjs.org/docs/hooks-custom.html](https://reactjs.org/docs/hooks-custom.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: React Hooks Testing Library: [https://react-hooks-testing-library.com/](https://react-hooks-testing-library.com/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: React Testing Librar*y* (for testing components): [https://testing-library.com/react](https://testing-library.com/react)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: React Hooks API Reference: [https://reactjs.org/docs/hooks-reference.html](https://reactjs.org/docs/hooks-reference.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When to use `useCallback`: [https://kentcdodds.com/blog/usememo-and-usecallback](https://kentcdodds.com/blog/usememo-and-usecallback)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
