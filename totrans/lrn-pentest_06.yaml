- en: Mastering Social Engineering
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Penetration testing does not always involve using a computer and firing exploits.
    In this chapter, we will learn how to master the art of social engineering, a
    skill that every penetration tester should have. Social engineering can be complex,
    as you try to use psychological manipulation to break the minds of your targets.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you will benefit from knowing what social engineering is, the
    different types of social engineering, and what tools can be used to perform social
    engineering. You will gain skills by learning how to build a social engineering
    attack using tools within Kali Linux. By continuing to explore and solidifying
    your social engineering skills, you can build a social attack, which, if executed
    on the right targets, can lead to you achieving your goal by using minimal software
    exploits.
  prefs: []
  type: TYPE_NORMAL
- en: 'As you progress through this chapter, you will learn about the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: What is social engineering?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Social engineering tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a social engineering campaign
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following technical requirements are needed for this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Kali Linux 2019.1
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is social engineering?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Social engineering can be defined as a form of psychological manipulation that
    persuades a person into giving up confidential information. It is a form of a
    cyberattack that uses trickery and deception instead of using any type of software
    exploit. Of course, software is involved in building a social engineering attack,
    but the main component is how well you deceive the target into believing what
    you are doing is legitimate.
  prefs: []
  type: TYPE_NORMAL
- en: Software and humans are really not that different from each other. You may be
    wondering how humans and software can be so similar. Well, when it comes to vulnerabilities
    in both software and humans, these can be exploited and taken advantage of by
    attackers to get what they want. In relation to software, it's related to buggy
    code that is generally exploited, which leads to flaws in software that an attacker
    can compromise.
  prefs: []
  type: TYPE_NORMAL
- en: 'With humans, it is our nature that makes it easy for people to target others
    using psychological manipulation. Humans have a variety of emotions that separate
    us from other living creatures. However, some of those emotions are prime targets
    for social engineering attacks. For example, we have the following emotional traits:'
  prefs: []
  type: TYPE_NORMAL
- en: Helping others
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Trusting others
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fear
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Obedience to authority
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Social engineering attacks take advantage of the vulnerabilities of our emotions,
    and persuade us into performing an activity such as clicking a fraudulent link,
    visiting a malicious website, or opening a malicious document.
  prefs: []
  type: TYPE_NORMAL
- en: Most organizations invest a lot of effort into training employees about social
    engineering, but sadly, some do not. Irrespective of security controls that are
    put in place, end users will ultimately have access to sensitive information that
    can cause harm to an organization if it fell into the wrong hands. Curiosity will
    cause a person to pick up that USB lying on the floor and plug it in to see what
    is on it. Dropping infected USB sticks around a target organization is a common
    penetration testing technique, and it is also used by attackers.
  prefs: []
  type: TYPE_NORMAL
- en: Social engineering comes in many forms, so let's explore some of them.
  prefs: []
  type: TYPE_NORMAL
- en: Pretexting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Pretexting can be defined as the practice of presenting yourself as someone
    else, with the intention of obtaining information. Pretexters can impersonate
    co-workers, IT staff, bankers, friends and family, or anyone that can be perceived
    as trustworthy or having authority over the target.
  prefs: []
  type: TYPE_NORMAL
- en: Pretexting forms the foundation for any social engineering attack. When you're
    performing a penetration test, make sure that you spend enough time building a
    solid and believable pretext.
  prefs: []
  type: TYPE_NORMAL
- en: For example, we have all received emails claiming that we have inherited a small
    fortune, but in order to claim it, we need to either provide some kind of information
    or click on a link. The chances of a person falling for this is very slim, as
    the pretext is very poor. Let's assume that you always purchase online from Amazon,
    and now you receive an email from Amazon stating that there is a package that
    cannot be delivered due to missing information. This becomes more believable as
    the pretext is more solid.
  prefs: []
  type: TYPE_NORMAL
- en: During a penetration test, you need may need to simulate a social engineering
    attack. Conducting proper information gathering on your target is critical to
    building a believable pretext. Some of the things that you would consider are
    company size, locations, number of employees, emails, employee information, and
    so on. You would also look at what is available from a technological standpoint,
    such as public-facing web servers, VPNs, and email servers.
  prefs: []
  type: TYPE_NORMAL
- en: Once you have obtained enough information, you can start defining success criteria
    for each pretext. For example, if the target organization does not have offices
    spread across the country, the chance of success of posing as an employee is low,
    as the employees are probably well-known. However, if the organization has a large
    presence that spans across multiple countries, you have a higher success rate
    of posing as an employee from a department in another location.
  prefs: []
  type: TYPE_NORMAL
- en: Phishing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Phishing is a cyberattack whereby an attacker uses a disguised email to obtain
    sensitive information from a target. Information that's obtained can be anything
    from credit card details, user login information, network credentials, and more.
    This type of attack is done against both individuals and large organizations.
    You have probably noticed a lot of phishing emails in your personal email, since
    these attacks are performed at a very large scale. In this type of attack, the
    attackers are not interested in anyone specifically. They are simply casting a
    wide net, so to speak, in order to persuade any unsuspecting person into providing
    valuable information.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some of the common features of a phishing email are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Attachments**: You often notice attachments in emails that claim to contain
    an invoice or document. These usually contain a macro, which contains a payload
    that can drop a remote shell, allowing an attacker to access your computer, or
    even drop malware such as ransomware. Lately, some of these emails have been containing
    `.html` files, which are often in `.doc` or `.js` format. These have a low detection
    rate by antivirus software as they are not generally associated with email attacks.
    Of course, as antiviruses mature, so does the attacker''s tactics.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Hyperlinks**: Some phishing emails may contain a link redirecting you to
    a website that may look legit. Common types of phishing emails are those that
    request you to reset your password, or confirm your details to avoid your account
    being disabled, and so on. Usually, when you hover over the link, you will see
    the actual URL, which is not legitimate, but as the attackers mature in their
    tactics, they start using URLs that seem very similar to the legitimate one. For
    example, [https://www.facebook.com/](https://www.facebook.com/) could be depicted
    as [www.faccebook.com](https://www.facebook.com/) or [www.faceboook.com](https://www.facebook.com/),
    which can be easily missed if you don''t look carefully.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Too good to be true**: Many phishing emails have statements that are designed
    to attract people''s attention. These are usually related to lucrative offers,
    such as winning a device, the lottery, or inheriting a small fortune from a distant
    relative. One thing to keep in mind is that if it seems too good to be true, it
    probably is.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Phishing kits are easily available on the dark net. The availability of these
    kits makes it easy for attackers with minimal skills to launch a phishing campaign.
    A phishing kit bundles website resources and tools that are ready to be installed
    on a server. Once installed, all that is required is for the attacker to send
    emails to the victims, which directs them to the phishing site.
  prefs: []
  type: TYPE_NORMAL
- en: To keep abreast of current phishing links, take a look at the phishing feeds
    hosted on OpenPhish ([https://openphish.com](https://openphish.com)) and PhishTank
    ([https://www.phishtank.com](https://www.phishtank.com)).
  prefs: []
  type: TYPE_NORMAL
- en: Spear phishing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Spear phishing is a cyberattack that is targeted toward a specific individual,
    department, or company that appears to be from a trusted source. This type of
    attack is hard to spot and are well thought out, and often the targets are researched
    well in advanced before such an attack is performed. This is not like a normal
    phishing attack where the attackers cast a wide net; spear phishing is a directed
    attack.
  prefs: []
  type: TYPE_NORMAL
- en: The core component of a spear phishing attack is information gathering. Gathering
    information about email addresses, people, and their positions within the target
    organization (using OSINT tools such as LinkedIn) will help you define who your
    target will be and who you can impersonate. As we learned in [Chapter 3](96db9b59-1985-4390-aa0c-ba91c0b0e9cf.xhtml),
    *Performing Information Gathering*, open source intelligence can provide you with
    a wealth of information on your targets.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some common features of spear phishing attacks are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Business email compromise (BEC)**: This aims to abuse processes such as payroll
    or invoices. The attack would leverage an email from a reputable source (within
    the `from` field) and contain a document related to an invoice. To the average
    human, nothing appears untoward and they would open that invoice and ultimately
    expose their system to the attack.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Multi-vector threats**: This attack uses multiple attack vectors. For example,
    the spear phishing email will contain dynamic URLs, drive-by downloads, and a
    payload encoded within a document to avoid detection.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Virtually undetectable**: Since a well-crafted spear phishing email does
    not have characteristics that are found within the large amounts of normal phishing
    emails that are found on the internet, it makes it harder to detect by traditional
    reputation and spam filters.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Whaling**: In this type of attack, a spear phishing campaign is directed
    at a high-profile target, often someone in the c-suite of an organization. High-profile
    people often have more privileged information than the average person, and this
    makes them a prime target. Any information that''s stolen in a whaling attack
    is more lucrative on the black market, over and above the possibility of privileged
    credentials that an attacker can use.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tailgating
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Tailgating** (also known as piggybacking) is a form of physical social engineering.
    Tailgating can be defined as a physical security breach where an unauthorized
    person follows an authorized person into a secure area.'
  prefs: []
  type: TYPE_NORMAL
- en: A common type of tailgating would be someone waiting around a common area with
    their hands full for an authorized person to open an access-controlled door. During
    this time, the unauthorized person could ask them to hold the door open while
    they rush through. Some other forms might include striking up conversations with
    employees at a common smoking area. By the time the employee has completed smoking,
    he or she will likely hold the door open for you, masquerading as an employee.
    Humans have common courtesy, which can lead to vulnerabilities, such as holding
    doors open for unauthorized people.
  prefs: []
  type: TYPE_NORMAL
- en: Some organizations have good physical security in place, so this might not work
    everywhere. However, performing sufficient information gathering on the target's
    physical security will help you plan your attack.
  prefs: []
  type: TYPE_NORMAL
- en: As you perform penetration testing, you can leverage any of the preceding techniques
    within your penetration test. Having a good background understanding of what each
    technique entails will help you plan your penetration test more effectively.
  prefs: []
  type: TYPE_NORMAL
- en: Social engineering tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are a number of social engineering toolkits available on the internet.
    Some are used to perform social engineering tasks as a form of awareness, while
    others are sold on the dark net for malicious purposes. We will not focus on social
    engineering tools on the dark net, as this is out of the scope of this book, but
    we will look at the tools that are available within Kali Linux and others that
    you can install.
  prefs: []
  type: TYPE_NORMAL
- en: The social engineering toolkit (SET)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The **social engineering toolkit** (**SET**) is a suite of tools that allows
    you to focus on the human element while conducting penetration testing. The main
    purpose of the social engineering toolkit is to create social engineering attacks
    that you can use. The tool is a Python-driven tool that's currently supported
    on Linux. At the time of writing, it's under the experimental phase for macOS.
  prefs: []
  type: TYPE_NORMAL
- en: 'The social engineering toolkit allows you to create a number of social engineering
    attacks. Attacks that are currently included at the time of writing are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Spear-phishing attacks**: Allows you to create email phishing campaigns.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Website attacks**: Allows you to create attacks such as website cloning and
    more.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Infectious media generator**: Enables the creation of an autorun, which can
    be used on a USB device.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Create a payload and listener**: Creates a reverse shell payload, allowing
    access to the target machine.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Mass mailer attack**: Creates a phishing email that can be sent to a large
    audience.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Arduino-based attacks**: Allows you to create attacks by leveraging Arduino
    devices such as the Teensy. When inserted into a PC, it''s detected as a keyboard,
    allowing exploits to be delivered to the target machine.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Wireless access point attacks**: Enables a malicious wireless access point
    to be created and allows you to intercept traffic as it passes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**QRCode generator attacks**: Generates a QRCode to any URL you specify. This
    is good for redirecting your targets to a malicious URL.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Powershell attacks**: Creates Powershell-based attacks, which can be used
    to perform a blind shell or dump a SAM database.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**SMS spoofing attacks**: Creates an SMS, which can be used to social engineer
    your target.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'At the time of writing, the current version of the social engineering toolkit
    was `8.0`. The pre-installed version in Kali Linux 2019.1 is `7.7.9`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a4996a3f-3ff6-4d0e-a542-cd3c12526317.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1: Pre-installed version in Kali 2019.1'
  prefs: []
  type: TYPE_NORMAL
- en: In order to update to the latest version, you will need to download the latest
    version from the TrustedSec GitHub repository, which is located at [https://github.com/trustedsec/social-engineer-toolkit](https://github.com/trustedsec/social-engineer-toolkit).
  prefs: []
  type: TYPE_NORMAL
- en: Once the download is completed, you can extract the contents of the folder within
    the `.zip` file to `/usr/share/set` to overwrite the necessary files. Once this
    is completed, you will be able to launch the latest version by running the `setoolkit` command
    from a Terminal window within Kali Linux.
  prefs: []
  type: TYPE_NORMAL
- en: The social engineering toolkit has a ton of features that can be used in your
    penetration tests. Exploring the various techniques that it offers will help you
    craft a phishing campaign that is effective. The social engineering toolkit is
    pre-installed in Kali Linux 2019.1\. You can access it using the `setoolkit` command
    from a Terminal window.
  prefs: []
  type: TYPE_NORMAL
- en: Gophish
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Gophish is an open source framework that can be used to conduct phishing campaigns.
    It is designed for businesses and penetration testers. Gophish is cross-platform,
    and so you can run this tool on Windows, macOS, and Linux-based operating systems.
    Gophish has a graphical interface, making it easy and simple to build a phishing
    campaign. You have the ability to build a campaign and schedule its launch to
    a time that you prefer.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some of the main features of Gophish are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The ability to use templates and create your own
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Clone websites and define landing pages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Capture credentials
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Schedule campaigns
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Build reports about the phishing campaign
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Gophish is not pre-installed with Kali Linux and is available for download here: [https://github.com/gophish/gophish/releases](https://github.com/gophish/gophish/releases).
  prefs: []
  type: TYPE_NORMAL
- en: Modlishka
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Modlishka takes phishing campaigns to the next level. It is a flexible and powerful
    reverse proxy that provides a high level of automation for phishing attacks.
  prefs: []
  type: TYPE_NORMAL
- en: 'The aim of Modlishka is to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Focus more on penetration testers who are carrying out an effective phishing
    campaign to show that phishing is a serious threat
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Look at current **two-factor authentication** (**2FA**) weaknesses and highlight
    these so that solutions can be put in place
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Raise awareness about phishing techniques
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is unique about Modlishka is that there is no need for templates. In other
    social engineering tools, you would need to use a template, or even build your
    own. Modlishka works on a reverse proxy so that the target website is opened live.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some of the main features of Modlishka are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Support for most 2FA schemes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: No need to create a website template—all you need to do is point Modlishka to
    the target domain
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The TLS **cross** origin flow is fully controlled from the target's browser
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Phishing scenarios are easily configurable and flexible
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ability to use pattern-based JavaScript payload injection
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ability to strip the encryption and security headers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Credential harvesting
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Support of plugins
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The installation of Modlishka requires the **Go** language. The Go language is
    an open source programming language that is developed by Google. It uses syntaxes
    similar to scripting languages, thus making it easy to build simple, reliable,
    and efficient software.
  prefs: []
  type: TYPE_NORMAL
- en: We will cover the installation of Modlishka later in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Wifiphisher
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Phishing does not only involve specially crafted emails and attachments. WiFi
    access points can be used to launch a phishing campaign against targets. There
    are multitudes of wireless networks available, with many of them being open to
    provide free access to the internet. Wifiphisher is a tool that allows you to
    mount automated phishing attacks against wireless networks in order to steal credentials
    or drop a payload such as malware. Wifiphisher is capable of using modern attack
    techniques such as KARMA, Known Beacons, and Evil Twin:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Known Beacons**: This technique allows Wifiphisher to broadcast ESSIDs that
    are known'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**KARMA**: This is a technique where Wifiphisher masquerades as a public network'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Evil Twin**: This technique creates rogue access points'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Some of the main features of Wifiphisher are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The ability to run on devices such as a Raspberry Pi.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It's extremely flexible in that it supports a multitude of arguments and uses
    community-driven phishing templates, which can be used for various scenarios.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It allows you to write simple or complicated modules that are based on Python.
    Wifiphisher allows you to write your own custom phishing scenarios that you can
    leverage in targeted penetration tests.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It's simple to use, since it allows you to run the `./bin/wifiphisher` command.
    This will bring up an interactive text interface to help you build an attack.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A list of available phishing scenarios are shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7511dfd5-5ec8-464d-8b4a-b15b6c20bb5f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2: List of available phishing scenarios in Wifiphisher'
  prefs: []
  type: TYPE_NORMAL
- en: At the time of writing, Wifiphisher is currently supported on Linux, with Kali
    Linux as its officially supported distribution. In order to use Wifiphisher, you
    must have a wireless network card that is capable of packet injection and supports
    monitoring mode. We will explore this in depth in [Chapter 9](297a1e63-5c9b-4871-a46b-e4f2b25da48c.xhtml),
    *Getting Started with Wireless Attacks**. ***Wifiphisher is not installed by default
    in Kali Linux 2019.1.
  prefs: []
  type: TYPE_NORMAL
- en: 'Wifiphisher can be installed using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Creating a social engineering campaign
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's take a look at creating a social engineering campaign for a penetration
    test. In this campaign, we will target Office 365 users using Modlishka.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Modlishka
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to use Modlishka, we need to install the Go Language within Kali Linux.
    Perform the following steps to install it:'
  prefs: []
  type: TYPE_NORMAL
- en: 'From a Terminal window within Kali Linux, issue the `apt-get install golang` command.
    This will install the Go language. We need to define a `GOPATH` using the `export
    GOPATH=$HOME/Downloads/GO` command. To confirm the path that we have set, we can
    use the `echo $GOPATH` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c69f3a6e-5fee-4835-a7fc-85e1e03c5697.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3: Installing Go and defining the GOPATH'
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we need to download Modlishka into the `GO` folder. We do this by running
    the `go get -u github.com/drk1wi/Modlishka` command. This will now start to download
    Modlishka into the `GO`folder that we defined in *Step 1*. If you have used the
    preceding commands, your Modlishka installation will reside in `/root/Downloads/go/src/github.com/drk1wi/Modlishka`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/59a20938-d59e-4ef3-8dff-eab96406a384.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4: Downloading Modlishka'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we need to create a SSL certificate. Alternatively, you can use one that
    you may already have that''s tied to your phishing domain. Before we can create
    a certificate, we need to generate an RSA private key. This can be done using
    the `openssl genrsa -out ModlishkaCA.key 2048`command. Here, we are generating
    a `2048` bit key:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/68bdb90d-1d6f-4ed1-9b6c-7bce519d5563.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5: Generating the RSA private key'
  prefs: []
  type: TYPE_NORMAL
- en: Next, we generate the certificate using the key we created in *Step 3*. To create
    the certificate, we use the `openssl req -x509 -new -nodes -key ModlishkaCA.key
    -sha256 -days 1024 -out ModlishkaCA.pem`command. Once you have entered the command,
    you will be prompted to provide details about the certificate.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In these fields, you will fill in details similar to what you did in the target
    domain that you want to perform the phishing attack on. Remember to import this
    certificate into the server that you will use for the phishing campaign. In the
    case of this demo, I have imported into Firefox ESR on Kali Linux:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0d434a38-4fe5-445b-aa1b-8d4e42323f5f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6: Generating the SSL certificate'
  prefs: []
  type: TYPE_NORMAL
- en: Now, you need to import the key and certificate into the Modlishka certificate
    configuration file. You can open the `ModlishkaCA.pem`and `ModlishkaCA.key` files
    using any text editor. The certification configuration file is located in the
    `GO` folder. If you used the preceding commands, then it will be located in `/root/Downloads/go/src/github.com/drk1wi/Modlishka/plugin/autocert.go`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You will need to replace the values of the `CA CERT =` and the `CA CERT KEY
    =` fields with `ModlishkaCA.pem`and `ModlishkaCA.key`, respectively. Make sure
    that you paste data from each file within the inverted commas:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f4bd6d2f-6017-4443-8169-0305697828f4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7: Pasting in the cert and key file data'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have imported the certificates, you need to compile the tool using
    the `make` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0d551a4a-b035-4413-9ab5-c24500b1c8fd.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8: Output of running make command in Modlishka'
  prefs: []
  type: TYPE_NORMAL
- en: Now, the tool is ready to be used. We will use a template that is already installed
    by default within the `/templates` folder. For the sake of this demo, the phishing
    URL will remain local on Kali Linux.
  prefs: []
  type: TYPE_NORMAL
- en: 'In a real penetration test, you can modify the template file or create your
    own. You will need to modify fields such as `phishingDomain`, `listening port`,
    `listeningAddress`, `target`, and so forth. In this demo, we will use the `office365.json`
    template, without any changes:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b8387751-bcff-4ada-aa34-4ef131240a3a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9: Office365.json template configuration'
  prefs: []
  type: TYPE_NORMAL
- en: This concludes the setup of Modlishka. Now, we will move on to executing a phishing
    attack using Modlishka.
  prefs: []
  type: TYPE_NORMAL
- en: Executing the attack
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following steps demonstrate how to perform a phishing attack using Modlishka:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that Modlishka is set up, let''s start the program using the Office 365
    template. Modlishka can be started using the `./dist/proxy -config templates/office365.json`command.
    Note that once the tool is started, it will provide you with the proxy address.
    If you have followed the steps in the previous section, we did not define any
    address and used the built-in `https://loopback.modlishka.io`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c685455c-2366-483d-9d62-38c3d9637f47.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10: The Modlishka reverse proxy has started'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we can perform a login as if we were the user. I''ve used a demo Office
    365 tenant that I current own. In the following screenshot, you will notice the
    page that''s presented is for the Office 365 login page, but take note of the
    URL. For the sake of illustration, I have left it as the default `loopback.modlishka.io`,
    but when you perform a phishing attack in a penetration test, you will need to
    have a domain name that will be almost identical to your target:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2a2aea0a-504f-4332-a9de-f38add8120ec.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11: Office 365 login page proxied through Modlishka'
  prefs: []
  type: TYPE_NORMAL
- en: 'The login process works as if the user is logging into Office 365, because
    the user is actually logging into Office 365\. Modlishka is acting as a proxy
    for the traffic so that we can intercept any credentials. After the password is
    entered, the user is presented with a 2FA prompt to approve the login. Note the `rewriteResponses` in
    the background window:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a1ab5c8b-cc0d-405e-8fe8-ed8d678c2fc4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12: 2FA being proxied through Modlishka'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the user approves the sign-in request, access is granted to Office 365
    and the user can continue to work as normal. Let''s take a look at what Modlishka
    was able to detect in the log file. In the JSON configuration file, we defined
    the name of the log file using the string `"log ": "ms.log"`. This will be located
    in the root of the Modlishka folder. By using a basic concatenate command to look
    for fields such as `"login="` and `"passwd="`, we are able to see the user''s
    credentials in plain text:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/de66f82f-5394-4b71-9a5f-b63f1833d489.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13: Credentials in plain text'
  prefs: []
  type: TYPE_NORMAL
- en: The `%40` shown in the username is the HTML character set code, which is translated
    into the `"@"` symbol.
  prefs: []
  type: TYPE_NORMAL
- en: Using SET to create a phishing campaign
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s perform a simple phishing attack using the **social engineering toolkit**
    (**SET**):'
  prefs: []
  type: TYPE_NORMAL
- en: From a Terminal window, type in the `setoolkit` command to launch the social
    engineering toolkit.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once the toolkit has loaded, we will need to select option 5, `Mass Mailer
    Attack`*, *and then option 1, `EMail Attack Single EMail Address`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/7aabb261-c424-4c04-94d0-df40eb06eb8b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 14: Selecting the Mass Mailer Attack'
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we will define the parameters of the email. Here, you can specify the
    source address and the names of the sender and recipient, along with attaching
    a malicious file, among other things. We will not attach a file, instead using
    a malicious phishing link. The link was typed for illustration purposes, but the
    link is non-existent. Once you have filled in all the fields, the email will be
    sent:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/aa5ec343-3391-42b2-8391-ae00eae884f3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 15: Defining the parameters for the phishing email'
  prefs: []
  type: TYPE_NORMAL
- en: There are a number of open relay mail servers on the internet. You can use services
    such as `Mailgun` and `SendGrid` to test in your own environment.
  prefs: []
  type: TYPE_NORMAL
- en: 'Notice that the email was received in the target''s mailbox with the parameters
    we defined:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f13127e8-f82e-407b-9ce1-e3008b87a3f3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 16: The malicious email received in target''s mailbox'
  prefs: []
  type: TYPE_NORMAL
- en: The social engineering toolkit has a lot to offer, and having a good understanding
    of the various options and how to use them will be beneficial as you plan your
    phishing campaigns in your penetration tests. Please explore the various options
    in your own lab environment.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Social engineering really boils down to exploiting the nature of humans to trust
    people. It uses techniques that rely on human weaknesses rather than software
    or hardware weaknesses. There are a number of social engineering tools available
    on the internet that you can leverage to launch a social engineering attack as
    part of your penetration test.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you have learned what social engineering is and the various
    types of social engineering. We highlighted the main features of each technique
    and looked at where you can find an up-to-date repository of the current phishing
    links that exist. We looked at common tools that can be used to create a social
    engineering campaign, and we worked on creating a campaign targeting Office 365.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter ([Chapter 5](8c5306b6-5c1e-4554-a839-5b2422286120.xhtml),
    *Diving into the Metasploit Framework*), we will begin working with Metasploit.
    We will look at what Metasploit is, what you can accomplish using it, and how
    to use various exploits from Metasploit.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What is social engineering?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What does social engineering rely on to make a successful attack?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is an important foundational step to building a social engineering attack?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name two types of social engineering attacks.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which tool is unique to Modlishka?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
