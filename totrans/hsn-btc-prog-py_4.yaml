- en: Bitcoin Data Analysis
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will explore the manipulation and visualization of bitcoin
    price data using Python. We will also explore bitcoin transaction graphs, along
    with collecting and analyzing *Bitcoin Dice* game data using Python.
  prefs: []
  type: TYPE_NORMAL
- en: Manipulating and visualizing bitcoin price data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we will introduce the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Getting set up for data analysis
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting, reading in, and cleaning bitcoin price data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploring, manipulating, and visualizing the cleaned-up data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We first need to install several Python libraries, which includes installing
    the `pandas` module for reading in data, and also doing some exploratory analysis.
    We'll also be installing `matplotlib` for creating plots and charts, as well as
    Jupyter Notebooks, as they are the best for this kind of work involving data analysis.
  prefs: []
  type: TYPE_NORMAL
- en: Getting set up for data analysis
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To install the Python modules, open the command-line program. In the command
    line, to install `pandas`, execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Similarly, to install `matplotlib`, execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'To install Jupyter, execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Having finished installing the required modules, launch the Jupyter Notebook
    by executing the `jupyter notebook `command. This will open up a new browser window,
    or a tab, where it will display the list of files that are already there from
    the folder where we executed the `jupyter notebook `command. The following screenshot
    shows the `jupyter notebook` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/af8667a9-bfa8-4170-8ca7-d60ed89c1186.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, choose to create a new Python 3 notebook, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/b6e8b34b-841f-4a3b-a49f-292b11303034.png)'
  prefs: []
  type: TYPE_IMG
- en: Getting, reading in, and cleaning bitcoin price data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will start by importing the necessary modules.
  prefs: []
  type: TYPE_NORMAL
- en: 'Import `pandas` to enable you to read in the data and start exploring it. The
    following screenshot shows the `import pandas` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/e45e50b1-57f5-496c-ad52-ccce329b2305.png)'
  prefs: []
  type: TYPE_IMG
- en: Also, import `matplotlib` for drawing plots from the data.
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to set some options for `pandas` and `matplotlib`. The following screenshot shows
    the command for importing `matplotlib`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/6f0cf7fa-f6ab-441a-879f-fcf6f2e8d83b.png)'
  prefs: []
  type: TYPE_IMG
- en: The first option we will set is called `options.mode.chained_assignment = None`.
  prefs: []
  type: TYPE_NORMAL
- en: The preceding option is to make sure that the operations are for the cleanup,
    which will be performed on the pandas DataFrame objects; we want the cleanup to
    happen on the original DataFrame objects and not on copies.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the `options.mode.chained_assignment = None `option:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/ecd35dc5-359e-407b-a34e-3d2007163a89.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Also, set `matplotlib` to visualize and display all the charts shown in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/d45508cb-0de5-409f-b4e5-bd849c25ff63.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The price data we have is from `coindesk.com`, as shown in the following screenshot,
    and it is freely available for download:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/0f77ee94-acf1-4414-a787-2e78cb3a83a0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Download the data in CSV format and read this data using `pandas`. This is
    a CSV file, so we will use the `read_CSV` method from `pandas`, as shown in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/8d52200b-c994-4867-9998-2b3e354c1aaa.png)'
  prefs: []
  type: TYPE_IMG
- en: DataFrame
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The data in a pandas data object is called a DataFrame. A DataFrame is in a
    tabular data format. Now, print out some records to see how this looks. To print
    this out, we can call a method called `head()` on the price DataFrame.
  prefs: []
  type: TYPE_NORMAL
- en: 'When we do this, we get two columns—`Date` and `Close Price`—for the bitcoin
    in USD for that day. We also have a default index for the rows starting from 0,
    which was inserted by pandas by default while reading in the data. The following
    screenshot shows the two columns, `Date` and `Close Price`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/4f18a045-01be-4820-8c1f-46cf4ce542ac.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To get top-level information about this data, call the `info()` method on it.
    After calling this method, we get 2,592 records. There are two columns: `Date`
    and `Close Price`. `Date` has 2,592 non-null records of the `type` object, which
    means that the `Date` field has been read as text. We would have to change it
    to a proper date-time format later. We have the close price as a numeric float
    type. It has 2,590 non-null records, which are two records fewer than the `Date`
    field.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the details of the `info()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/fb1959b0-af8a-4090-a229-9f12a130dbb1.png)'
  prefs: []
  type: TYPE_IMG
- en: In order to print for the records from bottom, call the `tail()` method. This
    method shows that the last two records should not exist, as they are not a date
    or price. We need to remove these before proceeding with further analysis.
  prefs: []
  type: TYPE_NORMAL
- en: We can see that the close price has NaN values, which means that it has missing
    values. We can use this factor to remove these two records from the DataFrame.
    We call drop any method on the price, which will remove the records that have
    one or more of the columns as null or missing values.
  prefs: []
  type: TYPE_NORMAL
- en: Bear in mind that we are just removing it from the DataFrame price and not from
    the CSV file from which we read the data.
  prefs: []
  type: TYPE_NORMAL
- en: 'The code in the following screenshot shows the `tail()` method implementation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/46f61d4e-87b7-426f-ab76-c2b1527be085.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Also, look at the bottom rows again to see if the records we wanted to remove
    have been removed. We can see in the following screenshot that they have, in fact, been
    removed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/1440387a-1b4d-4fd7-a077-f94c20de33dd.png)'
  prefs: []
  type: TYPE_IMG
- en: Data cleanup
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Another data cleaning task we need to do is convert the `Date` column from an
    object or text format to a date-time format. We use the pandas `to_datetime` method
    to do this.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, we ask the `to_datetime` method to convert the `Date` field or `price`
    DataFrame, and we also supply the format. We then assign the `Date` field back
    to the DataFrame, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/066e8991-2488-46a0-bfb6-b3716579c3fa.png)'
  prefs: []
  type: TYPE_IMG
- en: This is the reason that we set the chained assignment as equal to `null` earlier, because
    we wanted to make the changes back on the original DataFrame.
  prefs: []
  type: TYPE_NORMAL
- en: 'Call the `info()` method again to see whether the data cleanup has an impact.
    We can see that the `Date` field is now in a date-time format, as we wanted, and
    there are no non-null records in the data, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/81f0b204-02f4-492c-9c47-6bf9c10a31e7.png)'
  prefs: []
  type: TYPE_IMG
- en: Setting the index to the Date column
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We also need to set the index to the `Date` column and remove the `Date` column
    as a separate column. This will help us to run some interesting queries on the
    date data.
  prefs: []
  type: TYPE_NORMAL
- en: 'The code in the following screenshot shows how to set the index to the `Date`
    column:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/ed0c269e-745e-4e16-b9ba-e6a77a3390c6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, delete the `Date` column as a separate column, since it is already set
    up as an index, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/5072bbcf-ab02-41b3-8784-8e1b2b5fc755.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, the `Date` column can be seen as an index and not a separate column anymore,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/be7067b2-492d-424d-9257-18d891b7e95e.png)'
  prefs: []
  type: TYPE_IMG
- en: Exploring, manipulating, and visualizing the cleaned-up data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As the data cleanup is done, start with the data exploration tasks. We can use
    the pandas date-time capabilities to run some interesting queries.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, if we want to get all the records from a particular year, pass
    that year to the DataFrame inside square brackets. The following screenshot shows
    the price data from the year 2010:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/33787d3c-0a7e-48e0-87d8-ec34a2356d11.png)'
  prefs: []
  type: TYPE_IMG
- en: We can also specify whether we want the data from a particular date.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the bitcoin price in USD from August 1, 2017:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/36bfa72b-8716-43a8-964f-d5c6de623a4b.png)'
  prefs: []
  type: TYPE_IMG
- en: We can also specify whether we want the data from a particular period spanning
    certain dates.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the data from August 1, 2017, onward:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/70c5c9f1-469a-4487-b489-a104ac298528.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Statistical information can also be retrieved using pandas methods. For example,
    to get the minimum price from this dataset, we can use the `min()` method, as
    shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/20c26302-2140-4d74-9b39-841a5e472856.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To get the maximum price, use the `max ()` method, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/cdc524fa-fc2f-44cd-96ca-58fda1a7d559.png)'
  prefs: []
  type: TYPE_IMG
- en: 'A whole bunch of statistical information can be received in one go using the
    `describe ()` method, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/5a11b1ce-e18e-42e4-afd7-46dca4687e63.png)'
  prefs: []
  type: TYPE_IMG
- en: Data visualization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is very easy to start creating plots from data using `pandas` and `matplotlib`.
    To plot the entirety of the data, we will call the `plot` method on the `price`
    `DataFrame`, and we will get a plot where the *x *axis is the date and the *y *axis
    is the price data.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot describes the plot, wherein the *x *axis is the date
    and the *y *axis is the price data:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/729227c0-4ca6-4570-9c46-f9a39bf65db9.png)'
  prefs: []
  type: TYPE_IMG
- en: We can also zoom in on a certain time period. For example, in order to plot
    the data from 2017 only, first select the data that is from 2017 and then call
    the `plot ()` method on the subset of data.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following screenshot, we have a plot for the price data from 2017 onward:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/8cb9d715-b57f-4087-8c20-b9c51b08b205.png)'
  prefs: []
  type: TYPE_IMG
- en: In the next section, we will look at how to use bitcoin transaction graphs.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring bitcoin transaction graphs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will learn about how to get the blockchain data, and provide
    step-by-step information as to how to explore, clean up, analyze, and visualize
    this data.
  prefs: []
  type: TYPE_NORMAL
- en: Bitcoin and blockchain graphs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`Blockchain.info` is one of the best places to look at the latest bitcoin stats
    and graphs. There are different kinds of charts and graphs concerning bitcoin
    and blockchain that are available for analysis. We can also download the data
    in a variety of formats—CSV, JSON, and so on. We have downloaded some of this
    data in CSV format in the previous section, and now we will explore this data
    in a Jupyter Notebook.'
  prefs: []
  type: TYPE_NORMAL
- en: We start by importing the modules we need. We need `pandas` for data reading,
    exploration, and cleanup, and we need `matplotlib` for creating the graphs.
  prefs: []
  type: TYPE_NORMAL
- en: Look at the data showing the total number of bitcoins in circulation. Read the
    CSV file that has this data and create a `pandas` `DataFrame`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the data for the total number of bitcoins in
    circulation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/0743f10c-867e-479c-9d69-55fcc8a6d1b6.png)'
  prefs: []
  type: TYPE_IMG
- en: Exploring, cleaning up, and analyzing data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to explore this data, we use the `head()` method to look at the records
    from the top and we call the `info()` method on the DataFrame to get some more
    information, such as how many records there are, how many null or missing records
    there are, or what the data types of the various columns are.
  prefs: []
  type: TYPE_NORMAL
- en: We can see that the `Date` column is shown as object. We change this to date-time
    to visualize this data. To do this, we use the `to_datetime` method, and assign
    the converted values back to the same column—the DataFrame.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot depicts the date format of bitcoins:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/2032a12f-45cd-4a9b-9728-693e60776570.png)'
  prefs: []
  type: TYPE_IMG
- en: Set the index of the DataFrame to the `Date` column and delete the `Date` column
    as a separate column. Perform this step in order to take advantage of the time
    series features of pandas.
  prefs: []
  type: TYPE_NORMAL
- en: Now, check again whether the changes took place by calling `info` and `head`
    on the DataFrame.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the bitcoins for a particular range of dates:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/9ab5ba6f-7113-403e-82fc-b52528bd4176.png)'
  prefs: []
  type: TYPE_IMG
- en: We are now ready to create a graph from this data. Call the `plot ()` method
    on the DataFrame and then call the `show ()` method to display the graph.
  prefs: []
  type: TYPE_NORMAL
- en: It shows the total number of bitcoins that have already been mined over the
    time period for which we have this record.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot describes the graph for the preceding data:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/458d00ef-995d-458c-a2b0-0d5b0399e572.png)'
  prefs: []
  type: TYPE_IMG
- en: Visualizing data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s look at another example. Here, we are looking at transactions for block
    data that we read into the data:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/b1ab2dbc-0c89-4cf8-bc5b-72b6d4157d26.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Initially, we visually explore this data using the `head` and `info` methods,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/47dc98ac-758b-497b-a6f1-e7152bb9324f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, we clean up, convert, and reshape the data, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/22d53244-042e-4a08-aea3-d5dfe393b026.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Finally, we visualize our transactions in the block data, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/9e50e1ad-4a79-46aa-9442-ea6a4d5c2f89.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Similarly, there is another example that we should look at regarding the data
    showing mining difficulty. The steps for mining data are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Read in the data, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/d1aa04c7-3ce1-4efc-9420-5a3626c1d1a3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Explore the data, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/bf210410-6926-4245-b20b-74aaee8fabba.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Clean up the data, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/b8a60285-a8af-44be-aa1d-f985330c813c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Finally, visualize the data, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/039aa5f6-de27-4770-be78-7010a56cb92e.png)'
  prefs: []
  type: TYPE_IMG
- en: We can see that there has been a gradual increase in mining difficulty over
    the years, and it trends upwards. These are just a few examples of transaction
    graphs. There is a lot of other data available for you to explore from the bitcoin
    and blockchain ecosystem.
  prefs: []
  type: TYPE_NORMAL
- en: In the next module, we will look at how to collect and analyze *Bitcoin Dice*
    game data.
  prefs: []
  type: TYPE_NORMAL
- en: Collecting and analyzing Bitcoin Dice game data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will look at the data from a dice games portal, read in
    the data from the API, and use `pandas` to convert it into a tabular format. We
    will also export the data and find the things that need cleaning up. We'll clean
    up, manipulate, and reshape the data, making it ready for analysis, and finally,
    we will draw a simple plot from the clean data.
  prefs: []
  type: TYPE_NORMAL
- en: Getting data from the Games Web API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The user can explore the dice games data from MegaDice.com, which is available
    from the website's API link at [https://www.megadice.com](https://www.megadice.com).
  prefs: []
  type: TYPE_NORMAL
- en: We will use the `pandas read_JSON` method to read individual winner history
    data from the MegaDice API link. We create a `pandas DataFrame`, called `leaders`,
    from this data and call in the `head ()` method to see what this data looks like.
  prefs: []
  type: TYPE_NORMAL
- en: 'The code in the following screenshots shows the creation of the `pandas` `DataFrame`, `leaders`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/a44027e0-92ea-473d-99a7-55f28add40e0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The data we have imported has 703 columns, most of which are individual dates.
    We will delete the last column, queryTimeInSeconds, which is not really part of
    the actual data, and should not be there. This column is shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/1f7c7c51-8f17-4f38-8e88-486352256436.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As there are too many columns and very few rows, we want the columns to be
    rows, where each state has a single row of records. In order to perform this,
    we need to flip the columns to rows and vice versa. To do this, we need to go
    through the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we reset the index so that we bring in the current index as another
    column. The values for this column will become column names when we flip the `DataFrame`.
    Confirm it with the `head ()` method, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/5f7a32fa-1062-4c86-beda-ce274aaefca3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, flip the DataFrame by using a method called `T`, or transposed, which
    can be seen in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/40467528-0eb5-4c1d-978b-4543ee21c193.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, in the following screenshot, we can see that our row index has become
    dates and our earlier rows have become columns:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/b08bb4d2-59a0-4a88-90e2-70905c491af6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We''ve got the columns and rows we want, but there are also a few other things
    that need to be done. We want the date values to be in a date-time format, but
    currently it is in text format. However, the transposing of the DataFrame has
    changed the date values into an index. We need to first convert them into a column
    using the `reset_index` method, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/0f50d3e6-b409-49b4-9114-b59b40d22472.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now we can convert this text data into a proper date-time format, as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/7b400b4e-6627-4c48-9c04-ce7ff291565d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Call the `info ()` method to confirm this. We have the new column `Date` in
    the proper date-time format. Date values are required to be in text format in
    the column name index, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/602366da-4fe1-46d1-9bb1-6c7d5de73bb1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We will set the index back to the proper `Date` column and remove the `Date`
    column as a separate column, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/d79a9097-673c-453c-8856-dccfbb46bb15.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, we have the DataFrame properly indexed on the `Date` field:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/9e7edc0b-ecfd-40e7-843d-a7a68caf6ab3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Draw a sample plot of this data using the `plot ()` method and show it with
    the `plt.show ()` method, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/618c9870-2ba5-4919-93e4-08495b6d77fe.png)'
  prefs: []
  type: TYPE_IMG
- en: Now this data can be used as `pandas` time series functions, or multiple blocks
    that can be visualized for different subsets of dates, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned how to prepare our setup for data analysis. We saw
    how to get, read in, and clean the price data. We also learned how to explore,
    manipulate, and visualize the cleaned-up data.
  prefs: []
  type: TYPE_NORMAL
- en: We also explored some of the bitcoin and blockchain graphs that we can create.
    We learned where to get the relevant data, and we read this data in a Jupyter
    Notebook and imported the necessary modules. We cleaned up and manipulated this
    data, and finally, we created graphs out of this data and a notebook, but without
    using Python.
  prefs: []
  type: TYPE_NORMAL
- en: We also explored the data from a dice games portal. We added the data from the
    API and used pandas to convert it into a tabular format. We explored the data
    and found the things that needed cleaning up. We cleaned up and manipulated the
    data and made it ready for analysis.
  prefs: []
  type: TYPE_NORMAL
