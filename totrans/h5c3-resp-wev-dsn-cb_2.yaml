- en: Chapter 2. Responsive Typography
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, you will learn about:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating fluid, responsive typography
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Making a text shadow with canvas
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Making an inner and outer shadow with canvas
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rotating your text with canvas
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rotating your text with CSS3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Making 3D text with CSS3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding texture to your text with CSS3 text masking
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Styling alternating rows with the nth positional pseudo class
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding characters before and after pseudo elements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Making a button with a relative font size
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a shadow to your font
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Curving a corner with border radius
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter deals mostly with how to make responsive typography. You will learn
    recipes for optimizing your text for various types of device, as well as methods
    to embellish your typography. The technologies involved are simply CSS3 and HTML5's
    `canvas` element with JavaScript. With responsive typography, you can apply a
    number of exciting effects to your text.
  prefs: []
  type: TYPE_NORMAL
- en: When finished with this chapter, you should be armed with a number of techniques
    that will get you started on the road to making amazing responsive websites. These
    recipes cover the basics, but when combined together with some creativity, they
    will enable you to do some fantastic production.
  prefs: []
  type: TYPE_NORMAL
- en: Creating fluid, responsive typography
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe is a simple example of responsive typography. It will demonstrate
    the use of the new size unit `REM`. `REM` means Root EM. This simply means that
    the size of the font is relative to the root's font size, not the parent, as with
    the `EM` unit.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Without any further discussion, let's jump into this recipe. Go get some filler
    text from my favorite Ipsum generator ([http://ipsum.com](http://ipsum.com)).
    Generate at least one paragraph and copy the text into your clipboard.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now, paste the filler text into your HTML document and wrap it in a paragraph
    tag. Give the paragraph element `class= "a"`, then make a copy and assign the
    new paragraph `class="b"`, as shown in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, create a style for the base HTML `font-size` property, and then one for
    the static sized paragraph to compare the font size changes—similar to an experiment''s
    control group:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Next create two `@media` queries, one for `orientation:portrait`, and the second
    one for `orientation:landscape`. In the `orientation:portrait` media query, style
    the `"a"` class paragraph element with a `font-size` value of `3rem`. And in the
    `orientation:landscape` media query, style the `"a"` class paragraph with the
    `font-size` value of `1rem`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Now when you resize your browser window from landscape to portrait mode, you
    will see the font size of the first paragraph goes from a ratio of 1:1 to the
    base size, to 3:1 of the base size. While this seems very simple, this recipe
    can be varied and built on to create a number of impressive responsive typography
    tricks.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When your browser makes a request, the CSS3 `@media` query returns some conditional
    styles based on viewport's width. It loads or builds (rebuilds) on the fly for
    changes to the viewport's size. While not many in your audience are going to spend
    much time resizing your website in their browser, it is easy to spend too much
    time worrying about how your website shifts from one size to the next.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Making a button with a relative font size* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Making a text shadow with canvas
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: HTML5 brings a new element to web design, the `<canvas>` element. This is used
    to create graphics on a web page on the fly using JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `<canvas>` element creates a rectangular area on your page. It dimensions
    default to 300px by 150px. You can specify different settings inside the JavaScript.
    The code in this recipe grows quickly, so you can get the whole code online at
    the Packt Publishing's website.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To begin, create a simple HTML page with a <`canvas>` element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The JavaScript gets the `canvas` element from the DOM.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: It then calls the `getContext()` method. The `getContext('2d')` method is the
    built-in HTML5 object. It has a number of methods to draw text, shapes, images,
    and more.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Next, start drawing the text within the JavaScript. Here, we create a code to
    draw the horizontal and vertical shadow offsets, the blur, and the color of the
    shadow.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The text and its properties is written in the JavaScript here, but can be passed
    in as a variable from the DOM:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Back in the HTML, add the `onload="drawCanvas();"` script command to the `body`
    element. When the page loads, the JavaScript fires and draws the text and its
    shadow onto the canvas. This is illustrated in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/5442OT_02_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Without getting too deep into the gears of JavaScript, the `canvas` element
    provides a place for the designer to script some content directly to the page
    on page load. The `body` element's `onload="drawCanvas();"` command fires the
    JavaScript, which draws the content onto the canvas.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Rotate your text with canvas* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Making an inner and outer shadow with canvas
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe also uses `canvas` and JavaScript to draw the text and the effects
    in your browser. There is no direct method to make an inner-glow or inset-shadow
    effect using `canvas`, however, using the stroke method, you can simulate an inner
    shadow in your text.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe starts with some already-written code. You can download this from
    Packt Publishing's website. It is also the same code you created in the recipe,
    *Making a text shadow with canvas*. This code should be run on your local computer
    without any special web server. You can get the whole code online at the book's
    website.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To begin, create a simple HTML page with a `<canvas>` element.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The JavaScript gets the `canvas` element from the DOM.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: It then calls the `getContext()` method. The `getContext('2d')` method is the
    built-in HTML5 object. It has a number of methods to draw text, shapes, images,
    and more.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: This script uses multiple effects combined to make an inner and outer shadow.
    You add a drop shadow and two different outlines. First, add a drop shadow to
    the top-left part and make it black with a `context.shadowBlur` value of `2`.
    Building on that, after `context.fillText`, add `context.strokeStyle` and `context.strokeText`
    to the canvas context.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Instead of a raised look, the text appears to be beveled in and has an inner
    glow or shadow effect. The effect is displayed in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it…](img/5442OT_02_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As stated in the beginning of this recipe, there is no true direct method to
    make an inner shadow in canvas, but there are ways to use the `context.fillText`
    and `context.strokeStyle` methods together that will create something that sufficiently
    looks like an inner shadow.
  prefs: []
  type: TYPE_NORMAL
- en: Rotating your text with canvas
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The HTML5 canvas methods can do more than just coloring the text or adding drop
    shadows. You can also use it to move or manipulate the objects in the canvas area.
    In this recipe, we will rotate the objects in the canvas.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe builds on top of the previous recipes. If you skipped them, that's
    okay, you can go back to the previous recipe to refer to the complete code.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once you have your previous recipe''s canvas set up, the basic steps for rotation
    are easy. Add a `rotate` method to the beginning of the function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: You will probably notice that the text rotated right off of the canvas. What
    happened? The `rotate` method rotates the entire canvas and is not aware of what
    is in it.
  prefs: []
  type: TYPE_NORMAL
- en: 'The canvas has a small default size of 300px by 150px. Changing the element''s
    size attributes will not affect the canvas size, but distorts the objects drawn
    on it. To change the size of the canvas and the objects drawn, add the `canvas.width`
    and `canvas.height` properties in the JavaScript:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'In addition, because the canvas rotates entirely itself, and not the text rotating
    about an origin, the text location will need to be repositioned to desired location.
    In this case, change the object offset of the fill and the stroke:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'This is depicted in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it…](img/5442OT_02_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The JavaScript uses the `rotate` method to rotate the whole `canvas` element
    and everything drawn inside it. It requires a small amount of forethought when
    using the `rotate` method in the canvas. It is complex, but is the perfect tool
    to use in large responsive web projects.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Rotate your text with CSS3* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rotating your text with CSS3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: CSS3 provides an easy way to rotate your text. The `transform:rotate` property
    is easy to implement and provides a simple solution when the project does not
    require the complexity of the canvas.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Write a line of text in your HTML document. Brace yourself; you are about to
    rotate it with CSS3.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Wrap the text in a paragraph tag element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, add the CSS `transform` property to rotate the text. Each browser renders
    this differently, so each will need its own unique `transform` property. However,
    each will use the `transform` property''s subproperty `rotate`, followed by the
    degrees of rotation, as shown in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `transform` property applies a 2D or 3D transformation to an element. Other
    property changes available are `move`, `skew`, and `perspective`.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Rotate your text with canvas* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Making 3D text with CSS3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In previous recipes, we created a drop shadow, bevel, and an inner shadow, using
    the `canvas` element. With CSS3, we can do this to make your text really stand
    out. Using the CSS3 `text-shadow` property, we can make your text look as if it
    is jutting out of the screen towards your viewer.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you would like to skip ahead, you can get the code online at Packt Publishing's
    website. Otherwise, if you are the learning-by-doing type, let's make our 3D text.
    We create the 3D effect by using a combination of CSS3 shadow effects.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In your IDE, create a new HTML document with only a header in the body. Add
    a `style` section to the `head` tag and assign the header the property, `color:#f0f0f0;`,
    as shown in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Now add to it a series of seven increasing-decreasing X- and Y- positioned
    `text-shadow` properties, from `0px 0px0px #666,` to `-6px -6px 0px #666;`.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Your header now leaps off the screen. Well, almost! To make sure it really pops
    off the screen, let's give it some more effect. When building any 3D objects on
    a screen, it is important to give consistent lighting and shadows. Since this
    text rises above, it needs a shadow.
  prefs: []
  type: TYPE_NORMAL
- en: Add another series of six X- and Y- positioned `text-shadow` properties, only
    this time give them positive values and a lighter color (`color:#ccc;`).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'The drop shadow makes sense, but it still looks a bit fake, well let''s take
    it to another level; let''s blur and darken the elements on the background. The
    third number in your `text-shadow` property creates the blur, so add an increasing
    blur of 0, 0, 1, 1, 2, 3, and 5, as shown in the following code. Also, change
    the colors to grow darker as you go back: `#888`, `#777`, `#666`, `#555`, `#444`,
    `#333`, and `#000`.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Now your header has a truly realistic 3D effect. The effect illustrated in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it…](img/5442OT_02_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Play around and experiment with variations of this recipe for some very exciting
    typographic effects. CSS3 brings a whole new level of excitement and depth to
    typographic design that has always been difficult to achieve, and does it well.
  prefs: []
  type: TYPE_NORMAL
- en: The `text-shadow` property can handle numerous shadow properties. Therefore,
    you can stack them on top of each other in an increasing distance away from your
    text. This creates the 3D effect on your text.
  prefs: []
  type: TYPE_NORMAL
- en: Adding texture to your text with text masking
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: CSS3 also gives you the awesome power of adding an image mask texture to your
    text with an image. This effect was previously only achievable by creating a static
    image of your text with an image-editing software.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You'll need an image to use as the texture mask. Using an image-editing software,
    create a new image with an alpha channel. If you do not have an image-editing
    software that can create a PNG with alpha channels, you can download an open source,
    free image-editing software GIMP at [http://www.gimp.org](http://www.gimp.org).
    To create a quick texture effect, use a scatter-type brush to create a textured
    area near the top of the image.
  prefs: []
  type: TYPE_NORMAL
- en: Save it as a PNG image type, preserving the alpha channel, in the `images` directory
    of webhost.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create your HTML with a header element that will contain the text you want
    to apply your texture mask to. Then, add some text in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Then, add your CSS markup. This will include a large font size (to show off
    your mask texture!), a white color font, padding and alignment, and then, of course
    the image mask property.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that each browser requires its own prefix for the property.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'The CSS effect is displayed in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it…](img/5442OT_02_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The mask image cuts out the visible portion of the element according to the
    mask image's alpha. When applied over the text in the CSS, it will cut out the
    masked portions. This works in a very similar way to the image-editing software's
    alpha channel layer.
  prefs: []
  type: TYPE_NORMAL
- en: Styling alternating rows with the nth positional pseudo class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The positional-pseudo classes in CSS3 offers easy CSS solutions to problems
    that previously required annoyingly complicated solutions. Until very recently,
    to style alternating rows of a list or table, if you were fortunate enough to
    be able to work on a server with some sort of logic, you could at least iterate
    through a count in a list, or if unlucky, you had to manually numerate your rows.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The CSS3 solution is surprisingly simple. First, create your HTML list of values.
    This does not necessarily require a name-spaced class, as you might want this
    to be an universal style throughout your site:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Add a CSS property for the list item, `<li>`, with the *n*th positional pseudo-class
    odd value. Give it a value of a background color and font color that is noticeably
    different than your default color scheme.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'This will auto magically style the odd numbered rows of your list! The following
    screenshot illustrates this effect:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it…](img/5442OT_02_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now take a breath; that was so easy!
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: According to [http://www.w3.org](http://www.w3.org), the `:nth-of-type(an+b)`
    pseudo-class notation represents an element that has *an+b-1* siblings with the
    same expanded element name before it, in the document tree for any zero or positive
    integer value of *n*, and has a parent element.
  prefs: []
  type: TYPE_NORMAL
- en: What does that mean? It means that as long as it has similar siblings inside
    the same parent element, you can either enter in a formula like *(-n+2)* for the
    last two rows of the siblings, or keeping it simple, even or odd, and style those
    rows via CSS.
  prefs: []
  type: TYPE_NORMAL
- en: Adding characters before and after pseudo elements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In what seems like a lost episode of *The Twilight Zone*, a new property of
    CSS gives you the ability to add pseudo markup to your content. As strange as
    it may sound, there are a surprising number of use cases for this sort of styling.
    You may want to wrap a section of your content in quotes, and not have to deal
    with the extra coding trouble to put quotes in your content or theme file, which
    of course is a sensible thing to do. Or perhaps you want to join in with the popularity
    of Twitter and its hash-tag and the `@` markups, you can precede your content
    with a `#` or `@` symbol, just by using CSS markup, as shown in the following
    code line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This requires no server-side logic or fancy footwork of any kind. All you need
    is to be able to launch the page in your localhost to see it in action.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This is accomplished with CSS only, therefore all you need to create in your
    HTML is a `class` or `id` property wrapped around the target content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: The CSS markup is only a bit complicated, in that the inserted symbol adheres
    to the margin and padding rules of the content. It uses the *n*th `class:before`
    and `class:after` pseudo classes. So, the CSS for `before` is `.class:before {content:"#";}`.
    Simply replace `#` with whatever symbol you want to use. And for `after`, replace
    `.class:before{}` with `.class:after{}`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `before` and `after` pseudo elements in CSS generates content before or
    after the element's content. Be careful that they are not real content or elements,
    and cannot be used for markup or JavaScript event triggers.
  prefs: []
  type: TYPE_NORMAL
- en: Making a button with a relative font size
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are several use cases for having a responsive button font size. A good
    example of a use case is for mobile versions of your site. When a regular button
    is viewed on your iPhone, it is tiny and difficult to press. The last thing we
    want to do is to create a bad experience for mobile device users through our negligence
    of mobile devices.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The goal of this recipe is to use the new font measure of `REM` to make a responsive
    button font size that will grow larger when viewed on your mobile device.
  prefs: []
  type: TYPE_NORMAL
- en: '`REM` is a new unit introduced in CSS3, it stands for Root `EM`, or relative
    to the root font size. This is different from `EM`, which was relative to the
    parent. One way to use it is to set the size of certain elements to the base size
    of the body font.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It can be used with the `@media` query to build a responsive button for your
    desktop and mobile devices. Here's what to do.
  prefs: []
  type: TYPE_NORMAL
- en: First, create a simple HTML page with some filler text ([http://lipsum.com](http://lipsum.com))
    and a `input` type of `submit`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Next add CSS for the HTML''s base font size at `62.5%`, and a static font size
    for the paragraph, as an experimental control group:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: The next step is to create your `@media` query for the mobile device, and two
    different desktop window sizes. I'm adding an additional `@media` query for desktop
    screens, so if you do not have access to a mobile device you can still see the
    responsiveness in action.
  prefs: []
  type: TYPE_NORMAL
- en: Set up two `@media` queries for the desktop at `1024px` and `1280px` and two
    for mobile devices, both with `max-device-width:480px`, one with `orientation:landscape`,
    and other one with `orientation:portrait`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'In your desktop `@media` queries, add an `input` element to both; and a `font-size:1rem`
    value to the `min-width:1024px` query, and a `font-size:2rem` value to the `min-width:1280px`
    query. To both queries add the properties: `width:84px;` and `padding:2%;`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the mobile `@media` queries, add the `input` element to both. In the `orientation:landscape`
    media query, assign the properties: `font-size:2rem;` and `width:25%;`. And in
    the `orientation:portrait` media query, assign the properties: `font-size:2.4rem;`
    and `width:30%;`.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Now when you view this page from a mobile device you can see how the `REM` size
    unit creates a font, sized relative to the base font. The mobile device may render
    the font so small it is hardly readable, and the button too small to use without
    fumbling. Turn the device from portrait orientation to landscape and you will
    see the button and its font change sizes.
  prefs: []
  type: TYPE_NORMAL
- en: Compare the mobile device button to the desktop versions. You will see the button
    displays unique properties per device type. And, as you drag the desktop browser
    window between the `1024px` and `1280px` sizes the button font changes also.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `REM` font size unit creates a font size relative to the base font size
    declared in the `HTML` or `body` elements, or if undeclared relative to the built-in
    base size of the font. The `@media` query we wrote gives a new relative size for
    the different devices and orientations.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a shadow to your font
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With CSS3 you can easily add a shadow to your text. This effect can be used
    to either give a special element a highlighted effect, or used throughout your
    `body` text to enhance the look of your content. In addition, you can use it to
    highlight links within your text to help them stand out.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: CSS3 makes this easy, so there isn't a big setup. Open your development environment,
    or a Notepad program and get started. You can also go online to Packt Publishing's
    web page for this book and get the completed code and take a look inside.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, create a paragraph element of text; recall that you can get this from
    our favorite filler text generator, [http://lipsum.com](http://lipsum.com). And
    give the text a title header:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'In your paragraph, insert some links, by wrapping a couple of words in an `href`
    tag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: First, let's give your paragraph text a drop shadow, this is a simple CSS3 `dropshadow`
    effect we can use on the text. Add the property `text-shadow` in your CSS. For
    Internet Explorer, add the `filter` property.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: This gives your text a slight shadow that makes it pop off the page. For body
    text, anything more than a slight shadow will be too much. Foryour links, to make
    them stand out more, we can add multiple levels of text shadow. Add a shadow similar
    to the previous example, and then following a comma, add another shadow effect.
    This example adds a light blue shadow to the link text.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s add an old property to give the page some new shine. Let''s make your
    links flash on the pseudo-action hover (`:hover`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'This property makes the links in the paragraph flash with a yellow glow, when
    you hover over them. This effect illustrated in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it…](img/5442OT_02_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe is a combination of shadow effects. You can combine multiple shadow
    effects to create realistic 3D effects for your type. The best way to learn is
    to experiment until you are extremely satisfied with your 3D effects.
  prefs: []
  type: TYPE_NORMAL
- en: Curving a corner with border radius
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Curved corners were at one time the Holy Grail of the web design world. It was
    always possible, but never simple. A designer had a limited number of bad choices
    to employ to make an element have a curved corner.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is now achieved without too much fuss with CSS3\. The `border-radius` property
    is a simple method of creating a rounded corner on an element.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First create your HTML element. This works on any element that can have a border.
    So let's make a paragraph block of text. You can get filler text at [http://lipsum.com](http://lipsum.com).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Next add CSS to fill out the paragraph element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: Then, to round the corners, add the CSS3 property, `border-radius`. In this
    example, I used a curve radius of `5px`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: This property gives you simple and easy-rounded corners. This is great for a
    floating element on a page. But what if you wanted to round only the top corners
    for a menu element? Still easy.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start with a simple inline list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Next add the CSS to make the list inline, with padding and margins:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: The CSS in the previous example gives you rounded corners for all the corners.
    To have different rounded corners, specify a radius for each corner.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'You can achieve the same results by specifying each corner as its own CSS property:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'You can take this further by adding another level of curved radius:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'The new look is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it…](img/5442OT_02_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'To add another level of responsiveness try replacing the curved radius entries
    with percentages. Go back to the first example in this recipe and change the CSS
    to have a percent radius curve:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `border-radius` property provides a simple rendering of a curve on an element.
    This property takes four values, but can be written in the shorthand format with
    only one curve radius.
  prefs: []
  type: TYPE_NORMAL
