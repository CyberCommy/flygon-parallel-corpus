- en: Adding a Server-Side Database
  prefs: []
  type: TYPE_NORMAL
- en: We added Koa as the server-side framework for our Nuxt app in the previous chapter
    with some dummy data. In this chapter, we will set up MongoDB as the server-side
    database to replace that dummy data. We will write some MongoDB CRUD queries,
    add data to the database, and use `asyncData` to fetch the data from the database.
  prefs: []
  type: TYPE_NORMAL
- en: 'The topics we will cover in this chapter are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Introducing MongoDB
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing basic MongoDB queries
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing MongoDB CRUD operations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Injecting data with MongoDB CRUD queries
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrating MongoDB with Koa
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrating with Nuxt pages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introducing MongoDB
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'MongoDB is an open source document-oriented database management system (DBMS)
    that stores data in JSON-like documents called Binary JSON (BSON) – a binary representation
    of MongoDB''s JSON-like documents that can be parsed more quickly than ordinary
    JSON. It is one of the most popular NoSQL database systems since 2009 that does
    not use tables and rows, in contrast with relational database management systems
    (RDBMSes). Every record of your data in MongoDB is a document composed of name-value
    pairs (or field and value pairs) that are similar to JSON objects but binary encoded
    to support data types that are outside the scope of JSON, such as ObjectId, Date,
    and Binary data ([https://docs.mongodb.com/manual/reference/bson-types/](https://docs.mongodb.com/manual/reference/bson-types/)). Hence,
    it is called Binary JSON. For example, a document of `{"hello":"world"}` will
    be stored in a `.bson` file as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: In practice, the encoded data in BSON is not human-readable, but we don't have
    to worry much about it when working with MongoDB because they will be encoded
    and decoded by the MongoDB driver for you out of the box. You just need to use
    the MongoDB syntax, methods, operations, and selectors with the JSON document
    that you are familiar with when constructing the document for BSON storage. Let's
    get MongoDB installed and start writing.
  prefs: []
  type: TYPE_NORMAL
- en: Installing MongoDB
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are a few ways to install MongoDB depending on the edition (Community
    Edition or Enterprise) and the platform (Windows, Ubuntu, or macOS). You can follow
    the links provided here:'
  prefs: []
  type: TYPE_NORMAL
- en: '**MongoDB Community Edition:** [https://docs.mongodb.com/manual/installation/#mongodb-community-edition-installation-tutorials](https://docs.mongodb.com/manual/installation/#mongodb-community-edition-installation-tutorials)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**MongoDB Enterprise:** [https://docs.mongodb.com/manual/installation/#mongodb-enterprise-edition-installation-tutorial](https://docs.mongodb.com/manual/installation/#mongodb-enterprise-edition-installation-tutorials)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Install MongoDB Community Edition on Ubuntu:** [https://docs.mongodb.com/manual/tutorial/install-mongodb-on-ubuntu/](https://docs.mongodb.com/manual/tutorial/install-mongodb-on-ubuntu/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing on Ubuntu 20.04
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this book, we will install MongoDB 4.2 (Community Edition) on Ubuntu 20.04
    (Focal Fossa). It works the same, too, if you are on Ubuntu 19.10 (Eoan Ermine).
    If you are using other older versions of Ubuntu, such as 14.04 LTS (Trusty Tahr),
    16.04 LTS (Xenial Xerus), or 18.04 LTS (Bionic Beaver), please follow the MongoDB
    Community Edition on Ubuntu link in the previous section. So, let''s get started:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Import the public key from `mongodb.org`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: You should get an `OK` in the response.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a list file for MongoDB:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Update all the local packages in your system:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Install the MongoDB packages:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Starting MongoDB
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once you have the MongoDB packages installed, the next thing you should do
    is see whether you can start and connect the MongoDB server from your terminal.
    So, let''s begin:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Start MongoDB manually or automatically at boot time in the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Verify it by checking its version:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'You should get a similar output to this on your terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Optionally, check the MongoDB server status with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'You should get the similar output to this on your terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Optionally, check whether MongoDB has been started on port 27017 with the `netstat`
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see the following similar output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Connect to the MongoDB Shell:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Exit the MongoDB Shell (when you want to):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'If, for any reason, you want to remove MongoDB completely from your system,
    then use this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: In the next section, you will start writing some basic queries from the MongoDB
    Shell you have just learned about. Let's get right to it.
  prefs: []
  type: TYPE_NORMAL
- en: Writing basic MongoDB queries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before you can write MongoDB queries and inject some data, first you must connect
    to MongoDB, so open a terminal and type the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Then you can list the databases that you have in the MongoDB system:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'You should get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: These two databases (`admin` and `config`) are the default ones from MongoDB.
    However, we should create new databases according to our needs and purposes.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a database
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As soon as you have logged in the MongoDB shell, you can create a fresh database
    in MongoDB by using the `use` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'You should get the following result:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'However, note that it is the same when you want to select an existing database:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'You should get the following result:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'If you want to drop a database, first select the database using the `use` command,
    for example, `use nuxt-app`, followed by the `dropDatabase` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'You should get the following result:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: The next thing we will learn is how to create or add collections to the database
    that we have created.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a new collection
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'What is a MongoDB collection? If you are familiar with RDBMSes, a collection
    is akin to an RDBMS table, which can consist of different fields, except the enforcement
    of schema. We use the `createCollection` method to create a collection with the
    following format:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'The `<name`> parameter is the name of the collection, such as user, article,
    or whatever. The `<options>` parameter is optional, and is used to specify fields
    for creating a fixed-sized collection, or a collection that validates updates
    and inserts. For more information about these options, please visit [https://docs.mongodb.com/manual/reference/method/db.createCollection/](https://docs.mongodb.com/manual/reference/method/db.createCollection/).
    Let''s create a document and see what else you can do with the document in the
    following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a collection without any options:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'You should get the following result:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'List all collections in the database with the `getCollectionNames` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'You should get the following result:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Drop the `users` collection with the `drop` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'You should get the following result:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Now that we know how to create a collection, the next thing you should know
    is how to add documents to the collection. Let's get to it in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Writing MongoDB CRUD operations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When it comes to managing and manipulating data in a database system, we are
    bound to create, read, update, and delete (CRUD) documents. We can use MongoDB''sCRUD
    operations for this. You can read more information about MongoDB CRUD operations
    at [https://docs.mongodb.com/manual/crud/](https://docs.mongodb.com/manual/crud/).
    In this book, we will just see a simple example of how we can use each of these:'
  prefs: []
  type: TYPE_NORMAL
- en: '**The Create operations**:We can use the following methods to create or insert
    fresh documents to a collection:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Note that if the collection does not exist in your database, these `insert`
    operations will create it for you automatically.
  prefs: []
  type: TYPE_NORMAL
- en: '**The Read operations**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We can use the following method to fetch documents from a collection:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: '**The Update operations**:We can use the following methods to modify the existing
    documents in a collection:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: '**The Delete operations**:We can use the following methods to remove documents
    from a collection:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: With these simplified CRUD operations, you can start injecting data to the database
    in the next section, and then you are another step closer to create a fully functional
    API. Let's get going!
  prefs: []
  type: TYPE_NORMAL
- en: Injecting data with MongoDB CRUD
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will inject some data in the nuxt-app database with the MongoDB CRUD operations
    that you have learned about in the previous section.
  prefs: []
  type: TYPE_NORMAL
- en: Inserting documents
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can insert new documents by using the `insertOne` or `insertMany` methods
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Insert a single document**:We can insert a new document like this:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s insert one document with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'You should get a similar result to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: '**Insert multiple documents**:We can insert multiple new documents like this:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s insert two documents with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'You should get a similar result to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: After adding documents to the `user` collection, we would like to fetch them,
    and that can be done simply by using the read operations in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Querying documents
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can fetch documents by using the `find` method as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Selecting all documents in a collection**:We can fetch all the documents
    from a collection like this:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'This operation is the same as the following SQL statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s fetch all the documents from the `user` collection as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'You should get a similar result to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: '**Specifying equality condition**:We can fetch specific documents from a collection
    like this:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'You can see that we use the same `find` method as the previous example but
    pass in the options in the `<query>` parameter to filter the documents that match
    the specific queries. For example, the following line selects the document where
    the `status` equals `ok`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'This operation is the same as the following SQL statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'You should get a similar result to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: '**Specifying conditions using query operators**:We also can use MongoDB query
    selectors, such as `$eq`, `$gt`, or `$in`, in the `find` method''s `<query>` parameter.
    For example, the following line fetches documents where the `status` equals either
    `ok` or `pending`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'This operation is the same as the following SQL statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: You can find out more information about the query selectors at [https://docs.mongodb.com/manual/reference/operator/query/query-selectors](https://docs.mongodb.com/manual/reference/operator/query/#query-selectors).
  prefs: []
  type: TYPE_NORMAL
- en: '**Specifying AND conditions**:You also can mix filters with query selectors.
    For example, the following line fetches documents where the `status` equals `ok` **and**
    the `age` is less than ($lt) 30:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'You should get a similar result to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'This operation is the same as the following SQL statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: '**Specifying OR conditions**:You also can create OR conditions by using the
    `$or` selector to fetch the documents that match at least one condition. For example,
    the following line fetches documents where the `status` equals `ok` **or** the
    `age` is less than ($lt) 30:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'This operation is the same as the following SQL statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'You should get a similar result to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: You can find out more about the query and projection operators at [https://docs.mongodb.com/manual/reference/operator/query/](https://docs.mongodb.com/manual/reference/operator/query/)
    and the `$or` selector at [https://docs.mongodb.com/manual/reference/operator/query/logical](https://docs.mongodb.com/manual/reference/operator/query/#logical).
  prefs: []
  type: TYPE_NORMAL
- en: Now, the next thing we are interested in is updating existing documents, so
    let's move on to the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Updating documents
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can update the existing documents by using the `updateOne` and `updateMany`
    methods as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Updating a single document**:We can update an existing document like this:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s update the document where the `name` equals `Sébastien` in the `<filter>`
    parameter with the update data using the `$set` operator in the `<update>` parameter,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'You should get the following result:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'The `$set` operator is used to replace the value of a field with the new value.
    It takes the following format:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: The `$currentDate` operator is used to set the value of a field to the current
    date. The value it returns can be a human-readable date (which is the default),
    for example `2013-10-02T01:11:18.965Z` or a timestamp, such as `1573612039`.
  prefs: []
  type: TYPE_NORMAL
- en: You can find out more information about the `$set` operator at [https://docs.mongodb.com/manual/reference/operator/update/set/](https://docs.mongodb.com/manual/reference/operator/update/set/).
    You can find out more information about `$currentDate` at [https://docs.mongodb.com/manual/reference/operator/update/currentDate/](https://docs.mongodb.com/manual/reference/operator/update/currentDate/).
  prefs: []
  type: TYPE_NORMAL
- en: '**Updating multiple documents**:We can update multiple existing documents like
    this:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s update documents where the `status` is `ok`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'You should get the following result:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: You can find out more information about the update operators at [https://docs.mongodb.com/manual/reference/operator/update/](https://docs.mongodb.com/manual/reference/operator/update/).
  prefs: []
  type: TYPE_NORMAL
- en: '**Replacing a document**:We can replace the content of existing documents,
    except the `_id` field, like this:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s replace the document where `name` equals `Pooya` with a completely new
    document in the `<replacement>` parameter as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: 'You should get the following result:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: After learning how to update existing documents, the next thing you should learn
    is how to delete existing documents. Let's dive into the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Deleting documents
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can delete existing documents by using the `deleteOne` and `deleteMany`
    methods as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Deleting only one document that matches a condition**:We can delete an existing
    document like this:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s delete the document where the `status` field equals `pending` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: 'You should get the following result:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: '**Deleting documents that match a condition**:We can delete multiple existing
    documents like this:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s delete documents where the `status` field equals `ok`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: 'You should get the following result:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: '**Deleting all documents**:We can delete all documents in a collection by passing
    an empty filter to the `deleteMany` method as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s delete all documents from the `user` collection with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: 'You should get the following result:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: Well done! You have managed to complete the MongoDB CRUD operations in these
    sections. You can find out more other methods at [https://docs.mongodb.com/manual/reference/method/js-collection/](https://docs.mongodb.com/manual/reference/method/js-collection/).
    In the next section, we will guide you through how to integrate CRUD operations
    with the server-side framework by using the MongoDB Driver. Let's get going.
  prefs: []
  type: TYPE_NORMAL
- en: Integrating MongoDB with Koa
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have studied a handful of MongoDB queries for performing CRUD operations
    through the MongoDB Shell. Now we only need the MongoDB driver to help us to connect
    to the MongoDB server and perform the same CRUD operations that we did with the
    MongoDB Shell. We will install this driver in our app as a dependency in our server-side
    framework – Koa.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the MongoDB driver
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The official MongoDB driver is `mongodb` for Node.js apps. It is a high-level
    API, built on top of the MongoDB Core driver, `mongodb-core`, a low-level API.
    The former is made for end users, while the latter is made for MongoDB library
    developers. `mongodb` contains abstractions and helpers that make MongoDB connections,
    CRUD operations, and authentication easy, while `mongodb-core` only contains the
    basic management of MongoDB topology connections, core CRUD operations, and authentication.
  prefs: []
  type: TYPE_NORMAL
- en: 'For more information about these two packages, visit the following sites:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.npmjs.com/package/mongodb](https://www.npmjs.com/package/mongodb)
    for the MongoDB driver'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://www.npmjs.com/package/mongodb-core](https://www.npmjs.com/package/mongodb-core)
    for the MongoDB Core driver'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://mongodb.github.io/node-mongodb-native/3.0/api/](http://mongodb.github.io/node-mongodb-native/3.0/api/)
    for the MongoDB driver API'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We can install the MongoDB driver with npm:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: Next, we will look into how we can use it with a quick example in the coming
    section.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a simple app with the MongoDB driver
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s set up a simple app with the MongoDB driver to perform a simple connection
    check. In this test, we will use the Backpack build system that we covered in
    the previous chapter to run our test. So, let''s get it started with the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install the MongoDB driver as shown in the previous section, followed by Backpack
    and cross-env:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a `/src/` folder as the default entry directory and create an `index.js` file
    in it, and then import the MongoDB driver and the Assert module from Node.js as
    follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: 'In this step, we should also provide the MongoDB connection details: the MongoDB
    server default address, which is `mongodb://localhost:27017`, and the database
    that we want to connect to, which is `nuxt-app`.'
  prefs: []
  type: TYPE_NORMAL
- en: Note that Assert is a Node.js built-in module that comes with a set of assertion
    functions for unit testing your code, so we don't have to install this module.
    If you want to find out more about this module, please visit [https://nodejs.org/api/assert.html#assert_assert](https://nodejs.org/api/assert.html#assert_assert).
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, establish the connection to the database in the MongoDB server and use
    Assert to confirm the connection as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: In this example, we have used the `equal` method from the `assert` module to
    make sure that the `err` callback is `null`, before creating a database instance
    with the `client` callback. We should always close the connection with the `close`
    method whenever we finish a task.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you run this connection test on your terminal with `npm run dev`, you should
    get the following output on your terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: You can find this simple example in `/chapter-9/mongo-driver/` in our GitHub
    repository.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that we are connecting to MongoDB with any authentication because we
    have not secured our MongoDB yet. You will learn how to set up a new administrative
    user to secure your MongoDB in the last chapter of this book – [Chapter 18](a2720301-9e1c-4c28-8af8-39bd5c093fb9.xhtml), *Creating
    a Nuxt App with CMS and GraphQL*. To flatten your learning curve and to speed
    up the development process in the coming sections in this chapter, we will opt
    out of securing MongoDB. Now, let's take a deeper look at how we can configure
    the MongoDB driver in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the MongoDB driver
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'From the code in the previous section, you can see that we should always import
    `MongoClient`, providing the MongoDB server URL, database name, and so on whenever
    performing a MongoDB CRUD task. This can be tedious and counter-productive. Let''s
    abstract the preceding MongoDB connection code into a class in the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Abstract the database connection details into a file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a `class` function to construct the database connection so that we don''t
    have to repeat this process whenever we perform the CRUD operations. We also construct
    an `objectId` property in our `class` function for storing the `ObjectId` method
    that we will need in order to parse the ID data coming from the client side so
    that this ID data will become an object from a string:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: 'Import the `class` and instantiate it with the `new` statement as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: 'For example, we can import it in our API routes where we need to connect to
    the MongoDB database to perform CRUD operations as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: Before creating the CRUD operations with the MongoDB driver and our server-side
    framework, Koa, we should understand `ObjectId` and the `ObjectId` method. Let's
    get into it.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding ObjectId and the ObjectId method
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`ObjectId` is a fast-generated and probably unique value that MongoDB uses
    as a primary key in a collection. It consists of 12 bytes; a timestamp takes the
    first 4 bytes to record the time when the `ObjectId` value is created. It is stored
    in a unique `_id` field for each document in a collection. This `_id` field will
    be automatically generated if it is not declared when a document is injected.
    On the other hand, `ObjectId(<hexadecimal>)` is a MongoDB method that we can use
    to return a new `ObjectId` value, and to parse an `ObjectId` value from a string
    to become an object. Here''s an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding pseudocode, you can see that we use the `getTimestamp` method
    from the object created by the `ObjectId` method to obtain the timestamp from
    the `ObjectId` value. Here''s an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: 'For more information about `ObjectId` and the `ObjectId` method, check out
    the following links:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://docs.mongodb.com/manual/reference/bson-types/#objectid](https://docs.mongodb.com/manual/reference/bson-types/#objectid)
    for `ObjectId`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://docs.mongodb.com/manual/reference/method/ObjectId/](https://docs.mongodb.com/manual/reference/method/ObjectId/)
    for `ObjectId()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now, let's write some CRUD operations with the MongoDB driver in the coming
    sections. Firstly, we will write the operation of injecting a document.
  prefs: []
  type: TYPE_NORMAL
- en: Injecting one document
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before we start, we should look at the code structure that we need for every
    route that we will be creating:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s discuss the structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Catching and throwing errors**:When we use the `async/await` statement instead
    of the `Promise` object for an asynchronous operation, we must always wrap them
    in `try`/`catch` blocks to handle errors:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: '**Connecting to MongoDB databases and collections**:Before performing any CRUD
    operation, we must establish the connection and connect to the specific collection
    that we want to manipulate. In our case, the collection is `users`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: '**Performing the CRUD operation**:This is where we use the MongoDB API methods
    to read, inject, update, and delete users:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: '**Closing the MongoDB connection**:We must make sure to close the connection
    after the CRUD operation:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let''s use the preceding code structure to inject new users in the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a route with the `post` method to inject a new user document:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside the `post` route, perform checks on the keys and values we receive from
    the client side before performing a CRUD operation with MongoDB:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: 'Before allowing a new document to be injected into the `user` collection, we
    want to make sure the `slug` value does not exist yet. To do that, we need to
    use the `findOne` API method with the `slug` key. If the result is positive, that
    means the `slug` value has been taken by other user documents, so we throw an
    error to the client:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: 'If the `slug` is unique, then we use the `insertOne` API method to inject a
    new document with the provided data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: After injecting the document, the next thing we will need is to fetch and view
    the documents we have injected, which we'll do in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Fetching all documents
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'After adding the users to the `users` collection, we can retrieve all or just
    one of them through the routes that we created in [Chapter 8](1d20b423-d93c-454a-91b5-f7207e1988fb.xhtml),
    *Adding a Server-Side Framework*. Now we just have to refactor them using the
    same code structure as in the previous section for fetching real data from the
    database:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Refactor the route for listing all user documents with the `get` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside the `get` router, fetch all documents from the `user` collection by
    using the `find` API method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE97]'
  prefs: []
  type: TYPE_PRE
- en: 'If you want to exclude the fields from the query result, use the `projection`
    key and a value of `0` for the field you don''t want to show in the result. For
    example, if you don''t want the `_id` field on each document in the result, do
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs: []
  type: TYPE_PRE
- en: 'Refactor the route for fetching a user document with the `get` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE99]'
  prefs: []
  type: TYPE_PRE
- en: 'Fetch a single document by using the `findOne` method with `_id`. We must parse
    the `id` string with the `ObjectId` method, which we have a copy of in our `constructor` function
    in the `class` function as `objectId`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs: []
  type: TYPE_PRE
- en: The `mongo.objectId(id)` method parses the `id` string into an `ObjectID` object,
    and then we can use it to query the document from the collection. Now that we
    can fetch the documents we have created, the next thing we need to do is update
    them. Let's get to it in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Updating one document
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'After adding the users to the `users` collection, we also can update them using
    the same code structure as in the previous section in the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a route with the `put` method for updating the existing user document
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE101]'
  prefs: []
  type: TYPE_PRE
- en: 'Before updating a document, we want to make sure the `slug` value is unique.
    So, inside the `put` route, we search for a match with the `findOne` API with `$ne` to
    exclude the document that we are updating. If there is no match, then we go on
    updating the document with the `updateOne` API method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE102]'
  prefs: []
  type: TYPE_PRE
- en: 'We use three operators in this CRUD operation: the `$set` operator, the `$currentDate` operator,
    and the `$ne` selector. These are some of the update operators and query selectors
    that you will frequently use for updating documents:'
  prefs: []
  type: TYPE_NORMAL
- en: '**The update operators**:The `$set` operator is used to replace the value of
    a field with the new specified value in the following format:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE103]'
  prefs: []
  type: TYPE_PRE
- en: 'The `$currentDate` operator is used to set the current date to a specified
    field, either as a BSON Date type (the default) or a BSON Timestamp type, in the
    following format:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE104]'
  prefs: []
  type: TYPE_PRE
- en: For more information about these two and other update operators, please visit
    [https://docs.mongodb.com/manual/reference/operator/update/](https://docs.mongodb.com/manual/reference/operator/update/).
  prefs: []
  type: TYPE_NORMAL
- en: '**The query selectors**:The `$ne` selector is used to select documents where
    the value of the field is not equal to the specified value, including those do
    not contain the field. Here''s an example:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE105]'
  prefs: []
  type: TYPE_PRE
- en: This query will select all documents in the `user` collection where the `age`
    field value does not equal `18`, including those documents that do not contain
    the `age` field.
  prefs: []
  type: TYPE_NORMAL
- en: For more information about this and other query selectors, please visit [https://docs.mongodb.com/manual/reference/operator/query/](https://docs.mongodb.com/manual/reference/operator/query/).
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's take a look at how we can delete the document we have created in
    the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Deleting one document
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Lastly, we also will be using the same code structure as in the previous section
    to delete existing users from the `users` collection in the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a route with the `del` method to delete an existing user document:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE106]'
  prefs: []
  type: TYPE_PRE
- en: 'Before deleting the document with the `deleteOne` API method, inside the `del`
    route, as always, we use the `findOne` API method to find this document to make
    sure we have it in the `user` collection first:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE107]'
  prefs: []
  type: TYPE_PRE
- en: Well done! You have managed to get through writing MongoDB CRUD operations and
    integrating them into the API (Koa). The final part of this chapter involves integrating
    these operations with Nuxt pages. Let's get to this in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Integrating with Nuxt Pages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We have the server side ready, and now we need a user interface on the client
    side so we can send and fetch data. We will create three new pages in the `/pages/users/`
    directory. This is our structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE108]'
  prefs: []
  type: TYPE_PRE
- en: As soon as we have the structure in place, we are ready to create pages and
    write the CRUD tasks from the Nuxt side (the client) in the following sections.
    Let's start with the *create* CRUD task in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an add page for adding new users
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will create this page to communicate with the server-side `POST` route,
    `/api/user/`, to add a new user in the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a form to collect the new user data in the `<template>` block as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE109]'
  prefs: []
  type: TYPE_PRE
- en: 'Create an `add` method to send the data to the server and a `cancel` method
    to cancel the form in the `<script>` block as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE110]'
  prefs: []
  type: TYPE_PRE
- en: With these two steps, we have established the *create* CRUD task successfully
    on the client side (Nuxt) with the server side (API). So now you add new users
    to the database from the client side at `localhost:3000/users/add` by using the
    form you have just created to collect the user data and send them to the API's `POST`
    route at `localhost:3000/api/user/`. After being able to add new users, we should
    move on to the *update* CRUD task on the client side. Let's get to it.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an update page for updating existing users
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The update page is basically quite similar to the add page. This page will
    communicate with the server-side `PUT` route, `/api/user/`, to update the existing
    user with the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a form to display the existing data and to collect the new data in the
    `<template>` block. The difference in the update page is the method that we bind
    to the `<form>` element:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE111]'
  prefs: []
  type: TYPE_PRE
- en: 'Create an `update` method to send the data to the server in the `<script>`
    block. We will use the `asyncData` method to fetch the existing data as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE112]'
  prefs: []
  type: TYPE_PRE
- en: Again, we have established the update CRUD task successfully in these two steps
    on the client side (Nuxt) with the server side (API). So now you can update the
    existing users in the database from the client side at `localhost:3000/users/update`
    by using the form to collect the user data and send them to the API's `PUT` route
    at `localhost:3000/api/user/`. After being able to update the user, we should
    now move on to the *delete* CRUD task on the client side. Let's get to it.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a delete page for deleting existing users
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This page will communicate with the server-side `DELETE` route, `/api/user/`,
    to delete the existing user:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a `<button>` element that we can use to delete the document in the `<template>`
    block. We don''t need a form to send the data because we can collect the data
    (which is only the document `_id` data) in the `remove` method. We only need the
    button to trigger this method as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE113]'
  prefs: []
  type: TYPE_PRE
- en: 'Create the `remove` method to send the data to the server as we explained in
    the `<script>` block. But first, we will need to use the `asyncData` method to
    fetch the existing data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE114]'
  prefs: []
  type: TYPE_PRE
- en: Finally, we have established the *delete* CRUD task successfully in these two
    steps on the client side (Nuxt) with the server side (API). Now you can remove
    the existing users from the database from the client side at `localhost:3000/users/delete`
    by sending the user data, which is an ID only, and send it to the API's `DELETE`
    route at `localhost:3000/api/user/`. So if you launch the app with `npm run dev`,
    you should see it running at `localhost:3000`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Navigate to the following routes to add, update, read, and delete users:'
  prefs: []
  type: TYPE_NORMAL
- en: '`localhost:3000/users` for reading/listing all users'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`localhost:3000/users/add` for injecting a new user'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`localhost:3000/users/update/<id>` for updating an existing user by their ID'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`localhost:3000/users/delete/<id>` for deleting an existing user by their ID'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Well done! You have finally managed to get through the milestones we set in
    this chapter. MongoDB can be an overwhelming subject to pick up as a beginner,
    but if you have followed through the guides and milestones we set in this chapter,
    you can create a pretty decent API with little effort. Use the links we provided
    when you need to venture beyond the CRUD operations that we have explained in
    this book. Let's now summarize what you have learned in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: You can find the code we have created for this chapter in `/chapter-9/nuxt-universal/koa-mongodb/axios/`
    in our GitHub repository.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you have learned how to install MongoDB on your local machine,
    and you have used some basic MongoDB queries for CRUD operations on the MongoDB
    Shell. You also learned how to install and use the MongoDB driver to connect to
    MongoDB from the server-side framework, and you have written the code to perform
    CRUD operations in the Koa environment. Finally, you have created the front pages
    from the client side, Nuxt, for adding new users to the MongoDB database, and
    for updating and deleting existing users by communicating with the API that you
    have developed with Koa.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will explore the Vuex store and use it in Nuxt apps.
    You will learn about the Vuex architecture before installing it and writing a
    simple Vuex store in a Vue app. You will also learn about the Vuex core concepts,
    including the state, getters, actions, and modules, before writing a Vuex store
    in a Nuxt app with these concepts. We will guide you through them, so stay tuned.
  prefs: []
  type: TYPE_NORMAL
