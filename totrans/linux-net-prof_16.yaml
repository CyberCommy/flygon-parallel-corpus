- en: '*Chapter 13*: Intrusion Prevention Systems on Linux'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第13章*：Linux上的入侵防范系统'
- en: In this chapter, we'll build on packet capture and logging to explore intrusion
    prevention options on the Linux platform. An **Intrusion Prevention System** (**IPS**)
    does exactly what it sounds like – it monitors traffic, and either alerts on or
    blocks suspicious or known malicious traffic. This can be done in a variety of
    ways, depending on what traffic you are trying to monitor.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将在数据包捕获和日志记录的基础上，探讨Linux平台上的入侵防范选项。**入侵防范系统**（**IPS**）确切地做了它听起来的事情-它监视流量，并且要么警报要么阻止可疑或已知的恶意流量。这可以通过各种方式来实现，具体取决于您要监视的流量。
- en: 'In particular, we''ll cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 特别是，我们将涵盖以下主题：
- en: What is an IPS?
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是IPS？
- en: Architecture/IPS placement
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 架构/IPS位置
- en: Classic IPS solutions for Linux – Snort and Suricata
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Linux的经典IPS解决方案-Snort和Suricata
- en: IPS evasion techniques
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: IPS回避技术
- en: Suricata IPS example
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Suricata IPS示例
- en: Constructing an IPS rule
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建IPS规则
- en: Passive traffic monitoring
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 被动流量监控
- en: Zeek example – collecting network metadata
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Zeek示例-收集网络元数据
- en: Let's get started!
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始吧！
- en: Technical requirements
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: In this chapter's examples, we will use pre-packaged virtual machines, either
    based on **Suricata-Elasticsearch-Logstash-Kibana-Scurius** (**SELKS**) or Security
    Onion (two different pre-packaged Linux distributions). As in our packet capture
    examples, IPS solutions often operate against captured traffic, so you may need
    to refer to [*Chapter 11*](B16336_11_Final_NM_ePub.xhtml#_idTextAnchor192), *Packet
    Capture and Analysis in Linux*, to ensure you have an appropriate SPAN port configuration.
    More commonly, though, IPS solutions operate in line with the packet stream, usually
    with some decryption functionality – so, you may find yourself comparing the architecture
    more to our load balancer examples from [*Chapter 10*](B16336_10_Final_NM_ePub.xhtml#_idTextAnchor170),
    *Load Balancer Services for Linux*.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的示例中，我们将使用预打包的虚拟机，基于**Suricata-Elasticsearch-Logstash-Kibana-Scurius**（**SELKS**）或Security
    Onion（两种不同的预打包Linux发行版）。与我们的数据包捕获示例一样，IPS解决方案通常针对捕获的流量进行操作，因此您可能需要参考[*第11章*](B16336_11_Final_NM_ePub.xhtml#_idTextAnchor192)，*Linux中的数据包捕获和分析*，以确保您具有适当的SPAN端口配置。然而，IPS解决方案通常与数据包流一起运行，通常具有一些解密功能-因此，您可能会发现自己更多地将架构与我们在[*第10章*](B16336_10_Final_NM_ePub.xhtml#_idTextAnchor170)中的负载均衡器示例进行比较，*Linux的负载均衡器服务*。
- en: As IPS installations change frequently, this reflects on the installations for
    these two distributions. Because of this, we won't walk through installing packages
    and so on in this chapter, so please refer to the online installation for whichever
    solution you want to explore in your lab. Or, as always, you have the option to
    follow along as we proceed through the chapter. While you likely do want to implement
    some of the tools we will discuss in this chapter, they are mostly on the complex
    side – you might not want to build a test IPS, for instance, until you are close
    to building one for production.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 由于IPS安装经常更改，这反映在这两个发行版的安装中。因此，在本章中，我们不会详细介绍安装软件包等内容，请参考在线安装，以了解您想在实验室中探索的任何解决方案。或者，像往常一样，您可以选择跟随我们在本章中进行。虽然您可能确实想要实施我们将在本章中讨论的一些工具，但它们大多是复杂的-例如，您可能不想构建一个测试IPS，直到您接近为生产构建一个IPS。
- en: What is an IPS?
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是IPS？
- en: IPS started as Intrusion Detection Systems in the 1990s. The most commonly used
    IDS/IPS product from the beginning (way back in the 1990s) was Snort, which is
    still a product (both open source and commercial), and which many other modern
    IPS products are now based on.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: IPS始于20世纪90年代的入侵检测系统。从一开始（早在20世纪90年代），最常用的IDS/IPS产品是Snort，它仍然是一个产品（开源和商业），许多其他现代IPS产品现在都是基于它的。
- en: 'An IPS watches network traffic for known attacks and then blocks them. Of course,
    there are a few failings in this process:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: IPS监视已知攻击的网络流量，然后阻止它们。当然，在这个过程中有一些失败：
- en: '*Enumerating badness* is a solid losing proposition, which the anti-virus industry
    has long realized. No matter what signature pattern you enumerate for, an attacker
    can mount the same attack with only minor modifications to evade signature-based
    detections.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*列举恶意行为*是一个不错的失败命题，这是反病毒行业长期以来意识到的。无论您为何种签名模式列举，攻击者都可以进行相同的攻击，只需稍作修改即可逃避基于签名的检测。'
- en: False positives are a milestone around the neck of these products. If they're
    not configured properly, it can be easy for a signature to mistakenly flag normal
    traffic as malicious and block it.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 误报是这些产品的一个负担。如果它们没有正确配置，签名可能会错误地标记正常流量为恶意并将其阻止。
- en: At the other end of the spectrum, if the configuration is too permissive, it
    can be easy to not alert or block attack traffic.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在光谱的另一端，如果配置过于宽松，很容易不会警报或阻止攻击流量。
- en: As you can see, deploying an IPS is usually a balancing act that needs frequent
    tinkering. Luckily, modern IPS systems mostly have good defaults set, blocking
    a reasonable segment of known attacks with false positives.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，部署IPS通常需要频繁的调整。幸运的是，现代IPS系统通常设置了良好的默认值，可以阻止已知攻击的合理部分，并且存在误报。
- en: When adjusting the rules for your organization, you'll normally see that each
    rule will have a severity rating, which gives you some indication of how serious
    the associated attack is. Rules will also have a fidelity rating, which tells
    you how "solid" the rule is in detecting the attack, i.e., how likely is this
    rule to falsely trigger in normal traffic. You can usually use these two ratings
    to make decisions about which rules to enable in your circumstance.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 调整组织的规则时，通常会看到每个规则都有一个严重性评级，这给您一些关于相关攻击有多严重的指示。规则还将具有忠实度评级，告诉您规则在检测攻击方面有多“可靠”，即这个规则在正常流量中误报的可能性有多大。您通常可以使用这两个评级来决定在您的情况下启用哪些规则。
- en: Now that we've provided a bit of a background on IPS solutions, let's look at
    where you might want to insert an IPS into your data center.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经提供了IPS解决方案的一些背景，让我们看看您可能希望在数据中心中插入IPS的位置。
- en: Architecture options – where does an IPS fit in your data center?
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Where you should place an IPS in your data center is an important decision,
    so we'll discuss this decision while providing a dose of IPS/IDS history.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: Back in the day, data centers were configured with a "crunchy shell, soft chewy
    center" architecture. In other words, protections were focused on the perimeter,
    to protect against external attacks. Internal systems were mostly trusted (usually
    trusted too much).
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: This put the IDS at the perimeter, often on a SPAN port or on a network tap.
    If you review the tap options that we discussed in [*Chapter 11*](B16336_11_Final_NM_ePub.xhtml#_idTextAnchor192),
    *Packet Capture and Analysis in Linux*, if deployed this way, it was normally
    a one-way tap, electrically preventing the IDS from sending traffic. This was
    to minimize the possibility that the IDS itself might be compromised.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: A second, trusted interface would be used to manage the IDS.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: 'This configuration evolved to eventually include the ability of the IDS to
    send an **RST** (**TCP Reset**) packet to the attacker, defender, or both to terminate
    any attack traffic with extreme prejudice, as shown in the following diagram:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.1 – IPS located outside the firewall, SPAN port for traffic collection,
    and a RESET packet to block detected attacks](img/B16336_13_001.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
- en: Figure 13.1 – IPS located outside the firewall, SPAN port for traffic collection,
    and a RESET packet to block detected attacks
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: This configuration evolved as attacks became better understood and the internet
    became more hostile. Watching for malicious traffic on the internet became much
    less productive, as watching external traffic was likely to just generate constant
    alerts as attackers began to monetize malware and their associated attacks.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: You still wanted to monitor inbound attacks, but where possible, you only wanted
    to monitor for attacks that can be applied to any given host. For instance, if
    your firewall only allowed mail traffic to inbound to a mail server, looking for
    and alerting on web-based attacks against that host just didn't make sense anymore.
    With that methodology in place for inbound attacks, we now see IDS and IPS systems
    being deployed more frequently behind the firewall.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: 'In that same timeframe, we began to see malware being distributed more in emails
    – in particular, as macros in office documents. It was difficult to effectively
    protect an organization against these attacks, especially as many organizations
    had built workflows around macros and refused to disable them. What this meant
    was that it became very effective to look for outbound traffic from compromised
    workstations and servers, which would indicate a successful attack. Normally,
    this traffic took the form of **Command and Control** (**C2**) traffic, where
    the compromised workstation reaches out to the attacker for instructions regarding
    what to do next:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.2 – IPS inside the firewall detecting C2 traffic. Also, some internet
    "noise" is filtered out](img/B16336_13_002.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
- en: Figure 13.2 – IPS inside the firewall detecting C2 traffic. Also, some internet
    "noise" is filtered out
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: The rise of encryption meant that having the IPS in a semi-passive mode became
    less and less effective. To effectively detect attack traffic, in today's internet,
    at least some of it needs to be decrypted. What this means is that the IPS must
    be in line, often running on the firewall itself. This change in architecture
    was paired with cheaper processors, allowing people to allocate more CPU to their
    firewalls (usually with disk and memory to match).
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: 'For inbound traffic, this means that the IPS now hosts a certificate that matches
    the destination server. It is decrypted at the IPS, inspected for suspicious content,
    and then forwarded on (usually re-encrypted) if it gets the green light. This
    should look familiar, as we discussed a very similar architecture when we discussed
    load balancers in [*Chapter 10*](B16336_10_Final_NM_ePub.xhtml#_idTextAnchor170),
    *Load Balancer Services for Linux*:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 对于入站流量，这意味着IPS现在托管与目标服务器匹配的证书。它在IPS上解密，检查可疑内容，然后转发（通常重新加密）如果它得到绿灯。这应该看起来很熟悉，因为当我们讨论[*第10章*](B16336_10_Final_NM_ePub.xhtml#_idTextAnchor170)中的负载均衡器时，我们讨论了一个非常相似的架构，*Linux的负载均衡器服务*：
- en: '![Figure 13.3 – IPS on a perimeter firewall. The web server certificate allows
    inbound HTTPS decryption](img/B16336_13_003.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![图13.3-周边防火墙上的IPS。Web服务器证书允许入站HTTPS解密](img/B16336_13_003.jpg)'
- en: Figure 13.3 – IPS on a perimeter firewall. The web server certificate allows
    inbound HTTPS decryption
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.3-周边防火墙上的IPS。Web服务器证书允许入站HTTPS解密
- en: Outbound decryption is a bit more complicated. For this to work, the IPS needs
    a **Certificate Authority** (**CA**) to be hosted on it, which the internal workstations
    must trust. As outbound traffic transits, the IPS dynamically creates a certificate
    for the destination, which is what the user now sees if they look at an HTTPS
    certificate in their browser.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 出站解密要复杂一些。为了使其工作，IPS需要托管在其上的**证书颁发机构**（**CA**），内部工作站必须信任。当出站流量传输时，IPS动态创建目标的证书，这就是用户现在在浏览器中查看的HTTPS证书。
- en: This allows the IPS to decrypt the outbound traffic. The traffic that is outbound
    from the IPS to the destination host then proceeds as normal with a new encrypted
    session, using the real certificate on that destination host.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这允许IPS解密出站流量。然后，从IPS到目标主机的出站流量将按照新的加密会话正常进行，使用目标主机上的真实证书。
- en: When an attack is detected, any resulting alert will have the IP address of
    the client workstation. In a Windows/Active Directory environment, usually, the
    IPS will have a matching "agent" that monitors the security log of each domain
    controller. This allows the IPS to then match up IP addresses with the user account
    names that are in use on that station at any given time.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 当检测到攻击时，任何产生的警报都将具有客户工作站的IP地址。在Windows/Active Directory环境中，通常，IPS将具有一个匹配的“代理”，用于监视每个域控制器的安全日志。这允许IPS将IP地址与在任何给定时间在该站点上使用的用户帐户名称进行匹配。
- en: 'If the IPS and firewall share a common platform, this also allows the firewall
    to add rules based on the user account, groups, certificate information (which
    includes the domain name and often the FQDN of the destination host), in addition
    to the traditional rules based on the source and destination IP address, ports,
    and so on:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如果IPS和防火墙共享一个公共平台，这也允许防火墙根据用户帐户、组、证书信息（其中包括域名和通常是目标主机的FQDN），以及基于源和目标IP地址、端口等的传统规则添加规则：
- en: '![Figure 13.4 – IPS on a perimeter firewall. A CA certificate allows outbound
    client traffic to be decrypted](img/B16336_13_004.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![图13.4-周边防火墙上的IPS。CA证书允许出站客户端流量解密](img/B16336_13_004.jpg)'
- en: Figure 13.4 – IPS on a perimeter firewall. A CA certificate allows outbound
    client traffic to be decrypted
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.4-周边防火墙上的IPS。CA证书允许出站客户端流量解密
- en: A special case of IPS grew at the same time, known as **Web Application Firewalls**
    (**WAFs**). These were appliances that focused primarily on inbound web-based
    attacks. As the internet has moved to almost exclusively HTTPS content for web
    destinations, these WAF solutions also needed decryption to detect most attacks.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在同一时间，IPS的一个特殊情况也在增长，被称为**Web应用防火墙**（**WAFs**）。这些是主要专注于入站基于Web的攻击的设备。随着互联网几乎完全转向用于Web目的地的HTTPS内容，这些WAF解决方案也需要解密来检测大多数攻击。
- en: 'In the beginning, these WAF solutions took the form of dedicated appliances,
    but have since moved to be features that are available on most load balancers.
    The most prevalent open source WAF solutions include ModSecurity (available for
    both Apache and Nginx), but many others exist:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 起初，这些WAF解决方案采用专用设备的形式，但后来已经转变为大多数负载均衡器上可用的功能。最常见的开源WAF解决方案包括ModSecurity（适用于Apache和Nginx），但还有许多其他解决方案：
- en: '![Figure 13.5 – Inbound IPS (WAF) and decryption hosted on a load balancer,
    inside the firewall](img/B16336_13_005.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![图13.5-入站IPS（WAF）和解密托管在负载均衡器上，防火墙内](img/B16336_13_005.jpg)'
- en: Figure 13.5 – Inbound IPS (WAF) and decryption hosted on a load balancer, inside
    the firewall
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.5-入站IPS（WAF）和解密托管在负载均衡器上，防火墙内
- en: The main issue with WAF solutions is the same as we saw for traditional IPS
    – coverage that is either too aggressive or too lax. At one end of the spectrum,
    there are WAF solutions that don't require a lot of configuration – these tend
    to protect against specific attacks such as cross-site scripting or SQL injection,
    where the syntax is often predictable, but not against other common attacks. At
    the other end of the spectrum, we have products that need to be configured for
    the individual fields in the application, frontending the app with full input
    validation. These products work well but need to be matched to the application
    as changes and new features are implemented. If this isn't done, the application
    can be broken by the tool that was put there to protect it.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: WAF解决方案的主要问题与我们在传统IPS中看到的问题相同-覆盖范围要么太过激进，要么太过松散。在光谱的一端，有一些WAF解决方案不需要太多的配置-这些解决方案倾向于保护特定攻击，如跨站脚本或SQL注入，其中语法通常是可预测的，但不包括其他常见攻击。在光谱的另一端，我们有一些产品需要针对应用程序中的各个字段进行配置，以全面验证输入。这些产品工作得很好，但需要与应用程序匹配，因为更改和新功能的实施。如果不这样做，应用程序可能会被用来保护它的工具破坏。
- en: Newer WAF options consider the fact that larger cloud-based websites often don't
    operate with load balancer appliances or firewalls. In some cases, they deliver
    their content via **Content Delivery Networks** (**CDN**), but even if they operate
    directly from one of the larger cloud service providers, they might on the internet.
    Also, for larger sites where the uplink is 10, 40, or 100 Gbps, WAF appliance
    solutions simply don't scale that well.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 新的WAF选项考虑到较大的基于云的网站通常不使用负载均衡器设备或防火墙。在某些情况下，它们通过**内容交付网络**（**CDN**）提供其内容，但即使它们直接从较大的云服务提供商中运行，它们也可能在互联网上。此外，对于上行速率为10、40或100
    Gbps的较大站点，WAF设备解决方案的扩展性并不那么好。
- en: For these sites, the firewall is pushed to the host itself (as we discussed
    in [*Chapter 4*](B16336_04_Final_NM_ePub.xhtml#_idTextAnchor071), *The Linux Firewall*),
    and the WAF moves to the host as well. Here, each host or container becomes a
    work unit unto itself, and scaling up the capacity for the site becomes a matter
    of just adding another work unit.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这些站点，防火墙被推送到主机本身（正如我们在[*第4章*](B16336_04_Final_NM_ePub.xhtml#_idTextAnchor071)中讨论的那样，*Linux防火墙*），WAF也移动到主机上。在这里，每个主机或容器都成为一个独立的工作单元，扩展站点的容量只是添加另一个工作单元的问题。
- en: 'For these situations, our WAF has morphed to a **Runtime Application Self Protection**
    (**RASP**) solution. As the name implies, not only is the RASP software on the
    same platform as the application, but it''s tied much more tightly to the application.
    The RASP code appears on each page of the site, usually as a simple tag that loads
    the RASP component with each page. This not only protects against known attacks
    but in many cases, it protects against "unusual" inputs and traffic and even the
    site or site code from being modified:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这些情况，我们的WAF已经演变成了**运行时应用自我保护**（**RASP**）解决方案。顾名思义，RASP软件不仅在与应用程序相同的平台上，而且与应用程序更紧密地联系在一起。RASP代码出现在站点的每个页面上，通常作为一个简单的标记，每个页面都加载RASP组件。这不仅可以防止已知攻击，而且在许多情况下，还可以防止“异常”输入和流量，甚至防止站点或站点代码被修改：
- en: '![Figure 13.6 – Cloud web service hosting a local firewall and RASP IPS solution](img/B16336_13_006.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![图13.6–云Web服务托管本地防火墙和RASP IPS解决方案](img/B16336_13_006.jpg)'
- en: Figure 13.6 – Cloud web service hosting a local firewall and RASP IPS solution
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.6–云Web服务托管本地防火墙和RASP IPS解决方案
- en: 'These RASP solutions have proven to be so effective that they are replacing
    traditional WAF products in many corporate sites. In these situations, the firewall
    is typically at the perimeter rather than on the host:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这些RASP解决方案已被证明非常有效，它们正在取代许多企业站点中的传统WAF产品。在这些情况下，防火墙通常位于周边而不是主机上：
- en: '![Figure 13.7 – RASP in a corporate environment with the perimeter firewall
    shown](img/B16336_13_007.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![图13.7–RASP在企业环境中显示了周边防火墙](img/B16336_13_007.jpg)'
- en: Figure 13.7 – RASP in a corporate environment with the perimeter firewall shown
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.7–RASP在企业环境中显示了周边防火墙
- en: RASP solutions include OpenRASP on the free/open source side of the equation
    and products such as Signal Sciences or Imperva on the commercial side.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: RASP解决方案包括在自由/开源方面的OpenRASP，以及商业方面的Signal Sciences或Imperva等产品。
- en: Now that you have some background on various IPS systems, let's take a minute
    and look at them from an attacker's or penetration tester's point of view.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您对各种IPS系统有了一些背景知识，让我们花点时间从攻击者或渗透测试人员的角度来看一下它们。
- en: IPS evasion techniques
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: IPS规避技术
- en: Inbound evasion takes advantage of the differences between how the IPS (which
    is Linux-based) interprets the malicious packets and data streams, and how the
    target interprets these packets. This is true of both traditional IPS systems
    and WAF systems.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 入站规避利用IPS（基于Linux）解释恶意数据包和数据流的方式与目标解释这些数据包的方式之间的差异。这对传统IPS系统和WAF系统都是如此。
- en: Detecting a WAF
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 检测WAF
- en: For a WAF, it's handy for an attacker to know that a WAF is in play, and what
    it's based on. Wafw00f is a good starting point here. Wafw00f is a free scanner
    that can detect over 150 different WAF systems, many of which are also load balancers.
    It is written in Python and is hosted at [https://github.com/EnableSecurity/wafw00f](https://github.com/EnableSecurity/wafw00f),
    but is also packaged within Kali Linux.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 对于WAF，攻击者知道WAF正在起作用以及其基础是很方便的。Wafw00f是一个很好的起点。Wafw00f是一个免费的扫描程序，可以检测超过150种不同的WAF系统，其中许多也是负载均衡器。它是用Python编写的，托管在[https://github.com/EnableSecurity/wafw00f](https://github.com/EnableSecurity/wafw00f)，但也打包在Kali
    Linux中。
- en: 'By testing a few sites, we can see different WAF solutions being hosted by
    hosting providers:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 通过测试一些站点，我们可以看到托管提供商托管的不同WAF解决方案：
- en: '[PRE0]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'And for a third site, we can see a commercial WAF (which is also cloud-based):'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 对于第三个站点，我们可以看到一个商业WAF（也是基于云的）：
- en: '[PRE1]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: As we noted, if you know what WAF is in play, then you have a better chance
    of evading that WAF. Of course, if you are an attacker or a penetration tester,
    you still have to compromise the website behind that WAF, but that's a whole different
    story.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所指出的，如果您知道正在使用哪种WAF，那么您就有更好的机会规避该WAF。当然，如果您是攻击者或渗透测试人员，您仍然必须 compromise
    WAF后面的网站，但这是另一回事。
- en: Since the inbound targets are often web servers and are also often Windows hosts,
    evasion on this traffic often takes advantage of handling fragmented packets.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 由于入站目标通常是Web服务器，而且通常也是Windows主机，因此这些流量上的规避通常利用处理分段数据包。
- en: Fragmentation and other IPS evasion methods
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 分段和其他IPS规避方法
- en: Artificially fragmenting packets, then sending them out of order, and, in some
    cases, sending duplicate fragment numbers with different information in them is
    a favorite way to evade or detect an IPS.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 人为分段数据包，然后以无序方式发送它们，并且在某些情况下，发送具有不同信息的重复片段号码是规避或检测IPS的一种常用方法。
- en: This takes advantage of differences between how the IPS's operating system (usually
    a Linux variant) might handle fragments, compared to the host behind the operating
    system, which might be a different operating system entirely.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这利用了IPS操作系统（通常是Linux变体）处理片段的方式与操作系统背后的主机处理片段的方式之间的差异，后者可能是完全不同的操作系统。
- en: 'Even something as simple as breaking `maliciousdomain.com` into `malic` and
    `iousdomain.com` can make all the difference if the IPS doesn''t reassemble fragments
    at all. More commonly, though, you''ll see a sequence of packet fragments similar
    to the following:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B16336_13_Table_01.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
- en: The goal for the attacker is to manage how duplicate fragments are reassembled.
    If Linux reassembles this as `MalicASDFdomain.com` and Windows reassembles this
    as `mailicousdomain.com`, then an attacker has a way to infiltrate from or exfiltrate
    to a malicious domain through the Linux-based IPS. Most modern IPSes will reassemble
    fragments in several different ways or will identify the operating system of the
    target host and reassemble based on that.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: This is an older attack, pioneered by *Dug Song* in his `fragroute` tool in
    the early 2000s. While this tool will no longer work on a properly configured
    modern IPS, some vendors don't have the proper settings for fragment reassembly
    enabled by default in their commercial products. So, while it isn't supposed to
    work, it's always a handy thing for a penetration tester to try because sometimes,
    you'll be in luck and get an IPS bypass.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: 'Outbound evasion often takes advantage of decisions that are made when installing
    and configuring the IPS; take the following examples:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: IPS systems might bypass anything that looks like a Windows update – this can
    allow attackers to use the BITS protocol to bypass the IPS to transfer files.
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sometimes, streaming media services will be bypassed for performance reasons.
    This setting can allow attackers to, for instance, embed C2 information into the
    comments for a specific YouTube video.
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If decryption is not in place, attackers can simply use HTTPS and sail right
    on through, so long as their external host isn't flagged as suspicious by its
    IP or DNS name.
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Even if decryption is in play, if the attacker uses a valid pinned certificate,
    the decryption will fail, which will often mean that the IPS will fall back to
    an "allow" rather than a "drop" response.
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There will always be protocols that aren't handled well by decryption and re-sign
    mechanisms; those are also often options.
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '"Roll your own" encryption is also something that we see attackers use.'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tunneling data in or out using DNS is also a time-honored option. You can simply
    stream data on port `53/udp`, and you'll be surprised how often this works, even
    though the packets themselves won't look anything like DNS packets. However, even
    if the IPS inspects the DNS packets to ensure validity, you can tunnel a surprising
    amount of data out using valid DNS queries – `TXT` queries especially for inbound
    transfers (the data being in the `TXT` response) or `A` queries for outbound queries
    (the data being in the queried DNS hostname).
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Or, most commonly, attackers will simply use a **C and C framework** to set
    up their channel. There are several options for this, with commercial, pirated,
    or open source tools falling in and out of favor, depending on how effective they
    are at any given time.
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Long story short, if your IPS doesn't understand a particular data stream, you
    might consider setting it to block that traffic. This method will block some production
    traffic, but you'll find that this is an ongoing tightrope that needs to be walked,
    weighing the needs of the community that you are protecting against the effectiveness
    of the IPS.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: With the attacker's point of view covered (at least at a high level), let's
    look at some practical applications – starting with network-based IDS/IPS systems.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: Classic/network-based IPS solutions – Snort and Suricata
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we discussed previously, the traditional IPS story started in the 1990s when
    *Martin Roesch* wrote Snort. Snort turned into a commercial offering when Sourcefire
    was created, but even today, after Cisco acquired Sourcefire, Snort still has
    an open source version that can be installed on any Linux platform.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: Because Snort was so prevalent, it was widely used both directly, within Sourcefire
    products, as well as being licensed in many (many) **next-generation firewall**
    (**NGFW**) products. This last situation changed after the Cisco acquisition;
    no commercial firewall wanted to have an IPS from a competing company on their
    platform.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Snort如此普遍，它既直接在Sourcefire产品中使用，也被许多（许多）**下一代防火墙**（**NGFW**）产品许可使用。在Cisco收购之后，这种情况发生了变化；没有商业防火墙希望在其平台上使用来自竞争公司的IPS。
- en: 'Marketing aside, the "traditional" version of Snort (2.x) had several shortfalls:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 撇开营销不谈，“传统”的Snort（2.x）版本存在一些缺陷：
- en: It was completely text-based, there was no GUI. However, there are several web
    frontend projects available for Snort.
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它完全基于文本，没有GUI。然而，Snort有几个Web前端项目可用。
- en: The messages were often cryptic – often, you'd need to be a security expert
    to fully understand Snort messages.
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 消息通常是神秘的-通常，您需要是安全专家才能完全理解Snort消息。
- en: It was single-threaded. This had a huge impact as network bandwidth uplinks
    went from hundreds of Mbps to Gbps, then to 10, 40, and 100 Gbps. Snort simply
    could not keep up at those volumes, no matter what combination of CPU, memory,
    and disk was thrown at it.
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它是单线程的。随着网络带宽上行从数百Mbps到Gbps，然后到10、40和100 Gbps，这产生了巨大影响。无论CPU、内存和磁盘的组合如何，Snort都无法在这些容量上跟上。
- en: However, the Snort approach and, in particular, the Snort signature ruleset
    has been invaluable, and almost all IPS solutions can use Snort signatures.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，Snort的方法，特别是Snort签名规则集，是非常宝贵的，几乎所有IPS解决方案都可以使用Snort签名。
- en: This combination of factors pushed the industry toward alternatives. In many
    cases, this has been Suricata, an IPS that was released in 2009 and has only improved
    since then. Suricata is attractive because from the start it was multi-threaded,
    so more CPU cores effectively turned into more usable CPU. This made it much more
    scalable than Snort. Suricata uses Snort rules directly with no modification,
    so those years of work in creating both the signatures and the industry expertise
    in manipulating them remains intact.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 这些因素的组合推动了行业向替代方案发展。在许多情况下，这就是Suricata，这是一个在2009年发布的IPS，自那以后一直在改进。Suricata很有吸引力，因为从一开始它就是多线程的，因此更多的CPU核心有效地转化为更多可用的CPU。这使得它比Snort更具可扩展性。Suricata直接使用Snort规则而不进行修改，因此在创建签名和行业专业知识方面的多年工作仍然完整。
- en: There are Suricata plugins and integrations for many other security products,
    including Splunk, Logstash, and Kibana/Elasticsearch. Suricata can be integrated
    directly into many popular firewalls, such as pfSense or Untangle.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: Suricata还有许多其他安全产品的插件和集成，包括Splunk、Logstash和Kibana/Elasticsearch。Suricata可以直接集成到许多流行的防火墙中，如pfSense或Untangle。
- en: Finally, many distributions bundle Suricata with an underlying Linux operating
    system, a reasonable web interface, and a database for a backend – you can install
    Suricata and have a workable system within a few hours if your hardware and network
    have been prepared.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，许多发行版将Suricata与基础Linux操作系统、合理的Web界面和后端数据库捆绑在一起-如果您的硬件和网络已经准备就绪，您可以在几小时内安装Suricata并拥有一个可用的系统。
- en: The Snort team has since released version 3.0 of their IPS (January 2021); however,
    it still has no GUI (unless you buy the commercial version as part of a Cisco
    Firepower installation). Snort is still an excellent product and an industry favorite,
    but they're now having to make up ground against the Suricata solution.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: Snort团队自那时发布了他们的IPS的3.0版本（2021年1月）；然而，它仍然没有GUI（除非您购买商业版本作为Cisco Firepower安装的一部分）。Snort仍然是一个优秀的产品和行业最受欢迎的产品，但现在他们必须赶上Suricata解决方案。
- en: Enough background and theory – let's build and use an actual IPS!
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 足够的背景和理论-让我们构建和使用一个实际的IPS！
- en: Suricata IPS example
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Suricata IPS示例
- en: 'In this example, we''ll use SELKS from Stamus Networks ([https://www.stamus-networks.com/selks](https://www.stamus-networks.com/selks)).
    The **SELKS** name reflects its major components: **Suricata, Elasticsearch, Logstash,
    Kibana, and Stamus** Scirius Community Edition. This is packaged on Debian Linux,
    so things should look familiar if you''ve been following along in this book, as
    Ubuntu is rooted in the Debian "parent" distribution.'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将使用Stamus Networks的SELKS（[https://www.stamus-networks.com/selks](https://www.stamus-networks.com/selks)）。
    **SELKS**名称反映了它的主要组件：**Suricata，Elasticsearch，Logstash，Kibana和Stamus** Scirius社区版。这是在Debian
    Linux上打包的，所以如果您一直在阅读本书，这些东西应该看起来很熟悉，因为Ubuntu根源于Debian“父”发行版。
- en: SELKS has a **live** option and an **install** option. The **live** option runs
    the entire solution off the ISO image. This is handy for small labs or to quickly
    evaluate the tool, and you may choose to go this way in this chapter. In production,
    however, you'll want to work with an installed-on-real-disk (preferably on an
    SSD or an other fast storage option) image.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: SELKS有一个**live**选项和一个**install**选项。**live**选项从ISO映像运行整个解决方案。这对于小型实验室或快速评估工具非常方便，您可以选择在本章中采用这种方式。然而，在生产中，您将希望使用安装在真实磁盘上的图像（最好是SSD或其他快速存储选项）。
- en: 'The installation guide for SELKS is located here: [https://github.com/StamusNetworks/SELKS/wiki/First-time-setup](https://github.com/StamusNetworks/SELKS/wiki/First-time-setup).
    As this does change fairly frequently, we won''t do an actual installation in
    this chapter (if we did, it would be out of date within months).'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: SELKS的安装指南位于这里：[https://github.com/StamusNetworks/SELKS/wiki/First-time-setup](https://github.com/StamusNetworks/SELKS/wiki/First-time-setup)。由于这些内容经常更改，我们在本章中不会进行实际安装（如果我们这样做，它将在几个月内过时）。
- en: Having two NICs is a requirement for most IPS solutions. The first NIC is for
    the actual IPS function, which requires promiscuous mode and will do the packet
    captures – this adapter should not have an IP when you are done. The other NIC
    is used to manage the platform – normally, the web UI for the solution is on this
    NIC.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 对于大多数IPS解决方案来说，拥有两个网卡是一个要求。第一个网卡用于实际的IPS功能，需要混杂模式并进行数据包捕获-完成后，此适配器不应该有IP。另一个网卡用于管理平台-通常，解决方案的Web
    UI在此网卡上。
- en: With Suricata running, make sure that it's in a position to capture packets,
    either with a SPAN port, a tap, or a hypervisor vSwitch that has `promiscuous
    mode` enabled.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行Suricata时，请确保它处于捕获数据包的位置，可以是SPAN端口、TAP或启用了`混杂模式`的hypervisor vSwitch。
- en: Before we start using the system, it's best to define the various hosts and
    subnets that define your environment. This information is all in `/etc/suricata/suricata.yaml`.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始使用系统之前，最好定义一下定义您的环境的各种主机和子网。所有这些信息都在`/etc/suricata/suricata.yaml`中。
- en: 'The following are the key variables to set:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是需要设置的关键变量：
- en: '![](img/B16336_13_Table_02.jpg)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B16336_13_Table_02.jpg)'
- en: In many environments, these defaults can all be left as is, but as noted, defining
    the various server variables can help in optimizing rule processing. For instance,
    if you can narrow things down so that HTTP checks aren't done on domain controllers
    or SQL servers, this can help lower the CPU requirements of processing checks
    that aren't required.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多环境中，这些默认设置都可以保持不变，但正如前面所述，定义各种服务器变量可以帮助优化规则处理。例如，如果您可以缩小范围，使得在域控制器或SQL服务器上不进行HTTP检查，这可以帮助降低处理不必要检查的CPU需求。
- en: MODBUS protocols, which are used in SCADA systems and commonly found in manufacturing
    or public utilities, are also something that are usually very tightly defined.
    Often, these servers and clients are segregated to their own subnet(s).
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: MODBUS协议通常在SCADA系统中使用，并且通常在制造业或公共事业中很常见，通常是非常严格定义的。通常，这些服务器和客户端被隔离到它们自己的子网中。
- en: Also, defining the various DNS servers internal to the organization can help.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，定义组织内部的各种DNS服务器也是有帮助的。
- en: There are many other options in this file that govern how Suricata and its related
    products operate, but to demonstrate the IPS (and even in many production environments),
    you won't need to modify them. I do invite you to review the file, though; it's
    well-commented so that you can see what each variable does.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个文件中有许多其他选项，它们控制着Suricata及其相关产品的操作方式，但是为了演示IPS（甚至在许多生产环境中），您不需要修改它们。不过，我建议您查看一下这个文件；它有很好的注释，这样您就可以看到每个变量的作用。
- en: 'After some period of normal activity – likely within minutes – you''ll start
    to see activity in EveBox, the web interface for the alerts in SELKS:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在一段正常活动的时间之后，可能在几分钟内，您将开始在SELKS的警报的Web界面EveBox中看到活动：
- en: '![Figure 13.8 – Basic alerts in Suricata (EveBox events dashboard)](img/B16336_13_008.jpg)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![图13.8 – Suricata中的基本警报（EveBox事件仪表板）](img/B16336_13_008.jpg)'
- en: Figure 13.8 – Basic alerts in Suricata (EveBox events dashboard)
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.8 – Suricata中的基本警报（EveBox事件仪表板）
- en: 'Let''s look at one of the **Fake Firefox Font Update** alerts:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一下**伪装的Firefox字体更新**警报：
- en: '![Figure 13.9 – Rule details (1) – basic information and geo-IP information](img/B16336_13_009.jpg)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![图13.9 – 规则详细信息（1）– 基本信息和地理IP信息](img/B16336_13_009.jpg)'
- en: Figure 13.9 – Rule details (1) – basic information and geo-IP information
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.9 – 规则详细信息（1）– 基本信息和地理IP信息
- en: Of particular interest in this display are the source and destination IP – if
    this is outbound traffic, it might indicate an infected host. More importantly
    in our case however is the **signature ID** (usually shortened to **SID**), which
    uniquely identifies this attack signature. We'll get back to this value in a minute.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个显示中特别重要的是源IP和目标IP – 如果这是出站流量，可能表明有受感染的主机。然而，在我们的情况中更重要的是**签名ID**（通常缩写为**SID**），它唯一标识这个攻击签名。我们稍后会回到这个值。
- en: Below that is the geo-IP information on the remote address. This is not always
    100% accurate, but if you are in a business where espionage (corporate or national)
    is of concern, this location information might be important. If the IP is local(ish),
    you might be collecting evidence for law enforcement, especially if you suspect
    that the attack is coming from an "insider."
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面是远程地址的地理IP信息。这并不总是100%准确，但如果您所在的企业关注间谍活动（企业或国家级），这些位置信息可能很重要。如果IP是本地的，您可能需要收集证据以供执法机构使用，特别是如果您怀疑攻击来自“内部人员”。
- en: 'Scroll down a bit; since this attack was done over HTTPS, we''ll see the TLS
    information that was involved:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 向下滚动一点；因为这次攻击是通过HTTPS进行的，我们将看到涉及的TLS信息：
- en: '![Figure 13.10 – Rule details (2) – TLS and fingerprint information and payload
    displays](img/B16336_13_010.jpg)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![图13.10 – 规则详细信息（2）– TLS和指纹信息以及有效载荷显示](img/B16336_13_010.jpg)'
- en: Figure 13.10 – Rule details (2) – TLS and fingerprint information and payload
    displays
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.10 – 规则详细信息（2）– TLS和指纹信息以及有效载荷显示
- en: Here, we can see that the `self.events.data.microsoft.com`, and that the certificate
    was issued by a valid Microsoft Azure CA. These things in combination tell us
    that while attacks using fake font updates are a real issue, this signature is
    being triggered with false positives, over and over again.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以看到`self.events.data.microsoft.com`，并且证书是由有效的Microsoft Azure CA颁发的。这些组合告诉我们，虽然使用伪装的字体更新的攻击是一个真正的问题，但这个签名一遍又一遍地被触发，是虚假的阳性。
- en: 'Just for interest, looking down one section further, we''ll see the **Payload**
    section. This displays the string values in the packet(s) on the left, and a hex
    representation of the packet on the right. Something of interest is the **PCAP**
    button, so let''s click that:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 仅供参考，再往下看一节，我们将看到**有效载荷**部分。左侧显示数据包中的字符串值，右侧显示数据包的十六进制表示。有趣的是**PCAP**按钮，让我们点击一下：
- en: '![Figure 13.11 – Packet capture invoked from the event display](img/B16336_13_011.jpg)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![图13.11 – 从事件显示中调用的数据包捕获](img/B16336_13_011.jpg)'
- en: Figure 13.11 – Packet capture invoked from the event display
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.11 – 从事件显示中调用的数据包捕获
- en: As expected, clicking the `server_name/SNI` section.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 如预期的那样，点击`server_name/SNI`部分。
- en: Back on the alert page, scrolling down even further, we'll see the JSON representation
    of the rule. Going back to the rule name, remember how it referenced the word
    `JA3`? `JA` signatures are hashes of the various values that are exchanged in
    the initial handshake packets of encrypted traffic. Using `JA` values, we can
    identify the source and destination applications and often also the server names
    (in this case, using the `JA3` signatures was pioneered by *John Althouse*, *Jeff
    Atkinson*, and *Josh Atkins* (hence the name JA3) from Salesforce. More information
    on this approach can be found at the end of this chapter. The HASSH framework
    performs a similar function for SSH traffic.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 回到警报页面，继续向下滚动，我们将看到规则的JSON表示。回到规则名称，记住它是如何引用单词`JA3`的吗？`JA`签名是加密流量初始握手数据包中交换的各种值的哈希。使用`JA`值，我们可以识别源和目标应用程序，通常还可以识别服务器名称（在这种情况下，使用`JA3`签名是由Salesforce的*John
    Althouse*，*Jeff Atkinson*和*Josh Atkins*（因此称为JA3）开创的。有关此方法的更多信息可以在本章末尾找到。HASSH框架对SSH流量执行类似的功能。
- en: 'Looking at the `JA3` section in the JSON rule display, we can see detailed
    information regarding the network event that triggered the IPS alert:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 查看JSON规则显示中的`JA3`部分，我们可以看到有关触发IPS警报的网络事件的详细信息：
- en: '![Figure 13.12 – JSON details of the network event that triggered the IPS alert
    ](img/B16336_13_012.jpg)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![图13.12 - 触发IPS警报的网络事件的JSON详细信息](img/B16336_13_012.jpg)'
- en: Figure 13.12 – JSON details of the network event that triggered the IPS alert
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.12 - 触发IPS警报的网络事件的JSON详细信息
- en: Note that this JSON display is a mix of "what we are looking for" and "what
    we saw." You'd have to look at the rule itself to see what is triggering the rule
    (though in this case, it's the JA3 hashes).
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，此JSON显示是“我们正在寻找的”和“我们看到的”混合体。您必须查看规则本身才能看到是什么触发了规则（尽管在这种情况下，它是JA3哈希）。
- en: 'Now that we''re done exploring this alert and have deemed it a false positive,
    we have two possible courses of action:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经探索完这个警报并认为它是误报，我们有两种可能的行动方案：
- en: We can disable this alert. Likely, you'll find yourself doing this a lot with
    a new IPS until things level out
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以禁用此警报。很可能，您会发现自己在新的IPS上经常这样做，直到事情平稳下来
- en: You can edit the alert, perhaps have it trigger as expected, but not for SNIs
    that end in `Microsoft.com`. Note that we said *end with*, not *contain*. It's
    common for attackers to look for definition mistakes – for instance, the `foo.microsoft.com.maliciousdomain.com`
    SNI would qualify as `contains microsofot.com`, whereas the actual `self.events.data.microsoft.com`
    will only qualify as *ends with*. If you remember our regular expression discussion
    in [*Chapter 11*](B16336_11_Final_NM_ePub.xhtml#_idTextAnchor192), *Packet Capture
    and Analysis in Linux*, ends with `Microsoft.com` would look like `*.microsoft.com$`
    (one or more characters, followed by `Microsoft.com`, immediately followed by
    the end of the string).
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以编辑警报，也许使其按预期触发，但不适用于以`Microsoft.com`结尾的SNI。请注意，我们说的是*以...结尾*，而不是*包含*。攻击者通常会寻找定义错误
    - 例如，`foo.microsoft.com.maliciousdomain.com` SNI将符合`包含microsofot.com`，而实际的`self.events.data.microsoft.com`只会符合*以...结尾*。如果您还记得我们在[*第11章*](B16336_11_Final_NM_ePub.xhtml#_idTextAnchor192)中的正则表达式讨论，以`Microsoft.com`结尾将看起来像`*.microsoft.com$`（一个或多个字符，后跟`Microsoft.com`，紧接着字符串的结尾）。
- en: 'In this case, we''ll disable the alert. From the command line, edit the `/etc/suricata/disable.conf`
    file and add the SID to this file. A comment is customary so that you can keep
    track of why various signatures were deleted, when, and by who:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们将禁用警报。从命令行，编辑`/etc/suricata/disable.conf`文件并将SID添加到此文件。通常会添加注释，以便您可以跟踪删除各种签名的原因，何时以及由谁删除：
- en: '[PRE2]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: To add a rule that is being ignored, you can simply add the SID to the `/etc/suricata/enable.conf`
    file.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 要添加被忽略的规则，只需将SID添加到`/etc/suricata/enable.conf`文件中。
- en: 'Finally, run `suricata_update` again to update the running configuration of
    the IPS. You''ll see that the `disable.conf` file has been processed:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，再次运行`suricata_update`以更新IPS的运行配置。您将看到`disable.conf`文件已被处理：
- en: '[PRE3]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The second choice for editing the SID so that it doesn't trigger on a specific
    SNI might make more sense, but you can't edit the SID directly; the next update
    will simply clobber your update. To edit an SID, make a copy of it so that it's
    an SID in the "custom" or "local" range, then edit that. Add that new SID to the
    `enable.conf` file.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑SID的第二个选择是使其不会在特定SNI上触发更有意义，但你不能直接编辑SID；下一个更新将简单地覆盖您的更新。要编辑SID，请将其复制为“自定义”或“本地”范围内的SID，然后进行编辑。将新的SID添加到`enable.conf`文件中。
- en: 'Back to our main EveBox display, open any event and go exploring. You can click
    on any linked value and get more information about it. For instance, if you suspect
    that an internal host has been compromised, you can click on that host''s IP in
    any display and get details about all the traffic to and from that host:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 回到我们的主要EveBox显示，打开任何事件并进行探索。您可以单击任何链接的值并获取有关其更多信息。例如，如果您怀疑内部主机已被入侵，您可以单击任何显示中该主机的IP，并获取有关与该主机之间的所有流量的详细信息：
- en: '![Figure 13.13 – EveBox display of all the events that were triggered by one
    target host](img/B16336_13_013.jpg)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![图13.13 - EveBox显示由一个目标主机触发的所有事件](img/B16336_13_013.jpg)'
- en: Figure 13.13 – EveBox display of all the events that were triggered by one target
    host
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.13 - EveBox显示由一个目标主机触发的所有事件
- en: Note the search field at the top – you can manually input those as needed as
    you get more familiar with the interface. In this case, we can see a bunch of
    "nonsense" DNS requests (lines 4, 5, and 6 in the display, as well as lines 8,
    9, and 10). Nonsense queries like this often appear in attacks that use **fast
    flux DNS**, where the C2 server DNS names will change several times in a day.
    Often, the clients compute the DNS names based on the date and time or retrieve
    them periodically. Unfortunately, our friends in the advertising world use many
    of the same techniques as our malware friends do, so this is not as clear-cut
    as it used to be.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
- en: Changing displays (click on the top-right icon next to your user ID) lets you
    navigate to the **Hunting** display.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
- en: In this display, you'll see the same alerts but summarized rather than listed
    serially by timestamp. This lets you look for the most frequent alerts or look
    for the outliers – the least frequent alerts that might indicate more unusual
    situations.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s look at our Firefox font alerts once more – open that line for more
    details. In particular, you will see a timeline display:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.14 – Hunting display, main dashboard](img/B16336_13_014.jpg)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
- en: Figure 13.14 – Hunting display, main dashboard
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that this gives us the actual rule that is being triggered:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Essentially, this is the "outbound traffic that matches this JA3 hash." Looking
    this hash value up on [https://ja3er.com](https://ja3er.com), we will find that
    this is a basic Windows 10 TLS negotiation, reported from the following user agents:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
- en: 'Excel/16.0 (count: 375, last seen: 2021-02-26 07:26:44)'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'WebexTeams (count: 38, last seen: 2021-06-30 16:17:14)'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:40.0) Gecko/20100101 Firefox/40.1 (count:
    31, last seen: 2020-06-04 09:58:02)'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This reenforces the fact that this signature is of limited value; we were well
    advised to simply disable it. As we discussed previously, you might decide to
    edit it as a different rule, but in this particular case, you'd be forever playing
    whack-a-mole trying to get the right combination of SNI strings or CAs to get
    the rule just right.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
- en: 'Another display that is well worth exploring is the **Management** display:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.15 – Management view, all alerts](img/B16336_13_015.jpg)'
  id: totrans-163
  prefs: []
  type: TYPE_IMG
- en: Figure 13.15 – Management view, all alerts
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
- en: 'This shows the same data in yet another format. Clicking the same Firefox font
    alert (2028371), we get an even more comprehensive view of the activity behind
    this alert:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.16 – Management view of the example Firefox font alert](img/B16336_13_016.jpg)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
- en: Figure 13.16 – Management view of the example Firefox font alert
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that in the left-hand column, we can now see selections for **Disable
    rule** and **Enable rule**. As the IPS interface is mostly in the UI, this is
    more likely to be your main rule management method, at least as far as disabling
    and enabling rules goes:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.17 – Disabling a Suricata rule from the web UI](img/B16336_13_017.jpg)'
  id: totrans-169
  prefs: []
  type: TYPE_IMG
- en: Figure 13.17 – Disabling a Suricata rule from the web UI
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
- en: As noted previously, the IPS function is one area where your mileage may vary.
    If you are deploying on a home network, different doorbells, thermostats, or gaming
    platforms will dramatically influence your mix of traffic and the resultant things
    that the IPS will find. This is even more dramatic in a corporate environment.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
- en: The best advice is to learn the basics, some of which we've covered here, and
    explore what your IPS is telling you about what's going on over your network.
    You'll find a mix of signatures to delete or modify, messages that you want to
    leave in play but suppress from the display, and real security alerts of various
    priorities.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
- en: Something else that you'll see in this platform is that Suricata's severity
    levels might not match yours. The rule that we explored was a great example of
    this – Suricata flagged it as a high priority, but after some investigation, we
    classed it as a false positive and disabled it.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
- en: We've mentioned rules a few times. So, let's dive a bit deeper into how a rule
    is built, and then build one of our own from scratch.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经多次提到规则。因此，让我们深入了解规则是如何构建的，然后从头开始构建一个规则。
- en: Constructing an IPS rule
  id: totrans-175
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建IPS规则
- en: 'We''ve mentioned IPS signatures several times, in particular Snort rules –
    let''s take a look at how they are constructed. Let''s look at an example rule,
    which alerts us of a suspicious DNS request that contains the text `.cloud`:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经多次提到IPS签名，特别是Snort规则 - 让我们看看它们是如何构建的。让我们看一个示例规则，它会警报我们包含`.cloud`文本的可疑DNS请求：
- en: '[PRE5]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The rule is broken into several sections. Starting from the beginning of the
    rule, we have our **rule header**:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 规则分为几个部分。从规则的开头开始，我们有我们的**规则头**：
- en: '![](img/B16336_13_Table_03.jpg)'
  id: totrans-179
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B16336_13_Table_03.jpg)'
- en: The **Flow** section is not shown – Suricata normally only detects flows for
    TCP data.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: '**流**部分不显示 - Suricata通常只检测TCP数据的流。'
- en: 'This is followed by the rule''s **Message** section:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是规则的**消息**部分：
- en: '![](img/B16336_13_Table_04.jpg)'
  id: totrans-182
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B16336_13_Table_04.jpg)'
- en: 'The **Detection** section outlines what the rule is looking for and what traffic
    will trigger the alert:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '**检测**部分概述了规则正在寻找的内容以及将触发警报的流量：'
- en: '![](img/B16336_13_Table_05.jpg)'
  id: totrans-184
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B16336_13_Table_05.jpg)'
- en: 'The **References** section normally contains URLs, CVE numbers, or vendor security
    advisories:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: '**参考**部分通常包含URL、CVE编号或供应商安全公告：'
- en: '![](img/B16336_13_Table_06.jpg)'
  id: totrans-186
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B16336_13_Table_06.jpg)'
- en: 'The **Signature ID** section contains the SID value and revision number:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '**签名ID**部分包含SID值和修订号：'
- en: '![](img/B16336_13_Table_07.jpg)'
  id: totrans-188
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B16336_13_Table_07.jpg)'
- en: 'The **Metadata** section includes the following:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 元数据部分包括以下内容：
- en: '![](img/B16336_13_Table_08.jpg)'
  id: totrans-190
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B16336_13_Table_08.jpg)'
- en: 'Many of these are optional, and in some cases, the section''s order can be
    changed. For a full explanation of Suricata rule formatting, the product documentation
    is a good starting point: [https://suricata.readthedocs.io/en/suricata-6.0.3/rules/intro.html](https://suricata.readthedocs.io/en/suricata-6.0.3/rules/intro.html).'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 其中许多是可选的，在某些情况下，部分的顺序可以改变。有关Suricata规则格式的完整说明，产品文档是一个很好的起点：[https://suricata.readthedocs.io/en/suricata-6.0.3/rules/intro.html](https://suricata.readthedocs.io/en/suricata-6.0.3/rules/intro.html)。
- en: As Suricata rules are essentially the same as Snort rules, you might find the
    Snort documentation useful as well.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Suricata规则基本上与Snort规则相同，因此您可能会发现Snort文档也很有用。
- en: If you are adding custom rules for your organization, the SID range for local
    rules is `1000000`-`1999999`.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您为您的组织添加自定义规则，则本地规则的SID范围为`1000000`-`1999999`。
- en: By convention, local rules are usually put in a file called `local.rules`, or
    at least in rules files that have a name reflecting this custom status. Also,
    the rule message usually starts with the word `LOCAL`, your organization name,
    or some other indicator that makes it obvious that this is an internally developed
    rule. Populating the rule metadata is also considered good practice – adding the
    rule's author, date, and version number can be very helpful.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 按照惯例，本地规则通常放在一个名为`local.rules`的文件中，或者至少放在反映此自定义状态的规则文件中。此外，规则消息通常以单词`LOCAL`、您的组织名称或其他使其明显是内部开发规则的指示符开头。填充规则元数据也被认为是一个良好的做法
    - 添加规则的作者、日期和版本号可能非常有帮助。
- en: For example, let's create a set of rules that detects telnet traffic – both
    inbound and outbound. You might have added this rule to address a cohort of administrators
    in an organization that persist in deploying sensitive systems that have telnet
    enabled. Using telnet to log in, then run or administer an application, is a dangerous
    approach, as all of the credentials and all of the application data are transmitted
    in clear text over the network.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，让我们创建一组规则，用于检测telnet流量 - 入站和出站。您可能已经添加了此规则，以解决组织中一群坚持部署启用telnet的敏感系统的管理员。使用telnet登录，然后运行或管理应用程序，是一种危险的方法，因为所有凭据和所有应用程序数据都以明文形式通过网络传输。
- en: 'Let''s break this into two rules:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将其分为两条规则：
- en: '[PRE6]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Note that the protocol is TCP and that the destination ports include `23/tcp`,
    as well as many of the other common ports people might put telnet in to "hide"
    it.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，协议是TCP，并且目标端口包括`23/tcp`，以及许多其他常见端口，人们可能会将telnet放入其中以“隐藏”它。
- en: The text of these rules gets put into `/etc/suricata/rules/local.rules` (or
    wherever you want to store your local rules).
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 这些规则的文本被放入`/etc/suricata/rules/local.rules`（或者您想要存储本地规则的任何其他位置）。
- en: 'Update `/etc/suricata/suricata.yaml` to reflect this:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 更新`/etc/suricata/suricata.yaml`以反映这一点：
- en: '[PRE7]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Now, to recompile the rule list, run `sudo selks-update`. You may also need
    to run `sudo suricata-update –local /etc/suricata/rules/local.rules`.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，要重新编译规则列表，请运行`sudo selks-update`。您可能还需要运行`sudo suricata-update –local /etc/suricata/rules/local.rules`。
- en: 'Once you have updated this, you can verify that your rules are in place by
    listing the final ruleset, filtering for your SIDs:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 更新后，您可以通过列出最终规则集并过滤您的SID来验证您的规则是否已就位：
- en: '[PRE8]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Now, to reload the ruleset, do one of the following:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，要重新加载规则集，请执行以下操作之一：
- en: Reload Suricata by executing `sudo kill -USR2 $(pidof suricata)`. This is not
    recommended as it reloads the entire application.
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过执行`sudo kill -USR2 $(pidof suricata)`重新加载Suricata。这不建议，因为它会重新加载整个应用程序。
- en: Reload the rules with `suricatasc -c reload-rules`. This is a blocking reload;
    Suricata is still offline for the duration of the reload. This is not recommended
    if your IPS is in line with traffic.
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`suricatasc -c reload-rules`重新加载规则。这是一个阻塞式的重新加载；Suricata在重新加载期间仍然处于离线状态。如果您的IPS与流量处于一条线上，这是不建议的。
- en: Reload the rules with `suricatasc -c ruleset-reload-nonblocking`. This reloads
    the ruleset without blocking traffic, which is "friendly" to an in-line deployment.
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`suricatasc -c ruleset-reload-nonblocking`重新加载规则。这会在不阻止流量的情况下重新加载规则集，对于内联部署是“友好”的。
- en: 'What does this alert look like when it is triggered? The alert for this rule
    in EveBox will look like this:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 当触发时，此警报是什么样子？EveBox中此规则的警报如下：
- en: '![Figure 13.18 – Alerts generated by the triggered custom IPS rule](img/B16336_13_018.jpg)'
  id: totrans-210
  prefs: []
  type: TYPE_IMG
  zh: '![图13.18 - 触发的自定义IPS规则生成的警报](img/B16336_13_018.jpg)'
- en: Figure 13.18 – Alerts generated by the triggered custom IPS rule
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
- en: Here, we can see that one of the alerts is from an internal to an internal host,
    whereas the other is outbound to the internet. The first rule is triggered twice
    – look back at the rule definition; can you see why? This shows that it makes
    good sense to trigger any custom rules and optimize them so that each condition
    triggers an alert or block only once, and that they trigger on all conditions
    and variations that you can think of.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s expand the first one (note the SID):'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.19 – Event details for alert 1](img/B16336_13_019.jpg)'
  id: totrans-214
  prefs: []
  type: TYPE_IMG
- en: Figure 13.19 – Event details for alert 1
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s expand the second – note that this is the same event, but it triggered
    a second time with a different SID:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.20 – Event details for alert 2](img/B16336_13_020.jpg)'
  id: totrans-217
  prefs: []
  type: TYPE_IMG
- en: Figure 13.20 – Event details for alert 2
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, expand the last one (again, note the SID):'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.21 – Event details for alert 3](img/B16336_13_021.jpg)'
  id: totrans-220
  prefs: []
  type: TYPE_IMG
- en: Figure 13.21 – Event details for alert 3
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
- en: Note that we have the full packet capture for both – be very careful with these,
    as you will see valid credentials if you browse those PCAP files.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
- en: Now that we've looked at how a network IPS works, let's see what we can find
    by passively monitoring packets as they pass through the network.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
- en: Passive traffic monitoring
  id: totrans-224
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Another way to add to an IPS solution is to use a **Passive Vulnerability Scanner**
    (**PVS**). Rather than looking for attack traffic, PVS solutions collect packets
    and look for traffic or handshake data (such as JA3, SSH fingerprints, or anything
    it can collect in clear text) that might help identify operating systems or applications
    in play. You can use this method to identify problem applications that might not
    appear using other methods, or even hosts that were missed using other inventory
    methods.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
- en: For instance, a PVS solution might identify out-of-date browsers or SSH clients.
    SSH clients on Windows are often out of date, as many of the more prevalent clients
    (such as PuTTY) don't have auto-update capabilities.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
- en: PVS solutions are also great tools for finding hosts that might not have been
    inventoried. If it reaches out to the internet or even to other internal hosts,
    PVS tools can collect a surprising amount of data just from "stray" packets.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
- en: P0F is one of the more commonly seen open source PVS solutions. Commercially,
    Teneble's PVS server is commonly deployed.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
- en: Passive monitoring with P0F – example
  id: totrans-229
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To run P0f, put the Ethernet interface that you will be using into `promiscuous
    mode`. This means that the interface will read and process all packets, not just
    the ones destined for the host we''re working on. This is a common mode that is
    set automatically by most utilities that depend on packet capture, but P0F is
    still "old school" enough to need it to be set manually. Then, run the tool:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Of more use, you can redirect the `p0f` output to a file, then process the
    file''s contents. Note that we need root rights to capture packets:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Next, we can collect the data that was collected on various hosts, using `grep`
    to filter for only those where `p0f` was able to identify the operating system.
    Note that since we created `pvsout.txt` as root, we''ll need root rights to read
    that file as well:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'We can parse this for a quick inventory listing:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Note that we had to use `sed` to remove the source port for each of the hosts
    so that the `uniq` command would work. Also, note that host `192.168.122.181`
    registers as three different Windows versions – that host bears some looking into!
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
- en: 'Of more concern are the hosts at `192.168.122.113`, `129`, and `160`, which
    appear to be running older Linux kernels. It turns out that the following is true:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
- en: '`192.168.122.160` is a doorbell camera – auto-update is enabled for it, so
    it''s an older kernel but is as new as the vendor can make it.'
  id: totrans-240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`192.168.122.129` is a carrier''s PVR/TV controller. This is the same situation
    as the previous one.'
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`192.168.122.113` is an Ubuntu 20.04.2 host, so this one is a false positive.
    After connecting to that host, `uname –r` tells us that this is running kernel
    version 5.8.0.55.'
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We've now got basic IPS services and PVSes in place, so let's expand on this
    and add some metadata to make our IPS information more relevant. What do I mean
    by "metadata"? Read on and we'll describe that data, and how Zeek can be used
    to collect it.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
- en: Zeek example – collecting network metadata
  id: totrans-244
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Zeek** (formerly known as Bro) isn''t really an IPS, but it makes a nice
    adjunct server for your IPS, for your logging platform, as well as for network
    management. You''ll see why that is as we move forward in this section.'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
- en: 'First of all, there are a couple of installation options:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
- en: You can install on an existing Linux host ([https://docs.zeek.org/en/master/install.html](https://docs.zeek.org/en/master/install.html)).
  id: totrans-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can install the Security Onion distribution and choose Zeek during the installation
    ([https://download.securityonion.net](https://download.securityonion.net), [https://docs.securityonion.net/en/2.3/installation.html](https://docs.securityonion.net/en/2.3/installation.html)).
    Security Onion might be attractive because it installs several other components
    along with Zeek, which might make for a more useful toolset for you.
  id: totrans-248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Security Onion install, by default, installs Suricata with Zeek, so in a
    smaller environment, this can make some good sense – also, it's handy to have
    the information from these two apps on the same host.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
- en: 'Remember we said that Zeek was a "metadata" collector? Once we have Security
    Onion running for a few minutes on a live network, poke around and you''ll see
    what I mean. To plant some "interesting" data, I fired up a browser and navigated
    to [https://badssl.com](https://badssl.com). From there, I tested various SSL
    error conditions:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.22 – Testing SSL error detection using BADSSL.com](img/B16336_13_022.jpg)'
  id: totrans-251
  prefs: []
  type: TYPE_IMG
- en: Figure 13.22 – Testing SSL error detection using BADSSL.com
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
- en: 'What shows up in Bro? From the Security Onion main interface, choose Kibana,
    then pick the SSL protocol in the `443`:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.23 – Displaying only SSL data](img/B16336_13_023.jpg)'
  id: totrans-254
  prefs: []
  type: TYPE_IMG
- en: Figure 13.23 – Displaying only SSL data
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
- en: Note that each page can be paged through independently, and that the raw logs
    are immediately below these panes.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
- en: 'Scroll over to that `443` in the `443` and you''ll see some options:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.24 – Filtering out port 443/tcp](img/B16336_13_024.jpg)'
  id: totrans-258
  prefs: []
  type: TYPE_IMG
- en: Figure 13.24 – Filtering out port 443/tcp
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
- en: 'You can click **+** to filter just for that value, or **-** to remove this
    value from the report. Let''s remove it, then scroll down to the log pane. Expand
    any of the events in the log by clicking the **>** icon to get pages and pages
    of details about that particular session:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.25 – Expanding an event to show full metadata](img/B16336_13_025.jpg)'
  id: totrans-261
  prefs: []
  type: TYPE_IMG
- en: Figure 13.25 – Expanding an event to show full metadata
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
- en: 'Scrolling down, you''ll see geolocation data (a good estimate of where exactly
    on the planet this IP exists), as well as the SSL certificate details for this
    particular session:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.26 – Scrolling down, showing just SSL/TLS certificate metadata](img/B16336_13_026.jpg)'
  id: totrans-264
  prefs: []
  type: TYPE_IMG
- en: Figure 13.26 – Scrolling down, showing just SSL/TLS certificate metadata
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
- en: 'At the top of the screen, click the `ssl` to see what we have there:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.27 – SSL dashboards](img/B16336_13_027.jpg)'
  id: totrans-267
  prefs: []
  type: TYPE_IMG
- en: Figure 13.27 – SSL dashboards
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
- en: 'Pick **Security Onion – SSL**; we''ll see the following output:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.28 – Security Onion – SSL dashboard](img/B16336_13_028.jpg)'
  id: totrans-270
  prefs: []
  type: TYPE_IMG
- en: Figure 13.28 – Security Onion – SSL dashboard
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that in the middle of the page, we''ll see actual server names. These
    are mostly all harvested from the SSL certificates involved in each interaction
    (though reverse DNS is used in some other dashboards). Let''s look at the **Validation
    Status** pane – note that we have a few status descriptions:'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B16336_13_Table_09.jpg)'
  id: totrans-273
  prefs: []
  type: TYPE_IMG
- en: 'Click on **certificate has expired** and choose **+** to drill down to just
    that data:'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.29 – Narrowing the search – expired SSL certificates only](img/B16336_13_029.jpg)'
  id: totrans-275
  prefs: []
  type: TYPE_IMG
- en: Figure 13.29 – Narrowing the search – expired SSL certificates only
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
- en: This gets us the exact transaction that was involved, along with the IP of the
    person involved!
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
- en: Note that as we navigate and drill down, you'll see the **search term** field
    displayed on many of the screens, which shows the raw query against Elasticsearch.
    You can always add them manually, but using the UI can be a big help on this.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s explore the **Kibana** | **Discover Analytics** page. Right off the
    bat, we will see all kinds of new information:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.30 – Discover view of the traffic](img/B16336_13_030.jpg)'
  id: totrans-280
  prefs: []
  type: TYPE_IMG
- en: Figure 13.30 – Discover view of the traffic
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
- en: In the `ssl` to narrow down the search terms. You'll see it give you matching
    searches as you type.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, click **ssl.version** and **ssl.certificate.issuer**, then press **Update**:'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.31 – Showing selected SSL/TLS information](img/B16336_13_031.jpg)'
  id: totrans-284
  prefs: []
  type: TYPE_IMG
- en: Figure 13.31 – Showing selected SSL/TLS information
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, in the field area, type `source` and add **source.ip** to our report:'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.32 – Building our query by adding more information](img/B16336_13_032.jpg)'
  id: totrans-287
  prefs: []
  type: TYPE_IMG
- en: Figure 13.32 – Building our query by adding more information
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
- en: You can quickly see how we can narrow our display down to just what we want.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
- en: 'Alternatively, we can filter by geography. Build a listing that shows the TLS
    version, source IP, destination IP, country, and city:'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.34 – Removing "US" destinations](img/B16336_13_033.jpg)'
  id: totrans-291
  prefs: []
  type: TYPE_IMG
- en: Figure 13.33 – Adding geo-lookup information to the query
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, highlight a **US** entry in the **Country** column and choose **-** to
    filter out US destinations:'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B16336_13_034.jpg)'
  id: totrans-294
  prefs: []
  type: TYPE_IMG
- en: Figure 13.34 – Removing "US" destinations
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
- en: 'This gives us a more interesting listing:'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.35 – Final query](img/B16336_13_035.jpg)'
  id: totrans-297
  prefs: []
  type: TYPE_IMG
- en: Figure 13.35 – Final query
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
- en: Drilling down and noodling with the data can quickly and easily get you displays
    such as "TLSv1.0 or lower with a destination in China, Russia, or North Korea."
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
- en: 'Even filtering out TLS versions can quickly get you to a shortlist of "unknown"
    TLS versions. Note that at any time, we can expand any of the lines to get the
    full metadata for that session:'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.36 – Only TLS versions of "unknown"](img/B16336_13_036.jpg)'
  id: totrans-301
  prefs: []
  type: TYPE_IMG
- en: Figure 13.36 – Only TLS versions of "unknown"
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s explore the destination IP in the first line:'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.37 – Details of a suspicious IP](img/B16336_13_037.jpg)'
  id: totrans-304
  prefs: []
  type: TYPE_IMG
- en: Figure 13.37 – Details of a suspicious IP
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
- en: 'Who else has connected to that problem host using SSL? In a real security incident,
    you can use this approach to answer important questions such as "we know that
    client X was affected; who else had similar traffic so we can see whether this
    issue is more widespread?":'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.38 – Other internal hosts with the same suspicious traffic](img/B16336_13_038.jpg)'
  id: totrans-307
  prefs: []
  type: TYPE_IMG
- en: Figure 13.38 – Other internal hosts with the same suspicious traffic
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
- en: Here, you can see how metadata such as SSL versions, issuers of SSL certificates,
    and the country codes of destination IPs can quickly get you some interesting
    information. Think how much deeper you can dig with thousands of search terms
    that are available!
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
- en: If you are exploring traffic to solve a problem or are working through a security
    incident, you can see how collecting traffic metadata can be very effective in
    getting useful information – not only about the identified hosts and sessions
    involved but in finding similar hosts and sessions that might also be affected!
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
- en: This is just the tip of the iceberg. Not only can you dig deeper into SSL/TLS
    traffic, but you can also explore hundreds of other protocols!
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-312
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we discussed several methods of detecting and preventing intrusion
    events. We started by discussing where in our architecture these various technologies
    would best fit, then went into specific solutions. We discussed classic network-based
    IPS solutions, namely Snort and Suricata. We also briefly touched on web-specific
    IPSes – in particular, WAF and RASP solutions.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了几种检测和防止入侵事件的方法。我们首先讨论了这些各种技术在我们的架构中最适合的位置，然后进入了具体的解决方案。我们讨论了经典的基于网络的IPS解决方案，即Snort和Suricata。我们还简要涉及了特定于Web的IPS，特别是WAF和RASP解决方案。
- en: In our examples, we went through how an IPS (Suricata) might be used to find
    and prevent security issues, to the point of creating a custom rule to detect
    or prevent telnet sessions. Passively collecting traffic for hardware and software
    inventories, as well as security issues, was illustrated using P0f. Finally, we
    used Zeek to take our collected data, and both collect and compute metadata to
    make that data more meaningful. Zeek in particular is extremely useful for drilling
    into network traffic to find those unusual situations that might indicate a security
    event or an operational problem.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的示例中，我们介绍了IPS（Suricata）如何被用来查找和防止安全问题，甚至创建自定义规则来检测或防止telnet会话。使用P0f来 passively收集流量进行硬件和软件清单，以及安全问题的示例也得到了说明。最后，我们使用Zeek来获取我们收集的数据，并收集和计算元数据，使数据更有意义。特别是Zeek非常有用，可以深入研究网络流量，以找到可能指示安全事件或操作问题的异常情况。
- en: In the next chapter, we'll expand on this approach further, moving from a more
    passive collection model to using "honeypot" approaches, using network-based "deception"
    to find malicious hosts with extremely high fidelity.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将进一步扩展这种方法，从更被动的收集模型转向使用“蜜罐”方法，利用基于网络的“欺骗”来高度准确地找到恶意主机。
- en: Questions
  id: totrans-316
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: 'As we conclude, here is a list of questions for you to test your knowledge
    regarding this chapter''s material. You will find the answers in the *Assessments*
    section of the *Appendix*:'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，这里有一些问题供您测试对本章材料的了解。您将在*附录*的*评估*部分找到答案：
- en: If I suspected a data exfiltration event was occurring using an "unknown" TLS
    version to a specific country, which tool should I use to find what internal hosts
    were affected?
  id: totrans-318
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我怀疑发生了数据外泄事件，并且使用了“未知”的TLS版本到特定国家，我应该使用哪个工具来查找受影响的内部主机？
- en: If you know that you have a large contingent of Windows client machines using
    the PuTTY SSH client, how could you inventory those without searching each machine's
    local storage?
  id: totrans-319
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您知道您有大量使用PuTTY SSH客户端的Windows客户端机器，您如何进行清点而不搜索每台机器的本地存储？
- en: Why would you decide to place an IPS on the inside network or the actual firewall?
  id: totrans-320
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为什么您决定将IPS放在内部网络或实际防火墙上？
- en: Further reading
  id: totrans-321
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'To learn more on the topics covered in this chapter, you can refer to the following
    links:'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章涵盖的主题上了解更多信息，您可以参考以下链接：
- en: 'SELKS installation: [https://github.com/StamusNetworks/SELKS/wiki/First-time-setup](https://github.com/StamusNetworks/SELKS/wiki/First-time-setup)'
  id: totrans-323
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SELKS安装：[https://github.com/StamusNetworks/SELKS/wiki/First-time-setup](https://github.com/StamusNetworks/SELKS/wiki/First-time-setup)
- en: 'Security Onion installation: [https://docs.securityonion.net/en/2.3/installation.html](https://docs.securityonion.net/en/2.3/installation.html)'
  id: totrans-324
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Security Onion安装：[https://docs.securityonion.net/en/2.3/installation.html](https://docs.securityonion.net/en/2.3/installation.html)
- en: 'Suricata installation (6.0.0): [https://suricata.readthedocs.io/en/suricata-6.0.0/install.html](https://suricata.readthedocs.io/en/suricata-6.0.0/install.html)'
  id: totrans-325
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Suricata安装（6.0.0）：[https://suricata.readthedocs.io/en/suricata-6.0.0/install.html](https://suricata.readthedocs.io/en/suricata-6.0.0/install.html)
- en: 'Suricata documentation: [https://suricata.readthedocs.io](https://suricata.readthedocs.io)'
  id: totrans-326
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Suricata文档：[https://suricata.readthedocs.io](https://suricata.readthedocs.io)
- en: 'Snort documentation: [https://www.snort.org/documents](https://www.snort.org/documents)'
  id: totrans-327
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Snort文档：[https://www.snort.org/documents](https://www.snort.org/documents)
- en: 'Snort rules: [https://snort.org/downloads/#rule-downloads](https://snort.org/downloads/#rule-downloads)'
  id: totrans-328
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Snort规则：[https://snort.org/downloads/#rule-downloads](https://snort.org/downloads/#rule-downloads)
- en: 'JA3 fingerprinting: [https://ja3er.com](https://ja3er.com)'
  id: totrans-329
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JA3指纹识别：[https://ja3er.com](https://ja3er.com)
- en: '[https://engineering.salesforce.com/tls-fingerprinting-with-ja3-and-ja3s-247362855967](https://engineering.salesforce.com/tls-fingerprinting-with-ja3-and-ja3s-247362855967)'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://engineering.salesforce.com/tls-fingerprinting-with-ja3-and-ja3s-247362855967](https://engineering.salesforce.com/tls-fingerprinting-with-ja3-and-ja3s-247362855967)'
- en: 'HASSH: [https://github.com/salesforce/hassh](https://github.com/salesforce/hassh)'
  id: totrans-331
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HASSH：[https://github.com/salesforce/hassh](https://github.com/salesforce/hassh)
- en: 'OpenRASP: [https://github.com/baidu/openrasp](https://github.com/baidu/openrasp)'
  id: totrans-332
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OpenRASP：[https://github.com/baidu/openrasp](https://github.com/baidu/openrasp)
- en: 'ModSecurity: [https://github.com/SpiderLabs/ModSecurity/wiki/Reference-Manual-(v2.x)modsemodse](https://github.com/SpiderLabs/ModSecurity/wiki/Reference-Manual-(v2.x)modsemodse)'
  id: totrans-333
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ModSecurity：[https://github.com/SpiderLabs/ModSecurity/wiki/Reference-Manual-(v2.x)modsemodse](https://github.com/SpiderLabs/ModSecurity/wiki/Reference-Manual-(v2.x)modsemodse)
- en: 'WAF services on load balancer: [https://www.haproxy.com/haproxy-web-application-firewall-trial/](https://www.haproxy.com/haproxy-web-application-firewall-trial/)'
  id: totrans-334
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 负载均衡器上的WAF服务：[https://www.haproxy.com/haproxy-web-application-firewall-trial/](https://www.haproxy.com/haproxy-web-application-firewall-trial/)
- en: 'Zeek documentation: [https://docs.zeek.org/en/master/](https://docs.zeek.org/en/master/)'
  id: totrans-335
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Zeek文档：[https://docs.zeek.org/en/master/](https://docs.zeek.org/en/master/)
- en: 'Security Onion: [https://securityonionsolutions.com/software](https://securityonionsolutions.com/software)'
  id: totrans-336
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Security Onion：[https://securityonionsolutions.com/software](https://securityonionsolutions.com/software)
