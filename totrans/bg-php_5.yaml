- en: Chapter 5. Building a PHP Web Application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we learned how to accept a user's input, and how to
    access it via PHP. We also learned the basics of using MySQL databases, and applied
    all of the principles of the previous chapters into a mini app that adds users
    to a database via a web form.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will be learning and applying OOP concepts in a framework.
    We will cover error reporting using the Whoops library and will learn how to handle
    those errors. We will also cover how to manage and structure our application in
    a framework.
  prefs: []
  type: TYPE_NORMAL
- en: 'By the end of this chapter, you will be able to:'
  prefs: []
  type: TYPE_NORMAL
- en: Apply OOP concepts in a framework environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Structure files and folders to make a framework
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Describe how a framework interacts with a data source
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Build a framework using the MVC design pattern
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Build a CRM application to manage contacts on your framework
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building an application will require us to know about the underlying framework
    and how we can create the application using the MVC architecture style of building.
    A PHP framework is a collection of folders and files designed to promote code
    reuse organization; the folders and files provide a common code base to build
    applications on top of. Through these chapters, you will learn how to build such
    a framework.
  prefs: []
  type: TYPE_NORMAL
- en: 'A common design pattern that we will use throughout this book is called CRUD
    - an acronym that means:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Create**: Creating a new MySQL record'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Read**: Reading records from a database'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Update**: Updating a MySQL record'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Delete:** Deleting a MySQL record'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CRUD sits at the heart of any practical application that is built in a framework.
    Almost everything can be broken down into CRUD.
  prefs: []
  type: TYPE_NORMAL
- en: An example of CRUD would involve creating new content, reading the content,
    and having prompts to update and delete the content.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will be using a design pattern known as Model View Controller (MVC), which
    is a way to structure the directories and files upon which your framework is based.
    Structuring and examples will be shown using an MVC structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Building a PHP Web Application](graphics/5_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: A representation of Model View Controller (MVC)
  prefs: []
  type: TYPE_NORMAL
- en: 'PHP Standard Recommendation (PSR) sets a style guide for formatting your code,
    allowing for maximum compatibility with other code that you may come into contact
    with: [http://www.php-fig.org/psr/](http://www.php-fig.org/psr/).'
  prefs: []
  type: TYPE_NORMAL
- en: Concepts of OOP in a Framework Environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is a good idea to have a solid understanding of PHP object-oriented programming
    (OOP) concepts before starting to learn how a framework is constructed. One thing
    that all PHP frameworks have in common is that they are first and foremost built
    on top of OOP PHP; essentially, they are just a way to organize your files.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will learn about the following OOP concepts:'
  prefs: []
  type: TYPE_NORMAL
- en: Namespaces
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use Statements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Classes and Objects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Methods
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Access Modifiers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Namespaces
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Namespacing can be compared to a folder structure. The primary purpose of a
    namespace is to allow classes to have the same name, but under different namespaces.
  prefs: []
  type: TYPE_NORMAL
- en: Namespacing is case-sensitive. A namespace should start with a capital letter
    and use camel case thereafter - the beginning of each word should start off lowercase,
    with each subsequent word in uppercase.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example: `mySpace`'
  prefs: []
  type: TYPE_NORMAL
- en: An example of this would be if you had a class called `Post` and, in another
    folder, you had a class called `Post`. Normally, you would not be able to use
    these in the same file, as the classes would conflict with each other; however,
    if each of the classes has a namespace of the folder in which they are stored,
    then you can use them in the same file.
  prefs: []
  type: TYPE_NORMAL
- en: The file file1.txt can exist in both the directory `/home/packt and in /home/other`,
    but two copies of file1.txt cannot co-exist in the same directory. In addition,
    to access `file1.txt` outside of the `/home/packt` directory, we must prepend
    the directory name to the filename, using the directory separator to get `/home/packt/file1.txt`.
    This same principle extends to namespaces in the programming world.
  prefs: []
  type: TYPE_NORMAL
- en: You cannot use two classes within the same file, as they will conflict with
    each other. To get around this, you can give one of the classes an alias. Think
    of an alias as a nickname for that class.
  prefs: []
  type: TYPE_NORMAL
- en: 'A namespace is making a reference to the location within the file structure
    in the `app/controllers` directory: the namespace `App\Controllers` is the path
    to its location. Notice the use of the backslash character when writing a namespace:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Namespace App, Controllers, and Use Statements
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`Use` statements are a way to import a class, rather than having to manually
    include them in. `use` statements are used in conjunction with composer.'
  prefs: []
  type: TYPE_NORMAL
- en: 'As an example of using a `use` statement in a class, if we want to use a `Contact`
    model, we can place the following code at the top of the class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'When you have a class called `Contact` that has a namespace of `App\Models,`
    to import it, you can use `App\Models\Contact. Y`ou can then refer to this class
    by calling `Contact;` you don''t have to refer to its full namespace, as it''s
    already been imported:'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We use composer for auto-loading files based on their namespaces, and we will
    cover this in detail in a later chapter.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Defining Classes and Objects Using Namespaces
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We learned how to create classes and objects in the previous chapter. We will
    now see how to create classes and objects using namespaces.
  prefs: []
  type: TYPE_NORMAL
- en: 'An object is a class that has been instantiated; for instance, if you look
    at the last line of the last example, a class called `contact` has been instantiated
    by using the new operator, followed by the class name. This has created a new
    object; what this means is that the new object has access to all of the methods
    of the class and public properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Methods
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A method is a function that resides inside of a class. In reality, the only
    difference between a method and a function is the naming convention, and that
    a method happens to live inside of a class.
  prefs: []
  type: TYPE_NORMAL
- en: 'Methods are used to retrieve and pass information to or from a class, and to
    the file where the class is being instantiated:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Access Modifiers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Access modifiers are a way to grant and restrict access to the properties and
    methods of a class. There are three access modifiers: `public`, `protected,` and
    `private`. These can be compared to gatekeepers, letting data in or preventing
    data from entering:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Public**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defining a property or method as `public` means that the class, the extended
    class, and the file where a class is instantiated all have access to read and
    write the method or property.
  prefs: []
  type: TYPE_NORMAL
- en: '**Protected**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A `protected` method or property can only be accessed by the class, or an extended
    class.
  prefs: []
  type: TYPE_NORMAL
- en: '**Private**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A `private` property or method can only be accessed from within the class where
    it is defined.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A `private` property cannot be accessed from outside of that class, and it cannot
    be accessed from an extended class.
  prefs: []
  type: TYPE_NORMAL
- en: The following are examples of how to make use of the various access modifiers.
    You will see the `public`, `protected`, and `private` properties in use when defining
    a property named `$token:`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![Access Modifiers](graphics/5_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Folder Structure
  prefs: []
  type: TYPE_NORMAL
- en: '**Explanation:**'
  prefs: []
  type: TYPE_NORMAL
- en: 'What we have here is the file structure of the framework that we will be building
    over the next few chapters:'
  prefs: []
  type: TYPE_NORMAL
- en: The **app** folder is where your application will be held. The **app** holds
    your controllers, your models, and your views. As mentioned previously, this is
    part of the MVC structure.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **config** file is where the site name and database credentials are stored.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **system** folder holds the core files of the framework.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **vendor** directory is a composer directory, containing any third-party
    packages installed via composer. It also stores composer itself.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **webroot** folder is your document root; this is what your browser reads
    from.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Later in this chapter, we will be covering a design pattern named MVC.
  prefs: []
  type: TYPE_NORMAL
- en: The following example uses this design pattern, which is simply a way of organizing
    your file structure.
  prefs: []
  type: TYPE_NORMAL
- en: In this example, we will pass the details of a single contact from a class that
    has been instantiated, and display them in a browser.
  prefs: []
  type: TYPE_NORMAL
- en: For now, notice how each of the OOP principles is employed in each file, and
    see what you recognize.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This code will not work as vanilla PHP, as the structure of a framework is required.
    This book will teach you how (and why) these components work together the way
    that they do. The purpose of showing this example is to see OOP concepts in action
    in a framework setting.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is an example of a controller:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Access Modifiers](graphics/5_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Contacts Controller
  prefs: []
  type: TYPE_NORMAL
- en: First, there is a `namespace`, which is how composer knows to load the file.
    Without composer, a manual include would be required, using an `include` or `require`
    known as lazy loading, to prevent irrelevant files from being loaded and improve
    performance.
  prefs: []
  type: TYPE_NORMAL
- en: 'Following the `namespace` and `use` statements is the class definition (the
    blueprint of the class). Here, we are naming the class `Contacts,` and we are
    extending the functionality that is already present is the `BaseController` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Access Modifiers](graphics/5_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Contacts Model
  prefs: []
  type: TYPE_NORMAL
- en: '**Explanation:**'
  prefs: []
  type: TYPE_NORMAL
- en: The file seen here is the model; the `Contact` model was instantiated in the
    previous example.
  prefs: []
  type: TYPE_NORMAL
- en: Again, the model contains a `namespace.`
  prefs: []
  type: TYPE_NORMAL
- en: No `use` statement is required, as in this example, the data is contained within
    the class definition.
  prefs: []
  type: TYPE_NORMAL
- en: 'If the data was stored in a database or another data source, then the class
    would need to extend the `BaseModel`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Access Modifiers](graphics/5_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Contact View
  prefs: []
  type: TYPE_NORMAL
- en: 'Minimal PHP is used in the view; data is usually passed to a view in an array
    or a variable, and styling is dictated:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Access Modifiers](graphics/5_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Browser View
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In your early years as a developer, you may find that you frequently forget
    to use a semicolon; in fact, David, one of our book creators, frequently recalls
    how he once spent nearly two whole days trying to resolve a bug in one of this
    first projects, only to find that the problem was a missing semicolon.
  prefs: []
  type: TYPE_NORMAL
- en: When working in a framework environment, forgetting to use the right case can
    be a lot like forgetting to use the semicolon.
  prefs: []
  type: TYPE_NORMAL
- en: 'This does not need to be the case; you can make use of software specialist
    add-ons, known as PHP linters, that will check for problems like forgetting to
    use the correct case. PHP linters highlight the code before you run the script.
    You will find such add-ons in IDEs such as PHP Storm, or in text editors like
    Sublime Text or Atom:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.jetbrains.com/phpstorm/](https://www.jetbrains.com/phpstorm/)
    made by Jet Brains'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://www.sublimetext.com/](https://www.sublimetext.com/) made by Sublime
    HQ'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://atom.io/](https://atom.io/) made by Atom'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Structure of a Framework
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At its core, MVC is a separation of concerns, so all data sources come from
    the model or a database resource. Your controller controls the flow of the application
    and resides in a controllers directory. All of the markup lives inside what is
    known as the view. Together, they form the Model View Controller (MVC) design
    pattern.
  prefs: []
  type: TYPE_NORMAL
- en: '![Structure of a Framework](graphics/5_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Framework Folder and File Structure
  prefs: []
  type: TYPE_NORMAL
- en: If you need to modify a data source, you know to go to the model to do it; if
    you want to change how it looks, you know to go to the view; and to change the
    control of the application, you go to the controller.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that the model is not restricted to pulling data from a database; this
    is a common misconception. Our earlier example highlights this.
  prefs: []
  type: TYPE_NORMAL
- en: Other sources of data in a model could be static data or data read from a file
    or an external feed like an RSS.
  prefs: []
  type: TYPE_NORMAL
- en: '**Explanation:**'
  prefs: []
  type: TYPE_NORMAL
- en: When working with a framework, much of your application will be built using
    the MVC design pattern.
  prefs: []
  type: TYPE_NORMAL
- en: 'Both a model and a controller will extend functionality from the `BaseModel`
    and `BaseController` stored in the system directory. You will likely not need
    to change these frequently. Any application that is built on top of the framework
    will be largely contained in the model, controllers, and views directories that
    are stored in the `App` directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Structure of a Framework](graphics/5_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Contacts Controller
  prefs: []
  type: TYPE_NORMAL
- en: Here, the controller is communicating with the model. The model is providing
    the controller with a source of data. The controller is the brain of the structure,
    and here, it is a series of instructions for when to serve the data source and
    how to behave under what conditions.
  prefs: []
  type: TYPE_NORMAL
- en: The contact class has a function that will be called when the user visits a
    certain URI (how this works, and why this works, will be covered in later chapters);
    this initiates contact with the model.
  prefs: []
  type: TYPE_NORMAL
- en: In this example, the controller is not concerned with what is contained in the
    data source; however, it can be programmed to examine this data.
  prefs: []
  type: TYPE_NORMAL
- en: 'After the data is obtained by the controller, it is stored and passed to the
    view:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Structure of a Framework](graphics/5_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Contacts Model
  prefs: []
  type: TYPE_NORMAL
- en: '**Explanation:**'
  prefs: []
  type: TYPE_NORMAL
- en: The contacts model has a data source that contains the knowledge of an application,
    but on its own, it cannot make use of this knowledge. It can only give instructions
    to manage the knowledge. The CRUD principle comes into play in a model, where
    there are methods to create, read, update, and delete from the Model's source
    of knowledge.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this case, the data source is an array of names:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Structure of a Framework](graphics/5_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Contact View
  prefs: []
  type: TYPE_NORMAL
- en: In the view file, you will see that the data is taken as it is served; in this
    case, the view is served an array of names. These names are thorough, and displayed
    with any markup and styling applied.
  prefs: []
  type: TYPE_NORMAL
- en: In a framework, the view is part of a wider structure that applies global elements
    such as headers and footers in your web applications, as well as CSS and JavaScript
    files.
  prefs: []
  type: TYPE_NORMAL
- en: It is possible to loop through an array, but all processing should be completed
    in the controller, when possible.
  prefs: []
  type: TYPE_NORMAL
- en: '![Structure of a Framework](graphics/5_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Browser View
  prefs: []
  type: TYPE_NORMAL
- en: You have now identified how OOP principles can be used in an MVC framework example.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's put some of these principles into practice.
  prefs: []
  type: TYPE_NORMAL
- en: 'Activity: Adding Contacts to a Directory'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You need to add contacts to the directory that you are creating, stored as an
    array of names. The app should return an array of contacts when requested.
  prefs: []
  type: TYPE_NORMAL
- en: The reason for this is to gain a better overall understanding of how to use
    OOP in practical applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow these steps to perform this activity:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a directory structure.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a directory named `Contacts.`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In this directory, create a directory named `App.`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Within the `App` directory, create three more directories:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Models`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`views`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Controllers`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Within the Models directory, create a file named `Contact.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `Contact.php` file, open PHP, and create a namespace:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Define a class called `Contact`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'In this class, define a public method called `getContacts();` it should return
    an array of names:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Within the Controllers directory, create a file named `Contacts.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the `Contacts.php` file, open PHP, and add a `namespace:`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Import the Contact model with a `use` statement:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'An alias may be used in this scenario, written as follows (assuming that an
    alias for Contact would be `Name`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Define a class named Contacts:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a public function called `index()`, and within that method, create a
    local variable called `contacts`, and create a new instance of the `contact` class
    (this is known as the instantiation of a class):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Create a local variable called `contacts` using the assignment operator, call
    the `contacts` object that you created an instance of in the previous step, add
    -> (this is known as an arrow notation), and call the method `getContacts():`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have created a model and a controller, where the controller
    `Contacts` class instantiates the model `Contact` class. To achieve this, we created
    a basic MVC folder structure, separating the controls from the data source. We
    successfully used a `namespace`, a `use` statement, a method, an access modifier,
    an object, and a class. We have now witnessed the power of a framework.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will create a working framework of your own. We will
    be looking at how to set up a project development environment, graceful error
    reporting, and handing using the Whoops library. We will also be implementing
    the configuration classes, default classes, and how to set up routing.
  prefs: []
  type: TYPE_NORMAL
