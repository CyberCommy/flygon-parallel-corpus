- en: Troubleshooting and Workplace Diplomacy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will examine the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: What is troubleshooting?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Isolating the real issue
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Giving estimates and deciding on next steps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using `ss`, `iftop`, `tcpdump`, and others for network issues
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using `curl`, `wget`, and `openssl` for remote web issues
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using `itop`, `top`, and `vmstat` for local resource issues
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using `ps`, `lsof`, `strace`, and `/proc` for service issues
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Making a copy of problems for later debugging
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Temporary solutions and when to invoke them
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Handling irate developers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Handling irate managers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Handling irate business owners
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we're going to start winding down on the technical aspects
    of what we've looked at. We're not going to look at new services and software
    too much, and the software we do use is going to be mostly those tools we've already
    covered in other areas (only here we will talk about when and how you might use
    them).
  prefs: []
  type: TYPE_NORMAL
- en: Troubleshooting is the main focus of this chapter, with a lot of emphasis on
    doing the communication aspect of troubleshooting too. You can be the best engineer
    in the world, a literal code-whisperer, and yet if you're not able to relay your
    findings in a way that someone else can understand, all your ability amounts to
    naught.
  prefs: []
  type: TYPE_NORMAL
- en: When you troubleshoot something, in extra-time or under-fire, you've got to
    make sure that what you learn is properly noted (even if it's on a scrap of paper
    initially, and in a document store such as Confluence later) so that, should it
    happen again, someone who isn't you will be able to work out what's going on faster,
    and hopefully fix the issue sooner.
  prefs: []
  type: TYPE_NORMAL
- en: While you troubleshoot, it's also worth keeping those around you informed of
    what's happening. I've seen this done in various ways over the years, but a more
    common-place solution to keeping people in the picture these days seems to be
    a Rocket.Chat or Slack channel that you can post announcements and information
    into. That way, anyone can keep abreast of the situation, even if it's only due
    to a passing interest.
  prefs: []
  type: TYPE_NORMAL
- en: And, yes, there will be occasions where you're troubleshooting that someone
    wants an update every five minutes on what's going on. This can be a client, a
    manager, a developer, or a business owner, but it's important to keep your cool
    in these situations, not get stressed, and ensure you keep your answers succinct
    and to the point, without too much guesswork.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: All of what we do in this chapter can be accomplished using a single node; in
    this case, I'm using a CentOS machine.
  prefs: []
  type: TYPE_NORMAL
- en: 'Feel free to use the `Vagrantfile` to play along:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: What is troubleshooting?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Troubleshooting**, or **debugging** (more frequently used for specific software),
    is the act of trying to work out what''s going wrong with a solution right now
    or what went wrong historically during an incident. That incident can be anything
    from the entire network going down in a data center, to working out why that one
    Docker container suddenly decided it was going to bounce itself up and down like
    a tennis ball.'
  prefs: []
  type: TYPE_NORMAL
- en: No software is perfect. If it were, we'd all be out of jobs, and it's because
    of this simple statement of fact that you will almost inevitably find yourself
    in a situation at some point in your life where you're faced with a broken system
    and there's someone screaming at you to fix it.
  prefs: []
  type: TYPE_NORMAL
- en: You can do everything in your power before this point to try to ensure you never
    experience something such as a production outage, including using multiple environments
    and testing changes through a promotion pipeline. But I can guarantee that you'll
    never account for everything, and, as most companies will tell you, issues can
    and will happen in production too. You just have to hope that when issues do happen,
    you're not being woken up at two in the morning to fix them, because you're the
    on-call engineer.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When troubleshooting an issue, there''s some important first steps to take:'
  prefs: []
  type: TYPE_NORMAL
- en: Get a drink of your choice, or ask someone nicely to make one for you (if the
    incident is so serious it requires an immediate immediate response). Try to avoid
    this drink being alcoholic. I usually go for tea.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ensure you know what raised the alert. Generally, this will be from a monitoring
    system, or a panicked shift engineer on the other end of the phone. This is a
    good jumping-off point for the next step.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Get the impact of the problem; for example, does it mean that the website is
    down and no one can do their Christmas shopping, or is the system that routes
    incoming support calls down? This will help you to assess the importance of the
    issue.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There is a difference between people not being able to call into the support
    desk at three in the morning, and a traffic routing system for a small municipality
    being down. Surprisingly, though, some people will panic the exact same amount,
    no matter the scale of the issue.
  prefs: []
  type: TYPE_NORMAL
- en: Once these things are established, move on to isolating the real issue.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Isolating the real issue
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you're troubleshooting, or you've been presented with an obvious problem
    and it's up to you to work out what's going on, it's important not to jump to
    conclusions. It can be extremely easy to see a problem, such as a website being
    down, and immediately think, *Ah, I've seen this before; it was that time the
    database had too many rows to count and the website slowed to a crawl—I'll look
    there*.
  prefs: []
  type: TYPE_NORMAL
- en: Lightning does strike twice in computing, especially when root causes haven't
    been addressed, but it's an anti-troubleshooting technique to immediately assume
    you know the cause of a problem, based on tentative similarities with past issues.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After you've got as much information about the problem, either from your own
    cursory glance of the symptoms (the website is down) or the support person who
    pestered you with it, it's time to get to the issue of isolation.
  prefs: []
  type: TYPE_NORMAL
- en: Be sure to recreate the issue for yourself. It's an important and often overlooked
    step that should be taken by anyone looking into an issue. If you have the means
    to recreate a problem, you should start by doing so, even if it's as simple as
    going to the company's URL in your browser and checking for yourself that the
    site doesn't load. This is important, as it gives you a base from which to start,
    and you can use the same series of steps every time you make a change, or believe
    you've fixed the problem. If you can confirm that the problem exists, work to
    fix the said problem. Then, prove it's fixed for at least you, after which you
    can start to engage other people in the process and ask them to confirm the same.
  prefs: []
  type: TYPE_NORMAL
- en: Stabbing around in the dark doesn't only put you at risk of losing fingers,
    but it also makes it incredibly hard to determine when, or if, a chance you've
    made has actually had an impact.
  prefs: []
  type: TYPE_NORMAL
- en: You might also find that in recreating the issue for yourself, you come across
    some pertinent information that hasn't been readily shared with you. "The website
    is down" is a vague statement, but "the website is timing out" is more informative,
    and if you go to a site to find it's been hijacked by someone using it to share
    pictures of their cat, then it might not be down, but the URL could be compromised.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Once the issue is recreated, you can get down to the meat of the work:'
  prefs: []
  type: TYPE_NORMAL
- en: To begin, you need to know which boxes are likely to be connected to the problem,
    either directly, or by one degree of separation. For example, if the company website
    is down, I would immediately log on to whichever system hosted the website, while
    trying to find information on any systems that supplied it, such as messaging
    brokers or databases.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you don't know what the topology of the deployment looks like off the top
    of your head, and you can't find a document in your internal systems that details
    the layout, it can be a good idea to engage others in the process of troubleshooting.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You might not feel entirely comfortable about waking someone else up in the
    middle of the night, or pestering someone at their desk, but if it would take
    you literally hours to reverse-engineer a setup, and it's definitely worth considering
    circumventing this effort and going to the source instead. If the other person
    is reasonable, they'll probably offer their knowledge, though they may be grumpy
    about it, and you'll have to apologise the next time you see them.
  prefs: []
  type: TYPE_NORMAL
- en: Once you are sure you've got all the systems you might need to check in your
    head, or better yet, on a notepad, you should begin the isolation. Depending on
    how lucky you are, this can be a quick or a slow process.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Using the example of web servers and websites being down, you might try to
    SSH to your company website boxes and find that you can''t. This could mean one
    of two things straight away:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There's a network problem hampering communication
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The box is down
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These issues may seem wide-ranging, but they're easy to isolate. The next step
    here would be trying to SSH to another box, preferably in the same network, and
    if you can connect to it you've narrowed the field of what the issue might be.
    It would suggest that the first box is down, or experiencing personal network
    issues.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Assuming you can't get to another box, you should try another couple to be sure,
    and if you can't get to them either, it might be time to get your network team
    involved (or if you have the power to do so, logging on to the switches or routers
    yourself).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you've determined that it's one or two boxes having a problem, you might
    have to get a data center engineer into the situation (or drive down yourself,
    if it's your job) and plug into the box directly. If it's a cloud solution, it'll
    be time to break open whatever console you have access to and check for obvious
    issues that way.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once you're on the box, it's a good idea to check that the same issues can be
    recreated locally on the box itself. We'll talk about ways you might do this in
    a little while.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you work through your troubleshooting steps and determine that the local
    box isn't the issue, it's time to work outwards and test the other parts of the
    solution that you haven't checked yet, or might not have direct control over.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: People have different techniques when it comes to troubleshooting, but I like
    to check the stuff I have direct access and control over first. There's a good
    chance for certain issues that problems are being caused by external factors (such
    as your distributed content delivery provider having problems), but in cases such
    as these, it's a good idea to try to prove external factors as much as possible
    before you get on the phone yourself and start blaming other people.
  prefs: []
  type: TYPE_NORMAL
- en: Check the next most likely candidate for the source of the issue (the load balancer
    in front of the web server maybe, or the database behind it) and carry on until
    you find something that isn't behaving as it should.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Giving estimates and deciding on next steps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'While you''re working through the troubleshooting process, it''s a great idea
    to make notes as you go, and keep track of significant times during the incident:'
  prefs: []
  type: TYPE_NORMAL
- en: What time was the incident first reported?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What time did you get into a position to start troubleshooting?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What time did you isolate the issue?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What time was pertinent information discovered?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: And so on
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Another thing to be aware of is the **estimate**. Estimates are something that
    higher-ups like to hear, in a lot of cases, because it means they can pass the
    estimates on to their own higher-ups, or to customers.
  prefs: []
  type: TYPE_NORMAL
- en: If you have no clear idea what's causing an issue yet, you can't give a reliable
    estimate, and you should explain this. However, if you've managed to isolate the
    issue and found it to be caused by something such as a stored procedure running
    against a database, it may be possible to give a rough estimate in that situation.
    Deciding on the next steps can be tricky due to various factors, as we'll see
    here.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using the example from the last recipe, you've discovered that the website you're
    looking at is going slow because of a stored procedure running against the database.
    You've determined that this stored procedure runs weekly, and that it ran successfully
    last Sunday, where it took about an hour to complete before everything went back
    to normal, and no alarms were triggered.
  prefs: []
  type: TYPE_NORMAL
- en: Now, though, it's been an hour and a half, with no obvious sign of the stored
    procedure finishing its run. You should note what you've found, make a note of
    the time that you found it, and inform whoever you need to that you believe you've
    found the source of the problem.
  prefs: []
  type: TYPE_NORMAL
- en: Try to avoid using phrases such as "it's definitely this" or "I've found the
    problem," because those kinds of absolutes only succeed in making you look foolish
    and potentially making other people angry when they turn out to be red herrings.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Estimates can be easy, or they can be incredibly difficult. I wouldn''t advise
    pulling numbers out of the air, as they can make you seem incompetent when you
    end up waving at your self-imposed deadlines as they fly by. What you can check,
    though, are historical records:'
  prefs: []
  type: TYPE_NORMAL
- en: If your stored procedure is running and taking a while, start by looking back
    through your logs and trying to determine how long the last few runs took. The
    more data the better.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you've got logs going back two years, and you can see that the stored procedure
    took a few minutes to run at the beginning of its life, when the company was small
    and the database was smaller, then you might start to build a picture of a job
    taking longer to run, the larger the database gets. You could confirm this by
    checking each run in a chart and seeing whether the increase in the time taken
    correlates with size. At this point, you might be able to pull a figure out that
    you know will be roughly when the job will finish.
  prefs: []
  type: TYPE_NORMAL
- en: If, however, those historic logs show that the stored procedure always runs
    at the same time, for the same amount of time, then you might start to believe
    something else has caused the sudden uptick in processing time. You should note
    this, and decide what to do next.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It goes without saying, but checking specific process logs (if they exist) is
    also a must in situations such as this, as is reading through and understanding
    what the script or stored procedure might do. Again, if you need to get others
    involved, make a judgement call, but don't try and shoulder absolutely everything
    yourself, as this only results in more pressure and more stress.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this situation, you have to start thinking about factors outside the database
    that might be affecting processing time:'
  prefs: []
  type: TYPE_NORMAL
- en: Has there been any recent work that might have changed how the stored procedure
    works (check Git logs)?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Has anyone logged on to the box recently and made changes (check audit logs)?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Is there anything else running on the database server that could be impacting
    performance (check top for process information)?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It's up to you to decide on the priority of these things and work through them
    one at a time.
  prefs: []
  type: TYPE_NORMAL
- en: 'Back to the estimates problem: if you''ve determined that the cause of the
    problem is a code change, and you need to roll back to an earlier version, then
    it''s not impossible to again provide an estimate. You should know how long a
    package is going to take to build, and how soon it will be deployed to boxes before
    a service can be restarted.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ultimately, though, the adage of "*it takes as long as it takes"* is true, though
    it's best not to say this to people pestering you for answers. Let them down more
    gently, and assure them you're working on it... show them your notes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A lot of places have timetables for what''s supposed to happen during an incident,
    for example:'
  prefs: []
  type: TYPE_NORMAL
- en: If the issue is ongoing within an hour, inform only designated individuals
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the issue is taking longer than an hour or up to two, inform stakeholders
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the issue looks likely to leave systems offline for longer, arrange meetings
    every thirty minutes to keep stakeholders updated
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Though not consistent anywhere I've worked, good companies have plans in place
    to make sure everyone is on the same page, and better places don't invite the
    troubleshooting engineers to these meetings, instead designating a liaison who
    gets the information from the engineers while they're working.
  prefs: []
  type: TYPE_NORMAL
- en: Using ss, iftop, tcpdump, and others for network issues
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we're going to list a few tools that can be used for isolating
    and debugging network issues, most of which can be found in the default repositories
    of common distributions.
  prefs: []
  type: TYPE_NORMAL
- en: A lot of these, if not all, where covered before in this book, but it's a good
    idea to repeat these tools over and over again, because 20% of what you'll find
    yourself doing in a troubleshooting scenario is trying to remember which tool
    is good for troubleshooting this particular problem.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, feel free to try out some or all of the commands listed (or
    even go off script and have a read of the relevant man pages). We will be using
    the CentOS VM.
  prefs: []
  type: TYPE_NORMAL
- en: 'SSH to your CentOS VM:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Install two of the tools we will be using:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We're going to run through our tools in turn.
  prefs: []
  type: TYPE_NORMAL
- en: Ping
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you think you''ve got a network problem, the `ping` command is one of the
    oldest tools available to you, and one of your best friends:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Start by making sure your networking is up, pinging your loopback address and
    your own node IP. We will check whether the localhost is working:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, check your `Eth1` address:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that you''re sure your networking stack is up, check that you can talk
    to your router. If you don''t know your router''s IP, grab that first:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'We will now ping that IP:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Awesome! We're relatively sure that our actual packet routing is fine.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, check whether your DNS works using the `ping` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Cool, so we know we can resolve domain names to IPs.
  prefs: []
  type: TYPE_NORMAL
- en: Should name resolution not work for some reason, try checking that your `/etc/resolv.conf`
    actually has a `nameserver` entry in it, and try pinging that server to see whether
    you can actually reach it for communication. DNS resolution failures can have
    weird knock-on effects (such as slow SSH connections on some default installations).
  prefs: []
  type: TYPE_NORMAL
- en: Ping is great, and many issues that are encountered can be tracked down immediately,
    thanks to its simplicity.
  prefs: []
  type: TYPE_NORMAL
- en: ss
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `ss` is great for local port checking, as I might have made obvious for
    the number of times we''ve used it throughout this book so far:'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you have a web server on your machine, and you know for a fact it should
    be running on port `80`, you might find yourself using the `fish` arguments first,
    regardless:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: We do this immediately in some situations, just to get an overview of what the
    box thinks it's doing in terms of IP networking.
  prefs: []
  type: TYPE_NORMAL
- en: We get to see what ports are active and listening on the box, immediately ruling
    out usual suspects (such as `22` and `25`), and we get to see connected (ESTAB)
    sessions from remote connections, in this case, my machine.
  prefs: []
  type: TYPE_NORMAL
- en: You can also run `ss` without the -n argument, if you want to see a best-guess
    at service names. I call it "best-guess" because all `ss` will do is read the
    `/etc/services` file and match a port to a name, but there's no guarantee that
    SSH is really running on `22`, instead of `2323` or something else.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also use `ss` to get a snapshot of what the machine looks like in terms
    of networking right now:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: iftop
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is the first of the tools in this recipe that's unlikely to be installed
    by default; we sometimes come to `iftop` during the troubleshooting process because
    it's great for visualization. Humans tend to like visualization. We're simple
    creatures with simple dreams, and those dreams are generally vivid in color, and
    feature confusing graphs and charts (if you're me).
  prefs: []
  type: TYPE_NORMAL
- en: 'As a result, where a computer prefers strings and structure, we tend to like
    a good representation of what it is we''re looking at, and `iftop` gives us this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'We''ve generated a bit of traffic here, to three different locations, to show
    how easy it can be to see different sources and communication:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/77681ee2-ecf3-4d5b-868c-a8ef1dc7560e.png)'
  prefs: []
  type: TYPE_IMG
- en: We went into `iftop` a lot earlier in this book, but remember that it exists!
  prefs: []
  type: TYPE_NORMAL
- en: tcpdump
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Another tool we''ve used before is `tcpdump`; it prints and saves network traffic
    for debugging later or in the moment:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Note the preceding example, where I specifically ran `tcpdump` but excluded
    SSH traffic:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: As a result, what I got was a lot of information on the ping requests from my
    second session, but, crucially, I avoided the noise from the SSH traffic. (Which
    would be extra noisy, because every time something is printed to my session, that's
    SSH traffic, meaning it would grow and grow and grow.)
  prefs: []
  type: TYPE_NORMAL
- en: 'Though if we did want to debug SSH, this is possible and quite easy, given
    that `tcpdump` lets you output to a file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: This file can then be opened and read with tools such as Wireshark: [https://www.wireshark.org/](https://www.wireshark.org/).
  prefs: []
  type: TYPE_NORMAL
- en: Using cURL, wget, and OpenSSL for remote web issues
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you''ve come to the conclusion that during your immense troubleshooting
    session that the issue you''re facing is one of the following, then some of these
    tools might be for you:'
  prefs: []
  type: TYPE_NORMAL
- en: Something to do with the connectivity to a remote site
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Something to do with the certificates associated with a remote site
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'SSH to your CentOS VM:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: cURL and OpenSSL should be universal at this point, and you can expect a system
    to have them by default.
  prefs: []
  type: TYPE_NORMAL
- en: 'Wget is a bit more elusive, and is rarely part of a default install, but it''s
    easy enough to install:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: At the moment, OpenSSL is everywhere, but due to a string of high-profile vulnerabilities,
    *cough* heartbleed *cough*, it has been forked a couple of times to produce approximations,
    though hopefully approximations with a limited number of problems. The most famous
    of these is `LibreSSL` by the OpenBSD folks, and while it's the default in that
    particular OS, it's unlikely to be the default in CentOS or Ubuntu any time soon.
  prefs: []
  type: TYPE_NORMAL
- en: 'For the examples in this recipe, we''re also going to break the trust of some
    key areas of the internet (only locally to your VM, though—don''t worry). To do
    this, you can run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We're going to run through these three programs, including examples of how you
    might use them as we go.
  prefs: []
  type: TYPE_NORMAL
- en: cURL
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you''ve ever used an open source OS, of any sort, there''s a good chance
    that cURL has been bundled alongside it, and as a result you will find its license
    agreements under the license agreements page (things such as game consoles, intelligent
    cars, and fridges usually feature a build of cURL). However, it''s generally always
    available to you on the command line, and, as a result, it''s a favorite of a
    lot of admins. This is partly because cURL features an extensive (and highly detailed)
    list of exit codes:'
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, curling the BBC results in the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: The `curl` command was successful, so we got a `0` exit code, which pretty much
    universally means OK.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can try to `curl` an illegal URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we get a `6` exit code. This is defined in the cURL manual, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Another popular flag, which you''ll see used frequently, is `-I`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'What you''re looking at are the headers from the site we''ve tried to hit.
    Instantly, this tells us a couple of things:'
  prefs: []
  type: TYPE_NORMAL
- en: We're actually getting a `301`, redirecting us to a different address
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We're hitting a `varnish` server (a popular caching server)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If we instead attempt to hit the BBC on HTTPS, and with the `www` subdomain,
    we get the following exit code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: This, crucially, is caused because cURL doesn't have access to a **Certificate
    Authority** (**CA**), as we moved the only authority on the system, at the head
    of this chapter. Helpfully, it even gives you the exit code, and details of what
    it thinks the problem is, in the output.
  prefs: []
  type: TYPE_NORMAL
- en: 'This brings us to another cURL option, `-k`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Here note that we've got a `200 (OK)` response, despite not having access to
    a CA to validate the website as being legitimate. `-k` is used to set the insecure flag,
    see the following section of the cURL documentation (available at [https://curl.haxx.se/docs/manpage.html](https://curl.haxx.se/docs/manpage.html)[):](https://curl.haxx.se/docs/manpage.html)
  prefs: []
  type: TYPE_NORMAL
- en: -k, --insecure
  prefs: []
  type: TYPE_NORMAL
- en: (TLS) By default, every SSL connection curl makes is verified to be secure.
    This option allows curl to proceed and operate even for server connections otherwise
    considered insecure.
  prefs: []
  type: TYPE_NORMAL
- en: Obviously, using `-k` isn't advisable, ideal, or practical for everyday use.
    Instead, you should ensure that your CAs are up to date and the site you're trying
    to connect to isn't fraudulent.
  prefs: []
  type: TYPE_NORMAL
- en: 'Feel free to replace your CA certificates now:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also use `curl` to download remote files by using the `-o` option (after
    you''ve replaced your CA certificates, or you will get a certificate error):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Here, we simply pulled the entire page and saved it to `index.html` locally.
  prefs: []
  type: TYPE_NORMAL
- en: cURL is also frequently used during troubleshooting and debugging to talk to
    REST APIs; this is because, from the command line, an engineer or admin can easily
    craft custom requests and see the output from the web server.
  prefs: []
  type: TYPE_NORMAL
- en: Wget
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Like cURL, Wget is a tool for talking to web servers.
  prefs: []
  type: TYPE_NORMAL
- en: 'By default, the output is quite verbose and will tell you exactly what''s happening:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we can see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`wget` resolving the website to an IP address'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Connecting and getting a `301` telling it the site has moved
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Following the site to `http://www.bbc.co.uk`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting another `301` telling the client to use HTTPS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Following the site to `https://www.bbc.co.uk`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, connecting, getting a `200`, and immediately downloading index.html
    (which it saves to `index.html.1` as we already have one from `curl`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: From this, we can deduce that the BBC could save milliseconds with each request
    if it just knocked out one of those redirects (pointing to HTTPS straight away),
    and we also learn that wget's default behaviour is to save the content locally
    (instead of spitting things to stdout like cURL).
  prefs: []
  type: TYPE_NORMAL
- en: '`wget` also features an "insecure" flag in the form of `--no-check-certificate`,
    though I don''t want to bang on about skipping certificate checks in this book
    (because they''re important).'
  prefs: []
  type: TYPE_NORMAL
- en: '`wget` is found to be ideal for downloading multiple files from websites, manipulating
    what we are downloading, and running checksum checks on the content. Personally,
    I think the flags are a little more intuitive than cURL, and it''s the default
    behaviour of downloading files locally that I find more than useful when troubleshooting.'
  prefs: []
  type: TYPE_NORMAL
- en: OpenSSL
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When it comes to certificate checking, there isn't a better tool (right now)
    than OpenSSL.
  prefs: []
  type: TYPE_NORMAL
- en: Used to create both certificates, and entire CAs, OpenSSL can also be an excellent
    troubleshooting tool for your certificate problems.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, if you want to quickly check the certificate chain of a website,
    you can use `s_client`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Here, we can see the `Root CA` (GlobalSign Root CA), followed by the `GlobalSign
    Organization Validation CA`, and finishing with the `British Broadcasting Corporation`
    certificate. It also shows us the **common name** (**CN**) of the site (`www.bbc.com`).
  prefs: []
  type: TYPE_NORMAL
- en: 'This is actually interesting, because we''re not following redirects when we
    do this, so we''re actually returning the certificates used by `bbc.co.uk` instead
    of `www.bbc.co.uk`, which look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'If you wanted the actual text representation of certificates in the chain,
    you can print these:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: First, we get the text representation of the BBC certificate, then the text
    representation of the intermediary CA.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we want to test and make sure that a secure protocol is being used, we can
    do so with simple flags:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we''ll check that the insecure `sslv3` isn''t enabled:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: This doesn't work (thankfully).
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we''ll check for `TLS1.2` support:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Phew! So, we've established that we can talk to `bbc.co.uk` and that the certificates
    we see are functional. But what if we wanted information on those certificates?
  prefs: []
  type: TYPE_NORMAL
- en: We know that we're hitting `bbc.co.uk`, and yet the certificate CN is `www.bbc.com`; logically,
    this should result in a certificate error in your browser, so why doesn't it?
  prefs: []
  type: TYPE_NORMAL
- en: Let's check!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Here, we're piping the output of our `s_client` command into OpenSSL again.
    We're then using the `x509` (certificate management tool) to output the text information
    of the cert (decoded from that splodge of text seen previously), and then we're
    grepping out for DNS.
  prefs: []
  type: TYPE_NORMAL
- en: 'Specifically, DNS usually sits under this heading:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: '**Subject Alternative Names** (**SANs**) are alternative names that this certificate
    can cover. One of these names is `bbc.co.uk`, and another is `www.bbc.co.uk`.
    There''s also a `news` one and a couple of **mobile** (**m**) entries (presumably
    for historic reasons).'
  prefs: []
  type: TYPE_NORMAL
- en: Isn't OpenSSL cool?
  prefs: []
  type: TYPE_NORMAL
- en: '...When it''s not causing mass hysteria.'
  prefs: []
  type: TYPE_NORMAL
- en: Using iotop, top, and vmstat for local resource issues
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Again, these are more tools that we've definitely covered before, but which
    can be extremely handy when it comes to troubleshooting local problems, specifically
    those around resources.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'SSH to your CentOS VM:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Install the appropriate packages:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We'll run through these tools in brief, but hopefully you've already picked
    up their basic usage from the rest of this book.
  prefs: []
  type: TYPE_NORMAL
- en: iotop
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Invoked with the following command, `iotop` displays I/O usage on a system,
    by process:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'On our system, this means that we can see very little in the way of activity
    (because the VM isn''t doing much by default):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7b19d7e3-dc42-4b9b-a098-66ddecf2ed93.png)'
  prefs: []
  type: TYPE_IMG
- en: As with `ps`, the square brackets around a thread (such as `"[kthrotld]"`, for
    example) denote kernel threads.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we wanted to see I/O in action, we could do the following in another session:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: We're specifically compressing and bandwidth, limiting the transfer of the preceding
    file. We've also got a -P in there, but that's mostly so that you can see what's
    happening as it happens.
  prefs: []
  type: TYPE_NORMAL
- en: 'In our first session (`iotop`), we should see the rsync command in action:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b0185065-f393-439c-99b2-52b91b015caa.png)'
  prefs: []
  type: TYPE_IMG
- en: Note how the very top line is our command, and shows our specific `DISK WRITEs`
    as being 95.21 M/s.
  prefs: []
  type: TYPE_NORMAL
- en: top
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You've probably used top so many times now that you're sick of reading about
    it, and you probably know a great deal about how useful it can be, despite its
    simple invocation.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Pretty much universal across UNIX systems, top gives you a near-real-time representation
    of process usage across your system:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/65d05501-10f4-4379-be95-82bf58c0c6c2.png)'
  prefs: []
  type: TYPE_IMG
- en: When it comes to troubleshooting, top is generally indispensable. Not only useful
    for seeing process, memory, and CPU information at a glance, top will work with
    an extremely small footprint, meaning that it's likely to work on systems that
    are seemingly exponentially contended.
  prefs: []
  type: TYPE_NORMAL
- en: Even if you prefer top alternatives, such as `htop` or glances, there's no guarantee
    that these programs will be available on each and every system you touch. Because
    of this, it's a good idea to become familiar with top, then fall back to alternatives
    once you're sure you can use it properly (or at least passably!).
  prefs: []
  type: TYPE_NORMAL
- en: vmstat
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'On systems that are very contended, or where you might want to output system
    information for later correlation and debugging, vmstat is ideal. Giving you more
    of a global overview of your system, it can be handy to store periodic values
    to a file, which you can then check later:'
  prefs: []
  type: TYPE_NORMAL
- en: 'When run on its own, it can also be set to periodically print to screen:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Outputting to a file is just as easy; simply redirect `stdout`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Using ps, lsof, Strace, and /proc for service issues
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`ps`, `lsof`, `strace`, and `/proc` are all valuable tools when troubleshooting
    under fire. They can display something so obvious that you''d never have thought
    to look for it in a million years, and they can also work through certain tasks
    quicker than you''ll be able to do so yourself.'
  prefs: []
  type: TYPE_NORMAL
- en: '`strace` is probably the most often overlooked of these tools, and it''s easily
    one of the most awkward to learn well, but it should always be at the back of
    your mind for program debugging.'
  prefs: []
  type: TYPE_NORMAL
- en: Personally, I generally forget about `strace` quite a lot, that is until someone
    wanders over and asks me why I'm trying to debug something in the most awkward
    way possible, before reminding me that `strace` is a thing that exists.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'SSH to your CentOS VM:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Install `lsof` for this section (the others should be installed already):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Running through each of our commands in turn, let's make our `ps` rundown very
    quick!
  prefs: []
  type: TYPE_NORMAL
- en: ps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`ps`, which is used to show a `snapshot` of the current processes on a system,
    is a first port of call for many admins, and with good reason:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: As noted, `ps` also includes kernel threads by default (those in square brackets).
  prefs: []
  type: TYPE_NORMAL
- en: 'More frequently than carefully crafted `ps` commands I''ve just seen people
    pipe the output through other commands to accomplish what they need. It''s not
    uncommon to see commands such as this in the wild:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: This isn't necessarily a bad thing, and it's generally done as a quick query
    instead of something you'd actually put in a script.
  prefs: []
  type: TYPE_NORMAL
- en: Big tip, no one (well... nearly no one) writes commands, as they're printed
    in text books. More often than not, the person crafting the command will get a
    close approximation of what they want using the primary command, and then they'll
    shove it through a series of other commands to get the output they really need.
    We all (well... nearly all) do it.
  prefs: []
  type: TYPE_NORMAL
- en: What I'm getting at is don't worry when you can't remember exact `ps` syntax
    when troubleshooting; do whatever you can do quickly.
  prefs: []
  type: TYPE_NORMAL
- en: lsof
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`lsof` is a great tool with a very confusing help section. In short, it''s
    used to list open files on a system, but run raw (without arguments), that''s
    a lot of information.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The most common way I''ve seen it used is like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'This is confusing, yes, so let''s break it down a bit:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: This is one stupid trick to make sure you have the header line in your output
    to screen; it does arguably waste clock cycles, as we're running `lsof` twice
    (once just to get the first line), but who's counting?
  prefs: []
  type: TYPE_NORMAL
- en: 'The semi-colon means the end of the command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we''re using `lsof` again, only this time we''re specifically grepping
    out lines that match the process ID of `rsyslogd`. The use of a dollar and parentheses
    here invokes a `subshell` that returns the value of the command run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'Lastly, we run our output through `grep -v` to return a list of strings. These
    are generally built up gradually by the person running the command, while they
    work out the entries they don''t need. Finally, we grep for `REG` explicitly to
    remove other entries we''re not interested in (such as `DIR`, for `directory`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: It looks stupid and long, but it works.
  prefs: []
  type: TYPE_NORMAL
- en: Strace
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`strace`, a program that''s written to specifically trace system calls (and
    signals), is often forgotten, but extremely powerful. If you want to find out
    what a program is doing in real-time, you can use `strace`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'At a glance, it can be extremely baffling:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: What we're looking at here are the events triggered by me connecting to a box
    (`NetworkManager` being the process we're following).
  prefs: []
  type: TYPE_NORMAL
- en: We can see that a few system calls are made, mainly `epoll_wait` and `poll`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The man pages for these calls lists the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`epoll_wait`, `epoll_pwait`: Wait for an I/O event on an `epoll` file descriptor'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`poll`, `ppoll`: Wait for some event on a file descriptor'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These might not be overly helpful when you're not a C or kernel hacker, but
    with a perusal of the manual pages, they can point you to the source of the problems.
  prefs: []
  type: TYPE_NORMAL
- en: Generally, `strace` is a nice tool to use when a program is locking up, and
    you're not sure why (usually after you've checked the logs and discovered there's
    nothing useful in them). You can connect to the program as it's running, wait
    for (or cause) a lock, and then find the last few things it tried to do.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another useful use of `strace` is finding files that a program is opening:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: Here, we ran `cat testfile`, but did so with `strace` as the first command.
  prefs: []
  type: TYPE_NORMAL
- en: We can then see (by grepping for `open`) the files that cat attempted to use
    when reading our file, and we can also see the response when it determines the
    file doesn't exist.
  prefs: []
  type: TYPE_NORMAL
- en: '`strace` prints to `stderr` by default, so we redirected `stderr` to `stdout`
    in our command using `2>&1` first.'
  prefs: []
  type: TYPE_NORMAL
- en: /proc
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Again, you're probably sick of reading about `/proc`, but here's a real-world
    example of how useful it can be.
  prefs: []
  type: TYPE_NORMAL
- en: VMs suck for entropy, so it's usually a good idea to work out how much random
    data you can generate on your system. You can find that a lack of entropy can
    severely hamper processes that need to do things such as encrypt files.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using `/proc`, we can determine the entropy that''s currently available to
    our system:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: This is one great example of how useful `/proc` can be. But what else is it
    useful for?
  prefs: []
  type: TYPE_NORMAL
- en: 'We could use `/proc` to quickly count up the number of CPU cores our machine
    has:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: We only have one CPU core in our machine. How about network statistics?
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, we''re using `/proc` to check the TCP statistics relating to our system,
    at the current point in time:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: Yes, there are better and faster ways of getting this information in general,
    but it's important to appreciate that a lot of the information you otherwise scrape
    is actually gained from the "process information pseudo-filesystem" in the first
    place.
  prefs: []
  type: TYPE_NORMAL
- en: Making a copy of problems for later debugging
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we're going to talk about copying files for later debugging. Frequently,
    we find ourselves on systems where a problem has resulted in an outage. In these
    situations, the impetus among engineers can be to get the system up again, no
    matter what the problem is.
  prefs: []
  type: TYPE_NORMAL
- en: You might discover, during your troubleshooting steps, that `/var/log` has filled
    up, and has taken the rest of the disk with it. In these situations, it can be
    incredibly tempting to simply delete the offending log file(s) and restart the
    broken daemon.
  prefs: []
  type: TYPE_NORMAL
- en: You should do that, but not right away. First, you need to make sure you've
    got the file for later consumption so that the problem doesn't happen again.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this example, we're going to mess around with some of the log files in `/var/log/`. We're
    going to use our CentOS VM again.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Take a quick look in `/var/log/` at the messages file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: It's not huge, but if you've got an incredibly small disk, this could be a massive
    problem.
  prefs: []
  type: TYPE_NORMAL
- en: Say you've completely run out of space on the `/var/log` partition—what happens?
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s remind ourselves of an example VM''s partition layout, noting the lack
    of a dedicated `''/var''` partition:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'The quick answers to the preceding question are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: If the `/var/log` partition is the same one that `/` is on (as it is here),
    you've got a problem, and might even find yourself unable to reboot a system due
    to a lack of space. The `/var/log` partition could consume all available disk
    space, even what's needed by critical services, such as SSH.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the `/var/log` partition is on its own partition (which it really should
    be), then you can't log anything anymore. While this might not bring the system
    down, it would still cause issues if you need to keep logs for debugging or auditing
    purposes (and don't pipe them away somewhere, such as an Elastic Stack cluster).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the case of the first problem, you've pretty much got to resign yourself
    to rebooting the box using either one of several abrupt tricks (or getting the
    data center to take a look themselves).
  prefs: []
  type: TYPE_NORMAL
- en: 'In the case of the second problem, you''ll have to do a few things:'
  prefs: []
  type: TYPE_NORMAL
- en: Determine which process is running rampant, using the various other techniques
    we've discussed. Kill the process and stop the service if it can't be fixed immediately.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the contents of `/var/log/messages` to another part of the system (a partition
    with more space) or a different system if required (using `rsync` or `scp`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: See if you can manually trigger `logrotate` to rotate and compress your messages
    log. This might fail depending on the actual space that's available.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you can't manually compress or `logrotate` a file, it may be time to delete
    the original messages file and create a new one in its place (with the same permissions).
  prefs: []
  type: TYPE_NORMAL
- en: You should make a copy of your logs prior to deleting them. Otherwise, you'll
    have no idea what happened to cause the issue in the first place.
  prefs: []
  type: TYPE_NORMAL
- en: Temporary solutions and when to invoke them
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Temporary solutions can be great, and necessary, depending on the situation
    you've found yourself in.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, if you''ve found yourself being awoken by an alarm at 5:00, informing
    you that a disk only has about 10% of disk space left available, you might decide
    to invoke a temporary fix:'
  prefs: []
  type: TYPE_NORMAL
- en: You've troubleshooted and determined that the disk is filling up at a rate of
    a gigabyte an hour, meaning it'll be full in an hour and a half
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You've also determined that the LVM setup on the box has 10 GB of free space
    available to you, to grow your logical volume
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You check to make sure the problem isn't caused by a more significant issue
    (the site being down) and realize it's just a noisy log because of Christmas sales
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You apply 50% of the free LVM space to your logical volume, and go back to bed
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This is a good temporary solution because it means that the problem can be safely
    investigated during daylight hours (when others might be available, and you making
    the problem worse won't be that much of an issue). However, you should be aware
    of the flaws.
  prefs: []
  type: TYPE_NORMAL
- en: Temporary solutions in IT, as in UK politics, tend to become permanent fixes
    faster than you can blink. In our example, this will be less of an issue, because
    we only have a finite amount of disk space, but I've seen it happen whereby this
    solution becomes the recommended "fix" and engineers proceed to continue adding
    virtual disks for much longer than they should, only compounding the problem further
    (and potentially masking other issues, too).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If a temporary solution buys you time, or means alarms stop going off and a
    website comes back online, then by all means do them, but also make a note of
    what you've done and log it in whatever ticketing system you use.
  prefs: []
  type: TYPE_NORMAL
- en: Be responsible for your own cludge. It's on you, and only you, to ensure that
    your temporary cron-job, system timer, or disk-space extension doesn't become
    the permanent fix for a problem.
  prefs: []
  type: TYPE_NORMAL
- en: In a similar vein, if you write a bash script to periodically check a log file,
    and if it's over a certain size to compress it, make sure you also write checks
    to ensure that the bash script is working. There's nothing more annoying than
    coming to a system that has a "fix" applied to it, only to discover that the bash
    script eventually fell over due to being unable to work with files over a certain
    size, and nobody noticed.
  prefs: []
  type: TYPE_NORMAL
- en: You will not be thanked if a temporary "fix" that you put in place brings down
    a box a few months later. This will also only be made worse if you've since left
    the company, and find that your name is jokingly dragged through the mud forevermore,
    whenever there's a similar issue to the one you've caused. If there's one thing
    you should avoid, it's allowing your name to become a verb in relation to something
    going wrong.
  prefs: []
  type: TYPE_NORMAL
- en: Handling irate developers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The systems administration life would be an awful lot easier if we never had
    to deal with other people (and I'd imagine those other people would say much the
    same about us).
  prefs: []
  type: TYPE_NORMAL
- en: So, let's talk about developers. Our developer friends are doing their job,
    developing. It's in the nature of computing that no software is perfect, and bugs
    will creep in to even the most beautiful of code; it can even pass its previous
    tests, run perfectly in development and preprod environments, only to bring down
    production.
  prefs: []
  type: TYPE_NORMAL
- en: You can think you've got a solution working perfectly, running like a dream,
    purring like a cat, and then one new "feature" from a developer can seemingly
    bring an entire solution crashing to the floor. It can be tempting to look for
    someone to blame in these scenarios. However, I would instead urge calm and composure,
    because getting annoyed at something usually only makes the situation worse (and,
    half of the time, it's something you did and forgot about that caused the problem
    anyway...). Everyone can start to blame everyone else in nightmare situations,
    so it's up to you (and your colleagues) to remain level-headed, working together
    to find the root of the problem.
  prefs: []
  type: TYPE_NORMAL
- en: If a developer comes to you to report an issue, either in a live environment
    or a non-live environment, and assuming they've gone through the appropriate channels
    before doing so (submitting a ticket, talking to team leads, and so on), you may
    find that they're already frustrated with what's going on.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'It can be tempting to dismiss this sort of request out of hand because you''re
    busy on something else, or you don''t think it''s your job to fix the problem.
    This would be bad diplomacy, and would generally only result in both parties getting
    annoyed with each other:'
  prefs: []
  type: TYPE_NORMAL
- en: Instead, appreciate that the other person is only trying to do their job, and
    whatever they've come to report, it's probably hindering them actually carrying
    on with the said job. The problem could be of their own design, or because of
    an issue you've missed in your infrastructure, but whatever the reason, it's important
    to handle the situation carefully.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Even if you're not the point of contact for the issue in question, and you have
    no idea how you'd even start debugging it, consider smiling, politely explaining
    how much of an idiot you are with things such as that, and directing them (or
    better yet leading them) to someone who might be able to triage or help with their
    problem.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Good communication and diplomacy results in a calmer working environment, and
    the idea of "you scratch my back, I'll scratch yours" comes into play, if you
    ever need a friendly `dev` to help you debug an issue you think might be caused
    by an application.
  prefs: []
  type: TYPE_NORMAL
- en: This goes the other way, too; don't feel pressured to drop absolutely everything
    just because someone has come over to you and started screaming that "your terrible
    infrastructure sucks"; in these situations, it's best to first find a mediator
    for the problem (a manager, usually) before looking into an issue. It's not appropriate
    for anyone to scream at or belittle anyone else in a workplace, remember that,
    and if you ever find yourself getting wound up, it might be a good idea to remove
    yourself from a situation entirely before it escalates. I've seen good engineers
    get into serious trouble and put their jobs on the line, just for having a temper.
  prefs: []
  type: TYPE_NORMAL
- en: Handling irate managers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Managers, such as developers, are only doing their jobs. They are perhaps harder
    to talk to in some circumstances, as they sometimes just want the problem and
    the solution to the problem in plain English, even if you don't know what the
    solution (or problem) is yet. Some of the best managers understand that not every
    problem can be located and fixed within ten minutes, and, likewise, some of the
    worst expects you to have fully formed solutions in the time it takes them to
    stand up from their desk and march over to yours.
  prefs: []
  type: TYPE_NORMAL
- en: Should you find yourself in the situation where you're having to talk to an
    irate manager, perhaps because there's a production issue and someone higher than
    them is breathing down their neck too, try not to wind them up further by bombarding
    them with jargon they're unlikely to understand, or similarly giving them vague
    platitudes.
  prefs: []
  type: TYPE_NORMAL
- en: I'm using the term *manager* loosely here; the same logical could be applied
    to delivery leads, team leads, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Not all managers are technical, but a lot are. It's generally a good idea to
    establish how technical your manager is early on so that you can gauge the exact
    level of information you need to pass on to them during an issue. If they're on,
    above, or about your level, you can probably give them everything and allow for
    them to distill it upstream; if they're less technically minded, it's better to
    summarize key points.
  prefs: []
  type: TYPE_NORMAL
- en: Remember that good managers manage and shield engineers or others from the day-to-day
    pressures of a workplace that aren't technical. Sure, you might get invited to
    the odd meeting to explain a solution, or defend a technical decision, but for
    the most part it's an engineer's job to engineer, an administrator's job to administrate,
    and a manager's job to manage (while also doing all the meetings the others don't
    want to).
  prefs: []
  type: TYPE_NORMAL
- en: Should an angry manager start bombarding you with questions, or asking for updates
    every five minutes, during a period when you're trying to concentrate, it might
    be time to direct them to a ticket you're keeping your logs in, and simply pasting
    a message in there every few minutes to update stakeholders on progress. I mentioned
    slack channels too, or other communication mediums, and these can be a good way
    of keeping people informed while allowing you time to concentrate.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before now, I''ve been dragged on to conference calls with the following people
    on during actual problems:'
  prefs: []
  type: TYPE_NORMAL
- en: My manager
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: My manager's manager
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: My manager's manager's manager
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Other members of the team
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Members of the development team
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A representative of the sales team
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A representative of the client-relations team
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now, I don't know about you, but that seems like too many people for a call
    when there's an ongoing problem.
  prefs: []
  type: TYPE_NORMAL
- en: In my professional opinion, it is OK to say you can't join a call of that magnitude
    right that second, while also providing an update of where exactly you are in
    your troubleshooting.
  prefs: []
  type: TYPE_NORMAL
- en: Handling irate business owners
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Above co-workers, managers, and even division leaders, are business owners.
    Again, there are good business owners, and there are bad business owners. Most
    of the time, you'll probably never meet them in larger companies, but it seems
    to be something of a universal law that you'll cross paths at some point, and
    sometimes, this will coincide with an actual outage, just because the universe
    thinks it's funny.
  prefs: []
  type: TYPE_NORMAL
- en: Business owners can lose their job and their business in one fell swoop if there's
    a perceived mistake in their leadership. This won't be a defense of capitalism,
    and I'm not about to suggest the rising up of the working classes to seize the
    means of production, but it's always worth bearing in mind that the person who's
    getting angry at you for not giving complete enough (in their mind) answers might
    actually be about to lose their customer base and, by extension, livelihood.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Tread carefully when the person you're talking to has the power to hire or fire
    you, depending on what you say. Where you might lose your job if you royally screw
    up (and frankly, it would have to be continuous and egregious screw ups), it's
    only your job, and you might be able to find another one while putting that particular
    chapter of your life behind you.
  prefs: []
  type: TYPE_NORMAL
- en: Hopefully, you won't, but if you do ever find yourself in the situation where
    you're dealing with an extremely irate individual with the power to let you go
    (off a cliff or otherwise), it's generally tread-on-eggshells time. Assure them
    that you're doing everything in your power to resolve the issue, point to progress
    made, if there is any, and reassure them that every able-bodied individual is
    working on the problem.
  prefs: []
  type: TYPE_NORMAL
- en: Who knows—if you impress them enough in a time of crisis, keeping your head
    when all around are losing theirs, you might find yourself in a favored position
    in the not-too-distant future.
  prefs: []
  type: TYPE_NORMAL
- en: Roundup - Troubleshooting and workplace diplomacy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter was something of a mixed bag because I tried to suggest what the
    best courses of action can be during a production (or even a minor) problem. I
    included programs I thought might be useful to you in a pinch, some vague directives
    on what you should think about during an outage, and then concluded with a few
    suggestions on dealing with other people during what could be the most stressful
    time of your professional career.
  prefs: []
  type: TYPE_NORMAL
- en: All that said, there's time for a few more points I'd like to make.
  prefs: []
  type: TYPE_NORMAL
- en: Don't trust time
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A good 70 percent of the time (random figure), I''ve found time to be the root
    cause of most of my problems. It is because of this that one of the first commands
    I run when I log on to a box is `date`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: If the time is wrong (and not just offset because of timezones), then there's
    a very good chance that the weird and wonderful problems you're seeing are the
    direct result of two or more computer systems arguing about which of their completely
    arbitrary representations of time is correct.
  prefs: []
  type: TYPE_NORMAL
- en: Fix time before you fix anything else.
  prefs: []
  type: TYPE_NORMAL
- en: Incorrect time and fixing incorrect time can cause problems of its own so, check
    and keep backups regularly.
  prefs: []
  type: TYPE_NORMAL
- en: Don't overlook the simple
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Alongside `date`, another command I run almost as an impulse is `df -h`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: Like time being wrong, cosmically stupid errors can occur when disk space has
    run out, with no actual indication as to what the real problem is. Programs rarely
    print *I can't write to this file, so I'm broken,* and instead usually settle
    on cryptic, baffling, and altogether mind-numbing errors that make no sense on
    the face of it.
  prefs: []
  type: TYPE_NORMAL
- en: Check disk space second.
  prefs: []
  type: TYPE_NORMAL
- en: On "cloud" deployments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Time for another small rant!
  prefs: []
  type: TYPE_NORMAL
- en: One of the most annoying things that "cloud" has done has been to introduce
    the "solution" of "destroy and redeploy".
  prefs: []
  type: TYPE_NORMAL
- en: In the realm of temporary fixes, I consider the most egregious temporary fix
    to be "Oh, just tear down the solution and let it rebuild; that error happens
    sometimes."
  prefs: []
  type: TYPE_NORMAL
- en: This isn't a "fix", and it annoys me immensely when I hear it. Yes, we can simply
    destroy and recreate environments these days, at the drop of a hat usually, but
    that doesn't excuse the original error that caused your systems to break in the
    first place. If they did it once, there's every chance that they'll do it again,
    and if they wake me up in the middle of the night or interrupt my holiday to Egypt,
    someone is getting a sternly worded email.
  prefs: []
  type: TYPE_NORMAL
- en: '"Destroy and recreate" should be a means for getting a solution back online,
    but as we covered in this chapter, you should also have a backup of any files
    you might need to work out what went wrong, and you shouldn''t consider the problem
    to be "resolved" until it stops happening.'
  prefs: []
  type: TYPE_NORMAL
- en: If anyone ever tells you a solution is to destroy and recreate, tell them to
    fix their code.
  prefs: []
  type: TYPE_NORMAL
- en: Learn from my mistakes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In terms of handling irate people, I'm a good authority, because as many of
    my former colleagues will attest, I usually was that irate person.
  prefs: []
  type: TYPE_NORMAL
- en: It took me a good few years to realize that getting angry at a situation or
    people didn't make the situation any better, or my workplace nicer; it only made
    my mood worse. Thankfully, I've learned from my mistakes, and I take a very different
    approach to problems these days, not just flipping immediately to complain-and-blame
    mode (though I would always endeavour to fix the problem) and instead taking a
    step back from the situation first, assessing it, and then diving in with a nice
    cup of tea.
  prefs: []
  type: TYPE_NORMAL
- en: Being zen in a crisis is hard; I'm not going to claim otherwise, but the more
    people with level heads, the calmer the situation will stay. It's far too easy
    to jump on to random threads when you're worked up, reaching dead ends and getting
    more annoyed before backtracking.
  prefs: []
  type: TYPE_NORMAL
- en: Breathe.
  prefs: []
  type: TYPE_NORMAL
