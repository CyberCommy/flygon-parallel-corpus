- en: Chapter 9. Adding an RSS Web Feed
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we added the ability for the user to leave comments
    on issues and to display a list of these comments, utilizing portlet architecture
    to allow us to easily and consistently display that listing anywhere throughout
    the application. In this chapter, we are going to build upon this feature and
    expose this list of comments as an RSS data feed. Furthermore, we are going to
    use the existing feed functionality available in another open source framework,
    Zend Framework, to demonstrate just how easy it is for a Yii application to integrate
    with other frameworks and libraries.
  prefs: []
  type: TYPE_NORMAL
- en: Feature planning
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The goal of this chapter is to create an RSS feed using the content created
    from our user-generated comments. We should allow users to subscribe to a comment
    feed that spans all projects as well as subscribe to individual project feeds.
    Luckily, the widget functionality we built previously already has the capability
    to return a list of recent comments across all projects as well as restrict the
    data to one specific project. So, we have already coded the appropriate methods
    to access the necessary data. The bulk of this chapter will focus on putting that
    data in the correct format to be published as an RSS feed and on adding links
    to our application to allow users to subscribe to these feeds.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a list of high-level tasks we will be completing in order
    to achieve these goals:'
  prefs: []
  type: TYPE_NORMAL
- en: Downloading and installing Zend Framework into the Yii application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a new action in a controller class to respond to the feed request and
    return the appropriate data in an RSS format
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Altering our URL structure for ease of use
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding our newly created feed to both the project listings page as well as to
    each individual project details page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A little background–content syndication, RSS, and Zend Framework
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Web content syndication has been around for many years but has only gained enormous
    popularity over the past few years. Web content syndication refers to publishing
    information in a standardized format so that it can easily be used by other websites
    and easily consumed by reader applications. Many news sites have long been electronically
    syndicating their content, but the massive explosion of web logs (also known as
    blogs) across the internet has turned content syndication, known as feeds, into
    an expected feature of almost every website. Our TrackStar application will be
    no exception.
  prefs: []
  type: TYPE_NORMAL
- en: '**Really Simple Syndication** (**RSS**) is an XML format specification that
    provides a standard for web content syndication. There are other formats that
    could be used, but due to the overwhelming popularity of RSS among most websites,
    we will focus on delivering our feed in this format.'
  prefs: []
  type: TYPE_NORMAL
- en: Zend is known as "The PHP Company". One of the products they offer to assist
    in application development is Zend Framework. The framework provides components
    that can be incorporated into other framework applications. Yii is flexible enough
    to allow us to use pieces of other frameworks. We will be using just one component
    of the Zend Framework library, called `Zend_Feed`, so that we don't have to write
    all of the underlying "plumbing" code to generate our RSS-formatted web feeds.
    For more on Zend_Feed, visit [http://www.zendframework.com/manual/en/zend.feed.html](http://www.zendframework.com/manual/en/zend.feed.html).
  prefs: []
  type: TYPE_NORMAL
- en: Installing Zend Framework
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Since we are using Zend Framework to help support our RSS needs, we first need
    to download and install the framework. To download the framework files, visit
    [http://www.zend.com/community/downloads](http://www.zend.com/community/downloads).
    Since we will only be utilizing a single component of this framework, the minimal
    version of the framework will suffice. We are using Version 1.1.12.
  prefs: []
  type: TYPE_NORMAL
- en: 'When you expand the downloaded framework file, you should see the following
    high-level directory and file structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '`INSTALL.txt`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`LICENSE.txt`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`README.txt`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`bin/`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`library/`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In order to use this framework within our Yii application, we need to move some
    of the files within our application's directory structure. Let's create a new
    directory called `vendors/`, under the `/protected` directory within our application.
    Then, move the Zend Framework directory `/library/Zend` underneath this newly
    created directory. After everything is in place, ensure that `protected/vendors/Zend/Feed.php`
    exists in the TrackStar application.
  prefs: []
  type: TYPE_NORMAL
- en: Using Zend_Feed
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Zend_Feed** is a small component of Zend Framework that encapsulates all
    of the complexities of creating web feeds behind a simple, easy-to-use interface.
    It will help us get a working, tested, RSS-compliant data feed in place in very
    little time. All we will need to do is format our comment data in a manner expected
    by Zend_Feed, and it will do the rest.'
  prefs: []
  type: TYPE_NORMAL
- en: We need a place to house the code to handle the requests for our feed. We could
    create a new controller for this, but to keep things simple, we'll just add a
    new action method to our main `CommentController.php` file to handle the requests.
    Rather than add to the method a little at a time, we'll list the entire method
    here, and then talk through what it is doing.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This is all fairly simple. First, we check the input request querystring for
    the existence of a `pid` parameter, which we take to indicate a specific project
    ID. Remember that we want to optionally allow the data feed to restrict the content
    to comments associated with a single project. Next, we use the same method that
    we used in the previous chapter to populate our widget to retrieve a list of up
    to 20 recent comments, either across all projects, or if the project ID is specified,
    specific to that project.
  prefs: []
  type: TYPE_NORMAL
- en: You may remember that this method returns an array of `Comment` AR class instances.
    We iterate over this returned array and convert the data into the format accepted
    by the `Zend_Feed` component. `Zend_Feed` accepts a simple array containing elements
    that are themselves arrays containing the data for each comment entry. Each individual
    entry is a simple associative array of `name=>value` pairs. To comply with the
    specific RSS format, each of our individual entries must minimally contain a title,
    a link, and a description. We have also added two optional fields, one called
    `lastUpdate`, which `Zend_Feed` translates to the RSS field, `pubDate`, and one
    to specify the author.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are a few extra helper methods we take advantage of in order to get the
    data in the correct format. For one, we use the controller''s `createAbsoluteUrl()`
    method, rather than just the `createUrl()` method, in order to generate a fully
    qualified URL. Using `createAbsoluteUrl()` will generate a link similar to the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`http://localhost/trackstar/index.php?r=issue/view&id=5` as opposed to just
    `/index.php?r=issue/view&id=5`'
  prefs: []
  type: TYPE_NORMAL
- en: Also, to avoid errors such as `unterminated entity reference` generated from
    PHP's `DOMDocument::createElement()` method, which is used by `Zend_Feed` to generate
    the RSS XML, we need to convert all applicable characters to HTML entities by
    using our handy helper function, `CHtml::encode`. So, we encode the link so that
    a URL that looks like `http://localhost/trackstar/index.php?r=issue/view&id=5`
    will be converted to `http://localhost/trackstar/index.php?r=issue/view&amp;id=5`.
  prefs: []
  type: TYPE_NORMAL
- en: We need to also do this for our other data that will be in the RSS format. Both
    the description and title fields are generated as a `CDATA` block, so using encode
    is not necessary on these.
  prefs: []
  type: TYPE_NORMAL
- en: Once all of our entries have been properly populated and formatted, we use Zend_Feed's
    `importArray()` method, which accepts an array to construct the RSS feed. Finally,
    once the feed class is built from the input array of entries and returned, we
    call the `send()` method on that class. This returns the properly formatted RSS
    XML and appropriate headers to the client.
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to make a couple of configuration changes to the `CommentController.php`
    file and class before this will work. We need to include a few of the Zend framework
    files in our comment controller. Add the following statements to the top of `CommentController.php`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, alter the `CommentController::accessRules()` method to allow any user
    to access our newly added `actionFeed()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'This is really all there is to it. If we now navigate to `http://localhost/trackstar/index.php?r=comment/feed`,
    we can view the results of our efforts. Since browsers handle the display of RSS
    feeds differently, your experience might differ from the following screenshot.
    The following screenshot is what you should see if viewing in the Firefox browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using Zend_Feed](graphics/8727_09_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'However, viewing in the Chrome browser, we see the raw XML being displayed,
    as seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using Zend_Feed](graphics/8727_09_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This may depend on your version. You may also be prompted to select the available
    RSS reader extensions to install, such as the Google Reader or RSS Feed Reader
    extensions for Chrome.
  prefs: []
  type: TYPE_NORMAL
- en: Creating user-friendly URLs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, throughout our development, we have been using the default format of
    our Yii application URL structure. This format, discussed back in [Chapter 2](ch02.html
    "Chapter 2. Getting Started"), *Getting Started*, in the section called *Reviewing
    our request routing*, uses a querystring approach. We have the main parameter
    "r", which stands for *route*, followed by a controllerID/actionID pair, and then
    optional querystring parameters, as needed by the specific action methods being
    called. The URL we created for our new feed is no exception. It is a long, cumbersome,
    and arguably ugly URL. There has got to be a better way! Well, in fact there is.
  prefs: []
  type: TYPE_NORMAL
- en: 'We could make the previously mentioned URL look cleaner and more self-explanatory
    by using the so-called *path* format, which eliminates the query string and puts
    the `GET` parameters into the path info part of the URL:'
  prefs: []
  type: TYPE_NORMAL
- en: Taking our comment feed URL as an example, instead of `http://localhost/trackstar/index.php?r=comment/feed`,
    we would have `http://localhost/trackstar/index.php/comment/feed/`.
  prefs: []
  type: TYPE_NORMAL
- en: 'What''s more, we don''t need to specify the entry script for each request.
    And we can also take advantage of Yii''s request routing configuration options
    to remove the need to specify the controllerID/actionID pair as well. Our request
    could then look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '`http://localhost/trackstar/commentfeed`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Also, it is common, especially with feed URLs, to have the `.xml` extension
    specified at the end. So, it would be nice if we could alter our URL to look like
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`http://localhost/trackstar/commentfeed.xml`'
  prefs: []
  type: TYPE_NORMAL
- en: This greatly simplifies the URL for users and is also an excellent format for
    URLs to be properly indexed into major search engines (often referred to as "search
    engine friendly URLs"). Let's see how we can use Yii's URL management features
    to alter our URL to match this desired format.
  prefs: []
  type: TYPE_NORMAL
- en: Using the URL manager
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The built-in URL manager in Yii is an application component that can be configured
    in the `protected/config/main.php` file. Let''s open up that file and add a new
    URL manager component declaration to the components array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: As long as we stick with the default and name the component `urlManager`, we
    do not need to specify the class of the component because it is predeclared to
    be `CUrlManager.php` in the `CWebApplication.php` framework class.
  prefs: []
  type: TYPE_NORMAL
- en: 'With this one simple addition, our URL structure has changed to the path format
    throughout the site. For example, previously, if we wanted to view a specific
    issue whose ID is 1, we made the request using the following URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '`http://localhost/trackstar/index.php?r=issue/view&id=1`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, with these changes in place, our URL looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '`http://localhost/trackstar/index.php/issue/view/id/1`'
  prefs: []
  type: TYPE_NORMAL
- en: You'll notice that the changes we have made have affected all the URLs generated
    throughout the application. To see this, visit our feed again by going to `http://localhost/trackstar/index.php/comment/feed/`.
    We notice that all of our issue links have been reformatted to this new structure
    for us. This is all thanks to our consistent use of the controller methods and
    other helper methods to generate our URLs. We can alter the URL format in just
    one single configuration file, and the changes will automatically propagate throughout
    the application.
  prefs: []
  type: TYPE_NORMAL
- en: Our URLs are looking better, but we still have the entry script, `index.php`,
    specified and we are not yet able to append the `.xml` suffix at the end of our
    feed URL. So, let's hide the `index.php` file as part of the URL and also set
    up the request routing to understand that a request for `commentfeed.xml` actually
    means a request for `CommentController::actionFeed()`. Let's actually tackle the
    latter first.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring routing rules
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Yii URL manager allows us to specify rules that define how URLs are parsed and
    created. A rule consists of defining a route and a pattern. The pattern is used
    to match the path information part of the URL to determine which rule is used
    to parse or create URLs. The pattern may contain named parameters using the syntax
    `ParamName:RegExp`. When parsing a URL, a matching rule will extract these named
    parameters from the path info and put them into the `$_GET` variable. When a URL
    is being created by the application, a matching rule will extract the named parameters
    from `$_GET` and put them into the path info part of the created URL. If a pattern
    ends with `/*`, it means additional `GET` parameters may be appended to the path
    info part of the URL.
  prefs: []
  type: TYPE_NORMAL
- en: To specify URL rules, set the `CUrlManager` file's `rules` property as an array
    of rules in the format `pattern=>route`.
  prefs: []
  type: TYPE_NORMAL
- en: 'As an example, let''s look at the two following rules:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: There are two rules specified in this code. The first rule says that if the
    user requests the URL `http://localhost/trackstar/index.php/issues`, it should
    be treated as `http://localhost/trackstar/index.php/issue/index`, and the same
    applies when constructing such a URL. So, for example, if we are creating the
    URL in our application using a controller's `createUrl('issue/index')` method,
    it would generate `/trackstar/index.php/issues` rather than `/trackstar/index.php/issue/index`.
  prefs: []
  type: TYPE_NORMAL
- en: The second rule contains a named parameter, `id`, which is specified using the
    `<ParamName:RegExp>` syntax. It says that, for example, if the user requests the
    URL `http://localhost/trackstar/index.php/issue/1`, it should be treated as `http://localhost/trackstar/index.php/issue/view/id/1`.
    The same also applies when constructing such a URL.
  prefs: []
  type: TYPE_NORMAL
- en: The route can also be specified as an array itself to allow the setting of other
    attributes such as the URL suffix and whether or not the route should be considered
    case-sensitive. We'll take advantage of these as we specify the rule for our comment
    feed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s add the following rule to our `urlManager` application component configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Here, we have used the `urlSuffix` attribute to specify our desired URL `.xml`
    suffix.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we can access our feed by using the following URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '`http://localhost/trackstar/index.php/commentFeed.xml`'
  prefs: []
  type: TYPE_NORMAL
- en: Removing the entry script from the URL
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Now we just need to remove the `index.php` part from the URL. This is done
    in two steps, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Alter the web server configuration to reroute all requests that don't correspond
    to existing files or directories to `index.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the `urlManager` component's `showScriptName` property to `false`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The first step takes care of how the application routes the requests, while
    the latter takes care of how URLs will be created throughout the application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Since we are using Apache HTTP Server, we can perform the first step by creating
    a `.htaccess` file in the application root directory and adding the following
    directives to that file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This approach is only for Apache HTTP Server. You will need to consult the web
    server rewrite rules if using a different web server. Also note that this information
    could be placed in the main Apache configuration file as an alternative to using
    the `.htaccess` file approach.
  prefs: []
  type: TYPE_NORMAL
- en: With this `.htaccess` file in place, we can now visit our feed by navigating
    to `http://localhost/trackstar/commentfeed.xml` (or `http://localhost/trackstar/commentFeed.xml`,
    since we set the case sensitivity to false).
  prefs: []
  type: TYPE_NORMAL
- en: 'However, even with this in place, if we use one of the controller methods or
    one of our `CHtml` helper methods in our application to create our URL, say by
    executing `$this->createAbsoluteUrl(''comment/feed'');` in a controller class,
    it will generate the following URL, with `index.php` still in the URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '`http://localhost/trackstar/index.php/commentfeed.xml`'
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to instruct it to not use the entry script name when generating URLs,
    we need to set that property on the `urlManager` component. We do this again in
    the `main.php` configuration file, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'In order to handle the addition of the project ID in the URL, we need to restrict
    the comment feed data to comments associated to specific projects, and for that
    we need to add one other rule, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'This rule also uses the `<Parameter:RegEx>` syntax to specify a pattern to
    allow for a project ID to be specified before the `commentfeed.xml` part of the
    URL. With this rule in place, we can restrict our RSS feed to comments specific
    to a project. For example, if we just want the comments associated with Project
    #`2`, the URL format would be:'
  prefs: []
  type: TYPE_NORMAL
- en: '`http://localhost/trackstar/2/commentfeed.xml`'
  prefs: []
  type: TYPE_NORMAL
- en: Adding the feed links
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we have created our feed and altered the URL structure to make it
    more user and search engine friendly, we need to add the ability for users to
    subscribe to the feed. One way to do this is to add the following code before
    rendering the pages in which we want to add the RSS feed link. Let''s do this
    for both the project listing page as well as a specific project details page.
    We''ll start with the project listings page. This page is rendered by the `ProjectController::actionIndex()`
    method. Alter that method as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The highlighted code shown here adds the following to the `<head>` tag of the
    rendered HTML:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'In many browsers, this will automatically generate a little RSS feed icon in
    the address bar. The following screenshot depicts what this icon looks like in
    the Safari address bar:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding the feed links](graphics/8727_09_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We make a similar change to add this link to a specific project details page.
    The rendering of these pages is handled by the `ProjectController::actionView()`
    method. Alter that method to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: This is almost the same as what we added to the index method, except that we
    are specifying the project ID so that our comment entries are restricted to just
    those associated with that project. A similar icon will now display in the address
    bar on our project details page. Clicking on these icons allow the user to subscribe
    to these comment feeds.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `registerLinkTag()` method allows you to also specify the media attribute
    as the fourth argument, and then you can further specify other supported attributes
    as an array of `name=>value` pairs, as a fifth argument. See [http://www.yiiframework.com/doc/api/1.1/CClientScript/#registerLinkTag-detail](http://www.yiiframework.com/doc/api/1.1/CClientScript/#registerLinkTag-detail)
    for more information on using this method.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter demonstrated just how easy it is to integrate Yii with other external
    frameworks. We specifically used the popular Zend Framework to demonstrate this
    and were able to quickly add an RSS compliant web feed to our application. Though
    we specifically used `Zend_Feed`, we really demonstrated how to integrate any
    of the Zend Framework components into the application. This further extends the
    already very extensive feature offering of Yii, making Yii applications incredibly
    feature rich.
  prefs: []
  type: TYPE_NORMAL
- en: We also learned about the URL management features within Yii and altered our
    URL format throughout the application to be more user and search engine friendly.
    This is the first step in improving upon the look and feel of our application,
    something we have very much neglected to this point. In the next chapter, we are
    going to take a closer look at the presentation tier of Yii applications. Styles,
    themes, and generally making things look good is the focus of the next chapter.
  prefs: []
  type: TYPE_NORMAL
