- en: Chapter 10. Extending Django
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'It''s been a long journey so far, and we''ve dealt with lots of code and basic
    concepts related to Django''s functionalities. In this chapter, we will discuss
    Django a little more, but we will discuss, in brief, different parameters, such
    as custom tags, filters, sub-frameworks, message system, and so on. The following
    are the topics that we will deal with in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Custom template tags and filters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Class-based generic views
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Contributed sub-frameworks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A message system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The subscription system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: User scores
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Custom template tags and filters
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Django template system comes with many template tags and filters that make
    writing templates an easy and flexible job. Sometimes, however, you may wish to
    extend the template system with your own tags and filters. This usually happens
    when you find yourself repeating the same tag structure many times, when you wish
    to wrap the structure in a single tag, or even when there is a filter that you
    want to add to the template system.
  prefs: []
  type: TYPE_NORMAL
- en: 'Guess what? Django already allows you to do this, and it is quite easy too!
    You basically add a new package to your application called **templatetags** and
    put modules that contain tags and filters in it. Let''s learn about this by adding
    a filter that capitalizes a string. Add a `templatetags` folder to the `mytweets`
    parent folder and put an empty file called `__init__.py` in it, so that Python
    treats the folder as a package. Now, create a module called `mytweet_filters`
    in it. We are going to write our filter in this module. Here is an illustration
    of the directory structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, add the following code to the `mytweet_filters.py` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The `register` variable is an object that can be used to introduce new tags
    and filters to the template system. Here, we used the `register.filter` decorator
    to add the capitalize function as a filter.
  prefs: []
  type: TYPE_NORMAL
- en: 'To use the new filter from within a template, put the following line at the
    beginning of your template file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, you can use the new filter just like any other filter offered by Django:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Adding custom template tags works in a similar way with filters. Basically,
    you define methods to process the tag and then register the tag to make it available
    for templates. The process is slightly more involved because tags can be more
    complicated than filters. Further information about custom template tags is available
    in the Django online documentation.
  prefs: []
  type: TYPE_NORMAL
- en: 'While writing a custom filter, you have to take care of Django''s auto-escaping
    behavior with the filter. There are three type of strings that can be passed to
    the filter:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Raw string**: This string is prepared either by the `str` command or is formed
    with the unicode. They are automatically escaped if auto-escaping is enabled.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Safe strings**: These strings are the strings that are marked safe from further
    escaping. They don''t need any further escaping. To mark the output as a safe
    string, use the `django.utils.safestring.mark_safe()` module.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Strings marked as "needing escaping"**: As the name suggests, they always
    need to escape.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Class-based generic views
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While working with Django, you will note that there are certain types of views
    that are always needed regardless of the project that you are working on. For
    this reason, Django comes with a set of views that can be used in any project.
    These views are called **generic views**.
  prefs: []
  type: TYPE_NORMAL
- en: 'Django offers generic views for the following purposes:'
  prefs: []
  type: TYPE_NORMAL
- en: To create simple views for tasks, such as redirecting to another URL or rendering
    a template
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Listing and forming detail views to display objects from a data model - these
    views are similar to how the admin page displays lists and detail pages for data
    models
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To generate date-based archive pages; these can be particularly useful for blogs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To create, edit, and delete objects in data models
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Django's class-based view can be configured by defining subclasses, or by passing
    arguments directly in the URL conf.
  prefs: []
  type: TYPE_NORMAL
- en: 'The subclasses are full of conventions that remove the hassle to rewrite templates
    of common situations. When you use the subclass, you can actually override the
    attribute or methods of the main class by providing a new value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'We will also add its entry to the `urls.py` file to get it redirected:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Interestingly, we can achieve the same with the on file change, and in a few
    lines, by adding the following to the `urls.py` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Contributed sub-frameworks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `django.contrib` package contains Django''s standard library. We used the
    following sub-frameworks from this package in the earlier chapters in this book:'
  prefs: []
  type: TYPE_NORMAL
- en: '`admin`: This is the Django admin interface'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`auth`: This is the user authentication system'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sessions`: This is the Django session framework'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`syndication`: This is the feed generation framework'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These sub-frameworks greatly simplify our work irrespective of whether we create
    registration and authentication facilities, build an administration page, or provide
    feeds for our content. The `django.contrib` package is a very important part of
    Django. Knowing its subpackages and how to use them will save you a lot of time
    and effort.
  prefs: []
  type: TYPE_NORMAL
- en: This section will provide you a brief introduction of other frameworks in this
    package. You won't get into the details of how to use each framework, but you
    will learn enough to know when to use the framework. Once you want to use a framework
    in a project, you can read the online documentation to learn more about it.
  prefs: []
  type: TYPE_NORMAL
- en: Flatpages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Web applications may contain pages that are static in nature. For example,
    your website may include a set of help pages that rarely change. Django provides
    an application called **flatpages** to serve static pages. The application is
    pretty simple; it provides you a data model to store various bits of information
    about each page, including the following:'
  prefs: []
  type: TYPE_NORMAL
- en: The URL
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The title
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The content
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The template name
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Whether registration is required to view the page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To use the application, you can simply enable it in the `INSTALLED_APPS` variable
    in the `settings.py` file and add its middleware to the `MIDDLEWARE_CLASSES` variable.
    After that, you can store and manage your static pages using a data model provided
    by the flatpages application.
  prefs: []
  type: TYPE_NORMAL
- en: Humanize
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The **humanize** application offers a set of filters to add a human touch to
    your pages.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a list of the available filters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**apnumber**: For numbers 1-9, this returns the number spelled out. Otherwise,
    it returns the number. In other words, 1 becomes ''one'', 9 becomes ''nine'',
    and so on, whereas 10 remains 10.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**intcomma**: This takes an integer and converts it into a string with a comma,
    for example:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '**intword**: This converts an integer into an easy-to-read form, for example:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 1000000 becomes 1.0 million.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '**naturalday**: Based on the range the date is in, if a given date is in the
    *(+1,0,-1)* range, this shows the date as "tomorrow", "today", and "yesterday"
    respectively, for example, (if today is January 26, 2007):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '**naturaltime**: This returns a string representing how many seconds, minutes,
    or hours ago the date event occurred, for example, (If now is January 26, 2007
    16:30:00):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '**ordinal**: This converts an integer to its ordinal form. Here, 1 becomes
    ''1st'', and so on between every three digits.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sitemap
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Sitemap** is a framework to generate sitemaps, which are XML files that help
    search engine indexers to find dynamic pages on your site. It tells the indexer
    how important a page is and how often it changes. This information makes the indexing
    process more accurate and efficient.'
  prefs: []
  type: TYPE_NORMAL
- en: The sitemaps framework lets you express the preceding information in Python
    code and then generates an XML document that represents the sitemap of your site.
    This covers the most commonly used sub-frameworks from the `django.contrib` package.
    The package contains additional applications that are not as important as the
    preceding ones and it is updated from time to time with new applications. To learn
    about any application from the `django.contrib` package, you can always read its
    documentation, which is available online.
  prefs: []
  type: TYPE_NORMAL
- en: Cross-site request forgery protection
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We discussed how to prevent two types of web attacks in [Chapter 5](part0044.xhtml#aid-19UOO2
    "Chapter 5. Introducing Hashtags"), *Introducing Hashtags*, namely, SQL injection
    and cross-site scripting. Django provides protection against another type of attack
    called cross-site request forgery. In this attack, a malicious site tries to manipulate
    your application by tricking a user who is logged in on your website to open a
    specially crafted page. This page usually contains JavaScript code that tries
    to submit a form to your website. CSRF protection works by embedding a token (that
    is a secret code) into all forms and verifies the token when the form is submitted.
    This effectively makes CSRF attacks infeasible.
  prefs: []
  type: TYPE_NORMAL
- en: To activate CSRF protection, you just need to add the '`django.contrib.csrf.
    middleware.CsrfMiddleware'` parameter to the `MIDDLEWARE_CLASSES` variable, and
    this will work, transparently, to prevent CSRF attacks.
  prefs: []
  type: TYPE_NORMAL
- en: The message system
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Our application allows users to add each other as friends and monitor friend
    bookmarks. Although these two forms of communication are related to the nature
    of our bookmarking application, sometimes users want the flexibility of sending
    private messages to each other. This feature is especially useful for enhancing
    the social aspect of our website.
  prefs: []
  type: TYPE_NORMAL
- en: 'The message system can be implemented in a variety of ways. It can be as simple
    as providing each user a contact form, which works by sending its content to the
    user''s e-mail when it is submitted. You already have all of the information needed
    to build the components of this functionality:'
  prefs: []
  type: TYPE_NORMAL
- en: A message form with a text field for the subject and a text area for the body
    of the message
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A view that displays the message form of a user and sends the contents of the
    form to the user via the `send_mail()` function
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When allowing users to send e-mails via your site, you need to be careful in
    order to prevent abuse of the feature. Here, you can restrict the contact forms
    only to the logged-in users or friends only.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another approach to implement the message system is by storing and managing
    messages in the database. This way, users can send and view messages using our
    application itself instead of using e-mail. While this approach is more bound
    to our application, and therefore keeps users on our website, it involves more
    work to get implement. However, as in the previous approach, you already have
    all of the information needed to implement this approach too. The components needed
    here are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: A data model to store messages. It should contain fields for the sender, recipient,
    subject, and body. You can also add fields for the date, read status, and so on.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A form to create messages. The fields for the subject and body are needed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A view to list the available messages.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A view to display a message.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The preceding list is just one way that is used to implement the message system.
    You can, for example, join the list and message views into a single view, or provide
    a view to display the sent messages in addition to the received ones. The possibilities
    are numerous and depend on how advanced you want the feature to be.
  prefs: []
  type: TYPE_NORMAL
- en: The subscription system
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We offer several web feeds that enable users to monitor updates on our website.
    However, some users may still prefer the old way of monitoring updates via e-mail.
    For those users, you may want to implement an e-mail subscription system to the
    application. For example, you can let users receive notifications when a bookmark
    is posted by a friend, or when a bookmark is posted under a certain tag.
  prefs: []
  type: TYPE_NORMAL
- en: Furthermore, you can group such notifications and send them in batches to avoid
    sending a large number of e-mails. The implementation details of this feature
    greatly depends on how you want it to work. It can be as simple as a data model
    that stores the tags that each user is subscribed to. It would have a loop that
    goes through all users who are subscribed to a particular tag and sends notifications
    to them when a bookmark is posted under this tag. This approach, however, is too
    basic and generates a lot of e-mails. A more sophisticated approach may involve
    storing notifications in a data model and sending them in one e-mail on a daily
    basis.
  prefs: []
  type: TYPE_NORMAL
- en: User scores
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Some websites (such as [Slashdot.org](http://Slashdot.org) and [reddit.com](http://reddit.com))
    track the activity of users by assigning a score to each user. This score is incremented
    whenever the user contributes to the website in some way. Users' scores can be
    utilized in a variety of ways. For example, you can release new features to your
    most active users first, or provide other advantages to active users, which will
    motivate other users to contribute more to your website.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing user scores is pretty simple. You need a data model to maintain
    scores in the database. After that, you can use the Django model API to access
    and manipulate scores from within views.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The purpose of this chapter is to prepare you for tasks that are not covered
    in this book. It introduced you to a number of topics. When a need arises for
    a certain feature, you now know where to look in order to find a framework that
    helps you to implement the feature quickly and cleanly.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter also gave you some ideas that you may want to implement into our
    bookmarking application. Working on these features will give you more opportunities
    to experiment with Django and extend your knowledge of its frameworks and inner
    workings.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we are going to cover various ways of database connectivity,
    such as MySQL, NoSQL, PostgreSQL and so on, which is required for any database-based
    application.
  prefs: []
  type: TYPE_NORMAL
