- en: Chapter 1. Getting Started withPaths and Text
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Drawing a line
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Drawing an arc
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Drawing a Quadratic curve
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Drawing a Bezier curve
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Drawing a zigzag
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Drawing a spiral
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with text
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Drawing 3D text with shadows
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Unlocking the power of fractals: Drawing a haunted tree'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter is designed to demonstrate the fundamental capabilities of the
    HTML5 canvas by providing a series of progressively complex tasks. The HTML5 canvas
    API provides the basic tools necessary to draw and style different types of sub
    paths including lines, arcs, Quadratic curves, and Bezier curves, as well as a
    means for creating paths by connecting sub paths. The API also provides great
    support for text drawing with several styling properties. Let's get started!
  prefs: []
  type: TYPE_NORMAL
- en: Drawing a line
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When learning how to draw with the HTML5 canvas for the first time, most people
    are interested in drawing the most basic and rudimentary element of the canvas.
    This recipe will show you how to do just that by drawing a simple straight line.
  prefs: []
  type: TYPE_NORMAL
- en: '![Drawing a line](img/1369_01_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to draw a diagonal line:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Define a 2D canvas context and set the line style:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Position the canvas context and draw the line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Embed the canvas tag inside the body of the HTML document:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Downloading the example code**'
  prefs: []
  type: TYPE_NORMAL
- en: You can run the demos and download the resources for this book from [www.html5canvastutorials.com/cookbook](http://www.html5canvastutorials.com/cookbook)
    or you can download the example code files for all Packt books you have purchased
    from your account at [http://www.PacktPub.com](http://www.PacktPub.com). If you
    purchased this book elsewhere, you can visit [http://www.PacktPub.com/support](http://www.PacktPub.com/support)
    and register to have the files e-mailed directly to you.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you can see from the preceding code, we need to wait for the page to load
    before trying to access the canvas tag by its ID. We can accomplish this with
    the `window.onload` initializer. Once the page loads, we can access the canvas
    DOM element with `document.getElementById()` and we can define a 2D `canvas` context
    by passing `2d` into the `getContext()` method of the canvas object. As we will
    see in the last two chapters, we can also define 3D contexts by passing in other
    contexts such as `webgl`, `experimental-webgl`, and others.
  prefs: []
  type: TYPE_NORMAL
- en: When drawing a particular element, such as a path, sub path, or shape, it's
    important to understand that styles can be set at any time, either before or after
    the element is drawn, but that the style must be applied immediately after the
    element is drawn for it to take effect, We can set the width of our line with
    the `lineWidth` property, and we can set the line color with the `strokeStyle`
    property. Think of this behavior like the steps that we would take if we were
    to draw something onto a piece of paper. Before we started to draw, we would choose
    a colored marker (`strokeStyle`) with a certain tip thickness (`lineWidth`).
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have our marker in hand, so to speak, we can position it onto the
    canvas using the `moveTo()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Think of the canvas context as a drawing cursor. The `moveTo()` method creates
    a new sub path for the given point. The coordinates in the top-left corner of
    the canvas are (0,0), and the coordinates in the bottom-right corner are (canvas
    width, canvas height).
  prefs: []
  type: TYPE_NORMAL
- en: 'Once we have positioned our drawing cursor, we can draw the line using the
    `lineTo()` method by defining the coordinates of the line''s end point:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Finally, to make the line visible, we can use the `stroke()` method. Unless,
    otherwise specified, the default stroke color is black.
  prefs: []
  type: TYPE_NORMAL
- en: 'To summarize, here''s the typical drawing procedure we should follow when drawing
    lines with the HTML5 canvas API:'
  prefs: []
  type: TYPE_NORMAL
- en: Style your line (like choosing a colored marker with a specific tip thickness).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Position the canvas context using `moveTo()` (like placing the marker onto a
    piece of paper).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Draw the line with `lineTo()`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Make the line visible using `stroke()`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'HTML5 canvas lines can also have one of three varying line caps, including
    **butt**, **round**, and **square**. The line cap style can be set using the `lineCap`
    property of the canvas context. Unless otherwise specified, the line cap style
    is defaulted to butt. The following diagram shows three lines, each with varying
    line cap styles. The top line is using the default butt line cap, the middle line
    is using the round line cap, and the bottom line is using a square line cap:'
  prefs: []
  type: TYPE_NORMAL
- en: '![There''s more...](img/1369_01_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Notice that the middle and bottom lines are slightly longer than the top line,
    even though all of the line widths are equal. This is because the round line cap
    and the square line cap increase the length of a line by an amount equal to the
    width of the line. For example, if our line is 200 px long and 10 px wide, and
    we use a round or square line cap style, the resulting line will be 210 px long
    because each cap adds 5 px to the line length.
  prefs: []
  type: TYPE_NORMAL
- en: See also...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*Drawing a zigzag*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Putting it all together: Drawing a jet* in [Chapter 2](ch02.html "Chapter 2. Shape
    Drawing and Composites")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Drawing an arc
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When drawing with the HTML5 canvas, it's sometimes necessary to draw perfect
    arcs. If you're interested in drawing happy rainbows, smiley faces, or diagrams,
    this recipe would be a good start for your endeavor.
  prefs: []
  type: TYPE_NORMAL
- en: '![Drawing an arc](img/1369_01_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to draw a simple arc:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Define a 2D canvas context and set the arc style:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Draw the arc:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Embed the canvas tag inside the body of the HTML document:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can create an HTML5 arc with the `arc()` method which is defined by a section
    of the circumference of an imaginary circle. Take a look at the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/1369_01_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The imaginary circle is defined by a center point and a radius. The circumference
    section is defined by a starting angle, an ending angle, and whether or not the
    arc is drawn counter-clockwise:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Notice that the angles start with 0π at the right of the circle and move clockwise
    to 3π/2, π, π/2, and then back to 0\. For this recipe, we've used 1.1π as the
    starting angle and 1.9π as the ending angle. This means that the starting angle
    is just slightly above center on the left side of the imaginary circle, and the
    ending angle is just slightly above center on the right side of the imaginary
    circle.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The values for the starting angle and the ending angle do not necessarily have
    to lie within 0π and 2π. In fact, the starting angle and ending angle can be any
    real number because the angles can overlap themselves as they travel around the
    circle.
  prefs: []
  type: TYPE_NORMAL
- en: For example, let's say that we define our starting angle as 3π. This is equivalent
    to one full revolution around the circle (2π) and another half revolution around
    the circle (1π). In other words, 3π is equivalent to 1π. As another example, -
    3π is also equivalent to 1π because the angle travels one and a half revolutions
    counter-clockwise around the circle, ending up at 1π.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another method for creating arcs with the HTML5 canvas is to make use of the
    `arcTo()` method. The resulting arc from the `arcTo()` method is defined by the
    context point, a control point, an ending point, and a radius:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Unlike the `arc()` method, which positions an arc by its center point, the `arcTo()`
    method is dependent on the context point, similar to the `lineTo()` method. The
    `arcTo()` method is most commonly used when creating rounded corners for paths
    or shapes.
  prefs: []
  type: TYPE_NORMAL
- en: See also...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Drawing a circle in* [Chapter 2](ch02.html "Chapter 2. Shape Drawing and Composites")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Animating mechanical gears* in [Chapter 5](ch05.html "Chapter 5. Bringing
    the Canvas to Life with Animation")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Animating a clock in* [Chapter 5](ch05.html "Chapter 5. Bringing the Canvas
    to Life with Animation")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Drawing a Quadratic curve
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we'll learn how to draw a Quadratic curve. Quadratic curves
    provide much more flexibility and natural curvatures compared to its cousin, the
    arc, and are an excellent tool for creating custom shapes.
  prefs: []
  type: TYPE_NORMAL
- en: '![Drawing a Quadratic curve](img/1369_01_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to draw a Quadratic curve:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Define a 2D canvas context and set the curve style:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Position the canvas context and draw the Quadratic curve:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Embed the canvas tag inside the body of the HTML document:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'HTML5 Quadratic curves are defined by the context point, a control point, and
    an ending point:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Take a look at the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/1369_01_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The curvature of a Quadratic curve is defined by three characteristic tangents.
    The first part of the curve is tangential to an imaginary line that starts with
    the context point and ends with the control point. The peak of the curve is tangential
    to an imaginary line that starts with midpoint 1 and ends with midpoint 2\. Finally,
    the last part of the curve is tangential to an imaginary line that starts with
    the control point and ends with the ending point.
  prefs: []
  type: TYPE_NORMAL
- en: See also...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Putting it all together: Drawing a jet*, in [Chapter 2](ch02.html "Chapter 2. Shape
    Drawing and Composites")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Unlocking the power of fractals: Drawing a haunted tree*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Drawing a Bezier curve
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If Quadratic curves don't meet your needs, the Bezier curve might do the trick.
    Also known as cubic curves, the Bezier curve is the most advanced curvature available
    with the HTML5 canvas API.
  prefs: []
  type: TYPE_NORMAL
- en: '![Drawing a Bezier curve](img/1369_01_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to draw an arbitrary Bezier curve:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Define a 2D canvas context and set the curve style:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Position the canvas context and draw the Bezier curve:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Embed the canvas tag inside the body of the HTML document:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'HTML5 canvas Bezier curves are defined by the context point, two control points,
    and an ending point. The additional control point gives us much more control over
    its curvature compared to Quadratic curves:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Take a look at the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/1369_01_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Unlike Quadratic curves, which are defined by three characteristic tangents,
    the Bezier curve is defined by five characteristic tangents. The first part of
    the curve is tangential to an imaginary line that starts with the context point
    and ends with the first control point. The next part of the curve is tangential
    to the imaginary line that starts with midpoint 1 and ends with midpoint 3\. The
    peak of the curve is tangential to the imaginary line that starts with midpoint
    2 and ends with midpoint 4\. The fourth part of the curve is tangential to the
    imaginary line that starts with midpoint 3 and ends with midpoint 5\. Finally,
    the last part of the curve is tangential to the imaginary line that starts with
    the second control point and ends with the ending point.
  prefs: []
  type: TYPE_NORMAL
- en: See also...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Randomizing shape properties: Drawing a field of flowers* in [Chapter 2](ch02.html
    "Chapter 2. Shape Drawing and Composites")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Putting it all together: Drawing a jet* in [Chapter 2](ch02.html "Chapter 2. Shape
    Drawing and Composites")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Drawing a zigzag
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we'll introduce path drawing by iteratively connecting line
    subpaths to draw a zigzag path.
  prefs: []
  type: TYPE_NORMAL
- en: '![Drawing a zigzag](img/1369_01_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to draw a zigzag path:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Define a 2D canvas context and initialize the zigzag parameters:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Define the zigzag style and begin the path:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Draw seven connecting zigzag lines and then make the zigzag path visible with
    `stroke()`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Embed the canvas tag inside the body of the HTML document:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To draw a zigzag, we can connect alternating diagonal lines to form a path.
    Programmatically, this can be achieved by setting up a loop that draws diagonal
    lines moving upwards and to the right on odd iterations, and downwards and to
    the right on even iterations.
  prefs: []
  type: TYPE_NORMAL
- en: The key thing to pay attention to in this recipe is the `beginPath()` method.
    This method essentially declares that a path is being drawn, such that the end
    of each line sub path defines the beginning of the next sub path. Without using
    the `beginPath()` method, we would have to tediously position the canvas context
    using `moveTo()` for each line segment while ensuring that the ending points of
    the previous line segment match the starting point of the current line segment.
    As we will see in the next chapter, the `beginPath()` method is also a required
    step for creating shapes.
  prefs: []
  type: TYPE_NORMAL
- en: Line join styles
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Notice how the connection between each line segment comes to a sharp point.
    This is because the line join style of the HTML5 canvas path is defaulted to **miter**.
    Alternatively, we could also set the line join style to **round** or **bevel**
    with the `lineJoin` property of the canvas context.
  prefs: []
  type: TYPE_NORMAL
- en: If your line segments are fairly thin and don't connect at steep angles, it
    can be somewhat difficult to distinguish different line join styles. Typically,
    different line join styles are more noticeable when the path thickness exceeds
    5 px and the angle between line sub paths is relatively small.
  prefs: []
  type: TYPE_NORMAL
- en: Drawing a spiral
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Caution, this recipe may induce hypnosis. In this recipe, we'll draw a spiral
    by connecting a series of short lines to form a spiral path.
  prefs: []
  type: TYPE_NORMAL
- en: '![Drawing a spiral](img/1369_01_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to draw a centered spiral:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Define a 2D canvas context and initialize the spiral parameters:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Set the spiral style:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Rotate about the center of the canvas three times (50 iterations per full revolution)
    while increasing the radius by 0.75 for each iteration and draw a line segment
    to the current point from the previous point with `lineTo()`. Finally, make the
    spiral visible with `stroke()`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Embed the canvas tag inside the body of the HTML document:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To draw a spiral with HTML5 canvas, we can place our drawing cursor in the center
    of the canvas, iteratively increase the radius and angle about the center, and
    then draw a super short line from the previous point to the current point. Another
    way to think about it is to imagine yourself as a kid standing on a sidewalk with
    a piece of colored chalk. Bend down and put the chalk on the sidewalk, and then
    start turning in a circle (not too fast, though, unless you want to get dizzy
    and fall over). As you spin around, move the piece of chalk outward away from
    you. After a few revolutions, you'll have drawn a neat little spiral.
  prefs: []
  type: TYPE_NORMAL
- en: Working with text
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Almost all applications require some sort of text to effectively communicate
    something to the user. This recipe will show you how to draw a simple text string
    with an optimistic welcoming.
  prefs: []
  type: TYPE_NORMAL
- en: '![Working with text](img/1369_01_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to write text on the canvas:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Define a 2D canvas context and set the text style:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Horizontally and vertically align the text, and then draw it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Embed the canvas tag inside the body of the HTML document:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To draw text with the HTML5 canvas, we can define the font style and size with
    the `font` property, the font color with the `fillStyle` property, the horizontal
    text alignment with the `textAlign` property, and the vertical text alignment
    with the `textBaseline` property. The `textAlign` property can be set to `left`,
    `center`, or `right`, and the `textBaseline` property can be set to `top`, `hanging`,
    `middle`, `alphabetic`, `ideographic`, or `bottom`. Unless otherwise specified,
    the `textAlign` property is defaulted to `left`, and the `textBaseline` property
    is defaulted to alphabetic.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In addition to `fillText()`, the HTML5 canvas API also supports `strokeText()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: This method will color the perimeter of the text instead of filling it. To set
    both the fill and stroke for HTML canvas text, you can use both the `fillText()`
    and the `strokeText()` methods together. It's good practice to use the `fillText()`
    method before the `strokeText()` method in order to render the stroke thickness
    correctly.
  prefs: []
  type: TYPE_NORMAL
- en: See also...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Drawing 3D text with shadows*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Creating a mirror transform in* [Chapter 4](ch04.html "Chapter 4. Mastering
    Transformations")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Drawing a simple logo and randomizing its position, rotation, and scale in*
    [Chapter 4](ch04.html "Chapter 4. Mastering Transformations")'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Drawing 3D text with shadows
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If 2D text doesn't get you jazzed, you might consider drawing 3D text instead.
    Although the HTML5 canvas API doesn't directly provide us with a means for creating
    3D text, we can certainly create a custom `draw3dText()` method using the existing
    API.
  prefs: []
  type: TYPE_NORMAL
- en: '![Drawing 3D text with shadows](img/1369_01_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to create 3D text:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Set the canvas context and the text style:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Align and draw the 3D text:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Define the `draw3dText()` function that draws multiple text layers and adds
    a shadow:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Embed the canvas tag inside the body of the HTML document:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To draw 3D text with the HTML5 canvas, we can stack multiple layers of the same
    text on top of one another to create the illusion of depth. In this recipe, we've
    set the text depth to five, which means that our custom `draw3dText()` method
    layers five instances of "Hello 3D World!" on top of one another. We can color
    these layers black to create the illusion of darkness beneath our text.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we can add a colored top layer to portray a forward-facing surface. Finally,
    we can apply a soft shadow beneath the text by setting the `shadowColor`, `shadowBlur`,
    `shadowOffsetX`, and `shadowOffsetY` properties of the canvas context. As we'll
    see in later recipes, these properties aren't limited to text and can also be
    applied to sub paths, paths, and shapes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Unlocking the power of fractals: Drawing a haunted tree'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: First thing's first—what are fractals? If you don't already know, fractals are
    the awesome result when you mix mathematics with art, and can be found in all
    sorts of patterns that make up life. Algorithmically, a fractal is based on an
    equation that undergoes recursion. In this recipe, we'll create an organic-looking
    tree by drawing a trunk which forks into two branches, and then draw two more
    branches that stem from the branches we just drew. After twelve iterations, we'll
    end up with an elaborate, seemingly chaotic mesh of branches and twigs.
  prefs: []
  type: TYPE_NORMAL
- en: '![Unlocking the power of fractals: Drawing a haunted tree](img/1369_01_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to draw a tree using fractals:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a recursive function that draws a single branch that forks out into
    two branches, and then recursively calls itself to draw another two branches from
    the end points of the forked branches:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Initialize the canvas context and begin drawing the tree fractal by calling
    `drawBranches()`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Embed the canvas tag inside the body of the HTML document:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To create a tree using fractals, we need to design the recursive function that
    defines the mathematical nature of a tree. If you take a moment and study a tree
    (they are quite beautiful if you think about it), you'll notice that each branch
    forks into smaller branches. In turn, those branches fork into even smaller branches,
    and so on. This means that our recursive function should draw a single branch
    that forks into two branches, and then recursively calls itself to draw another
    two branches that stem from the two branches we just drew.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have a plan for creating our fractal, we can implement it using
    the HTML5 canvas API. The easiest way to draw a branch that forks into two branches
    is by drawing two Quadratic curves that bend outwards from one another.
  prefs: []
  type: TYPE_NORMAL
- en: If we were to use the exact same drawing procedure for each iteration, our tree
    would be perfectly symmetrical and quite uninteresting. To help make our tree
    look more natural, we can introduce random variables that offset the ending points
    of each branch.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The fun thing about this recipe is that every tree is different. If you code
    this one up for yourself and continuously refresh your browser, you'll see that
    every tree formation is completely unique. You might also be interested in tweaking
    the branch-drawing algorithm to create different kinds of trees, or even draw
    leaves at the tips of the smallest branches.
  prefs: []
  type: TYPE_NORMAL
- en: Some other great examples of fractals can be found in sea shells, snowflakes,
    feathers, plant life, crystals, mountains, rivers, and lightning.
  prefs: []
  type: TYPE_NORMAL
