- en: Chapter 2. Application Design
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Gathering requirements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a concept document
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: HTML mockups
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to divide a project into Apps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Whether to write a new app or reuse an existing one
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Best practices before starting a project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Why Python 3?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Starting the SuperBook project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Many novice developers approach a new project by beginning to write code right
    away. More often than not it leads to incorrect assumptions, unused features and
    lost time. Spending some time with your client in understanding core requirements
    even in a project short on time can yield incredible results. Managing requirements
    is a key skill worth learning.
  prefs: []
  type: TYPE_NORMAL
- en: How to gather requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '|   | *Innovation is not about saying yes to everything. It''s about saying
    NO to all but the most crucial features.* |   |'
  prefs: []
  type: TYPE_TB
- en: '|   | --*Steve Jobs* |'
  prefs: []
  type: TYPE_TB
- en: 'I saved several doomed projects by spending a few days with the client to carefully
    listen to their needs and set the right expectations. Armed with nothing but a
    pencil and paper (or their digital equivalents), the process is incredibly simple
    but effective. Here are some of the key points to remember while gathering requirements:'
  prefs: []
  type: TYPE_NORMAL
- en: Talk directly to the application owners even if they are not technical savvy.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Make sure you listen to their needs fully and note them.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Don't use technical jargon such as "models". Keep it simple and use end-user
    friendly terms such as a "user profile".
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the right expectations. If something is not technically feasible or difficult,
    make sure you tell them right away.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Sketch as much as possible. Humans are visual in nature. Websites more so. Use
    rough lines and stick figures. No need to be perfect.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Break down process flows such as user signup. Any multistep functionality needs
    to be drawn as boxes connected by arrows.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, work through the features list in the form of user stories or in any
    easy way to understand the form.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Play an active role in prioritizing the features into high, medium, or low buckets.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Be very, very conservative in accepting new features.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Post-meeting, share your notes with everyone to avoid misinterpretations.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The first meeting will be long (perhaps a day-long workshop or couple of hour-long
    meetings). Later, when these meetings become frequent, you can trim them down
    to 30 minutes or one hour.
  prefs: []
  type: TYPE_NORMAL
- en: The output of all this would be a one page write-up and a couple of poorly drawn
    sketches.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this book, we have taken upon ourselves the noble project of building a
    social network called SuperBook for superheroes. A simple sketch based off our
    discussions with a bunch of randomly selected superheroes is shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to gather requirements](img/6644OS_02_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: A sketch of the SuperBook website in responsive design. Desktop (left) and smartphone
    (right) layouts are shown.
  prefs: []
  type: TYPE_NORMAL
- en: Are you a story teller?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So what is this one page write-up? It is a simple document that explains how
    it feels to use the site. In almost all the projects I have worked with, when
    someone new joins the team, they don't normally go through every bit of paperwork.
    He or she would be thrilled if they find a single-page document that quickly tells
    them what the site is meant to be.
  prefs: []
  type: TYPE_NORMAL
- en: You can call this document whatever you like—concept document, market requirements
    document, customer experience documentation, or even an Epic Fragile StoryLog™
    (patent pending). It really doesn't matter.
  prefs: []
  type: TYPE_NORMAL
- en: The document should focus on the user experience rather than technical or implementation
    details. Make it short and interesting to read. In fact, Joel Spolsky's rule number
    one on documenting requirements is "Be Funny".
  prefs: []
  type: TYPE_NORMAL
- en: If possible, write about a typical user (*persona* in marketing speak), the
    problem they are facing, and how the web application solves it. Imagine how they
    would explain the experience to a friend. Try to capture this.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a concept document for the SuperBook project:'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**The SuperBook concept**'
  prefs: []
  type: TYPE_NORMAL
- en: The following interview was conducted after our website SuperBook was launched
    in the future. A 30 minute user test was conducted just prior to the interview.
  prefs: []
  type: TYPE_NORMAL
- en: '**Please introduce yourself.**'
  prefs: []
  type: TYPE_NORMAL
- en: My name is Aksel. I am a gray squirrel living in downtown New York. However,
    everyone calls me Acorn. My dad, T. Berry, a famous hip-hop star, used to call
    me that. I guess I was never good enough at singing to take up the family business.
  prefs: []
  type: TYPE_NORMAL
- en: Actually, in my early days, I was a bit of a kleptomaniac. I am allergic to
    nuts, you know. Other bros have it easy. They can just live off any park. I had
    to improvise—cafes, movie halls, amusement parks, and so on. I read labels very
    carefully too.
  prefs: []
  type: TYPE_NORMAL
- en: '**Ok, Acorn. Why do you think you were chosen for the user testing?**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Probably, because I was featured in a NY Star special on lesser-known superheroes.
    I guess people find it amusing that a squirrel can use a MacBook (*Interviewer:
    this interview was conducted over chat*). Plus, I have the attention span of a
    squirrel.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Based on what you saw, what is your opinion about SuperBook?**'
  prefs: []
  type: TYPE_NORMAL
- en: I think it is a fantastic idea. I mean, people see superheroes all the time.
    However, nobody cares about them. Most are lonely and antisocial. SuperBook could
    change that.
  prefs: []
  type: TYPE_NORMAL
- en: '**What do you think is different about Superbook?**'
  prefs: []
  type: TYPE_NORMAL
- en: It is built from the ground up for people like us. I mean, there is no "Work
    and Education" nonsense when you want to use your secret identity. Though I don't
    have one, I can understand why one would.
  prefs: []
  type: TYPE_NORMAL
- en: '**Could you tell us briefly some of the features you noticed?**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Sure, I think this is a pretty decent social network, where you can:'
  prefs: []
  type: TYPE_NORMAL
- en: Sign up with any user name (no more, "enter your real name", silliness)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fans can follow people without having to add them as "friends"
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Make posts, comment on them, and re-share them
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Send a private post to another user
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Everything is easy. It doesn't take a superhuman effort to figure it out.
  prefs: []
  type: TYPE_NORMAL
- en: '**Thanks for your time, Acorn.**'
  prefs: []
  type: TYPE_NORMAL
- en: HTML mockups
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the early days of building web applications, tools such as Photoshop and
    Flash were used extensively to get pixel-perfect mockups. They are hardly recommended
    or used anymore.
  prefs: []
  type: TYPE_NORMAL
- en: Giving a native and consistent experience across smartphones, tablets, laptops,
    and other platforms is now considered more important than getting that pixel-perfect
    look. In fact, most web designers directly create layouts on HTML.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an HTML mockup is a lot faster and easier than before. If your web
    designer is unavailable, developers can use a CSS framework such as Bootstrap
    or ZURB Foundation framework to create pretty decent mockups.
  prefs: []
  type: TYPE_NORMAL
- en: The goal of creating a mockup is to create a realistic preview of the website.
    It should not merely focus on details and polish to look closer to the final product
    compared to a sketch, but add interactivity as well. Make your static HTML come
    to life with working links and some simple JavaScript-driven interactivity.
  prefs: []
  type: TYPE_NORMAL
- en: A good mockup can give 80 percent of customer experience with less than 20 percent
    of the overall development effort.
  prefs: []
  type: TYPE_NORMAL
- en: Designing the application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you have a fairly good idea of what you need to build, you can start to
    think about the implementation in Django. Once again, it is tempting to start
    coding away. However, when you spend a few minutes thinking about the design,
    you can find plenty of different ways to solve a design problem.
  prefs: []
  type: TYPE_NORMAL
- en: You can also start designing tests first, as advocated in **Test-driven Design**
    (**TDD**) methodology. We will see more of the TDD approach in the testing chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Whichever approach you take, it is best to stop and think—"Which are the different
    ways in which I can implement this? What are the trade-offs? Which factors are
    more important in our context? Finally, which approach is the best?"
  prefs: []
  type: TYPE_NORMAL
- en: Experienced Django developers look at the overall project in different ways.
    Sticking to the DRY principle (or sometimes because they get lazy), they think—"Have
    I seen this functionality before? For instance, can this social login feature
    be implemented using a third-party package such as `django-all-auth`?"
  prefs: []
  type: TYPE_NORMAL
- en: If they have to write the app themselves, they start thinking of various design
    patterns in the hope of an elegant design. However, they first need to break down
    a project at the top level into apps.
  prefs: []
  type: TYPE_NORMAL
- en: Dividing a project into Apps
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Django applications are called *projects*. A project is made up of several applications
    or *apps*. An app is a Python package that provides a set of features.
  prefs: []
  type: TYPE_NORMAL
- en: Ideally, each app must be reusable. You can create as many apps as you need.
    Never be afraid to add more apps or refactor the existing ones into multiple apps.
    A typical Django project contains 15-20 apps.
  prefs: []
  type: TYPE_NORMAL
- en: An important decision to make at this stage is whether to use a third-party
    Django app or build one from scratch. Third-party apps are ready-to-use apps,
    which are not built by you. Most packages are quick to install and set up. You
    can start using them in a few minutes.
  prefs: []
  type: TYPE_NORMAL
- en: On the other hand, writing your own app often means designing and implementing
    the models, views, test cases, and so on yourself. Django will make no distinction
    between apps of either kind.
  prefs: []
  type: TYPE_NORMAL
- en: Reuse or roll-your-own?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One of Django's biggest strengths is the huge ecosystem of third-party apps.
    At the time of writing, [djangopackages.com](http://djangopackages.com) lists
    more than 2,600 packages. You might find that your company or personal library
    has even more. Once your project is broken into apps and you know which kind of
    apps you need, you will need to take a call for each app—whether to write or reuse
    an existing one.
  prefs: []
  type: TYPE_NORMAL
- en: 'It might sound easier to install and use a readily available app. However,
    it not as simple as it sounds. Let''s take a look at some third-party authentication
    apps for our project, and list the reasons why we didn''t use them for SuperBook
    at the time of writing:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Over-engineered for our needs**: We felt that `python-social-auth` with support
    for any social login was unnecessary'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Too specific**: Using `django-facebook` would mean tying our authentication
    to that provided by a specific website'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Python dependencies**: One of the requirements of `django-allauth` is `python-openid`,
    which is not actively maintained or unapproved'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Non-Python dependencies**: Some packages might have non-Python dependencies,
    such as Redis or Node.js, which have deployment overheads'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Not reusable**: Many of our own apps were not used because they were not
    very easy to reuse or were not written to be reusable'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: None of these packages are bad. They just don't meet our needs for now. They
    might be useful for a different project. In our case, the built-in Django `auth`
    app was good enough.
  prefs: []
  type: TYPE_NORMAL
- en: 'On the other hand, you might prefer to use a third-party app for some of the
    following reasons:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Too hard to get right**: Do your model''s instances need to form a tree?
    Use `django-mptt` for a database-efficient implementation'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Best or recommended app for the job**: This changes over time but packages
    such as `django-redis` are the most recommended for their use case'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Missing batteries**: Many feel that packages such as `django-model-utils`
    and `django-extensions` should have been part of the framework'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Minimal dependencies**: This is always good in my book'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: So, should you reuse apps and save time or write a new custom app? I would recommend
    that you try a third-party app in a sandbox. If you are an intermediate Django
    developer, then the next section will tell you how to try packages in a sandbox.
  prefs: []
  type: TYPE_NORMAL
- en: My app sandbox
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: From time to time, you will come across several blog posts listing the "must-have
    Django packages". However, the best way to decide whether a package is appropriate
    for your project is Prototyping.
  prefs: []
  type: TYPE_NORMAL
- en: Even if you have created a Python virtual environment for development, trying
    all these packages and later discarding them can litter your environment. So,
    I usually end up creating a separate virtual environment named "sandbox" purely
    for trying such apps. Then, I build a small project to understand how easy it
    is to use.
  prefs: []
  type: TYPE_NORMAL
- en: Later, if I am happy with my test drive of the app, I create a branch in my
    project using a version control tool such as Git to integrate the app. Then, I
    continue with coding and running tests in the branch until the necessary features
    are added. Finally, this branch will be reviewed and merged back to the mainline
    (sometimes called `master`) branch.
  prefs: []
  type: TYPE_NORMAL
- en: Which packages made it?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To illustrate the process, our SuperBook project can be roughly broken down
    into the following apps (not the complete list):'
  prefs: []
  type: TYPE_NORMAL
- en: '**Authentication** (built-in `django.auth`): This app handles user signups,
    login, and logout'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Accounts** (custom): This app provides additional user profile information'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Posts** (custom): This app provides posts and comments functionality'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Pows** (custom): This app tracks how many "pows" (upvotes or likes) any item
    gets'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Bootstrap forms** (crispy-forms): This app handles the form layout and styling'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Here, an app has been marked to be built from scratch (tagged "custom") or the
    third-party Django app that we would be using. As the project progresses, these
    choices might change. However, this is good enough for a start.
  prefs: []
  type: TYPE_NORMAL
- en: Before starting the project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'While preparing a development environment, make sure that you have the following
    in place:'
  prefs: []
  type: TYPE_NORMAL
- en: '**A fresh Python virtual environment**: Python 3 includes the `venv` module
    or you can install `virtualenv`. Both of them prevent polluting your global Python
    library.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Version control**: Always use a version control tool such as Git or Mercurial.
    They are life savers. You can also make changes much more confidently and fearlessly.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Choose a project template**: Django''s default project template is not the
    only option. Based on your needs try others such as `twoscoops` ([https://github.com/twoscoops/django-twoscoops-project](https://github.com/twoscoops/django-twoscoops-project))
    or `edge` ([https://github.com/arocks/edge](https://github.com/arocks/edge)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Deployment pipeline**: I usually worry about this a bit later, but having
    an easy deployment process helps to show early progress. I prefer Fabric or Ansible.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SuperBook – your mission, should you choose to accept it
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book believes in a practical and pragmatic approach of demonstrating Django
    design patterns and the best practices through examples. For consistency, all
    our examples will be about building a social network project called SuperBook.
  prefs: []
  type: TYPE_NORMAL
- en: SuperBook focusses exclusively on the niche and often neglected market segment
    of people with exceptional super powers. You are one of the developers in a team
    comprised of other developers, web designers, a marketing manager, and a project
    manager.
  prefs: []
  type: TYPE_NORMAL
- en: The project will be built in the latest version of Python (Version 3.4) and
    Django (Version 1.7) at the time of writing. Since the choice of Python 3 can
    be a contentious topic, it deserves a fuller explanation.
  prefs: []
  type: TYPE_NORMAL
- en: Why Python 3?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: While the development of Python 3 started in 2006, its first release, Python
    3.0, was released on December 3, 2008\. The main reasons for a backward incompatible
    version were—switching to Unicode for all strings, increased use of iterators,
    cleanup of deprecated features such as old-style classes, and some new syntactic
    additions such as the `nonlocal` statement.
  prefs: []
  type: TYPE_NORMAL
- en: The reaction to Python 3 in the Django community was rather mixed. Even though
    the language changes between Version 2 and 3 were small (and over time, reduced),
    porting the entire Django codebase was a significant migration effort.
  prefs: []
  type: TYPE_NORMAL
- en: On February 13, Django 1.5 became the first version to support Python 3\. Developers
    have clarified that, in future, Django will be written for Python 3 with an aim
    to be backward compatible to Python 2.
  prefs: []
  type: TYPE_NORMAL
- en: 'For this book, Python 3 was ideal for the following reasons:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Better syntax**: This fixes a lot of ugly syntaxes, such as `izip`, `xrange`,
    and `__unicode__,` with the cleaner and more straightforward `zip`, `range`, and
    `__str__`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Sufficient third-party support**: Of the top 200 third-party libraries, more
    than 80 percent have Python 3 support.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**No legacy code**: We are creating a new project, rather than dealing with
    legacy code that needs to support an older version.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Default in modern platforms**: This is already the default Python interpreter
    in Arch Linux. Ubuntu and Fedora plan to complete the switch in a future release.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**It is easy**: From a Django development point of view, there are very few
    changes, and they can all be learnt in a few minutes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The last point is important. Even if you are using Python 2, this book will
    serve you fine. Read Appendix A to understand the changes. You will need to make
    only minimal adjustments to backport the example code.
  prefs: []
  type: TYPE_NORMAL
- en: Starting the project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This section has the installation instructions for the SuperBook project, which
    contains all the example code used in this book. Do check the project's README
    file for the latest installation notes. It is recommended that you create a fresh
    directory, `superbook`, first that will contain the virtual environment and the
    project source code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Ideally, every Django project should be in its own separate virtual environment.
    This makes it easy to install, update, and delete packages without affecting other
    applications. In Python 3.4, using the built-in `venv` module is recommended since
    it also installs `pip` by default:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'These commands should work in most Unix-based operating systems. For installation
    instructions on other operating systems or detailed steps please refer to the
    README file at the Github repository: [https://github.com/DjangoPatternsBook/superbook](https://github.com/DjangoPatternsBook/superbook).
    In the first line, we are invoking the Python 3.4 executable as `python3`; do
    confirm if this is correct for your operating system and distribution.'
  prefs: []
  type: TYPE_NORMAL
- en: The last export command might not be required in some cases. If running `pip
    freeze` lists your system packages rather than being empty, then you will need
    to enter this line.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Before starting your Django project, create a fresh virtual environment.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, clone the example project from GitHub and install the dependencies:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'If you would like to take a look at the finished SuperBook website, just run
    `migrate` and start the test server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: In Django 1.7, the `migrate` command has superseded the `syncdb` command. We
    also need to explicitly invoke the `createsuperuser` command to create a super
    user so that we can access the admin.
  prefs: []
  type: TYPE_NORMAL
- en: You can navigate to `http://127.0.0.1:8000` or the URL indicated in your terminal
    and feel free to play around with the site.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Beginners often underestimate the importance of a good requirements-gathering
    process. At the same time, it is important not to get bogged down with the details,
    because programming is inherently an exploratory process. The most successful
    projects spend the right amount of time preparing and planning before development
    so that it yields the maximum benefits.
  prefs: []
  type: TYPE_NORMAL
- en: We discussed many aspects of designing an application, such as creating interactive
    mockups or dividing it into reusable components called apps. We also discussed
    the steps to set up SuperBook, our example project.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will take a look at each component of Django in detail
    and learn the design patterns and best practices around them.
  prefs: []
  type: TYPE_NORMAL
