- en: Material Design in Angular
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Material Design is the new, much-hyped, design style. It replaced flat design
    as the new must use design. Material Design was introduced by Google in 2014 and
    it expanded the card motifs of Google Now. The following is an image of a Google
    Now card:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/8366c1fe-b2ad-4802-b96b-fe7d122ecedd.png)'
  prefs: []
  type: TYPE_IMG
- en: Google Now card.
  prefs: []
  type: TYPE_NORMAL
- en: 'The whole idea behind Material Design is to build upon the grid based system,
    the responsiveness of animations and transitions, while adding depth to the design.
    Matias Duarte, the lead designer behind Material Design, put it this way:'
  prefs: []
  type: TYPE_NORMAL
- en: '"Unlike real paper, our digital material can expand and reform intelligently.
    Material has physical surfaces and edges. Seams and shadows provide meaning about
    what you can touch."'
  prefs: []
  type: TYPE_NORMAL
- en: 'Material Design is a set of very precise and complete specifications that can
    be found here: [https://material.google.com/](https://material.google.com/).'
  prefs: []
  type: TYPE_NORMAL
- en: Anyone with solid knowledge of CSS3 and HTML5 could take the written documentation
    and implement each and every component. This will, however, require a tremendous
    amount of time and effort. Luckily, we will not have to wait that long. Indeed,
    a team of talented developers assembled and created a Material Design component
    for Angular. At the time of writing, this is still in beta, meaning that some
    components are not yet implemented or not fully implemented. However, I rarely
    found myself stuck to the point where I had to change my whole design because
    of a component that was not there or not working.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will learn how to install the Angular component for Material
    Design and then use some of the most popular components. We will also have a look
    at material icons. In more detail, we will see:'
  prefs: []
  type: TYPE_NORMAL
- en: How to install Material Design for Angular
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How responsive layout is handled
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Material icons
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Buttons
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Menu
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Toolbars
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dialogs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating your own themes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing the package
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First of all, we need to install the Angular Material Design package. That
    is relatively simple using the Angular CLI:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: We install two packages here, `@angular/material` and the `hammerjs` packages.
    The first one includes in our app, the Material Design modules, which we will
    use in the next section. The second package, however, is a JavaScript implementation
    of touch movements. Some Material Design components such as `slider` depend on
    `hammerjs`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, as per the `NgModule` specification, we can import `MaterialModule` as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we need to choose a theme. Themes are sets of colors that will be applied
    to the Angular Material components. In a theme, you have the following colors:'
  prefs: []
  type: TYPE_NORMAL
- en: A primary palette consists of colors most widely used across all screens and
    components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An accent palette consists of colors utilized for the floating action button
    and interactive elements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A warn palette consists of colors used to convey error state
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A foreground palette consists of colors for text and icons
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A background palette consists of colors used for element backgrounds
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Luckily, there are default themes (the ones used by Google on most of their
    services) that we can use directly. To do so, add the following line to your `/src/styles.css`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we use the deep purple theme, which is one of the available default themes.
    You can see all default themes here: `node_modules/@angular/material/core/theming/prebuilt`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Moreover, that is it! You can run `ng serve` to transpile your project again
    and confirm that everything went according to plan. As expected, there is not
    much to show for now. Here''s a screenshot that was taken after running `ng serve`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/e0032b20-55d5-457c-bd3f-4a0612abfedd.png)App works!'
  prefs: []
  type: TYPE_NORMAL
- en: Responsive layout
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'An important part of Material Designs are responsive layouts that adapt to
    any possible screen size. To achieve this, we use breakpoint widths: 480, 600,
    840, 960, 1280, 1440, and 1600 dp as defined by the following table from [https://material.io/guidelines/layout/responsive-ui.html#responsive-ui-breakpoints](https://material.io/guidelines/layout/responsive-ui.html#responsive-ui-breakpoints):'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Breakpoint (dp)** | **Handset/ Tablet Portrait** | **Handset/ Tablet Landscape**
    | **Window** | **Columns** | **Gutter** |'
  prefs: []
  type: TYPE_TB
- en: '| 0 | Small handset |  | xsmall | 4 | 16 |'
  prefs: []
  type: TYPE_TB
- en: '| 360 | Medium handset |  | xsmall | 4 | 16 |'
  prefs: []
  type: TYPE_TB
- en: '| 400 | Large handset |  | xsmall | 4 | 16 |'
  prefs: []
  type: TYPE_TB
- en: '| 480 | Large handset | Small handset | xsmall | 4 | 16 |'
  prefs: []
  type: TYPE_TB
- en: '| 600 | Small tablet | Medium handset | small | 8 | 16/24 |'
  prefs: []
  type: TYPE_TB
- en: '| 720 | Large tablet | Large handset | small | 8 | 16/24 |'
  prefs: []
  type: TYPE_TB
- en: '| 840 | Large tablet | Large handset | small | 12 | 16/24 |'
  prefs: []
  type: TYPE_TB
- en: '| 960 |  | Small tablet | small | 12 | 24 |'
  prefs: []
  type: TYPE_TB
- en: '| 1024 |  | Large tablet | medium | 12 | 24 |'
  prefs: []
  type: TYPE_TB
- en: '| 1280 |  | Large tablet | medium | 12 | 24 |'
  prefs: []
  type: TYPE_TB
- en: '| 1440 |  |  | large | 12 | 24 |'
  prefs: []
  type: TYPE_TB
- en: '| 1600 |  |  | large | 12 | 24 |'
  prefs: []
  type: TYPE_TB
- en: '| 1920 |  |  | xlarge | 12 | 24 |'
  prefs: []
  type: TYPE_TB
- en: 'Note that all the Material Design directive we will use in this chapter already
    implement these breakpoints. However, you have to keep them in mind if you start
    theming (see the last section of the chapter) or implementing custom directives.
    CSS breakpoints are fairly easy to define but can be tedious work:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Now, the first four columns of the previous table are fairly self-explanatory,
    we have the breakpoints in dp, the Handset/Tablet Portrait, the Handset/Tablet
    Landscape, and Window. The last two, however, require some explanation. The Columns
    column indicates the number of columns equally dividing the screen for each dp
    size.
  prefs: []
  type: TYPE_NORMAL
- en: 'The gutters are the space between each of this column. Here''s a 12 column
    grid layout:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/8a292a51-269f-4761-84c1-48f4dc3cfd65.png)Columns (pink) and gutters
    (blue).'
  prefs: []
  type: TYPE_NORMAL
- en: To use the grid system you can append the `md-columns` to the classes of any
    given tag. For example, `<button class="md-2">` creates a button which is two
    columns wide.
  prefs: []
  type: TYPE_NORMAL
- en: To see your website in different sizes, you can use the Google Chrome developer's
    tools (*F12* then *CTRL* + *Shift* + *M*) or [http://material.io/resizer/](http://material.io/resizer/).
    Note that [http://material.io](http://material.io) will fail silently if the website
    you try to analyze sets *X-Frame-Options* to *DENY*.
  prefs: []
  type: TYPE_NORMAL
- en: Material icons
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's begin our journey through Material Design with the material icons. Material
    icons are icon fonts that have been created to work on any resolution and device
    (web, Android, and iOS are officially supported).
  prefs: []
  type: TYPE_NORMAL
- en: Icons convey a special meaning and developers tend to use the same icons to
    communicate the same thing. Consequently, users find their way more easily in
    your apps.
  prefs: []
  type: TYPE_NORMAL
- en: There are hundreds of icons available for you to use and new ones are added
    on a daily basis.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are some examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/e702fae1-b848-4c73-ba0f-0d20d291d80c.png)Fold icons.'
  prefs: []
  type: TYPE_NORMAL
- en: You can see all the icons at [https://material.io/icons/](https://material.io/icons/).
  prefs: []
  type: TYPE_NORMAL
- en: 'As material icons are an optional part of Material Design (that is, you could
    have Material Designed an app with, for example, font awesome icons or even custom
    ones), there''s another one liner to add to your code. In your `src/index.html`
    file, add the following in the `head` section:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The final `src/index.html` would look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, to see if the importation was successful, we will add an icon into the
    autogenerated app component. In `src/app/app.component.html`, add the following
    `<i class="material-icons">cast_connected</i>` so it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Your browser should refresh the `http://localhost:4200/` page and display the
    `cast_connected` icon:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/a3436333-5125-423b-9d99-78301d21a2d2.png)Cast connected icon.'
  prefs: []
  type: TYPE_NORMAL
- en: 'As you can see, using material icons is fairly simple. The first step is to
    identify the name of one icon you want to use on [https://material.io/icons/](https://material.io/icons/),
    then, create a `<i></i>` tag that has a `class="material-icons"` attribute and,
    finally, contains the name of the icon you want. Here are some examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '`<i class="material-icons">cast_connected</i>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<i class="material-icons">gamepad</i>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<i class="material-icons">dock</i>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<i class="material-icons">mouse</i>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Buttons
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'One of the simplest directives to use with Material Design, besides icons,
    is the button directive. We can have a button that is flat, raised, round, and
    has three different preset colors: primary, accent, and warn. Here''s a component
    with a template trying out some of the possible combinations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'And the result is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/879e3180-fa7f-40d2-8c56-bf3e8a878efb.png)'
  prefs: []
  type: TYPE_IMG
- en: 'It is followed by:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/3b5a7151-8e37-40b8-a7b1-4fc1186fbc9a.png)'
  prefs: []
  type: TYPE_IMG
- en: The Primary, Accent, and Warn colors are either defined in your `style.scss`
    as SCCS variables or in the default Material Design theme if you did not override
    them.
  prefs: []
  type: TYPE_NORMAL
- en: Menu
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we will interest ourselves in the `menu` directive. The following
    component creates a menu with four elements in it. The fourth element is disabled
    (that is, we cannot click it):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s what the menu looks like when it is closed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/dbbf37f1-1ffd-4cfc-9006-bb3c6808986a.png)Menu closed.'
  prefs: []
  type: TYPE_NORMAL
- en: 'And the open (after the user clicks it) version is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/402bfbcd-14d5-4354-be69-aacb064fdac1.png)Menu opened.'
  prefs: []
  type: TYPE_NORMAL
- en: Toolbars
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The toolbar component of Angular Material Design is to be used as followed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'This will produce the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/17f258d6-21e1-4f12-a38d-a64cde873bea.png)Bare-bones toolbar.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In addition, you can use the Angular `[color]="primary" | "accent" | "warn"`
    attribute. Also, the toolbar can contain rows by using the `<md-toolbar-row>`
    markup:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The following will produce three different toolbars, on top of each other. The
    second toolbar will be composed of three rows.
  prefs: []
  type: TYPE_NORMAL
- en: Dialogs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As per the Google definition: <q>Dialogs inform users about a specific task
    and may contain critical information, require decisions, or involve multiple tasks</q>.
    Dialogs when used in Angular have the following methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '`open(component: ComponentType<T>, config: MdDialogConfig): MdDialogRef<T>`
    that creates and opens a new dialog for the user to interact with'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`closeAll()`: void that closes the dialog'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Then, the dialog itself can use four different directives:'
  prefs: []
  type: TYPE_NORMAL
- en: '`md-dialog-title` will contain the title of the dialog like so: `<md-dialog-title>My
    Dialog Title</md-dialog-title>`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`md-dialog-content` contains the content of the dialog.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For example: `<md-dialog-content>My Dialog Content</md-dialog-title>`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`md-dialog-close` is to be added to a button `(``<button md-dialog-close>Close</button>`).
    It makes the button close the dialog itself.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`md-dialog-actions` is used to set the different actions of the dialog, that
    is, close, discard, agree, and so on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In the following example, we have a first a draft component. The draft component
    has a simple template that only contains one button. The `click` event of the
    button invokes the `openDialog` method. For the definition of the component itself,
    we have a constructor that receives an `MdDialog` named dialog. The method `openDialog`
    has two callbacks--one for actually opening the dialog and the second one for
    printing out the `result` variable contained with the `result:` string when the
    dialog is closed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, the `dialogRef` attribute of the `DraftComponent` component
    is generic. More specifically, it is a generic instance of the `DraftDialog` class.
    Let''s define it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Once again, this is a simple class. Here, we can see that the template contains
    three out of the four possible directives. Indeed, I used `<md-dialog-content>`
    to define the content of the dialog to be displayed, `<md-dialog-actions>` to
    have a dedicated space for the actions button of the dialog, and, finally, `md-dialog-close`
    to make the `Discard` button close my dialog. The component itself only has a
    construct that defines the `public` property: `MdDialogRef<DraftDialog>`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The last thing to do to be able to use this dialog is to reference it in our
    `NgModule` like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s an image of the dialog when we press the button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/6584b231-4072-422b-872e-ae19bedf2b03.png)Draft dialog.'
  prefs: []
  type: TYPE_NORMAL
- en: Side navigation drawers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Side navigation drawers are extremely popular on mobile devices. They do, however,
    start to appear in full-fledged version of websites; hence their coverage in this
    chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s what a side navigation drawer can look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/e2457bb6-3410-402a-bcc8-a10e879eddb3.png)Side navigation drawer.'
  prefs: []
  type: TYPE_NORMAL
- en: In light gray, on the left side, we have the navigation drawer that pops over
    our content when invoked. In a darker gray, we have the content of our page.
  prefs: []
  type: TYPE_NORMAL
- en: 'With the following component, we reproduce the side navigation shown at the
    beginning of this section:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: The only interesting thing here is the template. Let's break it down. First,
    we have the enclosing `<md-sidenav-container>` tag that allows us to define two
    separate areas for our content. These two areas are the `md-sidenav` and the actual
    content of our page. While the `sidenav` part of the content is clearly defined
    by the `md-sidenav` tag, the rest of our content (that is, the actual page) isn't
    enclosed in any special tag. The page content only has to be outside the `md-sidenav`
    definition. We have a reference to the `md-sidenav` block with the `#side` attribute.
    As a reminder, adding `#myName` to any Angular directive gives you a reference
    to access it inside the rest of your template. The `md-sidenav` has an open method
    that puts the focus on the `#closeButton` defined inside it. This button has a
    `click` method that invokes the `close` method of `#side`. Finally, in the page
    content we have a button that invokes `#side.open` when clicked. In addition to
    these two methods (`open` and `close`), the `md-sidenav` directive also has a
    `toggle` method that toggles the `sidenav` (that is, `opened = !opened`).
  prefs: []
  type: TYPE_NORMAL
- en: Theming
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, we could describe each and every available component available in Angular
    Material Design. However, there are a lot of them and their uses are all but complicated.
    Here''s a list of the supported directives available at the time I am writing
    this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '`buttons`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cards`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`checkbox`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`radio`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`input`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sidenav`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`toolbars`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`list`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`grid`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`icon`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`progress`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tabs`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`slide`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`slider`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`menu`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tooltip`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ripples`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dialogs`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`snackbar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In the coming months, more directives will be added to the mix. You can find
    them all here: [https://github.com/angular/material2](https://github.com/angular/material2).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Needless to say, we are covered in terms of directives. Despite this wide range
    of possibilities, we can further customize Material Design for Angular by creating
    a custom theme. In Angular Material, a theme is created by composing multiple
    palettes. In particular, a theme consists of:'
  prefs: []
  type: TYPE_NORMAL
- en: A primary palette consists of colors most widely used across all screens and
    components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An accent palette consists of colors utilized for the floating action button
    and interactive elements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A warn palette consists of colors used to convey error state
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A foreground palette consists of colors for text and icons
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A background palette consists of colors used for element backgrounds
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here''s an example of a custom theme:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Hence we have learned to create custom themes for Material Designing.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned about Material Design and responsive design for
    Angular by using Angular/Material2 module. We saw some of the most used directives
    such as `buttons`, `icons`, `dialogs`, or `sidenav`. In addition, we tackled Material
    Design customization using the theming capabilities of Angular/Material2.
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 15](5845dd1d-b820-4049-8950-5228e0635455.xhtml), *Integrating Bootstrap
    with Angular Application*, we'll see how to drive the design of our Angular2 application
    by using Bootstrap (by Twitter) instead of Material Design (by Google).
  prefs: []
  type: TYPE_NORMAL
