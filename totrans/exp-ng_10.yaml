- en: Material Design in Angular
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Material Design is the new, much-hyped, design style. It replaced flat design
    as the new must use design. Material Design was introduced by Google in 2014 and
    it expanded the card motifs of Google Now. The following is an image of a Google
    Now card:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/8366c1fe-b2ad-4802-b96b-fe7d122ecedd.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
- en: Google Now card.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: 'The whole idea behind Material Design is to build upon the grid based system,
    the responsiveness of animations and transitions, while adding depth to the design.
    Matias Duarte, the lead designer behind Material Design, put it this way:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: '"Unlike real paper, our digital material can expand and reform intelligently.
    Material has physical surfaces and edges. Seams and shadows provide meaning about
    what you can touch."'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: 'Material Design is a set of very precise and complete specifications that can
    be found here: [https://material.google.com/](https://material.google.com/).'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: Anyone with solid knowledge of CSS3 and HTML5 could take the written documentation
    and implement each and every component. This will, however, require a tremendous
    amount of time and effort. Luckily, we will not have to wait that long. Indeed,
    a team of talented developers assembled and created a Material Design component
    for Angular. At the time of writing, this is still in beta, meaning that some
    components are not yet implemented or not fully implemented. However, I rarely
    found myself stuck to the point where I had to change my whole design because
    of a component that was not there or not working.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will learn how to install the Angular component for Material
    Design and then use some of the most popular components. We will also have a look
    at material icons. In more detail, we will see:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: How to install Material Design for Angular
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How responsive layout is handled
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Material icons
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Buttons
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Menu
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Toolbars
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dialogs
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating your own themes
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing the package
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First of all, we need to install the Angular Material Design package. That
    is relatively simple using the Angular CLI:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: We install two packages here, `@angular/material` and the `hammerjs` packages.
    The first one includes in our app, the Material Design modules, which we will
    use in the next section. The second package, however, is a JavaScript implementation
    of touch movements. Some Material Design components such as `slider` depend on
    `hammerjs`.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, as per the `NgModule` specification, we can import `MaterialModule` as
    follows:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Next, we need to choose a theme. Themes are sets of colors that will be applied
    to the Angular Material components. In a theme, you have the following colors:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: A primary palette consists of colors most widely used across all screens and
    components
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An accent palette consists of colors utilized for the floating action button
    and interactive elements
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A warn palette consists of colors used to convey error state
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A foreground palette consists of colors for text and icons
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A background palette consists of colors used for element backgrounds
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Luckily, there are default themes (the ones used by Google on most of their
    services) that we can use directly. To do so, add the following line to your `/src/styles.css`
    file:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Here, we use the deep purple theme, which is one of the available default themes.
    You can see all default themes here: `node_modules/@angular/material/core/theming/prebuilt`.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: 'Moreover, that is it! You can run `ng serve` to transpile your project again
    and confirm that everything went according to plan. As expected, there is not
    much to show for now. Here''s a screenshot that was taken after running `ng serve`:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/e0032b20-55d5-457c-bd3f-4a0612abfedd.png)App works!'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: Responsive layout
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'An important part of Material Designs are responsive layouts that adapt to
    any possible screen size. To achieve this, we use breakpoint widths: 480, 600,
    840, 960, 1280, 1440, and 1600 dp as defined by the following table from [https://material.io/guidelines/layout/responsive-ui.html#responsive-ui-breakpoints](https://material.io/guidelines/layout/responsive-ui.html#responsive-ui-breakpoints):'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: '| **Breakpoint (dp)** | **Handset/ Tablet Portrait** | **Handset/ Tablet Landscape**
    | **Window** | **Columns** | **Gutter** |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
- en: '| 0 | Small handset |  | xsmall | 4 | 16 |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
- en: '| 360 | Medium handset |  | xsmall | 4 | 16 |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
- en: '| 400 | Large handset |  | xsmall | 4 | 16 |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
- en: '| 480 | Large handset | Small handset | xsmall | 4 | 16 |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
- en: '| 600 | Small tablet | Medium handset | small | 8 | 16/24 |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
- en: '| 720 | Large tablet | Large handset | small | 8 | 16/24 |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
- en: '| 840 | Large tablet | Large handset | small | 12 | 16/24 |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
- en: '| 960 |  | Small tablet | small | 12 | 24 |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
- en: '| 1024 |  | Large tablet | medium | 12 | 24 |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
- en: '| 1280 |  | Large tablet | medium | 12 | 24 |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
- en: '| 1440 |  |  | large | 12 | 24 |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
- en: '| 1600 |  |  | large | 12 | 24 |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
- en: '| 1920 |  |  | xlarge | 12 | 24 |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
- en: 'Note that all the Material Design directive we will use in this chapter already
    implement these breakpoints. However, you have to keep them in mind if you start
    theming (see the last section of the chapter) or implementing custom directives.
    CSS breakpoints are fairly easy to define but can be tedious work:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，本章中我们将使用的所有Material Design指令已经实现了这些断点。然而，如果您开始主题化（请参阅本章的最后一节）或实现自定义指令，您必须牢记它们。CSS断点相当容易定义，但可能是繁琐的工作：
- en: '[PRE3]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Now, the first four columns of the previous table are fairly self-explanatory,
    we have the breakpoints in dp, the Handset/Tablet Portrait, the Handset/Tablet
    Landscape, and Window. The last two, however, require some explanation. The Columns
    column indicates the number of columns equally dividing the screen for each dp
    size.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，前表的前四列相当不言自明，我们有dp中的断点，手持设备/平板电脑纵向，手持设备/平板电脑横向和窗口。然而，最后两个需要一些解释。列栏指示每个dp大小均等分屏幕的列数。
- en: 'The gutters are the space between each of this column. Here''s a 12 column
    grid layout:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 间距是每个列之间的空间。这是一个12列网格布局：
- en: '![](assets/8a292a51-269f-4761-84c1-48f4dc3cfd65.png)Columns (pink) and gutters
    (blue).'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/8a292a51-269f-4761-84c1-48f4dc3cfd65.png)列（粉色）和间距（蓝色）。'
- en: To use the grid system you can append the `md-columns` to the classes of any
    given tag. For example, `<button class="md-2">` creates a button which is two
    columns wide.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用网格系统，您可以将`md-columns`附加到任何给定标签的类中。例如，`<button class="md-2">`创建一个宽度为两列的按钮。
- en: To see your website in different sizes, you can use the Google Chrome developer's
    tools (*F12* then *CTRL* + *Shift* + *M*) or [http://material.io/resizer/](http://material.io/resizer/).
    Note that [http://material.io](http://material.io) will fail silently if the website
    you try to analyze sets *X-Frame-Options* to *DENY*.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看您的网站在不同尺寸下的效果，您可以使用Google Chrome开发者工具（*F12*然后*CTRL* + *Shift* + *M*）或[http://material.io/resizer/](http://material.io/resizer/)。请注意，如果您尝试分析的网站将*X-Frame-Options*设置为*DENY*，[http://material.io](http://material.io)将会静默失败。
- en: Material icons
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 材料图标
- en: Let's begin our journey through Material Design with the material icons. Material
    icons are icon fonts that have been created to work on any resolution and device
    (web, Android, and iOS are officially supported).
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从材料图标开始我们的Material Design之旅。材料图标是图标字体，已经创建为在任何分辨率和设备（Web、Android和iOS都得到了官方支持）上工作。
- en: Icons convey a special meaning and developers tend to use the same icons to
    communicate the same thing. Consequently, users find their way more easily in
    your apps.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 图标传达特殊含义，开发人员倾向于使用相同的图标来传达相同的事物。因此，用户更容易在您的应用程序中找到他们的方式。
- en: There are hundreds of icons available for you to use and new ones are added
    on a daily basis.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 有数百个图标可供您使用，每天都会添加新的图标。
- en: 'Here are some examples:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些示例：
- en: '![](assets/e702fae1-b848-4c73-ba0f-0d20d291d80c.png)Fold icons.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/e702fae1-b848-4c73-ba0f-0d20d291d80c.png)折叠图标。'
- en: You can see all the icons at [https://material.io/icons/](https://material.io/icons/).
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://material.io/icons/](https://material.io/icons/)上看到所有图标。
- en: 'As material icons are an optional part of Material Design (that is, you could
    have Material Designed an app with, for example, font awesome icons or even custom
    ones), there''s another one liner to add to your code. In your `src/index.html`
    file, add the following in the `head` section:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 由于材料图标是Material Design的可选部分（也就是说，您可以使用Material Design设计应用程序，例如，使用字体awesome图标甚至自定义图标），因此还有另一行代码需要添加到您的代码中。在您的`src/index.html`文件中，在`head`部分中添加以下内容：
- en: '[PRE4]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The final `src/index.html` would look like this:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 最终的`src/index.html`将如下所示：
- en: '[PRE5]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now, to see if the importation was successful, we will add an icon into the
    autogenerated app component. In `src/app/app.component.html`, add the following
    `<i class="material-icons">cast_connected</i>` so it looks like this:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Your browser should refresh the `http://localhost:4200/` page and display the
    `cast_connected` icon:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/a3436333-5125-423b-9d99-78301d21a2d2.png)Cast connected icon.'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: 'As you can see, using material icons is fairly simple. The first step is to
    identify the name of one icon you want to use on [https://material.io/icons/](https://material.io/icons/),
    then, create a `<i></i>` tag that has a `class="material-icons"` attribute and,
    finally, contains the name of the icon you want. Here are some examples:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: '`<i class="material-icons">cast_connected</i>`'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<i class="material-icons">gamepad</i>`'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<i class="material-icons">dock</i>`'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<i class="material-icons">mouse</i>`'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Buttons
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'One of the simplest directives to use with Material Design, besides icons,
    is the button directive. We can have a button that is flat, raised, round, and
    has three different preset colors: primary, accent, and warn. Here''s a component
    with a template trying out some of the possible combinations:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'And the result is shown here:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/879e3180-fa7f-40d2-8c56-bf3e8a878efb.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
- en: 'It is followed by:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/3b5a7151-8e37-40b8-a7b1-4fc1186fbc9a.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
- en: The Primary, Accent, and Warn colors are either defined in your `style.scss`
    as SCCS variables or in the default Material Design theme if you did not override
    them.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: Menu
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we will interest ourselves in the `menu` directive. The following
    component creates a menu with four elements in it. The fourth element is disabled
    (that is, we cannot click it):'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Here''s what the menu looks like when it is closed:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/dbbf37f1-1ffd-4cfc-9006-bb3c6808986a.png)Menu closed.'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: 'And the open (after the user clicks it) version is shown in the following screenshot:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/402bfbcd-14d5-4354-be69-aacb064fdac1.png)Menu opened.'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: Toolbars
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The toolbar component of Angular Material Design is to be used as followed:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'This will produce the following:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/17f258d6-21e1-4f12-a38d-a64cde873bea.png)Bare-bones toolbar.'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: 'In addition, you can use the Angular `[color]="primary" | "accent" | "warn"`
    attribute. Also, the toolbar can contain rows by using the `<md-toolbar-row>`
    markup:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The following will produce three different toolbars, on top of each other. The
    second toolbar will be composed of three rows.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: Dialogs
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As per the Google definition: <q>Dialogs inform users about a specific task
    and may contain critical information, require decisions, or involve multiple tasks</q>.
    Dialogs when used in Angular have the following methods:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 根据谷歌的定义：<q>对话框通知用户特定任务的信息，可能包含关键信息，需要决策，或涉及多个任务</q>。在Angular中使用对话框时，有以下方法：
- en: '`open(component: ComponentType<T>, config: MdDialogConfig): MdDialogRef<T>`
    that creates and opens a new dialog for the user to interact with'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`open(component: ComponentType<T>, config: MdDialogConfig): MdDialogRef<T>`，创建并打开一个新的对话框，供用户进行交互'
- en: '`closeAll()`: void that closes the dialog'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`closeAll()`: 用于关闭对话框的void'
- en: 'Then, the dialog itself can use four different directives:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，对话框本身可以使用四个不同的指令：
- en: '`md-dialog-title` will contain the title of the dialog like so: `<md-dialog-title>My
    Dialog Title</md-dialog-title>`.'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`md-dialog-title`将包含对话框的标题，如下所示：`<md-dialog-title>我的对话框标题</md-dialog-title>`。'
- en: '`md-dialog-content` contains the content of the dialog.'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`md-dialog-content`包含对话框的内容。'
- en: 'For example: `<md-dialog-content>My Dialog Content</md-dialog-title>`.'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：`<md-dialog-content>我的对话框内容</md-dialog-title>`。
- en: '`md-dialog-close` is to be added to a button `(``<button md-dialog-close>Close</button>`).
    It makes the button close the dialog itself.'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`md-dialog-close`要添加到按钮中（`<button md-dialog-close>关闭</button>`）。它使按钮关闭对话框本身。'
- en: '`md-dialog-actions` is used to set the different actions of the dialog, that
    is, close, discard, agree, and so on.'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`md-dialog-actions`用于设置对话框的不同操作，即关闭、放弃、同意等。'
- en: 'In the following example, we have a first a draft component. The draft component
    has a simple template that only contains one button. The `click` event of the
    button invokes the `openDialog` method. For the definition of the component itself,
    we have a constructor that receives an `MdDialog` named dialog. The method `openDialog`
    has two callbacks--one for actually opening the dialog and the second one for
    printing out the `result` variable contained with the `result:` string when the
    dialog is closed:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的示例中，我们首先有一个草稿组件。草稿组件有一个简单的模板，只包含一个按钮。按钮的`click`事件调用`openDialog`方法。对于组件本身的定义，我们有一个接收名为`dialog`的`MdDialog`的构造函数。`openDialog`方法有两个回调--一个用于实际打开对话框，另一个用于在对话框关闭时打印包含在`result:`字符串中的`result`变量：
- en: '[PRE11]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'As you can see, the `dialogRef` attribute of the `DraftComponent` component
    is generic. More specifically, it is a generic instance of the `DraftDialog` class.
    Let''s define it:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，`DraftComponent`组件的`dialogRef`属性是通用的。更具体地说，它是`DraftDialog`类的通用实例。让我们来定义它：
- en: '[PRE12]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Once again, this is a simple class. Here, we can see that the template contains
    three out of the four possible directives. Indeed, I used `<md-dialog-content>`
    to define the content of the dialog to be displayed, `<md-dialog-actions>` to
    have a dedicated space for the actions button of the dialog, and, finally, `md-dialog-close`
    to make the `Discard` button close my dialog. The component itself only has a
    construct that defines the `public` property: `MdDialogRef<DraftDialog>`.'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 再次强调，这是一个简单的类。在这里，我们可以看到模板包含了四个可能的指令中的三个。的确，我使用了`<md-dialog-content>`来定义要显示的对话框内容，`<md-dialog-actions>`来为对话框的操作按钮提供专用空间，最后，使用`md-dialog-close`来使“放弃”按钮关闭我的对话框。组件本身只有一个构造函数，定义了`public`属性：`MdDialogRef<DraftDialog>`。
- en: 'The last thing to do to be able to use this dialog is to reference it in our
    `NgModule` like so:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此对话框的最后一步是在我们的`NgModule`中引用它，就像这样：
- en: '[PRE13]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Here''s an image of the dialog when we press the button:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们按下按钮时，这是对话框的图像：
- en: '![](assets/6584b231-4072-422b-872e-ae19bedf2b03.png)Draft dialog.'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/6584b231-4072-422b-872e-ae19bedf2b03.png)草稿对话框。'
- en: Side navigation drawers
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 侧边导航抽屉
- en: Side navigation drawers are extremely popular on mobile devices. They do, however,
    start to appear in full-fledged version of websites; hence their coverage in this
    chapter.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s what a side navigation drawer can look like:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/e2457bb6-3410-402a-bcc8-a10e879eddb3.png)Side navigation drawer.'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: In light gray, on the left side, we have the navigation drawer that pops over
    our content when invoked. In a darker gray, we have the content of our page.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: 'With the following component, we reproduce the side navigation shown at the
    beginning of this section:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The only interesting thing here is the template. Let's break it down. First,
    we have the enclosing `<md-sidenav-container>` tag that allows us to define two
    separate areas for our content. These two areas are the `md-sidenav` and the actual
    content of our page. While the `sidenav` part of the content is clearly defined
    by the `md-sidenav` tag, the rest of our content (that is, the actual page) isn't
    enclosed in any special tag. The page content only has to be outside the `md-sidenav`
    definition. We have a reference to the `md-sidenav` block with the `#side` attribute.
    As a reminder, adding `#myName` to any Angular directive gives you a reference
    to access it inside the rest of your template. The `md-sidenav` has an open method
    that puts the focus on the `#closeButton` defined inside it. This button has a
    `click` method that invokes the `close` method of `#side`. Finally, in the page
    content we have a button that invokes `#side.open` when clicked. In addition to
    these two methods (`open` and `close`), the `md-sidenav` directive also has a
    `toggle` method that toggles the `sidenav` (that is, `opened = !opened`).
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: Theming
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, we could describe each and every available component available in Angular
    Material Design. However, there are a lot of them and their uses are all but complicated.
    Here''s a list of the supported directives available at the time I am writing
    this chapter:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: '`buttons`'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cards`'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`checkbox`'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`radio`'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`input`'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sidenav`'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`toolbars`'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`list`'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`grid`'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`icon`'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`progress`'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tabs`'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`slide`'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`slider`'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`menu`'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tooltip`'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ripples`'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dialogs`'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`snackbar`'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In the coming months, more directives will be added to the mix. You can find
    them all here: [https://github.com/angular/material2](https://github.com/angular/material2).'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
- en: 'Needless to say, we are covered in terms of directives. Despite this wide range
    of possibilities, we can further customize Material Design for Angular by creating
    a custom theme. In Angular Material, a theme is created by composing multiple
    palettes. In particular, a theme consists of:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 不用说，我们在指令方面已经覆盖了。尽管有如此广泛的可能性，我们可以通过创建自定义主题进一步定制Angular的Material Design。在Angular
    Material中，主题是通过组合多个调色板创建的。特别是，主题包括：
- en: A primary palette consists of colors most widely used across all screens and
    components
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主要调色板由在所有屏幕和组件上广泛使用的颜色组成
- en: An accent palette consists of colors utilized for the floating action button
    and interactive elements
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 强调调色板由用于浮动操作按钮和交互元素的颜色组成
- en: A warn palette consists of colors used to convey error state
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 警告调色板由用于传达错误状态的颜色组成
- en: A foreground palette consists of colors for text and icons
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 前景调色板由用于文本和图标的颜色组成
- en: A background palette consists of colors used for element backgrounds
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 背景调色板由用于元素背景的颜色组成
- en: 'Here''s an example of a custom theme:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个自定义主题的示例：
- en: '[PRE15]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Hence we have learned to create custom themes for Material Designing.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们已经学会了为Material Design创建自定义主题。
- en: Summary
  id: totrans-158
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned about Material Design and responsive design for
    Angular by using Angular/Material2 module. We saw some of the most used directives
    such as `buttons`, `icons`, `dialogs`, or `sidenav`. In addition, we tackled Material
    Design customization using the theming capabilities of Angular/Material2.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们通过使用Angular/Material2模块了解了Material Design和响应式设计。我们看到了一些最常用的指令，如`buttons`、`icons`、`dialogs`或`sidenav`。此外，我们还利用了Angular/Material2的主题能力来定制Material
    Design。
- en: In [Chapter 15](5845dd1d-b820-4049-8950-5228e0635455.xhtml), *Integrating Bootstrap
    with Angular Application*, we'll see how to drive the design of our Angular2 application
    by using Bootstrap (by Twitter) instead of Material Design (by Google).
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第15章](5845dd1d-b820-4049-8950-5228e0635455.xhtml)中，*将Bootstrap与Angular应用程序集成*，我们将看到如何通过使用Bootstrap（由Twitter提供）而不是Material
    Design（由Google提供）来驱动我们的Angular2应用程序的设计。
