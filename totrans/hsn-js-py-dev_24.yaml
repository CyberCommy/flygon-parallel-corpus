- en: Assessments
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What international group maintains the official specification for JavaScript?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: W3C
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Ecma International**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Netscape
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Sun
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which backends can communicate with JavaScript?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: PHP
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Python
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Java
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**All of the above**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Who was the original author of JavaScript?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tim Berners-Lee
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Brendan Eich**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Linus Torvalds
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Bill Gates
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the DOM?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: JavaScript's representation of HTML in memory
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: An API to allow JavaScript to modify the page
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Both of the above**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: None of the above
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the primary use of Ajax?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Communication with the DOM
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Manipulation of the DOM
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Listening for user input
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Communication with a backend**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Chapter 2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**True** or false: Node.js is single-threaded.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'True or **false**: The architecture of Node.js makes it impervious to **Distributed
    Denial of Service** (**DDoS**) attacks.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Who originally created Node.js?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Brendan Eich
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Linux Torvalds
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ada Lovelace
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Ryan Dahl**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'True or **false**: JavaScript on the server side is inherently insecure because
    the code is exposed on the frontend.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'True or **false**: Node.js is inherently superior to Python.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Chapter 3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Which of these is not a valid JavaScript variable declaration?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: var myVar = 'hello';
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: const myVar = "hello"
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**String myVar = "hello";**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: let myVar = "hello"
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which of these starts a function declaration?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**function**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: const
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: func
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: def
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which of these is not a basic loop type?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: for..in
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: for
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: while
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**map**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'JavaScript *requires* line delineation with semicolons:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'True'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**False**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Whitespace *never* counts in JavaScript:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'True'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**False**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Chapter 4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'JavaScript is inherently:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Synchronous
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Asynchronous
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Both**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'A `fetch()` call returns a:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`then`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`next`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`finally`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Promise**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'With prototypal inheritance, we can (select all options that apply):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Add methods to a base data type.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Subtract methods from a base data type.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Rename our data type.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Cast our data into another format.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Given the preceding code, what will be the expected output?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '1'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'false'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '0'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**true**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Given this code, what's the best way to output "Will Riker"?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**`Riker.sayHello() `***'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`console.log(Riker.name)`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`console.log(Riker.this.name)`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Officer.Riker.name()`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Chapter 5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Consider the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: How would you get an alert of `'Hello Bob'`?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`sayHello()(''Bob'')`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`sayHello(''Bob'')()`*****'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`sayHello(''Bob'')`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`someFunc()(sayHello(''Bob''))`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What will `alert(greeting)` do in the preceding code?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Alert `'greeting'`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Alert `'Hello Alice'`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Throw an error**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: None of the above
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How would we get an alert message of `1`?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`someFunc()()`*****'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`sayHello().sayZip()`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`alert(someFunc.bar)`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`sayZip()`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How would we get an alert message of `2`?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`someFunc().foo()`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`someFunc()().beep`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**We can''t, because it''s not in scope**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We can't, because it's not defined
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How can we change `someFunc` to alert 1 1 2?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We can't.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add `return foo` after `return zip`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change `return zip` to `return foo`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Add `return foo` after the `foo` declaration**.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Given a correct solution to the preceding question, how would we actually get
    three alerts of 1, 1, 2?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`someFunc()()()`*****'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`someFunc()().foo()`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`someFunc.foo()`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`alert(someFunc)`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Chapter 6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Consider the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: What is the correct syntax to select the button?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: document.querySelector('Click me!')
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: document.querySelector('.button')
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: document.querySelector('#button')
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**document.querySelector(''button'')**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Take a look at this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'True or **False**: document.querySelector(''button'') will serve our needs
    to place a click handler on each button.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To change the text of the button from "Click me!" to "Click me first!", what
    should we use?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**document.querySelectorAll(''button'')[0].innerHTML = "Click me first!"**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: document.querySelector('button')[0].innerHTML = "Click me first!"
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: document.querySelector('button').innerHTML = "Click me first!"
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: document.querySelectorAll('#button')[0].innerHTML = "Click me first!"
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What method could we use to add another button?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: document.appendChild('button')
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: document.appendChild('<button>')
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**document.appendChild(document.createElement(''button''))**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: document.appendChild(document.querySelector('button'))
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How can we change the class of the third button to "third"?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: document.querySelector('button')[3].className = 'third'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**document.querySelectorAll(''button'')[2].className = ''third''**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: document.querySelector('button[2]').className = 'third'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: document.querySelectorAll('button')[3].className = 'third'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Chapter 7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Answer the following questions to gauge your understanding of events:'
  prefs: []
  type: TYPE_NORMAL
- en: Which of these is the second phase of the event lifecycle?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Capturing
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Targeting**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Bubbling
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: (Choose all the correct answers) What does the event object provide us with?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**The type of event that is triggered**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**The target DOM node, if applicable**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**The mouse coordinates, if applicable**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The parent DOM node, if applicable
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Look at this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Which JavaScript features is it using? Select all the answers that apply:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**DOM manipulation**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Event delegation**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Event registration**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Style changes**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What will happen when the container is clicked?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`box` will be visible.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`#color` will be red.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Both options 1 and 2.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**There is not enough context to say.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In which phase of the event lifecycle do we typically take action?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Targeting**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Capturing
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Bubbling
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Chapter 9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What is the root cause of memory problems?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The variables in your program are global.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Inefficient code.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: JavaScript's performance limitations.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Hardware inadequacies.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When using DOM elements, you should store references to them locally versus
    always accessing the DOM.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'True'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'False'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**True when using them more than once**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: JavaScript is pre-processed on the server side, and thus more efficient than
    Python.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'True'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**False**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Setting breakpoints can't find memory leaks.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'True'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**False**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It's a good idea to store all variables in the global namespace as they're more
    efficient to reference.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'True'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**False**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
