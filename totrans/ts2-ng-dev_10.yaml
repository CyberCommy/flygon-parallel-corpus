- en: Client-Side Routing for SPA
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Single Page Applications** (**SPA**) is a term used to refer to apps that
    are served from just one server route but have multiple client views. The single-server
    route is usually the default (`/` or `*`). Once the single-server route is loaded,
    the client (JavaScript) hijacks the page and starts controlling the route using
    the browser''s routing mechanisms.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: Being able to control the routes from JavaScript gives developers the ability
    to build better user experiences. This chapter describes how this can be done
    in Angular using TypeScript-written classes, directives, and so on.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: Just like every other chapter, we will be doing this with practical examples.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: RouterModule
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Just like Forms, Angular doesn''t generateÂ routing by default in the CLI scaffold.
    This is because you might not need it in the project you''re working on. To get
    routing working, you need to import it in the module that needs to make use of
    it:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The module exposes a static `forRoot` method, which is passed in an array of
    routes. Doing so registers and configures those routes for the module importing
    `RouterModule`. Start with creating a `routes.ts` file in the `app` folder:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The signature of the `Routes` class is an array that takes one or more objects.
    The object that is passed in should have a path and a component property. The
    path property defines the location while the component property defines the Angular
    component that should be mounted on the defined path.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: 'You can then configure `RouterModule` with these arrays in `AppModule`. We
    have already imported `RouterModule`, so let''s import the `routes` file and configure
    the routes in the `imports` array:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'That''s all it takes to configure routes in Angular. The components for the
    routes are yet to be created, so if you try running the app, you will get errors
    in the terminal indicating the same:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/885229f8-c052-470a-a72c-3335461f20af.jpg)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
- en: 'Let''s generate these components using the CLI:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Then, update the routes configuration to import the components:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Run the app one more time and see whether you got rid of the errors:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/e245aa28-283f-4d3c-aad4-5d88b47d972b.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
- en: Router directives
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I know you're itching to see the example in the browser, but if you try testing
    the app at port `4200`, you will still see the content of the `app` component.
    This is because we haven't told Angular where it should mount the route.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: 'Angular exposes two important route directives:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: '**Router outlet**: This defines where the route configuration should be mounted.
    This is usually in an entry component for single-page apps.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Router link**: This is used to define the navigation for Angular routes.
    Basically, it adds features to the anchor tag so as to work better with routes
    defined in an Angular app.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s replace the content of the app component''s template to utilize the
    router directives:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The div with the class `container` is where each component will be displayed
    once we visit the respective route. We can navigate through each of the routes
    by clicking through the anchor tags that have the `routerLink` directive.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: 'Open your browser and visit the localhost at port `4200`. You should see the
    home page by default:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/62a7adaf-1178-4a2a-853b-8436fc3952b2.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
- en: 'Try clicking on the About or Contact link in the navigation bar. If you followed
    all the steps, you should see the app replace the home component with the Aboutor
    Contact component:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/aae21ff1-f2b3-4455-8fc0-cdc6d4ead19a.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
- en: 'Note how the address bar also updates with the path location we defined in
    the configuration:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/37d9804c-b80b-4f61-932a-e1694552599f.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
- en: Master-details view with routes
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A very common UI pattern is to have a list of items without much information
    about the items. The detailed information about each of the items is shown when
    the item is selected, clicked, or a mouseover occurs.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: Each of the items is usually referred to as the master, while the content that
    is shown after interacting with the item is referred to as the child or details.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: Let's build a simple blog that shows a list of articles on the home page, and
    when each article is clicked, the post page is revealed and you can read the selected
    article.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: Data source
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For a basic example, we don''t need a database or a server. A simple JSON file
    containing blog posts is enough. Create a file named `db.json` in your `app` folder
    with the following structure:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The structure shows an array of posts. Each post has `imageID`, an author as
    collector, and a description as the post content.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: 'TypeScript, by default, won''t understand the JSON file when you try importing
    it into a TypeScript file. To fix this, define `typings` with the following declarations:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Blog service
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Remember that we mentioned how having the business logic of our app in components
    is a bad idea. As much as possible, it''s not recommended to interact with the
    data source directly from the component. What we will rather do is create a service
    class to do the same for us:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Update the generated empty service with the following:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Let''s talk about what''s happening in the service:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: First, we import the data source we created.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, we create a `getPosts` method, which returns all the posts after transforming
    each item in the post. We also generate an image URL with the image ID. This is
    done by appending the ID to a Cloudinary ([https://cloudinary.com/](https://cloudinary.com/))
    image server URL. The images were uploaded to Cloudinary prior to using them.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `byId` method takes the ID as an argument, finds the post with the ID using
    the filter method, and then transforms the retrieved post. After the transformation,
    we fetch the first and only item in the array.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To expose this service, you need to add it to the `providers` array in the
    `app` module:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Creating routes
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we have a data source and a service to interact with this data source,
    it''s time to start working on the routes and components that will consume this
    data. Add a `routes.ts` file to the `app` folder with the following configuration:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The second route that points to `post` has a `:id` placeholder. This is used
    to define a dynamic route, which means that the value passed in as ID can be used
    to control the behavior of the mounted component.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the two components that we imported previously:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Update the `app` module to import the configured route, using `RouterModule`:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'To mount the router, replace the entire content of the app component''s template
    with the following markup:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Listing posts in the home component
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The home component that we are mounting on the home page is expected to show
    a list of posts. Therefore, it needs to interact with the blog service to do so.
    Update the class to the following:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The component depends on the `BlogService` class, which is resolved in the constructor.
    The `blogService` instance is then used to get the list of posts and pass it to
    the `posts` property. This property is what will be bound to the view.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: 'To show these posts in the browser, we need to iterate over each of them and
    display them in the component''s template:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Here is what it looks like when you run the app:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/a2075f80-0926-4465-b4da-026e2b6aee94.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
- en: 'We need to define the behavior of interacting with the article cards. When
    the card is clicked, we could use a router link directive to navigate to the post
    page. However, because we have already seen that, let''s use the second option,
    which is defining the behavior in a TypeScript method. First, add an event listener:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: æä»¬éè¦å®ä¹ä¸æç« å¡çäº¤äºçè¡ä¸ºãå½ç¹å»å¡çæ¶ï¼æä»¬å¯ä»¥ä½¿ç¨è·¯ç±é¾æ¥æä»¤å¯¼èªå°å¸å­é¡µé¢ãä½æ¯ï¼å ä¸ºæä»¬å·²ç»çå°äºï¼è®©æä»¬ä½¿ç¨ç¬¬äºä¸ªéé¡¹ï¼å³å¨ TypeScript
    æ¹æ³ä¸­å®ä¹è¡ä¸ºãé¦åï¼æ·»å ä¸ä¸ªäºä»¶çå¬å¨ï¼
- en: '[PRE17]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'We intend to call the `showPost` method when the card is clicked. This method
    receives the ID of the clicked image. Here is the method implementation:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: æä»¬æç®å¨ç¹å»å¡çæ¶è°ç¨ `showPost` æ¹æ³ãè¿ä¸ªæ¹æ³æ¥æ¶è¢«ç¹å»å¾çç IDãä»¥ä¸æ¯æ¹æ³çå®ç°ï¼
- en: '[PRE18]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The `showPost` method uses the router's `navigate` method to move to a new route
    location.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '`showPost` æ¹æ³ä½¿ç¨è·¯ç±å¨ç `navigate` æ¹æ³æ¥ç§»å¨å°æ°çè·¯ç±ä½ç½®ã'
- en: Reading an article with the post component
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ä½¿ç¨å¸å­ç»ä»¶éè¯»æç« 
- en: 'The post component just shows a single post with all the details. To display
    this single post, it receives the parameter from the URL and passes the parameter
    to the `byId` method in the blog service class:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: å¸å­ç»ä»¶åªæ¾ç¤ºå¸¦æææç»èçåä¸ªå¸å­ãä¸ºäºæ¾ç¤ºè¿ä¸ªåä¸ªå¸å­ï¼å®ä» URL æ¥æ¶åæ°å¹¶å°åæ°ä¼ éç»åå®¢æå¡ç±»ä¸­ç `byId` æ¹æ³ï¼
- en: '[PRE19]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The `ActivatedRoute` class exposes a `params` property, which is an Observable.
    You can subscribe to this Observable to get the parameters passed to a given route.
    We are setting theÂ `post` property to the filtered value returned by the `byId`
    method.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '`ActivatedRoute` ç±»å¬å¼äºä¸ä¸ª `params` å±æ§ï¼å®æ¯ä¸ä¸ª Observableãæ¨å¯ä»¥è®¢éè¿ä¸ª Observable æ¥è·åä¼ éç»ç»å®è·¯ç±çåæ°ãæä»¬å°
    `post` å±æ§è®¾ç½®ä¸º `byId` æ¹æ³è¿åçè¿æ»¤å¼ã'
- en: 'Now, you can display the post in the template:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: ç°å¨ï¼æ¨å¯ä»¥å¨æ¨¡æ¿ä¸­æ¾ç¤ºå¸å­ï¼
- en: '[PRE20]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Open the app, and click on each of the cards. It should take you to their respective
    details page:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: æå¼åºç¨ç¨åºï¼ç¶ååå»æ¯å¼ å¡çãå®åºè¯¥å¸¦æ¨å°å®ä»¬åèªçè¯¦ç»é¡µé¢ï¼
- en: '![](assets/bdddddc5-5bb8-4bb6-8faf-13ea73664895.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/bdddddc5-5bb8-4bb6-8faf-13ea73664895.png)'
- en: Summary
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: æè¦
- en: Routing in Angular is important and can be a part of most of your everyday project.
    In such a case, it won't be a completely new concept to you. This is because this
    chapter has taught you some routing basics, building navigation and client routes,
    building a master-child view relationship, by developing a simple blogging system.Â In
    the next chapter, you will put some of what you have learned to build an app that
    actually uses a real and hosted data.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: å¨ Angular ä¸­è¿è¡è·¯ç±è®¾ç½®éå¸¸éè¦ï¼å¯è½æ¯ä½ æ¥å¸¸é¡¹ç®çä¸é¨åãå¨è¿ç§æåµä¸ï¼è¿å¯¹ä½ æ¥è¯´ä¸ä¼æ¯ä¸ä¸ªå¨æ°çæ¦å¿µãè¿æ¯å ä¸ºæ¬ç« å·²ç»æä¼äºä½ ä¸äºè·¯ç±åºç¡ç¥è¯ï¼æå»ºå¯¼èªåå®¢æ·ç«¯è·¯ç±ï¼éè¿å¼åä¸ä¸ªç®åçåå®¢ç³»ç»æ¥æå»ºä¸»-å­è§å¾å³ç³»ãå¨ä¸ä¸ç« ä¸­ï¼æ¨å°è¿ç¨æå­¦çç¥è¯æ¥æå»ºä¸ä¸ªå®éä½¿ç¨çå®åæç®¡æ°æ®çåºç¨ç¨åºã
