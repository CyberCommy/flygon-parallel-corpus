- en: Interacting with the Database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In previous chapters, we generated several different reports, using many Python
    utilities and tools. In this chapter, we will utilize Python libraries to connect
    to external databases and submit the data we have generated. This data can then
    be accessed by external applications to get information.
  prefs: []
  type: TYPE_NORMAL
- en: Python provides a wide range of libraries and modules that cover managing and
    working on popular **Database Management Systems** (**DBMSes**), such as MySQL,
    PostgreSQL, and Oracle. In this chapter, we will learn how to interact with a
    DBMS and fill it with our own data.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing MySQL on an automation server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Accessing the MySQL database from Python
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing MySQL on an automation server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first thing that we need to do is set up a database. In the following steps,
    we will cover how to install the MySQL database on our automation server, which
    we created in [Chapter 8](part0116.html#3EK180-9cfcdc5beecd470bbeda046372f0337f),
    *Preparing a Lab Environment*. Basically, you will need a Linux-based machine
    (CentOS or Ubuntu) with an internet connection to download the SQL packages. MySQL
    is an open source DBMS that uses a relational database and the SQL language to
    interact with data. In CentOS 7, MySQL is replaced with another, forked version,
    called MariaDB; both have the same source code, with some enhancements in MariaDB.
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow these steps to install MariaDB:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the `yum` package manager (or `apt`, in the case of Debian-based systems)
    to download the `mariadb-server` package, as shown in the following snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the installation has completed successfully, start the `mariadb` daemon.
    Also, we need to enable it at the operating system startup using the `systemd`
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Validate the database status by running the following command, and make sure
    that the output contains `Active:active (running)`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Securing the installation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The next, logical step after installation is securing it. MariaDB includes
    a security script that changes the options inside the MySQL configuration files,
    like creating the root password for accessing the database and allowing remote
    access. Run the following commands to launch the script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The first prompt asks you to provide the root password. This root password
    is not the Linux root username, but the root password for the MySQL database;
    since this is a fresh installation, we have not set it yet, so we will simply
    press *Enter* to go to the next step:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The script will suggest setting the password for the root. We will accept the
    suggestion by pressing `Y` and entering the new password:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The following prompts will suggest removing the anonymous users from administrating
    and accessing the database, which is highly recommended:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'You can run SQL commands from a remote machine to the database hosted in your
    automation servers; this requires you to give a special privilege to root users,
    so they can access the database remotely:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we will remove the testing database, which anyone can access, and
    reload the privileges tables to ensure that all changes will take effect immediately:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: We have finished securing the installation; now, let's validate it.
  prefs: []
  type: TYPE_NORMAL
- en: Verifying the database installation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The first step after MySQL installation is to validate it. We need to verify
    that the `mysqld` daemon has started and is listening to port `3306`. We will
    do that by running the `netstat` command and `grep` on the listening port:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: This means that the `mysqld` service can accept incoming connections from any
    IP over the port `3306`.
  prefs: []
  type: TYPE_NORMAL
- en: If you have `iptables` running on your machine, you need to add a rule to `INPUT` a
    chain, in order to allow remote hosts to connect to the MySQL database. Also,
    validate that `SELINUX` has the proper policies.
  prefs: []
  type: TYPE_NORMAL
- en: 'The second verification is through connecting to the database using the `mysqladmin`
    utility. This tool is included in MySQL clients and allows you to execute commands
    remotely (or locally) on the MySQL database:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '| **Switch Name**  | **Meaning** |'
  prefs: []
  type: TYPE_TB
- en: '| `-u` | Specifies the username. |'
  prefs: []
  type: TYPE_TB
- en: '| `-p` | Makes MySQL prompt you with the username''s password. |'
  prefs: []
  type: TYPE_TB
- en: '| `ping` | Operation name to validate whether the MySQL database is alive or
    not. |'
  prefs: []
  type: TYPE_TB
- en: The output indicates that the MySQL installation has completed successfully,
    and we're ready to move to the next step.
  prefs: []
  type: TYPE_NORMAL
- en: Accessing the MySQL database from Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Python developer creates the `MySQLdb` module, which provides a utility
    to interact and manage the database from a Python script. This module can be installed
    using Python's `pip`, or with an operating system package manager, such as `yum`
    or `apt`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To install the package, use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Verify the installation as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Since the module has imported without any errors, we know that the Python module
    has successfully installed.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will now access the database through the console and create a simple database
    called `TestingPython`, with one table inside it. We will then connect to it from
    Python:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding statements, we connected to the database using the MySQL utility,
    then used the SQL `CREATE` command to create a blank, new database.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can verify the newly created database by using the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: It's not mandatory to write SQL commands in uppercase; however, it's a best
    practice, in order to differentiate them from variables and other operations.
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to switch to the new database:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, execute the following command to create a new table inside the database:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: When you're creating a table, you should specify the column type. For example, `fname`
    is a string with a maximum of 30 characters, while `id` is an integer.
  prefs: []
  type: TYPE_NORMAL
- en: 'Verify the table creation as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Querying the database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'At this point, our database is ready for some Python script. Let''s create
    a new Python file and provide database parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: The parameters provided (`SQL_IP`, `SQL_USERNAME`, `SQL_PASSWORD`, and `SQL_DB`)
    are needed to establish the connection and authenticate against the database on
    port `3306`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following table mentions the parameters and their meaning:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Parameter** | **Meaning** |'
  prefs: []
  type: TYPE_TB
- en: '| `host` | The server IP address that has the `mysql` installation. |'
  prefs: []
  type: TYPE_TB
- en: '| `user` | The username with administrative privileges over the connected database.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `passwd` | The password created using the `mysql_secure_installation` script.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `db` | The database name. |'
  prefs: []
  type: TYPE_TB
- en: 'The output will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'The returned object indicates that the connection has successfully opened to
    the database. Let''s use this object to create the SQL cursor that is used to
    execute the actual commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: You can have many cursors associated with a single connection, and any change
    in one cursor will be immediately reported to other ones, as you have the same
    connection opened.
  prefs: []
  type: TYPE_NORMAL
- en: The cursor has two main methods: `execute()` and `fetch*()`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `execute()` method is used to send commands to the database and return
    the query results, while the `fetch*()` method has three flavors:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Method Name** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `fetchone()` | Fetches only one record from the output, regardless of the
    number of returned rows. |'
  prefs: []
  type: TYPE_TB
- en: '| `fetchmany(num)` | Returns the number of records specified inside the method.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `fetchall()` | Returns all records. |'
  prefs: []
  type: TYPE_TB
- en: 'Since `fetchall()` is a generic method that fetches either one record or all
    records, we will use it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Inserting records into the database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `MySQLdb` module allows us to insert records into the database using the
    same cursor operation. Remember that the `execute()` method can be used for both
    insertion and query. Without further ado, we will change our script a bit and
    provide the following `insert` commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding example, the following applies:'
  prefs: []
  type: TYPE_NORMAL
- en: We defined four employee records as a dictionary. Each one has an `id`, `fname`,
    `lname`, and `title`, in keys, with different values for each.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Then, we grouped them using `employees`, which is a variable of the `list` type.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A `for` loop was created to iterate over the `employees` list and, inside the
    loop, we formatted the `insert` SQL command and used the `execute()` method to
    push the data to the SQL database. Notice that it's not required to add a semicolon
    (`;`) after the command inside the `execute` function, as it will be added automatically.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: After each successful execution of the SQL command, the `commit()` operation
    will be used to force the database engine to commit the data; otherwise, the connection
    will be rolled back.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, use the `close()` function to terminate the established SQL connection.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Closing the database connection means that all the cursors are sent to Python
    garbage collectors and will be unusable. Also, note that when you close the connection
    without committing the changes, it will make the database engine immediately roll
    back all transactions.
  prefs: []
  type: TYPE_NORMAL
- en: 'The script''s output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'You can query the database through the MySQL console to verify that the data
    has been submitted to the database:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, returning to our Python code, we can use the `execute()` function again;
    this time, we use it to select all the data that we inserted inside the `TestTable`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'The script''s output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: The `L` character after the `id` value in the previous example can be resolved
    by converting the data to integer again (in Python), using the `int()` function.
  prefs: []
  type: TYPE_NORMAL
- en: Another useful attribute inside of the cursor is `.rowcount`. This attribute
    will indicate how many rows are returned as a result of the last `.execute()`
    method.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned how to interact with a DBMS using Python connectors.
    We installed a MySQL database on our automation server, and then verified it.
    Then, we accessed the MySQL DB using a Python script, and performed operations
    on it.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn how to use Ansible for system administration.
  prefs: []
  type: TYPE_NORMAL
