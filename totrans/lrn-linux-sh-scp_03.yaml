- en: Choosing the Right Tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This chapter will introduce some tools that will help us when we''re writing
    Bash scripts. We will focus on two types of tools: GUI-based editors (**Atom**
    and **Notepad++**) and Terminal-based editors (**Vim** and **nano**). We will
    describe the tools and how to use them, their strengths and weaknesses, and how
    to use both GUI- and Terminal-based editors together for the best results.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following commands will be introduced in this chapter: `vim`, `nano`, and `ls`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Using graphical editors for shell scripting
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using command-line editors for shell scripting
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Combining graphical editors with command-line editors when writing shell scripts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You will need the virtual machine we created in the previous chapter when using
    Vim or nano. If you want to use Notepad++, you will need a Windows host machine.
    For Atom, the host machine can run either Linux, macOS, or Windows.
  prefs: []
  type: TYPE_NORMAL
- en: Using graphical editors for shell scripting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Tooling has come a long way since the first Unix and Unix-like distributions.
    In the earliest days, writing shell scripts was significantly harder than today:
    the shells were less powerful, text editors were command-line only and things
    such as syntax highlighting and autocomplete were non-existent. Today, we have
    very powerful GUI editors that will help us in our scripting adventures. Why would
    we want to wait until we run a script to find an error, when a GUI editor could
    have already shown us the error in advance? Today, using an advanced editor for
    shell scripting is almost a necessity that we wouldn''t want to live without.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll describe two text editors in the coming pages: Atom and Notepad++. Both
    are GUI-based, which we can use for efficient shell scripting. If you have a preference
    for either already, pick that one. If you''re unsure, we would recommend using
    Atom.'
  prefs: []
  type: TYPE_NORMAL
- en: Atom
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first graphical editor we will consider is Atom, made by GitHub. It's described
    as *A hackable text editor for the 21st Century*. Hackable, in this sense, means
    that while the default installation of Atom is as complete as any text editor,
    this application really shines because it is very configurable and extensible.
    Anything that has not been integrated by GitHub can be written as an extension
    package. By using these extensions, you can make your Atom installation fully
    your own; if you do not like something, change it. If it can't be changed out
    of the box, find a package that does it. And even if there's not a package that
    does what you're hoping, you still have the option to create your own package!
  prefs: []
  type: TYPE_NORMAL
- en: Another nice feature of Atom is the default integration with Git and GitHub.
    Git is currently the most popular version control system. Version control systems
    are used when writing code or scripts. They ensure that history of files is preserved,
    and make it possible for multiple, even many, contributors to work on the same
    files at the same time, without getting burdened down by conflict management.
    GitHub, as the name suggests, is currently the most prominent web-based Git provider
    for open source software.
  prefs: []
  type: TYPE_NORMAL
- en: The last great thing about Atom we want to mention is that, by default, it supports
    many scripting and programming languages. When we say *supports*, we mean that
    it can recognize file types by their extensions, and offer syntax highlighting
    (which makes for much easier scripting!). This functionality is provided through
    core packages, which work the same way as normal packages but are included from
    the start. For our purposes, the core package, **language-shellscript**, will
    help us in our shell scripting endeavors.
  prefs: []
  type: TYPE_NORMAL
- en: Atom installation and configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s go ahead and install Atom. As long as you''re running Linux, macOS,
    or Windows, you can go to [https://atom.io/](https://atom.io/) and grab the installer.
    Run the installer and, if necessary, follow along with the prompts until Atom
    is installed. Now, start Atom and you''ll be greeted by the welcome screen, which
    at the time of writing looks like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d45b2d8a-0fd9-4e5c-9b53-c6fe4c3602e2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Be sure to look at all the screens Atom has to offer. When you feel like you''ve
    explored enough, let''s add a package to Atom that will complement our shell scripting.
    If you have the Welcome Guide screen still open, select Install a Package from
    there. Otherwise, you can use the keyboard shortcut *Ctrl* + *, *to bring up the
    Settings screen. You will see an Install option there, which will take you to
    the Install Packages screen. Search for `bash`, and you should see the following
    package:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a06e30e7-22af-4c9c-bbb4-fd4e5df56e9a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click the Install button and watch the installation. You might be prompted
    to reboot Atom after the install; be sure to do so. If you''re not prompted but
    see errors of any kind, a reboot of Atom is never a bad idea. After installing
    the package, you will now have autocomplete functionality when writing shell scripts.
    This means that you can start typing and Atom will try to predict what you want,
    in the following manner:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d28ba384-67cb-4430-a16f-14deb151a288.png)'
  prefs: []
  type: TYPE_IMG
- en: 'On the right-hand side, you can see we started typing the `echo` shell command,
    and after the first two letters, Atom presented us with two options that contain
    those two letters. Once it makes a suggestion, we can press *Enter* and the command
    is inserted fully. While it will not save much time in this instance, it can be
    great for two main reasons:'
  prefs: []
  type: TYPE_NORMAL
- en: If you're unsure what the command is called exactly, you might be able to find
    it with autocomplete.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Once you start writing conditionals and loops (in the second part of this book),
    the autocomplete will span multiple lines, saving you from typing many words and
    remembering all the syntax.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Finally, let''s look at how Atom looks when you''ve got a Git project open
    and are working on files:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/af1f8c28-8d6a-4f78-beb7-ee0d74d2f75c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'When working in Atom, the screen will mostly look like this. On the left-hand
    side, you''ll see the **Tree View**, which you can toggle on/off by pressing *Ctrl*
    + *\*. The Tree View contains all the files in your current project (which is
    the directory you''ve opened). All these files can be opened by double-clicking
    them, which causes them to appear in the middle: the **Editor View**. This is
    where you''ll spend most of your time, working on the shell scripts. The Editor
    View will always be visible, even if there are currently no files open.'
  prefs: []
  type: TYPE_NORMAL
- en: By default, there is one last view, the **Git View**, located on the right-hand
    side. This view can be toggled by pressing *Ctrl *+*Shift *+ *9*. The code for
    this book is hosted on GitHub, which you will download (or, as Git calls it, *clone*)
    once, without the need to edit it on the remote server. Because of this, the Git
    View is not needed in this book, but we mention it since you will probably use
    it for other projects.
  prefs: []
  type: TYPE_NORMAL
- en: Notepad++
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Where Atom is closer to an **integrated development environment** (**IDE**)
    than a text editor, Notepad++ is pretty much what the name implies: good old Notepad
    with some added features. Some of these added features include being able to have
    multiple files open at the same time, syntax highlighting, and limited autocomplete.
    It was initially released in 2003 and only works on Windows.'
  prefs: []
  type: TYPE_NORMAL
- en: Notepad++ is characterized by its simplicity. If you are familiar with any kind
    of Notepad software (who isn't?), Notepad++ should be instantly recognizable.
    While we recommend using Atom for this book, using a simple solution such as Notepad++
    will definitely not hold you back. However, in a business environment, you would
    almost always create scripts in an already existing version-controlled repository,
    which is where the added features of Atom really shine.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you would like to check out Notepad++, grab it from [https://notepad-plus-plus.org/download](https://notepad-plus-plus.org/download)
    and run the installer (remember, only if you''re on Windows!). Keep the default
    options and run Notepad++ after the installation. You should be greeted by the
    following screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/30042cfb-f8b9-410d-b66f-5fa758b572eb.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, when you open a file ending in `.sh`, you will see syntax highlighting.
    This is because the `.sh` extension is reserved for shell script files. This can
    help you immensely when writing scripts. The example of a missing quote messing
    up your script will become really apparent with color-based syntax highlighting,
    possibly saving you many minutes of troubleshooting.
  prefs: []
  type: TYPE_NORMAL
- en: Notepad++ has many other features that make it a great enhanced Notepad. You
    can use macros to perform scripted tasks, you can install plugins to extend functionality,
    and there are many more unique features that make Notepad++ an attractive option.
  prefs: []
  type: TYPE_NORMAL
- en: Using command-line editors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Being able to use command-line editors is a skill anyone working with Linux
    should learn sooner or later. For Linux installations with a GUI, this might be
    substituted with a GUI tool such as Atom or the distribution''s built-in variant
    on Notepad. However, server installations will almost never have a GUI and you
    will have to rely on command-line text editors. While this might sound daunting,
    it''s really not! To give you a small introduction to command-line editors, we''ll
    go over two of the most popular applications that are present on most Linux distributions:
    **Vim** and **GNU nano**.'
  prefs: []
  type: TYPE_NORMAL
- en: Vim
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The first command-line text editor we will discuss is perhaps the most popular
    for Linux: **Vim**. Vim is derived from the term **Vi Improved**, as it is an
    updated clone of the Unix editor Vi. It was created and is still maintained by
    Bram Moolenaar, who first released Vim publicly in 1991\. Vim (or, on *very* old
    systems, Vi) should be present on all Unix or Unix-like machines you will encounter.'
  prefs: []
  type: TYPE_NORMAL
- en: Vim is considered a hard-to-learn tool. This is mainly caused by the fact it
    works very differently from text editors that most people are used to. However,
    once the initial learning curve is over, many agree that a lot of actions can
    be done in Vim much more quickly than in a *normal* text editor (such as Microsoft's
    Notepad++).
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s jump in! Log in to your virtual machine:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Once logged in, open Vim to an empty file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'You should be greeted by something looking approximately like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fe2e21b6-1dcf-4230-a410-b0711f62ad9d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Vim starts a new process that uses your entire Terminal (don''t worry, everything
    will still be right where you left it once you exit Vim!). When you start up Vim,
    you will be placed in **normal** mode. Vim has a number of modes, of which normal
    and **insert** are the most interesting to explore. In normal mode, you can''t
    just start typing like you would in Notepad or Word. Since Vim was designed to
    be used without a mouse, it needed a way to manipulate text as well. Where some
    applications decided on using modifiers for this (holding the *Shift* key in Notepad
    for example), Vim decided on modes. Let''s first enter insert mode so we can start
    to type some text. Press the *I* key, and your screen should switch to insert
    mode:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0366e553-54fa-480c-ab7b-80a70e92fbfd.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We''ve taken the liberty of typing some text while in insert mode. Be sure
    to do the same and when you''re done, press *Esc* to go back to normal mode:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f96f9399-fda5-415e-b2fc-c8f96986d375.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If you compare the two screenshots, you should a big difference: in the lower-left
    corner, the text `-- INSERT --` is gone! When you''re in a mode other than normal,
    that mode is clearly presented there. If you do not see anything, you can safely
    assume you''re in normal mode. In normal mode, we can navigate using the arrow
    keys. We can also manipulate characters, words, and even (multiple) lines with
    a few key presses! For example, hit `dd` and notice that your whole line just
    got deleted. If you want to get it back, hit `u` for undo.'
  prefs: []
  type: TYPE_NORMAL
- en: 'One challenge remains: exiting Vim. Normally, you might be tempted to use the
    *Esc* button to exit a program. If you''re a little familiar with Linux, you might
    even know that a nice *Ctrl + C* will probably exit most programs as well. However,
    neither will work for Vim: *Esc* will just land you in normal mode, while *Ctrl* +
    *C* will not do anything. To quit Vim, make sure you are in normal mode and enter
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'This exits your current document, without saving anything. If you want to *save
    and exit*, use the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'This saves your current document as `filename.txt` and returns you to your
    Terminal. Note that normally you''ll start Vim on an already existing file by
    using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: In this case, you do not need to enter a filename when saving and exiting; using
    `:x` is enough in that case. `:x` is actually shorthand for `:wq`. `:w` is the
    *write* action, which you use to save a file, and `:q` is used to *quit.* Combined,
    they are used to *save and quit*. If you want to save your file at any other time
    during editing, you can just use `:w` to accomplish this.
  prefs: []
  type: TYPE_NORMAL
- en: Vim summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Vim has many commands that power users appreciate. For now, remember that there
    are two important modes, normal and insert. You can go from normal to insert by
    pressing *I*, and you can go back to normal mode by pressing *Esc*. When in insert
    mode, Vim behaves just like Notepad or Word, but in normal mode you can perform
    easy text manipulation, for example deleting the whole line currently selected.
    If you want to exit Vim, go to normal mode and enter either `:q!` or `:x`, depending
    on whether you want to save the changes or not.
  prefs: []
  type: TYPE_NORMAL
- en: Don't be afraid to start using Vim. While it might seem daunting at first, once
    you get the hang of it you can really perform file-related tasks on servers much
    more quickly. If you want to get a head start, take 30 minutes of your time and
    work through **vimtutor**. This command-line tool will get you up to speed with
    the basic usage of Vim really quickly! To start, simply navigate to your virtual
    machine, type `vimtutor`, and press *Enter*.
  prefs: []
  type: TYPE_NORMAL
- en: .vimrc
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `.vimrc` file can be used to set some persistent options for Vim. Using
    this file, you can customize your Vim experience. There are many possibilities
    for customization: popular examples include setting the color scheme, converting
    between tabs and spaces, and setting search options.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To create a `.vimrc` file that will be used when starting Vim, do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The first command places you in your `home` directory (don''t worry, this will
    be explained in greater detail later in this book). The second starts a Vim editor
    for the `.vimrc` file. Don''t forget the dot in front, as this is how Linux deals
    with hidden files (again, more on this later on). We''re using the following configuration
    in our `.vimrc` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'In order, the following things are achieved with this configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '`set expandtab`: Converts tabs to spaces.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`set tabstop=2`: Each tab is converted to two spaces.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`syntax on`: Turns on syntax highlighting (by using different colors).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`colorscheme peachpuff`: Uses the peachpuff color scheme.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`set ignorecase`: Ignores case when searching.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`set smartcase`: Doesn''t ignore case when searching with one or more uppercase
    letters.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`set number`: shows line numbers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Vim cheat sheet
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To get you started off with some great-to-know commands for Vim, we've incorporated
    a cheat sheet. After working through **vimtutor**, having this cheat sheet nearby
    almost guarantees you can properly use Vim!
  prefs: []
  type: TYPE_NORMAL
- en: 'Keystrokes are entered directly. Note that the keystrokes are case sensitive,
    so *a* is different from *A*. You can either hold *Shift* for the capital letters
    or use the *Caps Lock* key. However, the most practical approach would be to use
    *Shift*:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Keystroke** | **Effect** |'
  prefs: []
  type: TYPE_TB
- en: '| Esc | Exit insert mode, go back to command mode. |'
  prefs: []
  type: TYPE_TB
- en: '| i | Enter insert mode before the current location of the cursor. |'
  prefs: []
  type: TYPE_TB
- en: '| a | Enter insert mode after the current location of the cursor. |'
  prefs: []
  type: TYPE_TB
- en: '| I | Enter insert mode at the beginning of the current line. |'
  prefs: []
  type: TYPE_TB
- en: '| A | Enter insert mode at the end of the current line. |'
  prefs: []
  type: TYPE_TB
- en: '| o | Enter insert mode with a new line below the current line. |'
  prefs: []
  type: TYPE_TB
- en: '| O | Enter insert mode with a new line above the current line. |'
  prefs: []
  type: TYPE_TB
- en: '| dd | Delete the current line. |'
  prefs: []
  type: TYPE_TB
- en: '| u | Undo the changes made in the previous insert mode. |'
  prefs: []
  type: TYPE_TB
- en: '| Ctrl + r | Redo an undo. |'
  prefs: []
  type: TYPE_TB
- en: '| yy | ''Yank'' the current line (=copy). |'
  prefs: []
  type: TYPE_TB
- en: '| p | Paste the last yanked line below the current line. |'
  prefs: []
  type: TYPE_TB
- en: '| P | Paste the last yanked line above the current line. |'
  prefs: []
  type: TYPE_TB
- en: '| H | Navigate to the beginning of the file. |'
  prefs: []
  type: TYPE_TB
- en: '| M | Navigate to the middle of the file. |'
  prefs: []
  type: TYPE_TB
- en: '| G | Navigate to the end of the file. |'
  prefs: []
  type: TYPE_TB
- en: '| dH | Delete all lines until the beginning of the file (including the current
    line). |'
  prefs: []
  type: TYPE_TB
- en: '| dG | Delete all lines until the end of the file (including the current line).
    |'
  prefs: []
  type: TYPE_TB
- en: nano
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: GNU nano, commonly referred to as just nano, is another command-line editor
    that is present by default on most Linux installations. As the name might suggest,
    it is part of the GNU project, no different than many other parts that make up
    a Linux distribution (remember, Bash is also GNU project software). Nano was first
    released in 1999, with the intention of replacing the Pico text editor, a simple
    text editor created for Unix systems.
  prefs: []
  type: TYPE_NORMAL
- en: Nano is much more than a **What You See Is What You Get** (**WYSIWYG**) tool,
    definitely when compared to Vim. Similar to Notepad and Word, nano does not use
    different modes; it's always ready to start typing your documents or scripts.
  prefs: []
  type: TYPE_NORMAL
- en: 'On your virtual machine, open a nano editor screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'A screen similar to the following should come up:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/04bddff3-a1a2-4e48-9e33-b3156ec1e49d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Feel free to start typing something. It should look something like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bd94cf3c-1c98-454b-a34e-72ef9ea521ae.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As you can see, the bottom of the screen is reserved for presenting what nano
    calls **control keys**. While it might not be obvious at first, the `^` is shorthand
    for *Ctrl*. If you want to exit, you hold down *Ctrl* and press *X*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b3e70af4-3613-45f3-8f9e-bc7fb0df21da.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You will be prompted whether you''d like to exit with or without saving your
    file. In this case, we press *Y* for Yes. If we started nano with a filename,
    the save and exit would be completed right away, but because we started nano without
    a filename, another choice will be presented to us:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f4464db7-e895-4239-9dc1-257af9ca09fb.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Enter a filename and press *Enter*. You will be back in your previous Terminal
    screen, in the directory where you started nano. If everything went well, you
    can see the file with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/1bd5b969-f2d2-4890-945c-45dc176a0c63.png)'
  prefs: []
  type: TYPE_IMG
- en: While nano has more advanced features, for basic usage we have discussed the
    most important features. While it's initially easier to use than Vim, it's also
    not as powerful. Simply said, nano is simple, Vim is powerful.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you do not have any experience and/or preference, our recommendation would
    be to spend a little bit of time learning Vim and stick with it. After spending
    more time with Linux and Bash scripting, the advanced features of Vim become hard
    to live without. However, if you can''t get used to Vim, don''t be ashamed to
    use nano: it''s a fine editor that will get most jobs done without too much hassle!'
  prefs: []
  type: TYPE_NORMAL
- en: Combining graphical editors with command-line editors when writing shell scripts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To give you an impression of how we like to combine GUI tools with command-line
    editors, we've given the following example workflow. Don't worry about not understanding
    all steps yet; at the end of the book, you should come back to this example and
    understand exactly what we're talking about.
  prefs: []
  type: TYPE_NORMAL
- en: 'When you''re writing shell scripts, you normally go through a few phases:'
  prefs: []
  type: TYPE_NORMAL
- en: Gather requirements for the shell script.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Design the shell script.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Write the shell script.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Test and adjust the shell script.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: (Optional) Submit the working shell scripts to your version control system.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Phases 1 and 2 are often done without writing actual code. You think about
    the purpose of the script, how it could be implemented, and what is gained by
    creating the script. These steps often involve research and looking for best practices.
    When you feel like you have a good idea about why, what, and how you''re going
    to write your shell script, you move on to phase 3: writing the script. At this
    point, you would open your favorite GUI-based editor and start typing away. Because
    the GUI editor has autocomplete, syntax highlighting, and other productivity features
    built in, you can efficiently write most of the shell script code. After you feel
    like your script is ready for testing, you need to move away from your GUI: the
    script has to be tested on the system it''s been designed for.'
  prefs: []
  type: TYPE_NORMAL
- en: Phase 4 begins. You copy and paste the script to the server, using either Vim
    or nano. Once the script is on the server, you run it. Most of the time, it will
    not actually do everything you expected it to do. Tiny mistakes are easy to make
    and easy to fix, but it would be a small hassle to go back to the GUI editor,
    change it, save it, transfer it to the server, and run it again! Luckily, we can
    use either Vim or nano to make minor changes to fix the script right there on
    the server and try again. A missing `;`or `"` will make a shell script unusable,
    but it's fixed quickly (although errors like that are often highlighted in the
    GUI editors, so those are unlikely to make it onto the server, even for the first
    version).
  prefs: []
  type: TYPE_NORMAL
- en: Finally, after a number of iterations, your script will work as expected. Now
    you have to make sure the full and correct script is uploaded to your version
    control system. It's recommended to transfer the script from the GUI to the server
    one last time, to see whether you have applied all the changes you made on the
    server to your GUI session as well. Once that is done, commit it, and you're finished!
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we discussed four text editing tools, divided into two types:
    GUI-based editors (Atom and Notepad++) and command-line editors  (Vim and GNU
    nano), before showing how to use these tools together.'
  prefs: []
  type: TYPE_NORMAL
- en: Atom is a powerful text editor that can be configured exactly how you want .
    By default, it has support for many different coding languages, including shell.
    It also comes with Git and GitHub integration. We also briefly discussed Notepad++.
    While not as powerful as Atom, it is also suitable for our purposes, as it is
    basically an enhanced Notepad with all the important features for shell scripting.
  prefs: []
  type: TYPE_NORMAL
- en: Vim and nano are the two most popular Linux command-line text editors. We have
    learned that while Vim is very powerful, it is also harder to learn than nano.
    However, learning how to properly use Vim will speed up many things you do on
    a Linux system and is a very valuable skill to have. For a great hands-on introduction
    to Vim, go through the vimtutor. Nano is much easier to use, as it more closely
    resembles the WYSIWYG editing style also found in Microsoft Word and Notepad.
  prefs: []
  type: TYPE_NORMAL
- en: We ended the chapter with an example of a shell scripting journey. We gave a
    brief overview of how to use GUI-based editors in combination with command-line
    editors.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following commands were introduced in this chapter: `vim`, `nano`, and `ls`.'
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Why is syntax highlighting an important feature for text editors?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How can we extend the functionality already provided by Atom?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are the benefits of autocomplete when writing shell scripts?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How could we describe the difference between Vim and GNU nano?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which are the two most interesting modes in Vim?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the `.vimrc` file?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What do we mean when we call nano a WYSIWYG editor?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Why would we want to combine GUI editors with command-line editors?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following resource might be interesting if you''d like to go deeper into
    the subjects of this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Hacking Vim 7.2* by Kim Schulz, Packt Publishing: [https://www.packtpub.com/application-development/hacking-vim-72](https://www.packtpub.com/application-development/hacking-vim-72)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
