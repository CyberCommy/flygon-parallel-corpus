- en: Chapter 11. Building the Task Log User Interface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The task log user interface allows users to keep track of the time spent on
    different tasks. This interface allows task log searching and data entry. A user
    will be able to:'
  prefs: []
  type: TYPE_NORMAL
- en: Search for task logs within a specified time period
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sort the list of task log entries
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Edit existing task logs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add new task log entries
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: View the total time spent on tasks within a time period
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The interface we will be building looks like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Building the Task Log User Interface](img/5457OS_11_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The **Start Date** and **End Date** fields are prefilled with the current month's
    start and end dates. Clicking on the **Search** button will trigger a search and
    fill the **Task Logs** grid with matching records. Clicking on a record from the
    list will open the item in the **Edit Task Log For {task name}** form. Clicking
    on the **Add New** button in the toolbar will clear the task log form fields and
    set the title to **Add Task Log**. Let's now look at these actions in detail.
  prefs: []
  type: TYPE_NORMAL
- en: Task log workflows and layouts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Searching for task logs will require a valid start and end date. An appropriate
    message will be displayed if either field is missing after clicking on the **Search**
    button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Task log workflows and layouts](img/5457OS_11_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Selecting a task log item from the list will open the record in the **Edit
    Task Log For Testing** form. The **Project** dropdown in the task log form will
    display the company name in addition to the project name when the list is shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Task log workflows and layouts](img/5457OS_11_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The selection of a **Project** from this list will filter the tasks displayed
    in the **Task** combobox:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Task log workflows and layouts](img/5457OS_11_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'If a **Project** that has no assigned tasks is selected, the following message
    is displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Task log workflows and layouts](img/5457OS_11_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Adding a new task log will preserve the currently selected **Date** and **Project**,
    if present:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Task log workflows and layouts](img/5457OS_11_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Deleting a task log will ask the user to confirm their action:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Task log workflows and layouts](img/5457OS_11_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This should be the standard practice for all deletions when developing enterprise
    projects; never delete a record without first confirming the action with the user!
  prefs: []
  type: TYPE_NORMAL
- en: Selecting **Yes** will delete the task log record and remove the record from
    the search results.
  prefs: []
  type: TYPE_NORMAL
- en: Building our task log views
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The task log user interface contains a variety of different components including
    date pickers and combo boxes. We will implement the UI by dividing the screen
    into three views. The outermost `ManageTaskLogs` view will contain a toolbar and
    define a border layout to hold the `TaskLogList` and `TaskLogForm` views:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Building our task log views](img/5457OS_11_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The ManageTaskLogs.js file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We have chosen the `border` layout for this view to allow resizing of the `TaskLogForm`
    view that is initially fixed to a width of 400px in the `east` region. The `ManageTaskLogs`
    definition is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This class is defined in the `view.tasklog` namespace. You will need to create
    the `view/tasklog` sub directory before adding the `ManageTaskLogs.js` file.
  prefs: []
  type: TYPE_NORMAL
- en: The `date` fields are initialized with the start and end dates of the current
    month using the `Ext.Date.getFirstDateOfMonth()` and `Ext.Date.getLastDateOfMonth()`
    functions. Manipulating the dates is a common task in Ext JS 4 development, and
    there are many helpful functions in the `Ext.Date` class that make such tasks
    easy.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `TaskLogList` view has been placed in the `center` region of the `border`
    layout, while the `TaskLogForm` view has been given an initial fixed width of
    `400` in the `east` region. This will ensure that larger screen resolutions scale
    the task log list to give a balanced view. A screen width of 1200px would hence
    show the following layout:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The ManageTaskLogs.js file](img/5457OS_11_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The `border` layout also allows resizing of the `TaskLogForm` view should the
    user wish to increase the width of the data entry fields.
  prefs: []
  type: TYPE_NORMAL
- en: The TaskLogForm.js file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `TaskLogForm` view is used to display a task log record:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The **Project** combobox defines two different templates: one for rendering
    the list and one for rendering the selected item text. The `tpl` property combines
    the company name and project name for display in the dropdown:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The TaskLogForm.js file](img/5457OS_11_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: When an item is selected, only the project name is shown as rendered by the
    `displayTpl` template.
  prefs: []
  type: TYPE_NORMAL
- en: The TaskLogList.js file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `TaskLogList` view is defined as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The `viewConfig` properties are used to create an instance of the `Ext.grid.View`
    class, which provides a grid-specific view functionality. We will be performing
    updates on a per record basis, not by using batch updates via the store. The `markDirty:false`
    property will ensure that the records saved successfully are not rendered with
    the dirty flag in the grid. If a task log search returns no records, the `emptyText`
    value will be displayed in the grid to give the user immediate feedback.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `TaskLogList` view uses the `summary` feature to display a total row containing
    the **Records** count and **Total Hours** displayed in the search listing. The
    `summaryType` and `summaryRender` definitions are used to configure the `feature`
    displayed in the footer of the `taskDescription` and `taskMinutes` columns. The
    `summary` value may be one of `count`, `sum`, `min`, `max`, or `average`, of which
    we are using the `count` and `sum` values. More information about the `summary`
    feature can be found at [http://docs.sencha.com/extjs/4.2.2/#!/api/Ext.grid.feature.Summary](http://docs.sencha.com/extjs/4.2.2/#!/api/Ext.grid.feature.Summary).
    The following screenshot displays the `summary` feature in use:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The TaskLogList.js file](img/5457OS_11_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'There is also some code to note in the column representing the hours of work
    assigned to the task:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The time worked per task log is stored in the database in minutes but displayed
    on the frontend as hours. The column is bound to the `taskMinutes` field in the
    model. The renderer displays the (calculated) `hours` field of the `TaskLog` model
    (this will be defined in the section that follows). The `summary` feature uses
    the `taskMinutes` field to calculate the total time as the feature requires a
    real (not converted) model field to act on. This total time in minutes is then
    converted in the `summaryRenderer` function to hours for display.
  prefs: []
  type: TYPE_NORMAL
- en: Defining our models
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Our `Project`, `Task`, and `TaskLog` models were created with basic fields using
    Sencha Cmd in [Chapter 9](ch09.html "Chapter 9. Getting Started with Ext JS 4"),
    *Getting Started with Ext JS 4*, but they lacked in persistence or validation
    logic. It is now time to add the required code.
  prefs: []
  type: TYPE_NORMAL
- en: The TaskLog Model
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `TaskLog` model is the most complicated model in our application. The complete
    `TaskLog` model with all required logic is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'This is the first time we have used the `useNull` property on a field. The
    `useNull` property is important when converting JSON data into an `int`, `float`,
    `Boolean`, or `String` type. When a value cannot be parsed by the reader, the
    following default values are set for the model field:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Field type | Default value with `useNull:true` | Default value with `useNull:false`
    |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `int` | `null` | `0` |'
  prefs: []
  type: TYPE_TB
- en: '| `float` | `null` | `0` |'
  prefs: []
  type: TYPE_TB
- en: '| `boolean` | `null` | `false` |'
  prefs: []
  type: TYPE_TB
- en: '| `String` | `null` | `""` (empty string) |'
  prefs: []
  type: TYPE_TB
- en: '| `Date` | `null` | `null` |'
  prefs: []
  type: TYPE_TB
- en: If the value cannot be parsed by the reader, `null` will be assigned to the
    field value if the field is configured with `useNull:true`. Otherwise, a default
    value for that type will be used as displayed in the third column in the preceding
    table. Note that the `Date` fields are always set to `null` if the value cannot
    be parsed. In most circumstances, it is important to be able to discern whether
    a field is null after reading the record, and hence, we recommend setting the
    `useNull:true` property for all primary key fields.
  prefs: []
  type: TYPE_NORMAL
- en: This is also the first time that we have used the `dateFormat` property. This
    property defines the format of the date while encoding or decoding JSON `date`
    fields via the configured `writer` and `reader` classes. The `YYYYMMDD` format
    string represents an 8-digit number. For example, the date 18th August, 2013,
    is equivalent to 20130818\. The other format strings are documented in the `Ext.Date`
    API at [http://docs.sencha.com/extjs/4.2.2/#!/api/Ext.Date](http://docs.sencha.com/extjs/4.2.2/#!/api/Ext.Date).
    It is strongly recommended that you always specify an explicit date format for
    any `date` field.
  prefs: []
  type: TYPE_NORMAL
- en: The use of the `convert` function for the `hours` field is also new. It converts
    a value provided by the `reader` class and stores it in the configured `name`
    field of the model. In our `TaskLog` model, the number of minutes is converted
    into a decimal value and stored in the `hours` field. It will be far more convenient
    for the 3T user to enter a value of 2.5 hours rather than 150 minutes.
  prefs: []
  type: TYPE_NORMAL
- en: Note that we have once again used the `persist:false` property to restrict the
    fields that are not required for persistence in our `TaskLogHandler` methods.
    Our validations for the `TaskLog` model should also be self-explanatory!
  prefs: []
  type: TYPE_NORMAL
- en: The Project model
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `Project` model defines our usual proxy and validation properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: There is no need to include the `companyName` field while persisting a record
    and hence the field includes the `persist:false` property.
  prefs: []
  type: TYPE_NORMAL
- en: The Task Model
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `Task` model also has a simple structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Once again we have several fields that do not need to be persisted and are hence
    configured with the `persist:false` property. It is now time to define the stores
    required to build our task log user interface.
  prefs: []
  type: TYPE_NORMAL
- en: Defining our stores
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `TaskLogList` and `TaskLogForm` views require stores to function. The `TaskLogList`
    view requires a `TaskLog` store, while the `TaskLogForm` view requires a `Project`
    and a `Task` store. Let's define them now.
  prefs: []
  type: TYPE_NORMAL
- en: The TaskLog store
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We define this store with a helper method to allow easy loading for the task
    log searches. The definition is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Note that we are formatting the start and end dates in the `doFindByUser` method
    using the `Ext.Date.format` function. This is to ensure that the dates sent to
    the server are in the expected 8-digit `yyyymmdd` format.
  prefs: []
  type: TYPE_NORMAL
- en: The Project store
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `Project` store will be sorted to achieve the required company name grouping
    that is displayed in the **Project** combobox:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Note that all the project records will be loaded by the `project/findAll.json`
    URL that is mapped to the `findAll` method in the `ProjectHandler` Java class.
    The `sorters` property configures the sorting routine that will be applied to
    the results after loading the store. The records will first be sorted by the `companyName`
    field in the ascending order after which the `projectName` field will be used
    to apply a secondary sort.
  prefs: []
  type: TYPE_NORMAL
- en: The Task store
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Task store has a very simple structure. The following definition should
    hold no surprises for you:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: All the task records will be loaded by the `task/findAll.json` URL that is mapped
    to the `findAll` method in the `TaskHandler` Java class.
  prefs: []
  type: TYPE_NORMAL
- en: Controlling the TaskLog actions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `TaskLogController` definition is the most complex controller definition
    we have yet developed. The definition that follows excludes the `refs` and `init`
    configuration. You can download the full source code from this book''s website:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The `TaskLogController` section defines the three stores that are used by the
    views. The `Project` and `Task` stores are loaded in the `doAfterActivate` function
    that is triggered when the `ManageTaskLogs` panel is activated. This ensures that
    the **Task** and **Project** comboboxes have valid data to operate on.
  prefs: []
  type: TYPE_NORMAL
- en: Each `ref` item defined in the controller is used in one or more functions to
    access the underlying component and perform an appropriate action. The autogenerated
    set method for each `ref` item makes referencing the components in our code easy.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It is important to note that the `ref` item will always return a single object,
    so it cannot be used like the `Ext.ComponentQuery.query` function to retrieve
    a collection of components. To retrieve objects dynamically (without using refs)
    or to retrieve a collection of objects, the `ComponentQuery.query` function should
    be used. For more information, see [http://docs.sencha.com/extjs/4.2.2/#!/api/Ext.ComponentQuery](http://docs.sencha.com/extjs/4.2.2/#!/api/Ext.ComponentQuery).
  prefs: []
  type: TYPE_NORMAL
- en: Each possible user action is handled by an appropriately named function. The
    function arguments will depend on the event source. The `click` event handler
    function for a `button` object will always pass a reference to the button itself
    as the first argument of the event handler. The grid `itemclick` event handling
    function will always receive a reference to the grid itself as the first argument
    followed by the record that was clicked on. You should examine the Sencha Ext
    JS 4 docs to become familiar with the event handling function arguments of common
    components.
  prefs: []
  type: TYPE_NORMAL
- en: Performing a search requires a valid start and end date. The `doSearch` function
    will validate the two `date` fields before allowing a search. Note the use of
    the `TTT.getApplication().getUser()` function to access the user who is currently
    logged in.
  prefs: []
  type: TYPE_NORMAL
- en: A successful search will list the task log records that match the search criteria.
    A user can then click on an item in the list to load the task log form. This is
    done in the `doSelectTaskLog` function.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a new task log will create a new `TaskLog` model record and load the
    form. The record will have the currently logged in `username` property set. The
    currently selected **Project** in the project combo is retained if available;
    otherwise, the first item in the combo is selected.
  prefs: []
  type: TYPE_NORMAL
- en: 'Selecting a project will filter the task store to only display the tasks assigned
    to the project. This is achieved in the `doSelectProject` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Note that we are defining an `exactMatch` on the `idProject` field. Without
    this property, partial matches would be returned (for example, filtering with
    an `idProject` value of `2` would match a task with an `idProject` value of `20`;
    a trap for unwary developers!).
  prefs: []
  type: TYPE_NORMAL
- en: The `doSaveTaskLog` and `doDeleteTaskLog` functions perform the appropriate
    actions on the record that was loaded into the task log form. Just like in the
    previous chapter, the form is used to display and enter data but the data is never
    submitted. All the save data actions are triggered via the `model` instance.
  prefs: []
  type: TYPE_NORMAL
- en: Testing the task log interface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before running the application and testing your new files, you need to add
    the `TaskLogController` as well as the new stores and models to your `Application.js`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'You also need to add the `ManageTaskLogs` view to the `MainCards` view''s `items`
    array as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'You can now run the application in the GlassFish server and test the **Task
    Logs** interface. Start by logging in as the `jsmith` user with the password `admin`
    and perform searches with different date ranges. The data should be displayed
    for when you loaded the 3T tables in MySQL:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Testing the task log interface](img/5457OS_11_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Try performing searches that do not return any records. You should see the
    `emptyText` value defined in the `viewConfig` property of the `TaskLogList` view:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Testing the task log interface](img/5457OS_11_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You can now try to add new records and edit the existing task logs to test the
    full range of the functionality. Can you make the following message pop up?
  prefs: []
  type: TYPE_NORMAL
- en: '![Testing the task log interface](img/5457OS_11_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We will build the 3T administration interface in the next chapter to stop this
    from happening!
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The task log user interface brought together multiple component interactions
    between the views, models, and stores. We introduced the `summary` feature for
    grids and filtered records in both the `Project` and `Task` stores. Searching
    for the `TaskLog` records required us to parse the dates into an appropriate format
    for backend processing, while our basic model skeletons were enhanced with persistence
    and validation properties. We have once again explored interesting Ext JS 4 territory
    and worked with a variety of components.
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 12](ch12.html "Chapter 12. 3T Administration Made Easy"), *3T Administration
    Made Easy*, we will develop the 3T Administration interface and introduce the
    Ext JS 4 tree component. The `Ext.tree.Panel` is a very versatile component that
    is perfectly suited to displaying the Company-Project-Task relationship.
  prefs: []
  type: TYPE_NORMAL
