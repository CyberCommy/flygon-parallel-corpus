- en: Deploying a LAMP Stack
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will look at deploying a full LAMP stack using the various
    core modules that ship with Ansible. We will be targeting the CentOS 7 Vagrant
    box we deployed in [Chapter 2](121e7191-52e8-4dac-a48b-9dd42f1fb2b0.xhtml), *Installing
    and Running Ansible*.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will talk about the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Playbook layout—how the playbook should be structured
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Linux—preparing the Linux server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Apache—installing and configuring Apache
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MariaDB—installing and configuring MariaDB
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PHP—installing and configuring PHP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Before we start writing the playbook, we should discuss the structure we are
    going to be using after we quickly discuss what we need for the chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We are going to again use the CentOS 7 Vagrant box we launched in the previous
    chapters. As we will be installing all of the elements of a LAMP stack on the
    virtual machine, your Vagrant box will need to be able to download packages from
    the internet; in all, there is around 500 MB of packages and configuration to
    download.
  prefs: []
  type: TYPE_NORMAL
- en: You can find a complete copy of the playbook at [https://github.com/PacktPublishing/Learn-Ansible/tree/master/Chapter04/lamp](https://github.com/PacktPublishing/Learn-Ansible/tree/master/Chapter04/lamp).
  prefs: []
  type: TYPE_NORMAL
- en: Playbook structure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapters, the playbooks we have been running have typically
    been as basic as possible. They have all been in a single file, which is accompanied
    by a host inventory file. In this chapter, as we are going to be greatly expanding
    the amount of work our playbook is doing, so we are going to be using the directory
    structure recommended by Ansible.
  prefs: []
  type: TYPE_NORMAL
- en: 'As you can see from the following layout, there are several folders and files:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/e8ae9103-54aa-4970-8299-c91760c899e5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s work on creating the structure and discuss each item as we create it.
    The first folder we need to create is our top-level folder. This is the folder
    that will contain our playbook folders and files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The next folder we are going to create is one called `group_vars`. This will
    contain the variable files used in our playbook. For now, we are going to be creating
    a single variable file call `common.yml`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we are going to be creating two files: our host inventory file, which
    we will name `production`, and also our master playbook, which is typically called
    `site.yml`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The final folder we are going to create manually is called `roles`. In here,
    we are going to use the `ansible-galaxy` command to create a role called `common`.
    To do this, we use the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: As you may have noticed from the initial structure at the start of this section,
    the common role has several files and folders itself; all of these are created
    for us when we run the `ansible-galaxy init` command. We will discuss what each
    of these does in the next section where we will be using the common role to configure
    our base Linux server.
  prefs: []
  type: TYPE_NORMAL
- en: 'The only other file that isn''t part of the default Ansible structure is our
    `Vagrantfile`. This contains the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: While we will be working through each of the files individually in this and
    the following sections, a complete copy of the playbook is available in the accompanying
    GitHub repository.
  prefs: []
  type: TYPE_NORMAL
- en: LAMP stack
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The LAMP stack is the term used to describe an all-in-one web and database
    server. Typically, the components are:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Linux**: The underlying operating system; in our case, we will be using CentOS
    7.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Apache**: The web server element of the stack.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**MariaDB**: The database component of the stack; typically, it is MySQL-based.
    As CentOS 7 ships with MariaDB, we will be using that rather than PHP.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**PHP**: The dynamic language used by the web server to generate content.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There is also a common variation of the LAMP stack called **LEMP**; this replaces
    *Apache* with *NGINX*, which is pronounced *engine-x*, hence the *E* rather than
    *N*.
  prefs: []
  type: TYPE_NORMAL
- en: 'We are going to be looking at creating roles to deal with these components;
    these are:'
  prefs: []
  type: TYPE_NORMAL
- en: '`common`: This role will prepare our CentOS server, installing any supporting
    packages and services we need'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`apache`: This role will install the Apache web server and also configure a
    default virtual host'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mariadb`: This role will not only install MariaDB, but it will also secure
    the installation and create a default database and user'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`php`: This role will install PHP, a set of common PHP modules, and also Composer,
    which is a package manager for PHP'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's make a start on getting the basics ready by writing the common role.
  prefs: []
  type: TYPE_NORMAL
- en: Common
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the previous section of this chapter, we used the `ansible-galaxy init`
    command to create the `common` role. This creates several folders and files; before
    we start editing them, let''s quickly discuss what each of them is used for:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/501dbfad-ccb2-4abb-bd73-6f7fd45ecb96.png)'
  prefs: []
  type: TYPE_IMG
- en: 'It is really only the top level we are worried about; the `main.yml` files
    are just the default YAML files that are called for each part of the role:'
  prefs: []
  type: TYPE_NORMAL
- en: '`README.md`: This is the file used to create any documentation about the role
    when the role is checked into a service such as GitHub. This file will be displayed
    along with the folder listing whenever someone browses to the common folder.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`default`: This is where the default variables for the role are stored. These
    can be overridden by any variables with the same name called in the `vars` folder.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`files`: This folder contains any static files we may wish to copy to the target
    hosts using the `copy` module.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`handlers`: Handlers are tasks that are executed once a playbook has been executed;
    typically, `handlers` are used to restart services when a configuration file has
    changed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`meta`: This contains information about the role and is used if the role was
    to be published to Ansible Galaxy.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tasks`: This is where the bulk of the work happens.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`templates`: This folder contains the Jinja2 templates used by the `template`
    module.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tests`: Used to store any tests for the module.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`vars`: You can override any of the variables defined in the `default` folder
    using the variables defined here; variables defined here can also be overridden
    by any variables loaded from the `group_vars` folder and the top level of the
    playbook.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's make a start by adding some tasks.
  prefs: []
  type: TYPE_NORMAL
- en: Updating packages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First of all, let''s update our server by adding the following to the beginning
    of the `roles/common/tasks/main.yml` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: You will notice that there is a difference from when we last ran `yum` to update
    all of the installed packages and that is what we are now doing is starting the
    task using the `name` key, this will print out the content of the value we assigned
    to the name key when the playbook runs, which will give us a better idea of what
    is going on during the playbook run.
  prefs: []
  type: TYPE_NORMAL
- en: Installing common packages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we have updated the installed packages, let''s install the packages
    we want to install on all of the Linux servers we will be launching:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, we are again using the `yum` module and we have added a descriptive
    name for the task. Rather than providing a list of packages in the task, we are
    using a variable called `common_packages`, which is defined in the `roles/common/defaults/main.yml`
    file as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, we are installing `ntp` and `ntpdate`; we will be configuring
    `ntp` shortly. Next, we are installing `vim-enhanced` and `git` as they are always
    useful to have installed on a server. Then, we are installing the `policycoreutils-python`
    package, more on that later, before finally installing and enabling two additional
    `yum` repositories, EPEL and IUS.
  prefs: []
  type: TYPE_NORMAL
- en: '**Extra Packages for Enterprise Linux** (**EPEL**) is a special interest group
    that maintains a collection of packages that are not part of the Red Hat Enterprise
    Linux core. EPEL packages are typically based on their Fedora counterparts and
    have been packaged so they will never conflict with, or replace, packages in the
    core Enterprise Linux distributions.'
  prefs: []
  type: TYPE_NORMAL
- en: CentOS 7 ships with a package called `epel-release`, which enables the EPEL
    repository. However, there is no release package for IUS, so here, rather than
    using a package that is a part of the core CentOS repository, we are providing
    the full URL of the RPM file that enabled the IUS repository for CentOS 7.
  prefs: []
  type: TYPE_NORMAL
- en: The IUS Community Project is a collection of RPMs for Red Hat Enterprise Linux
    and compatible operating systems, such as CentOS, which aims to provide packages
    that are **Inline with Upstream Stable**, hence **IUS**. They provide packages
    for Apache, PHP, and MariaDB, which are all the latest release. The packages supplied
    by IUS adhere to the rules laid out in the *SafeRepo Initiative*, meaning they
    can be trusted.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring NTP
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Next up, we are copying the `ntp.conf` file from the `templates` folder, adding
    the list of NTP servers as we do, and then telling Ansible to restart NTP whenever
    the configuration file changes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The template file can be found at `roles/common/templates/ntp.conf.j2`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, we are using the `ntp_servers` variable; this is stored in
    the `roles/common/defaults/main.yml` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, the following task has been added to `roles/common/handlers/main.yml`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: While we have notified the handler here, NTP will not be restarted to the end
    of the playbook run along with any other tasks we have notified.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a user
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The final part of the common role is to add a user called `lamp` and add our
    public key to the user. Before we look at the task, let''s look at the variable
    we will be using, which is defined in `roles/common/defaults/main.yml`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, we are providing three bits of information:'
  prefs: []
  type: TYPE_NORMAL
- en: '`name`: This is the name of the user we want to create'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`group`: This is the group we want to add our user to'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`state`: If we want the user to be present or absent'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`key`: Here, we are using an Ansible lookup task to read the content of the
    file at `~/.ssh/id_rsa.pub` and use that as the value'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The task in the `roles/common/tasks/main.yml` file for creating the user is
    split into three parts; the first part uses the `group` module to create the group:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, we are using `with_items` to load in the `users` variable, as
    the variable contains three different items, only two of which are being used
    here. We can just name them, so here we are using `item.group` and `item.state`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The second part of the task creates the user using the `user` module, as you
    can see:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The final part of the task adds the user''s public key to the authorized key
    file using the `authorized_key` module:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, we are using the `item.name` and `item.key` variables this time.
    This module creates a file called `.ssh/authorized_keys` in the user's home folder,
    which is defined by `item.name`, and then places the content of `item.key` in
    there, giving the holder of the private portion of the key access to the user
    we have just created.
  prefs: []
  type: TYPE_NORMAL
- en: Running the role
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First of all, let''s launch the CentOS 7 Vagrant box by running one of the
    following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we have our server, we need to update the host inventory; in the `production`
    file, enter the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we need something that will execute our role. Add the following content
    to the `site.yml` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we have our playbook file ready, we can run it against our Vagrant
    box by running:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'After a few minutes, you should see something similar to the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, everything has been installed and configured as expected. Rerunning
    the playbook gives these results:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, we have skipped the task which restarts NTP and there are no
    additional packages or updates to install, nor are there any changes to the user
    or group we created. Now that we have our basic packages updated and installed,
    and our base operating system configured, we are ready to install Apache.
  prefs: []
  type: TYPE_NORMAL
- en: Apache
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'At the moment, we have no role for Apache, so let''s create one using the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: As before, this will create the basic scaffold for our Apache role.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Apache
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The first task we are going to add is one that installs the basic Apache packages.
    In `roles/apache/tasks/main.yml`, add the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'As you may have already guessed, the defaults for `apache_packages` can be
    found in `roles/apache/defaults/main.yml`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: This installs the latest Apache 2.4 package from IUS, along with some of the
    supporting tools we will need. Once installed, we will now need to configure Apache.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring Apache
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You may have wondered why we created a user called `lamp` in the previous section;
    we are going to be hosting our website for this user. The first aspect in getting
    the user ready to host our website is to add the user to the `apache_group`. To
    do this, we need to run the following task:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'There are two things to point out here. The first is that we are using the
    `users` variable from the previous role, which is still available to use within
    the playbook run, and the second thing is that we have added a variable called
    `apache_group` to `roles/apache/defaults/main.yml`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that our user is in the `apache_group`, let''s create what will be the
    document root for our website:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, this is using a few new variables, along with a new way of accessing
    an old one. Let's address `users.0.name` first, because we have defined the users
    as a list. It is possible that more than one user could be being added during
    the playbook run, as we only want to create one document root and assign it to
    a single virtual host we are using the first user in the list which registered
    under the **user** variable, this is where the `0` comes in.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `document_root` variable is also constructed using this principle; these
    are the two variables in the `roles/apache/defaults/main.yml` file that will help
    make up the full document root:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: This will give our document root a path of `/home/lamp/web/` on the Vagrant
    box, assuming we do not override any of the variable names in our main playbook.
  prefs: []
  type: TYPE_NORMAL
- en: 'We also need to change the permissions on the lamp user''s home folder to allow
    us to execute scripts; to do this, the following task is called:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we need to put our Apache virtual host in place; this will serve our
    web page whenever we put the name of our host in a browser. To do this, we will
    be using a template file stored in `roles/apache/templates/vhost.conf.j2` that
    uses the variables we have already defined along with two more:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'The `index_file` variable in `roles/apache/defaults/main.yml`  looks like the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'There is also the `ansible_nodename` variable; this is one of the variables
    gathered from the host machine when the `setup` module first runs. The task to
    deploy the template is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'The task that restarts Apache can be found in `roles/apache/handlers/main.yml`
    and looks like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Now that we have Apache installed and configured, we need to allow Apache to
    use the web root, which is stored in `/home/`. To do this, we need to tweak the
    SELinux permissions.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring SELinux
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the packages we installed during the last section was `policycoreutils-python`.
    This allows us to configure SELinux using Python, and therefore Ansible.
  prefs: []
  type: TYPE_NORMAL
- en: '**Security-Enhanced Linux** (**SELinux**) was developed by Red Hat and the
    NSA. It provides a mechanism for supporting access control security policies at
    the kernel level. These include mandatory access controls used by the United States
    Department of Defense.'
  prefs: []
  type: TYPE_NORMAL
- en: 'By default, the Vagrant box we are using ships with SELinux enabled. Rather
    than simply stopping SELinux, we can just permit Apache to run outside of its
    default `/var/www/`. To do this, we need to add the following to our role:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Now that Apache is allowed to serve content from our user directory, we can
    add an `index.html` file, so we have something other than the default Apache page
    to serve.
  prefs: []
  type: TYPE_NORMAL
- en: Copying an HTML file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The final task is to copy an `index.html` file to our web root, so we have
    something to serve with our newly installed Apache server. The task to do this
    uses the `template` module:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, we are loading a template called `index.html.j2`, which contains
    the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'We are using two variables in our template; both of these can found in the
    `roles/apache/defaults/main.yml` file along with the variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'As part of the task, we have the following line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: This means that the task will only be executed if `html_deploy` equals `true`.
    If it is anything else, then the task will be skipped. We will be looking at this
    later in the chapter, but for now, we want the page to be deployed, so we will
    keep the default value defined in the `apache/defaults/main.yml` file.
  prefs: []
  type: TYPE_NORMAL
- en: The final thing to point out before we run the role is the `html_body` variable.
    As you can see the content of the variable is spread over three lines. This is
    done using the `|` character after the variable name; this helps make your variable
    files readable and also allows you to start distributing items such as keys or
    certificates as variables, while also allowing you to encode them using vault.
  prefs: []
  type: TYPE_NORMAL
- en: Running the role
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that the role for installing and configuring Apache is complete, we can
    add it to our playbook:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Following on from the playbook in the previous section, we can simply rerun
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'This will work through the common role before executing the `apache` role.
    I have truncated the output for the common role in the playbook run here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Opening `http://192.168.50.4.nip.io/` in our browser should give us a page
    that looks like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/52829455-e57a-457c-9ade-a36ce728255a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As you can see, the template has picked up all of the variables we defined;
    the source for the page looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'If we were to rerun the playbook, we should see the following results:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, there are `14` tasks that are `ok`, and nothing has `changed`.
  prefs: []
  type: TYPE_NORMAL
- en: MariaDB
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Next, we are going to install and configure MariaDB, the database component
    of our LAMP stack.
  prefs: []
  type: TYPE_NORMAL
- en: MariaDB is a fork of MySQL. Its development has been led by some of the original
    developers of MySQL; they created the fork after concerns surrounding the licensing
    of MySQL after it was acquired by Oracle.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first step is to create the files we are going to need for the role; again,
    we will use the `ansible-galaxy init` command to bootstrap the role files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: Installing MariaDB
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we have been using the IUS repository for other packages in our playbook,
    it would make sense to install the latest version of MariaDB from there. However,
    there is a conflict we need to resolve first.
  prefs: []
  type: TYPE_NORMAL
- en: As part of the base Vagrant box installation, Postfix, the mail server, is installed.
    Postfix requires the `mariadb-libs` package as a dependency, but having this package
    installed is going to cause a conflict with the later version of the package we
    want to install. The solution to this problem is to remove the `mariadb-libs`
    package and, then install the packages we need, along with Postfix, which is removed
    when we uninstall `mariadb-libs`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first task in the role, which we need to add to `roles/mariadb/tasks/mail.yml`,
    looks like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'As you may have already suspected, `mariadb_packages_remove` is defined in
    the `roles/mariadb/defaults/main.yml` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, we are using the full package name. We need to do this because
    if we simply used `mariadb-libs`, then the newly installed package would be removed
    during each playbook run. This is bad as this task would also uninstall all of
    the MariaDB packages we are going to be installing next, which, if we have a live
    database running, would be a disaster!
  prefs: []
  type: TYPE_NORMAL
- en: 'To install the later version of MariaDB, we need to add the following task:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'The `mariadb_packages` variable, which again can be found in the defaults folder,
    looks like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: We are installing the packages for MariaDB, along with Postfix, which was removed
    during the last task. We are also installing the `MySQL-python` package, which
    will allow Ansible to interact with our MariaDB installation.
  prefs: []
  type: TYPE_NORMAL
- en: 'By default, MariaDB does not start as part of the installation process. Typically,
    we would use a handler to start the service as part of the playbook run, and,
    as we have learned from the previous sections, the handlers run at the very end
    of the playbook execution. This would not be a problem if we didn''t need to interact
    with the MariaDB service to configure it. To get around this, we need to add the
    following task to our role:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: This makes sure that MariaDB is running, as well as configuring the service
    to start on boot.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring MariaDB
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that MariaDB is installed and running, we make a start on getting it configured.
    Our default installation of MariaDB has no root password defined, so that should
    be the first thing we set up. We can do this using the `mysql_user` module:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, we have a few different variables in use; these are defined
    in `roles/mariadb/defaults/main.yml` as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: The order of the hosts in `mariadb_hosts` is important; if `localhost` is not
    the last host changed, then Ansible will give an error with a message about not
    being able to connect to MariaDB. This is because we are using the fact that MariaDB
    does not ship with a default root password to actually set the root password.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, once we have configured the root user''s password, we still want to be
    able to connect to MySQL. I prefer to set up a `~/.my.cnf` file under the root
    users folder. This can be done in Ansible as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'The template file can be found at `lamp/roles/mariadb/templates/my.cnf.j2`;
    it contains the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'Once in place, this means that the system root user—not to be confused with
    the root user we just set up within MariaDB—will have direct access to MariaDB
    without having to provide a password. Next up, we can delete the anonymous user,
    which is created by default. Again, we will use the `mysql_user` module for this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, there is a `test` database created. As we will be creating our own,
    let''s remove this as well, this time using the `mysql_db` module:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: These configuration tasks are the equivalent of running the `mysql_secure_installation`
    command.
  prefs: []
  type: TYPE_NORMAL
- en: Importing a sample database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that our MariaDB installation is complete, we should do something with it.
    There are a few sample databases available on GitHub. Let's look at importing
    the employee database provided by datacharmer. We will be using a slightly altered
    version of the SQL dumps, but more on that later in the section.
  prefs: []
  type: TYPE_NORMAL
- en: 'We are going to be using nested variables for this part of the playbook; these
    can be found in `mariadb/defaults/main.yml`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: When we call these variables, they will need to be prefixed with `mariadb_sample_database`.
    For example, whenever we need to use the `db_name` variable, we will need to use
    `mariadb_sample_database.db_name`. As when we copied the HTML file in the previous
    section, we will be adding a condition using `when` to each of the tasks, which
    will mean they can be skipped if required.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first thing we will need to do is download a copy of the dump files from
    GitHub and uncompress them. To do this, we will be using the `unarchive` module:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: We are grabbing the file from a remote location, which is the URL `mariadb_sample_database.source_url`,
    and uncompressing it in `/tmp`. As we have set `remote_src` to `yes`, Ansible
    knows it has to download the file from a remote source. If we didn't provide a
    full URL, it would have attempted to have copied the file from our control host.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next two tasks use the `mysql_db` and `mysql_user` modules to create the
    database and a user who has access to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: The final part of the playbook imports the MySQL dumps into the database; however,
    before we import the files, we should first check if the dumps have already been
    imported. If we do not perform this check every time we run the playbook, the
    dumps will be imported. To check whether the data has been imported already, we
    are going to use the `stat` module; this checks the presence of a file and gathers
    information on it.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we have already imported the data, there will be a file called `employees.frm`
    in the `/var/lib/mysql/employees` folder, so let''s check for that:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we know whether we need to import the database dumps or not, we can proceed
    with the final task, which imports the database dumps listed in `mariadb_sample_database.dump_files`
    if the following conditions are met:'
  prefs: []
  type: TYPE_NORMAL
- en: Is the variable `db_imported` defined? If not, then we are skipping importing
    the sample database and should skip this task.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Does `db_imported.stat.exists` equal `false`? If so, then the file does not
    exist, and we should import the data.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The task itself uses the `mysql_db` module to import the data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: That completes the import of the sample database into our MariaDB installation;
    let's now run the playbook and call the role.
  prefs: []
  type: TYPE_NORMAL
- en: Running the role
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we have our role written, we can add it to our playbook:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'Again, we can rerun the playbook using:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'This will work through the common and Apache roles before moving on to the
    MariaDB equivalent. This playbook output starts just before the the MariaDB role
    begins:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: 'If we were to rerun the playbook, the final part of the playbook run returns
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, the checks we put in place to not reimport the database dumps
    worked as expected. We can test our MariaDB installation using a tool such as
    Sequel Pro or MySQL Workbench; just use the following host and credentials to
    connect:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Host: `192.168.50.4.nip.io`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Port: `3306`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Username: `root`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Password: `Pa55W0rd123`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following screenshot is taken from Sequel Pro and shows the `employees`
    table, which we imported into the `employees database` :'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/b477b72d-02f7-46b0-8fd9-ef8613e90a8c.png)'
  prefs: []
  type: TYPE_IMG
- en: Now that we have MariaDB installed, configured, and some sample data imported,
    let's take a look at creating a role that installs PHP, the final component of
    our LAMP stack.
  prefs: []
  type: TYPE_NORMAL
- en: PHP
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The final element of the stack we are putting together is PHP. As with the
    other three elements, we need to create a role using the `ansible-galaxy init`
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: As with the other parts of the stack, we are going to be using packages from
    the IUS repository; this will allow us to install the latest version of PHP, version
    7.2.
  prefs: []
  type: TYPE_NORMAL
- en: Installing PHP
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Like the previous three parts of the stack, we are going to start by installing
    the packages. As before, we are defining a variable in `roles/php/default/main.yml`
    that lists all of the packages we need:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: 'This is installed by using the YUM module in `php/roles/tasks/main.yml`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see from this task, we are notifying two different handlers, the
    one for Apache and one for PHP-FPM. You may be thinking to yourself: why do we
    need to notify Apache?'
  prefs: []
  type: TYPE_NORMAL
- en: '**FastCGI Process Manager** (**FPM**) is a PHP FastCGI implementation that
    helps busy PHP websites run more efficiently. It also adds the ability to start
    PHP workers with different user and group IDs, which can listen on different ports
    using different `php.ini` files, allowing you to create pools of PHP workers to
    handle your load.'
  prefs: []
  type: TYPE_NORMAL
- en: As we are installing the `php72u-fpm` package, we need to configure Apache to
    use the configuration put in place by the `php72u-fpm-httpd` package; if we don't,
    then Apache will not load the configuration, which instructs it on how to interact
    with PHP-FPM.
  prefs: []
  type: TYPE_NORMAL
- en: 'The handler for PHP-FPM can be found in `roles/php/handlers/main.yml`, and
    it contains the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: That is kind of it for the PHP installation and configuration; we should now
    have a working PHP installation, and we can test this using a phpinfo file.
  prefs: []
  type: TYPE_NORMAL
- en: The phpinfo file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As with the Apache installation, we can add the option to upload a test file,
    in this case, a simple PHP file that calls the `php_info` function. This displays
    information about our PHP installation. The task to upload this file looks like
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, it is only being called when the following is set in `roles/php/default/main.yml`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: 'The file we are copying to the host from our Ansible controller can be found
    in `roles/php/files/info.php`, and it contains the following three lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: While this demonstrates that PHP is installed and working, it isn't very interesting,
    so before we run our playbook, let's add a few more steps that tie all of the
    elements of our LAMP stack together.
  prefs: []
  type: TYPE_NORMAL
- en: Adminer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The final task for the playbook is going to be to install a PHP script called
    Adminer; this provides a PHP-powered interface for interacting with and managing
    your databases. There are three steps to install Adminer, all of which use the
    following nested variables that can be found in `roles/php/defaults/main.yml`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, we are using nest variables again, this time to tell our playbook
    to install the tool, where it should be installed, and also where it can be downloaded
    from. The first task in `roles/php/tasks/main.yml` is to create the directory
    where we are going to be installing Adminer:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we have somewhere on our Vagrant box to install Adminer, we should
    download it. This time, as we are not downloading an archive, we are using the
    `get_url` module:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, we are downloading the `adminer-4.6.2-mysql.php` file from
    GitHub and saving it to **`/usr/share/adminer/index.php`**, so how do we access
    it? The final part of the task uses the template module to upload an additional
    Apache configuration file to `/etc/httpd/conf.d/adminer.conf`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: 'The `adminer.conf.j2`  template, which should be placed in `roles/php/templates`,
    looks as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, it is creating an alias called `/adminer`, which then points
    at `index.php` in `/usr/share/adminer/`. As we are adding to the Apache configuration
    file, we are also notifying the `restart httpd` handler so that Apache restarts,
    picking up our updated configuration.
  prefs: []
  type: TYPE_NORMAL
- en: Running the role
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that the role for the final element of our LAMP stack is complete, we can
    add it to our playbook. It should now look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: 'Run it by using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: 'This will deploy PHP on our Vagrant box; this output picks up as the PHP role
    is called:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: 'Once installed, you should be able to access the following URLs:'
  prefs: []
  type: TYPE_NORMAL
- en: '`http://192.168.50.4.nip.io/info.php`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`http://192.168.50.4.nip.io/adminer/`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'When you go to the first link, you should see something like the following
    page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/8eb962a8-3707-4f0e-9012-5b1e92c0b487.png)'
  prefs: []
  type: TYPE_IMG
- en: 'At the second link, once logged in using the username `root` and password `Pa55W0rd123`,
    you should be able to see the `employees` database:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/ae89246a-76c7-4ddb-b97d-933c6727b4c1.png)'
  prefs: []
  type: TYPE_IMG
- en: With Adminer, we have a PHP script accessing our MariaDB database; the pages
    are being served by Apache from our Linux Vagrant box.
  prefs: []
  type: TYPE_NORMAL
- en: Overriding variables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before we finish, we should quickly discuss how we can override the default
    variables we have been setting. To do this, add the following lines to `group_vars/common.yml
    file`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, rerun the playbook. Once the playbook has finished, opening `http://192.168.50.4.nip.io/`
    will show you the following page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/aec7ff55-decf-451e-b465-b1234979f1aa.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, the default `index.html` page has been updated with a link to
    our phpinfo page and also Adminer. Any of the variables we have configured as
    default can be overridden in this way.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have worked through writing a playbook that installs a LAMP
    stack on our CentOS 7 Vagrant box. We created four roles, one for each element
    of the stack, and within each of the roles we built in a little logic that can
    be overridden to deploy additional elements such as test HTML and PHP pages, and
    we also built in the option to create a test database that contains over 40,000
    records.
  prefs: []
  type: TYPE_NORMAL
- en: So far, we have been installing some pretty basic packages. In the next chapter,
    we will be building a playbook that installs, configures, and maintains a WordPress
    installation.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Which Ansible module would you use to download and unarchive a zip file?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'True or false: The variables found in the **`roles/rolename/default/`** folder
    override all other references of the same variable.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Explain how you would add a second user to our playbook
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'True or false: You can only call a single handler from a task.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Update the final playbook to add a second virtual host, which serves a different
    default HTML page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can find the project pages for the third-party tools covered throughout
    the chapter at the following URLs:'
  prefs: []
  type: TYPE_NORMAL
- en: '**CentOS**: [https://www.centos.org/](https://www.centos.org/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Apache**: [https://httpd.apache.org/](https://httpd.apache.org/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**MariaDB**: [https://mariadb.org/](https://mariadb.org/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Datacharmer test database**: [https://github.com/datacharmer/test_db](https://github.com/datacharmer/test_db)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**PHP**: [https://php.net/](https://php.net/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**PHP-FPM**: [https://php-fpm.org/](https://php-fpm.org)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Adminer**: [https://www.adminer.org](https://www.adminer.org)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
