- en: Using Nuxt.js and Vue-Router
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With the rise of **Single-Page Applications** (**SPAs**), a number of specific
    issues have occurred. There have been various attempts at solving these issues,
    and some common solutions arose from these attempts. In this section, we will
    look at issues surrounding SPAs and ways of addressing and solving these issues
    in Vue.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will work with Nuxt.js and Vue-Router to understand a number
    of concepts:'
  prefs: []
  type: TYPE_NORMAL
- en: Single-page applications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Initial page load
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Server-side rendering and universal web apps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing Nuxt.js
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Nuxt pages as routes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Linking pages with the `nuxt-link` tag
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We'll begin by understanding just what SPAs are and how they work.
  prefs: []
  type: TYPE_NORMAL
- en: Single-page applications and server-side rendering
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Traditionally, web servers only serve static content. When a user makes a request
    to a link within an app, usually the server processes that request and sends the
    result of that processing to the client as an entire page, with HTML, CSS, and
    JS served by the browser. This happens when requesting each route in a web app.
    If a developer wants to see what was sent by the browser, it is as simple as running
    the `view source` command in your browser of choice.
  prefs: []
  type: TYPE_NORMAL
- en: The shortcut key for the view source command is traditionally *Ctrl* + *U* in
    some browsers, such as Chrome and Firefox.
  prefs: []
  type: TYPE_NORMAL
- en: With the push for the experience on the web to be more like what we have on
    desktops, we have seen the rise ofSPAs in recent years. Examples of popular SPAs
    include Gmail, Twitter, and Google Maps.
  prefs: []
  type: TYPE_NORMAL
- en: 'The way that an SPA works is this: when a user navigates through different
    pages (routes) on a site, the browser does not download a whole new page with
    a whole new request to the server. Rather than downloading full pages from a server
    each time a user visits a route, SPAs render everything on the client. Requests
    to the server are made only to get new data.'
  prefs: []
  type: TYPE_NORMAL
- en: 'A good test for deciding whether a web app can qualify as an SPA is this: does
    visiting a different route in the app cause the entire app to refresh? If it doesn''t,
    then it''s an SPA.'
  prefs: []
  type: TYPE_NORMAL
- en: An SPA requests new data from the server while traditional web apps download
    entire pages from the server.
  prefs: []
  type: TYPE_NORMAL
- en: This usually means that all of the SPA code will be downloaded in one page load—the
    **initial page load**. This includes HTML, CSS, and JS—all the code without which
    an SPA would not run. The downside of this approach is that the download time
    can be substantial when running on slower networks or due to the sheer size of
    an app, especially given the fact that a lot of these SPAs are full of JavaScript
    code.
  prefs: []
  type: TYPE_NORMAL
- en: However, as mentioned before, the goal of SPAs is to provide an excellent user
    experience, to behave like desktop apps, with instant execution and without latency.
  prefs: []
  type: TYPE_NORMAL
- en: A solution to this problem was the introduction of **server-side rendering**.
    Server-side rendering is simply the ability of a frontend framework to prepare
    the HTML, CSS, and JS on the server so that, when a user visits our SPA, instead
    of their browser having to download the full app in one go, it only downloads
    a portion of this code—a fragment of the full SPA—which, regardless, still allows
    the user to interact with the page. Through concepts such as code splitting and
    rehydration, an SPA seamlessly downloads only that part of the application that
    is needed to start using it, and only then downloads the rest of the SPA, while
    the user is already interacting with it. This approach reduces the latency of
    the initial load.
  prefs: []
  type: TYPE_NORMAL
- en: Another major issue of SPAs in the past was the problem of not being readable
    by search engine crawlers. Since these crawlers cannot run JavaScript when crawling
    an SPA website, the visiting search engine bot would not see that SPA's content.
    Hence, server-side rendering is an elegant approach to both speed up a web app
    for the user and make it more accessible for indexing by search engine bots.
  prefs: []
  type: TYPE_NORMAL
- en: When a web app can render web pages both on the server and on the client, it
    is referred to as a **universal web app**. A universal web app is basically an
    SPA that has SSR ability.
  prefs: []
  type: TYPE_NORMAL
- en: Many modern frontend frameworks have their own SSR implementations. In Vue,
    this is what we call Nuxt.js.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Nuxt.js and previewing the default project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To serve different routes, in the background Nuxt.js uses Vue-router. To keep
    things simple, we'll focus on using Nuxt.js.
  prefs: []
  type: TYPE_NORMAL
- en: There are a few ways to get started with Nuxt.js. One option is via the `vue
    init` command. Another one is with a practice that is common, which is the `create-nuxt-app` command,
    similar to `create-elm-app` or `create-react-app`.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Nuxt.js with the vue init command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s begin by finding a location on our drive to save our new Nuxt app, and
    then use the `vue init` command to create it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Running this command without `vue init` being installed might return the following
    message in the console:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Hence, to rectify the issue, simply run this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'This will take some time, but ultimately we''ll end up being able to run the
    `**vue init**` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This time, running the preceding command will result in a few questions that
    we need to answer, so that the project can be configured to our liking. Similar
    to what we've seen with Vue-cli, to accept the defaults, we can simply press the
    *Enter* key.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is the output to the console with all of the questions and answers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s run these commands as described. We''ll `cd` into the `chapter8` folder,
    then run `npm install`. This will produce an output that includes some nice ASCII
    art of the Nuxt logo, a list of contributors and backers, and other project information.
    Now, we can run the `npm run dev` command, which will result in the following
    output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'If we visit the page at `localhost:3000`, we''ll be greeted with the standard
    welcome screen, with the Nuxt.js logo, under which there will be our project''s
    name (chapter8), and two buttons: links to the documentation and to the project''s
    GitHub repository.'
  prefs: []
  type: TYPE_NORMAL
- en: Debugging an eslint error
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At the time of writing of this book, even though all of the software was up
    to date, `eslint` was throwing an error. If, after running `npm run dev`, you
    would open `localhost:3000`, you might have seen the following error in the upper-left
    corner of the page that reads that the eslint module is undefined.
  prefs: []
  type: TYPE_NORMAL
- en: 'If this happens, you can fix it by opening the `nuxt.config.js` file inside
    your code editor and replacing all of the code after line 23 with this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, we've commented out the offending code and replaced it
    with the correct code, to be able to compare the differences and understand what
    needs fixing.
  prefs: []
  type: TYPE_NORMAL
- en: We can now rerun the `npm run dev` command and we should see the app without
    any errors, at `localhost:3000`.
  prefs: []
  type: TYPE_NORMAL
- en: Installing with create-nuxt-app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Alternatively, we can use the `create-nuxt-app` command. First, we''ll need
    to install it globally, so that we can use it anywhere on our computer:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'This command is the global install, and it might take some time. A successful
    installation will result in a few lines logged to console, namely the location
    on the local drive where `create-nuxt-app` has been installed, and some other
    information, similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, let''s point our console to the desired folder, and then run this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Similar to the first installation approach, this one will also produce a number
    of questions with preset answers that we can accept by simply pressing the *Enter*
    key. This is the list of questions with the default answers accepted:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Similar to the previous installation, we can see the instructions for running
    the boilerplate project, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: So, let's run `cd chapter8b` and follow it up with `npm run dev`. The output
    will be almost identical to the previous installation method.
  prefs: []
  type: TYPE_NORMAL
- en: Editing the index.vue file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s also edit our `index.vue` file, inside the `pages` folder. This is the
    root route of our app. The change we''ll make is minimal: we''ll delete all of
    the code inside the `<div class="links">` tag. After the update, that snippet
    of code should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Since webpack in the background is refreshing our page, we should see the result
    of this change in our browser, after we save our changes:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/509c45c9-eafa-49bb-adc6-18151a4313a8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'So far, we have seen how to initialize a new Vue Nuxt project in two different
    ways. In the next section, we''ll look at the Nuxt-flavored implementation of
    the `convention-over-configuration` approach: pages as routes.'
  prefs: []
  type: TYPE_NORMAL
- en: Nuxt pages as routes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *convention-over-configuration* approach was popularized by Ruby on Rails.
    It is an opinionated approach to web development that sets up some things in a
    framework in a set-and-forget manner. When we say that it is opinionated, it simply
    means that out of several possibilities to approach an issue, the developers of
    the framework chose one specific way of doing things, and that approach is the
    only way that something is done.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can say that Nuxt.js is opinionated because it follows the convention of
    pages as routes. Thus, instead of us having to manually set up routes in our apps—that
    is, rather than having to ***configure*** them—the framework follows a simple
    ***convention***. Inside the pages folder, the `index.vue` file acts as the root
    route: `/`. This means that if we run our app, visiting the root route at `localhost:3000` is
    equal to visiting `localhost:3000/index.vue`.'
  prefs: []
  type: TYPE_NORMAL
- en: Similarly, if we create a file called `about.vue` and place it inside the pages
    folder, to view this file we'd need to visit the `localhost:3000/about` route.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, let''s do just that. In our pages folder, we''ll make a new file and call
    it `contact.vue`. Inside that file, we''ll add the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: This is all that is needed for the `/contact` route to become available, which
    you can see for yourself by navigating to `localhost:3000/contact`. We can even
    make this file the default root route of the `contact` folder. In that case, we'd
    have to create a subfolder inside the `pages` folder, and give it the name of
    `contact`. Now, we could create an `index.vue` file inside the newly created `contact`
    folder, and the route will remain the same. Only our file and folder structure
    inside the `pages` folder has been slightly altered, but the end result is the
    same.
  prefs: []
  type: TYPE_NORMAL
- en: However, separating files like this into subfolders will make it easier to stay
    organized as you add more files.
  prefs: []
  type: TYPE_NORMAL
- en: Adding navigation to Nuxt apps via the components folder
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'At this point in our app development, it would be great to have the navigation
    in place. Navigation itself is not a page; it is a component that should exist
    in each page of our app. Therefore, let''s create it by opening the `components`
    folder and adding a new file, which we''ll call `Navigation.vue`. Let''s add this
    code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Note the `<nuxt-link>` tag. It is just a wrapper over the Vue-router implementation,
    and the `to="..."` attribute's value is where we specify the actual URL, which
    is just the name of our specific file inside the `pages` folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, let''s locate the `layouts` folder, and inside of it, in the `default.vue`
    file, let''s add the `Navigation` component inside the template, so that it looks
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Note that we can self-close components, so that instead of `<Navigation></Navigation>`,
    we could write the shorthand version, which is simply `<Navigation />`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to make sure to import the `Navigation` component by adding the `script`
    tag just under the `template` tag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'At this point, our homepage, with the navigation update, will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/becea943-004f-400d-aadf-bd52bdbea07e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now that we have our navigation in place, we''ll add another page, which we''ll
    call `News.vue`, with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: At this point, we have three links in our navigation, so now we can focus on
    adding some more content to each page.
  prefs: []
  type: TYPE_NORMAL
- en: Adding content to our Nuxt app's pages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s update the `News.vue` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'The news link will now look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/af719e3e-0cd8-476e-b961-e7a0e5eb12d0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, let''s update the `Contact.vue` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: We will not be altering the original homepage of our Nuxt.js project. The reason
    for limited changes is we only need to have a few pages with some dummy content,
    so that we can continue to the next section, where we'll see how to add page transitions
    to our Nuxt.js app.
  prefs: []
  type: TYPE_NORMAL
- en: Adding page transitions to our Nuxt.js app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we learned in [Chapter 6](d8b6e8d0-8fa0-4787-beba-e1961d4c6a07.xhtml), *Transitions
    and Animations*, Vue comes with a wide array of ways to add interactivity, transitions,
    and animations to our apps. To make this process faster, we will use animations
    from `Animate.css`, with some slight modifications.
  prefs: []
  type: TYPE_NORMAL
- en: In Nuxt, we can use page transition hooks just like we already learned. We'll
    simply replace the `v` letter inside the `.v-*` transition hooks with `.page-*`.
    All the functionality, and the way everything works, will stay the same.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s begin by opening the `pages/index.vue` file and adding this code at
    the top of its `style` tag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we''ll open the `contact.vue` file and add this code at the top of its
    `style` tag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we''ll update the top of the `style` tag of `news.vue` with this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Feel free to test out your app at this point and see how you achieved a significant
    visual improvement with only a few changes to the `style` tags in your route files.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we got acquainted with the basics of building a rudimentary
    Nuxt.js app. There are many ways in which this can be improved and built upon.
    To continue building better apps and learning more about running Vue apps on Node,
    feel free to refer to other titles in the Packt library, such as *Full Stack Web
    Development with Vue.js and Node*.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned about single-page applications, the ideas that led
    to their appearance, and the challenges that their implementation brings, such
    as issues with the initial page load. We also learned about solutions to SPA-related
    problems, such as server-side rendering, as well as how Nuxt.js helps us build
    universal web apps. We learned about installing Nuxt.js and setting up Nuxt.js
    pages as routes. We linked our Vue app's routing using the `nuxt-link` tag, and
    we added some content to each of the pages. Finally, to build up from what we
    learned in the previous chapters, we added some page transitions for a smoother
    user experience.
  prefs: []
  type: TYPE_NORMAL
- en: This brings us to the end of *Vue JS Quick Start*. We have gone through a whole
    array of basic Vue JS concepts. As a quick overview, we can reiterate some of
    the things we've covered: mustache templates, directives, modifiers, methods,
    computed properties, watchers, components (global and local), props, lifecycle
    hooks, vue-cli, slots, parent-child component communication, filters, mixins,
    custom directives and plugins, transitions, animations, transition components,
    integrating third-party animations, binding styles, working with transition groups
    and JavaScript animation hooks, SPAs, the concepts of state and store, one-way
    data flows, using Vuex, working with initial page load, Nuxt, SSR, and universal
    web apps.
  prefs: []
  type: TYPE_NORMAL
- en: In this short book, we have covered a lot of ground. We had to keep things basic
    in order to see the big picture of all the moving parts that comprise Vue JS.
    Where to go from here?
  prefs: []
  type: TYPE_NORMAL
- en: There are several ways in which you can build your Vue-related skills further.
    You could focus on understanding how to work with server-side technologies, such
    as Node, Laravel, or .NET Core. You could also work with VuePress—a way to built
    static JS-powered sites with Vue. Or you might want to check out *Vuex Quick Start
    Guide*.
  prefs: []
  type: TYPE_NORMAL
- en: To make it easier to continue improving your Vue.js skills, there are over two
    dozen titles in the Packt library at your disposal, including titles that deal
    with the topics listed in this summary.
  prefs: []
  type: TYPE_NORMAL
