- en: Using Nuxt.js and Vue-Router
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Nuxt.js和Vue-Router
- en: With the rise of **Single-Page Applications** (**SPAs**), a number of specific
    issues have occurred. There have been various attempts at solving these issues,
    and some common solutions arose from these attempts. In this section, we will
    look at issues surrounding SPAs and ways of addressing and solving these issues
    in Vue.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 随着**单页应用**（**SPA**）的兴起，出现了一些特定的问题。针对这些问题已经有了各种尝试，并且一些常见的解决方案也从这些尝试中出现。在本节中，我们将看看围绕SPA的问题以及在Vue中解决这些问题的方法。
- en: 'In this chapter, we will work with Nuxt.js and Vue-Router to understand a number
    of concepts:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们将使用Nuxt.js和Vue-Router来理解一些概念：
- en: Single-page applications
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单页应用
- en: Initial page load
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 初始页面加载
- en: Server-side rendering and universal web apps
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务器端渲染和通用Web应用
- en: Installing Nuxt.js
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装Nuxt.js
- en: Nuxt pages as routes
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Nuxt页面作为路由
- en: Linking pages with the `nuxt-link` tag
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`nuxt-link`标签链接页面
- en: We'll begin by understanding just what SPAs are and how they work.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先了解SPA是什么以及它们是如何工作的。
- en: Single-page applications and server-side rendering
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 单页应用和服务器端渲染
- en: Traditionally, web servers only serve static content. When a user makes a request
    to a link within an app, usually the server processes that request and sends the
    result of that processing to the client as an entire page, with HTML, CSS, and
    JS served by the browser. This happens when requesting each route in a web app.
    If a developer wants to see what was sent by the browser, it is as simple as running
    the `view source` command in your browser of choice.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 传统上，Web服务器只提供静态内容。当用户在应用中请求一个链接时，通常服务器会处理该请求并将处理结果作为整个页面发送给客户端，包括HTML、CSS和由浏览器提供的JS。这发生在请求Web应用中的每个路由时。如果开发人员想要查看浏览器发送的内容，只需在所选浏览器中运行`view
    source`命令即可。
- en: The shortcut key for the view source command is traditionally *Ctrl* + *U* in
    some browsers, such as Chrome and Firefox.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 查看源代码的快捷键在一些浏览器中传统上是*Ctrl* + *U*，比如Chrome和Firefox。
- en: With the push for the experience on the web to be more like what we have on
    desktops, we have seen the rise ofSPAs in recent years. Examples of popular SPAs
    include Gmail, Twitter, and Google Maps.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 随着网络体验向桌面端靠拢的推动，近年来我们看到了单页应用（SPA）的兴起。流行的SPA示例包括Gmail、Twitter和Google Maps。
- en: 'The way that an SPA works is this: when a user navigates through different
    pages (routes) on a site, the browser does not download a whole new page with
    a whole new request to the server. Rather than downloading full pages from a server
    each time a user visits a route, SPAs render everything on the client. Requests
    to the server are made only to get new data.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 单页应用的工作方式是这样的：当用户在网站上浏览不同的页面（路由）时，浏览器不会下载一个全新的页面，也不会向服务器发送一个全新的请求。与其每次用户访问一个路由时从服务器下载完整页面不同，SPA在客户端渲染所有内容。向服务器的请求仅用于获取新数据。
- en: 'A good test for deciding whether a web app can qualify as an SPA is this: does
    visiting a different route in the app cause the entire app to refresh? If it doesn''t,
    then it''s an SPA.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 判断一个Web应用是否可以被视为SPA的一个好方法是：在应用中访问不同的路由是否会导致整个应用刷新？如果不会，那么它就是一个SPA。
- en: An SPA requests new data from the server while traditional web apps download
    entire pages from the server.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: SPA从服务器请求新数据，而传统Web应用从服务器下载整个页面。
- en: This usually means that all of the SPA code will be downloaded in one page load—the
    **initial page load**. This includes HTML, CSS, and JS—all the code without which
    an SPA would not run. The downside of this approach is that the download time
    can be substantial when running on slower networks or due to the sheer size of
    an app, especially given the fact that a lot of these SPAs are full of JavaScript
    code.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这通常意味着所有的SPA代码将在一个页面加载中下载——**初始页面加载**。这包括HTML、CSS和JS——所有的代码，没有这些代码，SPA将无法运行。这种方法的缺点是，在较慢的网络上运行或者由于应用程序的体积过大时，下载时间可能会相当长，特别是考虑到许多这些SPA都充斥着JavaScript代码。
- en: However, as mentioned before, the goal of SPAs is to provide an excellent user
    experience, to behave like desktop apps, with instant execution and without latency.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如前所述，SPA的目标是提供出色的用户体验，表现得像桌面应用程序一样，具有即时执行和无延迟。
- en: A solution to this problem was the introduction of **server-side rendering**.
    Server-side rendering is simply the ability of a frontend framework to prepare
    the HTML, CSS, and JS on the server so that, when a user visits our SPA, instead
    of their browser having to download the full app in one go, it only downloads
    a portion of this code—a fragment of the full SPA—which, regardless, still allows
    the user to interact with the page. Through concepts such as code splitting and
    rehydration, an SPA seamlessly downloads only that part of the application that
    is needed to start using it, and only then downloads the rest of the SPA, while
    the user is already interacting with it. This approach reduces the latency of
    the initial load.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 解决这个问题的一个方法是引入**服务器端渲染**。服务器端渲染简单地说就是前端框架在服务器上准备HTML、CSS和JS的能力，因此当用户访问我们的SPA时，他们的浏览器不需要一次性下载整个应用程序，而只需下载部分代码——完整SPA的一部分——尽管如此，用户仍然可以与页面进行交互。通过代码分割和重新注水等概念，SPA无缝地只下载应用程序的那部分内容，以便开始使用它，然后再下载SPA的其余部分，而用户已经在与之交互。这种方法减少了初始加载的延迟。
- en: Another major issue of SPAs in the past was the problem of not being readable
    by search engine crawlers. Since these crawlers cannot run JavaScript when crawling
    an SPA website, the visiting search engine bot would not see that SPA's content.
    Hence, server-side rendering is an elegant approach to both speed up a web app
    for the user and make it more accessible for indexing by search engine bots.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 过去SPA的另一个主要问题是搜索引擎爬虫无法读取的问题。由于这些爬虫在爬取SPA网站时无法运行JavaScript，访问的搜索引擎爬虫将无法看到SPA的内容。因此，服务器端渲染是加快web应用程序速度并使其更易于被搜索引擎爬虫索引的一种优雅方法。
- en: When a web app can render web pages both on the server and on the client, it
    is referred to as a **universal web app**. A universal web app is basically an
    SPA that has SSR ability.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个web应用程序可以在服务器和客户端上渲染网页时，它被称为**通用web应用程序**。通用web应用程序基本上是具有SSR能力的SPA。
- en: Many modern frontend frameworks have their own SSR implementations. In Vue,
    this is what we call Nuxt.js.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 许多现代前端框架都有自己的SSR实现。在Vue中，这就是我们所说的Nuxt.js。
- en: Installing Nuxt.js and previewing the default project
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装Nuxt.js并预览默认项目
- en: To serve different routes, in the background Nuxt.js uses Vue-router. To keep
    things simple, we'll focus on using Nuxt.js.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 为了提供不同的路由，Nuxt.js在后台使用Vue-router。为了保持简单，我们将专注于使用Nuxt.js。
- en: There are a few ways to get started with Nuxt.js. One option is via the `vue
    init` command. Another one is with a practice that is common, which is the `create-nuxt-app` command,
    similar to `create-elm-app` or `create-react-app`.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种方法可以开始使用Nuxt.js。一种选择是通过`vue init`命令。另一种是使用一种常见的实践，即`create-nuxt-app`命令，类似于`create-elm-app`或`create-react-app`。
- en: Installing Nuxt.js with the vue init command
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用vue init命令安装Nuxt.js
- en: 'Let''s begin by finding a location on our drive to save our new Nuxt app, and
    then use the `vue init` command to create it:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Running this command without `vue init` being installed might return the following
    message in the console:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Hence, to rectify the issue, simply run this:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This will take some time, but ultimately we''ll end up being able to run the
    `**vue init**` command:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This time, running the preceding command will result in a few questions that
    we need to answer, so that the project can be configured to our liking. Similar
    to what we've seen with Vue-cli, to accept the defaults, we can simply press the
    *Enter* key.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: 'This is the output to the console with all of the questions and answers:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Let''s run these commands as described. We''ll `cd` into the `chapter8` folder,
    then run `npm install`. This will produce an output that includes some nice ASCII
    art of the Nuxt logo, a list of contributors and backers, and other project information.
    Now, we can run the `npm run dev` command, which will result in the following
    output:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'If we visit the page at `localhost:3000`, we''ll be greeted with the standard
    welcome screen, with the Nuxt.js logo, under which there will be our project''s
    name (chapter8), and two buttons: links to the documentation and to the project''s
    GitHub repository.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: Debugging an eslint error
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At the time of writing of this book, even though all of the software was up
    to date, `eslint` was throwing an error. If, after running `npm run dev`, you
    would open `localhost:3000`, you might have seen the following error in the upper-left
    corner of the page that reads that the eslint module is undefined.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: 'If this happens, you can fix it by opening the `nuxt.config.js` file inside
    your code editor and replacing all of the code after line 23 with this:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In the preceding code, we've commented out the offending code and replaced it
    with the correct code, to be able to compare the differences and understand what
    needs fixing.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: We can now rerun the `npm run dev` command and we should see the app without
    any errors, at `localhost:3000`.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: Installing with create-nuxt-app
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Alternatively, we can use the `create-nuxt-app` command. First, we''ll need
    to install it globally, so that we can use it anywhere on our computer:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'This command is the global install, and it might take some time. A successful
    installation will result in a few lines logged to console, namely the location
    on the local drive where `create-nuxt-app` has been installed, and some other
    information, similar to this:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Next, let''s point our console to the desired folder, and then run this command:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Similar to the first installation approach, this one will also produce a number
    of questions with preset answers that we can accept by simply pressing the *Enter*
    key. This is the list of questions with the default answers accepted:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Similar to the previous installation, we can see the instructions for running
    the boilerplate project, as follows:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: So, let's run `cd chapter8b` and follow it up with `npm run dev`. The output
    will be almost identical to the previous installation method.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: Editing the index.vue file
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s also edit our `index.vue` file, inside the `pages` folder. This is the
    root route of our app. The change we''ll make is minimal: we''ll delete all of
    the code inside the `<div class="links">` tag. After the update, that snippet
    of code should look like this:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Since webpack in the background is refreshing our page, we should see the result
    of this change in our browser, after we save our changes:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/509c45c9-eafa-49bb-adc6-18151a4313a8.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
- en: 'So far, we have seen how to initialize a new Vue Nuxt project in two different
    ways. In the next section, we''ll look at the Nuxt-flavored implementation of
    the `convention-over-configuration` approach: pages as routes.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: Nuxt pages as routes
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *convention-over-configuration* approach was popularized by Ruby on Rails.
    It is an opinionated approach to web development that sets up some things in a
    framework in a set-and-forget manner. When we say that it is opinionated, it simply
    means that out of several possibilities to approach an issue, the developers of
    the framework chose one specific way of doing things, and that approach is the
    only way that something is done.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: 'We can say that Nuxt.js is opinionated because it follows the convention of
    pages as routes. Thus, instead of us having to manually set up routes in our apps—that
    is, rather than having to ***configure*** them—the framework follows a simple
    ***convention***. Inside the pages folder, the `index.vue` file acts as the root
    route: `/`. This means that if we run our app, visiting the root route at `localhost:3000` is
    equal to visiting `localhost:3000/index.vue`.'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: Similarly, if we create a file called `about.vue` and place it inside the pages
    folder, to view this file we'd need to visit the `localhost:3000/about` route.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: 'So, let''s do just that. In our pages folder, we''ll make a new file and call
    it `contact.vue`. Inside that file, we''ll add the following code:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This is all that is needed for the `/contact` route to become available, which
    you can see for yourself by navigating to `localhost:3000/contact`. We can even
    make this file the default root route of the `contact` folder. In that case, we'd
    have to create a subfolder inside the `pages` folder, and give it the name of
    `contact`. Now, we could create an `index.vue` file inside the newly created `contact`
    folder, and the route will remain the same. Only our file and folder structure
    inside the `pages` folder has been slightly altered, but the end result is the
    same.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: However, separating files like this into subfolders will make it easier to stay
    organized as you add more files.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: Adding navigation to Nuxt apps via the components folder
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'At this point in our app development, it would be great to have the navigation
    in place. Navigation itself is not a page; it is a component that should exist
    in each page of our app. Therefore, let''s create it by opening the `components`
    folder and adding a new file, which we''ll call `Navigation.vue`. Let''s add this
    code to it:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Note the `<nuxt-link>` tag. It is just a wrapper over the Vue-router implementation,
    and the `to="..."` attribute's value is where we specify the actual URL, which
    is just the name of our specific file inside the `pages` folder.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, let''s locate the `layouts` folder, and inside of it, in the `default.vue`
    file, let''s add the `Navigation` component inside the template, so that it looks
    like this:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Note that we can self-close components, so that instead of `<Navigation></Navigation>`,
    we could write the shorthand version, which is simply `<Navigation />`.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to make sure to import the `Navigation` component by adding the `script`
    tag just under the `template` tag:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'At this point, our homepage, with the navigation update, will look like this:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/becea943-004f-400d-aadf-bd52bdbea07e.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
- en: 'Now that we have our navigation in place, we''ll add another page, which we''ll
    call `News.vue`, with the following code:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: At this point, we have three links in our navigation, so now we can focus on
    adding some more content to each page.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: Adding content to our Nuxt app's pages
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s update the `News.vue` component:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The news link will now look like this:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/af719e3e-0cd8-476e-b961-e7a0e5eb12d0.png)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
- en: 'Next, let''s update the `Contact.vue` component:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: We will not be altering the original homepage of our Nuxt.js project. The reason
    for limited changes is we only need to have a few pages with some dummy content,
    so that we can continue to the next section, where we'll see how to add page transitions
    to our Nuxt.js app.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: Adding page transitions to our Nuxt.js app
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we learned in [Chapter 6](d8b6e8d0-8fa0-4787-beba-e1961d4c6a07.xhtml), *Transitions
    and Animations*, Vue comes with a wide array of ways to add interactivity, transitions,
    and animations to our apps. To make this process faster, we will use animations
    from `Animate.css`, with some slight modifications.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: In Nuxt, we can use page transition hooks just like we already learned. We'll
    simply replace the `v` letter inside the `.v-*` transition hooks with `.page-*`.
    All the functionality, and the way everything works, will stay the same.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s begin by opening the `pages/index.vue` file and adding this code at
    the top of its `style` tag:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Next, we''ll open the `contact.vue` file and add this code at the top of its
    `style` tag:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Finally, we''ll update the top of the `style` tag of `news.vue` with this code:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Feel free to test out your app at this point and see how you achieved a significant
    visual improvement with only a few changes to the `style` tags in your route files.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we got acquainted with the basics of building a rudimentary
    Nuxt.js app. There are many ways in which this can be improved and built upon.
    To continue building better apps and learning more about running Vue apps on Node,
    feel free to refer to other titles in the Packt library, such as *Full Stack Web
    Development with Vue.js and Node*.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned about single-page applications, the ideas that led
    to their appearance, and the challenges that their implementation brings, such
    as issues with the initial page load. We also learned about solutions to SPA-related
    problems, such as server-side rendering, as well as how Nuxt.js helps us build
    universal web apps. We learned about installing Nuxt.js and setting up Nuxt.js
    pages as routes. We linked our Vue app's routing using the `nuxt-link` tag, and
    we added some content to each of the pages. Finally, to build up from what we
    learned in the previous chapters, we added some page transitions for a smoother
    user experience.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: This brings us to the end of *Vue JS Quick Start*. We have gone through a whole
    array of basic Vue JS concepts. As a quick overview, we can reiterate some of
    the things we've covered: mustache templates, directives, modifiers, methods,
    computed properties, watchers, components (global and local), props, lifecycle
    hooks, vue-cli, slots, parent-child component communication, filters, mixins,
    custom directives and plugins, transitions, animations, transition components,
    integrating third-party animations, binding styles, working with transition groups
    and JavaScript animation hooks, SPAs, the concepts of state and store, one-way
    data flows, using Vuex, working with initial page load, Nuxt, SSR, and universal
    web apps.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: In this short book, we have covered a lot of ground. We had to keep things basic
    in order to see the big picture of all the moving parts that comprise Vue JS.
    Where to go from here?
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: There are several ways in which you can build your Vue-related skills further.
    You could focus on understanding how to work with server-side technologies, such
    as Node, Laravel, or .NET Core. You could also work with VuePress—a way to built
    static JS-powered sites with Vue. Or you might want to check out *Vuex Quick Start
    Guide*.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: To make it easier to continue improving your Vue.js skills, there are over two
    dozen titles in the Packt library at your disposal, including titles that deal
    with the topics listed in this summary.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
