- en: Preface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Cloud computing and microservices are two very important concepts in modern
    software architecture. They represent key skills that ambitious software engineers
    need to acquire in order to design and build software applications capable of
    performing and scaling. Go is a modern cross-platform programming language that
    is very powerful yet simple; it is an excellent choice for microservices and cloud
    applications. Go is gaining increasing popularity and becoming a very attractive
    skill.
  prefs: []
  type: TYPE_NORMAL
- en: The book will take you on a journey into the world of microservices and cloud
    computing with the help of Go. It will start by covering the software architectural
    patterns of cloud applications as well as practical concepts regarding how to
    scale, distribute, and deploy those applications. From there, the book will dive
    deep into the techniques and design approaches that are needed for writing production-level
    microservices and their deployment into typical cloud environments.
  prefs: []
  type: TYPE_NORMAL
- en: After completing this book, you will have learned how to write effective production-grade
    microservices that are deployable to the cloud, practically understand the world
    of Amazon Web Services, and know how to build non-trivial Go applications.
  prefs: []
  type: TYPE_NORMAL
- en: What this book covers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Chapter 1](def2621c-74c4-4f60-a37a-b0b2f86c6339.xhtml), *Modern Microservice
    Architectures*, opens the book by describing typical features of cloud-based applications
    and microservice architectures. We will also establish requirements and a high-level
    architecture for a fictional application that will serve as a continuous example
    over the following chapters of this book.'
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 2, *Building Microservices Using REST APIs*, discusses how to build
    modern microservices with the Go language. We will cover important and non-trivial
    topics. By the end of this chapter, you will have enough knowledge to build microservices
    that can expose RESTFul APIs, support persistence, and can effectively communicate
    with other services.
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 3, *Securing Microservices*, shows you how to secure your microservices.
    You will get to learn about how to handle certificates and HTTPS in the Go language.
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 4](34c20397-6b29-4142-a491-73f710111135.xhtml), *Asynchronous Microservice
    Architectures*, presents how to implement an asynchronous microservice architecture
    using message queues. For this, we will give an overview on established message
    queuing software, such as RabbitMQ and Apache Kafka, and present Go libraries
    to integrate these components into your software. We will also discuss architectural
    patterns such as Event Collaboration and Event Sourcing that work well together
    with asynchronous architectures.'
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 5, *Building a Frontend with React*, takes a small detour from the Go
    world into the JavaScript world and shows you how to build a web frontend for
    the microservice-based project using the React framework. For this, we will give
    a short overview over the basic architectural principles of React and how to build
    a React-based frontend for existing REST APIs.
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 6, *Deploying Your Application in Containers*, shows how to deploy Go
    applications in a portable and reproducible way using application containers.
    You will learn to install and using Docker and how to build custom Docker images
    for your own Go applications. Furthermore, we will describe how to use the Kubernetes
    orchestration engine to deploy containerized applications in large-scale cloud
    environments.
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 7, *AWS – Fundamentals, AWS SDK for Go and AWS EC2*, is the first of
    two chapters to cover  the AWS ecosystem. In this chapter, we will cover AWS in
    practical details. You will get exposed to several important concepts like how
    to setup AWS server instances , how to utilize the AWS API features, and how to
    write Go applications that are capable of interacting with AWS.
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 8, *AWS – S3, SQS, API Gateway, and DynamoDB*, continues to cover the
    AWS ecosystem in more detail. You will dive deeper into popular services in the
    AWS world. By the end of this chapter, you will have enough knowledge to build
    non-trivial Go cloud applications using the powers of Amazon Web Services.
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 9, *Continuous Delivery*, describes how to implement a basic Continuous
    Delivery pipeline for your Go applications. For this, we will describe the basic
    principles of CD and how to implement a simple pipeline using tools such as Travis
    CI and Gitlab. We will use Docker images as deployment artifacts and deploy these
    images into a Kubernetes cluster, thus building on the topics and skills covered
    in [Chapter 4](0a806398-0654-46f9-8e6f-02af9334821b.xhtml), *Asynchronous Microservice
    Architectures*.
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 10, *Monitoring Your Application*, shows you how to monitor your microservice
    architecture using Prometheus and Grafana. We will cover the basic architecture
    of Prometheus and describe how to set up a Prometheus instance using Docker. Also,
    you will learn how to adjust your Go applications to expose metrics that can be
    scraped by Prometheus. We will also describe how to set up a graphical user interface
    for Prometheus using Grafana.
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 11](1b9e8bd9-c7a6-46ce-87f7-d45631865e07.xhtml), *Migration*, covers
    practical factors and approaches to consider when migrating from legacy monolithic
    applications into modern microservices cloud-ready applications.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 12](b01fc8b9-53af-4704-932d-d96481ce1f9d.xhtml), *Where to Go from
    Here?*, shows you where to continue the learning journey from here. It will cover
    other modern cloud-related technologies that deserve to be explored, such as alternative
    communication protocols, other cloud providers, and new architectural paradigms
    that might be the next big thing.'
  prefs: []
  type: TYPE_NORMAL
- en: What you need for this book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this book, you should have some basic knowledge of the Go programming language
    (if you're still looking to get started with Go, we can recommend the book *Learning
    Go Programming* by Vladimir Vivien, also published by Packt). To run the code
    examples provided in this book, you will also need a working Go SDK on your local
    machine (Go 1.7 or newer). Head to [https://golang.org/dl/](https://golang.org/dl/)
    for download and installation instructions.
  prefs: []
  type: TYPE_NORMAL
- en: For many of the practical examples in the book, you will need a working Docker
    installation (although previous experience in working with Docker is not required).
    Take a look at [https://www.docker.com/community-edition](https://www.docker.com/community-edition)
    for download and installation instructions.
  prefs: []
  type: TYPE_NORMAL
- en: For working with React in [Chapter 5](82bdbb64-f1d4-42fb-9532-ecd5feca2ba7.xhtml),
    *Building a Frontend With React*, you will also need some basic knowledge in JavaScript
    programming and a working Node.JS installation on your local machine. You can
    download the current release of Node.JS from [https://nodejs.org/en/#download](https://nodejs.org/en/#download).
  prefs: []
  type: TYPE_NORMAL
- en: Who this book is for
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book is targeted at Go developers who want to build secure, resilient,
    robust, and scalable applications that are cloud native. Some knowledge of web
    services and web programming should be sufficient to get you through the book.
  prefs: []
  type: TYPE_NORMAL
- en: Conventions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this book, you will find a number of text styles that distinguish between
    different kinds of information. Here are some examples of these styles and an
    explanation of their meaning.
  prefs: []
  type: TYPE_NORMAL
- en: 'Code words in text, database table names, folder names, filenames, file extensions,
    pathnames, dummy URLs, user input, and Twitter handles are shown as follows: "The `react-router-dom` package
    adds a few new components to our application."'
  prefs: []
  type: TYPE_NORMAL
- en: 'A block of code is set as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Any command-line input or output is written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '**New terms** and **important words** are shown in bold. Words that you see
    on the screen, for example, in menus or dialog boxes, appear in the text like
    this: "For this, click on the Create Repository after logging in and choose a
    new name for your image."'
  prefs: []
  type: TYPE_NORMAL
- en: Warnings or important notes appear in a box like this.
  prefs: []
  type: TYPE_NORMAL
- en: Tips and tricks appear like this.
  prefs: []
  type: TYPE_NORMAL
