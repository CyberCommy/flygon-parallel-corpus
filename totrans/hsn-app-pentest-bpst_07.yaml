- en: Detecting Vulnerabilities Using Burp Suite
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we saw in the previous chapter, Burp Suite is useful for identifying different
    kinds of vulnerabilities. In the previous chapter, the majority of them were input
    validation errors that were detected using the Intruder tool. In this chapter,
    we will check errors that are not related to input validation weaknesses.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the following topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Detecting CSRF
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Detecting insecure direct object references
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Detecting security misconfigurations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Detecting insecure deserialization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Detecting OAuth-related issues
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Detecting broken authentication
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Detecting CSRF
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Cross-Site Request Forgery** (**CSRF**) is a vulnerability that allows a
    malicious user to make actions in an application, using the information stored
    in other applications. For example, imagine the scenario where you are logged
    in to different applications using just one network, which is a social network.
    If you send a request to the other sites, they will apply changes or actions,
    because they are using the information you have provided to the **central** application.'
  prefs: []
  type: TYPE_NORMAL
- en: 'So, a malicious user can exploit an application by creating a fake form or
    fake URL to perform an action in that application. This forces the user to execute
    the application without his knowledge. For example, look at this HTML code, which
    has a hidden link into an `<img>` tag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: In the beginning, you feel it's nothing different, it is just an inoffensive
    HTML tag. But when it is parsed, the browser gets the resource pointed by the
    tag and executes the URL. So, if a malicious user hides a URL that contains an
    action in this tag, such as change the password, the action will be made.
  prefs: []
  type: TYPE_NORMAL
- en: Detecting CSRF using Burp Suite
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first thing you need to do in order to detect CSRF vulnerabilities is to
    map all the possible authorized actions that you can. This is because you need
    to test each action to discover if it is possible to execute any of them using
    the information stored. To map all these actions, you can use the Target tool.
  prefs: []
  type: TYPE_NORMAL
- en: Burp Suite uses different types of methods to map an application. Manually,
    Burp Suite can collect all the requests, resources, and URLs in a passive way;
    but of course, it is limited just to the user's scope. Burp Suite also can make
    an automatic map using spidering and crawling techniques.
  prefs: []
  type: TYPE_NORMAL
- en: In the following screenshot, you can see how Burp Suite is creating an application's
    tree with all the actions. ...
  prefs: []
  type: TYPE_NORMAL
- en: Steps for detecting CSRF using Burp Suite
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Of course, the Burp Suite scanner is able to detect CSRF flaws, but potentially
    using the parameter's information to call a function. To detect in a most assured
    way, we are going to use the Proxy tool and an extension called CSRF scanner.
  prefs: []
  type: TYPE_NORMAL
- en: 'To install the CSRF scanner, go to the Extender tab in Burp Suite, and look
    at the BApp Store for the CSRF Scanner and click on Install, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0b79a3e5-7b21-48a4-a7da-25bd2df02bf6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After the installation, a new tab will appear in Burp Suite, showing the tool,
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/cddd307e-e9a3-4424-930d-55ad0405ae6f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To detect a CSRF, enter the application that we think is vulnerable, and intercept
    a request using the Intercept is on button. Remember that, for all CSRF vulnerabilities,
    you need to be logged in, or have a session established. Right-click on Engagement
    tools and then Generate CSRF PoC. A new window will be opened with the HTML form
    generated, using the data exposed in the request, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a6fedb68-735c-4f5f-b024-cacad08bf1e0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Verify that all the parameters are included in the form, and then copy it into
    Notepad or another text editor, and save it as an HTML file. Then open it in a
    web browser. You will just see a blank website with one single button, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/039f1c94-3055-475f-95a3-1871b0a5f630.png)'
  prefs: []
  type: TYPE_IMG
- en: Click on Submit request and the form will be sent to the website. As this is
    a **Proof of Concept** (**PoC**), the page is intentionally blank, but if you
    need to create a more realistic page, you just need to add the form into the page.
    If the actions are executed, the URL is susceptible to CSRF.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The last tip, if you see that the application is using an anti-CSRF token, try
    to detect the vulnerability, because sometimes developers forget to use the token
    for all the functions, and it is possible to find someone that is vulnerable.
  prefs: []
  type: TYPE_NORMAL
- en: Detecting Insecure Direct Object References
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An **Insecure Direct Object Reference** (**IDOR**) vulnerability appears when
    a parameter gains access to a certain resource. By modifying this parameter, it
    is possible to access other resources that are not authorized for this user. Usually
    the affected parameters are used as control for the application's flow, for example,
    the named `id`, `uid`, `r`, `url`, `ur`, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'These kinds of vulnerabilities could be detected using the `Target` tool in
    Burp Suite. Similar to the CSRF detection, the more URLs you detect, the more
    possibilities there are to find vulnerabilities:'
  prefs: []
  type: TYPE_NORMAL
- en: To add a target to the scope, go to Burp Suite, and using the secondary button
    of the mouse, click on Add to the scope option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then go to the ...
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Detecting security misconfigurations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Security misconfigurations are relative. In this category, a lot of possible
    errors are introduced, and the most simple and accurate way to detect them using
    Burp Suite is through the scanner.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open Burp Suite and when the main Dashboard is displayed, click on New scan. Here
    it is possible to define the URL to scan, and some options, like credentials to
    log in to the application, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/6365a938-bd69-4cfb-8fa3-7d62e13b95ee.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The tests are classified by categories. When the scan finishes, we can see
    that some issues are detected that are related to security misconfiguration, as
    shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/16543d8a-093a-472e-925d-1fd949202244.png)'
  prefs: []
  type: TYPE_IMG
- en: As we can see, there are issues like Unencrypted communications or Clear submission
    password that we could not detect by analyzing the request, but the scanner marks
    an issue.
  prefs: []
  type: TYPE_NORMAL
- en: Let's review some common security misconfigurations, which we will look into
    in detail in the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: Unencrypted communications and clear text protocols
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There is a common issue that, in the most part, the developers and system administrators
    do not take into account; it is the use of unprotected communications channels.
    There are protocols that send information in clear text and, if a malicious user
    intercepts the traffic in the network, which is relatively easy, you can see all
    the information, irrespective of whether it's sensitive or not. This issue is
    commonly discarded, because the web applications are public; but remember that
    some of them are internal, and also could be visited from a public network.
  prefs: []
  type: TYPE_NORMAL
- en: Default credentials
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Another important issue that could be used to get full control of the server
    that is hosting the application is the default credentials. There are many web
    servers, mail servers, database servers, CMSs, eCommerce tools, and so on that,
    when installed, have established a default password. It is so easy for a malicious
    user to get access to these services and applications.
  prefs: []
  type: TYPE_NORMAL
- en: Unattended installations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sometimes when a system administrator installs software, this software comes
    with other packages, for testing purposes or just as part of the main software.
    It is important to have an inventory of these installations in order to disallow
    access or delete, if it is possible. A malicious user can discover these unattended
    installations and exploit vulnerabilities on them.
  prefs: []
  type: TYPE_NORMAL
- en: Testing information
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Some applications and packages have testing information that could provide access
    to a malicious user if it is active. For example, a common case is Oracle DBMS,
    which has a database with tables for testing purposes with a database administrator
    called `tiger`, for which the password is `scott`.
  prefs: []
  type: TYPE_NORMAL
- en: Default pages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Applications, mostly web servers, have default pages that could be detected
    by the malicious user and taken as banner grabbing.
  prefs: []
  type: TYPE_NORMAL
- en: Despite the Burp Suite scanner being useful in detecting this kind of issue,
    I recommend the use of a vulnerability scanner focused on infrastructure, for
    example Nessus, Qualys, Outpost24, OpenVAS, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Detecting insecure deserialization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Deserialization** is the process of passing some type of data to other data,
    to be managed by the application, for example, passing a JSON format request that
    is parsed and managed as XML by the application. Also, there are deserialization
    vulnerabilities where the technology used in the development is involved. These
    vulnerabilities pass resources of a certain type to binary objects.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To understand the vulnerability, review the next snippet of code, published
    in the CVE.2011-2092:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'This code is the class definition of a data type called **JFrame**. In the
    next snippet of code, we can see how it is used:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The issue is that any kind of data can be entered into the attributes, as there
    is no validation for them, as seen in the following lines of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The vulnerability derives in a denial of services, due to which the application
    is unable to manage the inputs. This is an insecure deserialization vulnerability.
  prefs: []
  type: TYPE_NORMAL
- en: Java Deserialization Scanner
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Java Deserialization Scanner is a Burp Suite extension to detect issues in
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Apache common collections 3 and 4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Java 6, 7, and 8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hibernate
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JSON
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rome
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: BeanUtils
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To get it, go to the `Extender` tool, and click on BApp Store, and then install
    the package. After the installation finishes, Burp Suite will have a new tab in
    the interface that will show the tool as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2d7c668b-0b42-4198-81a7-764164a9b945.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on the Configuration tab, and in the following we can see the scans that
    are activated in the plugin:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/21233bba-91ba-4033-86c3-f7f7bb722b23.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, to test an ...
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Detecting OAuth-related issues
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: OAuth is an open standard that allows authorization in applications by sharing
    the authorization information between different applications without sharing the
    user's identify. This is the current standard used by Facebook, Google, Twitter,
    Plurk, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'The most commons issues related to OAuth are the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Insecure storage secrets**: OAuth is information that is stored on the client
    side. If the application does not store the OAuth information in the correct way,
    it exposes access to more than one application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Lack of confidentiality**: OAuth is a protocol that shares the authentication
    information with more than one application, but, what happens if it is shared
    with the wrong application? Well, it could be reused by other applications to
    steal the user''s access.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**URL redirection**: If an application has a vulnerability that allows redirects,
    the malicious user can steal the OAuth information.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Detecting SSO protocols
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There is an extension named **EsPReSSO** that isavailable in the BApp Store
    that detects the SSO protocol used by an application and classified. The protocols
    detected are the following:'
  prefs: []
  type: TYPE_NORMAL
- en: OpenID
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: BrowserID
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SAML
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OAuth
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OpenID-Connect
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Facebook Connect
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Microsoft Account
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'After EsPReSSO is installed and when Burp Suite detects the use of an SSO protocol, it
    will be marked, and you can click on it to send it to the EsPReSSO tool to analyze
    what kind of protocol it is, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f4e7c533-8cf6-480a-a260-4ef555e05bea.png)'
  prefs: []
  type: TYPE_IMG
- en: Detecting OAuth issues using Burp Suite
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The issues related to OAuth are so different, and we will analyze some of them
    in the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: Redirections
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Open Burp Suite and, using the Proxy tool, detect the possible redirection
    in an application. For example, imagine you have an application that is possible
    to access using a social network. This application has the following URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Intercept the request, and modify the URL in the header to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The social network just verifies the string [site.tv](http://site.tv), and trusts
    the application. This is a vulnerability.
  prefs: []
  type: TYPE_NORMAL
- en: Insecure storage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Burp Suite can detect if sensitive information is sent by an untrusted channel;
    if an OAuth token is sent by a clear text protocol or unencrypted channel, it
    could be intercepted and reused.
  prefs: []
  type: TYPE_NORMAL
- en: OAuth issues are very specific, but, taking into consideration the preceding
    mentioned issues, it is possible to detect the weaknesses.
  prefs: []
  type: TYPE_NORMAL
- en: Detecting broken authentication
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A broken authentication is a group of issues that affect applications. Some
    of them are listed here:'
  prefs: []
  type: TYPE_NORMAL
- en: Weak storage for credentials
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Predictable login credentials
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Session IDs exposed in the URL
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Session IDs susceptible to session fixations attacks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Wrong time out implementation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The session is not destructed after the logout
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sensitive information sent by unprotected channels
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We are going to explain how to detect these issues using Burp Suite.
  prefs: []
  type: TYPE_NORMAL
- en: Detecting weak storage for credentials
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The information about authentication has a big problem; it is not just stored
    on the server side, it also needs to be stored on the client side, maybe not in
    the form of user and password, but in tokens, sessions IDs, or other things that
    the application uses to track the user and provide access.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using Burp Suite, it is possible to analyze where this information is stored.
    For example, it is very common to store the information in cookies, as shown in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/503cde25-98b5-459b-8f07-2b5f1be6b455.png)'
  prefs: []
  type: TYPE_IMG
- en: This is an example of basic authentication, which is a common authentication
    method for internal applications. This method has the big problem that it stores
    the credentials in base64 form into the header, so any person who has access to
    the header can get the password, and just decode it to plain text.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is not the only issue; there are applications that store the credentials
    directly. For example, look at the following request:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Here we can see the credentials directly that are sent to the application in
    each request made by the client side.
  prefs: []
  type: TYPE_NORMAL
- en: There are other secure places to save credentials. For example, in the case
    of mobile applications, it is common to use files in the internal or external
    device storage that are read by the application.
  prefs: []
  type: TYPE_NORMAL
- en: The trick is to understand the flow in the application using the Proxy tool
    to determine how the application receives the credentials and what the tool is
    doing with them, which is the method used, where they are stored, if they are
    reused, and what kind of token or track ID is used for the user.
  prefs: []
  type: TYPE_NORMAL
- en: Detecting predictable login credentials
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Some applications use predictable logins, meaning that it is possible for a
    malicious user to guess the next or the previous username registered. For example,
    imagine that an online bank uses the account number as the username for its application;
    a malicious user can create a list of possible account numbers, that are mostly
    sequential to guess the username.
  prefs: []
  type: TYPE_NORMAL
- en: 'A great tool to detect this kind of vulnerability is Intruder, which is in
    the Payloads section and has an option to create a sequential list, as shown in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0e8b3dd1-20ae-4574-8984-90e581bf863c.png)'
  prefs: []
  type: TYPE_IMG
- en: Also, it is possible to create sequential dates, and there is even ...
  prefs: []
  type: TYPE_NORMAL
- en: Session IDs exposed in the URL
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This is not a very common issue, but in the past, there were a lot of applications
    adding session IDs in URLs. For example, look at the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/afa87037-4e4c-405f-9840-1370a6355476.png)'
  prefs: []
  type: TYPE_IMG
- en: Once you have detected the variable used to store the session ID, you can apply
    a filter to detect all the sessions in the URLs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Look at the next screenshot. Here a token is detected by the scanner, and Burp
    Suite lists all the exposed tokens:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b17f74d6-b334-43ed-ab75-df83142cff0c.png)'
  prefs: []
  type: TYPE_IMG
- en: Session IDs susceptible to session fixation attacks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The main problem when an application uses just one ID to track the session
    is that this ID can be used to steal the session. For example, if you use the
    Burp Suite Proxy tool, you can intercept the request where the session ID is sent.
    This session ID is created just for one user. For example, see the following request:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Now, using another ...
  prefs: []
  type: TYPE_NORMAL
- en: Time out implementation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To detect this issue, you don't require the use of a tool like Burp Suite; just
    open the application, log in, and wait to know what time is needed to close the
    session automatically. Applications like online banks need to close the session
    in a determinate time by compliance.
  prefs: []
  type: TYPE_NORMAL
- en: Closing the sessions after some time is a good idea; in a case where a user
    has stolen a session, it could reduce the impact on the application.
  prefs: []
  type: TYPE_NORMAL
- en: Session is not destructed after logout
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To check if an application correctly closes the session, open the application
    using Burp Suite and then log in to the application with valid credentials:'
  prefs: []
  type: TYPE_NORMAL
- en: 'As you can see from the following screenshot, the application created a session
    that is used as a guest user:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2b5aa0f0-bfc8-4843-9f4d-844b82f3cdbb.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, access the application, and you will see that the application now creates
    a new session as a logged user.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Close the session, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/24ecc360-64b8-4de6-8a47-12e04fd2ca74.png)'
  prefs: []
  type: TYPE_IMG
- en: If the application correctly destroyed the session, it is not possible to resend
    a request. Go to ...
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we reviewed how to detect specific vulnerabilities. While in
    the previous chapter, the vulnerabilities explained were detected by detecting
    patterns, in this case, the vulnerabilities needed more understanding about the
    application's flow.
  prefs: []
  type: TYPE_NORMAL
- en: The flaws explained in this chapter could be used to gain access to sensitive
    information, break authorization and authentication, and be part of a bigger compromise.
    In the next chapter, we will be exploiting different kinds of vulnerabilities
    using Burp tools and extensions.
  prefs: []
  type: TYPE_NORMAL
