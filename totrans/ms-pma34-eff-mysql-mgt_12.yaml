- en: Chapter 12. Generating Multi-table Queries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The **Search** pages in the `Database` or `Table` view are intended for single-table
    lookups. This chapter covers the multi-table **Query by example (QBE)** feature
    available in the `Database` view.
  prefs: []
  type: TYPE_NORMAL
- en: Many phpMyAdmin users work in the `Table` view, table by table, and thus tend
    to overlook the multi-table query generator, which is a wonderful feature for
    fine-tuning queries. The query generator is useful not only in multi-table situations
    but also in single-table situations. It enables us to specify multiple criteria
    for a column, a feature that the **Search** page in the `Table` view does not
    possess.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The examples in this chapter assume that a multi-user installation of the phpMyAdmin
    configuration storage has been made (refer to [Chapter 1)](ch01.html "Chapter 1. Getting
    Started with phpMyAdmin"), and that the `book-copy` table created during an exercise
    of [Chapter 9](ch09.html "Chapter 9. Performing Table and Database Operations")
    is still there in the `marc_book` database.
  prefs: []
  type: TYPE_NORMAL
- en: To open the page for this feature, we go to the `Database` view for a specific
    database (the query generator supports working on only one database at a time)
    and click on **Query**.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the initial QBE page. It contains the following
    elements:'
  prefs: []
  type: TYPE_NORMAL
- en: A **visual builder** link (covered at the end of this chapter)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Criteria columns
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An interface to add criteria rows
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An interface to add criteria columns
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A table selector
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The query area
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Buttons to update or to execute the query
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Generating Multi-table Queries](img/7782_12_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Choosing tables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The initial selection includes all tables. Consequently, the **Column** selector
    contains a great number of columns. For our example, we will work only with the
    **author** and the **book** tables. Hence, we select only these from the **Use
    Tables** selector.
  prefs: []
  type: TYPE_NORMAL
- en: We then click on the **Update Query** button. This refreshes the screen and
    reduces the number of columns available in the **Column** selector. We can always
    change the selected tables later, using our browser's mechanism for multiple choices
    in drop-down menus (usually control click).
  prefs: []
  type: TYPE_NORMAL
- en: Exploring column criteria
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Three criteria columns are provided by default. This section discusses the options
    we have for editing their criteria. These include options for selecting columns,
    sorting individual columns, entering conditions for individual columns, and so
    on.
  prefs: []
  type: TYPE_NORMAL
- en: 'Column selector: Single column or all columns'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The **Column** selector contains all the individual columns for the selected
    tables, plus a special choice ending with an asterisk (*) for each table, which
    means that all the columns are selected.
  prefs: []
  type: TYPE_NORMAL
- en: '![Column selector: Single column or all columns](img/7782_12_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: To display all the columns in the `author` table, we would choose **`author`.***
    and check the **Show** checkbox, without entering anything in the **Sort** and
    the **Criteria** boxes. In our case, we select **`author`.`name`**, as we want
    to enter some criteria for the author's name.
  prefs: []
  type: TYPE_NORMAL
- en: Sorting columns
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For each selected individual column, we can specify a sort (in **Ascending**
    or **Descending** order), or let this line remain intact (no sorting, which is
    the default behavior). If we choose more than one sorted column, the sorting will
    be carried out from left to right.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When we ask for a column to be sorted, we normally check the **Show** checkbox.
    But this is not necessary, as we might want to do just the sorting operation without
    displaying this column.
  prefs: []
  type: TYPE_NORMAL
- en: Showing a column
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We check the **Show** checkbox so that we can see the column in the results.
    Sometimes, we may just want to apply a criterion on a column, and not include
    it in the resulting page. Here, we add the `phone` column, ask for it to be sorted,
    and choose to show both the name and the phone number. We also ask for a sort
    on the name in the ascending order. The sort will be done first by name, and then
    by the phone number if the names are identical. This is because the name is in
    a column criterion to the left of the phone column, and thus has a higher priority.
  prefs: []
  type: TYPE_NORMAL
- en: '![Showing a column](img/7782_12_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Updating the query
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: At any point, we can click on the **Update Query** button to see the progress
    of our generated query. We have to click it at least once before executing the
    query. For now, let us click it and see the query generated in the query area.
    In the following examples, we will click on the **Update Query** button after
    each modification.
  prefs: []
  type: TYPE_NORMAL
- en: '![Updating the query](img/7782_12_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We have selected two tables, but have not yet chosen any column from the **book**
    table. Hence, this table is not mentioned in the generated query.
  prefs: []
  type: TYPE_NORMAL
- en: Adding conditions to the criteria box
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the **Criteria** box, we can enter a condition (respecting the SQL `WHERE`
    clause's syntax) for each of the corresponding columns. By default, we have two
    criteria rows. To find all the authors with **Smith** in their names, we use a
    **LIKE** criterion **(LIKE '%SMITH%')** and click on **Update Query**.
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding conditions to the criteria box](img/7782_12_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We have another line available to enter an additional criterion. Let us say
    we want to find the author **Maria Sunshine** as well. This time, we use an **=**
    condition. The two condition rows will be joined by the **Or** operator, selected
    by default from the left side of the interface.
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding conditions to the criteria box](img/7782_12_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'To better demonstrate that the **Or** operator links both the criteria rows,
    let us now add a condition, **LIKE ''%8%''**, on the phone number as shown in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding conditions to the criteria box](img/7782_12_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: By examining the positioning of the **AND** and **OR** operators, we can see
    that the first row of the conditions is linked by the **AND** (because **AND**
    is chosen under the **name** column) operator, and the second row of conditions
    is linked to the rest by the **OR** operator. The condition that we have just
    added **' (LIKE %8%')** is not meant to find anyone, because we changed the phone
    number of all the authors with the name "Smith" to "444-5555" (in [Chapter 11)](ch11.html
    "Chapter 11. Entering SQL Statements").
  prefs: []
  type: TYPE_NORMAL
- en: If we want another criterion on the same column, we just add a criteria row.
  prefs: []
  type: TYPE_NORMAL
- en: Adjusting the number of criteria rows
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The number of criteria rows can be changed in two ways. First, we can select
    the **Ins** checkbox under **Criteria** to add one criteria row (after clicking
    on **Update Query)**. As this checkbox can add only one criteria row at a time,
    we will uncheck it and use the **Add/Delete criteria rows** dialog instead. In
    this dialog, we choose to add two rows.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another click on the **Update Query** button produces the following screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adjusting the number of criteria rows](img/7782_12_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now, you can see that there are two additional criteria rows (which are empty
    at the moment). We can also remove criteria rows. This can be done by ticking
    the **Del** checkbox beside the row(s) we want to remove. Let us remove the two
    rows we have just added, as we don't need them now. The **Update Query** button
    refreshes the page with the specified adjustment.
  prefs: []
  type: TYPE_NORMAL
- en: Adjusting the number of criteria columns
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Using a similar mechanism, we can add or delete columns by checking the **Ins**
    or **Del** checkboxes under each column in the **Modify** dialog, or the **Add/Delete
    columns** dialog. We already had one unused column (not shown on the previous
    images). Here, we have added one column using the **Ins** checkbox located under
    the unused column (this time, we will need it):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adjusting the number of criteria columns](img/7782_12_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Generating automatic joins (internal relations)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: phpMyAdmin can generate the joins between the tables in the query it builds,
    provided internal relations have been defined. Let us now populate our two unused
    columns with the **title** and the **genre** columns from our **book** table,
    and see what happens when we update the query.
  prefs: []
  type: TYPE_NORMAL
- en: '![Generating automatic joins (internal relations)](img/7782_12_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: There are now two additional criteria columns that relate to the **`book`.`title`**
    and the **`book`.`genre`** columns respectively. phpMyAdmin used its knowledge
    of the relations defined between the tables to generate a **LEFT JOIN** clause
    (highlighted in the preceding screenshot) on the **author_id** key column. A shortcoming
    of the current version is that only the internal relations, and not the `InnoDB`
    relations, are examined.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There may be more than two tables involved in a join.
  prefs: []
  type: TYPE_NORMAL
- en: Executing the query
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Clicking on the **Submit Query** button sends the query for execution. In the
    following screenshot, you can see the complete generated query in the upper part,
    and the resulting data row in the lower part:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Executing the query](img/7782_12_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: There is no easy way (except by using the browser's **Back** button) to come
    back to the query generation page once we have submitted the query. [Chapter 14](ch14.html
    "Chapter 14. Using Query Bookmarks") discusses how to save the generated query
    for later execution.
  prefs: []
  type: TYPE_NORMAL
- en: The visual builder
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Starting with version 3.4, another method for query building is offered. It
    leverages the **Designer** interface that might be more familiar to users, by
    combining query generation to it. We can open this interface by clicking on the
    **Switch to visual builder** link, which produces an initial screen, shown in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The visual builder](img/7782_12_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We should now open the list of columns for all tables by clicking on the **Small/Big
    All** icon.
  prefs: []
  type: TYPE_NORMAL
- en: '![The visual builder](img/7782_12_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Each column has a left-side checkbox and a right-side options icon. The checkbox
    is used to indicate which column we want to be part of the results; while the
    option icon permits to open a panel where we will specify the criterion we want
    to apply to this column. For example, should we want to select books of more than
    200 pages, we would click on the options icon next to **page_count** column and
    fill the criterion dialog, as depicted in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The visual builder](img/7782_12_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Clicking on **OK** saves this query option; it's now available under the **Active
    options** dialog at the right-side, should we need to review the option or remove
    it.
  prefs: []
  type: TYPE_NORMAL
- en: 'To build the query, we use the **Build Query** icon, producing a screen shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The visual builder](img/7782_12_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: At this point, we either refine the query with additional options or click on
    **Submit Query** to obtain the results.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter covered various aspects including opening the query generator,
    choosing tables, entering column criteria, sorting and showing columns, and altering
    the number of criteria rows or columns. We also learnt how to use the `AND` and
    `OR` operators to define relations between the rows and columns, and how to use
    automatic joins between tables. The **Designer**-integrated visual query builder
    was covered as well.
  prefs: []
  type: TYPE_NORMAL
- en: The next chapter will show you how to synchronize data between servers and how
    to manage replication.
  prefs: []
  type: TYPE_NORMAL
