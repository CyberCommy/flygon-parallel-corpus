- en: Testing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have developed an application with a significant code base. We tried it and
    we think that our application has no bugs. However, we can be wrong! Sometimes,
    even if we are sure that there are no bugs in our application, it can happen that
    a dangerous issue is waiting. How to prevent this? Simple! We will write tests
    that will check our code for us. In this chapter, we will introduce you to testing
    and give examples on how to set up, write, and run your tests.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: How to write your first test
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using test suites
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to test UI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running tests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unit and instrumentation tests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding dependencies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To run tests, we must satisfy some dependencies. We will update our application
    configuration by extending `build.gradle` to support testing and to provide the
    classes we need. Open `build.gradle` and extend it as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'This will enable us to test content providers and use all related classes in
    our tests. If we do not enable this, we will get this error:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Error: "Method ... not mocked"!`'
  prefs: []
  type: TYPE_NORMAL
- en: Updating folder structure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The folder structure and code in it must follow the convention about build
    variants. For our tests, we will use the following part of the structure:'
  prefs: []
  type: TYPE_NORMAL
- en: 'For unit tests:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/d56a4a2f-44a1-42ee-ae48-190b8bae52f5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'For instrumentation tests:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/48a54d74-4342-4be5-9366-c659aef0ebb0.png)'
  prefs: []
  type: TYPE_IMG
- en: Now we are ready to start writing our tests!
  prefs: []
  type: TYPE_NORMAL
- en: Writing your first test
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Locate the `root` package of your unit tests and create a new class called
    `NoteTest` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The test is very simple. It creates a new instance of `Note`, triggers the
    CRUD operation in our content provider to store it, and verifies the ID received.
    To run the test, right-click on class from the Project pane and choose Run ''NoteTest'':'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/61355d1a-8c22-47c5-9985-3a5f0c6fcaf7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The unit test is executed like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/21744fcd-f174-416e-9441-e658353e6f83.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As you can see, we successfully inserted our `Note` into the database. Now,
    after we created our first unit test, we will create our first instrumentation
    test. However, before we do that, let''s explain the difference between unit and
    instrumentation tests. Instrumentation tests run on a device or an emulator. They
    can be used when you need to test the code that has dependency on the Android
    Context. Let''s test our main service. Create a new class inside the instrumentation
    tests `root` package called `MainServiceTest`, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'To run it, create a new configuration as it''s illustrated in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/85a20a53-90ab-485d-941d-ca0f27187f4c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Run the newly created configuration. You will be asked to choose the Android
    device or the emulator instance on which you will run the test:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/458df6df-5f0c-47a8-b2e2-bb9485cb9004.png)'
  prefs: []
  type: TYPE_IMG
- en: Wait until the test is executed. Congratulations! You have successfully created
    and run the instrumentation test. Now, for your exercise, define as many tests
    as you can to cover all the code your application has. Pay attention if the test
    should be a unit or an instrumentation test.
  prefs: []
  type: TYPE_NORMAL
- en: Using test suites
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A **test suite** is a collection of tests. We will show you how to create a
    test collection. Create a test to represent the container for collection. Let''s
    call it `MainSuite`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Repeat the procedure we did for the instrumentation test from our example to
    run your test suite.
  prefs: []
  type: TYPE_NORMAL
- en: How to test UI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Testing the UI can help us prevent the user from discovering unexpected situations,
    crashing the application, or getting poor performance. We strongly recommend you
    to write UI tests so you are sure your UI performs as expected. For this purpose,
    we will introduce the Espresso Framework.
  prefs: []
  type: TYPE_NORMAL
- en: 'First of all, we will add the dependency for it as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Before you write and run Espresso tests, disable animations on your testing
    device because this will affect tests, expected timings, and behaviors. We strongly
    recommend you to do that! On your device, go to Settings | Developer options |
    and turn off the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Window animation scale
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Transition animation scale
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Animator duration scale
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now you are ready to write Espresso tests. Learning the Espresso Framework
    can take some effort. It can be time consuming for you, but its benefit will be
    huge! Let''s take a look at the example of one Espresso test:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: We defined that we will test the `MainActivity` class. After the test triggers
    the toolbar button click, we check if the dialog is present. We do that by checking
    the label availability--`"My dialog"`. Learning the entire Espresso Framework
    is beyond this book, but at least we gave you a hint of possibilities. Invest
    some time in learning it because it will definitely help you!
  prefs: []
  type: TYPE_NORMAL
- en: Running tests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We already executed our tests through the Android Studio. However, once you
    write them all, you will want to run them all at once. You can run all the unit
    tests for all build variants, but only for a certain flavor or build type. The
    same applies for instrumentation tests. We will show you several examples to do
    so using existing build variants for the Journaler application.
  prefs: []
  type: TYPE_NORMAL
- en: Running unit tests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Open the terminal and navigate to the `root` package of the project. To run
    all unit tests, execute the following command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: This will run all the unit tests we wrote. The testing will fail since `NoteTest`
    uses content provider. For this, it's required to be executed with the proper
    `Runner` class. Android Studio, by default, does that. However, since this is
    a unit test, and we execute it from the terminal, testing will fail. You will
    agree that this test is actually something that has to be considered as instrumentation
    since it uses the Android Framework components. Common practice is that if your
    class relies on the Android Framework components, it has to be executed as instrumentation.
    Because of this, we will move `NoteTest` into an instrumentation tests directory.
    Now we don't have any unit test. Create at least one that does not depend on the
    Android Framework components. You can move the existing `DummyTest` for that purpose
    in the unit tests folder. Drag and drop it from your IDE and rerun the tests with
    the same command.
  prefs: []
  type: TYPE_NORMAL
- en: 'To run all tests for the build variant, execute the following command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: We execute tests for the `Complete` flavor and the `Debug` build type.
  prefs: []
  type: TYPE_NORMAL
- en: Running instrumentation tests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To run all instrumentation tests, use the following command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Its precondition is to have a device connected or emulator running. If you have
    more than one device or emulator present, all of them will run tests.
  prefs: []
  type: TYPE_NORMAL
- en: 'To run the instrumentation test for the build variant, use the following command
    line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: This will trigger all instrumentation tests for the `Connected` flavor with
    the `Debug` build type.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned how to write and run tests for our application.
    This is one more step toward production. We established a well-written and bug-free
    product. Soon, we will actually publish it. Be patient because that moment is
    coming!
  prefs: []
  type: TYPE_NORMAL
