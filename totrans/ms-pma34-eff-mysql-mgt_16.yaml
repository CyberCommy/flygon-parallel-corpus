- en: Chapter 16. Transforming Data using MIME
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will cover a powerful phpMyAdmin feature—its ability to
    transform a column's contents during a table browse, based on specific rules called
    transformations. Normally, browsing a table shows only the original data that
    resides in it. However, MIME-based transformations permit the alteration of the
    display format.
  prefs: []
  type: TYPE_NORMAL
- en: Note that this kind of transformation does not have the same effect as a permanent
    data change, such as one made via the `UPDATE` statement. The transformed data
    is not written back to the MySQL server; it is just sent to the browser for display
    purposes.
  prefs: []
  type: TYPE_NORMAL
- en: Browsing data without transformations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Normally, the exact contents of each row are displayed, except that:'
  prefs: []
  type: TYPE_NORMAL
- en: The **TEXT** and **CHARACTER** columns might be truncated, according to `$cfg['LimitChars']`,
    and depending on whether we have chosen to see **Full Texts** or not
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**BLOB** and geometry-related columns might be replaced by a message such as
    **[BLOB - 1.5 KB]**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will use the term **cell** to indicate a specific column of a specific row.
    The cell containing the cover photograph for the "Future souvenirs" book (a **BLOB**
    column) is currently displayed as cryptic data such as **‰PNG\r\n\Z\n\0\0\0\rIHDR\0**
    or as a message stating the **BLOB** column's size. It would be interesting to
    see a thumbnail (shown in the following screenshot) of the picture directly in
    phpMyAdmin and possibly the full-size picture itself. This will be made possible
    with proper transformation.
  prefs: []
  type: TYPE_NORMAL
- en: '![Browsing data without transformations](img/7782_16_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Switching display options
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In **Browse** mode, the **Options** link reveals a slider that contains, among
    other choices, a **Hide Browser transformation** checkbox. We can use it whenever
    we want to switch between viewing the real data of a cell and its transformed
    version.
  prefs: []
  type: TYPE_NORMAL
- en: Enabling transformations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We define **transformation** as a mechanism by which all the cells related to
    a column are transformed at browse time, using the metadata defined for this column.
    Only the cells visible on the current results page are transformed.
  prefs: []
  type: TYPE_NORMAL
- en: The use of this feature is controlled by the `$cfg['BrowseMIME']` directive
    in `config.inc.php`. The default value of this directive is `TRUE`, meaning that
    transformations are enabled. However, the phpMyAdmin configuration storage must
    be in place (refer to [Chapter 1)](ch01.html "Chapter 1. Getting Started with
    phpMyAdmin") as the metadata necessary for the transformation is not available
    in the official MySQL table structure. It's an addition made especially for phpMyAdmin.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The transformation logic itself is coded in PHP scripts, stored in `libraries/transformations`,
    and is called using a plugin architecture. In the documentation section on phpMyAdmin's
    home site (currently at [http://www.phpmyadmin.net/home_page/docs.php)](http://www.phpmyadmin.net/home_page/docs.php)),
    there is a link pointing to additional information for developers who would like
    to learn the internal structure of the plugins in order to code their own transformation.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring settings for MIME columns
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If we go to the `Table` view of the **Structure** page for the `book` table
    and click on the **Change** link for the **cover_photo** column, we see three
    additional attributes (provided the transformations feature is enabled):'
  prefs: []
  type: TYPE_NORMAL
- en: '**MIME type**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Browser transformation**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Transformation options**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Configuring settings for MIME columns](img/7782_16_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: For a specific column, it's possible to indicate only one type of transformation.
    Here, the column is a **BLOB**. Hence, it can hold any kind of data. In order
    for phpMyAdmin to interpret and act correctly on the data, the transformation
    system must be informed of the data format and the intended results. Accordingly,
    we have to ensure that we upload data that always follows the same file format.
  prefs: []
  type: TYPE_NORMAL
- en: We will first learn the purpose of these attributes and then try some possibilities
    in the *Examples of transformation* section, later in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Selecting the MIME type
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The MIME specification ([http://en.wikipedia.org/wiki/MIME](http://en.wikipedia.org/wiki/MIME))
    has been chosen as a metadata attribute to categorize the kind of data that a
    column holds. **Multipurpose Internet Mail Extensions (MIME)** , originally designed
    to extend mail, are now used to describe content types for other protocols as
    well. In the context of phpMyAdmin, the current possible values are:'
  prefs: []
  type: TYPE_NORMAL
- en: '**image/jpeg**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**image/png**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**text/plain**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**application/octetstream**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **text/plain** type can be chosen for a column containing any kind of text
    (for example, XHTML or XML text). In the *Examples of transformations* section,
    you will see which MIME type you are required to choose to achieve a specific
    effect.
  prefs: []
  type: TYPE_NORMAL
- en: Browser transformations
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This is where we set the exact transformation to be done. More than one transformation
    may be supported per MIME type. For example, for the **image/jpeg** MIME type,
    we have two transformations available: **image/jpeg: inline** for a clickable
    thumbnail of the image, and **image/jpeg: link** to display just a link.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the list of the available transformations:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Browser transformations](img/7782_16_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: A more complete transformation explanation and a list of the possible options
    are available on clicking the question mark icon next to **Transformation options**,
    and then clicking on the **transformation descriptions** link that appears.
  prefs: []
  type: TYPE_NORMAL
- en: Assigning values to transformation options
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In the *Examples of transformations* section, we will see that some transformations
    accept options. For example, we can indicate the width and height in pixels for
    a transformation that generates an image. A comma is used to separate the values
    in the options list, and some options may need to be enclosed within quotes.
  prefs: []
  type: TYPE_NORMAL
- en: Some options have a default value, and we must be careful to respect the documented
    order for options. For example, if there are two options, and we only want to
    specify a value for the second option, we can use empty quotes as a placeholder
    for the first option, to let the system use its default value.
  prefs: []
  type: TYPE_NORMAL
- en: Requirements for image generation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Normal thumbnail generation requires that some components exist on the web server,
    and that a parameter in `config.inc.php` be correctly configured.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring GD2 library availability verification
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: phpMyAdmin uses some internal functions to create the thumbnails. These functions
    need the GD2 library to be present on our PHP server.
  prefs: []
  type: TYPE_NORMAL
- en: phpMyAdmin can detect the presence of the correct GD2 library, but this detection
    takes some time. It also takes place not once per session, but almost every time
    an action is taken in phpMyAdmin.
  prefs: []
  type: TYPE_NORMAL
- en: Setting the `$cfg['GD2Available']` parameter in `config.inc.php` to its default
    value`'auto'` indicates that the detection of the library's presence and version
    is needed.
  prefs: []
  type: TYPE_NORMAL
- en: If we know that the GD2 library is available, setting `$cfg['GD2Available']`
    to `yes` will make execution quicker. If the GD2 library is not available, you
    are recommended to set this parameter to `no`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To find out which GD2 library we have on the server, we can go to phpMyAdmin''s
    home page and click on **Show PHP information**. If this link is not present,
    we need to set the `$cfg[''ShowPhpInfo'']` parameter to `true`. We then look for
    a section titled **gd** and verify which version is identified. In the following
    screenshot, all is fine as we can see that the GD version is 2.X with JPEG and
    PNG support:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Configuring GD2 library availability verification](img/7782_16_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Asserting support of JPEG and PNG libraries
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The PHP component in our web server needs to have support for the JPEG and PNG
    images if we want to generate thumbnails for these types of images. For more details,
    please refer to [http://php.net/manual/en/ref.image.php](http://php.net/manual/en/ref.image.php).
  prefs: []
  type: TYPE_NORMAL
- en: Evaluating the impact of memory limits
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: On some servers, the default value in `php.ini` for `memory_limit` is `8M`,
    meaning 8 MiB. This is too low for correct image manipulation, because the GD
    functions used to produce the final images need working memory. For example, in
    one test, a value of `11M` in `memory_limit` was needed to generate the thumbnail
    from a 300 KiB JPEG image. Also, if multiple rows are viewed at once, more working
    memory will be needed.
  prefs: []
  type: TYPE_NORMAL
- en: Examples of transformations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will now discuss a few transformation examples. Typical option values are
    shown, and it's recommended to tweak them until we have achieved the desired results.
    Depending on the phpMyAdmin version, more transformations may be available.
  prefs: []
  type: TYPE_NORMAL
- en: Clickable thumbnail (JPEG or PNG)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will start by changing our **cover_photo** column type from **BLOB** to
    **LONGBLOB** to ensure that we can upload photographs bigger than 65 KiB in size.
    We then enter the attributes shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Clickable thumbnail (JPEG or PNG)](img/7782_16_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Here, the options are presented in the form of width and height. If we omit
    the options, the default values are 100 and 100\. The thumbnail generation code
    preserves the original aspect ratio of the image. Therefore, the values entered
    are the maximum width and height of the generated image. We then upload a `.jpeg`
    file in a cell (using instructions from [Chapter 5)](ch05.html "Chapter 5. Changing
    Data and Structure"). As a result, we get the following screen in **Browse** mode
    for this table:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Clickable thumbnail (JPEG or PNG)](img/7782_16_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This thumbnail can be clicked to reveal a full-size photograph.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The thumbnail is not stored anywhere, but generated each time we go into **Browse**
    mode for this set of rows. On a double Xeon 3.2 GHz server, we commonly experience
    a generation rate of six JPEG images per second. No caching of these thumbnails
    is offered by phpMyAdmin.
  prefs: []
  type: TYPE_NORMAL
- en: 'For a `.png` file, we have to use **image/png** in the **MIME type** dialog,
    and **image/png: inline** in the **Browse transformation** dialog.'
  prefs: []
  type: TYPE_NORMAL
- en: Adding links to an image
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To provide a link without the thumbnail, we use the **image/jpeg: link** transformation.
    There are no transformation options. This link can be used to view the photograph
    (by left-clicking on the link) and then possibly download it (by right-clicking
    on the photograph itself).'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding links to an image](img/7782_16_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Date formatting
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We have a column named **date_published** in our `book` table; let us change
    its type to **DATETIME**. Then, we set its MIME type to **text/plain** and the
    browser transformation to **text/plain: dateformat**. The next step is to edit
    the row for the "Future souvenirs" book, and enter **2003-01-01 14:56:00** in
    the **date_published** column. When we browse the table, we now see that the column
    has been formatted. Hovering the mouse over it reveals the unformatted original
    contents, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Date formatting](img/7782_16_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'This transformation accepts two options. The first is the number of hours (zero
    by default) that will be added to the original value. Adding number of hours can
    be useful if we store all time values based on **Coordinated Universal Time (UTC)**
    , but want to display them for a specific zone (for example, UTC+5). The second
    option is the time format we want to use, specified using any PHP `strftime` parameters
    (more details at [http://php.net/strftime](http://php.net/strftime)). So, if we
    put**''0'',''Year: %Y''** in the **Transformation options**, we will get the following
    output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Date formatting](img/7782_16_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Links from text
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Suppose that we have put a complete URL —`http://domain.com/abc.pdf` —in the
    **description** column in our `book` table. The text of the link will be displayed
    while browsing the table, but we would not be able to click it. We will now see
    the use of the **text/plain** MIME type in such a situation.
  prefs: []
  type: TYPE_NORMAL
- en: 'text/plain: link'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If we use a **text/plain** MIME type and a **text/plain: link** browser transformation
    in the scenario just mentioned, we will still see the text for the link, and it
    will be clickable.'
  prefs: []
  type: TYPE_NORMAL
- en: '![text/plain: link](img/7782_16_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: If all the documents that we want to point to are located at a common URL prefix,
    we can put this prefix (for example,[http://domain.com/](http://domain.com/))
    in the first transformation option, within the enclosing quotes. Then, we would
    only need to put the last part of the URL `(abc.pdf)` in each cell.
  prefs: []
  type: TYPE_NORMAL
- en: A second transformation option is available for setting a title. This would
    be displayed in the **Browse** mode instead of the URL contents, but a click would
    nonetheless bring us to the intended URL.
  prefs: []
  type: TYPE_NORMAL
- en: If we use only the second transformation option, we have to use quotes as the
    value of the first option. It could be done as`'','this is the title'`.
  prefs: []
  type: TYPE_NORMAL
- en: 'text/plain: imagelink'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**text/plain: imagelink** transformation is similar to the previous one, except
    that in the cell, we place a URL that points to an image. This image will be fetched
    and displayed in the cell along with the link text. The image could be anywhere
    on the web, including our local server.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, we have the following three options available:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The common URL prefix (such as the one for `text/plain: link)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The width of the image in pixels (default: 100)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The height (default: 50)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For our test URL, you should enter the following options:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: If the text for the link is too long, the transformation does not occur. By
    default, the **Partial texts** display option is selected.
  prefs: []
  type: TYPE_NORMAL
- en: '![text/plain: imagelink](img/7782_16_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In this case, we can switch to **Full texts** to reveal the complete link. We
    can then see the complete image.
  prefs: []
  type: TYPE_NORMAL
- en: '![text/plain: imagelink](img/7782_16_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Other transformations, such as `image/jpeg: inline` and `image/png: inline`,
    specify the exact MIME type of the image. In these cases, phpMyAdmin uses GD2
    library functions for the thumbnail generation. However, the link contained in
    a `text/plain: imagelink` transformation may refer to any browser-supported image
    type. Therefore, phpMyAdmin just displays a resized image with an HTML `img` tag,
    and `width` and `height` attributes set according to the size options defined
    in the transformation. To see the original image, we can click on either the link
    or the thumbnail.'
  prefs: []
  type: TYPE_NORMAL
- en: Preserving the original formatting
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Normally, when displaying text, phpMyAdmin escapes special characters. For
    example, if we entered **This book is <b>good</b>** in the **description** column
    for one book, we would normally see **This book is <b>good</b>** when browsing
    the table. However, if we used the transformation **text/plain: formatted** for
    this column, we would get the following output while browsing:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Preserving the original formatting](img/7782_16_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In this example, the results are correct. However, other HTML tags entered in
    the column could produce surprising results (including invalid HTML pages). For
    example, as phpMyAdmin presents results using HTML tables, a non-escaped`</table>`
    tag in the column would ruin the output.
  prefs: []
  type: TYPE_NORMAL
- en: Displaying parts of a text
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `text/plain: substr` transformation is available for displaying only a
    portion of the text. The following are the options:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Where to start in the text (default: 0)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'How many characters (default: all of the remaining text)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What to display as a suffix to show that truncation has occurred; the default
    is to display ellipses (...)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Remember that `$cfg[''LimitChars'']` is doing a character truncation for every
    non-numeric column. Hence, `text/plain: substr` is a mechanism for fine-tuning
    this column by column.'
  prefs: []
  type: TYPE_NORMAL
- en: Displaying a download link
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let us say we want to store a small audio comment about each book inside MySQL.
    We add a new column to the `book` table, with the name **audio_contents**, and
    type **MEDIUMBLOB**. We set its **MIME type** to **application/octetstream** and
    choose the **application/octetstream: download** transformation. In the **Transformation
    options**, we insert**''comment.wav''**.'
  prefs: []
  type: TYPE_NORMAL
- en: 'This MIME type and extension will inform our browser about the incoming data,
    and the browser should open the appropriate player. To insert a comment, we first
    record it in a `.wav` format, and then upload the contents of the file into the
    **audio_contents** column for one of the books. When browsing our table, we can
    see a link **comment.wav** for our audio comment:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Displaying a download link](img/7782_16_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Hexadecimal representation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Characters are stored in MySQL (and in computers in general) as numeric data,
    and converted into something meaningful for the screen or printer. Users sometimes
    cut and paste data from another application to phpMyAdmin, leading to unexpected
    results if the characters are not directly supported by MySQL. A case that was
    reported in phpMyAdmin''s help forum involved special quotation marks entered
    in a Microsoft Word document and pasted to phpMyAdmin. It helps to be able to
    see the exact hexadecimal codes, and this can be done by using the `application/octetstream:
    hex` transformation.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following example, this transformation will be applied to the **title**
    column of our `book` table. When browsing the row containing the **Future souvenirs**
    title, we can see the following screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Hexadecimal representation](img/7782_16_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As we know which character set this column is encoded with, we can compare its
    contents with a chart describing each character. For instance, [http://en.wikipedia.org/wiki/Latin1](http://en.wikipedia.org/wiki/Latin1)
    describes the Latin1 character set.
  prefs: []
  type: TYPE_NORMAL
- en: SQL pretty printing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The term **pretty printing** ([http://en.wikipedia.org/wiki/Pretty_printing](http://en.wikipedia.org/wiki/Pretty_printing))
    refers to a way of "beautifying" source code (in our case, SQL statements). In
    the phpMyAdmin configuration storage, the `pma_bookmark.query` and `pma_history.sqlquery`
    columns contain SQL statements. With the `text/plain: sql` transformation defined
    for these columns, these SQL statements will be displayed in color with syntax
    highlighting when the table is browsed.'
  prefs: []
  type: TYPE_NORMAL
- en: IP address
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'An IP (v4) address can be encoded into a long integer (for example, via the
    PHP `iptolong()` function), and stored into a MySQL `UNSIGNED INT` column. To
    convert it back to the familiar dotted string (for example, `127.0.0.1)`, you
    can use the `text/plain: longToIpv4` transformation.'
  prefs: []
  type: TYPE_NORMAL
- en: Transforming data via external applications
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The transformations that have been described previously are implemented directly
    from within phpMyAdmin. However, some transformations are better executed via
    existing external applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `text/plain: external` transformation enables us to send a cell''s data
    to another application that will be started on the web server, capture this application''s
    output, and display this output in the cell''s position.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This feature is supported only on a Linux or UNIX server (under Microsoft Windows,
    output and error redirection cannot be easily captured by the PHP process). Furthermore,
    PHP should not be running in safe mode. Hence, the feature may not be available
    on hosted servers.
  prefs: []
  type: TYPE_NORMAL
- en: For security reasons, the exact path and name of the application cannot be set
    from within phpMyAdmin as a transformation option. The application names are set
    directly inside one of the phpMyAdmin scripts.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, in the phpMyAdmin installation directory, we edit the `text_plain__external.inc.php`
    file in `libraries/transformations/`, and find the following section:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: No external application is configured by default, and we have to explicitly
    add our own.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The names of the transformation scripts are constructed using the following
    format—the MIME type, a double underscore, and then a part indicating which transformation
    should take place.
  prefs: []
  type: TYPE_NORMAL
- en: Every program that is allowed, along with its complete path, must be described
    here with an index number starting from 0\. Then we save the modifications to
    this script and put it back on the server if needed. The remaining setup is completed
    from the panel where we choose the options for the other browser transformations.
  prefs: []
  type: TYPE_NORMAL
- en: 'Of course, we will now choose **text/plain: external** in the transformations
    menu.'
  prefs: []
  type: TYPE_NORMAL
- en: As the first option, we place the application number (for example, 0 would be
    for the tidy application). The second option holds the parameters we need to pass
    to this application. If we want phpMyAdmin to apply the `htmlspecialchars()` function
    to the results, we put **1** as the third parameter—this is the default. We could
    put a **0** there to avoid protecting the output with `htmlspecialchars()`.
  prefs: []
  type: TYPE_NORMAL
- en: If we want to avoid reformatting the cell's lines, we put **1** as the fourth
    parameter. This will use the `NOWRAP` modifier, and is done by default.
  prefs: []
  type: TYPE_NORMAL
- en: 'External application example: In-cell sort'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This example shows how to sort the text contents of a single cell. We start
    by modifying the `text_plain__external.inc.php` script, as mentioned in the previous
    section, to add the `sort` program:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Note that our new program bears the index number `0`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We then add a **TEXT** column whose name is **keywords** to our `book` table.
    Finally, we fill in the MIME-related information, entering**''0'',''-r''** as
    the transformation options, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![External application example: In-cell sort](img/7782_16_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The**'0'** here refers to the index number for `sort`, and the**'-r'** is a
    parameter for `sort`, which makes the program sort in the reverse order.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we edit the row for the book "A hundred years of cinema (volume 1)",
    entering some keywords in no particular order (as seen in the following screenshot)
    and hitting **Go** in order to save the changes:'
  prefs: []
  type: TYPE_NORMAL
- en: '![External application example: In-cell sort](img/7782_16_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'To test the effects of the external program, we browse our table and see the
    sorted in-cell keywords:'
  prefs: []
  type: TYPE_NORMAL
- en: '![External application example: In-cell sort](img/7782_16_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Notice that the keywords are displayed in reverse sorted order.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learnt how to improve the browsing experience by transforming
    data using various methods. In particular, we saw how to display an overview of
    thumbnail and full-size images from `.jpeg` and `.png` **BLOB** columns, how to
    generate links, format dates, display only parts of texts, and how to execute
    external programs to reformat cell contents.
  prefs: []
  type: TYPE_NORMAL
- en: The next chapter will cover phpMyAdmin's support for the MySQL features that
    are new in versions 5.0 and 5.1.
  prefs: []
  type: TYPE_NORMAL
