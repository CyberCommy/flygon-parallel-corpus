- en: 9\. Going Serverless with OpenFaaS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Learning Objectives
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'By the end of this chapter, you will be able to:'
  prefs: []
  type: TYPE_NORMAL
- en: Set up the OpenFaaS framework on a Minikube cluster
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create, build, deploy, list, invoke, and delete functions with the OpenFaaS
    CLI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploy and invoke OpenFaaS functions from the OpenFaaS portal
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Return an HTML web page from OpenFaaS functions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Set up the Prometheus and Grafana dashboards to monitor OpenFaaS functions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configure function autoscaling to adjust the function count based on demand
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this chapter, we aim to set up the OpenFaaS framework on top of a Minikube
    cluster and study how we can work with OpenFaaS functions, using both the OpenFaaS
    CLI and OpenFaaS portal. We will also look into features such as observability
    and autoscaling with OpenFaaS.
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to OpenFaaS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the previous chapter, we learned about OpenWhisk, an open source serverless
    framework, which is part of the Apache Software Foundation. We learned how to
    create, list, invoke, update, and delete OpenWhisk actions. We also discussed
    how to automate the action invocation with feeds, triggers, and rules.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will be studying OpenFaas, another open source framework
    used to build and deploy serverless functions on top of containers. This was started
    as a proof-of-concept project by Alex Ellis in October 2016, and the first version
    of the framework, written in Golang, was committed to GitHub in December 2016\.
  prefs: []
  type: TYPE_NORMAL
- en: OpenFaaS was originally designed to work with Docker Swarm, which is the clustering
    and scheduling tool for Docker containers. Later, the OpenFaaS framework was rearchitected
    to support the Kubernetes framework, too.
  prefs: []
  type: TYPE_NORMAL
- en: OpenFaaS comes with a built-in UI named **OpenFaaS Portal**, which can be used
    to create and invoke the functions from the web browser. This portal also offers
    a CLI named `faas-cli` that allows us to manage functions through the command
    line. The OpenFaaS framework has built-in support for autoscaling. This will scale
    up the function when there is increased demand, and it will scale down when demand
    decreases, or even scale down to zero when the function is idle.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s take a look at the components of the OpenFaaS framework:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.1: OpenFaaS components'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_09_01.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 9.1: OpenFaaS components'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'OpenFaaS consists of the following components that are running on the underlying
    Kubernetes or Docker Swarm:'
  prefs: []
  type: TYPE_NORMAL
- en: '**API Gateway**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The API Gateway is the entry point to the OpenFaaS framework, which exposes
    the functions externally. It is also responsible for collecting the function metrics
    such as function invocation count, function execution duration, and number of
    function replicas. The API Gateway also handles function autoscaling by increasing
    or decreasing function replicas based on demand.
  prefs: []
  type: TYPE_NORMAL
- en: '**Prometheus**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Prometheus, which is an open source monitoring and alerting tool, comes bundled
    with the OpenFaaS framework. This is used to store the information about the function
    metrics collected by the API Gateway.
  prefs: []
  type: TYPE_NORMAL
- en: '**Function Watchdog**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Function Watchdog is a tiny Golang web server running alongside each function
    container. This component is placed between the API Gateway and your function
    and is responsible for converting message formats between the API Gateway and
    the function. It converts the HTTP messages sent by the API Gateway to the "standard
    input" (**stdin**) messages, which the function can understand. This also handles
    the response path by converting the "standard output" (**stdout**) response sent
    by the function to an HTTP response.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is an illustration of a function watchdog:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.2: OpenFaaS function watchdog'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_09_02.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 9.2: OpenFaaS function watchdog'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Docker Swarm or Kubernetes can be used as the container orchestration tool with
    the OpenFaaS framework, which manages the containers running on the underlying
    Docker framework.
  prefs: []
  type: TYPE_NORMAL
- en: Getting Started with OpenFaas on Your Local Minikube Cluster
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In this section, we will set up an OpenFaaS framework and CLI on our local
    Minikube cluster. Before starting the installation, we need to ensure that the
    following prerequisites are met:'
  prefs: []
  type: TYPE_NORMAL
- en: Minikube is installed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Docker (version 17.05 or later) is installed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Helm is installed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A Docker Hub account is created
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Once these prerequisites are ready, we can continue to install OpenFaaS. The
    installation of OpenFaas can be broadly classified into three steps, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing the OpenFaaS CLI
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Installing the OpenFaaS framework (on a Minikube cluster)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Setting up an environment variable
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s look at each of these steps in more depth:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Installing the OpenFaaS CLI**'
  prefs: []
  type: TYPE_NORMAL
- en: '**faas-cli** is the command-line utility for the OpenFaaS framework, which
    can be used to create and invoke OpenFaaS functions from the Terminal. We can
    install the latest version of `faas-cli` using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The output should be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](image/C12607_09_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.3: Installing faas-cli'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Once the installation is complete, we can verify installation with the `faas-cli
    version` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The output should be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.4: The faas-cli version'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_09_04.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 9.4: The faas-cli version'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: As you can see, we have installed the `faas-cli` utility on the cluster and
    can also check the version number.
  prefs: []
  type: TYPE_NORMAL
- en: '**Installing the OpenFaaS Framework**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we need to install the OpenFaaS framework using the OpenFaaS `helm` repository.
    First, we need to add the `openfaas` `helm` repository and update it to pull any
    new releases. Use the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The output should be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.5: Adding and updating helm charts'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_09_05.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 9.5: Adding and updating helm charts'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Installing OpenFaaS requires two Kubernetes namespaces. The `openfaas` namespace
    is for the core services of the OpenFaaS framework, and the `openfaas-fn` namespace
    is for the OpenFaaS functions. Run the following commands to create the namespaces:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.6: Creating namespaces'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_09_06.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 9.6: Creating namespaces'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Now we are going to create the Kubernetes secret, which is required to enable
    basic authentication for the OpenFaaS gateway. First, we will create a random
    string that will be used as the password. Once the password is generated, we will
    `echo` the generated password and save it in a secure place as we need it to log
    in to the API Gateway later on. Run the following commands to generate the password:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.7: Generating the password'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_09_07.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 9.7: Generating the password'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: After generating the password, we will create a Kubernetes **secret** object
    to store the password.
  prefs: []
  type: TYPE_NORMAL
- en: 'Note:'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: A Kubernetes **secret** object is used to store sensitive data such as a password.
  prefs: []
  type: TYPE_NORMAL
- en: 'Execute the following command to create a Kubernetes secret named `basic-auth`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.8: Creating the basic-auth secret'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_09_08.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 9.8: Creating the basic-auth secret'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'We can now deploy the OpenFaaS framework from the `helm` chart. The `helm upgrade
    openfaas` command starts the deployment of OpenFaaS and will start deploying the
    OpenFaaS framework on your local Minikube cluster. This will take between 5 and
    15 minutes depending on the network speed. Run the following commands to install
    `OpenFaaS`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding command prints a lengthy output, and, at the bottom, it provides
    a command to verify the installation, as you can see in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.9: OpenFaaS installation'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_09_09.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 9.9: OpenFaaS installation'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'You can verify the deployment state from the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be displayed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.10: Verifying the OpenFaaS installation'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_09_10.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 9.10: Verifying the OpenFaaS installation'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Once the installation has been successfully completed and all services are
    running, we then have to log in to the OpenFaaS gateway with the credentials we
    created in the preceding steps. Run the following command to log in to the OpenFaas
    gateway:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The output should be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.11: Logging in to the OpenFaaS gateway'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_09_11.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 9.11: Logging in to the OpenFaaS gateway'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: '**Setting the Environment Variables**'
  prefs: []
  type: TYPE_NORMAL
- en: There are several environment variables related to OpenFaaS, and we will set
    two environment variables in this section. These environment variables can be
    overridden using the command-line flags of `faas-cli`, if necessary.
  prefs: []
  type: TYPE_NORMAL
- en: '`OPENFAAS_URL`: This should point to the API Gateway component.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`OPENFAAS_PREFIX`: This is the Docker ID of your Docker Hub account.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Open the `~/.bashrc` file with your favorite text editor and add the following
    two lines at the end of the file. Replace `<your-docker-id>` with your Docker
    ID in the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, you need to source the `~/.bashrc` file to reload the newly configured
    environment variables, as shown in the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The command should appear as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.12: Source the bashrc file'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_09_12.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 9.12: Source the bashrc file'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: OpenFaaS Functions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: OpenFaaS functions can be written in any language supported by Linux or Windows,
    and they can then be converted to a serverless function using Docker containers.
    This is a major advantage of the OpenFaaS framework compared to other serverless
    frameworks that support only predefined languages and runtimes.
  prefs: []
  type: TYPE_NORMAL
- en: OpenFaaS functions can be deployed with either `faas-cli` or the OpenFaaS portal.
    In the following sections, we are first going to discuss how we can build, deploy,
    list, invoke, and delete OpenFaaS functions using the `faas-cli` command-line
    tool. Then, we will discuss how to deploy and invoke functions with the OpenFaaS
    portal.
  prefs: []
  type: TYPE_NORMAL
- en: Creating OpenFaaS Functions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As we discussed previously, OpenFaaS functions can be written in any language
    supported by Linux and Windows. This requires us to create the function code,
    add any dependencies, and create a **Dockerfile** to build the Docker image. It
    requires a certain amount of understanding of the OpenFaaS platform in order to
    be able to perform the previously mentioned tasks. As a solution, OpenFaaS has
    a template store that includes prebuilt templates for a set of supported languages.
    This means that you can download these templates from the template store, update
    the function code, and then the CLI does the rest to build the Docker image.
  prefs: []
  type: TYPE_NORMAL
- en: First of all, we need to pull the OpenFaaS templates with the `faas-cli template
    pull` command. This will fetch the templates from the official OpenFaaS template
    repository at [https://github.com/openfaas/templates.git](https://github.com/openfaas/templates.git).
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s create a new folder and pull the templates to the newly created
    folder with the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](image/C12607_09_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.13: Creating directories'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Let''s check the folder structure with the `tree -L 2` command that will print
    the folder **tree** with two levels of depth, as you can see in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.14: The tree view of the folder'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_09_14.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 9.14: The tree view of the folder'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Within the template folder, we can see 17 folders each for a specific language
    template.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we can use the `faas-cli new` command to create the structure and files
    for a new function using the downloaded templates as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '`<function-language>` can be replaced by any programming language supported
    by OpenFaaS templates. `faas-cli new --list` can be used to get a list of supported
    programming languages, as displayed in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.15: Listing supported programming language templates'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_09_15.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 9.15: Listing supported programming language templates'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Let''s create our first OpenFaaS function named `hello` with the `go` language
    template using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.16: Creating the hello function template'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_09_16.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 9.16: Creating the hello function template'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'As per the output, the preceding command will create multiple files and directories
    inside the current folder. Let''s execute the `tree -L 2` command again to identify
    the newly created files and directories:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.17: The tree view of the folder'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_09_17.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 9.17: The tree view of the folder'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: We can see a file named `hello.yml`, a folder named `hello`, and a `handler.go`
    file inside the `hello` folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we will look into the `hello.yml` file, which is called the **function**
    **definition** file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: This file has three top levels named `version`, `provider`, and `functions`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside the `provider` section, there is a `name: faas` tag, which defines the
    provider name as `faas`. This is the default and only valid value for the name
    tag. The next one is the `gateway` tag, which points to the URL where the API
    Gateway is running. This value can be overridden at deployment time with the `--gateway`
    flag or the `OPENFAAS_URL` environment variable.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Next is the `functions` section, which is used to define one or more functions
    to be deployed with the OpenFaaS CLI. In the preceding code, the `hello.yml` file
    has a single function named `hello` written in the Go language (`lang: go`). The
    handler of the function is defined with `handler: ./hello` section, which points
    to the folder where the source code of the `hello` function (`hello/handler.go`)
    resides. Finally, there is the `image` tag that specifies the name of the output
    Docker image. The Docker image name is prepended with your Docker image ID configured
    using the `OPENFAAS_PREFIX` environment variable.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we will discuss the `handler.go` file that was created inside the `hello`
    folder. This file contains the source code of the function written in the Go language.
    This function accepts a string parameter and returns the string by prepending
    it with `Hello, Go. You said:`, as displayed in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: This is just a sample function generated by the template. We can update it with
    our function logics.
  prefs: []
  type: TYPE_NORMAL
- en: Building OpenFaaS Functions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Once the function definition file (`hello.yml`) and function source code (`hello/handler.go`)
    are ready, the next step is to build the function as a Docker image. The `faas-cli
    build` CLI command is used to build the Docker image, which has the following
    format:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: This initiates the process of building the Docker image and will invoke the
    `docker build` command internally. A new folder named `build` will be created
    during this step with all the files required for the build process.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s build the `hello` function that we created in the previous section:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'We will receive an output similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Once we receive the build success message, we can list the Docker image using
    the `docker images` command as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.18: Verifying the Docker image'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_09_18.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 9.18: Verifying the Docker image'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Pushing the OpenFaaS Function Image
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The next step of the process is to push the Docker image of the function to
    a Docker registry or to the Docker Hub. We can use either the `faas-cli push`
    or `docker push` commands to push the image.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Docker Hub is a free service for storing and sharing Docker images.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s push the image with the `faas-cli push` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.19: Pushing the Docker image'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_09_19.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 9.19: Pushing the Docker image'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: We can verify that the image is pushed successfully by visiting the Docker Hub
    page at [https://hub.docker.com/](https://hub.docker.com/).
  prefs: []
  type: TYPE_NORMAL
- en: 'The output should be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.20: Verifying from Docker Hub'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_09_20.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 9.20: Verifying from Docker Hub'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Thus, we have successfully pushed the Docker image function to Docker Hub.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying the OpenFaaS Functions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now, we are ready to deploy the `hello` function into the OpenFaaS framework
    using the `faas-cli deploy` command. This command also requires the function specification
    file with the `-f` flag similar to other `faas-cli` commands that we executed
    previously:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'The output should be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.21: Deploying the hello function'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_09_21.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 9.21: Deploying the hello function'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: We will receive a **202 Accepted** output along with the function URL, which
    we can use to invoke the function.
  prefs: []
  type: TYPE_NORMAL
- en: 'At this step, there will be a number of Kubernetes objects, including pods,
    services, deployments, and replica sets created in the `openfaas-fn` namespace.
    We can view all these Kubernetes objects with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'The output should be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.22: Verifying the Kubernetes objects'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_09_22.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 9.22: Verifying the Kubernetes objects'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Hence, we have successfully deployed the `hello` function to the OpenFaaS framework.
  prefs: []
  type: TYPE_NORMAL
- en: Listing the OpenFaaS Functions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `faas-cli list` command is used to list all the functions deployed on the
    OpenFaaS framework:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'The output should be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.23: Listing the OpenFaaS functions'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_09_23.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 9.23: Listing the OpenFaaS functions'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'The output of the `faas-cli list` command will include the following columns:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Function** – The name of the function'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Invocations** – The number of times the function has been invoked'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Replicas** – The number of Kubernetes pod replicas of the function'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The value of the **Invocations** column will increase each time we invoke the
    function. The value of the **Replicas** column will increase automatically if
    the invocation rate increases.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `--verbose` flag can be used with `faas-cli list` if you want to get an
    additional column named **Image**, which lists the Docker image used to deploy
    the function, as shown in the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'The output should be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.24: Listing the OpenFaaS functions with the verbose output'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_09_24.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 9.24: Listing the OpenFaaS functions with the verbose output'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'If we want to get details about a specific function, we can use the `faas-cli
    describe` CLI command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'The output should be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.25: Describing an OpenFaaS function'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_09_25.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 9.25: Describing an OpenFaaS function'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Invoking OpenFaaS Functions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now, the function is deployed and ready to be invoked. A function can be invoked
    with the `faas-cli invoke` command, which has the following format:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Now, let's invoke the `hello` function we deployed in the previous step.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following command to invoke the `hello` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the function is invoked, it will ask you to enter the input parameters
    and press *Ctrl + D* to stop reading from the standard input. The output should
    be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.26: Invoking the hello function'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_09_26.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 9.26: Invoking the hello function'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'We can also send the input data to the function, as shown in the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'The output should be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.27:  Invoking the hello function with piping the input'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_09_27.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 9.27: Invoking the hello function with piping the input'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'The `curl` command can also be used to invoke the functions, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'The output should be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![ Figure 9.28: Invoking the hello function with curl'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_09_28.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 9.28: Invoking the hello function with curl'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Hence, we have successfully invoked the `hello` function using both the `faas-cli
    invoke` command and the `curl` command.
  prefs: []
  type: TYPE_NORMAL
- en: Deleting OpenFaaS Functions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `faas-cli remove` command is used to delete a function from the OpenFaaS
    cluster either by specifying the function definition file with the `-f` flag,
    or by explicitly specifying the function name, as shown in the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Or, alternatively, with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'We can remove the `hello` function we created earlier with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'The output should be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.29: Deleting the hello function'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_09_29.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 9.29: Deleting the hello function'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: In these sections, we learned to create, deploy, list, invoke, and delete OpenFaaS
    functions using the `faas-cli` command line. Now, let's move on to an exercise
    where we will be creating our first OpenFaaS function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 30: Creating an OpenFaaS Function with Dependencies'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In this exercise, we are going to create a Python function that can print the
    source IP address by invoking an external API. We will be using the `requests`
    Python module to invoke this API:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new function named `ip-info` using the **Python3** template:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'The output should be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![ Figure 9.30: Creating the ip-info function template'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_09_30.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 9.30: Creating the ip-info function template'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Update the `ip-info/requirements.txt` file to add the `requests` `pip` module,
    which we need to invoke HTTP requests from our function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Update the `ip-info/handler.py` file to invoke the [https://httpbin.org/ip](https://httpbin.org/ip)
    endpoint. This endpoint is a simple service that will return the IP of the originating
    request. The following code will send an HTTP GET request to the [https://httpbin.org/ip](https://httpbin.org/ip)
    endpoint and return the origin IP address:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Build, push, and deploy the `ip-info` function with the `faas-cli up` command.
    The `faas-cli up` command will execute the `faas-cli build`, `faas-cli push`,
    and `faas-cli deploy` commands in the background to build the function, push the
    Docker images to the Docker registry, and deploy the function on the OpenFaaS
    framework:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'The `faas-cli up` command will print the following output, which lists the
    steps of building, pushing, and deploying the `ip-info` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Invoke the `ip-info` function using the `curl` command as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'The output should be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![ Figure 9.31: Invoking the ip-info function template'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_09_31.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 9.31: Invoking the ip-info function template'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Finally, remove the `ip-info` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Thus, we have created, deployed, and invoked an OpenFaaS function named `ip-info`,
    which will print the source IP address of the function invoker.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying and Invoking Functions with OpenFaaS Portal
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The OpenFaaS framework comes with a built-in UI that allows us to deploy and
    invoke functions from the web browser. It can be used to either deploy a custom
    function or a function from the function store. The OpenFaaS function store is
    a freely available set of prebuilt functions. These functions can be deployed
    easily on our existing OpenFaaS cluster.
  prefs: []
  type: TYPE_NORMAL
- en: 'The format of the OpenFaaS portal URL is `http://<openfaas-gateway-endpoint>/ui`.
    Let''s use the following command to derive the OpenFaaS portal URL from the `$OPENFAAS_URL`
    environment variable that we set up previously:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'The output should be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.32: Generating the OpenFaaS portal URL'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_09_32.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 9.32: Generating the OpenFaaS portal URL'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Let's navigate to the output URL of `http://192.168.99.100:31112/ui/`.
  prefs: []
  type: TYPE_NORMAL
- en: 'You should be able to see a portal similar to the following, which we will
    use in the following steps to deploy and invoke OpenFaaS functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](image/C12607_09_33.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.33: Navigating to the OpenFaaS portal URL'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: '**Deploying a Function from the Function Store**'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this section, we will learn how to deploy a function from the function store.
    First, click on the **Deploy New Function** button in the OpenFaaS portal. This
    will prompt you with a dialog box that lists all the functions available in the
    function store. In this section, we are going to deploy the **Figlet** function,
    which can generate ASCII logos from the string input provided. Select **Figlet**
    from the function list and click on the **DEPLOY** button, as shown in the following
    figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](image/C12607_09_34.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.34: Deploying the figlet function'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'That''s all you need to do! This will deploy the **Figlet** function into our
    existing OpenFaaS cluster. Now, you will be able to see a new function named **figlet**
    in the left-hand sidebar of the OpenFaaS portal, as shown in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.35: Verifying the figlet function'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_09_35.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 9.35: Verifying the figlet function'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Let''s invoke the function from the OpenFaaS portal. You need to click on the
    function name, and then the right-hand panel of the screen will display information
    about the function, including the function status, invocation count, replica count,
    function image, and the function URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.36: Figlet function description'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_09_36.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 9.36: Figlet function description'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: We can invoke this function by clicking on the **INVOKE** button available under
    the **Invoke function** section. If the function requires an input value, you
    can provide it under the **Request Body** section before invoking the function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s invoke the **figlet** function by providing the **OpenFaaS** string
    as the request body, as shown in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.37: Invoking the figlet function'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_09_37.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 9.37: Invoking the figlet function'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Now, you can see the expected output of the function. This will be the ASCII
    logo for the input value we provided when invoking the function. Additionally,
    the UI will provide you with the response status code and the execution duration
    for the function invocation.
  prefs: []
  type: TYPE_NORMAL
- en: '**Deploying a Custom Function**'
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's deploy a custom function named `hello` using the Docker image that
    we built previously. Before deploying the functions from the OpenFaaS portal,
    we should have our functions written, and the Docker images built and pushed using
    the `faas-cli` command.
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the **Deploy New Function** button again, and, this time, select the
    **CUSTOM** tab from the dialog box. Now, we need to provide the Docker image name
    and function name as mandatory fields. Let''s provide the `hello` Docker image
    we built previously `(<your-docker-id>/hello`) and provide `hello-portal` as the
    function name and click on the **DEPLOY** button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.38: Deploying the hello-portal function'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_09_38.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 9.38: Deploying the hello-portal function'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Then, you will see the **hello-portal** function added to the left-side menu
    of the OpenFaaS portal:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.39: Verifying the hello-portal function'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_09_39.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 9.39: Verifying the hello-portal function'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Now, you can follow similar steps to the ones that we discussed previously to
    invoke the `hello-portal` function.
  prefs: []
  type: TYPE_NORMAL
- en: OpenFaaS Functions with HTML Output
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this section, we are going to set up an OpenFaaS function to return HTML
    content. This allows us to create both static and dynamic websites using the OpenFaaS
    framework.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we will create the `html-output` function using the **php7** template,
    as shown in the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'The output should be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.40: Creating the html-output function'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_09_40.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 9.40: Creating the html-output function'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Then, we will update the generated `Handler.php` file to return a hardcoded
    HTML string using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `html-output/src/Handler.php` file using your favorite text editor.
    The following command will open this file with the `vi` editor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following content to the file. This is a simple PHP code that will
    return the text, `OpenFaaS HTML Output`, formatted as HTML header text:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, the PHP function is ready with the HTML output. The next step is to configure
    `Content-Type` of the function as `text/html`. This can be done by updating the
    `environment` section of the function definition file. Let''s update the `html-output.yml`
    file with `content_type: text/html` inside the environment section, as shown in
    the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s build, push, and deploy the `html-output` function with the `faas-cli
    up` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the preceding command is executed, we will receive an output similar to
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'The function has now been deployed successfully. Now, we can visit the function
    URL at http://192.168.99.100:31112/function/html-output from a web browser to
    view the output, as shown in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.41: Invoking the html-output function'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_09_41.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 9.41: Invoking the html-output function'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Exercise 31: Returning HTML Based on Path Parameters'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In this exercise, we will create a function that can return one of the two
    static HTML files based on the path parameters of the function URL:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new function named `serverless-website` based on the `php7` template:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'The output should be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.42: Creating the serverless-website function'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_09_42.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 9.42: Creating the serverless-website function'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Create the HTML folder inside `serverless-website` to store all the HTML files:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'Create the first HTML file for the home page (`serverless-website/src/html/home.html`)
    with the following code. This HTML page will output the text, `Welcome to OpenFaaS
    Home Page`, as the page header, and `OpenFaaS Home` as the page title:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'Create the second HTML file for the login page (`serverless-website/src/html/login.html`).
    This HTML page will output a simple login form with two fields for `username`
    and `password` and a **Login** button to submit the form:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'Update the handler file (`serverless-website/src/Handler.php`) to return the
    appropriate HTML file based on the path parameters of the function URL with the
    following code. This function will receive either **home** or **login** as the
    path parameter while invoking. It will then read the path parameter and set the
    HTML page name accordingly based on the path parameter provided. The next step
    is to open the HTML file, read the content of the file, and finally return the
    content of the file as the function response:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'Set `content_type` as `text/html` in `serverless-website.yml`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'Build, push, and deploy the `serverless-website` function using the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is the output of the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'Verify by invoking both the home page and login page on the following URLs:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`http://192.168.99.100:31112/function/serverless-website/home`'
  prefs: []
  type: TYPE_NORMAL
- en: 'The home page should appear as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.43: Invoking the home page of the serverless website function'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_09_43.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 9.43: Invoking the home page of the serverless website function'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Next, run the following URL: `http://192.168.99.100:31112/function/serverless-website/login`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The login page should look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.44: Invoking the login page of the serverless website function'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_09_44.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 9.44: Invoking the login page of the serverless website function'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Thus, we have successfully parsed HTML based on the path parameters.
  prefs: []
  type: TYPE_NORMAL
- en: OpenFaaS Function Observability
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Observability is a critical feature of every production system. This allows
    us to observe the health of the system and activities performed thereon. Once
    our applications are deployed and running in production, we need to make sure
    they are running as expected in terms of functionality and performance. Any service
    downtime can have a negative impact on the organization. So, it is very critical
    to observe the important application metrics, such as CPU usage, memory usage,
    request count, response duration over time, and then analyze for any anomalies.
  prefs: []
  type: TYPE_NORMAL
- en: 'OpenFaaS comes built-in with **Prometheus**, which can be used to collect function
    metrics. Prometheus contains a time series database, which can be used to store
    various metrics over time. The OpenFaaS API gateway collects metrics related to
    the function invocation and stores them in Prometheus. The following table shows
    the metrics exposed by the OpenFaaS API Gateway and stored with Prometheus:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.45: Function metrics with descriptions'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_09_45.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 9.45: Function metrics with descriptions'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: We can use the **Prometheus** dashboard to visualize these metrics.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to expose the **Prometheus** deployment created during the installation.
    Execute the following command to expose Prometheus as a `NodePort` service:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'This will expose the Prometheus deployment on a random port above **30,000**.
    Execute the following commands to get the URL of the **Prometheus** UI:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'The output should be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.46: Generating the Prometheus URL'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_09_46.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 9.46: Generating the Prometheus URL'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: For me, the `PROMETHEUS_URL` output value is http://192.168.99.100:30479/graph.
    But the `<minikube-ip>` and `<node-port>` values may be different.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can view the metrics exposed by Prometheus using the UI, as shown in the
    following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.47: Prometheus UI'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_09_47.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 9.47: Prometheus UI'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Type `gateway_function_invocation_total` in the **Expression** area and click
    on the **Execute** button. This will list the results under the **Console** tab.
    We can click on the **Graph** tab as we need to view the function invocation count
    in a line graph. Click on the **Add Graph** button available in the lower-left
    corner if you want to add this graph permanently to the Prometheus dashboard,
    as shown in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](image/C12607_09_48.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.48: Prometheus graph for the gateway_function_invocation_total metric'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Invoke the available functions multiple times so that we can view the statistics
    of these invocations from the Prometheus dashboard.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to the Prometheus dashboards that we discussed, we can also use
    **Grafana** to visualize the metrics stored in Prometheus. **Grafana** is an open
    source tool used to analyze and visualize metrics over a period of time. It can
    be integrated with multiple data sources such as **Prometheus**, **ElasticSearch**,
    **Influx DB**, or **MySQL**. In the next exercise, we are going to learn how to
    set up Grafana with OpenFaaS and create dashboards to monitor the metrics stored
    in the Prometheus data source.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 32: Installing an OpenFaaS Grafana Dashboard'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In this exercise, we are going to install a Grafana dashboard to view the metrics
    from the **Prometheus** data source. Then, we will import another OpenFaaS dashboard
    into Grafana:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the `grafana` deployment in the `openfaas` namespace using the `stefanprodan/faas-grafana:4.6.3`
    Docker image:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'The output should be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.49: Creating the Grafana deployment'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_09_49.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 9.49: Creating the Grafana deployment'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Expose the `grafana` deployment using the `NodePort` service:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'The output should be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.50: Exposing the grafana port'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_09_50.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 9.50: Exposing the grafana port'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Find the URL of the `grafana` dashboard using the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'The output should be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](image/C12607_09_51.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.51: Generating the grafana URL'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Navigate to the `grafana` URL using the URL printed in the previous step:![](image/C12607_09_52.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 9.52: Grafana UI'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Log in to **Grafana** using the default credentials (the username is `admin`
    and the
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'password is `admin`). The output should be as follows:![Figure 9.53: Grafana
    dashboards'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/C12607_09_53.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 9.53: Grafana dashboards'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'From the **Grafana menu ()** in the top-left corner, as highlighted in *Figure
    9.53*, select **Dashboards** > **Import**. Provide the ID of **3434** in the **Grafana.com
    Dashboard** input box and wait for a few seconds to load the dashboard data:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.54: Importing the new dashboard'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_09_54.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 9.54: Importing the new dashboard'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'From this screen, select **faas** as the Prometheus data source and click on
    **Import**, as shown in the following figure:![Figure 9.55: Importing the new
    dashboard'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/C12607_09_55.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 9.55: Importing the new dashboard'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Now you can see the metrics in the new dashboard:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.56: OpenFaaS serverless Grafana dashboard'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_09_56.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 9.56: OpenFaaS serverless Grafana dashboard'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Thus, we have successfully set up Grafana dashboards to visualize the metrics
    stored in Prometheus.
  prefs: []
  type: TYPE_NORMAL
- en: OpenFaaS Function Autoscaling
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Autoscaling is a feature available in OpenFaaS that scales up or scales down
    function replicas based on demand. This feature was built using both **Prometheus**
    and the **Alert** **Manager** components available with the OpenFaaS framework.
    Alert Manager will fire alerts when the function invocation frequency exceeds
    the defined threshold.
  prefs: []
  type: TYPE_NORMAL
- en: 'While deploying the functions, the following labels are used to control the
    number of minimum replicas, maximum replicas, and the increase/decrease factor
    of the functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '`com.openfaas.scale.min` – This defines the initial number of replicas, which
    is 1 by default.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`com.openfaas.scale.max` – This defines the maximum number of replicas.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`com.openfaas.scale.factor` – This defines the percentage of pod replica increase
    (or decrease) when the Alert Manager fires the alerts. By default, this is set
    to **20%** and should have a value between **0** and **100**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When OpenFaaS is deployed on Kubernetes, the Horizontal Pod Autoscaling feature
    from the Kubernetes framework can also be used to autoscale functions based on
    demand, as an alternative to the built-in autoscaling feature available with the
    OpenFaaS framework.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s now deploy the `figlet` function from the OpenFaaS function store to
    check the autoscaling feature in action:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'The output should be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.57: Deploying the figlet function'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_09_57.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 9.57: Deploying the figlet function'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Now we can put a load on the `figlet` function by invoking it 1,000 times,
    as shown in the following code. The following script will invoke the `figlet`
    function 1,000 times by providing the `OpenFaaS` string as the input for the function
    and sleeps for 0.1 seconds in between each invocation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: Navigate to the **Grafana** portal and observe the increasing number of replicas
    for the `figlet` function. Once the load completes, the replica count will start
    scaling down and go back to the `com.openfaas.scale.min` count of 1 function replica.
  prefs: []
  type: TYPE_NORMAL
- en: 'The output should be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.58: Verifying the autoscaling feature'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_09_58.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 9.58: Verifying the autoscaling feature'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: In this section, we covered function autoscaling, we discussed what function
    autoscaling is, and the configuration we can use to set the minimum replica count,
    the maximum replica count, and the scale factor. Finally, we deployed a sample
    function, performed a load on the function, and observed the autoscaling functionality
    on a Grafana dashboard.
  prefs: []
  type: TYPE_NORMAL
- en: 'Activity 9: OpenFaaS Form Processor'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this activity, we will be creating a website for a brand that will have a
    contact form for potential customers to contact the brand personnel. We will be
    using **OpenFaas** extensively for this website.
  prefs: []
  type: TYPE_NORMAL
- en: Imagine that you are a freelancer and you want to create a website to increase
    your brand visibility. This website needs to have a "Contact Us" form that allows
    potential customers to contact you. You decided to create this website using serverless
    technologies and OpenFaaS was selected as the framework for this task.
  prefs: []
  type: TYPE_NORMAL
- en: 'Execute the following steps to complete this activity:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a SendGrid ([https://sendgrid.com](https://sendgrid.com)) account to
    send emails and save the API key.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create the "Contact Us" form using HTML and return the HTML using an OpenFaaS
    function. The following is sample code that achieves the functionality of an HTML
    form with input fields for `name`, `email`, and `message` and a `submit` button;
    CSS to add styles to the HTML form; and a JavaScript function, which will be triggered
    when the user clicks on the `Submit` button and sends the form data as a `POST`
    request to the `form-processor` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: Create the `form-processor` function, which takes the form values from the Contact
    Us form and sends an email to a specified email address with the information provided.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Invoke the **Contact Us** form function using a web browser and verify the email
    delivery.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The contact form should look as shown in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.59: The Contact Us form'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_09_59.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 9.59: The Contact Us form'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'The email received from the contact form should look as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.60: Email received from Contact Us form'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/C12607_09_60.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 9.60: Email received from Contact Us form'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The solution to the activity can be found on page 444.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We started this chapter with an introduction to the OpenFaaS framework and continued
    with an overview of the components available with the OpenFaaS framework. Next,
    we looked at how to install `faas-cli` and the **OpenFaaS** framework on a local
    `Minikube` cluster.
  prefs: []
  type: TYPE_NORMAL
- en: Then, we started looking at **OpenFaaS** functions. We discussed how we can
    use `faas-cli` to create the function templates, build and push function Docker
    image, and deploy the function to the **OpenFaaS** framework. Then, we learned
    how to invoke the deployed functions with the `faas-cli` command and `curl` command.
    Next, we introduced the **OpenFaaS** portal, which is the built-in UI for the
    OpenFaaS framework.
  prefs: []
  type: TYPE_NORMAL
- en: We also learned how we can set up an **OpenFaaS** function to return HTML content
    and return different content based on provided parameters. We configured the **Prometheus**
    and **Grafana** dashboards to visualize the function metrics, including invocation
    count, invocation duration, and replica counts. Then, we discussed the function
    autoscaling feature, which scales up or scales down function replicas based on
    demand. We performed a load test on a function and observed autoscaling in action
    with Grafana dashboards.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, in the activity, we built the frontend and backend of a Contact Us
    form of a website using the **OpenFaaS** framework.
  prefs: []
  type: TYPE_NORMAL
- en: Through the concepts and the various exercises and activities presented in this
    book, we have equipped you with all the skills you need to use serverless architectures
    and the state-of-art container management system, Kubernetes.
  prefs: []
  type: TYPE_NORMAL
- en: We are confident that you will be able to apply this knowledge toward building
    more robust and effective systems and host them on cloud providers such as **AWS
    Lambda**, **Google Cloud Function**, and more. You will also be able to use the
    highly effective features of best-in-class frameworks such as **OpenFaaS**, **OpenWhisk**,
    **Kubeless**, and more.
  prefs: []
  type: TYPE_NORMAL
