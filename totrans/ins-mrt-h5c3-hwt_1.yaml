- en: Chapter 1. Instant Migration to HTML5 and CSS3 How-to
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Since its inception in 1991, HTML has changed only a handful of times. In this
    fast-paced digital age, it is very unusual for one of the most popular technologies
    to change so slowly. From the table-based layouts to div-based architectures,
    from HTML's primary specifications to backward-compatible XHTML websites, from
    inline styling to external dynamic stylesheets, the adoption of the technological
    advancement has progressed at a snail's pace.
  prefs: []
  type: TYPE_NORMAL
- en: Right after December 1999, when the HTML 4.01 specification was published, the
    focus of the **World Wide Web Consortium** (**W3C**) and the working groups shifted
    to XHTML and CSS. The move of jumping between various coding practices, for simple
    tag-based documentation and for fallback compatibilities to earlier versions,
    has left a majority of the web pages with broken, inconsistent, and nonstandard-oriented
    code.
  prefs: []
  type: TYPE_NORMAL
- en: In today's times, when a web presence is considered equal to a real estate or
    shop front, it becomes essential for the web pages to be accessible, efficient,
    lean, fast, and semantically correct for higher visibility in the search results.
  prefs: []
  type: TYPE_NORMAL
- en: Welcome to the *Instant Migration to HTML5 and CSS3 How-to* handbook. This book
    will provide you with all the information that you need to get up to speed while
    migrating your current website to HTML5, the new web standard by W3C.
  prefs: []
  type: TYPE_NORMAL
- en: In the coming recipes, we will go through various examples to help you migrate
    your current website without changing any of the existing content/presentation
    to HTML5\. We will also address any compatibility issues that your website might
    face in the process and suggest appropriate solutions, and further discuss some
    excellent new features of the upgrade.
  prefs: []
  type: TYPE_NORMAL
- en: Analysis of the current website (Must know)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before the migration of any website, we need to analyze and check the current
    state of documents and visitors. This exercise will help us in getting an outline
    of all the resources, libraries, and dependencies that can be upgraded.
  prefs: []
  type: TYPE_NORMAL
- en: A quick analysis of visitors will help us determine the most common browsers
    used by visitors and whether there is any specific browser (read IE6) that we
    can exclude from this upgrade. If a large part of the visitors' demographic is
    consistently using outdated browsers to access your website, this gathered information
    will guide us in setting the code rules or fallback options for those visitors.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To begin the analysis, all we need is access to Google Analytics, or a similar
    tracking service integrated in the website's dashboard. For example, we will have
    a look at the visitor trends of my website, which is [http://www.dushyantkanungo.com](http://www.dushyantkanungo.com),
    for a certain duration of time.
  prefs: []
  type: TYPE_NORMAL
- en: You can do it with your current website and a word processor (pencil/paper)
    to keep track of issues we find on our way.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The website [http://www.dushyantkanungo.com](http://www.dushyantkanungo.com)
    uses Google Analytics for visitor tracking, which can be accessed from [http://www.google.com/analytics](http://www.google.com/analytics).
    After navigating to **Audience** | **Technology** | **Browser & OS** from the
    left-hand side column, here is what we get for a specific period:![How to do it…](img/5749OT_01_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Based on the preceding stats provided by Google Analytics, we now know that
    over 75 percent of the visitors to this website were using either Google Chrome
    or Firefox and about 20 percent traffic was generated from IE and Safari.
  prefs: []
  type: TYPE_NORMAL
- en: Moving further in, we can see that the ratio of the older versions of IE, which
    were used to visit the website, becomes nominal and hence, we can choose coding
    practices to either support or exclude them.![How to do it…](img/5749OT_01_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A similar analysis with operating systems can tell us about the number of visitors
    coming from mobile devices or varying screen resolutions. This helps us in designing
    the support for a range of end users in the target demographic.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we need to check the current validation status of the website with a W3C
    validator at [http://validator.w3.org](http://validator.w3.org). This will tell
    us if there are any known issues with the content markup before we head towards
    the updated version. Just note down or copy the errors in a document for future
    reference.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Sometimes, old websites have links to external resources that may have moved
    or no longer exist. Broken links from a web page are always frowned upon, not
    just by the visitors but also by the crawlers as well.
  prefs: []
  type: TYPE_NORMAL
- en: To examine the current status of those links and to rectify them in due course,
    we can use a small utility called **Xenu's Link Sleuth** (download it from [http://xenus-link-sleuth.en.softonic.com](http://xenus-link-sleuth.en.softonic.com)),
    which is a portable freeware, to generate a report on any broken link the site
    may have.
  prefs: []
  type: TYPE_NORMAL
- en: Moving ahead, using Firefox or Chrome, you can check the time taken by the page
    to load by right-clicking anywhere on the page and selecting **Inspect Element**
    | **Network**. Then we have to refresh the page to see the real-time results of
    the time taken by all the requests to the server from the page.![How to do it…](img/5749OT_01_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You may like to check whether scripts for external widgets or any large image
    file is taking a long time to load, hampering the performance of the website.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The knowledge of the target audience, browsers, known content-based broken mark-up
    information, and linking structure will help you improve the final migrated product
    quality.
  prefs: []
  type: TYPE_NORMAL
- en: Also, you may wish to move from old DHTML/JavaScript utilities to improved jQuery
    libraries, or image-based text to CSS-driven styling for healthy performance.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The relevance of HTML5 is far greater than one expects from a new set of rules
    to write web pages. The simple yet powerful tag comes with a lot of expectations
    from developers as well.
  prefs: []
  type: TYPE_NORMAL
- en: Impact of valid code
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The **Document Type Definition** (**DTD**), represented as `<!DOCTYPE...>`,
    allows browsers to correctly interpret which rules (XHTML, HTML, and so on) have
    been used to write individual web pages, and subsequently render them correctly.
  prefs: []
  type: TYPE_NORMAL
- en: Generic specification for HTML, and later for XHTML, allows browsers to render
    the web page with the best solution possible with or without the valid use of
    HTML tags. This means, if a document is written with a defined DTD as XHTML, it
    will still render and display all the elements that are not closed with specifications
    of XHTML (for example `<br/>`).
  prefs: []
  type: TYPE_NORMAL
- en: The whole point of migrating to a higher standard lies in adopting the optimum
    practices to develop the code so that it can pave the way for future technological
    developments. The biggest argument from browser vendors for not supporting all
    the specifications from W3C on HTML or CSS, remains the lower popularity of the
    current standards and wide numbers of web pages still being developed with faulty
    coding practices.
  prefs: []
  type: TYPE_NORMAL
- en: As a web professional, it is important for us to make sure that we are developing
    web pages that are up to the international standards, semantically correct, and
    endorse the whole purpose of the Internet as a stateless, ownerless, and free
    network to keep the browser vendors on the edge of their seats.
  prefs: []
  type: TYPE_NORMAL
- en: Importance of HTML5
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'It is not that difficult to understand the reason behind so much hullabaloo
    and noise about HTML5\. To put things in a clear perspective, here are 5 S''s
    of HTML5:'
  prefs: []
  type: TYPE_NORMAL
- en: '**File size**: The file size differences with HTML5 using new semantic sectioning
    tags will be marginally smaller than XHTML. With various new tags for tasks that
    needed external support or longer syntaxes, we have a much cleaner and more powerful
    HTML specification now.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Semantics**: The semantics of HTML5 standardizes existing coding practices
    to help machines and humans alike, in reading and understanding the code. This
    also paves the way for scalable and maintenance-friendly websites.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Simplicity**: New easy tags prove more than helpful in defining the structure
    of the document than ever before. This keeps the structure simple and easy to
    understand during maintenance or handover.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Support**: With wide varieties of devices and browser support, it is now
    easier to create rich web-based applications without depending on third-party
    plugins on the visitor end. Combined with CSS3, HTML5 comes up with everything
    from beautiful typography to external fonts, gradient colors to rounded edges,
    and much more.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**SEO**: For business owners and marketing managers, HTML5 migration proves
    to be an asset investment, which has a strong potential of returns in the long
    run. With higher content-to-code ratio, semantically located articles, and previously
    available (and actively encouraged with HTML5) microformats data, it is far easier
    for search crawlers to differentiate between genuine information and forced SEO
    practices.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Semantic Web in a nutshell
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'According to the W3C:'
  prefs: []
  type: TYPE_NORMAL
- en: '*"The Semantic Web provides a common framework that allows data to be shared
    and reused across application, enterprise, and community boundaries."*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: In simple terms, this means that distinct modules of a web page such as header,
    footer, content, and so on can be individually identified and extracted by specific
    applications and crawlers for various purposes. Semantics in HTML5 gives an identity
    to the one-dimensional `DIV` tags and helps the websites to be smarter and encourages
    genuine content-based web pages.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example of a very fundamental structural difference which we will
    discuss in detail later on:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Semantic Web in a nutshell](img/5749OT_01_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Presently, the developers can give IDs of their own choice to style any `DIV`
    tag within the web page. The `ID` for `DIV` of **content** can be `inner-copy`
    or the `ID` for `DIV` of **header** can be `top` and so on in the current practices
    with XHTML and HTML's older versions. This makes it impossible for external applications
    or crawlers to identify the actual content from spam data on the web page.
  prefs: []
  type: TYPE_NORMAL
- en: With HTML5, the new tags such as `HEADER`, `FOOTER`, `NAV`, `ARTICLE`, `ASIDE`,
    or `SECTION,` to name a few, provide a global identification system for various
    sections of a web page.
  prefs: []
  type: TYPE_NORMAL
- en: Finally
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Armed with all the information necessary about the current website and with
    a clear purpose of the exercise, we begin the migration to HTML5.
  prefs: []
  type: TYPE_NORMAL
- en: We will also look at priority hacks and alternate solutions, which can solve
    some of these issues.
  prefs: []
  type: TYPE_NORMAL
- en: The migration begins (Must know)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will take a sample XHTML page with routine features or sections,
    and will transform it into HTML5 without disturbing any of the previous content
    or structure of the website.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First off, get a local copy of your website from FTP and take a backup in some
    other folder for a comparison later. Open one of the HTML documents in the editor.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The example document''s code may look something like the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s add a bit of styling to the preceding HTML page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This is how the page looks in the browser:![How to do it…](img/5749OT_01_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Downloading the example code**'
  prefs: []
  type: TYPE_NORMAL
- en: You can download the example code files for all Packt books you have purchased
    from your account at [http://www.PacktPub.com](http://www.PacktPub.com). If you
    purchased this book elsewhere, you can visit [http://www.PacktPub.com/support](http://www.PacktPub.com/support)
    and register to have the files e-mailed directly to you.
  prefs: []
  type: TYPE_NORMAL
- en: The DOCTYPE
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Browsers identify the documents' type, based on the Document Type Definition
    (DTD), which is declared in the first line of the preceding code by using the
    `DOCTYPE` tag. DTDs define specific rules for the markup language.
  prefs: []
  type: TYPE_NORMAL
- en: 'The DTD in the example code, which is in XHTML 1.0 with transitional rules,
    is defined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The `DOCTYPE` definition for HTML and XHTML documents varies between various
    versions and different rule sets such as `transitional`, `loose`, `strict`, or
    `frameset`. The problem of memorizing many different lines of code for various
    document versions or rule definitions is resolved in HTML5 by just using:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Short and simple.
  prefs: []
  type: TYPE_NORMAL
- en: The root element
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Moving ahead, we come to the root element with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'As we have already established the document type with `DOCTYPE` in the first
    line of the code, there is no need to declare it again. This truncates the tag
    to its primary form with the following language declaration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The head element
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The first thing that we declare in the head of any HTML page is for the character
    encoding. This makes the browser understand and helps translate if we have used
    any special character in the content. The character encoding is defined within
    a `Meta` tag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'And once again, this requires a declaration of content type for the third time
    in one page. After removing the unwanted code and repetitive declarations, this
    truncates to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'By looking at the migrated code up to this point, we get the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The body element
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The simplifies the `div` elements for common HTML documents as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'HTML5 gives us a universal identification for these `DIV` tags for individual
    identification:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The `DIV` tag `sidebar` can be identified as unique with the `<aside>` tag.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let us put all the new tags in the main code and here is what it will look
    like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Please note that HTML5 does not have any `<wrapper>` or `<container>` tags,
    and the use of the `DIV` tag is still a valid and acceptable practice with HTML5\.
    The `<div id="wrapper">` or `<div id="container">` tag declarations are still
    commonly used to define the actual width of the page.
  prefs: []
  type: TYPE_NORMAL
- en: The CSS
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: With the newly truncated HTML code, we need to change the CSS as well. The CSS
    with HTML5 as elements helps in reducing CSS selectors for many tag elements.
    Hence, no prefixes are required for `CLASS` or `ID` designations on sectioning
    tags in the stylesheet for these elements; for example, `p.intro` and so on.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: The compatibility scenarios
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: At present, only few, less popular browsers support all the block-based display
    for the new tags. To solve this problem, we have to create the definitions for
    browsers that *do not* yet understand the new semantic sectioning tags shown.
    Some browsers (certain versions of Internet Explorer) will need these to be explicitly
    created.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to define this, we just need to add the preceding code snippet at
    the top of the CSS file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Further semantic sections
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you look closely at the code that we are using in the example, you will find
    that there are two `H1` and `H2` tags in constant use. One is for the header in
    the web page and another is for the content. This may result in confusion for
    the crawlers and may result in multiple occurrences of the headings on some pages.
  prefs: []
  type: TYPE_NORMAL
- en: To sort this issue, we can define *header groups* or the `HGROUP` element.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, the first set of headers become:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'And the second group becomes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'For multiple header occurrences on the page, which acts as a landing page for
    a particular section of articles, this can be appended for easy manipulation for
    a specific group:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The styling for the headers can be done with the following selectors:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: This not only makes it easy to manipulate any specific set of headings, but
    also helps in generating a neat CSS file.
  prefs: []
  type: TYPE_NORMAL
- en: Figures and captions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If we look at all the textbooks or newspapers, it is a common practice to use
    figure captions with each image or graphic to provide a complete visual explanation.
    Looking at the web pages with the plain `<img>` element, we have to provide captions
    using a manual `div` element with all the additional properties associated with
    it.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'HTML5 allows us to chunk out figures and images with the `FIGURE` element and
    caption with a nested `FIGCAPTION` element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'This will output the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figures and captions](img/5749OT_01_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Use a small styling for the center alignment of the caption, if needed, and
    we have a semantically correct graphic, which also by abides the accessibility
    and **Creative Commons** rules.
  prefs: []
  type: TYPE_NORMAL
- en: Form elements
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Form elements in the previous versions of HTML were highly dependent on JavaScript
    support for certain basic tasks such as **placeholders** and **required data**.
    With HTML5, we get several new attributes to support the `form` and `input` elements.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some of these attributes are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '| `autocomplete` | `height and width` |'
  prefs: []
  type: TYPE_TB
- en: '| `autofocus` | `list` |'
  prefs: []
  type: TYPE_TB
- en: '| `form` | `min and max` |'
  prefs: []
  type: TYPE_TB
- en: '| `formaction` | `multiple` |'
  prefs: []
  type: TYPE_TB
- en: '| `formenctype` | `pattern (regexp)` |'
  prefs: []
  type: TYPE_TB
- en: '| `formmethod` | `placeholder` |'
  prefs: []
  type: TYPE_TB
- en: '| `formnovalidate` | `required` |'
  prefs: []
  type: TYPE_TB
- en: '| `formtarget` | `step` |'
  prefs: []
  type: TYPE_TB
- en: There are still some gaps in browser support for these attributes, but with
    the new IE10, Microsoft has promised to bridge this gap to maximum capacity.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are some of the most commonly used attributes for HTML5 form elements:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Putting in practice, for autofocus:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Using an image for a button:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Required field:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Placeholder text in a form input:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Input types
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Furthermore, the new input types in HTML5 reduce a lot of additional scripting
    required by the developers. These new input types are:'
  prefs: []
  type: TYPE_NORMAL
- en: '| `color` | `range` |'
  prefs: []
  type: TYPE_TB
- en: '| `date` | `search` |'
  prefs: []
  type: TYPE_TB
- en: '| `datetime` | `tel` |'
  prefs: []
  type: TYPE_TB
- en: '| `datetime-local` | `time` |'
  prefs: []
  type: TYPE_TB
- en: '| `email` | `url` |'
  prefs: []
  type: TYPE_TB
- en: '| `month` | `week` |'
  prefs: []
  type: TYPE_TB
- en: '| `number` |   |'
  prefs: []
  type: TYPE_TB
- en: All the new input types are supported by Google Chrome and Opera at the time
    this book is being written, but there are still some inconsistencies with other
    browsers.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s have a look at some of the applications of these input types:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Color picker:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Date picker:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Validated e-mails:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Range selector:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: HTML5 standardizes common coding practices and creates a set of more semantically-orientated
    sectioning tags (for example, `header`, `nav`, `footer`, and so on). This promotes
    machine-readability, interoperability, and reusability of content data.
  prefs: []
  type: TYPE_NORMAL
- en: Eliminating all of the repetitive content in the `DOCTYPE` declaration and primary
    syntax, which announces the document to the browser and other applications about
    its format, makes it easier for the developers to structure and organize the content.
  prefs: []
  type: TYPE_NORMAL
- en: With the removal of the need to overuse the `DIV` tags with `ID` or `CLASSES`
    by the introduction of semantic sectioning tags such as `header`, `footer`, `nav`
    and so on, the code now looks much cleaner and semantically correct.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One might need some clarifications about the utilities of specific tags that
    can be used in place of each other. The **Section versus Article** and **Menu
    versus Nav** tags are explained here.
  prefs: []
  type: TYPE_NORMAL
- en: Section versus Article
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There are still some arguments about the nesting of the `<section>` and `<article>`
    tags among the developers' community. Some developers prefer to call the content
    `DIV` as `<section>` and put multiple `<article>` tags inside, and some prefer
    to have one `<article>` tag with multiple `<section>` tags.
  prefs: []
  type: TYPE_NORMAL
- en: An `article` tag is recommended to be used for a piece of content that could
    be syndicated in its entirety and still make sense in a different context (as
    in a magazine article).
  prefs: []
  type: TYPE_NORMAL
- en: The `section` tag is generally recommended to be used in a page of content to
    denote an area that is thematically distinct from another area on a page; for
    example, a news area and a blog area.
  prefs: []
  type: TYPE_NORMAL
- en: Menu versus Nav
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Just like `section` and `article`, we have another set of similar sounding elements
    in `nav` and `menu`.
  prefs: []
  type: TYPE_NORMAL
- en: According to W3C, the `nav` element represents a section of a document that
    links to other documents or to parts within the document itself; that is, a section
    of navigation links and the `menu` element is used to define context menus and
    toolbars.
  prefs: []
  type: TYPE_NORMAL
- en: In short, use `nav` for main navigation and `menu` for on-page applications.
  prefs: []
  type: TYPE_NORMAL
- en: Microformats – the smarter Web(Should know)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'According to [www.microformats.org](http://www.microformats.org):'
  prefs: []
  type: TYPE_NORMAL
- en: '*"Designed for humans first and machines second, microformats are a set of
    simple, open data formats built upon existing and widely adopted standards."*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Though **microformats** already existed and was much in practice prior to the
    HTML5 specifications announcement from W3C, their common motto of a semantic way
    of coding enhanced the status of microformats many fold.
  prefs: []
  type: TYPE_NORMAL
- en: Using microformats does not affect any visual aspect of the web page, but these
    selectors can be used to style the presentation of the data if required.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To begin with, let us have a look at the common microformats in use:'
  prefs: []
  type: TYPE_NORMAL
- en: Published microformats
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Published microformats were standardized by W3C even before the HTML5 specifications
    were released. The use of these microformats is heavily recommended and encouraged.
  prefs: []
  type: TYPE_NORMAL
- en: Compound microformats
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**hCard**: This defines the contact information for people and organizations'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**hCalendar**: This defines time-based information, such as events'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**XOXO**: This defines outlines'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Elemental (simple) microformats:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**hAtom**: This is used for marking up Atom feeds from within the standard
    HTML'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**adr**: This defines postal addresses'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**geo**: This defines geographical coordinates (latitude, longitude)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**hMedia**: This defines audio/video content'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**hNews**: This defines news content'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**hProduct**: This defines data about products'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**hRecipe**: This defines data about recipes and foodstuffs'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**hResume**: This defines data such as resumes or CVs'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**hReview**: This defines reviews'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**rel-directory**: This is used for distributed directory creation and inclusion'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**rel-enclosure**: This defines multimedia attachments to web pages'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**rel-license**: This defines the specification of a copyright license'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**rel-nofollow**: This performs an attempt to discourage third-party content
    spam (for example, spam in blogs)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**rel-tag**: This is used for decentralized tagging (folksonomy)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**xFolk**: This defines tagged links'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**XHTML Friends Network** (**XFN**): This is used for social relationships'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**VoteLinks**: This is used to indicate agreement or disagreement with, or
    indifference to, the link''s destination'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Draft microformats
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'There are a few microformats that are under development, which we can choose
    to implement as and when necessary by keeping the future in sight:'
  prefs: []
  type: TYPE_NORMAL
- en: '**hAudio**: This defines audio files and references to released recordings'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**citation**: This defines citing references'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**currency**: This defines amount details of money'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**figure**: This is used to associate captions with images'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**geo extensions**: This defines names of places on Mars, the Moon, and other
    such bodies. It also stores data about altitudes and collections of waypoints
    marking routes or boundaries'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**species**: This defines the names of living things (already used by Wikipedia
    and the BBC Wildlife Finder)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**measure**: This defines physical quantities and structured data-values'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now, we need to list out all generic properties of content, which can be shared
    with various devices. Documents and purposes such as dates can be used in calendars,
    e-mail addresses can be used for address books, a street address can be utilized
    by a maps application, or a CV can be searched by a simple bot if it was defined
    with `hResume`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let us take an example of the most common usage of microformats.
  prefs: []
  type: TYPE_NORMAL
- en: hCard
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Every website generally has a contact page with a registered address of the
    organization behind it. In general, addresses are formed by some common attributes,
    such as the organization name, contact person, building number, street name, city,
    state, postal code, country, phone number, e-mail address, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, the contact details of Packt Publishing, the publishing house
    for this book is:'
  prefs: []
  type: TYPE_NORMAL
- en: Packt Publishing Limited
  prefs: []
  type: TYPE_NORMAL
- en: 2nd Floor, Livery Place
  prefs: []
  type: TYPE_NORMAL
- en: 35 Livery Street
  prefs: []
  type: TYPE_NORMAL
- en: Birmingham
  prefs: []
  type: TYPE_NORMAL
- en: B3 2PB
  prefs: []
  type: TYPE_NORMAL
- en: T +44 0121 265 6484
  prefs: []
  type: TYPE_NORMAL
- en: F +44 0121 212 1419
  prefs: []
  type: TYPE_NORMAL
- en: '`<[contact@packtpub.com](mailto:contact@packtpub.com)>`'
  prefs: []
  type: TYPE_NORMAL
- en: To format this address in HTML without microformats should be simple.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: A simple and very common coding practice! But does it mean something to the
    browser or the crawlers, other than just being another paragraph tag with some
    links and line breaks? No.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we add the `hCard` microformat to the previous data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'The attributes for `hCard` microformats are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '| `vcard` | `email` |'
  prefs: []
  type: TYPE_TB
- en: '| `fn` | `bday` |'
  prefs: []
  type: TYPE_TB
- en: '| `org` | `honorific-prefix` |'
  prefs: []
  type: TYPE_TB
- en: '| `adr` | `honorific-suffix` |'
  prefs: []
  type: TYPE_TB
- en: '| `street-address` | `label` |'
  prefs: []
  type: TYPE_TB
- en: '| `locality` | `logo` |'
  prefs: []
  type: TYPE_TB
- en: '| `postal-code` | `nickname` |'
  prefs: []
  type: TYPE_TB
- en: '| `country-name` | `note` |'
  prefs: []
  type: TYPE_TB
- en: '| `tel` | `photo` |'
  prefs: []
  type: TYPE_TB
- en: '| `fax` | `post-office-box` |'
  prefs: []
  type: TYPE_TB
- en: Date/Time
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: With HTML5, the new entrant in microformats is **Date/Time**. By enhancing the
    new tag `<time>`, we can define the page's age, content relevancy, and calendar
    support for various devices.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'The `time` element from HTML5 gives a time definition to the content which
    is to follow. Now, let''s add some microformats to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'The `datetime` as a single attribute covers both date and time, in one definition.
    If we have to define just the time and not the date then we can do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, together:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Dates can be defined just by the year number, year-month, year-Wxx (where xx
    is the week number of that year), and as we have seen in the preceding example,
    `-T` for the time declaration following the date. The value `+00:00` can be manipulated
    with the GMT time difference to define the local time.
  prefs: []
  type: TYPE_NORMAL
- en: The preceding declaration will be satisfactory enough for various browsers and
    devices to allow the visitor to add a calendar item or a reminder of that event.
  prefs: []
  type: TYPE_NORMAL
- en: rel-nofollow
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `rel-nofollow` microformat has been used by SEO-motivated developers for
    many years now. `rel-nofollow` as an attribute in any `<a>` tag tells the crawlers
    that the following link is an external website or contains data, which the website
    does not require to be crawled or listed in search results.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Microformats use various class names and attributes to define the properties
    of the specific type of data following them. This data can be identified by browsers,
    devices, and crawlers alike. The simple implementation of `hCard` in the web page
    gives the crawlers a sense of authenticity of the information and organizational
    behavior.
  prefs: []
  type: TYPE_NORMAL
- en: Similarly, Date/Time can also be implemented with the publishing date of the
    specific page to make sure that crawlers identify it as the latest information
    and keep the higher ranking as it is.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The application of microformats is critical for the extendibility of data beyond
    the primary application.
  prefs: []
  type: TYPE_NORMAL
- en: Extended data
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In the days of multi-device, multi-platform Internet, the information is not
    bound to the standard HTML visualization anymore. The smarter the content of a
    web page is, the more useful it can be for various applications.
  prefs: []
  type: TYPE_NORMAL
- en: Many XML-based applications, crawlers, bots, and algorithms are being developed
    everyday to identify and sort the content in a meaningful way. While HTML5 is
    redefining the complete approach to coding, microformats are busy making a new
    smarter Web.
  prefs: []
  type: TYPE_NORMAL
- en: Play it on – multimedia (Must know)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Since the inception of HTML, one question has often been debated in the developer
    community. Why do we have an `img` tag for images but there are no `video` or
    `audio` tags to support video or audio files natively? The answer to this question
    was another question about the size of audio/visual files and the speed of the
    Internet.
  prefs: []
  type: TYPE_NORMAL
- en: In recent years, the Internet has transformed. Video-sharing websites such as
    YouTube and Vimeo made it an everyday practice for visitors to upload, share,
    and watch multimedia online. This was possible only with third-party software
    plugins such as Adobe Flash, integrated components from Quicktime Player, Realplayer,
    or Windows Media Player.
  prefs: []
  type: TYPE_NORMAL
- en: In each of these scenarios, it became essential for the visitor to have these
    software and supportive plugins installed locally on their computer. Moreover,
    there was still no standardization about which plugin format should be used by
    the website visited for video purposes.
  prefs: []
  type: TYPE_NORMAL
- en: Loading of all these extensions and plugins within the browser takes a lot of
    time, resulting in a very slow responding computer and connection.
  prefs: []
  type: TYPE_NORMAL
- en: With faster Internet connectivity, browser support, and standardized approach
    definitions from HTML5, native file formats' support for video and audio for browsers
    has solved this problem. Well, almost.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First up, get that analysis of the website we did earlier in the book to see
    the ratio of browsers used by the visitors in recent times.
  prefs: []
  type: TYPE_NORMAL
- en: The `<video>` and `<audio>` tags are supported by all the browsers, including
    IE but only IE9 or higher.
  prefs: []
  type: TYPE_NORMAL
- en: The second move would be to have your media files in `.ogv`, `.mp4`, and `.webm`
    for video, and `.ogg` and `.mp3` for audio. The various file formats for every
    file will be left for the browsers to select and play the best format they support.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `<video>` and `<audio>` elements in HTML5 are not much different from the
    `<img>` element for an image. The only visible difference would be the full use
    of the text without abridging to three characters and an independent closing tag.
  prefs: []
  type: TYPE_NORMAL
- en: Video
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This is how we embed the video in an HTML5 document:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: If the visitor comes from a browser that does not support the `video` tag, we
    can add a message to inform them about the inconvenience.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'To resolve the individual format support for the browsers, we can provide options
    to the browser itself:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we add a few best practices such as video controls, placeholder image,
    type, and codec information for the videos:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: As you can imagine, the `poster="movie.jpg"` declaration refers to an image
    that will be displayed in the place of the video till the visitor clicks on the
    controls to play the video.
  prefs: []
  type: TYPE_NORMAL
- en: The `type` and `codecs` attributes are included to tell the browser the specific
    compression version or format used in that particular file, hence saving the time
    it will spend on scanning the video and matching the compression from the library
    of inbuilt codecs.
  prefs: []
  type: TYPE_NORMAL
- en: Audio
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Once you have understood the `video` element, the `audio` element follows suit.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: The controls can be used just as in the preceding example or as `controls="controls"`,
    depending upon the developer's method of choice.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As mentioned earlier, the arrival of the native `video` and `audio` elements
    of HTML was delayed because of the speed and data size practicalities on the networks.
  prefs: []
  type: TYPE_NORMAL
- en: In the developed and hotly contested browser market, the browser vendors are
    still calling the shots when it comes to adaptation of any new browser-based technologies.
    This is exactly why we need multiple file formats for both the audio and video
    files on the server. The browsers choose the file format that *they* have proper
    licensing agreements to support and leave the rest as it is. If nothing suitable
    is found, the placeholder message appears for the visitor.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It is not always practical to have multiple file formats of media files because
    of their file sizes. The best approach for developers here is to decide on the
    range of browsers they are planning to support and what format is commonly supported.
  prefs: []
  type: TYPE_NORMAL
- en: File formats
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Here is a list of file formats supported by various browsers natively with
    these two elements:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Video formats |'
  prefs: []
  type: TYPE_TB
- en: '| --- |'
  prefs: []
  type: TYPE_TB
- en: '| Browser | MP4 | WebM | Ogg |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Internet Explorer 9 | YES | NO | NO |'
  prefs: []
  type: TYPE_TB
- en: '| Firefox 4.0 | NO | YES | YES |'
  prefs: []
  type: TYPE_TB
- en: '| Google Chrome 6 | YES | YES | YES |'
  prefs: []
  type: TYPE_TB
- en: '| Apple Safari 5 | YES | NO | NO |'
  prefs: []
  type: TYPE_TB
- en: '| Opera 10.6 | NO | YES | YES |'
  prefs: []
  type: TYPE_TB
- en: '| Audio formats |'
  prefs: []
  type: TYPE_TB
- en: '| --- |'
  prefs: []
  type: TYPE_TB
- en: '| Browser | MP3 | Wav | Ogg |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Internet Explorer 9 | YES | NO | NO |'
  prefs: []
  type: TYPE_TB
- en: '| Firefox 4.0 | NO | YES | YES |'
  prefs: []
  type: TYPE_TB
- en: '| Google Chrome 6 | YES | YES | YES |'
  prefs: []
  type: TYPE_TB
- en: '| Apple Safari 5 | YES | YES | NO |'
  prefs: []
  type: TYPE_TB
- en: '| Opera 10.6 | NO | YES | YES |'
  prefs: []
  type: TYPE_TB
- en: In a general recommendation, `.mp4` and `.ogv` for video, and `.mp3` and `.ogg`
    for audio covers pretty much all browser platforms.
  prefs: []
  type: TYPE_NORMAL
- en: The mobile – the seamless experience (Become an expert)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For a long period of time, the standard desktop resolution used to be 800 x
    600\. There were no doubts in the web developers' and designers' minds about the
    width of the container or wrapper they were choosing.
  prefs: []
  type: TYPE_NORMAL
- en: All the websites had a temporary 760-pixel width defined and hardcoded in the
    code. When resolutions jumped universally to 1024 x 768, all the web professionals
    moved to almost 980 pixels in their choice of width for any web page.
  prefs: []
  type: TYPE_NORMAL
- en: So now, when the devices, which are used to browse the website, range from high-resolution
    tablet computers and smartphones, to your refrigerator (no kidding!), we cannot
    depend on hardcoded fixed-width coding practices.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Media queries have been around for a long time and is valid even now with surprising
    friendliness with the browsers.
  prefs: []
  type: TYPE_NORMAL
- en: 'They were present with previous versions of HTML as well as CSS2\. If you can
    recall the small syntaxes such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: The `media="screen"` or `media="print"` declaration made sure that when the
    page is displayed on a device screen, it uses the `style.css` file, and when it
    is sent to a printer, the properties in the `print.css` file are inherited by
    the document.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, the `print.css` file may just contain a completely different font face,
    width, image sizing, or a new layout altogether or we can have just one CSS file
    with specific CSS properties for a specified media:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: It is not possible for any developer or designer to test their website on each
    and every device-browser combination available out there. This is where we have
    to go back on the analysis we did in the beginning of the book. It may look insignificant
    in numbers, but considering how the website might be rendered on those devices,
    it may cause the visitors to not return or continue browsing on your website.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The media type element is defined by using `@media` and supports the following
    media types:'
  prefs: []
  type: TYPE_NORMAL
- en: '| `print` | `screen` |'
  prefs: []
  type: TYPE_TB
- en: '| `aural` | `tty` |'
  prefs: []
  type: TYPE_TB
- en: '| `braille` | `tv` |'
  prefs: []
  type: TYPE_TB
- en: '| `handheld` | `embossed` |'
  prefs: []
  type: TYPE_TB
- en: '| `all` | `speech` |'
  prefs: []
  type: TYPE_TB
- en: '| `projection` | `3d-glasses` |'
  prefs: []
  type: TYPE_TB
- en: The most common media types in practice are `screen` and `print`.
  prefs: []
  type: TYPE_NORMAL
- en: The @media rule
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For the following examples, we will take *less than* 600px for mobile, a *minimum*
    of 900px for tablet computers, a combination of both of these sizes in one query
    for specific media support, and finally for higher screen resolutions.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Common styles can be defined outside of the `@media` element regularly.
  prefs: []
  type: TYPE_NORMAL
- en: The HTML call for the styles from media queries is the same, and at no point
    needs any additional treatment.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: Too much confusion too soon? There is another way!
  prefs: []
  type: TYPE_NORMAL
- en: The @import rule
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `@import` rule allows you to send media queries to the browsers and imports
    the corresponding style rules from an external CSS file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: These regular files not only save you the trouble of keeping track of the nesting
    parameters in multiple curly brackets, but also only load the required piece of
    code if necessary.
  prefs: []
  type: TYPE_NORMAL
- en: 'Other than the `min-width` and `max-width` parameters, the queries can be set
    for various different purposes such as:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Dimensions:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'Device Aspect Ratio:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'Device Orientation:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'Color:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: An option-based CSS call from the HTML document loads the stylesheet only once,
    and does not respond when the orientation changes or when the browser window resizes.
    It also causes an unnecessary server connection to check and return with a different
    CSS file based on the device.
  prefs: []
  type: TYPE_NORMAL
- en: With media queries defined in the CSS file, it simplifies the way a web page
    reacts to the stylesheet. It allows the identifiers to inherit the properties
    from the stylesheet without causing multiple connections to the server and delays
    in the loading of the web page.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the fast-paced web market, it always helps when a developer knows the user
    preferences in hard numbers.
  prefs: []
  type: TYPE_NORMAL
- en: The current trends
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If we have a look at the report on global trends in [www.StatusCounter.com](http://www.StatusCounter.com),
    it is evidently clear that with the rise of 3G and 4G networks worldwide, mobile
    browsing is definitely on the rise.
  prefs: []
  type: TYPE_NORMAL
- en: '![The current trends](img/5749OT_01_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Another statistic for a relatively shorter period of time can provide us with
    the details of device browsers that were used for mobile browsing for more accurate
    queries and implementation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The current trends](img/5749OT_01_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: RIA – Canvas (Become an expert)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you started your career in web design or development in the late 90s to early
    2000s, there is definitely a good chance that at some point, you've been asked
    to do a zany, cool, and bouncy website using (then) Macromedia Flash.
  prefs: []
  type: TYPE_NORMAL
- en: After it was acquired by Adobe in 2005, Flash transformed from being a stage-based,
    procedural script-running, hard-coded, and embedded object to a **Rich Internet
    Application** (**RIA**).
  prefs: []
  type: TYPE_NORMAL
- en: With the arrival of Adobe Flex as an SDK for Flash's Action Script 3.0, the
    company tried to lure more developers into Flash development. Later, Adobe donated
    Flex to the Apache foundation. All this, and yet no browser vendor ever released
    the Flash plugin integrated with any of their products.
  prefs: []
  type: TYPE_NORMAL
- en: Flash-based applications took time to develop, never had any open source frameworks
    supporting the final product, and came across many memory-hogging security threats.
    The biggest blow to this technology came when Apple decided not to support Flash
    with any of the iPad, iPhone, or iPod devices.
  prefs: []
  type: TYPE_NORMAL
- en: The message was loud and clear. The web needed a new platform to support Rich
    Internet Applications, which can be seamlessly integrated in browsers without
    any third-party plugin requirement at the visitors' end.
  prefs: []
  type: TYPE_NORMAL
- en: Presenting HTML5 Canvas.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The HTML5 `canvas` element provides a canvas (surprise!) with a specified height
    and width inside a web page, which can be manipulated with JavaScript to generate
    graphics and Rich Internet Applications.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It is just the same as it was with video or audio.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: The preceding syntax gives us a blank block element with the specified height
    and width, which can now be identified with some JavaScript by the ID `TestCanvas`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: A variable named `test` is defined with the method `document.getElementByID()`
    to identify a canvas on the web page.
  prefs: []
  type: TYPE_NORMAL
- en: The `getContext` object, which is a built-in HTML5 object, is defined in another
    variable called `col1`. The value `2d` provides properties and methods for drawing
    paths, boxes, circles, text, images, and more.
  prefs: []
  type: TYPE_NORMAL
- en: The `fillRect(x,y,width,height)` method provides four parameters to draw a rectangle
    on the x and y coordinates. Similarly, the `fillStyle()` method defines the fill
    color of the drawing.
  prefs: []
  type: TYPE_NORMAL
- en: 'The output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it…](img/5749OT_01_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The origin of the x and y coordinates lies at the top-left corner of the canvas,
    unlike the graph paper (which most of us are used to), where it lies in the bottom-left
    corner.
  prefs: []
  type: TYPE_NORMAL
- en: 'Appending the graph for multiple columns by additional `getContext` variables
    can be done as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'We get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it…](img/5749OT_01_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The `getContext` variables can be defined with different methods as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'To draw a line we use the `moveTo(x,y)` and `lineTo(x,y)` methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: The `moveTo()` method defines the starting point of the line and the `lineTo()`
    method defines the end point on the x and y coordinates. The `stroke()` method
    without any value assigned to it connects the two assigned points with a line
    stroke.
  prefs: []
  type: TYPE_NORMAL
- en: The `stroke()` and `fill()` are the ink methods used to define the visibility
    of the graphic.
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it…](img/5749OT_01_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'To draw a circle we use the `arc(x,y,r,start,stop)` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: With the `arc()` method, we must use either the `fill()` method or the `stroke()`
    method for a visible area.
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it…](img/5749OT_01_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'For further exploration, here are a few more canvas methods that can be tried
    out:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Text for canvas:'
  prefs: []
  type: TYPE_NORMAL
- en: '`font`: This specifies font properties for text'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fillText(text,x,y)`: This draws normal text on the canvas'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`strokeText(text,x,y)`: This draws stroked text without any fill color'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here are the syntaxes for the preceding properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: '![How to do it…](img/5749OT_01_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'And for the last example, we will do a raster image drawing using the ID into
    the canvas:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: Similar to the ID for Canvas, the image ID is selected by the `document.getElementById()`
    method, and then we can use it as a background for the selected canvas.
  prefs: []
  type: TYPE_NORMAL
- en: The image used with the ID `canvas-bg` can be placed in a hidden `div` tag and
    later can be used as a background for any graph or chart, or any other graphic.
    One of the most practical applications of the text and image drawing on a canvas
    could be the customization of a product with label image and text over it.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are many places where Canvas may be implemented for regular web development
    practices. It can be used to generate real-time charts, product customization
    applications, or more complex or simple applications, depending on the requirement.
  prefs: []
  type: TYPE_NORMAL
- en: We know that Canvas is an HTML5 element and the key (for Canvas) always remains
    with the JavaScript used in it. We get support from all the browsers apart from
    IE8 or below.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It always helps when a developer knows about the resources available at their
    disposal.
  prefs: []
  type: TYPE_NORMAL
- en: Open source JS frameworks for Canvas
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There are many open source JavaScript frameworks and libraries available for
    easy development of the graphics with Canvas. A few noteworthy ones are **KineticJS**
    and **GoJS**. Another framework is **ThreeJS**, which uses WebGL and allows 3D
    rendering for your web graphics.
  prefs: []
  type: TYPE_NORMAL
- en: CSS3 – beautiful yet powerful (Should know)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: CSS3, with every new specification involved in this release, powers HTML5 in
    every step of the way. Just as the case was with cutting down code length and
    fewer server connections in HTML5, CSS3 takes the trend even further.
  prefs: []
  type: TYPE_NORMAL
- en: This is achieved not by any fundamental changes in the existing coding practices,
    but with the introduction of some of the most commonly used styles as native properties,
    such as gradients, rounded corners, drop shadows, and external fonts.
  prefs: []
  type: TYPE_NORMAL
- en: For each of the previously mentioned design styles or properties, designers
    used images, which caused multiple server connections and larger page sizes.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As a designer, it was a routine to use some of the basic design effects to
    achieve the impact your client or managers have requested. Have a look at your
    website and list down if the following properties can be seen on the web page:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Image-based text**: Used because the font may not be found in the visitors''
    device'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Rounded corners for boxes**: Used to highlight a specific bit of information
    or buttons'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Drop shadow effect from Photoshop**: Used for the whole page or headings
    or specific sections of the content, including the navigation'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Gradient background**: Uses small (often 1px wide) PNG files to tile with
    CSS'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Semi-transparent background tiles**: Used for a glossy effect for the whole
    web page on image backgrounds'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Backgrounds**: Uses large image files'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Hover animation effects**: Used for animation using JS or Flash'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now, ready with the list, let us see how we can do it with CSS and without using
    external images or JavaScript. All the things we are going to try here are supported
    by all the browsers in general (sometimes with a few hacks) and IE9 and above.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As usual, IE8 or below may not support a few of these properties but the rest
    are good to go.
  prefs: []
  type: TYPE_NORMAL
- en: External fonts
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The advantage of using external fonts is that now, without worrying about web-safe
    fonts, or in other words, fonts which can be found by default on visitors' computers,
    designers can be more creative without retreating to image-based text.
  prefs: []
  type: TYPE_NORMAL
- en: There are two methods to integrate external fonts in CSS3.
  prefs: []
  type: TYPE_NORMAL
- en: Local fonts
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Locally stored fonts are located on the server just like images or other script
    files, and are imported in the CSS file on load and later are used as font properties.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'Once defined, it can be used at various places as defined regularly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: Web fonts
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Web fonts are imported from the repositories held at third-party servers. The
    **Google Webfonts library** is the best known resource for the job and can be
    accessed at [http://www.google.com/webfonts](http://www.google.com/webfonts).
  prefs: []
  type: TYPE_NORMAL
- en: 'The fonts can be integrated from external websites in different ways. You can
    integrate them in the web page by doing the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also import in a CSS file by applying the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: The call from the CSS file for the fonts remains the same as described in the
    local fonts section.
  prefs: []
  type: TYPE_NORMAL
- en: Drop shadow
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Most managers and clients just love using drop shadows. It gives the design
    a little elevation and depth, which is needed sometimes.
  prefs: []
  type: TYPE_NORMAL
- en: Most often used for navigation bars or for the whole container, the only way
    drop shadows were used before now was by using Photoshop-edited graphics.
  prefs: []
  type: TYPE_NORMAL
- en: There are two types of shadow options given in CSS3 specifications.
  prefs: []
  type: TYPE_NORMAL
- en: Box shadow
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Box shadow is used for block elements and works for the whole area and not for
    the specific text inside it.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: The four parameters are horizontal shadow, vertical shadow, and the fade or
    blur distance of the effect, and color of the shadow. Another parameter called
    `inset` can be used if an inner shadow is required in place of a drop shadow.
  prefs: []
  type: TYPE_NORMAL
- en: 'When this property is called in as the ID property for a given DIV, here is
    what we get:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Box shadow](img/5749OT_01_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Also notice the use of external fonts from the preceding example.
  prefs: []
  type: TYPE_NORMAL
- en: Text shadow
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The other shadow property's utility is clear by its name. Text shadow is used
    when we need to have a shadow for the text.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'This will get us:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Text shadow](img/5749OT_01_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The text shadow property is not supported by any version of IE as of IE9.
  prefs: []
  type: TYPE_NORMAL
- en: Rounded corners
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Designers spend hours sorting out those four corners for any box design if it
    involves rounded corners. If they are present in multiple shapes or sizes, or
    even colors, the image directory often gets filled with these tiny images.
  prefs: []
  type: TYPE_NORMAL
- en: 'Not any more, says CSS3:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'And here is what we get:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Rounded corners](img/5749OT_01_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'A little more adventure:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: '![Rounded corners](img/5749OT_01_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Gradients
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The following example is another image-oriented task simplified by CSS3 gradients.
    And here is how to do it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: Looks tacky, doesn't it? So allow me to explain how this works.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `gradient` property from CSS3 is supported by all browsers, but they do
    it by their own syntax. The general syntax is not supported by any of the browsers
    and it is definitely hilarious. Here is what W3C has proposed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: 'And here are the browser-specific CSS declarations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: Among the three parameters in the preceding code snippet, the first one tells
    us the location of the linear gradient to start and the remaining two are the
    colors. Moreover, the `gradient` property can be controlled by various parameters.
    These include `radial-gradient`, `left top`, `left bottom` and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Since the `gradient` property is only supported in IE10, definition of the fallback
    background colors or images, before the gradient property, is advisable.
  prefs: []
  type: TYPE_NORMAL
- en: Opacity
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To give one block element, usually a DIV, some translucent background the `opacity`
    property from CSS3 is used. The common implementation comes for websites, which
    are designed with an image-based background.
  prefs: []
  type: TYPE_NORMAL
- en: 'The declaration of the property is quite simple and uses scales from `0` to
    `1` where `0` means completely transparent and `1` means opaque:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: 'Opacity is generally supported by all browsers including IE9 and above. For
    IE8 and below, the declaration varies as follows with a scale from `0` to `100`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: Background sizing
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The background sizing property allows us to use an image in the background with
    scaling properties.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: This reduces the image file size used in the background to a considerable size.
  prefs: []
  type: TYPE_NORMAL
- en: Columns
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A very helpful property comes in the form of `columns`. This helps to break
    down the text in a newspaper format in a `DIV` tag.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: This is one of my personal beloved properties in CSS3, but unfortunately doesn't
    come with any IE support. This should not discourage you from using it, as it
    will make any visitor from other good browsers pretty pleased with the easy-to-read
    text.
  prefs: []
  type: TYPE_NORMAL
- en: Transition
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Rollover effects from CSS3 come in the form of the transition property.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: As it is clear by the two parameters passed in the `transition` property, `height`
    and `2s` are direction and time in seconds respectively. Transition can be applied
    with `width` as a parameter of choice.
  prefs: []
  type: TYPE_NORMAL
- en: 'The hover for the given `DIV` element is defined to trigger the transformation.
    The call to the given `DIV` is simple:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: This is another non-IE property but an excellent one to try out.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are a lot of other new properties in the CSS3 specifications, which are
    powerful and diverse in their applications.
  prefs: []
  type: TYPE_NORMAL
- en: A few more properties
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Here are a few more properties from CSS3 for you to try:'
  prefs: []
  type: TYPE_NORMAL
- en: '| `Box-sizing` | `Font-stretch` |'
  prefs: []
  type: TYPE_TB
- en: '| `Rotation` | `Word-break` |'
  prefs: []
  type: TYPE_TB
- en: '| `Box-align` | `Word-wrap` |'
  prefs: []
  type: TYPE_TB
- en: '| `Box-pack` | `Transform` |'
  prefs: []
  type: TYPE_TB
- en: '| `Content` | `Nav-index` |'
  prefs: []
  type: TYPE_TB
- en: Data – smart websites (Become an expert)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The most advanced features of HTML5 are about the data. Now, we can develop
    web-based applications with locally stored files and database on the user's computer.
    These files can later be accessed without any active Internet connection if there
    is a data communication between two or more visitors and you do not wish to engage
    into heavy server traffic.
  prefs: []
  type: TYPE_NORMAL
- en: Offline storage becomes important if we are developing heavy applications for
    users who are on the move or may not have consistent Internet coverage, and we
    want to maintain a seamless experience for the visitors.
  prefs: []
  type: TYPE_NORMAL
- en: '**WebSockets** allow visitors to have a communication channel of their own
    on the web page.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Often, the local storage is used for either mobile-based websites or applications
    involving big chunks of data. To give the visitor quick access to what they are
    looking for, it becomes a clever idea to hold the data in a local storage of the
    computer or mobile device till it is requested.
  prefs: []
  type: TYPE_NORMAL
- en: Google Docs and offline Gmail are two of the many web applications we use on
    an everyday basis. On the mobile platform, compiled HTML5 apps using tools such
    as PhoneGap ([http://phonegap.com/](http://phonegap.com/)) strongly use local
    storage.
  prefs: []
  type: TYPE_NORMAL
- en: WebSockets can be found often on the websites of live sports broadcast where
    visitors can discuss the live events together, or on the tech support websites
    where the visitors can join in a one-on-one discussion with a representative of
    the company.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's have a look at the local storage first and then WebSockets.
  prefs: []
  type: TYPE_NORMAL
- en: Local storage
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now, we have a website or application, which we want to preload and locally
    store for the visitor, to be accessed later or while browsing if the Internet
    connection becomes unstable.
  prefs: []
  type: TYPE_NORMAL
- en: The first thing to remember is the default limit of local storage from HTML5
    is 5 MB for mobile devices. If the cached data size exceeds that limit, the visitors
    will get a message asking them to increase the size of the local storage on their
    device.
  prefs: []
  type: TYPE_NORMAL
- en: If users accept the notification, the application resumes as intended. Otherwise,
    the local storage does not cache at all.
  prefs: []
  type: TYPE_NORMAL
- en: The second thing to remember is that all the files or data asked to be cached
    must be available on the server. The caching takes place on the *everything or
    nothing* principle.
  prefs: []
  type: TYPE_NORMAL
- en: Appcache
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Meet **appcache**, the document type which will tell the browser about all
    the web pages or resources you wish to store locally. With the extension of `.appcache`,
    this file holds the manifest of local storage. Here is how you can call the `.appcache`
    file on the web page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: Easy to understand, the syntax is added to the HTML attribute of the web page
    with an element called `manifest` and here, in a file named `offline.appcache`.
    The `manifest` must be declared in all the web pages you wish to cache locally.
  prefs: []
  type: TYPE_NORMAL
- en: The .htaccess file
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: To declare appcache as a new file/MIME type for the server, we need to declare
    it in the `.htaccess` file *before* trying to cache any data from the server.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is what we need to add in the `.htaccess` file on the server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: The cache manifest
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The valid `.appcache` file can be as small as the primary syntax declaration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding syntax is essential for every manifest file. Comments in the
    cache manifest can be declared with a `#` prefix:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: 'Every cache manifest has three sections which are listed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`CACHE`: This is a list of exact URLs to request and store locally'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`FALLBACK`: These are the files to display when an offline user attempts to
    access an uncached file'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`NETWORK`: These are the resources that are available only while a user is
    online'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here is an example of a cache manifest file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: The `CACHE` is the default property of the cache manifest file. If we are not
    using the other sections, a simple list of files will make sure that it falls
    under the `CACHE` section.
  prefs: []
  type: TYPE_NORMAL
- en: The file URLs can be relative or absolute, based on the complexity of the site
    structure. Any file type, including images, scripts, styles, and HTML documents
    can be cached in the local storage.
  prefs: []
  type: TYPE_NORMAL
- en: The `FALLBACK` section defines the default properties if an uncached resource
    is called. It can be done in different ways as demonstrated in the preceding example,
    such as direct filename fallback, a common sitewide fallback, or a folder or directory-based
    fallback for specific file types.
  prefs: []
  type: TYPE_NORMAL
- en: The `NETWORK` section dictates the list of resources exclusively available when
    online. The `*` means that the rest of the website, which is not mentioned in
    the `CACHE` section, will need an Internet or network connection.
  prefs: []
  type: TYPE_NORMAL
- en: As mentioned before, everything mentioned in the manifest to be cached, must
    be available on the server at the time the website is visited with an Internet
    connection, to be stored locally. It will either cache everything specified in
    the manifest or nothing at all.
  prefs: []
  type: TYPE_NORMAL
- en: To see the cached files on Chrome, type in `chrome://appcache-internals` in
    the address bar.
  prefs: []
  type: TYPE_NORMAL
- en: WebSocket
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: WebSocket is used for two-way communication over a single socket using TCP.
    Presently, it is still being standardized by the W3C; but, the latest versions
    of Chrome and Safari have support for WebSocket.
  prefs: []
  type: TYPE_NORMAL
- en: 'WebSocket is not just a standalone HTML5 feature. In order to use sockets,
    JavaScript services (generally written with `Node.js`) are used. A basic declaration
    for a socket is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: 'To check if your browser supports sockets, run the following script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: In the event of support availability, we can declare the socket events. The
    events for a WebSocket include `open`, `close`, `error`, and `message`. The event
    handlers for each of these events sum up the complete communication between sockets.
  prefs: []
  type: TYPE_NORMAL
- en: '| Event | Handler | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `Open` | `Ws.onopen` | When socket connection is established |'
  prefs: []
  type: TYPE_TB
- en: '| `message` | `Ws.onmessage` | When client receives data from server |'
  prefs: []
  type: TYPE_TB
- en: '| `error` | `Ws.onerror` | When there is an error in communication |'
  prefs: []
  type: TYPE_TB
- en: '| `close` | `Ws.onclose` | When connection is closed |'
  prefs: []
  type: TYPE_TB
- en: The declaration is based on `Ws`, which is the variable name chosen to declare
    WebSocket in the example. The WebSocket has two associated methods called `Ws.send()`
    and `Ws.close()`.
  prefs: []
  type: TYPE_NORMAL
- en: The `send()` method is used to transmit data using the connection. The `close()`
    method would be used to terminate any existing connection.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a complete example in the previously mentioned context:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: 'Now call the script in the body:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: WebSockets work on server-based configurations, which work on TCP and can be
    configured on your localhost WAMP or XAMPP or Apache web servers. Once initiated,
    the protocol hands over the control to the browser for a specific session time,
    which allows the visitors to establish a data connection.
  prefs: []
  type: TYPE_NORMAL
- en: The local storage copies all the files mentioned in the `.appcache` file until
    it is updated. A minor edit in a comment is enough to trigger a fresh reload of
    the data cached on the browser.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Imagination always plays a big role in the adaptation of a new technology. There
    is a lot of support and there are many creative developers willing to show off
    what they can do with this new powerful technology!
  prefs: []
  type: TYPE_NORMAL
- en: Sockets in action
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There are several examples of WebSockets that can be seen around the Internet,
    but due to lack of proper browser support, it is still in its teething stages.
    The best WebSocket chat example can be seen at [http://html5demos.com/web-socket](http://html5demos.com/web-socket).
  prefs: []
  type: TYPE_NORMAL
- en: The transferrable Web (Must know)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We tried to keep the focus of topics in this book on how you can migrate the
    code of the website, without changing any visual appearance, from previous versions
    of HTML or XHTML to HTML5.
  prefs: []
  type: TYPE_NORMAL
- en: Looking closely, the principal structure for a given web page in HTML5 is similar
    to others in terms of the primary elements. Web pages can be maintained with a
    better consistency and quality by developers who did not write them originally.
  prefs: []
  type: TYPE_NORMAL
- en: Results
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now we know that using common element names such as header, footer, section,
    and article makes it easier for machines to render the relevant information when
    needed. This makes communication and readability of the code a lot easier.
  prefs: []
  type: TYPE_NORMAL
- en: It becomes easier to document the properties of semantically correct elements
    in a longer practice and later to maintain them.
  prefs: []
  type: TYPE_NORMAL
- en: Gradient, rounded corners, and drop shadows can be generated in the browsers,
    without going back to the server and asking it for image files to display.
  prefs: []
  type: TYPE_NORMAL
- en: External fonts allow the designers to consider using text for big graphics-based
    text, reducing further file size and network time for the browsers.
  prefs: []
  type: TYPE_NORMAL
- en: Local storage and web sockets allows for offline browsing and a peer-to-peer
    communication channel without putting any real load on to the server.
  prefs: []
  type: TYPE_NORMAL
- en: All this and more is possible because you as a developer or designer wanted
    it to be. The faster we adopt HTML5, the better the Internet and the browsers
    will be.
  prefs: []
  type: TYPE_NORMAL
- en: Future scalabilities
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: HTML5 specifications are still being written. The delay in the official announcement
    of completion has led the two responsible groups, **Web Hypertext Application
    Technology Working Group** (**WHATWG**) and W3C to define the specifications in
    two separate versions.
  prefs: []
  type: TYPE_NORMAL
- en: W3C's **Snapshot** and WHATWG's **Living Standard** will be two separate HTML5
    versions available for the developers. On the one hand, Snapshot will be more
    defined and bound by rules as a benchmark, while Living Standard from WHATWG on
    the other hand, will follow the approach of fixing bugs and adding features as
    we find or develop them.
  prefs: []
  type: TYPE_NORMAL
- en: In simpler terms, WHATWG has decided that there will be no HTML6 and the entirety
    of HTML5 will be referred to as just HTML in due course.
  prefs: []
  type: TYPE_NORMAL
- en: New tags and adaptation of features will be left to the developer community
    and browser vendors. It is expected that the ongoing updates will keep the vendors
    on the edge and will ensure a healthy competition.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A few more tags
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Here are a few new tags from HTML5, which you might like to explore in due course.
    Compatibility issues aside, these new tags are good enough to make your imagination
    fly.
  prefs: []
  type: TYPE_NORMAL
- en: '`<progress>`: This represents the progress of a task'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<meter>`: This defines a scalar measurement within a known range (a gauge)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<command>`: This defines a command button that a user can invoke'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<mark>`: This defines marked/highlighted text'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<wbr>`: This defines a possible line break'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<bdi>`: This isolates a part of text that might be formatted in a different
    direction'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<details>`: This defines additional details that the user can view or hide'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<summary>`: This defines a visible heading for a `<details>` element'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<keygen>`: This defines a key-pair generator field (for forms)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<datalist>`: This specifies a list of predefined options for input controls'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<output>`: This defines the result of a calculation'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In addition to the other new elements, some of the obsolete elements are removed
    from the HTML5 specifications; they are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '| `<acronym>` | `<applet>` | `<basefont>` |'
  prefs: []
  type: TYPE_TB
- en: '| `<big>` | `<center>` | `<dir>` |'
  prefs: []
  type: TYPE_TB
- en: '| `<font>` | `<frame>` | `<frameset>` |'
  prefs: []
  type: TYPE_TB
- en: '| `<noframes>` | `<strike>` | `<tt>` |'
  prefs: []
  type: TYPE_TB
- en: Cool stuff to try
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A wide variety of frameworks and standard scripts are launched by many open
    source communities based on HTML5\. PhoneGap, for one, allows developers to input
    an HTML5-CSS3-JS website and converts it into a mobile app.
  prefs: []
  type: TYPE_NORMAL
- en: The mobile specific version of jQuery named **jQuery Mobile** is completely
    in sync with HTML5 and CSS3, which gives it a semantic approach for the core framework.
  prefs: []
  type: TYPE_NORMAL
- en: Many interactive web-based games and Adobe Flash's HTML5 export plugins prove
    that the future for the `canvas` tag is bright.
  prefs: []
  type: TYPE_NORMAL
- en: All the browser vendors, in order to show off the capabilities of their representative
    products, have developed HTML5 galleries. These galleries ([http://www.chromeexperiments.com/](http://www.chromeexperiments.com/)
    for Google Chrome and [https://developer.mozilla.org/en-US/demos/tag/tech:html5](https://developer.mozilla.org/en-US/demos/tag/tech:html5)
    for Firefox) provide an excellent guide in measuring the true caliber and stretched
    limits of HTML5.
  prefs: []
  type: TYPE_NORMAL
- en: So just get on and move to the next best thing on the websphere. *Move* to HTML5.
  prefs: []
  type: TYPE_NORMAL
