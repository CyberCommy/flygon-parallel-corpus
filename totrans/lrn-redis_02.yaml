- en: Chapter 2. Getting Started with Redis
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Redis is a key-value-based NoSQL datastore developed by Salvatore Sanfilippo,
    launched in 2009\. The name Redis comes from **REmote DIctionary Server**. Redis
    is a high-performing single thread server in C.
  prefs: []
  type: TYPE_NORMAL
- en: Redis can be installed on all POSIX-compliant Unix systems. Though there is
    no production grade release of a Windows system, it can still be installed in
    a Windows environment for development purposes. In this chapter, we will install
    Redis in Windows and Mac OS environments, write programs in Java, and play with
    the in-built client that comes along with the distribution.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Redis on Windows
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Microsoft Open Tech group has ported Redis and maintains it for win32/win64
    machines. There are two ways in which we can get started with installing Redis
    on Windows, and these are listed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Working with prebuilt binaries
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting the code and compiling it in the Microsoft environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For the impatient, downloading the binaries of Redis 2.8 is an easier option.
    First things first, we need to do the following in order to get started:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to [https://github.com/MSOpenTech/redis](https://github.com/MSOpenTech/redis)
    and download the ZIP file under the **Clone in Desktop** button. For this book,
    we are going to download the latest version of Redis, that is, the `redis-2.8.zip`
    file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on the link and save it in a suitable location on your Windows machine.
    I have saved it at `F:\sw2\redis\redis-2.8.zip`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click and unzip the compressed file to a suitable folder. I have named
    the folder as `redis-2.8`, and the folder structure after unzipping looks similar
    to what is shown in the following screenshot:![Installing Redis on Windows](img/1794_02_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Folder structure after unzipping the compressed file
  prefs: []
  type: TYPE_NORMAL
- en: Get inside the `bin` folder. You will find the `release` folder; when you click
    on it, you will have a list of the files inside this folder, as shown in the following
    screenshot:![Installing Redis on Windows](img/1794_02_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Folder structure inside the bin/release folder
  prefs: []
  type: TYPE_NORMAL
- en: Open Command Prompt and run `redis-server.exe`. Provide the `redis-server.exe
    --maxheap 1024mb` heap size and you should see a console window popping up, similar
    to the following screenshot. In the case of Windows 7, the user might be asked
    to trust the software to proceed further.![Installing Redis on Windows](img/1794_02_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Redis server's default startup
  prefs: []
  type: TYPE_NORMAL
- en: 'Note the last line showing on the Command Prompt: **The servers now ready to
    accept connections on port 6379**.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, let's start a prebuilt client, which is shipped with the distribution,
    and connect to the server. The client that we will execute is a command-line interpreter,
    and when we click on it, the client program will be launched:![Installing Redis
    on Windows](img/1794_02_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Redis client is started with the Redis server running
  prefs: []
  type: TYPE_NORMAL
- en: Your simple installation is complete (clustered setup and other management topics
    will be taken up in later chapters).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Downloading the example code**'
  prefs: []
  type: TYPE_NORMAL
- en: You can download the example code files from your account at [http://www.packtpub.com](http://www.packtpub.com)
    for all the Packt Publishing books you have purchased. If you purchased this book
    elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Redis on Mac OS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Installing Redis is really simple on a Mac OS. Follow these steps and you are
    good to go:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Download the package from Internet. For this, you can use the following command:
    `wget http://download.redis.io/releases/redis-2.8.3.tar.gz`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Untar the compressed `tar xzf redis-2.8.3.tar.gz` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This will create a folder; go to the folder by issuing the `cd redis-2.8.3`
    command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Compile the file by issuing the `make` command. This will compile the binaries
    and create a folder structure, as shown in the following screenshot:![Installing
    Redis on Mac OS](img/1794_02_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Folder structure for a Mac distribution
  prefs: []
  type: TYPE_NORMAL
- en: Type the `src/redis-server` command; this will start the server, as shown in
    the following screenshot:![Installing Redis on Mac OS](img/1794_02_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Starting the Redis server in the Apple environment
  prefs: []
  type: TYPE_NORMAL
- en: Your Redis server is running and it is ready to accept the requests in port
    6379\. Open another terminal and go the same folder form where you installed Redis.
    Type the command `src/redis-client`; this will start the client shell, as shown
    in the following screenshot:![Installing Redis on Mac OS](img/1794_02_07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Redis client started in Apple environment
  prefs: []
  type: TYPE_NORMAL
- en: Your client is ready and you are ready for the Hello World program, but before
    you continue, it's better to understand a bit more about the configuration file
    called `redis.conf`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Introduction to redis.conf
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Redis ships with the `redis.windows.conf` file, which is located in the parent
    folder that was created when the distribution's ZIP/tarfile was uncompressed.
    Any customization needed by the server on startup can be done through this configuration
    file. If you need to include the `redis.conf` file, then provide the path to the
    file while the server starts up as an argument.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following message will be displayed on the Command Prompt when you provide
    the configuration file at startup:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Introduction to redis.conf](img/1794_02_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Redis server startup with config path during the startup
  prefs: []
  type: TYPE_NORMAL
- en: 'Redis, as mentioned, is a Unix-based software, which is ported to the Windows
    environment. A lot of configuration parameters are meant for the Unix environment;
    nevertheless, it is always good to know about the parameters that will be beneficial
    to you when moving to a Unix-based environment. These parameters are explained
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Port 6379**: This number indicates that the server will listen to messages
    coming on port 6379\. This port number can be changed to suit your project setup,
    and the server will listen for messages on that port. This will require a server
    restart.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**# bind 127.0.0.1**: This is the IP address that you want your server to bind
    to. By default, this parameter is commented, which means that the server will
    listen to all the interfaces for messages.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Timeout 0**: This means that the server will not close the connection if
    the client is in an idle state.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**tcp-keepalive 0**: This is a command to the server in order to keep the connection
    with the client open. You can make it `SO_KEEPALIVE`, which will indicate the
    server to send an `ACK` message to the client.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**loglevel notice**: This is the log level that you want your server to have.
    The levels of logs that you can have are debug, verbose, notice, and warning.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**logfile stdout** : This is the channel to which you want to send your log
    messages, to the command line in Windows or the terminal in the case of Unix-based
    systems.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**syslog-enabled no**: If this is changed to *yes*, this will send the message
    to the system log.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**dir**: This should be set to the working directory where the user wants to
    run the Redis server. This in turn will tell the Redis server to create files,
    such as server files appropriately.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rest of the configuration parameters can be treated as advanced parameters,
    and we shall be using most of them in subsequent chapters when the need arises.
  prefs: []
  type: TYPE_NORMAL
- en: Hello World in Redis
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section will excite programmers the most. Let's get our hands dirty and
    punch in some code. But, before that, we have to understand that Redis works on
    a client-server model and uses the Redis protocol to communicate with the server.
    For the client to connect to the server, the client has to know the location of
    the server. For this section, I am going to show samples using the redis-cli and
    Java clients.
  prefs: []
  type: TYPE_NORMAL
- en: Hello World using redis-cli
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Start the Redis client Command Prompt (make sure that the server is running).
    Type in the following commands, as shown in the following screenshot, and see
    the outcome:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Hello World using redis-cli](img/1794_02_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Trying simple Set and Get commands using the Redis client
  prefs: []
  type: TYPE_NORMAL
- en: 'There are three parts to the command we wrote. They are explained as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Set`: This command is used to set a value in the Redis server'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MSG`: This is the key for the message to be stored in the Redis server'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Hello World`: This is the value stored in the server for the `MSG` key'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: So, this clears a pattern that we have to keep in mind when working with Redis.
    Remember, Redis is a key-value NoSQL datastore. The syntax for this is `COMMAND
    <space> KEY <space> VALUE`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Continuing with the `Hello world` program, we will do something more. Let''s
    type in `set MSG Learning Redis` we get an error message, and when we type set
    MSG "Hello World", the value that the server is going to return is `OK`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Hello World using redis-cli](img/1794_02_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Overwriting the key with a new value
  prefs: []
  type: TYPE_NORMAL
- en: 'The old value is overwritten with the new value for the given key. Let''s add
    another dimension to this sample, that is, open another client to the already
    existing client Command Prompt we have opened. In the second Command Prompt, let''s
    type the command and key as `get MSG`. The value it''s going to return is again
    `"Hello World"`. This is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Hello World using redis-cli](img/1794_02_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Writing in one client and reading it in another client
  prefs: []
  type: TYPE_NORMAL
- en: At this point, one will wonder what happens if we write a number as a value,
    maybe to store some timestamp, instead of a string.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s have the new command''s key value as `set new_msg 1234`, and when we
    write the command key to retrieve the value as `get new_msg`, we get the result
    `"1234"`. Notice the double quotes around the value; this tells us something more
    about Redis and the way it stores the data, that is, every value stored in Redis
    is of the type string:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Hello World using redis-cli](img/1794_02_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Getting an integer value as a string
  prefs: []
  type: TYPE_NORMAL
- en: The redis-cli tool comes in handy for debugging the solution and executing commands
    to check the system and solution.
  prefs: []
  type: TYPE_NORMAL
- en: The next question that needs to be answered is how to access Redis programmatically.
  prefs: []
  type: TYPE_NORMAL
- en: Hello World using Java
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the previous section, you learned how to work with the `redis-cli.exe` application
    in order to connect to the Redis server. In this section, we will introduce a
    Java client API to connect to the Redis server and fire some commands. In all
    reality, for Redis to be used in a solution, it needs an API to connect to the
    server. There are some other attributes that an API needs rather than just connecting
    to the server, passing on commands and command parameters, and returning the result,
    but we will cover this in later chapters.
  prefs: []
  type: TYPE_NORMAL
- en: The Java client API chosen to demonstrate the examples in this book is Jedis.
  prefs: []
  type: TYPE_NORMAL
- en: There are three steps to run the `"Hello World"` example in Java. They are explained
    in the sections that follow.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Jedis and creating an environment
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Jedis** is *Apache License 2.0* Java client for Redis. This client will be
    used for the samples demonstrated in this book. So, the most important thing to
    get for this client is that you need to make sure that you have a development
    environment. For this book, we have chosen Eclipse as the development environment
    ([http://www.eclipse.org/downloads/](http://www.eclipse.org/downloads/)). If you
    don''t have Eclipse, you can grab a copy and install it (it''s free and licensed).
    The examples of this book will work equally well with other integrated development
    environments. Now, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open Eclipse and create a project called `learning redis`, as shown in the following
    screenshot:![Installing Jedis and creating an environment](img/1794_02_13.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Creating a project in Eclipse
  prefs: []
  type: TYPE_NORMAL
- en: If you are using Maven, then add the following dependencies for Jedis:![Installing
    Jedis and creating an environment](img/1794_02_14.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Maven dependencies for Jedis
  prefs: []
  type: TYPE_NORMAL
- en: If you are using any other build tools, follow the instructions to add the dependency
    for Jedis accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: Writing the program
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The following program in Java is written with Redis as a datastore:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Make sure that your Redis server is up and running. In this sample, the port
    used here is the default port 6379.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s understand, step by step, what we are doing in the program:'
  prefs: []
  type: TYPE_NORMAL
- en: We are setting up a pool of connections to connect to the Redis server. The
    pool is configured to the default IP address to which the server will bind.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We take a resource from the pool (the client stub that wraps the connection).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We set the key-value into it. This will push the value to be inserted into the
    Redis datastore.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We ask/get the value based on the key. In this case, the value inserted against
    the key in the previous step.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We return the resource into the pool for reuse and close the pool.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Shutting down the server
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'As with any server, shutting down the server gracefully is very important.
    There are a couple of things that need to be kept in mind before you shut down
    any Redis server, which are explained here:'
  prefs: []
  type: TYPE_NORMAL
- en: Close all the client connections. For our Java program, we indicate the client
    to close all the connections by writing `"pool.destoy();"`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The next thing that we need to do is to go to the client prompt and order a
    server shutdown.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you intend to use Redis as a cache server, then the data it holds need not
    be saved. In this case, just type `shutdown nosave`. This will flush out all the
    data in the memory and free it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you intend to save the data so that you can use it later, then you have to
    pass the `shutdown save` command. This will persist the data in the `RDB` file
    even if no save points are configured, which we will cover in later chapters.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following figure shows what happens in the example from the resource life
    cycle perspective:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Shutting down the server](img/1794_02_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Managing a resource for the Jedis client
  prefs: []
  type: TYPE_NORMAL
- en: 'We have three resources that we have to consider during the life cycle. They
    are explained as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Jedis connection pool**: This is the pool that should get created when the
    system/application starts up. This allocates the resources for the pool. The application
    server life cycle should manage the life cycle of the pool.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Connection**: In Jedis, the client stub created wraps the connection and
    acts as a client for Redis. In the program listed earlier, the client stub is
    referenced as *Jedis* which is obtained in the `pool.getResource()`statement.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Request life cycle**: This is where the command is getting executed. So,
    what is basically happening here is that using the Redis protocol, the command
    and the payload is being sent to the server. The payload consists of either the
    key, if it''s a "getter," or the key and the value, if it''s a "setter". The life
    cycle is managed with a positive acknowledgement from the server. It can be a
    success or an exception if it''s a failure. In a way, we don''t need explicit
    life cycle management for this statement.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How do we manage connections in Jedis, and what will happen if we don't manage
    them?
  prefs: []
  type: TYPE_NORMAL
- en: The answer to the question *what will happen if we don't manage it* is simple.
    The pool will run out of connections and the client application will suffer. We
    have seen connection-related problems in areas such as JDBC, where the application
    suffers when there are no connections for the client to connect to server. It's
    always the server that reserves the memory for a connection, and closing the connection
    is an indication for the server to release the memory.
  prefs: []
  type: TYPE_NORMAL
- en: The answer to the question *how do we manage connections in Jedis* is a bit
    more interesting and requires some code changes. We will take the previous code
    example and make changes to it, where we will handle connection resource management.
    For the following example, I am adding a wrapper, but in your applications, you
    can have more exotic recipes to address the concern mentioned. That is, you can
    use Spring to inject a connection or use `cglib` to dynamically create a proxy,
    which will set the connection before the command and return the connection after
    the command.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code is for the new Hello World program, which is now called
    `HelloWorld2`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is the wrapper code that handles the connection:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Two things becomes clear in this case, which are explained here:'
  prefs: []
  type: TYPE_NORMAL
- en: We don't have to manage the connection/resources, since this will be taken care
    of by the `wrapper` class
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The number of lines of code gets reduced, since we don't have to repeat the
    code for resource management
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Loading a test Hello World program in Redis
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Well, you have seen an example of a `Hello world` program in Java and the command
    line. But it's always good to add a load test dimension to your `Hello World`
    program. Redis comes with a tool called `redis-benchmark`, which can be found
    in the release folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following command is going to make 100,000 calls to the Redis server:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Loading a test Hello World program in Redis](img/1794_02_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Load testing of Hello World
  prefs: []
  type: TYPE_NORMAL
- en: 'The result is the total number of requests handled in a second for your machine.
    This tool comes in very handy for load testing your target environment. This is
    the snapshot of the result I got when I executed it in my Windows machine, and
    this will vary depending on the configuration of your machine and OS:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Loading a test Hello World program in Redis](img/1794_02_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Tool performing the load test
  prefs: []
  type: TYPE_NORMAL
- en: What happened over here is that `redis-benchmark` opened up 50 parallel connections
    to the Redis server and fired 10,000 requests. The requests contain Redis commands
    and a 3-byte payload. The approximate results get printed for analysis; in my
    case, the 10,000 `Set` commands took an overall of 0.30 seconds, that is, 33,670
    requests were catered to per second.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Redis is a simple key-value oriented NoSQL, which can be used as a cache server
    and as a persistence server. This chapter showcased how simple it is to install
    Redis in multiple environments, including Windows (Redis can also be used in cloud
    environments, such as Amazon EC2). The installation for Windows should be used
    for development and sampling purposes only.
  prefs: []
  type: TYPE_NORMAL
- en: Redis has an interesting set of data structures, and it is sometimes called
    the data structure server. The next chapter will cover data structure in detail.
  prefs: []
  type: TYPE_NORMAL
