- en: Improving CSS with SCSS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we'll discuss the basics of SCSS and what problems it solves.
    We'll also discuss the improvements that are introduced to CSS that bring it closer
    to SCSS.
  prefs: []
  type: TYPE_NORMAL
- en: We will also work with the app we have made in [Chapter 5](e50a41d8-389a-4ecb-bf6d-7ad48c3c603b.xhtml)*,
    Vue CLI 3 and Routing*. The goal of this chapter is to work with CSS, SCSS, and
    we'll do that by using the Bootstrap + Vue plugin.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in the chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing Bootstrap + Vue
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the bootstrap-vue plugin to add styles to our project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using SCSS in our project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing Bootstrap + Vue
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Why not use Bootstrap from the official website, when working with Vue? Well,
    we definitely could do that, but Bootstrap relies on jQuery, and since we want
    to keep everything JavaScript-related running through Vue, we''ll have to use
    a project that''s built for this purpose exactly: BootstrapVue.'
  prefs: []
  type: TYPE_NORMAL
- en: Let's begin by visiting the project website at [https://bootstrap-vue.js.org/](https://bootstrap-vue.js.org/).
    Here, we can get acquainted with the project in general. Specifically, it would
    be useful to read the documentation at [https://bootstrap-vue.js.org/docs#vue-cli-3](https://bootstrap-vue.js.org/docs#vue-cli-3)
    , which discusses the use of BootstrapVue inside a Vue CLI 3 project.
  prefs: []
  type: TYPE_NORMAL
- en: Adding BootstrapVue as a plugin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can create a new Vue project easily with the help of Vue CLI 3 UI. This
    has been covered a few times in this book, and you should be able to do this on
    your own.
  prefs: []
  type: TYPE_NORMAL
- en: Name your new project `Chapter7`, and run it through the exact same installation
    steps as in [Chapter 5](e50a41d8-389a-4ecb-bf6d-7ad48c3c603b.xhtml)*, Vue CLI
    3 and Routing*.
  prefs: []
  type: TYPE_NORMAL
- en: 'In your console, go to the root of your project and run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'You will see the following prompt inside your console:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'This will be followed up with the following question:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Just press the *Enter* key to accept the default answer (yes).
  prefs: []
  type: TYPE_NORMAL
- en: 'Regardless of how you''ve installed the plugin, your plugins list should now
    look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/6b9ceee8-1410-4b59-bf18-850058b1e58b.png)'
  prefs: []
  type: TYPE_IMG
- en: Now that we've installed it, we can start using it.
  prefs: []
  type: TYPE_NORMAL
- en: Using the bootstrap-vue plugin to add styles to our project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Once the `bootstrap-vue` plugin is installed, let''s use it in our project!
    We''ll begin by adding a `navbar` from the official documentation, which is available
    at [https://bootstrap-vue.js.org/docs/components/navbar#b-nav-item-dropdown](https://bootstrap-vue.js.org/docs/components/navbar#b-nav-item-dropdown),
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'We''ll add this `navbar` to our `App.vue`, in the template section. The updated
    `template` element will now look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'We also need to update the styles so they look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'After saving the changes, our home page will update to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/2e7fc3c8-e6f3-436c-abc8-d803808b6f89.png)'
  prefs: []
  type: TYPE_IMG
- en: To quickly change the color of the background on the `bootstrap-vue navbar`,
    simply add a contextual Bootstrap color to the `variant` custom HTML attribute.
    The accepted values are `primary`, `secondary`, `success`, `danger`, `info`, `warning`,
    `light`, and `dark`.
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding example, we're using `variant` with the value of `secondary`,
    which gives us a grayish background with white `nav` items on hover.
  prefs: []
  type: TYPE_NORMAL
- en: Using SCSS in our project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Similar to how TypeScript is referred to as a *superset* of JavaScript, SCSS
    is often referred to as a *superset* of CSS. But what exactly is this *superset*?
  prefs: []
  type: TYPE_NORMAL
- en: A **superset** of a language is simply a layer around it, with additional functionality
    that doesn't exist in the *regular* implementation. There could also be additional
    best practices, methods, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: At the very core, it is possible for SCSS files to contain only plain old CSS
    syntax. That's because all SCSS ultimately compiles to CSS, and, as such, it is
    served to our browsers. This makes it very approachable. It is reassuring for
    an SCSS newbie to **know **that they can keep on writing CSS and it will just
    work in their SCSS!
  prefs: []
  type: TYPE_NORMAL
- en: Let's make this our starting point too. First off, let's update our `bootstrap-vue`
    plugin settings, so that we use SCSS rather than CSS.
  prefs: []
  type: TYPE_NORMAL
- en: 'Navigate to our app''s folder structure and locate the following file: `src/plugins/bootstrap-vue.js`.
    Next, update the code so that it looks like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Dealing with errors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'It is possible that you might be greeted with the `cannot find sass-loader`
    error. You can resolve it by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: At this point, if you're unsure about what a loader is, it might be worthwhile
    revisiting [Chapter 2](cd533fca-589a-475b-b0ff-da2f7fb52251.xhtml)*, Webpack in
    Vue CLI 3*, to get a refresher on webpack loaders.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another error that is likely to come up is this one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'You can resolve this error by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Finally, after the installation of a new package, you'll see a message that
    reads `found 1 high severity vulnerability` (or something similar to this). You
    can, and should, fix such a vulnerability, following the cue from the console,
    and running `npm audit fix`.
  prefs: []
  type: TYPE_NORMAL
- en: Writing some SCSS in our project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have imported `bootstrap.scss`, we can start using it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s open `App.vue`, and update the `style` tag to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: What we're seeing in the preceding code is an example of nesting, a feature
    of SCSS that allows us to mimic the HTML structure of our apps inside our SCSS
    rules.
  prefs: []
  type: TYPE_NORMAL
- en: If you looked at your project being served in the web browser at this stage,
    you'd notice that it's still running, and that it is unchanged. That is good!
    It means everything is working and that everything is getting served just as it
    should.
  prefs: []
  type: TYPE_NORMAL
- en: Let's now add some variables, mixins, and interpolation to our SCSS.
  prefs: []
  type: TYPE_NORMAL
- en: Overriding bootstrap-vue styles
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We'll begin by adding a custom SCSS file. We'll call it `custom.scss`, and we'll
    place it inside the `assets` folder of our project.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s add this code to `custom.scss`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'We''ve just overridden the Bootstrap variable. Now let''s use it inside our
    `App.vue` file, by importing the `custom.scss` file. We''ll also override the
    `.bg-secondary` class inside our `#nav` element. The updated `script` tag will
    look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'After we''ve saved all the changes, our project will be updated to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/4fd83ec5-a839-4fac-9271-2c4ac97df62d.png)'
  prefs: []
  type: TYPE_IMG
- en: Next, we'll use some of the more advanced SCSS features in our `App.vue` file.
  prefs: []
  type: TYPE_NORMAL
- en: Using variables, mixins, and interpolation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we'll use some more variables, mixins, and interpolation syntax
    in SCSS. Before we even begin this chapter, it is beneficial to mention a website
    where you can practice writing SCSS, and see the CSS output it will produce. The
    website is called Sassmeister, and it's available at: [https://www.sassmeister.com/](https://www.sassmeister.com/).
  prefs: []
  type: TYPE_NORMAL
- en: Using Sassmeister to practice SCSS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Once you visit the website, you can pick a flavor of Sass or SCSS that you''d
    like to use, by hovering over the Options item as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/633cd327-2100-4ee8-b017-cf8fa12bedce.png)'
  prefs: []
  type: TYPE_IMG
- en: The Sassmeister website is a great place to practice working with various features
    of the language. For example, we can navigate to our project's `node_modules`
    folder, and locate the `bootstrap` folder.
  prefs: []
  type: TYPE_NORMAL
- en: If you can't find the bootstrap folder inside `node_modules`, you can install
    it with `npm i bootstrap`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, open the `scss/mixins` folder, and locate `_alert.scss`, with the following
    syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: As we can see, this is a mixin. Let's copy and paste it into Sassmeister and
    see what output we get.
  prefs: []
  type: TYPE_NORMAL
- en: Actually, we won't get any output. Why?
  prefs: []
  type: TYPE_NORMAL
- en: 'The reason is simple: a mixin in Sass or SCSS, is actually just like a function
    in a different language, for example, JavaScript. So, to use a mixin in SCSS,
    we need to call it, and pass it a few parameters. Here is an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Note that the `@include` syntax is necessary to run a mixin.
  prefs: []
  type: TYPE_NORMAL
- en: 'The preceding code is supposed to work, but inside our mixin definition, we''re
    calling another mixin as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'This means that in order for our code to compile in Sassmeister, we need to
    replace the preceding line with something else, for example, with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, our `@include` for `alert-custom`, needs to be applied on a CSS rule.
    This means that we need to wrap our call to `alert-custom` with a CSS declaration,
    as in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Putting all of this together, this is our SCSS code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Sassmeister will compile the preceding code to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Now that we know how to work with SCSS mixins, we can use them in our project.
  prefs: []
  type: TYPE_NORMAL
- en: Using SCSS mixins and interpolation in our Vue project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We''ll begin with adding an alert to our `App.vue` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'This simple addition will update our app look to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/ac5d347f-094c-4c44-9758-95bc109d72df.png)'
  prefs: []
  type: TYPE_IMG
- en: Now we'll add some mixins to update the styling.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll begin with adding our custom mixin to color the alert we''ve added.
    Here''s the code for `custom.scss`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'After we save the preceding file, our alert will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/b956904c-0d93-4997-a41f-46741069cd24.png)'
  prefs: []
  type: TYPE_IMG
- en: With this, we conclude the chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: SCSS is a large topic. Working with SCSS in VDOM frameworks such as Vue can
    get complex, due to the number of different concepts that are involved. This chapter
    gave you a sneak peek of what is available and how to get started.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we've touched on using SCSS in our project. We've learned about
    how to work with CSS and SCSS in our Vue apps. We've also learned about some of
    the main features of SCSS, such as variables, mixins, and interpolation, and we've
    also learned how to implement Bootstrap 4 in our Vue apps. Next, we've learned
    how to edit the built-in components of our bootstrap-vue plugin in Vue, and how
    to update them with custom SCSS code.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we'll build a simple project, using everything we've learned
    so far, and we'll publish it on GitHub Pages.
  prefs: []
  type: TYPE_NORMAL
