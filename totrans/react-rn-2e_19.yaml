- en: Collecting User Input
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In web applications, you can collect user input from standard HTML form elements
    that look and behave similarly on all browsers. With native UI platforms, collecting
    user input is more nuanced.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you'll learn how to work with the various React Native components
    that are used to collect user input. These include text input, selecting from
    a list of options, checkboxes, and date/time selectors. You'll see the differences
    between iOS and Android, and how to implement the appropriate abstractions for
    your app.
  prefs: []
  type: TYPE_NORMAL
- en: Collecting text input
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It turns out that there's a lot to think about when implementing text inputs.
    For example, should it have placeholder text? Is this sensitive data that shouldn't
    be displayed on screen? Should you process text as it's entered, or when the user
    moves to another field?
  prefs: []
  type: TYPE_NORMAL
- en: 'The noticeable difference with mobile text input versus traditional web text
    input is that the former has its own built-in virtual keyboard that you can configure
    and respond to. Let''s build an example that renders several instances of the
    `<TextInput>` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'I won''t go into depth on what each of these `<TextInput>` components is doing—there
    are comments in the code. Let''s see what these components look like on screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/45409a22-50c1-4dac-926f-1d2208fe5804.png)'
  prefs: []
  type: TYPE_IMG
- en: The plain text input shows the text that's been entered. The password field
    doesn't reveal any characters. The Placeholder Text is displayed when the input
    is empty. The Changed text state is also displayed. You're not seeing the submitted
    text state because I didn't press the Submitted button on the virtual keyboard
    before I took the screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at the virtual keyboard for the input element where you
    changed the return key text via the `returnKeyType` prop:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/d54505b7-a055-4b4e-af99-41528e8bb530.png)'
  prefs: []
  type: TYPE_IMG
- en: When the keyboard Return Key reflects what's going to happen when they press
    it, the user feels more in tune with the application.
  prefs: []
  type: TYPE_NORMAL
- en: Selecting from a list of options
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In web applications, you typically use the `<select>` element to let the user
    choose from a list of options. React Native comes with a `<Picker>` component,
    which works on both iOS and Android. There is some trickery involved with styling
    this component based on which platform the user is on, so let''s hide all of this
    inside of a generic `Select` component. Here''s the `Select.ios.js` module:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'That''s a lot of overhead for a simple `Select` component. Well, it turns out
    that it''s actually quite hard to style the React Native `<Picker>` component.
    Here''s the `Select.android.js` module:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Here are what the styles look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Now you can render your `<Select>` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The basic idea of this example is that the selected option in the first selector
    changes the available options in the second selector. When the second selector
    changes, the label shows the selected size and garment as a string. Here''s how
    the screen looks:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/e00386aa-aaed-4619-ab70-16ef408d81b0.png)'
  prefs: []
  type: TYPE_IMG
- en: Toggling between off and on
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Another common element you''ll see in web forms is checkboxes. React Native
    has a `Switch` component that works on both iOS and Android. Thankfully, this
    component is a little easier to style than the `Picker` component. Here''s a look
    at a simple abstraction you can implement to provide labels for your switches:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s see how we can use a couple of switches to control application
    state:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'These two switches simply toggle the `disabled` property of one another. Here''s
    what the screen looks like in iOS:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/f05182b4-03e9-4d1c-85fe-ff151c2be0a0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Here''s what the same screen looks like on Android:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/531afc4e-9505-45db-b0d8-4e33aea963f5.png)'
  prefs: []
  type: TYPE_IMG
- en: Collecting date/time input
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this final section of the chapter, you'll learn how to implement date/time
    pickers. React Native has independent date/time picker components for iOS and
    Android, which means that it is up to you to handle the cross-platform differences
    between the components.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, let''s start with a date picker component for iOS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'There''s not a lot to this component; it simply adds a label to the `DatePickerIOS`
    component. The Android version of the date picker needs a little more work. Let''s
    take a look at the implementation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The key difference between the two date pickers is that the Android version
    doesn't use a React Native component, such as `DatePickerIOS`. Instead, we have
    to use the imperative `DatePickerAndroid.open()` API. This is triggered when the
    user presses the date text that our component renders, and opens a date picker
    dialog. The good news is that this component of ours hides this API behind a declarative
    component.
  prefs: []
  type: TYPE_NORMAL
- en: I've also implemented a time picker component that follows this exact pattern.
    So, rather than listing that code here, I suggest that you download the code for
    this book from [https://github.com/PacktPublishing/React-and-React-Native-Second-Edition](https://github.com/PacktPublishing/React-and-React-Native-Second-Edition),
    so that you can see the subtle differences and run the example.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s see how to use our date and time picker components:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Awesome! Now we have two simple components that work on iOS and Android. Let''s
    see how the pickers look on iOS:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/b92c203b-0980-47c4-9c49-6f056649bb9a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As you can see, the iOS date and time pickers use the `Picker` component that
    you learned about earlier in this chapter. The Android picker looks a lot different—let''s
    look at it now:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/e8208396-bca8-4529-89e2-f992075ec7ca.png)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned about the various React Native components that
    resemble the form elements from the web that you're used to. You started off by
    learning about text input, and how each text input has its own virtual keyboard
    to take into consideration. Next, you learned about `Picker` components that allow
    the user to select an item from a list of options. Then, you learned about `Switch`
    component,which are kind of like checkboxes.
  prefs: []
  type: TYPE_NORMAL
- en: In the final section, you learned how to implement generic date/time pickers
    that work on both iOS and Android. In the next chapter, you'll learn about modal
    dialogs in React Native.
  prefs: []
  type: TYPE_NORMAL
- en: Test your knowledge
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Why would you want to change the return key on the virtual keyboard for text
    inputs?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You should never change the return key
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Because in some cases, it makes sense to have a search button or something else
    that better matches the context of the input
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You should only change the return key for search inputs or password inputs
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which `TextInput` property should be used to mark the input as a password field?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**`secureTextEntry `**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`password`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`securePassword`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`secureText`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Why should you create an abstraction for selection elements?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Because the components are completely different for iOS and Android
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Because of styling challenges between the two platforms
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You don't need to create an abstraction.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Why should you create abstraction for date and time pickers?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Because the components are completely different for iOS and Android
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Because of styling challenges between the two platforms
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You don't need to create an abstraction
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Visit the following links for more information:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://facebook.github.io/react-native/docs/handling-text-input](https://facebook.github.io/react-native/docs/handling-text-input)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://facebook.github.io/react-native/docs/switch](https://facebook.github.io/react-native/docs/switch)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://facebook.github.io/react-native/docs/picker](https://facebook.github.io/react-native/docs/picker)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://facebook.github.io/react-native/docs/datepickerios](https://facebook.github.io/react-native/docs/datepickerios)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://facebook.github.io/react-native/docs/datepickerandroid.html](https://facebook.github.io/react-native/docs/datepickerandroid.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
