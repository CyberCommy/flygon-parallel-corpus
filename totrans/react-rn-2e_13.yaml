- en: Kickstarting React Native Projects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you'll get up and running with React Native. Thankfully, much
    of the boilerplate involved with the creation of a new project is handled for
    you by the `create-react-native-app` command-line tool. I'll explain what's actually
    created for you when you initialize an empty project. Then, I'll show you how
    to run the project on iOS and on Android simulators.
  prefs: []
  type: TYPE_NORMAL
- en: Installing and using the create-react-native-app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The preferred tool for creating React Native projects is `create-react-native-app`.
    This command-line tool was created by the React Native developer community and
    follows in the footsteps of the `create-react-app` tool. The goal of both `create-react-app`
    and `create-react-native-app` is to enable developers to hit the ground running
    with their projects. You should be able to issue a command that generates all
    of the boilerplate that's necessary for running your React or React Native app.
  prefs: []
  type: TYPE_NORMAL
- en: Without this type of tool, you end up spending an unnecessarily large amount
    of time configuring various aspects of your projects. First and foremost, developers
    want to build  applications. You can get fancy with configuration and optimization
    later on.
  prefs: []
  type: TYPE_NORMAL
- en: 'You''ll want to install `create-react-native-app` globally because this tool
    isn''t specific to any one project that you''re working on—it gets the project
    started for you. Here''s how you can do this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Once the installation is complete, you'll have a new `create-react-native-app`
    command available within your terminal. You can use this command to kickstart
    your new React Native project.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a React Native app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Using `create-react-native-app` to start a new React Native project involves
    calling the `create-react-native-app` command, and passing in the name of the
    app as an argument. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This will result in the creation of a `my-project` directory. This is where
    you'll have all of the boilerplate code and other files that `create-react-native-app`
    takes care of creating for you. This is also where you'll find the `node_modules`
    directory where all of your dependencies are installed.
  prefs: []
  type: TYPE_NORMAL
- en: 'When you run this command, you''ll see output that looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The output shows you what it's doing as it installs dependencies for you, and
    the commands that are ready for you to run right away. At this point, you're ready
    to launch your app.
  prefs: []
  type: TYPE_NORMAL
- en: Running your app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When you use `create-react-native-app` to bootstrap your React Native project,
    several commands are added to your `package.json` file. These are listed as part
    of the command output (refer to the previous section to see what this output looks
    like). The most common command that you''ll use is `start`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'This command will start the packager process. This process will build native
    UI components as you update their source. It doesn''t perform a native build for
    the actual target platform, as this would be too expensive performance-wise. Instead,
    it will efficiently build your app for use with a variety of simulators for development:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: There are number of options for you to simulate your native application. By
    default, you're in development mode—you'll likely stay in development mode. Not
    pictured in the preceding output, the output also includes a QR code that you
    can scan with the Expo mobile app.
  prefs: []
  type: TYPE_NORMAL
- en: Installing and using Expo
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The **Expo** mobile app is a tool that you can use to assist with React Native
    development. The `npm start` command launches the React Native package, which
    integrates seamlessly with Expo (provided the device is on the same network as
    the packager). This enables you to view and interact with your application on
    real mobile devices during development. It even supports live reloading as you
    make changes to your source.
  prefs: []
  type: TYPE_NORMAL
- en: Expo is set apart from the mobile device emulators in that it enables you to
    experience the application the same way your users will experience it. Virtual
    device emulators give you a rough approximation, but it isn't the same thing as
    holding a device in your hand. Furthermore, not everyone has a Macbook, which
    is a requirement for simulating iOS devices.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can find the Expo app by searching the Play Store on Android devices or
    the App Store on iOS devices:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/d389303d-8906-4520-a9c1-205e194ba327.png)'
  prefs: []
  type: TYPE_IMG
- en: 'When you launch Expo, you''ll see an option to scan a QR code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/ae8eb031-06bd-4f40-98b5-86322bc29d3f.png)'
  prefs: []
  type: TYPE_IMG
- en: When you select Scan QR Code, your phones camera can scan the QR code that's
    printed in your terminal. This is how you connect the React Native packager running
    on your computer with your device. If you can't scan the QR code, you can open
    the app in Expo by emailing the Expo link to your phone. Clicking on it from your
    phone is the same thing as scanning the QR code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s what the `my-project` app should look like when opened in Expo:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/0f74de79-cef9-49d8-b99e-1d2193c6d270.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s take a look at the `App.js` module that was created by `create-react-native-app`
    for you:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'This `App` component will render three lines of text on the screen, with some
    styles applied to the `View` component. Let''s make a change to the first line
    to make the text bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'There''s now a bold style in the styles and this is applied to the style property
    of the first `Text` component. If you look at your phone again, you''ll notice
    that the application is updated:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/c0049bfd-f6e0-4637-b169-f8196c8caa87.png)'
  prefs: []
  type: TYPE_IMG
- en: The change is immediately reflected in the app on your device.
  prefs: []
  type: TYPE_NORMAL
- en: Using simulators
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You don't always have your phone with you, indeed, you don't always need to
    view your app on a physical mobile device during development. The other option
    is to use a virtual device emulator that simulates physical mobile devices. The
    React Native packager communicates with simulators the same way that it communicates
    with the Expo app to support live reloading.
  prefs: []
  type: TYPE_NORMAL
- en: iOS simulators
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'After you start the React Native packager, you can start the iOS simulator
    by pressing "i". You''ll see output that looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'You''ll then see a new window open with the emulated device running your app:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/ff024621-8f4c-4072-b20f-b641740ce8db.png)'
  prefs: []
  type: TYPE_IMG
- en: Live updates to the source of your app work the same way as with the Expo app.
    Changes are automatically reflected in the simulator as they're made.
  prefs: []
  type: TYPE_NORMAL
- en: Android simulators
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Android simulators are launched in the same way as the iOS simulators. In the
    terminal where the React Native packager is running, press "A". However, there''s
    a caveat - you have to start the Android device emulator before starting the app
    within the React Native package. If you don''t, you''ll see a message that looks
    like this when you press "A":'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'This has been historically difficult to do with Android. Getting Android device
    emulators up and running is much simpler now, with the help of Android Studio.
    Once you have Android Studio installed, you can open the Android Virtual Device
    manager and add any device you like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/e0b89db2-5eea-44f2-9db5-09afe20e5144.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You can click on the Create Virtual Device button to create a new device:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/32508eb6-7b8d-421b-8f76-b94920225d13.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you''ve created the device that you want to test your React Native app
    on, you can click the green play button. This will start the emulator:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/e2d4adbc-dc2a-412e-8048-d9875f9ff279.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If you go back to the terminal where the React Native packager is running and
    press "a", you should see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'And if you go back to your Android emulator, your React Native app should be
    up and running:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/aaffe1fa-d76d-4399-8b6a-17a26009339a.png)'
  prefs: []
  type: TYPE_IMG
- en: Like the Expo app and the iOS simulators, this simulator will live reload as
    the source of your application changes, thanks to the React Native packager.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned how to kickstart your React using the `create-react-native-app`
    tool. You learned how to install the tool on your system and make the `create-react-native-app`
    command available for any React Native projects that you create. Then, you used
    the command to start a basic project. Next, you started the React Native packager
    process within your project.
  prefs: []
  type: TYPE_NORMAL
- en: You learned how to install the Expo app on your mobile device and how to connect
    it with the React Native packager. You then made a code change to demonstrate
    how live reloading works. Lastly, you saw how to launch iOS and Android simulators
    using the React Native packager.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you'll learn how to build flexible layouts in React Native
    apps.
  prefs: []
  type: TYPE_NORMAL
- en: Test your knowledge
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `create-react-native-app` tool was created by Facebook
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Yes, `create-react-native-app` has been there from day one
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: No, this is a community-supported tool that follows in the footsteps of **`create-react-app`**
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Why should you install `create-react-native-app` globally?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Because there is no way to install it locally
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You shouldn't. Only install it locally
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Because this is a tool for generating project boilerplate and isn't actually
    part of the project
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Everything should be installed globally.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What's the role of the Expo app on mobile devices?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It's a library that enhances React Native apps
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It's a tool that helps developers run their apps on mobile devices during development
    with very little overhead
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It's a tool that natively builds the project and installs it on the target device
    for you
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The React Native packager is able to simulate both iOS and Android devices
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It doesn't do this, but it communicates with iOS and Android simulators in order
    to run the app
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Yes, simulators are included as part of React Native
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Check out the following links to learn more:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://developer.apple.com/xcode/](https://developer.apple.com/xcode/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://developer.android.com/studio/](https://developer.android.com/studio/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://expo.io/](https://expo.io/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://github.com/react-community/create-react-native-app](https://github.com/react-community/create-react-native-app)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
