- en: Creating a Simple Generics Class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you will look at the basics of making a simple generic class
    so that one class can operate on many different data types. A great benefit of
    generics is flexibility.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a generics class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Bring up a project, and go to Solution Explorer; right-click, select Add, and
    click on Class. Name the class `GenericsClass`; a simple generics class. Then,
    click on OK. When the Visual Studio message comes up, click on Yes.
  prefs: []
  type: TYPE_NORMAL
- en: 'For our purposes, you don''t need any of the `using System` lines at the top,
    nor any of the comments underneath, so delete them. Your initial screen should
    look like *Figure 1.1.1*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2d2bd5c8-61df-4e63-ae54-a3bed3ed1f78.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.1.1: The initial GenericsClass.cs screen'
  prefs: []
  type: TYPE_NORMAL
- en: Working with different data types
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, let''s put a `<T>` symbol after where it says `public class GenericsClass`,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'This means that this single class can work equally well with several different
    data types. Next, enter the following beneath the open curly brace under the preceding
    line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Enter the following comment directly above this line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: In other words, this will operate equally well on doubles, decimals, integers,
    and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Making parameters that are generic
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, in the following line, enter the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, you can also make parameters that are generic like this one.
    This is a parameter, `input` is the name of it, and the type is `T`. So, it's
    a generic array.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, enter the following between a set of curly braces beneath the preceding
    line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Displaying the values
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Of course, you should be able to display these values. so, enter the following
    line beneath the closed curly brace under the `vals = input;` line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: To display these values, you'll enter the following between a set of curly braces
    beneath the preceding line.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, put in a string, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Next, declare the string and initialize the value to null.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, enter the following directly below this line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, the `foreach` loop here is going to operate. The `T` object
    will be a different data type, depending on how we choose to make the object.
    The `t` variable, of course, is each specific value inside the `vals` array.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, you will enter the following between a set of curly braces beneath the
    preceding line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Remember, we use the `+=` operator to accumulate and `<br>` to push down to
    the next line. To get the value, of course, we will put in the `t` variable.
  prefs: []
  type: TYPE_NORMAL
- en: 'At the end, you want to return this, so you will type the following beneath
    the closed curly brace under the preceding line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'That''s it. The final version of the `GenericsClass.cs` file for this chapter,
    including comments, is shown in the following code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Notice that we have a single block of code; this will now operate on integers,
    doubles, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a button to Default.aspx
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, let''s take a look at `Default.aspx`. The only thing we really need to
    do at this time is to add a `Button` control. For this, go to Toolbox and grab
    a `Button` control from there. Drag and drop it below the line beginning with
    `<form id=...` (you can delete the `<div>` lines, as we won''t be needing them).
    Change the text on the `Button` control to, for example, `Display Values`. Your
    complete `Default.aspx` file should look like the one shown in *Figure 1.1.2*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ddede415-cfcd-4392-8b8a-ab111ea25f9e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.1.2: The complete HTML for this project'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, go to the Design view. Our very simple interface is shown in *Figure 1.1.3*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e66f3f19-27a2-498f-a6f4-9d18f62dea3d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.1.3: Our very simple interface in the Design view'
  prefs: []
  type: TYPE_NORMAL
- en: Initializing a collection of integers to their array and displaying the results
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, double-click on the `Display Values` button and go into `Default.aspx.cs`.
    Delete the `Page_Load` block. Next, between the set of curly braces beneath the
    line beginning with `protected void Button1_Click...`, enter the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: You can see in this line that we are basically initializing a collection of
    integers to their array.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, you can display this. So, for example, you can enter the following below
    this line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Notice that the `GenericsClass` which we have constructed is operating in integers,
    but it can operate equally well on any other data type.
  prefs: []
  type: TYPE_NORMAL
- en: Changing the data types in our generics class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, to make the code efficiency more obvious, take both of the preceding lines,
    copy them (*Ctrl* + *C*) and paste them (*Ctrl* + *V*) beneath these and just
    change it to double, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'We''ll call this one `dubs` and change the name here to double: it''s the same
    code, the same class, and the same generic class that you can operate on the doubles.
    Again, to emphasize this one more time, and to see that flexibility and code reuse
    is really the purpose here; that is, the ability to reuse code, we''ll now take
    both of these new lines, copy and paste them below once more, and just change
    `double` to `decimal`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s call this one `decs`. Now, of course, if you want to make things a little
    more interesting, you can throw in some decimals:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: With decimals, just make sure that you put the `M` suffix in there, because
    you need the `M` suffix at the end to indicate that it's a decimal.
  prefs: []
  type: TYPE_NORMAL
- en: Running the program
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, let''s take a look. When you run this code and click on the Display Values
    button, your screen will look like the one shown in *Figure 1.1.4*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b3cf8ee3-e14e-4599-9104-e588ff37af9a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.1.4: The initial run of our code'
  prefs: []
  type: TYPE_NORMAL
- en: Accumulating the input
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, we will accumulate the input. So, in the following `sampLabel.Text` lines,
    we change the `=` sign to `+=`, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s run it one more time. Click on the Display Values button and your screen
    will now look like the one shown in *Figure 1.1.5*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f436f1c0-f92c-404a-9e5f-be8280e38c8b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.1.5: The input is now being accumulated, and the values are showing
    as expected'
  prefs: []
  type: TYPE_NORMAL
- en: The program is now working as expected.
  prefs: []
  type: TYPE_NORMAL
- en: So, the big idea of generics at this point is that you can define a generic
    class. This class can operate equally well on many different data types. For example,
    you can make a generic class that operates on integers as well as on doubles and
    decimals.
  prefs: []
  type: TYPE_NORMAL
- en: This step isn't strictly required, but here's a little bit of additional insight.
    If you want to, you can set a breakpoint as follows. Select the line with the
    open curly brace under the line beginning with `protected void Button1_Click....`
    Now, go to Debug | Step Into (*F11*) and click on Display Values.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we will go through it. So, to first step into it, hover your mouse over
    the `T` object in the following line in `Generics Class.cs`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, `T` is essentially like a parameter, so it does have a certain value,
    which is expressed in the `vals = input;` line. The first time, `T` is used for
    integers. This is how you can step through this code. At the bottom of the screen,
    the values inside the array are displayed, as shown in *Figure 1.1.6*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ce84ddec-f168-4cd1-8e13-55c21c9da2c0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.1.6: The values inside the array'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `t` variable, as you can see in *Figure 1.1.7*, is an integer, and this
    is how it operates:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fd9371c5-0f53-4b72-9661-87a7043a74e5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.1.7: The t is an integer'
  prefs: []
  type: TYPE_NORMAL
- en: Notice also in the screenshot that it's a generics class with an `<int>` datatype.
  prefs: []
  type: TYPE_NORMAL
- en: The `T` object in the `foreach(T t in vals)` line right now represents an integer,
    and so on for the other data types. So, flexibility of code and reuse of code
    means that you will write less code. If not for generics, you would have to create
    individual classes to handle each different data type.
  prefs: []
  type: TYPE_NORMAL
- en: Chapter review
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For review, the complete version of the `Default.aspx.cs` file for this chapter,
    including comments, is shown in the following code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned about the basics of making a simple generic class,
    so that one class can operate on many different data types. A great benefit of
    generics is flexibility. You created a simple generics class that worked with
    different data types, made generic parameters, initialized a collection of integers
    to their array and displayed the results, and then changed the data types in the
    generics class to doubles and decimals.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will learn about generic methods, or methods that can
    operate on different data types. You will also learn about constraining a method
    in terms of the data types that it can operate on, so we'll add a concept called
    constraints.
  prefs: []
  type: TYPE_NORMAL
