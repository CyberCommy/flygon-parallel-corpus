- en: Frontend Views with Bootstrap 4 and NgBootstrap
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will look at how to include a Bootstrap framework inside
    a running Angular application using the new `add` feature from the Angular CLI.
  prefs: []
  type: TYPE_NORMAL
- en: The Bootstrap framework is one of the most important UI frameworks, and, with
    Angular directives/components, we can have all the power of Bootstrap inside our
    Angular application.
  prefs: []
  type: TYPE_NORMAL
- en: We will also look at how to connect our Angular services with components and
    how to using the backend API to put it all together. Finally, we will learn how
    to configure **Cross-Origin Resource Sharing** (**CORS**) on our backend API and
    how to use it with our Angular client-side application.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing the Bootstrap CSS framework
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing Angular templates with Bootstrap
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to set up CORS on the Laravel backend
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Connecting Angular services with application components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dealing with Angular pipes, forms, and validation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Preparing the baseline code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, we need to prepare our baseline code, which is a process that''s very
    similar to what we performed in the previous chapter. Let''s follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Copy all the content from the `chapter-9` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Rename the folder `chapter-10`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Delete the `storage-db` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, let''s make some changes to the `docker-compose.yml` file so that we can
    fit in a new database and server containers. Open `docker-compose.yml` and replace
    its content with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that we changed the container names, database, and MySQL user:'
  prefs: []
  type: TYPE_NORMAL
- en: '`container_name: chapter-10-mysql`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`container_name: chapter-10-webserver`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '``container_name: chapter-10-php-fpm``'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MYSQL_DATABASE=chapter-10`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MYSQL_USER=chapter-10`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Update the `.env` file with the connection string:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the changes we made to Git source control. Open your Terminal window and
    type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s start our Docker containers with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Installing the Bootstrap CSS framework
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we will once again use the newest feature that''s available
    in Angular CLI 6: the `add` command. Using this, we will add Bootstrap 4 to our
    application:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside the `Client` folder of `chapter-10`, open your Terminal window and type
    the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The previous command will create and update the following files:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `package.json` file, we will add the following dependencies:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `src/app/app.module.ts` file, we will add the following lines:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `angular.json` file, we will add the following lines:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Here, we can see all the power of the Angular CLI in action, because all of
    these changes were performed automatically.
  prefs: []
  type: TYPE_NORMAL
- en: However, we can see that the `bootstrap.css` file is used in a way that leaves
    the application frozen, making it difficult to customize the application.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will look at a different way of using Bootstrap for
    more flexibility.
  prefs: []
  type: TYPE_NORMAL
- en: Removing the Bootstrap CSS import
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: First, we are going to remove the CSS compiled from Bootstrap that was injected
    into our `angular.json` file with the installation command of `NgBootstrap`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `angular.json` file and remove the `input` tag. Only keep the `styles`
    tag, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Adding Bootstrap SCSS imports
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, we will use the files installed in the `node_modules` folder as imports
    from our main style sheet, which is stored in `./Client/src/style.scss`:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `./Client/src/style.scss` and add the following code at the top of the
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Note that we keep the Bootstrap comments at the top of the file just to have
    the Bootstrap version documented in an easy-to-find place.
  prefs: []
  type: TYPE_NORMAL
- en: If you want, you can copy the content of the `node_modules/bootstrap/scss/bootstrap.scss`
    file and just adjust the import paths to `../node_modules/bootstrap/scss`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, our application is compiling the SCSS code directly from the `bootstrap/scss`
    folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are some advantages of doing this:'
  prefs: []
  type: TYPE_NORMAL
- en: We can choose which SCSS modules we will import, depending on what components
    our application uses.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We reduce SCSS code that will not be used.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We can easily overwrite the Bootstrap variables.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Overriding Bootstrap variables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this step, we will see how we can overwrite the `Boostrap` variables in
    our application:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new folder called `scss` at the root of the `Client` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inside the `./Client/scss` folder, add a new folder called `bootstrap`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inside `./Client/scss/bootstrap`, add a new file called `_variable.scss`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the content from `node_modules/bootstrap/scss/_variables.scss` and paste
    it into `./Client/scss/bootstrap/_variables.scss`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Pretty simple; congratulations! We are ready to override Bootstrap variables.
  prefs: []
  type: TYPE_NORMAL
- en: The last step is to import the new `_variables.scss` file into our main `style.scss`
    file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `./Client/style.scss` file and replace the line `@import "../node_modules/bootstrap/scss/_variables.scss"` with
    the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: We also have the option of placing this variable file, using only the variables
    that we will overwrite, without using the key word `Default`. In this way, the
    file gets much shorter, since we will not be able to overwrite all the variables
    in a small project like this. Let's see how we can do that.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s imagine that we just want to overwrite the `border-radius` of all components
    and also remove the `box-shadow`. We can only use these variables, so our `_variables.scss`
    file will have the following appearance:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'For these changes to take effect, we need to make a small adjustment to `./Client/style.scss`
    and add the new variable file before the Bootstrap  `variables` file, as shown
    in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Writing Angular templates with Bootstrap
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At this moment in time, our application can already be visualized with the use
    of Bootstrap CSS, which is what we did in the last section. Recall that, in the
    previous chapters, we already added the HTML markup to some of our templates.
  prefs: []
  type: TYPE_NORMAL
- en: 'All of them already contain the Bootstrap classes, and we can already visualize
    what we have so far in a browser window. Let''s check this out:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open your Terminal window inside the `./Client` folder and type the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Open your default browser and go to `http://localhost:4200/`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You will see the following result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/1bbae730-312d-4937-8aae-5934f803713c.png)'
  prefs: []
  type: TYPE_IMG
- en: Wow! Now, we have a web application. You will notice that we already have an
    application that works perfectly.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s click on the `bikes` link and see what we have so far:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Feel free to browse the rest of the application and check the other pages.
  prefs: []
  type: TYPE_NORMAL
- en: However, all we have at this stage is placeholders, so this is the time to learn
    how to apply the Angular template syntax in our templates.
  prefs: []
  type: TYPE_NORMAL
- en: Adding template bindings to the navigation component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, let''s make some changes in our templates so that we can use the Angular
    syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `./Client/src/app/layout/nav/nav.component.html` and replace its content
    with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Note that, in the previous code, we are using the `ngbDropdown` component and
    also using `auth.isAuthenticated()` to determine if the user is logged in or not.
    Also note that we included the logout link inside the dropdown.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's adjust the templates for login and registration.
  prefs: []
  type: TYPE_NORMAL
- en: Adding template bindings to the login page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In [Chapter 7](95b439ca-ab08-401c-8e99-0ca9054244d4.xhtml)*,* *Progressive
    Web Applications with Angular-cli*, we already added the HTML markup for all of
    the app''s views/templates, however, we need to add the Angular bindings and models
    to templates so that everything works correctly:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `./Client/src/app/auth/login/login.component.html`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following bind function to tag:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Now, we will add the `ngModel` to the email and password input, while we're
    still in `./Client/src/app/auth/login/login.component.html`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following code to the `email` input:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following code to the `password` input:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Adding template bindings to the register page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, let''s repeat the same operation on the registration page template:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `./Client/src/app/auth/register/register.component.html`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following bind function to tag:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Note the use of `formGroup` attribute. It is part of the Angular reactive forms,
    but don't worry about this now; later in the book, we will discuss template-driven
    forms and reactive forms.
  prefs: []
  type: TYPE_NORMAL
- en: Now, we will add `formControlName` to the `name`, `email`, and `password` inputs,
    while still in `./Client/src/app/auth/register/register.component.html`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following code to the `name` input:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following code to the `email` input:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following code to the `password` input:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Adding template bindings to the bike-detail page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, let''s make some adjustments to the `bike-detail` page template:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `./Client/src/app/bikes/bike-detail/bike-detail.component.html`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Replace its content with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Note that we are using the `*ngIf` directive to hide our bike until the bike
    object is available. We are also using the click bind function `(click)="onVote('1')"`
    to vote on the bike, and we're using `*ngFor="let item of bike?.items"` to list
    the bike items.
  prefs: []
  type: TYPE_NORMAL
- en: 'We are also using the `ngb-tab`, `ngb-tabset` directive from `NgBootstrap`to
    create two views on this page: one to show the bike''s details, and another to
    show the edit form so that we can edit the bike''s details. Note that we are using
    a function called `checkBikeOwner()` to make a simple check to see if the user
    that''s logged in is the bike''s owner. Otherwise, we hide that tab.'
  prefs: []
  type: TYPE_NORMAL
- en: The `(?)` symbol is called the safe navigation operator.
  prefs: []
  type: TYPE_NORMAL
- en: 'The expected result is what we have in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/c38958b9-0c49-4084-881e-9209111afbe3.png)'
  prefs: []
  type: TYPE_IMG
- en: Don't worry about the form for now, as we will look at it in detail at the end
    of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Adding template bindings to the bike-list page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Well, now it is time to create the `bike-list` template bindings:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `./Client/src/app/bikes/bike-list/bike-list.component.html`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Replace its content with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Note that we are using the `ngbDropdown`, `ngbDropdownToggle`, and `ngbDropdownMenu`
    components, and that we are also using `*ngFor="let bike of bikes"` to list all
    bikes from the `bikes Array` and `*ngIf` to show and hide a loading message.
  prefs: []
  type: TYPE_NORMAL
- en: Now, we can see the power of Angular. With a few changes, our static templates
    are ready to come to life and interact with our backend. But we still need to
    write the logic of the components to put everything together.
  prefs: []
  type: TYPE_NORMAL
- en: Before we do that, let's adjust the builder templates.
  prefs: []
  type: TYPE_NORMAL
- en: Adding template bindings to the builder-detail page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s add the `builder-detail` pages:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `./Client/src/app/builders/builder-detail/builder-detail.component.html`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Replace its content with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: In the builders templates, we are using the same technique that we used in the
    previous templates.
  prefs: []
  type: TYPE_NORMAL
- en: Adding template bindings to the builder-list page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, it is time to add the `builder-list` template:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `./Client/src/app/builders/builder-list/builder-list.component.html`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Replace its content with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Now, we have enough code for our templates to render the contents of our backend.
    For this, we just need to make some minor adjustments to the backend and write
    the logic in our components.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up CORS on a Laravel backend
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before proceeding with the necessary changes in our backend, let's talk about
    a very important and also very common subject in today's modern web applications,
    known as CORS.
  prefs: []
  type: TYPE_NORMAL
- en: When we use `XMLHttpRequest` or the `Fetch API` to get data from a given server,
    this call is usually performed from another application, and from somewhere else.
  prefs: []
  type: TYPE_NORMAL
- en: For security reasons, browsers restrict cross-origin HTTP requests.
  prefs: []
  type: TYPE_NORMAL
- en: 'A simple example to understand how CORS works is this: imagine that a frontend
    application running in a particular domain, for example, `http://mysimpledomain.com`,
    sends a request to another application in another domain called `http://myanothersimpledomain.com`.'
  prefs: []
  type: TYPE_NORMAL
- en: CORS is a mechanism that uses additional HTTP headers to tell a browser to let
    a web application run at one origin, `http://mysimpledomain.com`, and have permissions
    to access selected resources from a server at a different origin, `http://myanothersimpledomain`.
  prefs: []
  type: TYPE_NORMAL
- en: You can read more about CORS at [https://www.w3.org/TR/cors/](https://www.w3.org/TR/cors/).
  prefs: []
  type: TYPE_NORMAL
- en: Setting up Laravel CORS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Laravel has excellent support for using CORS in its applications. Let''s see
    how we can configure it using a library called `barryvdh/laravel-cors`:'
  prefs: []
  type: TYPE_NORMAL
- en: Open your Terminal window inside the `chapter-10` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, inside the `php-fpm` container, type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: This step is very important. If you forget this command, it is very likely that
    you will find an error, or you may be at risk of using your local composer version
    to execute the following command.
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside the container''s bash, type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Thanks to the newest version of Laravel (5.6), our new library is already ready
    for use. Let's just make one more little change.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `./Server/app/Http/Kernel.php` file and add the following code to
    the `middlewareGroup` API:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'It is very important to note that we added `\Barryvdh\Cors\HandleCors :: class` to
    the first line of dependencies in the API tag. This is very important because
    we avoid getting errors with status code 0 on our frontend application.'
  prefs: []
  type: TYPE_NORMAL
- en: We are ready to go!
  prefs: []
  type: TYPE_NORMAL
- en: Connecting Angular services with application components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, we will connect all of the Angular services and templates that we have
    created during this book. For this, we will create the logic and the functions
    that we will use inside our components.
  prefs: []
  type: TYPE_NORMAL
- en: Before we begin, let's set the endpoint of our API as a variable in the Angular
    environment file.
  prefs: []
  type: TYPE_NORMAL
- en: Adding environment configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As the name says, this file is used to set up environment variables in our application.
    The best part about it is that Angular comes with a dev and prod environment that's
    configured by default and is very simple to use. We can also set a variety of
    variables.
  prefs: []
  type: TYPE_NORMAL
- en: In this example, we are setting the backend URL using the development file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `./Client/src/environments/environment.ts` file and add the following
    URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, we have another file called `environment.prod.ts` inside the
    `environments` folder.
  prefs: []
  type: TYPE_NORMAL
- en: Do not worry about this file for now, as we will only use it later in the book.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the navigation methods
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, it is time to create the navigation behavior inside `nav.component.ts`,
    so let''s see how we can do that:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `./Client/src/layout/nav/nav.component.ts` and add the following imports,
    right after the core import:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Still on `./Client/src/layout/nav/nav.component.ts`, let''s create the `constructor()`
    function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Here, we are using the built-in Angular service called `Title` to update the
    title tag of the page when navigating between the templates. Remember that our
    application is a SPA and we do not want to keep the same title in all pages.
  prefs: []
  type: TYPE_NORMAL
- en: In addition, we will use the authentication service to show the name of the
    user that is logged in to the application, and we will also use the logout function
    of this service to log the user out. So, let's create this function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following code right after the deconstructor function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, inside the `ngOnInit()` function, add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'The last step is to add the `logout()` function, right after the `ngOnInit()` function.
    Add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we have our application''s navigation ready to use. The expected result
    is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/8b9295c5-18ee-42c2-9f66-9c64e5451a9e.png)'
  prefs: []
  type: TYPE_IMG
- en: Navigation view
  prefs: []
  type: TYPE_NORMAL
- en: Creating the bike-detail methods
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s create the `bike-detail` component:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `./Client/src/pages/bikes/bike-detail/bike-detail.component.ts` and add
    the following imports, right after the core import:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following properties after the `BikeDetailComponent` class declaration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: Note that we are using the `Bike` model as the type of our `bike` property and
    creating a simple array to hold our builders.
  prefs: []
  type: TYPE_NORMAL
- en: Note that, in a real-world web application, it is good practice to get a list
    of builders from the server to avoid becoming hard coded inside the component.
  prefs: []
  type: TYPE_NORMAL
- en: 'Still on `./Client/src/pages/bikes/bike-detail/bike-detail.component.ts`, let''s
    create the `constructor()` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: We will use `ActivatedRoute` to get the bike ID later in this section.
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside the `ngOnInit()` function, add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: Now, let's create the `getBikeDetail()` function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following code right after the `ngOnInit()` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s add the `onVote()` function. Add the following code right after
    the `getBikeDetail()` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we will create a function that checks if the logged-in user has already
    voted on the chosen bike. Remember that `RatingController.php` is using the `firstOrCreate`
    method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: We will only register the first vote. Thus, we need to show the user a simple
    message as feedback from the `Vote` function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following code right after the `onVote()` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'The following method uses a submit function to update the `bike` record. Add
    the following code right after the `checkUserVote()` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: Note that, in this step, we are using the `updateBike` method from `bikeService`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The last method is a simple function to check the bike owner. Remember that
    the user can only edit their own bike. Add the following code right after the
    `onSubmit()` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: In this code, we are using the `authService` to get the `User.id`, which we
    are comparing with `bike.user.id`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The expected result for this page when we access the `http://localhost:4200/bikes/3` URL
    will be similar to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/c22e87ff-c17c-4e1e-98f0-3022a69dec71.png)'
  prefs: []
  type: TYPE_IMG
- en: Bike detail screen
  prefs: []
  type: TYPE_NORMAL
- en: Note that we can see the Edit button on this bike because our application seed
    already filled the database with some sample information.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, if we click on the Edit bike button, we will see something similar to the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/fc0b5edf-fba8-4ec2-aa1e-08dfa1cd5192.png)'
  prefs: []
  type: TYPE_IMG
- en: Edit bike form
  prefs: []
  type: TYPE_NORMAL
- en: Creating the bike-list methods
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s create the `bike-list` component:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `./Client/src/pages/bikes/bike-list/bike-list.component.ts` and add the
    following imports, right after the core import:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following properties after the `bike-list.component` class declaration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'Still on `./Client/src/pages/bikes/bike-list/bike-list.component.ts`**, **let''s
    create the `constructor()` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside the `ngOnInit()` function, add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: Now, let's create the `this.getBikes()` function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following code right after the `ngOnInit()` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: Note that, in this code, we are using two functions to deal with success and
    error responses. It is possible to write everything inside the `subscribe()` function,
    but a better organization technique is to separate them.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following code, right after the `getBikes()` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: Here, on the protected `handleError` methods, we are just using the `console.log()`
    to show errors.
  prefs: []
  type: TYPE_NORMAL
- en: 'The expected result for this page when we access the `http://localhost:4200/bikes` URL
    will be similar to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/00dc1a31-cc36-47fc-9898-07c50840d2e5.png)'
  prefs: []
  type: TYPE_IMG
- en: Bikes list pages
  prefs: []
  type: TYPE_NORMAL
- en: Creating the builder-detail methods
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, it is time to create the `builder-detail` component. Let''s see how:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `./Client/src/pages/builders/builder-detail/builder-detail.component.ts`
    and add the following imports, right after the core import:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following properties after the `builder-detail.component` class declaration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'Still on `./Client/src/pages/builders/builder-detail/builder-detail.component.ts`,
    let''s create the `constructor()` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside the `ngOnInit()` function, add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: Now, let's create the `this.getBuilderDetail()` function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following code right after the `ngOnInit()` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'The expected result for this page when we access the `http://localhost:4200/builders/4` URL
    will be similar to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/bc81c670-a648-45f3-a5da-292174dcbe32.png)'
  prefs: []
  type: TYPE_IMG
- en: Builders detail page
  prefs: []
  type: TYPE_NORMAL
- en: Creating the builder-list methods
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, let''s create the `builder-list` methods to list all builders:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `./Client/src/pages/builders/builder-list/builder-list.component.ts` and
    add the following imports, right after the core import:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following properties after the `BuilderListComponent` class declaration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'Still on `./Client/src/pages/builders/builder-list/builder-list.component.ts`,
    let''s create the `constructor()` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside the `ngOnInit()` function, add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following code right after the `ngOnInit()` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: Note that, in this code we are using two functions to deal with success and
    error responses. It is possible to write everything inside the `subscribe()` function,
    but a better organization technique would be to separate them.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following code, right after the `getBuilders()` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: Finally, we have all the components ready to go.
  prefs: []
  type: TYPE_NORMAL
- en: 'The expected result for this page when we access the `http://localhost:4200/builders` URL
    will be similar to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/43dcaa69-1ad8-44b6-83b1-96a5a4d47b52.png)'
  prefs: []
  type: TYPE_IMG
- en: Builders list page
  prefs: []
  type: TYPE_NORMAL
- en: Dealing with Angular pipes, forms, and validation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we will see how to create a simple search component inside
    the bike list page using the new pipe feature. We will also look at how to create
    Angular forms in two ways: with template-driven forms, and with reactive forms.
    Finally, we will show you how to use form validation with Bootstrap CSS.'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a pipe filter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Pipes in Angular are a simple way to filter and transform data, very similar
    to the old AngularJS filter.
  prefs: []
  type: TYPE_NORMAL
- en: We have some default pipes in Angular (`DatePipe`, `UpperCasePipe`, `LowerCasePipe`,
    `CurrencyPipe`, and `PercentPipe`), and we can also create our own pipes.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create a custom pipe, we can use the Angular CLI to generate the scaffolding
    for us. Let''s see how it works:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open your Terminal window, and, inside `./Client/src/app`, type the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: As always, Angular CLI takes care of creating the file and the appropriate imports.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `./Client/src/app/pages/bikes/_pipes/bike-search.pipe.ts` and add the
    following code inside the `BikeSearchPipe` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: 'The previous `transform` function receive two parameters: the list and the
    search string from the input field on the search box from the bike list page.
    So, let''s see how we can use them inside the `bike-list` template.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `./Client/src/app/pages/bikes/bike-list/bike-list.component.ts` and add
    the following properties inside the search input field:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: Now that we already have the search model, let's add the pipe filter on our
    `*ngFor` loop.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following code inside the `*ngFor` property:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: 'So, when we type the bike model into the search input, we will see the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/0ab1fae1-2b66-4c09-8f9d-e306e199c530.png)'
  prefs: []
  type: TYPE_IMG
- en: Search field working
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's see how we can implement the Angular forms.
  prefs: []
  type: TYPE_NORMAL
- en: Intoducing Angular forms
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we all know, forms are an essential part of any modern web application for
    logging in a a user in to the app, adding products, and sending comments to a
    blog. Some forms are very simple, but other forms could have an array of fields,
    and even many steps and pages with tons of input fields.
  prefs: []
  type: TYPE_NORMAL
- en: 'With Angular, we can implement two types of forms:'
  prefs: []
  type: TYPE_NORMAL
- en: Template-driven forms
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reactive forms or model-driven forms
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Both are equally powerful and belong to the `@angular/forms` library. They are
    based on the same form control classes. However, they have different philosophies,
    programming styles, and techniques, and the validation is different too. In the
    next section, we will see the uniqueness of each technique.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding Angular template-driven forms
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Template-driven forms, as we explained previously, are very similar to AngularJS
    forms and make use of directives such as `ngModel` and perhaps `required`, `minlength`,
    `maxlength`, and many others. When we are using these form directives, we are
    letting the template do the work behind the scenes.
  prefs: []
  type: TYPE_NORMAL
- en: Reviewing the login form template and component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A very good example to understand template-driven forms is the login form.
    Let''s see `login.component.html` and `login.component.ts`:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `./Client/src/app/pages/auth/login/login.component.html` and review the
    template input tags:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: Note that we are using the two-way data binding syntax for `ngModel = [(ngModel)]`.
    This means that we can set the initial data from the login component class, but
    we can also update it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Remember, Angular''s `ngModel` can be used in three different ways:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ngModel`: No binding or value is assigned, and depends on the name attribute'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`[ngModel]`: One-way data binding syntax'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`[(ngModel)]`: Two-way data binding syntax'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For the submit button event, we are just using the `(ngSubmit)="onSubmit(loginForm)"
    #loginForm="ngForm"` directive, passing in the `loginForm`.'
  prefs: []
  type: TYPE_NORMAL
- en: Now that our `login.component.ts` is intact, the only thing we need is the `onSubmit`
    function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s edit the `login.component.ts` by replacing its code with the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: Note that we are passing `loginForm` to the `onSubmit(loginForm)` function and
    using the `authService` to send the data to the endpoint.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding Angular reactive/model-driven forms
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the differences between reactive/model-driven forms and template-driven
    forms is the use of directives such as `ngModel`.
  prefs: []
  type: TYPE_NORMAL
- en: The principle behind this is that we transfer the directives responsibly to
    the `component.ts` code using the forms API. This has much more power and is extremely
    productive for work, keeping all the logic in the same place, as we will see shortly.
  prefs: []
  type: TYPE_NORMAL
- en: Reviewing the register form template and component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A very good example to understand model-driven forms is the registerform. Let''s
    look at `register.component.html` and `register.component.ts`:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `./Client/src/app/pages/auth/register/register.component.html` and review
    the template input tags:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: It is almost the same notation we used on template-driven forms, but a little
    more clean. Here, we don't need the `name` attribute.
  prefs: []
  type: TYPE_NORMAL
- en: For the submit button event, we are just using the `[formGroup]="registerForm"
    (ngSubmit)="onSubmit()"` attribute and the bind function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s create the `register.component.ts`. Replace its code with the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: Note that, in this code, we are dealing with error messages on the submit function.
    In the following examples, we will look at how to implement form validation on
    both forms, but for now, let's review some important points.
  prefs: []
  type: TYPE_NORMAL
- en: Open `./Client/src/app/pages/auth/register/register.component.ts`; let's review
    the `registerComponent` class.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The first difference we can note is the imports of the `FormBuilder`, `FormGroup`,
    and `Validators` at the top of file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: 'We also need to import the `ReactiveFormsModule` inside `auth.module.ts`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: 'We can create the form using the `FormBuilder` API inside the `createForm()`
    function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: Here, we are using `Validators` to add form validation directly from the `component.ts`
    code. Brilliant, right?
  prefs: []
  type: TYPE_NORMAL
- en: 'Remember that the `fb` variables hold the `FormBuilder` that we placed inside
    our constructor: private `fb:FormBuilder`. We also set `registerForm` as `FormGroup`
    inside `RegisterClass.`'
  prefs: []
  type: TYPE_NORMAL
- en: Adding frontend form validation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we know today, it is a good practice to show constant feedback to the end
    user when we talk about user experience, so it is a good practice to validate
    your forms before sending them to the backend.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will look at how to add form validation to both the login
    and register forms.
  prefs: []
  type: TYPE_NORMAL
- en: Dealing with form validation on template-driven forms
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Open `./Client/src/app/pages/auth/login/login.component.html` and replace the
    form tag with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: Let's review the previous code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that we are using the `[ngClass]` that''s built into the Angular directive
    to apply an error class to the `div` form group if the form is invalid:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: 'To show the error message, we will create two new divs right after the input
    fields:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: With the help of `ngIf` and the form states (dirty, touched), we can see each
    error if the input field matches this condition.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next rule is that the following `div` shows backend errors that may occur:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, validation is set on the Submit button using the `[disabled]` directive:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: 'The final result of our form in action will be something like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/df2d3413-38bb-4bba-a188-f946432f8bb4.png)'
  prefs: []
  type: TYPE_IMG
- en: Login form validation
  prefs: []
  type: TYPE_NORMAL
- en: Dealing with form validation on model-driven forms
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Open `./Client/src/app/pages/auth/register/register.component.html` and replace
    the form tag with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: Let's review the previous code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that we are using the `[ngClass]` that''s built into Angular to apply
    an `error` class to the `div` form group if the form is invalid:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: Here, you can note that we are using the `registerForm.get()` method to make
    the input field a little different from the login form.
  prefs: []
  type: TYPE_NORMAL
- en: 'To show the error message, we will create three new `div` right after the input
    fields:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: 'The next rule is that the following `div` is used to show backend errors that
    may happen:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, the validation is set on the Submit button using the `[disabled]`directive:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: 'The final result of our form in action will look something similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/2f67b8b7-9c41-4218-a4b7-5991f3bcfd9f.png)'
  prefs: []
  type: TYPE_IMG
- en: Register form validation
  prefs: []
  type: TYPE_NORMAL
- en: 'In the next screenshot, we can see the backend errors from where we tried to
    insert an email address that''s already in use:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/ea9e5c96-3cbc-456e-8a02-48134be9257c.png)Backend error message'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have finished one more chapter, and our sample application has all the key
    points of a modern web application. We learned how to install, customize, and
    extend a Bootstrap CSS framework, and learned how to use `NgBootstrap` components.
  prefs: []
  type: TYPE_NORMAL
- en: We also understood how components and services can be set up together, form
    validation, and many other very useful techniques.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will see how to set up linters for SCSS and TS files
    and how to deploy using Docker images.
  prefs: []
  type: TYPE_NORMAL
