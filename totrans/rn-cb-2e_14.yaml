- en: Deploying Your App
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Deploying development builds to an iOS device
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying development builds to an Android device
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying test builds to HockeyApp
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying iOS test builds to TestFlight
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying production builds to the Apple App Store
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying production builds to the Google Play Store
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying Over-The-Air updates
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Optimizing React Native app size
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you're an independent developer, you're likely to go through a few different
    stages of development. The first stage will find you testing your app on your
    personal iOS or Android device. After exhausting this stage, you're probably going
    to want to share it with a select group of people to get user feedback. Eventually,
    you're going to reach a point where your app is ready to be released into the
    world via app stores. This chapter will walk through each one of these stages
    and cover pushing updates to your app, along with a few optimization tips.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying development builds to an iOS device
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: During development, you'll likely spend much of your time testing your iOS app
    using the iOS Simulator that comes installed with Xcode. While the iOS Simulator
    is by far the best performing and closest method to running our application on
    an iOS device, it's still not the same as the real thing. The iOS Simulator uses
    the computer's CPU and GPU to render the simulated OS, so depending on your development
    machine, it may end up performing better (or worse) than the actual device.
  prefs: []
  type: TYPE_NORMAL
- en: Thankfully, Expo's ability to test running code on an actual device comes one
    step closer to the real end product, but there are still differences between a
    final app and a development app running in Expo. And if you're building a pure
    React Native app, you won't have the luxury of using Expo to easily run the app
    on a device.
  prefs: []
  type: TYPE_NORMAL
- en: Either way, you'll eventually want to test the real app on a physical device
    so you can experience the actual UX and performance of the end product.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will walk you through taking a React Native app and deploying
    it to an iPhone or iPad.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We''ll just need a new pure React Native app, which we''ll name `TestDeployApp`.
    You can create the app via the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Also, make sure your iOS device is connected to your development machine via
    USB.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's first open the newly created React Native iOS project in Xcode. Open the
    Project Editor by selecting the root of the project in the left panel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Under the General tab of the Project Editor, select the iOS app in the TARGETS
    section on the left. Under the Signing section, select your Team, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/17f1f486-4562-4110-8a55-a7129058c416.png)'
  prefs: []
  type: TYPE_IMG
- en: Repeat this step for two each of the entries in the TARGETS list.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select your device in the destination selector, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/b959d5eb-7689-4e8e-8475-3f6e9afcb951.png)'
  prefs: []
  type: TYPE_IMG
- en: To start running the app on your connected device, just press the Play button.
    You'll have to make sure your device is plugged in, unlocked, and trusted for
    it to show up in the devices list in Xcode. If this is the first time running
    an app you've developed on this device, you'll also need to adjust the settings
    to trust apps from your developer account. On the iOS device, this setting can
    be found in Settings | General | Device Management.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Deploying our development build to the device simply involves designating a
    Team, then running the app as you would for use on the Xcode simulator, but targeting
    the plugged in device instead. We use the localhost packager to create our bundle
    file. This file then gets saved locally on the device for the future. Note that,
    since this is a development build, the code is not yet as optimized as it will
    be in a final release. You will see a significant performance increase when moving
    to a production release.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying development builds to an Android device
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While developing an Android application, you'll most often probably be running
    the app on an Android emulator. While convenient, an emulator will have poor performance
    when compared with a real Android device.
  prefs: []
  type: TYPE_NORMAL
- en: The best way to test an app is to use a physical Android device. This recipe
    will walk through deploying a React Native app to a physical Android device.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We''ll just need a new pure React Native app, which we''ll name `TestDeployApp`.
    You can create the app via this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Also, make sure your iOS device is connected to your development machine via
    USB.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's start by opening our React Native Android project in Android Studio.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, press the run button, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/7c3b453b-faae-4e88-9c3f-0c2b632fdd57.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Make sure the Choose a running device radio button is selected, and that your
    device is displayed in the list. Press OK to continue, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/e716a726-e91d-46c2-b09c-2cd2946e7c81.png)'
  prefs: []
  type: TYPE_IMG
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The React Native packager should start when you run the application. If it
    doesn''t, you''ll have to manually start the packager. If you see an error screen
    with the message Could not get BatchedBridge, please make sure your bundle is
    packaged correctly or Could not connect to development server, you should be able
    to fix this by running the following command in the Terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Much like Xcode, we can run our app by simply plugging in a real device, pressing
    Run, and selecting the device the app should run on. The only complication that
    might arise is setting up communication between the device and the development
    machine. These problems can often be solved with the command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This establishes a port forward from the device to the host computer. This is
    a development build, and the code is not yet optimized, so there will be a performance
    increase once the app is built as a production release.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying test builds to HockeyApp
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before releasing an app into the wild, it''s important to stress test your
    app and to get user feedback when possible. To accomplish this, you need to create
    a signed build of your app that you can share with a group of test users. For
    a robust test build, you''ll need two things: analytics/reporting on app performance,
    and a mechanism for delivery. HockeyApp provides this and more for your test builds
    on both iOS and Android. While both of the official platforms for releasing applications
    to the Apple App Store and Google Play Store provide functionality for testing
    and analytics, HockeyApp provides a unified place for handling these concerns,
    and a secondary source of metrics, crash reporting, and more.'
  prefs: []
  type: TYPE_NORMAL
- en: It should be noted that HockeyApp was recently acquired by Microsoft. They have
    announced that the HockeyApp product will be discontinued in favor of Microsoft's
    App Center in November of 2019\. You can read more about it on the product transition
    page at [https://hockeyapp.net/transition](https://hockeyapp.net/transition). This
    recipe will walk through deploying a React Native app to HockeyApp for testing
    purposes. We will walk through both iOS and Android releases.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For this recipe, we will be using the same empty, pure React Native app from
    the last two recipes, which we named `TestDeployApp`. For iOS deployments, you
    will need to be enrolled in the Apple Developer Program, and you''ll need to have
    `cocoapods` installed. The easiest way to install `cocoapods` is to use homebrew,
    via this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: You'll also need to have a HockeyApp account, which you can sign up for at their
    website at [https://hockeyapp.net/](https://hockeyapp.net/)
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First, we need to install the `react-native-hockeyapp` module in our application.
    Open the Terminal, go to your application''s root project directory, and enter
    the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Go into your `ios/` directory and initialize your Podfile:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Open your Podfile and add `pod "HockeySDK"` to your target.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Back in the Terminal, install the Podfile, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s open up Xcode and open our React Native project: (`ios/TestDeployApp.xcodeproj`).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'I recommend changing your Bundle Identifier to something more meaningful than
    the default, so please change it in your General Settings dialog, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/dcb61823-96a7-4a23-9fae-8ec0ceb79d7c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Drag and drop `./ios/Pods/Pods.xcodeproj` into the Libraries group in your
    project navigator, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/a9faaea8-c68a-4626-85a4-a77f0bb0f697.png)'
  prefs: []
  type: TYPE_IMG
- en: Drag and drop the `RNHockeyApp.h` and `RNHockeyApp.m` files located in `./node_modules/react-native-hockeyapp/RNHockeyApp/RNHockeyApp` into
    the same Libraries group.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, we'll go to the HockeyApp site and create our app there. Log in and click
    the New App.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Since we do not have our build ready yet, click manually in the phrase Don't
    want to upload a build? Create the app manually instead in the following modal.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'When filling out the fields in the Create App form, be sure to match the Title
    and Bundle Identifier that we defined earlier in *step 6,* then press Save, as
    follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/7c49595c-2cde-4474-9626-6ed48f719a08.png)'
  prefs: []
  type: TYPE_IMG
- en: Make a note of the App ID since we'll be using it in the next step.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open `App.js` and add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Back in Xcode, set Generic iOS Device as your destination target and build
    (Product | Build) the app, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/c8579b2c-6812-44fa-b86b-aa9288275ef3.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, we need to create our `.ipa` file. This can be done from the Xcode menu
    via Product | Archive.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This will open the Archives list. Press the Distribute App button to start the
    process of creating the `.ipa`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the Development option and press Next.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Your provisioning team should automatically be selected. With the correct Team
    selected, press Next.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Leave the default Export settings and press Next. On the summary page, also
    press Next.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the destination directory and press Export.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Back in the *HockeyApp* browser window, click Add Version.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag the `.ipa` file we just exported into the modal window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We can leave the settings here set to their defaults, so continue pressing Next until
    the last modal screen, then press Done at the summary screen. That's it for the
    iOS app. You can add users to your *HockeyApp* app, and your testers should then
    be able to download your app. Let's switch over to the Android side of things.
    Open Android Studio, then open the Android folder in our React Native.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Repeat *step 8* to *step 11*, changing the Platform to Android, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/dc9b38e8-c6ac-4821-8f03-b3dfe396616b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, we need to build our `.apk` file. You can find the most up-to-date method
    for building the `.apk` in the React Native documentation, located at:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[https://facebook.github.io/react-native/docs/signed-apk-android.html](https://facebook.github.io/react-native/docs/signed-apk-android.html)'
  prefs: []
  type: TYPE_NORMAL
- en: Repeat *step **21* and *step* *22* for the `.apk` generated from our Android
    project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For this recipe, we used *HockeyApp* for its two main features: its beta distribution
    and its HockeySDK (which supports crash reporting, metrics, feedback, authentication,
    and notifications for updates). For iOS, beta distribution is done through the
    OTA enterprise distribution mechanism hosted by *HockeyApp*. When you sign your
    app, you control which devices can open it. *HockeyApp* just sends notifications
    and provides the URL for beta testers to download your app through its enterprise
    app store. Android is simpler since there is no need to worry about how apps are
    transferred. This means *HockeyApp* hosts the `.apk` file on a web server that
    testers can download and install.'
  prefs: []
  type: TYPE_NORMAL
- en: For more info on setting up *HockeyApp* on Android, you can read the official
    documentation at [https://support.hockeyapp.net/kb/client-integration-android/hockeyapp-for-android-sdk](https://support.hockeyapp.net/kb/client-integration-android/hockeyapp-for-android-sdk).
  prefs: []
  type: TYPE_NORMAL
- en: Deploying iOS test builds to TestFlight
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before *HockeyApp* came along, the most popular service for beta testing mobile
    apps was TestFlight. In fact, it was so good at doing just that, that Apple purchased
    its parent company and integrated it into iTunes Connect. TestFlight now serves
    as the official app testing platform for Apple. There are a few differences between
    TestFlight and *HockeyApp* to consider. First and foremost, TestFlight became
    iOS only when it was purchased by Apple. Second, there are two styles of testing
    in TestFlight: internal and external. **Internal testing** involves sharing the
    application with Developer or Admin role members of your team, and limits distribution
    to 25 testers across 10 devices each. **External testing** allows you to invite
    up to 2,000 testers who do not have to be members of your organization. This also
    means that these testers do not use up your device quota. External testing applications
    go through the **Beta App Review** performed by Apple, which is not quite as rigorous
    as Apple''s review for releasing an app to the App Store, but it is a good first
    pass.'
  prefs: []
  type: TYPE_NORMAL
- en: This recipe focuses on taking our React Native app and deploying a test build
    to TestFlight. We will be setting up an internal test, since we do not want Apple
    reviewing our example React Native app, but the procedure is the same for both
    internal and external testing.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this recipe, we will be using the same boilerplate React Native app from
    previous recipes, which we've named `TestDeployApp`. You will also need to be
    enrolled in the Apple Developer Program, you'll need to have your development
    and distribution certificates set up in Xcode, and your app will need to have
    its AppIcon set.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's start by opening our project in Xcode via the `ios/TestDeployApp.xcodeproj`
    file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'As stated in the last recipe, I also recommend changing your Bundle Identifier
    to something more meaningful than the default, for example:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/6fc38221-6cfa-4128-94c1-667c5811eab1.png)'
  prefs: []
  type: TYPE_IMG
- en: Next, let's log in to the Apple Developer Program and navigate to the App ID
    registration page, located at [https//:developer.apple.com/account/ios/identifier/bundle](https://developer.apple.com/account/ios/identifier/bundle).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Here, fill out the Name and Bundle ID for your project, then press the Continue
    button, followed by the Register button, and finally the Done button to complete
    registration of the app.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, we'll log in to the iTunes Connect site, located at [https://itunesconnect.apple.com](https://itunesconnect.apple.com).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In iTunes Connect, navigate to My Apps, then press the Plus (+) button and select
    New App to add a new app.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the New App dialog, fill out the Name and Language. Select the Bundle ID
    to match the one you created previously, and add a unique app reference in the
    SKU field, then press Create.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, navigate to the TestFlight section for your app and be sure to fill out
    the Localizable Information section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's return to Xcode to create the `.ipa` file. Select Generic iOS Device for
    the active scheme, then create the file via the Xcode menu (Product | Archive).
    This will open the Archives list, where you can press the Upload to App Store
    button to upload the app.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Your provisioning team should automatically be selected. Be sure the correct
    team is selected and press Choose. Once the archive is created, press the Upload
    button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After uploading the app, you'll need to wait until you receive an email from
    iTunes Connect informing you that the build has completed processing. Once processing
    is complete, you can return to the iTunes Connect page and open the Internal Testing
    view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Internal Testing section, click Select Version to Test and select your
    build, then click the Next button. At the Export Compliance screen, press OK.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We're ready to add internal testers. Select the users you would like to test
    the app, then click the Start Testing button and confirm your selection in the
    following modal. Your users should now get an invitation email to test your app!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: TestFlight serves as a first-class citizen in the App Store publishing pipeline.
    Apple has integrated its support for application beta testing distribution directly
    into iTunes Connect, creating a smooth and seamless process for developers. This
    procedure is largely the same as deploying to the App Store, except that when
    using iTunes Connect, you must enable and configure testing.
  prefs: []
  type: TYPE_NORMAL
- en: It is a seamless experience for the tester as well. As soon as you add test
    users in iTunes Connect, they are notified to install the TestFlight app, where
    they will have easy access to the apps they can test. TestFlight also makes the
    process easier for developers by not requiring them to add any extra third-party
    libraries or code to support TestFlight, as would be needed with *HockeyApp*.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying production builds to the Apple App Store
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Once you''ve thoroughly tested your app, you''re ready to move on to the next
    (and likely the most exciting) step in the iOS app making process: releasing to
    the Apple App Store.'
  prefs: []
  type: TYPE_NORMAL
- en: This recipe will walk through the process of preparing your production build
    and submitting it to the Apple App Store. We won't actually be submitting the
    app to the store, since we're working with an example app instead of a production-ready
    one. The last few steps in the process, however, are very straightforward.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this recipe, we will again be using the simple React Native example app
    from earlier recipes, `TestDeployApp`. You'll of course also need to be enrolled
    in the Apple Developer Program, and have your development and distribution certificates
    set up in Xcode as discussed earlier in this chapter. For a real production app
    deployment, you will also need to have both the AppIcon set and screenshots of
    the app ready for use in iTunes.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's start by opening up Xcode using the `ios/TestDeployApp.xcodeproj` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As stated before, it's recommended that you change your Bundle Identifier to
    something more meaningful than the default, so be sure to change it in the General
    Settings dialog.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'It''s also a good idea to test your app in Production Mode on your device.
    This can be done by changing your app scheme''s Build Configuration (found via
    the Product | Scheme | Edit Scheme menus) to Release, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/af39d72a-9c2b-48f2-a5c4-9b56602d1a30.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, you''ll need to register the app on the App ID registration page, located
    at:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[https://developer.apple.com/account/ios/identifier/bundle](https://developer.apple.com/account/ios/identifier/bundle)'
  prefs: []
  type: TYPE_NORMAL
- en: This step requires an active Apple Developer Program account.
  prefs: []
  type: TYPE_NORMAL
- en: Fill out the Name and Bundle ID fields for your project and press the Continue
    button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, we'll log in to the iTunes Connect site, located at [https://itunesconnect.apple.com](https://itunesconnect.apple.com).
    In the My Apps section, press the Plus (+) button and select New App.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You'll need to fill out the Name and Language in the following dialog, then
    select the Bundle ID matching the one you created earlier in the recipe. Also,
    add a unique app reference for the SKU and press the Create button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's return to Xcode and create the `.ipa` file. Select Generic iOS Device
    for the active scheme, and create the file via the menus (Product | Archive),
    which will open the Archives list. Finally, press Upload to App Store.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select your Provisioning Team, then press Choose.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the archive has been created, press the Upload button. Once the build has
    been processed, you'll receive an email from iTunes Connect.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the app is processed, return to iTunes Connect. Under the App Store section,
    open App Information and select the category that your app fits into.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the 1.0 Prepare for Submission section under iOS APP. Fill out all the
    required fields, including App Screenshots, Description, Keywords, and Support
    URL.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, under the Build section, select the `.ipa` we built in *step* 8.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, fill out the Copyright and App Review Information sections, then click
    the Submit for Review button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we covered the standard process for publishing iOS apps to the
    App Store. There are no React Native-specific steps we needed to follow in this
    case, since the final product (the `.ipa` file) contains all of the code needed
    to run the React Native packager, which will in turn build the `main.jsbundle`
    file in release mode.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying production builds to Google Play Store
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe will walk through the process of preparing a production build of
    our app and submitting it to the Google Play Store. As in the last recipe, we'll
    stop right before actually submitting to the App Store, since this is only an
    example React Native app, but the rest of this process is also straightforward.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this recipe, we will be using the same simple React Native app we've used
    throughout this chapter, `TestDeployApp`. You will need to have a Google Play
    Developer account in order to submit an app to the store, and you'll also need
    to have all the icons and screenshots ready for the Play Store if you want to actually
    publish your app.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's start by opening the React Native project in Android Studio. The first
    step is building the `.apk` file. As mentioned earlier in this chapter, the process
    of creating a production Android app from a React Native project is involved and
    prone to change. Visit the React Native Documentation for creating the `.apk` at [https://facebook.github.io/react-native/docs/signed-apk-android.html](https://facebook.github.io/react-native/docs/signed-apk-android.html).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, let's open the Google Play Developer Console in a web browser, located
    at [https://play.google.com/apps/publish/](https://play.google.com/apps/publish/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s kick off the process by clicking Add new application. Fill out the Title field,
    and click the Upload APK button, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/2082ac1f-1326-45f1-bb3a-2ba990af147a.png)'
  prefs: []
  type: TYPE_IMG
- en: You'll see the APK section of the Publish screen next. Click Upload your first
    APK to Production, then drag and drop (or select) your `.apk` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A series of self-explanatory modals will follow. Go through each of the categories
    in the side menu on the left (Store Listing, Content Rating, and so on). and fill
    out all of the information accordingly.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once you have satisfied all the requirements, press the Publish App button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we covered the process for publishing Android apps to the Google
    Play Store. By following the directions linked to in *step* 2, your React Native
    app will have been through the Gradle `assembleRelease` process. The `assemble`
    process runs the packager to create the JavaScript bundle file, compile the Java
    classes, package them together with the appropriate resources, and finally allow
    you to sign the app into an `.apk`.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying Over-The-Air updates
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One useful side effect of our React Native app being written in JavaScript is
    that the code is loaded at runtime, which is similar to how Cordova hybrid applications
    work. We can leverage this functionality to push updates to our application using
    **Over-The-Air** (**OTA**). This allows for adding features and bug fixes without
    having to go through the App Store approval process. The only limitation to OTA
    updates for React Native is that we cannot push compiled (Objective-C or Java)
    code, which means the update code must be in the JavaScript layer only. There
    are a few popular services that provide cloud-based OTA app updates. We will be
    highlighting `CodePush`, a service by Microsoft.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe will cover setting up and pushing updates using `CodePush` for our
    React Native app on both iOS and Android.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this recipe, we will be using the same simple React Native app we've used
    throughout this chapter, `TestDeployApp`. We'll be deploying the apps to physical
    devices running in production/release mode, which will allow the app to receive
    updates from the CodePush servers.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to use CodePush, we will need to install the CodePush CLI and create
    a free account. This can be done in a Terminal by running the following two commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The next step is to register our app with CodePush. Make a note of the deployment
    keys for the app provided by the output from running `code-push register`. We
    will be using the **staging key** for this recipe. The documentation suggests
    adding one app per platform, with an `-IOS` or `-Android` suffix for each. To
    add the app to CodePush, use this command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'We''re also going to need the React Native CodePush module installed in the
    React Native project directory. This can be done with `npm`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Or, with `yarn`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The next step is linking the CodePush native modules with our project. When
    prompted for your deployment key for Android and iOS, use the staging key discussed
    in *step 2*. Linking the native modules can be done with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we need to set our React Native app up to use CodePush. Inside of `index.js`,
    we''ll need to add three things: the CodePush import, an options object, and a
    call to the imported `codePush` module when registering the app via `AppRegistry.registerComponent`.
    Set up the app as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'To test out our changes in the iOS app, let''s deploy to our iOS device. Open
    the React Native project in Xcode, change your scheme''s Build Configuration (Product
    | Scheme | Edit Scheme...) to Release, then press Run, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/0b2c207c-df88-4ee7-9e38-3b1022ab7b51.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, make some sort of arbitrary change to the React Native code in the app,
    then in the Terminal, run the following command to update the app with the new
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, close and reopen the app on your iOS device. You should see the following
    prompt:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/c759c174-a9f6-49de-b2b5-de304a017076.png)'
  prefs: []
  type: TYPE_IMG
- en: After continuing past the prompt, the app will update itself to the latest version!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's also test the feature on Android. You'll need to have made your Android
    app into a `.apk` file by following the steps outlined in the React Native documentation
    at [https://facebook.github.io/react-native/docs/signed-apk-android.html](https://facebook.github.io/react-native/docs/signed-apk-android.html).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'With your Android device plugged into your development machine, run the following
    command in the Terminal from the `android/` directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, make a change to the React Native JavaScript code. As long as new code
    is added, we can use that changed code to update the app. Then, run the following
    command in the Terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Once again, close and reopen your app on your Android device to get the following
    prompt:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/321c9e80-f6db-4c2a-8ad3-7dee57827d17.png)'
  prefs: []
  type: TYPE_IMG
- en: After proceeding past the prompt, the app will update itself to the latest version.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: CodePush (as well as other cloud-hosted OTA update platforms) works by using
    the same technique that has existed in React Native since its inception. React
    Native loads a JavaScript bundle when the app is initialized. During development,
    this bundle is loaded from `localhost:3000`. Once we've deployed an app, however,
    it will look for a file named `main.jsbundle` that has been included in the final
    product. By adding the call to `codePush` in `registerComponent` in *step 5*,
    the app will check in with the CodePush API to see if there is an update. If there
    is a new update, it will prompt the user about it. Accepting the prompt downloads
    the new `jsbundle` file and restarts the app, causing the code to be updated.
  prefs: []
  type: TYPE_NORMAL
- en: Optimizing React Native app size
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before deploying our app to production, it's always a good idea to shrink the
    app bundle size to as small a file as possible, and there are several techniques
    we can leverage to do so. These can involve supporting fewer devices or compressing
    included assets.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe will cover a few techniques for limiting production package file
    sizes in both iOS and Android React Native apps.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this recipe, we will be using the same simple React Native app we've used
    throughout this chapter, `TestDeployApp`. You'll also need to have code signing
    working for iOS, and the ability to create `.apk` files as covered in previous
    recipes.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will start off with some simple optimizations performed on our bundled assets,
    which often includes images and external fonts:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For PNG and JPEG compression, you can use a service such as [http://www.tinypng.com](http://www.tinypng.com)
    to reduce the file size with little to no reduction in image quality.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you use the `react-native-vector-icons` library, you will notice that it
    bundles eight different font icon sets. It's recommended that you remove any of
    the icon font libraries that are not being used by your app.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SVG files can also be compressed and optimized. One service for this purpose
    is [http://compressor.io](http://compressor.io).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Any audio assets packaged with your app should be using a file format that can
    leverage high quality compression, such as MP3 or AAC.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For iOS, there's not much that can be done to further reduce file size beyond
    the settings that are enabled by default on the release scheme. These include
    enabling Bitcode for app thinning and setting the compiler optimization to Fastest,
    Smallest [-Os].
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For Android, there are two things you can do that could improve file size:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In Android Studio, open `android/app/build.gradle` and locate the following
    lines, then update their values to the following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'If you plan to only target ARM-based Android devices, we can prevent it from
    building for x86 altogether. In the `build.gradle` file, locate the `splits abi`
    object and add the following line to not include x86 support:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'You can read more about ABI management in the Android docs at:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://developer.android.com/ndk/guides/abis](https://developer.android.com/ndk/guides/abis)'
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we covered techniques that can be used to reduce app file size.
    The smaller the JavaScript bundle is, the faster the JavaScript interpreter will
    be able to parse the code, translating into faster app load times, and quicker
    OTA updates. The smaller we can keep our `.ipa` and `.apk` files, the faster our
    users will be able to download the app.
  prefs: []
  type: TYPE_NORMAL
