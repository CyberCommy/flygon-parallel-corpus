- en: 'Section 2: Implementing Object-Oriented Concepts in C++'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The goal of this section is to understand how to implement OO designs using
    both C++ language features and proven programming techniques. C++ can be used
    for many paradigms of coding; programmers must strive to program in an OO fashion
    in C++ (it's not automatic). This is the largest section of the book, as understanding
    how to map language features and implementation techniques to OO concepts is paramount.
  prefs: []
  type: TYPE_NORMAL
- en: The first chapter in this section explores classes in great detail, beginning
    by describing the OO concepts of encapsulation and information hiding. Language
    features such as member functions, the this pointer, access regions in detail,
    constructors in detail (including the copy constructor), destructor, qualifiers
    on member functions (const, static, inline), and qualifiers on data members (const,
    static) are reviewed in depth.
  prefs: []
  type: TYPE_NORMAL
- en: The next chapter in this section tackles single inheritance basics with the
    OO concepts of generalization and specialization, detailing inherited constructors
    through the member initialization list, the order of construction and destruction,
    and understanding inherited access regions. This chapter pushes deeper by exploring
    public versus protected and private base classes and how these language features
    change the OO meaning of inheritance.
  prefs: []
  type: TYPE_NORMAL
- en: The subsequent chapter delves into the OO concept of polymorphism with respect
    to understanding the concept as well as its implementation in C++ using virtual
    functions. Dynamic binding of method to operation is examined. The virtual function
    table is explored to explain runtime binding. The next chapter explains abstract
    classes in detail, pairing the OO concept with its implementation using pure virtual
    functions. The OO concept of an interface (not explicitly in C++) is introduced
    and a method for implementation is reviewed. Casting up and down the inheritance
    hierarchy completes this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: The next chapter explores multiple inheritance and the potential issues that
    may arise from using this feature. Virtual base classes are detailed as well as
    the OO concept of a discriminator to help determine if multiple inheritance is
    the best design for a given scenario or if another may exist.
  prefs: []
  type: TYPE_NORMAL
- en: The final chapter in this section introduces the concepts of association, aggregation
    and composition and how to implement these common object relationships using pointers
    or references, sets of pointers, or embedded objects.
  prefs: []
  type: TYPE_NORMAL
- en: 'This section includes the following chapters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 5*](B15702_05_Final_NM_ePub.xhtml#_idTextAnchor199)*, Exploring Classes
    in Detail*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 6*](B15702_06_Final_NM_ePub.xhtml#_idTextAnchor262)*, Implementing
    Hierarchies with Single Inheritance*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 7*](B15702_07_Final_NM_ePub.xhtml#_idTextAnchor298)*, Utilizing Dynamic
    Binding through Polymorphism*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 8*](B15702_08_Final_NM_ePub.xhtml#_idTextAnchor335)*, Mastering Abstract
    Classes*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 9*](B15702_09_Final_NM_ePub.xhtml#_idTextAnchor361)*, Exploring Multiple
    Inheritance*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 10*](B15702_10_Final_NM_ePub.xhtml#_idTextAnchor386)*, Implementing
    Association, Aggregation and Composition*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
