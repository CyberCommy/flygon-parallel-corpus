- en: Setting Up for Android Development
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Java is one of the most widely used languages worldwide and, until recently,
    was the language of choice for Android development. Java, in all its greatness,
    still has some issues. Over the years, we've seen the evolution of a number of
    JVM languages that have tried to fix the issues that come with Java. A quite recent
    one is Kotlin. Kotlin is a new programming language developed by JetBrains, a
    software development company that produces software developer tools (one of their
    products is IntelliJ IDEA, which Android Studio is based on).
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we''ll take a look at:'
  prefs: []
  type: TYPE_NORMAL
- en: What makes Kotlin great for Android development
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What you need to be ready for Android development
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Why develop Android with Kotlin?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Of all the JVM languages, Kotlin is the only one that offers a lot more to Android
    developers. Kotlin is the only JVM language, other than Java, which offers integrations
    with Android Studio.
  prefs: []
  type: TYPE_NORMAL
- en: Let's take a look at some of Kotlin's amazing features.
  prefs: []
  type: TYPE_NORMAL
- en: Concise
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of Java's biggest issue is verbosity. Anyone who has ever tried writing
    a simple *hello world* program in Java will tell you the number of lines of code
    that requires. Unlike Java, Kotlin is not a verbose language. Kotlin eliminates
    a lot boilerplate code such as `getters` and `setters`. For example, let's compare
    a POJO in Java to the same POJO in Kotlin.
  prefs: []
  type: TYPE_NORMAL
- en: '**Student POJO in Java**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '**Student POJO in Kotlin**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, there's way less Kotlin code for the same functionality.
  prefs: []
  type: TYPE_NORMAL
- en: Say bye bye to the NullPointerException
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the major pain points with using Java and a number of other languages
    has to do with accessing a null reference. This can result in your application
    crashing without showing the user an adequate error message. If you're a Java
    developer, I'm pretty sure you're well acquainted with the almighty `NullPointerException`. One
    of the most amazing things about Kotlin is null safety.
  prefs: []
  type: TYPE_NORMAL
- en: 'With Kotlin, a `NullPointerException` can only be caused by one of the following:'
  prefs: []
  type: TYPE_NORMAL
- en: An external Java code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An explicit call to throw the `NullPointerException`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Usage of the `!!` operator (we'll learn more about this operator later)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data inconsistency regarding initialization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How cool is that?
  prefs: []
  type: TYPE_NORMAL
- en: Java interoperability
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Kotlin is developed to be able to work comfortably with Java. What this means
    for developers is that you can make use of the libraries written in Java. You
    can also work with legacy Java code without worry. And, the fun part about it
    is you can also call Kotlin code in Java.
  prefs: []
  type: TYPE_NORMAL
- en: This feature is very important for Android developers because, currently, Android
    APIs are written in Java.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up your environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before beginning your Android development journey, there are number things you
    have to do to make your machine Android developer-ready. We'll go through them
    in this section.
  prefs: []
  type: TYPE_NORMAL
- en: You can skip this section if you're not new to Android development.
  prefs: []
  type: TYPE_NORMAL
- en: Java
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Since Kotlin runs on the JVM, we have to make sure that our machine has the
    **Java Development Kit **(**JDK**) installed. If you do not have Java installed,
    skip to the section on installing the JDK. If you're not certain, you can follow
    the following instructions to check the version of Java installed on your machine.
  prefs: []
  type: TYPE_NORMAL
- en: 'On Windows:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the Windows Start menu
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Under the Java Program listing, select About Java
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A popup will show, with details about the version of Java on the machine:![](img/4a49056b-26e4-482d-a202-f0933799b944.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'On a Mac or any other Linux machine:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the Terminal app. To do this, open launchpad and type `terminal` in the
    search box. The Terminal app will show up as shown in the following screenshot.
    Select it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/564cd114-cbd6-44b0-b8aa-58374caa7b39.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In Terminal, type the following command to check the JDK version on your machine:
    `java -version`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If you have the JDK installed, the version of Java will be displayed as shown
    in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/eec560b1-e3c5-4ec0-9112-71bc5b58a0ff.png)'
  prefs: []
  type: TYPE_IMG
- en: Installing the JDK
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open your browser and go to the Java website: [http://www.oracle.com/technetwork/java/javase/downloads/index.html](http://www.oracle.com/technetwork/java/javase/downloads/index.html)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Under the Downloads tab, click on the **Download** button under the JDK, as
    shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/dc5d2c84-a3e9-4ead-bd29-f3db47e02beb.png)'
  prefs: []
  type: TYPE_IMG
- en: On the next screen, select the Accept License Agreement checkbox and click on
    the download link for the product that matches your operating system
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When the download is complete, go ahead and install the JDK
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When the installation is complete, you can run the version check command again
    to be sure your installation was successful
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Android Studio
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A number of **IDEs** support Android development, but the best and most used
    Android IDE is Android Studio. Android Studio is based on the IntelliJ IDE (developed
    by JetBrains).
  prefs: []
  type: TYPE_NORMAL
- en: Installing Android Studio
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Go over to the Android Studio page, [https://developer.android.com/sdk/installing/studio.html](https://developer.android.com/sdk/installing/studio.html), and
    click the DOWNLOAD ANDROID STUDIO button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b6f19183-98fc-402d-919d-d6242c53fed9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'On the popup that appears, read and accept the terms and conditions and click
    the DOWNLOAD ANDROID STUDIO FOR MAC button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/82780a3a-bd4f-4e0b-91ff-74c635bc6615.png)'
  prefs: []
  type: TYPE_IMG
- en: The name of the button is different depending on the operating system you're
    using.
  prefs: []
  type: TYPE_NORMAL
- en: The download will begin and you'll be redirected to an instructions page ([https://developer.android.com/studio/install](https://developer.android.com/studio/install)).
  prefs: []
  type: TYPE_NORMAL
- en: Follow the instructions specified for your operating system to install Android
    Studio. When the installation is complete, open Android Studio and start the setup
    process.
  prefs: []
  type: TYPE_NORMAL
- en: Getting Android Studio ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'On the Complete Installation screen, make sure the I do not have a previous
    version of Studio or I do not want to import my settings option is selected, and
    click the OK button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fd000e7f-e483-4041-a4e1-0ecf44ff09fb.png)'
  prefs: []
  type: TYPE_IMG
- en: 'On the Welcome screen, click Next to move to the Install Type screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8172f9df-9d64-4d31-be41-d9dd01fe6821.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Then, select the Standard option and click Next to continue:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2abf755b-e3c6-4752-8e05-1d9dd00a73b1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'On the Verify Settings screen, confirm your setup by clicking the Finish button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1d604ecf-f60a-4e84-b9c1-7bc4cf009bf1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The SDK components listed on the Verify Settings screen will start downloading.
    You can click on the Show Details button to view the details of the components
    being downloaded:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7de2a4a6-bf91-4e1e-9154-5c763c61c461.png)'
  prefs: []
  type: TYPE_IMG
- en: When the download and installation is complete, click the Finish button. That's
    it. You're done installing and setting up Android Studio.
  prefs: []
  type: TYPE_NORMAL
- en: Creating your first Android project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'On the Welcome to Android Studio screen, click Start a new Android Studio project:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d6fa10c7-a42f-4ea1-899a-342b2744b84e.png)'
  prefs: []
  type: TYPE_IMG
- en: This starts the Create New Project wizard. On the Configure your new project
    screen, enter `TicTacToe` as the Application name. Specify the Company domain.
    The Package name is generated from the company domain and the application name.
  prefs: []
  type: TYPE_NORMAL
- en: 'Set the Project location to a location of your choice, and click Next:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a08bc2ea-00ab-4798-8ec6-5b2476a35c9f.png)'
  prefs: []
  type: TYPE_IMG
- en: Choosing an SDK
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: On the Target Android Devices screen, you have to select the device types and
    the corresponding minimum version of Android required to run your app. The Android **Software
    Development Kit **(**SDK**) provides tools required to build your Android app
    irrespective of your language of choice.
  prefs: []
  type: TYPE_NORMAL
- en: Each new version of the SDK comes with a new set of features to help developers
    provide more awesome features in their apps. The difficulty, though, is Android
    runs on a very wide range of devices, some of which do not have the capabilities
    to support the latest versions of Android. This puts developers in a tough position
    of choosing between implementing great new features or supporting a wider range
    of devices.
  prefs: []
  type: TYPE_NORMAL
- en: 'Android tries to make this decision easier by providing the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Data on the percentage of devices using specific SDKs to help developers make
    an informed choice. To view this data in Android Studio, click Help me choose under
    the minimum SDK dropdown. This will show you a list of currently supported Android
    SDK versions with their supported features, and the percentage of Android devices
    your app will support if you select that as your minimum SDK:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/0c08ec03-33f9-44cb-b45e-7e64079ca2ca.png)'
  prefs: []
  type: TYPE_IMG
- en: You can check out an up-to-date and more detailed version of that data on the
    Android developer dashboard ([https://developer.android.com/about/dashboards/](https://developer.android.com/about/dashboards/)).
  prefs: []
  type: TYPE_NORMAL
- en: Android also provides support libraries to help with backward compatibility
    of certain new features added in newer SDK versions. Each support library is backward
    compatible to a specific API Level. Support libraries are usually named based
    on the API level with which they're backward compatible with. An example is appcompat-v7,
    which provides backward compatibility to API Level 7.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We''ll discuss SDK versions further in a later section. For now, you can select
    API 15: Android 4.0.3 (IceCreamSandwich) and click Next:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c71d48d9-26d3-4a4c-9b33-6b522d2282a6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The next screen is the Add an Activity to Mobile screen. This is where you
    select your default activity. Android Studio gives a number of options, from an
    activity with a blank screen to an activity with a login screen. For now, select
    the Basic Activity option and click Next:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6995117e-8d9c-4727-acb3-d4e699534398.png)'
  prefs: []
  type: TYPE_IMG
- en: 'On the next screen, enter the name and title of the activity, and the name
    of the activity layout. Then, click **Finish**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1c55aafe-481a-4e00-82db-da02d9260196.png)'
  prefs: []
  type: TYPE_IMG
- en: Building your project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After clicking the Finish button, Android Studio generates and configures the
    project in the background for you. One of the background processes Android Studio
    performs is configuring Gradle.
  prefs: []
  type: TYPE_NORMAL
- en: Gradle
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Gradle is a build automation system that is easy to use, and can be used to
    automate the life cycle of your project, from building and testing to publishing.
    In Android, it takes your source code and configured Android build tools and generates
    an **Android Package** **Kit** (**APK**) file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Android Studio generates the basic Gradle configurations needed to build your
    initial project. Let''s take a look at those configurations. Open `build.gradle`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6d7ec561-2c9b-49b9-a16f-93a91945c2a7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The Android section specifies all Android-specific configurations, such as:'
  prefs: []
  type: TYPE_NORMAL
- en: '`compileSdkVersion`: Specifies the Android API level the app should be compiled
    with.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`buildToolsVersion`: Specifies the build tool version your app should be built
    with.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`applicationId`: This is used to uniquely identify the application when publishing
    to the Play Store. As you may have noticed, it is currently the same as the package
    name you specified when creating the app. The `applicationId` defaults to the
    package name on creation, but that doesn''t mean you can''t make them different.
    You can. Just remember, you shouldn''t change the `applicationId` again after
    you publish the first version of the app. The package name can be found in the
    app''s Manifest file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`minSdkVersion`: As specified earlier, this specifies the minimum API level
    required to run the app.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`targetSdkVersion`: Specifies the API level used to test your app.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`versionCode`: Specifies the version number of your app. This should be changed
    for every new version before publishing.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`versionName`: Specifies a user-friendly version name for your app.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Dependencies section specifies dependencies needed to build your app.
  prefs: []
  type: TYPE_NORMAL
- en: Parts of an Android project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will have a look at the different parts of our project. The screenshot depicts
    our project:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/049af957-80d6-464e-83db-de7e64e52102.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s take a further look at the different parts of our project:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `manifests/AndroidManifest.xml`: Specifies important details about your
    app required by the Android system to run the app. Part of these details are:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The package name
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Describing the components of the app, including the activities, services, and
    many more
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Declaring the permissions required by your app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `res` directory: Contains application resources such as images, xml layouts,
    colors, dimensions, and string resources:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `res/layout` directory: Contains xml layouts that define the app''s **User
    Interface** (**UI**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `res/menu` directory: Contains layouts that define the content of the app''s
    menus'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `res/values` directory: Contains resources such as colors (`res/values/colors.xml`)
    and strings (`res/values/strings.xml`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: And, your Java and/or Kotlin source files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running your app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Android gives you the ability to run your app on an actual device or a virtual
    one even before publishing it on the Google Play Store.
  prefs: []
  type: TYPE_NORMAL
- en: The Android emulator
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Android SDK comes with a virtual mobile device that runs on your computer
    and makes use of its resources. This virtual mobile device is called the emulator. The
    emulator is basically a configurable mobile device. You can configure its RAM
    size, screen size, and so on. You can also run more than one emulator. This is
    most helpful when you want to test your app on different device configurations
    (such as screen sizes and Android versions) but can't afford to get actual ones.
  prefs: []
  type: TYPE_NORMAL
- en: You can read more about the emulator on the developer page, at [https://developer.android.com/studio/run/emulator](https://developer.android.com/studio/run/emulator).
  prefs: []
  type: TYPE_NORMAL
- en: Creating an Android emulator
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'An Android emulator can be created from the **Android Virtual Device **(**AVD**) Manager.
    You can start the AVD Manager by clicking on its icon on the Android Studio toolbar,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/277e67e3-b435-45d8-b687-3854126f325a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Or, alternatively, by selecting Tools | Android | AVD Manager from the menu:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d557c18f-0f51-4402-89af-9830d68b1103.png)'
  prefs: []
  type: TYPE_IMG
- en: 'On the Your Virtual Devices screen, click the Create Virtual Device... button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/df251bfe-c63f-4231-9244-f0acda1c34ec.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If you already have an emulator created, the button will be at the bottom of
    the screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9a6ec546-854e-496b-bbd0-70edaca3e78d.png)'
  prefs: []
  type: TYPE_IMG
- en: The next step is to select the type of device you want to emulate. The AVD Manager
    allows you to create emulators for TVs, phones, tablets, and Android wear devices.
  prefs: []
  type: TYPE_NORMAL
- en: 'Make sure the Phone is selected in the Category section on the left-hand side
    of the screen. Go through the list of devices in the middle of the screen and
    choose one. Then, click Next:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4e86bf56-ba32-487c-9826-58ce6e0a4a53.png)'
  prefs: []
  type: TYPE_IMG
- en: 'On the System Image screen, select the version of Android you want your device
    to run on, and click Next:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c522fc7b-4038-46c4-b48e-231fa030b970.png)'
  prefs: []
  type: TYPE_IMG
- en: If the SDK version you want to emulate is not downloaded, click on the Download
    link next to it in order to download it.
  prefs: []
  type: TYPE_NORMAL
- en: 'On the Verify Configuration screen, go through and confirm the virtual device
    settings by clicking the Finish button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2baedaa3-d90e-4bbf-b949-5ace2d8fe445.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You will be sent back to the Your Virtual Devices screen, with your new emulator
    showing the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4178f043-6110-4f5f-b821-d2e16a0d2196.png)'
  prefs: []
  type: TYPE_IMG
- en: You can click on the play icon under the Actions tab to start the emulator,
    or the pencil icon to edit its configurations.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s go ahead and start the emulator we just created by clicking on the play
    icon:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/64294223-858a-495b-bf18-0abfa0823d13.png)'
  prefs: []
  type: TYPE_IMG
- en: As you may have noticed, the virtual device comes with a toolbar on the right-hand
    side. That toolbar is known as the **emulator toolbar**. It gives you the ability
    to emulate functionalities such as shutdown, screen rotation, volume increase
    and decrease, and zoom controls.
  prefs: []
  type: TYPE_NORMAL
- en: 'Clicking on the More(...) icon at the bottom of the toolbar also gives you
    access to extra controls to simulate functionalities such as fingerprint, device
    location, message sending, phone calls, and battery power:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/79b3d884-c4e7-41cb-a3ea-1c91d9168797.png)'
  prefs: []
  type: TYPE_IMG
- en: Running from an emulator
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Running your app from an emulator is pretty easy. Click on the play icon on
    the Android Studio toolbar, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2b305cd1-b362-4c4a-a312-4f357abde8d6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'On the Select Deployment Target screen that pops up, select the device you
    want to run the app on and click OK:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8405a62d-497c-4a9e-b218-3f8bbcacb4ff.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Android Studio will build and run your app on the emulator:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5aecaf19-654f-454f-8213-6e658bab6a2e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If you do not already have an emulator running, your emulators will show up
    under the ***Available Virtual Devices*** section. Selecting them will start the
    emulator and then run your app on it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/088f6a76-9f8b-4257-9a33-d0d6e2a38ed7.png)'
  prefs: []
  type: TYPE_IMG
- en: Running on an actual device
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To run your app on an actual device, you can build and copy the APK onto the
    device and run it from there. To do this, Android requires that the device is
    enabled to allow the installation of apps from unknown sources. To do this, perform
    the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the Settings app on your device.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select Security.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Look for and turn on the Unknown Sources option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will be prompted about the danger that comes with installing apps from Unknown
    sources. Read carefully and click OK to confirm.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: That's it. You can now upload your APK and run it on the phone.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can easily disable the Unknown Sources setting by going back to Settings |
    Security and turning off the option.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can all agree that this way of running your app is not very ideal, especially
    for debugging. With this in mind, Android devices come with the ability to run
    and debug your app very easily without having to upload your app to the device.
    This can either be done by connecting your device via a USB cable. To do this,
    Android requires Developer Mode to be enabled. Follow the instructions below to
    enable Developer Mode:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the Settings app on your device.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Scroll down and select About phone.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the **Phone status** screen, scroll down and tap **Build** **number** multiple
    times until you see a toast that says You're now a developer!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go back to the **Settings** screen. You should now see a Developer options entry.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select Developer options.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the Developer options screen, turn on the switch at the top of the screen.
    If it's off, you'll be prompted with an Allow development settings? dialog. Click
    OK to confirm.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Scroll down and turn on USB debugging. You'll be prompted with an **Allow USB
    debugging?** dialog. Click OK to confirm.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, connect your device to your computer via the USB.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You'll be prompted with another ***Allow USB debugging?*** dialog that has your
    computer's RSA key fingerprint. Check the Always allow from this computer option,
    and click OK to confirm.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You''re now set to run your app on the device. Once again, click the Run button
    on the toolbar, select your device in the options shown in the Select Deployment
    Target dialog, and click OK:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b3f241b8-d7b1-4747-be3b-c305f8c68bad.png)'
  prefs: []
  type: TYPE_IMG
- en: 'That''s it. You should now have your app showing on your device:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5f305bda-f5ac-4a32-81cf-87927112b045.png)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we went through the process of checking and installing the
    JDK, which is required for Android development. We also installed and set up our
    Android Studio environment. We created our first Android app and learned to run
    it on an emulator and on an actual device.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we'll learn to configure and set up Android Studio and
    our project for development with Kotlin.
  prefs: []
  type: TYPE_NORMAL
