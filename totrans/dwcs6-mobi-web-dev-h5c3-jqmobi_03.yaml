- en: Chapter 3. Collecting Data with Forms
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the Facebook-dominated world of the modern web, data collection has become
    highly opaque. When you share an intimate thought about a dying friend over social
    media, that sensitive, personal data becomes a commodity that is sold to marketers
    of flowers and books on death, when you *Like* a band in a social media environment,
    you (often unwittingly) sign up to get offers for tickets when that band is playing
    near your city or town, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: I am being harsh on the opacity of online "sign up" technology to make a point.
    As someone building your own site, you can instead, make the collection of data
    voluntary, conscious, and transparent. People who sign up, on purpose, for your
    e-newsletter, your announcements, your special offers, and so on are—after all—likely
    to be more receptive to getting mail from you than the ones they did not consciously
    ask for, but that were generated by their activity on Facebook, Amazon, and so
    on.
  prefs: []
  type: TYPE_NORMAL
- en: 'So how do you collect information from visitors? One word: **forms**. Forms
    can be a vital, dynamic way of interacting with your visitors.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are some examples of how forms lend value to your site:'
  prefs: []
  type: TYPE_NORMAL
- en: A feedback form that lets visitors to your site share their complaints, suggestions,
    and positive experiences (fodder for you to use to promote your site, message,
    product, cause, or content).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A sign up form that lets visitors consciously get your newsletter, tweets, special
    offers, and information blasts.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An order form to sell products.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A search box that makes your site's content easily accessible. I'll show you
    how to set one up at the end of this chapter.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dreamweaver CS6 has powerful tools for building inviting, accessible forms.
    What I have always found missing in Dreamweaver is a way to connect those forms
    to backend server tools that handle submitted data. And while a full exploration
    of those connections is a bit beyond the scope of this book, I'll provide some
    basic solutions and tips for additional tools and resources that can be used for
    connecting forms to backend data-management scripts and resources at the end of
    this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Capturing client-side form management with JavaScript
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Dreamweaver generates forms, but it doesn't manage form data. In general, data
    collected from a form is sent to a server where a collection of scripts and databases
    turn that data into a processed order, a submitted complaint, an e-mail list signup,
    or a search query. Scripts that handle data on a server are sometimes called **server-side
    scripts**.
  prefs: []
  type: TYPE_NORMAL
- en: But some form data is collected and managed without being sent to a server.
    Instead, submitted data is managed using JavaScript that runs in a user's browser.
    Data handled by such client-side scripting never goes to a server.
  prefs: []
  type: TYPE_NORMAL
- en: The most widely used client-side form is a **jump menu** —a dropdown menu used
    for navigation. Dreamweaver allows you to easily generate a jump menu, and before
    launching into an exploration of building forms that send data to a server, let's
    take a quick look at how to build a client-side jump menu in Dreamweaver, and
    edit the generated JavaScript that makes that form work.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a jump menu
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before you create a jump menu, you'll want to have a list of URLs you want to
    access with that menu. I'll pause for a moment while you collect your list…Ok?
    Well, this is a book, so you can simply bookmark this spot (easy to do on your
    Kindle or iPad, but if you're reading a printed book, simply bend the page a bit
    to mark this spot).
  prefs: []
  type: TYPE_NORMAL
- en: 'Beyond conceptualizing your jump menu, you need to have the following in place
    before generating the menu:'
  prefs: []
  type: TYPE_NORMAL
- en: You need to be working in a defined Dreamweaver site. If that's not ringing
    a bell, go back to [Chapter 1](ch01.html "Chapter 1. Creating Sites and Pages
    with Dreamweaver CS6"), *Creating Sites and Pages with Dreamweaver CS6*, and immerse
    yourself in the concept of a Dreamweaver site and why it's the essential first
    step in everything you do in Dreamweaver.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You need to be working in a saved web page.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working in a Dreamweaver site and in a saved HTML5 page will ensure that whatever
    links you generate in your jump menu will work.
  prefs: []
  type: TYPE_NORMAL
- en: 'With your list ready, your site defined, and your page saved, perform the following
    steps to create a jump menu in Dreamweaver CS6:'
  prefs: []
  type: TYPE_NORMAL
- en: With your insertion point in the **Design** view of a page, choose **Insert**
    | **Form** | **Jump Menu**. The **Insert Jump Menu** dialog opens.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The dialog opens with the first menu item selected. Often, the first item in
    a jump menu is not an option, but a label that identifies the menu, such as **Go
    to…**. In that case, the **When selected go to URL** field is left blank, as shown
    in the following screenshot:![Creating a jump menu](img/4742OT_03_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the **Add Item** (**+**) icon to add items to the menu. Use the **Browse…**
    button to search for and add link to files in your Dreamweaver site. Or, enter
    a full URL in the **When selected, go to URL** field, as shown in the following
    screenshot:![Creating a jump menu](img/4742OT_03_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the **Add Item** (**+**) icon to add additional items to the menu. Use the
    **Remove Item** (**-**) icon to delete a selected item, as shown in the following
    screenshot:![Creating a jump menu](img/4742OT_03_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the **Move item up in list** and **Move item down in list** arrow buttons
    to resort the order of your list (should you alphabetize?), as shown in the following
    screenshot:![Creating a jump menu](img/4742OT_03_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When you finish defining your jump menu, click on **OK** to generate the menu.
    You can test the menu in the **Live** view as shown in the following screenshot:![Creating
    a jump menu](img/4742OT_03_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Editing Jump Menu JavaScript
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Dreamweaver provides two ways to edit the content of a generated jump menu—the
    **Properties** inspector, and the **Behaviors** panel. Let's quickly see how each
    of these works.
  prefs: []
  type: TYPE_NORMAL
- en: 'To activate the **Properties** inspector, navigate to **Window** | **Properties**
    if it is not visible. When you click on any element (including a jump menu) the
    **Properties** inspector becomes a context-sensitive editing tool. In this case,
    the **Initially Selected** dropdown menu allows you to change what option in the
    menu displays by default, and the **List Values…** button opens a **List Values**
    dialog. The **List Values** dialog has tools you recognize from the jump menu
    dialog for adding, deleting, and reordering the menu options, as shown in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Editing Jump Menu JavaScript](img/4742OT_03_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The other technique for editing the content of a jump menu is a bit less accessible,
    but provides the option of using the **Browse** button to locate and link to files
    in your Dreamweaver site. To access that option, choose **Window** | **Behaviors**,
    and click on your jump menu in the **Design** view of the **Document** window
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Editing Jump Menu JavaScript](img/4742OT_03_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: With the jump menu selected in the **Behaviors** panel (technically, the **Behaviors**
    tab in the **Tag Inspector** tab), double-click on **Jump Menu** in the right-hand
    side column to (re)open the **Jump Menu** dialog. This option enables full-featured
    editing on your jump menu—pretty much duplicating the original **Jump Menu** dialog.
  prefs: []
  type: TYPE_NORMAL
- en: Having quickly looked at JavaScript-based forms, and how to edit them in Dreamweaver,
    let's move to the more powerful kind of form—one that sends data to a server.
  prefs: []
  type: TYPE_NORMAL
- en: Defining the form and form action
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Forms are comprised of a form and form elements. The **form element** is the
    envelope in which all the form elements are gathered up and sent somewhere. As
    such, the most important defining element of the form is the form action. The
    **form action** defines where the form data is sent.
  prefs: []
  type: TYPE_NORMAL
- en: As alluded to earlier in this chapter, Dreamweaver designs the frontend for
    forms, but does not provide easily-accessible options for linking that form data
    to a backend system that collects and manages that data.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that Adobe offers a package for managing server-side data—**Business Catalyst**
    . Business Catalyst's tools and features are not particularly accessible for non-professional
    backend administrators, and for most freelance and small-scale developers, the
    cost of this service is not competitive with other options for managing form data.
  prefs: []
  type: TYPE_NORMAL
- en: 'At the end of this chapter, I''ll provide some basic techniques for capturing
    form data, and point you towards other resources. But here, let''s use the simplest
    and most basic technique for handling form data: Sending that form data to an
    e-mail address through a user''s e-mail client. This is not an elegant technique,
    but a) it works, and can be used for simpler form handling challenges such as
    collecting feedback; and b) it will serve as kind of a placeholder for form handling
    until we return to the concept at the end of this chapter.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To insert a form that sends collected content to an e-mail address using a
    user''s e-mail client, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on the **Design** view of an open, saved document to set the insertion
    where the form will appear.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to **Insert** | **Form** | **Form**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **OK** to embed the form. The form appears in the **Design** view in
    a red box. When you select the form (by clicking on the red box), the **Properties**
    inspector displays the form properties, as shown in the following screenshot:![Defining
    the form and form action](img/4742OT_03_08.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To send the form data to an e-mail address, enter `mailto:mail@mail.com` in
    the **Action** field, substituting a real e-mail address for the placeholder e-mail
    address.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Enctype** field (short for encoding type) enter `text/plain`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Leave the **Method** option set to the default, **POST**. This is how most form
    data is sent.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With the form defined, you are now ready to add form fields and buttons.
  prefs: []
  type: TYPE_NORMAL
- en: Generating form fields with Spry validation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Validation** means testing form data before it is submitted to a server (or
    sent to an e-mail address). That''s a valuable thing. For example, if your form
    is collecting e-mail addresses for e-newsletter subscriptions, it won''t do for
    people to submit the form without an e-mail address. Beyond that, validation can
    look at the characters entered into an e-mail address field and verify that what
    is in the field at least looks like an e-mail address.'
  prefs: []
  type: TYPE_NORMAL
- en: 'There are essentially three techniques for validating form data as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Server-side scripts can validate content once it is sent to the server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: HTML5 provides some validation tools, but they are not yet supported universally,
    even in newer versions of some popular browsers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JavaScript validation scripts can test data in a browser
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The last option is the most reliable, fastest, and easiest way to create in
    Dreamweaver. And in the following sets of steps, we'll use Dreamweaver's library
    of Spry JavaScript and HTML to insert fields with built-in JavaScript validation.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a validated text field
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Text fields are the bread and butter of forms, collecting all manner of text,
    such as names, phone numbers, account numbers, addresses, and e-mail addresses
    (more on those shortly).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: At the risk of sounding awfully redundant, let me re-emphasize the importance
    of creating validated fields in a defined Dreamweaver site and in a saved HTML
    file. This takes on special importance now, because we are generating JavaScript
    files that will be linked to our page, and if those links are corrupted, the form
    won't work.
  prefs: []
  type: TYPE_NORMAL
- en: 'The most common type of validation for a text field is to make it *required*.
    Perform the following steps to insert a required text field in a form:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **Insert** | **Form** | **Spry Validation Text Field**. The **Input
    Tag Accessibility Attributes** dialog appears.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **ID** field generates an ID style associated with the form field. This
    attribute is used in some environments to make forms more accessible for people
    with disabilities and also allows you to define an ID style that applies to the
    form field. Enter an ID style with no spaces or special characters.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **Label** field generates a label that identifies the field and is easily
    read by software that aids disabled web users. Enter a label (the label can have
    special characters and spaces) as shown in the following screenshot. The other
    fields in the dialog can be left at their default settings, so click on **OK**,
    as shown in the following screenshot, to generate the form:![Creating a validated
    text field](img/4742OT_03_09.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Form field attributes can be defined by clicking on the form field itself in
    the **Design** view and making edits in the **Properties** inspector. Enter a
    value in the **Char width** field to define how wide the field will display (in
    characters). Enter a value in the **Max chars** field to define the maximum number
    of characters a user can enter in the field, as shown in the following screenshot:![Creating
    a validated text field](img/4742OT_03_10.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Validation rules are defined by clicking on the (aqua colored) **Spry TextField**
    tab above the field itself. By default, our **name** field is required. You can
    add validation rules by entering a maximum or minimum number of characters in
    the **Max chars** or **Min chars** fields. And, by default, the field is validated
    on Submit—when a user submits the form. You can also force validation when a user
    leaves the field by checking the **Blur** and **Change** checkboxes (these two
    options accomplish similar things in different browsing environments).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can preview how the field will respond to valid or invalid entries by experimenting
    with options in the **Preview states** dropdown list. The area below the preview
    shows the result if a user attempts to submit the form without filling in a required
    field, as shown here:![Creating a validated text field](img/4742OT_03_11.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After you define the field and the validation rules, click to place your insertion
    point at the end of the form field in the **Design** view, and press the *Enter*
    or *Return* key to create a new line for a new form field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Creating a validated e-mail field
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Creating a validated e-mail field is similar to creating a text field, except
    that you'll set the validation rules to detect (and only accept) input that looks
    like an e-mail address.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do that, click on the (aqua) **Spry TextField** tab for an e-mail address
    form field, and select **Email Address** from the **Type** dropdown menu in the
    **Properties** inspector. And, select the **Enforce Pattern** checkbox on the
    right-hand side of the **Properties** inspector, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a validated e-mail field](img/4742OT_03_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As you can see from looking at the options in the **Type** dropdown list, Dreamweaver
    can generate a whole range of validation scripts for different kinds of text input,
    ranging from phone numbers to credit cards.
  prefs: []
  type: TYPE_NORMAL
- en: Adding other fields
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The submenus in **Insert** | **Form** includes options for generating additional
    types of validated form fields. The most important of these are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Checkbox**: Used for *yes or no* choices, where a user can select or deselect
    an option.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Select**: Used to create dropdown menus with options within a form.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Radio Group**: Used to create sets of options from which a user can chose
    only one. For example, to allow a user to choose one (and only one) type of credit
    card.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'These additional validated form fields are pretty self-explanatory with the
    background we covered in discussing options for text fields. They are illustrated
    in the following screenshot (from top to bottom: checkbox, select menu, and radio
    group):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding other fields](img/4742OT_03_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Adding Submit and Reset buttons
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Without a **Submit** button, the content a user enters into the form literally
    doesn't go anywhere. A **Submit** button in a form launches the form action. So,
    if we apply the rules of formal logic here, we better make sure our form has a
    **Submit** button.
  prefs: []
  type: TYPE_NORMAL
- en: Add a **Submit** button by navigating to **Insert** | **Form** | **Button**.
    The **Input Tag Accessibility Attributes** dialog box appears, but just click
    on **OK** to create the **Submit** button without worrying about the options in
    this dialog box. A **Submit** button appears on your form.
  prefs: []
  type: TYPE_NORMAL
- en: '**Reset** buttons are handy, but not essential. They "reset" the form to its
    original (empty) state. To create a **Reset** button, insert a second button.
    With that button selected in the form, choose the **Reset Form** radio button
    in the **Properties** inspector, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding Submit and Reset buttons](img/4742OT_03_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Prompting with HTML5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As noted earlier in this chapter, browser support for HTML5 form elements and
    properties is a work in progress. For that reason, I'd advise against using HTML5
    form attributes that are *essential* for the form to work—such as validation attributes.
  prefs: []
  type: TYPE_NORMAL
- en: But HTML5 placeholders are a good idea. They prompt a user with text inside
    the form field that disappears as a user enters content. If the user's environment
    doesn't support HTML5 form placeholders, they can still rely on the form label
    to help them figure out what to enter into the form field.
  prefs: []
  type: TYPE_NORMAL
- en: 'A placeholder parameter can be added to a text input. Unfortunately, Dreamweaver
    CS6 doesn''t offer options for defining placeholder text in the **Design** view,
    but we can do this in the **Code** view. To do that, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Select the **Split** view from Dreamweaver's **Document** window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on a form field in the **Design** side of the **Split** view to find the
    code on the **Code** side of the **Split** view, as shown on the following screenshot:![Prompting
    with HTML5](img/4742OT_03_15.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At the end of the `input` tag, add `placeholder="placeholder text"` (replace
    "placeholder text" with real text), as shown in the following screenshot:![Prompting
    with HTML5](img/4742OT_03_16.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can preview placeholder text in the **Live** view, in the **Design** side
    of the **Split** view.
  prefs: []
  type: TYPE_NORMAL
- en: Designing CSS for forms
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the first two chapters of this book, we established a framework of relying
    on external CSS stylesheet files to provide formatting for HTML elements (such
    as headings, paragraphs, and links) and special ID and class styles that can be
    applied to the `div` tags to design pages.
  prefs: []
  type: TYPE_NORMAL
- en: 'How does that doctrine apply to customizing form input? The short answer is:
    You create styles for the different form elements. The long answer: Well, we''ll
    walk through how to do that now.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are the key HTML elements to which CSS styles can be applied
    to customize form appearance:'
  prefs: []
  type: TYPE_NORMAL
- en: The `<form>` element style defines the appearance of the entire form.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `<input>` element style defines the appearance of input fields (such as
    text fields).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Specific ID styles can be defined for styles that have IDs associated with them
    (a technique we examined earlier in this chapter when I showed you how to assign
    an ID to a text field in the **Input Tag Accessibility Attributes** dialog (see
    the *Creating a validated text field* section).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a stylesheet for form elements
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's walk through the process of defining each of these styles in a new, linked
    CSS file. We'll name it as `form.css`.
  prefs: []
  type: TYPE_NORMAL
- en: As always, starting from a saved HTML page in a defined Dreamweaver site, view
    the **CSS Styles** panel (**Window** | **CSS Styles**). Click on the **New CSS
    Rule** (**+**) icon at the bottom of the panel, as shown in the following screenshot:![Creating
    a stylesheet for form elements](img/4742OT_03_17.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that if you are working with a form that includes Spry validation widgets,
    your **CSS Styles** panel will be linked to a CSS file that defines elements of
    those widgets that style things such as background colors and fonts for validation
    error messages.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the **New CSS Selector Rule** dialog, choose the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Tag** from the **Selector Type** dropdown list'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**form** from the **Selector Name** dropdown list'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**(New Style Sheet File)** from the **Rule Definition** dropdown list'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Click on **OK** to begin defining the new file and style, as shown in the following
    screenshot:![Creating a stylesheet for form elements](img/4742OT_03_18.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Save Style Sheet File As** dialog, click on the **Site Root** button
    to save your file in your Dreamweaver site's root folder. In the **Save As** field,
    enter `form.css`. Click on **Save**. The **CSS Rule Definition** dialog appears.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You might want to define a background color for your form style. Do that in
    the **Background** category of the **CSS Rule Definition** dialog (choose a color
    from the **Background-color** swatch).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can also define a width for your form to constrain it from stretching the
    entire width of the page (or enclosing element). Do that by entering a width (such
    as 600 px) in the **Width** field of the **Box** category. Also, in the **Box**
    category, try defining 10 px of padding and a 10 px margin for the form.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Try defining a border for your form. At any time you can click on the **Apply**
    button on the **CSS Rule Definition** dialog to test your styling, as shown in
    the following screenshot:![Creating a stylesheet for form elements](img/4742OT_03_19.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After you fine-tune your form style, click on **OK** in the **CSS Rule Definition**
    dialog to save and apply your style.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to **File** | **Save All** to save both your web page and the CSS file
    with changes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Creating styles for form elements
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the same way that you defined a style for the `<form>` element, you can
    create a new style for the `<input>` element. The only difference is that once
    you''ve created a CSS file for forms (`form.css`), you will want to save all form-related
    styles to that CSS file. I''ll get you started with the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Switch to the **Live** view in the **Document** window for a more accurate preview
    of the style you are about to define.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the **New CSS Rule** (**+**) icon at the bottom of the panel. The
    **New CSS Selector Rule** dialog opens, choose the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Tag** from the **Selector Type** dropdown list'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Input** from the **Selector Name** dropdown list'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`form.css` from the **Rule Definition** dropdown list'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Click on **OK** to begin defining the new style.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **CSS Rule Definition** dialog appears. You can take it from here—define
    style attributes for an input field and click on **Apply** to see how they look
    in the **Design** view, as shown in the following screenshot:![Creating styles
    for form elements](img/4742OT_03_20.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **OK** when you have defined the style for input fields.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Creating ID styles for a form
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: So far, the styles we've created apply to every instance of an element. For
    example, our form style attributes (background color, width, and so on) will apply
    to every form. And our input style attributes apply to every input element (name
    and e-mail fields and submit and reset buttons).
  prefs: []
  type: TYPE_NORMAL
- en: How do you define a style that applies only to a specific element? One technique
    is to use the IDs associated with the fields we created when we generated Spry
    validation fields.
  prefs: []
  type: TYPE_NORMAL
- en: 'Perform the following steps to use an ID style for one of the ID elements we
    generated as we created fields:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the **New CSS Rule** (**+**) icon at the bottom of the panel. The
    **New CSS Selector Rule** dialog opens, choose the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**ID** from the **Selector Type** dropdown list'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**name** from the **Selector Name** dropdown list'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**form.css** from the **Rule Definition** dropdown list'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Click on **OK** to open the **CSS Rule Definition** dialog.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Define custom styling for the **name** ID element, testing your style by clicking
    on **Apply**, as shown in the following screenshot:![Creating ID styles for a
    form](img/4742OT_03_21.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **OK** to define the style for the **name** ID element.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to **File** | **Save All** to save changes to your HTML and CSS files.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Thoughts on form styles
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the framework in which we are exploring forms here, we are working with a
    form we designed ourselves. In "real life", particularly in more sophisticated
    professional projects, the HTML for a form will be supplied by the team that builds
    the backend scripts and databases that manage the form input.
  prefs: []
  type: TYPE_NORMAL
- en: But I want to emphasize that you can still create CSS files and styles that
    customize the look of those forms. So, the form HTML you get from Google for a
    search engine, the form HTML you get from [www.TheSiteWizard.com](http://www.TheSiteWizard.com)
    to manage feedback, and the form HTML you get from an e-commerce add-in package,
    can all be customized with your own CSS. And in that way, forms can be integrated
    into the inviting look and feel you craft for your site.
  prefs: []
  type: TYPE_NORMAL
- en: Real-world form handling
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While I've emphasized that Adobe does not provide an accessible, reasonably-priced
    framework for managing form data, there are tons of online resources, many of
    them free, that plug into Dreamweaver sites easily. Before closing this chapter,
    I want to walk you through an example of a **FreeFind box** .
  prefs: []
  type: TYPE_NORMAL
- en: I picked that example because rare is the site that doesn't use a search box,
    and also because installing (and customizing) a Freefind search box is free and
    pretty straightforward.
  prefs: []
  type: TYPE_NORMAL
- en: For this to work, all you need is a live website hosted at a remote server.
    Getting set up with one of those is a bit more complex. Refer back to the *Defining
    a remote site* section in [Chapter 1](ch01.html "Chapter 1. Creating Sites and
    Pages with Dreamweaver CS6"), *Creating Sites and Pages with Dreamweaver CS6*,
    of this book for advice on how to do that.
  prefs: []
  type: TYPE_NORMAL
- en: The following set of steps draw on techniques covered earlier in this chapter,
    so if you're bouncing directly to this point in the book to install a search box,
    you're best off jumping up to the beginning of the chapter first for form and
    form style basics.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, with that proviso, perform the following steps to add a search box to your
    site:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Navigate to **File** | **New** and create a new page that will hold your search
    box by performing the following steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the left-hand side column of the **New Document** dialog, choose **Blank
    Page**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Page Type** column choose **HTML**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Layout** column choose **<none>**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Create** to generate the new page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Title** area of the **Document** toolbar, type `Search this site`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save the page in the root folder of your site as `search.html`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the **Attach Style Sheet** icon in the **CSS Styles** panel to link the
    `form.css` style to this page. You'll be using the same set of styles you created
    for a signup form earlier in this chapter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In a browser, go to [www.freefind.com](http://www.freefind.com). To sign up
    for a search box, perform the following steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter your name, e-mail, and click on the **Instant Sign-up** button. You'll
    get login information sent to your e-mail address.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the login information sent to your e-mail address to log in to your FreeFind
    account. The sign-in process will take you directly to the **Control** window
    for your search box.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: FreeFind offers reasonably priced ad-free options, but you can use the free
    version to experiment with forms and styles, so there is no need to subscribe
    to any special plans.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the **HTML** tab in the **Control** window, as shown in the following
    screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Real-world form handling](img/4742OT_03_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'To copy and paste the HTML for the search box, perform the following steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To keep things simple, we will use the first option for a search box, **1\.
    Site search box - with a link to advanced search options**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the link beneath that option that says **get the html and paste it
    into your page**. The HTML is displayed in a box as shown in the following screenshot:![Real-world
    form handling](img/4742OT_03_23.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click inside the code, and copy it to your clipboard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Switch back to your open Dreamweaver HTML file (`search.html`). In the **Code**
    side of the **Split** view, click to place your insertion point after the end
    of the `<body>` tag and press the *Enter* or *Return* key to create a new line
    of code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Paste the copied HTML from FreeFind, and view the result in **Live** view in
    the **Design** side of the **Split** view as shown in the following screenshot:![Real-world
    form handling](img/4742OT_03_24.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The FreeFind code is cluttered with table formatting. You can remove that code
    in the **Code** side of the **Split** view if you wish, or just accept it. But
    more importantly, you can use the **Properties** inspector and other editing techniques
    we''ve explored in this book so far to customize the form. I''ll let you review
    this chapter as both a practical application of what we''ve covered, and something
    of a "test" to strengthen your confidence and skill at formatting forms to accomplish
    the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change the width of the search field to 48 characters, and the maximum characters
    to 60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Add this placeholder text: `search string goes here`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add a Reset button
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As long as you don't change the form field names or delete them (including the
    hidden form fields that will not display in a browser but will allow FreeFind's
    search box to function), you can edit both the HTML and CSS for your form, as
    shown in the following screenshot (in **Live** view):![Real-world form handling](img/4742OT_03_25.jpg)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By using your `form.css` stylesheet, you'll make the FreeFind search box look
    and feel like other forms in your site.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The FreeFind example was simpler than some forms you'll get from third parties.
    But the basic technique of generating HTML for a form, pasting that form into
    Dreamweaver, editing the form HTML (without deleting or renaming any form fields),
    and applying your own custom styling... well that works with any form you get
    from anywhere.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we explored Dreamweaver CS6's powerful tools for generating
    validated forms. To do that, we invoked the Spry framework—a set of widgets that
    combine HTML, CSS, and JavaScript to apply different kinds of interactivity to
    web pages. We will be revisiting the set of Spry widgets in Dreamweaver CS6 several
    times in later chapters in this book.
  prefs: []
  type: TYPE_NORMAL
- en: We also learned to create a simple jump menu with Dreamweaver-generated JavaScript.
    So, from a couple of different directions, we began to explore Dreamweaver's JavaScript
    features in relation to forms.
  prefs: []
  type: TYPE_NORMAL
- en: Then, we went beyond what Dreamweaver does with forms—specifically adding a
    placeholder attribute to fields with prompt text. We had to go into the **Code**
    view to do that as Dreamweaver's support for new HTML5 attributes is paltry.
  prefs: []
  type: TYPE_NORMAL
- en: And finally, you worked through a real-life example of connecting a form with
    a backend system of scripts and databases. The FreeFind search example was relatively
    simple, but it had all the elements you'll need to handle in order to embed a
    form supplied by any backend server into a Dreamweaver CS6 site. And in relation
    to this, I want to highlight the dynamic role of custom CSS in making the embedded
    form look and feel like the rest of our site. We'll return to CSS formatting in
    substantially more depth in the next chapter.
  prefs: []
  type: TYPE_NORMAL
