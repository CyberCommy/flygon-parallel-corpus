- en: Chapter 4. Network Exploitation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Gathering information for credential cracking
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cracking FTP using custom wordlist
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cracking SSH using custom wordlist
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cracking HTTP using custom wordlist
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cracking MySql and PostgreSQL using custom wordlist
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cracking Cisco login using custom wordlist
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploiting vulnerable services (Unix)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploiting vulnerable services (Windows)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploiting services using `exploit-db` scripts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we enumerated the open ports and searched for possible
    vulnerabilities. In this chapter, we are going to perform penetration testing
    of the system over the network. For the purpose of demonstration, we have taken
    a vulnerable OS called **Stapler**, made by g0tmi1k. Stapler can be downloaded
    at [https://www.vulnhub.com/entry/stapler-1,150/](https://www.vulnhub.com/entry/stapler-1,150/)
    .
  prefs: []
  type: TYPE_NORMAL
- en: Along with Stapler, we will also check out exploitation with Metasploitable
    2, as briefly covered in the previous chapter. The aim of this chapter is to enlighten
    the reader about a couple of network-level attack vectors, and to demonstrate
    different types of attacks. Let's get started with Stapler, a vulnerable OS virtual
    machine, by loading the image on a virtual machine.
  prefs: []
  type: TYPE_NORMAL
- en: Gathering information for credential cracking
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to perform a successful credential crack, it is important to have
    a list of possible usernames and passwords. One of the ways this is possible is
    by making use of the dictionaries available in the Kali Linux Distro. These are
    located under `/usr/share/wordlists/`. The following screenshot shows the available
    wordlists in Kali:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Gathering information for credential cracking](img/image_04_001.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'You will find a `rockyou.txt.gz` file, which you will need to unzip. Use the
    following command in terminal to unzip the contents of the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Once this is done, the file will be extracted, as shown in the preceding screenshot.
    This is a prebuilt list of available passwords in Kali Linux. Let us begin to
    formulate one of ours with the help of enumeration and information gathering.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To commence, we will first find the IP address of the hosted Stapler machine
    and begin enumerating information to collect and create a set of custom passwords.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The steps for the recipe are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Discover the IP address of Stapler on the subnet, using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_04_002.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Run a quick `nmap` scan to find the available ports:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_04_003.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Connect to open ports and gather valuable information; let's enumerate the `ftp`,
    `Ssh`, and `http` ports. The following is a series of ways the information can
    be gathered and stored.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Information gathering on the FTP port:**'
  prefs: []
  type: TYPE_NORMAL
- en: 'We entered the default anonymous login by entering the username and password
    as `Ftp: ftp`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We successfully got access to the login and found a file called note. On downloading
    it, we got a few usernames. As a part of the information-gathering process, these
    were stored in a document. The same can be seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_04_004.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Information gathering on SSH**:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We connect to SSH using the `ssh` client and gather information as shown in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_04_005.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We have found one more possible username.
  prefs: []
  type: TYPE_NORMAL
- en: '**Information gathering on HTTP**:'
  prefs: []
  type: TYPE_NORMAL
- en: 'There are quite a few ways to gather possible useful words from the Web application.
    On the nmap screen, we found out that there is one port, `12380`, running a web
    server. On visiting and trying to check for `robots.txt`, we found some interesting
    folders as shown in the following screenshots:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_04_006.jpg)![How to do it...](img/image_04_007.jpg)'
  prefs: []
  type: TYPE_IMG
- en: On accessing the `/blogblog/` URL, we discovered that it is a WordPress site,
    so we'll try to enumerate the possible usernames for the WordPress blog.
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the following command to enumerate WordPress users:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_04_008.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Information gathering via shares**:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here we will gather information that will help us build our potential credentials
    list. Let''s check how this is possible. We will run `enum4linux` on the machine,
    using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_04_009.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Share enumeration via `enum4linux` looks similar to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_04_010.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'On doing so, we realize that there are more usernames available, and hence,
    we can add them to our username list. On further assessment, we hit the jackpot:
    the available usernames on the server. SID enumeration via `enum4linux` looks
    similar to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_04_011.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now an entire list of usernames is formulated and stored in the username file,
    which looks as shown in the following screenshot:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_04_012-min.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s do the same for the Metasploitable 2 machine. In our testing lab, the
    Metasploitable 2 machine is hosted at `192.168.157.152`. We have created a custom
    `grep` that will enumerate the share for users and also give only the username
    as output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_04_013.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once this is done, save the usernames in a file of any name. In this case,
    we name it `metasploit_users`. This can be done by redirecting the output of the
    preceding command using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: With this, we have completed the first recipe of information gathering to build
    a credible credentials dictionary. In the next recipe, we will look at how to
    make use of this to attack and try to gain access to the server.
  prefs: []
  type: TYPE_NORMAL
- en: Cracking FTP login using custom wordlist
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to attack FTP to find a valid login. We will
    make use of the list generated in the preceding information-gathering recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we will make use of a tool named Hydra. It is a parallelized
    login cracker that supports numerous attack protocols. There are many tools available
    in Kali Linux for cracking passwords; however, Hydra is very handy. Now that we
    have Hydra and the username list, let's begin the attack.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Knowing that our username list is called `username`, ensure that terminal points
    to the path where the username file is. We will run the following command in the
    terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_04_014.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Check to see if the credentials received are working:![How to do it...](img/image_04_015.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We connect to the FTP as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_04_016.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We have successfully found valid credentials and attained the logins of potential
    users of the server.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As you can see, we have used the following command in Hydra:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Let us understand the script with all the switches. The `-e` switch has three
    options, `n`, `s`, and `r`:'
  prefs: []
  type: TYPE_NORMAL
- en: '`n`: This option checks for a null password'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`s`: This option is used for login name as password'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`r`: This is the reverse of login name as password'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `-L` check is to specify the list of usernames, and `ftp` is the protocol
    specified, which should be attacked for password guessing.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are more parameters that can be used in the scenario for different types
    of attacks. Here are a few examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '`-S`: This is used to connect to the port via SSL'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-s`: This is used to specify the custom port for the protocol to test, if
    it''s not the default'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-p`: This is used for a specific password to be tried'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-P`: This is used to specify a list of password files'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-C`: This is a colon-separated file; here, the username and password list
    can be in a colon-separated format, for example, `user:pass`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you want the username and password to be stored in a file instead of displaying
    in Terminal, you can make use of the `-o` option followed by specifying the filename,
    to output the contents.
  prefs: []
  type: TYPE_NORMAL
- en: Cracking SSH login using custom wordlist
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to attack SSH to find a valid login. We will
    make use of the list generated in the information-gathering recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we will make use of three tools, Hydra, Patator, and Ncrack
    for SSH password cracking. All of these are available in Kali Linux.
  prefs: []
  type: TYPE_NORMAL
- en: As stated in the Patator Wiki, Patator was written out of the frustration of
    using Hydra, Medusa, Ncrack, Metasploit modules, and Nmap NSE scripts for password-guessing
    attacks. The owner opted for a different approach in order to avoid creating yet
    another password cracking tool and repeating the same shortcomings. Patator is
    a multithreaded tool written in Python that strives to be more reliable and flexible
    than its predecessors.
  prefs: []
  type: TYPE_NORMAL
- en: 'A bit of information about Ncrack: Ncrack is a high-speed network-authentication
    cracking tool. Ncrack was designed using a modular approach, a command-line syntax
    similar to Nmap, and a dynamic engine that can adapt its behavior based on network
    feedback. It allows for rapid, yet reliable large-scale auditing of multiple hosts.
    It supports most well-known protocols.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will use Hydra to crack the password for the SSH service on Stapler. Enter
    the following command in the terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_04_017.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'It can also be checked using Patator; enter the following command in the terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_04_018.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Let us verify if the finding is true by logging in to SSH. We have successfully
    logged in as shown in the following screenshot:![How to do it...](img/image_04_019.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We can try this with the users obtained from Metasploitable 2; we will use
    the `ncrack` command to crack the password this time. Let us try to find a login
    for one of the account names, `sys`. Enter the following command in terminal to
    perform an SSH password cracking attack on the `sys` of our Metasploitable 2 machine:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_04_020.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, the password for the `sys` account has been found and login
    is successful:![How to do it...](img/image_04_021.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We have used the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Let us understand what these switches actually do.
  prefs: []
  type: TYPE_NORMAL
- en: 'As seen previously, the `-e` switch has three options, `n`, `s`, and `r`:'
  prefs: []
  type: TYPE_NORMAL
- en: '`n`: This option checks for null password'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`s`: This uses the login name as password'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`r`: This is the reverse of the login name as password'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `-L` check allows us to specify a file containing usernames. The `-t` switch
    stands for tasks; it runs number of connects in parallel. By default, the number
    is 16\. It is similar to the threading concept to obtain better performance by
    parallelization. The `-l` switch stands for a particular username, and the `-P`
    switch represents the file list to be read for attack.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let us look at the Patator script:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ssh_login`: This is the attack vector for Patator'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`host=`: This represents the IP address/URL to be used'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`user=`: This is the username to be used for attack purposes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`password=`: This is the password file to be used for the brute-force attack'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let us look at the Ncrack script:'
  prefs: []
  type: TYPE_NORMAL
- en: '`-v`: This switch enables verbose mode'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--user`: This switch enables us to provide the username'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-P`: This is the switch to provide the password file'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are many switches available in Patator and Ncrack. We suggest you go through
    the different protocols and features and try them out on the vulnerable machines
    we have mentioned in the book. Alternatively, more information can be found at
    [https://www.vulnhub.com/](https://www.vulnhub.com/) .
  prefs: []
  type: TYPE_NORMAL
- en: Cracking HTTP logins using custom wordlist
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We saw that Stapler had a web application running on port `12380`, with WordPress
    hosted. In this recipe, we are going to look at how to perform password-cracking
    attacks on the login panel of WordPress. The tool we will be using in this case
    is WPScan.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: WPScan is a WordPress scanner. It has many functionalities, such as enumerating
    WordPress version, vulnerable plugins, listing available plugins, wordlist-based
    password cracking.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will first enumerate the available WordPress logins using the enumerate
    user script. Enter the following command in the terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_04_022.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'To start password cracking, we will provide the wordlist file from the available
    wordlist in Kali, for example, `rockyou.txt`. Enter the following command in terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_04_023.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s check if the password is valid. Visit the login page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_04_024.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let us understand the switches used in the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '`-u`: This switch specifies the URL to be accessed'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--wordlist`: This switch specifies the dictionary or password list to be used
    for cracking'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--threads`: This switch specifies the number of threads to be loaded to achieve
    performance through parallel job executions'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: WPScan comes with quite a few functionalities. It allows the user to enumerate
    installed themes, plugins, users, timthumbs, and so on. It is always a good idea
    to use the other available commands in the WordPress installation to check how
    they function.
  prefs: []
  type: TYPE_NORMAL
- en: Cracking MySql and PostgreSQL login using custom wordlist
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will see how to gain access to the MySQL and Postgres databases.
    We will be using the Metasploitable 2 vulnerable server to perform the attacks.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this exercise, we will be using Metasploit as our module to perform the
    credential attack, since we have already seen how the other tools work in the
    previous recipes. Let's start the Metasploit console and start exploiting the
    SQL servers.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once you are on the Metasploit console, enter the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_04_025.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Once this is done, wait for the script to finish. In this case, since we have
    given a command to stop on success, once we find the right password it will stop
    execution of the script. The output will be as shown in the following screenshot:![How
    to do it...](img/image_04_026.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now let''s try and crack the Postgres credentials. Enter the following in the
    Metasploit terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'The scanner will initiate, and any successful attempt will be highlighted in
    green. Have a look at the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_04_027.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We provide information to the Metasploit framework, including the wordlists
    path, the username, and other relevant information. Once done, we can run and
    cause the module to execute. Metasploit fires up the module and starts brute-forcing
    to find the right password (if available in the dictionary). Let''s understand
    a few of the commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '`use auxiliary/scanner/mysql/mysql_login`: In this command, we specify the
    `mysql` plugin that will provide the list of usernames'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`set stop_on_success true`: This basically sets the parameter to stop the script
    once a valid password is found'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`set pass_file /usr/share/wordlists/rockyou.txt`: In this command, we specify
    the password file for the script to refer to for performing the attack'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If, at any point in time, you don't know what to do, you can issue the `show
    options` command in the Metasploit terminal. Once the `use (plugin)` command is
    set, it will provide the required and non-required parameters that will help execute
    the script.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Metasploit is a framework of abundance. It is recommended to look at the other
    scanner modules and options provided for SQL-based server cracking.
  prefs: []
  type: TYPE_NORMAL
- en: Cracking Cisco login using custom wordlist
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe we will see how we to gain access to Cisco devices, we will be
    using tools available in Kali. We will be using a tool called as CAT to perform
    the activity. **CAT** stands for **Cisco audit tool**. It is a Perl script which
    scans Cisco routers for common vulnerabilities.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this exercise we have setup a Cisco device with a simple password to demonstrate
    the activity. We do not require any external tools as everything is available
    in Kali itself.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have set up a Cisco router on `192.168.1.88`. As mentioned we will use `CAT`:![How
    to do it...](img/image_04_032.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We have used a custom wordlist for username and password, which contain the
    following details:![How to do it...](img/image_04_033.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once you are on the Metasploit console, enter the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_04_034.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, it attacks the service to check for valid credentials and fetches
    with the valid password if it is found in the wordlist.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We have used the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '`-h` : This command tells the script the host IP of the device'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-w` : This command tells the script the user list to be used for the attack'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-a`: This command tells the script the password list to be used for the attack'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are additional features like `-i` , `-l`, and `-q`, which the reader can
    take up as exercises for this recipe for Cisco devices.
  prefs: []
  type: TYPE_NORMAL
- en: Exploiting vulnerable services (Unix)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will exploit the vulnerabilities at the network level. These
    vulnerabilities are software-level vulnerabilities. When we talk about software,
    we are explicitly speaking about software/packages that make use of networks/ports
    to function. For example, FTP server, SSH server, HTTP, and so on. This recipe
    will cover a few vulnerabilities of two flavors, Unix and Windows. Let's start
    with UNIX exploitation.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will make use of Metasploit in this module; make sure you start PostgreSQL
    before initializing Metasploit. We will quickly recap the vulnerabilities we found
    in Metasploitable2 when we performed the vulnerability scan:'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The IP is different as the author has changed the VLAN of the internal network.
  prefs: []
  type: TYPE_NORMAL
- en: 'The vulnerability scan output would look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/image_04_028.jpg)'
  prefs: []
  type: TYPE_IMG
- en: A prerequisite to this recipe is to know your IP address, since it will be used
    to set the Lhost in Metasploit. Let us take a few of the vulnerabilities from
    here to understand how the exploitation of vulnerable services occurs.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Start PostgreSQL and then fire up `msfconsole`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_04_029.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We will exploit the `vsftpd` vulnerability. Enter the following in the terminal
    where `msfconsole` is running:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_04_030.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The exploit ran successfully and we got to the root of the system. Let us check
    out an other vulnerability from the vulnerability-assessment scan we did for Metasploitable
    2\. Enter the following commands in terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_04_031.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Metasploit is a framework that provides a lot of facilities, from enumeration,
    and exploitation, to helping with exploit writing. What we saw above is a sample
    of Metasploit exploitation. Let us understand what happened in the preceding scenario
    of `vsftpd`:'
  prefs: []
  type: TYPE_NORMAL
- en: '`search vsftpd`: This searches the Metasploit database for any information
    related to `vsftpd`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`use (exploit)`: This specifies the exploit we want to prepare to execute'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`set lhost`: This sets the local host IP of our machine to get a reverse shell'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`set rhost`: This sets the target IP to launch the exploit'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`set payload (payload path)`: This specifies what we want to do once the exploitation
    has been completed successfully'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Metasploit also comes with a GUI version in the community edition. It would
    be a good idea to check that out. A detailed guide to using Metasploit can be
    found at [https://www.offensive-security.com/metasploit-unleashed/](https://www.offensive-security.com/metasploit-unleashed/)
    .
  prefs: []
  type: TYPE_NORMAL
- en: Exploiting vulnerable services (Windows)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will exploit vulnerable services in Windows. To understand
    this section, we have a Windows 7 system with some vulnerable software running.
    We will do a quick enumeration, find vulnerabilities, and exploit them using Metasploit.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In order to start exploiting, we will need the vulnerable Windows OS. Get the
    IP of that machine. Apart from this, we will have to initialize the Metasploit
    framework in the **CLI** (**command-line interface**). We are good to go.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once the Windows 7 image has been downloaded, run an `nmap` scan to find the
    available services. Run the following command in the terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_04_035.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, there are three interesting bits of software running on the
    remote machine; they are, `Konica Minolta FTP Utility ftpd 1.00`, `Easy File Sharing
    HTTP Server 6.9` and the service running on `16101` and `16102`. Checking in Google,
    it can be found that it is running `Blue Coat Authentication and Authorization
    Agent`. We check `exploit-db` to check if any of them are vulnerable:![How to
    do it...](img/image_04_036.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Konica Minolta FTP is vulnerable:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_04_037.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Blue Coat Authentication and Authorization Agent (BCAAA) is vulnerable:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_04_038.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Easy File Sharing HTTP Server 7.2 is vulnerable as well. Let's check if they
    can be exploited.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will first test the FTP. Begin by entering the following commands in the
    Metasploit console:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_04_039.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We successfully got a shell. Now let us test for the Easy File Sharing HTTP
    Server. Enter the following commands in the Metasploit terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_04_040.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We successfully pulled off this one as well: we got a shell. Now, let''s check
    the last piece of software, the Blue Coat Authentication and Authorization Agent,
    to see if it is vulnerable to exploitation. Enter the following commands in the
    Metasploit terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_04_041.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We have successfully managed to exploit all three vulnerabilities. This completes
    this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have seen previously how Metasploit can be used for exploitation. There are
    no new commands used apart from the one we saw and used in the previous recipes.
    The only difference is calling the `use` function to load the given vulnerability.
  prefs: []
  type: TYPE_NORMAL
- en: The `set payload windows/shell_bind_tcp` command is a single payload with no
    stages involved. On successful exploitation, it opens a port, with a shell on
    it waiting for a connection. Once we send the exploit, Metasploit accesses the
    open port and, voilà, we have a shell.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are various other ways to get into the system; it's important to make
    sure that proper information gathering is done before we begin exploitation. With
    this, we complete our network exploitation. In the next chapter, we will discuss
    post exploitation.
  prefs: []
  type: TYPE_NORMAL
- en: Exploiting services using exploit-db scripts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe we are going to exploit the Windows SMB service `ms08_067` using
    exploit code outside the Metasploit framework. A pentester often relies on Metasploit
    for his\her pentesting activities, however it is important to understand that
    these are custom scripts that are run and take a dynamic input of remote host
    port to connect to and so on. In this recipe, we will see how to tweak a vulnerability
    script to match our target and exploit it successfully.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we will need to use the vulnerable windows machine we have
    been testing, and the rest of the tools and scripts that are available in the
    Kali machine itself.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let us first see how to use `searchsploit` to search for `ms08-067` vulnerability
    in the `exploit-db` database, using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_04_042.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We can see that a Python script is available called "Microsoft Windows - 'NetAPI32.dll'
    Code Execution (Python) (MS08-067)". We now read the content of the Python file,
    the path to the file is `/usr/share/exploitdb/platforms/ windows/remote/40279.py`.
    Make a copy of the same on the desktop.![How to do it...](img/image_04_043.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On reading the file, it was found that the script was making use of a custom
    payload that connects to a different IP and port and not ours:![How to do it...](img/image_04_044.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'So we will have to first edit the code and point the payload that we want to
    execute to our IP address and port. In order to do so we will have to make use
    of `msfvenom` to create our payload so that we can get this script to execute.
    Enter the following command on the Kali terminal to create a Python shell code
    for reverse connection to the Kali IP:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_04_045.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Please note the payload created is 380 bytes. Copy the entire "buf" line that
    is generated and paste it in a file, rename the word `buf` with `shellcode`, since
    the script we are using makes use of the word `shellcode` for payload delivery.
    The text file would look like this:![How to do it...](img/image_04_046.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note we have removed the first line, `buf = ""`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we need to be very careful from here onwards: in the Python script it was
    mentioned that their payload size was 380 bytes and the remaining had been filled
    with nops to adjust the delivery. We have to ensure the same, so that if there
    are 10 nops and 380 bytes of code we assume there is 390 bytes delivery, so if
    our shell code generated is 385 bytes, we will add only 5 nops to keep our buffer
    constant. In the present scenario the new payload size is also 380 so we need
    not fiddle with the NOP. Now we will replace the original shell code with the
    one we have created. So replace the following highlighted text with the new shell
    code that is generated:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_04_047.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note that we have replaced the entire shell code post the `/x90` NOP code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the code is replaced, save and close the file. Start Metasploit and enter
    the following command to initiate a listener on the Kali machine on port `443`
    as mentioned when we created our payload:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_04_048.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, once our handler is up, we will execute the Python script and mention
    the target IP address and operating system. Go to the desktop where the edited
    file has been copied and execute the Python file. As it is stored in the desktop,
    the following command is executed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/image_04_049.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Once the script has executed come back to the listener and see if the connection
    has been received:![How to do it...](img/image_04_050.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Awesome, we have got a remote shell by using scripts available on `exploit-db`.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The majority of this has been explained in the walkthrough itself. The new
    tool introduced here is `msfvenom`. The following is the explanation of the parameters
    used:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: '`-p`: This is the payload that needs to be created.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`LHOST`: The host, in which the machine is supposed to connect to post exploitation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`LPORT`: The port the machine is supposed to connect to pose exploitation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-b`: This stands for bad characters. It tells the script to avoid the use
    of the mentioned characters in the generation of the shell code.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-f`: This states the format that the shell code is to be created in.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-a`: This states the architecture of the target machine where the exploit
    is going to be executed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is a very basic level of understanding how scripts are edited for execution
    for our requirement. This activity has been done to introduce the reader to the
    concept of shell code replacement. There are plenty of scripts related to various
    exploits on `exploit-db`.
  prefs: []
  type: TYPE_NORMAL
