- en: '3: Installing Docker'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are loads of ways and places to install Docker. There’s Windows, there’s
    Mac, and there’s obviously Linux. But there’s also in the cloud, on premises,
    on your laptop, and more… On top of those, we’ve got manual installs, scripted
    installs, wizard-based installs… There literally are loads of ways and places
    to install Docker!
  prefs: []
  type: TYPE_NORMAL
- en: But don’t let that scare you! They’re all easy.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter we’ll cover some of the most important installs:'
  prefs: []
  type: TYPE_NORMAL
- en: Desktop installs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Docker for Windows
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Docker for Mac
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Server installs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Linux
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Windows Server 2016
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Upgrading Docker
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Storage driver considerations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We’ll also look at upgrading the Docker Engine and selecting an appropriate
    storage driver.
  prefs: []
  type: TYPE_NORMAL
- en: Docker for Windows (DfW)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The first thing to note is that *Docker for Windows* is a “packaged” product
    from Docker, Inc. This means it’s easy to download and has a slick installer.
    It spins up a single-engine Docker environment on a 64-bit Windows 10 desktop
    or laptop.
  prefs: []
  type: TYPE_NORMAL
- en: The second thing to note is that it is a Community Edition (CE) app. So it’s
    not intended for production.
  prefs: []
  type: TYPE_NORMAL
- en: The third thing of note is that it might suffer some feature-lag. This is because
    Docker, Inc. are taking a *stability first, features second* approach with the
    product.
  prefs: []
  type: TYPE_NORMAL
- en: All three points add up to a quick and easy installation, but one that is **not**
    intended for production.
  prefs: []
  type: TYPE_NORMAL
- en: Enough waffle. Let’s see how to install *Docker for Windows*.
  prefs: []
  type: TYPE_NORMAL
- en: 'First up, pre-requisites. *Docker for Windows* requires:'
  prefs: []
  type: TYPE_NORMAL
- en: Windows 10 Pro | Enterprise | Education (1607 Anniversary Update, Build 14393
    or newer)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Must be 64-bit Windows 10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Hyper-V* and *Containers* features must be enabled in Windows
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hardware virtualization support must be enabled in your system’s BIOS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The following will assume that hardware virtualization support is already enabled
    in your system’s BIOS. If it is not, you should carefully follow the procedure
    for your particular machine.
  prefs: []
  type: TYPE_NORMAL
- en: The first thing to do in Windows 10, is make sure the **Hyper-V** and **Containers**
    features are installed and enabled.
  prefs: []
  type: TYPE_NORMAL
- en: Right-click the Windows Start button and choose `Apps and Features`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the `Programs and Features` link (a small link on the right).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click `Turn Windows features on or off`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check the `Hyper-V` and `Containers` checkboxes and click `OK`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This will install and enable the Hyper-V and Containers features. Your system
    may require a restart.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.1](images/Figure3-1.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.1
  prefs: []
  type: TYPE_NORMAL
- en: The *Containers* feature is only available if you are running the summer 2016
    Windows 10 Anniversary Update (build 14393) or later.
  prefs: []
  type: TYPE_NORMAL
- en: Once you’ve installed the `Hyper-V` and `Containers` features, and restarted
    your machine, it’s time to install *Docker for Windows*.
  prefs: []
  type: TYPE_NORMAL
- en: Head over to https://www.docker.com/get-docker and click the `GET DOCKER COMMUNITY
    EDITION` link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the `Download from Docker Store` link beneath the `DOCKER CE FOR WINDOWS`
    section. This will take you to the Docker Store and you may need to login with
    your Docker ID.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click one of the `Get Docker` download links.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Docker for Windows has a *stable* and *edge* channel. The edge channel contains
    newer features but may not be as stable.
  prefs: []
  type: TYPE_NORMAL
- en: An installer package called `Docker for Windows Installer.exe` will be downloaded
    to your default downloads directory.
  prefs: []
  type: TYPE_NORMAL
- en: Locate and launch the installer package downloaded in the previous step.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Step through the installation wizard and provide local administrator credentials
    to complete the installation. Docker will automatically start, as a system service,
    and a Moby Dock whale icon will appear in the Windows notifications tray.
  prefs: []
  type: TYPE_NORMAL
- en: Congratulations! You have installed *Docker for Windows*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open a command prompt or PowerShell terminal and try the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Client:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Version:       18.01.0-ce'
  prefs: []
  type: TYPE_NORMAL
- en: 'API version:   1.35'
  prefs: []
  type: TYPE_NORMAL
- en: 'Go version:    go1.9.2'
  prefs: []
  type: TYPE_NORMAL
- en: 'Git commit:    03596f5'
  prefs: []
  type: TYPE_NORMAL
- en: 'Built: Wed Jan 10 20:05:55 2018'
  prefs: []
  type: TYPE_NORMAL
- en: 'OS/Arch:       windows/amd64'
  prefs: []
  type: TYPE_NORMAL
- en: 'Experimental:  false'
  prefs: []
  type: TYPE_NORMAL
- en: 'Orchestrator:  swarm'
  prefs: []
  type: TYPE_NORMAL
- en: 'Server:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Engine:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Version:      18.01.0-ce'
  prefs: []
  type: TYPE_NORMAL
- en: 'API version:  1.35 (minimum version 1.12)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Go version:   go1.9.2'
  prefs: []
  type: TYPE_NORMAL
- en: 'Git commit:   03596f5'
  prefs: []
  type: TYPE_NORMAL
- en: 'Built:        Wed Jan 10 20:13:12 2018'
  prefs: []
  type: TYPE_NORMAL
- en: 'OS/Arch:      linux/amd64'
  prefs: []
  type: TYPE_NORMAL
- en: 'Experimental: false'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '`Notice that the output is showing `OS/Arch: linux/amd64` for the **Server**
    component. This is because the default installation currently installs the Docker
    daemon inside of a lightweight Linux Hyper-V VM. In this scenario, you will only
    be able to run Linux containers on your *Docker for Windows* install.'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to run *native Windows containers*, you can right click the Docker
    whale icon in the Windows notifications tray and select `Switch to Windows containers...`.
    You can achieve the same thing from the command line with the following command
    (located in the `\Program Files\Docker\Docker` directory):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '`You will get the following alert if you have not enabled the `Windows Containers`
    feature.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.2](images/figure3-2.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.2
  prefs: []
  type: TYPE_NORMAL
- en: If you already have the Windows Containers feature enabled, it will only take
    a few seconds to make the switch. Once the switch has been made, the output to
    the `docker version` command will look like this.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '`Notice that the Server version is now showing as `windows/amd64`. This means
    the daemon is running natively on the Windows kernel and will only run Windows
    containers.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Also note that the system is now running the *experimental* version of Docker
    (`Experimental: true`). As previously mentioned, *Docker for Windows* has a stable
    and an edge channel. At the time of writing, Windows Containers is an experimental
    feature of the edge channel.'
  prefs: []
  type: TYPE_NORMAL
- en: You can check which channel you are running with the `dockercli -Version` command.
    The `dockercli` command is located in `C:\Program Files\Docker\Docker`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '`The following listing shows that regular Docker commands work as normal.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '`Docker for Windows includes the Docker Engine (client and daemon), Docker
    Compose, Docker Machine, and the Docker Notary command line. Use the following
    commands to verify that each was successfully installed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: C:\> docker-machine --version
  prefs: []
  type: TYPE_NORMAL
- en: docker-machine.exe version 0.13.0, build 9ba6da9
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]`'
  prefs: []
  type: TYPE_NORMAL
- en: C:\> notary version
  prefs: []
  type: TYPE_NORMAL
- en: notary
  prefs: []
  type: TYPE_NORMAL
- en: 'Version:    0.4.3'
  prefs: []
  type: TYPE_NORMAL
- en: 'Git commit: 9211198'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: $ docker version
  prefs: []
  type: TYPE_NORMAL
- en: 'Client:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Version:      `17`.05.0-ce'
  prefs: []
  type: TYPE_NORMAL
- en: 'API version:  `1`.29'
  prefs: []
  type: TYPE_NORMAL
- en: 'Go version:   go1.7.5'
  prefs: []
  type: TYPE_NORMAL
- en: 'Git commit:   89658be'
  prefs: []
  type: TYPE_NORMAL
- en: 'Built:        Thu May `4` `21`:43:09 `2017`'
  prefs: []
  type: TYPE_NORMAL
- en: 'OS/Arch:      darwin/amd64'
  prefs: []
  type: TYPE_NORMAL
- en: 'Server:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Version:      `17`.05.0-ce'
  prefs: []
  type: TYPE_NORMAL
- en: 'API version:  `1`.29 `(`minimum version `1`.12`)`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Go version:   go1.7.5'
  prefs: []
  type: TYPE_NORMAL
- en: 'Git commit:   89658be'
  prefs: []
  type: TYPE_NORMAL
- en: 'Built:        Thu May `4` `21`:43:09 `2017`'
  prefs: []
  type: TYPE_NORMAL
- en: 'OS/Arch:      linux/amd64'
  prefs: []
  type: TYPE_NORMAL
- en: 'Experimental: `true`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: $ docker --version
  prefs: []
  type: TYPE_NORMAL
- en: Docker version `17`.05.0-ce, build 89658be
  prefs: []
  type: TYPE_NORMAL
- en: $ docker image ls
  prefs: []
  type: TYPE_NORMAL
- en: REPOSITORY    TAG      IMAGE ID      CREATED       SIZE
  prefs: []
  type: TYPE_NORMAL
- en: $ docker container ls
  prefs: []
  type: TYPE_NORMAL
- en: CONTAINER ID   IMAGE   COMMAND   CREATED    STATUS    PORTS    NAMES
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: $  docker --version
  prefs: []
  type: TYPE_NORMAL
- en: Docker version `17`.05.0-ce, build 89658be
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]`'
  prefs: []
  type: TYPE_NORMAL
- en: $  docker-compose --version
  prefs: []
  type: TYPE_NORMAL
- en: docker-compose version `1`.13.0, build 1719ceb
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]`'
  prefs: []
  type: TYPE_NORMAL
- en: $  docker-machine --version
  prefs: []
  type: TYPE_NORMAL
- en: docker-machine version `0`.11.0, build 5b27455
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]`'
  prefs: []
  type: TYPE_NORMAL
- en: $ notary version
  prefs: []
  type: TYPE_NORMAL
- en: notary
  prefs: []
  type: TYPE_NORMAL
- en: 'Version:    `0`.4.3'
  prefs: []
  type: TYPE_NORMAL
- en: 'Git commit: `9211198`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: $ wget -qO- https://get.docker.com/ `|` sh
  prefs: []
  type: TYPE_NORMAL
- en: 'modprobe: FATAL: Module aufs not found /lib/modules/4.4.0-36-generic'
  prefs: []
  type: TYPE_NORMAL
- en: + sh -c `'sleep 3; yum -y -q install docker-engine'`
  prefs: []
  type: TYPE_NORMAL
- en: <Snip>
  prefs: []
  type: TYPE_NORMAL
- en: If you would like to use Docker as a non-root user, you should
  prefs: []
  type: TYPE_NORMAL
- en: now consider adding your user to the `"docker"` group with
  prefs: []
  type: TYPE_NORMAL
- en: 'something like:'
  prefs: []
  type: TYPE_NORMAL
- en: sudo usermod -aG docker your-user
  prefs: []
  type: TYPE_NORMAL
- en: Remember that you will have to log out and back in...
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: $ sudo usermod -aG docker npoulton
  prefs: []
  type: TYPE_NORMAL
- en: $ cat /etc/group `|` grep docker
  prefs: []
  type: TYPE_NORMAL
- en: docker:x:999:npoulton
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: $ docker --version
  prefs: []
  type: TYPE_NORMAL
- en: Docker version `18`.01.0-ce, build 03596f5
  prefs: []
  type: TYPE_NORMAL
- en: $ docker system info
  prefs: []
  type: TYPE_NORMAL
- en: 'Containers: `0`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Running: `0`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Paused: `0`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Stopped: `0`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Images: `0`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Server Version: `18`.01.0-ce'
  prefs: []
  type: TYPE_NORMAL
- en: 'Storage Driver: overlay2'
  prefs: []
  type: TYPE_NORMAL
- en: 'Backing Filesystem: extfs'
  prefs: []
  type: TYPE_NORMAL
- en: <Snip>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Install-Module DockerProvider -Force
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Install-Package Docker -ProviderName DockerProvider -Force
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Name      Version         Source     Summary
  prefs: []
  type: TYPE_NORMAL
- en: '----      -------         ------     -------'
  prefs: []
  type: TYPE_NORMAL
- en: Docker    17.06.2-ee-6    Docker     Docker for Windows Server 2016
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: docker --version
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Docker version 17.06.2-ee-6, build e75fdb8
  prefs: []
  type: TYPE_NORMAL
- en: docker system info
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Containers: 0'
  prefs: []
  type: TYPE_NORMAL
- en: 'Running: 0'
  prefs: []
  type: TYPE_NORMAL
- en: 'Paused: 0'
  prefs: []
  type: TYPE_NORMAL
- en: 'Stopped: 0'
  prefs: []
  type: TYPE_NORMAL
- en: 'Images: 0'
  prefs: []
  type: TYPE_NORMAL
- en: 'Server Version: 17.06.2-ee-6'
  prefs: []
  type: TYPE_NORMAL
- en: 'Storage Driver: windowsfilter'
  prefs: []
  type: TYPE_NORMAL
- en: <Snip>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: $ apt-get update
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: $ apt-get remove docker docker-engine docker-ce docker.io -y
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: $ wget -qO- https://get.docker.com/ | sh
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: $ systemctl enable docker
  prefs: []
  type: TYPE_NORMAL
- en: Synchronizing state of docker.service...
  prefs: []
  type: TYPE_NORMAL
- en: Executing /lib/systemd/systemd-sysv-install enable docker
  prefs: []
  type: TYPE_NORMAL
- en: $ systemctl is-enabled docker
  prefs: []
  type: TYPE_NORMAL
- en: enabled
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: $ docker container ls
  prefs: []
  type: TYPE_NORMAL
- en: CONTAINER ID    IMAGE      COMMAND       CREATED             STATUS        \
  prefs: []
  type: TYPE_NORMAL
- en: NAMES
  prefs: []
  type: TYPE_NORMAL
- en: 97e599aca9f5    alpine     "sleep 1d"    14 minutes ago      Up 1 minute
  prefs: []
  type: TYPE_NORMAL
- en: $ docker service ls
  prefs: []
  type: TYPE_NORMAL
- en: ID              NAME           MODE          REPLICAS      IMAGE
  prefs: []
  type: TYPE_NORMAL
- en: ibyotlt1ehjy    prod-equus1    replicated    1/1           alpine:latest
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28][PRE29]`'
  prefs: []
  type: TYPE_NORMAL
