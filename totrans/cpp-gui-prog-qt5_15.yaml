- en: Cross-Platform Development
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Qt has been known for its cross-platform capability since its first release.
    It was also one of the main goals of the founders when they decided to create
    this framework, long before it was taken over by **Nokia**, and later **The Qt
    Company**.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Compilers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Build settings
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying to PC platforms
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying to mobile platforms
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's get started.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding compilers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will learn about the process of generating an executable
    file from a Qt project. This process is what we call **compile** or **build**.
    The tool that is used for this purpose is called a **compiler**. In the following
    section, we will learn what a compiler is and how to use it to generate an executable
    file for our Qt project.
  prefs: []
  type: TYPE_NORMAL
- en: What is a compiler?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When we develop an application, either using Qt or any other software development
    kit, we often have to compile our project into an executable, but what is actually
    going on when we're compiling our project?
  prefs: []
  type: TYPE_NORMAL
- en: A **compiler** is a piece of software that transforms computer code written
    in a high-level programming language or computer instructions into a machine code
    or lower-level form that can be read and executed by a computer. This low-level
    machine code is very different depending on the operating system and computer
    processor you're running, but you don't have to worry about it as the compiler
    will convert it for you.
  prefs: []
  type: TYPE_NORMAL
- en: That means all you need to worry about is writing your logic code in a human-readable
    programming language, and let the compiler do the job for you. By using different
    compilers, theoretically, you should be able to compile your code into executable
    programs that can be run on different operating systems and hardware. I'm using
    the word *theoretically* here because in practice it's actually much more difficult
    than just using different compilers, you may also need to implement libraries
    that support the target platform. However, Qt has already handled all this for
    you, so you don't have to do the extra work.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the current version, Qt supports the following compilers:'
  prefs: []
  type: TYPE_NORMAL
- en: '**GNU Compiler Collection (GCC)**: GCC is a compiler for Linux and macOS'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**MinGW (Minimalist GNU for Windows)**: MinGW is a native software port of
    GCC and GNU Binutils (binary utilities) for developing applications on Windows'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Microsoft Visual C++ (MSVC)**: Qt supports MSVC 2013, 2015, and 2017 for
    building Windows applications'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**XCode**: XCode is the primary compiler used by developers who develop applications
    for macOS and iOS'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Linux ICC (Intel C++ Compiler)**: Linux ICC is a set of compilers of C and
    C++ compilers developed by Intel for Linux application development'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Clang**: Clang is a C, C++, Objective C, and Objective C++ frontend for the
    LLVM compiler for Windows, Linux, and macOS'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Nim**: Nim is the Nim compiler for Windows, Linux, and macOS'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**QCC**: QCC is the interface for compiling C++ applications for the QNX operating
    system'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Build automation with Make
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In software development, **Make **is a build automation tool that automatically
    builds executable programs and libraries from source code by reading configuration
    files called **Makefiles **that specify how to derive the target platform. In
    a nutshell, a Make program generates build configuration files and uses them to
    tell the compiler what to do before generating the final executable program.
  prefs: []
  type: TYPE_NORMAL
- en: 'Qt supports two types of Make programs:'
  prefs: []
  type: TYPE_NORMAL
- en: '**qmake**: It is the native Make program developed by the Qt team. It works
    best on Qt Creator, and I strongly recommend using it for all Qt projects.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CMake**: On the other hand, although this is a very powerful build system,
    it doesn''t do all the things that qmake does specifically for a Qt project, such
    as:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running the **Meta Object Compiler** (**MOC**)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Telling the compiler where to look for Qt headers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Telling the linker where to look for Qt libraries
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You have to do the preceding steps manually on CMake in order to successfully
    compile a Qt project. You should use CMake only if:'
  prefs: []
  type: TYPE_NORMAL
- en: You're working on a non-Qt project but wish to use Qt Creator for writing the
    code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You're dealing with a massive project that requires complex configurations,
    which qmake simply cannot handle
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You really love to use CMake and you know exactly what you're doing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Qt is really flexible when it comes to choosing the right tools for your project.
    It doesn't stick to just its own build system and compiler. It gives the developers
    freedom to choose what suits best for their projects.
  prefs: []
  type: TYPE_NORMAL
- en: Build settings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before a project is compiled or built, the compiler needs to know several details
    before proceeding. These details are known as the **build settings**, which are
    a very important aspect of the compilation process. In the following section,
    we will learn what the build settings are and how we can configure them in an
    accurate manner.
  prefs: []
  type: TYPE_NORMAL
- en: Qt Project (.pro) File
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'I''m sure you already know about the **Qt Project File** since we have mentioned
    it countless times throughout the book. A `.pro` file is actually the project
    file used by *qmake* to build your application, library, or plugin. It contains
    all the information, such as links to the headers and source files, libraries
    required by the project, custom-build processes for different platforms/environments,
    and so on. A simple project file could look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: It simply tells qmake which Qt modules should be included in the project, what
    the name of the executable program is, what's the type of the application, and
    finally the links to the header files, source files, form declaration files, and
    resource files that need to be included in the project. All of this information
    is crucial in order for qmake to generate the configuration files and successfully
    build the application. For a more complex project, you may want to configure your
    project differently for different operating systems. This can also be done easily
    in the Qt Project File.
  prefs: []
  type: TYPE_NORMAL
- en: 'To learn more about how you can configure your project differently for different
    operating systems, please refer to the following link: [http://doc.qt.io/qt-5/qmake-language.html#scopes-and-conditions.](http://doc.qt.io/qt-5/qmake-language.html#scopes-and-conditions)'
  prefs: []
  type: TYPE_NORMAL
- en: Comment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can add your own comments in the project file to remind yourself of the
    purpose of adding a specific line of configuration, so that you won''t forget
    why you added a line after not touching it for a while. A comment starts with
    the hash symbol (`#`) after which you can write anything since the build system
    will simply ignore the entire line of text. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also add dash lines or use spaces to make your comment stand out from
    others:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Modules, configurations, and definitions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can add different Qt modules, configuration options, and definitions to
    your project. Let''s take a look at how we can achieve these. To add additional
    modules, you simply add the `module` keyword behind `QT +=`, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Or you can also add in a condition in front to determine when to add a specific
    module to your project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also add configuration settings to your project. For example, we want
    to specifically ask the compiler to follow the 2011 version of the C++ specifications
    (known as C++11) when compiling our project, as well as making it a multithreaded
    application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: You must use `+=`, not `=`, or qmake will not be able to use Qt's configuration
    to determine the settings needed for your project. Alternatively, you can also
    use `-=` to remove a module, configuration, and definition from your project.
  prefs: []
  type: TYPE_NORMAL
- en: 'As for adding definitions (or variables) to our compiler, we use the `DEFINES`
    keyword, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Qmake adds the values of this variable as a compiler C preprocessor macro (`-D`
    option) before compiling your project. The earlier definition tells the Qt compiler
    to emit warnings if you have used any feature of Qt that has been marked as deprecated.
  prefs: []
  type: TYPE_NORMAL
- en: Platform-specific settings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can set different configurations or settings for different platforms, since
    not every setting can fit all use cases. For example, if we want to include different
    header paths for different operating systems, we can do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternatively, you can also put your settings in curly braces which behave
    like the `if` statements in a programming language:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'You can check out all the settings you can use in your project file by visiting
    the following link: [http://doc.qt.io/qt-5/qmake-variable-reference.html.](http://doc.qt.io/qt-5/qmake-variable-reference.html)'
  prefs: []
  type: TYPE_NORMAL
- en: Deploying to PC platforms
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's move on to learn how to deploy our applications on platforms such as Windows,
    Linux, and macOS.
  prefs: []
  type: TYPE_NORMAL
- en: Windows
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will learn how to deploy our application to different operating
    systems. Even though Qt supports all major platforms out of the box, there might
    be some configurations which you need to set in order to make your application
    easily deployable to all platforms.
  prefs: []
  type: TYPE_NORMAL
- en: The first operating system we're going to cover is the most common one, **Microsoft
    Windows**.
  prefs: []
  type: TYPE_NORMAL
- en: Starting from Qt 5.6, **Windows XP** is no longer supported by Qt.
  prefs: []
  type: TYPE_NORMAL
- en: There could be certain plugins that may not work properly on the Windows version
    you're trying to deploy, so do check out the documentation before you decide to
    work on your project. However, it's safe to say most of the features will work
    out of the box on Qt.
  prefs: []
  type: TYPE_NORMAL
- en: By default, the **MinGW** 32-bit compiler comes together with Qt when you're
    installing it to your Windows PC. Unfortunately, it doesn't support 64-bit by
    default unless you compile Qt from source. If you need to build 64-bit applications,
    you can consider installing the MSVC version of Qt alongside the **Microsoft Visual
    Studio**. Microsoft Visual Studio can be obtained for free from the following
    link: [https://www.visualstudio.com/vs](https://www.visualstudio.com/vs).
  prefs: []
  type: TYPE_NORMAL
- en: 'You can set up your compiler settings in Qt Creator by going to Tools | Options,
    then go to the Build & Run category and select the Kits tab:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4061d513-9767-4724-9382-a1c09d727cc1.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, there are multiple kits that run on different compilers, in
    which you can configure. By default, Qt already comes with five kits—one for Android,
    one for MinGW, and three for MSVC (version 2013, 2015, and 2017). Qt will automatically
    detect the existence of these compilers and configure these settings for you accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: If you have not installed **Visual Studio** or **Android SDK**, there will be
    a red icon with an exclamation mark appearing in front of the kit option. After
    you have installed the compiler you need, try restarting Qt Creator. It will now
    detect the newly installed compilers. You should have no problem compiling for
    the Windows platform as Qt will handle the rest for you. We will talk more about
    the Android platform in another section.
  prefs: []
  type: TYPE_NORMAL
- en: Once you have compiled your application, open up the folder in which you installed
    Qt. Copy the relevant DLL files to your application folder, and pack it together
    before distributing it to your users. Without these DLL files, your users may
    not be able to run the Qt application.
  prefs: []
  type: TYPE_NORMAL
- en: For more information, please visit the following link: [http://doc.qt.io/qt-5/windows-deployment.html.](http://doc.qt.io/qt-5/windows-deployment.html)
  prefs: []
  type: TYPE_NORMAL
- en: 'As for setting a custom icon for your application, you must add the following
    code to your project (`.pro`) file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code only works on Windows platforms, which is why we have to
    add the `win32` keyword before it.
  prefs: []
  type: TYPE_NORMAL
- en: Linux
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Linux **(or GNU/Linux) in general is considered a major operating system
    that dominates the cloud/server market. Since Linux is not a single operating
    system (Linux is offered by different vendors in the form of different Linux distributions
    that are not entirely compatible) like Windows or macOS, it is very hard for developers
    to build their applications and expect them to run flawlessly on different Linux
    distributions (**distros**). However, if you develop your Linux application on
    Qt, there is a high chance that it will work on most distributions, if not on
    all of the major distros out there, as long as the Qt library exists on the target
    system.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The default kit selection on Linux is much simpler than Windows. Since a 64-bit
    application has been mainstream and standard on most Linux distros for some time
    now, we only need to include the **GCC** 64-bit compiler when installing Qt. There
    is also an option for Android, but we will talk more about it later:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/39cbb752-788b-4f19-be8e-80a6fe79aecb.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If you are compiling your Linux application on Qt Creator for the first time,
    I''m pretty sure you will get the following error:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8cb011d6-5884-41c7-9359-949a3da431c1.png)'
  prefs: []
  type: TYPE_IMG
- en: This is because you have not installed the relevant tools required to build
    Linux applications, such as Make, GCC, and other programs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Different Linux distros have a slightly different method to install programs,
    but I won''t be explaining every single one of them here. In my case, I''m using
    an Ubuntu distro, so I did was first opened up the terminal and typed the following
    command to install the `build-essential` package which includes Make and GCC:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding command only works on distros that inherit from **Debian **and
    **Ubuntu**, and it may not work on other distributions such as **Fedora**, **Gentoo**,
    **Slackware**, and so on. You should search for the appropriate command used by
    your Linux distro to install these packages, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ca215015-a2a1-4372-bc16-b295382402fb.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you have installed the appropriate packages, restart Qt Creator and go
    to Tools | Options. Then, go to the Build & Run category and open up the Kits
    tab. You should now be able to select the compilers for both C and C++ options
    for your Desktop kit:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d8efa23d-958b-49c4-a0af-9d9ab6ef91b5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'However, you might get another error that says cannot find -lGL when trying
    to compile again:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3fa99b4a-7ff3-4fbb-a194-4fadbb2b8cc1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This is because Qt is trying to look for the `OpenGL` libraries, and it can''t
    find them on your system. This can be easily fixed by installing the `Mesa development`
    library package with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Again, the preceding command only works on Debian and Ubuntu variants. Please
    look for the appropriate command for your Linux distro if you''re not running
    one of the Debian or Ubuntu forks:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/469afd43-8058-490f-87dd-f89d97955bd7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the package has been installed, you should be able to compile and run
    your Qt application without any problem:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f90b95a8-a587-4cfd-8c60-c291a40177ae.png)'
  prefs: []
  type: TYPE_IMG
- en: As for using one of the other compilers that are less popular, such as **Linux
    ICC**, **Nim**, or **QCC**, you must set it manually by clicking on the Add button
    located on the right-hand side of the Kits interface, then key in all the appropriate
    settings to get it to work. Most people do not use these compilers, so we'll just
    skip them for now.
  prefs: []
  type: TYPE_NORMAL
- en: When it comes to distributing Linux applications, it's a lot more complicated
    than Windows or macOS. This is owing to the fact that Linux is not a single operating
    system, but rather a bunch of different distros with their own dependencies and
    configurations, which makes distributing programs very difficult.
  prefs: []
  type: TYPE_NORMAL
- en: The safest way is to compile your program statically, which has its own pros
    and cons. Your program will become really huge in size, and that makes updating
    software a great burden to users who have slow internet connections. Other than
    that, the Qt license also forbids you from building statically if you're not doing
    an open source project and do not have a Qt commercial license. To learn more
    about Qt's licensing options, please visit the following link: [https://www1.qt.io/licensing-compariso.n.](https://www1.qt.io/licensing-comparison)
  prefs: []
  type: TYPE_NORMAL
- en: Another method is to ask your users to install the right version of Qt before
    running your application, but that will yield a ton of problems on the user side
    since not every user is very tech savvy and has the patience to go through all
    those hassles to avoid the dependency hell.
  prefs: []
  type: TYPE_NORMAL
- en: Therefore, the best way is to distribute the Qt library alongside your application,
    just like we did on the Windows platform. The library might not work on some of
    the Linux distros (rarely the case, but there is a slight possibility), but that
    can be easily overcome by creating a different installer for different distros,
    and everyone's happy now.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, due to security reasons, a Linux application doesn''t usually look
    for its dependencies in its local directory by default. You must use the `$ORIGIN`
    keyword in the executable''s `rpath` setting in your qmake project (`.pro`) file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Setting the `QMAKE_RPATH` clears the default `rpath` setting for the Qt libraries.
    This allows for bundling the Qt libraries with the application. If you want the
    `rpath` to include the path to the Qt libraries, don't set `QMAKE_RPATH`.
  prefs: []
  type: TYPE_NORMAL
- en: After that, just copy all the library files from the Qt installation folder
    to your application's folder and remove its minor version numbers from the filename.
    For example, rename `libQtCore.so.5.8.1` to `libQtCore.so.5` and now it should
    be able to get detected by your Linux application.
  prefs: []
  type: TYPE_NORMAL
- en: As for application icons, you can't apply any icon to Linux applications by
    default as it is not supported. Even though some desktop environments such as
    KDE and GNOME do support application icons, the icon has to be installed and configured
    manually, which is not very convenient to the users. It may not even work on some
    user's PC since every distro works a little bit differently than the others. The
    best way to set icons for your application is to create a desktop shortcut (symlink)
    during installation and apply the icon to the shortcut.
  prefs: []
  type: TYPE_NORMAL
- en: macOS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In my opinion, **macOS **is the single most centralized operating system in
    the software world. Not only is it designed to run only on the Macintosh machines,
    you are also required to download or buy software only from the Apple App Store.
  prefs: []
  type: TYPE_NORMAL
- en: No doubt this has caused an uneasy feeling for some people who care about freedom
    of choice, but on the other hand it also means that developers have less problems
    to deal with when it comes to application building and distribution.
  prefs: []
  type: TYPE_NORMAL
- en: Other than that, macOS applications behave pretty much similar to a ZIP archive,
    where each and every application has its own directory that carries the appropriate
    libraries with it. Therefore, there is no need for the users to install the Qt
    libraries on their operating system beforehand and everything just works out of
    the box.
  prefs: []
  type: TYPE_NORMAL
- en: 'As for the Kit Selection, Qt for macOS supports kits for Android, clang 64-bit,
    iOS, and iOS Simulator:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/735061cd-1346-48d1-bc11-915a94b1f452.png)'
  prefs: []
  type: TYPE_IMG
- en: As of Qt 5.10 and above, Qt no longer supports 32-bit builds for macOS. Also,
    Qt does not support OS X on PowerPC; and since Qt uses Cocoa internally, building
    for Carbon is also not possible, please be aware of that.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before compiling your macOS applications, please install Xcode from the App
    Store before proceeding. Xcode is an integrated development environment for macOS,
    containing a suite of software development tools developed by Apple for developing
    software for macOS and iOS. Once you have installed Xcode, Qt Creator will detect
    its existence and automatically set the compiler settings for you, which is great:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5998a25c-8025-4cab-a703-0ebc982da29c.png)'
  prefs: []
  type: TYPE_IMG
- en: Once you have compiled your project, the resulting executable program is a single
    app bundle that can be easily distributed to your users. Since all the library
    files are packed within the application bundle, it should work out of the box
    on the user's PC.
  prefs: []
  type: TYPE_NORMAL
- en: 'Setting application icons for Mac is quite a simple task. Just add the following
    line of code to your project (`.pro`) file and we''re good to go:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Do note that the icon format is `.icns`, instead of `.ico`, which we usually
    use for Windows.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying to mobile platforms
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Apart from platforms such as Windows, Linux, and macOS, mobile platforms do
    hold equal importance. There are many developers who would like to deploy their
    applications to mobile platforms. Let's see how that's done. We will cover two
    major platforms, they are, iOS and Android.
  prefs: []
  type: TYPE_NORMAL
- en: iOS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Deploying Qt applications on iOS is really simple and easy. Just like we did
    previously for macOS, you need to first install Xcode on your development PC:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3be1b23b-4409-4291-8b3a-50b98101ecde.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Then, restart Qt Creator. It should now detect the existence of Xcode, and
    it will then automatically set the compiler settings for you:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3a8e54b9-b260-4f38-8b25-33541d29e9a0.png)'
  prefs: []
  type: TYPE_IMG
- en: After that, just plug in your iPhone and hit the Run button!
  prefs: []
  type: TYPE_NORMAL
- en: Building iOS applications on Qt is really that easy. However, distributing them
    is not. This is because iOS is a very closed ecosystem, just like a walled garden.
    You are not only required to register as an app developer with Apple, you also
    need to code sign your iOS applications before you're able to distribute it to
    your users. There is no way you can avoid these steps if you want to build your
    apps for the iOS.
  prefs: []
  type: TYPE_NORMAL
- en: You can learn more about these by visiting the following link: [https://developer.apple.com/app-store/submissions.](https://developer.apple.com/app-store/submissions)
  prefs: []
  type: TYPE_NORMAL
- en: Android
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Even though Android is a Linux-based operating system, it is very different
    when comparing it  to the Linux platforms that you run on your PC. To build Android
    applications on Qt, you must first install **Android SDK**, **Android NDK**, and
    **Apache ANT** to your development PC, regardless of whether you''re running Windows,
    Linux, or macOS:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c84e6e83-7ac5-46fc-b538-4f7013df7fa0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'These three packages are essential when it comes to building Android applications
    on Qt. Once all of them have been installed, restart Qt Creator, and voilà, it
    should have now detected their existence and the build settings will now have
    been set automatically:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/670eda7a-b1cb-49ef-80f4-e32d4bf20ced.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Lastly, you can configure your Android app by opening the `AndroidManifect.xml`
    file with Qt Creator:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d5039d76-b634-4e6b-9116-3b4ef38c82c0.png)'
  prefs: []
  type: TYPE_IMG
- en: You can set everything here, such as the package name, version code, SDK version,
    application icon, permissions, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Android is an open system compared to iOS, so there is no need for you to do
    anything before you're able to distribute your applications to your users. You
    can, however, choose to register as a Google Play developer if you want to distribute
    your apps on the Google Play Store.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have learned how to compile and distribute our Qt applications
    for different platforms, such as Windows, Linux, macOS, Android, and iOS. In the
    next chapter, we will learn different debugging methods that could save development
    time. Let's check it out!
  prefs: []
  type: TYPE_NORMAL
