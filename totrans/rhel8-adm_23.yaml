- en: '*Chapter 19*: Practice Exercise – 2'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this second practice exercise chapter, we will run a set of exercises to
    check the knowledge you've acquired throughout this book. In contrast with this
    book's chapters, not all the steps will be specified; it's left up to your discretion
    to perform the steps required to accomplish the necessary goals. It is recommended
    that you avoid checking back on the chapters for guidance and instead try to use
    your memory or the tools available in the system. This experience will be a key
    factor when you take on the official exams.
  prefs: []
  type: TYPE_NORMAL
- en: It is strongly advised that you start this exercise with a clock so that you
    know how long it took for you to complete.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: All the practical exercises in this chapter require a **virtual machine** (**VM**)
    running Red Hat Enterprise Linux 8 to be installed with the base installation.
    Additionally, new virtual drives will be required for storage operations.
  prefs: []
  type: TYPE_NORMAL
- en: 'The exercises assume that you have the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Red Hat Enterprise Linux 8 installed with a base operating system **Minimal
    Install** software selection.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Access to the Red Hat Customer Portal with an active subscription.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The VM must be expendable; that is, actions that you perform on it might render
    it unusable, so it will have to be reinstalled.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tips for the exercise
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This is a list of general recommendations for any test, most of which are common
    sense, but it''s always interesting to keep them in mind:'
  prefs: []
  type: TYPE_NORMAL
- en: Read the questions in their entirety before starting the exam.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Specific words have specific meanings that give hints about the requirements
    or ways to accomplish the exercise. That's why, again, reading everything first
    might add or remove possibilities.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Make yourself comfortable: install your favorite editor, run `updatedb` so
    that you have a fresh database of packages and files ready for you, and define
    your keyboard layout. Install and learn the basics of how to use `tmux` so that
    you can open new tabs and name them without requiring extra windows.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Locate dependencies between requests. Some goals depend on others for completion,
    so find those dependencies to see how you can build up the solution without having
    to go back and redo some steps because of taking the wrong path.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use a timer. It's important to get an idea of what exercises took more time
    to complete so that you can find areas to improve upon.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Don't remember specific commands. Instead, learn how to use the documentation
    available in the system by using `man`, `/usr/share/docs` arguments such as `--help`
    for the commands, and so on.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Ensure that changes persist and are still active after a reboot. Some changes
    might be active while you run them, but those must be persisted: firewall rules,
    services to start at boot, and so on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Remember that you can use `dnf whatprovides "*/COMMAND"` to find packages regarding
    that file you might be missing.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Check [https://www.redhat.com/en/services/training/ex200-red-hat-certified-system-administrator-rhcsa-exam?=Objectives](https://www.redhat.com/en/services/training/ex200-red-hat-certified-system-administrator-rhcsa-exam?=Objectives)
    for the official EX200 exam objectives.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Practice exercise – 2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Important Note
  prefs: []
  type: TYPE_NORMAL
- en: By design, in the following exercise, commands, packages, and so on will not
    be highlighted. Remember what you've learned so far to detect the keywords to
    see what needs to be done.
  prefs: []
  type: TYPE_NORMAL
- en: Don't jump into the solution too early; try to think and remember what was covered.
  prefs: []
  type: TYPE_NORMAL
- en: Exercises
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Download the necessary file from this book's GitHub repository at [https://raw.githubusercontent.com/PacktPublishing/Red-Hat-Enterprise-Linux-8-Administration/main/chapter-19-exercise2/users.txt](https://raw.githubusercontent.com/PacktPublishing/Red-Hat-Enterprise-Linux-8-Administration/main/chapter-19-exercise2/users.txt).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Use the `users.txt` file to generate users in the system in an automated way
    using the values provided, in the following order: `username`, `placeholder`,
    `uid`, `gid`, `name`, `home`, `shell`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a group named users and add that group as the primary group to all users,
    leaving their own groups, named after each user, as secondary groups.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change the home folders for the users so that they are group-owned.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set up an HTTP server and enable a web page for each user with a small introduction
    for each that is different between users.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Allow all users in the `users` group to become root without a password.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create SSH keys for each user and add each key to root and the other users so
    that each user can SSH like the other users; that is, without a password.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Disable password access to the system with SSH.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set each user with a different password using `/dev/random` and store the password
    in the `users.txt` file in the second field of the file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the number of letters in the username is a multiple of 2, add that fact to
    each user description web page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a container that runs the `yq` python package as the entry point.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configure password aging for users that are not a multiple of 2 to so that they're
    expiring.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configure a daily compressed log rotation for a month of logs using date-named
    files.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save all the logs that have been generated in the day in `/root/errors.log`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Install all the available updates for the system libraries.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Repair the broken rpm binary using a previously downloaded package available
    in the `/root` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Make all the processes that are executed by the user doe to run with a low priority
    and the ones from john run with a higher priority (+/- 5).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Make the system run with the highest throughput and performance.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change the system network interface so that it uses an IP address that's higher
    than the one it was using. Add another IPv6 address to the same interface.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create and add `/opt/mysystem/bin/` to the system PATH for all users.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a firewall zone, assign it to an interface, and make it the default zone.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a repository hosted at `https://myserver.com/repo/` with a GPG key from
    `https://myserver.com/mygpg.key` to the system since our server might be down.
    Configure it so that it can be skipped if it's unavailable.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Answers to practice exercise 2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we'll copy each item from the list of goals, and explain them
    while using proper syntax highlighting.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Download the necessary file from this book's GitHub repository at https://raw.githubusercontent.com/PacktPublishing/Red-Hat-Enterprise-Linux-8-Administration/main/chapter-19-exercise2/users.txt
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '2\. Use the users.txt file to generate users in the system in an automated
    way using the values provided, in the following order: username, placeholder,
    uid, gid, name, home, shell'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, let''s examine the `users.txt` file with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: As described in the request, the fields in that file are `username`, `placeholder`,
    `uid`, `gid`, `name`, `home`, `shell`. The placeholder is not asked to create
    a user as it's usually the password so that we can work with the other data while
    ignoring that.
  prefs: []
  type: TYPE_NORMAL
- en: As we can also see, each field is separated by at least a `;` symbol, but some
    have extra spaces before or after it. Since we also have surnames, we can't just
    remove all spaces; we need to do this before and after the actual text we want.
  prefs: []
  type: TYPE_NORMAL
- en: We need to use cut with the `;` field separator, but first, we need to read
    the file line by line.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can achieve this with Bash''s built-in `read` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Using this as a base, we can start building up everything we're going to need
    to create the users. Let's start by working on the individual steps and then build
    up the full command line.
  prefs: []
  type: TYPE_NORMAL
- en: 'We have lots of lines, so for each one, we need to define the fields and remove
    the end/start spaces:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding examples, we're echoing each line and cutting the field specified
    with `-f` using the `;` field delimiter. This allows us to select exactly the
    field containing the data we're looking for. To make this easier, we can store
    each in a variable so that we can reuse that snippet of code and still have a
    clear understanding of what each script will be doing.
  prefs: []
  type: TYPE_NORMAL
- en: 'The preceding code will work, *but* it will fail with the spaces, so we need
    to extend them to just capture the actual text without the spaces. Let''s use
    `xargs` for this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The next step is to build the command line for adding a user:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that everything''s ready, let''s build the solution:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 3\. Create a group named users and add that group as the primary group to all
    users, leaving their own groups, named after each user, as secondary groups
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this case, we need to create the groups that we didn''t create in the previous
    step. So, we will loop over the users once the new group has been created, create
    new groups for each, and then modify the user to get the `users` group and add
    their own as secondary groups:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 4\. Change the home folders for the users so that are group owned
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 5\. Set up an HTTP server and enable a web page for each user, with a small
    introduction for each that is different between users
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we''ll need to enable `homedirs` by editing `/etc/httpd/conf.d/userdir.conf`
    and disabling `UserDir` so that it becomes `Userdir public_html`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 6\. Allow all the users in the users group to become root without a password
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This can be done in several ways, but since all the users are in the `users`
    group, we can add that group:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 7\. Create SSH keys for each user and add each key to root and the other users
    so that each user can SSH like the other users; that is, without a password
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, let''s create the keys for each user and add the keys to root:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s copy the authorized keys for each user:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Validate that users can `ssh` just like any other user:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: The preceding command should work for all the users because we copied `authorized_keys`,
    right? This isn't the case as some users have their shell disabled.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Disable password access to the system with SSH
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Edit `/etc/ssh/sshd_config` and replace any value of `PasswordAuthentication`
    with `no`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, restart `sshd`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 9\. Set each user with a different password using /dev/random and store the
    password in the users.txt file in the second field of the file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'From `/dev/random`, we can get random data, but it''s binary, so it''s probably
    not valid if we want to use it for logging in later. We can use a hash function
    over the data we''ve received and use that as the password:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: This will be the password, without the need for it to be encrypted.
  prefs: []
  type: TYPE_NORMAL
- en: With `usermod`, we can define a password from its encrypted seed, so we will
    be combining both.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, we're told to store the generated password in `users.text`, so
    we will need to edit the file.
  prefs: []
  type: TYPE_NORMAL
- en: 'But there''s a problem: editing a specific field in the `.txt` file might not
    be easy, but we can just rewrite it completely:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: In this way, we've rewritten the `users.txt` file to a new file by adding all
    the fields we had and overwritten `users.txt` with our new copy.
  prefs: []
  type: TYPE_NORMAL
- en: The last command in the loop reads the password from the variable and feeds
    it to the `passwd` file, which will encrypt and store it while reading it from
    `stdin`.
  prefs: []
  type: TYPE_NORMAL
- en: 10\. If the number of letters in the username is a multiple of 2, add that fact
    to each users description web page
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: In this example, we repeat the same field calculation, but we add the `wc` command
    to get the number of characters and remove one to adjust it to the number of letters.
  prefs: []
  type: TYPE_NORMAL
- en: In the comparison, we evaluate the remainder when dividing by 2, so that when
    there's no remainder, this means that our number of letters is a multiple of 2.
  prefs: []
  type: TYPE_NORMAL
- en: 11\. Create a container that runs the yq Python package
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When we read "Python package," we should think about PIP. PIP is not recommended
    to be used on systems directly as it might alter the system-provided Python libraries,
    and it's better to use a virtual environment for it. Alternatively, you can use
    a container that will keep it isolated.
  prefs: []
  type: TYPE_NORMAL
- en: As described in the [*Chapter 17*](B16799_17_Final_SK_ePub.xhtml#_idTextAnchor207),
    *Managing Containers with Podman, Buildah, and Skopeo*, the easiest way to do
    this is by creating a file that defines the container creation steps.
  prefs: []
  type: TYPE_NORMAL
- en: For containers, it will be also required to install the `podman` package and
    the `container-tools` modules if you don't have them in your system.
  prefs: []
  type: TYPE_NORMAL
- en: As this file is a Python package, we require a container that already has Python
    in it; for example, [https://catalog.redhat.com/software/containers/rhel8/python-38/5dde9cb15a13461646f7e6a2](https://catalog.redhat.com/software/containers/rhel8/python-38/5dde9cb15a13461646f7e6a2).
  prefs: []
  type: TYPE_NORMAL
- en: 'So, let''s create a `Containerfile` with the following contents (available
    at [https://github.com/PacktPublishing/Red-Hat-Enterprise-Linux-8-Administration/blob/main/chapter-19-exercise2/ContainerFile](https://github.com/PacktPublishing/Red-Hat-Enterprise-Linux-8-Administration/blob/main/chapter-19-exercise2/ContainerFile)):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: When combined with `podman build -t yq -f ContainerFile`, it will pull the `ubi8`
    image with Python so that we can just run the `pip3 install` command to install
    `yq`, which will be then assigned as our `entrypoint`.
  prefs: []
  type: TYPE_NORMAL
- en: For example, if we define an invalid `entrypoint` (because we might not know
    where the program is installed), we can use `podman run -it --entrypoint /bin/bash
    <podmanid>`. We can get the podman ID by running `podman images` and checking
    the generation date for each of the available pods in our system.
  prefs: []
  type: TYPE_NORMAL
- en: The created container can be tested with `podman run –it <podmanid>`, where
    it will output the information about what the `yq` command does.
  prefs: []
  type: TYPE_NORMAL
- en: Note that `yq`, as expressed in their repository at [https://github.com/kislyuk/yq](https://github.com/kislyuk/yq),
    requires that we have installed the `jq` command, but we left it out on purpose
    to demonstrate how to create the container.
  prefs: []
  type: TYPE_NORMAL
- en: 12\. Configure password aging for users that are not a multiple of 2 so that
    they're expiring
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Here, we've reused the loop from question 10, but inverted the conditional.
    Since there's no requirements regarding the kind of password aging we can use,
    we just need to define the maximum number of days before a password change is
    required to be `30 days`.
  prefs: []
  type: TYPE_NORMAL
- en: 13\. Configure the daily compressed log rotation for a month of logs using date-named
    files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, we need to make sure that `logrotate` is installed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Once installed, edit the `/etc/logrotate.conf` file so that it contains the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: We need to ensure that no other period is defined (monthly, weekly, and so on).
  prefs: []
  type: TYPE_NORMAL
- en: 14\. Save all the logs generated in the day in /root/errors.log
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This has a trick to it: some programs will log to the journal, while some of
    them will log to `*.log` files.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The date for today can be obtained with `+%Y-%m-%d`. This format, which uses
    the year-month-day format, is commonly used in program logs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: By doing this, we combine both outputs. We could, of course, try to sort the
    entries by date so that they correlate, but bear in mind that the first `grep`
    does a recursive search, so the filename is being prepended, making it harder
    to sort.
  prefs: []
  type: TYPE_NORMAL
- en: 15\. Install all the available updates for system libraries
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Usually, the system libraries contain the `lib` substring in them, so the update
    should be a matter of running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: As it will ask for confirmation, review the listed packages to make sure that
    no errors occurred.
  prefs: []
  type: TYPE_NORMAL
- en: 16\. Repair the broken rpm binary using a previously downloaded package available
    in the /root folder
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is a tricky but useful knowledge check.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let''s make sure that the `rpm` package is available:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Verify that the file exists with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Check the file to make sure we have a way to go back in case we breack it beyond
    repair:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s look at the destructive action that will help us validate we are
    solving the issue:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: From here, it's like *look ma, no hands*... no RPM is available to install the
    `rpm*.rpm` package, but we still need to install it to fix the issue.
  prefs: []
  type: TYPE_NORMAL
- en: '`rpm` packages are compressed `cpio` archives, so what we can do is use the
    following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: This will extract the compressed `rpm` contents (without the need to run a script).
  prefs: []
  type: TYPE_NORMAL
- en: 'Move the uncompressed `rpm` file back into `/usr/bin`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Verify the installation and operation of `rpm`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: It will complain. saying that at least the date has changed. However, it may
    have also updated the sizes and md5sum if the downloaded file was newer.
  prefs: []
  type: TYPE_NORMAL
- en: 'Move the system to a sane state by reinstalling the `rpm` package:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: This will make the system complain because the package was already installed
    (it will state that it will overwrite `rpm`, `rpm2archive`, `rpm2cpio`, `rpmdb`,
    `rpmkeys`, and more).
  prefs: []
  type: TYPE_NORMAL
- en: 'If the `rpm` version differs, we can just upgrade it with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we can verify this with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Nothing should be reported as changed regarding what the database contains.
    If we cannot upgrade, we can run the installation with the `--force` argument
    to tell `rpm` that it's OK to continue and overwrite the files.
  prefs: []
  type: TYPE_NORMAL
- en: 'Alternatively, once the `rpm` binary has been restored with `cpio`, we can
    use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Another approach for this could have been to `scp` the `rpm` binary from a similar
    system or to use rescue media.
  prefs: []
  type: TYPE_NORMAL
- en: 17\. Make all the processes that are executed by the user doe run with a low
    priority and the ones from john run with a higher priority (+/- 5)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have no way of making this a default, but we can combine a cron job to do
    so.
  prefs: []
  type: TYPE_NORMAL
- en: 'Execute crontab `-e` as root to edit the root''s crontab and set up a job that
    runs every minute:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: This will use `pgrep` for all the PIDs for john and doe and feed them via `xargs`
    to the `renice` process.
  prefs: []
  type: TYPE_NORMAL
- en: 'Alternatively, we could use something like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: This can be used as an alternative to the `xargs` command.
  prefs: []
  type: TYPE_NORMAL
- en: 18\. Make the system run with the highest throughput and performance
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`tuned` is a system daemon we can install to automatically apply some well-known
    parameters to our system, which will become the base for our specific optimizations
    later:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 19\. Change the system network interface so that it uses an IP address that's
    higher than the one it was using. Add another IPv6 address to the same interface
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Using `nmcli`, check the current system IP''s address:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'The output should be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 19.1 – Output of nmcli con show'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16799_19_001.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 19.1 – Output of nmcli con show
  prefs: []
  type: TYPE_NORMAL
- en: With this, we can find what system interface is being used and connected. Let's
    say it's `ens3`, which is connected on the connection named `Wired Connection`.
  prefs: []
  type: TYPE_NORMAL
- en: Let's use `nmcli con show "Wired Connection"|grep address` to find the current
    addresses.
  prefs: []
  type: TYPE_NORMAL
- en: 'If our address is, for example, `10.0.0.6`, we can use the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Verify this with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 20\. Create and add /opt/mysystem/bin/ to the system PATH for all users
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Edit the `/etc/profile.d/mysystempath.sh` file and place the following contents:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'To validate this, add the `+x` attribute to the file and create the folder
    with the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'Relogging with the user should show the new path when executing the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 21\. Create a firewall zone, assign it to an interface, and make it the default
    zone
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is a tricky question. In this book, we've explained how to query zones
    and how to change the default one, and even shown screenshots of `cockpit` for
    managing the firewall, so now that you're an experienced user, this shouldn't
    be hard.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first thing you need to do when you don''t know how to do something is
    check the manual page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: This doesn't show a lot of interesting information. However , toward the end
    of the man pages, there's a section called `firewalld.zones(5)`. This means that
    we can check section 5 of the manual for `firewalld.zones`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We don''t usually specify the section as there might not be a lot of duplicates,
    so we can just run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'This instructs us to check the default ones in `/usr/lib/firewalld/zones` and
    `/etc/firewalld/zones`, so let''s do that:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s edit the new copied file, called `/etc/firewalld/zones/dazone.xml`,
    and change its name from `Public` to `dazone`. Then, we need to reload the firewall:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s validate that the new zone is there with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s make it the default zone:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, add the default interface (`ens3`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'It will fail. This is expected since `ens3` has already been assigned to a
    zone (`public`). So, let''s use the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, even without prior knowledge about creating new zones, we've
    been able to use our system knowledge about finding information to accomplish
    this goal.
  prefs: []
  type: TYPE_NORMAL
- en: 22\. Add a repository hosted at https://myserver.com/repo/ with GPG key from
    https://myserver.com/mygpg.key to the system since our server might be down. Configure
    it so that it can be skipped if it's unavailable
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If we don''t remember the syntax for a repository, we can use one of the examples
    available on the system. To do this, go to `/etc/yum.repos.d/`, list the available
    files, and pick one to create a `myserver.repo` file with the following contents:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'How do we skip it if it''s unavailable? Let''s check the man page for `yum`.
    Again, not much information is provided here, but in the `man dnf.conf` is specified.
    This lists a Boolean that might help us, so let''s add this to our `repofile`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: With that, we've completed our objectives.
  prefs: []
  type: TYPE_NORMAL
