- en: Building Graphical User Interfaces
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you will study **Graphical User Interface** (**GUI**) development.
    There are various Python libraries that you can use to  make GUI. We are going
    to learn about the PyQt5 Python library for GUI creation.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, you will learn the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to GUI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using a library to create a GUI-based application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing and using the Apache Log Viewer app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction to GUI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we are going to learn about GUI. Python has various frameworks
    for GUI. In this section, we are going to look at PyQt5\. PyQt5 has different
    graphics components, also known as object widgets, which can be displayed on screen
    and also interact with users. The components are listed here:'
  prefs: []
  type: TYPE_NORMAL
- en: '**PyQt5 window**: The PyQt5 window will create a simple app window.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**PyQt5 button**: The PyQt5 button is a button that causes an action whenever
    it is clicked.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**PyQt5 textbox**: The PyQt5 textbox widget allows users to enter the text.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**PyQt5 label**: The PyQt5 label widget displays a single-line text or an image.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**PyQt5 combo box**: The PyQt5 combo box widget is a combined button and a
    popup list.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**PyQt5 check box**: The PyQt5 check box widget is an option button that can
    be checked and unchecked.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**PyQt5 radio button**: The PyQt5 radio button widget is an option button that
    can be checked or unchecked. In a group of radio buttons, only one of the buttons
    can be checked at a time.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**PyQt5 message box**: The PyQt5 message box widget display a message.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**PyQt5 menu**: The PyQt5 menu widget gives different choices that are displayed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**PyQt5 table**: The PyQt5 table widget provides standard table display functionality
    for applications, which can be constructed with a number of rows and columns.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**PyQt5 signals/slots**: Signals will let you react to the event that has occurred
    and slot is simply a function that gets called whenever a signal occurs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**PyQt5 layouts**: The PyQt5 layouts consist of multiple widgets.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'There are several PyQt5 classes available, which are divided into different
    modules. These modules are listed here:'
  prefs: []
  type: TYPE_NORMAL
- en: '`QtGui`: `QtGui` contains classes for event handling, graphics, fonts, texts,
    and basic imaging.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtWidgets`: `QtWidgets` contains classes to create desktop-style user interfaces.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtCore`: `QtCore` contains core non-GUI functionality such as time, directories,
    files, streams, URLs, data types, threads, and processes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtBluetooth`: `QtBluetooth` contains classes for connecting with devices and
    interacting with them.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtPositioning`: `QtPositioning` contains classes to determine the position.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtMultimedia`: `QtMultimedia` contains classes for APIs and multimedia content.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtNetwork`: `QtNetwork` contains classes for network programming.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtWebKit`: `QtWebkit` contains classes for web browser implementation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtXml`: `QtXml` contains classes for XML files.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtSql`: `QtSql` contains classes for databases.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The GUI is driven by the events. Now, what is an event? An event is a signal
    that indicates that something has happened in your program, for example, menu
    selection, mouse movement, or button clicks. The events are handled by functions
    and triggered when a user performs some actions on the objects. The listener will
    listen to the event and then it will invoke an event handler whenever an event
    occurs.
  prefs: []
  type: TYPE_NORMAL
- en: Using a library to create a GUI-based application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, we are actually going to use the PyQt5 library to create a simple GUI application.
    In this section, we are going to create a simple window. In that window, we will
    have one button and a label. After clicking on that button, some message will
    get printed in the label.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we will see how to create the button widget. The following line will
    create a button widget:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we will see how to create a label. The following line will create a label:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we will see how to create the button and label and how to perform an operation
    after clicking on that button. For that, create a `print_message.py` script and
    write following code in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the script and you will get the output as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![](assets/27a93e6c-9702-455c-870f-af942561b795.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding example, we imported the necessary PyQt5 modules. Then, we
    created the application. The `QPushButton` creates the widget and the first argument
    we entered is a text that will be printed on the button. Next, we have a `QLabel`
    widget on which we are printing a message, which will get printed when we will
    click on the button. Next, we created an `on_click()` function that will perform
    the printing operation after clicking on the button. The `on_click()` is the slot
    we created.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we are going to see an example of the box layout. For that, create a `box_layout.py`
    script and write following code in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the script and you will get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![](assets/f3f5d264-0cf2-42d2-b1fe-16f4e21de4d2.png)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding example, we created a box layout. In that we have placed two
    buttons. This script is just for explaining the box layout. `l = QVBoxLayout()`
    will create a box layout.
  prefs: []
  type: TYPE_NORMAL
- en: Installing and using the Apache Log Viewer app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we already have an Apache Log Viewer app, download the Apache Log Viewer
    app from the following link: [https://www.apacheviewer.com/download/](https://www.apacheviewer.com/download/).
  prefs: []
  type: TYPE_NORMAL
- en: After downloading it, install the app on your computer. This app is useful for
    analyzing log files based on their connection status, IP addresses, and much more.
    Therefore, to analyze the log file we can simply browse access log file or error
    log file. After getting the file, we apply different operations on a log file
    such as applying a filter, for instance to sort the only files from `access.log` that have
    unsuccessful connections, or filtering by specific IP addresses.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows Apache log viewer with the `access.log` file
    without applying a filter:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/edb4c1c2-51be-400b-96a5-ab38178f7f74.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The following screenshot shows the Apache Log Viewer with the `access.log file`
    after applying a filter:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/c88aab5c-c72d-4f49-ba2d-810f6982760b.png)'
  prefs: []
  type: TYPE_IMG
- en: In the first case, we took the access log file and opened it in the Apache Logs
    Viewer. We can easily see that the access file that we opened in the Apache Logs
    Viewer contains all kinds of entries, such as authorized and unauthorized, with
    their status, IP address, request, and so on. However, in the second case we applied
    a filter on the access log file so that we can only see the log entries of unauthorized
    requests, as shown in the screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we learned about GUIs. We learned about the components used
    in GUI. We learned about the PyQt5 module in Python. Using the PyQt5 module, we
    created a simple application that will print a message in a label after clicking
    on a button.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will learn about working with Apache log files.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What is GUI ?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are the constructors and destructors in Python?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the use of `self`?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Compare Tkinter, PyQt, and wxPython.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a Python program to copy the contents of one file into another
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a Python program that reads a text file and counts the number of times
    a certain letter appears in the text file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Tkinter library for GUI documentation: [https://docs.python.org/3/library/tk.html](https://docs.python.org/3/library/tk.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PyQt library for GUI documentation: [https://wiki.python.org/moin/PyQt](https://wiki.python.org/moin/PyQt)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
