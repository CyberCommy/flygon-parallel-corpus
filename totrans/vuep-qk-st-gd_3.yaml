- en: VuePress Development – Preliminary Steps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [Chapter 2](9d07fb55-5bf4-4719-a86e-56f62ba9796f.xhtml), *Getting Started
    with VuePress*, we covered VuePress installation and setup. At this point, you
    have now learned how to install VuePress, what its system requirements are, and
    how to set things up so as to get VuePress ready for actual work.
  prefs: []
  type: TYPE_NORMAL
- en: However, installation of VuePress is just the first step. In order to build
    a fully-functional project using it, and to get the most out of it, you need to
    learn how to do more with VuePress.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter will help you accomplish just that.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, you will learn about the following:'
  prefs: []
  type: TYPE_NORMAL
- en: VuePress development basics
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Basic config values for VuePress
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Browser config values for VuePress
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Build pipeline config values for VuePress
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Asset handling in VuePress
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with images, public files, and URLs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: VuePress development – getting started
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you will learn concepts such as asset handling and working
    with files and URLs in VuePress. Now, since VuePress is a static site generator,
    things tend to be slightly different from what you might find in, say, WordPress,
    and other database-driven content management systems.
  prefs: []
  type: TYPE_NORMAL
- en: With that said, considering the fact that in [Chapter 4](553abde8-768a-4320-b9bd-01edcbe2c4d9.xhtml),
    *Creating a Site in VuePress*, we will actually be setting up a live demo site
    using VuePress, it is vital that you have a good understanding of how files and
    URLs are treated in VuePress. The [Chapter 4](553abde8-768a-4320-b9bd-01edcbe2c4d9.xhtml), *Creating
    a Site in VuePress*, will help you plan the perfect structure for your website
    or blog.
  prefs: []
  type: TYPE_NORMAL
- en: VuePress configuration values
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before going any further, we need to spend some time to ensure we understand
    the nature of configuration that VuePress generally supports.
  prefs: []
  type: TYPE_NORMAL
- en: Basic config values for VuePress
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: First, we need to make ourselves familiar with the basic config values that
    are used in VuePress. This list is not complete, and you should refer to VuePress
    documentation for a complete list, which may span multiple pages.
  prefs: []
  type: TYPE_NORMAL
- en: For the sake of clarity and to avoid confusion, we will be discussing theme-related
    configuration in the chapter where custom themes for VuePress will be discussed.
    Similarly, we will return to discuss Markdown-related config values in the chapter
    pertaining to Markdown in VuePress.
  prefs: []
  type: TYPE_NORMAL
- en: Title
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This value shows the title for your VuePress site. By default, it is prefixed
    to all the pages on your site and shown in the navigation bar as well, but you
    can change this feature:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Description
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This shows the site meta description. Thus, in the page HTML, it is rendered
    within a `<meta>` tag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Head
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This includes the additional data that is rendered inside the `<head>` tag when
    the page is rendered in HTML. Generally, it takes a consolidated form of content
    enclosed within the `[` and `]` square brackets.
  prefs: []
  type: TYPE_NORMAL
- en: 'The basic syntax is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Naturally, the head config is of the array type and its general default form
    is `[ ]` (empty array).
  prefs: []
  type: TYPE_NORMAL
- en: ga
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This config entity helps you to integrate your VuePress site with Google Analytics.
    If you are active in the field of web development, you might already be aware
    of vast resources that Google Analytics can provide for your site. So, you just
    need to pass your Google Analytics ID to this config value, and you're done.
  prefs: []
  type: TYPE_NORMAL
- en: The `ga` is of the array type, and the default value is undefined, as you need
    to pass your Google Analytics ID to it.
  prefs: []
  type: TYPE_NORMAL
- en: Locales
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This particular config variable provides support for internationalization and
    localization; that is, compatibility with translation of your site into other
    languages. Since we already have a dedicated chapter related to internationalization
    and localization handling in VuePress, we will be turning to this config value
    at length soon enough.
  prefs: []
  type: TYPE_NORMAL
- en: 'The default value is undefined, and the type accepted is a string object in
    the format shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: shouldPrefetch
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sometimes, some files tend to have a preloading resource hint attached to them.
    The `shouldPrefetch` function handles such limits and hints.
  prefs: []
  type: TYPE_NORMAL
- en: The `shouldPrefetch` is of the function type, and the default value it takes
    is of the format `( ) => true`.
  prefs: []
  type: TYPE_NORMAL
- en: Confused as to what limits and hints are we talking about? Well, Vue.js has
    something called `<link rel="preload">` resource hints. By default, nearly all
    assets that are to be loaded asynchronously are prefetched so as to speed up the
    page load times and performance. However, what if you are on a weaker server with
    limited resources, say, limited bandwidth? Prefetching everything will surely
    cost you a lot of bandwidth.
  prefs: []
  type: TYPE_NORMAL
- en: In such cases, you can use the `shouldPrefetch` function to control which files
    have the prefetch hints attached to them, and which ones do not. With this selective
    option, you can avoid consuming a lot of bandwidth on your server.
  prefs: []
  type: TYPE_NORMAL
- en: serviceWorker
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This one is rather interesting. Before going any further, you need to ensure
    certain conditions are met in order to use the `serviceWorker` config entity:'
  prefs: []
  type: TYPE_NORMAL
- en: The `serviceWorker` can only be registered via HTTPS, so you need to ensure
    your website is using an SSL certificate
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `serviceWorker` works only in production mode; that is, on live sites
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now, serviceWorker is a boolean type that is turned to false by default. But
    when you set it to true, VuePress will then automatically generate and register
    a service worker script. This can be used to help cache the content for offline
    use.
  prefs: []
  type: TYPE_NORMAL
- en: What is a service worker?In **JavaScript** (**JS**), a service worker is a special
    type of script that is generated on the fly and run by the web browser in the
    background. Its running is conducted differently from the actual web page loading.
    The goal here is to perform some background functions that are very important,
    but do not need an actual web page or user configuration.
  prefs: []
  type: TYPE_NORMAL
- en: Examples of cases where a service worker script is used nowadays are for push
    notifications in the browser, offline caching in the browser, background sync
    of data for easier recovery in case of connection failure, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'When working with custom themes, as you shall see in a later chapter, the `serviceWorker`
    config value also emits the following events at times:'
  prefs: []
  type: TYPE_NORMAL
- en: '`sw-ready`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '``sw-cached``'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sw-updated`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sw-offline`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sw-error`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `serviceWorker` option here will only handle the JS `serviceWorker` script.
    This means it will not do anything of its own accord to generate a single page
    web app; it depends on you to make use of the `serviceWorker` script to meet the
    needs of your project as required.
  prefs: []
  type: TYPE_NORMAL
- en: Once again, make sure you set `serviceWorker` to true only when you have SSL
    activated, as `serviceWorker` scripts do not work on non-HTTPS URLs.
  prefs: []
  type: TYPE_NORMAL
- en: dest
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This config variable specifies the output directory for the final build process
    in VuePress. The default path here is `.vuepress/dist`, but you can change it
    by specifying any other path of the string type.
  prefs: []
  type: TYPE_NORMAL
- en: port
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is meant to specify the port value for connecting to your development server.
    Other than localhost, your web hosting provider should be able to tell you with
    greater accuracy which port you might wish to use here.
  prefs: []
  type: TYPE_NORMAL
- en: The default value is `8080` and you can only use values of the integer type,
    since port values are specified as integers only.
  prefs: []
  type: TYPE_NORMAL
- en: host
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This term specifies the host address that you can use to connect to the server.
    Once again, your web hosting provider or server manager should have the accurate
    details related to this field.
  prefs: []
  type: TYPE_NORMAL
- en: It accepts values of the type string, and the default is set to `'0.0.0.0'`
    only.
  prefs: []
  type: TYPE_NORMAL
- en: Browser compatibility-related config values
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: VuePress currently has just one major browser compatibility-related config value
    that you should be aware of.
  prefs: []
  type: TYPE_NORMAL
- en: evergreen
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This config value is of the `boolean` type, and is set to false by default.
  prefs: []
  type: TYPE_NORMAL
- en: However, you can set it to true if you want your VuePress site to target only
    evergreen web browsers. When set to true, it will disable support for ES5 transpilation
    and polyfills. This means your website will not work well with older versions
    of **Internet Explorer** (**IE**).
  prefs: []
  type: TYPE_NORMAL
- en: The advantage? The build time will be significantly reduced and things will
    work faster. Plus, the final build size of your site will be much smaller.
  prefs: []
  type: TYPE_NORMAL
- en: What is an evergreen web browser?An evergreen web browser is one that is automatically
    updated to future versions as and when they are released. Thus, the user does
    not need to download a new version and install it from scratch. For example, if
    you have IE 8 running and you wish to install IE 9, you need to download the installable
    file and then run it. On the other hand, modern versions of browsers, such as
    Chrome or Firefox, can update themselves as and when new updates are released,
    without you having to run an installer all over again.
  prefs: []
  type: TYPE_NORMAL
- en: This rolling model of web browser updates is referred to as an "evergreen web
    browser". Most of the newer web browsers are evergreen, whereas the older versions
    are not.
  prefs: []
  type: TYPE_NORMAL
- en: Build pipeline-related config values
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, let us turn our attention to build pipeline-related config values. The
    build pipeline in static content management systems, such as VuePress and Jekyll,
    refers to the production line; that is, the flow of code from development to production.
  prefs: []
  type: TYPE_NORMAL
- en: At this point, your knowledge of JS and CSS will come in handy. Most of these
    build pipline-related config values revolve around webpack. Since studying JS
    and CSS loaders in depth is beyond the scope of this quick start guide, we will
    just be referencing the relevant project's GitHub page so that you can learn more
    as and when required.
  prefs: []
  type: TYPE_NORMAL
- en: postcss
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `postcss` can be used to specify custom options for the PostCSS loader
    for webpack. Details about the loader are available here: [https://github.com/postcss/postcss-loader](https://github.com/postcss/postcss-loader).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you specify the `postcss` value, you will overwrite any other autoprefix
    value therein. It accepts values of the object type only, and the default syntax
    is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: scss
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `scss` provides options for the SCSS loader, that in turn is used to convert
    SASS to CSS. You can learn more about this loader at [https://github.com/webpack-contrib/sass-loader](https://github.com/webpack-contrib/sass-loader).
  prefs: []
  type: TYPE_NORMAL
- en: This config entity accepts values of the object type and the default format
    is `{ }`.
  prefs: []
  type: TYPE_NORMAL
- en: stylus
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The stylus config entity provides options to tweak the Stylus loader for `webpack`.
    By default, it accepts values of the object type and the syntax is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: You can learn more about stylus loader at [https://github.com/shama/stylus-loader](https://github.com/shama/stylus-loader).
  prefs: []
  type: TYPE_NORMAL
- en: less
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This term specifies options for the LESS loader that can be used to compile
    LESS to CSS. A detailed guide is available at [https://github.com/webpack-contrib/less-loader](https://github.com/webpack-contrib/less-loader).
  prefs: []
  type: TYPE_NORMAL
- en: It accepts values of the object type and the default format is `{ }`.
  prefs: []
  type: TYPE_NORMAL
- en: sass
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This provides options for the SASS loader that can compile SASS to CSS and load
    `*.sass` files. Additional details about this loader can be found at [https://github.com/webpack-contrib/sass-loader](https://github.com/webpack-contrib/sass-loader).
  prefs: []
  type: TYPE_NORMAL
- en: 'It accepts values of the object type and the default format is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: chainWebpack
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `chainWebpack` is a function with an undefined default value.
  prefs: []
  type: TYPE_NORMAL
- en: It can help you modify the internal `webpack` config by making use of Webpack
    Chain API by Mozilla. This particular API can generate and simplify the process
    for customization and configuration of webpack. You can learn more about it at
    GitHub at [https://github.com/mozilla-neutrino/webpack-chain](https://github.com/mozilla-neutrino/webpack-chain).
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is some sample code showing the syntax to use with `chainWebpack` in VuePress:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: configureWebpack
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As the name suggests, this particular config entity lets you modify the internal
    configuration of `webpack`. It is, therefore, meant mostly for folks already familiar
    with `webpack` and its usage.
  prefs: []
  type: TYPE_NORMAL
- en: It makes use of `webpack-merge`, details of which can be found at [https://github.com/survivejs/webpack-merge](https://github.com/survivejs/webpack-merge).
  prefs: []
  type: TYPE_NORMAL
- en: Generally, `webpack-merge` provides you with a merge function that simply concatenates
    arrays and merges objects. This results in the creation of new objects that you
    can work with.
  prefs: []
  type: TYPE_NORMAL
- en: 'In VuePress, `configureWebpack` has the default value of undefined. However,
    you should note that it can be either of the object or function type:'
  prefs: []
  type: TYPE_NORMAL
- en: When the value is an object type, the value is merged into the final configuration
    by making use of `webpack-merge`, as described previously.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When the value is a function type, it receives the same configuration details
    as the first argument (the second argument generally being an `isServer` flag).
    Thereafter, you can choose to modify the configuration that was passed as an argument
    directly, or return its details as an object that can be merged.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'When using `configureWebpack` as a function type, the syntax is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: So, there you have it! You have now learned the basic details about all of the
    required config entities in VuePress. Once again, we have omitted the config terms
    related to theme configuration, as well as Markdown, which we shall turn to in
    subsequent chapters.
  prefs: []
  type: TYPE_NORMAL
- en: However, now you are aware of what terms to expect and where—for example, when
    working with an image asset that is to be used as the site favicon, you should
    call or reference it using the head config, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Now it is time to learn some theory about URLs and asset handling in VuePress.
    Thereafter, you will be ready to develop your first VuePress site.
  prefs: []
  type: TYPE_NORMAL
- en: What is asset handling?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When we say *asset handling*, what is it that we mean?
  prefs: []
  type: TYPE_NORMAL
- en: 'In the field of development, especially for the web, assets are anything that
    your project makes use of or works with. This can include, but is generally not
    limited to, the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Images
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Video
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Other media files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Documents, such as PDFs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Naturally, to work with such data files and assets, the CMS needs to implement
    specialized measures and protocols. In other words, you cannot treat a JPG file
    like a code file—it is not fully readable by the content management system, but
    the system must be aware that it is a media asset of the image type and should
    be treated as such.
  prefs: []
  type: TYPE_NORMAL
- en: In VuePress, the methodology is fairly simple. First, we must understand how
    URLs are configured in VuePress. Thereafter, we can turn our attention towards
    publicly viewable files, such as images and graphics.
  prefs: []
  type: TYPE_NORMAL
- en: URLs in VuePress
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Generally, you would prefer to keep the live VuePress site at either of the
    two locations:'
  prefs: []
  type: TYPE_NORMAL
- en: At a root URL
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: At a non-root URL
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For non-root URLs, you need to specify the `base` option in your `config.js`—yes,
    the same `config.js` file that we discussed in the [Chapter 2](9d07fb55-5bf4-4719-a86e-56f62ba9796f.xhtml),
    *Getting Started with VuePress*. It lies in the `.vuepress` directory.
  prefs: []
  type: TYPE_NORMAL
- en: Let us assume we have a project at [mysite.example.com](http://mysite.example.com) and
    we wish to deploy VuePress in a directory named `vuep`. Thus, our VuePress instance
    will run at `mysite.example.com/vuep/`.
  prefs: []
  type: TYPE_NORMAL
- en: In this case, the `base` value should be set to `/vuep/`.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that `base` should begin and end with forward slash; that is, `/`.
  prefs: []
  type: TYPE_NORMAL
- en: Now, once you have specified the `base` option, it is automatically prepended
    to all asset URLs. This means any asset URL that you specify in the `.vuepress/config.js`
    file will have the `base` value prepended to it.
  prefs: []
  type: TYPE_NORMAL
- en: For now, the theoretical part is all you need to know. Live usage of this aspect
    will be conducted in the [Chapter 4](553abde8-768a-4320-b9bd-01edcbe2c4d9.xhtml),
    *Creating a Site in VuePress*, where we will set up a site using VuePress.
  prefs: []
  type: TYPE_NORMAL
- en: Handling public files in VuePress
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are various ways to access files in VuePress. By files, to reiterate,
    we are referring to media elements and other assets.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can do so by doing the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Referring to the files in your Markdown components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Referring to the files in your theme components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Addressing the files as public files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will be covering the first two steps in the subsequent chapters.
  prefs: []
  type: TYPE_NORMAL
- en: Let us say that you have an image file that needs to be publicly viewable. By
    publicly viewable, we mean it should be visible to all visitors of your site,
    and not just admins—for instance, the site favicon.
  prefs: []
  type: TYPE_NORMAL
- en: All you need to do is put the said image file in the `.vuepress/public` directory.
    Thereafter, the file will be to the root of the generated directory and be publicly
    accessible.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can then refer or specify to it as in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Here, `favfile.png` is the file that you placed in the `/public/` directory.
  prefs: []
  type: TYPE_NORMAL
- en: Simple, isn't it?
  prefs: []
  type: TYPE_NORMAL
- en: Well, what if you ever wish to relocate your VuePress site? Say, change the
    `/vuep` location? You will have to probably change all the references to URLs
    made in this fashion.
  prefs: []
  type: TYPE_NORMAL
- en: To prevent that from happening, VuePress provides a fairly simple solution.
  prefs: []
  type: TYPE_NORMAL
- en: You can make use of the `$withBase` helper (built natively in VuePress, no extensions
    required) that will generate the correct path of its own accord and you will not
    have to worry about specifying absolute paths that may or may not be changed later
    on.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example of how to use it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: This code will make sure the reference sticks to the specified file, irrespective
    of the base URL at which you are using VuePress. You can make use of it to address
    your public files, and even employ it within theme components and Markdown files.
  prefs: []
  type: TYPE_NORMAL
- en: What about relative URLs?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In VuePress, much like any other content management system on the modern web,
    it is highly preferable and advisable to reference all asset elements via relative
    URLs. For example, `./sample.jpg` can be used in any of the file templates. In
    this case, the target image will first be processed with URL-loader and file-loader,
    and then copied on to the required locations for the final static building.
  prefs: []
  type: TYPE_NORMAL
- en: When working with `webpack` modules (and config entities, as mentioned earlier
    in this chapter in the section on build pipeline config), you can use the `~`
    prefix. This is pretty much the standard for many JS frameworks, and if you have
    had any type of experience with any of these JS frameworks, you might already
    be aware of it. For instance, `~some-directory/sample.jpg` is a good way to reference
    files with `webpack` aliases.
  prefs: []
  type: TYPE_NORMAL
- en: Earlier in this chapter, we talked about the `configureWebpack` option for configuration.
    You can easily configure your `webpack` aliases using this option in your `.vuepress/config.js`
    file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is one such sample:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, you are simply making use of `configureWebpack` to
    make sure the said alias refers to the custom path that you specified for the
    desired asset or element to be used in your project. When used in conjunction
    with other config tools, it can help you fetch assets with ease.
  prefs: []
  type: TYPE_NORMAL
- en: That's all there is for asset handling in VuePress. At this point, you are ready
    to go ahead with actual site development.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you have learned about most of the basic and advanced config
    entities in VuePress. You are aware of the basic terminology, as well as what
    value might be called where, and what value might be returned by which function.
  prefs: []
  type: TYPE_NORMAL
- en: This, obviously, will assume that you are familiar with basic JS objects, functions,
    and calls.
  prefs: []
  type: TYPE_NORMAL
- en: Furthermore, you are also aware of asset handling basics in VuePress, how URLs
    are treated relatively, how media elements might be referenced, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: However, it might appear like information overload at this stage, simply because
    you have learned quite a good deal of theory, but so far have yet to compile it
    into production or development. But much like any other software or product that
    is built atop an existing language and offers a framework rich with configurable
    options, VuePress too needs to be treated as such.
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 4](553abde8-768a-4320-b9bd-01edcbe2c4d9.xhtml), *Creating a Site
    in VuePress*, we are going to build a live VuePress website. You can use any code
    editor or IDE of your choice, as well as any platform. Note that we will focus
    on deployment in a later chapter, so it is advisable to set up a local site for
    the next chapter. You have already learned how to install VuePress in the previous
    chapter.
  prefs: []
  type: TYPE_NORMAL
- en: So, when working through the [Chapter 4](https://cdp.packtpub.com/vuepress_quick_start_guide/wp-admin/post.php?post=26&action=edit#post_27), *Creating
    a Site in VuePress*, it will be a good idea to refer to this current chapter as
    and when required. This will help you understand which config options can be used
    where, and how to avoid some common pitfalls. Thus, as and when we encounter a
    given piece of configuration in the coming chapter when building a site in VuePress,
    we will be learning about it practically.
  prefs: []
  type: TYPE_NORMAL
- en: The bulk of the focus will be on working with media files such as images, because
    you cannot really build an actual live site without any images! Plus, we will
    also cover some real world concepts, such as integration with services like Google
    Analytics (notice that we have already learned the syntax for the config reference
    in this chapter; see `ga` under the *Basic Config* section earlier in this chapter).
    This will help you build an actual VuePress site that really works and is not
    just a fancy sample.
  prefs: []
  type: TYPE_NORMAL
- en: So, with that said, make sure you have mastered and gained a fairly good idea
    of the terminology covered in this chapter. Following that, let's march onward
    to building a VuePress site!
  prefs: []
  type: TYPE_NORMAL
