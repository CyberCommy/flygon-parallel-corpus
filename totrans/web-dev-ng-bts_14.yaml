- en: Advanced Angular Topics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In previous chapters, we learned how to use directives and form validators.
    We will extend our knowledge in this chapter with custom directives and custom
    validators. We're also going to look at how to build **single-page applications** (**SPAs**)
    with Angular.
  prefs: []
  type: TYPE_NORMAL
- en: 'Additionally, we''ll explore integrating authentication into our Angular applications
    with two popular authentication providers: Google Firebase Authentication and
    Auth0.'
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Custom directives
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Custom form validators
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building SPAs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: User authentication
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Authentication with Firebase Authentication
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Authentication with Auth0
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Wiring up the client side
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Custom directives
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will learn how to create custom directives.
  prefs: []
  type: TYPE_NORMAL
- en: '**Firstly, let''s understand what an Angular directive is. **'
  prefs: []
  type: TYPE_NORMAL
- en: Angular directives are a way to extend HTML functionality and the behavior of
    elements.
  prefs: []
  type: TYPE_NORMAL
- en: In previous chapters, we learned about and implemented many built-in directives,
    such as `*ngIf`, `*ngFor`, `*ngSwitch`, and `ngModel`.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will learn how to create our own custom directive to extend
    the functionality of HTML elements.
  prefs: []
  type: TYPE_NORMAL
- en: '**Use case:** We want to create a custom directive for form elements and `onfocus`. The
    background color should be set to light blue, with the border dark blue, and the
    `onblur` event should be highlighted in red. So, let''s begin:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s generate the directive using the `ng` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'On running the previous command, this is what will show up on our screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/3cd1e54a-d931-4fc0-8139-5ddec3a42f17.png)'
  prefs: []
  type: TYPE_IMG
- en: Notice that the directive files have been generated and that our `app.module.ts`
    file has also been updated, which means the directive is available across the
    app, to be used anywhere in any component.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the directive file, `on-focus-blur.directive.ts`, add the following lines
    of code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding code, the following important things should be noted:'
  prefs: []
  type: TYPE_NORMAL
- en: We are importing the required modules, that is, `Directive`, `HostListener`,
    and `HostBinding`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the `@directive` decorator, we are defining the name of the directive
    through the selector.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@HostBinding` is used to set properties on the element.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@HostListener` is used to listen to the events on the host element.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We are binding the style background color property in the preceding example.
    We can bind any style, class, or event property on the host element.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using `@HostListener`, we are listening to the events and, with `onFocus`, we
    are changing the background color. By using `onBlur`, we reset the color.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now, we are good to use this decorator anywhere in our application.
  prefs: []
  type: TYPE_NORMAL
- en: 'We are going to use this in our `app.component.html` file on a form control
    input element:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the app using the `ng serve` command and click on the `Input button`. We
    should see the output and behavior, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/cdf89346-2c82-4201-81be-8a2418dbdf4e.png)'
  prefs: []
  type: TYPE_IMG
- en: Great. Now that we know how to write our custom directives, we will go ahead
    and try creating our own custom directives.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will learn about writing custom form validations.
  prefs: []
  type: TYPE_NORMAL
- en: Custom form validations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In previous chapters, we learned about forms and implementing form validations.
    We used the built-in form validations or HTML5 attribute validations. But, in
    more complex scenarios, we will need to implement custom form validations. These
    validations differ from application to application. In this section, we will learn
    about custom form validations. To recap quickly, Angular provides us with various
    options through which we can implement form validations using the `Validators`
    module in Angular forms.
  prefs: []
  type: TYPE_NORMAL
- en: 'An example of using validators is shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, using the `Validators` module, we are applying validations
    of `required`, `maxLength`, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s learn how to create our own custom form validations. First, we
    will generate a component in which we will implement a form and a few elements
    so that we can apply our newly created directive:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Upon running the preceding command successfully, we should see the following
    output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/284630e6-e257-49e4-a9cb-aeff46dd93d7.png)'
  prefs: []
  type: TYPE_IMG
- en: Now that we have generated our component, let's generate a directive in which
    we will implement custom form validations.
  prefs: []
  type: TYPE_NORMAL
- en: We will implement a custom directive to check the ISBN field.
  prefs: []
  type: TYPE_NORMAL
- en: '**What is an ISBN?** An ISBN is a unique identifier for each book that is ever
    published.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are the conditions that are required for an ISBN number:'
  prefs: []
  type: TYPE_NORMAL
- en: The ISBN number should be exactly 16 characters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Only integers are allowed for ISBNs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now, using the `ng` command, we will generate our directive:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Upon successful execution of the above command we should see the output as shown
    in the screenshot below
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/f28be244-663e-4cb2-af58-3629cdb61b26.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the `valid-isbn.directive.ts` file, add the following lines of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Let's analyze the preceding code snippet in detail. First, using the `ng` CLI
    commands, we have generated a directive named `validISBN`. The Angular CLI will
    autogenerate the required file, with the basic syntax prepopulated. We are importing
    the required modules, namely `NG_VALIDATORS`, `ValidationErrors`, `Validator`,
    and `FormControl`. We are injecting the required modules as part of our providers.
    Next up, we have implemented a method named `validateISBN`, which is taking a
    parameter of the `FormControl` type. We are passing our form control field to
    this method, which will validate whether the value of the form control matches
    the conditions implemented in the method. Finally, we are invoking the `validateISBN` method
    in the method validate.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we are good to use this custom form validation in any number of places,
    that is, wherever we need to verify or validate the ISBN number. Let''s run the
    application using the `ng serve` command. We should see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/96859ad5-94e1-450c-b8a7-0df0ae0d4521.png)'
  prefs: []
  type: TYPE_IMG
- en: So far in this chapter, we have been applying some of them out of box, thinking
    and learning about how to build our custom directives and custom form validations.
    We have also learned how easy it is to integrate them into existing, or any new,
    applications effortlessly. All this can also form parts of single-page applications.
    Wait. What? Single-page applications? What's that? In the next section, we are
    going to learn all about single-page applications and build our own.
  prefs: []
  type: TYPE_NORMAL
- en: Building single-page applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will learn about building single-page applications.
  prefs: []
  type: TYPE_NORMAL
- en: '**What exactly is a single-page application? **'
  prefs: []
  type: TYPE_NORMAL
- en: A single-page application is a web application or website that interacts with
    the user by dynamically rewriting the current page, rather than loading entirely
    new pages from a server.
  prefs: []
  type: TYPE_NORMAL
- en: Think of it as an application with only one HTML file, and the contents of the
    page load dynamically based on the request made by the user. We only create templates
    that get rendered in our browser dynamically at runtime.
  prefs: []
  type: TYPE_NORMAL
- en: Let me give you a good example.
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 15](f81ae891-b2dc-4620-bb4a-ad099c96e8a0.xhtml), *Deploying Angular
    Applications*, using the `ng build` command, we generated the compiled code of
    an Angular app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Take a look at the compiled source code that was generated by Angular:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/5efe3043-eabe-4d01-8840-dfbc4b6585be.png)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding screenshot, you will see only one HTML file, named `index`.
  prefs: []
  type: TYPE_NORMAL
- en: Go ahead and open the file—you will see it's blank. That's because Angular applications
    are single-page apps, which means the content and data will be generated on the
    fly dynamically based on user actions.
  prefs: []
  type: TYPE_NORMAL
- en: It's safe to say that all Angular applications are single-page applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are some of the advantages of building a single-page application:'
  prefs: []
  type: TYPE_NORMAL
- en: The pages are rendered dynamically, and therefore our application source code
    is secure.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As the compiled source code renders in the user's browser, the pages load much
    faster than in the traditional request and response model.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Since pages load faster, this leads to a better user experience.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the `Router` component, we only load components and modules that are needed
    for certain features and do not load all of the modules and components in one
    go.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Throughout the course of this book, we have created many Angular apps, and each
    one of them has been a single-page application.
  prefs: []
  type: TYPE_NORMAL
- en: User authentication
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will learn how to implement user authentication in our Angular
    applications.
  prefs: []
  type: TYPE_NORMAL
- en: User authentication, in a broad context, consists of safely logging the user
    into our application, who should be able to view, edit, and create data on secure
    pages, and finally, log out of the application!
  prefs: []
  type: TYPE_NORMAL
- en: In a real-world application, there will be a lot of additional checks and security
    implementations to be done to sanitize user inputs, as well as checking whether
    they're a valid user, or verifying the authentication token for session timeouts,
    and other data checks to make sure no bad elements creep into the app.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are some important modules for user authentication:'
  prefs: []
  type: TYPE_NORMAL
- en: Signing up new users
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Login for existing users
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Password reset
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Session management for logged-in users
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One-time password or dual authentication
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Logging out an already logged in user
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the upcoming sections, we will learn about implementing the preceding functionality
    using the Firebase and Auth0 frameworks.
  prefs: []
  type: TYPE_NORMAL
- en: User authentication with Firebase
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will learn how to implement user authentication using Firebase.
  prefs: []
  type: TYPE_NORMAL
- en: '**What is Firebase?**'
  prefs: []
  type: TYPE_NORMAL
- en: Firebase is a managed service provided by Google. Firebase gives us functionality
    such as analytics, databases, messaging, and crash reporting, so that we can move
    quickly and focus on our users. You can learn more about the service at [https://firebase.com](https://firebase.com). Now,
    let's jump right in and implement Firebase in our Angular app.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first step is to create an account with Google to use the Firebase service.
    You can use your Google account to log in to Firebase. Once you have successfully
    created your Firebase account, you should see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/f161ba0f-5805-4ce3-8f99-63d49865c3b5.png)'
  prefs: []
  type: TYPE_IMG
- en: To create a new project, click on the Add Project link.
  prefs: []
  type: TYPE_NORMAL
- en: 'You will see the following dialog window, prompting you to enter the project''s
    name; in our case, we are making our project name AutoStop:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/171935b2-bfb4-4c12-b7cc-9d7a9534f42d.png)'
  prefs: []
  type: TYPE_IMG
- en: Note that Google will assign a unique project ID to your project.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, click on the Authentication link on the left-hand-side menu to set up
    user authentication features, which we can embed and set up in our Angular application:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/d4d69032-fb5a-4baf-b146-f22c19e9235f.png)'
  prefs: []
  type: TYPE_IMG
- en: We can do a lot of other cool stuff here, but we will focus on the Authentication
    module for now.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, click on the Sign-in method tab to set up options for how to allow users
    to sign in to our Angular application:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/0981bfab-bb5f-4c86-9f5a-2f4fedee1a15.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the preceding screenshot, you will notice the following important things:'
  prefs: []
  type: TYPE_NORMAL
- en: Google Firebase provides various options that we can enable, through which we
    would want users of our application to sign in.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We need to enable each provider option individually .
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We have enabled Email/Password and Google options in our application.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In order to enable Facebook, Twitter, and other apps, we will need to enter
    the developer API keys provided by the respective services.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now, scroll down a little bit on the page and you will see an option to set
    up called Authorised Domains.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will see two default values set up, that is, localhost and a unique subdomain,
    on the Firebase application, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/4a79ada7-380a-4fc1-934c-a37b910ec01e.png)'
  prefs: []
  type: TYPE_IMG
- en: We have made the required changes. Now, we need to set up Google Firebase's
    app settings. It's time to implement the user authentication in our Angular application.
  prefs: []
  type: TYPE_NORMAL
- en: '**Prerequisite:** We expect users to have an Angular application up and running.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the Angular CLI command prompt; we need to install a few modules. We will
    need to install Angular Fire2 and Firebase first:'
  prefs: []
  type: TYPE_NORMAL
- en: Please note that Angular Fire2 is now Angular Fire.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will need to run the following command to install Angular Fire in our application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Upon successful execution of the preceding command, we should see the output
    shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/8d6bb008-a169-42f7-a493-6da0b51b88d5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'All set. Now, we need to create a service that will handle our authentication
    functionality:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Using the `ng` command, we are generating a new service, named `appAuth`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/7e87e822-d886-4deb-9fff-9119466bb08e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, it''s time to modify the `appAuth.service.ts` file and add the following
    code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding code, we are making changes to the `app-auth.service.ts` file.
    The following important points should be noted:'
  prefs: []
  type: TYPE_NORMAL
- en: We are importing the required classes, namely `AngularFireAuth`, `Auth`, and
    `Router`, into the service.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using `@Injectable`, we are specifying that the service is injected at the root
    level in the Angular tree structure.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We are defining a few private variables that we will use across our application.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the constructor method, we are injecting the `AngularFireAuth` and `Router`
    classes.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We are defining three methods: `Login`, `Logout`, and `isLoggedInUser`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In the `login` method, we are using the `this.afAuth` instance, calling the
    `signInWithPopup` method, and passing the `auth.GoogleAuthProvider` argument, which
    we get from the Firebase app that we installed locally:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: When this method is invoked, a new window will open up, in which we can see
    the Google sign-in option, using which we can log in to the app.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We are setting the `this.loggedInUser` variable to `true`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We are setting the logged-in user's token to the `this.userToken` variable.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We are also subscribing to get the `authState` response.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, using the router instance and using the `navigate` method, we are redirecting
    the user to the profile page.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Inside the `isLoggedInUser` method, we are verifying whether the `userToken`
    is set or not. `userToken` will be set if the user has logged in correctly; otherwise,
    the method will return `false`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the `logout` method, again using the instance of `afauth`, we are calling
    the `signout` method, which will log the user out.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, we are setting the `userToken` to `empty`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Awesome. We have done all the heavy lifting in our `app-auth.service.ts` file.
    Now, it''s time to call these methods in our components: `login`, `profile`, and
    `log out`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `login.component.html` file, we will add the following login form:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, we are just adding an Angular reactive login form using
    `FormGroup` and `FormControllers`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The output of the login form is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/f839e4c3-7077-4f1b-9572-32342ecbd4f4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'And in the `profile.component.ts` file, we are just making a call to the `login`
    method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, in the `profile.component.ts` file, we add a check to see whether the
    user is logged in or not:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: When the user navigates to the profile page, if they are logged in, they will
    see the details; otherwise, the user will be redirected to the login page.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, on to the final part; we will have a logout link in our `app.component.html`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'We are adding links with `*ngIf` conditions to show the corresponding links
    when the user is logged in or not:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: When the user clicks on the logout link, we are calling the logout method of
    `appAuthService` and, on successful logout, we are redirecting the user back to
    the login page.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s run the app using the `ng serve` command. We should see the following
    output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/f7d425f0-5387-430c-a217-066b2e675169.png)'
  prefs: []
  type: TYPE_IMG
- en: User authentication with Auth0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we will learn how to implement user authentication using Auth0.
    Before we go ahead and implement Auth0 in our Angular application, we will need
    to implement some prerequisites. Let''s get right to it:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we will need to create an account with Auth0 at Auth0.com. Upon successfully
    logging in to the account, we should see the following dashboard screen:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/92b08610-8389-4261-9123-c434ccc805c5.png)'
  prefs: []
  type: TYPE_IMG
- en: We will have to register our application so that we can create the required
    settings to implement `Auth0` in our app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the Applications link on the left-hand-side menu:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/5b8583b7-7cb0-4b2a-999b-ce56a4481b66.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, click on the Create Application button to create an application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/5748b7e1-b1a5-429d-99a9-bace80b4880a.png)'
  prefs: []
  type: TYPE_IMG
- en: We will need to enter the name of the application and select the type of application
    we are building. In our case, it's a Single Page Web App, so go ahead and select
    the option and click on the CREATE button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The next thing we need to do is update the important settings of our application.
    So, click on the application name and navigate to the Settings tab:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/2c8b132e-a199-481c-880e-ce8f011e8485.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The following are some important things to keep in mind:'
  prefs: []
  type: TYPE_NORMAL
- en: We need to update the Allowed Callback URLs, Allowed Web Origins, and Allowed
    Origins (CORS).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If we do update the details for Allowed Web Origins and Allowed Origins, we
    will get a cross-origin request (CORS) error.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We have adjusted the required settings in Auth0, so we are good to implement
    Auth0 in our application now.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to implement Auth0 in our application, we will need to install a few
    modules, namely `auth0-js`, `auth0-lock`, and `angular2-jwt`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/346d273a-4246-49df-adaf-3d84e1098e9e.png)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding screenshot, using the `npm install` command, we installed the
    required `Auth0` modules. Now, it's time to generate the services and components
    for our application.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we will need to generate our service; let''s call it `authService`.
    We need to run the following command to generate our service:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Upon successful execution of the preceding command, we should see the following
    output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/e5103f9e-b704-4367-974a-954c468f1332.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can verify and confirm that our service has been generated, along with the
    spec file (the file used to write our test specifications). Now that we have created
    our service, it''s time to generate the components. We will run the following
    commands using the `ng` CLI in order to generate the required components:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Upon successful execution of the preceding commands, we should see the following
    output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/feacc766-c992-4b57-a824-7bf0f92b9e2e.png)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding screenshot, we can verify and confirm that our required components,
    namely `login` and `profile`, have been generated successfully. Now, we are good
    to go ahead with implementing the functionality for our components.
  prefs: []
  type: TYPE_NORMAL
- en: 'To make our application beautiful, let''s install the `bootstrap` CSS framework
    as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'We will also need to install the `jquery` module:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Upon successful execution of the preceding command, we should see the following
    output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/76143367-3d5f-427f-93f8-64f80ae8ab07.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Super cool. Now, it''s time to add a few links in the `Nav` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding code, the following important points should be noted:'
  prefs: []
  type: TYPE_NORMAL
- en: We are using the `nav` component of Bootstrap.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We are adding a few links and attaching a click event, such as login and logout
    depending on the state of the user. If the user is logged in we will display logout
    link, else we will display register link
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will implement these methods in our nav.component.ts file.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We are using `*ngIf` to check whether the user is logged in and toggle the login
    and logout links accordingly
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The output of the preceding code is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/d902fda2-9707-4a73-9c1c-42c965b1209d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We will now need to work on the `auth` service that we have generated. In the
    `services/auth.service.ts` file, we need to import the required modules first
    and then add our methods, `login` and `logout`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Once we have imported the `Auth0Lock` and `TokenNotExpired` classes, we will
    create instances so that we can use them.
  prefs: []
  type: TYPE_NORMAL
- en: 'Take a look at the basic `Auth0Lock` object instance creation code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: In order to create a new object of the `Lock` class, we will need to pass the
    client ID and domain name to the instance.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s implement this in our `auth.service.ts` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding code, the following important points should be noted:'
  prefs: []
  type: TYPE_NORMAL
- en: We are creating three variables, namely `_idToken`, `_accessToken`, and `_expiresAt`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We are creating an instance of `Auth0Lock` and we need to pass params to the
    object.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `Auth0Lock` object will require two mandatory params to be passed. The first
    param is `ClientId`, and the second is the domain name.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The third param includes options such as `allowedConnections`, theme, and so
    on, as it says they are optional.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Client Id and Domain can be obtained from the Auth0 app settings, as shown
    in the following screenshot:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](assets/002c661a-20db-48b6-8d42-877fb5bf05fd.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can now listen to events attached to the `lock` object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding code, we are performing the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: In the `constructor` method, we are listening to the `on` event for the `authenticated`
    and `authorization_error` states.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When we get an authenticated message from the `lock` instance, we are storing
    a `localStorage` item called `userToken` and setting `accessToken` as its value.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We are also listening to the error message and logging the message in the console.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, it''s time to implement the `login` and `logout` methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: In the `login` method, we are calling the `show` method of the `lock` object.
    This will bring you to the dialog box of Auth0, with options to Log In, Sign Up,
    or Don't remember your password? The login dialog box will have social options
    if you selected any.
  prefs: []
  type: TYPE_NORMAL
- en: 'For the `logout` method, we just clear the `userToken` that we set when the
    user logs in and redirect the user back to the home login page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Once we clear `userToken`, the application will know that the user is not logged
    in.
  prefs: []
  type: TYPE_NORMAL
- en: 'We have implemented the `login` and `logout` methods, but we also need a method
    to check whether the user is logged in or not:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: In the `isLoggedIn` method, we are checking whether the value of the `userToken`
    variable in local storage is set or not. If the value is set, it means that the
    user is logged in; otherwise, the user is not logged in.
  prefs: []
  type: TYPE_NORMAL
- en: 'Just import the service into our `app.component.ts` file and inject it into
    the constructor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: That's it. Wasn't that simple?
  prefs: []
  type: TYPE_NORMAL
- en: 'We should see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/f5ad21f4-0db1-4521-9926-36055712db9b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If we click on the Login link, we should see the Auth0 dialog window pop up:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/79c791e3-7840-462a-b7de-7c3cd67d5828.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, go ahead and click on the Sign Up tab to create an account and, once registered
    successfully, you should see that the user has been added to the Auth0 dashboard
    as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/6208686e-8b0a-4e39-845d-ebc4c44b3eff.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once we log in successfully, we should see only the Logout link, as shown in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/63ae6c9f-5546-4853-810c-5f09b9c876d3.png)'
  prefs: []
  type: TYPE_IMG
- en: When we click on the Logout link, the user should be taken back to the default
    landing page and should see the login and register options. Also, notice the params
    provided in the URL, such as `access_token expires_in`, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Awesome! We just implemented the entire user authentication using Auth0 in our
    application.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned about some advanced Angular topics, from creating
    custom directives that are way too cool, to extending the behavior of our native
    HTML elements. We also created custom form validations, which are really useful
    when developing a really complex application with a lot of validations and compliance
    requirements. We dove into Angular single-page applications and looked at how
    they work and behave. We implemented user authentication in our Angular applications
    through native code.
  prefs: []
  type: TYPE_NORMAL
- en: We also learned how to build and implement a secure user authentication management
    system using the available frameworks, that is, Firebase and Auth0\. We then learned
    to implement login, registration, and logout features to make sure we can secure
    the data and features of applications. Now that we have mastered the preceding
    concepts, we are good to implement a complete, wired end-to-end Angular application.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have learned how to develop our Angular applications, the only thing
    between our applications and real users is the deployment of our applications.
    That's the focus of our next chapter. In the next and final chapter of this book,
    we will learn all about deploying our Angular applications.
  prefs: []
  type: TYPE_NORMAL
