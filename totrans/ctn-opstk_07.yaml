- en: Kuryr – Container Plugin for OpenStack Networking
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will be learning about Kuryr, an OpenStack project for
    container networking. This chapter will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Introducing Kuryr
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kuryr architecture
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installation of Kuryr
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Walk-through
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introducing Kuryr
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Kuryr is named after the Czech word which means a courier. It is a Docker network
    plugin that uses OpenStack Neutron to provide networking services to Docker containers.
    It maps container network abstractions to OpenStack neutron APIs. This provides
    the ability to connect VMs, containers, and bare metal servers to the same virtual
    network in a seamless management experience, and provides consistent networking
    for all three. Kuryr can be deployed using a Python package or a container using
    Kolla. It provides the following features to containers using a neutron as a provider:'
  prefs: []
  type: TYPE_NORMAL
- en: Security groups
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Subnet pools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: NAT (SNAT/DNAT, Floating IP)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Port security (ARP spoofing)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Quality of Service (QoS)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Quota management
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Neutron pluggable IPAM
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Well-integrated COE load balancing via a neutron
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: FWaaS for containers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kuryr architecture
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the following sections, we will look at the Kuryr architecture.
  prefs: []
  type: TYPE_NORMAL
- en: Mapping the Docker libnetwork to the neutron API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following diagram shows the Kuryr architecture that maps the Docker libnetwork
    networking model to the neutron API. Kuryr maps **libnetwork** APIs and creates
    the appropriate resource in the neutron, which explains why the **Neutron API**
    can also be used for container networking:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/00022.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Providing the generic VIF-Binding infrastructure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Kuryr provides a generic VIF binding mechanism for the various port types which
    will be received from the Docker namespace and will be attached to the networking
    solution infrastructure depending on its type, for example, **Linux bridge port**,
    **Open vSwitch port**, **Midonet port****, **and so on. The following diagram
    represents this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../images/00023.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Providing containerized images of neutron plugins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Kuryr aims to provide containerized images of the various neutron plugins that
    are integrated with Kolla, as well.
  prefs: []
  type: TYPE_NORMAL
- en: Nesting VMs and Magnum use cases
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Kuryr addresses Magnum project use cases in terms of container networking and
    serves as a unified interface for Magnum or any other OpenStack project that needs
    to leverage container networking through the neutron API. In this regard, Kuryr
    leverages neutron plugins that support VM nested container use cases and enhances
    neutron APIs to support these cases (for example, OVN).
  prefs: []
  type: TYPE_NORMAL
- en: Installation of Kuryr
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we will see how to install Kuryr. The prerequisites are as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: KeyStone
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Neutron
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A DB management system such as MySQL or MariaDB (for neutron and KeyStone)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Neutron agents for the vendor you choose
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rabbitmq if the neutron agents for your vendor require it
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Docker 1.9+
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following steps run Kuryr inside a Docker container:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Pull the upstream Kuryr libnetwork Docker image:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Prepare Docker to find the Kuryr driver:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Start the Kuryr container:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Here:'
  prefs: []
  type: TYPE_NORMAL
- en: '`SERVICE_USER`, `SERVICE_PROJECT_NAME`, `SERVICE_PASSWORD`, `SERVICE_DOMAIN_NAME`,
    and `USER_DOMAIN_NAME` are OpenStack credentials'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`IDENTITY_URL` is the URL to the OpenStack KeyStone v3 endpoint'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A volume is created so that the logs are available on the host
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`NET_ADMIN` capabilities are given in order to perform network operations on
    the host namespace, such as `ovs-vsctl`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Walk-through
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Kuryr exists in each host that runs containers and serves APIs required for
    the libnetwork remote network driver.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are the steps which are executed to create a container network
    provided by the neutron:'
  prefs: []
  type: TYPE_NORMAL
- en: 'A user sends a request to libnetwork to create a Docker network with the network
    driver specifier as Kuryr. The following example creates a Docker network named
    bar:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: libnetwork makes API calls to the Kuryr plugin to create the network
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Kuryr forwards the call to the Neutron and Neutron creates the network with
    the input data provided by Kuryr
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Upon receiving a response from the neutron, it prepares the output and sends
    it to libnetwork
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: libnetwork stores the response to its key/value datastore backend
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The user can then launch a container using the network created previously:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned about Kuryr. We learnt what Kuryr is, its architecture,
    and its installation process. We also looked at the overall workflow when a user
    creates a Docker network using Kuryr as the network driver.
  prefs: []
  type: TYPE_NORMAL
- en: The next chapter will focus on project Murano. We will learn about Murano and
    its architecture and complete hands-on exercises.
  prefs: []
  type: TYPE_NORMAL
