- en: Preface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The confluence of social networking, cloud computing, and the era of mobile
    applications creates a generation of emerging technologies that allow different
    networked devices to communicate with each other over the Internet. In the past,
    there were traditional and proprietary approaches for building solutions, encompassing
    different devices, and components communicating with each other over an unreliable
    network or through the Internet. Some of these approaches, such as RPC CORBA,
    and SOAP-based web services, which evolved as different implementations for service-oriented
    architecture (SOA), required a tighter coupling between components along with
    greater complexities in integration.
  prefs: []
  type: TYPE_NORMAL
- en: As the technology landscape evolves, today's applications are built on the notion
    of producing and consuming APIs instead of using web frameworks that invoke services
    and produce web pages. This API-based architecture enables agile development,
    easier adoption and prevalence, and scale and integration with applications, both
    within and outside the enterprise.
  prefs: []
  type: TYPE_NORMAL
- en: The widespread adoption of REST and JSON opens up the possibilities of applications
    incorporating and leveraging functionality from other applications as needed.
    Popularity of REST is mainly because it enables building lightweight, simple,
    and cost-effective modular interfaces, which can be consumed by a variety of clients.
  prefs: []
  type: TYPE_NORMAL
- en: The advent of mobile applications calls for a stricter delineated client-server
    model. Companies that build applications on iOS and Android platform can consume
    the REST-based API and extend and deepen their reach by combining data from multiple
    platforms because of the REST-based architecture that is API centric.
  prefs: []
  type: TYPE_NORMAL
- en: REST has the additional benefit of being stateless, easing scalability, visibility,
    and reliability as well as being platform and language agnostic. Many companies
    are adopting OAuth 2.0 for security and token management.
  prefs: []
  type: TYPE_NORMAL
- en: This book aims to provide avid readers with an overview of the REST architectural
    style, focuses on all the mentioned topics, and then dives deep into best practices
    and commonly used patterns for building RESTful services that are lightweight,
    scalable, reliable, and highly available.
  prefs: []
  type: TYPE_NORMAL
- en: What this book covers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Chapter 1](ch01.html "Chapter 1. REST – Where It Begins"), *REST – Where It
    Begins*, starts with the basic concepts of REST, how to design RESTful services,
    and best practices around designing REST resources. It covers the JAX-RS 2.0 API
    to build RESTful services in Java.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 2](ch02.html "Chapter 2. Resource Design"), *Resource Design*, discusses
    different request response patterns; it covers topics such as content negotiation,
    resource versioning, and response codes in REST.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 3](ch03.html "Chapter 3. Security and Traceability"), *Security and
    Traceability*, covers advanced details in security and traceability around the
    REST API. It includes topics such as access control, authentication using OAuth,
    exception handling, and auditing and validation patterns.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 4](ch04.html "Chapter 4. Designing for Performance"), *Designing for
    Performance*, covers the design principles needed for performance. It discusses
    the caching principles, asynchronous and long running jobs in REST, and how to
    use the partial updates using PATCH.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 5](ch05.html "Chapter 5. Advanced Design Principles"), *Advanced Design
    Principles*, covers advanced topics such as rate limiting, response pagination,
    and internationalization and localization principles with detailed samples. It
    covers extensibility, HATEOAS, and topics such as testing and documenting REST
    services.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 6](ch06.html "Chapter 6. Emerging Standards and the Future of REST"),
    *Emerging Standards and the Future of REST*, covers real-time APIs using WebHooks,
    WebSockets, PuSH, and Server-sent event services, and compares and contrasts them
    in various areas. Additionally, this chapter covers case studies demonstrating
    how the emerging technologies such as WebSockets and WebHooks are being used in
    real-time applications. It also outlines the role of REST with micro services.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Appendix](apa.html "Appendix A. Appendix"), covers different REST API from
    GitHub, Twitter, and Facebook, and how they tie into the principles discussed
    in [Chapters 2](ch02.html "Chapter 2. Resource Design"), *Resource Design*, through
    [Chapter 5](ch05.html "Chapter 5. Advanced Design Principles"), *Advanced Design
    Principles*.'
  prefs: []
  type: TYPE_NORMAL
- en: What you need for this book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To be able to build and run samples provided with this book, you will need
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Apache Maven 3.0 and higher: Maven is used to build the samples. You can download
    Apache Maven from [http://maven.apache.org/download.cgi](http://maven.apache.org/download.cgi).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'GlassFish Server Open Source Edition v4.0: This is a free community supported
    Application Server providing implementation for Java EE 7 specifications. You
    can download the GlassFish Server from [http://dlc.sun.com.edgesuite.net/glassfish/4.0/promoted/](http://dlc.sun.com.edgesuite.net/glassfish/4.0/promoted/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Who this book is for
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book is a perfect reading source for application developers to get familiar
    with REST. It dives deep into the details, best practices, and commonly used REST
    patterns as well as gives insights on how Facebook, Twitter, PayPal, GitHub, Stripe,
    and other companies are implementing solutions with RESTful services.
  prefs: []
  type: TYPE_NORMAL
- en: Conventions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this book, you will find a number of styles of text that distinguish between
    different kinds of information. Here are some examples of these styles, and an
    explanation of their meaning.
  prefs: []
  type: TYPE_NORMAL
- en: 'Code words in text, database table names, folder names, filenames, file extensions,
    pathnames, dummy URLs, user input, and Twitter handles are shown as follows: "`GET`
    and `HEAD` are safe methods."'
  prefs: []
  type: TYPE_NORMAL
- en: 'A block of code is set as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'When we wish to draw your attention to a particular part of a code block, the
    relevant lines or items are set in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Any command-line input or output is written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**New terms** and **important words** are shown in bold.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Warnings or important notes appear in a box like this.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Tips and tricks appear like this.
  prefs: []
  type: TYPE_NORMAL
