- en: Writing Plugins and Modules
  prefs: []
  type: TYPE_NORMAL
- en: Remember how you have been writing some simple plugins in the Nuxt apps since
    [Chapter 3](47ba7bfa-4881-4cf9-9ef9-2fff662c6d21.xhtml)*, Adding UI Frameworks*?
    As we mentioned before, plugins are **JavaScript functions** by nature. You will
    always need to write custom functions to suit your situations in web development
    and we will create quite a few functions throughout this book. In this chapter,
    we will look into creating custom plugins in more detail for your Nuxt app, as
    well as custom modules. You will learn to create custom plugins in a Vue app and
    implement them in the Nuxt app. Then you will learn how to create custom Nuxt
    modules on top of plugins. You will also learn to import and install the existing
    Vue plugins and Nuxt modules, which are provided as contributions from the Vue
    and Nuxt communities, into your Nuxt app. It is important to learn and understand
    Vue plugins and Nuxt modules, whether they are custom ones or imported externally,
    because we will be using some of them quite often in the coming chapters.
  prefs: []
  type: TYPE_NORMAL
- en: 'The topics we will cover in this chapter are the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Writing Vue plugins
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing global functions in Nuxt
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing Nuxt modules
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing async Nuxt modules
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing Nuxt module snippets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing Vue plugins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Plugins are global JavaScript functions encapsulated in `.js` files that can
    be installed in your app by using the `Vue.use` global method. We have used some
    Vue plugins in our past examples in [Chapter 4](aa55a711-4ba3-45e1-bad6-96067701bba7.xhtml),
    *Adding Views, Routes, and Transitions*, such as `vue-router` and `vue-meta`.
    These plugins must be installed through the `Vue.use` method before the root Vue
    is initiated with the `new` statement, as seen in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'You can pass options into the plugin through `Vue.use` to configure the plugin
    in this format:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'For example, we can pass the following options into the `vue-meta` plugin:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Options are optional. That means you can use the plugin itself without passing
    in any of them. `Vue.use` also can prevent you from accidentally injecting the
    same plugin twice or more, so calling a plugin multiple times will only install
    it once.
  prefs: []
  type: TYPE_NORMAL
- en: You can check out awesome-vue for a huge collection of community-contributed
    plugins and libraries at `https://github.com/vuejs/awesome-vuecomponents--libraries`.
  prefs: []
  type: TYPE_NORMAL
- en: Now let's explore how you can create your Vue plugins in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Writing a custom plugin in Vue
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Writing a Vue plugin is rather easy. You just need to use an `install` method
    in your plugin to accept `Vue` as the first argument and `options` as the second
    argument:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s create a simple custom greeting plugin in different languages for a
    standard Vue app. The language can be configured through the `options` parameter;
    English will be used as the default language when no option is provided:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a `/plugins/` folder in the `/src/` directory with a `basic.js` file
    in it with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: In this simple plugin, we also added an instance property called `$message` with
    a default "Hello World!" value in Hungarian (`Helló Világ!`), which can be modified
    when this plugin is used in a component. Note that `{ language } = options` is
    the ES6 way of writing `language = options.language`. Also, we should prefix methods
    and properties with a `$` because it is a convention to do so.
  prefs: []
  type: TYPE_NORMAL
- en: 'Install and configure this plugin as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Then we can use the plugin globally in any Vue component, as in the following
    example:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'So, when you run your app on a browser, you should get the following output
    on your screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'You also can use `component` or `directive` in the plugin, as in the following
    example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'We also can use `Vue.mixin()` to inject a plugin to all components, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: You can find the preceding example Vue app in `/chapter-6/vue/webpack/` in our
    GitHub repository.
  prefs: []
  type: TYPE_NORMAL
- en: That's it. It is pretty straightforward to create a Vue plugin that can be installed
    and used in Vue apps, isn't it? What about in Nuxt apps? How can we install the
    preceding custom Vue plugin in a Nuxt app? Let's find out in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Importing Vue plugins into Nuxt
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The process works much the same in Nuxt apps. All plugins are to be run before the
    root Vue is initiated. So if we want to use a Vue plugin, as with the previous
    sample plugin, we need to set up the plugin before launching the Nuxt app. Let''s
    copy our custom `basic.js` plugin into the `/plugins/` directory in our Nuxt app
    and then implement the following steps to install it:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a `basic-import.js` file to import `basic.js` in the `/plugins/` directory as
    follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: We skip the options this time when installing the plugin with the `Vue.use` method.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the file path of `basic-import.js` to the `plugins` option in the Nuxt
    config file as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Use this plugin in any pages you like – just like we did in the Vue app, for
    example:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the Nuxt app on the browser and you should get the following output on
    the screen:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: We get an English version of "Hello!" for the `$greet` method this time because
    we did not set any language option when installing the plugin. Also, you will
    get "Olá Mundo!" for `$message` in the `<template>` block on this index page only;
    you will get "Helló Világ!" on other pages (for example, `/about`, `/contact`),
    because we only set this Portuguese version of "Hello World!" on the index page
    at `this.$message = 'Olá Mundo!'`.
  prefs: []
  type: TYPE_NORMAL
- en: As we mentioned at the beginning of this chapter, there is a huge collection
    of community-contributed Vue plugins that might be useful for your Nuxt app, but
    some plugins might work only in the browser because they lack SSR (server-side
    rendering) support. So in the next section, we will look into how we can resolve
    this type of plugins.
  prefs: []
  type: TYPE_NORMAL
- en: Importing external Vue plugins without SSR support
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Some Vue plugins are already pre-installed for us in Nuxt, such as `vue-router`, `vue-meta`, `vuex`,
    and `vue-server-renderer`. The plugins that are not installed can be sorted easily
    following the steps that we used to install our custom Vue plugin in the previous
    section. Here is an example of how we can use `vue-notifications` in our Nuxt
    app:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install the plugin using npm:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Import and inject the plugin just like we did with our custom one:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Include the file path to the Nuxt config file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'For plugins that have no SSR support, or for when you just want to use this
    plugin on the client side only, you can use the `mode: ''client''` option in the `plugins` option
    to ensure this plugin is not executed on the server side, as in the following
    example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, it only takes three steps to install a Vue plugin, whether they
    are external or your custom ones. So in a nutshell, Vue plugins are global JavaScript
    functions injected into the Vue instance by using the `Vue.use` method and by
    exposing an `install` method inside the plugin. But in Nuxt itself, there are
    other ways of creating global functions that can be injected into the Nuxt context (`context`)
    and the Vue instance (`$root`) without having to use the `install` method. We
    will look into these approaches in the coming sections.
  prefs: []
  type: TYPE_NORMAL
- en: For more information about `vue-notifications`, please visit `https://github.com/euvl/vue-notification`.
  prefs: []
  type: TYPE_NORMAL
- en: Writing global functions in Nuxt
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In Nuxt, we can create "plugins" or global functions by injecting them into
    the three following items:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The Vue instance (on the client side):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'The Nuxt context (on the server side):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Both the Vue instance and the Nuxt context:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Using the preceding formats, you can write global functions easily for your
    app. In the coming sections, we will guide you through some example functions.
    So let's get started.
  prefs: []
  type: TYPE_NORMAL
- en: Injecting functions into the Vue instance
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this example, we will create a function for summing up two numbers, for
    example, 1 + 2 = 3\. We will inject this function into the Vue instance with the
    following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a `.js` file, import `vue`, and attach the function to `vue.prototype`
    in the `/plugins/` directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the function file path to the `plugins` property in the Nuxt config file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Use the function anywhere you like, such as the following, for example:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the page on the browser and you should get the following output on the
    screen (even when you refresh the page):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Injecting functions into the Nuxt context
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this example, we will create a function for squaring a number, for example,
    5 * 5 = 25\. We will inject this function into the Nuxt context via the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a `.js` file and attach the function to `context.app`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the function file path to the `plugins` option in the Nuxt config file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Use the function on any page you like where you have the access to the context,
    for example, in the `asyncData` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the page on the browser and you should get the following output on the
    screen (even when you refresh the page):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Note that `asyncData` is always called before the page component is initiated
    and that you cannot access `this` in this method. Therefore you cannot use the
    functions that you inject into the Vue instance (`$root`), like the `$sum` function
    we created in the previous example, inside the `asyncData` method (we will look
    into `asyncData` in more detail in [Chapter 8](1d20b423-d93c-454a-91b5-f7207e1988fb.xhtml),
    *Adding a Server-Side Framework*). Likewise, we cannot call the context-injected
    functions, like the `$square` function in this example, inside the Vue lifecycle
    hooks/methods (for example, `mounted`, `updated`, and so on). But, if you want
    a function that can be used from `this` and `context`, let's see how we can do
    that by injecting this kind of function into both the Vue instance and Nuxt context in
    the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Injecting functions into both the Vue instance and the Nuxt context
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this example, we will create a function for multiplying two numbers, for
    example, 2 * 3 = 6\. We will inject this function into both the Vue instances
    and the Nuxt context in the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a `.js` file and use the `inject` function to encapsulate your function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Note that `$` is prefixed automatically to your function, so you don't have
    to worry about adding it to your function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the function file path to the `plugins` property in the Nuxt config file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Use the function on any page you like where you have access to `context` and `this` (the
    Vue instance), such as the following, for example:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the page on the browser and you should get the following output on the
    screen (even when you refresh the page):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'You can use this function in any Vue lifecycle hook, such as the following,
    for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: You should get an output of `15` on your browser's console. Furthermore, you
    also can access this function from `this` in the `actions` and `mutations` objects/
    property in the Vuex store, which we will cover in [Chapter 10](808b1fa6-d397-4c97-b45a-95de8238497a.xhtml),
    *Adding a Vuex Store*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a `.js` file and encapsulate the following functions in the `actions` and `mutations` objects:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Use the preceding store `action` method, which is `setNumbers`, on any page
    you like, such as the following example:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the page on the browser and you should get the following output on the
    screen (even when you refresh the page):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Click the Update Store button and the store default state with the preceding numbers
    will be changed as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: That is great. In this way, we can write a plugin that works on both the client
    and server sides. But sometimes, we need functions that can be used on either
    the server side or client side exclusively. To do this, we must instruct Nuxt
    how to run our functions specifically. So let's find out how you can do that in
    the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Injecting client-only or server-only plugins
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this example, we will create a function for dividing two numbers, for example,
    8 / 2 = 4, and another function for subtracting two numbers, for example, 8 -
    2 = 6\. We will inject the first function into the Vue instance and make it specifically
    for client-side use only, while the second one we inject into the Nuxt context
    and make it specifically for server-side use only:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create two functions and append them with `.client.js` and `.server.js` as
    follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: The function file that is appended with `.client.js` will run on the client
    side only, while the function file that is appended with `.server.js` will run
    on the server side only.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the function file paths to the `plugins` property in the Nuxt config file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Use these plugins on any page you like, such as the following, for example:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the page on the browser and you should get the following output on the
    screen:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that you will get the preceding result when you run the page on the browser for
    the first time, and even when you refresh the page. But after the first load,
    if you navigate to this page through `<nuxt-link>`, you will get the following
    output on the screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Also, note that we must wrap the `$divide` method in the `process.client` if-condition
    because it is a function that only takes place on the client side. If you remove
    the `process.client` if-condition, you will get a server-side error in the browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'The same goes for the `$subtract` method: we must wrap it in the `process.server` if-condition
    because it is a function that only takes place on the server side. If you remove
    the `process.server` if-condition, you will get a client-side error on the browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: It may not be ideal to wrap the function in the `process.server` or
  prefs: []
  type: TYPE_NORMAL
- en: '`process.client` if-condition blocks every time we use it. But you don''t need
    to use the `process.client` if-condition on the Vue lifecycle hooks/methods that
    are called on the client side only, such as the `mounted` hook. So you can safely
    use your client-only function without the if-condition, as in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'You will get an output of `4` in your browser''s console. The following table
    shows the eight Vue lifecycle hooks/methods and it is worth knowing that only
    two of them are called on both sides in a Nuxt app:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Server and Client** | **Client Only** |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: beforeCreate ()
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: created ()
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: beforeMount ()
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: mounted ()
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: beforeUpdate ()
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: updated ()
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: beforeDestroy ()
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: destroyed ()
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that the `data` method that we have been using in our Vue and Nuxt apps
    is called on both sides, just like the `asyncData` method. So, you can use the
    `$divide` method, which is made specifically for client-side use, without the
    if-condition in the hooks only under the list of **Client Only**. Whereas with
    the `$subtract` method, which is specifically made for server-side use only, you
    can safely it without the if-condition in the `nuxtServerInit` action only, as
    in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'You will get an output of `6` when your app is running on the server side,
    even when you refresh a page (any page). It is worth knowing that the Nuxt context
    can be accessed through these methods only: `nuxtServerInit` and `asyncData`.
    The `nuxtServerInit` action gets to access the context as the second argument,
    while the `asyncData` method gets to access it as the first argument. We will
    cover the `nuxtServerInit` action in [Chapter 10](808b1fa6-d397-4c97-b45a-95de8238497a.xhtml), *Adding
    a Vuex Store*, but instead, right now in the next section, we will look at the
    JavaScript functions that are injected into the Nuxt context after the `nuxtServerInit`
    action, but before the Vue instance and plugins, as well as before the `$root` and
    Nuxt context injected functions that you have just previously learned. This type
    of function is called a Nuxt module and you will know how to write these modules
    by the end of this chapter. Let''s get going.'
  prefs: []
  type: TYPE_NORMAL
- en: Writing Nuxt modules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A module is simply a top-level JavaScript function that is executed when Nuxt
    is started. Nuxt will call each module in order and wait for all modules to finish
    before continuing to call the Vue instance, the Vue plugins, and the global functions
    that are to be injected into `$root` and the Nuxt context. Because modules are
    called before them (i.e Vue instance, etc), we can use modules to override templates,
    configure webpack loaders, add CSS libraries, and perform other tasks that you
    need for your app. Besides this, modules can also be packaged into npm packages
    and shared with the Nuxt community. You can check out the following link for production-ready
    modules made by the Nuxt Community:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/nuxt-community/awesome-nuxt#official](https://github.com/nuxt-community/awesome-nuxt#official)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s give the Axios module a try, which is a module integrated with Axios
    ([https://github.com/axios/axios](https://github.com/axios/axios)) for Nuxt. It
    comes with features such as setting the base URL for the client and server sides
    automatically. We will discover some of its features in the coming chapters. If
    you want to find out more about this module, please visit [https://axios.nuxtjs.org/](https://axios.nuxtjs.org/).
    Right now, let''s find out how we can use this module in the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install it with npm:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'Configure it in the Nuxt config file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'Use it anywhere, for example, in the `asyncData` method on a page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'You also can use it in the `mounted` method (or `created`, `updated`, and so
    on) as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: You should see your IP address on the browser's console every time you navigate
    to the `/about` page. You should notice that now you can send HTTP requests just
    like using vanilla Axios, without having to import it whenever you need it because
    it is now injected globally through the module. Wonderful, isn't it? Next, we
    will guide you through writing your modules by starting with a basic module.
  prefs: []
  type: TYPE_NORMAL
- en: Writing a basic module
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As we have mentioned already, modules are functions, and they can be optionally
    packaged as npm modules. This is the very basic structure you need to create a
    module:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'You just need to create a `/modules/` directory in your project root and then
    start writing the code for your module. Note that you must include this following
    line if you want to publish your module as an npm package:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'If you want to create the module and publish it as an npm package, follow this
    template from the Nuxt community:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/nuxt-community/module-template/tree/master/template](https://github.com/nuxt-community/module-template/tree/master/template)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Whether you are creating a module for the Nuxt community or your own project
    only, each module can access the following things:'
  prefs: []
  type: TYPE_NORMAL
- en: '**The module options:**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We can pass some options in a JavaScript object to the module from the config
    file, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'Then you can access the preceding option as `moduleOptions` in the first argument
    of your module function, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'You will get the following options that you pass from the config file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: '**The configuration options:**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We also can create a custom option (for example, `token`, `proxy`, or `basic`)
    and pass some specific options to the module (this custom option can be used to
    share between modules), as in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'Then you can access the preceding custom option using `this.options`, as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'You will get the following options that you pass from the config file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'We can then also combine `moduleOptions` and `this.options` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'You will get the following combined options that you pass from the config file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: '**The Nuxt instance:**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can use `this.nuxt` to access the Nuxt instance. Please visit the following link
    for available methods (for example, the `hook` method, which we can use to create
    certain tasks on specific events when booting Nuxt):'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://nuxtjs.org/api/internals-nuxt](https://nuxtjs.org/api/internals-nuxt)'
  prefs: []
  type: TYPE_NORMAL
- en: '**The `ModuleContainer` instance:**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can use `this` to access the `ModuleContainer` instance. Please visit the
    following link for available methods (for example, the `addPlugin` method, which
    we use quite often in a module to register a plugin):'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://nuxtjs.org/api/internals-module-container](https://nuxtjs.org/api/internals-module-container)'
  prefs: []
  type: TYPE_NORMAL
- en: '**The `module.exports.meta` code line:**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If you are publishing your module as an npm package then this line is required,
    as we mentioned earlier. But in this book, we will guide you through the steps
    of creating modules for your project. Let''s get started by creating a really
    basic module in the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a `module` file with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a `plugin` file with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: Note that the `<%= %>` symbols are interpolation delimiters used by Lodash for
    interpolating data properties in the `template` function. We will cover them again
    later in this chapter. For more information about the Lodash `template` function,
    please visit [https://lodash.com/docs/4.17.15#template](https://lodash.com/docs/4.17.15#template).
  prefs: []
  type: TYPE_NORMAL
- en: 'Include the module file path (`/modules/basic/module.js`) only in the Nuxt
    config file and provide some options with the `basic` custom option as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: 'Use it anywhere you like, such as the following, for example:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see the following output on the browser''s console every time you
    visit the home page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: Notice how `module.js` handles high-level configuration details, such as languages
    and options. It is also responsible for registering the `plugin.js` file, which
    does the actual work. As you can see, the module is a wrapper around a plugin.
    We will study this more in the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: Note that if you are writing modules only for build time and development, then
    use the `buildModules` option in the Nuxt config file to register your modules,
    instead of using the `modules` option for the Node.js runtime. For more information
    about this option, please visit [https://nuxtjs.org/guide/modules#build-only-modules](https://nuxtjs.org/guide/modules#build-only-modules)
    and [https://nuxtjs.org/api/configuration-modules](https://nuxtjs.org/api/configuration-modules).
  prefs: []
  type: TYPE_NORMAL
- en: Writing async Nuxt modules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you need to use a `Promise` object in your module, for example, to fetch
    some async data from a remote API using an HTTP client, then Nuxt can perfectly
    support that. The following are some of the options you can write your async modules with.
  prefs: []
  type: TYPE_NORMAL
- en: Using async/await
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can use ES6 async/await in your module with Axios, the HTTP client that
    we have been using since [Chapter 4](aa55a711-4ba3-45e1-bad6-96067701bba7.xhtml),
    *Adding Views, Routes, and Transitions*, such as in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding example, we use the `get` method from Axios to get all posts
    from the remote API, JSONPlaceholder ([https://jsonplaceholder.typicode.com/](https://jsonplaceholder.typicode.com/)).
    You should see the following output printed to your terminal when you boot your
    Nuxt app for the first time:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: Returning a Promise
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can use a promise chain in your module and return the `Promise` object,
    as in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: 'In this example, we use the `get` method from Axios to get all comments from
    the remote API. Then we use the `then` method to `chain` the `Promise` and print
    the result. You should see the following output printed to your terminal when
    you boot your Nuxt app for the first time:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: You can find these two examples in `/chapter-6/nuxt-universal/modules/async/`
    in our GitHub repository.
  prefs: []
  type: TYPE_NORMAL
- en: With these two asynchronous options and the basic module writing skills that
    you have learned from the previous sections, you can start creating your Nuxt
    modules easily. We will look at more examples in the next section by writing small
    pieces of modules – **snippets**.
  prefs: []
  type: TYPE_NORMAL
- en: Writing Nuxt module snippets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this topic, we are going to break down the custom modules we've created into
    small pieces – snippets.
  prefs: []
  type: TYPE_NORMAL
- en: You can find all the following code in `/chapter-6/nuxt-universal/module-snippets/` in
    our GitHub repository.
  prefs: []
  type: TYPE_NORMAL
- en: Using top-level options
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Remember the configuration options that we said can be passed into a module
    in the *Writing a basic module *section? Module options are top-level options
    for registering our modules in the Nuxt config file. We can even combine multiple
    options from the different modules and their options can be shared. Let''s try
    an example of using `@nuxtjs/axios` and `@nuxtjs/proxy` together in the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install these two modules together using npm:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: These two modules are well integrated to prevent CORS problems, which we will
    see and discuss later in this book when developing cross-domain apps. It is not
    required to manually register the `@nuxtjs/proxy` module, but it does need to
    be in the dependencies in your `package.json` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Register the `@nuxtjs/axios` module and set the top-level options for these
    two modules in the Nuxt config file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: 'The `proxy: true` option in the `axios` custom option tells Nuxt to use the
    `@nuxtjs/proxy` module as the proxy. The `/api/: {...}` option in the `proxy`
    custom option tells the `@nuxtjs/axios` module to use [https://jsonplaceholder.typicode.com/](https://jsonplaceholder.typicode.com/)
    as the target address for the API server, while the `pathRewrite` option tells
    the `@nuxtjs/axios` module to remove `/api/` from the address during the HTTP
    request because there is no route with `/api` in the target API.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, use them seamlessly in any component, as in the following example:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: Using these two modules together, we now can just write shorter API addresses,
    such as `/api/users` instead of `https://jsonplaceholder.typicode.com/users`,
    in the request methods (for example, `get`, `post`, and `put`). This makes our
    code neater as we don't have to write the full URL on each call. Note that the `/api/` 
    address that we configured in the Nuxt config file will be added to all requests
    to the API endpoint. So we use `pathRewrite`, as we already explained, to remove
    it when sending the request.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can find out more info and top-level options provided by these two modules
    at the following links:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://axios.nuxtjs.org/options](https://axios.nuxtjs.org/options) for `@nuxtjs/axios`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://github.com/nuxt-community/proxy-module](https://github.com/nuxt-community/proxy-module) for `@nuxtjs/proxy`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can find the example module snippet we've just created in `/chapter-6/nuxt-universal/module-snippets/top-level/` in
    our GitHub repository.
  prefs: []
  type: TYPE_NORMAL
- en: Using the addPlugin helper
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Remember the `ModuleContainer` instance and the `this.addPlugin` helper method that
    you can access via the `this` keyword that we covered in the *Writing a basic
    module* section? In this example, we will create a module that provides a plugin
    by using this helper, and that plugin is `bootstrap-vue`, which will be registered
    in the Vue instance. Let''s create this module snippet with the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install Bootstrap and BootstrapVue:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a plugin file to import `vue` and `bootstrap-vue` and then register
    `bootstrap-vue` using the `use` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a module file to add the plugin file we just created using the `addPlugin`
    method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the file path of this `bootstrap` module in the Nuxt config file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: 'Start using `bootstrap-vue` on any component you like; for example, let''s
    create a button to toggle an alert text in Bootstrap as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: With this module snippet, we don't have to import `bootstrap-vue` each time
    we need it on a component because it is already added globally via the preceding snippet
    module. We only need to import its CSS files. In the usage example, we use Bootstrap's
    custom `<b-button>` component to toggle Bootstrap's custom `<b-alert>` component.
    The `<b-button>` component will then toggle the text, 'Hide' or 'Show', on that
    button.
  prefs: []
  type: TYPE_NORMAL
- en: For more information on BootstrapVue, please visit [https://bootstrap-vue.js.org/](https://bootstrap-vue.js.org/). You
    can find the example module snippet we just created in `/chapter-6/nuxt-universal/module-snippets/provide-plugin/`
    in our GitHub repository.
  prefs: []
  type: TYPE_NORMAL
- en: Using Lodash templates
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Again, this is something we are familiar with from the custom module that we
    created in the *Writing a basic module *section – leveraging the Lodash templates
    to change the output of the registered plugin by using if-condition blocks. Again,
    Lodash templates are the blocks of code with which we can interpolate data properties
    with the `<%= %>` interpolation delimiters. Let''s try another simple example
    in the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a plugin file to import `axios` and add the if-condition blocks to make
    sure the request URL is provided for `axios`, and to print the request result
    on the terminal when your Nuxt app is running in `dev` mode (`npm run dev`) for
    debugging:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a `module` file to add the plugin file we just created using the `addPlugin`
    method, with the `options` option to pass on the request URL and the Boolean value
    of `this.options.dev` to this plugin:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the file path of this module to the Nuxt config file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: 'Start using the `$getUsers` method on any component you like, as in the following
    example:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, Nuxt will replace `options.url` with `https://jsonplaceholder.typicode.com/users`
    when copying the plugin to the project. The if-condition block of `options.debug`
    will be stripped off from the plugin code on production builds, so you won't see
    the `console.log` output on your terminal in the production mode (`npm run build`
    and `npm run start`).
  prefs: []
  type: TYPE_NORMAL
- en: You can find the example module snippet we just created in `/chapter-6/nuxt-universal/module-snippets/template-plugin/`
    in our GitHub repository.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a CSS library
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In our module snippet example in the *Using the addPlugin helper* section,
    we created a module that allows us to use the `bootstrap-vue` plugin globally
    in our app without having to use the `import` statement to require this plugin,
    as in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: 'It looks quite neat as we don''t have to import `bootstrap-vue` every time,
    instead only having to import the CSS styles. However, we still can save a couple
    of lines by adding the styles to the global CSS stack of our app through the module.
    Let''s create a new example and see how we can do that in the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a module file with a `const` variable called `options` for passing the
    module and top-level options to the plugin file, and an if-condition block to
    determine whether to use the vanilla JavaScript `push` method to `push` the CSS
    files to the `css` options in the Nuxt config file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a plugin file with the registration of the `bootstrap-vue` plugin, and
    an if-condition Lodash-template block to print the options that are processed
    from the module file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the file path of the module to the Nuxt config file, with the module options
    specifying whether to disable the CSS files in the module file or not. Also, add
    the top-level options, `bootstrap`, to pass on the Boolean value to the `debug`
    option:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: 'Remove the CSS files from our component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: 'So, finally, we can use the `bootstrap-vue` plugin and its CSS files in our
    component without having to import all of them. Here''s another quick example
    of pushing the Font Awesome `css` options to the Nuxt config file through the
    module snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: If you want to find out more information about Font Awesome, please visit [https://fontawesome.com/](https://fontawesome.com/).
  prefs: []
  type: TYPE_NORMAL
- en: You can find the example module snippet we just created in `/chapter-6/nuxt-universal/module-snippets/css-lib/`
    in our GitHub repository.
  prefs: []
  type: TYPE_NORMAL
- en: Registering custom webpack loaders
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When we want to extend the webpack config in Nuxt, we usually do it in `nuxt.config.js`
    with `build.extend`. But we can do the same through a module by using `this.extendBuild`
    with the following module/loader template:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: 'For example, let''s say we want to extend our webpack config with `svg-transform-loader`,
    which is a webpack loader for adding or modifying tags and attributes in an SVG
    image. The main purpose of this loader is to allow us to use `fill`, `stroke`,
    and other manipulations on SVG images. We also can use it in CSS, Sass, Less,
    Stylus, or PostCSS; for example, if you want to fill an SVG image with the white
    color, you can use `fill` to add `fff` (the CSS color white code) to the image
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: 'If you want to `stroke` the SVG image by using a variable in Sass, you can
    do it as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s create an example module to register this loader to the Nuxt webpack
    default config so that we can manipulate the SVG images in our Nuxt app with the
    following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install the loader using npm:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a module file using the module/loader template we provided previously
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside the callback of `this.extendBuild`, add the following lines to find
    the file loader and remove `svg` from its existing rule test:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following block of code right after the preceding code block to `push` the
    `svg-transform-loader` loader into the default webpack config''s module rules:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: The module is now completed and we can move on to *step 5*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the file path of this module to the Nuxt config file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: 'Start transforming any SVG images in our component, such as the following,
    for example:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs: []
  type: TYPE_PRE
- en: 'You can find out more information about `svg-transform-loader` at [https://www.npmjs.com/package/svg-transform-loader](https://www.npmjs.com/package/svg-transform-loader).
    If you want to learn more about the rule test, and to see the full content of
    the Nuxt default webpack config, please visit the following links:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://webpack.js.org/configuration/module/ruletest](https://webpack.js.org/configuration/module/#ruletest) for
    the webpack rule test'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://github.com/nuxt/nuxt.js/blob/dev/packages/webpack/src/config/base.js](https://github.com/nuxt/nuxt.js/blob/dev/packages/webpack/src/config/base.js) for
    the Nuxt default webpack configuration'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can find the example module snippet we just created in `/chapter-6/nuxt-universal/module-snippets/webpack-loader/`
    in our GitHub repository.
  prefs: []
  type: TYPE_NORMAL
- en: Registering custom webpack plugins
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Nuxt modules not only allow us to register webpack loaders but also webpack
    plugins by using `this.options.build.plugins.push` in the following module/plugin
    architecture:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE97]'
  prefs: []
  type: TYPE_PRE
- en: 'The `<tap>` depends on the hook type; it can be `tapAsync`, `tapPromise`, or
    just `tap`. Let''s create a very simple "Hello World" webpack plugin through a
    Nuxt module in the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a module file using the module/plugin architecture we''ve provided for
    printing "Hello World!" as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs: []
  type: TYPE_PRE
- en: Note that `stats` (statistics) is passed as the argument when the `done` hook
    is tapped.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the file path of this module to the Nuxt config file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE99]'
  prefs: []
  type: TYPE_PRE
- en: Run your Nuxt app with `$ npm run dev`, you should see "Hello World!" on your
    terminal.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note that the `apply` method, `compiler`, `hooks`, and the taps are all key
    parts of building a webpack plugin.
  prefs: []
  type: TYPE_NORMAL
- en: If you are new to webpack plugins and want to learn more about how to develop
    plugins for webpack, please visit [https://webpack.js.org/contribute/writing-a-plugin/](https://webpack.js.org/contribute/writing-a-plugin/).
  prefs: []
  type: TYPE_NORMAL
- en: You can find the example module snippet we just created in `/chapter-6/nuxt-universal/module-snippets/webpack-plugin/`
    in our GitHub repository.
  prefs: []
  type: TYPE_NORMAL
- en: Creating tasks on specific hooks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you need to do certain tasks on a specific life cycle event (for example,
    when all modules have finished loading) when Nuxt is being booted, you can create
    a module and use the `hook` method to listen on that event and then do the task.
    Consider the following examples:'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to do something when all modules have finished loading, try the
    following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs: []
  type: TYPE_PRE
- en: 'If you want to do something after the renderer has been created, try the following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE101]'
  prefs: []
  type: TYPE_PRE
- en: 'If you want to do something before the compiler (webpack is the default) starts,
    try the following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE102]'
  prefs: []
  type: TYPE_PRE
- en: 'If you want to do something before Nuxt generates your pages, try the following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE103]'
  prefs: []
  type: TYPE_PRE
- en: 'If you want to do something when Nuxt is ready, try the following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE104]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s create a simple module to listen on the `modules:done` hook/event in
    the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a module file for printing `''All modules are loaded''` when all modules
    are loaded:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE105]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a few more modules for printing `''Module 1''`, `''Module 2''`, `''Module
    3''`, and so on, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE106]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the file path of the hook module and other modules to the Nuxt config file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE107]'
  prefs: []
  type: TYPE_PRE
- en: 'Run your Nuxt app with `$ npm run dev` and you should see the following output
    on your terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE108]'
  prefs: []
  type: TYPE_PRE
- en: You can see that the hook module is always printed last, while the rest are
    printed according to their orders in the `modules` option.
  prefs: []
  type: TYPE_NORMAL
- en: Hook modules can be asynchronous, whether you are using `async/ await` functions
    or returning a `Promise`.
  prefs: []
  type: TYPE_NORMAL
- en: 'For more information about the preceding hooks and other hooks in the Nuxt''s
    life cycle events, please visit the following links:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://nuxtjs.org/api/internals-module-containerhooks](https://nuxtjs.org/api/internals-module-container#hooks) for
    Nuxt''s module life cycle event (the `ModuleContainer` class)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://nuxtjs.org/api/internals-builderhooks](https://nuxtjs.org/api/internals-builder#hooks) for
    Nuxt''s build life cycle event (the `Builder` class)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://nuxtjs.org/api/internals-generatorhooks](https://nuxtjs.org/api/internals-generator#hooks) for
    Nuxt''s generate life cycle event (the `Generator` class)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://nuxtjs.org/api/internals-rendererhooks](https://nuxtjs.org/api/internals-renderer#hooks) for
    Nuxt''s render life cycle event (the `Renderer` class)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://nuxtjs.org/api/internals-nuxthooks](https://nuxtjs.org/api/internals-nuxt#hooks) for
    the life cycle events in Nuxt itself (the `Nuxt` class)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can find the example module snippet we just created in `/chapter-6/nuxt-universal/module-snippets/hooks/`
    in our GitHub repository.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have successfully covered plugins and modules in Nuxt. You
    have learned that they are technically JavaScript functions that you can create
    for your project, or import them from an external source. Also, you have learned
    to create global functions in the Nuxt environment by injecting them into the
    Vue instance or the Nuxt context, or both, for your Nuxt apps, as well as creating
    client-only and server-only functions. Finally, you have learned to create module
    snippets for adding JavaScript libraries by using the `addPlugin` helper, adding
    CSS libraries globally, using Lodash templates to conditionally change the output
    of a registered plugin, adding webpack loaders and plugins to the Nuxt default
    webpack configuration, and creating tasks with the Nuxt lifecycle event hooks,
    such as `modules:done`.
  prefs: []
  type: TYPE_NORMAL
- en: In the coming chapter, we are going to explore Vue forms and adding them to
    Nuxt apps. You will understand how `v-model` works in HTML elements such as `text`,
    `textarea`, `checkbox`, `radio`, and `select`. You will learn how to validate
    these elements in Vue apps, binding default and dynamic data, and using modifiers
    such as `.lazy` and `.trim` to modify or enforce the input value. You will also
    learn to validate them using the Vue plugin, `vee-validate`, and then apply them
    to Nuxt apps. We will guide you through all these areas smoothly. So stay tuned.
  prefs: []
  type: TYPE_NORMAL
