- en: Writing Plugins and Modules
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: 编写插件和模块
- en: Remember how you have been writing some simple plugins in the Nuxt apps since
    [Chapter 3](47ba7bfa-4881-4cf9-9ef9-2fff662c6d21.xhtml)*, Adding UI Frameworks*?
    As we mentioned before, plugins are **JavaScript functions** by nature. You will
    always need to write custom functions to suit your situations in web development
    and we will create quite a few functions throughout this book. In this chapter,
    we will look into creating custom plugins in more detail for your Nuxt app, as
    well as custom modules. You will learn to create custom plugins in a Vue app and
    implement them in the Nuxt app. Then you will learn how to create custom Nuxt
    modules on top of plugins. You will also learn to import and install the existing
    Vue plugins and Nuxt modules, which are provided as contributions from the Vue
    and Nuxt communities, into your Nuxt app. It is important to learn and understand
    Vue plugins and Nuxt modules, whether they are custom ones or imported externally,
    because we will be using some of them quite often in the coming chapters.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 还记得自从[第3章](47ba7bfa-4881-4cf9-9ef9-2fff662c6d21.xhtml)以来在Nuxt应用程序中编写一些简单的插件吗，*添加UI框架*？正如我们之前提到的，插件本质上是**JavaScript函数**。在web开发中，您总是需要编写自定义函数以适应您的情况，在本书中我们将创建相当多的函数。在本章中，我们将更详细地了解为您的Nuxt应用程序创建自定义插件，以及自定义模块。您将学习在Vue应用程序中创建自定义插件并在Nuxt应用程序中实现它们。然后，您将学习如何在插件之上创建自定义Nuxt模块。您还将学习导入和安装现有的Vue插件和Nuxt模块，这些插件和模块是来自Vue和Nuxt社区的贡献，可以在您的Nuxt应用程序中使用。无论是自定义的还是外部导入的，学习和理解Vue插件和Nuxt模块都很重要，因为在接下来的章节中我们将经常使用其中的一些。
- en: 'The topics we will cover in this chapter are the following:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们将涵盖以下主题：
- en: Writing Vue plugins
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写Vue插件
- en: Writing global functions in Nuxt
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Nuxt中编写全局函数
- en: Writing Nuxt modules
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写Nuxt模块
- en: Writing async Nuxt modules
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写异步Nuxt模块
- en: Writing Nuxt module snippets
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写Nuxt模块片段
- en: Writing Vue plugins
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写Vue插件
- en: 'Plugins are global JavaScript functions encapsulated in `.js` files that can
    be installed in your app by using the `Vue.use` global method. We have used some
    Vue plugins in our past examples in [Chapter 4](aa55a711-4ba3-45e1-bad6-96067701bba7.xhtml),
    *Adding Views, Routes, and Transitions*, such as `vue-router` and `vue-meta`.
    These plugins must be installed through the `Vue.use` method before the root Vue
    is initiated with the `new` statement, as seen in the following example:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 插件是封装在`.js`文件中的全局JavaScript函数，可以通过使用`Vue.use`全局方法在应用程序中安装。我们在[第4章](aa55a711-4ba3-45e1-bad6-96067701bba7.xhtml)的过去示例中使用了一些Vue插件，例如`vue-router`和`vue-meta`。这些插件必须在使用`new`语句初始化根Vue之前通过`Vue.use`方法安装，如下例所示：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'You can pass options into the plugin through `Vue.use` to configure the plugin
    in this format:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过`Vue.use`将选项传递到插件中以配置插件的格式：
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'For example, we can pass the following options into the `vue-meta` plugin:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们可以将以下选项传递到`vue-meta`插件中：
- en: '[PRE2]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Options are optional. That means you can use the plugin itself without passing
    in any of them. `Vue.use` also can prevent you from accidentally injecting the
    same plugin twice or more, so calling a plugin multiple times will only install
    it once.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 选项是可选的。这意味着您可以在不传递任何选项的情况下使用插件本身。`Vue.use`还可以防止您意外多次注入相同的插件，因此多次调用插件将只安装一次。
- en: You can check out awesome-vue for a huge collection of community-contributed
    plugins and libraries at `https://github.com/vuejs/awesome-vuecomponents--libraries`.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以查看`awesome-vue`，这是一个庞大的社区贡献的插件和库集合，网址为`https://github.com/vuejs/awesome-vuecomponents--libraries`。
- en: Now let's explore how you can create your Vue plugins in the next section.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们在下一节中探讨如何创建Vue插件。
- en: Writing a custom plugin in Vue
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在Vue中编写自定义插件
- en: 'Writing a Vue plugin is rather easy. You just need to use an `install` method
    in your plugin to accept `Vue` as the first argument and `options` as the second
    argument:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 编写Vue插件相当容易。您只需要在插件中使用一个`install`方法来接受`Vue`作为第一个参数和`options`作为第二个参数：
- en: '[PRE3]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Let''s create a simple custom greeting plugin in different languages for a
    standard Vue app. The language can be configured through the `options` parameter;
    English will be used as the default language when no option is provided:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们为标准Vue应用程序创建一个简单的自定义问候插件，以不同的语言。可以通过`options`参数配置语言；当没有提供选项时，将使用英语作为默认语言：
- en: 'Create a `/plugins/` folder in the `/src/` directory with a `basic.js` file
    in it with the following code:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`/src/`目录中创建一个`/plugins/`文件夹，并在其中创建一个`basic.js`文件，其中包含以下代码：
- en: '[PRE4]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In this simple plugin, we also added an instance property called `$message` with
    a default "Hello World!" value in Hungarian (`Helló Világ!`), which can be modified
    when this plugin is used in a component. Note that `{ language } = options` is
    the ES6 way of writing `language = options.language`. Also, we should prefix methods
    and properties with a `$` because it is a convention to do so.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个简单的插件中，我们还添加了一个名为`$message`的实例属性，其默认值为匈牙利语的“Hello World!”（`Helló Világ!`），当此插件在组件中使用时可以进行修改。请注意，`{
    language } = options`是使用ES6编写`language = options.language`的方式。此外，我们应该使用`$`作为方法和属性的前缀，因为这是一种惯例。
- en: 'Install and configure this plugin as follows:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装和配置此插件如下：
- en: '[PRE5]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Then we can use the plugin globally in any Vue component, as in the following
    example:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后我们可以在任何Vue组件中全局使用该插件，就像以下示例中一样：
- en: '[PRE6]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'So, when you run your app on a browser, you should get the following output
    on your screen:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，当您在浏览器上运行应用程序时，您应该在屏幕上看到以下输出：
- en: '[PRE7]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'You also can use `component` or `directive` in the plugin, as in the following
    example:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以在插件中使用`component`或`directive`，就像以下示例中一样：
- en: '[PRE8]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'We also can use `Vue.mixin()` to inject a plugin to all components, as follows:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用`Vue.mixin()`将插件注入到所有组件中，如下所示：
- en: '[PRE9]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: You can find the preceding example Vue app in `/chapter-6/vue/webpack/` in our
    GitHub repository.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在我们的GitHub存储库的`/chapter-6/vue/webpack/`中找到前面的示例Vue应用程序。
- en: That's it. It is pretty straightforward to create a Vue plugin that can be installed
    and used in Vue apps, isn't it? What about in Nuxt apps? How can we install the
    preceding custom Vue plugin in a Nuxt app? Let's find out in the next section.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样。创建一个可以在Vue应用程序中安装和使用的Vue插件非常简单，不是吗？那么在Nuxt应用程序中呢？我们如何在Nuxt应用程序中安装前面的自定义Vue插件？让我们在下一节中找出答案。
- en: Importing Vue plugins into Nuxt
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将Vue插件导入到Nuxt中
- en: 'The process works much the same in Nuxt apps. All plugins are to be run before the
    root Vue is initiated. So if we want to use a Vue plugin, as with the previous
    sample plugin, we need to set up the plugin before launching the Nuxt app. Let''s
    copy our custom `basic.js` plugin into the `/plugins/` directory in our Nuxt app
    and then implement the following steps to install it:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在Nuxt应用程序中，该过程基本相同。所有插件都必须在初始化根Vue之前运行。因此，如果我们想要使用Vue插件，就像之前的示例插件一样，我们需要在启动Nuxt应用程序之前设置插件。让我们将我们的自定义`basic.js`插件复制到Nuxt应用程序的`/plugins/`目录中，然后执行以下步骤来安装它：
- en: 'Create a `basic-import.js` file to import `basic.js` in the `/plugins/` directory as
    follows:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`basic-import.js`文件，以以下方式在`/plugins/`目录中导入`basic.js`：
- en: '[PRE10]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: We skip the options this time when installing the plugin with the `Vue.use` method.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这次在使用`Vue.use`方法安装插件时，我们跳过了选项。
- en: 'Add the file path of `basic-import.js` to the `plugins` option in the Nuxt
    config file as follows:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`basic-import.js`的文件路径添加到Nuxt配置文件的`plugins`选项中，如下所示：
- en: '[PRE11]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Use this plugin in any pages you like – just like we did in the Vue app, for
    example:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在任何喜欢的页面中使用此插件-就像我们在Vue应用程序中所做的那样：
- en: '[PRE12]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Run the Nuxt app on the browser and you should get the following output on
    the screen:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器上运行Nuxt应用程序，您应该在屏幕上看到以下输出：
- en: '[PRE13]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: We get an English version of "Hello!" for the `$greet` method this time because
    we did not set any language option when installing the plugin. Also, you will
    get "Olá Mundo!" for `$message` in the `<template>` block on this index page only;
    you will get "Helló Világ!" on other pages (for example, `/about`, `/contact`),
    because we only set this Portuguese version of "Hello World!" on the index page
    at `this.$message = 'Olá Mundo!'`.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这次我们使用`$greet`方法得到了英文版的“Hello!”，因为在安装插件时没有设置任何语言选项。此外，在这个索引页面的`<template>`块中，你将得到“Olá
    Mundo!”的`$message`，而在其他页面（例如`/about`、`/contact`）上，你将得到“Helló Világ!”，因为我们只在索引页面上设置了这个葡萄牙语版本的“Hello
    World!”，即`this.$message = 'Olá Mundo!'`。
- en: As we mentioned at the beginning of this chapter, there is a huge collection
    of community-contributed Vue plugins that might be useful for your Nuxt app, but
    some plugins might work only in the browser because they lack SSR (server-side
    rendering) support. So in the next section, we will look into how we can resolve
    this type of plugins.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在本章开头提到的，有一个庞大的社区贡献的Vue插件集合，可能对你的Nuxt应用程序有用，但是一些插件可能只在浏览器中工作，因为它们缺乏SSR（服务器端渲染）支持。因此，在接下来的部分，我们将看看如何解决这种类型的插件。
- en: Importing external Vue plugins without SSR support
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 导入没有SSR支持的外部Vue插件
- en: 'Some Vue plugins are already pre-installed for us in Nuxt, such as `vue-router`, `vue-meta`, `vuex`,
    and `vue-server-renderer`. The plugins that are not installed can be sorted easily
    following the steps that we used to install our custom Vue plugin in the previous
    section. Here is an example of how we can use `vue-notifications` in our Nuxt
    app:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在Nuxt中，有一些Vue插件已经预先安装好了，比如`vue-router`、`vue-meta`、`vuex`和`vue-server-renderer`。未安装的插件可以按照我们在上一节中安装自定义Vue插件的步骤轻松排序。以下是我们如何在Nuxt应用程序中使用`vue-notifications`的示例：
- en: 'Install the plugin using npm:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用npm安装插件：
- en: '[PRE14]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Import and inject the plugin just like we did with our custom one:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入并注入插件，就像我们使用自定义插件一样：
- en: '[PRE15]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Include the file path to the Nuxt config file:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将文件路径包含到Nuxt配置文件中：
- en: '[PRE16]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'For plugins that have no SSR support, or for when you just want to use this
    plugin on the client side only, you can use the `mode: ''client''` option in the `plugins` option
    to ensure this plugin is not executed on the server side, as in the following
    example:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '对于没有SSR支持的插件，或者当你只想在客户端上使用这个插件时，你可以在`plugins`选项中使用`mode: ''client''`选项，以确保这个插件不会在服务器端执行，就像下面的例子一样：'
- en: '[PRE17]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: As you can see, it only takes three steps to install a Vue plugin, whether they
    are external or your custom ones. So in a nutshell, Vue plugins are global JavaScript
    functions injected into the Vue instance by using the `Vue.use` method and by
    exposing an `install` method inside the plugin. But in Nuxt itself, there are
    other ways of creating global functions that can be injected into the Nuxt context (`context`)
    and the Vue instance (`$root`) without having to use the `install` method. We
    will look into these approaches in the coming sections.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，安装Vue插件只需要三个步骤，无论是外部插件还是自定义插件。总之，Vue插件是通过使用`Vue.use`方法将全局JavaScript函数注入到Vue实例中，并通过在插件内部暴露`install`方法来实现的。但在Nuxt本身中，还有其他创建全局函数的方法，可以将它们注入到Nuxt上下文（`context`）和Vue实例（`$root`）中，而无需使用`install`方法。我们将在接下来的部分中探讨这些方法。
- en: For more information about `vue-notifications`, please visit `https://github.com/euvl/vue-notification`.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 有关`vue-notifications`的更多信息，请访问`https://github.com/euvl/vue-notification`。
- en: Writing global functions in Nuxt
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Nuxt中编写全局函数
- en: 'In Nuxt, we can create "plugins" or global functions by injecting them into
    the three following items:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在Nuxt中，我们可以通过将它们注入到以下三个项目中来创建“插件”或全局函数：
- en: 'The Vue instance (on the client side):'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Vue实例（客户端）：
- en: '[PRE18]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The Nuxt context (on the server side):'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Nuxt上下文（服务器端）：
- en: '[PRE19]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Both the Vue instance and the Nuxt context:'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Vue实例和Nuxt上下文：
- en: '[PRE20]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Using the preceding formats, you can write global functions easily for your
    app. In the coming sections, we will guide you through some example functions.
    So let's get started.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 使用上述格式，你可以轻松地为你的应用编写全局函数。在接下来的章节中，我们将指导你通过一些示例函数。所以让我们开始吧。
- en: Injecting functions into the Vue instance
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将函数注入到Vue实例中
- en: 'In this example, we will create a function for summing up two numbers, for
    example, 1 + 2 = 3\. We will inject this function into the Vue instance with the
    following steps:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将创建一个用于计算两个数字之和的函数，例如，1 + 2 = 3。我们将通过以下步骤将这个函数注入到Vue实例中：
- en: 'Create a `.js` file, import `vue`, and attach the function to `vue.prototype`
    in the `/plugins/` directory:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`.js`文件，导入`vue`，并将函数附加到`vue.prototype`中的`/plugins/`目录中：
- en: '[PRE21]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Add the function file path to the `plugins` property in the Nuxt config file:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将函数文件路径添加到Nuxt配置文件的`plugins`属性中：
- en: '[PRE22]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Use the function anywhere you like, such as the following, for example:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在任何你喜欢的地方使用这个函数，例如：
- en: '[PRE23]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Run the page on the browser and you should get the following output on the
    screen (even when you refresh the page):'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器上运行页面，你应该在屏幕上得到以下输出（即使刷新页面）：
- en: '[PRE24]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Injecting functions into the Nuxt context
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将函数注入到Nuxt上下文中
- en: 'In this example, we will create a function for squaring a number, for example,
    5 * 5 = 25\. We will inject this function into the Nuxt context via the following
    steps:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将创建一个用于计算一个数字的平方的函数，例如，5 * 5 = 25。我们将通过以下步骤将这个函数注入到Nuxt上下文中：
- en: 'Create a `.js` file and attach the function to `context.app`:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`.js`文件，并将函数附加到`context.app`中：
- en: '[PRE25]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Add the function file path to the `plugins` option in the Nuxt config file:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将函数文件路径添加到Nuxt配置文件的`plugins`选项中：
- en: '[PRE26]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Use the function on any page you like where you have the access to the context,
    for example, in the `asyncData` method:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在任何你喜欢的页面上使用这个函数，只要你可以访问到上下文，例如在`asyncData`方法中：
- en: '[PRE27]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Run the page on the browser and you should get the following output on the
    screen (even when you refresh the page):'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器上运行页面，你应该在屏幕上得到以下输出（即使刷新页面）：
- en: '[PRE28]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Note that `asyncData` is always called before the page component is initiated
    and that you cannot access `this` in this method. Therefore you cannot use the
    functions that you inject into the Vue instance (`$root`), like the `$sum` function
    we created in the previous example, inside the `asyncData` method (we will look
    into `asyncData` in more detail in [Chapter 8](1d20b423-d93c-454a-91b5-f7207e1988fb.xhtml),
    *Adding a Server-Side Framework*). Likewise, we cannot call the context-injected
    functions, like the `$square` function in this example, inside the Vue lifecycle
    hooks/methods (for example, `mounted`, `updated`, and so on). But, if you want
    a function that can be used from `this` and `context`, let's see how we can do
    that by injecting this kind of function into both the Vue instance and Nuxt context in
    the next section.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`asyncData`总是在页面组件初始化之前调用，你不能在这个方法中访问`this`。因此，你不能在`asyncData`方法中使用你注入到Vue实例（`$root`）中的函数，比如我们在前面例子中创建的`$sum`函数（我们将在[第8章](1d20b423-d93c-454a-91b5-f7207e1988fb.xhtml)中更详细地了解`asyncData`）。同样，我们也不能在Vue的生命周期钩子/方法（例如`mounted`、`updated`等）中调用上下文注入的函数，比如这个例子中的`$square`函数。但是，如果你想要一个可以从`this`和`context`中使用的函数，让我们看看如何通过在下一节中将这种函数注入到Vue实例和Nuxt上下文中来实现。
- en: Injecting functions into both the Vue instance and the Nuxt context
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将函数注入到Vue实例和Nuxt上下文中
- en: 'In this example, we will create a function for multiplying two numbers, for
    example, 2 * 3 = 6\. We will inject this function into both the Vue instances
    and the Nuxt context in the following steps:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将创建一个用于计算两个数字之积的函数，例如，2 * 3 = 6。我们将通过以下步骤将这个函数注入到Vue实例和Nuxt上下文中：
- en: 'Create a `.js` file and use the `inject` function to encapsulate your function:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`.js`文件，并使用`inject`函数封装您的函数：
- en: '[PRE29]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Note that `$` is prefixed automatically to your function, so you don't have
    to worry about adding it to your function.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`$`会自动添加到您的函数前缀，因此您不必担心将其添加到您的函数中。
- en: 'Add the function file path to the `plugins` property in the Nuxt config file:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将函数文件路径添加到Nuxt配置文件的`plugins`属性中：
- en: '[PRE30]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Use the function on any page you like where you have access to `context` and `this` (the
    Vue instance), such as the following, for example:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在任何您可以访问`context`和`this`（Vue实例）的页面上使用该函数，例如以下示例：
- en: '[PRE31]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Run the page on the browser and you should get the following output on the
    screen (even when you refresh the page):'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器上运行页面，您应该在屏幕上得到以下输出（即使在刷新页面时也是如此）：
- en: '[PRE32]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'You can use this function in any Vue lifecycle hook, such as the following,
    for example:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在任何Vue生命周期钩子中使用该函数，例如以下示例：
- en: '[PRE33]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: You should get an output of `15` on your browser's console. Furthermore, you
    also can access this function from `this` in the `actions` and `mutations` objects/
    property in the Vuex store, which we will cover in [Chapter 10](808b1fa6-d397-4c97-b45a-95de8238497a.xhtml),
    *Adding a Vuex Store*.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该在浏览器控制台上得到`15`的输出。此外，您还可以从`Vuex store`的`actions`和`mutations`对象/属性中访问该函数，我们将在[第10章](808b1fa6-d397-4c97-b45a-95de8238497a.xhtml)中介绍*添加一个Vuex
    Store*。
- en: 'Create a `.js` file and encapsulate the following functions in the `actions` and `mutations` objects:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`.js`文件，并将以下函数封装在`actions`和`mutations`对象中：
- en: '[PRE34]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Use the preceding store `action` method, which is `setNumbers`, on any page
    you like, such as the following example:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在任何您喜欢的页面上使用前面的存储`action`方法，例如以下示例：
- en: '[PRE35]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Run the page on the browser and you should get the following output on the
    screen (even when you refresh the page):'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器上运行页面，您应该在屏幕上得到以下输出（即使在刷新页面时也是如此）：
- en: '[PRE36]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Click the Update Store button and the store default state with the preceding numbers
    will be changed as follows:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击“更新存储”按钮，前面的数字将更改为存储默认状态如下：
- en: '[PRE37]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: That is great. In this way, we can write a plugin that works on both the client
    and server sides. But sometimes, we need functions that can be used on either
    the server side or client side exclusively. To do this, we must instruct Nuxt
    how to run our functions specifically. So let's find out how you can do that in
    the next section.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 这很棒。通过这种方式，我们可以编写一个在客户端和服务器端都能工作的插件。但有时，我们需要能够在服务器端或客户端独占地使用的函数。为了做到这一点，我们必须指示Nuxt如何专门运行我们的函数。让我们在下一节中找出如何做到这一点。
- en: Injecting client-only or server-only plugins
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 注入仅客户端或仅服务器端的插件
- en: 'In this example, we will create a function for dividing two numbers, for example,
    8 / 2 = 4, and another function for subtracting two numbers, for example, 8 -
    2 = 6\. We will inject the first function into the Vue instance and make it specifically
    for client-side use only, while the second one we inject into the Nuxt context
    and make it specifically for server-side use only:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将创建一个用于除法的函数，例如，8 / 2 = 4，以及另一个用于减法的函数，例如，8 - 2 = 6。我们将将第一个函数注入到Vue实例中，并使其专门用于客户端使用，而将第二个函数注入到Nuxt上下文中，并使其专门用于服务器端使用。
- en: 'Create two functions and append them with `.client.js` and `.server.js` as
    follows:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建两个函数，并将它们分别附加`.client.js`和`.server.js`：
- en: '[PRE38]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: The function file that is appended with `.client.js` will run on the client
    side only, while the function file that is appended with `.server.js` will run
    on the server side only.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 附加`.client.js`的函数文件将仅在客户端运行，而附加`.server.js`的函数文件将仅在服务器端运行。
- en: 'Add the function file paths to the `plugins` property in the Nuxt config file:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将函数文件路径添加到Nuxt配置文件的`plugins`属性中：
- en: '[PRE39]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Use these plugins on any page you like, such as the following, for example:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在任何你喜欢的页面上使用这些插件，比如以下示例：
- en: '[PRE40]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Run the page on the browser and you should get the following output on the
    screen:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器上运行页面，你应该在屏幕上得到以下输出：
- en: '[PRE41]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Note that you will get the preceding result when you run the page on the browser for
    the first time, and even when you refresh the page. But after the first load,
    if you navigate to this page through `<nuxt-link>`, you will get the following
    output on the screen:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，当你在浏览器上首次运行页面时，你将得到前面的结果，即使在刷新页面时也是如此。但是在第一次加载后，如果你通过`<nuxt-link>`导航到这个页面，你将在屏幕上得到以下输出：
- en: '[PRE42]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Also, note that we must wrap the `$divide` method in the `process.client` if-condition
    because it is a function that only takes place on the client side. If you remove
    the `process.client` if-condition, you will get a server-side error in the browser:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，请注意我们必须将`$divide`方法包裹在`process.client`的if条件中，因为它是一个只在客户端执行的函数。如果你移除`process.client`的if条件，你将在浏览器中得到一个服务器端错误：
- en: '[PRE43]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'The same goes for the `$subtract` method: we must wrap it in the `process.server` if-condition
    because it is a function that only takes place on the server side. If you remove
    the `process.server` if-condition, you will get a client-side error on the browser:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`$subtract`方法也是一样的：我们必须将其包裹在`process.server`的if条件中，因为它是一个只在服务器端执行的函数。如果你移除`process.server`的if条件，你将在浏览器上得到一个客户端错误：
- en: '[PRE44]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: It may not be ideal to wrap the function in the `process.server` or
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 将函数包裹在`process.server`中可能不是理想的做法
- en: '`process.client` if-condition blocks every time we use it. But you don''t need
    to use the `process.client` if-condition on the Vue lifecycle hooks/methods that
    are called on the client side only, such as the `mounted` hook. So you can safely
    use your client-only function without the if-condition, as in the following example:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '`process.client`的if条件每次使用时都会被阻塞。但是在仅在客户端被调用的Vue生命周期钩子/方法上，比如`mounted`钩子，你不需要使用`process.client`的if条件。因此，你可以在不使用if条件的情况下安全地使用你的仅客户端函数，就像以下示例中一样：'
- en: '[PRE45]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'You will get an output of `4` in your browser''s console. The following table
    shows the eight Vue lifecycle hooks/methods and it is worth knowing that only
    two of them are called on both sides in a Nuxt app:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 你将在浏览器控制台中得到`4`的输出。下表显示了八个Vue生命周期钩子/方法，值得知道的是在Nuxt应用中只有其中两个会在两端被调用：
- en: '| **Server and Client** | **Client Only** |'
  id: totrans-136
  prefs: []
  type: TYPE_TB
  zh: '| **服务器和客户端** | **仅客户端** |'
- en: '|'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: beforeCreate ()
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: beforeCreate ()
- en: created ()
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: created ()
- en: '|'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: beforeMount ()
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: beforeMount ()
- en: mounted ()
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: mounted ()
- en: beforeUpdate ()
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: beforeUpdate ()
- en: updated ()
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: updated ()
- en: beforeDestroy ()
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: beforeDestroy ()
- en: destroyed ()
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: destroyed ()
- en: '|'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: 'Note that the `data` method that we have been using in our Vue and Nuxt apps
    is called on both sides, just like the `asyncData` method. So, you can use the
    `$divide` method, which is made specifically for client-side use, without the
    if-condition in the hooks only under the list of **Client Only**. Whereas with
    the `$subtract` method, which is specifically made for server-side use only, you
    can safely it without the if-condition in the `nuxtServerInit` action only, as
    in the following example:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们在Vue和Nuxt应用中一直在使用的`data`方法会在两端被调用，就像`asyncData`方法一样。因此，你可以在**仅客户端**列表下的钩子中使用`$divide`方法，它是专门为客户端使用而制作的，而不需要if条件。而对于`$subtract`方法，它是专门为仅在服务器端使用而制作的，你可以在`nuxtServerInit`动作中安全地使用它，就像以下示例中一样：
- en: '[PRE46]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'You will get an output of `6` when your app is running on the server side,
    even when you refresh a page (any page). It is worth knowing that the Nuxt context
    can be accessed through these methods only: `nuxtServerInit` and `asyncData`.
    The `nuxtServerInit` action gets to access the context as the second argument,
    while the `asyncData` method gets to access it as the first argument. We will
    cover the `nuxtServerInit` action in [Chapter 10](808b1fa6-d397-4c97-b45a-95de8238497a.xhtml), *Adding
    a Vuex Store*, but instead, right now in the next section, we will look at the
    JavaScript functions that are injected into the Nuxt context after the `nuxtServerInit`
    action, but before the Vue instance and plugins, as well as before the `$root` and
    Nuxt context injected functions that you have just previously learned. This type
    of function is called a Nuxt module and you will know how to write these modules
    by the end of this chapter. Let''s get going.'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 当您的应用在服务器端运行时，即使刷新页面（任何页面），您将得到`6`的输出。值得知道的是，只能通过这些方法访问Nuxt上下文：`nuxtServerInit`和`asyncData`。`nuxtServerInit`操作可以作为第二个参数访问上下文，而`asyncData`方法可以作为第一个参数访问上下文。我们将在[第10章](808b1fa6-d397-4c97-b45a-95de8238497a.xhtml)中介绍`nuxtServerInit`操作，*添加一个Vuex
    Store*，但是，现在在下一节中，我们将看一下在`nuxtServerInit`操作之后，但在Vue实例和插件之前以及在`$root`和Nuxt上下文注入的函数之前注入到Nuxt上下文中的JavaScript函数。这种类型的函数称为Nuxt模块，通过本章末尾，您将知道如何编写这些模块。让我们开始吧。
- en: Writing Nuxt modules
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写Nuxt模块
- en: 'A module is simply a top-level JavaScript function that is executed when Nuxt
    is started. Nuxt will call each module in order and wait for all modules to finish
    before continuing to call the Vue instance, the Vue plugins, and the global functions
    that are to be injected into `$root` and the Nuxt context. Because modules are
    called before them (i.e Vue instance, etc), we can use modules to override templates,
    configure webpack loaders, add CSS libraries, and perform other tasks that you
    need for your app. Besides this, modules can also be packaged into npm packages
    and shared with the Nuxt community. You can check out the following link for production-ready
    modules made by the Nuxt Community:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 模块只是一个顶级的JavaScript函数，在Nuxt启动时执行。Nuxt会按顺序调用每个模块，并在继续调用Vue实例、Vue插件和要注入到`$root`和Nuxt上下文中的全局函数之前等待所有模块完成。因为模块在它们之前被调用（即Vue实例等），我们可以使用模块来覆盖模板、配置webpack加载器、添加CSS库以及执行其他应用所需的任务。此外，模块也可以打包成npm包并与Nuxt社区共享。您可以查看以下链接，了解由Nuxt社区制作的生产就绪模块：
- en: '[https://github.com/nuxt-community/awesome-nuxt#official](https://github.com/nuxt-community/awesome-nuxt#official)'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/nuxt-community/awesome-nuxt#official](https://github.com/nuxt-community/awesome-nuxt#official)'
- en: 'Let''s give the Axios module a try, which is a module integrated with Axios
    ([https://github.com/axios/axios](https://github.com/axios/axios)) for Nuxt. It
    comes with features such as setting the base URL for the client and server sides
    automatically. We will discover some of its features in the coming chapters. If
    you want to find out more about this module, please visit [https://axios.nuxtjs.org/](https://axios.nuxtjs.org/).
    Right now, let''s find out how we can use this module in the following steps:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们试试Axios模块，这是一个与Axios集成的模块（[https://github.com/axios/axios](https://github.com/axios/axios)）用于Nuxt。它具有一些功能，例如自动设置客户端和服务器端的基本URL。我们将在接下来的章节中发现它的一些特性。如果您想了解更多关于这个模块的信息，请访问[https://axios.nuxtjs.org/](https://axios.nuxtjs.org/)。现在，让我们看看如何在以下步骤中使用这个模块：
- en: 'Install it with npm:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用npm安装它：
- en: '[PRE47]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Configure it in the Nuxt config file:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Nuxt配置文件中进行配置：
- en: '[PRE48]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Use it anywhere, for example, in the `asyncData` method on a page:'
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在任何地方使用，例如在页面的`asyncData`方法中：
- en: '[PRE49]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'You also can use it in the `mounted` method (or `created`, `updated`, and so
    on) as follows:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以在`mounted`方法（或`created`，`updated`等）中使用它，如下所示：
- en: '[PRE50]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: You should see your IP address on the browser's console every time you navigate
    to the `/about` page. You should notice that now you can send HTTP requests just
    like using vanilla Axios, without having to import it whenever you need it because
    it is now injected globally through the module. Wonderful, isn't it? Next, we
    will guide you through writing your modules by starting with a basic module.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 每次导航到`/about`页面时，您应该在浏览器控制台上看到您的IP地址。您应该注意到现在您可以像使用原始Axios一样发送HTTP请求，而无需在需要时导入它，因为它现在通过模块全局注入。很棒，不是吗？接下来，我们将通过从基本模块开始编写您的模块来指导您。
- en: Writing a basic module
  id: totrans-164
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编写基本模块
- en: 'As we have mentioned already, modules are functions, and they can be optionally
    packaged as npm modules. This is the very basic structure you need to create a
    module:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们已经提到的，模块是函数，它们可以选择地打包为npm模块。这是您创建模块所需的非常基本的结构：
- en: '[PRE51]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'You just need to create a `/modules/` directory in your project root and then
    start writing the code for your module. Note that you must include this following
    line if you want to publish your module as an npm package:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 您只需在项目根目录中创建一个`/modules/`目录，然后开始编写您的模块代码。请注意，如果您想将模块发布为npm包，必须包含以下行：
- en: '[PRE52]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'If you want to create the module and publish it as an npm package, follow this
    template from the Nuxt community:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想创建模块并将其发布为npm包，请按照Nuxt社区的此模板：
- en: '[https://github.com/nuxt-community/module-template/tree/master/template](https://github.com/nuxt-community/module-template/tree/master/template)'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/nuxt-community/module-template/tree/master/template](https://github.com/nuxt-community/module-template/tree/master/template)'
- en: 'Whether you are creating a module for the Nuxt community or your own project
    only, each module can access the following things:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 无论您是为Nuxt社区还是仅为自己的项目创建模块，每个模块都可以访问以下内容：
- en: '**The module options:**'
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模块选项：**'
- en: 'We can pass some options in a JavaScript object to the module from the config
    file, for example:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以从配置文件中向模块传递JavaScript对象中的一些选项，例如：
- en: '[PRE53]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'Then you can access the preceding option as `moduleOptions` in the first argument
    of your module function, as follows:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您可以在模块函数的第一个参数中将前述选项作为`moduleOptions`访问，如下所示：
- en: '[PRE54]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'You will get the following options that you pass from the config file:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 您将获得从配置文件中传递的以下选项：
- en: '[PRE55]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: '**The configuration options:**'
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**配置选项：**'
- en: 'We also can create a custom option (for example, `token`, `proxy`, or `basic`)
    and pass some specific options to the module (this custom option can be used to
    share between modules), as in the following example:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以创建一个自定义选项（例如`token`，`proxy`或`basic`），并将一些特定选项传递给模块（这个自定义选项可以在模块之间共享使用），如下例所示：
- en: '[PRE56]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'Then you can access the preceding custom option using `this.options`, as shown:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您可以使用`this.options`访问前述自定义选项，如下所示：
- en: '[PRE57]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'You will get the following options that you pass from the config file:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 您将获得从配置文件中传递的以下选项：
- en: '[PRE58]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'We can then also combine `moduleOptions` and `this.options` as follows:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们可以将`moduleOptions`和`this.options`组合如下：
- en: '[PRE59]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'You will get the following combined options that you pass from the config file:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 您将获得从配置文件中传递的以下组合选项：
- en: '[PRE60]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: '**The Nuxt instance:**'
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Nuxt实例：**'
- en: 'You can use `this.nuxt` to access the Nuxt instance. Please visit the following link
    for available methods (for example, the `hook` method, which we can use to create
    certain tasks on specific events when booting Nuxt):'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用`this.nuxt`来访问Nuxt实例。请访问以下链接以获取可用方法（例如`hook`方法，我们可以使用它在Nuxt启动时创建特定事件的某些任务）：
- en: '[https://nuxtjs.org/api/internals-nuxt](https://nuxtjs.org/api/internals-nuxt)'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://nuxtjs.org/api/internals-nuxt](https://nuxtjs.org/api/internals-nuxt)'
- en: '**The `ModuleContainer` instance:**'
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**`ModuleContainer`实例：**'
- en: 'You can use `this` to access the `ModuleContainer` instance. Please visit the
    following link for available methods (for example, the `addPlugin` method, which
    we use quite often in a module to register a plugin):'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用 `this` 来访问 `ModuleContainer` 实例。请访问以下链接以获取可用方法（例如，`addPlugin` 方法，我们在模块中经常使用它来注册插件）：
- en: '[https://nuxtjs.org/api/internals-module-container](https://nuxtjs.org/api/internals-module-container)'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://nuxtjs.org/api/internals-module-container](https://nuxtjs.org/api/internals-module-container)'
- en: '**The `module.exports.meta` code line:**'
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**`module.exports.meta` 代码行：**'
- en: 'If you are publishing your module as an npm package then this line is required,
    as we mentioned earlier. But in this book, we will guide you through the steps
    of creating modules for your project. Let''s get started by creating a really
    basic module in the following steps:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您将您的模块发布为 npm 包，则此行是必需的，正如我们之前提到的。但在本书中，我们将指导您完成为您的项目创建模块的步骤。让我们通过以下步骤开始创建一个非常基本的模块：
- en: 'Create a `module` file with the following code:'
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个带有以下代码的 `module` 文件：
- en: '[PRE61]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'Create a `plugin` file with the following code:'
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个带有以下代码的 `plugin` 文件：
- en: '[PRE62]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: Note that the `<%= %>` symbols are interpolation delimiters used by Lodash for
    interpolating data properties in the `template` function. We will cover them again
    later in this chapter. For more information about the Lodash `template` function,
    please visit [https://lodash.com/docs/4.17.15#template](https://lodash.com/docs/4.17.15#template).
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`<%= %>` 符号是 Lodash 用于在 `template` 函数中插入数据属性的插值分隔符。我们稍后将在本章再次介绍它们。有关 Lodash
    `template` 函数的更多信息，请访问 [https://lodash.com/docs/4.17.15#template](https://lodash.com/docs/4.17.15#template)。
- en: 'Include the module file path (`/modules/basic/module.js`) only in the Nuxt
    config file and provide some options with the `basic` custom option as follows:'
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 仅在 Nuxt 配置文件中包含模块文件路径（`/modules/basic/module.js`），并提供一些选项，如下所示使用 `basic` 自定义选项：
- en: '[PRE63]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'Use it anywhere you like, such as the following, for example:'
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以在任何地方使用它，例如：
- en: '[PRE64]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'You should see the following output on the browser''s console every time you
    visit the home page:'
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 每次访问主页时，您应该在浏览器控制台上看到以下输出：
- en: '[PRE65]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: Notice how `module.js` handles high-level configuration details, such as languages
    and options. It is also responsible for registering the `plugin.js` file, which
    does the actual work. As you can see, the module is a wrapper around a plugin.
    We will study this more in the following sections.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意 `module.js` 如何处理高级配置细节，例如语言和选项。它还负责注册 `plugin.js` 文件，该文件执行实际工作。正如您所看到的，该模块是围绕插件的一个包装器。我们将在接下来的章节中更详细地学习这一点。
- en: Note that if you are writing modules only for build time and development, then
    use the `buildModules` option in the Nuxt config file to register your modules,
    instead of using the `modules` option for the Node.js runtime. For more information
    about this option, please visit [https://nuxtjs.org/guide/modules#build-only-modules](https://nuxtjs.org/guide/modules#build-only-modules)
    and [https://nuxtjs.org/api/configuration-modules](https://nuxtjs.org/api/configuration-modules).
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，如果您只为构建时间和开发编写模块，则应在 Nuxt 配置文件中使用 `buildModules` 选项来注册您的模块，而不是在 Node.js
    运行时使用 `modules` 选项。有关此选项的更多信息，请访问 [https://nuxtjs.org/guide/modules#build-only-modules](https://nuxtjs.org/guide/modules#build-only-modules)
    和 [https://nuxtjs.org/api/configuration-modules](https://nuxtjs.org/api/configuration-modules)。
- en: Writing async Nuxt modules
  id: totrans-211
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写异步 Nuxt 模块
- en: If you need to use a `Promise` object in your module, for example, to fetch
    some async data from a remote API using an HTTP client, then Nuxt can perfectly
    support that. The following are some of the options you can write your async modules with.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您需要在模块中使用 `Promise` 对象，例如，使用 HTTP 客户端从远程 API 获取一些异步数据，那么 Nuxt 可以完美支持。以下是一些选项，您可以使用这些选项编写您的 async
    模块。
- en: Using async/await
  id: totrans-213
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 async/await
- en: 'You can use ES6 async/await in your module with Axios, the HTTP client that
    we have been using since [Chapter 4](aa55a711-4ba3-45e1-bad6-96067701bba7.xhtml),
    *Adding Views, Routes, and Transitions*, such as in the following example:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'In the preceding example, we use the `get` method from Axios to get all posts
    from the remote API, JSONPlaceholder ([https://jsonplaceholder.typicode.com/](https://jsonplaceholder.typicode.com/)).
    You should see the following output printed to your terminal when you boot your
    Nuxt app for the first time:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: Returning a Promise
  id: totrans-218
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can use a promise chain in your module and return the `Promise` object,
    as in the following example:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'In this example, we use the `get` method from Axios to get all comments from
    the remote API. Then we use the `then` method to `chain` the `Promise` and print
    the result. You should see the following output printed to your terminal when
    you boot your Nuxt app for the first time:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: You can find these two examples in `/chapter-6/nuxt-universal/modules/async/`
    in our GitHub repository.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
- en: With these two asynchronous options and the basic module writing skills that
    you have learned from the previous sections, you can start creating your Nuxt
    modules easily. We will look at more examples in the next section by writing small
    pieces of modules – **snippets**.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
- en: Writing Nuxt module snippets
  id: totrans-225
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this topic, we are going to break down the custom modules we've created into
    small pieces – snippets.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
- en: You can find all the following code in `/chapter-6/nuxt-universal/module-snippets/` in
    our GitHub repository.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
- en: Using top-level options
  id: totrans-228
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Remember the configuration options that we said can be passed into a module
    in the *Writing a basic module *section? Module options are top-level options
    for registering our modules in the Nuxt config file. We can even combine multiple
    options from the different modules and their options can be shared. Let''s try
    an example of using `@nuxtjs/axios` and `@nuxtjs/proxy` together in the following
    steps:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
- en: 'Install these two modules together using npm:'
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE70]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: These two modules are well integrated to prevent CORS problems, which we will
    see and discuss later in this book when developing cross-domain apps. It is not
    required to manually register the `@nuxtjs/proxy` module, but it does need to
    be in the dependencies in your `package.json` file.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
- en: 'Register the `@nuxtjs/axios` module and set the top-level options for these
    two modules in the Nuxt config file:'
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE71]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'The `proxy: true` option in the `axios` custom option tells Nuxt to use the
    `@nuxtjs/proxy` module as the proxy. The `/api/: {...}` option in the `proxy`
    custom option tells the `@nuxtjs/axios` module to use [https://jsonplaceholder.typicode.com/](https://jsonplaceholder.typicode.com/)
    as the target address for the API server, while the `pathRewrite` option tells
    the `@nuxtjs/axios` module to remove `/api/` from the address during the HTTP
    request because there is no route with `/api` in the target API.'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, use them seamlessly in any component, as in the following example:'
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE72]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: Using these two modules together, we now can just write shorter API addresses,
    such as `/api/users` instead of `https://jsonplaceholder.typicode.com/users`,
    in the request methods (for example, `get`, `post`, and `put`). This makes our
    code neater as we don't have to write the full URL on each call. Note that the `/api/` 
    address that we configured in the Nuxt config file will be added to all requests
    to the API endpoint. So we use `pathRewrite`, as we already explained, to remove
    it when sending the request.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
- en: 'You can find out more info and top-level options provided by these two modules
    at the following links:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
- en: '[https://axios.nuxtjs.org/options](https://axios.nuxtjs.org/options) for `@nuxtjs/axios`'
  id: totrans-240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://github.com/nuxt-community/proxy-module](https://github.com/nuxt-community/proxy-module) for `@nuxtjs/proxy`'
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can find the example module snippet we've just created in `/chapter-6/nuxt-universal/module-snippets/top-level/` in
    our GitHub repository.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
- en: Using the addPlugin helper
  id: totrans-243
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Remember the `ModuleContainer` instance and the `this.addPlugin` helper method that
    you can access via the `this` keyword that we covered in the *Writing a basic
    module* section? In this example, we will create a module that provides a plugin
    by using this helper, and that plugin is `bootstrap-vue`, which will be registered
    in the Vue instance. Let''s create this module snippet with the following steps:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
- en: 'Install Bootstrap and BootstrapVue:'
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE73]'
  id: totrans-246
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: 'Create a plugin file to import `vue` and `bootstrap-vue` and then register
    `bootstrap-vue` using the `use` method:'
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE74]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: 'Create a module file to add the plugin file we just created using the `addPlugin`
    method:'
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE75]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: 'Add the file path of this `bootstrap` module in the Nuxt config file:'
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE76]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: 'Start using `bootstrap-vue` on any component you like; for example, let''s
    create a button to toggle an alert text in Bootstrap as follows:'
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE77]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: With this module snippet, we don't have to import `bootstrap-vue` each time
    we need it on a component because it is already added globally via the preceding snippet
    module. We only need to import its CSS files. In the usage example, we use Bootstrap's
    custom `<b-button>` component to toggle Bootstrap's custom `<b-alert>` component.
    The `<b-button>` component will then toggle the text, 'Hide' or 'Show', on that
    button.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
- en: For more information on BootstrapVue, please visit [https://bootstrap-vue.js.org/](https://bootstrap-vue.js.org/). You
    can find the example module snippet we just created in `/chapter-6/nuxt-universal/module-snippets/provide-plugin/`
    in our GitHub repository.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
- en: Using Lodash templates
  id: totrans-257
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Again, this is something we are familiar with from the custom module that we
    created in the *Writing a basic module *section – leveraging the Lodash templates
    to change the output of the registered plugin by using if-condition blocks. Again,
    Lodash templates are the blocks of code with which we can interpolate data properties
    with the `<%= %>` interpolation delimiters. Let''s try another simple example
    in the following steps:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a plugin file to import `axios` and add the if-condition blocks to make
    sure the request URL is provided for `axios`, and to print the request result
    on the terminal when your Nuxt app is running in `dev` mode (`npm run dev`) for
    debugging:'
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE78]'
  id: totrans-260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: 'Create a `module` file to add the plugin file we just created using the `addPlugin`
    method, with the `options` option to pass on the request URL and the Boolean value
    of `this.options.dev` to this plugin:'
  id: totrans-261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE79]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: 'Add the file path of this module to the Nuxt config file:'
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE80]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: 'Start using the `$getUsers` method on any component you like, as in the following
    example:'
  id: totrans-265
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE81]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: In the preceding example, Nuxt will replace `options.url` with `https://jsonplaceholder.typicode.com/users`
    when copying the plugin to the project. The if-condition block of `options.debug`
    will be stripped off from the plugin code on production builds, so you won't see
    the `console.log` output on your terminal in the production mode (`npm run build`
    and `npm run start`).
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
- en: You can find the example module snippet we just created in `/chapter-6/nuxt-universal/module-snippets/template-plugin/`
    in our GitHub repository.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
- en: Adding a CSS library
  id: totrans-269
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In our module snippet example in the *Using the addPlugin helper* section,
    we created a module that allows us to use the `bootstrap-vue` plugin globally
    in our app without having to use the `import` statement to require this plugin,
    as in the following example:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: 'It looks quite neat as we don''t have to import `bootstrap-vue` every time,
    instead only having to import the CSS styles. However, we still can save a couple
    of lines by adding the styles to the global CSS stack of our app through the module.
    Let''s create a new example and see how we can do that in the following steps:'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a module file with a `const` variable called `options` for passing the
    module and top-level options to the plugin file, and an if-condition block to
    determine whether to use the vanilla JavaScript `push` method to `push` the CSS
    files to the `css` options in the Nuxt config file:'
  id: totrans-273
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE83]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: 'Create a plugin file with the registration of the `bootstrap-vue` plugin, and
    an if-condition Lodash-template block to print the options that are processed
    from the module file:'
  id: totrans-275
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE84]'
  id: totrans-276
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: 'Add the file path of the module to the Nuxt config file, with the module options
    specifying whether to disable the CSS files in the module file or not. Also, add
    the top-level options, `bootstrap`, to pass on the Boolean value to the `debug`
    option:'
  id: totrans-277
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE85]'
  id: totrans-278
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: 'Remove the CSS files from our component:'
  id: totrans-279
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE86]'
  id: totrans-280
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: 'So, finally, we can use the `bootstrap-vue` plugin and its CSS files in our
    component without having to import all of them. Here''s another quick example
    of pushing the Font Awesome `css` options to the Nuxt config file through the
    module snippet:'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE87]'
  id: totrans-282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: If you want to find out more information about Font Awesome, please visit [https://fontawesome.com/](https://fontawesome.com/).
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
- en: You can find the example module snippet we just created in `/chapter-6/nuxt-universal/module-snippets/css-lib/`
    in our GitHub repository.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
- en: Registering custom webpack loaders
  id: totrans-285
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When we want to extend the webpack config in Nuxt, we usually do it in `nuxt.config.js`
    with `build.extend`. But we can do the same through a module by using `this.extendBuild`
    with the following module/loader template:'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE88]'
  id: totrans-287
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: 'For example, let''s say we want to extend our webpack config with `svg-transform-loader`,
    which is a webpack loader for adding or modifying tags and attributes in an SVG
    image. The main purpose of this loader is to allow us to use `fill`, `stroke`,
    and other manipulations on SVG images. We also can use it in CSS, Sass, Less,
    Stylus, or PostCSS; for example, if you want to fill an SVG image with the white
    color, you can use `fill` to add `fff` (the CSS color white code) to the image
    as follows:'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE89]'
  id: totrans-289
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: 'If you want to `stroke` the SVG image by using a variable in Sass, you can
    do it as follows:'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE90]'
  id: totrans-291
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: 'Let''s create an example module to register this loader to the Nuxt webpack
    default config so that we can manipulate the SVG images in our Nuxt app with the
    following steps:'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
- en: 'Install the loader using npm:'
  id: totrans-293
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE91]'
  id: totrans-294
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: 'Create a module file using the module/loader template we provided previously
    as follows:'
  id: totrans-295
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE92]'
  id: totrans-296
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: 'Inside the callback of `this.extendBuild`, add the following lines to find
    the file loader and remove `svg` from its existing rule test:'
  id: totrans-297
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE93]'
  id: totrans-298
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: 'Add the following block of code right after the preceding code block to `push` the
    `svg-transform-loader` loader into the default webpack config''s module rules:'
  id: totrans-299
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE94]'
  id: totrans-300
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: The module is now completed and we can move on to *step 5*.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the file path of this module to the Nuxt config file:'
  id: totrans-302
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE95]'
  id: totrans-303
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: 'Start transforming any SVG images in our component, such as the following,
    for example:'
  id: totrans-304
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE96]'
  id: totrans-305
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: 'You can find out more information about `svg-transform-loader` at [https://www.npmjs.com/package/svg-transform-loader](https://www.npmjs.com/package/svg-transform-loader).
    If you want to learn more about the rule test, and to see the full content of
    the Nuxt default webpack config, please visit the following links:'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
- en: '[https://webpack.js.org/configuration/module/ruletest](https://webpack.js.org/configuration/module/#ruletest) for
    the webpack rule test'
  id: totrans-307
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://github.com/nuxt/nuxt.js/blob/dev/packages/webpack/src/config/base.js](https://github.com/nuxt/nuxt.js/blob/dev/packages/webpack/src/config/base.js) for
    the Nuxt default webpack configuration'
  id: totrans-308
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can find the example module snippet we just created in `/chapter-6/nuxt-universal/module-snippets/webpack-loader/`
    in our GitHub repository.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
- en: Registering custom webpack plugins
  id: totrans-310
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Nuxt modules not only allow us to register webpack loaders but also webpack
    plugins by using `this.options.build.plugins.push` in the following module/plugin
    architecture:'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE97]'
  id: totrans-312
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: 'The `<tap>` depends on the hook type; it can be `tapAsync`, `tapPromise`, or
    just `tap`. Let''s create a very simple "Hello World" webpack plugin through a
    Nuxt module in the following steps:'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a module file using the module/plugin architecture we''ve provided for
    printing "Hello World!" as follows:'
  id: totrans-314
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE98]'
  id: totrans-315
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: Note that `stats` (statistics) is passed as the argument when the `done` hook
    is tapped.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the file path of this module to the Nuxt config file:'
  id: totrans-317
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE99]'
  id: totrans-318
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: Run your Nuxt app with `$ npm run dev`, you should see "Hello World!" on your
    terminal.
  id: totrans-319
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note that the `apply` method, `compiler`, `hooks`, and the taps are all key
    parts of building a webpack plugin.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
- en: If you are new to webpack plugins and want to learn more about how to develop
    plugins for webpack, please visit [https://webpack.js.org/contribute/writing-a-plugin/](https://webpack.js.org/contribute/writing-a-plugin/).
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
- en: You can find the example module snippet we just created in `/chapter-6/nuxt-universal/module-snippets/webpack-plugin/`
    in our GitHub repository.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
- en: Creating tasks on specific hooks
  id: totrans-323
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you need to do certain tasks on a specific life cycle event (for example,
    when all modules have finished loading) when Nuxt is being booted, you can create
    a module and use the `hook` method to listen on that event and then do the task.
    Consider the following examples:'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to do something when all modules have finished loading, try the
    following:'
  id: totrans-325
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE100]'
  id: totrans-326
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: 'If you want to do something after the renderer has been created, try the following:'
  id: totrans-327
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE101]'
  id: totrans-328
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: 'If you want to do something before the compiler (webpack is the default) starts,
    try the following:'
  id: totrans-329
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE102]'
  id: totrans-330
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: 'If you want to do something before Nuxt generates your pages, try the following:'
  id: totrans-331
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE103]'
  id: totrans-332
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: 'If you want to do something when Nuxt is ready, try the following:'
  id: totrans-333
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE104]'
  id: totrans-334
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: 'Let''s create a simple module to listen on the `modules:done` hook/event in
    the following steps:'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a module file for printing `''All modules are loaded''` when all modules
    are loaded:'
  id: totrans-336
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE105]'
  id: totrans-337
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: 'Create a few more modules for printing `''Module 1''`, `''Module 2''`, `''Module
    3''`, and so on, as follows:'
  id: totrans-338
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE106]'
  id: totrans-339
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: 'Add the file path of the hook module and other modules to the Nuxt config file:'
  id: totrans-340
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE107]'
  id: totrans-341
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: 'Run your Nuxt app with `$ npm run dev` and you should see the following output
    on your terminal:'
  id: totrans-342
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE108]'
  id: totrans-343
  prefs: []
  type: TYPE_PRE
  zh: '[PRE108]'
- en: You can see that the hook module is always printed last, while the rest are
    printed according to their orders in the `modules` option.
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
- en: Hook modules can be asynchronous, whether you are using `async/ await` functions
    or returning a `Promise`.
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
- en: 'For more information about the preceding hooks and other hooks in the Nuxt''s
    life cycle events, please visit the following links:'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
- en: '[https://nuxtjs.org/api/internals-module-containerhooks](https://nuxtjs.org/api/internals-module-container#hooks) for
    Nuxt''s module life cycle event (the `ModuleContainer` class)'
  id: totrans-347
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://nuxtjs.org/api/internals-builderhooks](https://nuxtjs.org/api/internals-builder#hooks) for
    Nuxt''s build life cycle event (the `Builder` class)'
  id: totrans-348
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://nuxtjs.org/api/internals-generatorhooks](https://nuxtjs.org/api/internals-generator#hooks) for
    Nuxt''s generate life cycle event (the `Generator` class)'
  id: totrans-349
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://nuxtjs.org/api/internals-rendererhooks](https://nuxtjs.org/api/internals-renderer#hooks) for
    Nuxt''s render life cycle event (the `Renderer` class)'
  id: totrans-350
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://nuxtjs.org/api/internals-nuxthooks](https://nuxtjs.org/api/internals-nuxt#hooks) for
    the life cycle events in Nuxt itself (the `Nuxt` class)'
  id: totrans-351
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can find the example module snippet we just created in `/chapter-6/nuxt-universal/module-snippets/hooks/`
    in our GitHub repository.
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-353
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have successfully covered plugins and modules in Nuxt. You
    have learned that they are technically JavaScript functions that you can create
    for your project, or import them from an external source. Also, you have learned
    to create global functions in the Nuxt environment by injecting them into the
    Vue instance or the Nuxt context, or both, for your Nuxt apps, as well as creating
    client-only and server-only functions. Finally, you have learned to create module
    snippets for adding JavaScript libraries by using the `addPlugin` helper, adding
    CSS libraries globally, using Lodash templates to conditionally change the output
    of a registered plugin, adding webpack loaders and plugins to the Nuxt default
    webpack configuration, and creating tasks with the Nuxt lifecycle event hooks,
    such as `modules:done`.
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
- en: In the coming chapter, we are going to explore Vue forms and adding them to
    Nuxt apps. You will understand how `v-model` works in HTML elements such as `text`,
    `textarea`, `checkbox`, `radio`, and `select`. You will learn how to validate
    these elements in Vue apps, binding default and dynamic data, and using modifiers
    such as `.lazy` and `.trim` to modify or enforce the input value. You will also
    learn to validate them using the Vue plugin, `vee-validate`, and then apply them
    to Nuxt apps. We will guide you through all these areas smoothly. So stay tuned.
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
