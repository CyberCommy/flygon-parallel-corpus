- en: Ansible Setup and Configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As Ansible is agentless, unlike other configuration management platforms, it
    only requires a master node installation. Ansible is also particularly light due
    to its lack of daemons, database reliance, and keep-on-running services.
  prefs: []
  type: TYPE_NORMAL
- en: 'Following our introduction to Ansible, we are now going to look at different
    ways of installing Ansible in your environment, such as bare-metal, in the cloud,
    and the use of Docker containers. We will also look at how to install Ansible
    on multiple Linux operating systems, both from a package manager and from the
    source. Finally, we will look at how to prepare and configure a host so that it
    is Ansible-controllable. This chapter will cover the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Ansible master nodes and basic Linux installation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ansible container setup
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ansible source installation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ansible AWS instance setup
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ansible configuration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ansible configuration on Linux and Windows clients
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ansible master node installation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Ansible uses **Secure Shell** (**SSH**) and WinRM to manage its host clients.
    All installation happens on either the management node or the master node, or
    possibly on multiple nodes when redundancy is needed. We will proceed into the
    installation of Ansible from source, as with Python PyPI on two major Linux families:
    Debian (which includes Debian, Linux Mint, Kali Linux, Ubuntu, and Ubuntu Mate)
    and Red Hat (which includes Red Hat, Fedora, CentOS, and Scientific Linux). We
    will also be looking at the Ansible installation process for Mac OS X, Python
    PyPI, and how to install it from the source. We will cover cloud usage and containerized
    Ansible.'
  prefs: []
  type: TYPE_NORMAL
- en: If you have a choice, we recommend using the default package manager for Red
    Hat, CentOS, Debian, Ubuntu, and Mac OS X. Using the package manager allows the
    installation of the latest stable version of Ansible. Python PyPI can also be
    relied on for its capacity to deliver the latest stable version of Ansible, especially
    when using an old LTS or a stable Linux version.
  prefs: []
  type: TYPE_NORMAL
- en: For use in a cloud environment, there are many community instances of Ansible.
    We recommend using the most popular instance with the appropriate version.
  prefs: []
  type: TYPE_NORMAL
- en: Prerequisites
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this respect, Ansible is awesome. For a Linux package installation, all you
    need is Python 2 (version 2.6 or higher) or Python 3 (version 3.5 or higher).
    For source installation, we may need the development suite, such as the `build-essential`
    package for the Debian family, or the `Development Tools` group package for the
    Red Hat family.
  prefs: []
  type: TYPE_NORMAL
- en: Most package managers of Linux operating systems will automatically download
    the appropriate Python version and its dependencies when asked to install Ansible.
  prefs: []
  type: TYPE_NORMAL
- en: As for Mac OS X, having Homebrew and Xcode installed should do the job. Bear
    in mind that these are a requirement needed to install the Ansible package.
  prefs: []
  type: TYPE_NORMAL
- en: Before using Ansible Mac OS X, you need to run a command as a root user to allow
    yourself to control more than 15 hosts. This has something to do with the limit
    of files to be handled simultaneously. The command is `sudo launchctl limit maxfiles unlimited`.
  prefs: []
  type: TYPE_NORMAL
- en: With regard to the Ansible container installation, we need a container engine.
    In our case, we will be using Docker, or any equivalent platform, such as Singularity
    or Shifter. For the cloud installation, all we need is an SSH client to connect
    to the AWS instance. Other cloud providers, such as Google Cloud Platform or Microsoft
    Azure, also support Ansible instances.
  prefs: []
  type: TYPE_NORMAL
- en: You can always create your own customized cloud instance on any platform. Our
    recommendations are for the vast majority of use cases where we believe that the
    AWS-supported and community instances are tested by many users, and they are as
    stable and reliable as they can be.Other requirements are not mentioned here because
    they are not strictly essential for the Ansible main functions and modules, but
    instead for very specific plugins and modules. We will cover these when we talk
    about those modules and plugins.
  prefs: []
  type: TYPE_NORMAL
- en: Red Hat, CentOS, and Fedora package installation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you are using Yellowdog Updater, Modified (Yum), you will have an extra
    step, since Ansible is not located in the default RHEL repositories. As you may
    have experienced when installing tools in the past, the **Extra Package for Enterprise
    Linux** (**EPEL**) is often required to be installed before you can use the package
    manager to install the tools. This is a very straightforward step. We first need to
    download the `epel-release` `rpm` file from the Fedora Project website: [http://fedoraproject.org/wiki/EPE](http://fedoraproject.org/wiki/EPEL)[L](http://fedoraproject.org/wiki/EPEL).
    We then need to install it using `rpm` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Tools downloaded from EPEL are not actually tested by Red Hat quality engineers,
    therefore extra care should be taken when downloading on production servers it
    as may disrupt support.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Ansible engine repository (available at [https://access.redhat.com/articles/3174981](https://access.redhat.com/articles/3174981))
    is another valid repository to download the latest releases from Ansible. To access
    its packages using Red Hat Linux only, we first need to enable it as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'After that, the package manager will need to update its cache, the package
    list. We use Yum to do so, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Just like installing any other package using Yum, we need to specify `ansible`
    as the input for the `install` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Most of the Red Hat family operating systems should accept those commands to
    set up Ansible. Fedora 18 and later versions have a next-generation package manager,
    **Dandified Yum** (**DNF**). This is currently the default package manager from
    Fedora 22 and onwards. After installing the EPEL package using RPM, we need to
    run the following command to update the DNF package list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'We then install Ansible using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Using the Red Hat family of operating systems, Ansible installation can be
    done by getting the appropriate RPM file and installing it using RPM. First, we
    need to download the appropriate RPM file from the Ansible releases link: [https://releases.ansible.com/ansible/rpm/](https://releases.ansible.com/ansible/rpm/)*.*
    Download the RPM file with the desired Ansible version and install it as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'If needed, RPM files can also be built and installed from a source easily.
    We recommend using the official GitHub Ansible repository. Firstly, we need to
    get the project folder using Git. We may need to have Git installed already to
    be able to download it easily:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we need to build the Ansible `rpm` file and install it using the same
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Debian package installation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For Debian users, as you may already know, if you want to use the latest versions
    of a tool, you need to be running the latest stable or testing release of the
    Debian OS. The testing release is not recommended, but is used by some people.
    Because Debian is very reliable, operating system administrators tend to set up
    a Debian server and then forget about it for years and years, because it continues
    to do what it is supposed to do without a single problem. Often, administrators
    tend to have lots of old, stable Debian releases running. We don't recommend using
    these if you want to have the latest Ansible version, with all its perks, modules,
    and plugins, unless you do an alternative installation (with PyPI, a source installation,
    or via a container).
  prefs: []
  type: TYPE_NORMAL
- en: 'We are going to be using Debian 9 (Stretch) as it is the latest Debian stable
    release. Debian 9 allows you to use many Ubuntu package sources for Ansible. We
    can either add the DEB line to the `source.list` file or add the **Personal Package
    Archives** (**PPA**) to the list. First, we need to install the software properties
    package:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'We then use a text editor and add the following DEB to `/etc/apt/source.list`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'A faster way to add a DEB line at the end of the source file is as follows:
    `echo "deb http://ppa.launchpad.net/ansible/ansible/ubuntu trusty main" >> /etc/apt/source.list`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Then authenticate the link by adding its key to `apt`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'For the latest Debian release, the PPA repository can be used directly as well,
    by adding the link to the APT repository: `sudo apt-add-repository ppa:ansible/ansible`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Usually, adding a repository requires you to update the package manager cache:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Then we can install Ansible:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Most of the tutorials in further chapters are carried out on Debian 8 (Jessie)
    with Ansible installed and updated using Python PyPI. This is just as stable,
    up to date, and reliable as any other standard way of installing Ansible on an
    operating system's latest release.
  prefs: []
  type: TYPE_NORMAL
- en: Ubuntu package installation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The best way to install Ansible on a recent release is to add the Ansible PPA
    for Ubuntu `ppa:ansible/ansible` (`launchpad.net/~ansible/+archive/ubuntu/ansible`).
    This should be added using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Adding a PPA repository requires you to confirm a key server setup. This is
    accepted by pressing *Enter*.
  prefs: []
  type: TYPE_NORMAL
- en: 'We then need to update the package manager cache, also called the system packages
    index, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we can install Ansible:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: macOS X package installation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Installing Ansible on the MAC OS X system can be achieved using one of two tools.
    The first, which uses Python PyPI, is described in the following section. The
    second uses the Mac OS X open source package management system Homebrew (brew.sh).
    In this section, we will be describing how to install Ansible using Homebrew.
  prefs: []
  type: TYPE_NORMAL
- en: 'To be able to use Homebrew, we first need to make sure it is installed, as
    it is not a default system application. You need to build it into the system using
    a Ruby compiler. For that, you also need to install Xcode (found here: [developer.apple.com/xcode/](http://developer.apple.com/xcode/))
    and accept its user license. We then run the following command on its Terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: This command may take some time depending on your internet access and computer
    speed.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can then use Homebrew to install Ansible:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Python PyPI installation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To be able to install Ansible using PyPI, we first need to have PyPI installed.
    It can be easily installed using most package managers, some of which are outlined
    in the following section.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Red Hat Yum installation is implemented as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'The Debian APT installation uses the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'For other Linux systems, using Python:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'The Mac OS X Homebrew installation is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'From the PyPI repository, by having PyPI installed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'We can also use a GitHub source to get the latest development version:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'To choose a specific version of Ansible using PyPI, we can use the following
    command: `sudo pip install ansible==2.4.0`. To upgrade the latest version, we
    can add the `--upgrade` option so the command looks as follows: `sudo pip install
    ansible --upgrade`.'
  prefs: []
  type: TYPE_NORMAL
- en: Source GitHub or tarball installation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Being able to build up Ansible from its source is helpful for users in an uncommon
    environment, or for those who have some special requirements, such as setting
    up Ansible without the need of a package manager or being limited to the latest
    stable version of Ansible. Using the development version of Ansible (or beta)
    always puts its user at risk of having unstable modules and plugins, but also
    allows for early access to future modules.
  prefs: []
  type: TYPE_NORMAL
- en: 'To acquire Ansible''s source package, we can use two different methods: downloading
    the `.tar` file, or cloning the GitHub repository of the project. The Ansible
    project source files are located in its releases page (`releases.ansible.com/ansible/`),
    and the GitHub source can be cloned from the official GitHub project (`github.com/ansible/ansible`).'
  prefs: []
  type: TYPE_NORMAL
- en: 'To download the tarball file, use your favorite file fetching tool (such as
    curl, wget, or axel):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'We then need to un-archive the tarball:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Alternatively, we can use Git to clone the GitHub project locally. We need to
    make sure that Git is installed on the system, and then we can start cloning.
    This process is shown for a number of systems in the following snippets.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following command line shows how to install `git` on a Linux from the Red
    Hat family:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'The following command line shows how to install `git` on a Linux from the Debian
    family:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'The following command line shows how to install `git` on Mac OS X:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'On all the systems, to clone the Ansible GitHub project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'We then need to start building Ansible, either by getting the tarball or the
    source from GitHub:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'To make sure that all the requirements for building Ansible are met easily, we
    will be using Python PyPI. The PyPI installation on multiple systems is covered
    in the preceding section. For this section, we will use `easy_install`, which
    only requires you to install a version of Python on the system:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'We now install the Python requirements:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'We need to set up the environment as follows to be able to use Ansible:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Updating Ansible when using the GitHub project can be trickier. We need to
    pull the project and its submodules as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Every time those commands are executed, we need to make sure that the environment
    is properly set up:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: The location of the environmental source can change whenever the Ansible source
    is located. The Ansible inventory (usually located in `/etc/ansible/hosts`) and
    its configuration file (usually located in `/etc/ansible/ansible.cfg`) can also
    be changed to accommodate permission restrictions or provide Ansible users with
    easier access to enable modifications or restrict them. This will be covered in
    more detail later in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Ansible Docker container installation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using Ansible on a container requires a container engine to be running. There
    are multiple choices for which container to use, the most famous ones being Docker,
    Kubernetes, and Red Hat OpenShift. In this book, we will only cover Docker. We
    need to have a Docker engine running on the machine that is going to host the
    Ansible Container. The information about Docker installation can be found in its
    official documentation at: [https://docs.docker.com/install/](https://docs.docker.com/install/).
    This covers a large number of operating systems.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, we will assume that the Docker engine is installed, and that the current
    user has been added to the Docker group so that they can manage the local Docker
    containers on the machine. You can also choose to build your own container by
    selecting any of the systems that you are familiar with for the source image.
    Make sure that you have all requirements installed. The following is an example
    of a basic Dockerfile on Linux Alpine, one of the lightest systems used on containers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'We then build the container using the `build` function on Docker:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'The build might take some time to finish. We can then try and run our Ansible
    container in several different ways, depending on how we are going to use it.
    For example, we can verify the Ansible version on the container:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'We can also run a ping task:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'By changing the `ENTRYPOINT` of our Dockerfile code from `[ansible]` to `[ansible-playbook]`,
    we can create a script that can use our container to work as if `docker-playbook`
    is installed. This will be explained further in [Chapter 3](24ea3f87-4d88-4675-8f6d-b16dabf15da8.xhtml),
    *Ansible Inventory and Playbook*. Create a script called `ansible-playbook` and
    add it to the `PATH` environmental variable with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: Ensure that the script has execution permission by using the `chmod +x` command
    line. It can be copied or sym-linked to `/usr/local/bin/` to automatically add
    it to `PATH`.
  prefs: []
  type: TYPE_NORMAL
- en: 'This script can be used as follows to execute a playbook on a specific host
    located in the `inventory` folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Ansible instance on AWS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are multiple public cloud providers, such as Google Cloud Platform or
    Microsoft Azure, that offer the same service as **Amazon Web Services** (**AWS**).
    In this section, we aren't going to cover much of the installation process, since
    the instance is already pre-installed and configured.
  prefs: []
  type: TYPE_NORMAL
- en: 'Instead, this section will be a brief step-by-step guide to setting up an already
    existing Ansible instance on AWS. First, we need to access the EC2 Dashboard of
    our AWS account:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/20266992-496c-41a4-96b5-155e4f81680e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We then choose to launch a new instance and look for the `Ansiblemaster` instance.
    Be careful not to choose one of the Ansible Tower instances:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/b1d11c61-095c-4ecd-9f4c-823a7ebe0b01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We then select the number of computer resources that we want to give to our
    instance:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/311b2028-80f8-4ee7-ace2-2dd07da4c8b0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Then, we add in the disk space to be used by the instance, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/5c0bd940-f7b3-4449-a440-5172b9a14171.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We then confirm and launch the instance:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/b6f01939-5d18-4a74-86b2-e3b3508b7c7f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can either create a new SSH access key or use an old one:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/79fc442d-bc35-4748-966f-011f47a2959f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'On our local terminal, we set permissions into the key file and use SSH to
    access the instance:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/43dbae09-025a-426f-92fe-8c6f3a27508b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can check Ansible''s version and configuration. We can always update it
    to the necessary or the latest stable version. The following print screens show
    how to move from one Ansible version to another using the instance OS package
    manager. First, we identify the currently installed version:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/57ee3aca-6e76-441a-a19a-fdba3d65b761.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Then, we run a full system software update:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/46d02e81-653e-4122-b071-b7b9af232453.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Finally, with the completion of the update process, we re-identify the Ansible
    version:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/b7ca36c7-981a-49d3-bc4e-f434cb50ba12.png)'
  prefs: []
  type: TYPE_IMG
- en: Finally, we can use the newly installed Ansible to orchestrate the task within
    our AWS environment.
  prefs: []
  type: TYPE_NORMAL
- en: Master node essential configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Ansible configuration is mainly stored in the `ansible.cfg` configuration
    file, which is usually located in `/etc/ansible/ansible.cfg` in most system package
    managers and the Python PyPI installation. It may also be located in the home
    directory of the user who installed Ansible, or whichever location the `ANSIBLE_CONFIG` environment
    variable is pointing to. In this section, we will be covering the most useful
    configuration that can be altered using Ansible to make your life easier.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open your `ansible.cfg` file using your favorite text editor, either in CLI
    mode (using vi or nano) or with a GUI (using Gedit or Atom):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: There is no need to worry about which text editor you are using—there will always
    be someone who disagrees with you. Use whichever one you are most comfortable
    with.
  prefs: []
  type: TYPE_NORMAL
- en: Many would agree that the default configuration of Ansible is fine for normal
    usage. Ansible is available to use as soon as it is installed.
  prefs: []
  type: TYPE_NORMAL
- en: From Ansible version 2.4 onwards, there is a command line, `ansible-config`,
    that allows the users to list the enabled options and their values to check its
    configuration faster.The disabled configuration options are implemented either
    by using a hash sign, `#`, or a semicolon, `;`. The semicolon, `;`, is often used
    to introduce an enabled option.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can always access the Ansible example configuration file to have a look
    at how the options are being used. The example can be found at the following link:
    [raw.githubusercontent.com/ansible/ansible/devel/examples/ansible.cfg](http://raw.githubusercontent.com/ansible/ansible/devel/examples/ansible.cfg).'
  prefs: []
  type: TYPE_NORMAL
- en: Ansible's configuration file is divided into several sections. The main section
    that we will concentrate on is the `[defaults]` general section. We will start
    by introducing the basic parameters in this section.
  prefs: []
  type: TYPE_NORMAL
- en: '`inventory`**:** This is a parameter to indicate the file that is hosting the
    inventory for Ansible. On most systems, it points to `/etc/ansible/hosts`, as
    follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: '`roles_path`: This is a parameter to indicate where the Ansible playbook should
    look for additional roles to the system default:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: '`log_path`: This a parameter to indicate where Ansible should be storing its
    log. Make sure that the user running Ansible has permission to write on the specified
    location. An example is as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: '`retry_files_enabled`: This is a parameter to enable the retry feature, allowing
    Ansible to create a `.retry` file whenever a playbook fails. It is better to keep
    this disabled unless you really need it. This is because it creates multiple files
    and clogs your playbook folder with old failed tasks that are already logged in
    both the Ansible log and the dashboard''s playbook execution status section. Here
    is an example of the parameter disabled:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: '`host_keychecking`: This is a parameter that changes its recommended value
    depending on the environment. Usually, it is used in a continuously changing environment,
    where old machines get deleted and new machines take their places. It is more
    frequently used in a cloud or a virtualized environment, where virtual machines
    and deployment instances take the IP addresses of older machines. Ansible holds
    a key for those machines to prevent security issues. Disabling this parameter
    will make Ansible ignore the error messages related to the `known_hosts` keys:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: '`forks`: This is a parameter to define the number of parallel tasks executed
    to the client hosts. The default number is five, to save on both resources and
    network bandwidth. If there are enough resources and a large bandwidth to serve
    many hosts, it can be raised to the maximum number of hosts as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: '`sudo_user and ask_sudo_pass`: These are both legacy parameters. It is still
    possible to use them with the current version of Ansible, but they are not reliable.
    It is recommended to set these parameters when creating groups in Ansible''s inventory—this
    is explained in more detail in the next chapter, but an example is as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: '`remote_port`: This is a parameter to indicate which port is to be used by
    SSH on the client hosts. It is also a parameter that is better set in the inventory
    groups:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: '`nocolor`: This is an optional parameter. It allows you to show different colors
    for the Ansible tasks and playbook to indicate errors and successes:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: The following parameters relate to the SSH connection with the host `[ssh_connection]`.
  prefs: []
  type: TYPE_NORMAL
- en: '`pipelining`: This parameter enables the feature of reducing the number of
    SSH operations required to execute a module. This happens by executing Ansible
    modules without an actual file transfer and can improve Ansible''s performance
    greatly. It requires having requiretty disabled in `/etc/sudoers` on all the managed
    hosts. An example of its use is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'The `scp_if_ssh` and `transfer_method` parameters: Both of these are responsible
    for file transfers between the master node and the client hosts. Choosing the `smart`
    value allows Ansible to choose between SFTP and SCP to opt for the most suitable
    protocol when transferring files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'The following two examples relate to the persistence of the SSH connection, `[persistent_connection]`.
    We are only covering timeout for a connection and a retry for a failed one. The
    SSH timeout can be set by editing the value of those two parameters as follows,
    firstly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'And secondly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, let''s look at the `[colors]` color selection. This section gets activated
    when enabling the color feature in the `[default]` section. It allows you to choose
    different colors for various output statuses. This may be helpful when using a
    special display or to help with color blindness:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'On another note, we should never forget that Ansible relies on SSH to communicate
    with its clients. Configuration should be done on the master node to create an
    SSH key that is then copied to all the client hosts to enable passwordless remote
    access. This helps to remove passwords saved as plain text and enables full automation
    of the tasks. Creating an SSH key can either be simple or more complicated and
    more secure. We will go with the simple option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'Keep on pressing enter while accepting the key and leaving the passphrase empty:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: This task can be a bit dull and very manual. Scripting using the `expect` command
    can be very handy when trying to sort out SSH keys and authentication. First,
    we need to make sure that `expect` is installed, since it is not usually installed by
    default. The following examples show this process for a variety of operating systems.
  prefs: []
  type: TYPE_NORMAL
- en: 'This command line shows how to install the tool Expect on a Linux from the
    Red Hat family:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'This command line shows how to install the tool Expect on a Linux from the
    Debian family:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'This command line shows how to install the tool Expect on MAC OS X:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'We can then create a script file with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: 'This script should have execution privileges to be executed. It can then be
    used with another loop script to be executed on several machines whose IP address
    range or hostnames are known:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternatively, we can use an orchestration tool to do the same task. Let''s use
    Ansible to help with client configuration by using the simple `copy` and `shell`
    modules:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: The user `install` can be a special user created on all client hosts to allow
    easy SSH remote access using Ansible. More details about how to set up this user
    can be found in the following title.
  prefs: []
  type: TYPE_NORMAL
- en: Linux client node configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The only important tool that is required to be installed and running on the
    client machine is  the OpenSSH-server. All new releases of Linux use SSH as the
    main remote access method by default.
  prefs: []
  type: TYPE_NORMAL
- en: To make sure that everything is in place, the SSH service should always be running
    and the system's firewall should allow a port for SSH to service through. By default,
    this is port 22\. This can be changed, however, and this change should be also
    noted in the host Ansible inventory.
  prefs: []
  type: TYPE_NORMAL
- en: For Linux clients, any extra configuration for Ansible management is more aimed
    at following best practice guidelines than being strictly necessary. Extra configuration
    can be a way to make sure that the remote clients managed by Ansible are fully
    automated, securely accessible, and do not require an admin intervention when
    running automated tasks.
  prefs: []
  type: TYPE_NORMAL
- en: The following configuration is optional—you can choose what suits you. Add the
    configurations that you think will be useful and ignore the others.
  prefs: []
  type: TYPE_NORMAL
- en: Ansible can remotely manage a system using any privileged user when their credentials
    are at hand. However, mixing normal users, users with remote access, and management
    users can be messy. If a user is performing a task at the same time as Ansible
    is sending a task, traceback can be tricky. We recommend adding a new system user
    who has the sole purpose of being used by Ansible to control the host. We give
    this user superuser privileges and make their access passwordless to further enhance
    automation. This user can be the same on all the hosts of a certain inventory
    group to be configured at the inventory group level.
  prefs: []
  type: TYPE_NORMAL
- en: You can also create a shared folder via NFS and SMB between the hosts and the
    Ansible server to reduce the load when transferring data to the hosts. This task
    makes the hosts take the job of copying the data from the mounted shared folder,
    while Ansible takes care of other tasks, especially when the value of the forks
    is set to a high number.
  prefs: []
  type: TYPE_NORMAL
- en: Windows client node configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As well as Linux hosts, Ansible is capable of remotely managing Microsoft Windows
    hosts. This includes Windows Desktop 7, 8, and 10, and Windows Server 2008, 2008
    R2, 2012, 2012 R2, and 2016.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Windows clients require you to have some specific versions of the following
    applications installed:'
  prefs: []
  type: TYPE_NORMAL
- en: PowerShell 3.0 or higher
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: .NET 4.0
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Those two requirements are met on most Windows releases, except for Window 7
    and Windows server 2008.
  prefs: []
  type: TYPE_NORMAL
- en: There is an Ansible-made PowerShell script that can carry out an automatic installation
    of the missing requirements that can be found at the following link: [https://github.com/PacktPublishing/Ansible-QuickStart-Guide/blob/master/Chapter2/Upgrade_Powershell.ps1](https://github.com/PacktPublishing/Ansible-QuickStart-Guide/blob/master/Chapter2/Upgrade_Powershell.ps1).
  prefs: []
  type: TYPE_NORMAL
- en: 'To be able to execute this script, or any other third-party script, we need
    to change the execution policy from restricted to unrestricted, run our script,
    and then turn the policy back to restricted. Using Windows PowerShell, run the
    following using local or domain administrator credentials:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: Then, on all the Windows systems, a second script is essential to configure
    WinRM to be active and listen to Ansible commands. This script can be downloaded
    from the following link: [https://github.com/PacktPublishing/Ansible-QuickStart-Guide/blob/master/Chapter2/ConfigureRemotingForAnsible.ps1](https://github.com/PacktPublishing/Ansible-QuickStart-Guide/blob/master/Chapter2/ConfigureRemotingForAnsible.ps1).
  prefs: []
  type: TYPE_NORMAL
- en: 'Similarly, this script also requires privileged access and the execution policy
    should be unrestricted. Run the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: If no errors appear, Ansible should now be able to manage these machines.
  prefs: []
  type: TYPE_NORMAL
- en: The same applies for the Windows hosts. We may need to create a local or domain
    administrator that is only used by Ansible to execute commands freely. Its credentials
    can be configured in the host inventory group as well. This can be secured using
    Ansible Vault to prevent having passwords written in plain text.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we looked at how to prepare the environment for multiple systems
    in order to be able to install Ansible. We also considered which configuration
    options were most useful in either Linux or Windows. Now that we've learned how
    to set up and configure Ansible, we're ready to start learning about its functional
    features. In the following chapter, we will be covering Ansible playbooks and
    inventory to better understand how orchestration works.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Ansible documentation: [https://docs.ansible.com/](https://docs.ansible.com/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
