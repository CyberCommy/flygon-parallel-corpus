- en: Setting Up Your Development Environment
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置开发环境
- en: The goal of this chapter is to get you set up to develop in Unreal Engine. Even
    if you've already installed and started working in the engine, you may still find
    it worthwhile to take a look through this chapter, as there are a few details
    of the installation process that might be useful to you.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的目标是让您准备好在虚幻引擎中进行开发。即使您已经安装并开始在引擎中工作，您可能仍然会发现浏览本章是有价值的，因为安装过程中有一些细节可能对您有用。
- en: We're also going to take a look at the Epic Games launcher. It's easy to get
    into the habit of looking at it just as a way of updating the engine and launching
    projects, but there's a huge collection of useful resources for learning and development
    there too. It would be a mistake to ignore them.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将研究Epic Games启动器。习惯上，我们只将其视为更新引擎和启动项目的方式，但那里还有大量有用的学习和开发资源。忽视它将是一个错误。
- en: For those planning to develop for mobile VR on Oculus Go or Samsung Gear, we'll
    walk you through the process of setting up the Android SDK and setting up a project
    for deployment to the device, and finally for those interested in C++ development,
    we'll show you how to set up Visual Studio 2017 for use with Unreal and for those
    interested in working on the bleeding edge, how to download the Unreal Engine
    source code and build it yourself.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 对于计划在Oculus Go或三星Gear上开发移动VR的人，我们将为您介绍设置Android SDK和设置项目以部署到设备的过程，对于那些对C++开发感兴趣的人，我们将向您展示如何设置Visual
    Studio 2017以与虚幻引擎一起使用，对于那些对最前沿技术感兴趣的人，我们将向您展示如何下载虚幻引擎源代码并自行构建。
- en: 'Through out the course of this chapter, we''re going to learn about the following
    topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的过程中，我们将学习以下主题：
- en: Installing Unreal Engine using the Epic Games launcher
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Epic Games启动器安装虚幻引擎
- en: Setting up your development environment to build a project for mobile VR
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置开发环境以构建移动VR项目
- en: Learning more about Unreal Engine, and where to get help
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解更多关于虚幻引擎的信息，以及获取帮助的途径
- en: Setting up your development environment to build a project in C++
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置开发环境以构建C++项目
- en: Downloading and building Unreal Engine from source code
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从源代码下载和构建虚幻引擎
- en: Prerequisite – VR hardware
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 先决条件-VR硬件
- en: If you're planning to develop for desktop VR hardware, such as the Oculus Rift
    or HTC Vive, we're going to assume here that you've already set up your headset
    and ensured that it's working. If you haven't, now's a good time. Head on over
    to [https://www.vive.com/eu/setup/](https://www.vive.com/eu/setup/) or [https://www.oculus.com/setup/](https://www.oculus.com/setup/),
    and run through the guided installation and setup operations there.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您计划开发桌面VR硬件，例如Oculus Rift或HTC Vive，我们假设您已经设置好了头显并确保其正常工作。如果还没有，请现在进行设置。前往[https://www.vive.com/eu/setup/](https://www.vive.com/eu/setup/)或[https://www.oculus.com/setup/](https://www.oculus.com/setup/)，并按照指导进行安装和设置操作。
- en: Remember that your VR headset driver software, Oculus Home or Steam VR, needs
    to be running when you use the headset.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，使用头显时，您的VR头显驱动程序软件（Oculus Home或Steam VR）需要运行。
- en: If you're going to be developing for mobile standalone VR, your setup process
    will involve a few other steps, which we'll walk you through after we get Unreal
    Engine installed. We do recommend even for those developing for mobile VR that
    you have a desktop VR headset available as well. It dramatically speeds up debugging
    to be able to launch your software right into the headset without having to cook
    it and deploy it to the device every time. It's not required, but you will find
    it helpful.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您计划开发独立的移动VR应用程序，您的设置过程将涉及一些其他步骤，我们将在安装虚幻引擎后为您介绍。我们建议即使对于那些开发移动VR的人，您也应该准备一个桌面VR头显。能够直接将软件启动到头显中，而无需每次都进行烹饪和部署，可以大大加快调试速度。这不是必需的，但您会发现它很有帮助。
- en: Either way, test out your headset, make sure it's working, and then let's get
    our development environment ready.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 无论如何，测试一下您的头显，确保它正常工作，然后让我们准备好开发环境。
- en: Setting up Unreal Engine
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置虚幻引擎
- en: If you're going to develop VR applications using Unreal Engine, the first thing
    you'll need, of course, is the engine. Let's walk through the process of setting
    it up.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您要使用虚幻引擎开发VR应用程序，首先需要的当然是引擎。让我们一起来设置它。
- en: What it costs
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 费用
- en: A natural question to start with when considering Unreal Engine is what it costs.
    The news here is good. Unreal Engine is free to download and use, and if you use
    it commercially, the terms are reasonable.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在考虑虚幻引擎时，一个自然的问题是费用。好消息是，虚幻引擎可以免费下载和使用，如果您在商业上使用它，条款也是合理的。
- en: When you download the engine, you'll be asked to agree to one of two license
    agreements, depending on what you're going to be using it for. If you're a game
    developer and you make a game or application using Unreal and sell it, you'll
    pay a 5% royalty on gross sales over $3,000 per calendar quarter. If you don't
    sell your game or app, or it earns less than that per quarter, Unreal is free
    to use.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 当您下载引擎时，将要求您同意两个许可协议之一，具体取决于您将用它做什么。如果您是游戏开发者，并使用虚幻引擎制作游戏或应用程序并出售，您将按照每个日历季度超过3,000美元的总销售额支付5%的版税。如果您不出售游戏或应用程序，或者每个季度的收入低于该金额，可以免费使用虚幻引擎。
- en: 'If you''re using Unreal for something that isn''t intended to be sold to the
    public (training simulations, architectural visualization, or anything else),
    Unreal is entirely free under the terms of the Enterprise license agreement. For
    most businesses, the standard Enterprise **End User License Agreement** (**EULA**)
    will be fine, but if you do need to make changes, you can contact Epic to set
    up an enterprise license with different terms here: [https://www.unrealengine.com/en-US/enterprise/contact-us](https://www.unrealengine.com/en-US/enterprise/contact-us).
    Epic will work with you.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用Unreal进行的工作不打算向公众销售（培训模拟、建筑可视化或其他任何内容），根据企业许可协议的条款，Unreal完全免费。对于大多数企业来说，标准的企业最终用户许可协议（EULA）就足够了，但如果您确实需要进行更改，您可以联系Epic在此处设置具有不同条款的企业许可证：[https://www.unrealengine.com/en-US/enterprise/contact-us](https://www.unrealengine.com/en-US/enterprise/contact-us)。
    Epic将与您合作。
- en: What this boils down to for now is that you can download Unreal and use it for
    free, and if you start making money with it, the terms are reasonable and clear.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 目前的情况是，您可以免费下载Unreal并使用它，如果您开始用它赚钱，条款是合理和清晰的。
- en: 'While we''re on the topic, it''s worth mentioning that the version of Unreal
    you get when you download the engine is the same version professional developers
    use, including the devs at Epic. There''s no split between a "pro" version and
    everything else: everything''s included and everything''s turned on.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 顺便提一下，值得一提的是，当您下载引擎时，您获得的Unreal版本与专业开发人员使用的版本相同，包括Epic的开发人员。没有“专业”版本和其他版本之间的分割：一切都包含在内，一切都开启。
- en: Creating an Epic Games account
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建Epic Games帐户
- en: Let's get started, then. We're going to begin by heading over to [https://www.unrealengine.com](https://www.unrealengine.com) and
    hitting the download link. If you've already created an account with Epic, sign
    in here. If you haven't, now's the time to create one.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，让我们开始吧。我们将首先前往[https://www.unrealengine.com](https://www.unrealengine.com)并点击下载链接。如果您已经在Epic创建了一个帐户，请在此处登录。如果没有，请现在创建一个。
- en: After you've signed up or signed in, you'll be asked which license you need
    to agree to—the Game Developers license or the Enterprise license. Choose the
    one that fits your case. Next, select whether you're downloading for Windows or
    Mac, download the appropriate Epic installer, and run it.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 注册或登录后，您将被要求同意您需要同意的许可证-游戏开发者许可证或企业许可证。选择适合您情况的许可证。接下来，选择您要下载的Windows或Mac版本，下载适当的Epic安装程序并运行它。
- en: This will install the Epic Games Launcher, which you'll use as a hub for managing
    engine versions, plugins, library content, and learning resources. There's useful
    stuff here.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这将安装Epic Games启动器，您将使用它作为管理引擎版本、插件、库内容和学习资源的中心。这里有一些有用的东西。
- en: The Epic Games launcher
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Epic Games启动器
- en: Once you've downloaded and installed the launcher, open it up. It's going to
    ask you to sign in using the same account you just used to log into the Epic website.
    (The Launcher can be used offline as well, so you can still run the engine without
    an internet connection, but of course you have much more useful stuff available
    to you if you're online.)
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 下载并安装启动器后，打开它。它会要求您使用刚刚用于登录Epic网站的相同帐户进行登录。（启动器也可以离线使用，所以即使没有互联网连接，您仍然可以运行引擎，但是如果您在线上，当然会有更多有用的东西可供您使用。）
- en: 'Once you''re logged in, look at the set of tabs along the left edge of the
    launcher. There''s a tab for Unreal Engine, and then a series of tabs for Epic''s
    store, your game library, and your friends. Select the UNREAL ENGINE tab. We''ll
    be spending all our time here:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 登录后，查看启动器左侧边缘的选项卡集。有一个用于Unreal Engine的选项卡，然后是一系列用于Epic商店、游戏库和好友的选项卡。选择UNREAL
    ENGINE选项卡。我们将在这里花费所有的时间：
- en: '![](img/5ab26cc6-eb7e-4d8c-b87d-8c5b12d125a0.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5ab26cc6-eb7e-4d8c-b87d-8c5b12d125a0.png)'
- en: The Epic Games Launcher as of version 4.22; its layout changes fairly frequently,
    but the principles remain the same
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: Epic Games启动器的版本为4.22；其布局经常变化，但原则保持不变。
- en: 'Across the top of the Unreal Engine tab, you''ll find four additional tabs:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在Unreal Engine选项卡的顶部，您会找到四个额外的选项卡：
- en: Unreal Engine
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 虚幻引擎
- en: Learn
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习
- en: Marketplace
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 市场
- en: Library
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 库
- en: We're going to look at these tabs in a moment, but first, find the Install Engine
    button to the right of them. By default, this button installs the latest stable
    version of the engine. Let's do this.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在一会儿查看这些选项卡，但首先，请找到它们右侧的Install Engine按钮。默认情况下，此按钮会安装引擎的最新稳定版本。让我们这样做。
- en: Installing the engine
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装引擎
- en: When you hit the install button, the launcher will switch to the Library tab
    if it's not already selected, and it will ask you to choose an install location.
    The default location is usually a good choice here, but you can browse to a new
    location if you'd like to install the engine somewhere else.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 当您点击安装按钮时，如果尚未选择Library选项卡，启动器将切换到Library选项卡，并要求您选择安装位置。默认位置通常是一个不错的选择，但如果您想在其他位置安装引擎，可以浏览到新位置。
- en: 'There''s also an Options button on this page, and we should take a moment to
    talk about the choices it offers:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 此页面还有一个选项按钮，我们应该花点时间讨论一下它提供的选择：
- en: '![](img/b7e98876-1e53-45ea-887a-4b1180fdcf6a.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b7e98876-1e53-45ea-887a-4b1180fdcf6a.png)'
- en: Installation options allowing you to determine which components of Unreal Engine
    are set up on your machine
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 安装选项允许您确定在您的计算机上设置哪些Unreal Engine组件。
- en: Core Components have to be installed—that's the bare minimum required to run
    the editor.
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 核心组件必须安装-这是运行编辑器所需的最低要求。
- en: Starter Content includes a number of useful assets to get you started, including
    a number of materials and models, and the Advanced Lighting Map. We'll be using
    these assets for the projects in this book, so you should install it.
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 入门内容包括一些有用的资产，供您开始使用，包括一些材料和模型以及高级照明贴图。我们将在本书的项目中使用这些资产，所以您应该安装它。
- en: Templates and Feature Packs give you a range of excellent projects to use as
    starting points for your game projects, including the VR Template, which we'll
    use for a few projects in this book. You should install this too.
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模板和功能包为你提供了一系列优秀的项目，可以作为你的游戏项目的起点，包括VR模板，在本书中我们将在几个项目中使用它。你也应该安装这个。
- en: 'Engine Source is one of the things that sets Unreal Engine apart from the others:
    Unreal Engine gives you the entire C++ source code for the engine. This can be
    a great way to begin learning about C++, and can be a lifesaver when you really
    need to understand how something works or need to figure out why something is
    behaving unexpectedly. You don''t need to install the engine source, and whether
    you do is up to you, but it doesn''t take up a lot of room so there''s really
    no reason not to. If you anticipate doing any C++ development, you should install
    it. Once installed, you''ll find the source code in the directory where you installed
    your engine version, under `\Engine\Source`.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 引擎源码是使虚幻引擎与其他引擎不同的一点：虚幻引擎为引擎提供了完整的C++源代码。这是学习C++的好方法，当你真正需要了解某个功能的工作原理或者需要弄清楚为什么某个功能的行为出乎意料时，它可以帮你解救。你不需要安装引擎源码，是否安装取决于你自己，但它不会占用很多空间，所以没有理由不安装。如果你预计要进行任何C++开发，你应该安装它。一旦安装完成，你会在安装引擎版本的目录下的`\Engine\Source`文件夹中找到源代码。
- en: Editor symbols for debugging is something you'll need if you plan to debug in
    C++. Without it, you'll be unable to set breakpoints in the engine source code
    or trace execution through it. These editor symbols take up a lot of space though,
    so if you don't plan to develop in C++ or debug using Visual Studio, you can skip
    it, and you can always install it later if you realize you need it.
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调试时需要编辑器符号，如果你计划在C++中进行调试。如果没有它，你将无法在引擎源代码中设置断点或跟踪执行过程。不过，这些编辑器符号占用了很多空间，所以如果你不打算使用Visual
    Studio进行C++开发或调试，你可以跳过它，如果你意识到需要它，随时可以安装它。
- en: These options can be changed after you've installed an engine version, so it's
    not a problem if you change your mind later on about whether you want an option
    installed. You can add or remove any of them at any time. Also, if you're keeping
    older versions of the engine, which developers often do if they're maintaining
    a legacy project, it's not a bad idea to save space by using the options to uninstall
    everything but the core components.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这些选项在安装引擎版本后可以更改，所以如果你改变主意是否要安装某个选项，这不是个问题。你可以随时添加或删除任何选项。此外，如果你保留了旧版本的引擎，开发人员通常会这样做，如果他们在维护一个遗留项目，使用选项卸载除了核心组件以外的所有内容可以节省空间。
- en: For the projects in this book, the default options are fine—Core Components,
    Starter Content, Templates, and Engine Source. If you anticipate developing or
    debugging in C++, install the editor symbols as well.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本书中的项目，默认选项是可以的——核心组件、起始内容、模板和引擎源码。如果你预计要进行C++开发或调试，请安装编辑器符号。
- en: Let's hit Apply after we've set our options, and install the engine. It's going
    to take a while. (If you'd like to jump ahead to the *Learning about unreal* section
    while you wait, you can jump back here when the install finishes.)
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在设置完选项后，点击应用并安装引擎。这需要一些时间。（如果你想在等待期间跳到*了解虚幻*部分，你可以在安装完成后回到这里。）
- en: Editting your vault cache location
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编辑Vault缓存位置
- en: Depending on how your system is set up, you may want to change the location
    where Unreal stores its vault cache. The vault cache stores assets that you've
    downloaded from the marketplace, such as projects and asset packs. By default,
    it lands at `C:\Program Files (x86)\Epic Games\Launcher\VaultCache`. You should
    be aware that it can get pretty large, so if you're running out of space on your
    system drive, you may want to put it somewhere else.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 根据你的系统设置，你可能想要更改虚幻存储Vault缓存的位置。Vault缓存存储了你从市场下载的资产，如项目和资产包。默认情况下，它位于`C:\Program
    Files (x86)\Epic Games\Launcher\VaultCache`。你应该知道它可能会变得非常大，所以如果你的系统驱动器空间不足，你可能想把它放在其他地方。
- en: If you'd like to do this, from the Epic Games launcher, select Settings | Edit
    Vault Cache Location, select a new location, and hit Apply. Then, exit Settings
    and quit the Epic Games launcher (find its icon in the system tray, right-click
    it, and select Exit—simply closing the launcher window will minimize it without
    quitting it). When you restart the launcher, it will create the cache in the new
    location. Remember to delete your old `VaultCache` directory from its old location.
    (While you could copy the cache to the new location, it's often a better idea
    to force the system to create a new cache, as this will eliminate a lot of leftover
    stuff you're probably not using anymore.)
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想这样做，从Epic Games启动器中，选择设置|编辑Vault缓存位置，选择一个新位置，然后点击应用。然后，退出设置并退出Epic Games启动器（在系统托盘中找到其图标，右键单击它，选择退出——仅仅关闭启动器窗口会将其最小化而不是退出）。当你重新启动启动器时，它将在新位置创建缓存。记得删除旧位置的`VaultCache`目录。（虽然你可以将缓存复制到新位置，但通常最好强制系统创建一个新的缓存，因为这样可以消除你可能不再使用的很多残留文件。）
- en: Setting up a Derived Data Cache (DDC)
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置派生数据缓存（DDC）
- en: There's one additional bit of setup we recommend you do. As you use the editor,
    Unreal will compile assets into a form that's ready for use by your local machine's
    hardware. Rather than forcing the engine to do this every time, it's a good idea
    to give it a place to stash these compiled assets so that everything loads faster
    after the first build.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一个额外的设置我们建议你做。当你使用编辑器时，虚幻会将资产编译成适用于本地机器硬件的形式。与其每次都强制引擎这样做，不如给它一个地方来存放这些已编译的资产，这样在第一次构建之后，所有东西加载得更快。
- en: 'You don''t have to do this, but it''s a good idea. Materials especially will
    compile much faster if you do. If you''re seeing messages such as the following,
    you definitely want to set up a DDC:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 你不一定要这样做，但这是个好主意。特别是材质，如果你这样做，编译速度会快得多。如果你看到以下消息，你肯定要设置一个DDC：
- en: '![](img/9338fd5c-0de8-458c-9adf-18dcff5df4a5.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9338fd5c-0de8-458c-9adf-18dcff5df4a5.png)'
- en: If you see this warning, be sure to set up your DDC as directed here. It will
    make a big difference.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您看到此警告，请确保按照此处的指示设置您的DDC。这将产生很大的影响。
- en: Unreal calls this facility the **Shared Data Cache** (**SDC**), or the **Derived
    Data Cache** (**DDC**). (This is a different cache than the vault cache we just
    mentioned a moment ago.) Everything in the DDC is generated, which means that
    it's fine to clear out its content anytime. New data will be generated in its
    place. If you change your video card, it's a good idea to empty your DDC, as it
    will contain a ton of assets compiled for the old card.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 虚幻称此功能为**共享数据缓存**（**SDC**）或**派生数据缓存**（**DDC**）。（这是一个与刚才提到的保险库缓存不同的缓存。）DDC中的所有内容都是生成的，这意味着随时可以清除其内容。新数据将生成在其位置上。如果更改了您的显卡，最好清空您的DDC，因为它将包含为旧卡编译的大量资源。
- en: 'You have two options in setting up a DDC: if you''re working in a studio environment,
    you can set up a *shared DDC* in a network-accessible location. To do this, follow the
    instructions here: [https://docs.unrealengine.com/en-us/Engine/Basics/DerivedDataCache](https://docs.unrealengine.com/en-us/Engine/Basics/DerivedDataCache).'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在设置DDC时，您有两个选项：如果您在工作室环境中工作，可以在网络可访问的位置设置一个共享DDC。要做到这一点，请按照此处的说明操作：[https://docs.unrealengine.com/en-us/Engine/Basics/DerivedDataCache](https://docs.unrealengine.com/en-us/Engine/Basics/DerivedDataCache)。
- en: 'What we''re going to talk about here is the other option: setting up a *local
    DDC* for solo development. If you''re in a studio that already has a shared DDC
    set up, you can and should skip the local setup.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我们要讨论的是另一种选择：为独立开发设置本地DDC。如果您所在的工作室已经设置了共享DDC，您可以跳过本地设置。
- en: Setting up a local DDC
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置本地DDC
- en: 'Open your Windows Control Panel | System and Security | System, and then hit
    the Advanced system settings link:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 打开Windows控制面板 | 系统和安全 | 系统，然后点击高级系统设置链接：
- en: You can also get here by right-clicking This PC on any Windows Explorer pane,
    and selecting Properties.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以通过在任何Windows资源管理器窗格上右键单击“此电脑”，然后选择“属性”来到这里。
- en: '![](img/06fcd7c4-9d3f-4d68-8855-75260423c159.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](img/06fcd7c4-9d3f-4d68-8855-75260423c159.png)'
- en: Look for the Advanced system settings link on the left side of the System control
    panel
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在系统控制面板的左侧找到高级系统设置链接
- en: 'In your Advanced system settings pane, hit the Environment Variables button:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在高级系统设置窗格中，点击环境变量按钮：
- en: '![](img/80cad82f-c709-4c0d-a782-4fe85a2cd0e7.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](img/80cad82f-c709-4c0d-a782-4fe85a2cd0e7.png)'
- en: The Environment Variables button is found in System Properties | Advanced. You'll
    need admin privileges to edit it.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 环境变量按钮位于系统属性 | 高级中。您需要管理员权限才能进行编辑。
- en: In the Edit environment variable dialog that appears, hit New to create a new
    system variable either in your User variables, or in the System variables section.
    (If you use the former, the DDC will work for your login, but not for others who
    log into the same machine. If you put the variable in your system variables, it
    will apply to all users.)
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在出现的编辑环境变量对话框中，点击新建以在用户变量或系统变量部分创建一个新的系统变量。（如果使用前者，DDC将适用于您的登录，但不适用于其他登录到同一台机器的用户。如果将变量放在系统变量中，它将适用于所有用户。）
- en: 'Enter `UE-SharedDataCachePath` as the variable name, and for its value, browse
    to a directory where you''d like to stash your derived data. If you''re building
    projects with lots of art, your DDC can take up well over 10 GB, so put it on
    a drive where you''ll have space:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 将UE-SharedDataCachePath输入为变量名，并为其值浏览到您想要存储派生数据的目录。如果您正在构建具有大量艺术内容的项目，您的DDC可能会占用超过10
    GB的空间，因此请将其放在有足够空间的驱动器上：
- en: '![](img/b6b6a663-88ca-415a-be28-798f1d01992d.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b6b6a663-88ca-415a-be28-798f1d01992d.png)'
- en: Create a variable named UE-SharedDataCachePath and set it to the location where
    you'd like to store your DDC.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个名为UE-SharedDataCachePath的变量，并将其设置为您想要存储DDC的位置。
- en: Hit OK to save it. *You'll need to restart your PC before this will take effect*.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 点击确定保存。*在此生效之前，您需要重新启动计算机*。
- en: If your DDC starts to accumulate lots of stray assets from projects you're no
    longer working on, or if you change your video hardware, it's safe to clear out
    its contents entirely; the editor will regenerate the cache.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的DDC开始积累许多您不再使用的项目的杂散资源，或者如果您更改了视频硬件，可以安全地清除其内容；编辑器将重新生成缓存。
- en: Launching the engine
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启动引擎
- en: Once the engine has been installed, let's launch it to verify that everything
    is working.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 引擎安装完成后，让我们启动它以验证一切是否正常工作。
- en: 'Hit the Launch button on the left-hand side of the Epic Games launcher, or
    the Launch button on the ENGINE VERSIONS in your Library tab:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在Epic Games启动器的左侧点击启动按钮，或在库选项卡的ENGINE VERSIONS中点击启动按钮：
- en: '![](img/bc8793a8-ace9-4484-82a4-5243eff7fdc8.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bc8793a8-ace9-4484-82a4-5243eff7fdc8.png)'
- en: The Library tab shows your installed engine versions, projects, plugins, and
    asset packs.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 库选项卡显示已安装的引擎版本、项目、插件和资产包。
- en: If you've never launched Unreal Engine before on your machine, it may ask you
    to allow it to install a few prerequisites. Let it. The engine may also ask for
    permission to communicate through your Windows Firewall. Let it do that, too.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您以前从未在计算机上启动过虚幻引擎，它可能会要求您允许安装一些先决条件。请允许。引擎还可能要求获得通过Windows防火墙进行通信的权限。也请允许。
- en: 'If everything is running as it should, you should see a window that looks something
    like this:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切正常运行，您应该会看到一个类似于这样的窗口：
- en: '![](img/7f6c5f6b-dac9-4295-aeff-1f46b7f219c0.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7f6c5f6b-dac9-4295-aeff-1f46b7f219c0.png)'
- en: The Unreal Project Browser appears any time you launch the engine without specifying
    a project to load.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 未指定要加载的项目时，每次启动引擎时都会出现虚幻项目浏览器。
- en: Let's create a blank blueprint project just to make sure everything's working.
    (We're going to look at creating projects in depth in the next chapter, but, for
    now, we just want to test everything out.)
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个空的蓝图项目，只是为了确保一切正常工作。（我们将在下一章中深入讨论创建项目的内容，但现在我们只是想测试一切。）
- en: Select the New Project tab. Under the Blueprint tab, select Blank, and leave
    all the options at their defaults. Give it a reasonable location, and hit Create
    Project.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: The editor should open into your new project and you should be ready to go.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: If you're developing for desktop VR (rather than a mobile device), let's do
    a quick test to be sure everything's working. If you're developing for mobile
    VR, we'll cover that in the next section.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: 'Find the drop-down to the right of the Play button in the editor toolbar. Pull
    it down and select VR Preview:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/463f953b-95e6-4ce6-96e8-a72227cb136d.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
- en: Once you've selected a play mode, this will become the Play button's default
    behavior until you change it.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: If VR Preview is disabled, check to be sure that your headset is properly connected
    and that the Oculus or Steam VR software is running and not displaying any warnings
    or errors.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: Once you launch in VR, you should see your scene in the headset. It may not
    be the world's most exciting scene, and you'll be floating unexpectedly high above
    the floor (we're going to learn how to set a scene up correctly for VR in the
    next chapter), but you should be in it. Congratulations! Everything's working!
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: Setting up for mobile VR
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Mobile VR headsets such as Samsung Gear and Oculus Go are separate devices from
    your PC, so you can't simply launch into a VR preview the way you can with a desktop
    headset. Instead, you need to package the project and deploy it to the device
    so you can run it directly on the headset. You'll have to set up a few things
    to make this possible.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: Creating or joining an Oculus developer organization
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: First, if you're going to develop for Oculus-based mobile VR platforms, you
    need to register with Oculus as a developer. We're assuming here that you've already
    created an account with Oculus since you would have needed to do this to use the
    headset at all. If you haven't yet done so, do that first and log in.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: Now, navigate to [https://dashboard.oculus.com/organizations/create/](https://dashboard.oculus.com/organizations/create/) and
    run through the steps to register as a developer. If you're joining an existing
    organization instead of creating your own, contact its administrator to be added
    to the list of registered developers.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: Setting your VR headset to developer mode in Oculus Go
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once you've registered as a developer, you'll be able to use the Oculus mobile
    app to set your headset to developer mode. You'll need to do this before you can
    deploy your own projects to the device.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: In the app, navigate to Settings | [Your headset] | More Settings | Developer
    Mode, and turn Developer Mode on.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: If you're unable to do this, confirm that your Oculus account is associated
    with a developer organization.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: Installing Android Debug Bridge (ADB)
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Samsung Gear and Oculus Go both run on Google's *Android* operating system.
    You need to install drivers to allow your PC to communicate with Android devices.
    To do this, we're going to install the **Android Debug Bridge** drivers.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to the ADB 2.0 download page at [https://developer.oculus.com/downloads/package/oculus-go-adb-drivers/](https://developer.oculus.com/downloads/package/oculus-go-adb-drivers/),
    download and extract the `.zip` file, and then right-click `android_winusb.inf`and
    select Install.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: For additional information about ADB and how to use it to talk to Oculus Go
    and Samsung Gear headsets, check here: [https://developer.oculus.com/documentation/mobilesdk/latest/concepts/mobile-adb/#mobile-android-debug-intro](https://developer.oculus.com/documentation/mobilesdk/latest/concepts/mobile-adb/#mobile-android-debug-intro).
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: Let the installation complete, and then we're going to install the Android SDK.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: Setting up NVIDIA CodeWorks for Android
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to develop software for Android, you need to install a number of **Software
    Development Kits** (**SDKs**) and other resources, and configure them to work
    with one another. Fortunately, there's an easy way to do this using NVIDIA's **CodeWorks
    for Android** installer.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 为了开发Android软件，您需要安装一些**软件开发工具包**（**SDK**）和其他资源，并将它们配置为相互配合。幸运的是，使用NVIDIA的**CodeWorks
    for Android**安装程序可以轻松完成此操作。
- en: 'Epic includes the required installer with your engine installation. Navigate
    to the directory where you installed Unreal Engine and look for `Engine\Extras\AndroidWorks\Win64`.
    Run the CodeWorksforAndroid installer found there:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: Epic在您的引擎安装中包含了所需的安装程序。导航到您安装Unreal Engine的目录，找到`Engine\Extras\AndroidWorks\Win64`。运行找到的CodeWorksforAndroid安装程序：
- en: '[PRE0]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Accept the default options, and when it's finished, *restart* your computer.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 接受默认选项，并在完成后*重新启动*计算机。
- en: Verifying that the HMD can communicate with your PC
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 验证HMD是否能与您的PC通信
- en: Once you've returned after the computer has been restarted, we want to check
    that your PC can communicate with your Android headset.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在计算机重新启动后返回，我们要检查您的PC是否能与Android头戴设备通信。
- en: Navigate to the location where you just installed Android SDK. By default, this
    will be `C:\NVPACK\android-sdk-windows`. Look for the `platform-tools` directory.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 导航到刚刚安装Android SDK的位置。默认情况下，这将是`C:\NVPACK\android-sdk-windows`。查找`platform-tools`目录。
- en: From within this directory, *Shift* *+ right-click* to open a context menu that
    includes the `Open PowerShell window here` command. If you right-click without
    holding *Shift*, your context menu won't include PowerShell. If you're using an
    older version of Windows 10, or you have PowerShell disabled, *Shift* + Right-Click
    will open a command line instead.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在此目录中，*Shift* *+右键单击*以打开包含`Open PowerShell窗口`命令的上下文菜单。如果您在不按住*Shift*的情况下右键单击，则上下文菜单不会包含PowerShell。如果您使用的是较旧版本的Windows
    10，或者已禁用PowerShell，则*Shift* +右键单击将打开一个命令行。
- en: From within PowerShell, type `./adb devices`.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在PowerShell中，键入`./adb devices`。
- en: If you're using PowerShell, you must precede any call to launch a program with
    `./`. (Requiring `./` before an executable call is a safety feature that's standard
    on Unix-based systems to prevent you from accidentally launching an executable
    when you didn't mean to. Windows now follows this convention as well.) If you're
    using the legacy command prompt instead, you simply type the name of the executable: `adb
    devices`. It's a good idea to get into the habit of using PowerShell instead of
    the legacy command prompt. It's safer and you can do more with it.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用的是PowerShell，则必须在启动程序之前加上`./`。 （在Unix系统上，要求在可执行调用之前加上`./`是一项安全功能，以防止您意外启动可执行文件。Windows现在也遵循此约定。）如果您使用的是传统命令提示符，则只需键入可执行文件的名称：`adb
    devices`。最好养成使用PowerShell而不是传统命令提示符的习惯。它更安全，而且功能更强大。
- en: 'Take a look at the following screenshot:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 看一下下面的屏幕截图：
- en: '![](img/49705c9e-95c9-4ea5-b769-44377f8788c6.png)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![](img/49705c9e-95c9-4ea5-b769-44377f8788c6.png)'
- en: The adb devices command lists your currently-connected Android devices.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: adb devices命令列出当前连接的Android设备。
- en: If the Go or Gear appears as *Unauthorized*, that means your PC was able to
    see it, but the headset hasn't yet given the PC permission to talk to it. Put
    on the headset and accept the confirmation dialog that should have appeared there.
    Run `adb devices` again and confirm that the headset now appears as a device.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 如果Go或Gear显示为*未经授权*，这意味着您的PC能够看到它，但头戴设备尚未允许PC与其通信。戴上头戴设备并接受应该出现的确认对话框。再次运行`adb
    devices`并确认头戴设备现在显示为设备。
- en: Generating a signature file for Samsung Gear
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为三星Gear生成签名文件
- en: You do not need to create a signature file to deploy to Oculus Go or Quest.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 您无需创建签名文件即可部署到Oculus Go或Quest。
- en: For a Samsung Gear device, you'll need to create an **Oculus Signature File**
    (**osig**).
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 对于三星Gear设备，您需要创建一个**Oculus签名文件**（**osig**）。
- en: Follow the directions at [https://dashboard.oculus.com/tools/osig-generator/](https://dashboard.oculus.com/tools/osig-generator/),
    and place the resulting file in your Unreal install directory, under `\Engine\Build\Android\Java\assets`.
    If the assets directory doesn't yet exist, create it.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 按照[https://dashboard.oculus.com/tools/osig-generator/](https://dashboard.oculus.com/tools/osig-generator/)上的说明，将生成的文件放置在Unreal安装目录下的`\Engine\Build\Android\Java\assets`目录下。如果assets目录尚不存在，请创建它。
- en: For more information on signature files, check here: [https://developer.oculus.com/documentation/mobilesdk/latest/concepts/mobile-submission-sig-file/](https://developer.oculus.com/documentation/mobilesdk/latest/concepts/mobile-submission-sig-file/).
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 有关签名文件的更多信息，请查看此处：[https://developer.oculus.com/documentation/mobilesdk/latest/concepts/mobile-submission-sig-file/](https://developer.oculus.com/documentation/mobilesdk/latest/concepts/mobile-submission-sig-file/)。
- en: Deploying a test project to the device
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将测试项目部署到设备
- en: Now that we've installed all the required software and verified that our PC
    can see our Android headset, let's create a project and deploy it to the device
    to make sure everything is working correctly.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经安装了所有必需的软件并验证了我们的PC能够看到我们的Android头戴设备，让我们创建一个项目并将其部署到设备上，以确保一切正常工作。
- en: Setting up a test project
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置一个测试项目
- en: 'Launch Unreal Engine from the Epic launcher, and in the Projects browser, select
    New Project. Select the Blueprint tab, the Blank template, and set your project
    settings to Mobile/Tablet, Scalable 3D or 2D, No Starter Content. Choose a location
    for the project and create it:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 从Epic启动器中启动Unreal Engine，在项目浏览器中选择新项目。选择蓝图选项卡，空白模板，并将项目设置为Mobile/Tablet，可扩展的3D或2D，无起始内容。选择项目的位置并创建它：
- en: '![](img/3343e18e-f742-44db-b575-658800d850bf.png)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3343e18e-f742-44db-b575-658800d850bf.png)'
- en: The options you set here determine what your project's starting settings will
    be, but you can change them later.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 您在此处设置的选项将确定项目的起始设置，但您可以稍后更改它们。
- en: Checking that your OculusVR plugin is enabled
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检查您的OculusVR插件是否已启用
- en: Once the project has launched, select Settings | Plugins | Virtual Reality,
    and verify that the OculusVR plugin is enabled. (It should already be.)
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 项目启动后，选择“设置”|“插件”|“虚拟现实”，并验证“OculusVR”插件是否已启用。（它应该已经启用了。）
- en: Setting a default map
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置默认地图
- en: Since we're going to be running this project as a standalone executable on our
    Gear or Go, we need to tell it what map to open when it starts up. Save *the empty
    map* that was created when the editor started, and give it any name you want.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们将在Gear或Go上作为独立可执行文件运行此项目，我们需要告诉它在启动时打开哪个地图。保存编辑器启动时创建的“空地图”，并给它任何你想要的名字。
- en: Select Settings | Project Settings | Project | Maps & Modes, and set the map
    you just saved as Editor Startup Map and Game Default Map.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 选择“设置”|“项目设置”|“项目”|“地图和模式”，并将刚保存的地图设置为“编辑器启动地图”和“游戏默认地图”。
- en: Clearing the default mobile touch interface
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 清除默认的移动触摸界面
- en: Ordinarily, mobile applications assume you'll be touching the screen to operate
    them, but of course this isn't going to happen in your headset, so we need to
    clear that default setting from our project.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，移动应用程序假设您将触摸屏幕来操作它们，但当然在您的头盔中不会发生这种情况，所以我们需要从项目中清除这个默认设置。
- en: From Project Settings, select Engine | Input | Mobile, and from the Default
    Touch Interface drop-down, select Clear to set it to None.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 从“项目设置”中，选择“引擎”|“输入”|“移动”，并从“默认触摸界面”下拉菜单中选择“清除”，将其设置为“无”。
- en: Setting your Android SDK project settings
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置Android SDK项目设置
- en: Now, we need to configure our project for deployment to our Android headset.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要为我们的Android头盔配置项目。
- en: 'Under Platforms | Android | APK Packaging, hit Configure Now, and Accept SDK
    License (you''ll only need to accept the license once):'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在“平台”|“Android”|“APK打包”下，点击“立即配置”，并接受SDK许可证（您只需要接受一次许可证）：
- en: '![](img/09af3349-2e08-4962-9048-64b69e19293f.png)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![](img/09af3349-2e08-4962-9048-64b69e19293f.png)'
- en: Hitting the Configure Now button will write a project.properties file to your
    project's Build/Android directory.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 点击“立即配置”按钮将在项目的Build/Android目录下写入一个project.properties文件。
- en: 'We need to set a few settings under this category as well:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要在这个类别下设置一些设置：
- en: 'Minumum SDK Version: 21'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最低SDK版本：21
- en: 'Target SDK Version: 21'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 目标SDK版本：21
- en: 'Enable FullScreen Immersive on KitKat and above devices: True'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在KitKat及以上设备上启用全屏沉浸模式：True
- en: You'll see some older documentation tell you to set your minimum and target
    SDK versions to 19\. This is true for Samsung Gear, but for Oculus Go, you must
    select version 21.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 您会看到一些旧的文档告诉您将最低和目标SDK版本设置为19。这对于三星Gear是正确的，但对于Oculus Go，您必须选择版本21。
- en: 'Scroll down to the Advanced APKPackaging section and set the following:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 向下滚动到“高级APK打包”部分，并设置以下内容：
- en: Configure the AndroidManifest for deployment to Oculus Mobile to True
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将AndroidManifest配置为部署到Oculus Mobile：True
- en: Older walkthroughs will refer to this setting as *Configuring the AndroidManifest
    for deployment to Gear VR*. Its name has been changed.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 旧的步骤将把这个设置称为“配置Android清单以部署到Gear VR”。它的名称已经改变了。
- en: Setting your Android SDK locations
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置Android SDK位置
- en: 'Now, select Platforms | Android SDK, and set the following (adjusting for wherever
    you installed your SDK):'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，选择“平台”|“Android SDK”，并设置以下内容（根据您安装SDK的位置进行调整）：
- en: Location of Android SDK: `C:/NVPACK/android-sdk-windows`
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Android SDK的位置：`C:/NVPACK/android-sdk-windows`
- en: Location of Android NDK: `C:/NVPACK/android-ndk-r12b`
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Android NDK的位置：`C:/NVPACK/android-ndk-r12b`
- en: Location of ANT: `C:/NVPACK/apache-ant-1.8.2`
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ANT的位置：`C:/NVPACK/apache-ant-1.8.2`
- en: Location of JAVA: `C:/NVPACK/jdk1.8.0_77`
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JAVA的位置：`C:/NVPACK/jdk1.8.0_77`
- en: 'SDK API Level: `latest`'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SDK API级别：`latest`
- en: 'NDK API Level: `android-21`'
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NDK API级别：`android-21`
- en: 'Refer to the following screenshot:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 参考以下截图：
- en: '![](img/61078601-f81a-411b-90ea-78c54080af51.png)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
  zh: '![](img/61078601-f81a-411b-90ea-78c54080af51.png)'
- en: Make sure the directories you specify here point to actual locations on your
    drive.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 确保你在这里指定的目录是你驱动器上实际存在的位置。
- en: Be aware that these directory names are going to change when you update your
    Android SDKs (which you must remember to do whenever you update your engine version.
    Make sure you're pointing to the correct directories for each of these after an
    update, or you'll run into some impressively cryptic errors).
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，当您更新Android SDK（每次更新引擎版本时都必须记住这样做）时，这些目录名称将会改变。在更新后确保您为每个目录指定了正确的目录，否则您将遇到一些令人难以理解的错误。
- en: Launching the test project
  id: totrans-167
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启动测试项目
- en: 'Close your project settings, and find the drop-down beside the Launch button.
    Open it, and you should be able to see the serial number of your mobile VR headset:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 关闭项目设置，并找到“启动”按钮旁边的下拉菜单。打开它，您应该能够看到您移动VR头盔的序列号：
- en: '![](img/24ca442b-216e-4a19-a332-5f38d3e6c831.png)'
  id: totrans-169
  prefs: []
  type: TYPE_IMG
  zh: '![](img/24ca442b-216e-4a19-a332-5f38d3e6c831.png)'
- en: The devices listed here will vary depending on what platforms your project supports
    and what devices are found.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 这里列出的设备将根据您的项目支持的平台和找到的设备而有所不同。
- en: 'Select the headset to launch to it. It''s totally normal for the editor to
    become unresponsive for a short time as it gets things ready. Be patient. Once
    the editor becomes responsive again, you should see something such as the following:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 选择要启动的头戴设备。编辑器在准备好之前短时间内变得无响应是完全正常的。请耐心等待。一旦编辑器再次响应，您应该会看到类似以下的内容：
- en: '![](img/bf3ba25f-9c65-4478-b167-c7cb0403cb79.png)'
  id: totrans-172
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bf3ba25f-9c65-4478-b167-c7cb0403cb79.png)'
- en: Android asset processing progress indicator
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: Android资源处理进度指示器
- en: It's not a bad idea to select Window | Developer Tools | Output Log so that
    you can see what it's doing, but this isn't required. Hitting the Show Output
    Log link will do the same thing.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 选择“窗口”|“开发者工具”|“输出日志”不是一个坏主意，这样你就可以看到它在做什么，但这不是必需的。点击“显示输出日志”链接将会做同样的事情。
- en: Get in the habit of watching your output log. Lots of developers ignore this,
    but you shouldn't. You can learn a lot about what the engine is doing by watching
    the log.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 养成观察输出日志的习惯。很多开发者忽视了这一点，但你不应该。通过观察日志，你可以了解引擎正在做什么。
- en: This is going to take a while the first time you run it, because lots of shaders
    will need to be compiled. Subsequent runs will go much faster.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the assets are compiled, Unreal will copy them to your device:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0e82b936-20ac-4a9c-961d-f0d27651dd59.png)'
  id: totrans-178
  prefs: []
  type: TYPE_IMG
- en: Deployment may take a while depending on how much data needs to be transferred
    to the device.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
- en: 'Once deployment is finished, the scene should run in your device:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3d394a11-b57c-438c-ab98-c808f8493901.png)'
  id: totrans-181
  prefs: []
  type: TYPE_IMG
- en: Once this dialog indicates that the project is running on the device, you should
    be ready to test it.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
- en: Put on the headset and you should be in your scene. Congratulations! You've
    just deployed a project to a mobile VR headset!
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
- en: Using the Epic Games launcher
  id: totrans-184
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we go too much further, let's take a look at the Epic Games launcher—there's
    a ton of useful material here, and this should be a starting place for much of
    your learning. It's worth it to take some time to look around and see what resources
    are available to you. It's easy to overlook these resources, but if you get used
    to understanding where you can learn and find information when you need it, you'll
    get much further, much faster.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
- en: 'The launcher''s Unreal Engine tab is broken into four major sections:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
- en: Unreal Engine
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learn
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Marketplace
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Library
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's take a look at each of them.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
- en: The Unreal Engine Tab
  id: totrans-192
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Unreal Engine tab displays featured content and projects, which are definitely
    worth exploring, but they''ll become more relevant to you as you use the engine
    longer. As a new user, pay particular attention to that row of icons right under
    the main banner. These are valuable resources:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a4aa7674-6f34-40da-a25a-bfe9c721ee7f.png)'
  id: totrans-194
  prefs: []
  type: TYPE_IMG
- en: The Unreal Engine tab as of Unreal 4.22
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
- en: The News link is a great way to keep up with what's going on; it mostly focuses
    on new features, events, and interesting ways the engine is being used. This is
    another one that will get more meaningful to you as you spend more and more time
    in the engine.
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The YouTube link takes you to the Unreal Engine YouTube channel. This is one
    of the best places to find in-depth tutorials, feature highlights and project
    spotlights. There's quite a lot of information in the Feature Highlight videos
    especially that you're not likely to find anywhere else.
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The AnswerHub is an essential resource for developers to ask and answer questions.
    Just about any time you have a question, this should be one of the first places
    you search for an answer. The chances are pretty high that you'll find what you're
    looking for. Don't be shy about asking questions of your own, but do try to search
    for existing questions and answers before you jump in and ask something that's
    already been answered. Also, try to pay it forward—if you see a question you know
    how to answer, contribute. This is how the community works.
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Forums are a place for conversations about all topics related to the engine,
    and are a great place to find out what's going on. Most plugin developers maintain
    contact with their users on the forums too. There's a forum dedicated to VR and
    AR development here: [https://forums.unrealengine.com/development-discussion/vr-ar-development](https://forums.unrealengine.com/development-discussion/vr-ar-development).
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Roadmap link takes you to a Trello page that describes what's being worked
    on for upcoming releases and what's planned for the more distant future. Early
    on in your Unreal development career, this may not be so meaningful to you, but
    as you get deeper into the engine, those upcoming changes will start to matter.
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learn
  id: totrans-201
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is one of the most important resources on the launcher. You won't regret
    the time you spend here.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s begin by looking at the top bar:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8705cdf7-5275-49e8-83c5-d1d03e7512a1.png)'
  id: totrans-204
  prefs: []
  type: TYPE_IMG
- en: The Learn tab as of Unreal 4.22
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
- en: The Documentation link takes you to Unreal's documentation home at [https://docs.unrealengine.com/en-us](https://docs.unrealengine.com/en-us).
    The Get Started with UE4 link on the documentation page is a good place to learn
    the basics of the art, level design, and programming pipelines. If you're brand
    new to Unreal Engine, we recommend that you go through these basics so you know
    your way around the editor. You'll have a much better time building the projects
    in this book, and you'll get more out of them if you've done this. After you've
    gotten through the basics, consider this documentation page to be your standard
    go-to reference any time you need to work with a new tool or system in the engine.
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Video Tutorials link takes you to [https://academy.unrealengine.com/](https://academy.unrealengine.com/),
    an online learning site consisting of tons of detailed video tutorials on topics
    centered around specific industries, roles, workflows, and concepts. These are
    worthwhile classes, and are a great way to get an understanding of how the different
    parts of the engine fit together to allow you to do whatever you need to do.
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Community Wiki page is less useful than the others. As we mentioned previously,
    the content on this page is not guaranteed to be up-to-date, or even correct.
    It's worth knowing that it's there, but it's usually a better idea to search for
    information on the forums and in the documentation than on the Wiki, as incorrect
    information on the forums will usually be corrected fairly quickly by other users,
    while it can fester on the Wiki.
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The content examples project
  id: totrans-209
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Below this bar, we have a few featured links to quick-start guides and blog
    posts, and then a collection of engine feature samples. The most important of
    these is the Content Examples project. All of the projects here are worth looking
    at for specific topics, but Content Examples should be a regular reference for
    you. Let's install it now.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the Content Examples project to open its detail page, and hit the Create
    Project link on the page:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/aef9cee7-d184-400a-9c95-89fa0809e2c4.png)'
  id: totrans-212
  prefs: []
  type: TYPE_IMG
- en: The Content Examples project detail page
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
- en: 'You''ll be asked where you want to put the project, and what engine version
    you''d like to use to create it. Put it someplace reasonable (it''s not a bad
    idea to maintain a directory specifically for Unreal reference projects), and
    select your most recent engine version. Hit Create to create the project. The
    project will launch automatically after you''ve created it, and later on you can
    access it from the My Projects section of the Library tab. Let''s allow the project
    to launch, or launch it specifically from your Library tab once it''s been created:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b5c6d3ef-5bd9-4ff3-9a3e-5051a2322d3c.png)'
  id: totrans-215
  prefs: []
  type: TYPE_IMG
- en: When launching a project, note the Unreal Editor version number and the Loading
    progress.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
- en: It's natural for the project to take a little while to initialize the first
    time you launch it. Unreal is building assets for your machine. If it appears
    to be hung up for a few minutes at 45% or 95%, don't worry—it isn't. It's building
    animations, shaders, and other assets. Subsequent launches will go much faster.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the project has opened, hit File | Open Level (or *Ctrl* + *O*) to open
    one of the demo maps. Hit the Play button, and use standard **WASD** keyboard
    controls to move around and look at examples:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/69735bb2-f69d-456f-9beb-a0f21aae0f32.png)'
  id: totrans-219
  prefs: []
  type: TYPE_IMG
- en: One of the demo levels contained within the Content Examples project
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
- en: Take some time to poke around this project to familiarize yourself with the
    editor, and get a sense of what Unreal can do. Later on, when you want to include
    something in your project, make it a habit to check to see whether there's an
    example in `Content Examples` that can give you a head-start on figuring out how
    it's done.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
- en: Seriously, this is one of the most useful and often overlooked resources available
    to you. There's a ton of good stuff in the `Content Examples` project.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
- en: Gameplay concepts and example games
  id: totrans-223
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At the bottom of the Learn page is a series of projects illustrating specific
    gameplay concepts and a series of example games. These are incredibly valuable
    resources for learning more advanced topics and for learning what finished projects
    in Unreal Engine look like. The content of these projects tends to be more advanced,
    however, as these mostly represent finished games in a releasable state. You may
    want to spend some time in the engine before you download them and start to explore.
    For now, you should know that they're there. Feel free to dig around if you're
    curious and want to look ahead.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
- en: Marketplace
  id: totrans-225
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We''re going to make use of free assets from Marketplace in this book, so you
    should take some time to look at this tab:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/022e19bc-b102-4f25-a17e-ec3cf37e9aab.png)'
  id: totrans-227
  prefs: []
  type: TYPE_IMG
- en: Marketplace content as of Unreal 4.20
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
- en: Epic provides an astonishing amount of high-quality free material in the Marketplace.
    Often, if Epic cancels a game that it was developing internally, it'll make the
    game assets available for free on the Marketplace. Make use of this, especially
    when building your learning projects. Assets from *Infinity Blade* are especially
    useful for projects in VR, as they were originally intended for a mobile game,
    so they're optimized reasonably well for VR's stringent demands. We'll see how
    to add Marketplace content to existing projects as we start building in the next
    chapters. Don't ignore the paid material on the Marketplace either. Much of it
    is excellent, and it can give you a huge leg-up in building your projects, whether
    you use it for prototype, or in your released title.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
- en: Library
  id: totrans-230
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Library tab is where you maintain your installed engine versions, open
    your projects, and access your vault of plugins and content packs that you downloaded
    from the Learn tab and Marketplace:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1cb3896e-d4f3-478b-8e50-29f5ecf1ea19.png)'
  id: totrans-232
  prefs: []
  type: TYPE_IMG
- en: The Library panel as of Unreal 4.20
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
- en: Use the ENGINE VERSIONS section to update your installed engine versions, install
    new engine versions, and modify their options.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
- en: 'A quick word about engine versions: If you see an indicator appear on an installed
    engine version indicating that it can be updated, you should update it. Updates
    to engine releases, such as going from 4.20.2 to 4.20.3, are generally safe to
    apply, as they involve bug fixes but don''t change the way anything works in ways
    that could break your project.'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
- en: In addition to updating your currently installed engine version, you can also
    use the + sign beside the ENGINE VERSIONS label to add additional installed versions.
    This allows you to install older versions if you need to open older content that
    hasn't yet been updated to the current version, or to install preview versions
    if you'd like to test something that's coming in the next release.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
- en: Use caution when working in preview versions. They're intended to allow you
    to look ahead, but they aren't guaranteed to be stable. Don't put mission-critical
    work on a preview version. Work in release versions, and use previews to see what's
    coming or to see how you might need to update your project when you move to the
    new version.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
- en: 'The My Projects section allows you to launch your projects. Project thumbnails
    are marked with the engine version number for which they''re currently set up.
    You can update a project to a new engine version by launching the newer version,
    and then opening that project into the newer version. When you do this, you''ll
    be presented with a dialog asking whether you''d like to copy the project or convert
    it in-place. Converting in place is dangerous; it''s recommended that you perform
    your updates on a copy to be sure nothing in your project conflicts with the update.
    (That''s why the option to convert in-place is buried under the More Options...
    link.) If you have a really old project that''s a few versions behind, you''re
    generally going to have better luck converting it a version at a time than trying
    to jump a few versions. It can work, but whether it does will depend entirely
    on how many versions you''re trying to skip and what''s in your project:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e8b95c54-eed6-4baf-bf6f-0685557050be.png)'
  id: totrans-239
  prefs: []
  type: TYPE_IMG
- en: The Convert Project dialog gives you a few options to determine how you want
    to handle an engine update.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
- en: You don't have to launch your projects using the Epic Games Launcher; you can
    always navigate to where you saved the project and double-click the `.uproject`
    file directly to launch it in its associated engine version.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
- en: The Vault section contains everything you own—learning projects, plugins, and
    content packs. You can add plugins or content to existing projects and create
    new projects here.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
- en: Most of the time, the Library tab will be your default tab, since you'll be
    using it to launch projects, but as we mentioned a moment ago, don't forget about
    the others.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
- en: Setting up for C++ development
  id: totrans-244
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section is entirely optional. None of the projects in this book will require
    you to develop in C++, but we will occasionally highlight items in native code
    for those interested in going deeper. If you don't anticipate working in code,
    or if pages of code give you the screaming heebie-jeebies, it's completely fine
    to jump over this section and the one that follows it.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
- en: It's absolutely not required to use C++ when developing in Unreal. The Blueprint
    visual scripting language is incredibly expressive, and there isn't much that
    it can't do. Most applications, including pretty advanced projects, can be built
    entirely in Blueprint. Many new Unreal users see the C++ support and worry that
    they'll have to learn the language to use the engine. You don't. (If you are interested
    in learning C++ though, this can be a great way to do it.)
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
- en: Still here? Excellent. The first thing you'll need if you plan to develop in
    C++ is an editor and compiler with which to build your code. This type of application
    is called an **Integrated Development Environment** (**IDE**). For development
    in Unreal 4.20 and beyond in Windows, you should be using Microsoft's **Visual
    Studio 2017** (**VS2017**). Visual Studio comes in several flavors, but for development
    in Unreal, you don't need any of the professional or Enterprise edition features.
    The free Community edition has everything you need.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
- en: Installing Microsoft Visual Studio Community
  id: totrans-248
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Head to the **Microsoft Visual Studio Community** page, [https://visualstudio.microsoft.com/vs/community/](https://visualstudio.microsoft.com/vs/community/),
    to download the installer. When you run the installer, you''ll be presented with
    a few options:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2a3f3518-c28b-4e44-967d-d8910feafe9a.png)'
  id: totrans-250
  prefs: []
  type: TYPE_IMG
- en: The Visual Studio Community 2017 Setup dialog determines which languages and
    development tasks your installation will be configured to handle.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
- en: 'Under the Workloads tab, select Game development with C++, and then on the
    Summary sidebar on the right, make sure you''ve checked the following:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
- en: Unreal Engine installer (required)
  id: totrans-253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Windows 10 SDK (required—should already be checked by default)
  id: totrans-254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Windows 8.1 SDK (required on VS 2017—should already be checked by default)
  id: totrans-255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: C++ profiling tools (optional but useful)
  id: totrans-256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If you''re going to be developing for Samsung Gear or Oculus Go, make sure
    you also include this:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
- en: Android support for Unreal Engine (required for Gear or Go development)
  id: totrans-258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This installs the Java development kit and the Android tools you''re going
    to need to talk to the Gear and the Go:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/536c01d6-ec48-4f66-89ee-b96af7f806e1.png)'
  id: totrans-260
  prefs: []
  type: TYPE_IMG
- en: The Visual Studio 2017 Installation details panel allows you to determine which
    options are installed.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
- en: By setting these options, you've told Visual Studio to include C++ language
    support, and to include the necessary supporting files to run and develop for
    Unreal.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
- en: These settings are important. Visual Studio 2017 no longer automatically assumes
    that you're going to be developing in C++, so you need to select which languages
    you want it to support when you install it. If you realize later on that you missed
    something, use your Add and Remove Programs control panel to modify your VS2017
    installation options.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
- en: Recommended settings
  id: totrans-264
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are a few things you'll want to change in Visual Studio before you start
    working. These aren't required, but do make it play more nicely with Unreal. They're
    documented in depth here: [https://docs.unrealengine.com/en-us/Programming/Development/VisualStudioSetup](https://docs.unrealengine.com/en-us/Programming/Development/VisualStudioSetup).
    Run through this page and make the recommended changes.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s a quick overview of the changes the page is going to ask you to make:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
- en: Increase the width of the Solution Configurations control on the Standard toolbar
    because Unreal solution configuration names can be too long to read otherwise.
  id: totrans-267
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ensure that the Solution Platforms control is shown on the Standard toolbar.
    It should already be by default.
  id: totrans-268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ensure that Tools | Options | Projects and Solutions | Always show Error List
    if build finishes with error is turned off.
  id: totrans-269
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Set Tools | Options | Text Editor | C/C++ | View | Show Inactive Blocks to False.
  id: totrans-270
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ensure that your Intellisense options under Tools | Options | Text Editor |
    C/C++ | Advanced are not disabled. Older instructions would have told you to disable
    Intellisense, as it used to work poorly with Unreal's source code. This is no
    longer the case, and instructions that tell you to turn it off are now out of
    date. If you turned Intellisense off in the past, turn it back on now.
  id: totrans-271
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The UnrealVS plugin
  id: totrans-272
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that you have Unreal Engine installed and Visual Studio set up, we're going
    to want to install the UnrealVS plugin to Visual Studio in order, to simplify
    a number of common tasks you'll be performing in Visual Studio while working with
    Unreal.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
- en: Installing the UnrealVS plugin
  id: totrans-274
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Make sure Visual Studio is closed, and navigate to the location where you installed
    your current Unreal Engine version, and under `Engine\Extras`, find the `UnrealVS`
    directory. Open the directory corresponding to your version of Visual Studio (in
    our case, this is VS2017), and run the `UnrealVS.vsix` installer to install the
    plugin.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
- en: 'For Unreal 4.20, install it in the standard location. For example, you''ll
    find the plugin here:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
- en: '`C:\Program Files\Epic Games\UE_4.20\Engine\Extras\UnrealVS\VS2017`.'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
- en: Turning on the UnrealVS toolbar
  id: totrans-278
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Once you''ve finished running the plugin installer, open Visual Studio, and
    right-click an empty area of the toolbar to set your active toolbars. Turn on
    the `UnrealVS` toolbar:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ce60a399-10c5-4b56-be0a-afe837e7c6ff.png)'
  id: totrans-280
  prefs: []
  type: TYPE_IMG
- en: Right-clicking an empty toolbar area in Visual Studio 2017 allows you to select
    which toolbars are visible.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
- en: There's additional documentation on configuring and using UnrealVS here: [https://docs.unrealengine.com/en-us/Programming/Development/VisualStudioSetup/UnrealVS](https://docs.unrealengine.com/en-us/Programming/Development/VisualStudioSetup/UnrealVS).
    By installing it and turning on the toolbar, you've done everything you need to
    get it running, but it's worthwhile to take a look at this page to get a sense
    of what UnrealVS does for you and how you can use it.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
- en: Unreal debugging support
  id: totrans-283
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There's one more thing we need to do before we're ready to go, and that is to
    install a debugging support file for Unreal in Visual Studio.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to your engine install directory and find `Engine\Extras\VisualStudioDebugging`.
    Look for the `UE4.natvis` file there and copy it.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
- en: Paste it into one of two locations.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
- en: 'You can either install it to your Visual Studio install location, in the following
    path (you''ll need admin rights on your machine to do this):'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
- en: '`[VisualStudioInstallPath]\Common7\Packages\Debugger\Visualizers\UE4.natvis`'
  id: totrans-288
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Example: `C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\Common7\Packages\Debugger\Visualizers`'
  id: totrans-289
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Alternatively, you can install it to your personal `Documents` directory. If
    you check within your user profile''s `Documents` directory, you should find a Visual
    Studio 2017 directory that was automatically created for you when you installed
    the IDE. If a visualizers subdirectory already exists inside this directory, paste
    `UE4.natvis` inside it. If not, create the directory and put the natvis file there:'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
- en: '`[UserProfile]\Documents\Visual Studio 2017/Visualizers/UE4.natvis`'
  id: totrans-291
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Example: `D:\OneDrive\Documents\Visual Studio 2017\Visualizers`'
  id: totrans-292
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A `.natvis` file contains instructions to help Visual Studio display the contents
    of native data types defined within your particular solution. Unreal defines its
    own custom string type (`FString`), custom array types (`TArray`) and many others.
    `UE4.natvis` tells Visual Studio how to display the data contained within these
    types in a readable way when you're debugging.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
- en: Test everything out
  id: totrans-294
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, we're ready to verify that we've set everything up correctly. From the
    Epic Games launcher, launch your current engine version. Under the New Project
    tab, select C++.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
- en: 'If you see a warning such as the following, make sure you''ve installed Visual
    Studio 2017, and that you installed it with the game development with C++, and
    the recommended settings were selected:'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e5caf299-ab36-4720-92fd-eab97736fab5.png)'
  id: totrans-297
  prefs: []
  type: TYPE_IMG
- en: If you see this warning, you either haven't yet installed Visual Studio, or
    haven't set up the required installation options.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
- en: If you've installed VS2017 and you do see a warning, it means you're missing
    one of the required options we just mentioned. Use your Add and Remove Programs
    control panel to modify your VS2017 install and add these options.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
- en: 'If you don''t see any warnings, you''re ready to create a quick test project.
    Let''s select a Basic Code template under the C++ tab, with the default options,
    and choose a location and name for it:'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d8d73d9f-7f76-4d68-b84c-3213d6813de0.png)'
  id: totrans-301
  prefs: []
  type: TYPE_IMG
- en: Creating a C++ project works similarly to creating a Blueprint project.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
- en: Hit Create Project, and allow the tool to create a new project for you. Give
    it a moment. If you've set everything up correctly, Unreal Editor should open
    your newly created project, and Visual Studio 2017 should open to the newly created
    project solution file. Let's close the Unreal Editor now and build and launch
    the new project from VS2017 just to see how this is done.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
- en: 'In the Solution Explorer tab in Visual Studio, find your new project solution
    under the Games tree. Right-click it and select Set as Startup Project:'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/135edce6-5bc7-49cd-b144-9d231c12d824.png)'
  id: totrans-305
  prefs: []
  type: TYPE_IMG
- en: The Solution Explorer on the left side shows you what files are contained in
    your project. The Workspace on the right shows the contents of the currently-loaded
    file.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
- en: Right-click it again, and select UnrealVS Quick Build | Win64 | DebugGame Editor.
    Your project should begin building.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two solution configurations you''ll commonly use when developing
    for Unreal in C++: **DebugGame Editor** and **Development Editor**. Visual Studio
    is what''s called an **optimizing compiler**, which means that it modifies your
    code somewhat when it compiles it to make it run faster. This has the advantage
    of letting you write easily readable code that still runs quickly after it''s
    been compiled, but what this means in practice is that if you debug a development
    build, not every bit of data will be visible, because some variables will have
    been optimized out.'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
- en: A debug build leaves everything as you wrote it, so it runs a little more slowly,
    but you can see exactly what each variable contains. Most of the time, you'll
    want to use the Development Editor configuration.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
- en: You'll see that in addition to DebugGame Editor and Development Editor, you
    also have DebugGame and Development configurations available. You won't use these
    when working in the editor; they don't include the editor and require your content
    to be cooked into a release-ready format. (We'll talk about cooking later on.)
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
- en: For this example, we selected a DebugGame Editor configuration so you'd have
    a chance to see the compiler build a configuration that hadn't been built yet.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
- en: 'Once your project has finished building, check your output. If it looks something
    like this, you''re good to go:'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-313
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Now, on your standard toolbar, use the Solution Configurations control to select
    the debug editor configuration you just built:'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/06c02a8c-7c32-4fbe-aa2a-5a139f4496fd.png)'
  id: totrans-315
  prefs: []
  type: TYPE_IMG
- en: The Solution Configurations control determines what type of build you're going
    to create.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
- en: 'Hit *F5*, or select Debug | Start Debugging, to launch the editor from Visual
    Studio. If everything is set up correctly, your project should launch, and your
    Visual Studio window should look something like this:'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/af60929e-0524-4274-8cef-515375ce0923.png)'
  id: totrans-318
  prefs: []
  type: TYPE_IMG
- en: An Unreal C++ project loaded in Visual Studio Community 2017\. The orange bar
    at the bottom indicates that the project is running and Visual Studio's debugger
    is connected to it.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
- en: Congratulations! You're now set up to develop in C++.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at a quick example of why this can be so useful. In the
    default scene that was automatically created in your Unreal Editor, select Floor
    from your World Outliner. Right-click it:'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5a201c75-2a6b-471b-bde6-327a1dd81dfb.png)'
  id: totrans-322
  prefs: []
  type: TYPE_IMG
- en: You can open C++ files directly from within the Unreal Editor.
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
- en: 'The floor is a Static Mesh actor. Select the option to open `StaticMeshActor.h`.
    You''ll be switched automatically to Visual Studio, and the `StaticMeshActor`
    header file will be opened:'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
- en: If you're not able to open `StaticMeshActor.h`, check to be sure you installed
    the engine source for your engine version. Head to the Library tab, find the engine
    version you're running under Engine Versions, and select Options from the drop-down
    to the right of the Launch button. Add Engine Source if you hadn't already.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ecd8fa07-7b76-41af-b498-771a8227e00a.png)'
  id: totrans-326
  prefs: []
  type: TYPE_IMG
- en: The C++ header file for the StaticMeshActor class describes the class and declares
    its functions.
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
- en: This is one of the many amazing things about Unreal Engine—Epic gives you the
    source code—all of it. For any object, any Blueprint node, anything at all in
    the editor, you can view the source code underneath. There are no black boxes.
    Again, this is by no means a thing you have to do in Unreal—the documentation
    is excellent, but if you're ever facing a mystery and really need to figure out
    what's going on, being able to read the source code can be a lifesaver.
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
- en: Building Unreal from source code
  id: totrans-329
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You absolutely do not need to download source code and build the engine from
    scratch for almost anything you'll realistically be doing with it. This section
    is included here so that you have the freedom to make engine changes if you ever
    need to, but you can safely skip this. It's rare even for professional developers
    to work from the bleeding edge source.
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
- en: This next section is even more optional than the previous. You'll only ever
    need to do this if you intend to modify the behavior of the engine itself, or
    if you want to work with a feature that's so new that it hasn't yet been bundled
    into one of the releases. That's another part of the beauty of this engine though—if
    you really need it to do something it doesn't already do, you can make the changes
    yourself. Also, if you make changes that improve the engine or might be useful
    to other developers, you can use GitHub to contribute your changes to Epic. Lots
    of developers do, and the net effect of it is that this engine grows and improves
    at an astonishing pace.
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
- en: For real though, you can skip this if you don't anticipate needing it. We're
    going to get a little into the weeds here.
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a GitHub account and installing Git
  id: totrans-333
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The source code for the Unreal engine is distributed using a site called **GitHub**.
    **Git** is a version-control system (a system for managing code revisions and
    distributing them to users), and GitHub is a centralized location for housing
    and sharing Git repositories. To download the Unreal Engine source code in a format
    that allows you to build the engine yourself, you'll need Git and GitHub.
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
- en: Lots of people confuse Git with GitHub. They're not the same thing. Git is a
    version control system that allows users to track changes to code, distribute
    those changes, and manage them in many other ways. GitHub is a website that allows
    users to store and share Git data. There are other sites that also allow you to
    do this, though GitHub is the largest, or you could set up a Git repository entirely
    on your own.
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
- en: Setting up or logging into your GitHub account
  id: totrans-336
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you do plan to dig into the absolute bleeding edge of Unreal development,
    the first thing you're going to need is a **GitHub** account. Head to [https://github.com/](https://github.com/) and
    sign in, or sign up if you don't already have an account.
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
- en: Installing Git for Windows
  id: totrans-338
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Head to [https://git-scm.com/](https://git-scm.com/) and download Git for Windows.
    Git is a software configuration management tool, which allows you to synchronize
    your local Unreal source code repository with the source code Epic supplies.
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
- en: 'Install it using the default options, with one exception: when the installer
    asks what you''d like to use as your default editor for Git, the currently selected
    choice will be **Vim**. Vim is wonderful for those who have gotten used to using
    it, but for everyone else, it can be pretty counter-intuitive because it follows
    a completely different set of conventions from pretty much any other application
    you''ve used. You''ll almost certainly want to select a different text editor
    if you aren''t already one of those people who uses and loves Vim:'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/75294dc3-c453-4d00-9def-ace4e1814da6.png)'
  id: totrans-341
  prefs: []
  type: TYPE_IMG
- en: You can choose your preferred text editor as Git's default editor when you set
    Git up.
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
- en: It's a good idea to have a robust text editor on your system anyway, as it can
    be useful for editing config files and a ton of other tasks. Common choices are
    **Visual Studio Code**, **Sublime Text**, **Notepad++**, or **Atom**. If you have
    a favorite, feel free to use it. If you don't, Visual Studio Code is a good choice,
    as it's free and follows the same conventions as Visual Studio. If you need it,
    grab it here: [https://code.visualstudio.com/](https://code.visualstudio.com/).
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
- en: Installing Git Large File Storage
  id: totrans-344
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Next, you're going to need to install **Git Large File Storage** (**Git-LFS**).
    This allows Git to manage big binary files such as the ones Unreal generates.
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
- en: Head to [https://git-lfs.github.com/](https://git-lfs.github.com/), download
    Git-LFS, and install it.
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, you need to configure Git to use Git-LFS. To do this, do the following:'
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
- en: Open Git Bash—a command-line tool for managing Git, which was installed a moment
    ago when you installed Git for Windows. In Git Bash, type `git lfs install` and
    hit *Enter:*
  id: totrans-348
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c90ad882-3031-4c3f-90f0-caf834ecf630.png)'
  id: totrans-349
  prefs: []
  type: TYPE_IMG
- en: Git Bash is a terminal window specifically used to communicate with Git.
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
- en: Once you see that Git LFS has been initialized, you can close Git Bash.
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
- en: Installing a Git GUI
  id: totrans-352
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It's not required that you use a GUI to operate Git. Many developers operate
    Git directly from the command line instead. Certain Git operations are easier
    to perform this way. The following instructions apply if you'd like to use a GUI
    for Git.
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
- en: Head to [https://desktop.github.com/](https://desktop.github.com/) and download
    **GitHub Desktop**. There are many other Git GUI applications out there; another
    popular choice is **Atlassian's SourceTree**, which you can find at [https://www.sourcetreeapp.com/](https://www.sourcetreeapp.com/),
    but for simplicity's sake for now, we're going to stick with GitHub Desktop. During
    the installation, the installer will ask you for credentials for the GitHub account
    you just created. Enter them here.
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you''ve finished installing, GitHub Desktop should start up, and you should
    be looking at a window that looks something like this:'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4f78039b-9b76-4fba-8970-80b361e82614.png)'
  id: totrans-356
  prefs: []
  type: TYPE_IMG
- en: Git GUI's like GitHub Desktop aren't required to communicate with Git, but can
    be helpful when you're staring out.
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
- en: Connecting your GitHub account to your Epic Games account
  id: totrans-358
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Navigate to [https://www.unrealengine.com](https://www.unrealengine.com) and
    if you''re not logged in yet, log in now. Find your username in the lower-left corner
    of the page, and hover over it to reveal the drop-down menu. Select the Manage
    Account option:'
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ecc01e03-7170-4d58-a727-bd7d98c625ef.png)'
  id: totrans-360
  prefs: []
  type: TYPE_IMG
- en: The account management link as of Unreal 4.22\. This opens a browser window
    to https://www.unrealengine.com/account/personal
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
- en: Be aware that menus in the Epic Games Launcher change frequently. You can also
    handle this step by navigating to [https://www.unrealengine.com/account/personal](https://www.unrealengine.com/account/personal).
    Open the Connected Accounts tab, find the GitHub icon, and hit Connect to connect
    your Epic account to GitHub. Agree to the EULA if you need to, and sign into GitHub
    if it asks you to do so. Finally, if the authorization utility asks, click the
    Authorize Epic Games button. You should receive an email confirming that you've
    done this. If you need further help or if something goes wrong, check the documentation
    at [https://www.unrealengine.com/en-US/ue4-on-github](https://www.unrealengine.com/en-US/ue4-on-github).
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
- en: Confirm that everything is set up correctly by navigating to [https://github.com/EpicGames/UnrealEngine](https://github.com/EpicGames/UnrealEngine).
    If you're able to see the page, you're properly connected. If not, ensure that
    you've properly connected your account and been authorized to see the UnrealEngine
    repository.
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
- en: 'A word about Git: Git is a phenomenally useful tool, but the work it does can
    seem fairly complex at first. Detailing all the things you should know about Git
    falls outside the scope of this book, but we highly recommend that you spend some
    time to learn what Git is and how it works if you plan to use it. This is a good
    place to start: [https://git-scm.com/book/en/v2/Getting-Started-Git-Basics](https://git-scm.com/book/en/v2/Getting-Started-Git-Basics).
    To understand how GitHub works with Git, start here: [https://guides.github.com/activities/hello-world/](https://guides.github.com/activities/hello-world/).'
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
- en: Downloading the Unreal Engine source code
  id: totrans-365
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, you're ready to pull the source. Let's look at how to do this. Navigate
    to [https://github.com/EpicGames/UnrealEngine](https://github.com/EpicGames/UnrealEngine),
    and take a look around the page. There's a `ReadMe` file on this page as well.
    It's highly recommended that you read it.
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
- en: Choosing your source branch
  id: totrans-367
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Note that Epic maintains multiple branches of the Unreal Engine repository:'
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
- en: The release branch contains tested source code and is equivalent to the source
    code you get by downloading the engine using the Epic Games launcher.
  id: totrans-369
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The promoted branch contains less-tested code that's used internally by Epic's
    designers and artists. It's fairly stable and will contain newer, but also less
    stable, code than that on the release branch.
  id: totrans-370
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The master branch is the absolute bleeding edge, and contains changes more-or-less
    the moment Epic''s engineers submit them. There''s no guarantee that these changes
    will be stable though, or even compile. If you plan to contribute to the engine
    though, you should be on this branch:'
  id: totrans-371
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/1d3668a9-4ba9-4909-9acb-f7234dd141d3.png)'
  id: totrans-372
  prefs: []
  type: TYPE_IMG
- en: This view of the Epic Games / UnrealEngine GitHub repository allows you to choose
    your current branch and download its contents.
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
- en: For now, let's stick with the release branch. Select it using the Branch drop-down
    near the upper-left corner.
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
- en: Forking the repository
  id: totrans-375
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We're going to Fork this repository. Forking a Git repository makes a copy of
    it that allows you to make your own changes without impacting the main repository.
    Hit the Fork button near the upper-right. This will create a personal repository
    for you containing the source code you just forked.
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
- en: Cloning the repository to your local machine
  id: totrans-377
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, you need to get it onto your desktop. Hit the green Clone or download
    button on the right-hand side of the page:'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/83f62f7b-7cea-40c4-a81a-2d15cb3f4b3a.png)'
  id: totrans-379
  prefs: []
  type: TYPE_IMG
- en: When cloning a repository, you have the option to choose your authentication
    method and how you'd like the content to be delivered.
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
- en: You have a few options here.
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
- en: Option 1 – Cloning using GitHub Desktop
  id: totrans-382
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you''re using GitHub Desktop as a GUI, select Open in Desktop and allow
    the page to launch GitHub Desktop. GitHub Desktop will ask you where you want
    to store the new repository. Tell it where to put it and hit Clone:'
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6d63e0ae-5790-41d1-877f-ec699687c572.png)'
  id: totrans-384
  prefs: []
  type: TYPE_IMG
- en: Ensure that the location you choose for your local path has room to hold the
    engine and its content.
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
- en: Option 2 – Cloning from the command line
  id: totrans-386
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you''re using a command line, hit the Copy to Clipboard button to the right
    of the repository''s URL, and then open a Windows Command Prompt and navigate
    to the directory where you''d like to house your local repository. Once there,
    type `git clone`, and paste the URL you just copied:'
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-388
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The source code will now be downloaded to the location you specified.
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
- en: Downloading engine binary content
  id: totrans-390
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Navigate to the location where you downloaded the Unreal Engine source just
    now, and look for the `Setup.bat` file there. Run it:'
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e729973b-b830-4d5a-8d83-17c2676226e0.png)'
  id: totrans-392
  prefs: []
  type: TYPE_IMG
- en: Unreal Engine content is delivered separately from the source code. You must
    run this .bat file before the engine can work.
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
- en: This batch file will now check for engine binary content that's missing or needs
    to be updated, and will update it. It may take a while the first time you run
    it.
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
- en: Generating project files
  id: totrans-395
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Next, find `GenerateProjectFiles.bat` in the same directory and run it. This
    will create the `UE4.sln` solution file for Visual Studio and the required project
    files for each of Unreal Engine's sub-projects. This should run fairly quickly.
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
- en: Opening and building the solution
  id: totrans-397
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Open the newly generated `UE4.sln` file in Visual Studio. Ensure that the Development
    Editor solution configuration is set, and right-click the `Engine/UE4` project
    from your Solution Explorer. Select UnrealVS Quick Build | Win64 | Development
    Editor:'
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9359018b-6601-4a03-b499-c4b20bc1f084.png)'
  id: totrans-399
  prefs: []
  type: TYPE_IMG
- en: The Quick Build command allows you to select the build configuration you'd like
    to build. Most of the time, you'll only be interested in Development Editor or
    Debug Editor configurations.
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
- en: This build is going to take much longer than the build we ran earlier, as we're
    now building the entire engine, not just a game.
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
- en: Once the build completes, ensure that UE4 is set as the startup project (it
    should be by default), and hit *F5* to launch it in the debugger.
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
- en: Congratulations! You've now downloaded and built Unreal Engine entirely from
    source.
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
- en: Updating your fork with new changes from Epic
  id: totrans-404
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Epic will soon release new changes that aren't yet present in your fork. How
    soon will depend on the branch you're on. If you're on the release branch, new
    changes will come every few weeks. On the promoted branch, they will come every
    day or two. On the master branch, they will come every few minutes. In all these
    cases, you'll need to update your fork to get the new changes.
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
- en: 'You can see when new changes need to be merged by looking at the bar below
    the Branch selector. It indicates how many commits have occurred since you last
    updated your fork:'
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f9198e01-4a8e-4480-b1b8-90a032ff65f1.png)'
  id: totrans-407
  prefs: []
  type: TYPE_IMG
- en: Here's an example of an ancient branch, far behind the current state of the
    release channel. We can see that it's over 52,000 changes behind. That's old.
    Dinosaurs roamed the earth when this code was last updated. We'll want to fix
    that.
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
- en: Option – Using the command line to sync changes
  id: totrans-409
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Keeping your fork up-to-date with changes from the upstream branch is one of
    those operations that really is easier to do from the command line. We recommend
    that you do it this way. Let's talk you through the process.
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
- en: Setting the upstream repository
  id: totrans-411
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We've already forked our own repository from the Unreal Engine source repository,
    and we've cloned it to our local machine. Now, we need to tell our fork how to
    pull changes from the original project (which we'll call the **upstream** repository).
    You only need to do this once. In GitHub, open the original Unreal Engine repository
    page, [https://github.com/EpicGames/UnrealEngine](https://github.com/EpicGames/UnrealEngine),
    and hit the green Clone or download button, and then hit the Copy to Clipboard
    button to the right of the URL. Don't open it in desktop or download the ZIP.
    All you need here is the URL.
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
- en: 'Open a Windows Command Prompt (note that you can also use Git Bash for this
    if you''re comfortable with UNIX commands, and if you''re going to be using Git
    heavily, it''s recommended that you do), and navigate to the directory where you''ve
    cloned your repository. Type `git remote -v` and press *Enter*. You should see
    your origin repository listed here, but no upstream repository. That''s what we''re
    going to set up next:'
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7092c555-150f-4cfa-b811-086a8fb2cc59.png)'
  id: totrans-414
  prefs: []
  type: TYPE_IMG
- en: The results of a git remote -v command before you've added your upstream repository
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, type `git remote add upstream` and paste the URL you copied a moment ago:'
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-417
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'And let''s verify that the upstream repo was properly set up by typing `git
    remote -v` again:'
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/69cc95b4-a6ba-45f2-b04a-325cd2ca9549.png)'
  id: totrans-419
  prefs: []
  type: TYPE_IMG
- en: The results of a git remote -v command after you've added your upstream repository
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
- en: Everything looks good—our upstream repo has been set.
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
- en: For more information on forking a repo and preparing it to pull changes from
    the upstream depot, have a look at GitHub's documentation here: [https://help.github.com/articles/fork-a-repo/](https://help.github.com/articles/fork-a-repo/).
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
- en: Syncing the fork
  id: totrans-423
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'From a command prompt or Git Bash within our repository directory, type `git
    fetch upstream`:'
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ddec52fc-99f4-46e4-ac37-3f8a05357d61.png)'
  id: totrans-425
  prefs: []
  type: TYPE_IMG
- en: Output from a git fetch upstream operation
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
- en: Now, *check out* whichever branch you're working in by typing `git checkout`,
    and the name of the branch. For example, type `git checkout release`, for the
    Release branch, `git checkout promoted` for the promoted branch, and `git checkout
    master` for the master branch.
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
- en: Next, merge the changes from the upstream branch into your local branch by typing
    `git merge upstream/`, followed by the name of your branch. Again, if you're on
    the release branch, this would be `git merge upstream/release`.
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
- en: Finally, you need to push your changes from your local machine back to your
    fork's repository online. Type `git push origin master` to do this.
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
- en: Reviewing the Git commands we just used
  id: totrans-430
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To recap: any time you need to bring your branch up-to-date with the upstream
    branch, use the following commands:'
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
- en: '`git fetch upstream`'
  id: totrans-432
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`git checkout [branch]`'
  id: totrans-433
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`git merge upstream/[branch]`'
  id: totrans-434
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`git push origin [branch]`'
  id: totrans-435
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Refer to the following screenshot:'
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/cbabc440-5838-404e-8cab-f6791df344bf.png)'
  id: totrans-437
  prefs: []
  type: TYPE_IMG
- en: Command outputs in Git Bash.
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
- en: Option – Using the web GUI to sync changes
  id: totrans-439
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you'd prefer to sync your fork online rather than by using the command line,
    follow this procedure.
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
- en: If you're using the command-line procedure for synchronizing your fork, you
    can skip this part, since it does the same job.
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
- en: 'Navigate to your fork''s page on GitHub, and hit the Compare button on the
    right-hand side of the bar. If you''ve made changes locally, they''ll appear in
    the Compare window that follows. (Let''s assume for simplicity''s sake that we
    haven''t, and that we''re just trying to get new code from Epic.) To do this,
    first, hit the switching the base link on the comparison page. This will reverse
    the comparison, so instead of looking for changes on our local fork that haven''t
    gone to Epic, we''ll look for changes made by other developers that aren''t yet
    present in our fork:'
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6fc7a631-107c-4531-a342-452265fa51ca.png)'
  id: totrans-443
  prefs: []
  type: TYPE_IMG
- en: A list of changes on GitHub that haven't yet been merged to your fork
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
- en: Here, we can see that the new changes can be merged automatically. This is expected
    because we haven't made any engine changes of our own. (Managing merged changes
    between your own Unreal Engine fork and Epic's branches is beyond the scope of
    this book.) In our case, we just want to get up to date.
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
- en: Creating a pull request
  id: totrans-446
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Hit the Create pull request button:'
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/02b6dca3-1a7d-4b8b-8d41-42250355ab31.png)'
  id: totrans-448
  prefs: []
  type: TYPE_IMG
- en: A new pull request to merge changes from the upstream branch to your own
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
- en: Give your pull request a name, and hit Create pull request again to create it.
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
- en: 'Your pull request will now be ready for review. In this case, since you initiated
    it, you can simply accept it:'
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7967678d-0ec6-4b30-9a56-314586cbc6a7.png)'
  id: totrans-452
  prefs: []
  type: TYPE_IMG
- en: The pull request confirmation dialog
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
- en: Merging the pull request
  id: totrans-454
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Hit Merge pull request to execute the merge and then hit Confirm merge to make
    it happen.
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the merge is complete, return to your fork, and you should no longer be
    behind:'
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/222d6f9d-6c31-4722-bf83-6b7ae1e2dc40.png)'
  id: totrans-457
  prefs: []
  type: TYPE_IMG
- en: Comparison between our branch and the upstream branch. We can see that we're
    now in-sync.
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
- en: Pulling the origin to your local machine
  id: totrans-459
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, you need to update your local copy on your machine.
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
- en: 'Head back to GitHub Desktop, and in your Unreal Engine repository, look for
    the Fetch origin button. Hit this to instruct GitHub Desktop to look for changes
    on the remote repository that you haven''t yet copied locally:'
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7e6ab988-83db-438b-830e-cd6841580c7d.png)'
  id: totrans-462
  prefs: []
  type: TYPE_IMG
- en: GitHub Desktop before we've fetched the new changes from the repo
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
- en: 'In our case, we have a few:'
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/42451b35-6aea-4741-9eed-2e8ceeaf5ab8.png)'
  id: totrans-465
  prefs: []
  type: TYPE_IMG
- en: GitHub Desktop ready to pull changes to our local machine
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
- en: It's time to pull those 52,000 changes down to our local machine. Hit Pull origin
    to do this. GitHub desktop will *check out* the changes, copying them to the local
    machine. Once this is done, we should see that hitting Fetch origin no longer
    results in any new files to pull—we're current.
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
- en: Re-synchronizing your engine content and regenerating project files
  id: totrans-468
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Regardless of whether you used the command line or a GUI to update your fork,
    you now need to update your solution file and project files to reflect the new
    source you've downloaded.
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
- en: If you're certain that no source files or assets have been added or removed,
    you can skip this part. When in doubt, run these operations to make sure your
    assets are current and that Visual Studio knows about changed files.
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
- en: With Visual Studio closed, re-run the `Setup.bat` file from your engine directory
    to update your binary content, and then re-run `GenerateProjectFiles.bat` to update
    your Visual Studio files. These will run much more quickly than they did the first
    time, as they're only updating what's changed.
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
- en: Open the solution, build it, and run it. You should be back in business on the
    current code.
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
- en: Very often, your startup project will change when you regenerate project files.
    If it does, right-click the project you'd like to launch and select Set as StartUp
    Project to reset it.
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
- en: Going further with source code on GitHub
  id: totrans-474
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There's quite a lot more we could talk about in modifying and building the engine
    source, but it falls outside the scope of this book. What you've learned here
    though will allow you to download Epic's most recent Unreal Engine code and build
    the engine if you need code that's more recent than the current release, or need
    to modify the engine.
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
- en: If you do plan to work with Unreal source code from GitHub, it's worthwhile
    to take the time to learn about it. It's a powerful tool, but it can be mystifying
    if you're not clear on what it's doing. Help is available here: [https://help.github.com/](https://help.github.com/).
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
- en: Again, most users will not need to do this, but it does sometimes happen that
    code to support new VR devices appears on the promoted or master branches long
    before it makes it to the release branches and the binary release channel through
    the launcher. You should now know enough to use the latest and greatest, if you
    ever need to do so.
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
- en: Additional useful tools
  id: totrans-478
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we move on from this chapter, let's take a quick moment to talk about
    other tools you may want to set up to work with Unreal. None of these will be
    required by the projects in this book, but they're worth knowing about, so you
    need to know where to look when you need them.
  id: totrans-479
  prefs: []
  type: TYPE_NORMAL
- en: A good robust text editor
  id: totrans-480
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Notepad just isn''t going to cut it when you need to edit large text files
    or replace a lot of text in a file. We recommend that you set up a dedicated text
    editor for this purpose. Here are a few options:'
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
- en: '**Visual Studio Code** ([https://code.visualstudio.com/](https://code.visualstudio.com/))
    is a powerful, lightweight text editor that supports lots of languages and contains
    a number of useful text-editing tools. It''s free.'
  id: totrans-482
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Sublime Text** ([https://www.sublimetext.com/](https://www.sublimetext.com/))
    is a highly customizable editor with tons of custom integrations for various languages.
    It is $80, with a free trial.'
  id: totrans-483
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Atom** ([https://atom.io/](https://atom.io/)) is a relatively new editor
    made by GitHub that supports tons of additional package installers for just about
    anything you could want to do to a text page. Because it''s made by GitHub, its
    Git integration is great. And it''s free.'
  id: totrans-484
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Notepad++** ([https://notepad-plus-plus.org/](https://notepad-plus-plus.org/))
    is fast and lightweight and is older than most of the rest, so it has a devoted
    following. It''s free as well.'
  id: totrans-485
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Vim** ([https://www.vim.org/download.php](https://www.vim.org/download.php))
    is its own beast. Its user interface conventions bear no resemblance to anything
    else in Windows, so it takes some significant effort to learn them. Its advantage
    is that once users learn the keystrokes to operate it, they can navigate through
    text documents at blazing speed without requiring the use of a mouse. And it runs
    on nearly anything that computes. We recommend this only if you''re already using
    it and love it or are specifically interested in learning it.'
  id: totrans-486
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Any of these or any other text editors you know and love will work out fine.
    Pick one that feels right to you and stick with it.
  id: totrans-487
  prefs: []
  type: TYPE_NORMAL
- en: 3D modeling software
  id: totrans-488
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Unreal scenes are made of 3D models, and you're going to need to modify them,
    clean them up, or create them from scratch at various points through your development.
    (How much you need to do this depends a lot on what you're creating, who you're
    working with, and the degree to which you're relying on existing art from the
    marketplace or other sources.) At any rate, it's a good idea to have a tool on
    your system that can edit 3D meshes.
  id: totrans-489
  prefs: []
  type: TYPE_NORMAL
- en: You'll commonly hear 3D modeling tools referred to as **Digital Content Creation**
    tools in the industry, usually shortened to **DCC**. If you hear someone refer
    to a DCC, they're generally talking about a 3D modeling tool such as Blender,
    Maya, or 3ds Max.
  id: totrans-490
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are a few options:'
  id: totrans-491
  prefs: []
  type: TYPE_NORMAL
- en: '**Blender** ([https://www.blender.org/](https://www.blender.org/)) is a free
    and open source 3D modeling program that''s heavily used in the independent development
    community. Lots of tutorials exist to teach you how to create assets in Blender
    and get them into Unreal. It''s free.'
  id: totrans-492
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Autodesk Maya** ([https://www.autodesk.com/products/maya/overview](https://www.autodesk.com/products/maya/overview))
    is a professional tool focused on creating content for media and entertainment.
    Nearly every creature you''ve ever seen in any movie or game over the past decade
    was likely modeled and animated in Maya. A Maya subscription costs around $1,500/year,
    but students are able to use it free for three years.'
  id: totrans-493
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Autodesk 3ds Max** ([https://www.autodesk.com/products/3ds-max/overview](https://www.autodesk.com/products/3ds-max/overview))
    is a professional modeling tool focused on creating content for **architecture,
    engineering and construction** (**AEC**), and product design. It''s commonly used
    in media and entertainment as well, but its animation tools are much more limited
    than those found in Maya. Pricing for 3ds Max is the same as it is for Maya—around
    $1,500/year, with a free student license available.'
  id: totrans-494
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Modo** ([https://www.foundry.com/products/modo#](https://www.foundry.com/products/modo#))
    is a newer entry to the professional market and is gaining adherents. It''s worth
    a look. A Modo subscription costs $600/year.'
  id: totrans-495
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The DCC you choose will depend on your budget and what you plan to do with it.
    Generally, if you're making VR for entertainment, Maya will contain more of what
    you need, but this is by no means absolute. For architecture and product design,
    3ds Max may be what you need. For indie game development, you might be fine with
    Blender as well. Do some research and find out what's the best fit for your particular
    needs.
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
- en: 'You''ll also see a few other tools in your professional travels. You mostly
    won''t see beginners using them, but they''re powerful tools and you should know
    they exist, so you can consider whether they might be a good solution for something
    you''re trying to do:'
  id: totrans-497
  prefs: []
  type: TYPE_NORMAL
- en: '**ZBrush** ([http://pixologic.com/](http://pixologic.com/)) is a digital sculpting
    tool, used for creating highly detailed models and surfaces.'
  id: totrans-498
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Mudbox** ([https://www.autodesk.com/products/mudbox/overview](https://www.autodesk.com/products/mudbox/overview)),
    like ZBrush, is a sculpting tool for adding fine detail to models.'
  id: totrans-499
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Houdini** ([https://www.sidefx.com/](https://www.sidefx.com/)) is a procedural
    creation tool for 3D geometry and effects. If you need to create a city full of
    buildings, a forest full of vines, or a churning fireball, Houdini may be what
    you''re looking for.'
  id: totrans-500
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Substance Painter** ([https://www.allegorithmic.com/products/substance-painter](https://www.allegorithmic.com/products/substance-painter))
    is a texture painting tool that allows artists to paint textures directly onto
    3D models.'
  id: totrans-501
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Substance Designer** ([https://www.allegorithmic.com/products/substance-designer](https://www.allegorithmic.com/products/substance-designer))
    is a powerful material- authoring tool for creating highly varied and realistic
    physically-based materials.'
  id: totrans-502
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These generally are expert and specialist tools, but it's worth knowing they're
    there and what they do.
  id: totrans-503
  prefs: []
  type: TYPE_NORMAL
- en: Image-editing software
  id: totrans-504
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You''re often going to need to edit textures and 2D art as well. You''ll need
    a tool with which to do this, and really you have two options you can seriously
    consider:'
  id: totrans-505
  prefs: []
  type: TYPE_NORMAL
- en: '**Adobe Photoshop** ([https://www.adobe.com/products/photoshop.html](https://www.adobe.com/products/photoshop.html))
    is the standard for 2D image editing. It''s worth it. There''s a secret to Photoshop''s
    pricing: if you subscribe to it as a standalone app, it costs $20.99 a month,
    but if you subscribe to the Photography bundle, you get it for $9.99/month instead.'
  id: totrans-506
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**GIMP** ([https://www.gimp.org/](https://www.gimp.org/)) is a free, open source
    image editing application. It lacks a lot of the functionality of Photoshop, but
    if you''re only occasionally modifying textures, it may be all you need.'
  id: totrans-507
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Your choice between Photoshop and GIMP will depend on your needs and your budget.
    If you're working professionally, it's probably best to stick with Photoshop,
    but if you don't need everything Photoshop does, GIMP might be enough.
  id: totrans-508
  prefs: []
  type: TYPE_NORMAL
- en: Audio-editing software
  id: totrans-509
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You''re occasionally going to need to edit sounds and music for your games
    and applications. You have a few options here, too:'
  id: totrans-510
  prefs: []
  type: TYPE_NORMAL
- en: '**Audacity** ([https://www.audacityteam.org/](https://www.audacityteam.org/))
    is a free, open source audio editing solution that''s surprisingly good. For much
    of the sound-editing work you''ll need to do, Audacity may be all you need.'
  id: totrans-511
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Adobe Audition** ([https://www.adobe.com/products/audition.html](https://www.adobe.com/products/audition.html))
    is a professional audio-editing tool. Its advantages over Audacity are higher
    quality effects, and a non-destructive editing workflow, which means that if you
    apply a filter or effect to your sound, and then want to change it later on, you
    still can. Audition is available on a monthly subscription, or it can be bundled
    into an Adobe All Apps subscription.'
  id: totrans-512
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Avid Pro Tools** ([https://www.avid.com/pro-tools](https://www.avid.com/pro-tools))
    is the most commonly used audio editing software among professionals, and is available
    in a free Pro Tools | First edition that contains all the features of the professional
    versions, but limits the number of inputs and audio tracks you can use. Whether
    this is an appropriate solution for you really depends on how heavily you anticipate
    editing audio, and what you plan to do with it.'
  id: totrans-513
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All the options we've mentioned cover sound editing, but for sound creation,
    there's no shortage of tools and audio libraries available. Cataloging them falls
    beyond the scope of this book, as sound design is its own art and the rabbit hole
    goes deep. For most users developing VR applications in Unreal, it's not a bad
    idea to begin with Audacity, and move on from there when or if you discover you
    need to do something specific.
  id: totrans-514
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-515
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we installed the Unreal Engine and learned about the various
    options we have available to us when setting it up. We created and launched a
    simple test project to verify that everything was working. Additionally, for those
    developing for mobile VR, we learned how to set up the required drivers and software
    development kits, and set up a mobile test project that we deployed to our device.
  id: totrans-516
  prefs: []
  type: TYPE_NORMAL
- en: Along the way, we learned how to use the Epic Games launcher—not just as a way
    of keeping engine versions up to date and launching projects, but also as a vital
    learning and support resource. Through our exploration of the launcher, we learned
    how to get answers to questions from the Community tab and where to find documentation
    and video tutorials from the Learn tab. We explored the incredibly useful Content
    Examples project and looked at other projects we can use to explore specific topics
    in the engine. We saw that the Marketplace offers a huge range of free and paid
    content that we can use to accelerate our projects, and we learned how to use
    the Library tab to maintain our projects and engine versions.
  id: totrans-517
  prefs: []
  type: TYPE_NORMAL
- en: For those planning to develop in C++, we learned how to set up our Visual Studio
    2017 development environment and configure it to work with Unreal, and then we
    created a simple test project to ensure that we were able to build and run our
    own C++ code within Unreal. For the extra adventurous, we learned how to download
    the Unreal Engine source from GitHub and build the engine entirely from scratch.
  id: totrans-518
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we took a brief look at additional tools that developers may generally
    find useful when building content for Unreal Engine, including a range of free
    and paid solutions for various needs.
  id: totrans-519
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we're going to build our first project explicitly for VR.
    (The quick-and-dirty projects we set up during the course of this chapter allowed
    us to test that our development environment was properly set up, but they weren't
    designed specifically for VR.) Now, we're going to learn how to set up a project
    correctly for VR. Let's jump in!
  id: totrans-520
  prefs: []
  type: TYPE_NORMAL
