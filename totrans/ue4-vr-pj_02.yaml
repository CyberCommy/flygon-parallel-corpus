- en: Setting Up Your Development Environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The goal of this chapter is to get you set up to develop in Unreal Engine. Even
    if you've already installed and started working in the engine, you may still find
    it worthwhile to take a look through this chapter, as there are a few details
    of the installation process that might be useful to you.
  prefs: []
  type: TYPE_NORMAL
- en: We're also going to take a look at the Epic Games launcher. It's easy to get
    into the habit of looking at it just as a way of updating the engine and launching
    projects, but there's a huge collection of useful resources for learning and development
    there too. It would be a mistake to ignore them.
  prefs: []
  type: TYPE_NORMAL
- en: For those planning to develop for mobile VR on Oculus Go or Samsung Gear, we'll
    walk you through the process of setting up the Android SDK and setting up a project
    for deployment to the device, and finally for those interested in C++ development,
    we'll show you how to set up Visual Studio 2017 for use with Unreal and for those
    interested in working on the bleeding edge, how to download the Unreal Engine
    source code and build it yourself.
  prefs: []
  type: TYPE_NORMAL
- en: 'Through out the course of this chapter, we''re going to learn about the following
    topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing Unreal Engine using the Epic Games launcher
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up your development environment to build a project for mobile VR
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learning more about Unreal Engine, and where to get help
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up your development environment to build a project in C++
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Downloading and building Unreal Engine from source code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Prerequisite – VR hardware
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you're planning to develop for desktop VR hardware, such as the Oculus Rift
    or HTC Vive, we're going to assume here that you've already set up your headset
    and ensured that it's working. If you haven't, now's a good time. Head on over
    to [https://www.vive.com/eu/setup/](https://www.vive.com/eu/setup/) or [https://www.oculus.com/setup/](https://www.oculus.com/setup/),
    and run through the guided installation and setup operations there.
  prefs: []
  type: TYPE_NORMAL
- en: Remember that your VR headset driver software, Oculus Home or Steam VR, needs
    to be running when you use the headset.
  prefs: []
  type: TYPE_NORMAL
- en: If you're going to be developing for mobile standalone VR, your setup process
    will involve a few other steps, which we'll walk you through after we get Unreal
    Engine installed. We do recommend even for those developing for mobile VR that
    you have a desktop VR headset available as well. It dramatically speeds up debugging
    to be able to launch your software right into the headset without having to cook
    it and deploy it to the device every time. It's not required, but you will find
    it helpful.
  prefs: []
  type: TYPE_NORMAL
- en: Either way, test out your headset, make sure it's working, and then let's get
    our development environment ready.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up Unreal Engine
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you're going to develop VR applications using Unreal Engine, the first thing
    you'll need, of course, is the engine. Let's walk through the process of setting
    it up.
  prefs: []
  type: TYPE_NORMAL
- en: What it costs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A natural question to start with when considering Unreal Engine is what it costs.
    The news here is good. Unreal Engine is free to download and use, and if you use
    it commercially, the terms are reasonable.
  prefs: []
  type: TYPE_NORMAL
- en: When you download the engine, you'll be asked to agree to one of two license
    agreements, depending on what you're going to be using it for. If you're a game
    developer and you make a game or application using Unreal and sell it, you'll
    pay a 5% royalty on gross sales over $3,000 per calendar quarter. If you don't
    sell your game or app, or it earns less than that per quarter, Unreal is free
    to use.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you''re using Unreal for something that isn''t intended to be sold to the
    public (training simulations, architectural visualization, or anything else),
    Unreal is entirely free under the terms of the Enterprise license agreement. For
    most businesses, the standard Enterprise **End User License Agreement** (**EULA**)
    will be fine, but if you do need to make changes, you can contact Epic to set
    up an enterprise license with different terms here: [https://www.unrealengine.com/en-US/enterprise/contact-us](https://www.unrealengine.com/en-US/enterprise/contact-us).
    Epic will work with you.'
  prefs: []
  type: TYPE_NORMAL
- en: What this boils down to for now is that you can download Unreal and use it for
    free, and if you start making money with it, the terms are reasonable and clear.
  prefs: []
  type: TYPE_NORMAL
- en: 'While we''re on the topic, it''s worth mentioning that the version of Unreal
    you get when you download the engine is the same version professional developers
    use, including the devs at Epic. There''s no split between a "pro" version and
    everything else: everything''s included and everything''s turned on.'
  prefs: []
  type: TYPE_NORMAL
- en: Creating an Epic Games account
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's get started, then. We're going to begin by heading over to [https://www.unrealengine.com](https://www.unrealengine.com) and
    hitting the download link. If you've already created an account with Epic, sign
    in here. If you haven't, now's the time to create one.
  prefs: []
  type: TYPE_NORMAL
- en: After you've signed up or signed in, you'll be asked which license you need
    to agree to—the Game Developers license or the Enterprise license. Choose the
    one that fits your case. Next, select whether you're downloading for Windows or
    Mac, download the appropriate Epic installer, and run it.
  prefs: []
  type: TYPE_NORMAL
- en: This will install the Epic Games Launcher, which you'll use as a hub for managing
    engine versions, plugins, library content, and learning resources. There's useful
    stuff here.
  prefs: []
  type: TYPE_NORMAL
- en: The Epic Games launcher
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once you've downloaded and installed the launcher, open it up. It's going to
    ask you to sign in using the same account you just used to log into the Epic website.
    (The Launcher can be used offline as well, so you can still run the engine without
    an internet connection, but of course you have much more useful stuff available
    to you if you're online.)
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you''re logged in, look at the set of tabs along the left edge of the
    launcher. There''s a tab for Unreal Engine, and then a series of tabs for Epic''s
    store, your game library, and your friends. Select the UNREAL ENGINE tab. We''ll
    be spending all our time here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5ab26cc6-eb7e-4d8c-b87d-8c5b12d125a0.png)'
  prefs: []
  type: TYPE_IMG
- en: The Epic Games Launcher as of version 4.22; its layout changes fairly frequently,
    but the principles remain the same
  prefs: []
  type: TYPE_NORMAL
- en: 'Across the top of the Unreal Engine tab, you''ll find four additional tabs:'
  prefs: []
  type: TYPE_NORMAL
- en: Unreal Engine
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learn
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Marketplace
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Library
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We're going to look at these tabs in a moment, but first, find the Install Engine
    button to the right of them. By default, this button installs the latest stable
    version of the engine. Let's do this.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the engine
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you hit the install button, the launcher will switch to the Library tab
    if it's not already selected, and it will ask you to choose an install location.
    The default location is usually a good choice here, but you can browse to a new
    location if you'd like to install the engine somewhere else.
  prefs: []
  type: TYPE_NORMAL
- en: 'There''s also an Options button on this page, and we should take a moment to
    talk about the choices it offers:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b7e98876-1e53-45ea-887a-4b1180fdcf6a.png)'
  prefs: []
  type: TYPE_IMG
- en: Installation options allowing you to determine which components of Unreal Engine
    are set up on your machine
  prefs: []
  type: TYPE_NORMAL
- en: Core Components have to be installed—that's the bare minimum required to run
    the editor.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Starter Content includes a number of useful assets to get you started, including
    a number of materials and models, and the Advanced Lighting Map. We'll be using
    these assets for the projects in this book, so you should install it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Templates and Feature Packs give you a range of excellent projects to use as
    starting points for your game projects, including the VR Template, which we'll
    use for a few projects in this book. You should install this too.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Engine Source is one of the things that sets Unreal Engine apart from the others:
    Unreal Engine gives you the entire C++ source code for the engine. This can be
    a great way to begin learning about C++, and can be a lifesaver when you really
    need to understand how something works or need to figure out why something is
    behaving unexpectedly. You don''t need to install the engine source, and whether
    you do is up to you, but it doesn''t take up a lot of room so there''s really
    no reason not to. If you anticipate doing any C++ development, you should install
    it. Once installed, you''ll find the source code in the directory where you installed
    your engine version, under `\Engine\Source`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Editor symbols for debugging is something you'll need if you plan to debug in
    C++. Without it, you'll be unable to set breakpoints in the engine source code
    or trace execution through it. These editor symbols take up a lot of space though,
    so if you don't plan to develop in C++ or debug using Visual Studio, you can skip
    it, and you can always install it later if you realize you need it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These options can be changed after you've installed an engine version, so it's
    not a problem if you change your mind later on about whether you want an option
    installed. You can add or remove any of them at any time. Also, if you're keeping
    older versions of the engine, which developers often do if they're maintaining
    a legacy project, it's not a bad idea to save space by using the options to uninstall
    everything but the core components.
  prefs: []
  type: TYPE_NORMAL
- en: For the projects in this book, the default options are fine—Core Components,
    Starter Content, Templates, and Engine Source. If you anticipate developing or
    debugging in C++, install the editor symbols as well.
  prefs: []
  type: TYPE_NORMAL
- en: Let's hit Apply after we've set our options, and install the engine. It's going
    to take a while. (If you'd like to jump ahead to the *Learning about unreal* section
    while you wait, you can jump back here when the install finishes.)
  prefs: []
  type: TYPE_NORMAL
- en: Editting your vault cache location
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Depending on how your system is set up, you may want to change the location
    where Unreal stores its vault cache. The vault cache stores assets that you've
    downloaded from the marketplace, such as projects and asset packs. By default,
    it lands at `C:\Program Files (x86)\Epic Games\Launcher\VaultCache`. You should
    be aware that it can get pretty large, so if you're running out of space on your
    system drive, you may want to put it somewhere else.
  prefs: []
  type: TYPE_NORMAL
- en: If you'd like to do this, from the Epic Games launcher, select Settings | Edit
    Vault Cache Location, select a new location, and hit Apply. Then, exit Settings
    and quit the Epic Games launcher (find its icon in the system tray, right-click
    it, and select Exit—simply closing the launcher window will minimize it without
    quitting it). When you restart the launcher, it will create the cache in the new
    location. Remember to delete your old `VaultCache` directory from its old location.
    (While you could copy the cache to the new location, it's often a better idea
    to force the system to create a new cache, as this will eliminate a lot of leftover
    stuff you're probably not using anymore.)
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a Derived Data Cache (DDC)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There's one additional bit of setup we recommend you do. As you use the editor,
    Unreal will compile assets into a form that's ready for use by your local machine's
    hardware. Rather than forcing the engine to do this every time, it's a good idea
    to give it a place to stash these compiled assets so that everything loads faster
    after the first build.
  prefs: []
  type: TYPE_NORMAL
- en: 'You don''t have to do this, but it''s a good idea. Materials especially will
    compile much faster if you do. If you''re seeing messages such as the following,
    you definitely want to set up a DDC:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9338fd5c-0de8-458c-9adf-18dcff5df4a5.png)'
  prefs: []
  type: TYPE_IMG
- en: If you see this warning, be sure to set up your DDC as directed here. It will
    make a big difference.
  prefs: []
  type: TYPE_NORMAL
- en: Unreal calls this facility the **Shared Data Cache** (**SDC**), or the **Derived
    Data Cache** (**DDC**). (This is a different cache than the vault cache we just
    mentioned a moment ago.) Everything in the DDC is generated, which means that
    it's fine to clear out its content anytime. New data will be generated in its
    place. If you change your video card, it's a good idea to empty your DDC, as it
    will contain a ton of assets compiled for the old card.
  prefs: []
  type: TYPE_NORMAL
- en: 'You have two options in setting up a DDC: if you''re working in a studio environment,
    you can set up a *shared DDC* in a network-accessible location. To do this, follow the
    instructions here: [https://docs.unrealengine.com/en-us/Engine/Basics/DerivedDataCache](https://docs.unrealengine.com/en-us/Engine/Basics/DerivedDataCache).'
  prefs: []
  type: TYPE_NORMAL
- en: 'What we''re going to talk about here is the other option: setting up a *local
    DDC* for solo development. If you''re in a studio that already has a shared DDC
    set up, you can and should skip the local setup.'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a local DDC
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Open your Windows Control Panel | System and Security | System, and then hit
    the Advanced system settings link:'
  prefs: []
  type: TYPE_NORMAL
- en: You can also get here by right-clicking This PC on any Windows Explorer pane,
    and selecting Properties.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/06fcd7c4-9d3f-4d68-8855-75260423c159.png)'
  prefs: []
  type: TYPE_IMG
- en: Look for the Advanced system settings link on the left side of the System control
    panel
  prefs: []
  type: TYPE_NORMAL
- en: 'In your Advanced system settings pane, hit the Environment Variables button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/80cad82f-c709-4c0d-a782-4fe85a2cd0e7.png)'
  prefs: []
  type: TYPE_IMG
- en: The Environment Variables button is found in System Properties | Advanced. You'll
    need admin privileges to edit it.
  prefs: []
  type: TYPE_NORMAL
- en: In the Edit environment variable dialog that appears, hit New to create a new
    system variable either in your User variables, or in the System variables section.
    (If you use the former, the DDC will work for your login, but not for others who
    log into the same machine. If you put the variable in your system variables, it
    will apply to all users.)
  prefs: []
  type: TYPE_NORMAL
- en: 'Enter `UE-SharedDataCachePath` as the variable name, and for its value, browse
    to a directory where you''d like to stash your derived data. If you''re building
    projects with lots of art, your DDC can take up well over 10 GB, so put it on
    a drive where you''ll have space:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b6b6a663-88ca-415a-be28-798f1d01992d.png)'
  prefs: []
  type: TYPE_IMG
- en: Create a variable named UE-SharedDataCachePath and set it to the location where
    you'd like to store your DDC.
  prefs: []
  type: TYPE_NORMAL
- en: Hit OK to save it. *You'll need to restart your PC before this will take effect*.
  prefs: []
  type: TYPE_NORMAL
- en: If your DDC starts to accumulate lots of stray assets from projects you're no
    longer working on, or if you change your video hardware, it's safe to clear out
    its contents entirely; the editor will regenerate the cache.
  prefs: []
  type: TYPE_NORMAL
- en: Launching the engine
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once the engine has been installed, let's launch it to verify that everything
    is working.
  prefs: []
  type: TYPE_NORMAL
- en: 'Hit the Launch button on the left-hand side of the Epic Games launcher, or
    the Launch button on the ENGINE VERSIONS in your Library tab:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bc8793a8-ace9-4484-82a4-5243eff7fdc8.png)'
  prefs: []
  type: TYPE_IMG
- en: The Library tab shows your installed engine versions, projects, plugins, and
    asset packs.
  prefs: []
  type: TYPE_NORMAL
- en: If you've never launched Unreal Engine before on your machine, it may ask you
    to allow it to install a few prerequisites. Let it. The engine may also ask for
    permission to communicate through your Windows Firewall. Let it do that, too.
  prefs: []
  type: TYPE_NORMAL
- en: 'If everything is running as it should, you should see a window that looks something
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7f6c5f6b-dac9-4295-aeff-1f46b7f219c0.png)'
  prefs: []
  type: TYPE_IMG
- en: The Unreal Project Browser appears any time you launch the engine without specifying
    a project to load.
  prefs: []
  type: TYPE_NORMAL
- en: Let's create a blank blueprint project just to make sure everything's working.
    (We're going to look at creating projects in depth in the next chapter, but, for
    now, we just want to test everything out.)
  prefs: []
  type: TYPE_NORMAL
- en: Select the New Project tab. Under the Blueprint tab, select Blank, and leave
    all the options at their defaults. Give it a reasonable location, and hit Create
    Project.
  prefs: []
  type: TYPE_NORMAL
- en: The editor should open into your new project and you should be ready to go.
  prefs: []
  type: TYPE_NORMAL
- en: If you're developing for desktop VR (rather than a mobile device), let's do
    a quick test to be sure everything's working. If you're developing for mobile
    VR, we'll cover that in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: 'Find the drop-down to the right of the Play button in the editor toolbar. Pull
    it down and select VR Preview:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/463f953b-95e6-4ce6-96e8-a72227cb136d.png)'
  prefs: []
  type: TYPE_IMG
- en: Once you've selected a play mode, this will become the Play button's default
    behavior until you change it.
  prefs: []
  type: TYPE_NORMAL
- en: If VR Preview is disabled, check to be sure that your headset is properly connected
    and that the Oculus or Steam VR software is running and not displaying any warnings
    or errors.
  prefs: []
  type: TYPE_NORMAL
- en: Once you launch in VR, you should see your scene in the headset. It may not
    be the world's most exciting scene, and you'll be floating unexpectedly high above
    the floor (we're going to learn how to set a scene up correctly for VR in the
    next chapter), but you should be in it. Congratulations! Everything's working!
  prefs: []
  type: TYPE_NORMAL
- en: Setting up for mobile VR
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Mobile VR headsets such as Samsung Gear and Oculus Go are separate devices from
    your PC, so you can't simply launch into a VR preview the way you can with a desktop
    headset. Instead, you need to package the project and deploy it to the device
    so you can run it directly on the headset. You'll have to set up a few things
    to make this possible.
  prefs: []
  type: TYPE_NORMAL
- en: Creating or joining an Oculus developer organization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: First, if you're going to develop for Oculus-based mobile VR platforms, you
    need to register with Oculus as a developer. We're assuming here that you've already
    created an account with Oculus since you would have needed to do this to use the
    headset at all. If you haven't yet done so, do that first and log in.
  prefs: []
  type: TYPE_NORMAL
- en: Now, navigate to [https://dashboard.oculus.com/organizations/create/](https://dashboard.oculus.com/organizations/create/) and
    run through the steps to register as a developer. If you're joining an existing
    organization instead of creating your own, contact its administrator to be added
    to the list of registered developers.
  prefs: []
  type: TYPE_NORMAL
- en: Setting your VR headset to developer mode in Oculus Go
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once you've registered as a developer, you'll be able to use the Oculus mobile
    app to set your headset to developer mode. You'll need to do this before you can
    deploy your own projects to the device.
  prefs: []
  type: TYPE_NORMAL
- en: In the app, navigate to Settings | [Your headset] | More Settings | Developer
    Mode, and turn Developer Mode on.
  prefs: []
  type: TYPE_NORMAL
- en: If you're unable to do this, confirm that your Oculus account is associated
    with a developer organization.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Android Debug Bridge (ADB)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Samsung Gear and Oculus Go both run on Google's *Android* operating system.
    You need to install drivers to allow your PC to communicate with Android devices.
    To do this, we're going to install the **Android Debug Bridge** drivers.
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to the ADB 2.0 download page at [https://developer.oculus.com/downloads/package/oculus-go-adb-drivers/](https://developer.oculus.com/downloads/package/oculus-go-adb-drivers/),
    download and extract the `.zip` file, and then right-click `android_winusb.inf`and
    select Install.
  prefs: []
  type: TYPE_NORMAL
- en: For additional information about ADB and how to use it to talk to Oculus Go
    and Samsung Gear headsets, check here: [https://developer.oculus.com/documentation/mobilesdk/latest/concepts/mobile-adb/#mobile-android-debug-intro](https://developer.oculus.com/documentation/mobilesdk/latest/concepts/mobile-adb/#mobile-android-debug-intro).
  prefs: []
  type: TYPE_NORMAL
- en: Let the installation complete, and then we're going to install the Android SDK.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up NVIDIA CodeWorks for Android
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to develop software for Android, you need to install a number of **Software
    Development Kits** (**SDKs**) and other resources, and configure them to work
    with one another. Fortunately, there's an easy way to do this using NVIDIA's **CodeWorks
    for Android** installer.
  prefs: []
  type: TYPE_NORMAL
- en: 'Epic includes the required installer with your engine installation. Navigate
    to the directory where you installed Unreal Engine and look for `Engine\Extras\AndroidWorks\Win64`.
    Run the CodeWorksforAndroid installer found there:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Accept the default options, and when it's finished, *restart* your computer.
  prefs: []
  type: TYPE_NORMAL
- en: Verifying that the HMD can communicate with your PC
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once you've returned after the computer has been restarted, we want to check
    that your PC can communicate with your Android headset.
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to the location where you just installed Android SDK. By default, this
    will be `C:\NVPACK\android-sdk-windows`. Look for the `platform-tools` directory.
  prefs: []
  type: TYPE_NORMAL
- en: From within this directory, *Shift* *+ right-click* to open a context menu that
    includes the `Open PowerShell window here` command. If you right-click without
    holding *Shift*, your context menu won't include PowerShell. If you're using an
    older version of Windows 10, or you have PowerShell disabled, *Shift* + Right-Click
    will open a command line instead.
  prefs: []
  type: TYPE_NORMAL
- en: From within PowerShell, type `./adb devices`.
  prefs: []
  type: TYPE_NORMAL
- en: If you're using PowerShell, you must precede any call to launch a program with
    `./`. (Requiring `./` before an executable call is a safety feature that's standard
    on Unix-based systems to prevent you from accidentally launching an executable
    when you didn't mean to. Windows now follows this convention as well.) If you're
    using the legacy command prompt instead, you simply type the name of the executable: `adb
    devices`. It's a good idea to get into the habit of using PowerShell instead of
    the legacy command prompt. It's safer and you can do more with it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Take a look at the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/49705c9e-95c9-4ea5-b769-44377f8788c6.png)'
  prefs: []
  type: TYPE_IMG
- en: The adb devices command lists your currently-connected Android devices.
  prefs: []
  type: TYPE_NORMAL
- en: If the Go or Gear appears as *Unauthorized*, that means your PC was able to
    see it, but the headset hasn't yet given the PC permission to talk to it. Put
    on the headset and accept the confirmation dialog that should have appeared there.
    Run `adb devices` again and confirm that the headset now appears as a device.
  prefs: []
  type: TYPE_NORMAL
- en: Generating a signature file for Samsung Gear
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You do not need to create a signature file to deploy to Oculus Go or Quest.
  prefs: []
  type: TYPE_NORMAL
- en: For a Samsung Gear device, you'll need to create an **Oculus Signature File**
    (**osig**).
  prefs: []
  type: TYPE_NORMAL
- en: Follow the directions at [https://dashboard.oculus.com/tools/osig-generator/](https://dashboard.oculus.com/tools/osig-generator/),
    and place the resulting file in your Unreal install directory, under `\Engine\Build\Android\Java\assets`.
    If the assets directory doesn't yet exist, create it.
  prefs: []
  type: TYPE_NORMAL
- en: For more information on signature files, check here: [https://developer.oculus.com/documentation/mobilesdk/latest/concepts/mobile-submission-sig-file/](https://developer.oculus.com/documentation/mobilesdk/latest/concepts/mobile-submission-sig-file/).
  prefs: []
  type: TYPE_NORMAL
- en: Deploying a test project to the device
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we've installed all the required software and verified that our PC
    can see our Android headset, let's create a project and deploy it to the device
    to make sure everything is working correctly.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a test project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Launch Unreal Engine from the Epic launcher, and in the Projects browser, select
    New Project. Select the Blueprint tab, the Blank template, and set your project
    settings to Mobile/Tablet, Scalable 3D or 2D, No Starter Content. Choose a location
    for the project and create it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3343e18e-f742-44db-b575-658800d850bf.png)'
  prefs: []
  type: TYPE_IMG
- en: The options you set here determine what your project's starting settings will
    be, but you can change them later.
  prefs: []
  type: TYPE_NORMAL
- en: Checking that your OculusVR plugin is enabled
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once the project has launched, select Settings | Plugins | Virtual Reality,
    and verify that the OculusVR plugin is enabled. (It should already be.)
  prefs: []
  type: TYPE_NORMAL
- en: Setting a default map
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Since we're going to be running this project as a standalone executable on our
    Gear or Go, we need to tell it what map to open when it starts up. Save *the empty
    map* that was created when the editor started, and give it any name you want.
  prefs: []
  type: TYPE_NORMAL
- en: Select Settings | Project Settings | Project | Maps & Modes, and set the map
    you just saved as Editor Startup Map and Game Default Map.
  prefs: []
  type: TYPE_NORMAL
- en: Clearing the default mobile touch interface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Ordinarily, mobile applications assume you'll be touching the screen to operate
    them, but of course this isn't going to happen in your headset, so we need to
    clear that default setting from our project.
  prefs: []
  type: TYPE_NORMAL
- en: From Project Settings, select Engine | Input | Mobile, and from the Default
    Touch Interface drop-down, select Clear to set it to None.
  prefs: []
  type: TYPE_NORMAL
- en: Setting your Android SDK project settings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, we need to configure our project for deployment to our Android headset.
  prefs: []
  type: TYPE_NORMAL
- en: 'Under Platforms | Android | APK Packaging, hit Configure Now, and Accept SDK
    License (you''ll only need to accept the license once):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/09af3349-2e08-4962-9048-64b69e19293f.png)'
  prefs: []
  type: TYPE_IMG
- en: Hitting the Configure Now button will write a project.properties file to your
    project's Build/Android directory.
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to set a few settings under this category as well:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Minumum SDK Version: 21'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Target SDK Version: 21'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Enable FullScreen Immersive on KitKat and above devices: True'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You'll see some older documentation tell you to set your minimum and target
    SDK versions to 19\. This is true for Samsung Gear, but for Oculus Go, you must
    select version 21.
  prefs: []
  type: TYPE_NORMAL
- en: 'Scroll down to the Advanced APKPackaging section and set the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Configure the AndroidManifest for deployment to Oculus Mobile to True
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Older walkthroughs will refer to this setting as *Configuring the AndroidManifest
    for deployment to Gear VR*. Its name has been changed.
  prefs: []
  type: TYPE_NORMAL
- en: Setting your Android SDK locations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, select Platforms | Android SDK, and set the following (adjusting for wherever
    you installed your SDK):'
  prefs: []
  type: TYPE_NORMAL
- en: Location of Android SDK: `C:/NVPACK/android-sdk-windows`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Location of Android NDK: `C:/NVPACK/android-ndk-r12b`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Location of ANT: `C:/NVPACK/apache-ant-1.8.2`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Location of JAVA: `C:/NVPACK/jdk1.8.0_77`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'SDK API Level: `latest`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'NDK API Level: `android-21`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Refer to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/61078601-f81a-411b-90ea-78c54080af51.png)'
  prefs: []
  type: TYPE_IMG
- en: Make sure the directories you specify here point to actual locations on your
    drive.
  prefs: []
  type: TYPE_NORMAL
- en: Be aware that these directory names are going to change when you update your
    Android SDKs (which you must remember to do whenever you update your engine version.
    Make sure you're pointing to the correct directories for each of these after an
    update, or you'll run into some impressively cryptic errors).
  prefs: []
  type: TYPE_NORMAL
- en: Launching the test project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Close your project settings, and find the drop-down beside the Launch button.
    Open it, and you should be able to see the serial number of your mobile VR headset:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/24ca442b-216e-4a19-a332-5f38d3e6c831.png)'
  prefs: []
  type: TYPE_IMG
- en: The devices listed here will vary depending on what platforms your project supports
    and what devices are found.
  prefs: []
  type: TYPE_NORMAL
- en: 'Select the headset to launch to it. It''s totally normal for the editor to
    become unresponsive for a short time as it gets things ready. Be patient. Once
    the editor becomes responsive again, you should see something such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bf3ba25f-9c65-4478-b167-c7cb0403cb79.png)'
  prefs: []
  type: TYPE_IMG
- en: Android asset processing progress indicator
  prefs: []
  type: TYPE_NORMAL
- en: It's not a bad idea to select Window | Developer Tools | Output Log so that
    you can see what it's doing, but this isn't required. Hitting the Show Output
    Log link will do the same thing.
  prefs: []
  type: TYPE_NORMAL
- en: Get in the habit of watching your output log. Lots of developers ignore this,
    but you shouldn't. You can learn a lot about what the engine is doing by watching
    the log.
  prefs: []
  type: TYPE_NORMAL
- en: This is going to take a while the first time you run it, because lots of shaders
    will need to be compiled. Subsequent runs will go much faster.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the assets are compiled, Unreal will copy them to your device:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0e82b936-20ac-4a9c-961d-f0d27651dd59.png)'
  prefs: []
  type: TYPE_IMG
- en: Deployment may take a while depending on how much data needs to be transferred
    to the device.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once deployment is finished, the scene should run in your device:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3d394a11-b57c-438c-ab98-c808f8493901.png)'
  prefs: []
  type: TYPE_IMG
- en: Once this dialog indicates that the project is running on the device, you should
    be ready to test it.
  prefs: []
  type: TYPE_NORMAL
- en: Put on the headset and you should be in your scene. Congratulations! You've
    just deployed a project to a mobile VR headset!
  prefs: []
  type: TYPE_NORMAL
- en: Using the Epic Games launcher
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we go too much further, let's take a look at the Epic Games launcher—there's
    a ton of useful material here, and this should be a starting place for much of
    your learning. It's worth it to take some time to look around and see what resources
    are available to you. It's easy to overlook these resources, but if you get used
    to understanding where you can learn and find information when you need it, you'll
    get much further, much faster.
  prefs: []
  type: TYPE_NORMAL
- en: 'The launcher''s Unreal Engine tab is broken into four major sections:'
  prefs: []
  type: TYPE_NORMAL
- en: Unreal Engine
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learn
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Marketplace
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Library
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's take a look at each of them.
  prefs: []
  type: TYPE_NORMAL
- en: The Unreal Engine Tab
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Unreal Engine tab displays featured content and projects, which are definitely
    worth exploring, but they''ll become more relevant to you as you use the engine
    longer. As a new user, pay particular attention to that row of icons right under
    the main banner. These are valuable resources:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a4aa7674-6f34-40da-a25a-bfe9c721ee7f.png)'
  prefs: []
  type: TYPE_IMG
- en: The Unreal Engine tab as of Unreal 4.22
  prefs: []
  type: TYPE_NORMAL
- en: The News link is a great way to keep up with what's going on; it mostly focuses
    on new features, events, and interesting ways the engine is being used. This is
    another one that will get more meaningful to you as you spend more and more time
    in the engine.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The YouTube link takes you to the Unreal Engine YouTube channel. This is one
    of the best places to find in-depth tutorials, feature highlights and project
    spotlights. There's quite a lot of information in the Feature Highlight videos
    especially that you're not likely to find anywhere else.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The AnswerHub is an essential resource for developers to ask and answer questions.
    Just about any time you have a question, this should be one of the first places
    you search for an answer. The chances are pretty high that you'll find what you're
    looking for. Don't be shy about asking questions of your own, but do try to search
    for existing questions and answers before you jump in and ask something that's
    already been answered. Also, try to pay it forward—if you see a question you know
    how to answer, contribute. This is how the community works.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Forums are a place for conversations about all topics related to the engine,
    and are a great place to find out what's going on. Most plugin developers maintain
    contact with their users on the forums too. There's a forum dedicated to VR and
    AR development here: [https://forums.unrealengine.com/development-discussion/vr-ar-development](https://forums.unrealengine.com/development-discussion/vr-ar-development).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Roadmap link takes you to a Trello page that describes what's being worked
    on for upcoming releases and what's planned for the more distant future. Early
    on in your Unreal development career, this may not be so meaningful to you, but
    as you get deeper into the engine, those upcoming changes will start to matter.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learn
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is one of the most important resources on the launcher. You won't regret
    the time you spend here.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s begin by looking at the top bar:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8705cdf7-5275-49e8-83c5-d1d03e7512a1.png)'
  prefs: []
  type: TYPE_IMG
- en: The Learn tab as of Unreal 4.22
  prefs: []
  type: TYPE_NORMAL
- en: The Documentation link takes you to Unreal's documentation home at [https://docs.unrealengine.com/en-us](https://docs.unrealengine.com/en-us).
    The Get Started with UE4 link on the documentation page is a good place to learn
    the basics of the art, level design, and programming pipelines. If you're brand
    new to Unreal Engine, we recommend that you go through these basics so you know
    your way around the editor. You'll have a much better time building the projects
    in this book, and you'll get more out of them if you've done this. After you've
    gotten through the basics, consider this documentation page to be your standard
    go-to reference any time you need to work with a new tool or system in the engine.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Video Tutorials link takes you to [https://academy.unrealengine.com/](https://academy.unrealengine.com/),
    an online learning site consisting of tons of detailed video tutorials on topics
    centered around specific industries, roles, workflows, and concepts. These are
    worthwhile classes, and are a great way to get an understanding of how the different
    parts of the engine fit together to allow you to do whatever you need to do.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Community Wiki page is less useful than the others. As we mentioned previously,
    the content on this page is not guaranteed to be up-to-date, or even correct.
    It's worth knowing that it's there, but it's usually a better idea to search for
    information on the forums and in the documentation than on the Wiki, as incorrect
    information on the forums will usually be corrected fairly quickly by other users,
    while it can fester on the Wiki.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The content examples project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Below this bar, we have a few featured links to quick-start guides and blog
    posts, and then a collection of engine feature samples. The most important of
    these is the Content Examples project. All of the projects here are worth looking
    at for specific topics, but Content Examples should be a regular reference for
    you. Let's install it now.
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the Content Examples project to open its detail page, and hit the Create
    Project link on the page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/aef9cee7-d184-400a-9c95-89fa0809e2c4.png)'
  prefs: []
  type: TYPE_IMG
- en: The Content Examples project detail page
  prefs: []
  type: TYPE_NORMAL
- en: 'You''ll be asked where you want to put the project, and what engine version
    you''d like to use to create it. Put it someplace reasonable (it''s not a bad
    idea to maintain a directory specifically for Unreal reference projects), and
    select your most recent engine version. Hit Create to create the project. The
    project will launch automatically after you''ve created it, and later on you can
    access it from the My Projects section of the Library tab. Let''s allow the project
    to launch, or launch it specifically from your Library tab once it''s been created:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b5c6d3ef-5bd9-4ff3-9a3e-5051a2322d3c.png)'
  prefs: []
  type: TYPE_IMG
- en: When launching a project, note the Unreal Editor version number and the Loading
    progress.
  prefs: []
  type: TYPE_NORMAL
- en: It's natural for the project to take a little while to initialize the first
    time you launch it. Unreal is building assets for your machine. If it appears
    to be hung up for a few minutes at 45% or 95%, don't worry—it isn't. It's building
    animations, shaders, and other assets. Subsequent launches will go much faster.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the project has opened, hit File | Open Level (or *Ctrl* + *O*) to open
    one of the demo maps. Hit the Play button, and use standard **WASD** keyboard
    controls to move around and look at examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/69735bb2-f69d-456f-9beb-a0f21aae0f32.png)'
  prefs: []
  type: TYPE_IMG
- en: One of the demo levels contained within the Content Examples project
  prefs: []
  type: TYPE_NORMAL
- en: Take some time to poke around this project to familiarize yourself with the
    editor, and get a sense of what Unreal can do. Later on, when you want to include
    something in your project, make it a habit to check to see whether there's an
    example in `Content Examples` that can give you a head-start on figuring out how
    it's done.
  prefs: []
  type: TYPE_NORMAL
- en: Seriously, this is one of the most useful and often overlooked resources available
    to you. There's a ton of good stuff in the `Content Examples` project.
  prefs: []
  type: TYPE_NORMAL
- en: Gameplay concepts and example games
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At the bottom of the Learn page is a series of projects illustrating specific
    gameplay concepts and a series of example games. These are incredibly valuable
    resources for learning more advanced topics and for learning what finished projects
    in Unreal Engine look like. The content of these projects tends to be more advanced,
    however, as these mostly represent finished games in a releasable state. You may
    want to spend some time in the engine before you download them and start to explore.
    For now, you should know that they're there. Feel free to dig around if you're
    curious and want to look ahead.
  prefs: []
  type: TYPE_NORMAL
- en: Marketplace
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We''re going to make use of free assets from Marketplace in this book, so you
    should take some time to look at this tab:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/022e19bc-b102-4f25-a17e-ec3cf37e9aab.png)'
  prefs: []
  type: TYPE_IMG
- en: Marketplace content as of Unreal 4.20
  prefs: []
  type: TYPE_NORMAL
- en: Epic provides an astonishing amount of high-quality free material in the Marketplace.
    Often, if Epic cancels a game that it was developing internally, it'll make the
    game assets available for free on the Marketplace. Make use of this, especially
    when building your learning projects. Assets from *Infinity Blade* are especially
    useful for projects in VR, as they were originally intended for a mobile game,
    so they're optimized reasonably well for VR's stringent demands. We'll see how
    to add Marketplace content to existing projects as we start building in the next
    chapters. Don't ignore the paid material on the Marketplace either. Much of it
    is excellent, and it can give you a huge leg-up in building your projects, whether
    you use it for prototype, or in your released title.
  prefs: []
  type: TYPE_NORMAL
- en: Library
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Library tab is where you maintain your installed engine versions, open
    your projects, and access your vault of plugins and content packs that you downloaded
    from the Learn tab and Marketplace:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1cb3896e-d4f3-478b-8e50-29f5ecf1ea19.png)'
  prefs: []
  type: TYPE_IMG
- en: The Library panel as of Unreal 4.20
  prefs: []
  type: TYPE_NORMAL
- en: Use the ENGINE VERSIONS section to update your installed engine versions, install
    new engine versions, and modify their options.
  prefs: []
  type: TYPE_NORMAL
- en: 'A quick word about engine versions: If you see an indicator appear on an installed
    engine version indicating that it can be updated, you should update it. Updates
    to engine releases, such as going from 4.20.2 to 4.20.3, are generally safe to
    apply, as they involve bug fixes but don''t change the way anything works in ways
    that could break your project.'
  prefs: []
  type: TYPE_NORMAL
- en: In addition to updating your currently installed engine version, you can also
    use the + sign beside the ENGINE VERSIONS label to add additional installed versions.
    This allows you to install older versions if you need to open older content that
    hasn't yet been updated to the current version, or to install preview versions
    if you'd like to test something that's coming in the next release.
  prefs: []
  type: TYPE_NORMAL
- en: Use caution when working in preview versions. They're intended to allow you
    to look ahead, but they aren't guaranteed to be stable. Don't put mission-critical
    work on a preview version. Work in release versions, and use previews to see what's
    coming or to see how you might need to update your project when you move to the
    new version.
  prefs: []
  type: TYPE_NORMAL
- en: 'The My Projects section allows you to launch your projects. Project thumbnails
    are marked with the engine version number for which they''re currently set up.
    You can update a project to a new engine version by launching the newer version,
    and then opening that project into the newer version. When you do this, you''ll
    be presented with a dialog asking whether you''d like to copy the project or convert
    it in-place. Converting in place is dangerous; it''s recommended that you perform
    your updates on a copy to be sure nothing in your project conflicts with the update.
    (That''s why the option to convert in-place is buried under the More Options...
    link.) If you have a really old project that''s a few versions behind, you''re
    generally going to have better luck converting it a version at a time than trying
    to jump a few versions. It can work, but whether it does will depend entirely
    on how many versions you''re trying to skip and what''s in your project:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e8b95c54-eed6-4baf-bf6f-0685557050be.png)'
  prefs: []
  type: TYPE_IMG
- en: The Convert Project dialog gives you a few options to determine how you want
    to handle an engine update.
  prefs: []
  type: TYPE_NORMAL
- en: You don't have to launch your projects using the Epic Games Launcher; you can
    always navigate to where you saved the project and double-click the `.uproject`
    file directly to launch it in its associated engine version.
  prefs: []
  type: TYPE_NORMAL
- en: The Vault section contains everything you own—learning projects, plugins, and
    content packs. You can add plugins or content to existing projects and create
    new projects here.
  prefs: []
  type: TYPE_NORMAL
- en: Most of the time, the Library tab will be your default tab, since you'll be
    using it to launch projects, but as we mentioned a moment ago, don't forget about
    the others.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up for C++ development
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section is entirely optional. None of the projects in this book will require
    you to develop in C++, but we will occasionally highlight items in native code
    for those interested in going deeper. If you don't anticipate working in code,
    or if pages of code give you the screaming heebie-jeebies, it's completely fine
    to jump over this section and the one that follows it.
  prefs: []
  type: TYPE_NORMAL
- en: It's absolutely not required to use C++ when developing in Unreal. The Blueprint
    visual scripting language is incredibly expressive, and there isn't much that
    it can't do. Most applications, including pretty advanced projects, can be built
    entirely in Blueprint. Many new Unreal users see the C++ support and worry that
    they'll have to learn the language to use the engine. You don't. (If you are interested
    in learning C++ though, this can be a great way to do it.)
  prefs: []
  type: TYPE_NORMAL
- en: Still here? Excellent. The first thing you'll need if you plan to develop in
    C++ is an editor and compiler with which to build your code. This type of application
    is called an **Integrated Development Environment** (**IDE**). For development
    in Unreal 4.20 and beyond in Windows, you should be using Microsoft's **Visual
    Studio 2017** (**VS2017**). Visual Studio comes in several flavors, but for development
    in Unreal, you don't need any of the professional or Enterprise edition features.
    The free Community edition has everything you need.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Microsoft Visual Studio Community
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Head to the **Microsoft Visual Studio Community** page, [https://visualstudio.microsoft.com/vs/community/](https://visualstudio.microsoft.com/vs/community/),
    to download the installer. When you run the installer, you''ll be presented with
    a few options:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2a3f3518-c28b-4e44-967d-d8910feafe9a.png)'
  prefs: []
  type: TYPE_IMG
- en: The Visual Studio Community 2017 Setup dialog determines which languages and
    development tasks your installation will be configured to handle.
  prefs: []
  type: TYPE_NORMAL
- en: 'Under the Workloads tab, select Game development with C++, and then on the
    Summary sidebar on the right, make sure you''ve checked the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Unreal Engine installer (required)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Windows 10 SDK (required—should already be checked by default)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Windows 8.1 SDK (required on VS 2017—should already be checked by default)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: C++ profiling tools (optional but useful)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If you''re going to be developing for Samsung Gear or Oculus Go, make sure
    you also include this:'
  prefs: []
  type: TYPE_NORMAL
- en: Android support for Unreal Engine (required for Gear or Go development)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This installs the Java development kit and the Android tools you''re going
    to need to talk to the Gear and the Go:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/536c01d6-ec48-4f66-89ee-b96af7f806e1.png)'
  prefs: []
  type: TYPE_IMG
- en: The Visual Studio 2017 Installation details panel allows you to determine which
    options are installed.
  prefs: []
  type: TYPE_NORMAL
- en: By setting these options, you've told Visual Studio to include C++ language
    support, and to include the necessary supporting files to run and develop for
    Unreal.
  prefs: []
  type: TYPE_NORMAL
- en: These settings are important. Visual Studio 2017 no longer automatically assumes
    that you're going to be developing in C++, so you need to select which languages
    you want it to support when you install it. If you realize later on that you missed
    something, use your Add and Remove Programs control panel to modify your VS2017
    installation options.
  prefs: []
  type: TYPE_NORMAL
- en: Recommended settings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are a few things you'll want to change in Visual Studio before you start
    working. These aren't required, but do make it play more nicely with Unreal. They're
    documented in depth here: [https://docs.unrealengine.com/en-us/Programming/Development/VisualStudioSetup](https://docs.unrealengine.com/en-us/Programming/Development/VisualStudioSetup).
    Run through this page and make the recommended changes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s a quick overview of the changes the page is going to ask you to make:'
  prefs: []
  type: TYPE_NORMAL
- en: Increase the width of the Solution Configurations control on the Standard toolbar
    because Unreal solution configuration names can be too long to read otherwise.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ensure that the Solution Platforms control is shown on the Standard toolbar.
    It should already be by default.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ensure that Tools | Options | Projects and Solutions | Always show Error List
    if build finishes with error is turned off.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Set Tools | Options | Text Editor | C/C++ | View | Show Inactive Blocks to False.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ensure that your Intellisense options under Tools | Options | Text Editor |
    C/C++ | Advanced are not disabled. Older instructions would have told you to disable
    Intellisense, as it used to work poorly with Unreal's source code. This is no
    longer the case, and instructions that tell you to turn it off are now out of
    date. If you turned Intellisense off in the past, turn it back on now.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The UnrealVS plugin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that you have Unreal Engine installed and Visual Studio set up, we're going
    to want to install the UnrealVS plugin to Visual Studio in order, to simplify
    a number of common tasks you'll be performing in Visual Studio while working with
    Unreal.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the UnrealVS plugin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Make sure Visual Studio is closed, and navigate to the location where you installed
    your current Unreal Engine version, and under `Engine\Extras`, find the `UnrealVS`
    directory. Open the directory corresponding to your version of Visual Studio (in
    our case, this is VS2017), and run the `UnrealVS.vsix` installer to install the
    plugin.
  prefs: []
  type: TYPE_NORMAL
- en: 'For Unreal 4.20, install it in the standard location. For example, you''ll
    find the plugin here:'
  prefs: []
  type: TYPE_NORMAL
- en: '`C:\Program Files\Epic Games\UE_4.20\Engine\Extras\UnrealVS\VS2017`.'
  prefs: []
  type: TYPE_NORMAL
- en: Turning on the UnrealVS toolbar
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Once you''ve finished running the plugin installer, open Visual Studio, and
    right-click an empty area of the toolbar to set your active toolbars. Turn on
    the `UnrealVS` toolbar:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ce60a399-10c5-4b56-be0a-afe837e7c6ff.png)'
  prefs: []
  type: TYPE_IMG
- en: Right-clicking an empty toolbar area in Visual Studio 2017 allows you to select
    which toolbars are visible.
  prefs: []
  type: TYPE_NORMAL
- en: There's additional documentation on configuring and using UnrealVS here: [https://docs.unrealengine.com/en-us/Programming/Development/VisualStudioSetup/UnrealVS](https://docs.unrealengine.com/en-us/Programming/Development/VisualStudioSetup/UnrealVS).
    By installing it and turning on the toolbar, you've done everything you need to
    get it running, but it's worthwhile to take a look at this page to get a sense
    of what UnrealVS does for you and how you can use it.
  prefs: []
  type: TYPE_NORMAL
- en: Unreal debugging support
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There's one more thing we need to do before we're ready to go, and that is to
    install a debugging support file for Unreal in Visual Studio.
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to your engine install directory and find `Engine\Extras\VisualStudioDebugging`.
    Look for the `UE4.natvis` file there and copy it.
  prefs: []
  type: TYPE_NORMAL
- en: Paste it into one of two locations.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can either install it to your Visual Studio install location, in the following
    path (you''ll need admin rights on your machine to do this):'
  prefs: []
  type: TYPE_NORMAL
- en: '`[VisualStudioInstallPath]\Common7\Packages\Debugger\Visualizers\UE4.natvis`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Example: `C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\Common7\Packages\Debugger\Visualizers`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Alternatively, you can install it to your personal `Documents` directory. If
    you check within your user profile''s `Documents` directory, you should find a Visual
    Studio 2017 directory that was automatically created for you when you installed
    the IDE. If a visualizers subdirectory already exists inside this directory, paste
    `UE4.natvis` inside it. If not, create the directory and put the natvis file there:'
  prefs: []
  type: TYPE_NORMAL
- en: '`[UserProfile]\Documents\Visual Studio 2017/Visualizers/UE4.natvis`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Example: `D:\OneDrive\Documents\Visual Studio 2017\Visualizers`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A `.natvis` file contains instructions to help Visual Studio display the contents
    of native data types defined within your particular solution. Unreal defines its
    own custom string type (`FString`), custom array types (`TArray`) and many others.
    `UE4.natvis` tells Visual Studio how to display the data contained within these
    types in a readable way when you're debugging.
  prefs: []
  type: TYPE_NORMAL
- en: Test everything out
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, we're ready to verify that we've set everything up correctly. From the
    Epic Games launcher, launch your current engine version. Under the New Project
    tab, select C++.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you see a warning such as the following, make sure you''ve installed Visual
    Studio 2017, and that you installed it with the game development with C++, and
    the recommended settings were selected:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e5caf299-ab36-4720-92fd-eab97736fab5.png)'
  prefs: []
  type: TYPE_IMG
- en: If you see this warning, you either haven't yet installed Visual Studio, or
    haven't set up the required installation options.
  prefs: []
  type: TYPE_NORMAL
- en: If you've installed VS2017 and you do see a warning, it means you're missing
    one of the required options we just mentioned. Use your Add and Remove Programs
    control panel to modify your VS2017 install and add these options.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you don''t see any warnings, you''re ready to create a quick test project.
    Let''s select a Basic Code template under the C++ tab, with the default options,
    and choose a location and name for it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d8d73d9f-7f76-4d68-b84c-3213d6813de0.png)'
  prefs: []
  type: TYPE_IMG
- en: Creating a C++ project works similarly to creating a Blueprint project.
  prefs: []
  type: TYPE_NORMAL
- en: Hit Create Project, and allow the tool to create a new project for you. Give
    it a moment. If you've set everything up correctly, Unreal Editor should open
    your newly created project, and Visual Studio 2017 should open to the newly created
    project solution file. Let's close the Unreal Editor now and build and launch
    the new project from VS2017 just to see how this is done.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the Solution Explorer tab in Visual Studio, find your new project solution
    under the Games tree. Right-click it and select Set as Startup Project:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/135edce6-5bc7-49cd-b144-9d231c12d824.png)'
  prefs: []
  type: TYPE_IMG
- en: The Solution Explorer on the left side shows you what files are contained in
    your project. The Workspace on the right shows the contents of the currently-loaded
    file.
  prefs: []
  type: TYPE_NORMAL
- en: Right-click it again, and select UnrealVS Quick Build | Win64 | DebugGame Editor.
    Your project should begin building.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two solution configurations you''ll commonly use when developing
    for Unreal in C++: **DebugGame Editor** and **Development Editor**. Visual Studio
    is what''s called an **optimizing compiler**, which means that it modifies your
    code somewhat when it compiles it to make it run faster. This has the advantage
    of letting you write easily readable code that still runs quickly after it''s
    been compiled, but what this means in practice is that if you debug a development
    build, not every bit of data will be visible, because some variables will have
    been optimized out.'
  prefs: []
  type: TYPE_NORMAL
- en: A debug build leaves everything as you wrote it, so it runs a little more slowly,
    but you can see exactly what each variable contains. Most of the time, you'll
    want to use the Development Editor configuration.
  prefs: []
  type: TYPE_NORMAL
- en: You'll see that in addition to DebugGame Editor and Development Editor, you
    also have DebugGame and Development configurations available. You won't use these
    when working in the editor; they don't include the editor and require your content
    to be cooked into a release-ready format. (We'll talk about cooking later on.)
  prefs: []
  type: TYPE_NORMAL
- en: For this example, we selected a DebugGame Editor configuration so you'd have
    a chance to see the compiler build a configuration that hadn't been built yet.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once your project has finished building, check your output. If it looks something
    like this, you''re good to go:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, on your standard toolbar, use the Solution Configurations control to select
    the debug editor configuration you just built:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/06c02a8c-7c32-4fbe-aa2a-5a139f4496fd.png)'
  prefs: []
  type: TYPE_IMG
- en: The Solution Configurations control determines what type of build you're going
    to create.
  prefs: []
  type: TYPE_NORMAL
- en: 'Hit *F5*, or select Debug | Start Debugging, to launch the editor from Visual
    Studio. If everything is set up correctly, your project should launch, and your
    Visual Studio window should look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/af60929e-0524-4274-8cef-515375ce0923.png)'
  prefs: []
  type: TYPE_IMG
- en: An Unreal C++ project loaded in Visual Studio Community 2017\. The orange bar
    at the bottom indicates that the project is running and Visual Studio's debugger
    is connected to it.
  prefs: []
  type: TYPE_NORMAL
- en: Congratulations! You're now set up to develop in C++.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at a quick example of why this can be so useful. In the
    default scene that was automatically created in your Unreal Editor, select Floor
    from your World Outliner. Right-click it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5a201c75-2a6b-471b-bde6-327a1dd81dfb.png)'
  prefs: []
  type: TYPE_IMG
- en: You can open C++ files directly from within the Unreal Editor.
  prefs: []
  type: TYPE_NORMAL
- en: 'The floor is a Static Mesh actor. Select the option to open `StaticMeshActor.h`.
    You''ll be switched automatically to Visual Studio, and the `StaticMeshActor`
    header file will be opened:'
  prefs: []
  type: TYPE_NORMAL
- en: If you're not able to open `StaticMeshActor.h`, check to be sure you installed
    the engine source for your engine version. Head to the Library tab, find the engine
    version you're running under Engine Versions, and select Options from the drop-down
    to the right of the Launch button. Add Engine Source if you hadn't already.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ecd8fa07-7b76-41af-b498-771a8227e00a.png)'
  prefs: []
  type: TYPE_IMG
- en: The C++ header file for the StaticMeshActor class describes the class and declares
    its functions.
  prefs: []
  type: TYPE_NORMAL
- en: This is one of the many amazing things about Unreal Engine—Epic gives you the
    source code—all of it. For any object, any Blueprint node, anything at all in
    the editor, you can view the source code underneath. There are no black boxes.
    Again, this is by no means a thing you have to do in Unreal—the documentation
    is excellent, but if you're ever facing a mystery and really need to figure out
    what's going on, being able to read the source code can be a lifesaver.
  prefs: []
  type: TYPE_NORMAL
- en: Building Unreal from source code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You absolutely do not need to download source code and build the engine from
    scratch for almost anything you'll realistically be doing with it. This section
    is included here so that you have the freedom to make engine changes if you ever
    need to, but you can safely skip this. It's rare even for professional developers
    to work from the bleeding edge source.
  prefs: []
  type: TYPE_NORMAL
- en: This next section is even more optional than the previous. You'll only ever
    need to do this if you intend to modify the behavior of the engine itself, or
    if you want to work with a feature that's so new that it hasn't yet been bundled
    into one of the releases. That's another part of the beauty of this engine though—if
    you really need it to do something it doesn't already do, you can make the changes
    yourself. Also, if you make changes that improve the engine or might be useful
    to other developers, you can use GitHub to contribute your changes to Epic. Lots
    of developers do, and the net effect of it is that this engine grows and improves
    at an astonishing pace.
  prefs: []
  type: TYPE_NORMAL
- en: For real though, you can skip this if you don't anticipate needing it. We're
    going to get a little into the weeds here.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a GitHub account and installing Git
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The source code for the Unreal engine is distributed using a site called **GitHub**.
    **Git** is a version-control system (a system for managing code revisions and
    distributing them to users), and GitHub is a centralized location for housing
    and sharing Git repositories. To download the Unreal Engine source code in a format
    that allows you to build the engine yourself, you'll need Git and GitHub.
  prefs: []
  type: TYPE_NORMAL
- en: Lots of people confuse Git with GitHub. They're not the same thing. Git is a
    version control system that allows users to track changes to code, distribute
    those changes, and manage them in many other ways. GitHub is a website that allows
    users to store and share Git data. There are other sites that also allow you to
    do this, though GitHub is the largest, or you could set up a Git repository entirely
    on your own.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up or logging into your GitHub account
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you do plan to dig into the absolute bleeding edge of Unreal development,
    the first thing you're going to need is a **GitHub** account. Head to [https://github.com/](https://github.com/) and
    sign in, or sign up if you don't already have an account.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Git for Windows
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Head to [https://git-scm.com/](https://git-scm.com/) and download Git for Windows.
    Git is a software configuration management tool, which allows you to synchronize
    your local Unreal source code repository with the source code Epic supplies.
  prefs: []
  type: TYPE_NORMAL
- en: 'Install it using the default options, with one exception: when the installer
    asks what you''d like to use as your default editor for Git, the currently selected
    choice will be **Vim**. Vim is wonderful for those who have gotten used to using
    it, but for everyone else, it can be pretty counter-intuitive because it follows
    a completely different set of conventions from pretty much any other application
    you''ve used. You''ll almost certainly want to select a different text editor
    if you aren''t already one of those people who uses and loves Vim:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/75294dc3-c453-4d00-9def-ace4e1814da6.png)'
  prefs: []
  type: TYPE_IMG
- en: You can choose your preferred text editor as Git's default editor when you set
    Git up.
  prefs: []
  type: TYPE_NORMAL
- en: It's a good idea to have a robust text editor on your system anyway, as it can
    be useful for editing config files and a ton of other tasks. Common choices are
    **Visual Studio Code**, **Sublime Text**, **Notepad++**, or **Atom**. If you have
    a favorite, feel free to use it. If you don't, Visual Studio Code is a good choice,
    as it's free and follows the same conventions as Visual Studio. If you need it,
    grab it here: [https://code.visualstudio.com/](https://code.visualstudio.com/).
  prefs: []
  type: TYPE_NORMAL
- en: Installing Git Large File Storage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Next, you're going to need to install **Git Large File Storage** (**Git-LFS**).
    This allows Git to manage big binary files such as the ones Unreal generates.
  prefs: []
  type: TYPE_NORMAL
- en: Head to [https://git-lfs.github.com/](https://git-lfs.github.com/), download
    Git-LFS, and install it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, you need to configure Git to use Git-LFS. To do this, do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Open Git Bash—a command-line tool for managing Git, which was installed a moment
    ago when you installed Git for Windows. In Git Bash, type `git lfs install` and
    hit *Enter:*
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c90ad882-3031-4c3f-90f0-caf834ecf630.png)'
  prefs: []
  type: TYPE_IMG
- en: Git Bash is a terminal window specifically used to communicate with Git.
  prefs: []
  type: TYPE_NORMAL
- en: Once you see that Git LFS has been initialized, you can close Git Bash.
  prefs: []
  type: TYPE_NORMAL
- en: Installing a Git GUI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It's not required that you use a GUI to operate Git. Many developers operate
    Git directly from the command line instead. Certain Git operations are easier
    to perform this way. The following instructions apply if you'd like to use a GUI
    for Git.
  prefs: []
  type: TYPE_NORMAL
- en: Head to [https://desktop.github.com/](https://desktop.github.com/) and download
    **GitHub Desktop**. There are many other Git GUI applications out there; another
    popular choice is **Atlassian's SourceTree**, which you can find at [https://www.sourcetreeapp.com/](https://www.sourcetreeapp.com/),
    but for simplicity's sake for now, we're going to stick with GitHub Desktop. During
    the installation, the installer will ask you for credentials for the GitHub account
    you just created. Enter them here.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you''ve finished installing, GitHub Desktop should start up, and you should
    be looking at a window that looks something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4f78039b-9b76-4fba-8970-80b361e82614.png)'
  prefs: []
  type: TYPE_IMG
- en: Git GUI's like GitHub Desktop aren't required to communicate with Git, but can
    be helpful when you're staring out.
  prefs: []
  type: TYPE_NORMAL
- en: Connecting your GitHub account to your Epic Games account
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Navigate to [https://www.unrealengine.com](https://www.unrealengine.com) and
    if you''re not logged in yet, log in now. Find your username in the lower-left corner
    of the page, and hover over it to reveal the drop-down menu. Select the Manage
    Account option:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ecc01e03-7170-4d58-a727-bd7d98c625ef.png)'
  prefs: []
  type: TYPE_IMG
- en: The account management link as of Unreal 4.22\. This opens a browser window
    to https://www.unrealengine.com/account/personal
  prefs: []
  type: TYPE_NORMAL
- en: Be aware that menus in the Epic Games Launcher change frequently. You can also
    handle this step by navigating to [https://www.unrealengine.com/account/personal](https://www.unrealengine.com/account/personal).
    Open the Connected Accounts tab, find the GitHub icon, and hit Connect to connect
    your Epic account to GitHub. Agree to the EULA if you need to, and sign into GitHub
    if it asks you to do so. Finally, if the authorization utility asks, click the
    Authorize Epic Games button. You should receive an email confirming that you've
    done this. If you need further help or if something goes wrong, check the documentation
    at [https://www.unrealengine.com/en-US/ue4-on-github](https://www.unrealengine.com/en-US/ue4-on-github).
  prefs: []
  type: TYPE_NORMAL
- en: Confirm that everything is set up correctly by navigating to [https://github.com/EpicGames/UnrealEngine](https://github.com/EpicGames/UnrealEngine).
    If you're able to see the page, you're properly connected. If not, ensure that
    you've properly connected your account and been authorized to see the UnrealEngine
    repository.
  prefs: []
  type: TYPE_NORMAL
- en: 'A word about Git: Git is a phenomenally useful tool, but the work it does can
    seem fairly complex at first. Detailing all the things you should know about Git
    falls outside the scope of this book, but we highly recommend that you spend some
    time to learn what Git is and how it works if you plan to use it. This is a good
    place to start: [https://git-scm.com/book/en/v2/Getting-Started-Git-Basics](https://git-scm.com/book/en/v2/Getting-Started-Git-Basics).
    To understand how GitHub works with Git, start here: [https://guides.github.com/activities/hello-world/](https://guides.github.com/activities/hello-world/).'
  prefs: []
  type: TYPE_NORMAL
- en: Downloading the Unreal Engine source code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, you're ready to pull the source. Let's look at how to do this. Navigate
    to [https://github.com/EpicGames/UnrealEngine](https://github.com/EpicGames/UnrealEngine),
    and take a look around the page. There's a `ReadMe` file on this page as well.
    It's highly recommended that you read it.
  prefs: []
  type: TYPE_NORMAL
- en: Choosing your source branch
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Note that Epic maintains multiple branches of the Unreal Engine repository:'
  prefs: []
  type: TYPE_NORMAL
- en: The release branch contains tested source code and is equivalent to the source
    code you get by downloading the engine using the Epic Games launcher.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The promoted branch contains less-tested code that's used internally by Epic's
    designers and artists. It's fairly stable and will contain newer, but also less
    stable, code than that on the release branch.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The master branch is the absolute bleeding edge, and contains changes more-or-less
    the moment Epic''s engineers submit them. There''s no guarantee that these changes
    will be stable though, or even compile. If you plan to contribute to the engine
    though, you should be on this branch:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/1d3668a9-4ba9-4909-9acb-f7234dd141d3.png)'
  prefs: []
  type: TYPE_IMG
- en: This view of the Epic Games / UnrealEngine GitHub repository allows you to choose
    your current branch and download its contents.
  prefs: []
  type: TYPE_NORMAL
- en: For now, let's stick with the release branch. Select it using the Branch drop-down
    near the upper-left corner.
  prefs: []
  type: TYPE_NORMAL
- en: Forking the repository
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We're going to Fork this repository. Forking a Git repository makes a copy of
    it that allows you to make your own changes without impacting the main repository.
    Hit the Fork button near the upper-right. This will create a personal repository
    for you containing the source code you just forked.
  prefs: []
  type: TYPE_NORMAL
- en: Cloning the repository to your local machine
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, you need to get it onto your desktop. Hit the green Clone or download
    button on the right-hand side of the page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/83f62f7b-7cea-40c4-a81a-2d15cb3f4b3a.png)'
  prefs: []
  type: TYPE_IMG
- en: When cloning a repository, you have the option to choose your authentication
    method and how you'd like the content to be delivered.
  prefs: []
  type: TYPE_NORMAL
- en: You have a few options here.
  prefs: []
  type: TYPE_NORMAL
- en: Option 1 – Cloning using GitHub Desktop
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you''re using GitHub Desktop as a GUI, select Open in Desktop and allow
    the page to launch GitHub Desktop. GitHub Desktop will ask you where you want
    to store the new repository. Tell it where to put it and hit Clone:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6d63e0ae-5790-41d1-877f-ec699687c572.png)'
  prefs: []
  type: TYPE_IMG
- en: Ensure that the location you choose for your local path has room to hold the
    engine and its content.
  prefs: []
  type: TYPE_NORMAL
- en: Option 2 – Cloning from the command line
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you''re using a command line, hit the Copy to Clipboard button to the right
    of the repository''s URL, and then open a Windows Command Prompt and navigate
    to the directory where you''d like to house your local repository. Once there,
    type `git clone`, and paste the URL you just copied:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The source code will now be downloaded to the location you specified.
  prefs: []
  type: TYPE_NORMAL
- en: Downloading engine binary content
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Navigate to the location where you downloaded the Unreal Engine source just
    now, and look for the `Setup.bat` file there. Run it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e729973b-b830-4d5a-8d83-17c2676226e0.png)'
  prefs: []
  type: TYPE_IMG
- en: Unreal Engine content is delivered separately from the source code. You must
    run this .bat file before the engine can work.
  prefs: []
  type: TYPE_NORMAL
- en: This batch file will now check for engine binary content that's missing or needs
    to be updated, and will update it. It may take a while the first time you run
    it.
  prefs: []
  type: TYPE_NORMAL
- en: Generating project files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Next, find `GenerateProjectFiles.bat` in the same directory and run it. This
    will create the `UE4.sln` solution file for Visual Studio and the required project
    files for each of Unreal Engine's sub-projects. This should run fairly quickly.
  prefs: []
  type: TYPE_NORMAL
- en: Opening and building the solution
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Open the newly generated `UE4.sln` file in Visual Studio. Ensure that the Development
    Editor solution configuration is set, and right-click the `Engine/UE4` project
    from your Solution Explorer. Select UnrealVS Quick Build | Win64 | Development
    Editor:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9359018b-6601-4a03-b499-c4b20bc1f084.png)'
  prefs: []
  type: TYPE_IMG
- en: The Quick Build command allows you to select the build configuration you'd like
    to build. Most of the time, you'll only be interested in Development Editor or
    Debug Editor configurations.
  prefs: []
  type: TYPE_NORMAL
- en: This build is going to take much longer than the build we ran earlier, as we're
    now building the entire engine, not just a game.
  prefs: []
  type: TYPE_NORMAL
- en: Once the build completes, ensure that UE4 is set as the startup project (it
    should be by default), and hit *F5* to launch it in the debugger.
  prefs: []
  type: TYPE_NORMAL
- en: Congratulations! You've now downloaded and built Unreal Engine entirely from
    source.
  prefs: []
  type: TYPE_NORMAL
- en: Updating your fork with new changes from Epic
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Epic will soon release new changes that aren't yet present in your fork. How
    soon will depend on the branch you're on. If you're on the release branch, new
    changes will come every few weeks. On the promoted branch, they will come every
    day or two. On the master branch, they will come every few minutes. In all these
    cases, you'll need to update your fork to get the new changes.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can see when new changes need to be merged by looking at the bar below
    the Branch selector. It indicates how many commits have occurred since you last
    updated your fork:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f9198e01-4a8e-4480-b1b8-90a032ff65f1.png)'
  prefs: []
  type: TYPE_IMG
- en: Here's an example of an ancient branch, far behind the current state of the
    release channel. We can see that it's over 52,000 changes behind. That's old.
    Dinosaurs roamed the earth when this code was last updated. We'll want to fix
    that.
  prefs: []
  type: TYPE_NORMAL
- en: Option – Using the command line to sync changes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Keeping your fork up-to-date with changes from the upstream branch is one of
    those operations that really is easier to do from the command line. We recommend
    that you do it this way. Let's talk you through the process.
  prefs: []
  type: TYPE_NORMAL
- en: Setting the upstream repository
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We've already forked our own repository from the Unreal Engine source repository,
    and we've cloned it to our local machine. Now, we need to tell our fork how to
    pull changes from the original project (which we'll call the **upstream** repository).
    You only need to do this once. In GitHub, open the original Unreal Engine repository
    page, [https://github.com/EpicGames/UnrealEngine](https://github.com/EpicGames/UnrealEngine),
    and hit the green Clone or download button, and then hit the Copy to Clipboard
    button to the right of the URL. Don't open it in desktop or download the ZIP.
    All you need here is the URL.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open a Windows Command Prompt (note that you can also use Git Bash for this
    if you''re comfortable with UNIX commands, and if you''re going to be using Git
    heavily, it''s recommended that you do), and navigate to the directory where you''ve
    cloned your repository. Type `git remote -v` and press *Enter*. You should see
    your origin repository listed here, but no upstream repository. That''s what we''re
    going to set up next:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7092c555-150f-4cfa-b811-086a8fb2cc59.png)'
  prefs: []
  type: TYPE_IMG
- en: The results of a git remote -v command before you've added your upstream repository
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, type `git remote add upstream` and paste the URL you copied a moment ago:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'And let''s verify that the upstream repo was properly set up by typing `git
    remote -v` again:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/69cc95b4-a6ba-45f2-b04a-325cd2ca9549.png)'
  prefs: []
  type: TYPE_IMG
- en: The results of a git remote -v command after you've added your upstream repository
  prefs: []
  type: TYPE_NORMAL
- en: Everything looks good—our upstream repo has been set.
  prefs: []
  type: TYPE_NORMAL
- en: For more information on forking a repo and preparing it to pull changes from
    the upstream depot, have a look at GitHub's documentation here: [https://help.github.com/articles/fork-a-repo/](https://help.github.com/articles/fork-a-repo/).
  prefs: []
  type: TYPE_NORMAL
- en: Syncing the fork
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'From a command prompt or Git Bash within our repository directory, type `git
    fetch upstream`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ddec52fc-99f4-46e4-ac37-3f8a05357d61.png)'
  prefs: []
  type: TYPE_IMG
- en: Output from a git fetch upstream operation
  prefs: []
  type: TYPE_NORMAL
- en: Now, *check out* whichever branch you're working in by typing `git checkout`,
    and the name of the branch. For example, type `git checkout release`, for the
    Release branch, `git checkout promoted` for the promoted branch, and `git checkout
    master` for the master branch.
  prefs: []
  type: TYPE_NORMAL
- en: Next, merge the changes from the upstream branch into your local branch by typing
    `git merge upstream/`, followed by the name of your branch. Again, if you're on
    the release branch, this would be `git merge upstream/release`.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, you need to push your changes from your local machine back to your
    fork's repository online. Type `git push origin master` to do this.
  prefs: []
  type: TYPE_NORMAL
- en: Reviewing the Git commands we just used
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To recap: any time you need to bring your branch up-to-date with the upstream
    branch, use the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '`git fetch upstream`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`git checkout [branch]`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`git merge upstream/[branch]`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`git push origin [branch]`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Refer to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/cbabc440-5838-404e-8cab-f6791df344bf.png)'
  prefs: []
  type: TYPE_IMG
- en: Command outputs in Git Bash.
  prefs: []
  type: TYPE_NORMAL
- en: Option – Using the web GUI to sync changes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you'd prefer to sync your fork online rather than by using the command line,
    follow this procedure.
  prefs: []
  type: TYPE_NORMAL
- en: If you're using the command-line procedure for synchronizing your fork, you
    can skip this part, since it does the same job.
  prefs: []
  type: TYPE_NORMAL
- en: 'Navigate to your fork''s page on GitHub, and hit the Compare button on the
    right-hand side of the bar. If you''ve made changes locally, they''ll appear in
    the Compare window that follows. (Let''s assume for simplicity''s sake that we
    haven''t, and that we''re just trying to get new code from Epic.) To do this,
    first, hit the switching the base link on the comparison page. This will reverse
    the comparison, so instead of looking for changes on our local fork that haven''t
    gone to Epic, we''ll look for changes made by other developers that aren''t yet
    present in our fork:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6fc7a631-107c-4531-a342-452265fa51ca.png)'
  prefs: []
  type: TYPE_IMG
- en: A list of changes on GitHub that haven't yet been merged to your fork
  prefs: []
  type: TYPE_NORMAL
- en: Here, we can see that the new changes can be merged automatically. This is expected
    because we haven't made any engine changes of our own. (Managing merged changes
    between your own Unreal Engine fork and Epic's branches is beyond the scope of
    this book.) In our case, we just want to get up to date.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a pull request
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Hit the Create pull request button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/02b6dca3-1a7d-4b8b-8d41-42250355ab31.png)'
  prefs: []
  type: TYPE_IMG
- en: A new pull request to merge changes from the upstream branch to your own
  prefs: []
  type: TYPE_NORMAL
- en: Give your pull request a name, and hit Create pull request again to create it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Your pull request will now be ready for review. In this case, since you initiated
    it, you can simply accept it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7967678d-0ec6-4b30-9a56-314586cbc6a7.png)'
  prefs: []
  type: TYPE_IMG
- en: The pull request confirmation dialog
  prefs: []
  type: TYPE_NORMAL
- en: Merging the pull request
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Hit Merge pull request to execute the merge and then hit Confirm merge to make
    it happen.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the merge is complete, return to your fork, and you should no longer be
    behind:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/222d6f9d-6c31-4722-bf83-6b7ae1e2dc40.png)'
  prefs: []
  type: TYPE_IMG
- en: Comparison between our branch and the upstream branch. We can see that we're
    now in-sync.
  prefs: []
  type: TYPE_NORMAL
- en: Pulling the origin to your local machine
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, you need to update your local copy on your machine.
  prefs: []
  type: TYPE_NORMAL
- en: 'Head back to GitHub Desktop, and in your Unreal Engine repository, look for
    the Fetch origin button. Hit this to instruct GitHub Desktop to look for changes
    on the remote repository that you haven''t yet copied locally:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7e6ab988-83db-438b-830e-cd6841580c7d.png)'
  prefs: []
  type: TYPE_IMG
- en: GitHub Desktop before we've fetched the new changes from the repo
  prefs: []
  type: TYPE_NORMAL
- en: 'In our case, we have a few:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/42451b35-6aea-4741-9eed-2e8ceeaf5ab8.png)'
  prefs: []
  type: TYPE_IMG
- en: GitHub Desktop ready to pull changes to our local machine
  prefs: []
  type: TYPE_NORMAL
- en: It's time to pull those 52,000 changes down to our local machine. Hit Pull origin
    to do this. GitHub desktop will *check out* the changes, copying them to the local
    machine. Once this is done, we should see that hitting Fetch origin no longer
    results in any new files to pull—we're current.
  prefs: []
  type: TYPE_NORMAL
- en: Re-synchronizing your engine content and regenerating project files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Regardless of whether you used the command line or a GUI to update your fork,
    you now need to update your solution file and project files to reflect the new
    source you've downloaded.
  prefs: []
  type: TYPE_NORMAL
- en: If you're certain that no source files or assets have been added or removed,
    you can skip this part. When in doubt, run these operations to make sure your
    assets are current and that Visual Studio knows about changed files.
  prefs: []
  type: TYPE_NORMAL
- en: With Visual Studio closed, re-run the `Setup.bat` file from your engine directory
    to update your binary content, and then re-run `GenerateProjectFiles.bat` to update
    your Visual Studio files. These will run much more quickly than they did the first
    time, as they're only updating what's changed.
  prefs: []
  type: TYPE_NORMAL
- en: Open the solution, build it, and run it. You should be back in business on the
    current code.
  prefs: []
  type: TYPE_NORMAL
- en: Very often, your startup project will change when you regenerate project files.
    If it does, right-click the project you'd like to launch and select Set as StartUp
    Project to reset it.
  prefs: []
  type: TYPE_NORMAL
- en: Going further with source code on GitHub
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There's quite a lot more we could talk about in modifying and building the engine
    source, but it falls outside the scope of this book. What you've learned here
    though will allow you to download Epic's most recent Unreal Engine code and build
    the engine if you need code that's more recent than the current release, or need
    to modify the engine.
  prefs: []
  type: TYPE_NORMAL
- en: If you do plan to work with Unreal source code from GitHub, it's worthwhile
    to take the time to learn about it. It's a powerful tool, but it can be mystifying
    if you're not clear on what it's doing. Help is available here: [https://help.github.com/](https://help.github.com/).
  prefs: []
  type: TYPE_NORMAL
- en: Again, most users will not need to do this, but it does sometimes happen that
    code to support new VR devices appears on the promoted or master branches long
    before it makes it to the release branches and the binary release channel through
    the launcher. You should now know enough to use the latest and greatest, if you
    ever need to do so.
  prefs: []
  type: TYPE_NORMAL
- en: Additional useful tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we move on from this chapter, let's take a quick moment to talk about
    other tools you may want to set up to work with Unreal. None of these will be
    required by the projects in this book, but they're worth knowing about, so you
    need to know where to look when you need them.
  prefs: []
  type: TYPE_NORMAL
- en: A good robust text editor
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Notepad just isn''t going to cut it when you need to edit large text files
    or replace a lot of text in a file. We recommend that you set up a dedicated text
    editor for this purpose. Here are a few options:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Visual Studio Code** ([https://code.visualstudio.com/](https://code.visualstudio.com/))
    is a powerful, lightweight text editor that supports lots of languages and contains
    a number of useful text-editing tools. It''s free.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Sublime Text** ([https://www.sublimetext.com/](https://www.sublimetext.com/))
    is a highly customizable editor with tons of custom integrations for various languages.
    It is $80, with a free trial.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Atom** ([https://atom.io/](https://atom.io/)) is a relatively new editor
    made by GitHub that supports tons of additional package installers for just about
    anything you could want to do to a text page. Because it''s made by GitHub, its
    Git integration is great. And it''s free.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Notepad++** ([https://notepad-plus-plus.org/](https://notepad-plus-plus.org/))
    is fast and lightweight and is older than most of the rest, so it has a devoted
    following. It''s free as well.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Vim** ([https://www.vim.org/download.php](https://www.vim.org/download.php))
    is its own beast. Its user interface conventions bear no resemblance to anything
    else in Windows, so it takes some significant effort to learn them. Its advantage
    is that once users learn the keystrokes to operate it, they can navigate through
    text documents at blazing speed without requiring the use of a mouse. And it runs
    on nearly anything that computes. We recommend this only if you''re already using
    it and love it or are specifically interested in learning it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Any of these or any other text editors you know and love will work out fine.
    Pick one that feels right to you and stick with it.
  prefs: []
  type: TYPE_NORMAL
- en: 3D modeling software
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Unreal scenes are made of 3D models, and you're going to need to modify them,
    clean them up, or create them from scratch at various points through your development.
    (How much you need to do this depends a lot on what you're creating, who you're
    working with, and the degree to which you're relying on existing art from the
    marketplace or other sources.) At any rate, it's a good idea to have a tool on
    your system that can edit 3D meshes.
  prefs: []
  type: TYPE_NORMAL
- en: You'll commonly hear 3D modeling tools referred to as **Digital Content Creation**
    tools in the industry, usually shortened to **DCC**. If you hear someone refer
    to a DCC, they're generally talking about a 3D modeling tool such as Blender,
    Maya, or 3ds Max.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are a few options:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Blender** ([https://www.blender.org/](https://www.blender.org/)) is a free
    and open source 3D modeling program that''s heavily used in the independent development
    community. Lots of tutorials exist to teach you how to create assets in Blender
    and get them into Unreal. It''s free.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Autodesk Maya** ([https://www.autodesk.com/products/maya/overview](https://www.autodesk.com/products/maya/overview))
    is a professional tool focused on creating content for media and entertainment.
    Nearly every creature you''ve ever seen in any movie or game over the past decade
    was likely modeled and animated in Maya. A Maya subscription costs around $1,500/year,
    but students are able to use it free for three years.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Autodesk 3ds Max** ([https://www.autodesk.com/products/3ds-max/overview](https://www.autodesk.com/products/3ds-max/overview))
    is a professional modeling tool focused on creating content for **architecture,
    engineering and construction** (**AEC**), and product design. It''s commonly used
    in media and entertainment as well, but its animation tools are much more limited
    than those found in Maya. Pricing for 3ds Max is the same as it is for Maya—around
    $1,500/year, with a free student license available.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Modo** ([https://www.foundry.com/products/modo#](https://www.foundry.com/products/modo#))
    is a newer entry to the professional market and is gaining adherents. It''s worth
    a look. A Modo subscription costs $600/year.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The DCC you choose will depend on your budget and what you plan to do with it.
    Generally, if you're making VR for entertainment, Maya will contain more of what
    you need, but this is by no means absolute. For architecture and product design,
    3ds Max may be what you need. For indie game development, you might be fine with
    Blender as well. Do some research and find out what's the best fit for your particular
    needs.
  prefs: []
  type: TYPE_NORMAL
- en: 'You''ll also see a few other tools in your professional travels. You mostly
    won''t see beginners using them, but they''re powerful tools and you should know
    they exist, so you can consider whether they might be a good solution for something
    you''re trying to do:'
  prefs: []
  type: TYPE_NORMAL
- en: '**ZBrush** ([http://pixologic.com/](http://pixologic.com/)) is a digital sculpting
    tool, used for creating highly detailed models and surfaces.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Mudbox** ([https://www.autodesk.com/products/mudbox/overview](https://www.autodesk.com/products/mudbox/overview)),
    like ZBrush, is a sculpting tool for adding fine detail to models.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Houdini** ([https://www.sidefx.com/](https://www.sidefx.com/)) is a procedural
    creation tool for 3D geometry and effects. If you need to create a city full of
    buildings, a forest full of vines, or a churning fireball, Houdini may be what
    you''re looking for.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Substance Painter** ([https://www.allegorithmic.com/products/substance-painter](https://www.allegorithmic.com/products/substance-painter))
    is a texture painting tool that allows artists to paint textures directly onto
    3D models.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Substance Designer** ([https://www.allegorithmic.com/products/substance-designer](https://www.allegorithmic.com/products/substance-designer))
    is a powerful material- authoring tool for creating highly varied and realistic
    physically-based materials.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These generally are expert and specialist tools, but it's worth knowing they're
    there and what they do.
  prefs: []
  type: TYPE_NORMAL
- en: Image-editing software
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You''re often going to need to edit textures and 2D art as well. You''ll need
    a tool with which to do this, and really you have two options you can seriously
    consider:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Adobe Photoshop** ([https://www.adobe.com/products/photoshop.html](https://www.adobe.com/products/photoshop.html))
    is the standard for 2D image editing. It''s worth it. There''s a secret to Photoshop''s
    pricing: if you subscribe to it as a standalone app, it costs $20.99 a month,
    but if you subscribe to the Photography bundle, you get it for $9.99/month instead.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**GIMP** ([https://www.gimp.org/](https://www.gimp.org/)) is a free, open source
    image editing application. It lacks a lot of the functionality of Photoshop, but
    if you''re only occasionally modifying textures, it may be all you need.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Your choice between Photoshop and GIMP will depend on your needs and your budget.
    If you're working professionally, it's probably best to stick with Photoshop,
    but if you don't need everything Photoshop does, GIMP might be enough.
  prefs: []
  type: TYPE_NORMAL
- en: Audio-editing software
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You''re occasionally going to need to edit sounds and music for your games
    and applications. You have a few options here, too:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Audacity** ([https://www.audacityteam.org/](https://www.audacityteam.org/))
    is a free, open source audio editing solution that''s surprisingly good. For much
    of the sound-editing work you''ll need to do, Audacity may be all you need.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Adobe Audition** ([https://www.adobe.com/products/audition.html](https://www.adobe.com/products/audition.html))
    is a professional audio-editing tool. Its advantages over Audacity are higher
    quality effects, and a non-destructive editing workflow, which means that if you
    apply a filter or effect to your sound, and then want to change it later on, you
    still can. Audition is available on a monthly subscription, or it can be bundled
    into an Adobe All Apps subscription.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Avid Pro Tools** ([https://www.avid.com/pro-tools](https://www.avid.com/pro-tools))
    is the most commonly used audio editing software among professionals, and is available
    in a free Pro Tools | First edition that contains all the features of the professional
    versions, but limits the number of inputs and audio tracks you can use. Whether
    this is an appropriate solution for you really depends on how heavily you anticipate
    editing audio, and what you plan to do with it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All the options we've mentioned cover sound editing, but for sound creation,
    there's no shortage of tools and audio libraries available. Cataloging them falls
    beyond the scope of this book, as sound design is its own art and the rabbit hole
    goes deep. For most users developing VR applications in Unreal, it's not a bad
    idea to begin with Audacity, and move on from there when or if you discover you
    need to do something specific.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we installed the Unreal Engine and learned about the various
    options we have available to us when setting it up. We created and launched a
    simple test project to verify that everything was working. Additionally, for those
    developing for mobile VR, we learned how to set up the required drivers and software
    development kits, and set up a mobile test project that we deployed to our device.
  prefs: []
  type: TYPE_NORMAL
- en: Along the way, we learned how to use the Epic Games launcher—not just as a way
    of keeping engine versions up to date and launching projects, but also as a vital
    learning and support resource. Through our exploration of the launcher, we learned
    how to get answers to questions from the Community tab and where to find documentation
    and video tutorials from the Learn tab. We explored the incredibly useful Content
    Examples project and looked at other projects we can use to explore specific topics
    in the engine. We saw that the Marketplace offers a huge range of free and paid
    content that we can use to accelerate our projects, and we learned how to use
    the Library tab to maintain our projects and engine versions.
  prefs: []
  type: TYPE_NORMAL
- en: For those planning to develop in C++, we learned how to set up our Visual Studio
    2017 development environment and configure it to work with Unreal, and then we
    created a simple test project to ensure that we were able to build and run our
    own C++ code within Unreal. For the extra adventurous, we learned how to download
    the Unreal Engine source from GitHub and build the engine entirely from scratch.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we took a brief look at additional tools that developers may generally
    find useful when building content for Unreal Engine, including a range of free
    and paid solutions for various needs.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we're going to build our first project explicitly for VR.
    (The quick-and-dirty projects we set up during the course of this chapter allowed
    us to test that our development environment was properly set up, but they weren't
    designed specifically for VR.) Now, we're going to learn how to set up a project
    correctly for VR. Let's jump in!
  prefs: []
  type: TYPE_NORMAL
