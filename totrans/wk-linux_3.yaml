- en: Chapter 3. Vim kung fu
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Vim's default configuration is usually pretty average. In order to better use
    Vim's powers, we will unleash its full potential through the help of its config
    files. Then, we will learn to explore some keyboard shortcuts that will help us
    speed up our workflow. We will also look at some commonly used plugins that make
    Vim even better. We will see how Vim can come in handy with its option of encrypting
    files for storing your passwords. The chapters will end by showing how we can
    automate Vim and configure a work environment easily.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will be covering the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Working with Vim
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploring Plugin steroids for Vim
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the Vim password manager to store passwords
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automating Vim configuration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When it comes to being productive in the terminal, one important aspect is to
    never leave the terminal! And when getting stuff done, a lot of the time we find
    ourselves having to edit files and opening an external (GUI) editor.
  prefs: []
  type: TYPE_NORMAL
- en: Bad move!
  prefs: []
  type: TYPE_NORMAL
- en: To double our productivity, we need to leave those days behind and get the job
    done right there, in the terminal, without opening full-fledged IDEs just to edit
    one simple line of text. Now, there is a lot of debate going on about which is
    the best text editor for your terminal, and each one has its pros and cons. We
    recommend Vim, an editor which is ultra-configurable and, once mastered, can even
    outmatch an IDE.
  prefs: []
  type: TYPE_NORMAL
- en: The first thing we need to do in order to kickstart our Vim productivity is
    to have a well configured `vimrc` file.
  prefs: []
  type: TYPE_NORMAL
- en: Supercharging Vim
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s start by opening a new hidden file called `.vimrc` in our `home` folder
    and pasting a few lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '![Supercharging Vim](img/image_03_001.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now let's close and reopen the file, so that we can see the configuration take
    effect. Let's go into a little more detail regarding some of the options.
  prefs: []
  type: TYPE_NORMAL
- en: 'First of all, as you''ve probably guessed, the lines starting with `"` are
    comments, so they can be ignored. Lines 5, 6, and 7 tell `vim` to always use spaces
    instead of tabs and to set the tab size to 4 spaces. Lines 10 to 12 tell `vim`
    to always open a file and set the cursor in the same position as the last time
    the file was open:'
  prefs: []
  type: TYPE_NORMAL
- en: '`syntax on`: This enables syntax highlighting, so it is easier to read code'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`set nopaste`: This sets `nopaste` mode, which means you can paste code without
    having Vim try to guess how to format it'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`set number`: This tells Vim to always show the line numbers'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`set undolevels=1000`: This tells Vim to remember the last 1000 changes we
    made to the file, so that we can easily undo and redo'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now, most of these features can be easily turned on or off. Say, for example,
    we want to copy, paste some lines from a file opened in Vim to another file. With
    this configuration, we are also going to paste the line number. What can be done
    is to quickly switch off the line number by typing `:set nonumber`, or, if the
    syntax is annoying, we can easily switch it off by running `syntax off`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another common feature is the status line, which can be configured by pasting
    these options:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Close the file and open it again. Now we can see at the bottom of the page a
    status bar with extra information. This is also ultra-configurable, so we can
    put a lot of different stuff inside. This particular status bar contains the name
    of the file, the current directory, the line and column numbers and also the paste
    mode (on or off). To set it to on, we use `:set paste` and the changes will be
    showed in the status bar.
  prefs: []
  type: TYPE_NORMAL
- en: 'Vim also has the option of changing the color scheme. To do this, go to /`usr/share/vim/vim74/colors`
    and choose a color scheme from there:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Supercharging Vim](img/image_03_002.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Let's choose desert!
  prefs: []
  type: TYPE_NORMAL
- en: Color scheme desert
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Close and reopen the file; you will see it's not that different from the previous
    color theme. If we want a more radical one, we can set the color scheme to blue,
    which will drastically change the way Vim looks. But during the rest of this course,
    we will stick to **desert**.
  prefs: []
  type: TYPE_NORMAL
- en: 'Vim can also be supercharged with the help of external tools. In the world
    of programming, we often find ourselves editing JSON files and that can be a very
    difficult task if the JSON is not indented. There is a Python module that we can
    use to automatically indent JSON files and Vim can be configured to use it internally.
    All we need to do is to open the configuration file and paste the following line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Essentially this is telling Vim that, when in visual mode, if we press *J*,
    it should call Python with the selected text. Let's manually write a `json` string,
    go to visual mode by pressing *V*, select the text using our arrows, and hit *J*.
  prefs: []
  type: TYPE_NORMAL
- en: 'And, with no extra packages, we added a JSON formatting shortcut:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Color scheme desert](img/image_03_003.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We can do the same thing for `xml` files, but first we need to install a tool
    for working with them:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![Color scheme desert](img/image_03_004.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'To install the XML utility package, we must add the following line to our configuration
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: This maps the *L* key when in visual mode to `xmllint`. Let's write a HTML snippet,
    which is actually a valid `xml` file, hit `V` for visual mode, select the text,
    and press *L*.
  prefs: []
  type: TYPE_NORMAL
- en: This type of extension (and also spell checkers, linters, dictionaries, and
    much more) can be brought to Vim and be instantly available to use.
  prefs: []
  type: TYPE_NORMAL
- en: A well configured `vim` file can spare you a lot of time in the command line.
    Although it might take some time in the beginning to get things set up and to
    find the configuration that is right for you, this investment can pay off bigtime
    in the future, as time passes and we spend more and more time in Vim. A lot of
    times we don't even have the luxury of opening a GUI editor, like when working
    remotely through an `ssh` session. Believe it or not, command line editors are
    life savers and productivity is hard to achieve without them.
  prefs: []
  type: TYPE_NORMAL
- en: Keyboard kung fu
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have Vim all set up, it's time to learn some more command line shortcuts.
    The first thing we will be looking at is indentation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Indentation can be done in Vim by going into visual mode and typing *V* for
    selecting portions of text or *V* for selecting full lines, followed by *>* or
    *<* to indent right or left. Afterwards press `.` to repeat the last operation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Keyboard kung fu](img/image_03_005.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Any operation can be undone by hitting `u` and can then be redone by hitting
    *Ctrl* + *R* (as in undo and redo). This is the equivalent of *Ctrl* + *Z* and
    *Ctrl* + *Shift* + *Z* in most popular editors.
  prefs: []
  type: TYPE_NORMAL
- en: 'When in visual mode, we have the option of changing the case of letters by
    hitting *U* to make all text upper case, *u* for lower case and *~* to reverse
    current case:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Keyboard kung fu](img/image_03_006.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Other handy shortcuts are:'
  prefs: []
  type: TYPE_NORMAL
- en: '`G`: Go to end of file'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`gg`: Go to start of file'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Select all`: This is not really a shortcut, but a combination of commands:
    `gg V G`, as in go to start of file, select full line, and move to the end.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Vim also has a handy shortcut for opening man pages for the word under the
    cursor. Just hit K and a man page will show up for that specific word (if there
    is one, that is):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Keyboard kung fu](img/image_03_007.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Finding text in Vim is as easy as hitting */*. Just type */* *+* the text to
    find, and hit *Enter* to start searching. Vim will go to the first occurrence
    of that text. Hit `n` for next occurrence, *N* for previous occurrence.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our favorite editor has a powerful find and replace feature, similar to the
    `sed` command. Let''s say we want to replace all occurrences of the string `CWD`
    with the string `DIR`. For this, just type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![Keyboard kung fu](img/image_03_008.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s do another common example that often comes up in programming: commenting
    lines of code. Let''s say that we want to comment out lines 10 to 20 in a shell
    script. To do this, type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '![Keyboard kung fu](img/image_03_009.jpg)![Keyboard kung fu](img/image_03_010.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'This means substitute the beginning of the line with # and space. For deleting
    lines of text, type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: This will delete everything from line 30 till the end.
  prefs: []
  type: TYPE_NORMAL
- en: More information about regular expressions can be found in the chapters. Also
    check out the parts on `sed` for more text manipulation examples. These commands
    are some of the longest in Vim and often we get them wrong. To edit the command
    we just wrote and run it again, we can open the command history by hitting *q:*,
    navigate to the line containing the command to edit, press Insert, update the
    line, and press *Esc* and *Enter* to run the command. It's as simple as that!
  prefs: []
  type: TYPE_NORMAL
- en: '![Keyboard kung fu](img/image_03_011.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Another operation that is often useful is sorting. Let''s create a file with
    unsorted lines of text from the classic lorem ipsum text:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '![Keyboard kung fu](img/image_03_012.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Open `sort.txt` and `run :sort`. We see that the lines are all sorted alphabetically.
  prefs: []
  type: TYPE_NORMAL
- en: '![Keyboard kung fu](img/image_03_013.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now let''s move forward to window management. Vim has the option to split the
    screen for editing files in parallel. Just write `:split` for horizontal split,
    and `:vsplit` for vertical split:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Keyboard kung fu](img/image_03_014.jpg)![Keyboard kung fu](img/image_03_015.jpg)'
  prefs: []
  type: TYPE_IMG
- en: When Vim splits the screen, it opens the same file in the other pane; to open
    another file just hit `:e`. The good thing here is that we have autocomplete,
    so we can just hit *Tab* and Vim will start writing filenames for us. If we don't
    know what files we want to choose, we can just run any arbitrary shell command
    directly from Vim and come back once we've finished. For example, when we type
    `:!ls,` the shell opens, shows us the output of the command, and waits until we
    hit *Enter* to come back to the file.
  prefs: []
  type: TYPE_NORMAL
- en: When in split mode, press *Ctrl* + *W* to switch between windows. To close a
    window, press `:q`. If you want to save a file under a different name (think of
    the `save as` command from other editors), just hit `:w` followed by the new file
    name, say `mycopy.txt`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Vim also has the option of opening multiple files at once; just specify a list
    of files after the `vim` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: After the files are open, use `:bn` to move to the next file. To close all the
    files, hit `:qa`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Vim also has an built in explorer. Just open Vim and hit `:Explore`. After
    this, we can navigate through the directory layout and we can open new files:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Keyboard kung fu](img/image_03_016.jpg)'
  prefs: []
  type: TYPE_IMG
- en: It also has a different option. Let's open a file, delete one of the lines,
    and save it under a new name. Exit and open the two files with `vimdiff`. Now
    we can see the differences between them visually. This applies to all sorts of
    changes and is way better than the plain old diff command output.
  prefs: []
  type: TYPE_NORMAL
- en: Keyboard shortcuts really make a difference and open a whole new world of possibilities
    when using Vim. It's kind of hard to remember in the beginning, but once you start
    using them, it will be as simple as clicking a button.
  prefs: []
  type: TYPE_NORMAL
- en: Plugin steroids for Vim
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we will be looking at how we can add external plugins to Vim.
    Vim has its own programming language for writing plugins, which we saw a glimpse
    of when writing the `vimrc` file. Luckily, we won''t have to learn all of that
    because most of the stuff we can think of already has a plugin out there. To manage
    plugins, let''s install the plugin manager pathogen. Open: [https://github.com/tpope/vim-pathogen](https://github.com/tpope/vim-pathogen).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow the installation instructions. As you can see, it''s a one-line command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'And after it finishes, add pathogen to your `.vimrc`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Most IDEs show a tree layout of the folder structure, in parallel with the open
    files. Vim can do this also, and the simplest way to achieve this is by installing
    the plugin called **NERDtree**.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open: [https://github.com/scrooloose/nerdtree](https://github.com/scrooloose/nerdtree),
    and follow the instructions for installing it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Now we should be all set. Let's open a file and type `:NERDtree`. We see the
    tree-like structure of our current folder here, where we can browse and open new
    files. If we want Vim to replace our IDE, this is certainly a mandatory plugin!
  prefs: []
  type: TYPE_NORMAL
- en: '![Plugin steroids for Vim](img/image_03_017.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Another awesome plugin that comes in really handy is called **Snipmate** and
    is used for writing code snippets. To install it, go to this link and follow the
    instructions: [https://github.com/garbas/vim-snipmate](https://github.com/garbas/vim-snipmate).'
  prefs: []
  type: TYPE_NORMAL
- en: '![Plugin steroids for Vim](img/image_03_018.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'As we can see, before installing `snipmate`, there is another set of plugins
    that needs to be installed:'
  prefs: []
  type: TYPE_NORMAL
- en: '`git clone https://github.com/tomtom/tlib_vim.git`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`git clone https://github.com/MarcWeber/vim-addon-mw-utils.git`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`git clone https://github.com/garbas/vim-snipmate.git`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`git clone https://github.com/honza/vim-snippets.git`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If we take a look at the readme, we can see an example for C files, which has
    auto completion for the `for` keyword. Let's open a file with a `.c` extension,
    type `for` and hit *Tab*. We can see the autocomplete working.
  prefs: []
  type: TYPE_NORMAL
- en: 'We have also installed the `vim-snipmate` package, which comes with lots of
    snippets for different languages. If we take a look at `~/.vim/bundle/vim-snippets/snippets/`,
    we can see lots of snippet files:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Plugin steroids for Vim](img/image_03_019.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s check the `javascript` one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '![Plugin steroids for Vim](img/image_03_020.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Here we can see all the snippets available. Type `fun` and hit *Tab* for the
    function autocomplete. The snippets are preconfigured with variables so that you
    can write a function name and hit *Tab* to go to the next variable to complete.
    There is a snippet for writing if-else blocks, one for writing `console.log,`
    and lots of others for common code blocks. The best way to learn them is to go
    through the file and start using the snippets.
  prefs: []
  type: TYPE_NORMAL
- en: There are lots of plugins out there. People have made all sorts of plugin packs
    that are guaranteed to put your Vim on steroids. One cool project is [http://vim.spf13.com/](http://vim.spf13.com/)
  prefs: []
  type: TYPE_NORMAL
- en: It's nicknamed the ultimate Vim plugin pack and it basically has plugins and
    keyboard shortcuts for everything. This is for more advanced users, so be sure
    to understand the basic concepts before jumping to plugin packs. Remember, the
    best way to learn is to install plugins manually and play with them one by one.
  prefs: []
  type: TYPE_NORMAL
- en: Vim password manager
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Vim can also be used to safely store information, by encrypting text files
    with different `cryp` methods. To see the `cryp` method that Vim is currently
    using, type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'We can see in our case it is `zip`, which is not actually a `crypto` method
    and does not offer much in terms of security. To see what different alternatives
    we have, we can type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '![Vim password manager](img/image_03_021.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'A page describing the different encryption methods comes up. We can choose
    from `zip`, `blowfish,` and `blowfish2`.The most secure and recommended one is,
    of course, `blowfish2`. To change the encryption method, type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: This can be also added to `vimrc` so that it becomes the default encryption.
    Now we can safely encrypt files using Vim.
  prefs: []
  type: TYPE_NORMAL
- en: A common scenario would be storing a passwords file.
  prefs: []
  type: TYPE_NORMAL
- en: Let's open up a new file named `passwords.txt`, add some dummy passwords inside,
    and save it. The next step is to encrypt the file with a password, and for this
    we type `:X`.
  prefs: []
  type: TYPE_NORMAL
- en: Vim will prompt you for a password twice. If you exit without saving the file,
    the encryption will not be applied. Now, encrypt it again, save, and exit the
    file.
  prefs: []
  type: TYPE_NORMAL
- en: 'When we reopen it, Vim will ask for the same password. If we get this wrong,
    Vim will show some random characters that come from the failed decryption. Only
    if we type the correct password will we get the actual file content:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Vim password manager](img/image_03_022.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Saving encrypted files with Vim, combined with backing up the file in places
    like a private `git` repository or a private Dropbox folder, can be an effective
    way of storing your passwords:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Vim password manager](img/image_03_023.jpg)'
  prefs: []
  type: TYPE_IMG
- en: It also has the benefit that it's sort of a unique method of storing passwords,
    compared to using online services that are pretty standard and might get compromised.
    This can also be referred to as *security throug* *h obscurity*.
  prefs: []
  type: TYPE_NORMAL
- en: Instant configuration restoring
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The configuration we have seen in this chapter might take some time to set up
    manually, but, once everything is configured, we can create a script that will
    restore the Vim configuration instantly.
  prefs: []
  type: TYPE_NORMAL
- en: 'For this, we paste all the commands issued up to now into a bash script that
    can be run to bring Vim to the exact same configuration. All that is missing from
    this script is the `vimrc` file from the `home` folder, which we can also restore
    through a technique called heredocs. Just type cat, redirect the output to `vimrc`,
    and use heredoc as input, delimited by `eof`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Instant configuration restoring](img/image_03_025.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Using heredocs is a common technique for manipulating large chunks of text inside
    bash scripts. Basically it treats a section of code like a separate file (in our
    case everything after the cat and until the EOF). With this script, we can restore
    all the Vim configurations we have done and we can also run it on any computer
    we work on, so that we get our Vim set up in no time!
  prefs: []
  type: TYPE_NORMAL
- en: We hope you have enjoyed this material and see you in the chapter!
  prefs: []
  type: TYPE_NORMAL
