- en: Chapter 6. Creating Your Own Flat UI Kit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this last chapter, we'll learn how you can create your own personal Flat
    UI kit. We will cover all phases of the process, from designing to developing
    and exporting your assets. These are the most important elements that you need
    to bear in mind while creating your own pack. We will also explain how to ensure
    ease of use for you or anyone else by documenting every element and usage.
  prefs: []
  type: TYPE_NORMAL
- en: Designing your components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To create your own Flat UI pack, the first step is to define which elements
    you should create. Your objective is to create and gather a pack of elements to
    reuse in future projects, so you should look for basic interface elements that
    are common to most projects. Elements such as buttons, form controls such as radio
    buttons and checkboxes, form content areas such as text fields and text areas,
    title style, and sizes such as `<h1>`, `<h2>`, and `<h3>`, once designed, thought
    of, and developed, can be reused in several projects. Often, a web designer finds
    himself or herself reusing old HTML and CSS code, so creating your own personal
    pack is great in order to make your workflow easier and quicker.
  prefs: []
  type: TYPE_NORMAL
- en: The first phase of creating your own Flat UI pack is to design your elements.
    There are several designs online for UI packs, web elements, and even great icon
    packs that you can use as an inspiration for your own work. A simple search on
    [dribbble.com](http://dribbble.com) will help you find great elements that you
    can use as inspiration, or even some freebies that you can use as a foundation
    to create your own designs.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows an example of a Flat UI pack by Alexandre Crenn
    at [http://dribbble.com/shots/1020321-FREE-Pack-UI-PSD](http://dribbble.com/shots/1020321-FREE-Pack-UI-PSD):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Designing your components](img/0048OS_06_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: To create your pack, define what elements you want to include and design. Make
    a list of the elements you need most and that you will be working on, and then
    start designing them.
  prefs: []
  type: TYPE_NORMAL
- en: 'As an example, let''s do an exercise and create one of those elements for your
    personal pack. Let''s create a button, as it''s one of the most used and more
    visually impactful elements of them all, by executing the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open Photoshop and create a new 320 by 95 px document.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using the rounded rectangle tool, create a rectangle with 8 px of radius and
    `#2ecc71` as the background color. The output will be similar to what is shown
    in the following screenshot:![Designing your components](img/0048OS_06_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's create a more interesting flat button this time and give it some depth.
    Duplicate this layer, change its color to `#27ae60`, and move it 5 px down. Make
    sure that this second rectangle is under the first one that we've created in the
    layer order. This makes the second rectangle appear as a side of the button along
    with its shadow. Only by making this slight change, you'll be able to see that
    we have a depth effect in the button, as shown in the following screenshot:![Designing
    your components](img/0048OS_06_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To finish designing our button, let's create a text field with `CLICK HERE`
    written on it. Use type face Lato, font style white, and set the size as 20 pt.
    Now, create a drop shadow layer style in the text layer with 1 px of distance
    and 1 px of size, color black with 33 percent opacity.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, our new flat button is complete, as shown in the following screenshot:![Designing
    your components](img/0048OS_06_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As you can see, we used a drop shadow in the text and a 3D depth effect in this
    flat button. You might be wondering about this, as I had previously spoken against
    the use of such effects. The truth is that you can use a drop shadow and even
    a 3D object, such as the one used in the preceding image, as long as you're able
    to use them wisely and in a subtle way. This button, even with a drop shadow and
    depth, still looks flat, and looks definitely more appealing with this kind of
    characteristics. However, it is, in essence, still a flat button, and not a direct
    representation of a physical button. Also, the drop shadow is very subtle in the
    text, just enough to pop the text a bit. As with everything, don't be too harsh
    with the rules; try to experiment with the style and see what works best. However,
    to achieve minimalism, you need to be able to focus on the essentials and design
    clean elements.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have designed our button, we are ready to translate this into code.
    As this button can be entirely created in HTML and CSS, thanks to CSS3 border-radius
    and text-shadow features, we don't need to do any image exporting. However, in
    a different element, say a radio button or a checkbox, we would need to prepare
    those images. So, we move on to the next step, that is, exporting images and coding
    your elements.
  prefs: []
  type: TYPE_NORMAL
- en: Exporting and coding
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As I said before, this step is where you would export and prepare any images
    needed for your pack. There are a few different ways of dealing with images. Be
    it an icon or a background, you should try to optimize your images as best as
    possible. A great way to reduce the size of images and speed up the loading of
    a page is by using CSS Sprites. Sprites were originally used for video games where
    a single image file would have several frames of an animation, which were then
    loaded, and changing the coordinates of the image shown would create the animation,
    just like in a traditional animation. The following screenshot shows Super Mario
    Bros. 3 Sprite Sheets:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Exporting and coding](img/0048OS_06_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'This same technique is used for web and interface designs, by creating buttons,
    icons, and several states, and including them in just a single image, and then
    using CSS to show only the portion that we need for a certain element. There are
    programs and online applications that can be very helpful to create the CSS code
    for those Sprites, which is a lot quicker than calculating them and creating all
    the CSS code manually. Online applications such as Sprite Cow ([http://www.spritecow.com/](http://www.spritecow.com/))
    and software such as Sprite Right ([http://spriterightapp.com/](http://spriterightapp.com/))
    are extremely helpful to create CSS Sprites, and you should definitely take a
    look at them and try using sprites in your next big project. For now, let''s go
    back to our button. The following screenshot shows sprites from Amazon.com:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Exporting and coding](img/0048OS_06_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Since our button is made up of only code, we can go directly into development
    without the need to export any image for this element. So let''s jump straight
    to our code editor and perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s first create the HTML code for our button. We''ll need to create a simple
    HTML page just to host the button. Create a new HTML file named `button.html`
    with the following code as reference:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Here, you can see that our button is effectively a `<button>` element, with
    the class `class="nbtn"`. It is good to use small names for classes as they are
    small and easy to recognize and write. While developing your pack, you want to
    think as much as you can about how you can reuse your CSS. So for instance, while
    creating a button, if you want to create several colors of the same button, you
    should create a class `btn` and then a class for each color, such as red, blue,
    and so on. This way, the `btn` class would have only the CSS for the sizing and
    appearance, and you would define the color in a separate class. This means that
    you'd be reusing the class `btn` for every kind of color, making it easier to
    customize and change it for future usage. A red button would then look like `<button
    class=tbtn redred class=then look l>`. It's just a matter of thinking of how you
    can mix different classes for different objectives when creating your CSS.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s get back to our button. Now that we created our HTML file, if you open
    the file in a browser, you''ll see our button completely unstyled, with the default
    browser look. So, with the HTML file created, it''s time for us to style this
    element with CSS. First of all, we want to use a custom font for this, so include
    this line in the `<head>` element of your HTML file: `<link href=''http://fonts.googleapis.com/css?family=Lato:700''
    rel=''stylesheet'' type=''text/css''>`. This will load the typeface Lato to be
    used in our button. For the sake of organization, we''ll create our CSS code in
    our header, so create a `<style></style> element inside the <head>`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To create the look of a button, the following is the CSS code that we''re going
    to use:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: So, going over the code, we're defining the border-radius as 8 px, and unfortunately,
    due to browser compatibilities, we have to include several browser prefixes to
    make sure that it will work in most browsers. We're not only setting the background
    color to our chosen green, but also setting the color and typeface of the text
    as well as its shadow.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you refresh your browser now, you''ll see that the design we used previously
    is now completely developed, including the 3D depth. This was done by creating
    a bigger bottom border with `border-bottom: 5px solid #27ae60`. We''ve given the
    border a radius of 5 px and a darker shade of green, creating the illusion of
    depth to the button. The last part, `outline: none`, is also very important as
    it''s the one that deactivates the browser focus outline, which is usually a blue
    glow or a blue border (depending on the browser used). So this way, we make sure
    that our element doesn''t have any other kind of effect applied, other than the
    ones created by us.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following shows us how the button looks now with our CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Exporting and coding](img/0048OS_06_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A great resource to create your CSS3 code is `css3generator.com`. It lets you
    fine-tune and visualize details such as border radius and box shadows. It is great
    for helping you deal with several browser-specific prefixes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, for the different states, our button has the following properties that
    are used in this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The `.btn:hover` class is the rollover effect that occurs when the mouse is
    over the button. What we''re aiming to do is to make it appear as if the button
    is being pressed, so we''re changing the border to a smaller one in order to give
    a sort of shadow to the button, and losing the bigger border-bottom. However,
    since the button needs to go down, we give it a margin-top of 3 px to make it
    look like the button is really being pressed down, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Exporting and coding](img/0048OS_06_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'For the active state, when the button is clicked, we want to make it look like
    it''s been pressed down from its previous state. So, we''re creating an inset
    shadow and changing the padding to make the text go down a couple of pixels, just
    enough to make the user feel like it''s physically going down a bit. While interacting
    with it, you understand the effect it creates and how well it works. The following
    screenshot shows the button in the active state:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Exporting and coding](img/0048OS_06_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This is it for the development of our button! It's ready to be used in your
    pack and in future projects. You can always customize it further and create different
    sizes for it based on the same kind of appearance.
  prefs: []
  type: TYPE_NORMAL
- en: Documentation is key
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you're creating your elements and your scripts, you should document everything.
    Organization and documentation is extremely important so that you can properly
    reuse the elements that you create. Also, if you're working with more people on
    a regular basis, you should make sure that all your classes have understandable
    names. Also, make sure to comment your CSS as well as your HTML in such a way
    that anyone else can just grab and use your code in the future. Sometimes, it
    so happens that bad names for classes are used, and when you're looking for a
    specific class or trying to understand your code, it can be a really daunting
    task without any kind of support or documentation.
  prefs: []
  type: TYPE_NORMAL
- en: 'The best way to make sure that all your code is understandable is to use comments.
    In HTML, you can do that by using the enclosing code or text comments as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'In CSS, you can also comment code or add your own text as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: These can and should be used as much as possible. Be concise and describe exactly
    what your code does, as in the future, you or anyone else will revisit it and
    will need to get an understanding of the function and objective. You can also
    use comments to timestamp changes and author in order to keep track of the last
    updates on a file.
  prefs: []
  type: TYPE_NORMAL
- en: In the case of bigger and more complex projects, you can create complete `readme`
    files, with textual guides that explain the elements and how to design them. However,
    comments are usually enough for this and are easier as they are placed directly
    in the working files.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we covered the process of creating your own Flat UI pack, from
    element design to development, and also elaborated on how to create documentation
    and comment your work for future use. We created a flat design button in CSS to
    exemplify a process and create one asset of the pack.
  prefs: []
  type: TYPE_NORMAL
- en: This is also the last chapter, and with it, we come to the end of our book.
    Here, we covered all the phases of a web design project in flat design, focusing
    on the specifics of the flat style and how it's so easy and impactful to create
    projects. From planning, sketching, and designing, up until development, you're
    now ready to create your own page, and you just need to go ahead and put this
    in practice, because the more you practice, the better you'll become.
  prefs: []
  type: TYPE_NORMAL
