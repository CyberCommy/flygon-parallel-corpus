- en: Chapter 7. Spell Check in Solr
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The spell check component can be used to suggest spelling corrections based
    on the data we have in our index. In this chapter, we will see how to enable spell
    check in our index and use PHP to get and display spelling corrections. The topics
    that we will cover in this chapter are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Solr configuration for spell check
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spell checker implementations available in Solr
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running a spell check query using PHP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying suggestions and collations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building the autocomplete feature
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Spell check works on indexed words. If our index has incorrect spellings, the
    suggestions may also be misspelled.
  prefs: []
  type: TYPE_NORMAL
- en: Spell check can be used to suggest spelling corrections to the user by providing
    a *did you mean* functionality. It is similar to the **showing results for** feature
    that Google provides. It can be used to provide a list of suggestions for autocompleting
    the user's input text. PHP also has a similar functionality known as **pspell**
    but this spellcheck is built on top of the index that we have created in Solr.
    This means that it is more customized to the type of documents that are there
    in the index and also can be tweaked for results that are more to our liking.
  prefs: []
  type: TYPE_NORMAL
- en: Solr configuration for spell check
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The demo schema and configuration that comes with Solr installation already
    has spell check configured in it. Let us look at its settings:'
  prefs: []
  type: TYPE_NORMAL
- en: Open up `solrconfig.xml` inside `<solr_dir>/example/solr/collection1/conf`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Search for `searchComponent` by the name of `spellcheck`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Inside the `spellcheck` component there are multiple spellchecker(s). Here
    is the `default` spellchecker that comes along with Solr:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding block of code shows various variables used in spell check. Let
    us go through the important variables in spell check configuration and check out
    their meanings:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`name`: This variable specifies the name of the spell check configuration of
    the Solr spellchecker. In our configuration the name is `default`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`field`: This variable specifies the field that will be used for spellchecking.
    We are using the text field to load tokens for spellchecking.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`classname`: This variable specifies the implementation of Solr spellchecker
    that is being used. We are using `DirectSolrSpellChecker`, which uses the Solr
    index directly and does not require us to build or rebuild the spell check index.
    We will look at other implementations as well.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`accuracy`: This variable ranges from `0.0` to `1.0`, `1.0` being most accurate.
    This accuracy value is used by the Solr spell checking implementation to decide
    if the results can be used or not.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`maxQueryFrequency`: This variable specifies the maximum threshold for the
    number of documents a query term must appear in to be considered as a suggestion.
    Here it is set to `0.01`. A lower threshold is better for smaller indexes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`thresholdTokenFrequency`: This variable specifies that the term must occur
    in one percent of the documents to be considered for spelling suggestions. This
    prevents low frequency terms from being offered as suggestions. But if your document
    base is small, you may need to reduce this further to get spelling suggestions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spell checker implementations available with Solr
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let us go through the different spell checker implementations available with
    Solr:'
  prefs: []
  type: TYPE_NORMAL
- en: '`DirectSolrSpellChecker`: This implementation does not require a separate index
    to be built for spell checking. It uses the main Solr index for spelling suggestions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`IndexBasedSpellChecker`: This implementation is used to create and maintain
    a spelling dictionary that is based on the Solr index. Since a separate index
    is created and maintained, we need to build/rebuild the index whenever the main
    index changes. This can be done automatically by enabling `buildOnCommit` or `buildOnOptimize`
    in the configuration. Also, we need to specify the location of the index to be
    created using the `spellcheckIndexDir` variable in our Solr spellcheck component
    configuration.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `buildOnCommit` component is very expensive. It is recommended to use `buildOnOptimize`
    or explicit build using `spellcheck.build=true` in Solr URL.
  prefs: []
  type: TYPE_NORMAL
- en: '`FileBasedSpellChecker`: This implementation uses a flat file to build a spellcheck
    index in Solr. Since there is no frequency information available, the index created
    using this component cannot be used to extract frequency based information such
    as threshold or most popular suggestions. The format of the file is one word per
    line, for example:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The index needs to be built using the `spellcheck.build=true` parameter in our
    Solr URL. In addition to the `spellcheckIndexDir` location to build and store
    the index, the `FileBasedSpellChecker` component also needs the `sourceLocation`
    variable to specify the location of the spelling file.
  prefs: []
  type: TYPE_NORMAL
- en: '`WordBreakSolrSpellChecker`: This spellcheck component generates suggestions
    by combining adjacent words or by breaking words into multiples. It can be configured
    along with one of the preceding spellcheckers. In this case, the results are combined
    and collations can contain a result from both spellcheckers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spellcheckers generally give suggestions that are sorted by the score from the
    string distance calculation and then by frequency of suggestions in the index.
    These parameters can be tuned in the configuration file by providing different
    implementations of the distance calculation using the `distanceMeasure` variable
    or by providing different implementations of word frequency using the `comparatorClass`
    variable. Some available `comparatorClass` implementations are `score` (default)
    and `freq`. Similarly `org.apache.lucene.search.spell.JaroWinklerDistance` is
    an implementation of distance calculation, which is available with Solr.
  prefs: []
  type: TYPE_NORMAL
- en: Running a spell check query using PHP
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let us configure Solr so that spell check happens on two fields, name and author:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Change the contents of the `schema.xml` file. Create a new field on which spellcheck
    will happen and copy the `name` and `author` fields to the new field using the
    following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Change the spellchecker field for the default spellchecker in `solrconfig.xml`
    to the new field we have just created. The default spellchecker uses the `DirectSolrSpellChecker`
    implementation of spell checker available with Solr.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: By default the `/select` request handler in Solr configuration does not have
    spellcheck settings and results. So let us add these variables in `requestHandler`
    named `/select`. Here we are specifying the spellcheck dictionary to be used as
    **default**, which we configured earlier and adding the spell check component
    as a part of the output.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Now restart Solr and reindex the `books.csv` file in the `exampledocs` folder
    and also the `books.csv` file provided in [Chapter 5](ch05.html "Chapter 5. Highlighting
    Results Using PHP and Solr"), *Highlighting Results Using PHP and Solr*. The reason
    why we need to index our books again is because we have changed our schema. Whenever
    schema is changed and new fields are added, the documents need to be indexed again
    to populate data in the new fields. Refer to the *Adding sample documents to Solr
    index* section in [Chapter 2](ch02.html "Chapter 2. Inserting, Updating, and Deleting
    Documents from Solr"), *Inserting, Updating, and Deleting Documents from Solr*,
    for indexing these CSV files in Solr.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let us do a spell check for the author *Stephen King* using PHP and see the
    corrections that Solr suggests:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First get the spell check component from the select query using the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: We have set the number of suggestions to return via the `setCount()` function.
    By setting `setCollate()` as `true`, we are telling Solr to suggest the original
    query string with best suggestions replacing the original misspelled words. The
    `setExtendedResults()` and `setCollateExtendedResults()` functions tell Solr to
    provide additional information about the suggestion and the collations returned.
    This can be used for analysis if required.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After executing the query, we need to get the spellcheck component from the
    query resultset and use it for getting suggestions and collations. We use the
    `getCorrectlySpelled()` function to check if the query was correctly spelled.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Next, we loop through the spellcheck results and for each term in the query
    we get the suggestions and related details such as number of suggestions, frequency
    of original term, and the suggested words with their frequency of occurrence.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Similarly, we get the collations and loop through it to get the corrected query
    and hits. We can also get the details of corrections for each term in the query.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Implementing the autocomplete feature using PHP and Solr
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Autocomplete feature can be built by creating a Suggester in Solr and using
    the Suggester available in Solarium. The purpose of autocomplete is to suggest
    query terms based on incomplete user input. Suggester works very similarly to
    the spellcheck feature. It can be made to work either on the main index or any
    other dictionary.
  prefs: []
  type: TYPE_NORMAL
- en: 'First let us change the `schema.xml` file to add a spellcheck component named
    `suggest`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'We have specified the field to use for suggestions as `suggestfld`. The Solr
    component that is used to build the Suggester is mentioned in the classname as
    `org.apache.solr.spelling.suggest.Suggester`. The threshold is a value between
    0 and 1 that specifies the minimum fraction of documents where the term should
    appear to be added to the lookup dictionary. We are storing the index in the `suggest_idx`
    folder. The `lookupImpl` component provides the `inmemory` lookup implementations
    for creating suggestions. Available lookup implementations in Solr are:'
  prefs: []
  type: TYPE_NORMAL
- en: '`JaspellLookup`: It is a tree-based representation based on Jaspell. Jaspell
    is a Java spelling checking package that creates a complex tree based structure
    for spelling corrections. It uses a data structure called `trie`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TSTLookup`: It is a simple and compact ternary tree based representation,
    capable of immediate data structure updates. It also uses the `trie` data structure.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`FSTLookup`: It is an automaton based representation. It is slower to build,
    but consumes far less memory at runtime.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`WFSTLookup`: It is weighted automaton representation and an alternative to
    `FSTLookup` for more fine-grained ranking.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can change the lookup implementations and check out how the suggestions
    change. Since the suggestions are based out of index, the larger the index is,
    the better the suggestions are.
  prefs: []
  type: TYPE_NORMAL
- en: Let us create a separate request handler in Solr for suggestions and add our
    suggest spellcheck as a component in it. The default configuration options for
    providing suggestions are incorporated in the request handler itself.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Next, we will need to create a separate field in our `schema.xml` which is indexed.
    We are copying the book name, author, and title into the field to provide suggestions
    on them.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Once this is done, restart the Apache Tomcat web server and build the spellcheck
    index using the following URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We created a separate request handler named suggest, so our URL has /`suggest`/
    instead of /`select`/.
  prefs: []
  type: TYPE_NORMAL
- en: Now let's go see the Suggester provided by the Solarium library for integration
    with PHP. First, we need to create a Suggester query from the Solarium client
    instead of the normal query.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Next we have to set the request handler to use. Remember, we created a separate
    request handler named **suggest** to provide suggestions. Also set the dictionary
    we want to use. We can create multiple dictionaries and change them at runtime
    using the following functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Now provide the query for the Suggester. Set the number of suggestions to return.
    Turn on the `collation` flag and the `onlyMorePopular` flag.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Execute the query using the `suggester()` function and then loop through the
    resultset to get all the terms and their suggestions. The original query can be
    displayed using the `getQuery()` function.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, get and display the collations using the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: This piece of code can be used to create an AJAX call and provide autocomplete
    suggestions as a JSON or XML string.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We started with an understanding of how spell check works on Solr. We went through
    the configuration of Solr for creating spell check index and saw different implementations
    of the spellchecker available with Solr. We understood some of the fine tuning
    options available in spell check in Solr. Next, we created a field in Solr for
    doing spell check on book name and author and configured Solr to provide spelling
    suggestions using this field. We saw a variation of spell check that can be used
    to provide spelling suggestions for autocompletion. We created a separate Solr
    index for autocomplete suggestions and saw PHP code that takes a three-character
    word and provides suggestions from the index.
  prefs: []
  type: TYPE_NORMAL
