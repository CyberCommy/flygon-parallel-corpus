- en: Chapter 7. Monitoring and Controlling Arduino with JavaFX
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章。使用JavaFX监控和控制Arduino
- en: '**Arduino** is an open source electronics tool based on a simple programmable
    microcontroller board that can be programmed using a free open source IDE. Alone
    or attached to a computer, it creates interactive devices that can sense by taking
    inputs from a variety of switches or sensors and can act by controlling a variety
    of lights, motors, and other outputs physical devices.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**Arduino**是一种基于简单可编程微控制器板的开源电子工具，可以使用免费开源IDE进行编程。单独或连接到计算机，它可以创建可以通过从各种开关或传感器获取输入来感知，并可以通过控制各种灯、电机和其他输出物理设备来执行的交互式设备。'
- en: As one of the first **Internet of Things** (**IoT**) devices, it was created
    in 2005\. It has been here from the very beginning of the IoT concept.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 作为第一批**物联网**（**IoT**）设备之一，它是在2005年创建的。它从物联网概念的最初阶段就存在。
- en: Arduino runs standalone or can communicate with software running on your computer
    (Java, JavaFX, Python, and so on) and the boards can be assembled by hand or purchased
    preassembled.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Arduino可以独立运行，也可以与计算机上运行的软件（Java、JavaFX、Python等）进行通信，板可以手工组装或购买预装的。
- en: It is a fact that Arduino simplifies the process of working with microcontrollers.
    Also, it more lucrative than other systems for teachers, students, and interested
    amateurs, as it is *inexpensive*—an Arduino board cost less than $50.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，Arduino简化了与微控制器的工作过程。对于教师、学生和有兴趣的业余爱好者来说，它比其他系统更具吸引力，因为它*价格低廉*——Arduino板的成本低于50美元。
- en: A simple, clear, and easy-to-use programming environment; an open source and
    extensible software; and open source and extensible hardware these features, among
    others, make Arduino support the do-it-yourself and do-it-with-others concepts
    that define the maker movement.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 简单、清晰、易于使用的编程环境；开源和可扩展的软件；以及开源和可扩展的硬件等功能，使Arduino支持自己动手和与他人一起动手的概念，这是制造运动的定义。
- en: This chapter will show you how to develop a desktop application using JavaFX
    along with an Arduino board in order to monitor data coming from a real world
    temperature sensor and report it on a chart, *How HOT blooded you really are!*
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将向您展示如何使用JavaFX开发桌面应用程序以及Arduino板，以监视来自真实世界温度传感器的数据，并在图表上报告它，“你到底有多热血！”
- en: 'In this chapter, you will:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将：
- en: Get familiar with Arduino boards and their components
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 熟悉Arduino板及其组件
- en: Install and prepare the Arduino software and environment, IDE, and drivers
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装和准备Arduino软件和环境、IDE和驱动程序
- en: Develop an Arduino blood meter sketch to control and monitor the circuit
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发Arduino血糖仪草图以控制和监视电路
- en: Read Arduino data into a JavaFX application using serial communication
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用串行通信将Arduino数据读入JavaFX应用程序
- en: Present data using the JavaFX Charting API
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用JavaFX图表API呈现数据
- en: What is an Arduino board?
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Arduino板是什么？
- en: The Arduino Uno, the most well-known Arduino board, is a microcontroller board
    based on the **ATmega328** datasheet ([http://www.atmel.com/dyn/resources/prod_documents/doc8161.pdf](http://www.atmel.com/dyn/resources/prod_documents/doc8161.pdf)),
    which is the brains of the board. It is about 3 x 2 inches in size. It has 14
    digital input/output pins, 6 analog input pins, and 32 kilobytes of flash memory.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Arduino Uno是最知名的Arduino板，是基于ATmega328数据表（[http://www.atmel.com/dyn/resources/prod_documents/doc8161.pdf](http://www.atmel.com/dyn/resources/prod_documents/doc8161.pdf)）的微控制器板，这是板的大脑。它大约3
    x 2英寸大小。它有14个数字输入/输出引脚，6个模拟输入引脚和32千字节的闪存内存。
- en: Each board contains a reset button. In addition, it includes a USB port so that,
    when it is connected to a computer, it becomes a source of power as well as a
    communication tool. If you are not connected to a computer, you can use an alternate
    power source such as an AC 9-to-12 V DC adapters that can be connected by plugging
    a 2.1 mm center-positive plug into the board's power jack, or a 9 V battery pack.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 每个板都有一个复位按钮。此外，它包括一个USB端口，因此当连接到计算机时，它成为电源和通信工具。如果未连接到计算机，可以使用备用电源，例如AC 9至12V
    DC适配器，可以通过将2.1毫米中心正极插头插入板的电源插孔，或9V电池包连接。
- en: The six digital pins with tilde symbol next to the number are the pins that
    allow for **Pulse Width Modulation** (**PWM)**, which is a technique for controlling
    power and simulating an analog signal on a digital input pin. One reason for using
    these pins might be to control the brightness of LED's.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 带有波浪符号的六个数字引脚旁边的引脚是允许**脉宽调制**（**PWM**）的引脚，这是一种用于控制电源并在数字输入引脚上模拟模拟信号的技术。使用这些引脚的原因之一可能是控制LED的亮度。
- en: The official specs for the Arduino Uno can be found on the [http://arduino.cc](http://arduino.cc)
    website at [http://arduino.cc/en/Main/ArduinoBoardUno](http://arduino.cc/en/Main/ArduinoBoardUno).
    Visit [http://www.arduino.cc/en/Main/Products](http://www.arduino.cc/en/Main/Products)
    to find information about other Arduino boards, such as **Mega**, **Due**, or
    **Yun**, as well as the next releases **Tre** and **Zero**.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Arduino Uno的官方规格可以在[http://arduino.cc](http://arduino.cc)网站的[http://arduino.cc/en/Main/ArduinoBoardUno](http://arduino.cc/en/Main/ArduinoBoardUno)上找到。访问[http://www.arduino.cc/en/Main/Products](http://www.arduino.cc/en/Main/Products)以获取有关其他Arduino板的信息，例如Mega，Due或Yun，以及下一个发布的Tre和Zero。
- en: 'The following images show the Arduino Uno R3 board:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图片显示了Arduino Uno R3板：
- en: '![What is an Arduino board?](img/B03998_07_01.jpg)![What is an Arduino board?](img/B03998_07_02.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![什么是Arduino板？](img/B03998_07_01.jpg)![什么是Arduino板？](img/B03998_07_02.jpg)'
- en: What can you do with it?
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 你可以用它做什么？
- en: Your Arduino board might be small, but don't let its size deceive you. It is
    powerful and has a lot of room for growth. It is especially powerful because it
    is built on an open hardware and open software platform. We won't be spending
    time talking about open source; in a nutshell, it means that the information about
    the hardware and software is freely available and easy to find.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 您的Arduino板可能很小，但不要让它的大小欺骗您。它功能强大，有很大的发展空间。它特别强大，因为它是建立在开放硬件和开放软件平台上的。我们不会花时间讨论开源；简而言之，这意味着有关硬件和软件的信息是免费提供的，易于找到。
- en: Arduino can be used to sense the environment by receiving input. It can also
    control output such as lights, motors, sensors, and more.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: You can program the microcontroller on the board using the open source Arduino
    programming language.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: Related websites and documentation
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: One of the great advantages of an open source and open hardware platform is
    that you can find information on the Internet.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: 'A great place to start looking for information about Arduino is the official
    page: [http://arduino.cc](http://arduino.cc) website at [http://arduino.cc/en/Guide/HomePage](http://arduino.cc/en/Guide/HomePage).
    As your skills grow, you will want to work on more advanced topics and you''ll
    find it helpful to know where to find answers.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: Another great site is [http://adafruit.com](http://adafruit.com). This site
    has tutorials, examples, helpful forums, and a store to buy the parts you need.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: Another interesting and fun application for kids is to combine **Lego Mindstorm**
    sensors and motors to the Arduino. I recommend the site [http://wayneandlayne.com](http://wayneandlayne.com),
    as it has been the inspiration and starting point for my integration of Lego and
    Arduino. If you are looking for parts and projects, this is a great site to visit.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: Setting up your Arduino
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If this is your first exposure to Arduino, I strongly suggest that you start
    with a kit rather than assembling all the individual components.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: Most of the activities in this chapter can be completed with a kit called the
    Arduino Starter Kit from arduino.cc, as shown in the following image. It includes
    an Arduino Uno R3 and other components to accomplish most of the prebundled projects.
    For a full description of the kit, visit [http://store.arduino.cc/product/K000007](http://store.arduino.cc/product/K000007).
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up your Arduino](img/B03998_07_03.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
- en: Arduino Starter kit (Kit including components, Board, and projects book)
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: Buying an Arduino
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: While an Arduino Uno costs around $25, you can purchase different kits, including
    the board—starting from a basic Budget Pack ($50) to the Starter Pack for Arduino
    ($65) from [http://adafruit.com](http://adafruit.com) or a Starter Kit ($90) from
    [http://arduino.cc](http://arduino.cc). These kits have the same components as
    the budget pack. But they also include some extras for more advanced tinkering.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: One nice advantage of the starter kit from [http://arduino.cc](http://arduino.cc)
    is that it includes a guidebook that features 15 different projects of varying
    skill levels.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: If you are an Amazon user, you can usually find the same kits available on their
    site, but the prices may vary.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: Most of the boards have core components in the same locations. So, more advanced
    boards have lengthened in size to accommodate additional components.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are some sites for purchasing components and some books: [http://arduino.cc](http://arduino.cc),
    [http://Adafruit.com](http://Adafruit.com), [http://makershed.com](http://makershed.com),
    [http://sparkfun.com](http://sparkfun.com), and [http://Amazon.com](http://Amazon.com).'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: Other components you will need
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In addition to the Arduino, you will also need a computer with Windows, Mac
    OS, or Linux, with the USB port to connect your computer to the board.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: For the blood meter project, you will need some of the components that already
    come in the Arduino Starter kit. Here is a short list of the components you should
    have handy.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: 'A computer with a USB port, a USB cable, a solderless breadboard, flexible
    wires, a TMP36 temperature sensor, three 220 Ohms resistors, and three LEDs (yellow,
    blue, and red), as shown in the following image:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: '![Other components you will need](img/B03998_07_04.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
- en: The blood meter project tools and material
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: The Arduino IDE
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In order to interact and program the Arduino microcontroller, we need to download
    and install the Arduino Integrated Development Environment.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: The Arduino software includes all the components you need to write code, a text
    editor, and compiler to convert it to machine language, and upload it to your
    board and run the code.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: Downloading the IDE
  id: totrans-49
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: At the time writing, the Arduino IDE version is 1.6.3 but you can get the latest
    version of the Arduino software from the link [http://www.arduino.cc/en/Main/Software](http://www.arduino.cc/en/Main/Software).
    Besides the Arduino version shown in the following screenshot, click on the preferred
    operating system link; in my case, I have chosen Mac OS X.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: From the donation page, either donate or just click on the **JUST DOWNLOAD**
    link to start downloading the IDE; in my case, I chose `arduino-1.6.4-macosx.zip`.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: After downloading, unzip the file and copy the `Arduino.app` file to the application
    folder on your Mac or link the Arduino executable to a location easy for you to
    access.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: Once you have the IDE downloaded, you still need to take care of a few more
    hardware issues before you can start programming.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: '![Downloading the IDE](img/B03998_07_05.jpg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
- en: Download the Arduino IDE 1.6.4
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: Installing the drivers
  id: totrans-56
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: First you need to connect the Arduino board to your computer using the USB cable.
    The green LED power indicator (labeled PWR or ON) should be on.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: Windows Setup
  id: totrans-58
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'Let''s set up the Arduino in Windows:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: Plug in your board and wait for Windows to begin its driver installation process.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Start Menu** and open up the **Control Panel**.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the **Control Panel**, navigate to **System and Security**. Next, click
    on **System**. Once the System window is open, select **Device Manager**.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Look under **Ports (COM & LPT)**. You should see an open port named `Arduino
    UNO (COMxx)`. If there is no **COM & LPT** section, look under **Other Devices**
    for **Unknown Device**.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on the **Arduino UNO (COMxx)** port and choose the **Update Driver
    Software** option.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next choose the **Browse my computer for Driver software** option.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, navigate to and select the driver file named `arduino.inf`, which is
    located in the `Drivers` folder of the Arduino software download (not the `FTDI
    USB Drivers` sub-directory).
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Windows will finish the driver installation from there.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you have Windows 8 and the driver is not well installed, try to disable the
    driver signature enforcement.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: Mac OS X and Linux setup
  id: totrans-70
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: For both the Mac OS X and Linux operating systems, no drivers have to be installed.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: For Mac OS X, when you connect the Arduino board, you should see it listed under
    `/dev/tty.usbmodemXXXX or /dev/tty.usbserialXXXX`.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: On Linux, when you connect the Arduino board, you should see it listed under
    `/dev/ttyACMX or /dev/ttyUSBX`.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: Exploring the IDE and sketches
  id: totrans-74
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Assuming your installation ends successfully, double-click on the Arduino application
    and you should see the following screen:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: '![Exploring the IDE and sketches](img/B03998_07_06.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
- en: The Arduino IDE, first run with an empty sketch
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: There are two important things you need to do now to properly connect and upload
    your sketches to the Arduino board. First, select your board by navigating to
    **Tools** | **Board**. Then select the serial port of the Arduino board by going
    to **Tools** | **Serial Port**.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: The final verification step is to run a `Hello world` for Arduino, and you can
    do so by opening the LED blink example sketch at **File** | **Examples** | **1.Basics**
    | **Blink**.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: Now, simply click on the **Upload** button in the environment. If the upload
    is successful, the message **Done uploading** will appear in the status bar.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: Wait for a few seconds and you will see the **RX** and **TX** LEDs on the board
    flashing.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: If you have any problems, check out the troubleshooting suggestions at [http://arduino.cc/en/Guide/Troubleshooting](http://arduino.cc/en/Guide/Troubleshooting).
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: Congratulations, your Arduino is up-and-running!
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: The blood meter project
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this project, we will use a temperature sensor to measure the warmth of your
    skin and then start to turn on (or off) the LEDs indicated by the temperature.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，我们将使用温度传感器来测量你的皮肤温度，然后根据温度来开启（或关闭）LED灯。
- en: First, we will tinker with our board and prepare the project with components
    described earlier in the *Other components you will need* section. Then, we will
    write the sketch to read sensor data and, based on the data of your skin temperature,
    we will turn LEDs on and off.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将调整我们的板子，并准备好使用*其他你需要的组件*部分中描述的组件进行项目。然后，我们将编写草图来读取传感器数据，并根据你的皮肤温度的数据，来开启和关闭LED灯。
- en: Finally, we will feed our JavaFX application with temperature sensor data and
    show the result with a chart API to indicate the level of your skin temperature.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将用温度传感器数据来供给我们的JavaFX应用，并使用图表API显示结果，以指示你的皮肤温度水平。
- en: Tinkering with the circuit
  id: totrans-88
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 调整电路
- en: 'Now, we are going to tinker with our blood meter circuit shown in the following
    diagram. Start by connecting the jumper wires between Arduino UNO and the breadboard.
    I have attached the TMP36 temperature sensor on the breadboard, so the rounded
    part of the sensor faces away from Arduino. The order of the pins is very important!
    Note that we have connected the left pin to the power, the right one is grounded,
    and the center pin that gives the voltage output is connected to the analog pin
    A0 on the board. The screenshot as follows:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将调整我们的血糖仪电路，如下图所示。首先，通过连接跳线线将Arduino UNO和面包板连接起来。我已经将TMP36温度传感器连接到了面包板上，所以传感器的圆形部分远离Arduino。引脚的顺序非常重要！请注意，我们已经将左边的引脚连接到电源，右边的引脚接地，中间输出电压的引脚连接到板子上的模拟引脚A0。如下图所示：
- en: '![Tinkering with the circuit](img/B03998_07_07.jpg)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![调整电路](img/B03998_07_07.jpg)'
- en: Circuit layout for Blood Meter example
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 血糖仪示例的电路布局
- en: Finally, I have attached the three LED lights and the resistors, and connected
    them with Arduino pins 4, ~3, and 2 of the digital PMW~ pins row.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我已经连接了三个LED灯和电阻，并将它们连接到数字PMW~引脚排的Arduino引脚4、~3和2。
- en: As usual, I have connected the breadboard + row to power (5V) and - row to the
    ground (GND).
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 像往常一样，我已经将面包板的+行连接到电源（5V），-行连接到地（GND）。
- en: Note
  id: totrans-94
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Remember to keep the board unplugged while you set up your components.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 记得在设置组件时保持板子未插电。
- en: The sketch
  id: totrans-96
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 草图
- en: 'After we have tinkered with our circuit and have configured everything, we
    need to program our microcontroller. This is where the sketch will do its magic:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们调整了电路并配置了一切之后，我们需要对微控制器进行编程。这就是草图将发挥作用的地方：
- en: '[PRE0]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: How it works
  id: totrans-99
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 工作原理
- en: If you are reading the comments of each line, you will understand the code.
    Without going into the details, the following are the main points of the sketch.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你阅读每行的注释，你会理解代码。不深入细节，以下是草图的主要要点。
- en: 'Every Arduino sketch has two main primary methods: `setup()` and `loop()`.
    The first method is for initialization of the pins as input or output, opening
    the serial ports, setting their speed, and so on. The second method executes the
    task repeatedly inside the microcontroller.'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 每个Arduino草图都有两个主要的方法：`setup()`和`loop()`。第一个方法用于初始化引脚为输入或输出，打开串行端口，设置它们的速度等。第二个方法在微控制器内部重复执行任务。
- en: 'At the beginning, we have a pair of useful constants: one references analog
    input and the other holds the baseline temperature. For every *2 degrees* above
    this baseline, a LED will turn on.'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 一开始，我们有一对有用的常量：一个引用模拟输入，另一个保存基准温度。对于每*2度*高于这个基准温度，一个LED将打开。
- en: Inside the `setup()` method, we initialize the serial port to the desired speed
    of 9,600 bits per second, and we use a `for` loop to set some pins as directions
    (output pins) and turn them off.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在`setup()`方法中，我们将串行端口初始化为每秒9,600位的速度，并使用`for`循环将一些引脚设置为方向（输出引脚）并关闭它们。
- en: Inside the `loop()` method, we start reading the temperature sensor as voltage
    values between 0 and 1,023, then send the sensor values to the serial port using
    `Serial.print()` so that any connected device (for example, our computer) can
    read them. These analog readings measure the temperature of the room or of your
    skin if you touch the sensor.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在`loop()`方法中，我们开始读取温度传感器的电压数值，范围在0到1,023之间，然后使用`Serial.print()`将传感器数值发送到串行端口，以便任何连接的设备（例如我们的计算机）可以读取。这些模拟读数可以测量房间的温度或者如果你触摸传感器的话，也可以测量你的皮肤温度。
- en: 'We need to convert the analog sensor readings into voltage values using the
    following equation:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要使用以下方程将模拟传感器读数转换为电压值：
- en: '[PRE1]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'From the datasheet, we use the sensor specifications to convert the voltage
    into temperature using this equation:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 从数据表中，我们使用传感器规格将电压转换为温度的方程：
- en: '[PRE2]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: With the real temperature, you can set up an `if else` statement to light the
    LEDs. Using the baseline temperature as a starting point, you will turn on one
    LED for every 2 degrees of temperature increase above that baseline.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 根据实际温度，你可以设置一个`if else`语句来点亮LED灯。使用基准温度作为起点，每增加2度温度，你将打开一个LED灯。
- en: You are going to look for a range of values as you move through the temperature
    scale.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在温度刻度上移动时，你会寻找一系列数值。
- en: The **Analog-to-Digital Converter** (**ADC**) reads really fast (in terms of
    microseconds), and a delay of 1 ms at the end of the `loop()` function is advised.
    But given that this is going to be sent to the serial port, a 100 ms delay is
    finally set.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '**模拟到数字转换器**（**ADC**）读取速度非常快（以微秒为单位），建议在`loop()`函数的末尾设置1毫秒的延迟。但考虑到这将被发送到串行端口，最终设置了100毫秒的延迟。'
- en: Testing, verifying, and uploading the sketch into the Arduino
  id: totrans-112
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 测试、验证并将草图上传到Arduino
- en: 'With the code uploaded to the Arduino, click on the serial monitor icon as
    illustrated in the following screenshot:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 将代码上传到Arduino后，点击串行监视器图标，如下图所示：
- en: '![Testing, verifying, and uploading the sketch into the Arduino](img/B03998_07_08.jpg)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![测试、验证并将草图上传到Arduino](img/B03998_07_08.jpg)'
- en: Arduino IDE toolbar icons
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: Arduino IDE工具栏图标
- en: 'You should see a stream of values coming out, formatted like this:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到一系列数值以如下格式输出：
- en: '[PRE3]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Now try touching your finger around the sensor while it is plugged into the
    breadboard and see what happens to the values in the serial monitor.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 现在尝试在传感器插入面包板时用手指触摸传感器周围，看看串行监视器中的数值会发生什么变化。
- en: Make a note of the temperature when the sensor is left in the open air. Close
    the serial monitor and change the `baselineTemp` constant to what you have observed
    earlier. Upload the code again and try holding the sensor again; as the temperature
    increases, you should see LEDs turn on one by one.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在传感器放在空气中时记下温度。关闭串行监视器并将 `baselineTemp` 常量更改为您之前观察到的值。再次上传代码并尝试再次握住传感器；随着温度的升高，您应该看到LED逐个打开。
- en: Congratulations, hot stuff!
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜，热门！
- en: Reading data from serial ports
  id: totrans-121
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从串行端口读取数据
- en: There is no standard way to read serial ports in Java, as it is a hardware-specific
    task that breaks the Java multiplatform concept. So, we need a third party library
    to do the job and it should be written in Java for integration with our application.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在Java中没有标准的方法来读取串行端口，因为这是一个硬件特定的任务，违反了Java的多平台概念。因此，我们需要一个第三方库来完成这项任务，并且它应该是用Java编写的，以便与我们的应用程序集成。
- en: Arduino IDE used the first library for serial communication, called **RXTX**.
    Originally from Trent Jarvi and distributed under LGPL v2.1+ Linking Over Controlled
    Interface license, it was distributed with Arduino IDE until the 1.5.5 beta version
    to communicate with the board. However, it was very slow and it is now deprecated.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: Arduino IDE使用了第一个串行通信库，称为 **RXTX**。最初来自Trent Jarvi，并在LGPL v2.1+ Linking Over
    Controlled Interface许可下分发，直到1.5.5 beta版本与板通信。然而，它非常慢，现在已经不推荐使用。
- en: The new **Java Simple Serial Connector** (**jSSC**) library is developed by
    Alexey Sokolov and licensed under GNU Lesser GPL. Since the 1.5.6 beta version,
    the Arduino IDE uses the new library for board communication, as it is faster
    than its predecessor.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 新的 **Java Simple Serial Connector** (**jSSC**) 库由Alexey Sokolov开发，根据GNU Lesser
    GPL许可。自1.5.6 beta版本以来，Arduino IDE使用新库进行板通信，因为它比之前的版本更快。
- en: 'Another big advantage of this library is that it is distributed as a single
    `jssc.jar` file, which includes all the native interfaces for all platforms to
    reduce the pain of local installation for each platform and operating system.
    It adds them to the `classpath` at runtime, as shown in the following screenshot:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 该库的另一个重要优势是，它作为单个 `jssc.jar` 文件进行分发，其中包括所有平台的本地接口，以减少每个平台和操作系统的本地安装的痛苦。它会在运行时将它们添加到
    `classpath` 中，如下截图所示：
- en: '![Reading data from serial ports](img/B03998_07_09.jpg)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![从串行端口读取数据](img/B03998_07_09.jpg)'
- en: jSSC 2.8.0 native libraries
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: jSSC 2.8.0 本地库
- en: You can download the latest version from [https://github.com/scream3r/java-simple-serial-connector/releases](https://github.com/scream3r/java-simple-serial-connector/releases).
    At the time of writing, the jSSC version is 2.8.0.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从[https://github.com/scream3r/java-simple-serial-connector/releases](https://github.com/scream3r/java-simple-serial-connector/releases)下载最新版本。在撰写本文时，jSSC版本为2.8.0。
- en: The JavaFX blood meter monitoring application
  id: totrans-129
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: JavaFX血糖监测应用程序
- en: We will design a JavaFX 8 application that takes the readings from the temperature
    sensor and displays the values in a line chart. We will also show what happens
    to the LEDs on the board with a set of a shapes simulating board LEDs. For the
    sake of clarity, we'll use two classes one for the serial readings and one for
    the JavaFX UI and main application `BloodMeterFX` file, including chart APIs.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将设计一个JavaFX 8应用程序，该应用程序从温度传感器中获取读数，并在折线图中显示数值。我们还将展示模拟板LED的一组形状的变化。为了清晰起见，我们将使用两个类，一个用于串行读数，另一个用于JavaFX
    UI和主应用程序 `BloodMeterFX` 文件，包括图表API。
- en: We'll bind these classes (Serial and BloodMeterFX) using a StringProperty containing
    the last line read from the serial port. By listening to changes in this property
    in the JavaFX thread, we'll know when there's a new reading to add to the chart.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用一个包含从串行端口读取的最后一行的 StringProperty 来绑定这些类（Serial 和 BloodMeterFX）。通过在JavaFX线程中监听此属性的更改，我们将知道何时有新的读数要添加到图表中。
- en: The full project code can be downloaded from the *Packt Publishing* website.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的项目代码可以从 *Packt Publishing* 网站下载。
- en: Serial communication in Java
  id: totrans-133
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Java中的串行通信
- en: 'Let''s first begin by explaining the `Serial.java` class. This class code is
    mostly taken from *JavaFX 8 Introduction By Example, Apress*, with changes in
    the core reading function, as shown in the following code snippets:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先解释 `Serial.java` 类。这个类的代码大部分来自 *JavaFX 8 Introduction By Example, Apress*，但核心读取函数有所改变，如下面的代码片段所示：
- en: You should include the `jSSC.jar` file into your classpath, either by adding
    it to `<JAVA_HOME>/jre/lib/ext` on Linux or Windows (or `/Library/Java/Extensions`
    on the Mac), or preferably by adding it to your project libraries, as in the previous
    screenshot, if you intended to distribute your application.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该将 `jSSC.jar` 文件包含到您的类路径中，可以通过将其添加到 Linux 或 Windows 的 `<JAVA_HOME>/jre/lib/ext`（或
    Mac 上的 `/Library/Java/Extensions`）中，或者更好地将其添加到您的项目库中，如前面的截图所示，如果您打算分发您的应用程序。
- en: 'In order to be able to read the serial port, we need the following imported
    jSSC classes:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 为了能够读取串口，我们需要导入以下 jSSC 类：
- en: '[PRE4]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: For dynamically reading the port, if you don't know the exact port name to set
    through the constructor of this class we have a set of port names to help you
    select the proper port that the Arduino board can be connected to.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 为了动态读取端口，如果您不知道通过这个类的构造函数设置的确切端口名称，我们有一组端口名称可帮助您选择Arduino板可以连接到的适当端口。
- en: '[PRE5]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The `connect()` method looks for a valid serial port if it is not set with an
    Arduino board connected to it. If it is found, it's opened and a listener is added.
    This listener is responsible for getting the input readings from the serial port
    every time a line is returned from the Arduino output. The `stringProperty` is
    set with that line. We used a `StringBuilder` to store the chars and extract the
    line content whenever `'\r\n'` is found. We have used bulk operations over collections
    provided by lambda expressions here to make it simple to look up the port list
    and return the valid port, depending on the operating system.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '`connect()`方法会查找一个有效的串行端口，如果没有连接到Arduino板，则会设置一个。如果找到了有效的串行端口，就会打开它并添加一个监听器。这个监听器负责每次从Arduino输出返回一行时获取输入读数。`stringProperty`会被设置为这一行。我们使用`StringBuilder`来存储字符，并在找到`''\r\n''`时提取行内容。我们在这里使用了lambda表达式提供的集合批量操作，以便简单地查找端口列表并根据操作系统返回有效的端口。'
- en: 'Every line found is set to the `line` variable through the `set()` method in
    order to make the necessary changes to the chart via a registered change listener
    event to `line` variable, which is exposed through the `getLine()` method. The
    code is as follows:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 通过`set()`方法将找到的每一行设置为`line`变量，以便通过注册的change监听器事件对`line`变量进行必要的更改，这通过`getLine()`方法暴露出来。代码如下：
- en: '[PRE6]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Finally, the `disconnect()` method is responsible for removing a listener from
    the port and closing the port connection to free up resources used by the application.
    The code is as follows:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，`disconnect()`方法负责从端口中移除监听器并关闭端口连接，以释放应用程序使用的资源。代码如下：
- en: '[PRE7]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Application logic and charting API
  id: totrans-145
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 应用程序逻辑和图表API
- en: The main component of our application is the `LineChart< Number, Number>` chart
    class API, which will be used to plot your blood temperature level on the Y-axis
    versus time on the X-axis.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应用程序的主要组件是`LineChart<Number, Number>`图表类API，它将用于在Y轴上绘制您的血温水平，而在X轴上绘制时间。
- en: Charts with two axes (such as line, bar, and area charts) have been available
    since JavaFX 2, and they are of type `Node` class, which makes it easy to add
    them to `Scene` like any other nodes.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 自JavaFX 2以来，具有两个轴（如线条、条形和区域图表）的图表已经可用，并且它们是`Node`类的类型，这使得将它们添加到`Scene`中像其他节点一样变得容易。
- en: In our application, we will add the following `createBloodChart()` method, which
    is responsible for creating and preparing the chart and returning it to be added
    to the main application scene.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的应用程序中，我们将添加以下`createBloodChart()`方法，它负责创建和准备图表，并将其返回以添加到主应用程序场景中。
- en: 'At the beginning of the application, we have instance variables: a `Serial`
    object to handle Arduino connectivity and readings; `listener` to be registered
    with the `Serial` line object; `BooleanProperty` to keep track of the connection
    status; and three float properties that keep track of all sensor data its actual
    value, its voltage conversion, and finally the voltage converted to temperature
    in degree Celsius, respectively. The code is as follows:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在应用程序的开始，我们有实例变量：一个`Serial`对象来处理Arduino的连接和读数；`listener`用于注册到`Serial`线对象；`BooleanProperty`用于跟踪连接状态；以及三个浮点属性，分别用于跟踪所有传感器数据的实际值、电压转换，最后是将电压转换为摄氏度温度。代码如下：
- en: '[PRE8]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: We'll add `LineChart` to plot the temperature level from the temperature sensor,
    with one `Series` that take pairs of numbers to be plotted against each axis;
    these are `NumberAxis` instances. `XYChart.Data` is added to the series data as
    a pair of *X* and *Y* values for every point to plot the readings.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将添加`LineChart`来绘制温度传感器的温度水平，其中有一个`Series`，它接受一对数字来绘制在每个轴上；这些是`NumberAxis`实例。`XYChart.Data`被添加到系列数据中，作为每个点的*X*和*Y*值对来绘制读数。
- en: 'Whenever the size of `Series` is greater than 40 points, the first values will
    be removed for memory efficiency. The code is as follows:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 每当`Series`的大小大于40个点时，为了内存效率，将删除前面的值。代码如下：
- en: '[PRE9]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The most interesting part here is the change listener `listener = (ov, t, t1)
    -> {}` we have created using lambda expressions, which will be registered to the
    `Serial` class `line` object we have described earlier. By doing so, we are able
    to change chart data once any input from Arduino is detected.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 这里最有趣的部分是使用lambda表达式创建的change监听器`listener = (ov, t, t1) -> {}`，它将被注册到我们之前描述的`Serial`类`line`对象上。通过这样做，我们能够在检测到Arduino的任何输入时改变图表数据。
- en: For that, we set the *x* coordinate value as the time when we add the reading
    in milliseconds (on the chart, it will be formatted as *HH:MM:SS*) and the *y*
    coordinate value is a float measurement of the level of temperature reported by
    the Arduino in the String `t1`.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，我们将*X*坐标值设置为添加读数的毫秒时间（在图表上，它将被格式化为*HH:MM:SS*），*Y*坐标值是Arduino报告的温度级别的浮点测量值在字符串`t1`中。
- en: Note
  id: totrans-156
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The main use of `Platform.runLater()` is placing the task of filling the series
    data with the incoming Arduino input in the JavaFX thread, but also it gives the
    required time to the `Scene` graph to render the chart, skipping values if they
    are added too fast.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '`Platform.runLater()`的主要用途是将填充系列数据的任务放在JavaFX线程中，但它也为`Scene`图形提供了所需的时间来渲染图表，如果值添加得太快，则会跳过值。'
- en: 'I have added four shapes of type `Circle`, which will be used to simulate the
    circuit LEDs on and off based on the temperature level, once any changes are done
    to `FloatProperty` `bloodTemp` via the change listener. The code is as follows:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 我添加了四个`Circle`类型的形状，它们将用于根据温度水平模拟电路LED的开和关，一旦通过change监听器对`FloatProperty` `bloodTemp`进行了任何更改。代码如下：
- en: '[PRE10]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Finally, the main UI is created by the `loadMainUI()` method, which is responsible
    for creating the whole UI and binding all the required variables to the UI controls,
    in order to interact dynamically with the events coming from the Arduino input.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，主UI是由`loadMainUI()`方法创建的，它负责创建整个UI并将所有必需的变量绑定到UI控件，以便动态地与来自Arduino输入的事件交互。
- en: 'Once the scene root (`BorderPane`) object is prepared and set up by `loadMainUI()`,
    we create the scene and add it to stage in order to run our application as the
    following:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Finally, the overridden `stop()` method inherited from the `Application` class
    will take care of any resource freeing by closing the `Serial` ports connection
    and removing `listener` from line object. The code is as follows:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Running the application
  id: totrans-165
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: With everything in place— the JavaFX project with earlier described classes
    and the `jSSC.jar` library added to it—compile and run your application while
    your Arduino board is connected to your laptop/PC. If everything is okay, you
    will see the following screenshot that shows temperature values on the chart against
    time values, which will be based on your room temperature.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
- en: Congratulations, you are now monitoring the Arduino input and you can interact
    with Arduino through the `jSSC.jar` library to control it.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
- en: '![Running the application](img/B03998_07_10.jpg)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
- en: Initial blood meter application readings, with temperature of 24.71 degree
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
- en: 'Try to hold the sensor with your fingers and monitor the readings on the chart.
    In my case, it reached 30.57 degrees. Also, watch the indicator levels on the
    toolbar and the LEDs on the board. You should see something similar to the following
    screenshot:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
- en: '![Running the application](img/B03998_07_11.jpg)'
  id: totrans-171
  prefs: []
  type: TYPE_IMG
- en: Blood meter application readings, with a temperature of 30.57 degrees
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-173
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned what can be achieved by combining Arduino and JavaFX.
    You began by learning about Arduino, its different boards, main specifications,
    where to buy it and its components. Then, we discussed more sites for projects
    inspirations.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
- en: Next you saw how to download and set up the Arduino IDE to communicate with
    Arduino. After learning about loading examples in the IDE, you got the chance
    to try it for yourself by building a simple circuit with an Arduino Uno and a
    temperature sensor to create a sketch and read the temperature levels in the IDE
    Serial Monitor.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
- en: Then you learned how to read serial port data from your computer using the Java
    Simple Serial Connector library.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
- en: You learned how to use the JavaFX Line Chart API to monitor and display the
    Arduino readings. Then, you saw an example in which a JavaFX chart is plotted
    with a series of data from the serial port, using an Arduino board to measure
    the level of blood temperature with a temperature sensor.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will learn about touchless interaction with your computer—without
    any input devices such as a keyboard, mouse, or even touch devices—using only
    your hand gestures to control your JavaFX application.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
