- en: Chapter 7. Monitoring and Controlling Arduino with JavaFX
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Arduino** is an open source electronics tool based on a simple programmable
    microcontroller board that can be programmed using a free open source IDE. Alone
    or attached to a computer, it creates interactive devices that can sense by taking
    inputs from a variety of switches or sensors and can act by controlling a variety
    of lights, motors, and other outputs physical devices.'
  prefs: []
  type: TYPE_NORMAL
- en: As one of the first **Internet of Things** (**IoT**) devices, it was created
    in 2005\. It has been here from the very beginning of the IoT concept.
  prefs: []
  type: TYPE_NORMAL
- en: Arduino runs standalone or can communicate with software running on your computer
    (Java, JavaFX, Python, and so on) and the boards can be assembled by hand or purchased
    preassembled.
  prefs: []
  type: TYPE_NORMAL
- en: It is a fact that Arduino simplifies the process of working with microcontrollers.
    Also, it more lucrative than other systems for teachers, students, and interested
    amateurs, as it is *inexpensive*—an Arduino board cost less than $50.
  prefs: []
  type: TYPE_NORMAL
- en: A simple, clear, and easy-to-use programming environment; an open source and
    extensible software; and open source and extensible hardware these features, among
    others, make Arduino support the do-it-yourself and do-it-with-others concepts
    that define the maker movement.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter will show you how to develop a desktop application using JavaFX
    along with an Arduino board in order to monitor data coming from a real world
    temperature sensor and report it on a chart, *How HOT blooded you really are!*
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, you will:'
  prefs: []
  type: TYPE_NORMAL
- en: Get familiar with Arduino boards and their components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Install and prepare the Arduino software and environment, IDE, and drivers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Develop an Arduino blood meter sketch to control and monitor the circuit
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Read Arduino data into a JavaFX application using serial communication
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Present data using the JavaFX Charting API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is an Arduino board?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Arduino Uno, the most well-known Arduino board, is a microcontroller board
    based on the **ATmega328** datasheet ([http://www.atmel.com/dyn/resources/prod_documents/doc8161.pdf](http://www.atmel.com/dyn/resources/prod_documents/doc8161.pdf)),
    which is the brains of the board. It is about 3 x 2 inches in size. It has 14
    digital input/output pins, 6 analog input pins, and 32 kilobytes of flash memory.
  prefs: []
  type: TYPE_NORMAL
- en: Each board contains a reset button. In addition, it includes a USB port so that,
    when it is connected to a computer, it becomes a source of power as well as a
    communication tool. If you are not connected to a computer, you can use an alternate
    power source such as an AC 9-to-12 V DC adapters that can be connected by plugging
    a 2.1 mm center-positive plug into the board's power jack, or a 9 V battery pack.
  prefs: []
  type: TYPE_NORMAL
- en: The six digital pins with tilde symbol next to the number are the pins that
    allow for **Pulse Width Modulation** (**PWM)**, which is a technique for controlling
    power and simulating an analog signal on a digital input pin. One reason for using
    these pins might be to control the brightness of LED's.
  prefs: []
  type: TYPE_NORMAL
- en: The official specs for the Arduino Uno can be found on the [http://arduino.cc](http://arduino.cc)
    website at [http://arduino.cc/en/Main/ArduinoBoardUno](http://arduino.cc/en/Main/ArduinoBoardUno).
    Visit [http://www.arduino.cc/en/Main/Products](http://www.arduino.cc/en/Main/Products)
    to find information about other Arduino boards, such as **Mega**, **Due**, or
    **Yun**, as well as the next releases **Tre** and **Zero**.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following images show the Arduino Uno R3 board:'
  prefs: []
  type: TYPE_NORMAL
- en: '![What is an Arduino board?](img/B03998_07_01.jpg)![What is an Arduino board?](img/B03998_07_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: What can you do with it?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Your Arduino board might be small, but don't let its size deceive you. It is
    powerful and has a lot of room for growth. It is especially powerful because it
    is built on an open hardware and open software platform. We won't be spending
    time talking about open source; in a nutshell, it means that the information about
    the hardware and software is freely available and easy to find.
  prefs: []
  type: TYPE_NORMAL
- en: Arduino can be used to sense the environment by receiving input. It can also
    control output such as lights, motors, sensors, and more.
  prefs: []
  type: TYPE_NORMAL
- en: You can program the microcontroller on the board using the open source Arduino
    programming language.
  prefs: []
  type: TYPE_NORMAL
- en: Related websites and documentation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: One of the great advantages of an open source and open hardware platform is
    that you can find information on the Internet.
  prefs: []
  type: TYPE_NORMAL
- en: 'A great place to start looking for information about Arduino is the official
    page: [http://arduino.cc](http://arduino.cc) website at [http://arduino.cc/en/Guide/HomePage](http://arduino.cc/en/Guide/HomePage).
    As your skills grow, you will want to work on more advanced topics and you''ll
    find it helpful to know where to find answers.'
  prefs: []
  type: TYPE_NORMAL
- en: Another great site is [http://adafruit.com](http://adafruit.com). This site
    has tutorials, examples, helpful forums, and a store to buy the parts you need.
  prefs: []
  type: TYPE_NORMAL
- en: Another interesting and fun application for kids is to combine **Lego Mindstorm**
    sensors and motors to the Arduino. I recommend the site [http://wayneandlayne.com](http://wayneandlayne.com),
    as it has been the inspiration and starting point for my integration of Lego and
    Arduino. If you are looking for parts and projects, this is a great site to visit.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up your Arduino
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If this is your first exposure to Arduino, I strongly suggest that you start
    with a kit rather than assembling all the individual components.
  prefs: []
  type: TYPE_NORMAL
- en: Most of the activities in this chapter can be completed with a kit called the
    Arduino Starter Kit from arduino.cc, as shown in the following image. It includes
    an Arduino Uno R3 and other components to accomplish most of the prebundled projects.
    For a full description of the kit, visit [http://store.arduino.cc/product/K000007](http://store.arduino.cc/product/K000007).
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up your Arduino](img/B03998_07_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Arduino Starter kit (Kit including components, Board, and projects book)
  prefs: []
  type: TYPE_NORMAL
- en: Buying an Arduino
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: While an Arduino Uno costs around $25, you can purchase different kits, including
    the board—starting from a basic Budget Pack ($50) to the Starter Pack for Arduino
    ($65) from [http://adafruit.com](http://adafruit.com) or a Starter Kit ($90) from
    [http://arduino.cc](http://arduino.cc). These kits have the same components as
    the budget pack. But they also include some extras for more advanced tinkering.
  prefs: []
  type: TYPE_NORMAL
- en: One nice advantage of the starter kit from [http://arduino.cc](http://arduino.cc)
    is that it includes a guidebook that features 15 different projects of varying
    skill levels.
  prefs: []
  type: TYPE_NORMAL
- en: If you are an Amazon user, you can usually find the same kits available on their
    site, but the prices may vary.
  prefs: []
  type: TYPE_NORMAL
- en: Most of the boards have core components in the same locations. So, more advanced
    boards have lengthened in size to accommodate additional components.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are some sites for purchasing components and some books: [http://arduino.cc](http://arduino.cc),
    [http://Adafruit.com](http://Adafruit.com), [http://makershed.com](http://makershed.com),
    [http://sparkfun.com](http://sparkfun.com), and [http://Amazon.com](http://Amazon.com).'
  prefs: []
  type: TYPE_NORMAL
- en: Other components you will need
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In addition to the Arduino, you will also need a computer with Windows, Mac
    OS, or Linux, with the USB port to connect your computer to the board.
  prefs: []
  type: TYPE_NORMAL
- en: For the blood meter project, you will need some of the components that already
    come in the Arduino Starter kit. Here is a short list of the components you should
    have handy.
  prefs: []
  type: TYPE_NORMAL
- en: 'A computer with a USB port, a USB cable, a solderless breadboard, flexible
    wires, a TMP36 temperature sensor, three 220 Ohms resistors, and three LEDs (yellow,
    blue, and red), as shown in the following image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Other components you will need](img/B03998_07_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The blood meter project tools and material
  prefs: []
  type: TYPE_NORMAL
- en: The Arduino IDE
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In order to interact and program the Arduino microcontroller, we need to download
    and install the Arduino Integrated Development Environment.
  prefs: []
  type: TYPE_NORMAL
- en: The Arduino software includes all the components you need to write code, a text
    editor, and compiler to convert it to machine language, and upload it to your
    board and run the code.
  prefs: []
  type: TYPE_NORMAL
- en: Downloading the IDE
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: At the time writing, the Arduino IDE version is 1.6.3 but you can get the latest
    version of the Arduino software from the link [http://www.arduino.cc/en/Main/Software](http://www.arduino.cc/en/Main/Software).
    Besides the Arduino version shown in the following screenshot, click on the preferred
    operating system link; in my case, I have chosen Mac OS X.
  prefs: []
  type: TYPE_NORMAL
- en: From the donation page, either donate or just click on the **JUST DOWNLOAD**
    link to start downloading the IDE; in my case, I chose `arduino-1.6.4-macosx.zip`.
  prefs: []
  type: TYPE_NORMAL
- en: After downloading, unzip the file and copy the `Arduino.app` file to the application
    folder on your Mac or link the Arduino executable to a location easy for you to
    access.
  prefs: []
  type: TYPE_NORMAL
- en: Once you have the IDE downloaded, you still need to take care of a few more
    hardware issues before you can start programming.
  prefs: []
  type: TYPE_NORMAL
- en: '![Downloading the IDE](img/B03998_07_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Download the Arduino IDE 1.6.4
  prefs: []
  type: TYPE_NORMAL
- en: Installing the drivers
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: First you need to connect the Arduino board to your computer using the USB cable.
    The green LED power indicator (labeled PWR or ON) should be on.
  prefs: []
  type: TYPE_NORMAL
- en: Windows Setup
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'Let''s set up the Arduino in Windows:'
  prefs: []
  type: TYPE_NORMAL
- en: Plug in your board and wait for Windows to begin its driver installation process.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Start Menu** and open up the **Control Panel**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the **Control Panel**, navigate to **System and Security**. Next, click
    on **System**. Once the System window is open, select **Device Manager**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Look under **Ports (COM & LPT)**. You should see an open port named `Arduino
    UNO (COMxx)`. If there is no **COM & LPT** section, look under **Other Devices**
    for **Unknown Device**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on the **Arduino UNO (COMxx)** port and choose the **Update Driver
    Software** option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next choose the **Browse my computer for Driver software** option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, navigate to and select the driver file named `arduino.inf`, which is
    located in the `Drivers` folder of the Arduino software download (not the `FTDI
    USB Drivers` sub-directory).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Windows will finish the driver installation from there.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you have Windows 8 and the driver is not well installed, try to disable the
    driver signature enforcement.
  prefs: []
  type: TYPE_NORMAL
- en: Mac OS X and Linux setup
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: For both the Mac OS X and Linux operating systems, no drivers have to be installed.
  prefs: []
  type: TYPE_NORMAL
- en: For Mac OS X, when you connect the Arduino board, you should see it listed under
    `/dev/tty.usbmodemXXXX or /dev/tty.usbserialXXXX`.
  prefs: []
  type: TYPE_NORMAL
- en: On Linux, when you connect the Arduino board, you should see it listed under
    `/dev/ttyACMX or /dev/ttyUSBX`.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring the IDE and sketches
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Assuming your installation ends successfully, double-click on the Arduino application
    and you should see the following screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Exploring the IDE and sketches](img/B03998_07_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The Arduino IDE, first run with an empty sketch
  prefs: []
  type: TYPE_NORMAL
- en: There are two important things you need to do now to properly connect and upload
    your sketches to the Arduino board. First, select your board by navigating to
    **Tools** | **Board**. Then select the serial port of the Arduino board by going
    to **Tools** | **Serial Port**.
  prefs: []
  type: TYPE_NORMAL
- en: The final verification step is to run a `Hello world` for Arduino, and you can
    do so by opening the LED blink example sketch at **File** | **Examples** | **1.Basics**
    | **Blink**.
  prefs: []
  type: TYPE_NORMAL
- en: Now, simply click on the **Upload** button in the environment. If the upload
    is successful, the message **Done uploading** will appear in the status bar.
  prefs: []
  type: TYPE_NORMAL
- en: Wait for a few seconds and you will see the **RX** and **TX** LEDs on the board
    flashing.
  prefs: []
  type: TYPE_NORMAL
- en: If you have any problems, check out the troubleshooting suggestions at [http://arduino.cc/en/Guide/Troubleshooting](http://arduino.cc/en/Guide/Troubleshooting).
  prefs: []
  type: TYPE_NORMAL
- en: Congratulations, your Arduino is up-and-running!
  prefs: []
  type: TYPE_NORMAL
- en: The blood meter project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this project, we will use a temperature sensor to measure the warmth of your
    skin and then start to turn on (or off) the LEDs indicated by the temperature.
  prefs: []
  type: TYPE_NORMAL
- en: First, we will tinker with our board and prepare the project with components
    described earlier in the *Other components you will need* section. Then, we will
    write the sketch to read sensor data and, based on the data of your skin temperature,
    we will turn LEDs on and off.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we will feed our JavaFX application with temperature sensor data and
    show the result with a chart API to indicate the level of your skin temperature.
  prefs: []
  type: TYPE_NORMAL
- en: Tinkering with the circuit
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now, we are going to tinker with our blood meter circuit shown in the following
    diagram. Start by connecting the jumper wires between Arduino UNO and the breadboard.
    I have attached the TMP36 temperature sensor on the breadboard, so the rounded
    part of the sensor faces away from Arduino. The order of the pins is very important!
    Note that we have connected the left pin to the power, the right one is grounded,
    and the center pin that gives the voltage output is connected to the analog pin
    A0 on the board. The screenshot as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Tinkering with the circuit](img/B03998_07_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Circuit layout for Blood Meter example
  prefs: []
  type: TYPE_NORMAL
- en: Finally, I have attached the three LED lights and the resistors, and connected
    them with Arduino pins 4, ~3, and 2 of the digital PMW~ pins row.
  prefs: []
  type: TYPE_NORMAL
- en: As usual, I have connected the breadboard + row to power (5V) and - row to the
    ground (GND).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Remember to keep the board unplugged while you set up your components.
  prefs: []
  type: TYPE_NORMAL
- en: The sketch
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'After we have tinkered with our circuit and have configured everything, we
    need to program our microcontroller. This is where the sketch will do its magic:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: How it works
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If you are reading the comments of each line, you will understand the code.
    Without going into the details, the following are the main points of the sketch.
  prefs: []
  type: TYPE_NORMAL
- en: 'Every Arduino sketch has two main primary methods: `setup()` and `loop()`.
    The first method is for initialization of the pins as input or output, opening
    the serial ports, setting their speed, and so on. The second method executes the
    task repeatedly inside the microcontroller.'
  prefs: []
  type: TYPE_NORMAL
- en: 'At the beginning, we have a pair of useful constants: one references analog
    input and the other holds the baseline temperature. For every *2 degrees* above
    this baseline, a LED will turn on.'
  prefs: []
  type: TYPE_NORMAL
- en: Inside the `setup()` method, we initialize the serial port to the desired speed
    of 9,600 bits per second, and we use a `for` loop to set some pins as directions
    (output pins) and turn them off.
  prefs: []
  type: TYPE_NORMAL
- en: Inside the `loop()` method, we start reading the temperature sensor as voltage
    values between 0 and 1,023, then send the sensor values to the serial port using
    `Serial.print()` so that any connected device (for example, our computer) can
    read them. These analog readings measure the temperature of the room or of your
    skin if you touch the sensor.
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to convert the analog sensor readings into voltage values using the
    following equation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'From the datasheet, we use the sensor specifications to convert the voltage
    into temperature using this equation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: With the real temperature, you can set up an `if else` statement to light the
    LEDs. Using the baseline temperature as a starting point, you will turn on one
    LED for every 2 degrees of temperature increase above that baseline.
  prefs: []
  type: TYPE_NORMAL
- en: You are going to look for a range of values as you move through the temperature
    scale.
  prefs: []
  type: TYPE_NORMAL
- en: The **Analog-to-Digital Converter** (**ADC**) reads really fast (in terms of
    microseconds), and a delay of 1 ms at the end of the `loop()` function is advised.
    But given that this is going to be sent to the serial port, a 100 ms delay is
    finally set.
  prefs: []
  type: TYPE_NORMAL
- en: Testing, verifying, and uploading the sketch into the Arduino
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'With the code uploaded to the Arduino, click on the serial monitor icon as
    illustrated in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Testing, verifying, and uploading the sketch into the Arduino](img/B03998_07_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Arduino IDE toolbar icons
  prefs: []
  type: TYPE_NORMAL
- en: 'You should see a stream of values coming out, formatted like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Now try touching your finger around the sensor while it is plugged into the
    breadboard and see what happens to the values in the serial monitor.
  prefs: []
  type: TYPE_NORMAL
- en: Make a note of the temperature when the sensor is left in the open air. Close
    the serial monitor and change the `baselineTemp` constant to what you have observed
    earlier. Upload the code again and try holding the sensor again; as the temperature
    increases, you should see LEDs turn on one by one.
  prefs: []
  type: TYPE_NORMAL
- en: Congratulations, hot stuff!
  prefs: []
  type: TYPE_NORMAL
- en: Reading data from serial ports
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There is no standard way to read serial ports in Java, as it is a hardware-specific
    task that breaks the Java multiplatform concept. So, we need a third party library
    to do the job and it should be written in Java for integration with our application.
  prefs: []
  type: TYPE_NORMAL
- en: Arduino IDE used the first library for serial communication, called **RXTX**.
    Originally from Trent Jarvi and distributed under LGPL v2.1+ Linking Over Controlled
    Interface license, it was distributed with Arduino IDE until the 1.5.5 beta version
    to communicate with the board. However, it was very slow and it is now deprecated.
  prefs: []
  type: TYPE_NORMAL
- en: The new **Java Simple Serial Connector** (**jSSC**) library is developed by
    Alexey Sokolov and licensed under GNU Lesser GPL. Since the 1.5.6 beta version,
    the Arduino IDE uses the new library for board communication, as it is faster
    than its predecessor.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another big advantage of this library is that it is distributed as a single
    `jssc.jar` file, which includes all the native interfaces for all platforms to
    reduce the pain of local installation for each platform and operating system.
    It adds them to the `classpath` at runtime, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Reading data from serial ports](img/B03998_07_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: jSSC 2.8.0 native libraries
  prefs: []
  type: TYPE_NORMAL
- en: You can download the latest version from [https://github.com/scream3r/java-simple-serial-connector/releases](https://github.com/scream3r/java-simple-serial-connector/releases).
    At the time of writing, the jSSC version is 2.8.0.
  prefs: []
  type: TYPE_NORMAL
- en: The JavaFX blood meter monitoring application
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We will design a JavaFX 8 application that takes the readings from the temperature
    sensor and displays the values in a line chart. We will also show what happens
    to the LEDs on the board with a set of a shapes simulating board LEDs. For the
    sake of clarity, we'll use two classes one for the serial readings and one for
    the JavaFX UI and main application `BloodMeterFX` file, including chart APIs.
  prefs: []
  type: TYPE_NORMAL
- en: We'll bind these classes (Serial and BloodMeterFX) using a StringProperty containing
    the last line read from the serial port. By listening to changes in this property
    in the JavaFX thread, we'll know when there's a new reading to add to the chart.
  prefs: []
  type: TYPE_NORMAL
- en: The full project code can be downloaded from the *Packt Publishing* website.
  prefs: []
  type: TYPE_NORMAL
- en: Serial communication in Java
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let''s first begin by explaining the `Serial.java` class. This class code is
    mostly taken from *JavaFX 8 Introduction By Example, Apress*, with changes in
    the core reading function, as shown in the following code snippets:'
  prefs: []
  type: TYPE_NORMAL
- en: You should include the `jSSC.jar` file into your classpath, either by adding
    it to `<JAVA_HOME>/jre/lib/ext` on Linux or Windows (or `/Library/Java/Extensions`
    on the Mac), or preferably by adding it to your project libraries, as in the previous
    screenshot, if you intended to distribute your application.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to be able to read the serial port, we need the following imported
    jSSC classes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: For dynamically reading the port, if you don't know the exact port name to set
    through the constructor of this class we have a set of port names to help you
    select the proper port that the Arduino board can be connected to.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The `connect()` method looks for a valid serial port if it is not set with an
    Arduino board connected to it. If it is found, it's opened and a listener is added.
    This listener is responsible for getting the input readings from the serial port
    every time a line is returned from the Arduino output. The `stringProperty` is
    set with that line. We used a `StringBuilder` to store the chars and extract the
    line content whenever `'\r\n'` is found. We have used bulk operations over collections
    provided by lambda expressions here to make it simple to look up the port list
    and return the valid port, depending on the operating system.
  prefs: []
  type: TYPE_NORMAL
- en: 'Every line found is set to the `line` variable through the `set()` method in
    order to make the necessary changes to the chart via a registered change listener
    event to `line` variable, which is exposed through the `getLine()` method. The
    code is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, the `disconnect()` method is responsible for removing a listener from
    the port and closing the port connection to free up resources used by the application.
    The code is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Application logic and charting API
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The main component of our application is the `LineChart< Number, Number>` chart
    class API, which will be used to plot your blood temperature level on the Y-axis
    versus time on the X-axis.
  prefs: []
  type: TYPE_NORMAL
- en: Charts with two axes (such as line, bar, and area charts) have been available
    since JavaFX 2, and they are of type `Node` class, which makes it easy to add
    them to `Scene` like any other nodes.
  prefs: []
  type: TYPE_NORMAL
- en: In our application, we will add the following `createBloodChart()` method, which
    is responsible for creating and preparing the chart and returning it to be added
    to the main application scene.
  prefs: []
  type: TYPE_NORMAL
- en: 'At the beginning of the application, we have instance variables: a `Serial`
    object to handle Arduino connectivity and readings; `listener` to be registered
    with the `Serial` line object; `BooleanProperty` to keep track of the connection
    status; and three float properties that keep track of all sensor data its actual
    value, its voltage conversion, and finally the voltage converted to temperature
    in degree Celsius, respectively. The code is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: We'll add `LineChart` to plot the temperature level from the temperature sensor,
    with one `Series` that take pairs of numbers to be plotted against each axis;
    these are `NumberAxis` instances. `XYChart.Data` is added to the series data as
    a pair of *X* and *Y* values for every point to plot the readings.
  prefs: []
  type: TYPE_NORMAL
- en: 'Whenever the size of `Series` is greater than 40 points, the first values will
    be removed for memory efficiency. The code is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The most interesting part here is the change listener `listener = (ov, t, t1)
    -> {}` we have created using lambda expressions, which will be registered to the
    `Serial` class `line` object we have described earlier. By doing so, we are able
    to change chart data once any input from Arduino is detected.
  prefs: []
  type: TYPE_NORMAL
- en: For that, we set the *x* coordinate value as the time when we add the reading
    in milliseconds (on the chart, it will be formatted as *HH:MM:SS*) and the *y*
    coordinate value is a float measurement of the level of temperature reported by
    the Arduino in the String `t1`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The main use of `Platform.runLater()` is placing the task of filling the series
    data with the incoming Arduino input in the JavaFX thread, but also it gives the
    required time to the `Scene` graph to render the chart, skipping values if they
    are added too fast.
  prefs: []
  type: TYPE_NORMAL
- en: 'I have added four shapes of type `Circle`, which will be used to simulate the
    circuit LEDs on and off based on the temperature level, once any changes are done
    to `FloatProperty` `bloodTemp` via the change listener. The code is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Finally, the main UI is created by the `loadMainUI()` method, which is responsible
    for creating the whole UI and binding all the required variables to the UI controls,
    in order to interact dynamically with the events coming from the Arduino input.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the scene root (`BorderPane`) object is prepared and set up by `loadMainUI()`,
    we create the scene and add it to stage in order to run our application as the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, the overridden `stop()` method inherited from the `Application` class
    will take care of any resource freeing by closing the `Serial` ports connection
    and removing `listener` from line object. The code is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Running the application
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: With everything in place— the JavaFX project with earlier described classes
    and the `jSSC.jar` library added to it—compile and run your application while
    your Arduino board is connected to your laptop/PC. If everything is okay, you
    will see the following screenshot that shows temperature values on the chart against
    time values, which will be based on your room temperature.
  prefs: []
  type: TYPE_NORMAL
- en: Congratulations, you are now monitoring the Arduino input and you can interact
    with Arduino through the `jSSC.jar` library to control it.
  prefs: []
  type: TYPE_NORMAL
- en: '![Running the application](img/B03998_07_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Initial blood meter application readings, with temperature of 24.71 degree
  prefs: []
  type: TYPE_NORMAL
- en: 'Try to hold the sensor with your fingers and monitor the readings on the chart.
    In my case, it reached 30.57 degrees. Also, watch the indicator levels on the
    toolbar and the LEDs on the board. You should see something similar to the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Running the application](img/B03998_07_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Blood meter application readings, with a temperature of 30.57 degrees
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned what can be achieved by combining Arduino and JavaFX.
    You began by learning about Arduino, its different boards, main specifications,
    where to buy it and its components. Then, we discussed more sites for projects
    inspirations.
  prefs: []
  type: TYPE_NORMAL
- en: Next you saw how to download and set up the Arduino IDE to communicate with
    Arduino. After learning about loading examples in the IDE, you got the chance
    to try it for yourself by building a simple circuit with an Arduino Uno and a
    temperature sensor to create a sketch and read the temperature levels in the IDE
    Serial Monitor.
  prefs: []
  type: TYPE_NORMAL
- en: Then you learned how to read serial port data from your computer using the Java
    Simple Serial Connector library.
  prefs: []
  type: TYPE_NORMAL
- en: You learned how to use the JavaFX Line Chart API to monitor and display the
    Arduino readings. Then, you saw an example in which a JavaFX chart is plotted
    with a series of data from the serial port, using an Arduino board to measure
    the level of blood temperature with a temperature sensor.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will learn about touchless interaction with your computer—without
    any input devices such as a keyboard, mouse, or even touch devices—using only
    your hand gestures to control your JavaFX application.
  prefs: []
  type: TYPE_NORMAL
