- en: Using Hooks for Routing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we learned how to request resources with Hooks. We
    first implemented requesting resources using State/Reducer and Effect Hooks. Then,
    we learned about the `axios` and `react-request-hook` libraries.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we are going to create multiple pages and implement routing in
    our app. Routing is important in almost every application. To implement routing, we
    are going to learn how to use use the Navi library, a Hook-based navigation system. Finally,
    we are also going to learn about dynamic links, and how to access routing information
    using Hooks.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating multiple pages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing routing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using routing Hooks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A fairly recent version of Node.js should already be installed (v11.12.0 or
    higher). The `npm` package manager for Node.js also needs to be installed.
  prefs: []
  type: TYPE_NORMAL
- en: The code for this chapter can be found on the GitHub repository: [https://github.com/PacktPublishing/Learn-React-Hooks/tree/master/Chapter07](https://github.com/PacktPublishing/Learn-React-Hooks/tree/master/Chapter07)[.](https://github.com/PacktPublishing/Learn-React-Hooks/tree/master/Chapter07)
  prefs: []
  type: TYPE_NORMAL
- en: 'Check out the following video to see the code in action:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://bit.ly/2Mm9yoC](http://bit.ly/2Mm9yoC)'
  prefs: []
  type: TYPE_NORMAL
- en: Please note that it is highly recommended that you write the code on your own.
    Do not simply run the code examples that have been provided. It is important that
    you write the code yourself in order to be able to learn and understand properly.
    However, if you run into any issues, you can always refer to the code example.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's get started with the chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Creating multiple pages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At the moment, our blog application is a so-called single-page application.
    However, most larger apps consist of multiple pages. In a blog app, we at least
    want to have a separate page for each blog post.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we can set up routing, we need to create the various pages that we want
    to render. In our blog app, we are going to define the following pages:'
  prefs: []
  type: TYPE_NORMAL
- en: A home page, which will display a list of all posts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A post page, which will display a single post
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All pages will show a `HeaderBar`, which renders the `Header`, `UserBar`, `ChangeTheme`,
    and `CreatePost` components. We are now going to start by creating a component
    for the `HeaderBar`. Afterward, we are going to implement the page components.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the HeaderBar component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First of all, we are going to refactor some contents of our `App` component
    into a `HeaderBar` component. The `HeaderBar` component will contain everything
    that we want to display on every page: the `Header`, `UserBar`, `ChangeTheme`,
    and `CreatePost` components.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start creating the `HeaderBar` component:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new folder: `src/pages/`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new file, `src/pages/HeaderBar.js`, import `React` (with the `useContext` Hook),
    and define the component there. It will accept the `setTheme` function as prop:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, cut the following code from the `src/App.js` component, and insert it
    between the `<div>` tags of the `HeaderBar` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Also, cut the following import statements (and adjust the paths) from `src/App.js`
    and insert them at the beginning of the `src/pages/HeaderBar.js` file, after the
    `import React from ''react''` statement:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Additionally, import the `ThemeContext` and the `StateContext`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, define two Context Hooks for the `theme` and `state`, and pull the `user`
    variable out of the `state` object in `src/pages/HeaderBar.js`, as we need it
    for a conditional check to determine whether we should render the `CreatePost`
    component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we import the `HeaderBar` component in `src/App.js`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we render the `HeaderBar` component in `src/App.js`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Now, we have a separate component for the `HeaderBar`, which will be shown on
    all pages. Next, we move on to creating the `HomePage` component.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the HomePage component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, we are going to create the `HomePage` component from the `PostList` component and
    the Resource Hook that is concerned with the posts. Again, we are going to refactor
    `src/App.js`, in order to create a new component.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start creating the `HomePage` component:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new file, `src/pages/HomePage.js`, import `React` with the `useEffect`
    and `useContext` Hooks, and define the component there. We also define a Context
    Hook and pull out the `state` object and `dispatch` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, cut the following import statements (and adjust the paths) from `src/App.js`,
    and add them after the `import React from ''react''` statement in `src/pages/HomePage.js`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, cut the following Hook definitions from `src/App.js`, and insert them
    before the `return` statement of the `HomePage` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, cut the following rendered code from `src/App.js`, and insert it in between
    the `<div>` tags of `src/pages/HomePage.js`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, import the `HomePage` component in `src/App.js`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, render the `HomePage` component below the `<hr />` tag:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Now, we have successfully refactored our current code into a `HomePage` component.
    Next, we move on to creating the `PostPage` component.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the PostPage component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We are now going to define a new page component, where we will only fetch a
    single post from our API and display it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start creating the `PostPage` component now:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new `src/pages/PostPage.js` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Import `React`, the `useEffect` and  `useResource` Hooks and the `Post` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, define the `PostPage` component, which is going to accept the post `id`
    as prop:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we define a Resource Hook that will fetch the corresponding `post` object.
    We pass the `id` as dependency to the Effect Hook so that our resource re-fetches
    when the `id` changes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we render the `Post` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: We now also have a separate page for single posts.
  prefs: []
  type: TYPE_NORMAL
- en: Testing out the PostPage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To test out the new page, we are going to replace the `HomePage` component
    in `src/App.js` with the `PostPage` component, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Import the `PostPage` component in `src/App.js`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, replace the `HomePage` component with the `PostPage` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: As we can see, now only one post, the React Hooks post, gets rendered.
  prefs: []
  type: TYPE_NORMAL
- en: Example code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The example code can be found in the `Chapter07/chapter7_1` folder.
  prefs: []
  type: TYPE_NORMAL
- en: Just run `npm install` in order to install all dependencies and `npm start` to
    start the application, and then visit `http://localhost:3000` in your browser
    (if it did not open automatically).
  prefs: []
  type: TYPE_NORMAL
- en: Implementing routing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We are going to use the Navi library for routing. Navi supports React Suspense,
    Hooks, and error boundary APIs of React natively, which makes it the perfect fit
    to implement routing through the use of Hooks. To implement routing, we are first
    going to define routes from the pages that we defined in the previous section.
    Finally, we are going to define links from the main page to the corresponding
    post pages, and from these pages back to the main page.
  prefs: []
  type: TYPE_NORMAL
- en: Toward the end of this chapter, we are going to extend our routing functionality
    by implementing routing Hooks.
  prefs: []
  type: TYPE_NORMAL
- en: Defining routes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The first step when implementing routing is to install the `navi` and `react-navi`
    libraries. Then, we define the routes. Follow the given steps to do so:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we have to install the libraries using `npm`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, in `src/App.js`, we import the `Router` and `View` components and the
    `mount` and `route` functions from the Navi library:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Make sure that the `HomePage` component is imported:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we can define the `routes` object using the `mount` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'In this function, we define our routes, starting with the main route:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we define the route for a single post, here we use URL parameters (`:id`),
    and a function to dynamically create the `view`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we wrap our rendered code with the `<Router>` component, and replace
    the `<PostPage>` component with the `<View>` component in order to dynamically
    render the current page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, if we go to `http://localhost:3000`, we can see a list of all posts, and
    when we go to `http://localhost:3000/view/react-hooks`, we can see a single post:
    the React Hooks post.'
  prefs: []
  type: TYPE_NORMAL
- en: Defining links
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, we are going to define links from each post to the page of the corresponding
    single post, and then back to the main page from the post page. The links will
    be used to access the various routes that have been defined in our app. First,
    we are going to define links from the home page to the single post pages. Next,
    we are going to define links from the single post pages back to the main page.
  prefs: []
  type: TYPE_NORMAL
- en: Defining links to the posts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We start by shortening the post `content` in the list, and defining links from
    the `PostList` to the corresponding post pages. To do so, we have to define static
    links from the `PostList` on the home page to the specific post pages.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s define those links now:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit `src/post/Post.js`, and import the `Link` component from `react-navi`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we are going to add two new props to the `Post` component: `id` and `short`,
    which will be set to `true` when we want to display the shortened version of the
    post. Later, we are going to set `short` to `true` in the `PostList` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we are going to add some logic to trim the post `content` to `30` characters
    when listing it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we can display the `processedContent` value instead of the `content` value,
    and a `Link` to view the full post:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we set the `short` prop to `true` within the `PostList` component.
    Edit `src/post/PostList.js`, and adjust the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we can see that each post on the main page is trimmed to `30` characters,
    and has a link to the corresponding single post page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/d6e741b2-1bd6-4741-b5f0-31c0c881f2e4.png)'
  prefs: []
  type: TYPE_IMG
- en: Displaying a link in the PostList
  prefs: []
  type: TYPE_NORMAL
- en: As we can see, routing is quite simple. Now, each post has a link to its corresponding
    full post page.
  prefs: []
  type: TYPE_NORMAL
- en: Defining the links to the main page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, we just need a way to get back to the main page from a single post page.
    We are going to repeat a similar process to what we have done previously. Let''s
    define the links back to the main page now:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit `src/pages/PostPage.js`, and import the `Link` component there:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, insert a new link back to the main page, before displaying the post:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'After going to a page, we can now use the Go back link in order to return to
    the main page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/c38ba098-2f3c-40ed-a7dd-4416ba9e824c.png)'
  prefs: []
  type: TYPE_IMG
- en: Displaying a link on the single post page
  prefs: []
  type: TYPE_NORMAL
- en: Now, our app also provides a way back to the home page.
  prefs: []
  type: TYPE_NORMAL
- en: Adjusting the CREATE_POST action
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Previously, we dispatched a `CREATE_POST` action when a new post gets created.
    However, this action does not contain the post `id`, which means that links to
    newly created posts will not work.
  prefs: []
  type: TYPE_NORMAL
- en: 'We are now going to adjust the code to pass the post `id` to the `CREATE_POST`
    action:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit `src/post/CreatePost.js`, and import the `useEffect` Hook:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, adjust the existing Resource Hook to pull out the `post` object after
    the creation of the post finishes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we can create a new Effect Hook after the Resource Hook, and dispatch
    the `CREATE_POST` action once the result of the create post request becomes available:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we remove the call to the `dispatch` function in the `handleCreate` handler
    function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we edit `src/reducers.js`, and adjust the `postsReducer` as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Now, links to the newly created posts work fine, because the `id` value is added
    to the inserted `post` object.
  prefs: []
  type: TYPE_NORMAL
- en: Example code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The example code can be found in the `Chapter07/chapter7_2` folder.
  prefs: []
  type: TYPE_NORMAL
- en: Just run `npm install` in order to install all dependencies and `npm start` to
    start the application, and then visit `http://localhost:3000` in your browser
    (if it did not open automatically).
  prefs: []
  type: TYPE_NORMAL
- en: Using routing Hooks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After implementing basic routing using `navi` and `react-navi`, we are now going
    to implement more advanced use cases using routing Hooks, which are provided by
    `react-navi`. Routing Hooks can be used to make routing more dynamic. For example,
    by allowing navigation to different routes from other Hooks. Furthermore, we can
    use Hooks to access all route-related information within a component.
  prefs: []
  type: TYPE_NORMAL
- en: Overview of Navi's Hooks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First, we will have a look at three of the Hooks that are provided by the Navi
    library:'
  prefs: []
  type: TYPE_NORMAL
- en: The `useNavigation` Hook
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `useCurrentRoute` Hook
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `useLoadingRoute` Hook
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The useNavigation Hook
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `useNavigation` Hook has the following signature:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'It returns the `navigation` object of Navi, which contains the following functions
    to manage the navigation state of the app:'
  prefs: []
  type: TYPE_NORMAL
- en: '`extractState()`: Returns the current value of `window.history.state`; this
    is useful when dealing with server-side rendering.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`getCurrentValue()` : Returns the `Route` object that corresponds to the current
    URL.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`getRoute()`: Returns a promise to the fully loaded `Route` object that corresponds
    to the current URL. The promise will only resolve once the `Route` object is fully
    loaded.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`goBack()`: Goes back one page; this is similar to how pressing the back button
    of the browser works.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`navigate(url, options)`: Navigates to the provided URL using the provided
    options (`body`, `headers`, `method`, `replace`, and `state`). More information
    about the options can be found on the official Navi documentation: [https://frontarm.com/navi/en/reference/navigation/#navigationnavigate.](https://frontarm.com/navi/en/reference/navigation/#navigationnavigate)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The useCurrentRoute Hook
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `useCurrentRoute` Hook has the following signature:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'It returns the latest non-busy route, which contains all information that Navi
    knows about the current page:'
  prefs: []
  type: TYPE_NORMAL
- en: '`data`: Contains merged values from all `data` chunks.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`title`: Contains the `title` value that should be set on `document.title`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`url`: Contains information about the current route, such as the `href`, `query`,
    and `hash`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`views`: Contains an array of components or elements that will be rendered
    in the route''s view.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The useLoadingRoute Hook
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `useLoadingRoute` Hook has the following signature:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: It returns the `Route` object for the page that is currently being fetched.
    If no page is currently being fetched, it outputs `undefined`. The object looks
    the same as the `Route` object of the `useCurrentRoute` Hook.
  prefs: []
  type: TYPE_NORMAL
- en: Programmatic navigation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: First, we are going to use the `useNavigation` Hook to implement programmatic
    navigation. We want to automatically redirect to the corresponding post page after
    creating a new post.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s implement programmatic navigation in the `CreatePost` component using
    Hooks:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit `src/post/CreatePost.js`, and import the `useNavigation` Hook there:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, define a Navigation Hook after the existing Resource Hook:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we adjust the Effect Hook to call `navigation.navigate()`, once the
    result of the create post request becomes available:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: If we create a new `post` object now, we can see that after pressing the Create button,
    we automatically get redirected to the page of the corresponding post. We can
    now move on to accessing route information using Hooks.
  prefs: []
  type: TYPE_NORMAL
- en: Accessing route information
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Next, we are going to use the `useCurrentRoute` Hook to access information about
    the current route/URL. We are going to use this Hook to implement a footer, which
    will display the `href` value of the current route.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s get started implementing the footer now:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we create a new component for the footer. Create a new `src/pages/FooterBar.js`
    file, and import `React`, as well as the `useCurrentRoute` Hook from `react-navi`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we define a new `FooterBar` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'We use the `useCurrentRoute` Hook, and pull out the `url` object to be able
    to show the current `href` value in the footer:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we render a link to the current `href` value in the footer:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, when we, for example, open a post page, we can see the `href` value of
    the current post in the footer:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/8b2bb30b-e3e0-4e31-9874-f6bac3ad65fd.png)'
  prefs: []
  type: TYPE_IMG
- en: Displaying a footer with the current href value
  prefs: []
  type: TYPE_NORMAL
- en: As we can see, our footer works properly—it always shows the `href` value of
    the current page.
  prefs: []
  type: TYPE_NORMAL
- en: Example code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The example code can be found in the `Chapter07/chapter7_3` folder.
  prefs: []
  type: TYPE_NORMAL
- en: Just run `npm install` in order to install all dependencies and `npm start` to
    start the application, and then visit `http://localhost:3000` in your browser
    (if it did not open automatically).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we first defined two pages for our blog: the home page and
    a page for single posts. We also created a component for the `HeaderBar`. Afterward,
    we implemented routing by defining routes, links to the single posts, and links
    back to the main page. Finally, we used routing Hooks to implement dynamic navigation
    when creating a new post, and implemented a footer that shows the current URL.'
  prefs: []
  type: TYPE_NORMAL
- en: Routing is very important, and is used in almost every application. We now know
    how to define separate pages and how to link between them. Furthermore, we learned
    how to dynamically navigate between pages using Hooks. We also learned how to
    access routing information with Hooks for more advanced use cases.
  prefs: []
  type: TYPE_NORMAL
- en: There are many more things that the Navi library can do. However, this book
    focuses on Hooks, so most features of Navi are out of scope. For example, we can
    fetch data using Navi, implement error pages (for example, a 404 page), lazy loading
    and compose routes. Feel free to read up on those features in the official documentation
    of Navi.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the next chapter, we are going to learn about the various Hooks that are
    provided by the React community: for input handling, for responsive design, to
    implement undo/redo, and to implement various data structures and React life cycle
    methods using Hooks. We are also going to learn where to find more Hooks provided
    by the community.'
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to recap what we have learned in this chapter, try answering the following
    questions:'
  prefs: []
  type: TYPE_NORMAL
- en: Why do we need to define separate pages?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do we define routes using the Navi library?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do we define routes with URL parameters?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How are static links defined with Navi?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How can we implement dynamic navigation?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which Hook is used to access the route information of the current route?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which Hook is used to access the route information of the currently loading
    route?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you are interested in more information about the concepts that we have learned
    in this chapter, take a look at the official documentation of the Navi library: [https://frontarm.com/navi/en/](https://frontarm.com/navi/en/).
  prefs: []
  type: TYPE_NORMAL
