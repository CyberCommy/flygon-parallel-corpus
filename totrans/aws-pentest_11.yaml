- en: '*Chapter 9*: Real-Life Pentesting with Metasploit and More!'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Up until now, we have looked at how various services are set up and how we can
    modify and exploit them – as well as having discussed simple solutions for how
    we can recommend fixing them. Now we are going to be moving forward quite significantly
    and will apply our knowledge of pentesting. We will use AWS and tools such as
    Metasploit to help us leverage exploiting vulnerabilities within AWS environments.
    This chapter will take on a real-life approach to how you would pentest AWS environments
    in a real-world setting.
  prefs: []
  type: TYPE_NORMAL
- en: We will do some basic setups of new systems to mimic common vulnerabilities,
    as well as looking at some of the images we set up in previous chapters. We will
    run through real-life pentesting scenarios that you could expect to come across,
    as well as some fun exercises that will teach you some new tactics and techniques.
    We will be finishing the chapter by exploring some AWS modules within Metasploit
    that allow us to enumerate sensitive information that can lead to further attacking
    and privilege escalation.
  prefs: []
  type: TYPE_NORMAL
- en: Think of this chapter as a "technical" capstone of all the chapters before it.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we''ll cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Real pentesting with Metasploit
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The pentest pregame
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Targeting WordPress for exploitation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Targeting vulnerable service applications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploring AWS Metasploit modules
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following are the technical requirements for this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Metasploit
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Nmap
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: WordPress
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: EC2 instances
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: VPC
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Amazon Lightsail: [https://aws.amazon.com/lightsail/](https://aws.amazon.com/lightsail/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Phishing tool: [https://github.com/xHak9x/SocialPhish](https://github.com/xHak9x/SocialPhish)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Check out the following video to see the Code in Action: [https://bit.ly/3kPcjNL](https://bit.ly/3kPcjNL)'
  prefs: []
  type: TYPE_NORMAL
- en: Real pentesting with Metasploit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have talked quite a bit about **Metasploit** throughout this book, and have
    even used a few modules within Metasploit to help us assess various exercises
    throughout this book – however, these examples have only been skimming the surface
    of what Metasploit really is and the potential it has with pentesting and ethical
    hacking in the cloud.
  prefs: []
  type: TYPE_NORMAL
- en: Metasploit has mixed reviews from some of us in the pentesting community because
    it helps automate a lot of our processes and can be thought of as being cheap
    or a script kiddie when relying on automated tools to help you pentest. However,
    coming from someone who pentests for a living, Metasploit provides a great advantage
    and automates a lot of the boring and easy stuff, as well as allowing you to focus
    on more detailed portions of an assessment that need a more manual approach. We
    will see, throughout this chapter, how to leverage Metasploit while also using
    other various techniques to help us exploit services and systems.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: Never rely on one tool to get the pentest job done. As pentesters, it is our
    job to provide the assessment of a real-life attacker effectively and efficiently
    while also assessing the overall security posture of the target organization.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we are going to take our knowledge from all the previous chapters
    and apply it to our cloud environment using real-world scenarios that you may
    encounter during an actual pentest.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will take two approaches:'
  prefs: []
  type: TYPE_NORMAL
- en: White-box/functional testing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Having no knowledge with black-box testing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is functional testing?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before we get moving, I do want to make a quick mention of what functional testing
    is. It is pretty much the same thing as a white-box test; only the main goal is
    to ensure that applications and services in the environment work securely and
    adequately, while pentesting allows you to look for more issues and discover when
    something is not functioning correctly or securely.
  prefs: []
  type: TYPE_NORMAL
- en: Functional testing plays a critical role in cloud pentesting simply because
    cloud pentesting requires a different approach. With security being very well
    developed on the services provider side, most of the issues found in cloud environments
    derive from user implementation. We have seen firsthand, in chapters such as [*Chapter
    4*](B15630_04_Final_ASB_ePub.xhtml#_idTextAnchor171), *Exploiting S3 Buckets*,
    what overly permissive policies can lead to and how that allows attackers to exploit
    services such as S3\. We are essentially applying that same methodology by already
    having credentials to start assessing our environment.
  prefs: []
  type: TYPE_NORMAL
- en: Having credentials and looking for exciting resources and broken policies allows
    us, the pentesters, to find issues before the bad guys. It's vital to ensure that
    when pentesting AWS, the pentest team has some credentialed access that will allow
    them to perform functional testing on the AWS environment efficiently.
  prefs: []
  type: TYPE_NORMAL
- en: We will look at more functional testing near the end of this chapter, in the
    *Exploring AWS Metasploit modules* section.
  prefs: []
  type: TYPE_NORMAL
- en: In the dark with black-box testing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: While we did mention **black-box testing** back in [*Chapter 2*](B15630_02_Final_ASB_ePub.xhtml#_idTextAnchor056),
    *Pentesting and Ethical Hacking*, I want to make a brief mention of it again here
    since we will be applying it to the scenarios within this chapter. For the sake
    of the scenarios in this chapter, black-box testing for the cloud means that we
    don't have any details about the target or its environment. However, we will at
    least know the DNS or IP of the target host – this allows us to save time and
    find the target.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: Black-box testing can sometimes be a waste of time because much of the testing
    is spent enumerating information due to the pentest team not having any prior
    knowledge of the assessment.
  prefs: []
  type: TYPE_NORMAL
- en: What this means is that the pentest team will need to go out on their own and
    find their way into the applications and into the AWS cloud environment. This
    entails phishing and brute-forcing to find credentials for web applications and
    AWS environments, as well as any other types of social engineering. We can use
    the tactics learned throughout this book, and in this chapter, to help us gain
    access to the deliberately vulnerable systems throughout this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have an understanding of the types of testing that we will be performing,
    let's get moving toward our scenario-based testing. Before we can get started,
    we need to make sure that a couple of things are in order and that we have prepared
    ourselves before testing commences.
  prefs: []
  type: TYPE_NORMAL
- en: The pentest pregame
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we can get started, we need to ensure that our environment is prepared
    for pentesting. This means we need to ensure that our AWS network is set up and
    that any tools that we use are updated. Aside from our own environment for this
    book, it's always important to remember to check that your setup is configured
    correctly before a pentest. If your setup is not prepared correctly, you're likely
    to run into issues that will inhibit you from conducting a successful pentest;
    or, at the very least, you will have some setbacks during the pentest that will
    take time away from pentesting.
  prefs: []
  type: TYPE_NORMAL
- en: For this section, let's make sure that we are on the correct **Virtual Private
    Cloud** (**VPC**) and that our targets are configured. This ensures that we have
    direct access to machines on their private network, and we shouldn't face any
    issues with attempting to access the internal side of the AWS environment. We
    also will need to ensure that Metasploit is up to date and has the latest modules
    installed so that we can use them to exploit our targets.
  prefs: []
  type: TYPE_NORMAL
- en: Renaming our VPC for clarity
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's go ahead and move forward with renaming our VPC. Remember, the VPC acts
    as the virtual private cloud network where the hosts we are working with are.
    We have been working with the same VPC for setting up hosts; however, we never
    renamed it because it didn't pertain to our goals and tasks.
  prefs: []
  type: TYPE_NORMAL
- en: 'To rename your VPC, log in to the AWS console and follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Search the term `VPC` in the main AWS console:![Figure 9.1 – Searching VPC
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_9.01_B15630.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.1 – Searching VPC
  prefs: []
  type: TYPE_NORMAL
- en: Click on **VPCs**:![Figure 9.2 – Selecting the VPCs option
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_9.02_B15630.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.2 – Selecting the VPCs option
  prefs: []
  type: TYPE_NORMAL
- en: 'You will see a list of VPCs. Select the VPC with your Kali instance in it and
    rename it. We have renamed ours **Pentest Playground**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.3 – Renaming our VPC'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.03_B15630.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.3 – Renaming our VPC
  prefs: []
  type: TYPE_NORMAL
- en: And that's it! We have now renamed our VPC, which will make things a little
    bit easier moving forward since we can automatically place any target hosts within
    that VPC. Next, let's move on to updating our main tool, Metasploit.
  prefs: []
  type: TYPE_NORMAL
- en: Updating Metasploit
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now we need to do one last thing before moving forward with our pentest – we
    need to go ahead and update Metasploit on our Kali Linux machine. We are going
    to be using our Kali machine that is hosted in AWS, so please ensure that you
    have that instance started up and accessed. To access the machine, use the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Once you have gained access to the Kali machine, go ahead and type the following
    command to update the Metasploit application within your Kali host:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Let that run for a minute and update. You'll be prompted when it's complete
    and will be able to move forward.
  prefs: []
  type: TYPE_NORMAL
- en: Now that our environment is ready, it's time to move forward with some real
    pentest scenarios. The following scenarios simulate deliberately vulnerable environments
    that mimic common issues seen in real-world environments. We will also have some
    other exercises that use AWS as a platform to help boost your knowledge of pentesting
    and also help illustrate some of the capabilities that AWS has in regard to **pentesting**
    and **offensive security**.
  prefs: []
  type: TYPE_NORMAL
- en: Targeting WordPress for exploitation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For our first pentest, we will be pentesting a target application known as
    WordPress, a very popular website that is used for blogging and building websites
    swiftly and somewhat securely. It is not uncommon for WordPress websites to be
    a target during a pentest simply because they are fairly agile and super simple
    to start up – as we will see in a moment. If you want to find out more about WordPress,
    please go here: [https://wordpress.com/](https://wordpress.com/).'
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's look at what the actual scenario is and what we are being requested
    to test, as well as how to test it.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: The test requirements will vary from test to test. Some targets may only need
    initial access, while others will require full post-exploitation. This scenario
    is completely dependent on the client and what their needs are.
  prefs: []
  type: TYPE_NORMAL
- en: The scenario - gaining unauthorized access
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this scenario, we have been asked to target a WordPress website and see whether
    we can gain any type of access. The target suspects that the administrators are
    lazy and have implemented weak credentials to access both the web application
    and the backend host. So, at the request of the target, this means we need to
    get access to the web GUI and get access to the host system via a reverse shell.
  prefs: []
  type: TYPE_NORMAL
- en: We can do this through a couple of different methods, such as brute-forcing
    and social engineering. We will use Metasploit and use an open source tool to
    perform a phishing exercise on the target. Upon getting the credentials, we will
    access the application and attempt to access the host system by putting a back
    door on the web application.
  prefs: []
  type: TYPE_NORMAL
- en: Before we get to pentesting, we need to first stand up a web server with WordPress
    on it. We can execute this fairly quickly using a service called **Lightsail**.
  prefs: []
  type: TYPE_NORMAL
- en: Setting the target with Lightsail
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We are going to use something that is a little different this time around while
    setting up our server. In the past, we have used EC2 instances to configure hosts
    and applications. Now, we are pretty much going to automate that entire part using
    a service called **Lightsail**.
  prefs: []
  type: TYPE_NORMAL
- en: Lightsail is a feature within AWS that allows us to build applications within
    a matter of minutes. This works wonderfully for administrators who need to get
    a server and website up and running in minutes; however, as we will see in this
    pentest scenario, there are sometimes common issues that may come with that. Often,
    simple credentials and over-permissive access opens vulnerable doors that allow
    attackers to find ways into the applications!
  prefs: []
  type: TYPE_NORMAL
- en: 'For now, let''s worry about standing up our target with Lightsail. If you like,
    you can find out more about Lightsail here: [https://aws.amazon.com/lightsail/](https://aws.amazon.com/lightsail/).'
  prefs: []
  type: TYPE_NORMAL
- en: 'To get started, you''ll need to log in to your AWS account at [aws.amazon.com](http://aws.amazon.com).
    After logging in, you can go to Lightsail here: [https://lightsail.aws.amazon.com](https://lightsail.aws.amazon.com).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you log in to the Lightsail dashboard, you''ll need to create an instance
    and configure it to fit our vulnerable target scenario. The following steps will
    help guide you through how to do this:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on **Create instance**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **WordPress** application and build it on a Linux image:![Figure
    9.4 – Selecting our Lightsail image with WordPress and Linux
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_9.04_B15630.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.4 – Selecting our Lightsail image with WordPress and Linux
  prefs: []
  type: TYPE_NORMAL
- en: Now we need to choose a plan. Go with the **cheapest plan**, which gives you
    the first month free. You can cancel at any time:![Figure 9.5 – Selecting the
    plan that has a free month option to avoid charges
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_9.05_B15630.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.5 – Selecting the plan that has a free month option to avoid charges
  prefs: []
  type: TYPE_NORMAL
- en: Name your instance! In this case, we have named our instance `WordPress-Metasploit`
    to keep things simple:![Figure 9.6 – Naming our instance for familiarity
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_9.06_B15630.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.6 – Naming our instance for familiarity
  prefs: []
  type: TYPE_NORMAL
- en: Click **Create instance**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, we should have a dashboard up and running with our new instance!
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.7 – Our instance loaded in Lightsail'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.07_B15630.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.7 – Our instance loaded in Lightsail
  prefs: []
  type: TYPE_NORMAL
- en: Next, we are going to make this instance vulnerable so that we can attack it.
    The first thing we need to do is log in and change the password for the login.
    When you get to the Lightsail dashboard, you'll see **Connect using SSH**. Clicking
    that button will give us an SSH Terminal within our WordPress host.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s move forward with the next steps to set up our vulnerable host:'
  prefs: []
  type: TYPE_NORMAL
- en: Click **Connect using SSH**:![Figure 9.8 – Connecting to the host system
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_9.08_B15630.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.8 – Connecting to the host system
  prefs: []
  type: TYPE_NORMAL
- en: This will create an SSH window within your browser. Type `ls` in the Terminal
    to list any files and directories within the application:![Figure 9.9 – Listing
    out files within the host
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_9.09_B15630.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.9 – Listing out files within the host
  prefs: []
  type: TYPE_NORMAL
- en: List out the application password file with the `cat` command:![](img/Figure_9.10_B15630.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Figure 9.10 – Listing out the contents of the password file
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have the password, let's go to the login address and use the password
    and username to log in to the web app. The address to log in will be at `http://<publiciP>/wp-login.php`:![Figure
    9.11 – Logging in to our WordPress host
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_9.11_B15630.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.11 – Logging in to our WordPress host
  prefs: []
  type: TYPE_NORMAL
- en: Once logged in, go to the **Users** section, and click **Add New**:![Figure
    9.12 – Adding a new user
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_9.12_B15630.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.12 – Adding a new user
  prefs: []
  type: TYPE_NORMAL
- en: Now, go ahead and create a new user called `admin` and set the password to `admin`:![Figure
    9.13 – Creating an admin account
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_9.13_B15630.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.13 – Creating an admin account
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the user is created, you''ll need to ensure that it is part of the **Administrator**
    role group:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.14 – Assigning the Administrator role to our admin account'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.14_B15630.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.14 – Assigning the Administrator role to our admin account
  prefs: []
  type: TYPE_NORMAL
- en: Now, our target is successfully set up with some vulnerable issues that will
    allow us to discover the weaknesses in the application. Remember, we only set
    up the application as an administrator, but we are attacking it as a pentester.
    This means we have knowledge of the credentials on the application.
  prefs: []
  type: TYPE_NORMAL
- en: Let's get started and begin pentesting!
  prefs: []
  type: TYPE_NORMAL
- en: Enumerating the target
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Alright, now that the stage is set, we are ready to get to pentesting our target.
    The thing we need to do is get back on to our AWS Kali Linux instance. Once you
    have access to your Kali host, let''s start scanning the target application to
    see what ports and services we discover as potential entry points:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The output can be seen as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.15 – Scanning our WordPress host'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.15_B15630.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.15 – Scanning our WordPress host
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, the ports and services that are open are web service ports and
    SSH. Since we were only requested to test the WordPress application, we can go
    ahead and not worry about SSH since technically it isn't within the scope of the
    test.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: Always remember to stay within the scope of the requested pentest. Going beyond
    the scope can result in fines, loss of revenue, loss of trust, and lawsuits.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we know that we can access both web ports on ports `80` and `443`,
    let's start to move forward and see what we can enumerate from the website using
    a WordPress module within Metasploit. This is the next logical step since we already
    know that the target is hosting **WordPress** – if we didn't know, we would attempt
    to access the site through our browser first to see what kind of application is
    running on the web service port.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following commands will launch Metasploit and scan our target:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Launch Metasploit:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The next screenshot will give you a visual of what the Metasploit Terminal
    looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.16 – Starting Metasploit'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.16_B15630.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.16 – Starting Metasploit
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we need to go ahead and select a **scanning module** within **Metasploit**
    that will enumerate the version of **WordPress**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'This will give the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.17 – Discovering WordPress 5.3.4'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.17_B15630.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.17 – Discovering WordPress 5.3.4
  prefs: []
  type: TYPE_NORMAL
- en: 'It looks like we may be dealing with an outdated version of **WordPress**.
    If a target is hosting outdated applications, those applications could have vulnerabilities
    that lead to easy exploitation and system compromise. Now, we will look at vulnerabilities
    associated with **5.3.4**. You can find vulnerabilities associated with this version
    here: [https://wpvulndb.com/wordpresses/53](https://wpvulndb.com/wordpresses/53).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We didn't find anything that stood out as an easy exploit, so now we can go
    ahead and move on to seeing whether we can discover any usernames through manual
    enumeration.
  prefs: []
  type: TYPE_NORMAL
- en: To start enumerating username information, we need to go check out the login
    page for our WordPress application. We will begin assessing by entering random
    usernames until we find an exact match on the username. This will allow us to
    **brute - force** with a known username and a password list and will take less
    time because we will only need to search for passwords, not usernames.
  prefs: []
  type: TYPE_NORMAL
- en: To begin, go to the login page at `http://<public dns>/wp-login.php`. Once there,
    start using some common usernames to log in to the page. In our case, we will
    use `root` and `user` for our attempts.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s go ahead and begin:'
  prefs: []
  type: TYPE_NORMAL
- en: Input `root` as the username, and `password` for the password:![Figure 9.18
    – No luck with finding the username
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_9.18_B15630.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.18 – No luck with finding the username
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, the username was not found – meaning this username does not
    exist on this application.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will try to input `user` for the username:![Figure 9.19 – Username
    found
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_9.19_B15630.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.19 – Username found
  prefs: []
  type: TYPE_NORMAL
- en: Now we can see that we have found the username because the prompt tells us that
    `user` username is valid, let's take a look at how we can use Metasploit to automate
    the easy discovery of credentials.
  prefs: []
  type: TYPE_NORMAL
- en: First, you need to create a file to put the username in. We can also use this
    file later if we find more usernames.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Go ahead and open the `user` into the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Next, we need to save the file. Type `:wq` to save and exit.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We are good to go with our username document; now, we just need to use it on
    our target host. We are going to be relying on Metasploit again to do this. Metasploit
    has a login enumeration module that will help us find some passwords for our discovered
    user. Once you have Metasploit up, use the following commands to configure your
    Metasploit module to fit your target:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Notice in the next screenshot that we have found the user `user`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.21 – Brute - forcing and finding user'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.21_B15630.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.21 – Brute - forcing and finding user
  prefs: []
  type: TYPE_NORMAL
- en: 'As you can see, we found the user and the password. The next screenshot highlights
    that the password is `admin`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.22 – Discovering a password'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.22_B15630.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.22 – Discovering a password
  prefs: []
  type: TYPE_NORMAL
- en: Great work! We successfully gathered credentials for the WordPress application.
    While we could stop enumerating here and move forward with attempting to exploit
    the application, let's take another approach to get other credentials that will
    allow us access to the application – after all, the more credentials you have,
    the better!
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will attempt to get more credentials through a phishing scheme using
    an open source phishing tool.
  prefs: []
  type: TYPE_NORMAL
- en: Phishing for credentials
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The next portion of this section involves us sending a malicious link to the
    target company in order to attempt to get additional credentials that will gain
    us access to the web application. **Phishing** is a **social engineering** attack
    that involves sending malicious emails that attempt to mimic legitimate emails.
    The overall goal is to have users click on links or downloads within the email
    or application that then install malware on the target or gather information.
    In our case, we will be using it to gather additional credentials.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: We will not be sending a fake email to anyone in this exercise. We will assume
    a very descriptive email has been sent with the malicious link attached to it.
  prefs: []
  type: TYPE_NORMAL
- en: 'To get started, we need to grab a program called **Social Phish** and put it
    on our **AWS Kali host**. To get the application, please use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Once you have the application on your Kali machine, go ahead and run the application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, follow these steps to execute the attack:'
  prefs: []
  type: TYPE_NORMAL
- en: Now that the application is running, you'll need to ensure that you select the
    **WordPress** template:![Figure 9.23 – Setting up our phishing application
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_9.23_B15630.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.23 – Setting up our phishing application
  prefs: []
  type: TYPE_NORMAL
- en: After selecting the **WordPress** template, move forward with putting the **tinyURL**
    into your browser. This will use the public DNS of your Kali host for access via
    the web:![Figure 9.24 – Fake WordPress site from the phishing link
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_9.24_B15630.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.24 – Fake WordPress site from the phishing link
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, we have what looks to be a normal WordPress site. We could deceive
    a user into putting their credentials into the input boxes, thus stealing the
    login information. Go ahead and use legitimate credentials from the WordPress
    application:![Figure 9.25 – Credentials discovered
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_9.25_B15630.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.25 – Credentials discovered
  prefs: []
  type: TYPE_NORMAL
- en: After inputting the credentials, you'll receive the login information on your
    Terminal, as well as it being stored in a file on your system.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We now have credentials that we can use to access the application, so let's
    move on to more pentesting on the WordPress application and see what we can do.
  prefs: []
  type: TYPE_NORMAL
- en: Gaining access to WordPress
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is the shortest part of the assessment. We need to ensure that the credentials
    we discovered will allow us to access the web page. It is important to always
    try the credentials that you discover because they could be the outcome of a **false
    positive** or be changed by the time you try to use them.
  prefs: []
  type: TYPE_NORMAL
- en: 'In our case, we will go back to the login page of the target host and use the
    credentials we discovered:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.26 – WordPress dashboard'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.26_B15630.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.26 – WordPress dashboard
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, we have successfully gained access to the system. Now that we
    have access, let's move forward with attempting to exploit the application and
    gain access to the underlying host operating system.
  prefs: []
  type: TYPE_NORMAL
- en: Exploiting and getting a reverse shell
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now it's time to see whether we can get a **reverse shell** and **maintain persistence**
    on the target application. Getting persistence on a vulnerable web application
    shows the target client how *easily* their system can be taken over. Additionally,
    it is also one of the scarier issues because it can be difficult to detect and
    allows unauthorized users to gain access to the host system – which at times can
    lead to total compromise.
  prefs: []
  type: TYPE_NORMAL
- en: 'To begin our journey in getting a reverse shell on our target, we need to find
    some areas that we can inject or place code that can be executed:'
  prefs: []
  type: TYPE_NORMAL
- en: To start, let's go look at **Theme Editor**:![Figure 9.27 – WordPress Theme
    Editor
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_9.27_B15630.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.27 – WordPress Theme Editor
  prefs: []
  type: TYPE_NORMAL
- en: 'We will have quite a few templates to select from. Let''s use **404 Template**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'This can be seen as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.28 – WordPress Theme Editor with our code'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.28_B15630.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.28 – WordPress Theme Editor with our code
  prefs: []
  type: TYPE_NORMAL
- en: 'We place the following code into the template. Set `443`. The code for this
    can be found here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[https://github.com/PacktPublishing/AWS-Penetration-Testing/blob/master/Chapter%209:%20Real-Life%20Pentesting%20with%20Metasploit%20and%20More!/phpshell.php](https://github.com/PacktPublishing/AWS-Penetration-Testing/blob/master/Chapter%209:%20Real-Life%20Pentesting%20with%20Metasploit%20and%20More!/phpshell.php)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we need to start up `netcat` on our Kali Linux host to listen in on the
    connection:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we need to attempt to access the full URL where our code is. We can do
    this by using the `curl` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'This will give the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.29 – Reverse shell from our target host'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.29_B15630.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.29 – Reverse shell from our target host
  prefs: []
  type: TYPE_NORMAL
- en: Alright, so we got a **Netcat** shell using our fancy payload. However, now
    let's make things simpler by getting a **Meterpreter** shell! I personally find
    Meterpreter shells more pleasing because you can use them with Metasploit and
    they have extra features that typical shells do not.
  prefs: []
  type: TYPE_NORMAL
- en: To get a Meterpreter shell, we are going to use a WordPress exploit within Metasploit.
    We will use the credentials we discovered during our assessment, as well as our
    AWS Kali Linux host to catch the incoming connection.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have Metasploit started, use the following commands to load your module
    and configure it to target the host:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'This will give the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.30 – Meterpreter reverse shell from our target host'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.30_B15630.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.30 – Meterpreter reverse shell from our target host
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, we have successfully gained access to the host operating system
    with both a **Netcat** shell and a **Meterpreter** shell. From the looks of it,
    this application was fairly insecure and had very little security in place. Now
    that we have finished our pentest on this application, it's time to move forward
    with discussing the issues and how you can discuss with others how to fix them.
  prefs: []
  type: TYPE_NORMAL
- en: Discussing the issues
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Once a pentest has concluded, it is **essential** that you discuss with your
    target some of the issues that were discovered during the pentest. It's also extremely
    important that you divert from using extremely technical terms that may confuse
    non-tech-savvy clients. Making a client feel confused or overwhelmed with technical
    terms can actually drive a client away and they may not recommend you for another
    pentest.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a statement that we would write to the client and attach pentest
    findings to the statement:'
  prefs: []
  type: TYPE_NORMAL
- en: During the pentest of the WordPress application, pentesters were successfully
    able to extract passwords through guessing and social engineering. Social engineering
    involved sending a malicious link to users in the hope that one of them would
    click on the link and input their credentials in what looked like the customer's
    website.
  prefs: []
  type: TYPE_NORMAL
- en: Upon gaining access, the pentester moved forward and placed malicious code in
    the web application that could then be used to grant unauthorized access to the
    target server.
  prefs: []
  type: TYPE_NORMAL
- en: It is recommended that the client trains its employees not to click on malicious
    links, and that engineers do not use weak credentials for any applications. It
    is also recommended that password policies be reviewed to prevent simple usernames
    and passwords from being created in the future. Please advise if you have any
    questions and we look forward to working with you again.
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, we stayed away from using any tech-heavy terms and advised on
    what to fix. This lets the target client understand that we are here to help and
    that we will work with them to fix their issues – ultimately solidifying a relationship
    with the client business.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have gotten our hands dirty with some fun WordPress hacking, let's
    look at some different issues that you may come across when assessing an AWS environment.
    Next up, we are going to start looking at how we can discover vulnerable applications
    hosted on EC2.
  prefs: []
  type: TYPE_NORMAL
- en: Targeting vulnerable service applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Vulnerable services** are one of the worst things that can be part of your
    environment and one of the easiest, *but not always the cheapest*, things to fix.
    As applications get older, so does the code used to build the application, and
    while time advances, so do the vulnerabilities of the older application. Unfortunately,
    while simply patching or updating old software sounds easy, it''s actually quite
    expensive and time-consuming. Updating an application can take copious amounts
    of time and bring down the service the application uses to function. This means
    a loss in revenue and usability.'
  prefs: []
  type: TYPE_NORMAL
- en: In this next scenario, we will see the real damage produced by a vulnerable
    application on a network with AWS.
  prefs: []
  type: TYPE_NORMAL
- en: The scenario – discovering and attacking any low-hanging fruit
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this scenario, the client has requested a pentest for what they suspect to
    be a vulnerable application. This application is currently being hosted within
    its AWS environment and is publicly accessible from the World Wide Web. The client
    wants to get a view on whether and how vulnerable the web application is, and
    what issues would persist if an attacker were to exploit the application and gain
    access.
  prefs: []
  type: TYPE_NORMAL
- en: The client has informed us that the application is used for file storage, so
    we can assume that it will more than likely be some type of `21`. That's where
    we will start with our pentest.
  prefs: []
  type: TYPE_NORMAL
- en: Of course, before we do this, we need to stage the environment before moving
    forward.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the target with community AMIs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To get started, we will need to go to the EC2 console, which can be accessed
    via the main AWS console. Once you have accessed the EC2 console, click on **Launch
    instance** to quickly get a vulnerable instance up and running:'
  prefs: []
  type: TYPE_NORMAL
- en: After selecting **Launch instance**, let's select the **vsftpd-2-3-4-final**
    community AMI:![Figure 9.31 – Launching our community image
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_9.31_B15630.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.31 – Launching our community image
  prefs: []
  type: TYPE_NORMAL
- en: You'll want to ensure that the instance is in the same **VPC** as other running
    instances. We will place it in our **Pentest Playground** VPC.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Skip to the end, generate a key pair, and launch the instance!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As simple as that, our instance is ready to go. However, do give the instance
    a couple of minutes to load up and get addresses assigned to it so that we can
    access it.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will move forward with our pentest and see what issues we can find
    with the potentially vulnerable application.
  prefs: []
  type: TYPE_NORMAL
- en: Scanning for open ports
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As always, we want to `21`, we want to check any other ports just in case we
    overlook something.
  prefs: []
  type: TYPE_NORMAL
- en: 'Launch **Metasploit** on your **AWS Kali** instance and use the following commands
    to select and configure the module to port scan our target:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'This will give us the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.32 – Port scanning our host with Metasploit'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.32_B15630.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.32 – Port scanning our host with Metasploit
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, we have port `22` and port `21` open on the host. We can confirm
    our suspicion that port `21` is in fact open. Now that we have confirmed it is
    open, let's move forward with gathering more information on port `21`.
  prefs: []
  type: TYPE_NORMAL
- en: Information gathering for vulnerable services
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Moving forward, we need to determine the application and the version number
    that is running on port `21`. To help us discover this, we are going to use `nmap`
    to scan port `21` and enumerate the version of that service:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'This will give us the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.33 – Scanning our host with Nmap'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.33_B15630.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.33 – Scanning our host with Nmap
  prefs: []
  type: TYPE_NORMAL
- en: 'We now know the version of the file service that''s hosted on the target host.
    As you can see, `vsftpd 2.3.4` is the version of the application running on the
    system. Let''s use a program titled **SearchSploit** to see whether there are
    any exploits that we can use against our target:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'This will give us the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.34 – Searching for exploits'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.34_B15630.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.34 – Searching for exploits
  prefs: []
  type: TYPE_NORMAL
- en: It looks like there is a **Metasploit** module that we can use to exploit our
    target. We now have enough information to use to attempt to exploit our target
    with the hopes of getting access to the target system.
  prefs: []
  type: TYPE_NORMAL
- en: Using Metasploit for total system takeover
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'With all the information about the target gathered, let''s begin to shift gears
    and go into attack mode. To attack the application, we need to start up Metasploit
    and configure the module to fit the current target:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'This gives us the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.35 – Getting a root shell on the target host'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.35_B15630.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.35 – Getting a root shell on the target host
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, we have a root shell! This means we have total control of our
    target and can make changes to everything on the system. However, our shell could
    use a little more `background` in your shell Terminal.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we are back in our Metasploit Terminal, let''s use the `shell_to_meterpreter`
    module to upgrade our current shell. The following will select and configure this
    for us:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'You will see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.36 – Upgrading to the Meterpreter shell'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.36_B15630.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.36 – Upgrading to the Meterpreter shell
  prefs: []
  type: TYPE_NORMAL
- en: 'As you can see, we now have `vsftpd` exploit, and the second shell is our newly
    upgraded shell. To get access to our new Meterpreter shell, use the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Awesome – now we have a Meterpreter shell that we can use to exploit more potential
    issues within the environment. Let's move forward and discuss and execute some
    of the common ways you can successfully exploit this particular host for more
    ethical hacking fun.
  prefs: []
  type: TYPE_NORMAL
- en: Post exploitation and weakening additional services
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Great, we now have access to our system – want to see what else we can do? We
    already have root access, so that means we can do pretty much anything we want
    to our exploited target.
  prefs: []
  type: TYPE_NORMAL
- en: Before we get started, let's see what network this host is on. Now that we have
    exploited it, we both have access to the private AWS network and can use the **public
    IP** and **DNS** name for attacks.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: In a real pentest, you can pivot inside the private AWS network and discover
    more hosts that may not be accessible to the public!
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s go ahead and look at our network information by running `ifconfig` on
    the target host:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.37 – Pulling network information from the target host'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.37_B15630.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.37 – Pulling network information from the target host
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, we have found the internal network on our `eth0` interface!
    While we won't be doing any pivoting here, it is important to understand that
    pivoting from host to host is something that is extremely dangerous – dangerous
    for the system. Hackers that can pivot inside a network undetected typically never
    get caught and can stay within the network for a long time. It is important to
    have logging and monitoring solutions in place to ensure that attackers are not
    able to move about the network.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we are going to use a module with our current **Meterpreter** session.
    The module we are going to use will steal the SSH key for us and essentially allow
    us persistent access to the system.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s go ahead and back out of our current session by typing `background`.
    Next, load and run the following module:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'This will give the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.38 – Obtaining an SSH public key'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.38_B15630.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.38 – Obtaining an SSH public key
  prefs: []
  type: TYPE_NORMAL
- en: 'Now what we can do is use this for persistence! Copy the stolen **SSH key**
    over to your local Kali machine. Then, save the file and change the permission:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Great, now that the permissions are all set, we can move on to tunneling into
    our hacked target:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'This will give the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.39 – SSH into host target as root'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.39_B15630.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.39 – SSH into host target as root
  prefs: []
  type: TYPE_NORMAL
- en: Now for something that is fairly dangerous if it isn't caught – let's change
    the password to something that we can remember and that will deny the client access
    to the system!
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'You will see an output as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.40 – Changing the password for the root account'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.40_B15630.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.40 – Changing the password for the root account
  prefs: []
  type: TYPE_NORMAL
- en: Now, we have a password we can use that is unknown to the target user. Now that
    we have changed the password to the root account, they won't have root-level access
    to it – meaning we have complete and total control of the host.
  prefs: []
  type: TYPE_NORMAL
- en: Before we close up this pentest, we are going to take a look at the dangers
    of having publicly accessible EC2 instances that are also part of an internal
    network. In this case, the internal/private network to our exploit host is `172.31.7.0/24`.
    We were able to gather this information using the `ifconfig` command. Please refer
    to *Figure 9.37* for an illustration.
  prefs: []
  type: TYPE_NORMAL
- en: To successfully discover any hosts on the system, we are going to need to install
    Nmap on the exploited `vsftpd` server. Installing and deploying **Nmap** will
    allow us to scan the internal network for any online hosts – or in our case, "targets"
    – that we can use to exploit even further.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we will run the following command on the exploit machine to install Nmap:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Now we can scan the inside of the network to see whether there are other hosts
    up!
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'This will give us the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.41 – Scanning the newly discovered internal host'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.41_B15630.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.41 – Scanning the newly discovered internal host
  prefs: []
  type: TYPE_NORMAL
- en: 'Looks like we found ourselves another host that could become another exploited
    target. Let''s do a version scan on the host to see what we can discover on the
    host:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'You will see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.42 – Scanning the newly discovered internal host for ports and services'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.42_B15630.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.42 – Scanning the newly discovered internal host for ports and services
  prefs: []
  type: TYPE_NORMAL
- en: From here, we could pivot over to the discovered host if we want; however, we
    won't worry about that right now. For now, we have enough information to let the
    client know the overall risk to their security posture. Let's go ahead and move
    forward with discussing what is needed to report what we have found during this
    test.
  prefs: []
  type: TYPE_NORMAL
- en: Reporting the vulnerabilities
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This test had us test an application that had some serious vulnerabilities and
    also led us to seeing other hosts within the internal network. Being able to pivot
    to other hosts inside the network is extremely dangerous because it lets us see
    systems that you don't typically see. Additionally, depending on the environment,
    we might find data that is extremely sensitive, such as social security numbers,
    credit card numbers, and health care information.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: If sensitive information is ever discovered during a pentest, the pentest must
    stop all operations until the issue revolving around the sensitive information
    is corrected.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s discuss how we would present a statement to our target client on
    the environment that we just discovered and what we would need to do in order
    to work with the client to help them correct the issues:'
  prefs: []
  type: TYPE_NORMAL
- en: '"During the pentest, we found a vulnerable file transfer application hosted
    on a server that was available to the public. The vulnerable application, VSFTPD
    2.3.4, was discovered without any patches or updates. Once our pentester discovered
    the application, they were able to exploit that application located on the public
    EC2 instance using a pentesting software called Metasploit. This software allowed
    our pentester to exploit the application and get access to the private internal
    network and discover other hosts.'
  prefs: []
  type: TYPE_NORMAL
- en: It's recommended that the application is updated as soon as possible as the
    application is easily exploitable and can be seen by anyone. Additionally, ensure
    that the network is segmented correctly and that only authorized hosts can communicate
    with each other."
  prefs: []
  type: TYPE_NORMAL
- en: This statement, again, stays away from using heavy technical terms that may
    confuse the client. It mentions that the pentester was able to easily exploit
    that application and see the internal network. It also mentions how serious this
    issue is because we can exploit it via a **public DNS** name.
  prefs: []
  type: TYPE_NORMAL
- en: We have successfully run two different pentests that attacked applications within
    AWS and showed some of the real issues that come with lazy administration and
    a lack of patching. We also took a quick view of what can occur if we do not properly
    secure other instances within our private networks and discussed what could possibly
    occur if an attacker were to gain access.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's move on to something a little different – we are going to be utilizing
    functional testing to discover resources within our AWS environment.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring AWS Metasploit modules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Up until now, we have been using Metasploit to target hosts that fall within
    the scope of a pentest. Now, let's start to look at some of the AWS modules that
    we can use to enumerate and possibly attack AWS. For our purposes, let's say we
    were able to get credentials from the client. This will be part of a functional
    test. We want to see what we can leverage using the credentials.
  prefs: []
  type: TYPE_NORMAL
- en: To get started, let's spin up the vulnerable `vsftpd` instance that we attacked
    earlier and the Kali instance in the **Pentest Playground** VPC.
  prefs: []
  type: TYPE_NORMAL
- en: Now, we are going to do something a little different. This is a combination
    of a functional test and a black-box test. We will have stolen credentials but
    have no clue about the environment – so, we need to see whether we can find anything
    good!
  prefs: []
  type: TYPE_NORMAL
- en: Stealing user credentials
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The first exercise we are going to go through is going to involve stealing credentials
    that belong to other AWS user accounts. These are credentials that allow you to
    access the AWS environment and access resources such as **S3 buckets** and **Lambda**.
  prefs: []
  type: TYPE_NORMAL
- en: This exercise will involve more of a functional testing environment and is geared
    toward seeing how many accounts we can view. We are not going to worry about using
    the accounts found because they are part of the same environment that we are already
    part of.
  prefs: []
  type: TYPE_NORMAL
- en: 'To get things started, let''s start up **Metasploit** in our AWS Kali Linux
    instance. Once you have Metasploit up and running, use the following module:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Now that we have our module loaded, it's time to configure it with our access
    key to our AWS account. Please look back at [*Chapter 4*](B15630_04_Final_ASB_ePub.xhtml#_idTextAnchor171),
    *Exploiting S3 Buckets*, to review how to obtain your credentials for your AWS
    environment. Once you have your AWS credentials, set the **access key ID** and
    **secret access key** in the **Metasploit** module to fit your account.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have those configured, execute the module by using the `run` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.43 – Stealing accounts'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.43_B15630.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.43 – Stealing accounts
  prefs: []
  type: TYPE_NORMAL
- en: Now we have lots more users! You can use these credentials to access other accounts
    and potentially scale out the environment to further your attack. While we won't
    worry too much about that, it is good to know that as this compromised user, we
    can now see other accounts without accessing the AWS console. Now, let's use the
    EC2 Metasploit module to help us discover other potential EC2 instances that are
    running.
  prefs: []
  type: TYPE_NORMAL
- en: Discovering EC2 instances in our unknown environment
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Imagine that some malicious actor has gained access to your environment but
    doesn't know where to start attacking. Now imagine that malicious hacker being
    able to scan and discover various instances within your environment. That's what
    this next exercise will help us understand – how an attacker can find EC2 instances
    within your environment within minutes!
  prefs: []
  type: TYPE_NORMAL
- en: 'For this exercise, we are going to use a Metasploit module that is going to
    enumerate all the EC2 instances in the environment. We will need to make sure
    that our `VSFTPD 2-3-4-Final` instance is used to show proof of concept in the
    exercise:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To start, use Metasploit in your AWS Kali instance and use the following module:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Once you have the module loaded, you will need to configure it with the **access
    keys** to our AWS environment:![Figure 9.44 – Configuring the module with credentials
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_9.44_B15630.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.44 – Configuring the module with credentials
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have it configured, go ahead and use the `run` command to execute
    the exploit:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.45 – Discovering a new host and the private network'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.45_B15630.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.45 – Discovering a new host and the private network
  prefs: []
  type: TYPE_NORMAL
- en: You'll get quite a bit – check out the instances that are running! As you can
    see, we have a public IP and a private IP of the instance. As we saw in the *Targeting
    vulnerable service applications* section of the chapter, finding a weak host such
    as `VSFTPD 2-3-4-Final` can lead to some extremely impactful situations that could
    lead to a total system compromise. An attacker could use this information to exploit
    the weak service and compromise the internal AWS network.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have had some fun with some unfamiliar Metasploit modules, let's
    take a look at one more module that will enumerate a service we are more familiar
    with. Remember back in [*Chapter 4*](B15630_04_Final_ASB_ePub.xhtml#_idTextAnchor171),
    *Exploiting S3 Buckets*, how we enumerated S3 buckets? Now we are going to do
    the exact same thing, only we will be using Metasploit.
  prefs: []
  type: TYPE_NORMAL
- en: Enumerating S3 buckets with Metasploit
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will now begin to take one last look at our AWS environment with Metasploit.
    We are going to use the account keys to quickly enumerate some buckets that are
    in the AWS environment. This won't access any content in the buckets, but it will
    let us know what buckets we can see.
  prefs: []
  type: TYPE_NORMAL
- en: 'To get started, use the following module within Metasploit:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Once that''s loaded, move forward with configuring the module with our AWS
    credentials and use the `run` command to execute the module:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.46 – Using Metasploit to gather S3 buckets'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.46_B15630.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.46 – Using Metasploit to gather S3 buckets
  prefs: []
  type: TYPE_NORMAL
- en: We successfully enumerated our `packtawspentesting` bucket! We can now move
    on to exploiting the bucket and exfiltrating data from the S3 resource. Refer
    to [*Chapter 4*](B15630_04_Final_ASB_ePub.xhtml#_idTextAnchor171), *Exploiting
    S3 Buckets*, if you would like to refresh your memory on how to exploit S3 buckets.
  prefs: []
  type: TYPE_NORMAL
- en: We are now heading toward the end of this chapter. Great job working through
    all the exercises and getting a real feel for what pentesting AWS can really feel
    like! We did quite a bit in this chapter, and have done in the book so far. We
    are now going to move forward into the next section of the book, where we will
    discuss the lessons learned and how we can pentest better. However, before we
    do that, let's summarize all that we have learned!
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we took a deeper look at how we can use Metasploit to perform
    a couple of lifelike pentesting scenarios that helped give us a better understanding
    of how real pentesting occurs with AWS. We also looked at some of the modules
    used in AWS that allow us to execute functional testing within our scoped environment
    and gather information that allows us to further our attacks.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will begin to look at what happens after we complete a pentest. It
    is important to understand the concepts and processes and what to do once a pentest
    is completed and how we can use that post-pentest time to help secure clients.
    We will also start discussing further how we prep for a pentest and the steps
    needed to complete a successful pentest in AWS.
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'More about using Metasploit: [https://www.exploit-db.com/docs/english/44040-the-easiest-metasploit-guide-you%E2%80%99ll-ever-read.pdf](https://www.exploit-db.com/docs/english/44040-the-easiest-metasploit-guide-you%E2%80%99ll-ever-read.pdf)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Amazon Lightsail: [https://aws.amazon.com/lightsail/](https://aws.amazon.com/lightsail/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
