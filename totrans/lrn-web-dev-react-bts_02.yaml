- en: Chapter 2. Lets Build a Responsive Theme with React-Bootstrap and React
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, that you've completed your first web app using ReactJS and Bootstrap, we're
    going to build the first responsive theme for your app using both the frameworks.
    We'll also be touching on the full potential of both frameworks. So, let's start!
  prefs: []
  type: TYPE_NORMAL
- en: Setting up
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Firstly, we need to create a similar folder structure to our Hello World app
    which we made in [Chapter 1](ch01.html "Chapter 1. Getting Started with React
    and Bootstrap"), *Getting Started with React and Bootstrap*.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot describes the folder structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up](graphics/image_02_001.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now you need to copy the ReactJS and Bootstrap files from `chapter1` into the
    significant directories of `Chapter2` and create an `index.html` file in the root.
    The following code snippet is just a base HTML page which includes Bootstrap and
    React.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the markup of our HTML page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Scaffolding
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So now we have the base file and the folder structure sorted. The next step
    is to start scaffolding our app using the Bootstrap CSS.
  prefs: []
  type: TYPE_NORMAL
- en: 'I''m sure you have a question: what is scaffolding? Simply, it gives a support
    structure to make your base concrete.'
  prefs: []
  type: TYPE_NORMAL
- en: Apart from this, we will use React-Bootstrap JS in which we have a collection
    of Bootstrap components rebuilt for React. We can use these throughout our **Employee
    Information System** (**EIS**). Bootstrap also includes an extremely powerful
    responsive grid system which helps us to create a responsive theme layout/template/structure
    for the app.
  prefs: []
  type: TYPE_NORMAL
- en: Navigation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Navigation is a very important element of any static or dynamic page. So now
    we are going to build a navbar (for navigation) to switch between our pages. It
    could be placed at the top of our page.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the basic HTML structure of Bootstrap navigation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The `<nav>` tag that used to hold everything within the `navbar`, is instead
    split into two sections: `navbar-header` and `navbar-collapse`, if you see the
    navigation structure . Navbars are responsive components so the `navbar-header`
    element is exclusively for mobile navigation and controls the expansion and collapse
    of the navigation with the `toggle` button. The `data-target` attribute on the
    button directly corresponds with the `id` attribute of the `navbar-collapse` element
    so Bootstrap knows what element should be wrapped in mobile devices to control
    the toggling.'
  prefs: []
  type: TYPE_NORMAL
- en: Now we also need to include jQuery in your page because Bootstrap's JS has a
    dependency on it. You can get the latest jQuery version from [http://jquery.com/](http://jquery.com/).
    Now you need to copy `bootstrap.min.js` from the Bootstrap extracted folder and
    add this to your app `js` directory, as well as include it on your page before
    `bootstrap.min.js`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Please make sure that your JavaScript files are included in the following order:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s take a quick look at the `navbar` component code after integrating in
    React:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Open the `index.html` file in your browser to see the `navbar` component. The
    following screenshot shows what our navigation will look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Navigation](graphics/image_02_002.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We have included navigation directly within our `<body>` tag to cover the full
    width of the browser. Now we will do the same thing by using the React-Bootstrap
    JS framework to understand the difference between Bootstrap JS and React-Bootstrap
    JS.
  prefs: []
  type: TYPE_NORMAL
- en: React-Bootstrap
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The React-Bootstrap JavaScript framework is similar to Bootstrap rebuilt for
    React. It's a complete reimplementation of the Bootstrap frontend reusable components
    in React. React-Bootstrap has no dependency on any other framework, such as Bootstrap
    JS or jQuery. It means that, if you are using React-Bootstrap, then you don't
    need to include jQuery in your project as a dependency. Using React-Bootstrap,
    we can be sure that there won't be external JavaScript calls to render the component
    which might be incompatible with the `ReactDOM.render`. However, you can still
    achieve the same functionality, look, and feel as Twitter Bootstrap, but with
    much cleaner code.
  prefs: []
  type: TYPE_NORMAL
- en: Installing React-Bootstrap
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To get this React-Bootstrap, we can either use the CDN directly or from the
    following URL: [https://cdnjs.cloudflare.com/ajax/libs/react-bootstrap/0.29.5/react-bootstrap.min.js](https://cdnjs.cloudflare.com/ajax/libs/react-bootstrap/0.29.5/react-bootstrap.min.js)
    . Open this URL and save it in your local directory for fast performance. When
    you download the file, please make sure to download the source-map (`react-bootstrap.min.js.map`)
    file along with it to make debugging much easier. Once you are done with the download,
    add that library in your app''s `js` directory and include it in your page''s
    `head` section as shown in the following code snippet. Your `head` section will
    look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Using React-Bootstrap
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now, you may be wondering that since we have the Bootstrap file already and
    we are also adding the React-Bootstrap JS file, won't they conflict with each
    other? No, they will not. React-Bootstrap is compatible with the existing Bootstrap
    styles so we don't need to worry about any conflicts.
  prefs: []
  type: TYPE_NORMAL
- en: Now we are going to create the same `Navbar` component in React-Bootstrap.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, is the structure of the `Navbar` component in React-Bootstrap:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Here is the highlight of the preceding code (with the order changed from below
    the benefits section above it).
  prefs: []
  type: TYPE_NORMAL
- en: 'The `<Navbar>` tag is a container of the component and it splits into two sections:
    `<Navbar.Header>` and `<Nav>`.'
  prefs: []
  type: TYPE_NORMAL
- en: For responsive behavior, we have added the `<Navbar.Toggle/>` tag, that controls
    expand and collapse, and wrapped the `<Nav>` into the `<Navbar.Collapse>` to show
    and hide the nav items.
  prefs: []
  type: TYPE_NORMAL
- en: 'For capturing the event, we have used `eventKey={1}`; when we select any menu
    item, a callback is fired which takes two arguments, (`eventKey: any`, `event:
    object`) => `any`'
  prefs: []
  type: TYPE_NORMAL
- en: Benefits of React-Bootstrap
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's check out the benefits of using React-Bootstrap.
  prefs: []
  type: TYPE_NORMAL
- en: As you can see in the preceding code, it looks cleaner than the Twitter Bootstrap
    component because we can import the individual component from React-Bootstrap
    rather than including the entire library.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, if I want to build a `navbar` with a Twitter Bootstrap then the
    code structure is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Now it's easy for you to compare the code and I'm sure, you will also agree
    to use React-Bootstrap as it's very component specific, whereas in Twitter Bootstrap
    we need to maintain multiple elements with the correct order to get similar results.
  prefs: []
  type: TYPE_NORMAL
- en: 'By doing this, React-Bootstrap pulls only specific components that we want
    to include and helps to reduce your app bundle size significantly. React-Bootstrap
    provides certain benefits as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: React-Bootstrap saves a bit of typing and reduces bugs by compressing the Bootstrap
    code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It reduces conflicts by compressing the Bootstrap code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We don't need to think about the different approaches taken by Bootstrap versus
    React
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is easy to use
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It encapsulates in elements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It uses JSX syntax
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It avoids React rendering of the virtual DOM
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is easy to detect DOM changes and update the DOM without any conflict
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It doesn't have any dependency on other libraries, such as jQuery
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here, is the full code view of our `Navbar` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Woohoo! Let''s take a look at our first React-Bootstrap component in the browser.
    The following screenshot shows what the component will look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Benefits of React-Bootstrap](graphics/image_02_003.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now to check the `Navbar`, If you resize your browser window, you'll notice
    that Bootstrap displays the mobile header with the toggle button below 768 px
    screen size of the tablet in portrait mode. However, if you click the button to
    toggle the navigation, you can see the navigation for the mobile.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows what the mobile navigation will look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Benefits of React-Bootstrap](graphics/image_02_004.jpg)'
  prefs: []
  type: TYPE_IMG
- en: So now we have a major understanding of React-Bootstrap and Bootstrap. React-Bootstrap
    has active development efforts in place in to keep it updated.
  prefs: []
  type: TYPE_NORMAL
- en: Bootstrap grid system
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Bootstrap is based on a 12-column grid system which includes a powerful responsive
    structure and a mobile-first fluid grid system that allows us to scaffold our
    web app with very few elements. In Bootstrap, we have a predefined series of classes
    to compose rows and columns, so before we start, we need to include the `<div>`
    tag with the `container` class to wrap our rows and columns. Otherwise, the framework
    won''t respond as expected because Bootstrap has written CSS which is dependent
    on it and we need to add it below our `navbar`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: This will make your web app the center of the page as well as control the rows
    and columns to work as expected in response.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are four class prefixes which help to define the behavior of the columns.
    All the classes are related to different device screen sizes and react in familiar
    ways. The following table from [http://getbootstrap.com/](http://getbootstrap.com/)
    defines the variations between all four classes:'
  prefs: []
  type: TYPE_NORMAL
- en: '|   | **Extra small devices****Phones (<768px)** | **Small devices****Tablets
    (≥768px)** | **Medium devices****Desktops (≥992px)** | **Large devices****Desktops
    (≥1200px)** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| **Grid behavior** | **Horizontal at all times** | **Collapsed to start, horizontal
    above breakpoints** |'
  prefs: []
  type: TYPE_TB
- en: '| **Container width** | None (auto) | 750px | 970px | 1170px |'
  prefs: []
  type: TYPE_TB
- en: '| **Class prefix** | .col-xs- | .col-sm- | .col-md- | .col-lg- |'
  prefs: []
  type: TYPE_TB
- en: '| **# of columns** | 12 |   |   |   |'
  prefs: []
  type: TYPE_TB
- en: '| **Column width** | Auto | ~62px | ~81px | ~97px |'
  prefs: []
  type: TYPE_TB
- en: '| **Gutter width** | 30px (15px on each side of a column) |   |   |   |'
  prefs: []
  type: TYPE_TB
- en: '| **Nestable** | Yes |   |   |   |'
  prefs: []
  type: TYPE_TB
- en: '| **Offsets** | Yes |   |   |   |'
  prefs: []
  type: TYPE_TB
- en: '| **Column ordering** | Yes |   |   |   |'
  prefs: []
  type: TYPE_TB
- en: In our application, we need to create a two column layout for the main content
    area and sidebar. As we know, Bootstrap has a 12 column grid layout so divide
    your content in a way which covers the whole area.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Please understand, Bootstrap divides the 12 column grid by using `col-*-1` to
    `col-*-12` classes.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll divide the 12 columns into two parts: one is nine columns for the main
    content and the other is three columns for the sidebar. Sounds perfect. So, here''s
    how we implement that.'
  prefs: []
  type: TYPE_NORMAL
- en: First we need to include the `<div>` tag inside our `container` and add the
    `class` as `"row"`. We can have as many `div` tags with the `row` class as per
    the design needs, which can each house upto 12 columns.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: As we all know, if we want our columns to stack on mobile devices, we should
    use `col-sm-` prefixes. Creating a column is as simple as taking the desired prefix
    and appending the number of columns you wish to add to it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a quick look at how we can create a two column layout:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'If we want our columns to stack not only for smaller devices, use the extra
    small and medium grid classes by adding `col-md-*` and `col-xs-*` to your columns:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: In mobile view, this column will be full width and in tablet view, it will be
    four medium grid width.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'So when it displays on a larger screen than a mobile device, Bootstrap will
    automatically add 30 px gutter spacing (the space between two elements) between
    each column (15 px on either side). If we want to add additional spaces between
    the columns, Bootstrap will provide a way to do this by just adding the additional
    class to the column:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Columns in a mobile are one full width and the other half width with more space
    from the left:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: So this time we have used the `offset` keyword. The number at the end of that
    class name is to control the number of columns you want to offset.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `offset` column count is equal to the total number of `12` columns in the
    row.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s create some complex layout with nested additional rows and columns:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: If you open it up in your browser, you will see that this will create two columns
    within our main content container, `col-sm-9`, which we created earlier. However,
    as our grid is nested, we can create a new row and have a single column or two
    columns, whatever your layout requires. I have added some dummy text to demonstrate
    the nested columns.
  prefs: []
  type: TYPE_NORMAL
- en: Bootstrap will also provide the option to change the ordering of the columns
    in the grid system by using the `col-md-push-*` and `col-md-pull-*` classes.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Observe the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Bootstrap grid system](graphics/image_02_005.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Bootstrap also includes some predefined classes to enable elements to be shown
    or hidden at specific screen sizes. The classes use the same predefined sizes
    as Bootstrap's grid.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, the following will hide an element at a specific screen size:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'This will hide the element on medium devices but it will still be visible on
    mobiles, tablets, and large desktops. To hide an element on multiple devices,
    we need to use multiple classes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Likewise, the same with the visible classes, which work in reverse, showing
    elements at specific sizes.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, unlike the hidden classes, they also require us to set the display
    value. This can be `block`, `inline`, or `inline-block`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Of course, we can use various classes in one element. If, for example, we wanted
    a `block` level element on a smaller screen, but have it become an `inline-block`
    later, we would use the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: If you can't remember the various class sizes, be sure to take another look
    at the *Getting to Bootstrap's grid* section to learn the screen sizes.
  prefs: []
  type: TYPE_NORMAL
- en: Helper classes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Bootstrap also includes a few helper classes that we can use to adapt our layout.
    Let's take a look at some examples.
  prefs: []
  type: TYPE_NORMAL
- en: Floats
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Floating classes of Bootstrap will help you to create a decent layout on the
    web. Here are two Bootstrap classes to pull your elements left and right:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'When we are using floats on elements, we need to wrap our floated elements
    in a `clearfix` class. This will clear the elements and you will be able to see
    the actual height of the container element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: If the `float` classes are directly within an element with the `row` class,
    then our floats are cleared automatically by Bootstrap and the `clearfix` class
    does not need to be applied manually.
  prefs: []
  type: TYPE_NORMAL
- en: Center elements
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To make it center block-level elements, Bootstrap allows this with the `center-block`
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: This will set your element property `margin-left` and `margin-right` properties
    to `auto`, which will center the element.
  prefs: []
  type: TYPE_NORMAL
- en: Show and hide
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You may wish to show and hide elements with CSS, and Bootstrap gives you a
    couple of classes to do this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `show` class sets the `display` property to `block`, so only apply this
    to `block-level` elements and not to elements you wish to be displayed `inline`
    or `inline-block`.
  prefs: []
  type: TYPE_NORMAL
- en: React components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: React is based on a modular build, with encapsulated components that manage
    their own state so it will efficiently update and render your components when
    data changes. In React, a component's logic is written in JavaScript instead of
    templates so you can easily pass rich data through your app and manage the state
    out of the DOM.
  prefs: []
  type: TYPE_NORMAL
- en: Using the `render()` method, we are rendering a component in React that takes
    input data and returns what you want to display. It can either take HTML tags
    (strings) or React components (classes).
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a quick look at examples of both:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'In this example, we are passing HTML as a string into the `render` method which
    we have used before creating the `<Navbar>`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, we are rendering the component, just to create a local
    variable that starts with an uppercase convention. Using the upper versus lowercase
    convention in React's JSX will distinguish between local component classes and
    HTML tags.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, we can create our React elements or components in two ways: either we can
    use Plain JavaScript with `React.createElement` or React''s JSX.'
  prefs: []
  type: TYPE_NORMAL
- en: So, let's create our sidebar elements for the app to better understand the `React.createElement`.
  prefs: []
  type: TYPE_NORMAL
- en: React.createElement()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Using JSX in React is completely optional for creating the React app. As we
    know, we can create elements with `React.createElement` which take three arguments:
    a tag name or component, a properties object, and a variable number of child elements,
    which is optional. Observe the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, we have used `React.createElement` to generate a `ul`-`li`
    structure. React already has built-in factories for common DOM HTML tags.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example for this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s take a quick look at our code in a browser, which should resemble the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![React.createElement()](graphics/image_02_006.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Here is our full code so far that we have written to include the `<Navbar>`
    component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Our app code looks very messy. Now it's time to make our code clean and properly
    structured.
  prefs: []
  type: TYPE_NORMAL
- en: Copy the `navbar` code in another file and save it as `navbar.js`.
  prefs: []
  type: TYPE_NORMAL
- en: Now copy the `sidebar` code in another file and save as `sidebar.js`.
  prefs: []
  type: TYPE_NORMAL
- en: Create one folder in your root directory with the name of the components and
    copy both `navbar.js` and `sidebar.js` inside it.
  prefs: []
  type: TYPE_NORMAL
- en: Include both the `js` file in your `head` section.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `head` section will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'And here is your HTML code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Now our code looks much cleaner. Let''s take a quick look at your code output
    in a browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![React.createElement()](graphics/image_02_007.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When we are referring to the ReactJS file from an external source, we need a
    web server or full stack app such as WAMP or XAMPP because some browsers (for
    example, Chrome) will fail to load the file unless it's served via HTTP.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have developed considerable basic knowledge of Bootstrap and React-Bootstrap
    from this chapter, so let's quickly revise what we have learnt so far.
  prefs: []
  type: TYPE_NORMAL
- en: While going through the definition and use of Bootstrap and React-Bootstrap
    we saw that React-Bootstrap is a very strong candidate with more flexibility and
    a smarter solution.
  prefs: []
  type: TYPE_NORMAL
- en: We have seen how we can create mobile navigation by just using a few features
    of Bootstrap and React-Bootstrap, which work well on all expected devices as well
    as on desktop browsers.
  prefs: []
  type: TYPE_NORMAL
- en: We also looked at the powerful responsive grid system including Bootstrap and
    created a simple two-column layout. While we were doing this, we learnt about
    the four different column class prefixes as well as nesting our grid.
  prefs: []
  type: TYPE_NORMAL
- en: We have also seen some very good features of Bootstrap such as `offset`, `col-md-push-*`,
    `col-md-pull-*`, `hidden-md`, `hidden-lg`, `visible-sm-block`, `visible-md-inline-block`,
    and `helper-classes`.
  prefs: []
  type: TYPE_NORMAL
- en: We hope you are also ready with your responsive layout and navigation. So now
    let's jump on to the next chapter.
  prefs: []
  type: TYPE_NORMAL
