- en: Binary Logging
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Using binary logging
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Binary log format
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Extracting statements from a binary log
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ignoring databases to write to a binary log
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Relocating binary logs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The binary log contains a record of all changes to the database, both data and
    structure. The binary log is not used for statements such as `SELECT` or `SHOW`
    that do not modify data. Running a server with binary logging enabled has a slight
    performance effect. The binary log is crash-safe. Only complete events or transactions
    are logged or read back.
  prefs: []
  type: TYPE_NORMAL
- en: Why should you use binary log?
  prefs: []
  type: TYPE_NORMAL
- en: '**Replication**: You stream the changes made to a server to another server
    using binary logs. The slave acts as a mirror copy and can be used to distribute
    the load. The server that accepts the writes is referred to as a master and the
    mirror copy server is referred to as a slave.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Point-in-time recovery**: Suppose you take a backup at 00:00 on Sunday and
    your database crashed at 8:00 on Sunday. Using backup, you can recover till 00:00
    Sunday. Using binary logs you can reply to them, to recover till 08:00.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using binary logging
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To enable `binlog`, you have to set `log_bin` and `server_id` and restart the
    server. You can mention the path and base name in the `log_bin` itself. For example, `log_bin`
    is set to `/data/mysql/binlogs/server1`, the binary logs are stored in the `/data/mysql/binlogs`
    folder with the name `server1.000001`, `server1.000002`, and so on. The server
    creates a new file in the series each time it starts or flushes the logs or the
    current log's size reaches `max_binlog_size`. It maintains the `server1.index`
    file, which contains the location of each binary log.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's see how to play with the logs. I am sure you are going to love learning
    about them.
  prefs: []
  type: TYPE_NORMAL
- en: Enabling binary logs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Enable binary logging and set the `server_id`. Open the MySQL `config` file
    in your favorite editor and append the following lines. Choose `server_id` such
    that it will be unique to each MySQL server in your infrastructure.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can also simply put the `log_bin` variable in `my.cnf` without any value.
    In that case, the binary log is created in the `data directory` directory and
    uses `hostname` as its name.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Restart the MySQL server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Verify that binary logs are created:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Execute `SHOW BINARY LOGS;` or `SHOW MASTER LOGS;` to display all the binary
    logs of the server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Execute the `SHOW MASTER STATUS;` command to get the current binary log position:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: As soon as `server1.000001` reaches `max_binlog_size` (1 GB default), a new
    file, `server1.000002`, will be created and added to `server1.index`. You can
    configure to set `max_binlog_size` dynamically with `SET @@global.max_binlog_size=536870912`.
  prefs: []
  type: TYPE_NORMAL
- en: Disabling binary logs for a session
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There may be cases where you do not want the statements to be replicated to
    other servers. For that, you can use the following command to disable binary logging
    for that session:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: All the SQL statements logged after executing the previous statement are not
    logged to the binary log. This applies only for that session.
  prefs: []
  type: TYPE_NORMAL
- en: 'To enable, you can execute the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Move to the next log
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can use the `FLUSH LOGS` command to close the current binary log and open
    a new one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Expire binary logs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Binary logs consume a lot of space based on the number of writes. Leaving them
    as-is can fill up the disk in no time. It is essential to clean them up:'
  prefs: []
  type: TYPE_NORMAL
- en: Set the expiry of logs using `binlog_expire_logs_seconds` and `expire_logs_days`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you want to set an expiry period in days, set `expire_logs_days`. For example,
    if you want to delete all the binary logs that are older than two days, `SET @@global.expire_logs_days=2`.
    Setting the value to `0` disables automatic expiry.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to have more granularity, you can use the `binlog_expire_logs_seconds`
    variable, which sets the binary log expiration period in seconds.
  prefs: []
  type: TYPE_NORMAL
- en: The effects of this variable and `expire_logs_days` are cumulative. For example,
    if `expire_logs_days` is `1` and `binlog_expire_logs_seconds` is `43200`, then
    the binary log is purged every 1.5 days. This produces the same result as setting
    `binlog_expire_logs_seconds` to `129600` and leaving `expire_logs_days` set to
    0\. In MySQL 8.0, both `binlog_expire_logs_seconds` and `expire_logs_days` must
    be set to 0 to disable automatic purging of the binary log.
  prefs: []
  type: TYPE_NORMAL
- en: 'To purge the logs manually, execute `PURGE BINARY LOGS TO ''<file_name>''`.
    For example, there are files such as `server1.000001`, `server1.000002`, `server1.000003`,
    and `server1.000004`, and if you execute `PURGE BINARY LOGS TO ''server1.000004''`,
    all the files up to `server1.000003` will be deleted and `server1.000004` will
    not be touched:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: You can also execute the command `PURGE BINARY LOGS BEFORE '2017-08-03 15:45:00'`
    rather than specifying a log file. You can also use the word `MASTER` instead
    of `BINARY`.
  prefs: []
  type: TYPE_NORMAL
- en: '`mysql> PURGE MASTER LOGS TO ''server1.000004''` also works.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To delete all the binary logs and start from the beginning again, execute `RESET
    MASTER`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Purging or expiring logs is a very unsafe method if you are using replication.
    The safe way to purge binary logs is to use the `mysqlbinlogpurge` script, which
    will be covered in [Chapter 12](part0417.html#CDLQI0-faa69fe6f4c04957afca3568dcd9cd83),
    *Managing Logs*.
  prefs: []
  type: TYPE_NORMAL
- en: Binary log format
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Binary logs can be written in three formats:'
  prefs: []
  type: TYPE_NORMAL
- en: '`STATEMENT`: Actual SQL statements are logged.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`ROW`: Changes made to each row are logged.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For example, an update statement updates 10 rows, the updated information of
    all 10 rows is written to the log. Whereas in statement-based replication, only
    the update statement is written. The default format is `ROW`.
  prefs: []
  type: TYPE_NORMAL
- en: '`MIXED`: MySQL switches from `STATEMENT` to `ROW` as and when needed.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There are statements that can cause different results when executed on different
    servers. For example, the output of the `UUID()` function differs from server
    to server. Those statements are called non-deterministic and are unsafe for statement-based
    replication. In those situations, a MySQL server switches to row-based format
    when you set the `MIXED` format.
  prefs: []
  type: TYPE_NORMAL
- en: Refer to [https://dev.mysql.com/doc/refman/8.0/en/binary-log-mixed.html](https://dev.mysql.com/doc/refman/8.0/en/binary-log-mixed.html)
    to learn more about the unsafe statements and when switching happens.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can set the format using the dynamic variable, `binlog_format`, which has
    both global and session scope. Setting it at global level makes all clients use
    the specified format:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Or:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Refer to [https://dev.mysql.com/doc/refman/8.0/en/replication-sbr-rbr.html ](https://dev.mysql.com/doc/refman/8.0/en/replication-sbr-rbr.html)to
    learn about the advantages and disadvantages of various formats.
  prefs: []
  type: TYPE_NORMAL
- en: MySQL 8.0 uses version 2 binary log row events, which cannot be read by MySQL
    Server releases prior to MySQL 5.6.6\. Set `log-bin-use-v1-row-events` to `1`
    to use version 1 so that it can be read by versions prior to MySQL 5.6.6\. The
    default is `0`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'When you create a stored function, you must declare either that it is deterministic
    or that it does not modify data. Otherwise, it may be unsafe for binary logging.
    By default, for a `CREATE FUNCTION` statement to be accepted, at least one of
    `DETERMINISTIC`, `NO SQL`, or `READS SQL DATA` must be specified explicitly. Otherwise
    an error occurs:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'You can write non-deterministic statements inside a routine and still declare
    as `DETERMINISTIC` (not a good practice), if you want to replicate routines that
    are not declared as `DETERMINISTIC`, you can set the `log_bin_trust_function_creators`
    variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mysql> SET GLOBAL log_bin_trust_function_creators = 1;`'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Refer to [https://dev.mysql.com/doc/refman/8.0/en/stored-programs-logging.html](https://dev.mysql.com/doc/refman/8.0/en/stored-programs-logging.html) to
    learn more about how the stored programs are replicated.
  prefs: []
  type: TYPE_NORMAL
- en: Extracting statements from a binary log
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can use the `mysqlbinlog` utility (shipped along with MySQL) to extract
    the contents from binary logs and apply them to other servers.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Execute a few statements using various binary formats. When you set the `binlog_format`
    at `GLOBAL` level, you have to disconnect and reconnect to get the changes. If
    you want to be connected, set at `SESSION` level.
  prefs: []
  type: TYPE_NORMAL
- en: 'Change to **statement-based replication** (**SBR**):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Update a few rows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Change to **row-based replication** (**RBR**):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Update a few rows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Change to `MIXED` format:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Update a few rows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To display the contents of `server1.000001`, execute the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'You will get output similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: In the first line, the number following `# at` indicates the starting position
    (file offset) of the event in the binary log file. The second line contains the
    timestamp at which the statement started on the server. The timestamp is followed
    by `server id`, `end_log_pos`, `thread_id`, `exec_time`, and `error_code`.
  prefs: []
  type: TYPE_NORMAL
- en: '`server id`: Is the `server_id` value of the server where the event originated
    (`200` in this case).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`end_log_pos`: Is the start position of the next event.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`thread_id`: Indicates which thread executed the event.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`exec_time`: Is the time spent executing the event, on a master server. On
    a slave, it is the difference of the end execution time on the slave minus the
    beginning execution time on the master. The difference serves as an indicator
    of how much replication lags behind the master.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`error_code`: Indicates the result from executing the event. Zero means that
    no error occurred.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Observations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You executed the `UPDATE` statement in statement-based replication and the
    same statement is logged in the binary log. Apart from the server, session variables
    are also saved in the binary log to replicate the same behavior on the slave:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: When row-based replication is used, instead of the statement, the `ROW` is saved,
    which is in binary format and you cannot read. Moreover, you can observe the length,
    a single update statement generated so much data. Check the *Extract row event
    display* section, which explains how to view the binary format.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'When `MIXED` format is used, the `UPDATE` statement is logged as SQL, whereas
    the `INSERT` statement is logged in row-based format since the `INSERT` has an `UUID()`
    function that is non-deterministic:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: The extracted log can be piped to MySQL to replay the events. It is better to
    use the force option while replaying binlogs because, if it is stuck at one point,
    it won't stop executing. Later, you can figure out the errors and fix the data
    manually.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Or you can save into a file and execute later:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Extracting based on time and position
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can extract the partial data from the binary log by specifying the position.
    Suppose you want to do point-in-time recovery. Assume a `DROP DATABASE` command
    was executed at `2017-08-19 12:18:00` and the latest available backup was `2017-08-19
    12:00:00`, which you already restored. Now, you need to restore data from `12:00:01`
    till `2017-08-19 12:17:00`. Remember, if you extract the full log, it will also
    contain the `DROP DATABASE` command and it will wipe your data again.
  prefs: []
  type: TYPE_NORMAL
- en: You can extract the data by specifying the time window through `--start-datetime`
    and `--stop-datatime` options.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: The disadvantage of using a time window is you will miss the transactions that
    happened at the second the disaster occurred. To avoid this, you have to use the
    file offset of the event in the binary log file.
  prefs: []
  type: TYPE_NORMAL
- en: A consistent backup saves the binlog file offset until which it has already
    backed up. Once the backup is restored, you have to extract the binlogs from the
    offset provided by the backup. You will learn more about backups in the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Assume that the backup has given an offset of `471` and the `DROP DATABASE`
    command was executed at an offset of `1793`. You can use `--start-position` and
    `--stop-position` options to extract a log between offsets:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Make sure that the `DROP DATABASE` command does not appear again in the extracted
    binlog.
  prefs: []
  type: TYPE_NORMAL
- en: Extracting based on the database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using the `--database` option, you can filter events of a specific database.
    If you give this multiple times, only the last option will be considered. This
    works very well for row-based replication. But for statement-based replication
    and `MIXED`, this gives output only when the default database is selected.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following command extracts events from the employees database:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'As explained in the MySQL 8 reference manual, suppose the binary log was created
    by executing these statements using statement-based-logging:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: '`mysqlbinlog --database=test` does not output the first two `INSERT` statements
    because there is no default database.'
  prefs: []
  type: TYPE_NORMAL
- en: It outputs the three `INSERT` statements following `USE test`, but not the three
    `INSERT` statements following `USE db2`.
  prefs: []
  type: TYPE_NORMAL
- en: '`mysqlbinlog --database=db2` does not output the first two `INSERT` statements
    because there is no default database.'
  prefs: []
  type: TYPE_NORMAL
- en: It does not output the three `INSERT` statements following `USE` test, but does
    output the three `INSERT` statements following `USE db2`.
  prefs: []
  type: TYPE_NORMAL
- en: Extracting a row event display
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In row-based replication, by default, binary format is displayed. To view the
    `ROW` information, you have to pass the `--verbose` or `-v` option to `mysqlbinlog`.
    The binary format of row events are shown as comments in the form of *pseudo-SQL*
    statements with lines beginning with `###`. You can see that a single `UPDATE`
    statement is rewritten as an `UPDATE` statement for each row:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'If you want to just see the pseudo-SQL without the binary row information,
    specify `--base64-output="decode-rows"` along with `--verbose`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: Rewriting a database name
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Suppose you want to restore the binary log of the `employees` database on a
    production server as `employees_dev` on a development server. You can use the `--rewrite-db='from_name->to_name'`
    option. This will rewrite all occurrences of `from_name` to `to_name`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To convert multiple databases, specify the option multiple times:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: You can see that the statement `use `employees_dev`/*!*/;` is used. So, while
    restoring, all the changes will be applied to `employees_dev database`.
  prefs: []
  type: TYPE_NORMAL
- en: 'As explained in the MySQL reference manual:'
  prefs: []
  type: TYPE_NORMAL
- en: When used together with the `--database` option, the `--rewrite-db` option is
    applied first, then the `--database` option is applied using the rewritten database
    name. The order in which the options are provided makes no difference in this
    regard. This means that, for example, if `mysqlbinlog` is started with `--rewrite-db='mydb->yourdb'
    --database=yourdb`, then all updates to any tables in databases `mydb` and `yourdb`
    are included in the output.
  prefs: []
  type: TYPE_NORMAL
- en: 'On the other hand, if it is started with `--rewrite-db=''mydb->yourdb'' --database=mydb`,
    then `mysqlbinlog` outputs no statements at all: since all updates to `mydb` are
    first rewritten as updates to `yourdb` before applying the `--database` option,
    there remain no updates that match `--database=mydb`.'
  prefs: []
  type: TYPE_NORMAL
- en: Disabling a binary log for recovery
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'While restoring binary logs, if you don’t want the `mysqlbinlog` process to
    create binary logs, you can use the `--disable-log-bin` option so that binary
    logs won''t be written:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: You can see that `SQL_LOG_BIN=0` is written to the `binlog` restore file, which
    will prevent creating the binlogs.
  prefs: []
  type: TYPE_NORMAL
- en: '`/*!32316 SET @OLD_SQL_LOG_BIN=@@SQL_LOG_BIN, SQL_LOG_BIN=0*/;`'
  prefs: []
  type: TYPE_NORMAL
- en: Displaying events in a binary log file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Apart from using `mysqlbinlog`, you can also use the `SHOW BINLOG EVENTS` command
    to display the events.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following command will display the events in the `server1.000008` binary
    log. If `LIMIT` is not specified, all the events are displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also specify the position and offset:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Ignoring databases to write to a binary log
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can choose which databases should be written to the binary log by specifying
    the `--binlog-do-db=db_name` option in `my.cnf`. To specify multiple databases
    you *must* use multiple instances of this option. Because database names can contain
    commas, the list will be treated as the name of a single database if you supply
    a comma-separated list. You need to restart the MySQL server to effect changes.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Open `my.cnf` and add the following lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: The behavior on `binlog-do-db` changes from statement-based logging to row-based
    logging just like the `--database` option in the `mysqlbinlog` utility.
  prefs: []
  type: TYPE_NORMAL
- en: In statement-based logging, only those statements are written to the binary
    log where the default database (that is, the one selected by `USE`) is written
    to the binary log. You should be very careful while using the `binlog-do-db` option
    because it does not work as you might expect when using statement-based logging.
    Go through the following examples mentioned in the reference manual.
  prefs: []
  type: TYPE_NORMAL
- en: Example 1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If the server is started with `--binlog-do-db=sales` and you issue the following
    statements, the `UPDATE` statement is not logged:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: The main reason for this *just check the default database* behavior is that
    it is difficult from the statement alone to know whether it should be replicated.
    It is also faster to check only the default database rather than all databases
    if there is no need.
  prefs: []
  type: TYPE_NORMAL
- en: Example 2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If the server is started with `--binlog-do-db=sales`, the following `UPDATE`
    statement is logged even though prices were not included when setting `--binlog-do-db`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: Because sales is the default database when the `UPDATE` statement is issued,
    the `UPDATE` is logged.
  prefs: []
  type: TYPE_NORMAL
- en: In row-based logging, it is restricted to database `db_name`. Only changes to
    tables belonging to `db_name` are logged; the default database has no effect on
    this.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another important difference in `--binlog-do-db` handling for statement-based
    logging, as opposed to the row-based logging, occurs with regard to statements
    that refer to multiple databases. Suppose that the server is started with `--binlog-do-db=db1`,
    and the following statements are executed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: If you are using statement-based logging, the updates to both tables are written
    to the binary log. However, when using the row-based format, only the changes
    to `table1` are logged; `table2` is in a different database, so it is not changed
    by the `UPDATE`.
  prefs: []
  type: TYPE_NORMAL
- en: Similarly, you can use the `--binlog-ignore-db=db_name` option to ignore the
    database from writing to the binary log.
  prefs: []
  type: TYPE_NORMAL
- en: Refer to the manual for more information, at: [https://dev.mysql.com/doc/refman/8.0/en/replication-rules.html](https://dev.mysql.com/doc/refman/8.0/en/replication-rules.html).
  prefs: []
  type: TYPE_NORMAL
- en: Relocating binary logs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Since binary logs occupy more space, and sometimes you may wish to change the
    location of binary logs, the following procedure helps. Changing the `log_bin`
    alone is not sufficient, you have to move all the binary logs and update the index
    file with the new location. The `mysqlbinlogmove` utility eases your work by automating
    those tasks.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: MySQL Utilities should be installed for using the `mysqlbinlogmove` script.
    Refer to [Chapter 1](part0025.html#NQU20-faa69fe6f4c04957afca3568dcd9cd83), *MySQL
    8.0 – Installing and Upgrading*,  for installation steps.
  prefs: []
  type: TYPE_NORMAL
- en: 'Stop the MySQL server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'Start the `mysqlbinlogmove` utility. If you want to change the binary logs
    from `/data/mysql/binlogs` to `/binlogs`, the following command should be used.
    If your base name is not default, you have to mention your base name through the `--bin-log-base
    name` option:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'Edit the `my.cnf` file and update the new location of `log_bin`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'Start the MySQL server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: The new location is updated in AppArmor or SELinux.
  prefs: []
  type: TYPE_NORMAL
- en: If there are a lot of binlogs, the downtime of the server will be high. To avoid
    that you can use the `--server` option to relocate all binary logs except the
    ones currently in use (with the higher sequence number). Then stop the server,
    use the preceding method, and relocate the last binary log, which will be much
    faster because only one file is there. Then you can change the `my.cnf` and start
    the server.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
