- en: Appendix III
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
- en: Developing and improving strategies
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this appendix, we will cover a number of key points regarding algorithmic
    trading strategies that ought to be considered while executing them.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: Strategy profitability is subject to seasons
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Strategies may not return good results all year round. They can be seasonal,
    meaning they may perform well at certain times of the year and not so well at
    other times. So, it is essential to identify the right time or the right season
    for a strategy and to use it only at those times.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: Strategy profitability is subject to its parameter values
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A strategy depends on various parameters. The same strategy may perform differently
    for different instruments and for different values of the technical indicators.
    For example, an **exponential moving average** (**EMA**) strategy with parameters
    (time periods) 4 and 9 may perform well for STOCK X, but the same strategy with
    different parameter values, say 5 and 13, may not perform well for STOCK X, or
    even the same strategy with the same parameter values may not perform well for
    STOCK Y. Hence, finding the right instrument and parameters can make your strategies
    successful.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: You can use optimization algorithms to find the right combination of parameters
    that make your strategy profitable. The cost function can be your backtesting
    profit and loss (to be maximized) and drawdown (to be minimized). The variables
    can be instruments and strategy parameter values.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: Backtesting alone does not ensure strategy profitability
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A profitable backtesting report is one of the prerequisites for profitable trading,
    but not the only prerequisite. This increases the chances of a strategy performing
    well during actual trading, but does not guarantee it. There are many other factors
    that can affect the actual strategy performance besides historical results. Risk
    management conditions should be well placed in your strategy to minimize the adverse
    effects in case of any such unforeseen circumstances. One of the ways of ensuring
    this is through the use of **bracket** or **cover orders**, where a compulsory
    stop loss is placed at all times.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: Broker limitations
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Not all brokers provide APIs for algorithmic trading. Also, if APIs are provided,
    the broker may not provide support for all types of orders, such as bracket or
    cover orders that have in-built risk management. Check and verify all support
    and services offered by a particular broker before availing yourself of their
    services. Choosing the right broker may minimize strategy coding at your end.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: Staying connected with the community
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can get support for coding your own strategy by posing your questions to
    the community on the forum. You can also get insights and pointers in relation
    to proven and well-tested strategy coding guidelines. Moreover, you can learn
    more from books on technical analysis and other forums for algorithmic trading.
    Keep an eye on GitHub repositories providing free strategies along with their
    Python code (for example, [https://github.com/algobulls/pyalgostrategypool](https://github.com/algobulls/pyalgostrategypool)).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: Be prepared for technology failures during actual trading
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'No matter how robust your strategy is, strategy execution may not happen as
    planned during actual trading. This could happen for a variety of reasons:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: Broker APIs may experience a timeout failure due to the overloading of their
    servers. This frequently happens during market opening hours, where a large number
    of traders place orders at nearly the same time to grab market opening opportunities.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A broker technology stack may depend on multiple vendors, besides its own proprietary
    technology, which means that even if just one of them fails, you can fall victim
    to it as your order placements might not go through.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you are using an algorithmic trading platform, it may fail for the same reasons
    as mentioned in the first point above.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Your strategy might fail as it may have encountered a new condition that was
    not covered in testing. For example, if you place an order involving a very large
    quantity during actual trading, the order may split into multiple smaller orders
    that are executed individually. If your strategy hasn't accounted for this, it
    may fail. Moreover, such scenarios cannot be caught during backtesting as this
    is virtual trading and orders never split there, so providing a solution for this
    may be tricky.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你的策略可能会失败，因为它可能遇到了在测试中未涵盖的新条件。例如，如果你在实际交易中下达涉及非常大数量的订单，订单可能会分成多个较小的订单分别执行。如果你的策略没有考虑到这一点，它可能会失败。此外，这样的情况在回测期间是无法捕捉到的，因为那是虚拟交易，订单在那里不会分裂，因此为此提供解决方案可能会棘手。
- en: Historical data feeds may go out the window. There can either be stale data
    or no data, both of which can result in incorrect decisions being taken in relation
    to your strategy.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 历史数据源可能会失效。可能会出现过时的数据或没有数据，这两种情况都可能导致与你的策略相关的错误决策。
