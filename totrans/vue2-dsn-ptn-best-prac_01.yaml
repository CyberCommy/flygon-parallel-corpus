- en: Vue.js Principles and Comparisons
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we'll be looking at why Vue is an important web development
    framework, as well as looking at setting up our development environment. If we're
    looking to use Vue for our next project, it's important we realize the implications,
    time investment, and learning curve when doing so. You'll have considered how
    Vue shapes up to other frontend development projects, as well as creating your
    first application with Vue.
  prefs: []
  type: TYPE_NORMAL
- en: 'In summary, we''ll be considering the following points:'
  prefs: []
  type: TYPE_NORMAL
- en: Downloading the book prerequisites
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding of where Vue fits into a frontend framework
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Why you should consider using Vue as the framework for your next project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Investigation of how flexible Vue is and its role in mobile development
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Prerequisites
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Although you could develop Vue applications without Node, we'll be using Node.js
    throughout this book to manage dependencies and interact with the Vue **Command
    Line Interface** (**CLI**). This allows us to bootstrap projects quicker and gives
    us a better development experience as we can use ECMAScript 2015 by default. Let's
    have a quick refresher on setting up your development environment.
  prefs: []
  type: TYPE_NORMAL
- en: Windows
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Installing Node for Windows is as simple as visiting [https://nodejs.org](https://nodejs.org/)
    and downloading the latest version. Ensure that when following the installation
    steps, Add to PATH is selected as this will allow us to access node commands within
    our Terminal.
  prefs: []
  type: TYPE_NORMAL
- en: Once you've done that, check your Node installation works by typing `node -v`
    and `npm -v`. If you get two version numbers back (that is, one for each), then
    you're ready to go ahead with the rest of the book!
  prefs: []
  type: TYPE_NORMAL
- en: Mac
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Installing Node for Mac involves a little more work than simply downloading
    the installer from the Node website. While it is possible to use the installer
    from [https://nodejs.org](https://nodejs.org/),it is not advised due to the requirement
    of `sudo`.
  prefs: []
  type: TYPE_NORMAL
- en: If we did it this way, we'd have to prefix all of our `npm` commands with `sudo`
    and this can leave our system vulnerable to potential scripting attacks and is
    inconvenient. Instead, we can install Node via the Homebrew package manager and
    we can then interact with `npm` without worrying about having to run things as
    `sudo`.
  prefs: []
  type: TYPE_NORMAL
- en: Another great thing about using Homebrew to install Node is that it's automatically
    added to our PATH. This means we'll be able to type node commands without having
    to fiddle around with our environment files.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Node via Homebrew
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The quickest way to get Homebrew is to visit [http://brew.sh](http://brew.sh/)
    and get hold of the installation script. It should look a little something like
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Simply paste that into your Terminal and it'll download the Homebrew package
    manager to your Mac. We can then use brew install node to install Node on our
    system without any worries.
  prefs: []
  type: TYPE_NORMAL
- en: Once you've done that, check your Node installation works by typing `node -v`
    and `npm -v`. If you get two version numbers back (that is, one for each), then
    you’re ready to go ahead with the rest of the book!
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to manage the different Node versions, we could also install the **Node
    Version Manager** (**NVM**). Do note however that this is currently only supported
    by Mac at present and not Windows. To install NVM, we can use Homebrew like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Editor
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A variety of editors can be used, such as Visual Studio Code, Sublime Text,
    Atom, and WebStorm. I recommend Visual Studio Code ([https://code.visualstudio.com](https://code.visualstudio.com))
    as it has a frequent release cycle and a wealth of Vue extensions that we can
    use to improve our workflow.
  prefs: []
  type: TYPE_NORMAL
- en: Browser
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will be using Google Chrome to run our project(s) as this has an extension
    named Vue devtools that is instrumental to our development workflow. If you do
    not use Google Chrome, ensure your browser has the same Vue devtools extension
    that is available for usage.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the Vue devtools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Head over to the Google Chrome Extensions store and download Vue.js devtools
    ([https://goo.gl/Sc3YU1](https://goo.gl/Sc3YU1)). After installing this, you''ll
    then have access to the Vue panel within your developer tools. In the following
    example, we''re able to see the data object inside of our Vue instance:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'If we then head over to our browser and open up the devtools we can see that
    Vue has been detected and that our message has outputted on to the screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/1154a7c6-8c1c-461f-89a9-b86d0c9e7e79.png)'
  prefs: []
  type: TYPE_IMG
- en: We'll be using this throughout the book to gain extra insight into our applications.
    Do be aware that the developer tools will only recognize your Vue project if it
    is served on a local server.
  prefs: []
  type: TYPE_NORMAL
- en: Vue CLI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To take advantage of all of the features of Vue, we''ll be using Vue CLI. This
    allows us to create projects with various starter templates with appropriate bundling/transpilation
    configurations. Type the following into your Terminal ensuring Node is installed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This sets us up for the future sections as using starter templates significantly
    empowers our workflow.
  prefs: []
  type: TYPE_NORMAL
- en: How Vue.js compares
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book seeks to outline how to best structure your Vue applications with
    common development patterns, best practices, and anti-patterns to avoid.
  prefs: []
  type: TYPE_NORMAL
- en: Our journey starts by taking a look at how Vue shapes up to other common projects,
    and if you measure your frameworks by GitHub stars, Vue is clearly a future winner.
    According to [https://bestof.js.org](https://bestof.js.org), in 2017 it currently
    measures at 114 stars per day in comparison to React's 76 and Angular's 32.
  prefs: []
  type: TYPE_NORMAL
- en: Framework discussion when talking about modern web development technologies
    is an interesting one. Very rarely do you find a true, unbiased comparison...
    but that's fine! It's not about which framework or library is best, but rather
    what's best for your team, project goals, consumers, and hundreds of other variables.
    As a Vue developer, you're likely a person that wants to build reactive web applications
    with a simple, easy-to-use API.
  prefs: []
  type: TYPE_NORMAL
- en: 'It''s this adaptable, easy-to-use API that makes Vue pleasant to work with,
    and perhaps one of the strongest points of Vue is the simple, focused documentation.
    It has a significantly low barrier to entry: simply add a script file from a CDN,
    initialize a new Vue instance... and you''re away! Granted, there''s much more
    to Vue than this, but in contrast to some fully fledged frameworks such as Angular,
    you''d be forgiven for thinking it''s that easy.'
  prefs: []
  type: TYPE_NORMAL
- en: Vue uses templates, declarative bindings, and a component-based architecture
    to separate concerns and make projects easier to maintain. This becomes especially
    important when considering which framework to use inside of an enterprise. Usually,
    this is where projects such Angular shine as it's ability to enforce standards
    across the entire project.
  prefs: []
  type: TYPE_NORMAL
- en: We've established it's easy to use, but Vue is quite young in comparison to
    its competitors... how do we know it's not all hype? Is it being used in production
    by anyone? It certainly is! GitLab recently wrote an article about why they chose
    Vue.js ([https://about.gitlab.com/2016/10/20/why-we-chose-vue/](https://about.gitlab.com/2016/10/20/why-we-chose-vue/)),
    and the primary benefits they cited were ease of use, less code, and fewer assumptions.
    Other companies such as Laravel, Nintendo, Sainsbury's and Alibaba are all following
    this route and even companies such as Rever Shine rewrote their web client from
    Angular 2.x to Vue 2.x ([https://medium.com/reverdev/why-we-moved-from-angular-2-to-vue-js-and-why-we-didnt-choose-react-ef807d9f4163](https://medium.com/reverdev/why-we-moved-from-angular-2-to-vue-js-and-why-we-didnt-choose-react-ef807d9f4163)).
  prefs: []
  type: TYPE_NORMAL
- en: It's not just public – facing web applications that are taking advantage of
    Vue.js—NativeScript Sidekick ([https://www.nativescript.org/blog/announcing-the-nativescript-sidekick-public-preview](https://www.nativescript.org/blog/announcing-the-nativescript-sidekick-public-preview)),
    a project focused on improving the NativeScript development experience, is built
    with Electron and Vue.js.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we gain some insights from the State of JavaScript survey ([http://2016.stateofjs.com/2016/frontend/](http://2016.stateofjs.com/2016/frontend/))
    by Sacha Greif ([https://twitter.com/SachaGreif](https://twitter.com/SachaGreif))
    and Michael Rambeau ([http://michaelrambeau.com/](http://michaelrambeau.com/)),
    we can see that a whopping **89%** of people used Vue before and want to use it
    again. Other libraries such as React have similar satisfaction rates at **92%**,
    but Angular 2 and onwards didn''t see anywhere near as much love, with **65%**
    wanting to use it again:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/c4a92ed0-fa01-40d4-8f55-f7b42de01887.png)'
  prefs: []
  type: TYPE_IMG
- en: What other options are available to us as frontend developers? How do they shape
    up to Vue? Let's start with React.
  prefs: []
  type: TYPE_NORMAL
- en: React
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: React is a JavaScript library developed and maintained by Facebook, and is largely
    the closest comparison to Vue as their goals are very similar. Like Vue, React
    is component based and takes advantage of Virtual DOM concepts. This allows for
    performant rendering of DOM nodes, as a different algorithm is used to determine
    which parts of the DOM have changed and how best to render/update them on change.
  prefs: []
  type: TYPE_NORMAL
- en: 'When it comes to templates, React uses JSX to render items on the screen. It
    takes the more verbose way of creating DOM elements with `React.createElement`
    and simplifies it like so:'
  prefs: []
  type: TYPE_NORMAL
- en: 'This is how it will look without JSX:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is how it will look with JSX. As you can see, the two appear very different
    from one another:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: For newer developers, this adds a slight learning overhead when compared to
    Vue's simple HTML template, but it is also what gives React its declarative power.
    It has a state management system using `setState()`, but also has compatibility
    with third-party state containers such as Redux and MobX. Vue also has similar
    capabilities with the `Vuex` library, and we'll be looking at this in further
    detail in later sections of this book.
  prefs: []
  type: TYPE_NORMAL
- en: One of the common recent concerns of using React is the BSD + Patents license
    agreement, something to keep in mind if you're part of an enterprise. Due to this
    license, Apache recently declared that no Apache software products will use React.
    Another example of this is the announcement by [Wordpress.com](http://Wordpress.com)
    that they're no longer using React for their Gutenberg project ([https://ma.tt/2017/09/on-react-and-wordpress/](https://ma.tt/2017/09/on-react-and-wordpress/)).
    This doesn't necessarily mean that you shouldn't use React in your projects, but
    is worth pointing out nonetheless.
  prefs: []
  type: TYPE_NORMAL
- en: Some concerned developers elect to use alternatives such as Preact but more
    recently Vue.js, as it meets a lot of the goals that React developers are looking
    for when developing applications. To that end, Microsoft ([http://dev.office.com/fabric#/components](http://dev.office.com/fabric#/components)),
    Apple ([https://developer.apple.com/documentation](https://developer.apple.com/documentation)),
    and countless other companies have products released with React – make of that
    what you will.
  prefs: []
  type: TYPE_NORMAL
- en: Angular
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Angular is an opinionated JavaScript framework developed and maintained by Google.
    At the time of writing, it's currently approaching version 5 and offers a structured
    standards-based approach to web development. It uses TypeScript to enforce type
    safety and ECMAScript 2015 > support.
  prefs: []
  type: TYPE_NORMAL
- en: In comparison to Angular, Vue looks to enforce a smaller set of constraints
    and allows the developer more choice. One of Angular's core competencies is TypeScript
    everywhere. Most developers that came from Angular.js were hearing about TypeScript
    for the first time when Angular 2 was announced, and I noticed a fair amount of
    backlash because of the need to "learn a new language". The thing is, JavaScript
    is TypeScript and the value of increased tooling (autocompletion, refactoring,
    type safety, and much more) cannot be overlooked.
  prefs: []
  type: TYPE_NORMAL
- en: This is especially true when it comes to working on enterprise projects as the
    onboarding challenge gets harder with increased project complexity and team size.
    With TypeScript, we're able to better reason about the relationships between our
    code at scale. It's this structured development experience that is the prime strength
    of Angular. This is why the Angular team chose TypeScript as the primary development
    tool. The benefits of TypeScript are not limited to Angular; we'll be looking
    at how we can integrate Vue with TypeScript to gain these same benefits later
    on in the book.
  prefs: []
  type: TYPE_NORMAL
- en: Are there any drawbacks to using Angular as a development framework? Not necessarily.
    When we're comparing it to Vue, the onboarding experience is vitally different.
  prefs: []
  type: TYPE_NORMAL
- en: Mobile development
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When it comes to developing mobile applications, projects such as Angular and
    React are great choices for developing mobile-first applications. The success
    of the NativeScript, React Native, and Ionic Framework projects have boosted the
    significant popularity of these frameworks. For instance, Ionic Framework currently
    has more stars than Angular on GitHub!
  prefs: []
  type: TYPE_NORMAL
- en: 'Vue is making waves in this area with projects such as NativeScript Vue, Weex,
    and Quasar Framework. All of the listed projects are relatively new, but it only
    takes one to truly spike the popularity of Vue in production even further. Using
    NativeScript Vue as an example, it only takes 43 lines of code to create a cross-platform
    mobile application that connects to a REST API and displays the results on screen.
    If you''d like to follow along with this yourself, run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we can place the following inside of our `app/app.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'If we then run our code, we can see a list of posts. You''ll notice that our
    Vue code is declarative, and we have the power of larger frameworks at our disposal
    with much less code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/533f7db4-3b7c-495c-9897-88cd50b6da2f.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Server-Side Rendering (SSR)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Server-Side Rendering allows us to take our frontend JavaScript application
    and render it to static HTML on the server. This is important as it allows us
    to significantly speed up our application as the browser only has to parse the
    critical HTML/CSS. Maximizing performance is a key component of modern day web
    applications and the expectation continues to grow with progressive web applications
    and projects such as AMP. Both React, Angular and Vue are capable of SSR using
    a variety of different patterns.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at how we can achieve a simple Server-Side rendered Vue
    application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside `server.js`, we can create a new Vue instance and use the Vue renderer
    to output the content of our instance as an HTML:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'To run the application, type the following in the Terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'We can then open this in our browser at `http://localhost: 8080` and we''d
    see the current date and time on screen. This is a simple example but we were
    able to see our application rendered using the `vue-server-renderer`. Notice how
    we''re not defining a target element to render content within our Vue instance;
    this is handled by the `renderer.renderToString` function.'
  prefs: []
  type: TYPE_NORMAL
- en: You'll also notice that we have the `data-server-rendered="true"` attribute
    on our DOM node, which isn't present on a client-side rendered Vue application.
    This allows us to hydrate our client-side instance with our server-side instance,
    something we'll be looking at more detail in the later chapter(s) on Nuxt ([https://nuxtjs.org/](https://nuxtjs.org/)).
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The choice of web framework in the enterprise is always going to be dependent
    on the goals of your project, team, and organizational priorities. No one framework
    is the correct choice, because optimal means different things depending on the
    context. Each framework or library has its own unique benefits, drawbacks, and
    priorities. If your priority is to create web applications quickly and at scale,
    Vue can compete with the other market solutions.
  prefs: []
  type: TYPE_NORMAL
- en: Vue is feature rich, declarative, and highly legible. Even though it's a simplistic
    framework, the declarative nature of Vue allows us to get up and running at blazing
    fast speed without having to worry about overly complex patterns.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we looked at how we can set up our development environment
    and how Vue is being used in many products throughout the industry. We've learned
    that Vue is a simple, yet powerful frontend development framework. As well as
    this, we've considered how Vue shapes up when compared to other popular projects,
    such as Angular and React. We've also looked at how Vue works with other technologies,
    such as NativeScript, to create cross-platform native mobile applications. Finally,
    we've investigated SSR at a high level and set the stage for chapters to come.
    Hopefully, by now you're convinced that Vue is worth learning, and you're looking
    forward to taking advantage of all it has to offer!
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we'll be looking at the Vue CLI and how to take advantage
    of tools such as Webpack to create our Vue projects. As well as this, we'll look
    at how to take advantage of static types and tooling with TypeScript and reactive
    observable patterns with RxJS within Vue.
  prefs: []
  type: TYPE_NORMAL
