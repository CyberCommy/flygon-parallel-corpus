- en: 14\. Collecting Container Logs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Overview
  prefs: []
  type: TYPE_NORMAL
- en: In the previous chapter, we made sure we were collecting metrics data for our
    running Docker containers and services. This chapter builds on this and dedicates
    itself to collecting and monitoring the logs for Docker containers and the applications
    running on them. It will start with a discussion of why we need to have a clear
    log monitoring strategy for our development projects and discuss some of the things
    we need to remember. We will then introduce the main player in our log monitoring
    strategy – that is, Splunk – to collect, visualize, and monitor our logs. We'll
    install Splunk, forward log data from our system and running containers, and use
    the Splunk query language to set up monitoring dashboards that work with the log
    data we've collected. By the end of this chapter, you will have the skills to
    set up a centralized log monitoring service for your Docker container project.
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Whenever something goes wrong with our running applications or service, the
    first thing we usually look for in our application logs is a clue as to what is
    causing the issue. So, it becomes important to understand how you'll be collecting
    logs and monitoring log events for your project.
  prefs: []
  type: TYPE_NORMAL
- en: As we implement a microservice architecture with Docker, it becomes more important
    to ensure we are able to see the logs our applications and containers are generating.
    As the number of containers and services grows, trying to access each running
    container individually becomes increasingly unwieldy as a means of troubleshooting
    any issues that arise. For scalable applications, where they scale up and down
    depending on demand, it may become increasingly difficult to track log errors
    across multiple containers.
  prefs: []
  type: TYPE_NORMAL
- en: Ensuring we have a proper log monitoring strategy in place will help us troubleshoot
    our applications and ensure our services are running at their optimum efficiency.
    It will also help us to lessen the amount of time we spend searching through our
    logs.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are a few things you will need to consider when building a log monitoring
    strategy for your project:'
  prefs: []
  type: TYPE_NORMAL
- en: Your application will be using a framework to handle logs. Sometimes, this can
    cause an overhead on the container, so make sure you are testing your containers
    to ensure they are able to run without any issues with this logging framework.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Containers are transient, so the logs will be lost each time the container is
    shut down. You must either forward the logs to a logging service or store the
    logs in a data volume to make sure you can troubleshoot any issues that may arise.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Docker contains a logging driver that's used to forward log events to a Syslog
    instance running on the host. Unless you are using the Enterprise version of Docker,
    the `log` command will not work (though it will for JSON) if you are using a specific
    logging driver.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Log aggregation applications will usually charge you for the amount of data
    they are ingesting in their service. And, if you have a service deployed on your
    environment, you will also need to think about storage requirements – especially
    how long you plan to keep your logs.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You will need to consider how your development environment will operate compared
    to your production environment. For example, there is no need to keep logs in
    your development environment for a long period, but production may have a requirement
    for you to keep them for a while.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You may not just need application data. You may need to collect logs for your
    application, the container the application is running on, and the underlying host
    and operating system on which both the application and the container are running.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are many applications we could use as part of our log monitoring strategy,
    including Splunk, Sumo Logic, Nagios Logs, Data Dog, and Elasticsearch. In this
    chapter, we have decided to use Splunk as our log monitoring application. It is
    one of the oldest applications and has a large community of support and documentation.
    It is also the best when it comes to working with data and creating visualizations.
  prefs: []
  type: TYPE_NORMAL
- en: You'll see in the following sections how easy it is to get the application up,
    running, and configured so that you can start monitoring your system logs and
    our container applications.
  prefs: []
  type: TYPE_NORMAL
- en: Introducing Splunk
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Long before Docker's rise in popularity, Splunk was established in 2003 to help
    companies discover some patterns and information from the bulk of data provided
    by the growing number of applications and services in their environments. Splunk
    is a software application that allows you to gather your logs and data from your
    applications and hardware systems. It then lets you analyze and visualize the
    data you have collected, usually in one central location.
  prefs: []
  type: TYPE_NORMAL
- en: Splunk allows you to enter your data in different formats, and in a lot of situations,
    Splunk will be able to recognize the data format it is in. You can then use this
    data to help troubleshoot your applications, create monitoring dashboards, and
    create alerts on specific events when they occur.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we'll only be touching the surface of what Splunk can do, but
    if you're interested, there are a lot of valuable resources that will show you
    how to gain operational intelligence from your data, and even use Splunk to create
    machine learning and predictive intelligence models.
  prefs: []
  type: TYPE_NORMAL
- en: Splunk provides a number of different products to suit your needs, including
    Splunk Cloud for users and companies wanting to opt for a cloud log monitoring
    solution.
  prefs: []
  type: TYPE_NORMAL
- en: For our log monitoring strategy, we will be using Splunk Enterprise. It is easy
    to install and comes with a large number of features. When using Splunk, you might
    already know that license costs are charged by the amount of log data you send
    to Splunk, which is then indexed. Splunk Enterprise allows you to index up to
    500 MB of data per day for free on a trial basis. After 60 days, you can either
    upgrade your license or continue to work on a free license, which will continue
    to allow you to log 500 MB of data per day. There is a developer license available
    to users, which can be applied for and allows users to log 10 GB of data per day.
  prefs: []
  type: TYPE_NORMAL
- en: To get started with Splunk, we first need to understand its basic architecture.
    This will be discussed in the following section.
  prefs: []
  type: TYPE_NORMAL
- en: Basic Architecture of Splunk Installation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'By discussing the architecture of Splunk, you will get an idea of how each
    part works and familiarize yourself with some of the terms that we will be using
    in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Indexers**: For larger Splunk installations, it is recommended that you have
    dedicated and replicated indexers set up as part of your environment. The role
    of the indexer is to index your date – that is, organize the log data you have
    sent to Splunk. It also adds metadata and extra information to help speed up the
    searching process. The indexers will then store your log data, which is ready
    to be used and queried upon by the search head.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Search head**: This is the main web interface where you perform search queries
    and administer your Splunk installation. The search head will connect with the
    indexers to query data that has been collected and stored on them. In larger installations,
    you may even have numerous search heads to allow a larger number of queries and
    reporting to take place.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Data forwarders**: These are usually installed on a system you would like
    to collect logs on. It is a small application that is configured to collect logs
    on your system and then push the data to your Splunk indexer.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the following section, we will be using the official Splunk Docker image,
    where we will be running both the search head and indexer on the active container.
    We will continue to use Docker for our Splunk environment as it also provides
    indexers and data forwarders as supported Docker images. These allow you to test
    and sandbox an installation before you move forward with an installation.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Please note that we are using the Splunk Docker image for simplicity. It will
    allow us to remove the application, if needed. It is easy and straightforward
    to install the application and run it on your system if you prefer this option.
  prefs: []
  type: TYPE_NORMAL
- en: Another important feature of Splunk is that it includes a large app ecosystem
    provided by both Splunk and other third-party providers. These apps are usually
    created to help users monitor services where logs are forwarded to Splunk and
    then a third-party app will be installed on the search head. This will provide
    dashboards and monitoring tools specifically for these logs. For example, you
    can forward your logs from a Cisco device and then install a Cisco-provided Splunk
    app to start monitoring your Cisco devices as soon as you start indexing data.
    You can create your own Splunk app, but to have it listed as an officially provided
    app, it needs to be certified by Splunk.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'For a complete list of both the free and paid Splunk apps that are available,
    Splunk has set up their SplunkBase to allow users to search for and download the
    available apps from the following URL: [https://splunkbase.splunk.com/apps/](https://splunkbase.splunk.com/apps/).'
  prefs: []
  type: TYPE_NORMAL
- en: This has been a quick introduction to Splunk and should have helped you understand
    some of the work we are going to be doing in the following sections. The best
    way to get you familiar with Splunk, though, is to get the container running on
    your system so that you can start to work with it.
  prefs: []
  type: TYPE_NORMAL
- en: Installing and Running Splunk on Docker
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As part of this chapter, we'll use the official Splunk Docker image to install
    it on our system. Even though installing Splunk directly on your host system is
    not a difficult process, installing Splunk as a container image will help extend
    our knowledge of Docker and push our skills further.
  prefs: []
  type: TYPE_NORMAL
- en: Our Splunk installation will run both a search head and indexer on the same
    container since the amount of data we'll be monitoring will be minimal. However,
    if you were to use Splunk in a production environment with multiple users accessing
    the data, you may need to look at installing dedicated indexers, as well as one
    or more dedicated search heads.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: We will be using Splunk Enterprise Version 8.0.2 in this chapter. The majority
    of the work that will be performed in this chapter will not be too advanced and,
    as a result, should be compatible with the subsequent version of Splunk in the
    future.
  prefs: []
  type: TYPE_NORMAL
- en: Before we start to work with Splunk, let's run through the three main directories
    used by the Splunk application. Although we'll only be performing basic configurations
    and changes, the following details will be beneficial in understanding how the
    directories in the application are organized and, as you'll see, will help you
    with your Docker container setup.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the main Splunk application directory, usually installed as `/opt/splunk/`,
    you will see three main directories, as explained here:'
  prefs: []
  type: TYPE_NORMAL
- en: '**etc directory**: This is where all the configuration information is held
    for our Splunk installation. We will create a directory and mount the etc directory
    as part of our running container to make sure any changes we make to the configuration
    is kept and not destroyed when we turn off our application. This will include
    user access, software settings and saved searches, dashboards, and the Splunk
    app.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**bin directory**: This is where all of Splunk''s application and binary files
    are stored. You won''t need to access this directory or make changes to files
    in this directory at this point, but it is something you may need to investigate
    further.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**var directory**: Splunk''s indexed data and application logs are stored in
    this directory. When we first start working with Splunk, we won''t bother keeping
    the data we are storing in the var directory. But when we have ironed out all
    the bugs with our deployment, we will mount the var directory to keep our indexed
    data and make sure we can continue to search against it, even if our Splunk container
    stops running.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: To download some of the applications and content used in this chapter, you will
    need to sign up for an account on [splunk.com](http://splunk.com) to gain access
    to it. There is no obligation to purchase anything or provide credit card details
    when you sign up as it is just a means Splunk uses to track who is using their
    application.
  prefs: []
  type: TYPE_NORMAL
- en: 'To run our Splunk container, we will pull the official image from Docker Hub
    and then run a command similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: As you can see from the preceding command, we need to expose the relevant ports
    needed for accessing different parts of our installation. You'll also note that
    there are two environment variables we need to specify as part of our running
    container. The first is `SPLUNK_START_ARGS`, which we have set to `--accept-license`,
    which you'd normally accept when you install Splunk on a running server. Secondly,
    we need to provide a value for the `SPLUNK_PASSWORD` environment variable. This
    is the password used by the Administrator account, and it is the account you will
    use when you first log in to Splunk.
  prefs: []
  type: TYPE_NORMAL
- en: We've provided a large amount of theory to get you ready for the next part of
    this chapter. It's time to put this theory into practice and get our Splunk installation
    running so that we can start collecting logs from our host system. In the following
    exercise, we will install a Splunk data forwarder on our running host system to
    collect logs to be forwarded to our Splunk indexer.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Please use `touch` command to create files and `vim` command to work on the
    file using vim editor.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 14.01: Running the Splunk Container and Starting to Collect Data'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this exercise, you will get Splunk running using the official Splunk Docker
    image available on Docker Hub. You will make some basic configuration changes
    to help administer user access to the application on the image, and then you will
    install a forwarder on your system so that you can start to consume logs in your
    Splunk installation:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new directory called `chapter14`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Pull the latest supported image from Docker Hub that has been created by Splunk
    using the `docker pull` command. The repository is simply listed as `splunk/splunk`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the Splunk image on your system with the `docker run` command. Use the
    `--rm` option to make sure the container is removed fully when it is killed, the
    `-d` option to have the container running as a daemon in the background of your
    system, and the `-p` option to expose port `8000` on your host machine so that
    you can view the applications on our web browser. Lastly, use the `-e` option
    to provide environment variables to the system when you start up the container:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding command, you are exposing port `8000` for the web interface,
    accepting the Splunk license with one environment variable, and also setting an
    administration password as `changeme`. The command is also running in the background
    as a daemon with `-d`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Splunk will take 1 or 2 minutes to start up. Use the `docker logs` command
    to view the progress of the application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'When you see a similar line to the following showing `Ansible playbook complete`,
    you should be ready to log in:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Enter the URL `http://0.0.0.0:8000` to access the web interface of our Splunk
    installation. You should see something similar to the following. To log in, use
    `admin` as the username and the password we set with the `SPLUNK_PASSWORD` environment
    variable while running the image. In this case, you will use `changeme`:![Figure
    14.1: The Splunk web login page'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B15021_14_01.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 14.1: The Splunk web login page'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you''ve logged in, you will be presented with the Splunk home screen,
    which should look similar to the following. The home screen is divided into separate
    sections, as outlined here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.2: The Splunk welcome screen'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B15021_14_02.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 14.2: The Splunk welcome screen'
  prefs: []
  type: TYPE_NORMAL
- en: 'The home screen can be broken down into the following sections:'
  prefs: []
  type: TYPE_NORMAL
- en: '- **Splunk>**: This is the icon at the top-left of the screen. It will bring
    you back to your home screen at any time if you simply click on the icon.'
  prefs: []
  type: TYPE_NORMAL
- en: '- **Apps Menu**: This runs along the left-hand side of the screen and allows
    you to install and configure Splunk apps.'
  prefs: []
  type: TYPE_NORMAL
- en: '- **Menu Bar**: This runs along the top of the screen and contains different
    options, depending on the level of privileges you have with your account. As you
    have logged in as the Administrator account, you get the full range of options.
    This allows us to configure and manage how Splunk is run and how it is administered.
    The main configuration option in the menu bar is `Settings`. It provides a large
    drop-down list that lets you control the majority of the aspects of how Splunk
    is run.'
  prefs: []
  type: TYPE_NORMAL
- en: '- **Main Workspace**: The main workspace fills the rest of the page and is
    where you can start to search your data, set up dashboards, and start to visualize
    your data. You can set a home dashboard so that each time you log in or click
    on the `Splunk>` icon, you will also be presented with this dashboard. We will
    set the home dashboard later in this chapter to show you how it is done.'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can start to make changes to our Splunk configurations, but if the container
    stops running for some reason, all our changes will be lost. Instead, create a
    directory where you can store all the relevant configuration information needed
    for your Splunk environment. Stop the Splunk server you currently have running
    with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a directory that can be mounted on the Splunk host. Call it `testSplunk`
    for this purpose:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the Splunk container again, this time using the `-v` option to mount the
    directory you created in the previous step to the `/opt/splunk/etc` directory
    on your container. Expose the extra port of `9997` in order to forward data to
    our Splunk installation later in this exercise:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Once Splunk has started up again, log back into your Splunk web interface as
    the Administrator account.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add a new user to your system to make sure you are saving the relevant configuration
    details in your mounted directory through the `Settings` menu at the top of the
    screen. Click on the `Settings` menu:![Figure 14.3: The Splunk settings menu'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B15021_14_03.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 14.3: The Splunk settings menu'
  prefs: []
  type: TYPE_NORMAL
- en: With the `Settings` menu open, move to the bottom section and click on `Users`
    in the `Users and Authentication` section. You should see a list of all the users
    that have been created on your installation of Splunk. Only the admin account
    will be listed in there so far. To create a new user, click on the `New User`
    button at the top of the screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You''ll be presented with a web form where you can add your new user account
    details. Fill in the details for the new user. Once you''re happy with the details
    you''ve added, click on the `Save` button at the bottom of the screen:![Figure
    14.4: Creating new users on Splunk'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B15021_14_04.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 14.4: Creating new users on Splunk'
  prefs: []
  type: TYPE_NORMAL
- en: 'To make sure you are now keeping this data on your mounted directory, move
    back to your terminal to see whether the new user is stored in your mounted directory.
    Simply list the directories in the `testsplunk/users` directory using the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see that a directory has been set up for the new account you created
    in the previous step; in this case, `vincesesto`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'It''s time to start sending data to the Splunk instance running on your system.
    Before you start collecting data from your running Docker containers, install
    a forwarder on your running system, and start forwarding logs from there. To access
    the forwarder specific to your system, go to the following URL and download the
    forwarder specific to your operating system: [https://www.splunk.com/en_us/download/universal-forwarder.html](https://www.splunk.com/en_us/download/universal-forwarder.html).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Follow the prompts to accept the license so that you can use the application.
    Also, accept the default options presented in the installation program:![Figure
    14.5: Splunk forwarder installation program'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B15021_14_05.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 14.5: Splunk forwarder installation program'
  prefs: []
  type: TYPE_NORMAL
- en: 'The forwarder will usually start automatically. Verify that the forwarder is
    running by accessing your terminal and changing to the installation directory
    on your system using the `cd` command. For the Splunk forwarder, the binary and
    application files will be located in the `/opt/splunkforwarder/bin/` directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `bin` directory, check the status of the forwarder by running the `./splunk
    status` command, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'If it is running, you should see something similar to the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'If the forwarder did not start when the installation took place, run it from
    the `bin` directory with the `start` option using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The output provided will show the Splunk daemon and services starting up. It
    will also show the Process ID (PID) of the services that are running on the system:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'You need to let the Splunk forwarder know where it needs to send its data.
    In *step 8* of this exercise, we made sure we ran our Splunk container with port
    `9997` exposed for this specific reason. Use the `./splunk` command to tell the
    forwarder to send the data to our Splunk container running on IP address `0.0.0.0`
    on port `9997` using the Administrator username and password for our Splunk instance:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The command should return an output similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, to complete the setup of your Splunk forwarder, nominate some log
    files to forward to our Splunk container. Use the `./splunk` command on the forwarder
    to monitor the files in the `/var/log` directory of our system and send them to
    the Splunk container to be indexed so that we can start viewing them:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'After a few minutes, if everything has worked as it should, you should have
    some log events ready to be viewed on your Splunk container. Move back to your
    web browser and enter the following URL to open a Splunk search page: `http://0.0.0.0:8000/en-US/app/search/search`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The following step uses a very basic Splunk search query to search over all
    the data on your installation. If you have not worked with the Splunk query language
    previously, don't worry; we'll spend an entire section, *Working with the Splunk
    Query Language*, explaining the query language in more depth.
  prefs: []
  type: TYPE_NORMAL
- en: 'Perform a basic search by simply adding an asterisk (`*`) as a search query,
    as shown in the following screenshot. If everything has worked as it should, you
    should start to see log events in the results area of the search page:![Figure
    14.6: Splunk search window with data displayed from our forwarder'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B15021_14_06.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 14.6: Splunk search window with data displayed from our forwarder'
  prefs: []
  type: TYPE_NORMAL
- en: For the final part of this exercise, you will practice the easiest way to upload
    data to Splunk, which is by simply uploading the file directly to your running
    system. Download the sample data file named `weblog.csv` from [https://packt.live/3hFbh4C](https://packt.live/3hFbh4C)
    and place it in your `/tmp` directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Move back to your Splunk web interface and click on the `Settings` menu option.
    Select `Add Data` from the right-hand side of the menu options, as shown in the
    following screenshot:![Figure 14.7: Importing files directly into Splunk'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B15021_14_07.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 14.7: Importing files directly into Splunk'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click `Upload files from my computer` toward the bottom of the screen:![Figure
    14.8: Uploading files on Splunk'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B15021_14_08.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 14.8: Uploading files on Splunk'
  prefs: []
  type: TYPE_NORMAL
- en: The next screen will allow you to select the source file from your machine.
    Select the `weblog.csv` file you downloaded earlier in this exercise. Click the
    `Next` button at the top of the screen when you have selected the file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set `Source Type` to choose or accept in what format Splunk has viewed your
    data. In this instance, it should have recognized your data as a `.csv` file.
    Click the `Next` button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The `Input Settings` page lets you set the name of your host but leave the
    index as the default. Click the `Review` button:![Figure 14.9: Input settings
    page'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B15021_14_09.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 14.9: Input settings page'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the `Submit` button if all the entries look correct. Then, click `Start
    Searching`, where you should see your search screen, along with the sample web
    log data available and ready to be searched. It should look similar to the following:![Figure
    14.10: Searching imported files in Splunk'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B15021_14_10.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 14.10: Searching imported files in Splunk'
  prefs: []
  type: TYPE_NORMAL
- en: In a short amount of time, we have set up a Splunk search head and indexer on
    our system and installed a Splunk forwarder to send logs into the indexer and
    search head. We also manually added log data to our index so that we could view
    it.
  prefs: []
  type: TYPE_NORMAL
- en: The next part of this chapter will focus on getting your Docker container logs
    into the new Splunk container we have running.
  prefs: []
  type: TYPE_NORMAL
- en: Getting Container Logs into Splunk
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Our log monitoring environment is starting to take shape, but we need to get
    our Docker container logs into the application to make it worth the work. We have
    set up our Splunk forwarder to send logs from our system to the `/var/log` directory.
    Up until now, we have learned that we can simply mount the log file of our container
    and use the Splunk forwarder to send logs to the Splunk indexer. This is one way
    to do this, but Docker provides an easier option for sending logs to Splunk.
  prefs: []
  type: TYPE_NORMAL
- en: 'Docker provides a log driver specific to Splunk that will send our container
    logs via our network to an HTTP Event Collector on our Splunk installation. We''ll
    need to open a new port to expose the Event Collector as Splunk uses port `8088`
    to collect data in this method. So far, we''ve exposed ports `8000` and `9997`
    on our Splunk installation. Before we proceed with the rest of this chapter, let''s
    look at all the available ports and how they function on Splunk:'
  prefs: []
  type: TYPE_NORMAL
- en: '`8000`: You''ve been using this port for the web application, and this is the
    dedicated default web port used to access Splunk in your browser.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`9997`: This port is the default port used by Splunk forwarders to forward
    data to the indexer. We exposed this port in the previous section of this chapter
    to make sure we''re able to collect logs from our running system.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`8089`: Splunk comes with an API that runs by default as part of the search
    head. Port `8089` is where the API manager sits to interface with the API running
    on your instance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`8088`: Port `8088` needs to be exposed to allow information to be forwarded
    to the Event Collector that''s been set up on your system. In the upcoming exercise,
    we''ll use this port to start sending Docker container logs to an HTTP Event Collector.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`8080`: If we had a larger Splunk installation with dedicated indexers, port
    `8080` is used for indexers to communicate among themselves and allow replication
    among these indexers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The web interface for Splunk runs by default on port `8000`, but this may clash
    with our Panoramic Trekking App if you are hosting the application on the same
    port. If this does cause any issues, feel free to expose the port on the Splunk
    container to something different, such as port `8080`, as you will still be able
    to access the web interface and it will not cause any issues with our services
    using that port.
  prefs: []
  type: TYPE_NORMAL
- en: Once an `HTTP Event Collector` has been set up on Splunk, forwarding logs to
    Splunk is simply a matter of adding the correct options to our `docker run` command.
    The following sample command uses `--log-driver=splunk` to signal to the running
    container to use the Splunk log driver.
  prefs: []
  type: TYPE_NORMAL
- en: 'It then needs to include further `--log-opt` options to make sure the logs
    are forwarded correctly. The first is `splunk-url`, which is the URL your system
    is currently being hosted on. As we don''t have DNS set up, we can simply use
    the IP address we are using to host our Splunk instance, along with the port of
    `8088`. The second is `splunk-token`. This is the token that''s assigned by Splunk
    when you create the HTTP Event Collector:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'There is the option to add Splunk logging driver details to your Docker configuration
    file. Here, you will need to add the following details to your `daemon.json` file
    in the `/etc/docker` configuration file. This will only work if you have Splunk
    as a separate application and not a Docker instance on your system. As we have
    set up our Splunk instance as a Docker container, this option will not work. This
    is because the Docker daemon will need to restart and connect to `splunk-url`
    listed in the configuration. Of course, without the Docker daemon running, `splunk-url`
    will never be available:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: In the following exercise, we are going to extend our Splunk installation to
    open ports specific for our `HTTP Event Collector`, which we'll also create. We
    will then start to send logs from our containers into Splunk, ready for us to
    start viewing them.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 14.02: Creating an HTTP Event Collector and Starting to Collect Docker
    Logs'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this exercise, you will create an `HTTP Event Collector` for your Splunk
    installation and use the Docker `log` driver to forward your logs to your Event
    Collector. You will use the `random-logger` Docker image, which is provided by
    the `chentex` repository and available for use on Docker Hub, to generate some
    logs in your system and demonstrate the use of Splunk further:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Start the Splunk image again, this time with port `8088` exposed to all our
    Docker containers to push their logs to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Wait for Splunk to start up again and log back into the web interface with the
    Administrator account.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to the `Settings` menu and select `Data Inputs` to create a new `HTTP Event
    Collector`. Select `HTTP Event Collector` from the options list.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the `Global Settings` button on the `HTTP Event Collector` page. You
    will be presented with a page similar to the following. On this page, click on
    the `Enabled` button, next to `All Tokens`, and make sure `Enable SLL` is not
    selected as you will not be using SSL in this exercise. This will make things
    a little easier for you. When you''re happy with the details on the screen, click
    the `Save` button to save your configurations:![Figure 14.11: Enabling HTTP Event
    Collector on your system'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B15021_14_11.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 14.11: Enabling HTTP Event Collector on your system'
  prefs: []
  type: TYPE_NORMAL
- en: 'When you return to the `HTTP Event Collector` page, click the `New Token` button
    at the top-right of the screen. You''ll be presented with a screen similar to
    the following. This is where you''ll set up your new Event Collector so that you
    can collect your Docker container logs:![Figure 14.12: Naming your HTTP Event
    Collector on Splunk'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B15021_14_12.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 14.12: Naming your HTTP Event Collector on Splunk'
  prefs: []
  type: TYPE_NORMAL
- en: The preceding screen is where you set the name of your new Event Collector.
    Enter the name `Docker Logs` and, for the rest of the entries, accept the defaults
    by leaving them blank. Click the `Next` button at the top of the screen.
  prefs: []
  type: TYPE_NORMAL
- en: 'Accept the default values for the `Input Settings` and `Review` pages until
    you see a page similar to the following, in which a new `HTTP Event Collector`
    has been created with a token available. The token is displayed as `5c051cdb-b1c6-482f-973f-2a8de0d92ed8`.
    Yours will be different as Splunk provides a unique token to allow for the secure
    transfer of data from sources that are trusted by the user. Use this token to
    allow your Docker containers to start logging data in your Splunk installation:![Figure
    14.13: Completed HTTP Event Collector on Splunk'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B15021_14_13.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 14.13: Completed HTTP Event Collector on Splunk'
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the `hello-world` Docker image to make sure you can send data to Splunk.
    In this instance, add four extra command-line options as part of your `docker
    run` command. Specify `--log-driver` as `splunk`. Provide the log options as the
    `splunk-url` of our system, including port `8088`, `splunk-token`, which you created
    in the previous step, and, finally, state `splunk-=insecureipverify` as `true`.
    This final option will limit the work required in setting up your Splunk installation
    so that you won''t need to organize the SSL certificates that will be used with
    our Splunk server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'The commands should return an output similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Return to the Splunk web interface and click the `Start Searching` button.
    If you have already moved on from the previous screen, go to the Splunk search
    page at `http://0.0.0.0:8000/en-US/app/search/search`. In the search query box,
    enter `source="http:Docker Logs"`, as shown in the following screenshot. If everything
    has worked well, you should also see data entries being provided by the `hello-world`
    image:![Figure 14.14: Starting to collect docker logs with Splunk'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B15021_14_14.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 14.14: Starting to collect docker logs with Splunk'
  prefs: []
  type: TYPE_NORMAL
- en: 'The previous step has shown that the Splunk installation is now able to collect
    Docker log data, but you will need to create a new volume to store your index
    data so that it is not destroyed every time you stop Splunk from running. Move
    back into your terminal and kill the running `splunk` container:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'In the same directory where you created the original `testsplunk` directory,
    create a new directory so that we can mount our Splunk index data. In this instance,
    name it `testsplunkindex`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'From your working directory, start the Splunk image again. Mount the new directory
    you just created in order to store your index data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Use the `random-logger` Docker image to generate some logs in your system.
    In the following command, there''s an added `tag` log option. This will mean that
    each log event that''s generated and sent to Splunk will also include this tag
    as metadata, which can help you search for data when you are searching in Splunk.
    By using the `{{.Name}}` and `{{.FullID}}` options, these details will be automatically
    added, just like the container name and ID number will be added as your tag when
    the container is created:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'If your Splunk instance is not running correctly or you have not configured
    something correctly, the `log-generator` container will fail to connect or run.
    You will see an error similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`docker: Error response from daemon: failed to initialize logging driver:`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once this is running, move back to the Splunk search page on the web interface
    and in this instance, include the tag you created in the previous step. The following
    query will ensure that only new data that has been provided by the `log-generator`
    image will display in our Splunk output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Your Splunk search should result in something similar to the following. Here,
    you can see the logs that have been generated by the `log-generator` image. You
    can see that it is logging at random times and that each entry is now tagged with
    the name and instance ID of your container:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.15: Splunk search result'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B15021_14_15.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 14.15: Splunk search result'
  prefs: []
  type: TYPE_NORMAL
- en: Our Splunk installation is coming along nicely as we've now been able to configure
    the application to include an `HTTP Event Collector` and have started collecting
    logs from the `log-generator` Docker image. Even if we stop our Splunk instance,
    they should still be available for us to search and extract useful information.
  prefs: []
  type: TYPE_NORMAL
- en: The following section will provide a more in-depth demonstration of how to use
    the Splunk query language.
  prefs: []
  type: TYPE_NORMAL
- en: Working with the Splunk Query Language
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Splunk query language can be a little difficult to pick up, but once you
    do, you'll find it helpful to interpret, analyze, and present your data from your
    Splunk environment. The best way to get comfortable with the query language is
    to simply dive in.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following list describes a few things to take into account when working
    with the query language:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Narrow your search**: The larger the amount of data you want to search over,
    the longer your query will take to return a result. If you know the time frame
    or a source, such as the one we created for `docker logs`, the query will return
    the result faster.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Use simple search terms**: If you have an idea of what will be included in
    your log (for example, `ERROR` or `DEBUG`), this is a great place to start with
    your search terms as it will also help limit the amount of data you are receiving.
    This is another reason why we used a tag in the previous section when adding logs
    to our Splunk instance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Chain search terms**: We can use `AND` to group search terms. We can also
    use `OR` to search for logs with more than one search term use.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Add wildcards to search multiple terms**: The query language also has the
    option to use wildcards, such as an asterisk. If you used the `ERR*` query, for
    example, it would search for not only `ERROR` but also `ERR` and `ERRORS`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Extracted fields provide more details**: Splunk will do its best to find
    and locate fields in the log events, especially if your logs are in a known log
    format such as Apache log file format or a recognizable format such as CSV or
    JSON logs. If you are creating logs for your application, Splunk will do an amazing
    job of extracting fields if you present your data as key-value pairs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Add functions to a group and visualize data**: Adding functions to your search
    terms can help you transform and present your data. They are usually added to
    your search term with a pipe (`|`) character. The following exercise will use
    the `stats`, `chart`, and `timechart` functions to help aggregate search results
    and calculate statistics such as `average`, `count`, and `sum`. As an example,
    if we are using a search term such as `ERR*`, we can then pipe this to the `stats`
    command to count the number of times we see an error event: `ERR* | stats count`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Splunk also provides handy tips when you are entering your query. Once you have
    the basics down, it will help you provide additional functionality to your data.
  prefs: []
  type: TYPE_NORMAL
- en: In the following exercise, you will find that, even when Splunk cannot find
    your extracted fields, you can create your own so that you can analyze your data.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 14.03: Getting Familiar with the Splunk Query Language'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this exercise, you will run through a series of tasks that demonstrate the
    basic functionality of the query language and help you become more familiar with
    using it. This will help you examine and visualize your own data:'
  prefs: []
  type: TYPE_NORMAL
- en: Make sure your Splunk container is running and that the `log-generator` container
    is sending data to Splunk.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When you log in to Splunk, from the home page, click `Search & Reporting app`
    from the left-hand side menu or go to the URL `http://0.0.0.0:8000/en-US/app/search/search`
    to bring up the search page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'When you get to the search page, you will see a textbox that says `enter search
    here`. Start with a simple term such as the word `ERROR`, as shown in the following
    screenshot, and press *Enter* to have Splunk run the query:![Figure 14.16: Splunk
    search page'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B15021_14_16.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 14.16: Splunk search page'
  prefs: []
  type: TYPE_NORMAL
- en: If you were to only enter the term `ERR*` with an asterisk (`*`) at the end
    of the term, this should also give results similar to the ones shown in the preceding
    screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: 'Chain search terms together using `AND` to make sure our log events include
    multiple values. Enter a search similar to `sourcetype=htt* AND ERR*` to search
    for all `HTTP` Event Collector logs that are also showing `ERR` values in their
    logs:![Figure 14.17: Chaining search terms together'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B15021_14_17.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 14.17: Chaining search terms together'
  prefs: []
  type: TYPE_NORMAL
- en: 'The searches you enter will most likely default to searching through all the
    data since your installation. Looking through all your data could result in a
    very time-consuming search. Narrow this down by entering a time range to search
    over. Click the drop-down menu to the right of the query textbox to limit the
    data your search is run over. Limit the search to `Last 24 hours`:![Figure 14.18:
    Limiting searches with time ranges'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B15021_14_18.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 14.18: Limiting searches with time ranges'
  prefs: []
  type: TYPE_NORMAL
- en: 'Look through the extracted fields on the left-hand side of the results page.
    You''ll notice that there are two sections. The first is `SELECTED FIELDS`, which
    includes data specific to your search. The second is `INTERESTING FIELDS`. This
    data is still relevant and part of your data but not specifically related to your
    search query:![Figure 14.19: Extracted fields'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B15021_14_19.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 14.19: Extracted fields'
  prefs: []
  type: TYPE_NORMAL
- en: To create the fields to be listed, click the `Extract Your Own Fields` link.
    The following steps will walk through the process of creating new fields relevant
    to the data the `log-generator` container is providing.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You''ll be taken to a new page where you''ll be presented with sample data
    from the `httpevent` source type you have recently been searching on. First, you''ll
    need to select a sample event. Select the first line that is similar to the one
    listed here. Click the `Next` button at the top of the screen to move on to the
    next step:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'You''ll then be asked to choose the method you want to use in order to extract
    fields. If you are working with files that have a clear delimiter, such as a `.SSV`
    file, use the `Delimiters` method. In this instance, though, you are going to
    use the `Regular Expression` method. Click `Regular Expression` and then click
    the `Next` button:![Figure 14.20: Field extraction method'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B15021_14_20.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 14.20: Field extraction method'
  prefs: []
  type: TYPE_NORMAL
- en: 'You should now have one line of data where you can start to select fields to
    extract. All the log data provided by the `log-generator` container is the same,
    so this line will serve as a template for all the events Splunk receives. As shown
    in the following screenshot, click `ERROR`, and when you''re provided with the
    opportunity to enter a field name, enter `level`, and then select the `Add Extraction`
    button. Select the line of text after `ERROR`. In this example, it is `something
    happened in this execution`. Add a field name of `message`. Click the `Add Extraction`
    button. Then, click the `Next` button when you have selected all the relevant
    fields:![Figure 14.21: Field extraction in Splunk'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B15021_14_21.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 14.21: Field extraction in Splunk'
  prefs: []
  type: TYPE_NORMAL
- en: 'You should now be able to see all the events with the new fields you have highlighted.
    Click the `Next` button:![Figure 14.22: Events with the new fields'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B15021_14_22.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 14.22: Events with the new fields'
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, you''ll be presented with a screen similar to the following. In the
    `Permissions` section, click the `All apps` button to allow this field extraction
    to occur across your entire Splunk installation, not limiting it to one app or
    the owner. If you''re happy with the extractions name and other options, click
    the `Finish` button at the top of the screen:![Figure 14.23: Field extraction
    in Splunk completed'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B15021_14_23.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 14.23: Field extraction in Splunk completed'
  prefs: []
  type: TYPE_NORMAL
- en: 'Move back into your search page and add `sourcetype=httpevent` to the search
    query. Once it loads, look through the extracted fields. You should now have the
    `level` and `message` fields you added as `INTERESTING FIELDS`. If you click on
    the `level` field, you will get a breakdown of the number of events received,
    similar to what''s shown in the following screenshot:![Figure 14.24: Displaying
    field breakdown in the search results'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B15021_14_24.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 14.24: Displaying field breakdown in the search results'
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the `stats` function to count the number of events for each error level
    in your logs. Do this by using the `sourcetype=httpevent | stats count by level`
    search query for the results of your search from the previous step and pipe the
    values of the `stats` function to `count by level`:![Figure 14.25: Using the stats
    function'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B15021_14_25.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 14.25: Using the stats function'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `stats` function gives you some nice information, but if you want to see
    the data presented over a period of time, use the `timechart` function. Run the
    `sourcetype=httpevent | timechart span=1m count by level` query to give the result
    over a range of time. If you perform your search over the past 15 minutes, the
    preceding query should give you a breakdown of data by each minute. Click the
    `Visualization` tab under the search query textbox. You will be presented with
    a graph representing the results of our search:![Figure 14.26: Creating visualizations
    from search results'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B15021_14_26.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 14.26: Creating visualizations from search results'
  prefs: []
  type: TYPE_NORMAL
- en: You can use the span option in your query to group your data by minute (1m),
    hour (5), day (1d), and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the preceding screenshot, where it mentions the chart type (`Column Chart`),
    you can change the type you currently have displayed. Click the `Column Chart`
    text. It will let you select from a few different types of charts. In this instance,
    use the line chart:![Figure 14.27: Selecting the chart type'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B15021_14_27.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 14.27: Selecting the chart type'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: In the following steps, you are going to create a dashboard for your data visualization.
    Dashboards are a way to display your data to users without them needing to know
    anything specific about Splunk or the data involved. It is perfect for non-technical
    users as you simply provide a URL to the dashboard so that the user will simply
    load the dashboard to see the information they need. Dashboards are also perfect
    for searches you need to perform on a regular basis so as to limit the amount
    of work you need to do.
  prefs: []
  type: TYPE_NORMAL
- en: 'When you are happy with the chart, click the `Save As` button at the top of
    the screen and select the `Dashboard Panel`. You''ll be presented with a form
    similar to the one shown in the following screenshot. Create a new dashboard called
    `Log Container Dashboard` that is `Shared in App` (the current search app) with
    the specific panel you have just created, named `Error Level`:![Figure 14.28:
    Creating dashboards from search results'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B15021_14_28.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 14.28: Creating dashboards from search results'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the `Save` button to create the new dashboard. You''ll be given the opportunity
    to view your dashboard when you click save. But if you need to view the dashboard
    at a later stage, go to the app you''ve created the dashboard in (in this case,
    the `Search & Reporting` app) and click the `Dashboards` menu at the top of the
    screen. You will be presented with the available dashboards. This is where you
    can click the relevant one. You''ll notice you have two other dashboards available
    that have been provided by default as part of your Splunk installation:![Figure
    14.29: Dashboards in Splunk'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B15021_14_29.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 14.29: Dashboards in Splunk'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `Log Container` dashboard you just created and click the `Edit` button
    at the top of the screen. This will let you add a new panel to your dashboard
    without you needing to move back to the search window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When you click on the `Edit` button, you'll be given extra options to make changes
    to the look and feel of your dashboard. Click the `Add Panel` button now.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When you select `Add Panel`, you'll be presented with some extra selections
    on the right-hand side of the screen. Click the `New` menu option and then select
    `Single Value`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Name the panel `Total Errors` and add `sourcetype=httpevent AND ERROR | stats
    count` as the search string. The screen where you can add the new dashboard panel
    should look similar to the following. It should provide details regarding the
    `Content Title` and `Search String`:![Figure 14.30: Adding panels to your Splunk
    dashboard'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B15021_14_30.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 14.30: Adding panels to your Splunk dashboard'
  prefs: []
  type: TYPE_NORMAL
- en: Click the `Add to Dashboard` button to add the new panel to the bottom of the
    dashboard as a single value panel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: While the dashboard is in edit mode, you can move and resize the panels if needed
    and add extra headings or details. When you are happy with your new panel, click
    the `Save` button at the top-right of the screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Your dashboard should hopefully look similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.31: Adding new panels to your dashboards'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B15021_14_31.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 14.31: Adding new panels to your dashboards'
  prefs: []
  type: TYPE_NORMAL
- en: Finally, your dashboard panel has some extra functions, which you can find by
    clicking on the ellipses button at the top-right of the screen. If you are unhappy
    with your dashboard, you can delete it from here.
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the `Set as Home Dashboard Panel` option, which is available under the
    ellipses button. This will take you back to the Splunk home screen, where your
    `Log Container Dashboard` is now available and will be the first thing you see
    when you log in to Splunk:![Figure 14.32: Log Container Dashboard'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B15021_14_32.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 14.32: Log Container Dashboard'
  prefs: []
  type: TYPE_NORMAL
- en: This exercise has shown you how to perform basic queries, chain them together
    with functions, and start to create visualizations, dashboards, and panels. Although
    we've only spent a brief amount of time on this subject, it should give you a
    lot more confidence to work further with your Splunk queries.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will look at what Splunk apps are and how they can help
    to separate your data, searches, reports, and dashboards into different areas.
  prefs: []
  type: TYPE_NORMAL
- en: Splunk App and Saved Searches
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Splunk apps are a way for you to separate your data, searches, reports, and
    dashboards into separate areas where you can then configure who can access what.
    Splunk provides a large ecosystem to help third-party developers and companies
    provide these apps to the general public.
  prefs: []
  type: TYPE_NORMAL
- en: We mentioned earlier in this chapter that Splunk also provides "SplunkBase"
    for approved apps that have been certified for users by Splunk, such as apps for
    Cisco Network Devices. It doesn't need to be an approved app for it to be available
    for use on your system. Splunk allows you to create apps of your own, and if you
    need to, you can distribute them in a packaged file across to users who wish to
    use them. The whole point of Splunk apps, dashboards, and saved searches is to
    reduce the amount of work that is duplicated, as well as providing information
    to non-technical users when needed.
  prefs: []
  type: TYPE_NORMAL
- en: The following exercise will provide you with some hands-on experience in terms
    of working with Splunk apps.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 14.04: Getting Familiar with Splunk Apps and Saved Searches'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this exercise, you will install new apps from SplunkBase and modify them
    to suit your needs. This exercise will also show you how to save your searches
    for future use:'
  prefs: []
  type: TYPE_NORMAL
- en: Make sure your Splunk container is running and that the `log-generator` container
    is sending data to Splunk.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When you are logged back in to Splunk, click the cog icon next to the word `Apps`
    in the `Apps` menu. When you are taken to the `Apps` page, you should see something
    similar to the following. The page contains a list of all Splunk apps currently
    installed on your system. You'll notice that some are enabled, while some are
    disabled.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You also have the option to browse more apps from the Splunk app base, install
    an app from a file, or create your own Splunk app:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.33: Working with the Apps page in Splunk'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B15021_14_33.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 14.33: Working with the Apps page in Splunk'
  prefs: []
  type: TYPE_NORMAL
- en: Click the `Browse more apps` button at the top of the screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You''ll be taken to a page that provides a list of all the Splunk apps available
    to your system. Some of them are paid, but the majority of them are free to use
    and install. You can also search by name, category, and support level. Enter `Departures
    Board Viz` in the search box at the top of the screen and click *Enter*:![Figure
    14.34: Departures Board Viz app'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B15021_14_34.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 14.34: Departures Board Viz app'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: This section uses the `Departures Board Viz` app as an example because it is
    easy to use and install, with minimal changes needed. Each app should give you
    some details on the type of information it uses and how to start working with
    the data needed. You'll notice there are hundreds of apps to choose from, so you're
    sure to find something that suits your needs.
  prefs: []
  type: TYPE_NORMAL
- en: 'You need to have registered with Splunk to be able to install and use the apps
    available. Click the `Install` button for the `Departures Board Viz` app and follow
    the prompts to sign in, if needed:![Figure 14.35: Installing the Departures Board
    Viz app'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B15021_14_35.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 14.35: Installing the Departures Board Viz app'
  prefs: []
  type: TYPE_NORMAL
- en: If the installation was successful, you should be given the prompt to either
    open the app you have just installed or return to the Splunk home page. Return
    to the home page to see the changes you have made.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'From the home page, you should now see that the new app, called `Departures
    Board Viz`, has been installed. This is simply a visualization extension. Click
    the `Departures Board Vis` button on the home screen to open the app:![Figure
    14.36: Opening the Departures Board Viz app'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B15021_14_36.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 14.36: Opening the Departures Board Viz app'
  prefs: []
  type: TYPE_NORMAL
- en: 'When you open the app, it will take you to the `About` page. This is simply
    a dashboard that provides details of the app and how to use it with your data.
    Click the `Edit` button at the top of the screen to continue:![Figure 14.37: The
    About page of the Departures Board Viz app'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B15021_14_37.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 14.37: The About page of the Departures Board Viz app'
  prefs: []
  type: TYPE_NORMAL
- en: Click `Edit Search` to add a new search that displays data specific to you.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Remove the default search string and place the `sourcetype=httpevent | stats
    count by level | sort - count | head 1 | fields level` search query in the textbox.
    The query will look through your `log-generator` data and provide a count of each
    level. Then, sort the results from the highest to lowest order (`sort - count`)
    and provide the level with the top value (`head 1 | fields level`):![Figure 14.38:
    Adding a new search query'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B15021_14_38.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 14.38: Adding a new search query'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the `Save` button to save the changes you''ve made to the visualization.
    Instead of a city name that is provided by default by `Departures Board Viz`,
    you should see the top error level provided in our data. As shown in the following
    screenshot, the top error being reported in our logs is `INFO`:![Figure 14.39:
    Editing Splunk apps in Splunk'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B15021_14_39.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 14.39: Editing Splunk apps in Splunk'
  prefs: []
  type: TYPE_NORMAL
- en: Now that you've added a Splunk app, you will create a very basic app of your
    own to modify your environment further. Move back to the home screen and, once
    again, click on the cog next to the `Apps` menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'On the `Apps` page, click on the `Create app` button on the right-hand side
    of the screen:![Figure 14.40: Splunk apps'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B15021_14_40.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 14.40: Splunk apps'
  prefs: []
  type: TYPE_NORMAL
- en: 'When you create an app of your own, you''ll be presented with a form similar
    to the one shown here. You are going to create a test app for your Splunk install.
    Fill in the form using the information provided in the following screenshot, but
    make sure you add values for `Name` and `Folder Name`. The version is also a required
    field and needs to be in the form of `major_version.minor_version.patch_version`.
    Add the version number as `1.0.0`. The following example has also selected the
    `sample_app` option instead of the `barebones` template. This means the app will
    be filled with sample dashboards and reports that you can modify for the data
    you are working on. You won''t be working with any of these sample dashboards
    and reports, so you can choose either. The `Upload asset` option is only needed
    if you have a pre-created Splunk app available, but in our instance, it can be
    left blank:![Figure 14.41: Creating a Splunk app'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B15021_14_41.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 14.41: Creating a Splunk app'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the `Save` button to create your new app and then move back to the home
    screen of your installation. You''ll notice that you now have an app listed on
    your home screen called `Test Splunk App`. Click on your new app to open it up:![Figure
    14.42: Test Splunk app on the home screen'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B15021_14_42.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 14.42: Test Splunk app on the home screen'
  prefs: []
  type: TYPE_NORMAL
- en: The app won't look any different to the `Search & Reporting` app, but if you
    click the `Reports or Dashboards` tab at the top of the screen, you will notice
    that there will be some sample reports and dashboards in place. For the time being,
    though, create a report you can refer to at a later date. Start by making sure
    you are in the `Search` tab of your app.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `sourcetype=httpevent earliest=-7d | timechart span=1d count by level`
    into the query bar. You'll notice we have set the value to `earliest=-7d`, which
    automatically selects the previous 7 days of data so that you do not need to specify
    the time range for your search. It will then create a time chart of your data,
    totaling the values by each day.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click the `Save As` button at the top of the screen and select `Report` from
    the drop-down menu. You''ll be presented with the following form so that you can
    save your report. Simply name the report and provide a description before clicking
    on the `Save` button at the bottom of the screen:![Figure 14.43: Creating saved
    reports in your Splunk app'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B15021_14_43.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 14.43: Creating saved reports in your Splunk app'
  prefs: []
  type: TYPE_NORMAL
- en: 'When you click `Save`, you''ll be given the option to view your new report.
    It should look similar to the following:![Figure 14.44: Daily Error Levels report
    in Splunk'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B15021_14_44.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 14.44: Daily Error Levels report in Splunk'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you ever need to refer to this report again, you can click on the `Reports`
    tab of your new Splunk app, and it will be listed with the sample reports that
    were provided when the app was first created. The following screenshot shows the
    `Reports` tab of your app with the sample reports listed, but you also have the
    `Daily Errors` report you just created, which has been added to the top of the
    list:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.45: Reports page'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B15021_14_45.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 14.45: Reports page'
  prefs: []
  type: TYPE_NORMAL
- en: This brings us to the end of this exercise, in which we have installed third-party
    Splunk apps and created our own. This also brings us to the end of this chapter.
    However, before you move on to the next chapter, make sure you work through the
    activities provided next to reaffirm everything you've learned in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Activity 14.01: Creating a docker-compose.yml File for Your Splunk Installation'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: So far, you have been running Splunk on a Docker container by simply using the
    `docker run` command. It's time to use the knowledge you have gained in the previous
    sections of this book to create a `docker-compose.yml` file so that you can install
    and run our Splunk environment on your system when needed. As part of this activity,
    add one of the containers being run as a part of the Panoramic Trekking App. Also,
    ensure that you can view logs from the selected service.
  prefs: []
  type: TYPE_NORMAL
- en: 'Perform the following steps to complete this activity:'
  prefs: []
  type: TYPE_NORMAL
- en: Decide how you would like your Splunk installation to look once it is running
    as part of your Docker Compose file. This will include mounting directories and
    ports that need to be exposed as part of the installation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create your `docker-compose.yml` file and run `Docker Compose`. Make sure it
    starts up your Splunk installation as per your requirements in the previous step.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the Splunk installation is up and running, start up a service from the
    Panoramic Trekking App and make sure you can send log data to your Splunk setup.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Expected Output:**'
  prefs: []
  type: TYPE_NORMAL
- en: 'This should result in a screen similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.46: Expected output for Activity 14.01'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B15021_14_46.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 14.46: Expected output for Activity 14.01'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The solution for this activity can be found via [this link](B15021_Solution_Final_SMP.xhtml#_idTextAnchor356).
  prefs: []
  type: TYPE_NORMAL
- en: The next activity will allow you to create a Splunk app and dashboard for the
    new data being logged in Splunk.
  prefs: []
  type: TYPE_NORMAL
- en: 'Activity 14.02: Creating a Splunk App to Monitor the Panoramic Trekking App'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the previous activity, you made sure one of the services that had been set
    up as part of the Panoramic Trekking App was logging data with your Splunk environment.
    In this activity, you are required to create a new Splunk app within your installation
    to specifically monitor your services and create a dashboard relevant to the service
    logging data into Splunk.
  prefs: []
  type: TYPE_NORMAL
- en: 'The steps you''ll need to follow in order to complete this activity are as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Ensure your Splunk installation is running and that at least one service from
    the Panoramic Trekking App is logging data into Splunk.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new Splunk app and name it something relevant to monitoring the Panoramic
    Trekking App. Make sure you can view it from the Splunk home screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a dashboard relevant to the services you're monitoring and add some visualizations
    to help you monitor your service.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Expected Output**:'
  prefs: []
  type: TYPE_NORMAL
- en: 'A dashboard similar to the following should be displayed upon successful completion
    of this activity:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.47: Expected solution for Activity 14.02'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B15021_14_47.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 14.47: Expected solution for Activity 14.02'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The solution for this activity can be found via [this link](B15021_Solution_Final_SMP.xhtml#_idTextAnchor357).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter taught you how applications such as Splunk can help you monitor
    and troubleshoot your applications by aggregating your container logs into one
    central area. We started this chapter with a discussion on the importance of a
    log management strategy when working with Docker, and then introduced Splunk by
    discussing its architecture, as well as some of the finer points on how to run
    the application.
  prefs: []
  type: TYPE_NORMAL
- en: We worked directly with Splunk, running the Docker container image, and started
    to forward logs from our running system. We then used the Splunk log driver to
    send our container logs directly to our Splunk container, mounting important directories
    to make sure our data was saved and available even after we stopped our container
    from running. Finally, we took a closer look at the Splunk query language, with
    which we created dashboards and saved searches and considered the advantages of
    the Splunk app ecosystem.
  prefs: []
  type: TYPE_NORMAL
- en: The next chapter will introduce Docker plugins and teach you how to utilize
    them to help extend your containers and the services running on them.
  prefs: []
  type: TYPE_NORMAL
