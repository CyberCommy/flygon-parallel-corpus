- en: Chapter 5. Debugging and Troubleshooting
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: Debugging with Firebug and FirePHP
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Debugging with the IE developer toolbar
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Avoiding the framework $ conflict
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the Anonymous function of JavaScript
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixing memory leaks in JavaScript
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixing Memory leaks
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sequencing Ajax requests
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Debugging and troubleshooting can be a big hassle for you if you don't know
    how to do this effectively when you use Ajax. In this chapter, we will be learning
    about a few tools and techniques to debug and troubleshoot Ajax applications.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: First of all, we will be looking at the awesome tools built for the Mozilla
    Firefox browser—Firebug, and FirePHP. These two tools are probably the most popular
    for debugging Ajax requests and responses. In the next section, we will be looking
    at another important but less sophisticated tool for Internet Explorer—the IE
    developer toolbar.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: After that, we will be looking at a technique to avoid the common dollar (`$`)
    conflict between frameworks such as jQuery and Mootools while using them together
    in a single web page.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: We will be also looking at how to sequence the Ajax requests for an Ajax application
    that requires periodic update of data. Then, later on, we will be looking at tools
    for beautifying JavaScript that was compressed using tools such as Douglas Crockford's
    JSMin or Dean Edward's Packer tool. Finally, in this chapter, we will be looking
    at tips for cross-browser implementations of Ajax.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Mozilla Firefox takes a bit more memory than normal when Firebug and FirePHP
    are installed on it; so, it can make your system unstable if you have a low memory
    computer. In that case, it is advisable to install Firebug and FirePHP in a different
    profile of Firefox, which you can use specifically during web development.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: Debugging with Firebug and FirePHP
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When Ajax technology is used extensively in complex web applications, debugging
    of such applications becomes a headache for developers, if they don't have the
    right tools for it. This is the where Firebug and FirePHP become handy. **Firebug**
    is an elegant, easy, and powerful add-on for Mozilla Firefox for debugging an
    Ajax-based application. It allows you to get a clear overview of Ajax requests,
    responses, and data sent to the server via the POST or GET methods. Furthermore,
    you can even edit the HTML and CSS code and preview the changes in real time,
    in the browser. Apart from this, Firebug also shows the entire HTTP request made
    by the web page. It also lets you profile JavaScript code. **FirePHP** is an extension
    of Firebug that extends the functionalities of Firebug by logging in information
    or messages on the Firebug console.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Please note that CSS or HTML code edited in Firebug is temporary and it doesn't
    affect the real code. The changes go away when Mozilla Firefox is refreshed.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: Debugging with Firebug
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Firebug** is probably one of the most popular add-ons for the Mozilla Firefox
    browser among web developers. It allows debugging, monitoring, and editing of
    CSS, HTML, and JavaScript, as well as the DOM. It has a lot of features but, among
    them, we''ll be talking more about how to use the JavaScript console for logging
    values or errors.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: So, let's first install Firebug to start debugging an Ajax/PHP application with
    Firebug.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: Firebug can be downloaded from [http://getfirebug.com/](http://getfirebug.com/).
    Once you click on the **Install Firebug** button and follow the steps on the website,
    you will see the following pop up to start the installation. Once you click the
    **Install Now** button, Firebug gets installed in Firefox. After installation,
    you might have to restart your Mozilla Firefox browser to finish the installation
    of Firebug.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](graphics/3081_05_01.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
- en: 'Once Firebug is installed, you can enable it by hitting *F12* or clicking the
    Firebug icon on the bottom right-hand side of the Firefox window. The following
    screenshot shows how Firebug looks when it is enabled:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](graphics/3081_05_02.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
- en: 'As you can see in the preceding screenshot, there are six different panels
    in Firebug. Let''s discuss each of the panels in brief:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: '**Console:** This is the most useful panel of Firebug to debug Ajax-rich applications.
    You can log different messages, information, or warnings in this tab, from JavaScript
    and PHP (using FirePHP). Here, you have an option called **Profile** that lets
    the user record the JavaScript activity in a specified period. Furthermore, you
    can also execute your own code on this panel.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**HTML:** Normally, any HTML elements that are added or appended to the web
    page can''t be viewed by the **View Source** option of the web browser. However,
    the **HTML** pane shows the real-time HTML elements of a web page that might have
    been added by the executed JavaScript code. This panel can also be used for editing
    HTML/CSS code dynamically within the browser and viewing the output in real time.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CSS:** In this panel, you can see the list of **CSS** scripts used for the
    web page. Furthermore, you can edit CSS scripts from this panel virtually and
    see the output of changed properties directly in the browser.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Script:** Using this panel, you can find out that what scripts the current
    web page is using. This panel also lets you debug the JavaScript code by allowing
    to you to set a breakpoint and watch the expression or variable while debugging.
    You can always continue the script execution using *F8* after breakpoints, and
    you can use the *F10* key for step-by-step script execution. This is one of the
    important features you''ll find in Firebug, which is normally present in many
    a programming language **IDE(Integrated Development Environment)**.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**DOM:** Using this panel, you can explore the **Document Object Model (DOM)**
    of a web page. DOM is a hierarchy of objects and functions that can be called
    or handled by JavaScript. This panel lets you explore and modify DOM objects easily.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Net:** This panel is known the as the **Network activity monitoring** panel
    of the web page. When enabled, this panel shows you each HTTP request the page
    has made and how much time it took to load the objects, such as CSS files, images,
    or JavaScript files. Apart from this, you can also examine the HTTP header of
    each HTTP request and response. In addition to this, the details of `XMLHttpRequest`
    can also be found in this panel and the Console panel, along with the other information,
    such as Ajax request, response, HTTP method, and supplied data via GET or POST
    methods.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Firebug API provides a very powerful object called **console** to log the
    data to the **Console** panel directly. It can log any kind of JavaScript data
    and object to the console. You can easily write data to the console with the popular
    `console.log()` functions, which look like `console.log(''testing'')`;. You can
    pass as many arguments as you want to this function, as follows:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: When you log an object in the Firebug console using `console.log(document.location)`;,
    you can see the object list in the **Console** panel with a link to its property
    and methods. You can click on the objects to explore the details of properties
    and methods. Along with `console.log()`, there are other functions to show messages
    in the Firebug console, with different visual effects. Some of these are `console.debug(),
    console.info(), console.warn()`, and `console.error()`.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s see how this logging of information works with a simple example:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The preceding code snippet is a simple example using the jQuery framework of
    JavaScript.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can find more information about jQuery in [Chapter 2](ch02.html "Chapter 2. Basic
    Utilities"), *Basic Utilities*, in this book. More information about jQuery can
    be found at [http://www.jquery.com](http://www.jquery.com).
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: 'All the different functions of the console get executed and are shown in the
    **Console** panel of **Firebug**, as shown in the following screenshot:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](graphics/3081_05_03.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
- en: You can see that execution of the preceding code produces the different types
    of messages in the console with the different colors. You may also notice that
    `console.log(document.location)`; produced the hyperlinks of the different properties
    of this object.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you're using `console.log()` or any other console functions in the development
    environment in your JavaScript code, then make sure Firebug is activated; otherwise,
    the JavaScript code's execution might get halted, leading to unexpected results
    when these functions are encountered in code. The same thing can happen in Internet
    Explorer 7 or older versions. Please make sure that all the console functions
    are removed while moving the website to the production environment.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now, let's look at how Firebug can help you with debugging `XMLHttpRequest`,
    using another example where the Ajax response from the PHP script is unpredictable.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: 'The following JavaScript code makes the Ajax request:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The preceding code is jQuery JavaScript code. We''re making an Ajax request
    (POST method) to `test.php` with POST data `start` and `end` with values of `1`
    and `200`, respectively. Now, let''s look at the server-side script in PHP:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The server-side code just picks a random number between the `start` and `end`
    parameters, which are available in PHP as POST data.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's go back and look at the `success` function of Ajax in the preceding
    JavaScript code. It first logs the number returned from server-side script to
    the Firebug console. Then, this number is converted strictly into integer type
    using the `parseInt()` function. The number returned from Ajax is basically `String`
    data type and it can't be subjected to mathematical operations; so, it is first
    converted into an integer.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: 'After that, this number is checked with a modulus operator to see whether it
    is an odd number or even number and information is displayed accordingly, in the
    **Firebug** console. Let''s look at the result in the Firebug console:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: '![There''s more...](graphics/3081_05_04.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
- en: The log and message are displayed accordingly, as you can see in the screenshot.
    These are trivial but you can see something new in the first line in the console,
    and you can easily guess this is the Ajax request, which has a **+** symbol on
    the left.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s try to explore the details of the Ajax request and response by clicking
    on the **+** symbol. The result is as follows:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: '![There''s more...](graphics/3081_05_05.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
- en: As you can see in the in the preceding screenshot, the first tab is **Headers**;
    it shows the HTTP headers of the request and response too.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: The **Post** section shows what data was posted to the server via the POST method.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: The **Response** tab shows the response of the Ajax request.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: Furthermore, the last tab shows data in HTML format, if the response is in HTML
    format. This last tab can be XML, JSON or HTML depending on the response of the
    data from the server-side script.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: Debugging with FirePHP
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Firebug lets you to log the debugging messages to console from JavaScript. However,
    in a very complex server-side script on an Ajax application, it might get very
    tough to debug the application if we log all the messages as a single string using
    the `console.log()` function. FirePHP comes in handy when we need to debug Ajax-rich
    applications that have very complex PHP scripts involved with them. FirePHP is
    an extension of Firebug, which itself is a popular add-on for the Mozilla Firefox
    browser. FirePHP lets you log debugging messages and information to the Firebug
    console with the help of the FirePHP library.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-67
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You might be wondering if passing JSON or XML data from PHP code as an Ajax
    response and parsing it with JavaScript and then FirePHP might break your application,
    if you log some message to the console. It won't; FirePHP sends a debugging message
    to the browser via special HTTP Response headers so logged messages to FirePHP
    don't break the application at all.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To install FirePHP you need to have FireBug installed in your Mozilla Firefox
    browser. You can get FirePHP installed from its official website [http://www.firephp.org/](http://www.firephp.org/).
    You need to click on the **Get FirePHP** button and follow the steps to install
    FirePHP. Once you've got FirePHP installed, you need to download PHP library to
    use with FirePHP. You can download the PHP library from [http://www.firephp.org/HQ/Install.htm](http://www.firephp.org/HQ/Install.htm).
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装FirePHP，您需要在Mozilla Firefox浏览器中安装FireBug。您可以从其官方网站[http://www.firephp.org/](http://www.firephp.org/)安装FirePHP。您需要点击**获取FirePHP**按钮并按照安装FirePHP的步骤进行安装。安装了FirePHP后，您需要下载PHP库以与FirePHP一起使用。您可以从[http://www.firephp.org/HQ/Install.htm](http://www.firephp.org/HQ/Install.htm)下载PHP库。
- en: 'Now, FirePHP is installed and enabled and you''ve also downloaded the PHP library
    of FirePHP. Let''s see how to use it:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，FirePHP已安装并启用，您还已经下载了FirePHP的PHP库。让我们看看如何使用它：
- en: '![Getting ready](graphics/3081_05_06.jpg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![准备就绪](graphics/3081_05_06.jpg)'
- en: How it works...
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'To get started with FirePHP, first of all you need to include the core FirePHP
    class in your PHP code, as follows:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用FirePHP，首先需要在您的PHP代码中包含核心FirePHP类，如下所示：
- en: '[PRE4]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Once you''ve included your library, you need to start the output buffering,
    since logged-in messages are sent as an HTTP Response header:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在包含库后，您需要开始输出缓冲，因为已登录的消息将作为HTTP响应头发送：
- en: '[PRE5]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Tip
  id: totrans-78
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: You don't need to call the `ob_start()` function explicitly, if output buffering
    is turned on in the`php.ini` directive. More information about **output buffering**
    configuration can be found at [http://us.php.net/manual/en/outcontrol.configuration.php#ini.output-buffering](http://us.php.net/manual/en/outcontrol.configuration.php#ini.output-buffering).
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在`php.ini`指令中打开了输出缓冲，您不需要显式调用`ob_start()`函数。有关**输出缓冲**配置的更多信息，请访问[http://us.php.net/manual/en/outcontrol.configuration.php#ini.output-buffering](http://us.php.net/manual/en/outcontrol.configuration.php#ini.output-buffering)。
- en: 'Now, after this, let''s create the instance of the FirePHP object:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在此之后，让我们创建FirePHP对象的实例：
- en: '[PRE6]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'After this, let''s log some messages to the FireBug console using FirePHP:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，让我们使用FirePHP将一些消息记录到FireBug控制台中：
- en: '[PRE7]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '![How it works...](graphics/3081_05_07.jpg)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](graphics/3081_05_07.jpg)'
- en: As you can see in the preceding screenshot, arrays are displayed in a detailed
    format in the Firebug console. Now, let's try to log more variables in a fancy
    manner.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您在前面的屏幕截图中所看到的，数组以详细格式显示在Firebug控制台中。现在，让我们尝试以更加花哨的方式记录更多的变量。
- en: Note
  id: totrans-86
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The variable viewer (refer to the preceding screenshot) of FirePHP is displayed
    when your mouse cursor is moved over the logged-in variable, in the console.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 当鼠标光标移动到控制台中的已登录变量上时，FirePHP的变量查看器（参见前面的屏幕截图）会显示出来。
- en: 'Furthermore, let''s try to log different types of debug messages to the FireBug
    console using different functions, as follows:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，让我们尝试使用不同的函数将不同类型的调试消息记录到FireBug控制台中，如下所示：
- en: '[PRE8]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The preceding functions are quite similar to the console functions of Firebug.
    The output for these functions looks like the following in the Firebug console:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 上述函数与Firebug的控制台函数非常相似。这些函数的输出在Firebug控制台中如下所示：
- en: '![How it works...](graphics/3081_05_08.jpg)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](graphics/3081_05_08.jpg)'
- en: As you can see in the preceding screenshot, the `info(), warn()`, or `error()`
    functions of the FirePHP library help to log messages in different styles, to
    debug the PHP code.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您在前面的屏幕截图中所看到的，FirePHP库的`info()、warn()`或`error()`函数可以以不同的样式记录消息，用于调试PHP代码。
- en: Note
  id: totrans-93
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Please make sure that you disable FirePHP logging while using the website in
    production mode, because otherwise anyone who has FirePHP and Firebug can view
    sensitive information in the website easily. You can disable FirePHP logging by
    calling the function `$fp->setEnabled(false)`; instantly after creating the instance
    of the FirePHP object.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 请确保在生产模式下使用网站时禁用FirePHP日志记录，否则任何安装了FirePHP和Firebug的人都可以轻松查看网站中的敏感信息。您可以通过在创建FirePHP对象实例后立即调用`$fp->setEnabled(false)`函数来禁用FirePHP日志记录。
- en: There's more...
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'FirePHP also has the **Procedural API**. To use the Procedural API of FirePHP,
    you need to include `fb.php` in your code (which is provided with the FirePHP
    PHP library), as follows:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: FirePHP还有**Procedural API**。要使用FirePHP的Procedural API，您需要在代码中包含`fb.php`（FirePHP
    PHP库提供），如下所示：
- en: '[PRE9]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Then, you can simply call the message to the Firebug console by using the `fb()`
    function. For example, you can use the following code to log messages to the console:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您可以通过使用`fb()`函数简单地将消息记录到Firebug控制台。例如，您可以使用以下代码将消息记录到控制台中：
- en: '[PRE10]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Tip
  id: totrans-100
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: When you have included `fb.php` in the code, you can call the `info(), warn(),
    error()`, or `log()` functions, using the `fb` class directly. For example, you
    can use `FB::info($var,'Info Message')`; to display the `info` message to the
    console.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 当您在代码中包含了`fb.php`后，您可以直接使用`fb`类调用`info()、warn()、error()`或`log()`函数。例如，您可以使用`FB::info($var,'Info
    Message')`来将`info`消息显示到控制台中。
- en: Debugging with the IE developer toolbar
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用IE开发者工具栏进行调试
- en: Like Firebug, Internet Explorer also contains a developer toolbar, which is
    used for debugging and editing HTML, CSS, and JavaScript code for a web page.
    The **IE developer toolbar** comes built-in with Internet Explorer 8\. In previous
    versions, it can be used as an add-on to Internet Explorer. If you're using Internet
    Explorer 7 or below, the IE developer toolbar can be downloaded from the Microsoft
    website, using the URL [http://www.microsoft.com/downloads/en/details.aspx?familyid=95E06CBE-4940-4218-B75D-B8856FCED535&displaylang=en](http://www.microsoft.com/downloads/en/details.aspx?familyid=95E06CBE-4940-4218-B75D-B8856FCED535&displaylang=en).
    But, in this topic, we will be discussing the IE developer toolbar available in
    Internet Explorer 8.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-104
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can always use Firebug Lite in any browser except Firefox. Here are the
    instructions about how Firebug Lite can be used in any browser: [http://getfirebug.com/firebuglite](http://getfirebug.com/firebuglite).'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Internet Explorer **Developer Tools** consists mainly of four different
    panels for debugging and editing HTML, CSS, and JavaScript.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](graphics/3081_05_09.jpg)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
- en: 'They are as follows:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: '**HTML** panel: This panel is used to view the HTML code of the website. Using
    this panel, you can see the outline of individual HTML elements, change their
    attributes and CSS properties, and preview the output in real time, in the browser.'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CSS** panel: This is very similar to the CSS panel of Firebug. Here, you
    view and edit the CSS properties underlying the different stylesheets associated
    with the web page. You can also preview the changes in CSS properties in real
    time.'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Script** panel: This panel allows you to debug the JavaScript code of the
    web page. Furthermore, you can put breakpoints on the JavaScript code and step
    through the code and watch the variables.'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Profiler** panel: The **Profiler** panel of the IE developer toolbar allows
    you to analyze the performance of the JavaScript functions that are used within
    the web page. It records the time taken to execute those functions and how many
    times they are called; so, it becomes easy to debug those functions if some of
    them are coded poorly.'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The **Script** Panel of the developer toolbar allows debugging of the script
    by allowing placing of break points, stepping through the code, and also watching
    of the variables. Furthermore, like Firebug, you can also log messages to the
    console with console functions.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, the following JavaScript console functions will send log, info,
    warning, and error messages, respectively, to the console of the IE developer
    tool:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The output of the code looks like the following screenshot in the console of
    the IE Developer Tool:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](graphics/3081_05_10.jpg)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
- en: You can see the message is displayed in the console in quite similar a fashion
    to how it was in Firebug. But, unfortunately, there are no add-ons such as FirePHP
    for Internet Explorer till date.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: Avoiding the framework $ conflict
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`$` is very commonly used in many JavaScript frameworks as a function name
    or variable name. When two different JavaScript libraries are used together, there
    is high chance of conflict in use of the $ symbol, as they might use it for different
    purposes. Let''s suppose two frameworks are used in a page and these are jQuery
    and `prototype.js:`'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: When two frameworks are used together and both frameworks use the `$` symbol,
    the result can be unpredictable and may break as jQuery considers `$` as a jQuery
    object, while in `prototype.js`, it's a DOM accessing function. The code `$('mydiv').hide()`;
    might not work properly in the web page containing the preceding JavaScript framework's
    usages. This is because, jQuery is included in the last line but the code `$('mydiv').hide()`;
    is code from the `prototype.js` framework, which leads to an unexpected result.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you're using jQuery with other frameworks, there is no problem. JQuery has
    a magic `noConflict()` function, which allows you to use jQuery with other frameworks.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-127
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now, let''s try use the preceding code using jQuery''s `noConflict()` function:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: How it works...
  id: totrans-130
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As you can see in the preceding code, we've create another alias, `$jq` instead
    of `$`, to reference the jQuery object. Now in the remaining code, `$jq` can be
    used to reference the jQuery object. The `$` can be used by the `prototype.js`
    library, for this purpose, in the rest of the code.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: Using the anonymous function of JavaScript
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The **Anonymous function** of JavaScript is very useful for avoiding conflicts
    in the JavaScript library.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-134
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s first understand the Anonymous function with an example:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'When we execute the preceding code in a browser, it will display the alert
    `Hello world`. Now, that''s interesting! A function is defined and also executed!
    Let''s simplify the same code snippet and see how it works:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: If you see the equivalent code, it's straightforward. The only difference is
    that this simplified code has the variable name `t` associated with the function
    while, in the other code, the function name is anonymous. The Anonymous function
    gets executed instantly after declaring it.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
- en: Anonymous functions are very useful while creating the plugins of JavaScript
    frameworks, as you don't have to worry about conflicts with other plugins that
    have the same name as their functions. Remember, using a similar name for two
    functions will always lead to JavaScript errors and might break the application.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s see how we can use Anonymous functions with jQuery to avoid the
    `$` conflict:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: How it works...
  id: totrans-143
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the preceding function, the jQuery object is passed to the function as a
    `$` parameter. Now, `$` has a local scope within Anonymous functions so, `$` can
    be used freely inside the anonymous function, to avoid conflicts. This technique
    is often used for creating jQuery plugins and using the `$` symbol inside the
    plugin's code.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now, let's use the Anonymous function similarly in a Mootools framework to avoid
    the `$` conflict. The `$` symbol in a Mootools framework refers to the `document.id`
    object.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Now, in the preceding function, `$` can be used locally where it refers to the
    `document.id` object of the Mootools framework.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
- en: Fixing memory leaks in JavaScript
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Memory leaks can be one of the tedious problems in JavaScript, if JavaScript
    code is not written properly, considering memory usage. Such code might make your
    browser unstable by overloading memory.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
- en: What is a memory leak?
  id: totrans-151
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Memory leaks** occur when memory allocated by JavaScript consumes physical
    memory but can''t release the memory. JavaScript is a language that does garbage
    collection. Memory is assigned to an object when created and later on memory is
    returned once the object has no more references.'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
- en: What might cause a memory leak?
  id: totrans-153
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There might be a lot of reasons behind memory leaks, but let''s explore two
    major possibilities:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
- en: You're creating a lot of elements or JavaScript objects without cleaning up
    the unused ones.
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You're using a circular reference in your JavaScript code. Circular reference
    occurs when a DOM object and JavaScript Object refer to each other circularly.
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixing memory leaks
  id: totrans-157
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First of all, let''s understand how to find out whether unwanted elements are
    getting generated from the script; we can use the Firebug console to do it. You
    can put the following code into the console of Firebug, as shown in the screenshot
    following it:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '![Fixing memory leaks](graphics/3081_05_11.jpg)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
- en: Tip
  id: totrans-161
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The preceding code will log all counts of the elements in the DOM. So, if you
    see the count is increasing exponentially in the subsequent usages of the page,
    there is a problem with your code and you should always try to delete or remove
    the elements that are not in use anymore.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-163
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: After finding out, how do we debug the unwanted elements created by script?
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s suppose that there is a JavaScript function that is getting called again
    and again, creating a huge stack. Let''s try to debug such code using the `console.trace()`
    function:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'When you click on the button, it will call the function `LeakMemory()`. The
    function calls itself 50 times. We''re also using the `console.trace()` function
    to trace the function calls. You can see the following output in the Firebug console:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](graphics/3081_05_12.jpg)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
- en: How it works...
  id: totrans-169
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can clearly see that the `console.trace()` function traces each function
    call. It lets you debug and trace the JavaScript application that is creating
    an unwanted stack of function calls.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
- en: 'After this, let''s talk about the circular reference memory leak pattern in
    JavaScript, with an example:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Note
  id: totrans-173
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The preceding example is taken from a great article you can find about memory
    leaks on IBM''s website: [http://www.ibm.com/developerworks/web/library/wa-memleak/](http://www.ibm.com/developerworks/web/library/wa-memleak/).'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
- en: As you can see in the preceding example, the JavaScript object `obj` is referring
    to a DOM object with ID `DivElement. DivElement` is referring to the JavaScript
    object `obj`, which creates a circular reference between two elements and both
    elements are not destroyed, due to this circular reference.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
- en: 'When you run the preceding code, let''s see how memory consumption goes up
    in Windows Task Manager:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](graphics/3081_05_13.jpg)'
  id: totrans-177
  prefs: []
  type: TYPE_IMG
- en: As you can see, the memory usage curve goes up in the middle, when I run the
    web page containing the preceding code 4-5 times simultaneously.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  id: totrans-179
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Fixing the memory leak for circular reference is very easy. Just assign the
    object to the `null` element, after executing the code. Let''s see how it can
    be fixed in the preceding example:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Now, execute the preceding code in a web page while looking at the task manager.
    You won't see any significant fluctuation in memory usage.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
- en: Sequencing Ajax Requests
  id: totrans-183
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As the name suggests, Ajax is asynchronous, so the sequence of code might not
    be followed, as most of the logical activities are done when the HTTP request
    is completed.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
- en: How to do it ...
  id: totrans-185
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s try to understand the Ajax request with an example:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Once executed, the preceding code is seen as follows in the Firebug console:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it ...](graphics/3081_05_14.jpg)'
  id: totrans-189
  prefs: []
  type: TYPE_IMG
- en: How it works...
  id: totrans-190
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Although the `$.ajax` function is called first, due to the asynchronous nature
    of the code, the **second log** is printed first (as this line of code follows
    directly after the `$.ajax` function). Then, `success: function` gets executed
    when the HTTP request is completed and, after that, **first log** gets printed
    to console.'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
- en: 'Sequencing Ajax requests is a technique that is widely used in real-time applications.
    In the following example, let''s use a simple function using jQuery to sequence
    Ajax requests, to show the server time in the browser. First, let''s look at the
    JavaScript function that will send the sequence of Ajax requests:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: The function is straightforward. On each successful Ajax request, it calls the
    same function again. Please note that we're sending one request at a time to the
    server. Once that is completed, another request is sent.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
- en: If there is an error, or let's say the Ajax request is not completed, we will
    retry it after waiting for 5 seconds before sending another Ajax request. In this
    way, we minimize the number of requests to the server if there is some problem
    that the server is facing to complete the request.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's look at the PHP code in `ajax.php:`
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: As you can see in the preceding PHP code, the server waits for a second before
    printing the current time at the server. This is normally how server-side scripts
    work in real-time web applications. For example, a real-time chat application
    waits until a new chat message comes in to the database. Once the new message
    is in the database, the application sends out the latest chat message to the browser
    to display it.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
- en: Cross Browser and Ajax
  id: totrans-199
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We all know that the core of the Ajax technique is the `XMLHttpRequest` object
    available in JavaScript. But this object is not necessarily available in your
    browser, especially in Internet Explorer, depending upon the browser and platform.
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们都知道Ajax技术的核心是JavaScript中可用的`XMLHttpRequest`对象。但是这个对象在你的浏览器中不一定可用，特别是在Internet
    Explorer中，这取决于浏览器和平台。
- en: 'It can be instantiated natively in browsers such as Mozilla Firefox, Google
    Chrome, Safari, and even IE7 or later, which support the native `XMLHttpRequest`
    object as follows:'
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它可以在Mozilla Firefox、Google Chrome、Safari甚至支持原生`XMLHttpRequest`对象的IE7或更高版本中本地实例化如下：
- en: '[PRE25]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Now, in Internet Explorer 6 or 5, to use the `XMLHttpRequest` object, it has
    be created as a ActiveX object in JavaScript:'
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现在，在Internet Explorer 6或5中，要使用`XMLHttpRequest`对象，它必须在JavaScript中作为ActiveX对象创建：
- en: '[PRE26]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'But even the ActiveX object class can be different from one Windows platform
    to another, so we might also have to use the following code:'
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 但是即使是ActiveX对象类在不同的Windows平台上也可能不同，所以我们可能还需要使用以下代码：
- en: '[PRE27]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Now, let''s create an Ajax function that will return the `XMLHttpRequest` object
    in a cross-browser platform:'
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现在，让我们创建一个Ajax函数，它将在跨浏览器平台中返回`XMLHttpRequest`对象：
- en: '[PRE28]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Since no browser except Internet Explorer supports ActiveX objects, the instance
    of the `XMLHTTPRequest` object is created using `try` and `catch` block statements,
    so that there are no JavaScript errors and so the code can be used in a cross-browser
    fashion.
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于除了Internet Explorer之外的浏览器都不支持ActiveX对象，因此使用`try`和`catch`块语句创建`XMLHTTPRequest`对象的实例，以便没有JavaScript错误，代码可以在跨浏览器中使用。
- en: Note
  id: totrans-210
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If your web page already uses a JavaScript framework like jQuery or Mootools,
    you can use their core Ajax functions. These libraries are mostly released with
    functions that support multiple browsers and platforms and are updated with time,
    so using such a JavaScript library is highly recommended.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的网页已经使用了像jQuery或Mootools这样的JavaScript框架，你可以使用它们的核心Ajax函数。这些库通常发布了支持多个浏览器和平台的函数，并且随着时间的推移进行更新，因此强烈建议使用这样的JavaScript库。
- en: Beautifying JavaScript
  id: totrans-212
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 美化JavaScript
- en: 'We''ve already seen how to minify JavaScript code using JSMin in the last chapter,
    <add name>. Now, let''s try to reverse engineer minified JavaScript code and beautify
    it. We can use the tool **JsBeautifier** to uncompress and beautify JavaScript
    code. It can be used directly from the URL [http://jsbeautifier.org/](http://jsbeautifier.org/),
    or you can download the code from Github using the URL [http://github.com/einars/js-beautify/zipball/master](http://github.com/einars/js-beautify/zipball/master).
    Let''s first look at the how the code in the `get_time()` function looks when
    compressed using JSMin:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在上一章中看到了如何使用JSMin来压缩JavaScript代码。现在，让我们尝试反向工程压缩的JavaScript代码并美化它。我们可以使用工具**JsBeautifier**来解压缩和美化JavaScript代码。它可以直接从URL
    [http://jsbeautifier.org/](http://jsbeautifier.org/)使用，或者你可以使用URL [http://github.com/einars/js-beautify/zipball/master](http://github.com/einars/js-beautify/zipball/master)从Github下载代码。让我们首先看一下在使用JSMin压缩时`get_time()`函数中的代码是什么样的：
- en: '[PRE29]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: When JavaScript code is compressed, the file takes less space and loads faster
    in web pages, but its becomes very difficult to edit the code when we need to
    add new functionalities to that file. In such a case, we need to beautify the
    JavaScript code and edit it. Now, let's get back the beautified JavaScript code
    using [http://jsbeautifier.org/:](http://jsbeautifier.org/)
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 当JavaScript代码被压缩时，文件占用的空间更小，在网页中加载速度更快，但是当我们需要向该文件添加新功能时，编辑代码变得非常困难。在这种情况下，我们需要美化JavaScript代码并进行编辑。现在，让我们使用[http://jsbeautifier.org/:](http://jsbeautifier.org/)来获取美化后的JavaScript代码。
- en: '[PRE30]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Note
  id: totrans-217
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: It is always recommended that we use compressed JavaScript code in the production
    server since it takes less space and loads faster than the beautified code format.
    But, in the development server, it's always recommended to have beautified code
    so it can be changed or edited later on.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 在生产服务器中，建议我们使用压缩的JavaScript代码，因为它占用的空间更小，加载速度比美化的代码格式更快。但是在开发服务器中，建议始终使用美化的代码，以便以后可以更改或编辑。
