- en: Chapter 5. Security
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Security is a crucial issue for web applications that exchange data. Every site
    or app that lives and breathes in the web is subject to attack by human or robot
    invaders. It's a sad but true reality, and we all have to live with it.
  prefs: []
  type: TYPE_NORMAL
- en: Of course, this does not mean that your web apps are totally unsafe. Fortunately,
    the native HTML5 security mechanisms protect you from the most common security
    attacks without any configuration. Moreover, the WebSocket protocol is designed
    to be a secure service, so a basic protection is guaranteed.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we are going to present some known security risks a WebSocket
    app may have, and also provide you with the tools and knowledge to prevent, confront,
    and overcome them, in favor of your users.
  prefs: []
  type: TYPE_NORMAL
- en: WebSocket headers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You normally don't shake hands with an unknown person or with someone who does
    not want to reveal his/her identity. In the WebSocket world, you need to be sure
    about the origin of the request. The **origin** is a header sent from the client
    and is essential for cross-domain communication, as it allows the web server to
    reject specific connections. Origin is the first and the most important security
    aspect introduced and documented in WebSockets.
  prefs: []
  type: TYPE_NORMAL
- en: There are a couple more headers required to allow a client upgrade to the WebSocket
    protocol. Such headers begin with a `Sec-` prefix and guarantees that every WebSocket
    request will be initialized via the WebSocket constructor, rather than any HTTP
    APIs, which might want to access the exchanged information.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is an example of WebSocket header sent from a client:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The `Sec-WebSocket-Version` parameter can help you identify the browser used.
    Take care if you need specific tweaks for specific browsers. The corresponding
    handshake from the server should look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: If you are interested in more theoretical details, feel free to read the complete
    specification of RFC 6455 at [http://tools.ietf.org/html/rfc6455](http://tools.ietf.org/html/rfc6455).
  prefs: []
  type: TYPE_NORMAL
- en: Common attacks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Currently, what you need to know is that the protocol is designed to be as secure
    as possible. Be careful though! WebSocket is a brand-new protocol and not all
    web browsers implement it correctly. For example, some of them still allow the
    mix of HTTP and WS, although the specification implies the opposite. Everything
    is subject to change, and while waiting for the browsers to mature, you can easily
    adopt some protection techniques yourself.
  prefs: []
  type: TYPE_NORMAL
- en: So, the old-school problems are not solved. Remember those bad people who sniffed
    the HTTP and intercepted into the web traffic? Well, the WS can be sniffed the
    same way.
  prefs: []
  type: TYPE_NORMAL
- en: Here are some common security attacks you need to be aware of, and consequently,
    some ways you can protect your app and your users.
  prefs: []
  type: TYPE_NORMAL
- en: Denial of Service
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Denial of Service** (**DoS**) attacks attempt to make a machine or network
    resource unavailable to the users that request it. Imagine that someone makes
    an infinite number of requests to a web server with no or tiny time intervals.
    Obviously, the server won''t be able to handle every connection and will either
    stop responding or will keep responding too slowly. That''s the simplest form
    of a DoS attack.'
  prefs: []
  type: TYPE_NORMAL
- en: There is no need to mention how frustrating this might be for the end-users,
    who could not even load a web page.
  prefs: []
  type: TYPE_NORMAL
- en: DoS attack can even apply on peer-to-peer communications, forcing the clients
    of a P2P network to concurrently connect to the victim web server.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following figure describes a DoS attack:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Denial of Service](img/6962OS_05_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: DoS attack
  prefs: []
  type: TYPE_NORMAL
- en: Man-in-the-middle
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Suppose you are chatting with your girlfriend via an IM client. Her ex-boyfriend
    wants to view the messages you exchange, so he makes independent connections with
    both of you and sniffs your messages. He also sends messages to you and your girlfriend,
    as an invisible intermediate to your communication. That is known as a man-in-the-middle
    attack. The man-in-the-middle kind of attack is easier for unencrypted connections,
    as the intruder can read the packages directly. When the connection is encrypted,
    the information has to be decrypted by the attacker, which might be way too difficult.
  prefs: []
  type: TYPE_NORMAL
- en: From a technical aspect, the attacker intercepts a public-key message exchange
    and sends the message while replacing the requested key with his own.
  prefs: []
  type: TYPE_NORMAL
- en: Obviously, a solid strategy to make the attacker's job difficult is to use SSH
    with WebSockets. Mostly when exchanging critical data, prefer the WSS secure connection
    instead of the unencrypted WS.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following figure describes how the spy interferes and acquires data:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Man-in-the-middle](img/6962OS_05_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Man-in-the-middle attack
  prefs: []
  type: TYPE_NORMAL
- en: XSS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Cross-site scripting** (**XSS**) is a vulnerability that enables attackers
    to inject client-side scripts into web pages or applications. An attacker can
    send HTML or JavaScript code using your application hubs and let this code be
    executed on the clients'' machines.'
  prefs: []
  type: TYPE_NORMAL
- en: 'You may encounter the simplest form of an XSS attack when filling a web form.
    Imagine that someone sends the following data using the chat application we developed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Try it out! Type the preceding lines in the message text field, click on **Send**
    and wait for the result.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following image shows an XSS attack to our WebSocket chat application:'
  prefs: []
  type: TYPE_NORMAL
- en: '![XSS](img/6962OS_05_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Although the image transmission is not at all bad during a chat application,
    the user sent the image by injecting HTML code. In a similar way, somebody could
    execute JavaScript code and harm the conversation.
  prefs: []
  type: TYPE_NORMAL
- en: What can we do? Taking into consideration the old rules about XSS attacks still
    works and is the best practice. Things you can do are checking your code for HTML
    entities or JavaScript syntax, and replacing them with the appropriate representation
    or simply rejecting them.
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet](https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet)
    contains a lot more information if you want to learn every aspect of XSS attacks,
    and how to avoid them.'
  prefs: []
  type: TYPE_NORMAL
- en: WebSocket native defence mechanisms
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By default, the WebSocket protocol is designed to be secure. In the real world,
    you might encounter various issues that might occur due to poor browser implementation.
    No need to worry though. As time goes by, browser vendors fix any issues immediately,
    and if you still feel afraid, you can always use some old-school fallback techniques
    (described in the next chapter).
  prefs: []
  type: TYPE_NORMAL
- en: SSH/TLS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As you have probably guessed, an extra layer of security is added when you use
    secure WebSocket connection over SSH (or TLS). Remember when you needed to decide
    between HTTP and HTTPS? You picked HTTPS only when it was absolutely necessary
    for your transactions (for example, bank account information, private data, and
    so on). Otherwise, HTTP was the way to go, as it is more lightweight and fast.
    HTTPS required more CPU resources and was quite slower than HTTP.
  prefs: []
  type: TYPE_NORMAL
- en: In the WebSocket world, you do not need to worry about the performance of a
    secure connection. Although there is still an extra TLS layer on top, the protocol
    itself contains optimizations for this kind of use, furthermore, WSS works more
    sleekly through proxies.
  prefs: []
  type: TYPE_NORMAL
- en: Client-to-Server masking
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Every message transmitted between a WebSocket server and a WebSocket client
    contains a specific key, named **masking key**, which allows any WebSocket-compliant
    intermediaries to unmask and inspect the message. If the intermediary is not WebSocket-compliant,
    then the message cannot be affected. Masking is handled by the browser that implements
    the WebSocket protocol.
  prefs: []
  type: TYPE_NORMAL
- en: Security toolbox
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Finally, we present some useful tools that help you investigate the flow of
    information between your WebSocket clients and server, analyze the exchanged data,
    and identify possible risks.
  prefs: []
  type: TYPE_NORMAL
- en: Fiddler
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Fiddler** is a great tool for monitoring the network activity and inspecting
    the traffic of any incoming or outgoing data.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows fiddler in action, displaying the WebSocket
    headers:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Fiddler](img/6962OS_05_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Fiddler can be downloaded from [http://www.fiddler2.com/fiddler2/](http://www.fiddler2.com/fiddler2/)
  prefs: []
  type: TYPE_NORMAL
- en: Wireshark
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Wireshark** is a network packet analyzer that captures the packages and displays
    their data as accurately as possible.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows wireshark in action:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Wireshark](img/6962OS_05_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Wireshark can be downloaded from [http://www.wireshark.org/](http://www.wireshark.org/)
  prefs: []
  type: TYPE_NORMAL
- en: Browser developer tools
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Chrome, Firefox, and Opera are great browsers in terms of developer support.
    Their built-in tools help us determine almost any aspect of client-side interactions
    and resources.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows Chrome developer tools in action:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Browser developer tools](img/6962OS_05_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: ZAP
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**ZAP** is a penetration-testing tool for finding vulnerabilities throughout
    your web apps and sites, by performing an attack on them! Like all the preceding
    tools, ZAP comes with a handy GUI visualization.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows ZAP in action:'
  prefs: []
  type: TYPE_NORMAL
- en: '![ZAP](img/6962OS_05_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: ZAP can be downloaded from [https://code.google.com/p/zaproxy/](https://code.google.com/p/zaproxy/)
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you investigated various security threats your web apps must
    be aware of, saw the built-in WebSocket security mechanism, and presented some
    popular tools that help us manage the network transfers better. Next, we are going
    to describe some fallback techniques for browsers that lack full or partial WebSocket
    support.
  prefs: []
  type: TYPE_NORMAL
