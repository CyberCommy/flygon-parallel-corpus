- en: Chapter 11. Breaking the Application Logic
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The business logic of an application is essential not only to present accurate
    and intended information to the users of the application, but to actually assist
    in maintaining what for some is the source of truth for a business''s state. Consider
    this: the digitization of our economy has led to most Fortune 500 companies being
    entirely digital, and those that still tout tangible products or deliver services
    are entirely dependent on their ability to process data and information. IT has
    gone from a necessary evil to an essential enabler of business, and it even has
    a competitive advantage in verticals as varied as finance, manufacturing, government,
    and healthcare. The explosion in disaster recovery and business continuity projects
    and a heightened fear of cyber events are a symptom of businesses and society
    finally coming to realize how deep this dependence goes.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: Web applications offer a peak into some of these applications. Once users have
    access to an application, they typically have actions they want taken on their
    behalf. In earlier chapters, we saw the importance of ensuring that the user was
    the right user (and not a hacker), and that security controls were properly implemented.
    This ensures the data provided back to that user is both valid and free of malice.
    Cross-site scripting, injection, and other forms of misdirection can be reflected
    from vulnerable sites to the clients and end users, but there is a class of attacks
    that looks to actually break the business rules of the application itself. If
    attackers can exploit any soft spots in the application, they can potentially
    wreak havoc on the business or organization and make the nightmare very real.
    These vulnerabilities are tough for hackers - and not as commonly exploited in
    cyber criminal efforts - because they require more intimate knowledge of the business.
    This takes time, persistence, and a dimension outside of technical how-to.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: 'The potential systems we''re likely to encounter vary greatly from **Human
    Resources** (**HR**) and **Customer Resource Management** (**CRM**) to workflow,
    supply and logistics, and **Enterprise Resource Planning** (**ERP**) tools. Regardless
    of the type of application, we''ve seen that they cannot afford to trust these
    applications to protect data blindly, even through authenticated and encrypted
    channels.Â  In this chapter, you''ll learn about how testers can conduct logic
    validation and test our target''s ability to discern bogus or malicious data,
    files, or operations. You can also learn how web applications ensure proper use
    and perform testing against common flaws that can render sites wide open to attack.
    In this chapter, we''ll go through the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: Learning how to check for inappropriate function and URL access
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automating checks using Burp Suite to ensure proper controls
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Probing access controls at various levels to ensure a proper and intended operation
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Performing file uploads to ensure error handling, validity checks, and malware
    protection are in place
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Speed-dating your target
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: Business logic is best understood through a discovery of what the application
    itself is trying to do, assessing expected behavior, and then looking for ways
    in which that expected behavior falls apart. Some of these issues may in fact
    be due to an issue with the software, or a misconfiguration of the modules supporting
    the application. While the line is blurry at times, we're going to focus on behavioral
    flaws that are better uncovered with insight into the application's purpose, the
    company's objectives, and the processes that the target's developers believe they
    were delivering.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: So, how does OWASP define these vulnerabilities? In actuality, these flaws are
    less straightforward than the others we have looked at together so far. They are
    also often categorized improperly, but our major concern should be the integrity
    of the application and not a subjective categorization. What is important is making
    sure we test for both code and logic flaws, and that the appropriate recommendations
    are made to the sponsoring organization to ensure that exploits do not find their
    mark. The higher level of requisite knowledge often confines business logic testing
    to gray or white-box testing, as it is too time-consuming to both familiarize
    yourself with and conduct testing of these flaws in a black-box penetration test.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: 'In [Chapter 9](000.html#), *Stress Testing Authentication and Session Management*,
    we discussed a vulnerability class nominated in the 2013 OWASP Top 10 as their
    #7 risk, ***Missing Functional Level Access Control***. For reference, I''ve included
    their summary again in the following screenshot. While many tenets of this were
    discussed in [Chapter 9](000.html#), *Stress Testing Authentication and Session
    Management,Â *some of the flaws in this category are in fact due to business logic
    flaws or poor decomposition of requirements from the business process to the application''s
    specification. We can hardly blame the software team for not being mind readers.
    I know, it is so tempting! Other vulnerabilities fall outside the functional access
    control realm, and instead deal with improper processing of transactions.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B03198_11_01.png)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
- en: OWASP risk summary for Missing Functional Level Access Control
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: We'll take a look at some of these concerns in a few of the more relevant domains
    to ensure we're thinking like our prey and better acclimated to the business problems
    they are encountering.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: Cashing in with e-commerce
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If a website isÂ focused on e-commerce, it may very likely have a shopping
    cart. If we think about the functions that a modern cart might have, the list
    usually includes listings of the products in the cart, a way to modify the quantity
    of each, fields to enter coupon and discount codes, and usually a payment or shipping
    workflow, similar to that seen on Packt''s own site at [https://www.packtpub.com/](https://www.packtpub.com/)Â in
    the following screenshot:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B03918_11_02.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
- en: Â Packt's own shopping cart/e-commerce site
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: 'With the exception of purchasing an awesome product, there are a lot of things
    that could go wrong in a shopping application. Â Even if we can prove it wasn''t
    coded improperly, there may still be issues where workflows or processes used
    to drive the implementation were not properly validated. Here are some examples
    of business logic flaws where we may lose control of the cart:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: '**Discount anomalies**: Some sites fail to recalculate the discount of an order
    after certain operations that remove products or modify quantities. Some savvy
    shoppers have even found sites that allowed coupons to be applied with certain
    products, and then deleted those products but maintained the coupon''s advantage.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Price manipulation**: Some early travel sites provided no validation of the
    pricing returned to the application, but instead trusted the client''s browser
    to accurately report back the pricing seen. After enough people were able to purchase
    flights for a fraction off their actual cost, you can bet those developers began
    to validate everything.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cart swapping**: Some sites have in the past done a poor job of associating
    carts with authenticated sessions, and when sharing carts with friends and relatives,
    it was possible to purchase cart contents on one user''s payment while shipping
    to the second user''s address. Hackers have exploited this flaw.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Gift card forgeries**: Perhaps no single flaw better demonstrates that business
    logic vulnerabilities extend far beyond just the digital realm. Hackers and fraudsters
    have begun to exploit the now-ubiquitous gift card domain. As gift cards are typically
    untraced by many sellers, and their balance applied to accounts with minimal tracking
    after the fact, hackers have begun to siphon gift card balances by fuzzing potential
    unredeemed card numbers and guessing the existence of cards in circulation. Using
    Burp Suite''s fuzzing capabilities, a magnetic card strip writer, and some patience,
    it is possible for a malicious fraud to generate a massive quantity of cards with
    balances.Â More can be found atÂ [https://www.solutionary.com/resource-center/blog/2015/12/hacking-gift-cards/](https://www.solutionary.com/resource-center/blog/2015/12/hacking-gift-cards/).'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**礼品卡伪造**：也许没有任何一个缺陷能更好地证明业务逻辑漏洞远不止局限于数字领域。黑客和欺诈者已经开始利用现在无处不在的礼品卡领域。由于许多卖家通常不追踪礼品卡，而且在事后对账户的余额应用了最少的跟踪，黑客已经开始通过模糊潜在未兑现的卡号并猜测流通中的卡存在来获取礼品卡余额。利用Burp
    Suite的模糊能力，磁卡条编写器和一些耐心，恶意欺诈者可以生成大量带有余额的卡。更多信息可以在[https://www.solutionary.com/resource-center/blog/2015/12/hacking-gift-cards/](https://www.solutionary.com/resource-center/blog/2015/12/hacking-gift-cards/)找到。'
- en: Testing against these flaws can involve fuzzing various parameters - both explicitly
    listed in the user-input section as well as in the hidden field and cookie range.
    Burp and ZAP are well suited for this role. That being said, many of the true
    process issues will have to be discovered by a knowledgeable human. The OWASP
    **Broken Web Application** (**BWA**) **Virtual Machine** (**VM**) provides a **BodgeIt**
    web application that can help practice some shopping-specific issues.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 针对这些缺陷的测试可以涉及对各种参数进行模糊测试 - 包括用户输入部分中明确列出的参数，以及隐藏字段和cookie范围中的参数。Burp和ZAP非常适合这个角色。也就是说，许多真正的流程问题将需要由知识渊博的人来发现。OWASP**破损的Web应用程序**（**BWA**）**虚拟机**（**VM**）提供了一个**BodgeIt**
    Web应用程序，可以帮助练习一些与购物相关的问题。
- en: Financial applications - Show me the money
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 金融应用程序 - 给我看钱
- en: 'Financial portals, such as those in e-commerce, have a direct impact on users
    across the wide spectrum of financial state. Banking and investment companies
    tend to have a paranoid focus on cyber security from the technical side, but this
    does not mean that all business logic has been properly translated or that all
    of the rules have been run through every iteration or use case. These sites are
    especially prone to business logic issues, when they focus on a niche service
    or purposely venture out from standard banking conventions, such asÂ the practice
    site shown in the following screenshot:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 金融门户网站，如电子商务中的门户网站，直接影响着各种金融状态的用户。银行和投资公司往往对技术方面的网络安全非常关注，但这并不意味着所有的业务逻辑都已经得到了正确的转化，或者所有的规则都已经通过了每一次迭代或使用案例。当它们专注于一个特定的服务或故意远离标准的银行惯例时，这些网站特别容易出现业务逻辑问题，比如下面截图中显示的练习网站：
- en: '![](img/B03918_11_03.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B03918_11_03.png)'
- en: Practice site for Financial Business Logic, Cyclone Transfers
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 金融业务逻辑的练习网站，Cyclone Transfers
- en: 'Some of the most commonly or notoriously seen flaws in the past are listed
    here:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 过去最常见或臭名昭著的缺陷列在这里：
- en: '**Account recovery**: Not unique to financial institutions, but well worth
    the effort here, are attacks against the account recovery process of a bank or
    company. By brute-forcing or better yet, social engineering, hackers can meet
    the threshold with security questions to actually hijack the account for their
    own uses, often emptying them long before the users are aware.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**账户恢复**：不仅适用于金融机构，而且在这里非常值得努力的是，对银行或公司的账户恢复流程进行攻击。通过暴力破解或更好地说，社会工程学，黑客可以通过安全问题满足门槛，实际上劫持账户用于自己的用途，通常在用户意识到之前就已经将其清空。'
- en: '**Distributed denial of dollars attack**: When the founders of the infamous
    Pirate Bay website were fined for their part in distributing illegally procured
    content and software, one of them (Gottfrid Svartholm, [https://news.hitb.org/content/pirate-bay-proposes-distributed-denial-dollars-attack-ddo](https://news.hitb.org/content/pirate-bay-proposes-distributed-denial-dollars-attack-ddo))
    devised a plan to attack the legal team that came after them. By asking activist
    supporters to donate one penny apiece, they hoped to force the prosecuting team
    to incur transaction fees of $1 per transaction. Taken to scale, this would tally
    in the millions, while they would be receiving only 1/100th of the funds in return.
    Validation on the part of the financial institutions could certainly assist in
    nipping these attacks in the bud.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**分布式拒绝支付攻击**：当臭名昭著的海盗湾网站的创始人因分发非法获取的内容和软件而被罚款时，其中一位（Gottfrid Svartholm，[https://news.hitb.org/content/pirate-bay-proposes-distributed-denial-dollars-attack-ddo](https://news.hitb.org/content/pirate-bay-proposes-distributed-denial-dollars-attack-ddo)）设计了一个计划来攻击追究责任的法律团队。通过要求活动支持者每人捐赠一分钱，他们希望迫使起诉团队承担每笔交易1美元的交易费。如果规模扩大，这将达到数百万美元，而他们只能收到资金的1/100。金融机构的验证肯定可以帮助及早制止这些攻击。'
- en: '**Account linking issues**: Pretty much any institution these days needs to
    allow their customers to link financial accounts with other institutions. This
    isn''t just convenience â�� without this feature it would be impossible to load
    a balance on their site in the first place. That being said, exploits continue
    to impact the financial world, capitalizing on a weak institution in the chain.
    Insufficient validation of user entry can allow hackers to divert funds and change
    automated payment methods.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**账户链接问题**：如今，几乎任何机构都需要允许他们的客户将金融账户与其他机构链接。这不仅仅是方便 - 没有这个功能，根本不可能在他们的网站上加载余额。也就是说，利用漏洞继续影响金融世界，利用链条中的弱机构。用户输入的不充分验证可以允许黑客转移资金并更改自动付款方式。'
- en: The **Cyclone transfers** application on the OWASP BWA VM can help demonstrate
    some of the issues above, as can a large assortment of VMs downloaded from [www.vulnhub.com](http://www.vulnhub.com).
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: OWASP BWA VM上的**Cyclone transfers**应用程序可以帮助演示上述问题，还可以从[www.vulnhub.com](http://www.vulnhub.com)下载大量的虚拟机来演示。
- en: Hacking human resources
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 黑客人力资源
- en: Human resources portals are becoming a popular target for hackers. Companies
    offering flexible work arrangements, or dependent on remote users, are now extending
    HR portal access to provide public cloud access. The services they provide and
    the information they assimilate presents an irresistible target. Similar types
    of site and workflow are found in government social programs, such as the US Veterans
    Affairs or Social Security Administration portals. With these sites, we see a
    convergence of personal information and banking information, often compromising
    confidential information (pay scales, compensation structure, performance reviews,
    and similar ones), which can be extremely valuable on the dark web or as part
    of a blackmail campaign.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 人力资源门户正在成为黑客的热门目标。提供灵活工作安排或依赖远程用户的公司现在正在扩展人力资源门户访问以提供公共云访问。他们提供的服务和吸收的信息构成了一个不可抗拒的目标。类似类型的网站和工作流程也在政府社会计划中发现，例如美国退伍军人事务部或社会保障管理局门户。在这些网站上，我们看到个人信息和银行信息的融合，通常会泄露机密信息（薪酬标准、薪酬结构、绩效评估等），这些信息在暗网上或作为勒索活动的一部分可能非常有价值。
- en: Note
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: A good resource to learn about the very involved confluence of HR and application
    security can be found in the standards outlined in the ***International Organization
    for Standardization (ISO) 27002:2013 Information Security Management, Chapter
    7, Human Resources Security***.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 学习人力资源和应用安全交汇的一个很好的资源可以在***国际标准化组织（ISO）27002:2013信息安全管理，第7章，人力资源安全***中找到。
- en: 'Common risks in HR applications center around sensitive information disclosure,
    but they can also impact payroll and evaluation toolsets. Some of the most concerning
    risks are:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 人力资源应用程序中的常见风险集中在敏感信息披露，但也可能影响工资单和评估工具集。一些最令人担忧的风险包括：
- en: '**Personal data exposure**: Improper use of role-based access controls in a
    personnel database may allow a user to accidentally (or an attacker to deliberately)
    access information on other employees without legitimate rights. Once accessed,
    the data might be vulnerable to tampering, deletion, or exfiltration.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**个人数据曝光**：在人事数据库中不当使用基于角色的访问控制可能会允许用户意外（或攻击者故意）访问其他员工的信息，而这些员工没有合法的权限。一旦访问，数据可能容易遭到篡改、删除或外泄。'
- en: '**Workflow manipulation**: Transfers, raises, demotions, firings â�� the turmoil
    that can be caused if these workflows are accessed inappropriately cannot be overstated.
    Luckily (for now), no publicly announced breaches of this type have been announced,
    but no one wants to be first.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**工作流程操纵**：调动、加薪、降职、解雇——如果这些工作流程被不当访问，可能引起的混乱是不容小觑的。幸运的是（目前为止），还没有公开宣布发生这种类型的违规事件，但没有人想成为第一个。'
- en: '**Fluid employee transitions**: Many customers will have HR organizations and
    employee bases that both make use of temporary, contract, and permanent employees.
    In addition, many will support some level of interaction with employees before
    and after employment (recruits, retirees, families, and so on), which complicates
    **Role-based Access Control** (**RBAC**) even further. It is essential that these
    different roles are well defined and implemented to ensure timely adjustments
    when an employee''s status changes.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**员工流动性**：许多客户的人力资源组织和员工群体都使用临时、合同和永久员工。此外，许多人在雇佣前后（招聘、退休、家庭等）与员工进行一定程度的互动，这进一步复杂化了**基于角色的访问控制**（**RBAC**）。确保这些不同的角色被明确定义和实施，以确保在员工状态发生变化时及时进行调整至关重要。'
- en: Easter eggs of evil
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 邪恶的复活节彩蛋
- en: Kids in some areas of the world celebrate the Spring Christian holiday of Easter
    by finding hidden treats and eggs. While the significance of theseÂ **easter eggs**
    to the holiday are tenuous at best, the term carried over into video games, with
    some programmers at Atari being the first to intentionally hide code and interesting
    responses from the normal field of play, accessible only when certain combinations
    of keys or events unlocked the hidden events. Some interesting ones are still
    out there on modern OSes ([http://www.businessinsider.com/mac-windows-easter-eggs-2013-2](http://www.businessinsider.com/mac-windows-easter-eggs-2013-2)).
    Hackers have begun to use similar methods, as normal software validation tools
    may miss these events or fail to see them in relation to each other.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 世界上一些地区的孩子们通过寻找隐藏的糖果和彩蛋来庆祝春天的基督教节日复活节。虽然这些**复活节彩蛋**与节日的意义关系微弱，但这个术语在视频游戏中流传开来，Atari的一些程序员是第一批有意隐藏代码和有趣响应的人，只有在特定的按键组合或事件解锁隐藏事件时才能访问。一些有趣的彩蛋仍然存在于现代操作系统上（[http://www.businessinsider.com/mac-windows-easter-eggs-2013-2](http://www.businessinsider.com/mac-windows-easter-eggs-2013-2)）。黑客已经开始使用类似的方法，因为正常的软件验证工具可能会忽略这些事件，或者无法看到它们之间的关系。
- en: To avoid these eggs from wreaking havoc, our first priority should be to ensure
    that hackers cannot plant information in input fields that do not meet strict
    validation or that anything malicious is stripped or screened for any embedded
    code snippets or fragments. While code delivered in this way cannot usually be
    executed, other attacks (buffer overflows and code injections) elsewhere in the
    application could refer to these fields and reassemble the executable or script.
    Fully automated security vulnerability scanners will miss the potential of these
    instances, as they will be unable to properly mimic the conditions that stick
    the code back together. Their best defense, and the most important thing we should
    test, is to make sure that the user inputs are validated to ensure they are completely
    relevant. Non-printable characters or programming syntax has no place in an address
    field. Unicode has no place in a numerical field.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 避免这些漏洞产生影响，我们的首要任务应该是确保黑客无法在不符合严格验证的输入字段中植入信息，或者剥离或筛选任何嵌入式代码片段或片段中的任何恶意内容。虽然以这种方式传递的代码通常无法执行，但应用程序中其他攻击（缓冲区溢出和代码注入）可能会引用这些字段并重新组装可执行文件或脚本。完全自动化的安全漏洞扫描器将忽略这些实例的潜力，因为它们无法正确模拟将代码重新组合的条件。它们最好的防御措施，也是我们应该测试的最重要的事情，是确保用户输入经过验证，以确保它们是完全相关的。在地址字段中，不可打印的字符或编程语法是不合适的。Unicode在数字字段中也是不合适的。
- en: So many apps to choose fromâ�¦
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 这么多应用程序可供选择...
- en: As you can see, this is just scratching the surface.Â  While tools can assist
    in pen testing business logic for these applications, it is critical to scope
    these targets appropriately, as testing them completely will require gaining intimate
    knowledge of not only the application but also the tailoring that the organization
    implemented to adapt it to their needs. No matter the application, they all receive
    and process data. Once we've determined where and how, we have some basics we
    should check to prevent common exploits.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，这只是皮毛。虽然工具可以帮助渗透测试这些应用程序的业务逻辑，但是适当地限定这些目标范围是至关重要的，因为要完全测试它们将需要对应用程序以及组织实施的定制进行详细了解。无论应用程序是什么，它们都会接收和处理数据。一旦我们确定了在哪里以及如何，我们就有一些基本的检查项目，可以防止常见的漏洞利用。
- en: Functional Feng Shui
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 功能风水
- en: '* * *'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: In pen testing applications, so far we have been quite methodical in how we
    approach each technique used here. Automated tools such asÂ our proxy scanners,
    brute-forceÂ applications, and the many enumeration and scanning tools have helped
    assist with that and could feasibly enable a newer pen tester to successfully
    identify many vulnerabilities without intimate knowledge of the environment. This
    is because many of those tests related to improper coding, technical flaws, or
    misconfigurations, and they were much more tangible in nature.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在渗透测试应用程序中，到目前为止，我们在如何处理这里使用的每种技术方面已经非常有条理。自动化工具，如我们的代理扫描器、暴力破解应用程序以及许多枚举和扫描工具，已经帮助我们做到了这一点，并且可能使新的渗透测试人员能够成功地识别出许多漏洞，而无需对环境有详细的了解。这是因为许多测试与不正确的编码、技术缺陷或配置错误有关，它们在性质上更加具体。
- en: Business logic testing, however, is all about understanding the workflow the
    site is trying to articulate or execute. Now, we still may be employing tools,
    but only after they Â have been directed with hands-on knowledge. In many cases,
    the work to adapt a tool to a specific business logic test may far exceed the
    time to conduct a manual scan itself. Think of this as more informed testing,
    and that time is well justified in a gray or white box scope to ensure that the
    intent of the application owners and developers is properly implemented. Let's
    take a look at ways we can tackle these areas using tools we've already hit on
    earlier.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，业务逻辑测试完全是关于理解网站试图表达或执行的工作流程。现在，我们可能仍在使用工具，但只有在具有实际知识的情况下才会使用。在许多情况下，将工具调整到特定的业务逻辑测试可能远远超过手动扫描本身所需的时间。将其视为更加明智的测试，这样的时间在灰盒或白盒范围内是完全合理的，以确保应用程序所有者和开发人员的意图得到正确实施。让我们看看如何使用我们之前已经介绍的工具来解决这些问题。
- en: Basic validation checks
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 基本验证检查
- en: For a good deal of business applications, we'll need to be the brains of the
    operation and help the tools understand how the application is expected to work.
    Proxy tools can help, and they can help us hone in on passed variables, showing
    us where the handoffs between client and server exist. Most application developers
    will only think to validate on one end or the other, and so, by catching them
    in one of these handoffs, we can often find some room to cause trouble. If it
    is an e-commerce site, we'll want to validate that the application doesn't let
    a proxy set its own price.Â  If it is an HR site or healthcare portal, we'll want
    to ensure that deliberately invalid information cannot be submitted in the place
    of valid names, personal information, addresses, and phone numbers.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 对于大量的业务应用程序，我们需要成为操作的大脑，并帮助工具理解应用程序预期的工作方式。代理工具可以帮助我们聚焦传递的变量，向我们展示客户端和服务器之间的交接点在哪里。大多数应用程序开发人员只会考虑在一端或另一端进行验证，因此，通过在这些交接点中捕捉它们，我们通常可以找到一些麻烦的空间。如果是电子商务网站，我们需要验证应用程序不会让代理设置自己的价格。如果是人力资源网站或医疗保健门户网站，我们需要确保故意提交的无效信息不能代替有效的姓名、个人信息、地址和电话号码。
- en: 'We can check against these using Burp Suite''s Proxy Intercept together with
    the Intruder feature, where you can test input validation while attempting to
    submit *out-of-bounds*Â strings to each field. To do this, we can pull an appropriate
    user-input page from something such as the **OWASP Security Shepherd Application**
    included in the OWASP BWA VM, and venture into the **Poor Data Validation Lesson**,
    as shown in the following screenshot:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用Burp Suite的Proxy Intercept和Intruder功能来检查这些，其中您可以在尝试向每个字段提交*越界*字符串的同时测试输入验证。为此，我们可以从OWASP
    BWA VM中包含的OWASP Security Shepherd Application等内容中提取适当的用户输入页面，并进入Poor Data Validation
    Lesson，如下面的屏幕截图所示：
- en: '![](img/B03918_11_04.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B03918_11_04.png)'
- en: OWASP Security Shepherd Application
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: OWASP安全牧羊人应用程序
- en: 'If you enter a negative number right from the get-go, you''ll notice that it
    returns a message saying **`An Error Occurred: Invalid Number: Number must be
    greater than 0`**Â as seen in the following screenshot. Curiously, when I look
    at Burp''s Proxy Intercept, there is no GET or POST waiting to be forwarded. This
    indicates that there is a client-side validation.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你一开始就输入一个负数，你会注意到它返回一个消息，说**`发生错误：无效数字：数字必须大于0`**，如下面的截图所示。有趣的是，当我查看Burp的代理拦截时，没有GET或POST等待转发。这表明存在客户端验证。
- en: '![](img/B03918_11_05.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B03918_11_05.png)'
- en: Attempting an invalid input
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试无效输入
- en: When a valid number is submitted, we can pass the client-side validation and
    see the POST message in Burp Proxy's HTTP history.Â  In the sample shown in the
    following screenshot, we can see the `userdata` field, which was submitted as
    `1234`, but I have already modified it so it is negative. If the application is
    relying only on the client-side validation, this should bypass it.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 当提交一个有效数字时，我们可以通过客户端验证，并在Burp代理的HTTP历史记录中看到POST消息。在下面的截图中，我们可以看到`userdata`字段，它被提交为`1234`，但我已经修改为负数。如果应用程序只依赖于客户端验证，这应该可以绕过。
- en: '![](img/B03918_11_06.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B03918_11_06.png)'
- en: Modifying the Client-Side validated input
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 修改客户端验证的输入
- en: 'In this lesson in the **Security Shepherd** site, we''ll see success in the
    following screenshot. In a real test of a production application, our results
    will vary: we may see the mangled output repeated back as a stored element, or
    we may see an adjustment to an account''s balance or some other measurable entity.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在**安全牧羊人**网站的这节课中，我们将在下面的截图中看到成功。在对生产应用程序进行真正的测试时，我们的结果会有所不同：我们可能会看到混乱的输出作为存储元素重复返回，或者我们可能会看到对账户余额或其他可衡量实体的调整。
- en: '![](img/B03918_11_07.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B03918_11_07.png)'
- en: Successful exploit of poor validation
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 成功利用了不良验证
- en: 'This same approach can be used in any case where an active client-side process
    is conducting the input validation, the HTTP message is unprotected, and the server-side
    doesn''t second-check the inputs. In this use case, it was a number, but with
    some imagination we could apply this to address fields, comment areas, personal
    information, banking information, and so on. Using Burp''s Intruder, we can fuzz
    multiple parameters and engage payload generators (more info here: [https://portswigger.net/burp/help/intruder_payloads_types.html](https://portswigger.net/burp/help/intruder_payloads_types.html))
    either from BurpSuite''s own third-party sources or of our own making. Many pen
    testers will develop their own generators using Java, Python, or Ruby for integration
    with Burp Suite, and this is a perfect application for this. A great example of
    how we could explore the APIs Burp offers and develop a fuzzer is detailed atÂ [http://apprize.info/python/black/6.html](http://apprize.info/python/black/6.html).'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何情况下，只要活动的客户端进程进行输入验证，HTTP消息是不受保护的，服务器端不会对输入进行二次检查，都可以使用相同的方法。在这个用例中，它是一个数字，但是我们可以想象，我们可以将其应用于地址字段、评论区域、个人信息、银行信息等。使用Burp的Intruder，我们可以模糊多个参数并使用有效载荷生成器（更多信息请参阅：[https://portswigger.net/burp/help/intruder_payloads_types.html](https://portswigger.net/burp/help/intruder_payloads_types.html)），可以来自BurpSuite自己的第三方来源，也可以是我们自己制作的。许多渗透测试人员将使用Java、Python或Ruby开发自己的生成器，以便与Burp
    Suite集成，这是一个完美的应用场景。一个很好的例子是我们如何探索Burp提供的API并开发模糊器的详细信息，请参阅[http://apprize.info/python/black/6.html](http://apprize.info/python/black/6.html)。
- en: Sometimes, less is more?
  id: totrans-67
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 有时，少即是多？
- en: Whenever I get longwinded while explaining something, my coworkers will gently
    remind me that *less is more*. In web transactions, it is often the case that
    HTTP requests and responses will disclose multiple traceable elements that, rather
    than adding clarity to the session's state, will instead undermine its security.
    We've seen multiple applications in earlier chapters use combinations of **`PHPSESSID`**
    or **`JSESSID`**, username, user number, session token, and so on used to track
    the same conversation.Â  While I am all about providing assurances that something
    is well tracked, if the application still allows state to be maintained with only
    a subset of those session management parameters in place, then finding out which
    ones can in fact carry the session without the others can provide significant
    insight into how we can fuzz or alter the behavior of the application. This can
    be tested in Intruder with a one-off test, but for best results I would recommend
    using Repeater to ensure playback and documentation are possible.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 每当我在解释某事时变得啰嗦时，我的同事们会温柔地提醒我“少即是多”。在Web交易中，通常情况下，HTTP请求和响应会透露多个可追踪的元素，而不是为会话状态增加清晰度，反而会削弱其安全性。我们在前几章中看到，多个应用程序使用**`PHPSESSID`**或**`JSESSID`**、用户名、用户编号、会话令牌等组合来跟踪同一对话。虽然我一直致力于提供某种程度的保证，表明某些东西被很好地跟踪，但如果应用程序仍然允许只使用部分会话管理参数来维护状态，那么找出哪些参数实际上可以在没有其他参数的情况下传递会话，可以为我们了解如何模糊或更改应用程序的行为提供重要的见解。这可以在Intruder中进行一次性测试，但为了获得最佳结果，我建议使用Repeater来确保可以进行回放和文档记录。
- en: 'I can send any suitable POST or GET message to **`Repeater`** and systematically
    remove, alter, add, or change the order of all of the parameters in my requests,
    which in this case are the many fields that the application appears to be using
    to maintain the session state. In the following screenshot, we see that there
    are a load of session IDs and tokens in use:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我可以向**`Repeater`**发送任何合适的POST或GET消息，并系统地删除、修改、添加或更改请求中的所有参数的顺序，这些参数是应用程序似乎正在使用的许多字段，以维护会话状态。在下面的截图中，我们可以看到有大量的会话ID和令牌在使用中：
- en: '![](img/B03918_11_08.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B03918_11_08.png)'
- en: Â Blank slate of cookies and parameters
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 空白的cookies和参数
- en: With some trial and error, I found that the `JSESSIONID` and `userdata` fields
    were all that we needed to maintain state. Knowing this, I could take the tailored
    request and send it to Intruder again (as shown in the following screenshot),
    allowing me to concentrate on fuzzing just the essential fields. If we were interested,
    we could also send it to one of the many third-party extensions that can mangle
    the various session IDs and attempt to exploit weak session management.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B03918_11_09.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
- en: Sending essential fields back to Intruder
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: The key to business logic testing is blending the insight of what the application
    is supposed to do and how it is to serve with the appropriate tools and tweaks
    within to help speed the testing along.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: Forgery shenanigans
  id: totrans-76
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Once you've seen how legitimate requests of the web application are formatted
    and populated for legitimate flows, the same methods and tools can be used to
    craft your own requests, without the need for a client's browser. Hackers may
    use this method to conduct large-scale operations against a web application, but
    we as testers can also use this to more completely test possible validation flaws
    for fields not normally submitted. An example may be in a dynamic form page where
    a client-side validation may normally hide fields contextually, based on prior
    selections, check boxes, and so on. Forging requests can allow us to submit incrementing
    fields or build parameter combinations. These flaws are common in applications
    that do not validate on both sides of the transaction (client and server).
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: Other features that may fall into this category are hidden switches that can
    turn on debug or verbose messaging. If hackers are able to toggle these switches,
    the resulting messages returned by the application can be detrimental. Debug information
    often contains a highly-detailed manifest of the application's inner workings;
    were they to fall into the wrong hands, they could reveal too much to the attacker.
    Other fields may not be normally accessible and could impact permissions or access.
    Testing for the possibility of forgeries helps ensure that they do not cause issues
    within the application or result in an inadvertent disclosure or the escalation
    of privileges.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: What does this button do?
  id: totrans-79
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Many internal web applications that consolidate multiple functions or act as
    a common portal for many teams will often employ pick-lists in some fields to
    allow their users to help determine what page, project, share, or sub-function
    they are interested in. I worked at an employer that was a heavy user of **Microsoft
    SharePoint** in its early years, and they would set up a new project portal for
    each proposal, development effort, or the integration job we launched. While I
    was possibly involved in five projects at one time, I might have been able to
    see forty or more on that portal. In most cases, I was denied entry, but in a
    couple of instances, I was allowed entry accidentally.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: We as tester's need to ensure that controls such as this do not present invalid
    options or provide too much intel to the user as to what else may exist on the
    target environment. The attack surface of an application (the number of potential
    vectors) expands withÂ each added function or group a web application must consider.
    Web developers should consider removing invalid options from the get-go or, at
    the very least, ensuring that those presented to a specific user do not reveal
    too much about *what lies beneath*. As mentioned before, this testing is best
    suited for heavy experimentation in a white-box test scope and something that
    should be done at all stages of the **Software Development Life Cycle** (**SDLC**).
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: Timing is everything
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Time-based features are important features in e-commerce sites and banking applications
    where it is desired to time-out a workflow to prevent unattended sessions. This
    feature is also familiar to anyone who has used an online travel booking site
    or ticket exchange (for example Fandango in the following screenshot), where the
    company is trying to prevent bots or squatters from occupying preferred seating
    and locking out other valid users. These provisions need to work though â�� an
    issue here can allow an attacker's client to deny product or sales, hijack sessions,
    or otherwise exploit the trusted connection during a help-open transaction.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 基于时间的功能是电子商务网站和银行应用程序中的重要功能，希望超时工作流以防止无人看管的会话。这个功能对于任何使用在线旅行预订网站或票务交换（例如下面屏幕截图中的Fandango）的人来说也是熟悉的，公司试图防止机器人或霸占者占据首选座位并锁定其他有效用户。这些规定需要起作用，否则这里的问题可能会允许攻击者的客户拒绝产品或销售，劫持会话，或者在帮助开放交易期间利用受信任的连接。
- en: '![](img/B03918_11_10-1-1024x598.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B03918_11_10-1-1024x598.png)'
- en: Time-based transactions for validation
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 基于时间的交易验证
- en: Time-based validation testing is something that can only be attempted manually
    and only after an extensive review of the design or code. Testing should verify
    that refreshes, session hijacking, and the fuzzing of parameters are unable to
    affect the application's counter and prevent the time-restricted action.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 基于时间的验证测试只能手动尝试，并且只能在对设计或代码进行广泛审查之后进行。测试应验证刷新、会话劫持和参数的模糊化无法影响应用程序的计数，并阻止时间限制的操作。
- en: Reaching your functional limits
  id: totrans-87
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 达到您的功能极限
- en: Some web applications need to limit the number of times a transaction is executed
    or the number of times a function is called per workflow.Â  As discussed in the
    cashing in with e-commerce section earlier in this chapter, poorly executed shopping
    carts have been seen to accept multiple applications of the same discount coupon.
    Airfare sites may seek to limit tickets purchased to a one-time transaction, but
    there have been instances where duplicate ticket orders have been purchased under
    the same one-time transaction cost, thereby circumventing proper charges.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 一些Web应用程序需要限制事务执行的次数或每个工作流中调用函数的次数。正如本章前面的电子商务部分所讨论的，执行不良的购物车已经被发现接受了相同折扣券的多个应用。机票网站可能会试图将购买的机票限制为一次性交易，但已经出现了在相同的一次性交易成本下购买重复机票订单的情况，从而规避了适当的收费。
- en: Some applications will forgo their own workflows for integration with proven
    thirdÂ parties, especially in transaction integration with services such asÂ **PayPal**
    or **Google Payment Center**. But, as we can see in a sandboxed PayPal environment
    in the following screenshot, there are plenty of moving pieces that the application
    team needs to properly understand and accommodate or a hacker will. Luckily many
    of the best vendors for these financial processing pages are providing tools,
    training, and best practices such asÂ this to ensure proper implementation and
    reduced threat exposure. Keep in mind that integrating applications, if improperly
    secured, could pose a risk to the greater payment processing application as well.
    It is for these reasons that large payment processing and transaction assistance
    services provide not only top-notch enablement, but rigorous segmentation, verification
    services, revocable API keys, and other countermeasures to quickly squash any
    attacks that spill from a tenant service into their domain.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 一些应用程序将放弃他们自己的工作流程，与经过验证的第三方集成，特别是与**PayPal**或**Google支付中心**等服务进行交易集成。但是，正如我们在下面的屏幕截图中可以看到的，在一个沙盒化的PayPal环境中，有很多移动的部分，应用团队需要正确理解和适应，否则黑客会利用。幸运的是，许多最好的金融处理页面供应商都提供工具、培训和最佳实践，以确保正确的实施和减少威胁。请记住，如果集成的应用程序安全性不当，可能会对更大的支付处理应用程序构成风险。正是出于这些原因，大型支付处理和交易辅助服务不仅提供一流的启用功能，还提供严格的分割、验证服务、可撤销的API密钥和其他快速消除从租户服务中溢出到其领域的任何攻击的对策。
- en: '![](img/B03918_11_11-1.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B03918_11_11-1.png)'
- en: PayPal's Development Functional Topology
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: PayPal的开发功能拓扑
- en: Functional limitations need to be tested with humans-in-the-loop, much like
    other aspects of this chapter. That being said, it is imperative that the tester
    have either the design documentation and code or interaction with the product
    development team, to ensure that proper behavior is well understood prior to testing
    and that any issues are quickly addressed.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 功能限制需要与人类一起进行测试，就像本章的其他方面一样。也就是说，测试人员必须要么有设计文档和代码，要么与产品开发团队进行互动，以确保在测试之前充分理解正确的行为，并且任何问题都能得到迅速解决。
- en: Do we dare to accept files?
  id: totrans-93
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 我们敢接受文件吗？
- en: Some web applications, such as expense reporting tools, online graphics or picture
    galleries, or insurance companies, may require the ability to upload files as
    part of a workflow. As most of these files are needed for the purpose of sharing
    with company staff or dissemination among other users, it is imperative that these
    file types be properly gated and that the files themselves are clean of malware
    or questionable material. Companies should, before welcoming these files into
    their workflows, be certain of the need and make educated decisions as to where
    their liability to other stakeholders ends. Do they need to know whether antivirus
    or anti-malware scans are complete? Do they need to police potential intellectual
    property or personal information? Should files with macros or encryption be permitted,
    and if so, how?
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 一些Web应用程序，如费用报告工具、在线图形或图片库或保险公司，可能需要在工作流程中上传文件的能力。由于大多数这些文件是为了与公司员工共享或在其他用户之间传播而需要的，因此这些文件类型必须得到适当的门控，并且文件本身必须没有恶意软件或可疑材料。在欢迎这些文件进入他们的工作流程之前，公司应确定是否有必要，并就他们对其他利益相关者的责任作出明智的决定。他们需要知道是否需要完成防病毒或反恶意软件扫描吗？他们需要监管潜在的知识产权或个人信息吗？是否应允许带有宏或加密的文件，如果是，如何处理？
- en: Note
  id: totrans-95
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: These questions all require answers before a production environment should be
    allowed on the web. Intimate knowledge of these policies and the resulting control
    can help us in testing any boundary conditions, and we'll certainly need to have
    explicit permission when deploying test payloads that may be accepted and subsequently
    viewed by others.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: Web applications may be technically sound, but if the developers are not accurately
    and precisely executing the intent of the company operating the portals, applications,
    or services, risks abound. These business logic issues are evasive but important.
    Customers will often cringe at the overhead required to test for them in production.
    This fear or anxiety should help us drive home the need for integrating penetration
    testing within the SDLC, and help us to justify well organized and up-to-date
    documentation of all elements in the application and supporting environment. Testing
    after the fact is costly and time-consuming, and any issues found after the fact
    often cause a complete redesign of that portion of a portal or the workflows that
    support them.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: Business logic testing is a departure for us in that it relies almost completely
    on manual web page interaction. The time on target, not to mention the details
    needed to inform adequate testing, implies that this portion of an application's
    penetration testing will be separated from the more commonly thought-of black-box
    tests. In most cases, business logic testing will instead be conducted internally
    or by a contractor or consultant with extensive experience and a longer-term teaming
    arrangement with the developers themselves. It is probably well worth the effort
    for an application development team to cooperate with the testing, and to learn
    how to check themselves to better guide development. Independent testing should
    always be encouraged, but the impact of findings can be better addressed early
    in development.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: Now that we've completed most of the testing categories for a proper web penetration
    test, we've got the job of delivering the good (or bad) news to the customer and
    wrapping up the test. We'll look at how any customer can improve their standing,
    no matter the results. We'll also take a look at some good best-practice recommendations
    that can help us articulate our findings, both during and at the conclusion of
    our testing. At the end of the day, we also need to be able to write a report
    that we can deliver and show the customer value; without this, we're going to
    have a hard time finding a follow-on business or references. We're almost there
    folks; let's finish strong!
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
