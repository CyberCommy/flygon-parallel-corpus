- en: Chapter 11. Breaking the Application Logic
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The business logic of an application is essential not only to present accurate
    and intended information to the users of the application, but to actually assist
    in maintaining what for some is the source of truth for a business''s state. Consider
    this: the digitization of our economy has led to most Fortune 500 companies being
    entirely digital, and those that still tout tangible products or deliver services
    are entirely dependent on their ability to process data and information. IT has
    gone from a necessary evil to an essential enabler of business, and it even has
    a competitive advantage in verticals as varied as finance, manufacturing, government,
    and healthcare. The explosion in disaster recovery and business continuity projects
    and a heightened fear of cyber events are a symptom of businesses and society
    finally coming to realize how deep this dependence goes.'
  prefs: []
  type: TYPE_NORMAL
- en: Web applications offer a peak into some of these applications. Once users have
    access to an application, they typically have actions they want taken on their
    behalf. In earlier chapters, we saw the importance of ensuring that the user was
    the right user (and not a hacker), and that security controls were properly implemented.
    This ensures the data provided back to that user is both valid and free of malice.
    Cross-site scripting, injection, and other forms of misdirection can be reflected
    from vulnerable sites to the clients and end users, but there is a class of attacks
    that looks to actually break the business rules of the application itself. If
    attackers can exploit any soft spots in the application, they can potentially
    wreak havoc on the business or organization and make the nightmare very real.
    These vulnerabilities are tough for hackers - and not as commonly exploited in
    cyber criminal efforts - because they require more intimate knowledge of the business.
    This takes time, persistence, and a dimension outside of technical how-to.
  prefs: []
  type: TYPE_NORMAL
- en: 'The potential systems we''re likely to encounter vary greatly from **Human
    Resources** (**HR**) and **Customer Resource Management** (**CRM**) to workflow,
    supply and logistics, and **Enterprise Resource Planning** (**ERP**) tools. Regardless
    of the type of application, we''ve seen that they cannot afford to trust these
    applications to protect data blindly, even through authenticated and encrypted
    channels.Â  In this chapter, you''ll learn about how testers can conduct logic
    validation and test our target''s ability to discern bogus or malicious data,
    files, or operations. You can also learn how web applications ensure proper use
    and perform testing against common flaws that can render sites wide open to attack.
    In this chapter, we''ll go through the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Learning how to check for inappropriate function and URL access
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automating checks using Burp Suite to ensure proper controls
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Probing access controls at various levels to ensure a proper and intended operation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Performing file uploads to ensure error handling, validity checks, and malware
    protection are in place
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Speed-dating your target
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Business logic is best understood through a discovery of what the application
    itself is trying to do, assessing expected behavior, and then looking for ways
    in which that expected behavior falls apart. Some of these issues may in fact
    be due to an issue with the software, or a misconfiguration of the modules supporting
    the application. While the line is blurry at times, we're going to focus on behavioral
    flaws that are better uncovered with insight into the application's purpose, the
    company's objectives, and the processes that the target's developers believe they
    were delivering.
  prefs: []
  type: TYPE_NORMAL
- en: So, how does OWASP define these vulnerabilities? In actuality, these flaws are
    less straightforward than the others we have looked at together so far. They are
    also often categorized improperly, but our major concern should be the integrity
    of the application and not a subjective categorization. What is important is making
    sure we test for both code and logic flaws, and that the appropriate recommendations
    are made to the sponsoring organization to ensure that exploits do not find their
    mark. The higher level of requisite knowledge often confines business logic testing
    to gray or white-box testing, as it is too time-consuming to both familiarize
    yourself with and conduct testing of these flaws in a black-box penetration test.
  prefs: []
  type: TYPE_NORMAL
- en: 'In [Chapter 9](000.html#), *Stress Testing Authentication and Session Management*,
    we discussed a vulnerability class nominated in the 2013 OWASP Top 10 as their
    #7 risk, ***Missing Functional Level Access Control***. For reference, I''ve included
    their summary again in the following screenshot. While many tenets of this were
    discussed in [Chapter 9](000.html#), *Stress Testing Authentication and Session
    Management,Â *some of the flaws in this category are in fact due to business logic
    flaws or poor decomposition of requirements from the business process to the application''s
    specification. We can hardly blame the software team for not being mind readers.
    I know, it is so tempting! Other vulnerabilities fall outside the functional access
    control realm, and instead deal with improper processing of transactions.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B03198_11_01.png)'
  prefs: []
  type: TYPE_IMG
- en: OWASP risk summary for Missing Functional Level Access Control
  prefs: []
  type: TYPE_NORMAL
- en: We'll take a look at some of these concerns in a few of the more relevant domains
    to ensure we're thinking like our prey and better acclimated to the business problems
    they are encountering.
  prefs: []
  type: TYPE_NORMAL
- en: Cashing in with e-commerce
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If a website isÂ focused on e-commerce, it may very likely have a shopping
    cart. If we think about the functions that a modern cart might have, the list
    usually includes listings of the products in the cart, a way to modify the quantity
    of each, fields to enter coupon and discount codes, and usually a payment or shipping
    workflow, similar to that seen on Packt''s own site at [https://www.packtpub.com/](https://www.packtpub.com/)Â in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B03918_11_02.png)'
  prefs: []
  type: TYPE_IMG
- en: Â Packt's own shopping cart/e-commerce site
  prefs: []
  type: TYPE_NORMAL
- en: 'With the exception of purchasing an awesome product, there are a lot of things
    that could go wrong in a shopping application. Â Even if we can prove it wasn''t
    coded improperly, there may still be issues where workflows or processes used
    to drive the implementation were not properly validated. Here are some examples
    of business logic flaws where we may lose control of the cart:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Discount anomalies**: Some sites fail to recalculate the discount of an order
    after certain operations that remove products or modify quantities. Some savvy
    shoppers have even found sites that allowed coupons to be applied with certain
    products, and then deleted those products but maintained the coupon''s advantage.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Price manipulation**: Some early travel sites provided no validation of the
    pricing returned to the application, but instead trusted the client''s browser
    to accurately report back the pricing seen. After enough people were able to purchase
    flights for a fraction off their actual cost, you can bet those developers began
    to validate everything.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cart swapping**: Some sites have in the past done a poor job of associating
    carts with authenticated sessions, and when sharing carts with friends and relatives,
    it was possible to purchase cart contents on one user''s payment while shipping
    to the second user''s address. Hackers have exploited this flaw.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Gift card forgeries**: Perhaps no single flaw better demonstrates that business
    logic vulnerabilities extend far beyond just the digital realm. Hackers and fraudsters
    have begun to exploit the now-ubiquitous gift card domain. As gift cards are typically
    untraced by many sellers, and their balance applied to accounts with minimal tracking
    after the fact, hackers have begun to siphon gift card balances by fuzzing potential
    unredeemed card numbers and guessing the existence of cards in circulation. Using
    Burp Suite''s fuzzing capabilities, a magnetic card strip writer, and some patience,
    it is possible for a malicious fraud to generate a massive quantity of cards with
    balances.Â More can be found atÂ [https://www.solutionary.com/resource-center/blog/2015/12/hacking-gift-cards/](https://www.solutionary.com/resource-center/blog/2015/12/hacking-gift-cards/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing against these flaws can involve fuzzing various parameters - both explicitly
    listed in the user-input section as well as in the hidden field and cookie range.
    Burp and ZAP are well suited for this role. That being said, many of the true
    process issues will have to be discovered by a knowledgeable human. The OWASP
    **Broken Web Application** (**BWA**) **Virtual Machine** (**VM**) provides a **BodgeIt**
    web application that can help practice some shopping-specific issues.
  prefs: []
  type: TYPE_NORMAL
- en: Financial applications - Show me the money
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Financial portals, such as those in e-commerce, have a direct impact on users
    across the wide spectrum of financial state. Banking and investment companies
    tend to have a paranoid focus on cyber security from the technical side, but this
    does not mean that all business logic has been properly translated or that all
    of the rules have been run through every iteration or use case. These sites are
    especially prone to business logic issues, when they focus on a niche service
    or purposely venture out from standard banking conventions, such asÂ the practice
    site shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B03918_11_03.png)'
  prefs: []
  type: TYPE_IMG
- en: Practice site for Financial Business Logic, Cyclone Transfers
  prefs: []
  type: TYPE_NORMAL
- en: 'Some of the most commonly or notoriously seen flaws in the past are listed
    here:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Account recovery**: Not unique to financial institutions, but well worth
    the effort here, are attacks against the account recovery process of a bank or
    company. By brute-forcing or better yet, social engineering, hackers can meet
    the threshold with security questions to actually hijack the account for their
    own uses, often emptying them long before the users are aware.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Distributed denial of dollars attack**: When the founders of the infamous
    Pirate Bay website were fined for their part in distributing illegally procured
    content and software, one of them (Gottfrid Svartholm, [https://news.hitb.org/content/pirate-bay-proposes-distributed-denial-dollars-attack-ddo](https://news.hitb.org/content/pirate-bay-proposes-distributed-denial-dollars-attack-ddo))
    devised a plan to attack the legal team that came after them. By asking activist
    supporters to donate one penny apiece, they hoped to force the prosecuting team
    to incur transaction fees of $1 per transaction. Taken to scale, this would tally
    in the millions, while they would be receiving only 1/100th of the funds in return.
    Validation on the part of the financial institutions could certainly assist in
    nipping these attacks in the bud.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Account linking issues**: Pretty much any institution these days needs to
    allow their customers to link financial accounts with other institutions. This
    isn''t just convenience â�� without this feature it would be impossible to load
    a balance on their site in the first place. That being said, exploits continue
    to impact the financial world, capitalizing on a weak institution in the chain.
    Insufficient validation of user entry can allow hackers to divert funds and change
    automated payment methods.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **Cyclone transfers** application on the OWASP BWA VM can help demonstrate
    some of the issues above, as can a large assortment of VMs downloaded from [www.vulnhub.com](http://www.vulnhub.com).
  prefs: []
  type: TYPE_NORMAL
- en: Hacking human resources
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Human resources portals are becoming a popular target for hackers. Companies
    offering flexible work arrangements, or dependent on remote users, are now extending
    HR portal access to provide public cloud access. The services they provide and
    the information they assimilate presents an irresistible target. Similar types
    of site and workflow are found in government social programs, such as the US Veterans
    Affairs or Social Security Administration portals. With these sites, we see a
    convergence of personal information and banking information, often compromising
    confidential information (pay scales, compensation structure, performance reviews,
    and similar ones), which can be extremely valuable on the dark web or as part
    of a blackmail campaign.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A good resource to learn about the very involved confluence of HR and application
    security can be found in the standards outlined in the ***International Organization
    for Standardization (ISO) 27002:2013 Information Security Management, Chapter
    7, Human Resources Security***.
  prefs: []
  type: TYPE_NORMAL
- en: 'Common risks in HR applications center around sensitive information disclosure,
    but they can also impact payroll and evaluation toolsets. Some of the most concerning
    risks are:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Personal data exposure**: Improper use of role-based access controls in a
    personnel database may allow a user to accidentally (or an attacker to deliberately)
    access information on other employees without legitimate rights. Once accessed,
    the data might be vulnerable to tampering, deletion, or exfiltration.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Workflow manipulation**: Transfers, raises, demotions, firings â�� the turmoil
    that can be caused if these workflows are accessed inappropriately cannot be overstated.
    Luckily (for now), no publicly announced breaches of this type have been announced,
    but no one wants to be first.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fluid employee transitions**: Many customers will have HR organizations and
    employee bases that both make use of temporary, contract, and permanent employees.
    In addition, many will support some level of interaction with employees before
    and after employment (recruits, retirees, families, and so on), which complicates
    **Role-based Access Control** (**RBAC**) even further. It is essential that these
    different roles are well defined and implemented to ensure timely adjustments
    when an employee''s status changes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Easter eggs of evil
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Kids in some areas of the world celebrate the Spring Christian holiday of Easter
    by finding hidden treats and eggs. While the significance of theseÂ **easter eggs**
    to the holiday are tenuous at best, the term carried over into video games, with
    some programmers at Atari being the first to intentionally hide code and interesting
    responses from the normal field of play, accessible only when certain combinations
    of keys or events unlocked the hidden events. Some interesting ones are still
    out there on modern OSes ([http://www.businessinsider.com/mac-windows-easter-eggs-2013-2](http://www.businessinsider.com/mac-windows-easter-eggs-2013-2)).
    Hackers have begun to use similar methods, as normal software validation tools
    may miss these events or fail to see them in relation to each other.
  prefs: []
  type: TYPE_NORMAL
- en: To avoid these eggs from wreaking havoc, our first priority should be to ensure
    that hackers cannot plant information in input fields that do not meet strict
    validation or that anything malicious is stripped or screened for any embedded
    code snippets or fragments. While code delivered in this way cannot usually be
    executed, other attacks (buffer overflows and code injections) elsewhere in the
    application could refer to these fields and reassemble the executable or script.
    Fully automated security vulnerability scanners will miss the potential of these
    instances, as they will be unable to properly mimic the conditions that stick
    the code back together. Their best defense, and the most important thing we should
    test, is to make sure that the user inputs are validated to ensure they are completely
    relevant. Non-printable characters or programming syntax has no place in an address
    field. Unicode has no place in a numerical field.
  prefs: []
  type: TYPE_NORMAL
- en: So many apps to choose fromâ�¦
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As you can see, this is just scratching the surface.Â  While tools can assist
    in pen testing business logic for these applications, it is critical to scope
    these targets appropriately, as testing them completely will require gaining intimate
    knowledge of not only the application but also the tailoring that the organization
    implemented to adapt it to their needs. No matter the application, they all receive
    and process data. Once we've determined where and how, we have some basics we
    should check to prevent common exploits.
  prefs: []
  type: TYPE_NORMAL
- en: Functional Feng Shui
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: In pen testing applications, so far we have been quite methodical in how we
    approach each technique used here. Automated tools such asÂ our proxy scanners,
    brute-forceÂ applications, and the many enumeration and scanning tools have helped
    assist with that and could feasibly enable a newer pen tester to successfully
    identify many vulnerabilities without intimate knowledge of the environment. This
    is because many of those tests related to improper coding, technical flaws, or
    misconfigurations, and they were much more tangible in nature.
  prefs: []
  type: TYPE_NORMAL
- en: Business logic testing, however, is all about understanding the workflow the
    site is trying to articulate or execute. Now, we still may be employing tools,
    but only after they Â have been directed with hands-on knowledge. In many cases,
    the work to adapt a tool to a specific business logic test may far exceed the
    time to conduct a manual scan itself. Think of this as more informed testing,
    and that time is well justified in a gray or white box scope to ensure that the
    intent of the application owners and developers is properly implemented. Let's
    take a look at ways we can tackle these areas using tools we've already hit on
    earlier.
  prefs: []
  type: TYPE_NORMAL
- en: Basic validation checks
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For a good deal of business applications, we'll need to be the brains of the
    operation and help the tools understand how the application is expected to work.
    Proxy tools can help, and they can help us hone in on passed variables, showing
    us where the handoffs between client and server exist. Most application developers
    will only think to validate on one end or the other, and so, by catching them
    in one of these handoffs, we can often find some room to cause trouble. If it
    is an e-commerce site, we'll want to validate that the application doesn't let
    a proxy set its own price.Â  If it is an HR site or healthcare portal, we'll want
    to ensure that deliberately invalid information cannot be submitted in the place
    of valid names, personal information, addresses, and phone numbers.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can check against these using Burp Suite''s Proxy Intercept together with
    the Intruder feature, where you can test input validation while attempting to
    submit *out-of-bounds*Â strings to each field. To do this, we can pull an appropriate
    user-input page from something such as the **OWASP Security Shepherd Application**
    included in the OWASP BWA VM, and venture into the **Poor Data Validation Lesson**,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B03918_11_04.png)'
  prefs: []
  type: TYPE_IMG
- en: OWASP Security Shepherd Application
  prefs: []
  type: TYPE_NORMAL
- en: 'If you enter a negative number right from the get-go, you''ll notice that it
    returns a message saying **`An Error Occurred: Invalid Number: Number must be
    greater than 0`**Â as seen in the following screenshot. Curiously, when I look
    at Burp''s Proxy Intercept, there is no GET or POST waiting to be forwarded. This
    indicates that there is a client-side validation.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B03918_11_05.png)'
  prefs: []
  type: TYPE_IMG
- en: Attempting an invalid input
  prefs: []
  type: TYPE_NORMAL
- en: When a valid number is submitted, we can pass the client-side validation and
    see the POST message in Burp Proxy's HTTP history.Â  In the sample shown in the
    following screenshot, we can see the `userdata` field, which was submitted as
    `1234`, but I have already modified it so it is negative. If the application is
    relying only on the client-side validation, this should bypass it.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B03918_11_06.png)'
  prefs: []
  type: TYPE_IMG
- en: Modifying the Client-Side validated input
  prefs: []
  type: TYPE_NORMAL
- en: 'In this lesson in the **Security Shepherd** site, we''ll see success in the
    following screenshot. In a real test of a production application, our results
    will vary: we may see the mangled output repeated back as a stored element, or
    we may see an adjustment to an account''s balance or some other measurable entity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B03918_11_07.png)'
  prefs: []
  type: TYPE_IMG
- en: Successful exploit of poor validation
  prefs: []
  type: TYPE_NORMAL
- en: 'This same approach can be used in any case where an active client-side process
    is conducting the input validation, the HTTP message is unprotected, and the server-side
    doesn''t second-check the inputs. In this use case, it was a number, but with
    some imagination we could apply this to address fields, comment areas, personal
    information, banking information, and so on. Using Burp''s Intruder, we can fuzz
    multiple parameters and engage payload generators (more info here: [https://portswigger.net/burp/help/intruder_payloads_types.html](https://portswigger.net/burp/help/intruder_payloads_types.html))
    either from BurpSuite''s own third-party sources or of our own making. Many pen
    testers will develop their own generators using Java, Python, or Ruby for integration
    with Burp Suite, and this is a perfect application for this. A great example of
    how we could explore the APIs Burp offers and develop a fuzzer is detailed atÂ [http://apprize.info/python/black/6.html](http://apprize.info/python/black/6.html).'
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes, less is more?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Whenever I get longwinded while explaining something, my coworkers will gently
    remind me that *less is more*. In web transactions, it is often the case that
    HTTP requests and responses will disclose multiple traceable elements that, rather
    than adding clarity to the session's state, will instead undermine its security.
    We've seen multiple applications in earlier chapters use combinations of **`PHPSESSID`**
    or **`JSESSID`**, username, user number, session token, and so on used to track
    the same conversation.Â  While I am all about providing assurances that something
    is well tracked, if the application still allows state to be maintained with only
    a subset of those session management parameters in place, then finding out which
    ones can in fact carry the session without the others can provide significant
    insight into how we can fuzz or alter the behavior of the application. This can
    be tested in Intruder with a one-off test, but for best results I would recommend
    using Repeater to ensure playback and documentation are possible.
  prefs: []
  type: TYPE_NORMAL
- en: 'I can send any suitable POST or GET message to **`Repeater`** and systematically
    remove, alter, add, or change the order of all of the parameters in my requests,
    which in this case are the many fields that the application appears to be using
    to maintain the session state. In the following screenshot, we see that there
    are a load of session IDs and tokens in use:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B03918_11_08.png)'
  prefs: []
  type: TYPE_IMG
- en: Â Blank slate of cookies and parameters
  prefs: []
  type: TYPE_NORMAL
- en: With some trial and error, I found that the `JSESSIONID` and `userdata` fields
    were all that we needed to maintain state. Knowing this, I could take the tailored
    request and send it to Intruder again (as shown in the following screenshot),
    allowing me to concentrate on fuzzing just the essential fields. If we were interested,
    we could also send it to one of the many third-party extensions that can mangle
    the various session IDs and attempt to exploit weak session management.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B03918_11_09.png)'
  prefs: []
  type: TYPE_IMG
- en: Sending essential fields back to Intruder
  prefs: []
  type: TYPE_NORMAL
- en: The key to business logic testing is blending the insight of what the application
    is supposed to do and how it is to serve with the appropriate tools and tweaks
    within to help speed the testing along.
  prefs: []
  type: TYPE_NORMAL
- en: Forgery shenanigans
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Once you've seen how legitimate requests of the web application are formatted
    and populated for legitimate flows, the same methods and tools can be used to
    craft your own requests, without the need for a client's browser. Hackers may
    use this method to conduct large-scale operations against a web application, but
    we as testers can also use this to more completely test possible validation flaws
    for fields not normally submitted. An example may be in a dynamic form page where
    a client-side validation may normally hide fields contextually, based on prior
    selections, check boxes, and so on. Forging requests can allow us to submit incrementing
    fields or build parameter combinations. These flaws are common in applications
    that do not validate on both sides of the transaction (client and server).
  prefs: []
  type: TYPE_NORMAL
- en: Other features that may fall into this category are hidden switches that can
    turn on debug or verbose messaging. If hackers are able to toggle these switches,
    the resulting messages returned by the application can be detrimental. Debug information
    often contains a highly-detailed manifest of the application's inner workings;
    were they to fall into the wrong hands, they could reveal too much to the attacker.
    Other fields may not be normally accessible and could impact permissions or access.
    Testing for the possibility of forgeries helps ensure that they do not cause issues
    within the application or result in an inadvertent disclosure or the escalation
    of privileges.
  prefs: []
  type: TYPE_NORMAL
- en: What does this button do?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Many internal web applications that consolidate multiple functions or act as
    a common portal for many teams will often employ pick-lists in some fields to
    allow their users to help determine what page, project, share, or sub-function
    they are interested in. I worked at an employer that was a heavy user of **Microsoft
    SharePoint** in its early years, and they would set up a new project portal for
    each proposal, development effort, or the integration job we launched. While I
    was possibly involved in five projects at one time, I might have been able to
    see forty or more on that portal. In most cases, I was denied entry, but in a
    couple of instances, I was allowed entry accidentally.
  prefs: []
  type: TYPE_NORMAL
- en: We as tester's need to ensure that controls such as this do not present invalid
    options or provide too much intel to the user as to what else may exist on the
    target environment. The attack surface of an application (the number of potential
    vectors) expands withÂ each added function or group a web application must consider.
    Web developers should consider removing invalid options from the get-go or, at
    the very least, ensuring that those presented to a specific user do not reveal
    too much about *what lies beneath*. As mentioned before, this testing is best
    suited for heavy experimentation in a white-box test scope and something that
    should be done at all stages of the **Software Development Life Cycle** (**SDLC**).
  prefs: []
  type: TYPE_NORMAL
- en: Timing is everything
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Time-based features are important features in e-commerce sites and banking applications
    where it is desired to time-out a workflow to prevent unattended sessions. This
    feature is also familiar to anyone who has used an online travel booking site
    or ticket exchange (for example Fandango in the following screenshot), where the
    company is trying to prevent bots or squatters from occupying preferred seating
    and locking out other valid users. These provisions need to work though â�� an
    issue here can allow an attacker's client to deny product or sales, hijack sessions,
    or otherwise exploit the trusted connection during a help-open transaction.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B03918_11_10-1-1024x598.png)'
  prefs: []
  type: TYPE_IMG
- en: Time-based transactions for validation
  prefs: []
  type: TYPE_NORMAL
- en: Time-based validation testing is something that can only be attempted manually
    and only after an extensive review of the design or code. Testing should verify
    that refreshes, session hijacking, and the fuzzing of parameters are unable to
    affect the application's counter and prevent the time-restricted action.
  prefs: []
  type: TYPE_NORMAL
- en: Reaching your functional limits
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Some web applications need to limit the number of times a transaction is executed
    or the number of times a function is called per workflow.Â  As discussed in the
    cashing in with e-commerce section earlier in this chapter, poorly executed shopping
    carts have been seen to accept multiple applications of the same discount coupon.
    Airfare sites may seek to limit tickets purchased to a one-time transaction, but
    there have been instances where duplicate ticket orders have been purchased under
    the same one-time transaction cost, thereby circumventing proper charges.
  prefs: []
  type: TYPE_NORMAL
- en: Some applications will forgo their own workflows for integration with proven
    thirdÂ parties, especially in transaction integration with services such asÂ **PayPal**
    or **Google Payment Center**. But, as we can see in a sandboxed PayPal environment
    in the following screenshot, there are plenty of moving pieces that the application
    team needs to properly understand and accommodate or a hacker will. Luckily many
    of the best vendors for these financial processing pages are providing tools,
    training, and best practices such asÂ this to ensure proper implementation and
    reduced threat exposure. Keep in mind that integrating applications, if improperly
    secured, could pose a risk to the greater payment processing application as well.
    It is for these reasons that large payment processing and transaction assistance
    services provide not only top-notch enablement, but rigorous segmentation, verification
    services, revocable API keys, and other countermeasures to quickly squash any
    attacks that spill from a tenant service into their domain.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B03918_11_11-1.png)'
  prefs: []
  type: TYPE_IMG
- en: PayPal's Development Functional Topology
  prefs: []
  type: TYPE_NORMAL
- en: Functional limitations need to be tested with humans-in-the-loop, much like
    other aspects of this chapter. That being said, it is imperative that the tester
    have either the design documentation and code or interaction with the product
    development team, to ensure that proper behavior is well understood prior to testing
    and that any issues are quickly addressed.
  prefs: []
  type: TYPE_NORMAL
- en: Do we dare to accept files?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Some web applications, such as expense reporting tools, online graphics or picture
    galleries, or insurance companies, may require the ability to upload files as
    part of a workflow. As most of these files are needed for the purpose of sharing
    with company staff or dissemination among other users, it is imperative that these
    file types be properly gated and that the files themselves are clean of malware
    or questionable material. Companies should, before welcoming these files into
    their workflows, be certain of the need and make educated decisions as to where
    their liability to other stakeholders ends. Do they need to know whether antivirus
    or anti-malware scans are complete? Do they need to police potential intellectual
    property or personal information? Should files with macros or encryption be permitted,
    and if so, how?
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: These questions all require answers before a production environment should be
    allowed on the web. Intimate knowledge of these policies and the resulting control
    can help us in testing any boundary conditions, and we'll certainly need to have
    explicit permission when deploying test payloads that may be accepted and subsequently
    viewed by others.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Web applications may be technically sound, but if the developers are not accurately
    and precisely executing the intent of the company operating the portals, applications,
    or services, risks abound. These business logic issues are evasive but important.
    Customers will often cringe at the overhead required to test for them in production.
    This fear or anxiety should help us drive home the need for integrating penetration
    testing within the SDLC, and help us to justify well organized and up-to-date
    documentation of all elements in the application and supporting environment. Testing
    after the fact is costly and time-consuming, and any issues found after the fact
    often cause a complete redesign of that portion of a portal or the workflows that
    support them.
  prefs: []
  type: TYPE_NORMAL
- en: Business logic testing is a departure for us in that it relies almost completely
    on manual web page interaction. The time on target, not to mention the details
    needed to inform adequate testing, implies that this portion of an application's
    penetration testing will be separated from the more commonly thought-of black-box
    tests. In most cases, business logic testing will instead be conducted internally
    or by a contractor or consultant with extensive experience and a longer-term teaming
    arrangement with the developers themselves. It is probably well worth the effort
    for an application development team to cooperate with the testing, and to learn
    how to check themselves to better guide development. Independent testing should
    always be encouraged, but the impact of findings can be better addressed early
    in development.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we've completed most of the testing categories for a proper web penetration
    test, we've got the job of delivering the good (or bad) news to the customer and
    wrapping up the test. We'll look at how any customer can improve their standing,
    no matter the results. We'll also take a look at some good best-practice recommendations
    that can help us articulate our findings, both during and at the conclusion of
    our testing. At the end of the day, we also need to be able to write a report
    that we can deliver and show the customer value; without this, we're going to
    have a hard time finding a follow-on business or references. We're almost there
    folks; let's finish strong!
  prefs: []
  type: TYPE_NORMAL
