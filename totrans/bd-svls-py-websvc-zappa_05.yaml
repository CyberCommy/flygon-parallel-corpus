- en: Building a Django Application with Zappa
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we are going to create a Django based image gallery app where
    a user can create a photo album and upload images. While working in Django, it's
    really interesting and challenging to serve the static and media content. Usually,
    developers store the images in file storage and servers via the URL. Here, we
    are going to store images in AWS S3 and serve via the CDN network provided by
    the AWS CloudFront service.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: 'Topics we will cover in this chapter include the following:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: Installing and configuring Django
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Designing an image gallery application
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Serving static and media files via AWS CloudFront CDN
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up static and media files
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrating Zappa
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building, testing, and deploying the Django application using Zappa
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Django management command
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before moving ahead, let''s fulfill some prerequisites required for this chapter.
    We are going to develop a Django based serverless application, so we need to meet
    the following requirements, which are being used for developing this application:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: Ubuntu 16.04/Mac/Windows
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pipenv tool
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Django
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Django Storage
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Django Imagekit
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Boto3
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Zappa
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These packages are the required packages for this chapter, and we will be installing
    and configuring these packages using the pipenv tool. Now we will explore the
    configuration in detail.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: Installing and configuring Django
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Configuring any Python project requires following a standard for maintaining
    the necessary package's versions. Many developers prefer to maintain the `requriements.txt`
    file, which helps them to keep the application stable. Any version upgrade of
    specific packages as mentioned in the `requirements.txt` may break the whole application.
    That's the reason developers strictly follow this standard to maintain a stable
    version of their application.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a virtual environment
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I was following the traditional pattern until I came across a very cool tool
    that changed my traditional approach to maintaining the `requirements.txt` file.
    Now you won't need the `requirements.txt` anymore. It's called **pipenv**; I love
    to use it.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: Pipenv is a Python package management tool inspired by numerous package management
    tools of different languages, such as npm, Yarm, cargo, composer, builder, and
    so on. Pipenv is officially recommended by Python.org ([https://www.python.org/](https://www.python.org/)).
    This tool entitled the standard to manage Python packages.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: Installing pipenv
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can initialize the virtual environment from anywhere and it will keep track
    of every package installation.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: 'Firstly, we need to install `pipenv` at the system level. So, if you are using
    macOS then you can simply install the `pipenv` using Homebrew as shown here:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'If you are using Ubuntu 17.10, then you can simply add a PPA repository and
    install using the `apt` command, such as the following:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'You can simply install it via `pip` at the system level, instead of using `pip`
    from an active virtual environment. Take a look at this code line:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The system-level installation will be the installation without using any virtual
    environment. It installed in the system's `bin` directive and should be executable
    from the Terminal console.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, you can see the detailed information on the `pipenv` commands by just
    executing the `pipenv` command at the Terminal console:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00058.jpeg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
- en: Here, you can see there are several commands available that provide a very flexible
    way to deal with the virtual environment.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: Configuring and installing packages
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, we are going to create a virtual environment for our project and install
    the required packages.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot mentions the virtual environment creation process:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00059.jpeg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
- en: 'As you can see from the preceding screenshot, we have created a virtual environment
    with the following command:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'We explicitly mentioned the Python version that would be required; you can
    mention any Python version as well. If you are in hurry and just wanted to initialize
    with Python version 2 or 3, then you can just run the command as follows:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'You can also use this one:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'It has different sections for managing all packages. Now you can install any
    package using the following command:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'As we are going to use the Django framework, we will install Django using pipenv
    as shown in the following screenshot:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00060.jpeg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
- en: Once we install any package, then `pipenv` creates a `Pipfile.lock` file. The
    `Pipfile.lock` file maintains the commit hashes and dependencies of each installed
    package.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: Now, if you were thinking of activating the virtual environment, don't worry
    about it. You can relay everything to `pipenv` itself.  The `pipenv` provides
    a command named `pipenv shell` that internally invokes the virtual environment
    `activate` command. Now, you would be using the activated virtual environment
    shell.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: 'Instead of being inside the shell or activating the virtual environment, you
    can execute any command under the virtual environment by using the command `pipenv
    run <command as an argument>`, for example:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: It's really interesting, isn't it?
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: 'After installing all the required packages, the `Pipfile` will look like the
    following:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: 'File—`Pipfile`:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Now, we are done with the configuration and installation of the required packages.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: Let's move on to the next section, where we will be creating an image gallery
    application, using Django.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: Designing an image gallery application
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once we are done with configuration, then we can start implementing the application.
    The `ImageGallery` application will be straightforward—a user can create a new
    photo album record and can upload multiple images at once. Once the photo album
    is created, we will display all existing album records in list view along with
    associated images as thumbnail views.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: Let's see the implementation phase, as per our requirements.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: Design overview
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I am going to create an image gallery application based on Django. We are going
    to use Django admin for the purpose of the UI. Django admin has a very pretty
    UI/UX design. So we are going to create some models, such as a `PhotoAlbum` model
    that will have a one-to-many relationship with the `Photo` model.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: Then we are simply going to register these models with the Django admin panel.
    Once we are done with the admin configuration, we will configure the static and
    media settings to upload the dynamic images to an Amazon S3 bucket and serve these
    static files via the CloudFront CDN network.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: Let's take a close look at the implementation.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: Initializing the project
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Once you have configured the `pipenv`, you need to enable the virtual environment
    using the command `pipenv` shell. Assuming that you are in the `pipenv` shell,
    which is nothing but an activated virtual environment. Once you enable the virtual
    environment, you have access to already installed packages. Hence, we are going
    to create the Django project scaffolding by executing the following command:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The following is a screenshot of the project creation process:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00061.jpeg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
- en: I have created the project and an app as well. From the previous screenshot,
    you can see the project and app files.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: By default, Django enables the admin panel in the root `urls.py` file. Hence,
    we do not need to configure it again.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: Now let's move to the model creation process in the next section.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: Implementing models
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We are going to create two models—`PhotoAlbum` and `Photo` model, with a relationship
    of one-to-many. The following is the code snippet of the `gallery/models.py` file:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: 'File—`gallery/models.py`:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: As planned, I have created two models, along with their relationship. Here,
    `PhotoAlbum` is straightforward, as it acts as a parent class. The `Photo` model
    is more interesting, as we are going to store images through it.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: In the `Photo` model, I am using the `django-imagekit` ([https://github.com/matthewwithanm/django-imagekit](https://github.com/matthewwithanm/django-imagekit))
    library to create and store a thumbnail image of the original uploaded image.
    It is quite interesting, as it has many features to allow us to work on an image
    as needed. My intention is to create a thumbnail of an uploaded image; hence,
    I configured it accordingly.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you are done with model creation, you will need to run `makemigrations`
    and migrate the command to create the actual database tables. Have a look at the
    following screenshot to see the process of the `makemigrations` command:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00062.jpeg)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
- en: Once we run the `makemigrations` command, then we are ready to configure these
    models with the admin panel. Let's move on to the next section on configuring
    the admin panel.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: Integrating with the admin panel
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Integrating models with the Django admin panel requires enabling the admin
    URL configurations in the root `urls.py` file. Let''s have a look at the code:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: 'File—`imageGalleryProject/urls.py`:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'File—`gallery/admin.py`:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Here, we configure the `Photo` model as `TabularInline` so that we can add multiple
    photos or images under one album. We will have a complete workflow demo after
    deploying the application on AWS Lambda.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: At this point in time, you can run the application and store the images on your
    local machine. But later on, we want to deploy on AWS Lambda and then store images
    in an Amazon S3 bucket and serve via the Amazon CloudFront CDN network.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: Application demonstration
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We already configured the models with the admin panel. Now we are going to run
    the Django's local server by using the `python manage.py runserver` command. It
    will start the Django server on `http://locahost:8000 URL`.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a screenshot of the application:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00063.jpeg)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
- en: 'As mentioned in the preceding screenshot, we are creating a photo album. We
    defined the one-to-many relationship and used the `TabularInline` to accept multiple
    photos while creating the album. Take a look at this screenshot:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00064.jpeg)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
- en: 'The list page will appear once we are done with the adding process. Now, you
    can select the newly created album to view or edit the existing details. Take
    a look at this screenshot:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00065.jpeg)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
- en: Here, you can check that the previously uploaded images are displaying as thumbnails.
    We used the `django-imagekit` library for configuring the thumbnail image process.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: Now, we will see in next section the required process for configuring the Amazon
    CloudFront CDN and integrating it with our application.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the Amazon CloudFront CDN
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Amazon CloudFront is one of the more popular services. It provides the feature
    to serve static files through the CDN network, which helps static contents to
    be distributed in a very efficient way with lower latency to enhance the performance.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: To configure Amazon CloudFront, we create a CloudFront distribution through
    the AWS user console.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: Creating CloudFront distributions
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Assuming you have a valid AWS account, you can log in the AWS web console using
    your credentials. Select the CloudFront service from the services dropdown and
    click on the Create Distribution button, as shown in the following screenshot:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00066.jpeg)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
- en: While creating a distribution, Amazon provides two different methods, such as
    web and RTMP. The web method is used for static content that needs to be served
    through the CDN network and when all static files are residing in an Amazon S3
    bucket. The RTMP method is used to distribute the streaming media files, which
    allow a user to play the file before it finishes the download.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: 'In our case, we will choose the web method, as we want to distribute the static
    files. You can select the method as shown in the following screenshot:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00067.jpeg)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
- en: 'Once you select the web method, the Create Distribution form page will open.
    On this page, we will select the required fields to configure the distribution.
    Take a look at this screenshot:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00068.jpeg)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
- en: After successful creation of the cloud distribution, we are going to integrate
    the distribution with our Django application.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: Let's move on to the next section, where we will configure the static and media
    files in the application.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: Setting up static and media files
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Configuring the static and dynamic files in Django is essential. How we configure
    and serve static and media files does impact on the overall performance of the
    application. Hence, configuring the static and media files should be taken care
    of in an optimized way. Let's have a detailed discussion about it.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: Standard configuration
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Django has a standard pattern to configure the static and media files. Static
    and media are two different concerns, where static files refer to fixed content,
    such as HTML, JS, CSS, and images. Django defines some configuration related to
    static files in `settings.py` and URL configured in `urls.py`. Media files refer
    to any files that are handled dynamically by uploading. Django has a very good
    mechanism to configure and manage static HTML, JS, CSS, and images files.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: Normally, the default Django static file configuration assumes that you will
    have static files along with your code base under a static directory, but, in
    our case, we want to put all static content under an Amazon S3 bucket and serve
    it through Amazon CloudFront distribution.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: django-storage
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We are going to use the `django-storage` ([http://django-storages.readthedocs.io/en/latest/](http://django-storages.readthedocs.io/en/latest/)),
    a third-party plugin for implementing a custom storage backend. With the help
    of Django storage, we are going set up the static and media configuration.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the code snippet, which is required to set up the custom storage
    for static and media files:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: 'File—`gallery/utils.py`:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Now we are going to configure these two custom storage classes in the `settings.py`
    file as shown here:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: 'File—`imageGalleryProject/settings.py`:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'These are the settings you will be required to put into `settings.py`, and
    now its time to configure the `urls.py`. I would recommend that you update the
    root `urls.py`, as shown here:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: 'File—`imageGalleryProject/urls.py`:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Once you configure the URLs, then you are all set. To verify the configuration,
    you can run the command `collectstatic` to collect all your static files at the
    configured location:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: This command will retrieve all the static files belonging to the mentioned `INSTALL_APPS`
    and upload them to the `STATIC_ROOT`. Now, when you upload any file, it will be
    uploaded to Amazon S3 and serve via Amazon CloudFront.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: It's time to configure Zappa and process the deployment.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: Building, testing, and deploying the Django application using Zappa
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Zappa configuration is straightforward. The Zappa package is available in the
    pip repository as well. But we are going to install it with pipenv, which helps
    us to keep track of the version management. The following is the command you will
    need to install Zappa:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: After the Zappa installation, you will need to initialize Zappa with the command
    `zappa init`. This command will prompt a shell questioner to configure Zappa with
    the required, basic information. Let's have a look at the next section, where
    we will discuss Zappa's basic configuration.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
- en: Configuring Zappa
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[PRE20]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Here, we defined the configuration as per the requirements. As the key defines
    each configuration, we can see the usages of it. Consider the following:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
- en: '`aws_region`: The AWS region where the Lambda will get uploaded'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`django_settings`: The import path of Django''s settings file'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`profile_name`: The AWS CLI configuration profile which is defined in the `~/.aws/credentials`
    file'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`project_name`: The project name for the uploading Lambda function'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`runtime`: The python runtime interpreter'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`s3_bucket`: Creates an Amazon s3 bucket and uploads the deployment packages'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`remote_env`: Sets the environment variable of all the key-value pairs mentioned
    in the uploaded JSON file at the Amazon S3 location'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With the help of this configuration information, we will proceed with the deployment.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
- en: Building and deploying
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once we are done with the configuration, then we can process the deployment.
    Zappa provides two different commands to perform the deployment, such as `zappa
    deploy <stage_name>` and `zappa update <stage_name>`. Initially, we will use the
    `zappa deploy <stage_name>` command, as it is the first time that we are deploying
    this Lambda application.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
- en: If you have already deployed the application and want to redeploy it, then you
    would use the `zappa update <stage_name>` command. In the previous chapter, we
    had a detailed discussion about the deployment process of Zappa, so you can refer
    to this, if you need to.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the screenshot of our deployment process:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00069.jpeg)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
- en: 'As you can see, after successful deployment, we got the API gateway endpoint
    URL. Let''s check how the deployment happened by visiting the admin panel at the
    mentioned URL. Take a look at this screenshot:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00070.jpeg)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
- en: 'Oops! We encountered an error. This error says that we have an invalid `HTTP_HOST`,
    and this is true because we have not configured it into the list of `ALLOWED_HOSTS`
    in the `settings.py` file, as mentioned here:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'This would resolve the issue. Now, let''s move on to check out the admin panel:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00071.jpeg)'
  id: totrans-163
  prefs: []
  type: TYPE_IMG
- en: Oops! It seems as though we failed to load the static contents. But we configured
    the static and media content with Amazon S3 and Amazon CloudFront.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
- en: 'So, to resolve this error, we will need to run the command `python manage.py
    collectstatic`. This command will upload all the static content to Amazon S3 and
    it will be available via Amazon CloudFront. Take a look at this screenshot:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00072.jpeg)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
- en: Wow! We resolved the issue, and our application is live and serverless. That
    was really easy to deploy. I hope you did enjoy the deployment of the Django based
    application.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
- en: Here, we never dealt with any server software, such as Apache or Nginx and other
    complex configuration. Zappa makes it really easy to deploy your application as
    serverless.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
- en: Now we will see what more we can do with the help of Zappa. Refer our next section
    for more excitement!
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
- en: Django management command using Zappa
  id: totrans-170
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Zappa provides a feature to perform the Django's `manage` command operations
    on deployed Lamdba instances, directly from your Terminal console. With the help
    of `zappa mange <stage_name> <manage-command>`, you can execute and check the
    status of your Django application.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a screenshot of the execution of this command:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00073.jpeg)'
  id: totrans-173
  prefs: []
  type: TYPE_IMG
- en: There are some limitations though. It is only for Django's `manage` command
    to use, hence it's bound to Django projects only.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
- en: 'For passing any arguments, you can use the `manage` command in string format,
    such as:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'But it will not be useful for those commands that require user input, such
    as `createsuperuser`. So, in this kind of situation, you can write a Python script
    in string format and pass it as an argument for `zappa invoke <env> ''<raw_script>''
    --raw`. Take a look at this screenshot:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00074.jpeg)'
  id: totrans-178
  prefs: []
  type: TYPE_IMG
- en: That's it.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
- en: I hope you enjoyed it. It makes a developer's life easy. We may require these
    feature as we are dealing with serverless environments.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-181
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We learned how to build a serverless Django application. Zappa makes it very
    easy to perform the build operation and helps you to make a serverless deployment,
    which is very handy.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
- en: We covered all essential details we needed while implementing the serverless
    Django application. I explained the code written for this application; I am also
    sharing the entire code base at our GitHub repository ([https://github.com/PacktPublishing/Building-Serverless-Python-Web-Services-with-Zappa/tree/master/chapter_5/imageGalleryProject](https://github.com/PacktPublishing/Building-Serverless-Python-Web-Services-with-Zappa/tree/master/chapter_5/imageGalleryProject)).
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 在实现无服务器Django应用程序时，我们涵盖了所有必要的细节。我解释了为这个应用程序编写的代码；我还在我们的GitHub存储库中分享了整个代码库（[https://github.com/PacktPublishing/Building-Serverless-Python-Web-Services-with-Zappa/tree/master/chapter_5/imageGalleryProject](https://github.com/PacktPublishing/Building-Serverless-Python-Web-Services-with-Zappa/tree/master/chapter_5/imageGalleryProject)）。
- en: I hope you enjoyed this chapter. In the next chapter, we will implement the
    same application, but as a RESTful API, and see what challenges we come across.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 希望你喜欢这一章。在下一章中，我们将实现相同的应用程序，但作为一个RESTful API，并看看我们会遇到什么挑战。
- en: Questions
  id: totrans-185
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What is Amazon CloudFront?
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是Amazon CloudFront？
- en: What is pipenv used for?
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: pipenv 用于什么？
