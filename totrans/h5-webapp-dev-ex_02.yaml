- en: Chapter 2. Let's Get Stylish
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '"In matters of style, swim with the current; in matters of principle, stand
    like a rock." – Thomas Jefferson'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*In this chapter, we will put on our graphic designer hats and do some styling.
    Right now our task list application that we created in the first chapter works
    but it looks like something from 2005\. We will bring it up to the present and
    into the future using CSS3 to give it a clean, modern look. We will add rounded
    corners, shadows, gradients, and transitions using the latest CSS3 features. We
    will also use CSS sprites to add some images to the task list buttons.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter we will learn:'
  prefs: []
  type: TYPE_NORMAL
- en: New ways to specify colors in CSS3 and set transparencies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to add rounded corners to elements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to add shadows to elements and text
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to draw gradients in element backgrounds
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: New CSS3 background properties
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to use CSS sprites in your applications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to use transitions and transforms to add effects to the user interface
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to dynamically load stylesheets to create customizable user interfaces
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CSS3 overview
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: CSS3 is not part of the HTML5 specification, but it is an integral part of writing
    HTML5 applications. CSS3 is being developed in tandem with HTML5 and provides
    many new styles to make web pages look and function better than ever. Things that
    were once the realm of Photoshop, such as gradients and shadows, are now easily
    added via styling. Using these new graphics features will make your applications
    look modern and add character to your applications.
  prefs: []
  type: TYPE_NORMAL
- en: Some of the most exciting additions to CSS are the ability to add gradients
    and shadows to elements. Rounded corners, a feature that everyone wanted in their
    web pages, and which were once the realm of many HTML hacks, are now simple to
    add. It has never been easier to make web pages and applications look good without
    having to download extra images and code to support them.
  prefs: []
  type: TYPE_NORMAL
- en: You can see examples of all the following CSS3 styles in `chapter2/css3-examples/css3-examples.html`.
  prefs: []
  type: TYPE_NORMAL
- en: CSS3 colors
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before we get started with the new effects, let's discuss colors. CSS3 has new
    ways to define colors that allow you to set transparency and define colors in
    HSL format. Of course, you can still use the old standards of hex values, any
    of the CSS color names, and the `rgb()` specifier.
  prefs: []
  type: TYPE_NORMAL
- en: 'A new `rgba()` specifier has been added to allow the alpha, or opacity amount,
    to be set with a color. Just like `rgb()`, the first three parameters set red,
    green, and blue amounts, and are values ranging from `0` to `255`. A fourth parameter,
    the alpha, is a floating point value from `0` to `1` where `0` is completely transparent
    and `1` is completely opaque. The following declares a red background color that
    is 50 percent transparent:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Although most browsers support `rgba()`, it''s a good idea to specify a fallback
    for those that don''t support it by defining a color in `rgb()` format preceding
    it, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s an example of overlapping three elements all with an alpha value of
    `0.5` and having colors red, green, and blue (yes, you can draw circular elements,
    which we''ll see in the next section):'
  prefs: []
  type: TYPE_NORMAL
- en: '![CSS3 colors](img/5947_02_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In addition to RGB colors, CSS3 also supports **HSL** colors, which stands for
    **Hue**, **Saturation**, and **Lightness**. HSL is based on a color wheel that
    is full color at the edges and fades to gray in the center. Now extend the wheel
    into a cylinder that is black at the bottom, white at the top, and full color
    in the middle. That is the theory around HSL colors.
  prefs: []
  type: TYPE_NORMAL
- en: 'It is specified using `hsl(h, s, l)`. Hue is a value from `0` to `360` that
    maps to the degrees on the color wheel. `0` is red, `120` is green, `240` is blue,
    and `360` is back around to red. Saturation is the percentage of color where `0%`
    is completely gray and `100%` full color. Lightness is the percent of lightness
    where `0%` is black, `50%` is full color, and `100%` is white. You can specify
    it with or without an alpha value, the same as `rgb()`, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Most people don't think of colors in HSL, but it's out there just in case you
    want to use it. If you want to play around with it, there is a nice HSL picker
    at [http://hslpicker.com](http://hslpicker.com).
  prefs: []
  type: TYPE_NORMAL
- en: Rounded corners
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first CSS3 effect that we'll look at is rounded corners, since that was
    such a sought-after feature before CSS3\. In the past, if you wanted rounded corners,
    there were only a few non-optimal solutions available. You could load four images,
    one for each corner, and add some extra markup to get them to line up (and try
    to make it work in all browsers). Or implement some kind of hack using multiple
    `div` tags to "draw" a rounded border. Or one of a half a dozen other ways. In
    the end none of them were great solutions. So why did we go to such lengths to
    make rounded corners work before CSS3? Because people are attracted to them and
    they just seem to make your design look more natural.
  prefs: []
  type: TYPE_NORMAL
- en: 'Rounded corners are ridiculously easy to add to elements using CSS3''s new
    `border-radius` property. If you want each corner to have the same border radius,
    just give it one value, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'If you want to set each corner of the border to a different radius, you can
    do that too. The values are in the standard order for CSS properties, clockwise
    from the top-left: top-left, top-right, bottom-right, and bottom-left.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: You may set one, two, three, or all four values. One and four are self-explanatory.
  prefs: []
  type: TYPE_NORMAL
- en: If two values are set, the first applies to top-left and bottom-right and the
    second applies to top-right and bottom-left. So it's opposite corners.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If three values are set, the second value applies to top-right and bottom-left.
    The first applies to top-left and the third to bottom-right.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can also define each corner''s radius separately, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Want to create a circle or ellipse? Set the `border-radius` value to `50%`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Rounded corners](img/5947_02_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Shadows
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Adding shadows to elements and text is simple in CSS3\. Use shadows to make
    certain elements really stand out and give a more natural look to your UI. There
    are many options for adding shadows, such as size, position, and color. Shadows
    don't always have to be behind elements and text; they can frame, highlight, and
    add effects to them too.
  prefs: []
  type: TYPE_NORMAL
- en: Box shadows
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In addition to rounded corners, you can add shadows to elements using the new
    CSS3 `box-shadow` property. The `box-shadow` property takes a number of parameters
    that tells it how to draw the shadow:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is an explanation of the parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`h-offset`: The horizontal offset of the shadow. Negative values put the shadow
    to the left of the element.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`v-offset`: The vertical offset of the shadow. Negative values put the shadow
    above the element.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`blur-radius`: Determines the blur amount; the higher the number, the more
    blur (optional).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`spread-radius`: The size of the shadow. If zero, it''s the same size as the
    blur (optional).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`color`: The color of the shadow (optional).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`inset`: Add `inset` to change shadow from outer to inner (optional).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can produce some interesting effects other than shadows with the `box-shadow`
    property. You can give an element an inner or outer glow by setting the `offset`
    values to zero and adjusting the blur and spread (see the previous two examples).
  prefs: []
  type: TYPE_NORMAL
- en: '![Box shadows](img/5947_02_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Text shadows
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In addition to box shadows, CSS3 has support for text shadows using the `text-shadow`
    property. It works nearly identically to `box-shadow` and uses almost all the
    same parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Like `box-shadow`, you can produce some interesting effects, such as glowing
    text:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Text shadows](img/5947_02_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Time for action – styles in action
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's put the `border-radius` and `box-shadow` effects to good use in our task
    list application. First, we will center the task list on the page. Then we'll
    put a box around each task with rounded corners and a shadow. Let's open `taskAtHand.css`
    and make some changes. You can find the code for this section in `chapter2/example2.1`.
  prefs: []
  type: TYPE_NORMAL
- en: First, we'll change the style for the `<div id="main">` element which contains
    the `task-name` text field and task list. Let's give this section a minimum width
    of `9em` and a maximum width of `25em`. We don't want the task list to get too
    wide or too small to make it easier to read. This will give us the beginnings
    of a reactive layout. We will also set the top and bottom margins to `1em`, and
    the left and right margins to `auto` to center it on the page.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A reactive layout is one that reacts to its environment by adjusting its layout
    to fit the device it is displayed on. By using reactive layouts, you can ensure
    that your application works and looks good on any device, ranging from a phone
    to the desktop.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'We also want to change the `task-name` text input field to take up the entire
    width of the main section by setting its `width` property to `98%`. This will
    give it a little wiggle room for the borders of the textbox; `100%` will make
    it burst at the seams:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let''s work on the `task-list` items. We will give them a background color,
    rounded corners, and a shadow. We will make the shadow black and give it some
    transparency, so that the background color shows through. We will also set the
    `position` property to `relative`, so we can position the task buttons inside
    of it (see the next screenshot):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s also add a border around the task buttons to group them, and move them
    over to the upper-right side of the `task` element using absolute positioning.
    We could also float it right here, but absolute positioning gives us more control:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When using absolute positioning, elements are positioned relative to the nearest
    positioned parent element. In this case, that would be the `task` element. That's
    why we set its `position` property to `relative`.
  prefs: []
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you look at the application in the browser, you will notice how much more
    natural our task list looks. The shadows really make the task items pop out from
    the page and give them depth. It makes them the stars of the application. By moving
    the task buttons over to the right out and of the way, we really make the task
    names stand out:'
  prefs: []
  type: TYPE_NORMAL
- en: '![What just happened?](img/5947_02_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Resize your browser window and see how the list reacts. Here''s the same layout
    resized smaller, like you might see on a phone or some other mobile device:'
  prefs: []
  type: TYPE_NORMAL
- en: '![What just happened?](img/5947_02_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Backgrounds
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are a number of new styles for setting the background styles of elements.
    You can now easily draw gradients without using images. You can change the size
    and origin of background images, and even use multiple images in backgrounds.
  prefs: []
  type: TYPE_NORMAL
- en: 'Gradients draw a background for an element that fades from one color to one
    or more other colors. They give depth to your pages and add a more natural look.
    You can specify two different types of gradients in CSS3: **linear** and **radial**.
    Linear gradients are, well, linear. They flow from one color to another in a straight
    line. Radial gradients spread out from a central point in a radial fashion.'
  prefs: []
  type: TYPE_NORMAL
- en: Linear gradients
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Linear gradients are defined using the `linear-gradient` specifier on a `background`
    property. For the simplest form, you specify a start and end color using any of
    the `color` specifiers we discussed earlier in the section on colors, and it will
    draw the gradient from the top to the bottom of the element. The following fades
    from red to blue:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Although gradients are supported by nearly all browsers at this time, you still
    have to use browser-specific prefixes to get them to work. That means specifying
    them at least four times to hit most browsers. Remember to always specify the
    non-proprietary version last, as shown in the following CSS snippet, so it will
    override the browser-specific version when available:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'If you want the gradient to start somewhere other than the top, you can specify
    a first parameter that is either the name of the side to start from or the amount
    to rotate it. The sides are `top`, `bottom`, `left`, and `right`. You can specify
    degrees from `-360deg` to `360deg`, or radians from `-6.28rad` to `6.28rad`. `0`
    is the same as `left`. A positive number rotates counter clockwise and a negative
    number clockwise. The following draws a gradient from `left` to `right`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'And the following draws a gradient at `45` degrees, which is from the bottom-left
    corner:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'You may also add more than two color stops if you like. The following draws
    a gradient at a `45` degree angle from red to blue to green:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is how these code snippets will display:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Linear gradients](img/5947_02_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Radial gradients
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Radial gradients are nearly identical to linear gradients in the parameters
    they use. The default is to draw a gradient from the center to the edge of the
    element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also specify a position such as `linear-gradient` using one of the
    predefined positions or an offset point from the top-left corner for the center
    of the gradient:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'The following draws the gradient with the center at `20` pixels over and `20`
    pixels down:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also add more than two color stops for radial gradients. The following
    draws the gradient with the center at `20` pixels over and `20` pixels down from
    red to blue to green:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is how these code snippets will display:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Radial gradients](img/5947_02_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: There are many more settings that you can specify for gradients to achieve some
    interesting effects, but they are beyond the scope of this book. If you find that
    creating your own gradients is too hard, you can find an excellent gradient generator
    at [http://www.colorzilla.com/gradient-editor/](http://www.colorzilla.com/gradient-editor/).
  prefs: []
  type: TYPE_NORMAL
- en: Background images
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can set the size of a background image to either a fixed pixel amount or
    a percentage of the area of the element. The image will be scaled to fit in the
    area specified. The `background-size` property takes two values: a horizontal
    size and a vertical size. If you want a background image to fill the entire background
    of an element, you can use the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'You can specify multiple background images by separating them with commas.
    The first image in the list will be drawn on top and the last will be drawn on
    the bottom. The following draws two background images:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '![Background images](img/5947_02_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'There is also a new `background-origin` property that determines where the
    background image is drawn. The possible values are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`content-box`: Draws the background image only in the content area of an element'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`padding-box`: Draws the background image out into the padding area of an element'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`border-box`: Draws the background image all the way out into the border of
    an element'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here is an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'And here is the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Background images](img/5947_02_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: CSS sprites
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The next concept we are going to discuss is CSS sprites. This technique isn't
    new to CSS3, but it is an important thing to know how to use when writing HTML5
    applications. CSS sprites allow you to put all of the images for your application
    in a single image file and then slice the individual images out into elements
    using CSS. This technique saves the time and network resources required to download
    multiple images. It is especially useful if your application has a lot of small
    images.
  prefs: []
  type: TYPE_NORMAL
- en: 'To implement CSS sprites, put all of your images into a single image file,
    known as a **sprite sheet** . Then follow these steps to get an image in the sprite
    sheet into an element on the page:'
  prefs: []
  type: TYPE_NORMAL
- en: Make the element the same size as the image you want to show.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the background image of the element to the sprite sheet image.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Adjust the background position of the sprite sheet so that the image you want
    to see is at the top-left corner of the element.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's look at an example. The following sprite sheet has 16 images and each
    image is 10 pixels wide and 10 pixels high. First, we set the element's `width`
    and `height` property to `10` pixels. Next, we set the background image to the
    `sprite-sheet.png` sprite sheet. If we were to stop now, we would only get the
    first image showing in our element.
  prefs: []
  type: TYPE_NORMAL
- en: 'But we want to show the seventh image in our element. So we need to offset
    the background position of the sprite sheet by 20 pixels left and 10 pixels up.
    You must use negative offsets to get the correct image into position because you
    are moving the background image, not the element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![CSS sprites](img/5947_02_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Think of it as cutting a hole in the web page, then sliding a sprite sheet around
    behind it until the correct image shows though the hole.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – adding a gradient and button images
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s use what we learned about gradients and background images to make our
    application look more interesting. First, we''ll add a gradient to the background
    of our task list application. We will add a linear gradient to the `<div id="app">`
    element. It will start with our previous background color at the top and fade
    into a dark blue color at the bottom. Notice how we keep the old background color
    as a fallback for browsers that don''t support gradients:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'This is how it would look:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Time for action – adding a gradient and button images](img/5947_02_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now let's use CSS sprites to add images to the buttons in our task list application.
    We need images for delete, move up, and move down. Our buttons will be 16x16 pixels,
    so our images will need to be the same size. Since we have three images, we will
    create a sprite sheet that is 48 pixels wide and 16 pixels high. We will put our
    sprite sheet image file named `icons.png` into the `images` folder.
  prefs: []
  type: TYPE_NORMAL
- en: '![Time for action – adding a gradient and button images](img/5947_02_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now let''s open `taskAtHand.css` and add the styling to get the images out
    of the sprite sheet and into the buttons. First, we will change the style that
    applies to all the task buttons to set the size to 16x16 pixels and the background
    image to our sprite sheet. This way, we only have to specify the sprite sheet
    image once and it will apply to all of our buttons:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Now all of our buttons will use `icons.png` as their background. All we have
    to do now is set the background positions for each button so they align with the
    correct image:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Take a look at the application in the browser now. We added a gradient so it's
    not so dull and flat anymore. Now it looks modern and chic. We added images to
    the buttons using CSS sprites to extract the images from one sprite sheet image.
    Doesn't this look at lot better with real icons for the buttons?
  prefs: []
  type: TYPE_NORMAL
- en: '![What just happened?](img/5947_02_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Transitions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have a pretty good looking UI now, but we can make it even better with some
    transitions. CSS3 transitions add animation effects to elements when their styles
    change. For example, if we change the size of an element, it will gradually change
    from smaller size to a larger size thereby providing visual feedback to the user.
    When things change gradually, it catches our eye more than something that just
    appears suddenly on the page.
  prefs: []
  type: TYPE_NORMAL
- en: 'The CSS3 `transition` property allows us to specify transitions on elements.
    It has the following format:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is an explanation of the parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`property`: The CSS property to add a transition to. For example, `width` or
    `color`. Use `all` to apply transitions to all the properties.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`duration`: The length of time the transition takes. For example, `0.5s` takes
    half a second to complete the transition.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`timing-function`: Determines how the transition progresses over the duration:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`linear`: The same speed from beginning to end'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ease`: Starts slow, then speeds up, then ends slow'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ease-in`: Starts slow then speeds up'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ease-out`: Starts fast then slows down'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ease-in-out`: Eases in and then out'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cubic-bezier()`: If you don''t like the predefined functions, you can build
    your own'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`delay`: The amount of time to wait before starting the transition.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `cubic-bezier` function takes four parameters which are numbers from `0`
    to `1`. The following produces the same effect as the `ease` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Building your own `cubic-bezier` functions isn't something most people can just
    do in their heads. If you want to explore creating your own timing functions,
    check out [http://cubic-bezier.com/](http://cubic-bezier.com/).
  prefs: []
  type: TYPE_NORMAL
- en: 'Like the gradients, transitions are widely supported, but you should still
    use browser-specific prefixes when declaring it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'The easiest way to apply a transition is in combination with a CSS `hover`
    selector. The following will fade the background color of an element from white
    to blue in one quarter of a second when the user moves the mouse over it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Transforms
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'CSS3 transforms provide even more sophisticated effects. There are 2D and 3D
    transformations available. We will discuss some of the 2D transformations here.
    Transforms can be used with transitions to provide some interesting effects. Here
    is the basic form of the `transform` property:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'There are a few different 2D `transform` functions. The first we''ll look at
    is `translate()`. It moves an element from its current position to a new position.
    It takes x and y positions as parameters. You can use negative values to move
    up and to the left. The following would move an element `10` pixels right and
    `25` pixels up:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'The `rotate()` function rotates an element by a given amount. The rotation
    amount can be specified in degrees or radians. Use negative values to rotate counter
    clockwise, positive for clockwise:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'The `scale()` function adjusts the size of an element by some factor. It takes
    one or two parameters. If only one parameter is provided, it scales by that amount.
    If two parameters are specified, it scales the horizontal and vertical axes separately.
    The following example doubles the width and halves the height of an element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'The last one we''ll look at is the `skew()` function. This function skews,
    or stretches an element. It takes two parameters which are the amounts to rotate
    the x and y axes by. Angles are specified the same as the `rotate()` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Transformations also require browser-specific prefixes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is how transformations would look like in a browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Transforms](img/5947_02_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Time for action – effects in action
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's add some effects to the task list. First, we will add the ability to select
    a task in the list. When a task is clicked, it will grow in size and get a colored
    border so it's easy to tell that it is selected. We will also add a hover effect
    to the tasks so that when the user moves the mouse over a task, the task's action
    buttons are shown. When the mouse moves off of a task, the buttons will fade back
    out. You can find the code for this section in `chapter2/example2.2`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first thing we need to do is go back to `taskAtHand.js` and add a `click`
    event handler to the `task` element after it is created in the `addTaskElement()`
    method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'It calls the `onSelectTask()` method when a task is clicked. In this method
    we will mark a `task` element as selected by giving it a class name of `selected`.
    We will also remove the `selected` class from the previously selected task element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let''s add a style in `taskAtHand.css` for the selected task. We will increase
    the padding to make the element bigger, add a border to highlight it, and change
    the background color:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'That''s nice, but we can make it better by adding a transition. We will add
    the `transition` property to the `.task` class. It will ease in all property changes
    over one quarter of a second. This will provide some nice visual feedback to the
    user when they select a task:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'While we''re at it, let''s add one more transition. We will hide the task action
    buttons until the user moves the mouse over a task or selects a task. To do that,
    all we need to do is add a little more CSS. First, we will hide the task buttons''
    container element by setting its `opacity` property to `0` to make it transparent.
    Then we add the same `transition` properties as we did previously:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we add a `hover` selector for the `task` element that sets the `opacity`
    property to `1` to make it opaque. This, along with the transition, will make
    the task buttons appear to fade in when the user hovers over a task. We also add
    a selector to make the task buttons show up when a task is selected (the second
    line in the following snippet):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: Before CSS3, you could do the same thing with JavaScript using the jQuery `fadeIn()`
    and `fadeOut()` methods along with some mouse events, but it required considerably
    more code.
  prefs: []
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We added some CSS3 transitions to the task list to make the task item buttons
    fade in and out and make selected task items grow larger when clicked. We''ve
    seen that with just a few lines of CSS we can add some nice effects to our applications.
    Here''s what our task list looks like now with **Task 2** selected:'
  prefs: []
  type: TYPE_NORMAL
- en: '![What just happened?](img/5947_02_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Dynamic stylesheets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's add a new feature to our application to allow the user to select a color
    scheme, or theme, so they can customize the look and feel of the application.
    We can change the look of a web page by dynamically loading CSS files to override
    existing styles in our default stylesheet. To implement this, we will add a drop-down
    list of themes to our application that the user can choose from. When they change
    the theme, it will change the stylesheet which will change the color of the page.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – adding a theme selector
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To start with, we need a place to put the theme selector. So let''s add a toolbar
    to the task list application''s markup in `taskAtHand.html`. We will insert it
    between the `<header>` and `<div id="main">` elements. The toolbar will contain
    a `<label>` and a `<select>` drop-down list. The list will contain four different
    color themes: `blue`, `green`, `magenta`, and `red`. You can find the code for
    this section in `chapter2/example2.3`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let''s style up the toolbar. We will make the font a little smaller than
    the rest of the page and set the background color as black with some transparency
    so the color behind it bleeds through:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we have to implement the different themes. So let''s create a few new
    CSS files, one for each theme. We will put them in a folder named `themes` to
    keep them grouped together. The CSS files will have the same names as the `<option>`
    values: `blue.css`, `green.css`, `magenta.css`, and `red.css`. Let''s take a look
    at `green.css`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: Starting at the top we override the background gradients for the `app` element
    to make them a green color instead of blue. We also change the `header` and `footer`
    elements to make them green too. The other CSS files will be exactly the same
    as this one except they will have different colors.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s add a stylesheet `<link>` element to the `<header>` element of the
    HTML file for the theme CSS file. Since the blue theme is the default, we will
    set it to load `blue.css`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: Notice that we include the theme stylesheet after the base one. That's what
    will allow us to override the default styles. Also note that we give the `<link>`
    element an `ID` attribute, so we will be able to get to it in our JavaScript later
    on.
  prefs: []
  type: TYPE_NORMAL
- en: 'The rest of the code we need to add is in `taskAtHand.js`. First, we will add
    a `change` event handler for the theme selector in the `TaskAtHand.start()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'When the user chooses a new theme, it will call the `onChangeTheme()` private
    method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: This method gets the selected option from the list by getting its `<option>`
    elements and then finding the selected option using jQuery's `:selected` selector
    inside the `filter()` method. Then it calls the `setTheme()` method, which we
    will implement next. Lastly, we save the selected theme to `localStorage` so we
    can set it the next time the user comes back to the application.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `setTheme()` method takes the theme name as a parameter. It gets the `<link
    id="theme-style">` element and changes its `href` attribute to the new stylesheet''s
    URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: When this happens, the page will load the new stylesheet and apply its styles
    over the existing ones. And just like that, the page changes color.
  prefs: []
  type: TYPE_NORMAL
- en: 'Wait, we''re not done yet. Remember how we saved the theme to `localStorage`?
    Now we have to get it back out when the user returns to our application. We will
    create a `loadTheme()` method to do that:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: This method gets the theme name from `localStorage`. If it finds one, it calls
    `setTheme()` to set it. Then it selects that theme in the drop-down by finding
    the `<option>` in the list that has the theme name for its value, and sets the
    `selected` attribute on it. The final thing to do is add a call to `loadTheme()`
    from the `start()` method, and we're done.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The style changes for our theme were pretty simple, but you could completely
    change the look and feel of your application using this technique.
  prefs: []
  type: TYPE_NORMAL
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We added a theme selector that changes the theme stylesheet, which causes the
    page to use different colors to draw the background. We saved the selected theme
    to local storage so the settings are remembered when the user returns to the application.
  prefs: []
  type: TYPE_NORMAL
- en: Filling the window
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we leave the chapter on CSS, there is one more thing we will restyle.
    Let's make the application so that it fills the entire space of the window. Right
    now as the list grows, the background gradient grows and the footer moves down.
    It would be nicer if the gradient covered the entire window and the footer was
    always at the bottom.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action – expanding the application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can fill the browser window by using absolute positioning. Let''s add the
    following to the styles for the `<div id="app">` element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: First, it sets positioning for the element to absolute so that we can set the
    position of the element to whatever we want. Then we set all of the `position`
    properties to `0`. This stretches the element so that it fills the entire space
    of the window. Lastly, we set the `overflow` property to `auto`. This will make
    a scrollbar appear and the gradient extend below the bottom of the window if the
    list of tasks goes beyond the height of the window.
  prefs: []
  type: TYPE_NORMAL
- en: 'We also need to reposition the footer so it sticks to the bottom of the window.
    We can do that the same way, by setting `position` to `absolute` and `bottom`
    to `0`. Notice that we didn''t set `right` to `0`, so the footer doesn''t span
    the entire width. Otherwise, it might interfere with the task list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: '*What just happened?*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We expanded the main application element to take up the entire space of the
    browser window and moved the footer to the bottom. Let''s see how our app now
    looks in the browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![What just happened?](img/5947_02_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Have a go hero
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Think up and implement some more themes. Use some more of the CSS3 features
    we learned such as radial gradients, background images, or even some box shadows
    to produce some interesting-looking themes.
  prefs: []
  type: TYPE_NORMAL
- en: Pop quiz
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Q1\. How many color stops can a gradient have?
  prefs: []
  type: TYPE_NORMAL
- en: One
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Two
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Three
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Any number
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Q2\. What does a transition do?
  prefs: []
  type: TYPE_NORMAL
- en: Transitions CSS properties from one value to another
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Transitions an element from one type into another
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Transitions from one class to another
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Transitions from one view to another
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned about some of the new CSS3 features that can be
    used to make your applications pop and provide a lot of visual feedback to the
    user. We updated our tasklist application by adding rounded corners and shadows
    to the task elements, and adding images to the task tool buttons. We added a gradient
    to the background and a theme selector to allow the user to change the color scheme.
    We also added some transitions to make changes look more natural.
  prefs: []
  type: TYPE_NORMAL
- en: We covered the following concepts in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: How to define colors with transparencies in CSS3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to give elements rounded corners
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to add shadows to elements and text
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to create linear and radial gradients
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to use CSS3 transitions and transforms to create visual effects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to use CSS sprites to reduce the network footprint of your applications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to dynamically load stylesheets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to make your application fill the entire window
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One last thing before we go on. Let me leave you with a word of warning. Just
    because CSS3 has all of these great effects, it doesn't mean you have to use them
    all in your application. Every text doesn't need a shadow, you don't need to make
    your backgrounds have rainbow-colored gradients, and every element doesn't need
    to be rotated 30 degrees. Judicious use of these effects will make your application
    look professional; overuse will make them look comical.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will take our task list application to the next level
    by adding a details section to each task that uses some of the new HTML5 input
    types. We will also learn how to use custom data attributes to bind the data model
    to input elements.
  prefs: []
  type: TYPE_NORMAL
