- en: Unit Testing
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You've probably written unit tests for traditional server-side code, such as
    for Java, Python, or C#. Unit testing is, of course, just as important on the
    client side, and, in this chapter, you will learn about Angular testing, including
    the Jasmine and Karma frameworks, two excellent tools for unit testing your client-side
    code.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: Together, we'll explore how we can unit test various parts of our Angular application,
    such as our components, routes, and **dependency injection (DI**).
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: An introduction to Jasmine and Karma
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing directives
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing components
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing routing
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing dependency injection
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing HTTP
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction to testing frameworks
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will learn about two important testing frameworks, namely
    Jasmine and Karma.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: Testing is as important as development itself. It's a highly debatable topic,
    with some experts believing in **test-driven development** (**TDD**), which means
    that writing test scripts is important even before we write development code.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: The beauty about Angular framework is that it natively supports testing frameworks
    and offers a lot of testing utilities that make the developer's job happy and
    easy. We are not complaining at all.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: 'Angular provides us with a core testing module, which has a lot of awesome
    classes we can make use of, and natively supports two important testing frameworks,
    namely Jasmine and Karma:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: We write our test scripts using the Jasmine framework.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We use the Karma framework to execute the test scripts.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: About the Jasmine framework
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Jasmine is a leading open source testing framework for writing and testing automated
    test scripts for modern web frameworks.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: 'Certainly, for Angular, Jasmine has become the de facto, go-to framework. The
    following is taken from the official website:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: '"Jasmine is a behavior-driven development framework for testing JavaScript
    code. It does not depend on any other JavaScript frameworks. It does not require
    a DOM. And it has a clean, obvious syntax so that you can easily write tests."'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: 'The idea behind writing Jasmine test scripts are behaviorally and functionally
    driven. Test scripts have two important elements—`describe` and the specs (`it`):'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: The `describe` function is for grouping related specs together.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The specs are defined by calling the `it` function.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here''s a sample test script, which is written in Jasmine:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In the process of writing test specs, we have to use a lot of conditional checks
    to match data, elements, results, asserting conditions, and much more. The Jasmine
    framework provides a lot of matchers, which we can readily use while writing our
    test specs. In the preceding sample code, toBe is one such example of a matcher.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s a list of the most commonly and frequently used matchers in Jasmine:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: '`toBe`'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`toBeTruthy`'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`toBeFalsy`'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`toBeGreaterThanOrEqual`'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`toBeLessThanOrEqual`'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`toHaveBeenCalled`'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`toHaveClass`'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`toMatch`'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will learn how to use these matchers in the next few sections. OK, we have
    written our test specs, so now what? How do we run them? What will run them for
    us? The answers can be found in the next section.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: About the Karma framework
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Karma is a test-runner framework for executing test scripts on a server and
    generating the reports.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is taken from the official website:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: '"Karma is essentially a tool which spawns a web server that executes source
    code against test code for each of the browsers connected. The results of each
    test against each browser are examined and displayed via the command line to the
    developer such that they can see which browsers and tests passed or failed."'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: The Karma framework gets added in our list of dependencies as it is included
    in the Angular CLI installation. Before we proceed to write and execute our test
    scripts, it's good practice to verify whether we have installed both Jasmine and
    Karma correctly in our `package.json` file. We can also verify the version numbers
    of the libraries that are being used.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: I bet you figured out that this is also the place to specify any particular
    version of Jasmine and Karma you want to use.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following screenshot, we can verify that we have added Jasmine and Karma
    to our list of `devDependencies` in our `package.json` file:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/2e79829a-5f66-40fa-8453-e8ff426ea822.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
- en: Great. Now, it's time to dig deep into Angular testing concepts and write some
    test scripts.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: Angular test automation
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I am sure you will agree with me that test automation is one of the most important
    aspects of product development. In the preceding sections, we explored Jasmine
    and Karma frameworks. In the sections to follow, we will work through some hands-on
    examples of how we can automate various Angular framework building blocks. We
    will learn how to test Angular components, directives, routing, and much more.
    Let's jump right in.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: Testing Angular components
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Over the course of using the Angular CLI, we have generated multiple components
    and services. Take a pause and review the files and folder structure. You will
    notice that, for each component and service, a `.spec.ts` file has been generated.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用Angular CLI的过程中，我们已经生成了多个组件和服务。暂停一下，查看文件和文件夹结构。您会注意到，对于每个组件和服务，都生成了一个`.spec.ts`文件。
- en: 'Eureka moment! The Angular CLI has been generating the required shell test
    scripts for the respective components and services. Let''s do a quick hands-on
    exercise here. Let''s generate a component named `auto-list`:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 恍然大悟！Angular CLI一直在为相应的组件和服务生成所需的外壳测试脚本。让我们在这里进行一个快速的实践练习。让我们生成一个名为`auto-list`的组件：
- en: '[PRE1]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The Angular CLI autogenerates the required files and also makes entries in the
    required files (`AppModule`, `Angular.json`, and so on).
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: Angular CLI会自动生成所需的文件，并在所需的文件（`AppModule`，`Angular.json`等）中进行条目。
- en: 'The following screenshot depicts the test specs generated by the CLI:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图描述了CLI生成的测试规格：
- en: '![](assets/b5672937-3116-499f-8c6b-0fc1a37a54f7.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/b5672937-3116-499f-8c6b-0fc1a37a54f7.png)'
- en: 'Take a closer look at the files that were generated. You will see the following
    files generated for the component:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 仔细看一下生成的文件。您会看到为组件生成了以下文件：
- en: '`auto-list.component.html`'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`auto-list.component.html`'
- en: '`auto-list.component.spec.ts`'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`auto-list.component.spec.ts`'
- en: '`auto-list.component.ts`'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`auto-list.component.ts`'
- en: '`auto-list.component.scss`'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`auto-list.component.scss`'
- en: We are interested in the spec file generated by the Angular CLI. A spec file
    is the test script that was generated for the corresponding component. The spec
    file will have the basic required modules imported, along with the `Component`
    class. The spec file will also have some basic test specs already written, which
    can be used as a starting point or, alternatively, as our motivation.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们对Angular CLI生成的spec文件感兴趣。spec文件是为相应组件生成的测试脚本。spec文件将导入基本所需的模块，以及`Component`类。spec文件还将包含一些基本的测试规格，可以用作起点，或者作为我们的动力。
- en: 'Let''s take a closer look at the code generated in the spec file:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更仔细地看一下在spec文件中生成的代码：
- en: '[PRE2]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'In the preceding code, you will notice that the required modules are imported
    from the Angular testing core. This is certainly not the final list of modules
    we will work with but just basic starter ones. You will also notice that the newly
    created component, `AutoListComponent`, is also imported into our spec file, which
    means that we can create an instance of our class inside the spec file and start
    mocking the objects for testing purposes. Pretty cool? Moving on to the lines
    of code, we can see the following:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的代码中，您会注意到所需的模块是从Angular测试核心导入的。这当然不是我们将使用的模块的最终列表，而只是基本的起始模块。您还会注意到新创建的组件`AutoListComponent`也被导入到我们的spec文件中，这意味着我们可以在spec文件中创建我们类的一个实例，并开始模拟测试目的的对象。很酷，对吧？继续看代码行，我们可以看到以下内容：
- en: '[PRE3]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In the preceding code, you will notice some key points. There is a `describe` statement,
    which is used for grouping related test specs together. We will create test specs
    inside the `describe` function. There are two `beforeEach` methods defined in
    the spec file.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的代码中，您会注意到一些关键点。有一个`describe`语句，用于将相关的测试规格分组在一起。我们将在`describe`函数内创建测试规格。在spec文件中定义了两个`beforeEach`方法。
- en: The first `beforeEach` method is an async promise, which will set up our `TestBed`,
    which means everything declared in it has to be resolved before moving on; otherwise,
    our tests won't work. The second `beforeEach` method will create an instance of
    our `AutoList` component for testing. You will notice the call to `fixture.detectChanges()`,
    which forces Angular's change detection to run and affect the elements in the
    test beforehand.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, it''s time to understand the actual test spec, which is generated in the
    spec file:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: As we mentioned earlier, the Jasmine test specs are written inside the `it`
    statement, which, in this case, is just a simple assert to check whether the component
    exists and is true, using the `toBeTruthy` matcher.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: 'That''s all about our spec file. The joy lies in seeing it work. Let''s just
    run the default tests that Angular has generated for us. To run the tests written
    inside the Angular application, we use the `ng test` command on the command-line
    interface:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'If you see a new window being opened, don''t panic. You will notice that a
    new browser window is opened by the Karma runner to execute the tests, and the
    test execution report is generated. The following screenshot displays the report
    that was generated for our test spec for the component:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/571e4b63-7965-449c-b422-0f6984cca8d2.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
- en: 'So, our test passed. Now, let''s modify the script a bit. We will create a
    variable called `title` in our component and assign a value. In our test spec,
    we will verify whether the value matches or not. It''s a straightforward use case
    and, trust me, it''s also the most frequent use case you will implement in your
    applications. Let''s open the `app.component.spec.ts` file and make the changes
    in the test script:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'In the preceding code, we are writing a test spec and, using `TestBed`, we
    are creating a fixture element of `AppComponent`. Using the fixture element''s
    `debugElement` interface, we are getting the `componentInstance` property. Next,
    we are writing an `expect` statement to assert if the value of the `title` variable
    is equal to `AutoStop`. That was neat. Let''s try and write one more test spec.
    The use case we will address is as follows: we have an `H1` element and we want
    to assert it if the value inside the `H1` tag is equal to `Welcome to Autostop`.
    The following is the relevant sample code:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'In the preceding code, we are asserting if the `textContent` of the `h1` element
    contains the text `Welcome to AutoStop`. Notice that, in previous test specs,
    we used the `componentInstance` interface and that, in this test spec, we are
    using the `nativeElement` property. Again, run the tests using the `ng test` command.
    The following screenshot shows the test report that was generated:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/3f162038-f763-42e7-956c-60b616869076.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
- en: So far, we have had an overview of the Jasmine and Karma frameworks, and also
    learned how to run our test scripts. We also learned about the default spec files
    that Angular generates for us and learned how to modify the test specs.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: In the upcoming sections, we will learn how to write test specs and scripts
    to test Angular built-in directives, services, routes, and much more.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: Testing directives
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Angular provides a lot of built-in powerful directives, such as `ngFor`, `ngIf`,
    and so on, which can be used to extend the behavior and functionality of the native
    HTML elements. We learned about the Angular templates and directives in [Chapter
    7](cd8509d5-4bce-4056-8156-557186df18cd.xhtml), *Templates, Directives, and Pipes.* A
    quick recap has never hurt anyone. Angular offers us two types of directives that
    we can use to develop and extend the behavior of elements:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: Built-in directives
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Custom-defined directives
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The focus of this section is to learn how to write test scripts for built-in
    Angular directives, such as `ngIf`, `ngFor`, `ngSwitch`, and `ngModel`. Before
    we start writing our test scripts, we need to do some groundwork to update our
    component so that we can start writing the test use cases. We will write a few
    variables, which will hold various types of data. We will display the data in
    our template using `ngFor` and also write some conditional checks using `ngIf`.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: If you want a quick revision of Angular templates and directives, refer to [Chapter
    7](cd8509d5-4bce-4056-8156-557186df18cd.xhtml), *Templates, Directives, and Pipes*.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: 'We will continue to use the same component, `AutoListComponent`, which we created
    in the previous section. Let''s start the party. Our starting point will be the `AutoListComponent`
    class, so let''s modify the `auto-list.component.ts` file:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: In the preceding code, we are adding a variable of a JSON object type called
    `cars` and assigning data to it. We will use this data by displaying it in the
    template. We are also declaring a variable, `tab`, and assigning a value, `1`.
    We will use the `tab` variable for conditional checks in the template. Finally,
    we are adding a method, `findAuto`, and just displaying the output in the console.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: 'We have modified our component class. We will also need to update our template
    file in order to process the data inside the component. The following is the sample
    code that we will add in our template file, `auto-list.component.html`:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: In the preceding code, we are making the changes to the template file. First,
    we are using the `ngFor` directive to loop the rows and display the cars. Next,
    we are adding an `ngIf` condition to check whether the length of the car is more
    than 0, and then we will display the count of the `carLength` element. We have
    added an `ngSwitch` directive to check whether the value of the `tab` variable
    is set and, based on the value of the tab, we will display the respective tab,
    accordingly. In our case, since the value assigned to the tab is `1`, we will
    display the first tab. Finally, we have added a button and associated the `findAuto`
    method with the click event.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: 'Beautiful. Our component and template are ready, and now it''s time to write
    some good test scripts to test the preceding logic and, especially, the Angular
    built-in directives. Some of the use cases we will test include testing the count
    of cars displayed in the UI, testing which tab is active, verifying the content
    inside an element, and many more. Some of the use cases follow, and we will learn
    how to write test scripts for the use cases:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: '**Use case #1**: We have a list of cars and we want to verify that the total
    count is `3`:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: In the preceding code, we are creating a fixture of the `AutoListComponent` component.
    We have already learned how to target an element using `debugElement` and, in
    this test spec, we are using the `queryAll` method to get the list of elements
    with `className` `.cars-list > li`. Finally, we are writing an `expect` statement
    to assert if the total count equals `3`.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the tests using the `ng test` command. We should see the following output:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/aabd75b5-5309-43a1-b46e-55a970e65321.png)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
- en: '**Use case #2**: We want to verify that the text inside an HTML element contains
    the `vehicles` keyboard:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: There are some important things to note in the preceding code. We continue to
    use the same fixture element of the component, `AutoListComponent`. This time,
    using the `debugElement` interface, we are using the `querySelector` method to
    find an element that has its identifier as `carLength`. Finally, we are writing
    an `expect` statement to assert if the text content contains the `vehicles` keyword.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s run the tests again using the `ng test` command. We should see the following output:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/8800f60e-eb85-4fa2-b621-5c1908861a28.png)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
- en: '**Use case #3:** We want to use `ngSwitch` to verify that tab1 is selected
    and, if so, display the corresponding div:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'In the preceding code, we continue to use the fixture element of the `AutoListComponent`
    component. Using the `debugElement` and `querySelector` methods, we are targeting
    the element using `className ''.data-tab > div''`. We are asserting whether the `ngSwitch` condition
    is `true` and the corresponding `div` is displayed. Since we have set the value
    of the tab to `1` in our component, tab1 is displayed on the screen and the test
    spec passes:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/752b84ac-61f6-4d59-bba5-64d062a30440.png)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
- en: '**Use case #4:** Test the methods defined inside `AutoListComponent` and assert
    whether the method has been called:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: In the preceding code, we are creating a fixture of the `AutoListComponent`
    component. We are using the `spyOn` method to spy on the component instance. We
    are calling the `findAuto()` method. Finally, we are writing an `expect` statement
    to assert whether the `findAuto` method, using `toHaveBeenCalled`, has been called
    or not.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the tests using the `ng test` command. We should see the following output:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/b594dedb-f283-4c25-9cd3-5df794e0ac52.png)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
- en: In this section, we learned how to write unit test scripts for testing Angular
    built-in directives, such as `ngFor`, `ngIf`, `ngSwitch`, and finally, asserting
    whether a method was clicked and called.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will learn about testing Angular routing.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: Testing Angular routing
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Most likely, you will have multiple links throughout the application in the
    form of a navigation menu or deep links. These links are treated as routes in
    Angular and are usually defined in your `app-routing.module.ts` file.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: We learned about and mastered how to use Angular routing in [Chapter 4](66c21daa-b131-470d-a21b-0fbed56c3ec9.xhtml),
    *Routing*. In this section, we will learn how to write test scripts for testing
    Angular routing and testing the links and navigation in our application.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: 'We will need a beautiful `menu` component for our application. Using the `ng
    generate component menu` command, we will generate the `menu` component. Now,
    let''s navigate to `menu.component.html` and create a menu called `navbar` with
    two links in it:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The preceding code is nothing fancy, at least not yet. It is standard code that
    uses Bootstrap to generate a `navbar` component. Look carefully and you will see
    that we have defined two links in the menu bar, `list-cars` and `list-trucks`,
    with the classes as `nav-link`.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: We can now write a few test specs around the menu functionality to test the
    `navbar` component, which will cover navigation, the count of links, and so on.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: '**Use case #1**: We need to test that the `navbar` menu has exactly two links.'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s the code to check whether there are exactly two links:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: In the preceding code, we are creating a fixture for our `MenuComponent` component.
    Since we have assigned the `nav-link` class, it's easy to target the corresponding
    links in the component. Using the `debugElement` and `queryAll` methods, we are
    finding all the links with `className` as `nav-link`. Finally, we are writing
    an `expect` statement to assert whether the length of the array of links returned
    is equal to `2`.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the tests using the `ng test` command. We should see the following output:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/cb3ca628-e055-4f31-a9d2-0589fd3f02f8.png)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
- en: That's a good start to testing our menu functionality. Now that we know there
    are two links in our menu, the next use case we want to test is whether the first
    link is `list-cars`.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the code to test whether the first link in the array of links
    is `list-cars`:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: In the preceding code, we are creating a fixture for our `MenuComponent` component. Using
    the `debugElement` and `queryAll` methods, we are finding all the links with `className`
    as `nav-link`. We will be getting all the links that have the class name as `nav-link`.
    There can be multiple links in the menu, but we are interested in reading the
    `href` property of the first element through `index [0]` and asserting whether
    the value matches `/list-cars`.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: 'Again, run the `ng test` command. We should see our test report updated, as
    shown in the following screenshot:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/549a54fe-1de2-4743-9569-c0f55abf7c6a.png)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
- en: OK, fair enough. We got a clue that the `list-cars` menu link is the first in
    the menu list. What if we don't know the index or position of the link we are
    searching for? Let's tackle that use case as well.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: 'Take a look at the following code snippet:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Some things to note are that we are finding the index of the route path, `/list-cars`,
    and we are also making use of the assigned classes, `nav-link`, and getting an
    array of all matching elements using the `queryAll` method. Using the `findIndex`
    method, we are looping the array elements to find the index of the matching `href`
    to `/list-cars`.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the tests again using the `ng test` command and the updated test report
    should look as follows:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/549a54fe-1de2-4743-9569-c0f55abf7c6a.png)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
- en: In this section, we learned about various ways to target a router link. The
    same principle applies to hunting down a deep link or a child link.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
- en: That's your homework.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: Testing dependency injection
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous sections, we learned how to write test scripts for testing Angular
    components and routing. In this section, we will learn how to test dependency
    injection and how to test services in Angular applications. We will also learn
    how to inject services into Angular components and write test scripts to test
    them.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
- en: What is dependency injection?
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Dependency injection **(**DI**), in the Angular framework, is an important
    design pattern that allows the flexibility to inject services, interfaces, and
    objects into a class at runtime.'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
- en: The DI pattern helps with writing efficient, flexible, and maintainable code
    that is testable and easy to extend.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
- en: If you need a quick recap, head over to [Chapter 11](437face8-d59c-42f3-a49a-af43f2892f7a.xhtml),
    *Dependency Injection and Services*, which covers and explains the DI mechanism
    in depth.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
- en: Testing Angular services
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will learn how to test Angular dependency injection through
    services and interfaces. In order to test an Angular service, we will first need
    to create a service in our app!
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the `ng generate` command in the Angular CLI; we will generate the service
    in the project folder:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Upon successful execution, we should see that the following files have been
    created:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
- en: '`services/dealers.service.spec.ts`'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`services/dealers.service.ts`'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](assets/16932a86-4c60-4be2-b764-e7b7d5b96c69.png)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
- en: 'Now that we have our dealers service and the corresponding test spec file generated,
    we will work on our service to add a few methods and variables, so we will use
    them in our test specs. Navigate to our service class and update the `dealers.service.ts`
    file. The updated code should look as follows:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: In the preceding code, we are making simple changes so that we can write a few
    test specs around the dealers service. We have defined a variable of the `any` type.
    We are defining a `getDealers` method, which will return a JSON response with
    an `id` and `name` key pair. Alright, now let's come up with some use cases to
    write our test scripts, such as getting the count of dealers, finding a matching
    dealer, and so on.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
- en: '**Use case #1**: When the `getDealers` method is called, it should return the
    list of dealers, and the count should be equal to `4`.'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the test spec for this:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '**Use case #2**: We want to check whether the first dealer name is `North Auto`.'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the test spec for this:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Amazing! So far, so good. So, we have learned how to write test specs for our
    newly created dealers service. That's only one part of dependency injection. As
    part of dependency injection, we may need to inject additional required classes
    at runtime into the service.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s quickly create a class called `Dealers` and define two variables in
    it, namely `username` and `name`. Now, let''s save this file as `dealers.ts`:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'We will now include the newly created class in our dealers service and create
    a method to initialize the class and create an object to return some data:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: That brings us to our next use case to test.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
- en: '**Use case #3**: Testing dependency injection via classes that have been injected
    into a service.'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
- en: 'Have a look at the following code:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: In the preceding code, we have created an instance of our service and invoked
    the `getDealerObject()` method. We are asserting whether the value returned matches
    the `name` property of the response to `Auto`.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
- en: We are calling the method defined in a service, which, internally, is dependent
    on the `Dealers` class.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
- en: '**Use case #4**: What if we want to test just the properties of the `Dealers` class?'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
- en: 'We can test that, too. The following is the sample code for this:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Now, let''s run the `ng test` command. We should see the following output:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/c07cd08c-8543-4d7f-9cbf-27c68f294423.png)'
  id: totrans-181
  prefs: []
  type: TYPE_IMG
- en: On the same lines, you can write test scripts to test your services, dependency
    classes, or interface classes.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
- en: '**Use case #5**: Testing Angular services inside a component.'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
- en: We will continue to test Angular dependency injection. This time, we will import
    our services into the component and verify that it's working as expected.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
- en: In order to implement this use case, we will need to make changes to `AutoListComponent`.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
- en: 'Take a look at the changes we will make in the `auto-list.component.ts` file:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'In the preceding code, we are importing the dealers service into the component. We
    are creating an instance of the service in the constructor method. We added a
    `findAuto` method, which calls the `getDealers` method using the instance of the
    `class _dealersService` service. In order to test the service in our component,
    let''s modify the `auto-list.component.spec.ts` file by adding the following code:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'In the preceding code, we have imported our service dealers into the test spec
    file of `AutoListComponent`. We are creating an instance of the service using
    `TestBed` in the `beforeEach` method. We are now good to start writing our test
    specs in order to test the service. Add the following code to `auto-list.component.spec.ts`:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: In the preceding code, using the instance of the component, we are calling the
    `findAuto` method, which will return the data from the service. It expects the
    count to be equal to `4`.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the tests using the `ng test` command. We should see the following output:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/e5594392-e6b7-4f21-9b7c-e7734dda862a.png)'
  id: totrans-194
  prefs: []
  type: TYPE_IMG
- en: In this section, we learned about various techniques to test Angular dependency
    injection, including services, dependency classes, and testing services inside
    Angular components.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
- en: Testing HTTP
  id: totrans-196
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [Chapter 12](9610f27b-03db-4258-8a68-24eb3901117b.xhtml), *Integrating Backend
    Data Services*, we learned about integrating backend services and also learned
    about `HTTPModule` and `HTTPClient`. We also learned how to make HTTP requests
    to the server and process the responses.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will learn how to write test scripts to test HTTP requests
    and responses. We will continue to use the same project we created in this chapter—the
    AutoStop project. Before we proceed further, it's important to have the REST API
    endpoints ready so that we can use them in our application.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
- en: We will learn how to use the public API, `https://jsonplaceholder.typicode.com/`,
    which is available on the internet for free. We will also create a local server
    to return a mock JSON response from a local static JSON file.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
- en: We must import `HttpClientModule` and `HttpClientTestingModule` into our `app.module.ts`
    file.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
- en: Before we proceed to write our test scripts for testing Angular HTTP, we will
    need to update our dealers service, which we have used throughout this chapter.
    We will implement a few methods that will make HTTP calls—POST/GET to process
    data to the REST API endpoints.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
- en: 'We are working on the `dealers.service.ts` file, as follows:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: In the preceding code, we are importing the required HTTP modules; that is,
    `HttpClient`, `HttpHeaders`, `HttpParams`, and `HttpErrorResponse`, and also defining
    two REST endpoints that have the API URL for users and a specific user.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
- en: We can also have a local server up and running. You can have local APIs using
    the JSON server. You can learn more about this at [https://github.com/typicode/json-server](https://github.com/typicode/json-server).
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
- en: 'It''s time to add a few methods, through which we will make the HTTP calls
    to the REST endpoints:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: In the preceding code, we are creating two methods, which make an HTTP GET request.
    The first method, `getAllDealers`, makes a call and expects a JSON response of
    users. The second method, `getDealerById`, will pass `id` as `1` and expect a
    single user data response. In the `getDealerById` method, we are using `HttpParams`
    to set the parameters to send to the endpoint. We will also modify our `autoListComponent`
    component to add a few methods to our `Component` class.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
- en: 'We are adding the following code to our `auto-list.component.ts` file:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: In the preceding code, we are adding a few methods, namely `findAuto`, `listDealerById`,
    and `getCarList`, which are making HTTP calls and calling methods that are in
    the dealers service.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
- en: Alright, now that we have our component and services set up, which are making
    HTTP calls, we are good to write our tests for HTTP.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
- en: '**Use case #1**: We want to test whether a `GET` call was made to a particular
    URL.'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
- en: 'We will add the following code to the `auto-list.component.spec.ts` file:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: In the preceding code, we are creating the instance of `AutoListComponent`, using
    which we will make a call to its `getCarList` method. In the `getCarList` method,
    we are making a call to the `http://localhost:3000/cars` URL to retrieve data.
    We are creating an instance of the `HttpTestingController` class named `httpMock`.
    Using the `httpMock` instance, we are asserting that at least one call should
    be made to the URL.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
- en: '**Use case #2**: We want to expect that the data returned as the result is
    more than `1`:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: In the preceding code, using the instance of `AutoListComponent`, we are calling
    the `listDealerById` method. Using `subscribe`, we are mapping the result and
    verifying that the result data length is greater than `0`.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
- en: '**Use case #3**: We want to verify that the data returned from the HTTP call
    matches the data. The following is the sample code for this use case scenario.'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: In the preceding code, using the `DealersService` instance, we are making a
    call to the `getDealers` methods. We are asserting data of the first index property
    name to be `North Auto`.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the tests using the `ng test` command. We should see the following output,
    as displayed and highlighted in the following screenshot:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/949ad4eb-06bf-4092-a884-3c8e71f19e27.png)'
  id: totrans-224
  prefs: []
  type: TYPE_IMG
- en: If you see the preceding output, that's brilliant.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we have learned how to test components, services, and methods
    that are making HTTP request calls.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-227
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Testing is an important aspect of the application life cycle, and writing test
    scripts is crucial for application development success. We started with an overview
    of the frameworks supported by Angular, namely Jasmine and Karma. We learned how
    to run our tests using the `ng test` command. Then, we learned how to use the
    spec files autogenerated by Angular for all the components and services.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
- en: We learned how to write test scripts to test Angular components, built-in directives,
    services, and routing. We wrote test scripts for built-in directives, such as `ngFor`,
    `ngIf`, `ngSwitch`, and `ngModel`. We also covered use cases for testing Angular
    routing. Then, we created a `menu` component and wrote test scripts to test various
    use cases for the `menu` component.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
- en: We also explored testing dependency injection and services. We learned about
    various use cases and wrote test scripts for Angular services and HTTP calls.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will explore advanced Angular topics, such as custom
    directives and custom form validations.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
- en: Read on!
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
