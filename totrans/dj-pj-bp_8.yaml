- en: Appendix A. Development Environment Setup Details and Debugging Techniques
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This appendix will go into further detail about the Django development environment
    setup that we have been using throughout the book. We will look into the details
    of the setup, and I will explain each of the steps that we took. I will also show
    you a technique for debugging Django applications. For this appendix, we will
    assume that the project we are setting up is the Blueblog project from the first
    chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will start our project by first creating a root directory for it and then
    `cd` into the directory so that all our commands are run inside it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: There is no technical reason for this. I just prefer to keep all the files related
    to a project in one directory as it makes things easier to organize when you have
    to add further files related to a project, such as designs and other documentation.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will create a virtual environment to use for the project. Virtual environments
    are a feature that allow you to create lightweight installations of Python so
    that each of your projects can have its own installation of all the libraries
    that it uses. This is useful when you are working on multiple projects at the
    same time and each project requires a separate version of some library. For example,
    at work, I once had to work on two projects at the same time. One required Django
    1.4; the other required Django 1.9\. If I hadn't used virtual environments, it
    would have been very difficult to keep both versions of Django at the same time.
  prefs: []
  type: TYPE_NORMAL
- en: Virtual environments also allow you to keep your Python environment clean, which
    is very important when you are finally ready to deploy your application to a production
    server. When deploying your application to a server, you need to be able to accurately
    reproduce the same Python environment you had in your development machine. If
    you don't use a separate virtual environment for each project, you will need to
    figure out exactly which Python libraries your project uses and then only install
    those on the production server. With a virtual environment, you no longer need
    to spend time figuring out which of the installed Python libraries are related
    to your project. You can just create a list of all the libraries installed in
    the virtual environment and install them on the production server, confident that
    you won't miss out on anything or install anything extra that you don't use.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to read more about virtual environments, you can read the official
    documentation at [https://docs.python.org/3/library/venv.html](https://docs.python.org/3/library/venv.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'To create the virtual environment, we use the `pyvenv` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'This creates a new environment inside the `blueblogEnv` folder. Once we have
    created the environment, we activate it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Activating the environment makes sure that any Python commands we run or any
    libraries we install will use the activated environment. Next, we install Django
    in our new environment and start our project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This creates a directory called `src` that holds our Django project. You can
    name the directory anything you want; this is just the convention I prefer.
  prefs: []
  type: TYPE_NORMAL
- en: And that's all there is to the setup of our development environment.
  prefs: []
  type: TYPE_NORMAL
- en: Using pdb to debug Django views
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You will often come across problems in your Django applications that are not
    immediately clear. When I get stuck with a tough bug, especially when it''s inside
    a Django view, I use the Python debugger, which is built into Python, to step
    through my view code and debug the problem. To do so, you''ll need to put this
    line of code into your view right before the point where you think the problem
    exists:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Then, the next time you load the page associated with that view, you'll see
    that your browser appears to not load anything. This is because your Django application
    is now paused. If you look in the console where you ran the `runserver` command,
    you should see a prompt for `pdb`. In the prompt, you can type the name of any
    variable available in the current Python scope (usually the scope of the view
    that you are debugging) and it will print the current value of that variable.
    You can also run a bunch of other debugging commands. For a complete list of available
    features, take a look at the documentation for the Python debugger at [https://docs.python.org/3/library/pdb.html](https://docs.python.org/3/library/pdb.html).
  prefs: []
  type: TYPE_NORMAL
- en: A good Stack Overflow question with useful answers that lists some other debugging
    techniques is [http://stackoverflow.com/questions/1118183/how-to-debug-in-django-the-good-way](http://stackoverflow.com/questions/1118183/how-to-debug-in-django-the-good-way).
  prefs: []
  type: TYPE_NORMAL
- en: Developing on Windows
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you are going to be using the Windows operating system while reading this
    book, please note that a couple of things will need to be done differently. Firstly,
    all the instructions provided in this book assume a Linux/Mac OS X environment,
    and some commands may not work as is. The most important change is how Windows
    handles file paths. On a Linux/OS X environment, paths are written with a forward
    slash. All the paths mentioned in the book are formatted similarly, for example,
    `PROJECT_DIR/main/settings.py`. When referring to these paths on Windows, you
    will need to change the forward slashes to backslashes. This path will become
    `PROJECT_DIR\main\settings.py`.
  prefs: []
  type: TYPE_NORMAL
- en: Secondly, while Python is normally included with or easily installed on Linux/OS
    X, you will need to follow the instructions at `https://www.python.org/downloads/windows/`
    to install it on Windows. After you have Python installed, you can install Django
    using the instructions at [https://docs.djangoproject.com/en/stable/howto/windows/](https://docs.djangoproject.com/en/stable/howto/windows/).
  prefs: []
  type: TYPE_NORMAL
- en: There are a few other things that will need to be modified for Windows. I have
    mentioned these in the book as they have come up, but I might have missed something.
    If so, a search on Google will usually lead you to an answer. If not, you can
    always look me up on Twitter at `@theonejb` and I'll do my best to help you.
  prefs: []
  type: TYPE_NORMAL
