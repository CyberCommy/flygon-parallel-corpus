- en: Chapter 8. Responsive E-mails
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Here we are, after traveling back in time. Think of the late 90s and designing
    with tables; oh yes, you read right, designing with tables.
  prefs: []
  type: TYPE_NORMAL
- en: 'Today, things are not any different when it comes to creating e-mails: we have
    to use tables for layout. Why? It''s simple. There aren''t any wars. E-mail client
    wars, that is.'
  prefs: []
  type: TYPE_NORMAL
- en: Unlike the browser wars of 1995, where Netscape and Internet Explorer battled
    for market supremacy, e-mail clients have been living their own separate lives
    practically oblivious to each other since anyone can remember.
  prefs: []
  type: TYPE_NORMAL
- en: Thanks to the browser wars, we now have such awesome standard-compliant browsers
    that are full of features, customization capabilities, constant updates, and so
    on, making everyone's online life a bit easier.
  prefs: []
  type: TYPE_NORMAL
- en: E-mail clients, on the other hand, evolve at their own pace and that pace is
    slow because there really isn't any competition. Moreover, the vast majority of
    corporations are already locked in with Microsoft's Outlook. In the more recent
    versions of Office, Outlook has actually become worse than its earlier counterparts,
    thus not really helping the e-mail landscape improve in support of more modern
    technologies.
  prefs: []
  type: TYPE_NORMAL
- en: To top this off, there are e-mail clients that are relatively new and radically
    reject support for the `<style>` element or even media queries altogether.
  prefs: []
  type: TYPE_NORMAL
- en: But e-mail is an incredibly efficient and formidable marketing tool that—regardless
    of the level of technology—we need to be prepared to work with soon or later.
  prefs: []
  type: TYPE_NORMAL
- en: In other words, e-mail as a medium of communication is not going anywhere any
    time soon, and we as web designers/developers have to design e-mails with tables
    and inline styles.
  prefs: []
  type: TYPE_NORMAL
- en: But don't worry, I will show you that with the basic principles of RWD, a little
    bit of common sense using progressive enhancement, and by always trying to keep
    things simple, designing and implementing responsive e-mails is not difficult
    and can be fun.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we''re going to talk about the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Why do we need to worry about responsive e-mails?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Don't overlook your analytics.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Things to consider for responsive e-mails.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Responsive e-mail build.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Third-party services.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Why do we need to worry about responsive e-mails?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The main reason we need to worry about responsive e-mails is simple: about
    65 percent of e-mails are opened on mobile devices (smartphones and tablets).
    The remaining 35 percent of e-mails are opened on desktop. Additionally, responsive
    e-mails have more engagement than nonresponsive ones.'
  prefs: []
  type: TYPE_NORMAL
- en: In addition to this, e-mails opened in desktop have more engagement than e-mails
    opened on mobile devices.
  prefs: []
  type: TYPE_NORMAL
- en: 'Check out the following articles:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Nearly 65% of e-mails in the U.S. are opened on mobile devices*: [https://www.internetretailer.com/2014/01/23/nearly-65-e-mails-us-are-opened-mobile-devices](https://www.internetretailer.com/2014/01/23/nearly-65-e-mails-us-are-opened-mobile-devices)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*65% of marketing e-mails were opened on a mobile device last quarter; Android
    tablet use doubles*: [http://www.phonearena.com/news/65-of-marketing-emails-were-opened-on-a-mobile-device-last-quarter-Android-tablet-use-doubles_id51864](http://www.phonearena.com/news/65-of-marketing-emails-were-opened-on-a-mobile-device-last-quarter-Android-tablet-use-doubles_id51864)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The term *engagement* means that the user clicks/taps. So, *more engagement*
    simply means *more clicks/taps*.
  prefs: []
  type: TYPE_NORMAL
- en: Don't overlook your analytics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before starting to push pixels, nest tables, and style elements, it's absolutely
    imperative that we look at the analytics and have a bird's eye view of the landscape
    we're going to create e-mails for.
  prefs: []
  type: TYPE_NORMAL
- en: 'Doing this will allow us to understand:'
  prefs: []
  type: TYPE_NORMAL
- en: When are our e-mails being opened.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Which days have more opens.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Which hours have more opens.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Whether the season is causing more/less openings.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Which devices are being used to open our e-mails.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What e-mail clients are being most used/less used.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If, for example, the analytics have data stating that Outlook 2013 is rarely
    used (wouldn't that be awesome), then we may not need to worry about this e-mail
    client at all.
  prefs: []
  type: TYPE_NORMAL
- en: If the Yahoo Mail app in Android is the most commonly used application and platform,
    then we can safely use more advanced CSS properties and progressively enhance,
    knowing that our ideas will display correctly.
  prefs: []
  type: TYPE_NORMAL
- en: Doing market share research is important, but your own analytics are ultimately
    the ones that will dictate how you're going to approach your e-mail development
    strategy.
  prefs: []
  type: TYPE_NORMAL
- en: Recommendations for building better responsive e-mails
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Although some e-mail clients are getting better at rendering e-mails, there
    are other e-mail clients that are not really as good as they should be. This means
    that we need to build something basic and progressively enhance it for better
    e-mail clients.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are a few guidelines that are important to consider when building responsive
    e-mails:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Define the e-mail client with the least CSS and HTML support**: Knowing which
    e-mail client has the least HTML and CSS support will save us unnecessary headaches
    and time during testing. Again, this is where analytics are crucial.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Use progressive enhancement**: First, design and build for the e-mail client
    that has the least CSS and HTML support. Then, we enhance the design and experience
    using that core base.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Stay within a width of 550px to 600px**: This is very important because most
    e-mail clients have very narrow preview panes. Moreover, 600px or less will look
    good on desktop clients and web browsers, and the e-mail will remain readable
    when scaled down or turned responsive on small screens.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Use tables for layout**: Most e-mail clients have nowhere near the same support
    for HTML and CSS as web browsers, so building layouts with tables is still the
    way to create e-mails.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Inline CSS**: Many e-mail clients remove the `<head>` section of the e-mail,
    thus anything we put there will be stripped out. So, we need to inline the CSS
    in order to achieve the necessary styling.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Use system fonts**: Although using web fonts is technically possible, it''s
    best to stick to system fonts so the e-mails look as similar as possible across
    different devices and different e-mail clients. However, if you do decide to use
    web fonts, go for it and always use them as part of the progressive enhancement
    process.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Provide a fallback color for background images**: Using background images
    isn''t really that difficult. Outlook is the only client that requires special
    markup (Conditional Comments) to make it work. However, always provide a fallback
    background color in case the image doesn''t load.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Always use the alt attribute on images**: If images do not load or load too
    slowly, the e-mail client will show the alternate text. Make sure you put something
    descriptive in the `alt` attribute as well. Instead of *Logo*, something like
    *Company Logo - Tagline* would be ideal.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**No need to do mobile-first**: Because we''re doing progressive enhancement,
    we are starting with the e-mail client with the least support for HTML and CSS.
    Hence, this e-mail client very likely doesn''t support media queries or the `viewport`
    meta tag. So a mobile-first approach may not be necessarily the best option, at
    least yet.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Use the HTML5 DOCTYPE**: We could certainly use the old HTML4 DOCTYPE, but
    we can use the HTML5 DOCTYPE as well which is always a good measure.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Avoid using HTML5 elements**: Although we can use the HTML5 DOCTYPE, support
    for HTML5 elements is practically nonexistent. So avoid using HTML5 elements in
    e-mails.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Keep it simple**: Most e-mails have a very short lifespan, so making an intricate
    layout is not really necessary. Create a simple, one-column layout and this will
    save us a lot of headaches. Focus strongly on the design itself. This is where
    a solid typographic Modular Scale can work wonders.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Responsive e-mail build
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Defining the features of the e-mail is also part of the *build*, so let''s
    define those:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a Modular Scale for typography.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create two designs to help visualize the e-mail beforehand: one for large screens
    and one for small screens.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The e-mail will have a maximum width of 600px and minimum width of 320px.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use progressive enhancement.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Modular Scale for typography
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To build our Modular Scale, we''re going to use the following values:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Base one** (16px): Which is our base font size.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Base two** (600px): Which is the maximum width of our e-mail.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Ratio** (1.618): The Golden ratio.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This Modular Scale can be found at [http://www.modularscale.com/?16,600&px&1.618&web&table](http://www.modularscale.com/?16,600&px&1.618&web&table).
  prefs: []
  type: TYPE_NORMAL
- en: '![Modular Scale for typography](img/B02102_08_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Design – large and small screen views
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following designs will help get a better picture of the e-mail on large
    and small screens. This is how it looks at 600px wide:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Design – large and small screen views](img/B02102_08_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'This is how the e-mail looks at its smallest size, 320px wide:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Design – large and small screen views](img/B02102_08_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Let's get right down to business and build a responsive e-mail.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a basic HTML template
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's start with the most basic template. Then, we're going to add to it the
    different things we need to have a sound template.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s the first take on the HTML with a few initial elements in the `<head>`
    section:'
  prefs: []
  type: TYPE_NORMAL
- en: Define the language of our document with the `lang` attribute, English in our
    case.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Since our design has a colored background, we need to give the `<html>` and
    `<body>` elements a height of 100 percent. This makes both elements stretch to
    the full height of the viewport. Otherwise, the background will end where the
    bottom of the e-mail is and then the page will show a white background.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add a `<title>` tag.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Add the following meta tags:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Character set UTF-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Viewport
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Make Internet Explorer use the latest rendering engine possible
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Remove the autostyling of phone numbers in OSX/iOS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Who says we can't use the web fonts? Only a handful of e-mail clients support
    them, those that don't will just fallback to a system font in our font stack,
    very likely Arial or Helvetica. Let's use Roboto.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here''s the HTML:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Using CSS reset to normalize display
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Let's add the necessary CSS reset styles that will help keep a relatively uniform
    display across as many e-mail clients as possible.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following list outlines what exactly we''ll *reset* (also called *normalizing*)
    across several e-mail clients:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Outlook (all versions)**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Force it to provide a View in browser link.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Make it maintain any custom line heights defined.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Remove spaces on left- and right-hand side of `<table>` elements.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fix the padding issues.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**OSX/iOS/Windows Mobile**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fix automatic increase of font size to 13px when fonts are small.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Yahoo**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fix the paragraph issues.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**IE**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fix the resized images issue.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Hotmail/Outlook.com**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Make it display e-mails at full width.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Force it to display normal line spacing.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**All e-mail clients**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Remove the border around linked images.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here''s the embedded CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: With this basic template in place, let's start adding the content.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the e-mail content
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Building e-mails is pretty much a *you gotta do what you gotta do!* mentality.
    In other words, we do whatever we have to do to make things display as we want
    them to. Sometimes, we have to use nonbreaking spaces (`&nbsp;`) to separate things
    out, use the `<br>` tags to make things go to the next line, even use several
    `<br>` tags to create spaces between elements.
  prefs: []
  type: TYPE_NORMAL
- en: However, this does not mean that we're just going to throw all the good things
    we've learned out the window, no way.
  prefs: []
  type: TYPE_NORMAL
- en: Let's keep things as clean and lean as possible, nesting where necessary, and
    adding the necessary styles where required.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To optimize space and help focus on the important parts, we're going to work
    with the markup inside the `<body>` tag only.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a 100 percent wide wrapping table
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This is our outermost table container and it's always a good practice to have
    one. This table will allow us to handle any padding we want or need in our design,
    because adding padding on the `<body>` tag may not be a reliable approach.
  prefs: []
  type: TYPE_NORMAL
- en: We can also use this outer table to add a background color if our design has
    one. We're going to give this outer table a width and height of 100 percent.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''re also adding 20px padding in the cells; this will give the whole e-mail
    a bit of room to *breathe*, because it won''t be touching the top and bottom edges
    of the viewport/panel it''s going to be seen in. The code is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: I'm adding classes to some elements in the e-mail that I may not necessarily
    use right away. I'm adding them anyway in case in the future something changes,
    I already have those classes in place and can edit faster.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the 600px inner table
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: We're declaring the width of this inner table with the HTML attribute `width`,
    rather than a width within an inline style. We're also adding a white background
    to this table so that our content sits over it and blocks the light gray background
    from the wide container.
  prefs: []
  type: TYPE_NORMAL
- en: The 1px border can be added using the border shorthand. Some say don't use CSS
    shorthands in e-mails! However, after testing several e-mail clients, the shorthand
    works just fine.
  prefs: []
  type: TYPE_NORMAL
- en: 'Adding a 10px margin at the top will help give the e-mail a bit more room.
    The code is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Notice how I used the term *white* for the background color on the `.inner-container-table`?
    That's because I want to show you that you can also use HTML color names instead
    of hexadecimal values. All e-mail clients support this feature. It's also more
    descriptive.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are plenty of resources out in the open Web listing all the HTML color
    names, but I like this one in particular because it groups the color names by
    categories. So, it is easier to use in a design: [http://html-color-codes.info/color-names/](http://html-color-codes.info/color-names/).'
  prefs: []
  type: TYPE_NORMAL
- en: Adding the header image
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Inside the empty `<td>` element all we need to do is add the `<img>` tag that
    calls the header image.
  prefs: []
  type: TYPE_NORMAL
- en: 'Images are `inline-block` elements by default. In order to avoid unwanted behavior,
    make sure the image has `display: block;` and `width: 100%;` elements as shown
    here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Creating the content wrapping table and all its content
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'This is where most of the magic happens because we are now creating the body
    of the e-mail, including the footer. A few things to note:'
  prefs: []
  type: TYPE_NORMAL
- en: The width of the first table is 88 percent. I did this to show you that you
    can be arbitrary if you want to. Moreover, you don't have to use pixels every
    time and you can also use other values different than 100 percent when using percentages.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In some parts, I'm liberally using the `<br>` tags. This is because the spacing
    between some elements is where I wanted them to be. Under other circumstances,
    this would be a pretty bad practice; in e-mail, doing this is quite useful and
    very common.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We''re going to use three rows: one for the main header, one for the body,
    and one for the **Call to Action** (**CTA**) button. Doing this will allow us
    to handle each section independently, without having to worry about affecting
    the other two when debugging or styling.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The footer will be separated from the main content structure, so we can handle
    the background image easily.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The markup is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'At this point, this is what the e-mail looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the content wrapping table and all its content](img/B02102_08_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'And we''re done! Are we? Not yet, we still have a few things to do:'
  prefs: []
  type: TYPE_NORMAL
- en: Add the Outlook 2007/2010/2013 Conditional Comments hacks for the background
    in the footer and the CTA button.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add the media queries.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add the Outlook web font fallback style.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding the Outlook 2007/2010/2013 Conditional Comments hacks
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Just like IE in the times of table-based layouts, Outlook rules the landscape
    of e-mail clients in the desktop. So we can't ignore this client when creating
    e-mails.
  prefs: []
  type: TYPE_NORMAL
- en: That's all fine and dandy; the problem is that most Outlook versions have very
    poor HTML rendering capabilities, so HTML hacks via Conditional Comments are (unfortunately)
    necessary. They are not difficult to implement; you just have to know when to
    implement them.
  prefs: []
  type: TYPE_NORMAL
- en: 'Conditional Comments are most useful for background images and large CTA buttons.
    In our example, we have both: the black/gray triangles background pattern in the
    footer and the orange **Get the Book »** CTA that is Call To Action.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following markup, you''ll be able to note the following points:'
  prefs: []
  type: TYPE_NORMAL
- en: The Conditional Comments wrap only the element in case. In other words, ensure
    that you don't wrap more elements than required, otherwise, we'll be creating
    more problems than solutions.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Both the footer and the CTA buttons require us to edit things in two places:
    the element itself and inside the Conditional Comments.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: E-mail Conditional Comments look quite obscure; they don't adhere to any standards,
    since they are proprietary technology. Consider them more like a patch than part
    of progressive enhancement. They are a flat-out hack.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Editing Conditional Comments isn't too difficult. The parts that are customizable
    are either inline CSS properties/values, or a `src` attribute for images—nothing
    we haven't seen before.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For the purpose of clarity and to cover the scope of this book, I'm going to
    show you only the two sections that are wrapped in Conditional Comments.
  prefs: []
  type: TYPE_NORMAL
- en: Conditional Comments for the background image in the footer
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'This is how the HTML looks:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Conditional Comments for the CTA buttons
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: The following snippet was adapted from Eli Dickinson's post *How to make HTML
    e-mail buttons that rock* from IndustryDive.com ([http://www.industrydive.com/blog/how-to-make-html-email-buttons-that-rock/](http://www.industrydive.com/blog/how-to-make-html-email-buttons-that-rock/)).
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s what the markup looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Adding media queries
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The amount of code used in the media queries for this e-mail is minimal. This
    is the result of having a solid foundation of features before any HTML or CSS
    was created.
  prefs: []
  type: TYPE_NORMAL
- en: 'The things that made this e-mail a solid build are listed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting a typographic Modular Scale.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Keeping the layout to a single column.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building for the most problematic e-mail client first.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using progressive enhancement.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Knowing where to apply Conditional Comments.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The media queries are simply as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Since inline styles have higher specificity than the ones in the `<style>` tag,
    we need to add the `!important` declaration to the end of the values in order
    to override those inline styles.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s what we see in the media queries:'
  prefs: []
  type: TYPE_NORMAL
- en: Since we are using the desktop-first approach, we use the `max-width` property.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We see a media query at 380px, because the orange CTA looks a bit thick in small
    screens at this width. So, we reduce the top and bottom padding from 20px to 10px.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We also add a `white-space: nowrap !important;` element for good measure and
    avoid having the button wrap to a second line.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Once the viewport hits 600px, we're going to make the `inner-container-table`
    95 percent wide. This will give the e-mail a bit of padding on the sides, allowing
    it to *breathe* and not feel *boxed* in such a small space.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Then, we're going to reduce the padding on the table in the footer. This helps
    use a bit more of the available space while keeping the credits in a single line
    each.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Outlook web font fallback style
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Outlook won't use any of the fallback fonts in the font stack. It will just
    use Times New Roman and sometimes this is not what we intend.
  prefs: []
  type: TYPE_NORMAL
- en: So using a specific style within Conditional Comments to target Outlook is the
    way to solve this problem. This style should go after the closing the `</style>`
    tag of the main embedded style sheet.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s what it looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'And that''s it! Really, it is. Here''s a demo I created in CodePen: [http://codepen.io/ricardozea/pen/d11a14e6f5eace07d93beb559b771263](http://codepen.io/ricardozea/pen/d11a14e6f5eace07d93beb559b771263)'
  prefs: []
  type: TYPE_NORMAL
- en: Screenshot of various e-mail clients
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'This e-mail was tested on the following e-mail clients and platforms:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Desktop:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Outlook 2010
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Gmail
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Yahoo! Mail
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Outlook.com
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Mobile (iPhone):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mail App
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Gmail App (*mobile-friendly* view)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Gmail App (original view)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Yahoo Mail App
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Mobile (Android):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Gmail App
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here''s an image of the e-mail on various desktop and mobile clients:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Screenshot of various e-mail clients](img/B02102_08_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Here, a few of the e-mail clients, both desktop and mobile, were actually able
    to pick up Roboto, the web font we used. The rest of them used Arial from the
    font stack, which was our plan anyway.
  prefs: []
  type: TYPE_NORMAL
- en: On desktop, surprisingly, Outlook 2010 was the only one able to render Roboto—albeit
    the font looks bolder than it really is—yet it still was the only one.
  prefs: []
  type: TYPE_NORMAL
- en: On mobile, iPhone's mail app and Gmail on Android were the ones that were capable
    of using Roboto.
  prefs: []
  type: TYPE_NORMAL
- en: Third-party services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When building responsive e-mails, we have to complement our bag of tricks, hacks,
    and broad understanding of e-mail clients' quirks and mishaps, with tools that
    can allow us to test faster, optimize our workflow, improve our efficiency with
    more modern technologies, and learn from others.
  prefs: []
  type: TYPE_NORMAL
- en: There are as many tools out there as there are web designers; the ones we're
    going to mention are strongly related to what this book is about. Also, all these
    tools are free. Let's take a look.
  prefs: []
  type: TYPE_NORMAL
- en: Litmus's PutsMail
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: I have to admit that the name of this tool isn't very descriptive and doesn't
    make any reference to how useful this tool is. With Litmus's PutsMail, we can
    send an e-mail to any account we want for testing and debugging. With the click
    of a single button, PutsMail sends an e-mail to virtually any number of e-mail
    accounts we want.
  prefs: []
  type: TYPE_NORMAL
- en: 'PutsMail allows us to do the following things:'
  prefs: []
  type: TYPE_NORMAL
- en: Add any e-mail(s) to send the tests to
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add a subject line
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Paste our HTML
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Once we have that in place, we just click on the button to send the e-mail and
    off we go to test on all devices. No need for logins and cumbersome interfaces
    in e-mail management platforms.
  prefs: []
  type: TYPE_NORMAL
- en: I used this tool to send the e-mails you saw in the image with all the e-mail
    clients' screenshots a few paragraphs back.
  prefs: []
  type: TYPE_NORMAL
- en: 'The advantages are:'
  prefs: []
  type: TYPE_NORMAL
- en: It's very easy to use, and has a very low learning curve.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unlike some e-mail management services, PutsMail sends the test e-mails right
    away.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding and removing e-mails from the list is very easy.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In addition to testing regular HTML e-mails, it also allows you to test plain
    text and Apple Watch versions.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It has the option to inline the CSS if needed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The markup is neatly highlighted in the HTML field.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It's free.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The disadvantages are:'
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes you need to delete an e-mail and add it again to be able to receive
    the test.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each e-mail marketing service has different rules about what gets stripped out
    or what is left in the markup upon sending the e-mail. So PutsMail's rules may
    be different from other e-mail marketing provider's rules.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Litmus''s PutsMail can be found at the following URL: [https://putsmail.com/](https://putsmail.com/).'
  prefs: []
  type: TYPE_NORMAL
- en: CSS inliners
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Writing inline CSS is quite a tedious task: if our paragraphs have `font-family:
    Arial, Helvetica, san-serif; font-style: italic; font-weight: bold; font-size:
    18px;`, then we have to copy and paste all these attributes into each paragraph.
    Alternatively, we have to copy and paste the same paragraph and change the text
    inside of them.'
  prefs: []
  type: TYPE_NORMAL
- en: Don't even think about using the font shorthand. What about a change in one
    of the properties? Well, we now have to make the change in every paragraph. Doing
    a find-and-replace can be risky, which means more time testing. Enter CSS inliners!
  prefs: []
  type: TYPE_NORMAL
- en: With CSS inliners, we can write our CSS inside a `<style>` tag in the `<head>`
    section of the e-mail template, just like we would do when creating a normal web
    page. Once we're done, we upload the e-mail template into the CSS inliner tool.
    The tool will *inline* the CSS automatically in each corresponding HTML tag.
  prefs: []
  type: TYPE_NORMAL
- en: 'So if we have the following paragraph:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we write this in the `<style>` tag in the `<head>` section:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The CSS inliner will do this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The advantages are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: We can include all our styles in a `<style>` tag in the `<head>` section of
    the e-mail template, just like in a regular web page build.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'It''s simple to use CSS inliners: paste your markup, press the inline button,
    and you''re done.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It leads to considerable reduction in repetitive tasks, since placing a class
    in the `<style>` tag is all we need to do—the tool does the rest.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Most CSS inliners are free.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The disadvantages are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Testing e-mails is very time consuming, so using a CSS inliner to create test
    e-mails adds an extra step to the process.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An exception to this is Litmus's PutsMail, since it has the option to inline
    the CSS upon sending the test e-mail.
  prefs: []
  type: TYPE_NORMAL
- en: 'CSS inliners have different ways of writing the styles: some add spaces after
    the semicolon while others don''t. This may or may not concur with one''s style.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Some of the most popular CSS inliners are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: MailChimp ([http://templates.mailchimp.com/resources/inline-css/](http://templates.mailchimp.com/resources/inline-css/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Campaign Monitor ([http://inliner.cm/](http://inliner.cm/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dialect's Premailer ([http://premailer.dialect.ca/](http://premailer.dialect.ca/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Zurb's Inliner ([http://zurb.com/ink/inliner.php](http://zurb.com/ink/inliner.php))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Advanced e-mail frameworks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Who says we can't build e-mails with modern and more advanced technologies,
    such as Sass, Grunt, and Node.js?
  prefs: []
  type: TYPE_NORMAL
- en: For those who are a bit more technical and love frontend development, these
    e-mail frameworks can speed things up tremendously.
  prefs: []
  type: TYPE_NORMAL
- en: 'The advantages are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: These technologies boost the speed of the development and testing phases.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These technologies run locally on one's machine; this means that everything
    executes much faster than using a third-party, web-based service.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you're a frontend developer who is familiar with such technologies, learning
    to use any e-mail framework can be much easier.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Some e-mail frameworks allow us to reuse components, similar to using includes,
    like the header and footer, and so on.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating plain text e-mails is an option in some e-mail frameworks.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Any time any of us uses an open source project, we are helping a fellow web
    professional in their career, and any community around such projects, making a
    better web.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There is support from the developer(s) and the ecosystem of contributors of
    the project.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These technologies are free.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The disadvantages are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The learning curve can be steep if one is not familiar with such frontend technologies.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It requires knowing and understanding more than one frontend technology beforehand.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Some of the e-mail frameworks are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Nathan Rambeck''s Email Lab ([https://github.com/sparkbox/email-lab](https://github.com/sparkbox/email-lab))
    It uses the following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Node.js
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Grunt
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bundler
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sass
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ruby
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Premailer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Nodemailer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Handlebars/Assemble
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Alex Ilhan's Zenith ([https://github.com/Omgitsonlyalex/ZenithFramework](https://github.com/Omgitsonlyalex/ZenithFramework))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can find a tutorial in Litmus at [https://litmus.com/community/learning/23-getting-started-with-sass-in-email](https://litmus.com/community/learning/23-getting-started-with-sass-in-email).
    It uses the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Sass
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compass
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Premailer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lee Munroe's Grunt Email Workflow ([https://github.com/leemunroe/grunt-email-workflow](https://github.com/leemunroe/grunt-email-workflow))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'It uses the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Grunt
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ruby
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Node.js
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sass
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Premailer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mailgun (optional)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Litmus (optional)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rackspace Cloud (optional)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Responsive e-mail template services
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: I've always believed that being hands-on is the best way to learn. However,
    in the world of e-mail, being hands-on means spending a lot of time working with
    HTML and CSS in ways that are no longer a good practice. Using tables for layout
    (not that using floats is any better), inlining CSS, dealing with quirky e-mail
    clients, and so on, takes a lot longer than necessary for testing and debugging,
    and all that other good stuff.
  prefs: []
  type: TYPE_NORMAL
- en: A way to speed things up is to use third-party e-mail templates because the
    authors have already, at least for the most part, done the dirty work for us.
    Let's take a look at the pros and cons of using third-party responsive e-mail
    templates.
  prefs: []
  type: TYPE_NORMAL
- en: 'The advantages are:'
  prefs: []
  type: TYPE_NORMAL
- en: It's likely that thorough testing has already been done; this reduces our own
    testing time tremendously.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If we are happy with the layout, all we need to do is replace the content with
    our own.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Some e-mail template services even allow you to send the e-mail itself after
    editing it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Some services don't require the author to know any HTML or CSS in order to create
    a responsive e-mail.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Downloading the e-mail template is an option provided by some e-mail template
    services.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Most responsive e-mail templates for download are free.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Some paid drag-and-drop e-mail building services offer a free account with a
    lot of functionalities available with their free plan.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The disadvantages are:'
  prefs: []
  type: TYPE_NORMAL
- en: Although minimal, some testing of our own is still necessary.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If we want to make changes to the layout, sometimes it's not possible. This
    depends on the e-mail template service.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Although some e-mail template services allow us to send the e-mail, they don't
    provide any analytics or backend where we can see how the e-mail performed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Image optimization may or may not be ideal. There's no way to know.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reusing an old e-mail template is not possible with some services, so we have
    to edit everything again from scratch if we plan to use the same layout.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Some of the most common responsive e-mail templates for download are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: MailChimp's Email Blueprints ([https://github.com/mailchimp/Email-Blueprints](https://github.com/mailchimp/Email-Blueprints))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Zurb Ink ([http://zurb.com/ink/templates.php](http://zurb.com/ink/templates.php))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Litmus's Slate ([https://litmus.com/resources/free-responsive-email-templates](https://litmus.com/resources/free-responsive-email-templates))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Brian Graves's Responsive Email Patterns ([http://responsiveemailpatterns.com/](http://responsiveemailpatterns.com/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following are drag-and-drop e-mail building services:'
  prefs: []
  type: TYPE_NORMAL
- en: Stamplia Builder ([https://builder.stamplia.com/](https://builder.stamplia.com/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MailUp's BEE Free ([https://beefree.io/](https://beefree.io/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**BEE** is an acronym for **Best E-mail Editor**'
  prefs: []
  type: TYPE_NORMAL
- en: See how an e-mail was built
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This tool has got to be one of the most amazing and useful tools for e-mail
    development and learning. Litmus's **Scope** bookmarklet allows us to see, from
    within any webmail client, how an e-mail template was built.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A *bookmarklet* is a JavaScript component that you store in your bookmarks,
    usually your bookmarks bar. When you click on the bookmarklet, a special functionality
    displays. A bookmarklet is not a bookmark per se; it happens to be stored with
    the bookmarks, but offers a very different functionality than a regular bookmark.
  prefs: []
  type: TYPE_NORMAL
- en: 'The way Scope works is quite simple:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to the Scope site: [https://litmus.com/scope/](https://litmus.com/scope/).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag the bookmarklet to your bookmarks bar in your browser.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open your webmail and view any e-mail.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Scope It** bookmarklet in your bookmarks bar.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Scope site opens with the e-mail in *design* mode.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **code** and the design panel will slide away and allow us to see all
    the markup of the e-mail in question.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This is incredibly useful for learning how others are pulling off such amazing
    things like video on e-mails, gradients, responsiveness, and so on. Here's a screenshot
    showing us what the responsive e-mail template we just built looks like after
    sending it to my Gmail account and *scoping it* with the bookmarklet.
  prefs: []
  type: TYPE_NORMAL
- en: On the left we see the Scope side on Litmus's website, and on the right it's
    the file opened in Sublime Text. They are exactly the same… even the formatting
    is identical. Amazing tool!
  prefs: []
  type: TYPE_NORMAL
- en: '![See how an e-mail was built](img/B02102_08_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: E-mail template using Litmus's Scope
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Wow, we made it!
  prefs: []
  type: TYPE_NORMAL
- en: In this final chapter about responsive e-mails, we discussed some important
    things in addition to building an actual e-mail.
  prefs: []
  type: TYPE_NORMAL
- en: We now understand why e-mail is so important in any marketing campaign, since
    more and more e-mails are being opened on mobile devices. However, people like
    to interact with e-mails a lot more on their desktops—very solid reasons to make
    our e-mails responsive.
  prefs: []
  type: TYPE_NORMAL
- en: Analytics are a key factor in deciding which e-mail clients to support. We want
    to spend our time wisely. Then, setting up a basic HTML template can go a long
    way because we can reuse such template over and over.
  prefs: []
  type: TYPE_NORMAL
- en: Things like a CSS reset, wrapping our content in a 100 percent wide table, and
    creating the inner table is pretty much the go-to process for any e-mail design.
    We know now that the maximum width of an e-mail should be 600px.
  prefs: []
  type: TYPE_NORMAL
- en: 'Microsoft''s Outlook 2007/2010/2013 versions are the IE6 of e-mail clients:
    they have very poor support for modern HTML and CSS, but they are the most popular
    e-mail client on desktop. So using Conditional Comments for nice CTAs and backgrounds
    is the way to go.'
  prefs: []
  type: TYPE_NORMAL
- en: Also, in order to be as efficient as possible, using third-party e-mail templates
    and drag-and-drop e-mail building services are always an option.
  prefs: []
  type: TYPE_NORMAL
- en: With these final words about responsive e-mails, we have concluded our journey
    of mastering Responsive Web Design with HTM5 and CSS3, and then some. If you have
    any questions, don't hesitate to look me up. I will be more than glad to help
    a fellow web professional wherever, whenever.
  prefs: []
  type: TYPE_NORMAL
- en: We can now strike that same pose the Kung Fu grandmasters from the Shaolin Temple,
    Shi DeRu and Shi DeYang did in [Chapter 6](ch06.html "Chapter 6. Working with
    Images and Videos in Responsive Web Design"), *Working with Images and Videos
    in Responsive Web Design*.
  prefs: []
  type: TYPE_NORMAL
- en: Hi Ya!
  prefs: []
  type: TYPE_NORMAL
- en: '![Summary](img/B02102_08_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Huge thanks for reading, I hope you enjoyed it!
  prefs: []
  type: TYPE_NORMAL
