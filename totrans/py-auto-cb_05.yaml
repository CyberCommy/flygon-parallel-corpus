- en: Generating Fantastic Reports
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a simple report in plain text
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using templates for reports
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Formatting text in Markdown
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing a basic Word document
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Styling a Word document
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generating structure in Word documents
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding pictures to Word documents
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing a simple PDF document
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Structuring a PDF
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Aggregating PDF reports
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Watermarking and encrypting a PDF
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we'll see how to write documents and perform basic operations,
    such as dealing with templates in different formats, such as plain text and Markdown.
    We'll spend the most time with common, useful formats such as Word and PDF.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a simple report in plain text
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The most simple report is to generate some text and store it in a file.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this recipe, we will generate a brief report in text format. The data to
    be stored will be in a dictionary.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Import `datetime`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Create the template with the report in text format:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a dictionary with the values to store. Note this is the data that''s
    going to be presented in the report:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Compose the report, adding the data to the template:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new file with the current date and store the report:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Check the newly created report:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Steps 2 and 3 in the *How to do it…* section set up a simple template and add
    a dictionary with all the data to be contained in the report. Then, in step 4,
    those two are combined into a specific report.
  prefs: []
  type: TYPE_NORMAL
- en: In step 4, the dictionary is combined with a template. Notice that the keys
    on the dictionary correspond to the parameters on the template. The trick is to
    use the double star in the `format` call to decompress the dictionary, passing
    each of the keys as a parameter to `format()`.
  prefs: []
  type: TYPE_NORMAL
- en: In Step 5, the resulting report, a string, is stored in a newly created file,
    using the `with` context manager. The `open()` function creates a new file, as
    stated in the opening mode, `w`, and keeps it open during the block, which writes
    the data to the file. When exiting the block, the file is properly closed.
  prefs: []
  type: TYPE_NORMAL
- en: The open modes determine how to open a file, whether it is to read or write,
    and whether the file is in text or binary. The `w` mode opens the file to write
    it, overwriting it if it already exists. Be careful to not to delete an existing
    file by mistake!
  prefs: []
  type: TYPE_NORMAL
- en: Step 6 checks that the file has been created with the proper data.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The filename is created with today's date to minimize the probability of overwriting
    values. The format of the date, starting with the year and ending with the day,
    has been selected so the files are sorted naturally in the correct order.
  prefs: []
  type: TYPE_NORMAL
- en: The `with` context manager will close the file even if there's an exception.
    It will raise an `IOError`exception if there is.
  prefs: []
  type: TYPE_NORMAL
- en: Some of the common exceptions in writing could be a problem with permissions,
    a full hard drive, or a path problem (for instance, trying to write in a non-existent
    directory).
  prefs: []
  type: TYPE_NORMAL
- en: Note that a file may not be fully committed to disk until it is closed or explicitly
    flushed. Generally, this is not a problem when dealing with files, but something
    to keep in mind if trying to open a file twice, one for read and one for write.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Using templates for reports* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Formatting text in Markdown* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Aggregating PDF reports* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using templates for reports
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: HTML is a very flexible format that can be used to present rich reports. While
    an HTML template can be created by treating it as just text, there are tools that
    allow you to add better handling of structured text. This detaches the template
    from the code as well, separating the generation of the data from the representation
    of that data.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The tool used in this recipe, Jinja2, reads a file that contains the template
    and applies the context to it. The context contains the data to be displayed.
  prefs: []
  type: TYPE_NORMAL
- en: 'We should start by installing the module:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Jinja2 uses its own syntax, which is a mixture of HTML and Python. It is aimed
    at HTML documents so it easily performs operations such as correctly escaping
    special characters.
  prefs: []
  type: TYPE_NORMAL
- en: In the GitHub repository, we've included a template file called `jinja_template.html`
    with the template to use.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Import Jinja2 `Template` and `datetime`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Read the template from the files into memory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a context with the data to be displayed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Render the template and write a new file, `report.html`, with the following
    result:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Open the `report.html` file in a browser:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/47421547-e6ed-41d2-8573-cf9ffebbc7d2.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Steps 2 and 4 in the *How to do it…* section are very straightforward: they
    read the template and  save the resulting report.'
  prefs: []
  type: TYPE_NORMAL
- en: 'As seen in Steps 3 and 4, the main task is to create a context dictionary with
    the information to be displayed. The template then renders that information, as
    shown in step 5\. Let''s take a look at `jinja_template.html`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Most of it is replacing the context values as defined between curly brackets,
    such as `{{total_minutes}}`.
  prefs: []
  type: TYPE_NORMAL
- en: Note the tag, `{% for ... %} / {% endfor %}`, which defines a loop. That allows
    a very Python-based assignment to generate multiple rows or elements.
  prefs: []
  type: TYPE_NORMAL
- en: Filters can be applied to the variables to modify them. In this case, the `length`
    filter is applied to the `movies` list to obtain the size using the pipe symbol,
    as shown in `{{movies|length}}`.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Other than the `{% for %}` tag, there''s an `{% if %}` tag, allowing it to
    display conditionally:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'There are a good number of defined filters already (see the whole list here:
    [http://jinja.pocoo.org/docs/2.10/templates/#list-of-builtin-filters](http://jinja.pocoo.org/docs/2.10/templates/#list-of-builtin-filters)).
    But, it is also possible to define custom ones.'
  prefs: []
  type: TYPE_NORMAL
- en: Note that you can add a lot of processing and logic to the template using filters.
    While a little bit is fine, try to limit the amount of logic in the template.
    Most of the calculations for data to be displayed should be done before, leaving
    the template to just display values. This makes the context very straightforward
    and simplifies the template, allowing for changes.
  prefs: []
  type: TYPE_NORMAL
- en: 'When dealing with HTML files, it is good to auto-escape the variables. This
    means that characters with meaning, for example, the `<` character, will be replaced
    by the equivalent HTML code to be properly displayed on an HTML page. To do so,
    create the template with the `autoescape` parameter. Check the difference here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Escaping can be applied on each variable with the `e` filter (meaning *escape*)
    and unapplied with the `safe` filter (meaning *it is safe to render as it is*).
  prefs: []
  type: TYPE_NORMAL
- en: Jinja2 templates are extensible, meaning that you can create a `base_template.html`
    and then extend it, changing some of the elements. You can include other files
    as well, partitioning and separating different sections. See the full documentation
    for further details.
  prefs: []
  type: TYPE_NORMAL
- en: Jinja2 is very powerful and allows us to create complex HTML templates, and
    also in other formats such as LaTeX or JavaScript, though this requires configuring.
    I encourage you to read the whole documentation and have a look at all its capabilities!
  prefs: []
  type: TYPE_NORMAL
- en: The whole Jinja2 documentation can be found here: [http://jinja.pocoo.org/docs/2.10/.](http://jinja.pocoo.org/docs/2.10/)
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Creating a simple report in plain text* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Formatting text in Markdown* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Formatting text in Markdown
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Markdown** is a very popular markup language used to create raw text that
    can be converted into styled HTML. It is a good way of structuring documents in
    a way that is readable in raw text format, while being able to properly style
    them in HTML.'
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we'll see how to transform a Markdown document into styled HTML
    using Python.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We should start by installing the `mistune` module, which will compile Markdown
    documents into HTML:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: In the GitHub repository, there is a template file called `markdown_template.md` with
    a template of the report to generate.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Import `mistune` and `datetime`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Read the template from the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Set up the context of the data to be included in the report:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'As movies need to be displayed as bullet points, we transform the list into
    a suitable Markdown bullet list. Also, we store the number of movies:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Render the template and compile the resulting Markdown into HTML:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, store the resulting report in the `report.html` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Open the `report.html` file in a browser to check the result:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/3d49c70a-b883-4122-a5ac-36db8f95bfd7.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Steps 2 and 3 in the *How do it…* section prepare the template and the data
    to be displayed. In Step 4, extra information is produced—the number of movies,
    which is derivative from the `movies` element. The `movies` element is then transformed
    into a valid Markdown element from a Python list. Note the new lines and the initial
    `*`, which will be rendered as a bullet point:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'In Step 5, the template is generated in Markdown format. The format is very
    readable in this raw form, which is the strong point of Markdown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Then, using `mistune`, the report is transformed into HTML and stored in a file
    in Step 6.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Learning Markdown is extremely useful, as it is supported by many common web
    pages as a way of enabling text input that is easy and can render to a styled
    format. Some examples are GitHub, Stack Overflow, and most blogging platforms.
  prefs: []
  type: TYPE_NORMAL
- en: There is actually more than one kind of Markdown. This is because the official
    definition was limited or ambiguous, and there was no interest in clarifying or
    standardizing it. This led to several implementations that are sightly different,
    such as GitHub Flavoured Markdown, MultiMarkdown, and CommonMark.
  prefs: []
  type: TYPE_NORMAL
- en: The text in Markdown is quite readable, but in case you need to interactively
    see how it will look, you can use the Dillinger online editor at [https://dillinger.io/](https://dillinger.io/).
  prefs: []
  type: TYPE_NORMAL
- en: '`Mistune` full docs are available here: [http://mistune.readthedocs.io/en/latest/.](http://mistune.readthedocs.io/en/latest/)'
  prefs: []
  type: TYPE_NORMAL
- en: The full Markdown syntax can be found at [https://daringfireball.net/projects/markdown/syntax](https://daringfireball.net/projects/markdown/syntax),
    and a good cheat sheet with the most-used elements at [https://beegit.com/markdown-cheat-sheet.](https://beegit.com/markdown-cheat-sheet)
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Creating a simple report in pain text* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Using templates for reports* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing a basic Word document
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Microsoft Office is one of the most common pieces of software, and MS Word in
    particular is almost a de facto standard for documents. Generating `docx` documents
    is possible with an automated script, which will help distribute reports in a
    format that's easily readable in many business.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to generate a full Word document.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We''ll use the `python-docx` module to process Word documents:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Import `python-docx` and `datetime`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Define the `context` with the data to be stored in the report:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new `docx` document, and include a heading, `Movies Report`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Add a paragraph describing the date, with the date in italics:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Add information about the number of movies seen in a different paragraph:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Add each of the movies as a bullet point:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the total minutes and save the file as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Open the `word-report.docx` file to check it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/c0e40215-1fb8-45e6-82a6-dadd4fbe344d.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The basics of a Word document is that it is divided in to paragraphs, and each
    of the paragraphs is divided in to runs. A run is a part of a paragraph that shares
    the same style.
  prefs: []
  type: TYPE_NORMAL
- en: Steps 1 and 2 in the *How to do it…* section are preparation for importing and
    defining the data that's going to be stored in the report.
  prefs: []
  type: TYPE_NORMAL
- en: In Step 3, the document is created and a heading with the proper title is added.
    This automatically styles the text.
  prefs: []
  type: TYPE_NORMAL
- en: Dealing with paragraphs is introduced in Step 4\. A new paragraph is created
    based on the introduced text with the default style, but new runs can be added
    to change it. Here, we added the first run with the text `Date:`, and then another
    run is added with the specific time and labelled as *italic*.
  prefs: []
  type: TYPE_NORMAL
- en: In Steps 5 and 6, we see information about the movies. The first part stores
    the number of movies, in a similar way to Step 4\. After that, the movies are
    added to the report one by one, and the style is set up like bullet points.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, Step 7 stores the total run time of all movies, in a similar way to
    Step 4, and stores the document in a file.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you need to introduce extra lines in the document for formatting purposes,
    add empty paragraphs.
  prefs: []
  type: TYPE_NORMAL
- en: Due to the way that the MS Word format works, there's no easy way of determining
    how many pages is going to have. You may need to run some tests on sizes, especially
    if you're generating the text to store dynamically.
  prefs: []
  type: TYPE_NORMAL
- en: Even if you generate `docx` files, having MS Office is not necessary. There
    are other applications that can open and deal with these files, including free
    alternatives such as LibreOffice.
  prefs: []
  type: TYPE_NORMAL
- en: 'The whole `python-docx` documentation is available here: [https://python-docx.readthedocs.io/en/latest/.](https://python-docx.readthedocs.io/en/latest/)'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Styling a Word document* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Generating structure in Word documents* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Styling a Word document
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A Word document can be very plain, but we can also add styling to help properly
    understand the displayed data. Word has a set of predefined styles that can be
    used to variate the document and highlight the important parts of it.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We''ll use the `python-docx` module to process Word documents:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Import the `python-docx` module:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new document:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Add a paragraph that highlights some words in different ways, *Italics*, **bold,**
    and underline:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Create some paragraphs, styling them with default styles, such as `List Bullet`,
    `List Number`,  or `Quote`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a paragraph in a different font and size. We''ll use `Arial` font and
    a point size of `25`. The paragraph will be aligned to the right:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Save the document:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Open the `word-report-style.docx` document to verify its content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/eaaee1e8-82db-4952-bab9-1173dac10bdb.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After creating the document in Step 1, Step 2 from the *How to do it…* section
    adds a paragraph that has several runs. In Word, a paragraph can contain multiple
    runs, which are parts that can have different styles. In general, any format change
    related to individual words will be applied to a run, while a change that affects
    paragraphs will be applied to the paragraph.
  prefs: []
  type: TYPE_NORMAL
- en: Each of the runs are created, by default, with the `Normal` style. Any attribute
    of `.bold`, `.italic`, or `.underline` can be changed to `True` to set up if the
    run should be in a proper style or a combination. A value of `False` will deactivate
    it, while a `None` value will leave it as the default.
  prefs: []
  type: TYPE_NORMAL
- en: Note that the proper word in this protocol is *italic*, and not *italics*. Setting
    the property to italics won't have any effect, but won't display an error either.
  prefs: []
  type: TYPE_NORMAL
- en: Step 4 shows how to apply some of the default styles for paragraphs, in this
    case to show bullet points, numbered lists, and quotes. There are more styles,
    and they can be checked in this page of the documentation: [https://python-docx.readthedocs.io/en/latest/user/styles-understanding.html?highlight=List%20Bullet#paragraph-styles-in-default-template](https://python-docx.readthedocs.io/en/latest/user/styles-understanding.html?highlight=List%20Bullet#paragraph-styles-in-default-template).
    Try to find out which ones work best for your document.
  prefs: []
  type: TYPE_NORMAL
- en: The `.font` property of a run is shown in Step 5\. This allows you to manually
    set up a specific font and size. Note that the size needs to be specified using
    the proper `Pt` (points) object.
  prefs: []
  type: TYPE_NORMAL
- en: The alignment of the paragraph is set up in the `paragraph` object, and uses
    a constant to define whether it is left, right, center, or justified. All alignment
    options can be found here: [https://python-docx.readthedocs.io/en/latest/api/enum/WdAlignParagraph.html.](https://python-docx.readthedocs.io/en/latest/api/enum/WdAlignParagraph.html)
  prefs: []
  type: TYPE_NORMAL
- en: Finally, step 7 saves the file so it's stored in the file system.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `font` attribute can also be used to set up more properties of the text,
    such as small caps, shadow, emboss, or strikethrough. The whole range of possibilities
    is shown here: [https://python-docx.readthedocs.io/en/latest/api/text.html#docx.text.run.Font.](https://python-docx.readthedocs.io/en/latest/api/text.html#docx.text.run.Font)
  prefs: []
  type: TYPE_NORMAL
- en: 'Another available option is to change the color of the text. Note the run can
    be any of the previously generated runs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: The color can be described in the usual hex format from a string. Try to define
    all the colors to use to ensure they are all consistent, and limit yourself to
    a maximum of three colors in a report to not overcharge it.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can use an online color picker, such as this one: [https://www.w3schools.com/colors/colors_picker.asp](https://www.w3schools.com/colors/colors_picker.asp).
    Remember to not use the # at the beginning. If you need to generate a palette,
    it''s a good idea to use tools such as [https://coolors.co/](https://coolors.co/) to
    generate good combinations.'
  prefs: []
  type: TYPE_NORMAL
- en: The whole `python-docx` documentation is available here: [https://python-docx.readthedocs.io/en/latest/.](https://python-docx.readthedocs.io/en/latest/)
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Writing a basic Word document* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Generating structure in Word documents* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generating structure in Word documents
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To create proper professional reports, they need to have the proper structure.
    An MS Word document doesn't have the concept of *a page*, as it works in paragraphs,
    but we can introduce breaks and sections to properly divide a document.
  prefs: []
  type: TYPE_NORMAL
- en: We'll see in this recipe how to create a structured Word document.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We''ll use the `python-docx` module to process Word documents:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Import the `python-docx` module:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new document:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a paragraph that has a line break:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a page break and write a paragraph:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new section, which will be on landscape pages:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'Create another section, reverting to portrait orientation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'Save the document:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'Check the result by opening the document and checking the resulting sections:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/1f465fba-8e0c-4ddf-be88-cf9313d3907d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Check the new page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/ef161196-263d-4e4e-9345-b69e423633c5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Check for a landscape section:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/b1dcaa09-74bf-4b6d-9f0d-389d64df1542.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Then, go back to portrait orientation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/7cc9f9f9-18ac-4b18-a61d-decef04d16df.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After creating the document in Step 2 in the *How to do it…* section, we add
    a paragraph for the first section. Notice that the document starts with a section.
    The paragraph introduces a line break in the middle of the paragraph.
  prefs: []
  type: TYPE_NORMAL
- en: There is a small difference between a line break in a paragraph and a new paragraph,
    though for most uses it is quite similar. Try to experiment with them.
  prefs: []
  type: TYPE_NORMAL
- en: A page break is introduced in Step 3, without changing the section.
  prefs: []
  type: TYPE_NORMAL
- en: Step 4 creates a new section on a new page. Step 5 also changes the orientation
    of the page to landscape. In Step 6, a new section is introduced and the orientation
    reverts to portrait.
  prefs: []
  type: TYPE_NORMAL
- en: Note that when changing the orientation, we also need to swap the width and
    height. Each new section inherits the properties from the previous one, so this
    swapping needs to happen in Step 6 as well.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, the document is saved in Step 6.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A section mandates page composition, including the orientation and size of
    the page. The size of the page can be changed using the length options, such as
    `Inches` or `Cm`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'The page margins can also be defined in the same way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'Sections can also be forced to start not only on the next page, but on the
    next odd page, which will look better when printing on two sides:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: The whole `python-docx` documentation is available here: [https://python-docx.readthedocs.io/en/latest/.](https://python-docx.readthedocs.io/en/latest/)
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Writing a basic Word document* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Styling a Word document* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding pictures to Word documents
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Word documents are capable of adding images to show graphs or any other kind
    of extra information. Being able to add an image is a great way of creating rich
    reports.
  prefs: []
  type: TYPE_NORMAL
- en: We'll see in this recipe how to include an existing file in a Word document.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We''ll use the `python-docx` module to process Word documents:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'We need to prepare an image to include in the document. We''ll use the file in
    GitHub at [https://github.com/PacktPublishing/Python-Automation-Cookbook/blob/master/Chapter04/images/photo-dublin-a1.jpg](https://github.com/PacktPublishing/Python-Automation-Cookbook/blob/master/Chapter04/images/photo-dublin-a1.jpg),
    which shows a view of Dublin. You can download it on the command line, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Import the `python-docx` module:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new document:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a paragraph with some text:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the image:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'Scale the image properly to fit on the page (*14 x 10*):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'The image has been added to a new paragraph. Align it to the center and add
    descriptive text:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'Add a new paragraph with extra text, and save the document:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'Check the result:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/b2f48705-8e71-4bf7-b683-1c79f1420510.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first few steps (Step 1 to Step 3 in the *How to do it…* section) create
    the document and add some text.
  prefs: []
  type: TYPE_NORMAL
- en: Step 4 adds the image from the file, and Step 5 resizes it into a manageable
    size. By default, the image is too big.
  prefs: []
  type: TYPE_NORMAL
- en: Keep in mind the proportion of the image when resizing. Note that you can also
    use other measures such as `Inch`, defined in `shared` as well.
  prefs: []
  type: TYPE_NORMAL
- en: Inserting the image creates a new paragraph as well, so the paragraph can be
    styled to align the image or to add more text, such as a reference or description.
    The paragraph is obtained in Step 6 through the `document.paragraph` property.
    The last paragraph is obtained and styled properly, aligning it to the center.
    A new line and a `run` with descriptive text are added.
  prefs: []
  type: TYPE_NORMAL
- en: Step 7 adds extra text after the image and saves the document.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The size of the image can be changed, but as we saw before, the proportion of
    the image needs to be calculated if that changes. The resizing may end up not
    being perfect if done by approximation, as in Step 5 from the *How to do it…*
    section.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that the image does not have a perfect ratio of 10:14\. It should instead
    be 10:13.33\. For an image, that may be good enough, but for data that is more
    sensitive to proportion changes, such as a chart, it may require extra care.
  prefs: []
  type: TYPE_NORMAL
- en: 'To obtain the proper relation, divide the height by the width and then scale
    properly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'If you need to transform the values to a particular size, you can use the `cm`,
    `inches`, `mm`, or `pt` attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: The whole `python-docx` documentation is available here: [https://python-docx.readthedocs.io/en/latest/.](https://python-docx.readthedocs.io/en/latest/)
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Writing a basic Word document* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Styling a Word document* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Generating structure in Word documents* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing a simple PDF document
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: PDF files are a common way of sharing reports. The main characteristic of PDF
    documents is that they define exactly how the document is going to look, and they
    are read-only after being produced, which makes them very straightforward to share.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we'll see how to write a simple PDF report using Python.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We''ll use the `fpdf` module to create PDF documents:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Import the `fpdf` module:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a document:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: 'Define the font and color for a title, and add the first page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'Write the title of the document:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: 'Write a long paragraph:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: 'Write another long paragraph:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: 'Save the document:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: 'Check the `report.pdf` document:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/9eb543d1-256a-4293-ae39-8b7cbacaa201.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `fpdf` module creates a PDF document and allows us to write in it.
  prefs: []
  type: TYPE_NORMAL
- en: Due to the peculiarities of a PDF, the best way to think about it is to imagine
    a cursor writing in the document and moving to the next position, similar to a
    typewriter.
  prefs: []
  type: TYPE_NORMAL
- en: The first operations are to specify the font and size to use, and then add the
    first page. This is done in Step 3\. The first font is in bold (second argument, `'B'`)
    and in a bigger font than the rest of the document to serve as a title. The color
    is also set up with `.set_text_color`, in RGB components.
  prefs: []
  type: TYPE_NORMAL
- en: The text can also be styled in italics with `I` and underlined with `U`. You
    can combine them, so `BI` will produce text in bold and italic.
  prefs: []
  type: TYPE_NORMAL
- en: The `.cell` call creates a box of text with the specified text. The first couple
    of parameters are the width and height. Width `0` uses the whole space up to the
    right margin. Height `5` (mm) is adequate for a size `12` font. The call to `.ln`
    introduces a new line.
  prefs: []
  type: TYPE_NORMAL
- en: To write a multiline paragraph, we use the `.multi_cell` method. Its parameters
    are the same as `.cell`. Two paragraphs are written in Steps 5 and 6\. Notice
    the change in font before, to distinguish the title from the body of the report.
    The `.set_text_color` is called with a single argument to set up the color in
    grayscale. In this case, it is in black.
  prefs: []
  type: TYPE_NORMAL
- en: Using `.cell` for long text will make it go over the margin and off the page.
    Use it only for text that will fit in a single line. You can find the size of
    a string with `.get_string_width`.
  prefs: []
  type: TYPE_NORMAL
- en: The document is saved to disk in Step 7.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Pages are added automatically is a `multi_cell` operation occupies all space
    available in a page. Calling `.add_page` will move to a new page.
  prefs: []
  type: TYPE_NORMAL
- en: You can use any of the default fonts (`Courier`, `Helvetica`, and  `Times`),
    or add an extra font using `.add_font`. Check the documentation for more details: [http://pyfpdf.readthedocs.io/en/latest/reference/add_font/index.html.](http://pyfpdf.readthedocs.io/en/latest/reference/add_font/index.html)
  prefs: []
  type: TYPE_NORMAL
- en: The fonts `Symbol` and `ZapfDingbats` are also available, but are to be used
    with symbols. This could be useful if you need some extra symbols, but test before
    using them. The rest of the default fonts should include your necessities for
    serif, sans serif, and fixed-width cases. In PDFs, fonts used will be embedded
    in the document, so they'll be displayed properly.
  prefs: []
  type: TYPE_NORMAL
- en: 'Keep the height consistent through out the document, at least between text
    of the same size. Define a constant you''re comfortable with, and use it through
    out the text:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: 'By default, the text will be justified, but that can be changed. Use the align
    argument with `J` (justified), `C` (center), `R` (right), or `L` (left). For example,
    this produces text aligned to the left:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: The full FPDF documentation can be found here: [http://pyfpdf.readthedocs.io/en/latest/index.html.](http://pyfpdf.readthedocs.io/en/latest/index.html)
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*Structuring a PDF*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Aggregating PDF reports*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Watermarking and encrypting a PDF*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Structuring a PDF
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Some elements can be automatically generated when creating a PDF to add a better
    look and structure to your elements. In this recipe, we'll see how to add a header
    and footer, and how to create links to other elements.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We''ll use the `fpdf` module to create PDF documents:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `structuring_pdf.py` script is available in GitHub here: [https://github.com/PacktPublishing/Python-Automation-Cookbook/blob/master/Chapter05/structuring_pdf.py](https://github.com/PacktPublishing/Python-Automation-Cookbook/blob/master/Chapter05/structuring_pdf.py).
    The most relevant bits are displayed here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the script, and it will generate the `report.pdf` file, which contains
    some chapters and a table of contents. Note that it generates some randomness,
    so the specific numbers will vary each time you run it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: 'Check the result. Here is a sample:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/357ba66a-37c8-4d2a-b42b-6d0776f922b4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Check the table of contents at the end:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/90d02b08-e982-4280-ae69-f447e5c78a80.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's take a look at each of the elements of the script.
  prefs: []
  type: TYPE_NORMAL
- en: '`StructuredPDF` defines a class that inherits from `FPDF`. This is useful to
    overwrite the `footer` method, which creates a footer each time a page is created.
    It also helps simplify the code in `main`.'
  prefs: []
  type: TYPE_NORMAL
- en: The `main` function creates the document. It starts the document, and adds each
    of the chapters, collecting their link information. Finally, it calls the `toc`
    method to generate a table of contents using the link information.
  prefs: []
  type: TYPE_NORMAL
- en: The text to be stored is generated by multiplying the LOREM_IPSUM text, which
    is a placeholder.
  prefs: []
  type: TYPE_NORMAL
- en: The `chapter` method first prints a title section, and then adds each of the
    paragraphs defined. It collects the page number on which the chapter starts and
    the link returned by the `title_text` method to return them.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `title_text` method writes the text in bigger and bolder text. Then, it
    adds a line to separate the title from the body of the chapter. It generates and
    sets a `link` object pointing to the current page in the following lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: This link will be used in the table of contents to add a clickable element that
    points to this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: The `footer` method automatically adds a footer to each page. It sets a smaller
    font, and it adds text with the current page (obtained through `page_no`) and
    uses `{nb}` , which will be replaced with the total number of pages.
  prefs: []
  type: TYPE_NORMAL
- en: The call to `alias_nb_pages` in `main` ensures `{nb}` is replaced when the document
    is generated.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, the table of contents is generated in the `toc` method. It writes the
    title and adds all the referenced links that have been collected as the link,
    page, and chapter name, which is all the info required.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Notice the use of `randint` to add a bit of randomness to the document. This
    call, available in Python's standard library, returns a number between the defined
    maximum and minimum. Both are included.
  prefs: []
  type: TYPE_NORMAL
- en: The `get_full_line` method generates a properly sized line for the table of
    contents. It takes a start (the name of the chapter) and end (the page number),
    and adds the number of fill characters (dots) until the line has the proper width
    (120 mm).
  prefs: []
  type: TYPE_NORMAL
- en: To calculate the size of the text, the script calls `get_string_width`, which
    takes into account the font and the size.
  prefs: []
  type: TYPE_NORMAL
- en: Link objects can be used to point to a specific page, instead of the current
    one, and also not to the start of the page; use `set_link(link, y=place, page=num_page)`.
    Check the documentation at [http://pyfpdf.readthedocs.io/en/latest/reference/set_link/index.html.](http://pyfpdf.readthedocs.io/en/latest/reference/set_link/index.html)
  prefs: []
  type: TYPE_NORMAL
- en: Adjusting some of the elements can take a certain degree of trial and error,
    for example, to position the line. A sightly longer or shorter line can be a matter
    of taste. Don't be afraid to experiment and check until it produces the desired
    effect.
  prefs: []
  type: TYPE_NORMAL
- en: The full FPDF documentation can be found here: [http://pyfpdf.readthedocs.io/en/latest/index.html.](http://pyfpdf.readthedocs.io/en/latest/index.html)
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Writing a simple PDF document* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Aggregating PDF reports* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Watermarking and encrypting a PDF* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Aggregating PDF reports
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we'll see how to mix two PDFs into the same one. This will allow
    us to combine reports into a bigger one.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We''ll use the `PyPDF2` module. `Pillow` and `pdf2image` are also dependencies
    used by the scripts:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: 'For `pdf2image` to properly work, it needs to install `pdftoppm`, so check
    here for instructions on how to install it for different platforms: [https://github.com/Belval/pdf2image#first-you-need-pdftoppm.](https://github.com/Belval/pdf2image#first-you-need-pdftoppm)'
  prefs: []
  type: TYPE_NORMAL
- en: 'We need two PDFs to combine them. For this recipe, we''ll use two PDFs: a `report.pdf`
    file generated by the  `structuring_pdf.py` script, available in GitHub at [https://github.com/PacktPublishing/Python-Automation-Cookbook/blob/master/Chapter05/structuring_pdf.py](https://github.com/PacktPublishing/Python-Automation-Cookbook/blob/master/Chapter05/structuring_pdf.py),
    and another (`report2.pdf`) after watermarking it through the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: This uses the watermarking script `watermarking_pdf.py`, available in GitHub
    at [https://github.com/PacktPublishing/Python-Automation-Cookbook/blob/master/Chapter05/watermarking_pdf.py](https://github.com/PacktPublishing/Python-Automation-Cookbook/blob/master/Chapter05/watermarking_pdf.py).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Import `PyPDF2` and create the output PDF:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: 'Read the first file and create a reader:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: 'Append all pages to the output PDF:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: 'Open the second file, create a reader, and append the pages to the output PDF:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: 'Create the output file and save it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: 'Close the open files:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: Check the output file and confirm that it contains both PDFs pages.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`PyPDF2` allows us to create a reader for each input file, and add all its
    pages to a newly created PDF writer. Note the files are opened in binary mode
    (`rb`).'
  prefs: []
  type: TYPE_NORMAL
- en: The input files need to remain open until the result is saved. This is due to
    the way the copy of the pages works. If the file is open, the resulting file can
    be stored as an empty file.
  prefs: []
  type: TYPE_NORMAL
- en: The PDF writer is finally saved into a new file. Notice that the file needs
    to be open to write in binary mode (`wb`).
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`.appendPagesFromReader` is very convenient for adding all pages, but it''s
    also possible to add a number of pages one by one with `.addPage`. For example,
    to add the third page, the code would look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: 'The full documentation for `PyPDF2` is here: [https://pythonhosted.org/PyPDF2/.](https://pythonhosted.org/PyPDF2/)'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Writing a simple PDF document* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Structuring a PDF* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Watermarking and encrypting a PDF* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Watermarking and encrypting a PDF
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: PDF files have some interesting security measures to limit the distribution
    of a document. We can encrypt the content, making it necessary to know a password
    in order to be able to read it. We'll see as well how to add a watermark to label
    the document clearly as not for public distribution and, if leaked, to know its
    origin.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We''ll use the `pdf2image` module to transform PDF documents to PIL images. `Pillow`
    is a prerequisite. We''ll also use `PyPDF2`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: 'For `pdf2image` to properly work, it needs to install `pdftoppm`, so check
    here for instructions on how to install it for different platforms: [https://github.com/Belval/pdf2image#first-you-need-pdftoppm.](https://github.com/Belval/pdf2image#first-you-need-pdftoppm)'
  prefs: []
  type: TYPE_NORMAL
- en: We also need a PDF file to watermark and encrypt. We'll use a `report.pdf` file
    generated by the `structuring_pdf.py` script, available in GitHub at [https://github.com/PacktPublishing/Python-Automation-Cookbook/blob/master/chapter5/structuring_pdf.py](https://github.com/PacktPublishing/Python-Automation-Cookbook/blob/master/chapter5/structuring_pdf.py).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The script, `watermarking_pdf.py`, is available in GitHub here: [https://github.com/PacktPublishing/Python-Automation-Cookbook/blob/master/Chapter05/watermarking_pdf.py](https://github.com/PacktPublishing/Python-Automation-Cookbook/blob/master/Chapter05/watermarking_pdf.py).
    The most relevant bits are displayed here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: 'Watermark the PDF file with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: 'Check that the document added a watermark with `automate_user` and a timestamp
    to all pages of `out.pdf`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/62797425-1b6e-470f-b087-ec21197a66b1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Watermark and encrypt with the following command. Note that encrypting may
    take a little while:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: Open the resulting `out.pdf`, and check that it requires you to input the `secretpassword`
    password. The timestamp will also be new.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `watermarking_pdf.py` script first obtains the parameters from the command
    line using `argparse`, and then passes it to a `main` function that calls the
    other three functions, `create_watermark`, `apply_watermark` and, if a password
    is used, `encrypt`.
  prefs: []
  type: TYPE_NORMAL
- en: '`create_watermark` generates an image with the watermark. It uses the Pillow
    `Image` class to create a grey image (mode `L`) and draw the text. Then, this
    image gets applied as an alpha channel on a new image, making the image semi-transparent,
    so it will show the text to watermark.'
  prefs: []
  type: TYPE_NORMAL
- en: The alpha channel makes fully transparent anything in white (color 0) and fully
    opaque anything in black (color 255). In this case, the background is white and
    the color of the text is 55, making it semi-transparent.
  prefs: []
  type: TYPE_NORMAL
- en: The image is then rotated 45 degrees and cropped to reduce the transparent background
    that may have appeared. This centers the image and allows for better positioning.
  prefs: []
  type: TYPE_NORMAL
- en: In the next step, `apply_watermark` transforms the PDF into a sequence of PIL
    `Images` using the `pdf2image` module. It calculates the position to apply the
    watermark, and then pastes the watermark.
  prefs: []
  type: TYPE_NORMAL
- en: The image needs to be located by its left-top corner. This is located in the
    half of the document, minus half of the watermark, in both height and width. Note
    that the script assumes that all the pages of the document are equal.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, the result is saved to a PDF; notice the `save_all` parameter, which
    allows us to save a multipage PDF.
  prefs: []
  type: TYPE_NORMAL
- en: If a password is passed, the `encrypt` function is called. It opens the output
    PDF, using `PdfFileReader`, and creates a new intermediate PDF with `PdfFileWriter`.
    All the pages of the output PDF are added to the new PDF, the PDF is encrypted,
    and then the intermediate PDF is renamed as the output PDF using `os.rename`.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As part of the watermarking, notice that the pages are transformed into images
    from text. This adds extra protection, as the text won't be extractable directly,
    as it is stored as an image. When protecting a file, this is a good idea, as it
    will stop copying/pasting directly.
  prefs: []
  type: TYPE_NORMAL
- en: This is not a huge security measure, though, as the text may be extractable
    through OCR tools. But, it protects against casual extraction of the text.
  prefs: []
  type: TYPE_NORMAL
- en: 'The default font from PIL can be a little rough. Another font, if the `TrueType`
    or `OpenType` file is available, can be added and used by calling the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: Note that this may require installing the `FreeType` libraries, normally available
    as part of the `libfreetype` package. Further documentation is available at [https://www.freetype.org/](https://www.freetype.org/).
    Depending on the font and size, you may need to adjust the sizes.
  prefs: []
  type: TYPE_NORMAL
- en: The full `pdf2image` documentation can be found at [https://github.com/Belval/pdf2image](https://github.com/Belval/pdf2image),
    the full documentation for `PyPDF2` at [https://pythonhosted.org/PyPDF2/](https://pythonhosted.org/PyPDF2/),
    and the full documentation for `Pillow` can be found at [https://pillow.readthedocs.io/en/5.2.x/.](https://pillow.readthedocs.io/en/5.2.x/)
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Writing a simple PDF document* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Structuring a PDF* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Aggregating PDF reports* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
