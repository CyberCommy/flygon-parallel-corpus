- en: Controlling the Robot Car Using Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [Chapter 13](2289f7f6-874d-4a13-8e08-02fde93e6b18.xhtml), *Introducing the
    Raspberry Pi Robot Car*, we built our T.A.R.A.S robot car. At the end of the chapter,
    we discussed how we could control T.A.R.A.S through code. In this chapter, we
    will start writing code to do just that.
  prefs: []
  type: TYPE_NORMAL
- en: We will start out by writing simple Python code, and then utilize the GPIO Zero
    library to make the car wheels move forward, move the servo motors holding the
    camera, and light up the LEDs at the back of the robot car.
  prefs: []
  type: TYPE_NORMAL
- en: We will then organize our code using classes, before enhancing it further, as
    we send T.A.R.A.S off on a secret security mission.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Taking a look at the Python code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Modifying the robot car Python code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enhancing the code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Knowledge required to complete this chapter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you have jumped to this chapter without going through the projects in the
    previous chapters, let me outline the skills you need to complete the following
    projects. We will, of course, have to know how to get around the Raspbian OS in
    order to find our **Integrated Development Environment** (**IDE**).
  prefs: []
  type: TYPE_NORMAL
- en: After you have finished programming T.A.R.A.S, you may be inclined to take your
    new skills and compete against other people building Raspberry Pi robots. Pi Wars
    ([https://piwars.org/](https://piwars.org/)) is such a place to do just that.
    Pi Wars is an international robotics competition that takes place in Cambridge
    in the UK. Up to 76 teams compete in challenge-based robotics competitions over
    the course of a weekend. Even though it is called Pi Wars, you can rest assured
    that you will not come back with a box of broken parts, as each of the competitions
    are non-destructive challenges. Check out [https://piwars.org/](https://piwars.org/),
    or search for Pi Wars videos on YouTube for more information.
  prefs: []
  type: TYPE_NORMAL
- en: As well, a working knowledge of Python is needed, as we will be doing all our
    coding in this chapter in Python. Since I like to use an object-oriented approach
    as much as I can, some knowledge of **Object-Oriented Programming** (**OOP**)
    will help you to benefit more from this chapter as well.
  prefs: []
  type: TYPE_NORMAL
- en: Project overview
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will program T.A.R.A.S to dance around the table and take
    photographs. The projects in this chapter should take a few hours to complete.
  prefs: []
  type: TYPE_NORMAL
- en: Getting started
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To complete this project, the following will be required:'
  prefs: []
  type: TYPE_NORMAL
- en: A Raspberry Pi Model 3 (2015 model or newer)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A USB power supply
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A computer monitor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A USB keyboard
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A USB mouse
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A completed T.A.R.A.S robot car kit (see [Chapter 13](2289f7f6-874d-4a13-8e08-02fde93e6b18.xhtml),
    *Introducing the Raspberry Pi Robot Car*)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Taking a look at the Python code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In a way, our robot car project is like an overview of the code we've done in
    previous chapters. Through the use of Python and the amazing GPIO Zero library,
    we are able to read sensory data from the GPIO and control output devices by writing
    to GPIO pins. In the following steps, we will start with very simple Python code
    and the GPIO Zero library. If you have completed some of the earlier projects
    in the book, the code will seem quite familiar to you.
  prefs: []
  type: TYPE_NORMAL
- en: Controlling the drive wheels of the robot car
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s see if we can make T.A.R.A.S move a little. We will start by writing
    some basic code to move the robot car back and forth:'
  prefs: []
  type: TYPE_NORMAL
- en: Open up Thonny from Application Menu | Programming | Thonny Python IDE
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the New icon to create a new file
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Type the following code into the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Save the file as `motor-test.py`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the code
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You should see the robot car move forward for `0.5` seconds, before moving backward
    for the same amount of time. If there was nothing in the way, the robot car should
    have returned to the same position it started from. The code is pretty self-explanatory;
    however, we will go over it now.
  prefs: []
  type: TYPE_NORMAL
- en: We start off by importing the libraries we need: `Robot` and `sleep`. After
    that, we instantiate a `Robot` object, called `robot`, and configure it to have
    the `5` and `6` pins for the left-hand side motors, and `22` and `27` for the
    right-hand side motors. After that, we move the robot forward at a speed of `0.2`.
    In order for the robot to go faster, we increase this value. After a short delay,
    we return the robot back to its original position with the `robot.backward(0.2)` command.
  prefs: []
  type: TYPE_NORMAL
- en: One thing to take note of is the way the motors spin, and keep spinning, until
    they are stopped with the `robot.stop()` command.
  prefs: []
  type: TYPE_NORMAL
- en: If you found that the motors did not move the way they should, it is because
    of the wiring. Try experimenting with the wiring and changing the pin numbers
    for the `Robot` object `(left=(5,6), right=(22,27)`. It may take a few tries to
    get it right.
  prefs: []
  type: TYPE_NORMAL
- en: Moving the servos on the robot car
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will now test the servo motors. To do this, we will pan the robot camera
    mount (the robot''s head) from right to left:'
  prefs: []
  type: TYPE_NORMAL
- en: Open up Thonny from Application Menu | Programming | Thonny Python IDE
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the New icon to create a new file
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Type the following code into the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Save the file as `servo-test.py`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the code
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You should see the robot head move all the way to the right, wait for `5` seconds,
    and then move all the way to the left.
  prefs: []
  type: TYPE_NORMAL
- en: In the code, we start by importing the `Adafruit_PCA9685` library. After importing
    the `sleep` function, we then create a `PCA9685` object that we call `pwm`. This
    is, of course, an object built with code from Adafruit to support the HAT. We
    then set the minimum and maximum values that the servo can move, with `servo_min`
    and `servo_max` respectively.
  prefs: []
  type: TYPE_NORMAL
- en: If you are not getting the results you expect, experiment with the `servo_min` and
    `servo_max` values. We touch a bit on servos in [Chapter 5](a180e8ce-8d3b-4158-b260-981ee3697af4.xhtml),
    *Controlling a Servo with Python*.
  prefs: []
  type: TYPE_NORMAL
- en: Taking a picture
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You may remember using the Raspberry Pi camera from previous chapters; in particular, [Chapter
    9](1a50006e-75d3-4dc1-96db-82114b437795.xhtml), *Building a Home Security Dashboard*,
    where we used it to take a picture for our security application. Since T.A.R.A.S
    will be our trusty security agent, it makes sense for it to have the ability to
    take pictures. Let''s write some code to test out that the camera is working on
    our robot car:'
  prefs: []
  type: TYPE_NORMAL
- en: Open up Thonny from Application Menu | Programming | Thonny Python IDE
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the New icon to create a new file
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Save the file as `camera-test.py`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the code
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If everything is set up correctly, you should see an image file in your `/home/pi` directory,
    with the name `image`, followed by today's date.
  prefs: []
  type: TYPE_NORMAL
- en: Making a beep noise
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Our security agent is limited to making a noise in order to alert us and scare
    away potential intruders. In this section, we will test the active buzzer installed
    on T.A.R.A.S.
  prefs: []
  type: TYPE_NORMAL
- en: The old British police whistle was one of the earliest and trusted pieces of
    equipment that police officers of the past had to defend themselves. With its
    unique sound, the police whistle allowed officers to communicate with each other.
    Despite the fact that police whistles are no longer in use, its legacy has left
    its impact on society, such that the term 'Whistle Blower' is used to this day
    to refer to someone exposing hidden injustices or corruption.
  prefs: []
  type: TYPE_NORMAL
- en: Open up Thonny from Application Menu | Programming | Thonny Python IDE
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the New icon to create a new file
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Type the following code into the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Save the file as `buzzer-test.py`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the code
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You should hear the buzzer sound for `5` seconds, before shutting off.
  prefs: []
  type: TYPE_NORMAL
- en: Making the LEDs blink
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'On the back of T.A.R.A.S, we have installed two LEDs (preferably, one red one
    and one green one). We have used simple GPIO Zero library commands to blink LEDs
    before, so that shouldn''t be a challenge for us. Let''s take this a step further,
    and create code that we can use to encapsulate LED blinking patterns:'
  prefs: []
  type: TYPE_NORMAL
- en: Open up Thonny from Application Menu | Programming | Thonny Python IDE
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the New icon to create a new file
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Type the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Save the file as `TailLights.py`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the code
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You should see a 20-second long, blinking display from the LEDs. Of note in
    our code, however, is the use of the `LEDBoard` class from the GPIO Zero library,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'In this code, we instantiate an object, called `led_lights`, from the `LEDBoard`
    class, and configure it with the values of `red` and `green`, pointing to the `21`
    and `20` GPIO pins respectively. By using `LEDBoard`, we are able to control the
    LEDs separately or as one unit. The `blink_together` method controls the LEDs
    as one unit, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Our code is rather self explanatory; however, there are few other things we
    should point out. When we initialize the `TailLights` object, we give the LEDs
    a short blink to signify that the object has been initialized. This allows for
    troubleshooting later on; although, if we feel that the code is redundant, then
    we can remove it later instead:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Keeping the initialization code in place may come in handy though when we want
    to ensure that our LEDs have not been disconnected (after all, who hasn''t disconnected
    something when trying to connect something else?). To do this from the shell,
    type the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: You should see the LEDs blink for half a second.
  prefs: []
  type: TYPE_NORMAL
- en: Modifying the robot car Python code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have tested the motors, servos, camera, and LEDs, it's time to modify
    the code into classes to give it more unity. In this section, we will make T.A.R.A.S
    dance.
  prefs: []
  type: TYPE_NORMAL
- en: Move the wheels
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s start by encapsulating the code that moves the wheels on the robot car:'
  prefs: []
  type: TYPE_NORMAL
- en: Open up Thonny from Application Menu | Programming | Thonny Python IDE
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the New icon to create a new file
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Type the following code into the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Save the file as `RobotWheels.py`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the code
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You should see T.A.R.A.S do a little dance in front of you. Be sure to keep
    the wires that connect to T.A.R.A.S loose, so that T.A.R.A.S can do its thing.
    Who says that robots can't dance?
  prefs: []
  type: TYPE_NORMAL
- en: The code is pretty self explanatory. Of note, though, is the way we call the
    `move_forward`, `move_backwards`, `turn_left`, and `turn_right` functions from
    the `dance` method. We could actually parameterize the amount of time between
    the moves, but that would complicate things a little more than need be. The delay
    of `0.5` seconds (coupled with the hardcoded speed of `0.2`) seems to be perfect
    for a dancing robot that does not fall off the desk. Think of it as T.A.R.A.S
    being on a very crowded dance floor with little room to move.
  prefs: []
  type: TYPE_NORMAL
- en: But wait, there's more. T.A.R.A.S can also move its head, light up, and make
    some noise. Let's start to add these moves.
  prefs: []
  type: TYPE_NORMAL
- en: Move the head
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Since the camera on T.A.R.A.S is attached to the head, it makes sense to encapsulate
    the head movements (camera mount servos) with the camera functionality:'
  prefs: []
  type: TYPE_NORMAL
- en: Open up Thonny from Application Menu | Programming | Thonny Python IDE
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the New icon to create a new file
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Type the following code into the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Save the file as `RobotCamera.py`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the code
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You should see T.A.R.A.S move its head to the right, then down, then up, and
    then all the way to the left, before returning to the middle and stopping.
  prefs: []
  type: TYPE_NORMAL
- en: 'Again, we try and write our code so that it is simple to figure out. The `init`
    method, called when a `RobotCamera` object is instantiated, ensures that T.A.R.A.S
    has its head up before moving it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'By calling the `RobotCamera` class, we structure our code to view the servos
    and movement of the robot car''s head as part of operating the camera. Although
    we don''t use the camera in our example, we will be using it soon. The values
    that are set for the minimum and maximum servo position were determined though
    trial and error as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Play around with these values to make it suit your build of the T.A.R.A.S robot
    car.
  prefs: []
  type: TYPE_NORMAL
- en: The `dance` and `secret_dance` methods perform a series of moves with the head
    of the robot car to simulate dancing. They are basically the same method (with
    the exception of the `take_picture` call at the end) of the `secret_dance` method
    that takes a picture with the Raspberry Pi camera and stores it in the home directory
    with a date-based name.
  prefs: []
  type: TYPE_NORMAL
- en: Make sounds
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that T.A.R.A.S can move its body and head, it''s time to make some noise:'
  prefs: []
  type: TYPE_NORMAL
- en: Open up Thonny from Application Menu | Programming | Thonny Python IDE
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the New icon to create a new file
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type the following code into the file
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Save the file as `RobotBeep.py`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the code
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You should hear a short beep coming from the active buzzer on T.A.R.A.S. This
    seems like a lot of code just to do that, doesn't it? Ah, but wait until the next
    section, when we take full advantage of the `RobotBeep` class.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `init` function of `RobotBeep` allow us to turn on and off the initial
    beep that is heard once the class is instantiated. This is good for testing that
    our buzzer actually works, which we do by passing `True` to the class when we
    are creating the `robot_beep` object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The `notes` list and `play_song` methods perform the actual magic of the class.
    The list is actually a list of lists, as each value represents the time the buzzer
    plays or rests:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Cycling through the `notes` list, look at the `note` variable. We use the first
    element as the length of time for which to keep the buzzer on, and the second
    element as the amount of time to rest before turning the buzzer back on. In other
    words, the first element determines the length of the note, and the second the
    space between that note and the next note. The `notes` list and `play_song` method
    give T.A.R.A.S the ability to sing (albeit without a melody).
  prefs: []
  type: TYPE_NORMAL
- en: We will use the `play_song` method in our next section.
  prefs: []
  type: TYPE_NORMAL
- en: Enhancing the code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It's a cold, dark, and dreary December night. Not much is known about our adversaries,
    but we do know that they like to dance. T.A.R.A.S has been assigned to a local
    dance club located deep into enemy territory. All of the persons of interest are
    there on this night. Your mission, should you choose to accept it, is to write
    a program to have T.A.R.A.S take secret photos at the club. However, it must not
    look like T.A.R.A.S is taking photos. T.A.R.A.S has to dance! If our adversaries
    found out that T.A.R.A.S was taking photos, that would be bad. Really bad! Think
    C3PO in the Empire Strikes Back bad.
  prefs: []
  type: TYPE_NORMAL
- en: Stitching our code together
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'So, we have the ability to make T.A.R.A.S move its head and body, make sounds,
    light up, and take pictures. Let''s put all of this together so that we may complete
    the mission:'
  prefs: []
  type: TYPE_NORMAL
- en: Open up Thonny from Application Menu | Programming | Thonny Python IDE
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the New icon to create a new file
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Type the following into the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Save the file as `RobotDance.py`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the code
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You should see T.A.R.A.S perform a series of moves before secretly taking a
    picture. If you check the Raspberry Pi `home` folder after the dance is done,
    you should see six new photos.
  prefs: []
  type: TYPE_NORMAL
- en: 'Something of note in our code is the use of the list called `light_show`. We
    use this list in two ways. First, the values stored in the list are passed to
    the `alarm` method of the `TailLights` object that we instantiate in our `RobotDance`
    class. We do this with the `tail_light_repetition` variable in the `lets_dance_incognito`
    method, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: As you can see in the previous code, the variable of the `TailLights` class
    for the `alarm` method is named `tail_lights`. This will cause the LEDs to go
    through their sequence a number of times, based on the value of `tail_light_repetition`.
    For example, when the value of `2` is passed into the `alarm` method (the first
    value in the `light_show` list), the LED sequence will be performed twice.
  prefs: []
  type: TYPE_NORMAL
- en: We run the `lets_dance_incognito` method six times. This is based on the number
    of values in the `light_show` list. This is the second way in which we use `light_show`.
    In order to increase or decrease the number of times that T.A.R.A.S performs the
    dance, we can either add or subtract some numbers from the `light_show` list.
  prefs: []
  type: TYPE_NORMAL
- en: As we are calling the `secret_dance` method on the `RobotCamera` object named `robot_camera`,
    for each value in the `light_show` list (in this case, six), we should have six
    photos in our home directory with date-based names after the dance is done.
  prefs: []
  type: TYPE_NORMAL
- en: After T.A.R.A.S performs its dance, check the home directory for pictures T.A.R.A.S
    took during the dance. Mission accomplished!
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By the end of this chapter, you should be familiar with controlling a Raspberry
    Pi-powered robot with Python code. We started off by simply getting the various
    components on the robot car to work using simple code. After we were satisfied
    that the robot car does indeed move using our Python commands, we encapsulated
    the code in classes in order to make it easier to work with. This resulted in
    the `RobotDance` class, that contained calls to classes, which, in turn, encapsulated
    the control code for our robot. This allowed us to use the `RobotDance` class as
    a black box, abstracting away control code, and allowing us to focus on the task
    of designing dance steps for T.A.R.A.S.
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 15](cb36b5d6-f521-440c-8eb5-74eeddc87914.xhtml), *Connecting Sensory
    Inputs from the Robot Car to the Web*, we will pull sensory information from T.A.R.A.S
    (the distance sensor values) and publish it to the web, before unleashing T.A.R.A.S
    from the wires on the desktop and setting it free.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: True or false? The `LEDBoard` object allows us to control many LEDs at the same
    time.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: True or false? The notes list on the `RobotCamera` object is used to move the
    camera mount.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: True or false? The adversaries in our fictional story love to dance.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the difference between the `dance` and `secret_dance` methods?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the name of the `gpiozero` library for robots?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the term, inspired by the old police whistle, given to the act of exposing
    crime?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: True or false? Encapsulating control code is a meaningless and unnecessary step.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the purpose of the `TailLights` class?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which class and method would we use to turn the robot car to the right?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the purpose of the `RobotCamera` class?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the best reference books for learning GPIO Zero is the GPIO Zero PDF
    document itself. Google search for GPIO Zero PDF, and then download and read it.
  prefs: []
  type: TYPE_NORMAL
