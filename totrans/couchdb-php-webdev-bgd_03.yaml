- en: Chapter 3. Getting Started with CouchDB and Futon
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we set up our development environment, and I'm sure
    that you are chomping at the bit to find out what CouchDB can do for us. On that
    note, we're going to spend this entire chapter digging into CouchDB.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Specifically, we will:'
  prefs: []
  type: TYPE_NORMAL
- en: Dive into what CouchDB means and learn how it looks in the databases and documents
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learn how we'll interact with CouchDB through its RESTful JSON API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Use CouchDB''s built in administrative console: Futon'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learn how to add security to your CouchDB databases
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is CouchDB?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The first sentence of CouchDB''s definition (as defined by [http://couchdb.apache.org/)](http://couchdb.apache.org/))
    is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: CouchDB is a document database server, accessible through the RESTful JSON API.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Let's dissect this sentence to fully understand what it means. Let's start with
    the term **database server**.
  prefs: []
  type: TYPE_NORMAL
- en: Database server
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'CouchDB employs a document-oriented database management system that serves
    a flat collection of documents with no schema, grouping, or hierarchy. This is
    a concept that **NoSQL** has introduced, and is a big departure from relational
    databases (such as MySQL), where you would expect to see tables, relationships,
    and foreign keys. Every developer has experienced a project where they have had
    to force a relational database schema into a project that really didn''t require
    the rigidity of tables and complex relationships. This is where CouchDB does things
    differently; it stores all of the data in a self-contained object with no set
    schema. The following diagram will help to illustrate this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Database server](graphics/3586_03_005.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In the previous example, we might want to facilitate the ability for many users
    to belong to one-to-many groups. In order to handle this functionality in a relational
    database (such as MySQL), we would create a users table, a groups table, and a
    link table, called `users_groups`, that allow you to map many users to many groups.
    This practice is common to most web applications.
  prefs: []
  type: TYPE_NORMAL
- en: Now look at the CouchDB documents. There are no tables or link tables, just
    documents. These documents contain all of the data pertaining to a single object.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This diagram is very simplified. If we wanted to create more logic around the
    groups in CouchDB, we would have had to create **group** documents, with a simple
    relationship between the user documents and group documents. We'll touch on how
    to handle this type of relationship as we get deeper into the book.
  prefs: []
  type: TYPE_NORMAL
- en: We saw the term **document** quite a bit in this section. So let's dig further
    into what documents are and how CouchDB uses them.
  prefs: []
  type: TYPE_NORMAL
- en: Documents
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To illustrate how you might use documents, first imagine that you are physically
    filling out the paper form of a job application. This form has information about
    you, your address, and past addresses. It also has information about many of your
    past jobs, education, certifications, and much more. A document would save all
    of this data exactly in the way you would see it in the physical form - all in
    one place, without any unnecessary complexity.
  prefs: []
  type: TYPE_NORMAL
- en: In CouchDB, documents are stored as JSON objects that contain key and value
    pairs. Each document has reserved fields for metadata such as `id, revision`,
    and `deleted`. Besides the reserved fields, documents are 100 percent schema-less,
    meaning that each document can be formatted and treated independently with as
    many different variations as you might need.
  prefs: []
  type: TYPE_NORMAL
- en: Example of a CouchDB document
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let''s take a look at an example of what a CouchDB document might look like
    for a blog post:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Downloading the example code**'
  prefs: []
  type: TYPE_NORMAL
- en: You can download the example code files for all Packt books you have purchased
    from your account at [http://www.packtpub.com](http://www.packtpub.com). If you
    purchased this book elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  prefs: []
  type: TYPE_NORMAL
- en: JSON format
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The first thing you might notice is the strange markup of the document, which
    is **JavaScript Object Notation (JSON)**. JSON is a lightweight data-interchange
    format based on JavaScript syntax and is extremely portable. CouchDB uses JSON
    for all communication with it, so you'll get very familiar with it through the
    course of this book.
  prefs: []
  type: TYPE_NORMAL
- en: Key-value storage
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The next thing that you might notice is that there is a lot of information in
    this document. There are key-value pairs that are simple to understand, such as
    `"title", "author`", and `"body`", but you'll also notice that `"tags`" is an
    array of strings. CouchDB lets you embed as much information as you want directly
    into a document. This is a concept that might be new to relational database users
    who are used to normalized and structured databases.
  prefs: []
  type: TYPE_NORMAL
- en: Reserved fields
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We mentioned reserved fields earlier on. Let''s look at the two reserved fields
    that you saw in the previous example document: `_id` and `_rev`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`_id` is the unique identifier of the document. This means that `_id` is mandatory,
    and no two documents can have the same value. If you don''t define an `_id` on
    creation of a document, CouchDB will choose a unique one for you.'
  prefs: []
  type: TYPE_NORMAL
- en: '`_rev` is the revision version of the document and is the field that helps
    drive CouchDB''s version control system. Each time you save a document, the revision
    number is required so that CouchDB knows which version of the document is the
    newest. This is required because CouchDB does not use a locking mechanism, meaning
    that if two people are updating a document at the same time, then the first one
    to save his/her changes first, wins. One of the unique things about CouchDB''s
    revision system is that each time a document is saved, the original document is
    not overwritten, and a new document is created with the new data, while CouchDB
    stores a backup of the previous documents in its original form in an archive.
    Old revisions remain available until the database is compacted, or some cleanup
    action occurs.'
  prefs: []
  type: TYPE_NORMAL
- en: The last piece of the definition sentence is the RESTful JSON API. So, let's
    cover that next.
  prefs: []
  type: TYPE_NORMAL
- en: RESTful JSON API
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In order to understand REST, let's first define **HyperText Transfer Protocol
    (HTTP)** . HTTP is the underlying protocol of the Internet that defines how messages
    are formatted and transmitted and how services should respond when using a variety
    of methods. These methods consist of four main verbs, such as `GET, PUT, POST`,
    and `DELETE`. In order to fully understand how HTTP methods function, let's first
    define REST.
  prefs: []
  type: TYPE_NORMAL
- en: '**Representation State Transfer (REST)** is a stateless protocol that accesses
    addressable resources through HTTP methods. **Stateless** means that each request
    contains all of the information necessary to completely understand and use the
    data in the request, and **addressable resources** means that you can access the
    object via a URL.'
  prefs: []
  type: TYPE_NORMAL
- en: 'That might not mean a lot in itself, but, by putting all of these ideas together,
    it becomes a powerful concept. Let''s illustrate the power of REST by looking
    at two examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Resource | GET | PUT | POST | DELETE |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `http://localhost/collection` | **Read** a list of all of the items inside
    of `collection` | **Update** the collection with another `collection` | **Create**
    a new `collection` | **Delete** the `collection` |'
  prefs: []
  type: TYPE_TB
- en: '| `http://localhost/collection/abc123` | **Read** the details of the `abc123`
    item inside of `collection` | **Update** the details of `abc123` inside of `collection`
    | **Create** a new object `abc123` inside of a `collection` | **Delete** `abc123`
    from `collection` |'
  prefs: []
  type: TYPE_TB
- en: By looking at the table, you can see that each resource is in the form of a
    URL. The first resource is `collection`, and the second resource is `abc123`,
    which lives inside of `collection`. Each of these resources responds differently
    when you pass different methods to them. This is the beauty of REST and HTTP working
    together.
  prefs: []
  type: TYPE_NORMAL
- en: 'Notice the bold words I used in the table: **Read, Update, Create**, and **Delete**.
    These words are actually, in themselves, another concept, and it, of course, has
    its own term; **CRUD**. The unflattering term CRUD stands for Create, Read, Update,
    and Delete and is a concept that REST uses to define what happens to a defined
    resource when an HTTP method is combined with a resource in the form of a URL.
    So, if you were to boil all of this down, you would come to the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![RESTful JSON APIRESTexamples](graphics/3586_03_010.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'This diagram means:'
  prefs: []
  type: TYPE_NORMAL
- en: In order to **CREATE** a resource, you can use either the **POST** or **PUT**
    method
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In order **READ** a resource, you need to use the **GET** method
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In order to **UPDATE** a resource, you need to use the **PUT** method
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In order to **DELETE** a resource, you need to use the **DELETE** method
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As you can see, this concept of CRUD makes it really clear to find out what
    method you need to use when you want to perform a specific action.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we've looked at what REST means, let's move onto the term **API**,
    which means **Application Programming Interface**. While there are a lot of different
    use cases and concepts of APIs, an API is what we'll use to programmatically interact
    with CouchDB.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have defined all of the terms, the RESTful JSON API could be defined
    as follows: we have the ability to interact with CouchDB by issuing an HTTP request
    to the CouchDB API with a defined resource, HTTP method, and any additional data.
    Combining all of these things means that we are using REST. After CouchDB processes
    our REST request, it will return with a JSON-formatted response with the result
    of the request.'
  prefs: []
  type: TYPE_NORMAL
- en: All of this background knowledge will start to make sense as we play with CouchDB's
    RESTful JSON API, by going through each of the HTTP methods, one at a time.
  prefs: []
  type: TYPE_NORMAL
- en: We will use `curl` (which we learned to use in the previous chapter) to explore
    each of the HTTP methods by issuing raw HTTP requests.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — getting a list of all databases in CouchDB
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You''ve seen a `GET` request earlier in this book when we used the `curl` statement:
    `curl http://localhost:5984`.'
  prefs: []
  type: TYPE_NORMAL
- en: This time, let's issue a `GET` request to access CouchDB and get a list of all
    of the databases on the server.
  prefs: []
  type: TYPE_NORMAL
- en: Run the following command in **Terminal:**
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '**Terminal** will respond with the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We used **Terminal** to trigger a `GET` request to CouchDB''s RESTful JSON
    API. We used one of the options: `-X`, of `curl`, to define the HTTP method. In
    this instance, we used `GET. GET` is the default method, so technically you could
    omit `-X` if you wanted to. Once CouchDB processes the request, it sends back
    a list of the databases that are in the CouchDB server. Currently, there is only
    the `_users` database, which is a default database that CouchDB uses to authenticate
    users.'
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — creating new databases in CouchDB
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this exercise, we'll issue a `PUT` request, which will create a new database
    in CouchDB.
  prefs: []
  type: TYPE_NORMAL
- en: Create a new database by running the following command in **Terminal:**
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '**Terminal** will respond with the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Try creating another database with the same name by running the following command
    in **Terminal:**
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '**Terminal** will respond with the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Okay, that didn't work. So let's to try to create a database with a different
    name by running the following command in **Terminal:**
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '**Terminal** will respond with the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Let's check the details of the `test-db` database quickly and see more detailed
    information about it. To do that, run the following command in **Terminal:**
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '**Terminal** will respond with something similar to this (I re-formatted mine
    for readability):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We just used **Terminal** to trigger a `PUT` method to the created databases
    through CouchDB's RESTful JSON API, by passing `test-db` as the name of the database
    that we wanted to create at the end of the CouchDB root URL. When the database
    was successfully created, we received a message that everything went okay.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we created a `PUT` request to create another database with the same name
    `test-db`. Because there can't be more than one database with the same name, we
    received an error message.
  prefs: []
  type: TYPE_NORMAL
- en: We then used a `PUT` request to create a new database again, named `another-db`.
    When the database was successfully created, we received a message that everything
    went okay.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we issued a `GET` request to our `test-db` database to find out more
    information on the database. It's not important to know exactly what each of these
    statistics mean, but it's a useful way to get an overview of a database.
  prefs: []
  type: TYPE_NORMAL
- en: It's worth noting that the URL that was called in the final `GET` request was
    the same URL we called when we first created the database. The only difference
    is that we changed the HTTP method from `PUT` to `GET`. This is REST in action!
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — deleting a database In CouchDB
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this exercise, we'll call a `DELETE` request to delete the `another-db` database.
  prefs: []
  type: TYPE_NORMAL
- en: Delete `another-db` by running the following command in **Terminal:**
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '**Terminal** will respond with the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We used **Terminal** to trigger a `DELETE` method to CouchDB's RESTful JSON
    API. We passed the name of the database that we wanted to delete, `another-db`,
    at the end of the root URL. When the database was successfully deleted, we received
    a message that everything went okay.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — creating a CouchDB document
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this exercise, we'll create a document by initiating a `POST` call. You'll
    notice that our `curl` statement will start to get a bit more complex.
  prefs: []
  type: TYPE_NORMAL
- en: Create a document in the `test-db` database by running the following command
    in **Terminal:**
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '**Terminal** will respond with something similar to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s retrieve the newly created document from CouchDB. Start by copying the
    ID you were returned at the last response of the **Terminal** to your clipboard;
    mine is `39b1fe3cdcc7e7006694df91fb002082`, but yours will be different. Then
    run this command in **Terminal**, pasting your ID at the end of the URL:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '**Terminal** will respond with something similar to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We used **Terminal** to trigger a `POST` call to CouchDB's RESTful JSON API.
    This time, our `curl` statement gained some more options that we haven't used
    before. The `-H` option enables us to set the header of the HTTP request for `POST`
    methods. We need to set the `content-type` to JSON so that CouchDB's RESTful API
    knows what format is coming in. We also used a new option, `-d` option, which
    stands for data. The data option allows us to pass data in the form of a string
    along with our `curl` statement.
  prefs: []
  type: TYPE_NORMAL
- en: After creating our document, we retrieved it to **Terminal** by submitting a
    `GET` request to `http://localhost:5984/test-db/41198fc6e20d867525a8faeb7a000015`.
    In response, we received a JSON object containing all of the document's data.
    At the end of this request, we did something a little different. We added `python
    mjson.tool`, which is a built-in component from Python that enables us to nicely
    format our JSON responses, so that we can make more sense of them. This will come
    in handy as we start looking at more complex documents.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'I didn''t mention that you needed Python installed earlier in the book because
    this is a *nice to have* feature. If you receive an error because you are missing
    Python, you can either install it by going here: [http://python.org/download/](http://python.org/download/).'
  prefs: []
  type: TYPE_NORMAL
- en: I know that this has been a bit tiresome, but `curl` will be the main method
    that our PHP code will use to talk to CouchDB, so it's important that we're familiar
    with how it works. Luckily, there is an easier way to access and manage your data
    through a tool named **Futon**.
  prefs: []
  type: TYPE_NORMAL
- en: Futon
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: CouchDB comes with a built-in web-based administration console called Futon.
    Futon allows you to manage databases, users, and documents in a simple interface.
    The best part of Futon is that it's already installed and ready to go, since it
    comes packed with CouchDB.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s check it out:'
  prefs: []
  type: TYPE_NORMAL
- en: Open your browser.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to `http://localhost:5984/_utils/`.![Futon](graphics/3586_03_015.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This is Futon's **Overview** page. On this page, you can see all of the databases
    in the CouchDB installation and the ability to create new ones. You should see
    the database `test-db` that we created in the previous steps, and you can also
    see the `_users` database that is in the CouchDB installation by default.
  prefs: []
  type: TYPE_NORMAL
- en: If you look to the right-side of the window, you'll see **Tools**. We will use
    this when we cover *Replicator* later in the book.
  prefs: []
  type: TYPE_NORMAL
- en: Let's dig further into our database `test-db` by clicking on the link for `test-db`
    in the database list on the **Overview** page.![Futon](graphics/3586_03_020.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The page you see is the database detail. In this page, you can see a list of
    all of the documents that are in our database along with some actions that you
    can perform on the selected database such as **New Document, Security, Compact
    & Cleanup..., Delete Database, Search,** and so on. It's worth noting that Futon
    is just a helper, and all of these functions are available through `curl` as well.
  prefs: []
  type: TYPE_NORMAL
- en: Let's dig deeper into Futon by clicking on on a document, and you'll be forwarded
    to the document detail.![Futon](graphics/3586_03_025.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This data should look familiar! All of our keys are listed on the left, and
    the values are listed on the right.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — updating a document in Futon
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using Futon, you can easily update the values of this document. Let's go through
    a quick example.
  prefs: []
  type: TYPE_NORMAL
- en: Make sure you have the document open in your browser.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note the value of `_rev` in your document.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Double-click the value of the **location** field: **Seattle, WA**, and change
    it to **New York, NY**.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Save Document** at the top of the page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check to make sure that the value of `_rev` in your document has changed, and
    that **New York, NY** is now the value of location.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You just used Futon to change the value of a field in our document and then
    saved changes to update the document. When the document refreshed, you should
    have noticed that the `_rev` field has changed, and your change to the field was
    updated.
  prefs: []
  type: TYPE_NORMAL
- en: You may have also noticed that **Previous Version** looks like it's clickable
    now. Click on it and see what happens. Futon displays the old version of the document
    with **Seattle, WA** in the location, as opposed to the new value of **New York,
    NY**.
  prefs: []
  type: TYPE_NORMAL
- en: You will now see CouchDB's revisions in full effect. If you want to, you can
    cycle through all of the versions of the document using the **Previous Version**
    and **Next Version** links.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'There are two important things we need to note about CouchDB''s revision system:'
  prefs: []
  type: TYPE_NORMAL
- en: You cannot update an old version of a document; if you try to save an old version
    of a document, CouchDB will return a document update conflict error. This is because
    the only real version of the document is the most current one.
  prefs: []
  type: TYPE_NORMAL
- en: Your revision history is only temporary. If your database kept a record of every
    single change, it would start to really get bloated. So, CouchDB has a feature
    called **Compaction** that will get rid of any of the old revisions.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — creating a document in Futon
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We've gone through the updating of existing documents. Let's create a document
    from scratch in Futon.
  prefs: []
  type: TYPE_NORMAL
- en: Go to the database overview by clicking on the database name, `test-db`, in
    the header.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **New Document**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A blank document is created and ready for us to put in new fields. Notice that
    the `_id` is already set for us (but we can change it if we want).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Add Field** to create a new field, and call it `location`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Double-click on the value right next to the label that says **null**, and enter
    in your current location.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Add Field** to create a new field, and call it `name`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Double-click on the value right next to the label that says `null`, and enter
    in your name.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Save Document** at the top of the page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The document has been saved. Notice that it now has a `_rev` value set.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You just used Futon to create a document from scratch. When the document was
    first created, CouchDB created a unique ID for you to set it as the value of the
    `_id` field. Next, you added the `name` field and inputted your name as its value.
    Finally, you saved it to create a new document. We've talked about how documents
    can have completely different fields, but this is the first time we've actually
    done it!
  prefs: []
  type: TYPE_NORMAL
- en: Security
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Up to this point, we've created, read, updated, and deleted documents and databases,
    and we've done all of this without any type of security. When you don't have any
    administrators on your CouchDB instance, it's called **Admin Party**, and that
    simply means that CouchDB will process any request from anybody for anything.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — taking CouchDB out of Admin Party
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Having CouchDB unsecure isn't bad when you are programming locally, but it can
    be catastrophic if you accidentally have an unsecure database on a publicly accessible
    server. Let's briefly add security now to make sure you know how to do it in the
    future.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open Futon to the **Overview**, and look at the bottom right corner. You''ll
    see text that says:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Click on the **Fix this** link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A new window will pop up, prompting you **Create Server Admin**.![Time for action
    — taking CouchDB out of Admin Party](graphics/3586_03_030.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter in a username and password that you want to use for your administrator
    account, and click on **Create**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You just used Futon to add a server admin to your CouchDB installation. The
    **Create Server Admin** pop up said that once a server admin was added, you would
    be able to create and destroy databases, and perform other administrative functions.
    All other users (including anonymous users) can still read and write to the databases.
    With that in mind, we'll want to add some security onto the database as well.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — anonymously accessing the _users database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's go through a quick exercise of calling a `curl` statement to the `_users`
    database to see why it's important to secure our data.
  prefs: []
  type: TYPE_NORMAL
- en: Open **Terminal**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the following command, replacing `your_username` with the username of the
    server admin that you just created.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '**Terminal** will respond with something similar to:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You used **Terminal** to create a `curl` request to read the document containing
    your server admin's data. The passwords in the database are encrypted, but it's
    possible that someone could still unencrypt the password or use the usernames
    of the users against them. With that in mind, let's secure the database so that
    only administrators can access this database.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — securing the _users database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's secure the `_users` database so that only server admins can read, write,
    and edit the other users within the system.
  prefs: []
  type: TYPE_NORMAL
- en: Open Futon to the **Overview**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the `_users` database.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Security** at the top of the screen.![Time for action — securing
    the _users database](graphics/3586_03_035.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change the values of **Roles** for both **Admins** and **Readers** to `["admins"]`,
    so it looks as follows:![Time for action — securing the _users database](graphics/3586_03_040.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You just changed the roles of **Admins** and **Readers** for the `_users` database
    to `["admins"]`, so that only admins could read or alter the design documents
    and readers' list. We made the format of the roles `["admins"]` because it accepts
    roles in the form of an array.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — checking to make sure the database is secure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Your `_users` database should be secure, so that only admins can read or alter
    the structure of the database. Let''s quickly test this:'
  prefs: []
  type: TYPE_NORMAL
- en: Open **Terminal**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Try to read the user document again by running the following command. Again,
    replace `your_username` with the username of the service admin that you just created:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '**Terminal** will respond with the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: With the CouchDB instance out of Admin Party mode, the authentication module
    stepped in to make sure that anonymous users couldn't read the database.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We'll add more security to the databases down the road, but this is one of the
    simplest ways to add security to a database.
  prefs: []
  type: TYPE_NORMAL
- en: If you were to play around with the command line again, you would be restricted
    by doing anything with the `_users` database, but you would also notice that the
    `test-db` database is operating just as it was before, perfect! That's exactly
    what we wanted. You might be asking how do I access the `_users` database through
    the command line, now that security is enabled? You have to show that you are
    an admin by passing your credentials to the RESTful JSON API.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — accessing a database with security enabled
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's quickly try to access a database that has security enabled by passing
    the username and password with our request.
  prefs: []
  type: TYPE_NORMAL
- en: Open **Terminal**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: View all of the documents saved in the `_users` database by running the following
    command. Replace `username` and `password` with your admin's username and password.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '**Terminal** will respond with the same data that you saw before you added
    the authentication.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You just issued a `GET` request to the `_users` database and used the username
    and password of the server admin that we created earlier to authenticate us. Once
    authenticated, we were able to access the data normally. If you want to perform
    any action on a secure database, you just need to prepend `username:password@`
    before the URL of the resource you would like to work with.
  prefs: []
  type: TYPE_NORMAL
- en: Pop quiz
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: What is the first sentence of CouchDB's definition according to[http://couchdb.apache.org/](http://couchdb.apache.org/)?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are the four verbs used by HTTP, and how does each match up to CRUD?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the URL to access Futon?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What does the term Admin Party mean to CouchDB, and how do you take CouchDB
    out of this mode?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How would you authenticate a user for a secure database through the command
    line?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We learned a lot about CouchDB in this chapter. Let's quickly review
  prefs: []
  type: TYPE_NORMAL
- en: We defined CouchDB by looking at databases, documents, and the RESTful JSON
    API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We compared CouchDB to a traditional relational database such as MySQL
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We interacted with CouchDB's RESTful JSON API, using `curl` statements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We created and altered documents by using Futon
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We learned how to add security to a database and tested its effectiveness
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Get ready! In the next chapter, we are going to start building the PHP framework
    that will be the platform on which we will develop in the rest of the book.
  prefs: []
  type: TYPE_NORMAL
