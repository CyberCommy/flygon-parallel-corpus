- en: Evolution to Spring Framework 5.0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first version of Spring Framework 1.0 was released in March 2004\. For more
    than a decade and a half, Spring Framework remained the framework of choice to
    build Java applications.
  prefs: []
  type: TYPE_NORMAL
- en: In the relatively young and dynamic world of Java frameworks, a decade is a
    long time.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we start with understanding the core features of Spring Framework.
    We will look at why the Spring Framework became popular and how it adapted to
    remain the framework of choice. After taking a quick look at the important modules
    in the Spring Framework, we will jump into the world of Spring Projects. We will
    end the chapter by looking at the new features in Spring Framework 5.0.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter will answer the following questions:'
  prefs: []
  type: TYPE_NORMAL
- en: Why is Spring Framework popular?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How has Spring Framework adapted to the evolution of application architectures?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What are the important modules in Spring Framework?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Where does Spring Framework fit in the umbrella of Spring Projects?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What are the new features in Spring Framework 5.0?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring Framework
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Spring website ([https://projects.spring.io/spring-framework/](https://projects.spring.io/spring-framework/))
    defines Spring Framework as follows: *The Spring Framework provides a comprehensive
    programming and configuration model for modern Java-based enterprise applications*.'
  prefs: []
  type: TYPE_NORMAL
- en: Spring Framework is used to wire enterprise Java applications. The main aim
    of Spring Framework is to take care of all the technical plumbing that is needed
    in order to connect the different parts of an application. This allows programmers
    to focus on the crux of their jobs--writing business logic.
  prefs: []
  type: TYPE_NORMAL
- en: Problems with EJB
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Spring Framework was released in March 2004\. When the first version of Spring
    Framework was released, the popular way of developing an enterprise application
    was using **Enterprise Java Beans** (**EJB**) 2.1.
  prefs: []
  type: TYPE_NORMAL
- en: 'Developing and deploying EJBs was a cumbersome process. While EJBs made the
    distribution of components easier, developing, unit testing, and deploying them
    was not easy. The initial versions of EJBs (1.0, 2.0, 2.1) had a complex **Application
    Programmer Interface** (**API**), leading to a perception (and truth in most applications)
    that the complexity introduced far outweighed the benefits:'
  prefs: []
  type: TYPE_NORMAL
- en: Difficult to unit test. Actually, difficult to test outside the EJB Container.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Multiple interfaces need to be implemented with a number of unnecessary methods.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cumbersome and tedious exception handling.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Inconvenient deployment descriptors.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring Framework was introduced as a lightweight framework aimed at making developing
    Java EE applications simpler.
  prefs: []
  type: TYPE_NORMAL
- en: Why is Spring Framework popular?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first version of Spring Framework was released in March 2004\. In the subsequent
    decade and a half, the use and popularity of Spring Framework only grew.
  prefs: []
  type: TYPE_NORMAL
- en: 'The important reasons behind the popularity of Spring Framework are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Simplified unit testing--because of dependency injection
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reduction in plumbing code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Architectural flexibility
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Keeping up with changing times
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's discuss each of these in detail.
  prefs: []
  type: TYPE_NORMAL
- en: Simplified unit testing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Earlier versions of EJBs were very difficult to unit test. In fact, it was difficult
    to run EJBs outside the container (as of version 2.1). The only way to test them
    was to deploy them in a container.
  prefs: []
  type: TYPE_NORMAL
- en: Spring Framework brought in the concept of **Dependency Injection** (**DI**).
    We will discuss dependency injection in complete detail in Chapter 2, *Dependency
    Injection*.
  prefs: []
  type: TYPE_NORMAL
- en: The dependency injection enables unit testing by making it easy to replace the
    dependencies with their mocks. We do not need to deploy the entire application
    to unit test it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Simplifying unit testing has multiple benefits:'
  prefs: []
  type: TYPE_NORMAL
- en: Programmers are more productive
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defects are found earlier so they are less costly to fix
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Applications have automated unit tests, which can run in **Continuous Integration**
    builds, preventing future defects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reduction in plumbing code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before Spring Framework, typical J2EE (or Java EE, as it is called now) applications
    contained a lot of plumbing code. For example: getting a database connection,
    exception handling code, transaction management code, logging code, and a lot
    more.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at a simple example of executing a query using prepared
    statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, there are four lines of business logic and more than
    10 lines of plumbing code.
  prefs: []
  type: TYPE_NORMAL
- en: 'With Spring Framework, the same logic can be applied in a couple of lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: How does Spring Framework do this magic?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the preceding example, Spring JDBC (and Spring, in general) converts most
    checked exceptions into unchecked exceptions. Typically, when a query fails, there
    is not a lot we can do--other than to close the statement and fail the transaction.
    Instead of implementing exception handling in every method, we can have centralized
    exception handling and inject it in using Spring **Aspect-Oriented Programming**
    (**AOP**).
  prefs: []
  type: TYPE_NORMAL
- en: Spring JDBC removes the need to create all the plumbing code involved in getting
    a connection, creating a prepared statement, and so on. The `jdbcTemplate` class
    can be created in the Spring context and injected into the **Data Access Object**
    (**DAO**) class wherever it is needed.
  prefs: []
  type: TYPE_NORMAL
- en: Similar to the preceding example, Spring JMS, Spring AOP, and other Spring modules
    help in reducing a lot of plumbing code.
  prefs: []
  type: TYPE_NORMAL
- en: Spring Framework lets the programmer focus on the primary job of a programmer--
    writing business logic.
  prefs: []
  type: TYPE_NORMAL
- en: Avoiding all the plumbing code also has another great benefit--reduced duplication
    in code. Since all code for transaction management, exception handling, and so
    on (typically, all your cross-cutting concerns) is implemented at one place, it
    is easier to maintain.
  prefs: []
  type: TYPE_NORMAL
- en: Architectural flexibility
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Spring Framework is modular. It is built as a set of independent modules built
    on top of the core Spring modules. Most of the Spring modules are independent--you
    can use one of them without having to use others.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s look at a few examples:'
  prefs: []
  type: TYPE_NORMAL
- en: In the web layer, Spring offers a framework of its own--Spring MVC. However,
    Spring has great support for Struts, Vaadin, JSF, or any web framework of your
    choice.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring Beans can provide lightweight implementation for your business logic.
    However, Spring can be integrated with EJBs as well.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the data layer, Spring simplifies JDBC with its Spring JDBC module. However,
    Spring has great support for any of your preferred data layer frameworks--JPA,
    Hibernate (with or without JPA), or iBatis.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You have the option of implementing your cross-cutting concerns (logging, transaction
    management, security, and so on) with Spring AOP. Or, you can integrate with a
    fully fledged AOP implementation such as AspectJ.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring Framework does not want to be the jack-of-all-trades. While focusing
    on its core job of reducing coupling between different parts of the application
    and making them testable, Spring provides great integration with frameworks of
    your choice. This means you have flexibility in your architecture--if you do not
    want to use a specific framework, you can easily replace it with another.
  prefs: []
  type: TYPE_NORMAL
- en: Keep up with changing times
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The first version of Spring Framework focused on making applications testable.
    However, as time moved on, there were new challenges. Spring Framework managed
    to evolve and stay ahead of the curve with the flexibility and modules that are
    offered. A couple of examples are listed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Annotations were introduced in Java 5\. Spring Framework (version 2.5 – Nov
    2007) was ahead of Java EE in introducing an annotation-based controller model
    for Spring MVC. Developers using Java EE had to wait until Java EE 6 (Dec 2009
    – 2 years) before having comparable functionality.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring Framework introduced a number of abstractions ahead of Java EE to keep
    the application decoupled from specific implementation. Caching API provides a
    case in point. Spring provided a transparent caching support in Spring 3.1\. Java
    EE came up with *JSR-107* for JCache (in 2014)--support for which was provided
    in Spring 4.1.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Another important thing Spring brings in is the umbrella of Spring Projects.
    Spring Framework is just one of the many projects under Spring Projects. We will
    discuss the different Spring Projects in a separate section. The following examples
    illustrate how Spring managed to stay ahead of times with new Spring Projects:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Spring Batch** defines a new approach to building Java Batch applications.
    We had to wait until Java EE 7 (June 2013) to have comparable batch application
    specification in Java EE.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As architecture evolved toward Cloud and microservices, Spring came up with
    new Cloud-oriented Spring Projects. Spring Cloud helps in simplifying the development
    and deployment of microservices. Spring Cloud Data Flow provides orchestrations
    around microservice applications.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring modules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The modularity of Spring Framework is one of the most important reasons for
    its widespread used. Spring Framework is highly modular with more than 20 different
    modules--having clearly defined boundaries.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following figure shows different Spring modules--organized by the layer
    of application they are typically used in:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/36fbd771-549b-4734-8d96-e306af3b5a43.png)'
  prefs: []
  type: TYPE_IMG
- en: We will start with discussing the Spring Core Container before moving on to
    other modules grouped by the application layer they are typically used in.
  prefs: []
  type: TYPE_NORMAL
- en: Spring Core Container
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Spring Core Container provides the core features of Spring Framework--dependency
    injection, **IoC** (**Inversion of Control**) container, and the application context.
    We will learn more about DI and IoC Container in Chapter 2, *Dependency Injection*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Important core Spring modules are listed in the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Module/Artifact** | **Use** |'
  prefs: []
  type: TYPE_TB
- en: '| spring-core | Utilities used by other Spring modules. |'
  prefs: []
  type: TYPE_TB
- en: '| spring-beans | Support for Spring beans. In combination with spring-core
    provides the core feature of Spring Framework--dependency injection. Includes
    implementation of BeanFactory. |'
  prefs: []
  type: TYPE_TB
- en: '| spring-context | Implements ApplicationContext, which extends BeanFactory
    and provides support to load resources and internationalization, among others.
    |'
  prefs: []
  type: TYPE_TB
- en: '| spring-expression | Extends **EL** (**Expression Language** from JSP) and
    provides a language for bean property (including arrays and collections) access
    and manipulations. |'
  prefs: []
  type: TYPE_TB
- en: Cross-cutting concerns
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Cross-cutting concerns are applicable to all application layers--logging and
    security, among others. **AOP** is typically used to implement cross-cutting concerns.
  prefs: []
  type: TYPE_NORMAL
- en: Unit tests and integration tests fit this category since they are applicable
    to all layers.
  prefs: []
  type: TYPE_NORMAL
- en: 'Important Spring modules related to cross-cutting concerns are listed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Module/Artifact** | **Use** |'
  prefs: []
  type: TYPE_TB
- en: '| spring-aop | Provides basic support for Aspect-Oriented Programming--with
    method interceptors and pointcuts. |'
  prefs: []
  type: TYPE_TB
- en: '| spring-aspects | Provides integration with the most popular and fully featured
    AOP framework, AspectJ. |'
  prefs: []
  type: TYPE_TB
- en: '| spring-instrument | Provides basic instrumentation support. |'
  prefs: []
  type: TYPE_TB
- en: '| spring-test | Provides basic support for unit testing and integration testing.
    |'
  prefs: []
  type: TYPE_TB
- en: Web
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Spring provides its own MVC framework, Spring MVC, other than providing great
    integration with popular web frameworks such as Struts.
  prefs: []
  type: TYPE_NORMAL
- en: 'Important artifacts/modules are listed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**spring-web**: Provides basic web features, such as multi-part file upload.
    Provides support for integration with other web frameworks, such as Struts.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**spring-webmvc**: Provides a fully featured web MVC framework--Spring MVC,
    which includes features to implement REST services as well.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will cover Spring MVC and develop web applicaitions and rest services with
    it in Chapter 3, *Building Web Application with Spring MVC* and Chapter 5, *Building
    Microservices with Spring Boot.*
  prefs: []
  type: TYPE_NORMAL
- en: Business
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The business layer is focused on executing the business logic of the applications.
    With Spring, business logic is typically implemented in **Plain Old Java Object**
    (**POJO**).
  prefs: []
  type: TYPE_NORMAL
- en: '**Spring Transactions** (**spring-tx**) provides declarative transaction management
    for POJO and other classes.'
  prefs: []
  type: TYPE_NORMAL
- en: Data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The data layer in applications typically talks to the database and/or the external
    interfaces.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some of the important Spring modules related to the data layer are listed in
    the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Module/Artifact** | **Use** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| spring-jdbc | Provides abstraction around JDBC to avoid boilerplate code.
    |'
  prefs: []
  type: TYPE_TB
- en: '| spring-orm | Provides integration with ORM frameworks and specifications--
    JPA and Hibernate, among others. |'
  prefs: []
  type: TYPE_TB
- en: '| spring-oxm | Provides an object to XML mapping integration. Supports frameworks
    such as JAXB, Castor, and so on. |'
  prefs: []
  type: TYPE_TB
- en: '| spring-jms | Provides abstraction around JMS to avoid boilerplate code. |'
  prefs: []
  type: TYPE_TB
- en: Spring Projects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While Spring Framework provides the base for core features of enterprise applications
    (DI, web, data), other Spring Projects explore integration and solutions to other
    problems in the enterprise space--deployment, Cloud, Big Data, Batch and Security,
    among others.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some of the important Spring Projects are listed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Spring Boot
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring Cloud
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring Data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring Batch
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring Security
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring HATEOAS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring Boot
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Some of the challenges while developing microservices and web applications
    are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Making framework choices and deciding compatible framework versions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Providing mechanisms for externalizing configuration--properties that can change
    from one environment to another
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Health checks and monitoring--providing alerts if a specific part of the application
    is down
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deciding the deployment environment and configuring the application for it
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring Boot solves all these problems out of the box by taking an *opinionated
    view* of how applications have to be developed.
  prefs: []
  type: TYPE_NORMAL
- en: We will look at Spring Boot in depth in two chapters--Chapter 5, *Building Microservices
    with Spring Boot* and [Chapter 7](c46a5b67-c5be-49c0-af8e-b0c4713f890b.xhtml),
    *Advanced Spring Boot Features*.
  prefs: []
  type: TYPE_NORMAL
- en: Spring Cloud
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is not an exaggeration to say *The world is moving to the Cloud*.
  prefs: []
  type: TYPE_NORMAL
- en: Cloud Native microservices and applications are the order of the day. We will
    discuss this in detail in Chapter 4, *Evolution toward Microservices and Cloud-Native
    Applications*.
  prefs: []
  type: TYPE_NORMAL
- en: Spring is taking rapid strides toward making application development for the
    Cloud simpler with Spring Cloud.
  prefs: []
  type: TYPE_NORMAL
- en: 'Spring Cloud provides solutions for common patterns in distributed systems.
    Spring Cloud enables developers to quickly create applications that implement
    common patterns. Some of the common patterns implemented in Spring Cloud are listed
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Configuration management
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Service discovery
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Circuit breakers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Intelligent routing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will discuss Spring Cloud and its varied range features in more detail in
    [Chapter 9](9d263fde-d65c-4222-8da9-b360de7ccc12.xhtml), *Spring Cloud.*
  prefs: []
  type: TYPE_NORMAL
- en: Spring Data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are multiple sources of data in today's world--SQL (relational) and a
    variety of NOSQL databases. Spring Data tries to provide a consistent data-access
    approach to all these different kinds of databases.
  prefs: []
  type: TYPE_NORMAL
- en: 'Spring Data provides integration with a varied range of specifications and/or
    data stores:'
  prefs: []
  type: TYPE_NORMAL
- en: JPA
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MongoDB
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Redis
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Solr
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Gemfire
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Apache Cassandra
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Some of the important features are listed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Provides abstractions around repository and object mappings--by determining
    queries from method names
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Simple Spring integration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integration with Spring MVC controllers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Advanced automatic auditing features--created by, created date, last changed
    by, and last changed date
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will discuss Spring Data in more detail in [Chapter 8](b134d136-6980-440f-980c-227e8a46e532.xhtml),
    *Spring Data*.
  prefs: []
  type: TYPE_NORMAL
- en: Spring Batch
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Enterprise applications today process large volumes of data using batch programs.
    The needs of these applications are very similar. Spring Batch provides solutions
    for high- volume batch programs with high performance requirements.
  prefs: []
  type: TYPE_NORMAL
- en: 'Important features in Spring Batch are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The ability to start, stop, and restart jobs--including the ability to restart
    failed jobs from the point where they failed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The ability to process data in chunks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The ability to retry steps or to skip steps on failure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Web-based administration interface
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring Security
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Authentication** is the process of identifying the user. **Authorization**
    is the process of ensuring that a user has access to perform the identified action
    on the resource.'
  prefs: []
  type: TYPE_NORMAL
- en: Authentication and authorization are critical parts of Enterprise applications,
    both web applications and web services. Spring Security provides declarative authentication
    and authorization for Java based applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'Important features in Spring Security are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Simplified authentication and authorization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Great integration with Spring MVC and Servlet APIs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Support to prevent common security attacks--**cross-site forgery request** (**CSRF**)
    and Session Fixation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Modules available for integration with SAML and LDAP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will discuss how to secure web applications with Spring Security in Chapter
    3, *Building Web Application with Spring MVC*.
  prefs: []
  type: TYPE_NORMAL
- en: We will discuss how to secure REST Services with Basic and OAuth authentication
    mechanisms using Spring Security in [Chapter 6](09291379-92b0-4d7d-bff7-d77e089f33db.xhtml),
    *Extending Microservices*.
  prefs: []
  type: TYPE_NORMAL
- en: Spring HATEOAS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**HATEOAS** stands for **Hypermedia as The Engine of Application State**. Though
    it sounds complex, it is quite a simple concept. Its main aim is to decouple the
    server (the provider of the service) from the client (the consumer of the service).'
  prefs: []
  type: TYPE_NORMAL
- en: The service provider provides the service consumer with information about what
    other actions can be performed on the resource.
  prefs: []
  type: TYPE_NORMAL
- en: Spring HATEOAS provides a HATEOAS implementation--especially for the REST services
    implemented with Spring MVC.
  prefs: []
  type: TYPE_NORMAL
- en: 'Important features in Spring HATEOAS are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Simplified definition of links pointing to service methods, making the links
    less fragile
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Support for JAXB (XML-based) and JSON integration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Support for service consumer (client side)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will discuss how to use HATEOAS in [Chapter 6](09291379-92b0-4d7d-bff7-d77e089f33db.xhtml),
    *Extending Microservices*.
  prefs: []
  type: TYPE_NORMAL
- en: New features in Spring Framework 5.0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Spring Framework 5.0 is the first major upgrade in Spring Framework, almost
    four years after Spring Framework 4.0\. In this time frame, one of the major developments
    has been the evolution of the Spring Boot project. We will discuss the new features
    in Spring Boot 2.0 in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: 'One of the biggest features of Spring Framework 5.0 is **Reactive Programming**.
    Core reactive programming features and support for reactive endpoints are available
    out of the box with Spring Framework 5.0\. The list of important changes includes
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Baseline upgrades
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JDK 9 runtime compatibility
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Usage of JDK 8 features in the Spring Framework code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reactive programming support
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A functional web framework
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Java modularity with Jigsaw
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kotlin support
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dropped features
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Baseline upgrades
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Spring Framework 5.0 has JDK 8 and Java EE 7 baseline. Basically, it means that
    previous JDK and Java EE versions are not supported anymore.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some of the important baseline Java EE 7 specifications for Spring Framework
    5.0 are listed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Servlet 3.1
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JMS 2.0
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JPA 2.1
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JAX-RS 2.0
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bean Validation 1.1
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'There are many changes to the minimum supported versions of several Java frameworks.
    The following list contains some of the minimum supported versions of prominent
    frameworks:'
  prefs: []
  type: TYPE_NORMAL
- en: Hibernate 5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jackson 2.6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: EhCache 2.10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JUnit 5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tiles 3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following list shows the supported server versions:'
  prefs: []
  type: TYPE_NORMAL
- en: Tomcat 8.5+
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jetty 9.4+
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: WildFly 10+
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Netty 4.1+ (for web reactive programming with Spring Web Flux)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Undertow 1.4+ (for web reactive programming with Spring Web Flux)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Applications using earlier versions of any of the preceding specifications/frameworks
    need to be upgraded at least to the previously listed versions before they can
    use Spring Framework 5.0.
  prefs: []
  type: TYPE_NORMAL
- en: JDK 9 runtime compatibility
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: JDK 9 is expected to be released mid-2017\. Spring Framework 5.0 is expected
    to have runtime compatibility with JDK 9.
  prefs: []
  type: TYPE_NORMAL
- en: Usage of JDK 8 features in Spring Framework code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Spring Framework 4.x baseline version is Java SE 6\. This means that it
    supports Java 6, 7, and 8\. Having to support Java SE 6 and 7 puts constraints
    on the Spring Framework code. The framework code cannot use any of the new features
    in Java 8\. So, while the rest of the world upgraded to Java 8, the code in Spring
    Framework (at least the major parts) was restricted to using earlier versions
    of Java.
  prefs: []
  type: TYPE_NORMAL
- en: 'With Spring Framework 5.0, the baseline version is Java 8\. Spring Framework
    code is now upgraded to use the new features in Java 8\. This will result in more
    readable and performant framework code. Some of the Java 8 features used are as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Java 8 default methods in core Spring interfaces
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Internal code improvements based on Java 8 reflection enhancements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use of functional programming in the framework code--lambdas and streams
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reactive programming support
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Reactive programming is one of the most important features of Spring Framework
    5.0.
  prefs: []
  type: TYPE_NORMAL
- en: Microservices architectures are typically built around event-based communication.
    Applications are built to react to events (or messages).
  prefs: []
  type: TYPE_NORMAL
- en: Reactive programming provides an alternate style of programming focused on building
    applications that react to events.
  prefs: []
  type: TYPE_NORMAL
- en: 'While Java 8 does not have built-in suppport for reactive programming, there
    are a number of frameworks that provide support for reactive programming:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Reactive Streams**: Language-neutral attempt to define reactive APIs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Reactor**: Java implementation of Reactive Streams provided by the Spring
    Pivotal team.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Spring WebFlux**: Enables the development of web applications based on reactive
    programming. Provides a programming model similar to Spring MVC.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will discuss Reactive Programming and how you can implement it with Spring
    Web Flux in [Chapter 11](116716f1-7046-4aaa-b89b-9794b6079880.xhtml), *Reactive
    Programming*.
  prefs: []
  type: TYPE_NORMAL
- en: Functional web framework
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Building on top of the reactive features, Spring 5 also provides a functional
    web framework.
  prefs: []
  type: TYPE_NORMAL
- en: 'A functional web framework provides features to define endpoints using functional
    programming style. A simple hello world example is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'A functional web framework can also be used to define more complex routes,
    as shown in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'A couple of important things to note are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`RouterFunction` evaluates the matching condition to route requests to the
    appropriate handler function'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We are defining three endpoints, two GETs, and one POST, and mapping them to
    different handler functions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will discuss Mono and Flux in more detail in [Chapter 11](116716f1-7046-4aaa-b89b-9794b6079880.xhtml),
    *Reactive Programming.*
  prefs: []
  type: TYPE_NORMAL
- en: Java modularity with Jigsaw
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Until Java 8, the Java platform was not modular. A couple of important problems
    resulted out of this:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Platform Bloat**: Java modularity has not been a cause of concern in the
    last couple of decades. However, with **Internet of Things** (**IOT**) and new
    lightweight platforms such as Node.js, there is an urgent need to address the
    bloat of the Java platform. (Initial versions of JDK were less than 10 MB in size.
    Recent versions of JDK need more than 200 MB.)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**JAR Hell**: Another important concern is the problem of JAR Hell. When Java
    ClassLoader finds a class, it will not see whether there are other definitions
    for the class available. It immediately loads the first class that is found. If
    two different parts of the application need the same class from different jars,
    there is no way for them to specify the jar from which the class has to be loaded.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Open System Gateway initiative** (**OSGi**) is one of the initiatives, started
    way back in 1999, to bring modularity into Java applications.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Each module (referred to as bundle) defines the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**imports**: Other bundles that the module uses'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**exports**: Packages that this bundle exports'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each module can have its own life cycle. It can be installed, started, and stopped
    on its own.
  prefs: []
  type: TYPE_NORMAL
- en: 'Jigsaw is an initiative under **Java Community Process** (**JCP**), started
    with Java 7, to bring modularity into Java. It has two main aims:'
  prefs: []
  type: TYPE_NORMAL
- en: Defining and implementing a modular structure for JDK
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defining a module system for applications built on the Java platform
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jigsaw is expected to be part of Java 9 and Spring Framework 5.0 is expected
    to include basic support for Jigsaw modules.
  prefs: []
  type: TYPE_NORMAL
- en: Kotlin support
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Kotlin is a statically typed JVM language that enables code that is expressive,
    short, and readable. Spring framework 5.0 has good support for Kotlin.
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider a simple Kotlin program illustrating a data class, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'In fewer than 10 lines of code, we created and tested a data bean with three
    properties and the following functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '`equals()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`hashCode()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`toString()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`copy()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Kotlin is strongly typed. But there is no need to specify the type of each
    variable explicitly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Named arguments allow you to specify the names of arguments when calling methods,
    resulting in more readable code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Kotlin makes functional programming simpler by providing default variables
    (`it`) and methods such as `take`, `drop`, and so on:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also specify default values for arguments in Kotlin:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: With all its features making the code concise and expressive, we expect Kotlin
    to be a language to be learned for the .
  prefs: []
  type: TYPE_NORMAL
- en: We will discuss more about Kotlin in [Chapter 13](116716f1-7046-4aaa-b89b-9794b6079880.xhtml),
    *Working with Kotlin in Spring.*
  prefs: []
  type: TYPE_NORMAL
- en: Dropped features
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Spring Framework 5 is a major Spring release with substantial increase in the
    baselines. Along with the increase in baseline versions for Java, Java EE and
    a few other frameworks, Spring Framework 5 removed support for a few frameworks:'
  prefs: []
  type: TYPE_NORMAL
- en: Portlet
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Velocity
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JasperReports
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: XMLBeans
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JDO
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Guava
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you are using any of the preceding frameworks, it is recommended that you
    plan a migration and stay with Spring Framework 4.3--which has support until 2019.
  prefs: []
  type: TYPE_NORMAL
- en: Spring Boot 2.0 new features
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The first version of Spring Boot was released in 2014\. The following are some
    of the important updates expected in Spring Boot 2.0:'
  prefs: []
  type: TYPE_NORMAL
- en: The baseline JDK version is Java 8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The baseline Spring Version is Spring Framework 5.0
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring Boot 2.0 has support for Reactive Web programming with WebFlux
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Minimum supported versions of some important frameworks are listed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Jetty 9.4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tomcat 8.5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hibernate 5.2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Gradle 3.4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will discuss Spring Boot extensively in Chapter 5, *Building Microservices
    with Spring Boot* and [Chapter 7](c46a5b67-c5be-49c0-af8e-b0c4713f890b.xhtml),
    *Advanced Spring Boot Features*.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Over the course of the last decade and a half, Spring Framework has dramatically
    improved the experience of developing Java Enterprise applications. With Spring
    Framework 5.0, it brings in a lot of features while significantly increasing the
    baselines.
  prefs: []
  type: TYPE_NORMAL
- en: In the subsequent chapters, we will cover dependency injection and understand
    how we can develop web applications with Spring MVC. After that, we will move
    into the world of microservices. In Chapters 5, *Building Microservices with Spring
    Boot*, [Chapter 6](09291379-92b0-4d7d-bff7-d77e089f33db.xhtml), *Extending Microservices*,
    and [Chapter 7](c46a5b67-c5be-49c0-af8e-b0c4713f890b.xhtml), *Advanced Spring
    Boot Features*, we will cover how Spring Boot makes the creation of microservices
    simpler. We will then shift our attention to building applications in the Cloud
    with Spring Cloud and Spring Cloud Data Flow.
  prefs: []
  type: TYPE_NORMAL
