- en: Appendix
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 1\. Introduction to MongoDB
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Activity 1.01: Setting Up a Movies Database'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Solution:**'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following steps will help you complete this activity:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, connect to your MongoDB cluster that was set up as part of *Exercise
    1.04*, *Setting Up Your First Free MongoDB Cluster on Atlas*. It should look something
    like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Enter the preceding command on your command prompt and provide the password
    when prompted. Upon successful login, you should see a shell prompt with your
    cluster name, something like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, create the movies database and call it `moviesDB`. Utilize the `use` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Create the `movies` collection with a few relevant attributes. Create the collection
    by inserting the documents into a non-existent collection. You are encouraged
    to think and implement collections with attributes that you find most suitable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'This should result in the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Use the `find` command to fetch the documents you inserted in the previous
    step, that is, `db.movies.find().pretty()`. It should return the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'You may also like to store awards information in your movies database. Create
    an `awards` collection with a few records. You are encouraged to think and come
    up with your own collection name and attributes. Here are the commands to insert
    a few sample documents in your `awards` collection:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Each of these commands should generate an output like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Each of these commands should generate an output like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The inserted ID is the unique ID for the document that is inserted, so it will
    not be the same for you as mentioned in the preceding output.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the `find` command to get the documents from the `awards` collection. The
    lines starting with `//` (a double slash) are comments, which are only for the
    purpose of description; the database does not execute them as commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the output of the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.39: Documents from the awards collection'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15507_01_39.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 1.39: Documents from the awards collection'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: This exercise was for you to add as many collections/documents as you think
    are required to store the movie data effectively and efficiently. Feel free to
    add any more relevant collections and documents.
  prefs: []
  type: TYPE_NORMAL
- en: In this activity, you have found a relevant database solution for the movies
    database. You have also created a database on MongoDB Atlas for storing collections
    and documents.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will be provided with steps to import another sample
    dataset about movies. It is advisable that you think realistically about what
    other collections or attributes in the collections are required for a movies database.
    You will also see in the next chapter how your dataset is different from the sample
    provided.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Documents and Data Types
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Activity 2.01: Modeling a Tweet into a JSON Document'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Solution:**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Perform the following steps to complete the activity:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Identify and list the following fields from the tweet that can be included
    in the JSON document:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Group the related fields such that they can be placed as embedded objects or
    arrays. Since a tweet can have multiple hashtags and mentions, it can be represented
    as an array. The modified list appears as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Prepare the user object and add the values from the tweet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'List all the hashtags as an array:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Include all the mentions as an array:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Once you combine all the documents with the rest of the fields, the final output
    will appear as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Click on `Validate JSON` to validate the code from any text editor as follows:![Figure
    2.21: Validated JSON document'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15507_02_21.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 2.21: Validated JSON document'
  prefs: []
  type: TYPE_NORMAL
- en: In this activity, you modeled data from a tweet into a valid JSON document.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Servers and Clients
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Activity 3.01: Managing Your Database Users'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Solution:**'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are the detailed steps for the activity:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to http://cloud.mongodb.com to connect to the Atlas console.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Log on to your new MongoDB Atlas web interface using your username and password,
    which was created when you registered for the Atlas Cloud:![Figure 3.40: MongoDB
    Atlas login page'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15507_03_40.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.40: MongoDB Atlas login page'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new database called `dev_mflix` and, on the Atlas clusters page, click
    the `COLLECTIONS` button:![Figure 3.41: MongoDB Atlas Clusters Page'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15507_03_41.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.41: MongoDB Atlas Clusters Page'
  prefs: []
  type: TYPE_NORMAL
- en: 'A window with all the collections will appear, as shown in *Figure 3.42*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.42: MongoDB Atlas data explorer'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15507_03_42.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.42: MongoDB Atlas data explorer'
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, click the `+Create Database` button, at the top of the database list.
    The following window will appear:![Figure 3.43: MongoDB Create Database window'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15507_03_43.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.43: MongoDB Create Database window'
  prefs: []
  type: TYPE_NORMAL
- en: Set `DATABASE NAME` to `dev_mflix` and `COLLECTION NAME` to `dev_data01`, and
    then click the `CREATE` button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a custom role called `Developers`. Click on `Database Access` (on the
    left side). On the `Database Access` page, click on the `Custom Role` tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the `Add Custom Role` button. The `Add Custom Role` window will appear,
    as in the following screenshot:![Figure 3.44: The Add Custom Role window'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15507_03_44.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.44: The Add Custom Role window'
  prefs: []
  type: TYPE_NORMAL
- en: 'Within new `Developers` role, add the `readWrite` role on `dev_mflix` database.
    Then, add the `read` role on `sample_mflix` database and click on the `Add Custom
    Role` button. The new `Developers` role will appear in the list:![Figure 3.45:
    Database Access – Custom Roles'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15507_03_45.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.45: Database Access – Custom Roles'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the new Atlas user, `Mark`. In the `Database Access` menu, click the
    `+Add New Database User` button. The `Add New Database User` window will appear
    as follows:![Figure 3.46: Adding a new user called Mark'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15507_03_46.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.46: Adding a new user called Mark'
  prefs: []
  type: TYPE_NORMAL
- en: 'Fill in the details as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Username: `Mark`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Authentication Method: `SCRAM`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Pre-defined Custom Role: `Developers`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, a new user named `Mark` should appear in the Atlas user list:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.47: Atlas database users'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15507_03_47.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.47: Atlas database users'
  prefs: []
  type: TYPE_NORMAL
- en: 'Connect to the MongoDB cloud database as user `Mark` and run the `db.getUser()`
    shell function. The expected shell output is shown in the following screenshot:![Figure
    3.48: Shell output (example)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15507_03_48.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.48: Shell output (example)'
  prefs: []
  type: TYPE_NORMAL
- en: This concludes the activity. A new developer called Mark has been added to the
    Atlas system and the appropriate access permissions have been granted.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Querying Documents
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Activity 4.01: Finding Movies by Genre and Paginating Results'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Solution:**'
  prefs: []
  type: TYPE_NORMAL
- en: 'The most important part of the `findMoviesByGenre` function is the underlying
    MongoDB query. You will take a step-by-step approach to solving the problem, starting
    with creating the query on a mongo shell. Once the query has been prepared, you
    will wrap it into a function:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a query to filter results by `genre`. For this activity, we are using
    the `Action` genre:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The requirement is to return only the titles of the movies. For this, add a
    projection to project only the `title` field and exclude the rest, including `_id`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, sort the results in descending order of IMDb ratings. Add a `sort()` function
    to the query:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the `skip` function and, for now, provide any value you want (`3`, in this
    case):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, add a `limit` to the query, as follows. The limit value indicates the
    page size:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, convert our resulting cursor into an array by using the `toArray()` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that the query has been written, open a text editor and write an empty
    function that accepts a genre, a page number, and a page size, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Copy and paste the query inside the function, assigning it to a variable, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'The result you will get is an array. Write the logic needed to iterate through
    the elements and print the `title` fields, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'The query still has hardcoded values that need to be replaced with the variables
    that are received as function arguments, so put the `genre` and `pageSize` variables
    in the correct places:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, you need to derive the skip value based on the page number and page size.
    When the user is on the first page, the skip value should be zero. On the second
    page, the skip value should be the page size. Similarly, if the user is on the
    third page, the skip value should be page size multiplied by 2\. Write this logic
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Now, use the newly calculated skip value in the limit function. This makes the
    function complete.
  prefs: []
  type: TYPE_NORMAL
- en: 'Copy and paste the function into the mongo shell and execute it. You should
    see the following result:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 4.46: Final output'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15507_04_46.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 4.46: Final output'
  prefs: []
  type: TYPE_NORMAL
- en: In this activity, by using the `sort()`, `skip()`, and `limit()` functions,
    you implemented pagination for your movie service, vastly improving the user experience.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Inserting, Updating, and Deleting Documents
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Activity 5.01: Updating Comments for Movies'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Solution:**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Perform the following steps to complete the activity:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, update the `movie_id` field in all three comments. As we need to apply
    the same update to all three comments, we will use the `findOneAndUpdate()` function
    along with the `$set` operator to change the value of the field:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Using the update command, we find three movies by their `_id`, providing their
    primary keys using the `$in` operator. Then, we use `$set` to update the value
    of the field `movie_id`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Connect to the MongoDB Atlas cluster, use the database `sample_mflix`, and
    then execute the command in the previous step. The output should be as follows:![Figure
    5.30: Assigning the correct movie to the comments'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15507_05_30.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 5.30: Assigning the correct movie to the comments'
  prefs: []
  type: TYPE_NORMAL
- en: The output confirms that all three comments are updated correctly.
  prefs: []
  type: TYPE_NORMAL
- en: 'Find the movie `Sherlock Holmes` by `_id` and reduce the count of comments
    by `3`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: The update command here finds the movie by `_id` and uses `$inc` with a negative
    number to reduce the `num_mflix_comments` count by 3\. It returns the modified
    document containing the fields `title` and `num_mflix_comments`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Execute the command on the same mongo shell, as follows:![Figure 5.31: Incrementing
    the count of comments on Sherlock Holmes'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15507_05_31.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 5.31: Incrementing the count of comments on Sherlock Holmes'
  prefs: []
  type: TYPE_NORMAL
- en: The output shows that the number of comments is correctly reduced by `3`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, prepare a similar command on `50 First Dates` and increase the number
    of comments by `3`. The following command should be used for this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: In this update operation, we are finding the movie by its `_id` and using `$inc`
    with a positive value of 3 to increase the number of comments. It also returns
    the updated document and returns only the fields `title` and `num_mflix_comments`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, execute the command on the mongo shell:![Figure 5.32: Decrementing the
    count of comments on 50 First Dates'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15507_05_32.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 5.32: Decrementing the count of comments on 50 First Dates'
  prefs: []
  type: TYPE_NORMAL
- en: The output shows that the number of comments has been increased correctly. In
    this activity, we have practiced modifying the fields of different collections
    and incrementing and decrementing values of numeric fields during the update operations.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Updating with Aggregation Pipelines and Arrays
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Activity 6.01: Adding an Actor''s Name to the Cast'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Solution:**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Perform the following steps to complete the activity:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Since only one movie document must be updated, use the `findOneAndUpdate()`
    command. Open a text editor and type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: This query uses a query expression based on the movie title.
  prefs: []
  type: TYPE_NORMAL
- en: 'Prepare an update expression to insert an element into the array. As the cast
    array must be unique, use `$addToSet`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: This query inserts `Nick Robinson` into `cast` and also ensures that no duplicates
    are inserted.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, you need to sort the array. Since sets are unordered collections, you
    cannot use `$sort` in an `$addToSet` expression. Instead, first add the element
    to the set and then sort it. Open the mongo shell and connect to the `sample_mflix`
    database:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'In this command, the `returnNewDocument` flag has been set to `true` and only
    the `title` and `cast` fields have been projected. Execute the query in the `sample_mflix`
    database:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.23: Adding the missing cast member''s name'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15507_06_23.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 6.23: Adding the missing cast member''s name'
  prefs: []
  type: TYPE_NORMAL
- en: The screenshot confirms that the element `Nick Robinson` has been correctly
    added to the end of the array.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open a text editor and write a basic update command, along with the same query
    expression:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Modify the command, add a `$push` expression to the array, and provide the
    `$sort` option:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: As no new element needs to be pushed, an empty array has been passed to the
    `$each` operator.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the `returnNewDocument` flag, add the projection to the `title` and `cast`
    fields, and execute the command, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Open the mongo shell, connect to the `sample_mflix` database, and execute the
    command:![Figure 6.24: Sorting the missing cast'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15507_06_24.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 6.24: Sorting the missing cast'
  prefs: []
  type: TYPE_NORMAL
- en: The output confirms that the `cast` array is now alphabetically sorted in the
    ascending order of the elements.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. Data Aggregation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Activity 7.01: Putting Aggregations into Practice'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Solution:**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Perform the following steps to complete the activity:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, create the scaffold code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the first match for documents older than 2001:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Add a second match condition for movies with at least one award win:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Add a `sort` condition for award nominations. This is to ensure that the `$first`
    operator in our `$group` statement fetches the highest nominated film for each genre:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the `$group` stage. Create groups based on the first genre and output the
    `$first` film in each group, along with the sum of award wins for that genre:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Perform a join on the `comments` collection to retrieve comments for the film
    in each group. This joins our computed `film_id` field with the `movie_id` comments
    field. Call this new array `comments`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Project just the first comment from your new array, as well as any fields you
    want to output at the end. Use the `$slice` operator to return only the first
    entry in the `comments` array. Remember also to add the trailers to the film runtime:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, sort by `genre_award_wins` and limit to three documents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'Your final pipeline should now look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'Your output will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.24: Final output after running the pipeline (truncated for brevity)'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15507_07_24.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 7.24: Final output after running the pipeline (truncated for brevity)'
  prefs: []
  type: TYPE_NORMAL
- en: In this activity, we have put together all the different aspects of aggregation
    pipelines to query, transform, and join data across collections. By combining
    the methods learned in this chapter, you will now be able to confidently design
    and write efficient aggregation pipelines to solve complex business problems.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Coding JavaScript in MongoDB
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Activity 8.01: Creating a Simple Node.js Application'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Solution:**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Perform the following steps to complete the activity:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Import the `readline` and MongoDB libraries:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'Create your `readline` interface:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'Declare any variables you will need:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a function called `list` that will fetch the top five films for a given
    genre, returning their `title`, `favourite`, and `ID` fields. *You will need to
    ask for the category in this function. Look at the* `login` *method in Exercise
    7.05*, *Handling Inputs in Node.js, for more information. Combine this with the*
    `find` *code from our earlier exercises*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a function called `favourite` that will update a document by title,
    and add a key called `favourite` with a value of `true` to the document. You will
    need to ask for the title in this function using the same method you used for
    your `list` function. Combine this with the updated code from our earlier exercises:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'Create an interactive `while` loop based on the user''s input. If you''re unsure
    how to do this, refer to the `prompt` function from *Exercise 8.05*, *Handling
    Inputs in Node.js*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'Create the MongoDB connection and database, calling your `prompt` function
    if the database creates successfully:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: Remember, you will need to pass the `database` and `client` objects through
    to each of your functions, including any time you call the `prompt` function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run your code using `node Activity8.01.js`.![Figure 8.9: Final output (truncated
    for brevity)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15507_08_09.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.9: Final output (truncated for brevity)'
  prefs: []
  type: TYPE_NORMAL
- en: In this activity, you created an application with an interactive input loop
    and implemented error handling to handle invalid input types entered by the user.
  prefs: []
  type: TYPE_NORMAL
- en: 9\. Performance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Activity 9.01: Optimizing a Query'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Solution:**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Perform the following steps to complete the activity:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open your mongo shell and connect to the `sample_supplies` database on the
    Atlas cluster. First, you need to find how many records the query returns. The
    following snippet shows a `count` query, which gives the number of backpacks sold
    at the Denver store:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: The query returns a count of `711` records.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, analyze the query given by the analytics team using the `explain()` function,
    and print the execution stats, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'The query invokes the `explain()` function by passing `executionStats` as an
    argument. The following snippet shows the `executionStats` section of the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: The output indicates that to return `711` records, all `5000` records were scanned.
    It also indicates the execution started with the `COLLSCAN` stage, which means
    no index was initially present to support the fields in the query.
  prefs: []
  type: TYPE_NORMAL
- en: To improve the query performance, you can create an index on the collection.
    As the query uses two fields in the filter criteria, use both fields in the index.
    However, the query also has a sort specification and as denoted by the execution
    stat, the sort is performed in memory. To avoid the in-memory scan, include the
    sort field in the index.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a compound index on the collection and include `items.name`, `storeLocation`,
    and `customer.age` fields. The following query creates a compound index on the
    `sales` collection:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'The output indicates that the index is created correctly, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'Execute the `explain()` query executed in *step 2* again. The following snippet
    shows the `executionStats` section of the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: From the output, it is evident that the first stage of the execution is `IXSCAN`,
    which means that the correct indexes were used. Also notice that there is no sorting
    phase. This means that no further sorting is required because of the correct index
    on the `customer.age` field. The top-level execution stats show that only `711`
    records were scanned, and the same number of records were returned. This proves
    that the query is correctly optimized.
  prefs: []
  type: TYPE_NORMAL
- en: In this activity, you analyzed the performance stats of a query, identified
    problems, and created the correct index to solve the performance problems.
  prefs: []
  type: TYPE_NORMAL
- en: 10\. Replication
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Activity 10.01: Testing a Disaster Recovery Procedure for a MongoDB Database'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Solution:**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Perform the following steps to complete the activity:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the directories as follows: `C:\sale\sale-prod`, `C:\sale\sale-dr`,
    `C:\sale\sale-ab`, and `C:\sale\log`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: For Linux and macOS, the directory names would be like `/data/sales/sale-prod`,
    `/data/sales/sale-dr…`
  prefs: []
  type: TYPE_NORMAL
- en: 'Start the cluster nodes as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'Connect with mongo shell:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'Create and activate the cluster configuration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: You should be able to see `PRIMARY` on the shell prompt following a successful
    cluster election.
  prefs: []
  type: TYPE_NORMAL
- en: 'Insert `100` documents into the `sample_mflix` database. Use the following
    script on the primary to create a `sales_data` collection and insert `100` documents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'Shut down the primary by adding the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: Check that the primary is the DR instance by adding the following command (first
    disconnect and then connect again)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: The result should show `sales_dr`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the following script to insert an additional 10 documents on the new primary
    instance (`sales_dr`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'Shut down the DR database and arbiter with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: 'After you have made sure that both are shut down, restart the former primary
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: 'Restart the arbiter as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: Connect to the cluster. You should not be able to see the 10 documents that
    were inserted on `sales_dr`, and `db.new_sales_data.count()` should rerun only
    100.
  prefs: []
  type: TYPE_NORMAL
- en: 'After 5 minutes, restart the DR database as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: 'Verify the steps in the `sales_dr log` file after a restart. In the DR logs,
    you should be able to see a message like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: 11\. Backup and Restore in MongoDB
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Activity 11.01: Backup and Restore in MongoDB'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Solution:**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Perform the following steps to complete the activity:'
  prefs: []
  type: TYPE_NORMAL
- en: Start with `mongoexport`. Remove the `--db` option, since you are providing
    it in the URI.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: Add the fields option to the `mongoexport` command
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: Add the necessary CSV options to the import command, that is, `type`, `ignoreBlanks`,
    and `headerline`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: Fix the `gzip` option for the `dump` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: 'Change `nsExclude` to `excludeCollection`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `mongorestore` command, fix the names of the options:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: 'Also in `mongorestore`, add the `gzip` option as your dump was a `gzip`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, make sure your namespace uses the wildcard for proper name migration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: 'The final `mongoexport` command should look as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: 'The final `mongoimport` command should look as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: 'The final `mongodump` command should look as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: 'The final `mongorestore` command should look as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: It is important to note that because `mongoimport` and `mongorestore` will both
    create new documents in the database, you will have to execute these commands
    using credentials with write access.
  prefs: []
  type: TYPE_NORMAL
- en: 12\. Data Visualization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Activity 12.01: Creating a Sales Presentation Dashboard'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Solution:**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Perform the following steps to complete the activity:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Before you can start building the charts for this new presentation, you must
    define the appropriate data source in the application. Follow the steps from *Exercise
    12.01*, *Working with Data Sources*, to create a new sales data source on the
    sales collection from the `sample_supplies` database, as shown in the following
    figure:![Figure 12.52: Creating a new sales data source'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15507_12_52.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 12.52: Creating a new sales data source'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click `Finish` to save. The new data source will appear in the list as can
    be seen in the following figure:![Figure 12.53: Sales Data Sources'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15507_12_53.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 12.53: Sales Data Sources'
  prefs: []
  type: TYPE_NORMAL
- en: 'From the dashboard, click on the `ADD CHART` button as shown in the following screenshot:![Figure
    12.54: Clicking on ADD CHART in the User''s Dashboard'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15507_12_54.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 12.54: Clicking on ADD CHART in the User''s Dashboard'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `Chart Builder`, choose the sales data source, that was created in *step
    2* (that is, `sample_supplies.sales`) and then select the `Circular` chart type
    and the `Donut` chart sub-type, as can be seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.55: Selecting the Circular chart type and the Donut chart sub-type'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15507_12_55.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 12.55: Selecting the Circular chart type and the Donut chart sub-type'
  prefs: []
  type: TYPE_NORMAL
- en: 'Unwind the `items` array. This step is important because the sales data is
    in an array format inside the JSON database. So, the `unwind` function will create
    a virtual document for each item in the array. To do so, add the following JSON
    code to the `Query` bar:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: 'Then click the `Apply` button, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.56: Writing the unwind function in the Query bar'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15507_12_56.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 12.56: Writing the unwind function in the Query bar'
  prefs: []
  type: TYPE_NORMAL
- en: 'The next step is to add a new calculated field—that is, `items.value`. To do
    this, click on the `+ Add Field` button and add the new field as `items.value
    = items.price * items.quantity`, as can be seen in the following screenshot:![Figure
    12.57: Ading the items.value field'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15507_12_57.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 12.57: Ading the items.value field'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add a filter so that only items from stores in `Denver` are considered for
    the chart. From the `Filter` tab, define the new filter for the store location
    by checking only the `Denver` location checkbox:![Figure 12.58: Selecting only
    Denver from the list of locations'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15507_12_58.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 12.58: Selecting only Denver from the list of locations'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add channels in the `Encode` tab. As can be seen from the following figure,
    drag the field `items.name` into the `Label` channel. Select `VALUE` from the
    `SORT BY` dropdown and limit it to `10` results. That will split our donut into
    10 slices. Similarly, drag `items.value` (the new calculated field) into the `Arc`
    channel, and choose the `SUM` function from the `AGGREGATE` dropdown:![Figure
    12.59: Dragging items.value into the Arc channel and choosing the SUM function'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15507_12_59.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 12.59: Dragging items.value into the Arc channel and choosing the SUM
    function'
  prefs: []
  type: TYPE_NORMAL
- en: 'The chart should appear on the right side of the screen as follows:![Figure
    12.60: Final chart'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15507_12_60.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 12.60: Final chart'
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the chart name to `Denver Sales (million $)` as follows:![Figure 12.61:
    Editing the chart title'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15507_12_61.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 12.61: Editing the chart title'
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the chart labels. From the `Customize` tab, click to enable `Data Value
    Labels`, as follows:![Figure 12.62: Customizing the data labels'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15507_12_62.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 12.62: Customizing the data labels'
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, from the `Number Formatting` dropdown, choose `CUSTOM` with a maximum
    of `2` decimals, as follows:![Figure 12.63: Customizing the chart formatting'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15507_12_63.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 12.63: Customizing the chart formatting'
  prefs: []
  type: TYPE_NORMAL
- en: 'The chart will appear with the right title and label formatting, as can be
    seen in the following figure:![Figure 12.64: Final Denver Sales chart'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15507_12_64.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 12.64: Final Denver Sales chart'
  prefs: []
  type: TYPE_NORMAL
- en: The results are quite self-explanatory. As expected, the laptop sales value
    of almost 2 million dollars tops the sales and is by far the most valuable item
    in the sales report. The next item by sales is backpacks, with only a $250,000
    value.
  prefs: []
  type: TYPE_NORMAL
- en: The activity is now complete. In only 10 simple steps, you were able to create
    a top sales report for items from stores in Denver, Colorado. Your chart build
    is now finished and the chart can be saved on your dashboard. Lessons learned
    here could be applied by students and professionals alike, to make presentations
    using real data.
  prefs: []
  type: TYPE_NORMAL
