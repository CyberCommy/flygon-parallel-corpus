- en: Understanding the Core Concepts of Angular 6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Angular framework has become one of the most popular tools, around the world
    for the development of frontend applications. In addition to being very versatile
    (and very different from other libraries, such as `React.js` or `Vue.js`, which
    serve only one purpose), Angular is a complete framework and, with the new updates
    for Angular 6, we now have more resources available for creating amazing and fast
    web applications. In addition, the team behind Angular proposes two major updates
    annually.
  prefs: []
  type: TYPE_NORMAL
- en: Another strong point in favor of Angular is its inclusion of the Angular **command-line
    interface** (**CLI**) for creating web applications. This provides us with extra
    power; with a simple command in the Terminal, we can create our application's
    boilerplate code very quickly and easily. However, everything is not quite as
    sweet as we would like it to be, so we need to understand the basic concepts of
    Angular and know how to avoid some of the issues in our way. This is easily resolved
    by adopting a mental model of development, based on components and modules. In
    the following examples, we will carefully create the basic structure of a scalable
    and modular project.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Angular 6 – smaller, faster, and easier
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Angular and the component method for developing modern web applications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Installing the tools: Git, the Angular CLI, HTTP server, and VS Code plugins'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a simple Angular app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Simple deployment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Angular 6 – smaller, faster, and easier
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following features are not exclusively for version 6, but were included
    from version 5; we are just mentioning them here because they are powerful features
    for building modern web applications:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Webpack**: You can now generate smaller modules by using the scope hosting
    technique.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can reduce bundle sizes for common use cases by using the RxJS 6 library
    for JavaScript.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Angular CLI, allowing for commands such as `ng` update, can be used to update
    all dependencies.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You will have the option to start your application using Angular material design.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `ng add` command supports creating progressive web applications or turning
    an existing one into a **Progressive Web Application** (**PWA**).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You will have the opportunity to use Bazel to build your application's libraries
    and to share libraries with other teams.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Angular makes it possible to package custom HTML/JavaScript elements for use
    in third-party applications.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can read more about Bazel at [https://bazel.build/](https://bazel.build/).
  prefs: []
  type: TYPE_NORMAL
- en: Of course, there are many other improvements and features in the Angular 6 release;
    note that this book was written on the Angular 6 beta 7 version, and the next
    chapters will have more news about the current Angular version.
  prefs: []
  type: TYPE_NORMAL
- en: Angular and the component method for developing modern web applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Angular components are similar to web components; they are used to compose web
    pages, or even other components. There can be dozens of components in a web application.
  prefs: []
  type: TYPE_NORMAL
- en: Components define views and templates, and they belong to a module within an
    application; every application has, at the very least, a root module, named by
    the Angular CLI as `AppModule.ts`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `app.module.ts` file contains all of the bootstrap code and configurations
    for an Angular application, as you can see in the following block of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code is the most basic configuration of an Angular application;
    we import the `NgModule` from the Angular core library and use it as a decorator:
    `@NgModule`.'
  prefs: []
  type: TYPE_NORMAL
- en: Both components and services are simply classes, with decorators that mark their
    types and provide metadata that tells Angular how to use them.
  prefs: []
  type: TYPE_NORMAL
- en: You can read more about web components at [https://www.webcomponents.org/introduction](https://www.webcomponents.org/introduction).
  prefs: []
  type: TYPE_NORMAL
- en: Angular's main building blocks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Every application created using the Angular framework has five very important
    points that connect to each other and establish the basic architecture of the
    application:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Modules**: Using the decorator `@NgModule`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Services**: Using the decorator `@Injectable`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Components**: Using the decorator `@component`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Templates**: Views with `data-bind` and directives'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Routes**: Setting URL path to views'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s look at a simple blog page as an Angular application, built with components:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/3c291f8a-fb7b-478f-a72b-9a6d2fa665d8.png)Angular components'
  prefs: []
  type: TYPE_NORMAL
- en: The preceding diagram illustrates how components can be used to build a simple
    application.
  prefs: []
  type: TYPE_NORMAL
- en: 'A comparison between the preceding diagram and the five basic concepts of an
    Angular application would look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'One module: `blog.module.ts`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A page component: `blog.component.ts`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A route to the blog page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A service to load the blog posts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are also some additional components, such as **Header**, **Post,** and
    **Pagination.**
  prefs: []
  type: TYPE_NORMAL
- en: Note that the Header component belongs to the main module of the application
    (in this case, the `AppModule`), and the Post and Pagination components are part
    of the `BlogModule`.
  prefs: []
  type: TYPE_NORMAL
- en: As we move through this chapter, we will look more closely at the relationship
    between modules and components. Now, we will look at the life cycle of a component.
  prefs: []
  type: TYPE_NORMAL
- en: The component life cycle
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the life cycle of an Angular component, after instantiating, the component
    runs a definite path of execution from its beginning until its end. The most basic
    way to understand this is through observing the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, you can see methods called `ngOnInit()` and `ngOnDestroy`;
    the names are very intuitive, and show us that we have a beginning and an end. The
    `ngOnInit()` method is implemented through its `OnInit` interface, and the same
    goes for the `ngOnDestroy()` method. As you saw in the previous chapter, the interfaces
    in TypeScript are very useful – it's not any different here.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following diagram, we will look at the main interfaces that we can implement
    on a component. In the diagram, after the `Constructor()` method, there are eight
    interfaces (also known as hooks); each one is responsible for one thing, at a
    specific moment:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/5a04ccae-f092-429e-a923-74071100d1c7.png)Angular component life
    cycleYou can learn more about each interface in the official Angular documentation
    at [https://angular.io/guide/lifecycle-hooks](https://angular.io/guide/lifecycle-hooks).
    [](https://angular.io/guide/lifecycle-hooks)'
  prefs: []
  type: TYPE_IMG
- en: We will not describe the interfaces one by one in this chapter, so as not to
    overload you, but,  throughout the course of the book, we will use them in the
    application that we will build. Also, the preceding link includes detailed information
    about each interface and hook.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the tools – Git, the Angular CLI, and VS Code plugins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: From this chapter to the end of the book, we will adopt the VS Code text editor –
    it is free, lightweight, and very powerful for creating web applications.
  prefs: []
  type: TYPE_NORMAL
- en: Also, it is very important to use a version control system for the source code;
    this will help us to track all of the changes in our code base.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will introduce Git source control.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Git
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As a simple and quick introduction to Git, we can describe it as follows.
  prefs: []
  type: TYPE_NORMAL
- en: Git is a file version control system. By using it, we can develop projects to
    which many people can simultaneously contribute, editing and creating new files,
    allowing them to exist without the risk of their changes being overwritten.
  prefs: []
  type: TYPE_NORMAL
- en: A very common case when using Git is to also use a service in the cloud (such
    as GitHub or Bitbucket), to store the code, so that we can share it.
  prefs: []
  type: TYPE_NORMAL
- en: In addition, almost all open source projects (frameworks and libraries) are
    in GitHub today. So you can contribute by reporting bugs, or even sending codes
    and suggestions.
  prefs: []
  type: TYPE_NORMAL
- en: If you are a developer and do not yet have GitHub, you are late – this is the
    time to start using it. So, let's install Git.
  prefs: []
  type: TYPE_NORMAL
- en: Go to [https://git-scm.com/downloads](https://git-scm.com/downloads) and download
    and install Git for your platform.
  prefs: []
  type: TYPE_NORMAL
- en: 'After installing, open your Terminal and type the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: You must see the current version installed on your system.
  prefs: []
  type: TYPE_NORMAL
- en: Also, the `git help` command is very useful, listing all of the commands available.
  prefs: []
  type: TYPE_NORMAL
- en: You can read more about Git basics at [https://git-scm.com/book/en/v2/Getting-Started-Git-Basics](https://git-scm.com/book/en/v2/Getting-Started-Git-Basics).
  prefs: []
  type: TYPE_NORMAL
- en: Installing the Angular CLI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the world of frameworks, regardless of the language, we often find tools
    that can help us with day-to-day software development, especially when there are
    repetitive tasks.
  prefs: []
  type: TYPE_NORMAL
- en: The Angular CLI is a command-line interface for creating, developing, and maintaining
    Angular applications in a very productive way. It is an open source tool developed
    by the Angular team itself.
  prefs: []
  type: TYPE_NORMAL
- en: With the use of the Angular CLI, we are able to create the entire base structure
    of an Angular application, as well as the modules, components, directives, services,
    and more. It has its own server for development and helps us with the application
    build.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, it''s time to install it:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open your Terminal and type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'After the installation, you will see the following output in your Terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The number of packages removed and updated and the Angular CLI version may be
    different. Don't worry.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can remove your old version of the Angular CLI and install the latest version
    with the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: If you experience some `npm` issues when you try to update your Angular CLI
    version on a Windows machine, you can check [https://docs.npmjs.com/troubleshooting/try-the-latest-stable-version-of-npm#upgrading-on-windows](https://docs.npmjs.com/troubleshooting/try-the-latest-stable-version-of-npm#upgrading-on-windows) for
    information.
  prefs: []
  type: TYPE_NORMAL
- en: Note that the preceding command will install the Angular CLI globally on your
    environment/machine. Frequently, when we develop using the Angular framework and
    the Angular CLI, we see warning messages about the differences between versions.
    This means that, even if you have installed the latest version of the Angular
    CLI in your environment, the Angular CLI will check the version used in the current
    project and compare it to the version installed on your machine, and will use
    the current project version.
  prefs: []
  type: TYPE_NORMAL
- en: This is very useful when you work on third-party projects and need to keep dependencies
    consistency between the globally Angular CLI installed on your machine and the
    local project version installed on `node_modules` project folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside of your current Angular project, type the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Like the other commands that we are using in our book, the Angular CLI has a
    command called `ng help`. With it, we can access a vast list of options.
  prefs: []
  type: TYPE_NORMAL
- en: One of these commands is particularly useful when we are developing applications
    with Angular and need to consult something in the official documentation, without
    leaving the Terminal.
  prefs: []
  type: TYPE_NORMAL
- en: 'Go back to your Terminal and type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The preceding command will open your default browser right at the `HttpClient`
    documentation API, using [https://angular.io/api?query=HttpClient](https://angular.io/api?query=HttpClient).
    So, you can combine the `ng doc` command with anything from the API that you want
    to search.
  prefs: []
  type: TYPE_NORMAL
- en: We now have everything we need to start developing web applications using the
    Angular CLI, but, before we get deeper into building a sample application, we're
    going to update our toolkit with some very useful tools.
  prefs: []
  type: TYPE_NORMAL
- en: Installing VS Code Angular plugins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As mentioned in the previous chapters, the VS Code text editor is a fantastic
    IDE for developing web applications using JavaScript and TypeScript, and the same
    goes for Angular.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will look at some extensions (also called plugins) that
    can help us with our development.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s look at the package names and repository URLs:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Angular Language Service**: [https://github.com/angular/vscode-ng-language-service](https://github.com/angular/vscode-ng-language-service). Provided
    by the official Angular team, this extension helps us with completions in template
    files and template strings, and diagnostics for templates and Angular annotations.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Angular v5 Snippets**: [https://github.com/johnpapa/vscode-angular-snippets](https://github.com/johnpapa/vscode-angular-snippets). The
    extension name is Angular v5; the GitHub project repository doesn''t specify a
    name. So, we can expect snippets for future versions of Angular from the plugin
    author. This is a powerful tool that can help us to create almost everything within
    an Angular application; you can see the complete list in the GitHub repository.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Angular Support**: [https://github.com/VismaLietuva/vscode-angular-support](https://github.com/VismaLietuva/vscode-angular-support).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Go to and peek definition from:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Last but not least, we recommend that you use the GitLens plugin. This extension
    is extremely important, because it helps us to visualize our code in the Git repository,
    while also providing integration with GitHub or Bitbucket.
  prefs: []
  type: TYPE_NORMAL
- en: '**GitLens**: [https://github.com/eamodio/vscode-gitlens](https://github.com/eamodio/vscode-gitlens).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Supercharge the Git capabilities built into Visual Studio Code.
  prefs: []
  type: TYPE_NORMAL
- en: – Gitlens
  prefs: []
  type: TYPE_NORMAL
- en: You can explore the navigation for repositories and file histories
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can also explore commits and visualize comparisons between branches, tags,
    and commits
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There is an authorship code lens, showing the most recent commits and number
    of authors to the top of files and/or on code blocks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**GitLens Plugin**: [https://gitlens.amod.io/](https://gitlens.amod.io/). This
    extension is extremely important, because it helps us to visualize our code in
    the Git repository, while also providing integration with GitHub or Bitbucket.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Also, it''s possible to install any extension through the IDE itself. To do
    that, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open VS Code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the last icon on the left-hand sidebar; you can see it in the following
    screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/f6a24014-3903-4bc6-a3e8-d1487d4bcfcb.png)VS Code extension installation'
  prefs: []
  type: TYPE_NORMAL
- en: Just type what you want to search for in the search input field, and click install.
  prefs: []
  type: TYPE_NORMAL
- en: We now have everything we need to start developing Angular applications. In
    the next section, we will look at how to create an Angular application using the
    Angular CLI.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a simple Angular application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will cover all of the main points for the development of
    web applications using the Angular framework and the Angular CLI. Now, it's time
    to get in touch with the code and develop an application from start to finish.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this example project, we will develop a simple frontend application to consume
    the data of an API and display it on the screen – something like a simple blog.
    Open your Terminal and type the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that the  `--routing` flag is optional, but, since our next example will
    use routes, it is a good practice to start an application with that flag. After
    the Angular CLI has installed, you should see the following message on your Terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The structure of an Angular application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have created our application, let's examine some important files.
    Although these files have already been set up and and are ready for use, we often
    need to add settings, and even other modules, in real-world applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `chapter03` folder in VS Code; you will see the following screen in
    the VS Code explore tab:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/7bce726d-6e59-4e39-8e65-cd7d4d60e0bc.png)Angular project structure'
  prefs: []
  type: TYPE_NORMAL
- en: 'So, inside the `/src/app` folder, we have the five main blocks of an Angular
    application, except for the service (which we will see soon):'
  prefs: []
  type: TYPE_NORMAL
- en: '| `app.routing.module.ts` | Route |'
  prefs: []
  type: TYPE_TB
- en: '| `app.component.css` | Style sheet |'
  prefs: []
  type: TYPE_TB
- en: '| `app.component.html` | Template |'
  prefs: []
  type: TYPE_TB
- en: '| `app.component.spec.ts` | Test |'
  prefs: []
  type: TYPE_TB
- en: '| `app.component.ts` | @Component |'
  prefs: []
  type: TYPE_TB
- en: '| `app.module.ts` | @NgModule |'
  prefs: []
  type: TYPE_TB
- en: The package.json file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `package.json` file is very common in web applications that use Node.js
    modules. It is often found in frontend applications nowadays, in addition to server-side
    applications with Node.js. With the Angular framework, it is not different; this
    is one of the great advantages of the new version of Angular, since we can only
    import modules that are extremely necessary for the application, reducing the
    size and build time. Let''s look at the contents of the `package.json` file. We
    added some comments before each important section:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: This file is automatically changed when we install a new module. And, we often
    add some commands inside the tag scripts, as you will see in the next chapters. You
    can read more about the `package.json` file in the official npm documentation
    at [https://docs.npmjs.com/files/package.json](https://docs.npmjs.com/files/package.json).
  prefs: []
  type: TYPE_NORMAL
- en: Dotfiles – .editorconfig, .gitignore, and .angular-cli.json
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Dotfiles are the configuration files that start with a dot; they are always
    in the background of the project, but they are very important. They are used to
    customize your system. The name dotfiles is derived from the configuration files
    in Unix-like systems. In an Angular project, we will see three of these files:'
  prefs: []
  type: TYPE_NORMAL
- en: '`.editorconfig`: This file configures the text editor to use a particular style
    of code, so that the project is consistent, even though it is being edited by
    several people and in several types of text editors.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.gitignore`: As the name suggests, it ignores determined folders and files,
    so that they are not tracked by source control. We often find `node_modules` and
    a `dist` folder that do not require version control, because they are generated
    every time we install the application or run build commands.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.angular-cli.json`: Stores the project settings and is constantly used when
    executing build or server commands. There can be several Angular applications
    in a single project. Let''s look at some details and inspect `.angular-cli.json`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Environments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Inside of the `src/environments` folder, we find two configuration files. One
    is called `environment.prod.ts`, and the other is `environment.ts`. The Angular
    CLI will know what to use, depending on the command that we use; for example,
    consider the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: If we use it, then Angular will use the `environment.prod.ts` file, and, for
    the other commands, such as `ng serve`, it will use `environment.ts`. This is
    very useful, especially when we have a local API and one in `production`, using
    different paths.
  prefs: []
  type: TYPE_NORMAL
- en: 'Both files have almost the same code; see `environment.prod.ts`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The `environment.ts` file is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Note that the Boolean `true` (on production) and `false` (on development) is
    the only difference between the two files, at this first stage. It is clear that,
    in addition to the files that we mentioned, we have a lot of other files within
    an Angular application, and all of them are extremely important. But, for now,
    let's focus on these. Don't worry; throughout the course of the book, we will
    look at more of them in detail, during the development of our example application.
    For now, we are going to focus on creating the simple example that we are using
    in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Running the sample application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we have started our project, we will run the built-in Angular CLI
    server to see how our application looks:'
  prefs: []
  type: TYPE_NORMAL
- en: Open VS Code in the project root to the `chapter03` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For this example, we will use the integrated Terminal for the code; for this,
    click on the top menu in `view`, and then click `Integrated Terminal`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Type the following command in the Terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'You will see a message similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Behind the scenes, the Angular CLI will use the webpack module manager. Later
    in this book, you will see how to export and customize the webpack file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, go to `http://localhost:4200` and check the result; you will see the welcome
    page from the boilerplate application that we created previously. You can find
    the code behind this page at `src/app/app.component.html` – it's our template.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, it's time to add a new module to our application.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a new module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this example, we will, so that you can see how to build applications using
    the Angular CLI. Even in this very basic example, we will cover the following
    points:'
  prefs: []
  type: TYPE_NORMAL
- en: How to organize an Angular application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating modules
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating services
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Template data binding
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running an application in production
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now, let''s create a module that shows us a list of beers:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open VS Code, and, inside the integrated Terminal, type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that the command `ng g module` is a shortcut to `ng generate module <module-name>`,
    and this command just creates the module; we need to add routes, components, and
    templates, and also import the `beers` module in `app.modules.ts`, at the root
    of the `app` folder. The preceding command will generate the following structure
    and file content inside of our project: `src/app/beers/beers.module.ts`. The `beers.module.ts`
    contents are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: This is a pretty simple boilerplate code, but it is very useful. Now, we will
    add the missing pieces.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the `beers` module to your `app` module; open `app.module.ts` and replace
    the code with the following lines:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Note that we imported `BeersModule` and added it to the `imports` array.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a new component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, we need a component to show a list of beers, since we just created a module
    called `Beers`. Later, you will see how to use an API and an Angular service to
    load a list of beers; for now, we will focus on the creation of our component.
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside of the root folder, and with the integrated VS Code Terminal, type the
    following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding command will generate the following structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/74c96c21-d187-4a2a-a86f-c67659f23185.png)'
  prefs: []
  type: TYPE_IMG
- en: The `BeersModule` and `Component` files have been created. We now have our module,
    template, and component file. Let's add a new route.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a new route
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As you saw previously, routes are part of every web application. Now, we will
    add a new route, so that we can access the content of our `beers` module. Open
    `src/app/app-routing.module.ts` and replace the code with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Note that we are just adding the new route to an existing route file (in this
    case, `app.routing.module.ts`), as this example is extremely simple. But, in larger
    applications, it is recommended that you create individual route files for each
    application module.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an Angular service
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Angular services are used to handle data; it can be internal data (from one
    component to another) or something external, such as communicating with an API
    endpoint. Almost all frontend applications with JavaScript frameworks use this
    technique. In Angular, we call this a service, and we use some modules built into
    the Angular framework to complete the task: `HttpClient` and `HttpClientModule`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s look at how the Angular CLI can help us:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open VS Code, and, inside the integrated Terminal, type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'The previous command will generate two new files in the `beers` folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '`beers.service.spec.ts` and `beers.service.ts`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the newly created `Service` as a dependency provider to `beers.module.ts`.
    Open `src/app/beers/beers.module.ts` and add the following lines:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'In VS Code, we have import module support, so, when you start to type the module''s
    name, you will see the following help screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/b24600db-4493-450f-bf85-c957e8e13a5d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The final `beers.module.ts` code will look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Now, it's time to connect with an API using a service. To get as close to a
    real application as possible, we'll use a public API in this example. In the next
    steps, we will effectively create our service and add data binding to our template.
  prefs: []
  type: TYPE_NORMAL
- en: 'For this example, we will use the free [https://punkapi.com/](https://punkapi.com/) API:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `beers.service.ts` and replace the code with the following lines:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Now, we need to tell the component that we need to use this service to load
    the data and transmit it to our template.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `src/app/beers/beers.component.ts` and replace the code with the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Template data binding
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we have a service that connects to an API endpoint and receives a
    JSON file, let''s make some small changes to our views, known as templates in
    the Angular world. The templates are the HTML files inside of the `module` folder:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `src/app/app.component.html` and remove all of the code before the `<router-outlet></route-outlet>`
    tags.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open `src/app/beers/beers.component.html` and add the following code, right
    after the `beers` works paragraph:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that we are using the curly brace template tags (`{{}}`) and a `*ngFor`
    directive to display our data. Let''s look at some Angular data binding types:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we need to add some style to `beers.component.html`; open `src/app/beers/beers.component.css`
    and add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: We are now very close to completing our example application. The last step is
    to build our application and see the final result.
  prefs: []
  type: TYPE_NORMAL
- en: Simple deployment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have everything ready, let's look at how to build our application.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we will look at the application after the changes have been made:'
  prefs: []
  type: TYPE_NORMAL
- en: Open VS Code, click on view in the top menu bar, and click Integrated Terminal.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Type the following command in your Terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Open your default browser and go to `http://localhost.com:4200/beers`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Congratulations; you should see the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/186751db-e369-4760-ba47-2be0b5666ce0.png)'
  prefs: []
  type: TYPE_IMG
- en: Note that we are running the command for development, using `ng serve` behind
    the  `npm start` command.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s use the command to build the application, and check the results:'
  prefs: []
  type: TYPE_NORMAL
- en: Go back to VS Code and type *Ctrl* *+* *C* to stop the server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding command will prepare the application for production; the Angular
    CLI will do all of the hard work for us. Now, we have a folder at the root of
    `chapter03`, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/65c85104-5ea9-44e6-981e-9ba6e4ebf8a7.png)The dist folder'
  prefs: []
  type: TYPE_NORMAL
- en: 'As you can see, all of our application is inside of this folder, as optimized
    as possible; however, to see the contents, we need a web server. In this example,
    we will use the `http-server` node package, a very useful Node.js module to make
    a particular directory on a simple web server. You can find more information about
    http-server at [https://www.npmjs.com/package/http-server](https://www.npmjs.com/package/http-server):'
  prefs: []
  type: TYPE_NORMAL
- en: 'Go back to VS Code and the integrated Terminal, and type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Still in the integrated Terminal, type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'You will see the following message in your Terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: This means that everything went well, and you can already access the contents
    of the `dist` folder in your browser.
  prefs: []
  type: TYPE_NORMAL
- en: Open your default browser and go to `http://localhost.com:8080/beers`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We're done; now, let's save everything that we did within the `chapter03` folder
    in our local repository, using some Git commands. This step is not required for
    the next chapters, but it is highly recommended.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open your Terminal in the `chapter03` folder and type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'After the previous command, you will see the following output in your Terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Well, we have reached the end of another chapter, and you should now understand
    how to create applications with Angular. In this chapter, we covered the main
    points that make Angular a powerful framework. You can download the code samples
    that we used in this chapter directly from GitHub, at [https://github.com/PacktPublishing](https://github.com/PacktPublishing).
    In the next chapter, we will go deep inside the backend API.
  prefs: []
  type: TYPE_NORMAL
