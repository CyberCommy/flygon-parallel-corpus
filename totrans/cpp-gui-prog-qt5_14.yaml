- en: Qt Quick and QML
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we are going to learn something very different from the rest
    of the chapters in this book. Qt consists of two different methods for developing
    an application. The first method is Qt Widgets and C++, which we have covered
    in all previous chapters. The second method is using Qt Quick controls and the
    QML scripting language, which we will be covering in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics :'
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to Qt Quick and QML
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Qt Quick Widgets and Controls
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Qt Quick Designer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Qt Quick Layouts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Basic QML Scripting
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Are you ready? Let's get started!
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to Qt Quick and QML
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the following section, we will learn what Qt Quick and QML are, and how we
    can make use of them to develop Qt applications without the need for writing C++
    code.
  prefs: []
  type: TYPE_NORMAL
- en: Introducing Qt Quick
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Qt Quick** is a module in Qt that provides a whole set of user-interface
    engines and language infrastructure for developing touch-oriented and visual-oriented
    applications. Instead of using the usual Qt Widgets for user-interface design,
    developers who choose Qt Quick will be using the Qt Quick objects and controls
    instead.'
  prefs: []
  type: TYPE_NORMAL
- en: Furthermore, developers will be writing their code using the QML language, which
    has similar syntax to **JavaScript**, rather than writing in C++ code. You can,
    however, use the C++ API provided by Qt to extend the QML application by cross-calling
    each language's functions (calling C++ functions in QML, and vice versa).
  prefs: []
  type: TYPE_NORMAL
- en: 'Developers can choose which method they prefer for developing their applications
    by choosing the right option when creating the project. Instead of choosing the
    usual Qt Widgets Application option, developers can pick Qt Quick Application,
    which tells Qt Creator to create different starting files and settings for your
    project that empowers the Qt Quick modules:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/43e54681-0742-4983-9a4e-70c933538d25.png)'
  prefs: []
  type: TYPE_IMG
- en: 'When you''re creating a Qt Quick Application project, Qt Creator will ask you
    to choose the Minimal required Qt version for your project:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3077a542-a06f-4c6a-96d6-2b84826ebc78.png)'
  prefs: []
  type: TYPE_IMG
- en: Once you have selected a Qt version, Qt Quick Designer will determine which
    features to enable and which widgets will appear on the QML Types window. We will
    talk more about those in later sections.
  prefs: []
  type: TYPE_NORMAL
- en: Introducing QML
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**QML** (**Qt Modeling Language**) is a user-interface markup language for
    designing touch-friendly user interfaces, similar to how CSS works on HTML. Unlike
    C++ or JavaScript, which are both imperative languages, QML is a declarative language.
    In declarative programming, you only express the logic in your script without
    describing its control flow. It simply tells the computer what to do, instead
    of how to do it. Imperative programing, however, requires statements to specify
    actions.'
  prefs: []
  type: TYPE_NORMAL
- en: 'When you open up your newly created Qt Quick project, you will see `main.qml`
    and `MainForm.ui.qml` in your project, instead of the usual `mainwindow.h` and
    `mainwindow.cpp` files. You can see this in the project directory in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fc36ad7d-787e-4a09-bde7-f95ab7c362df.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This is because the entire project will be mainly running on QML instead of
    C++. The only C++ file you will see is `main.cpp`, and all that does is load the
    `main.qml` file during the application startup. The code that does this in `main.cpp`
    is shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: You should have realized that there are two types of QML files, one with the
    extension `.qml`, and another with extension `.ui.qml`. Even though they are both
    running on the same syntax and so forth, they serve a very different purpose in
    your project.
  prefs: []
  type: TYPE_NORMAL
- en: First, the `.ui.qml` file (with an extra .`ui` at the beginning) serves as the
    declarative file for Qt Quick-based user interface design. You can edit a `.ui.qml`
    file, using the Qt Quick Designer visual editor, and easily design your application's
    GUI. You can also add your own code to the file, but there are some limitations
    on what code they can contain, especially those related to logic code. When you
    run your Qt Quick application, the Qt Quick engine will read through all the information
    stored in the `.ui.qml` file and construct the user interface accordingly, which
    is very similar to the `.ui` file used in Qt Widgets applications.
  prefs: []
  type: TYPE_NORMAL
- en: Then, we have another file with only the `.qml` extension. This file is only
    used for constructing the logic and functionality in your Qt Quick application,
    much like the `.h` and `.cpp` files used in the Qt Widget application. These two
    different formats separate the visual definitions of your application from its
    logic blocks. This allows the developer to apply the same logic code to different
    user interface templates. You cannot open a `.qml` file using Qt Quick Designer,
    since it is not used for GUI declaration. `.qml` files are written by developers
    by hand, and they have no restrictions on the QML language features they use.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s look at the differences with both of these QML files by first opening
    up `MainForm.ui.qml`. By default, Qt Creator will open up the user interface designer
    (Qt Quick Designer); however, let''s move over to code-editing mode by pressing
    the Edit button on the left panel:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d2c87dda-ef9d-45f7-89c1-0bc053484c75.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Then, you will be able to see the QML script that forms the user interface
    you just saw in the design mode. Let''s analyze this code to see how QML works
    compared to C++. The first thing you see in the `MainForm.ui.qml` is this line
    of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This is quite straightforward; we need to import the `Qt Quick` module with
    the appropriate version number. Different Qt Quick versions may have different
    functionalities, and support different widget controls. Sometimes, even the syntax
    could be slightly different. Please make sure you pick the right version for your
    project, and that it supports the features you need. If you don't know which version
    to use, do consider the latest version.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we will see different GUI objects (which we call QML types) being declared
    between two curly braces. The first one that we see is a `Rectangle` type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The `Rectangle` type, in this case, is the window background, much like the
    central widget used in the Qt Widget Application project. Let''s look at the other
    QML types that are under the `Rectangle`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The `MousArea` type, as its name implies, is an invincible shape that detects
    mouse clicks and touch events. You can basically turn anything into a button by
    placing a `MouseArea` on top of it. After that, we also have a `TextEdit` type,
    which acts exactly like a `Line Edit` widget in a Qt Widget Application.
  prefs: []
  type: TYPE_NORMAL
- en: You may have noticed that there are two properties in the `Rectangle` declaration
    that carry the `alias` keyword. These two properties expose the `MouseArea` and
    `TextEdit` types, and allow other QML scripts to interact with them, which we
    will learn how to do next.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, open up `main.qml` and look at its code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: In the code above, there is a `Window` type that is only available by importing
    the `QtQuick.Window` module. After setting the properties of the `Window` type,
    the `MainForm` type is declared. This `MainForm` type is actually the entire user
    interface  we saw previously in `MainForm.ui.qml`. Since the `MouseArea` and `TextEdit` types
    have been exposed in `MainForm.ui.qml`, we can now access and make use of them
    in `main.qml`.
  prefs: []
  type: TYPE_NORMAL
- en: QML also uses the signal-and-slot mechanism provided by Qt, but in a slightly
    different form of writing, since we're no longer writing C++ code. For example,
    we can see `onClicked` being used in the code above, which is a built-in signal
    equivalent to `clicked()` in a Qt Widgets Application. Since the `.qml` file is
    the place where we define the application logic, we can define what happens when
    `onClicked` is being called. On the other hand, we cannot do the same in `.ui.qml` since
    only visual-related code is allowed in it. You will get warnings from Qt Creator
    if you try to write logic-related code in a `.ui.qml` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Just like the Qt Widgets Application, you can also build and run the project
    the same way as before. The default example application looks something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/cfbfa37c-2ba3-4e65-b456-4735c5c90efa.png)'
  prefs: []
  type: TYPE_IMG
- en: You might realize that the build process is pretty fast. This is because QML
    code doesn't get compiled into binary by default. QML is an interpreted language,
    just like JavaScript, and thus it doesn't need to be compiled in order for it
    to be executed. All the QML files will just get packed into your application's
    resource system during the build process. Then, the QML files will be loaded and
    interpreted by the Qt Quick engine once the application is started.
  prefs: []
  type: TYPE_NORMAL
- en: However, you can still choose to compile your QML scripts into binary, using
    the `Qt Quick Compiler` program included in Qt, to make the code execution slightly
    faster than usual. It is an optional step that is not required unless you are
    trying to run your application on an embedded system that has very limited resources.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have understood what **Qt Quick **and **QML** language are, let's
    take a look at all the different QML types provided by Qt.
  prefs: []
  type: TYPE_NORMAL
- en: Qt Quick widgets and controls
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In Qt Quick's realm, widgets and controls are known as `QML types`. By default,
    **Qt Quick Designer** provides us with a set of basic QML types. You can also
    import additional QML types that come with different modules. Furthermore, you
    can even create your own custom QML types if none of the existing ones fit, your
    needs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at what QML types come with Qt Quick Designer by default.
    First off, here are the QML types under the Basic category:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/87221c3c-f5cb-4409-a1aa-2e1b86f76030.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s have a look at the different options:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Border Image**: Border Image is a QML type that is designed to create scalable
    rectangular shapes that can maintain their corner shapes and borders.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Flickable**: Flickable is a QML type that contains all its children types,
    and, displays them within its clipping area. Flickable has also been extended
    and used by the `ListView` and `GridView` types for scrolling long content. It
    can also be moved by a touchscreen flick gesture.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Focus Scope**: Focus Scope is a low-level QML type that is used to facilitate
    the construction of other QML types that can acquire keyboard focus when being
    pressed or released. We usually don''t directly use this QML type, but rather
    use other types that are directly inherited from it, such as `GroupBox`, `ScrollView`,
    `StatusBar`, and so on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Image**: The `Image` type is pretty much self-explanatory. It loads an image
    either locally or from a network.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Item**: The `Item` type is the most basic QML type for all visual items in
    Qt Quick. All the visual items in Qt Quick inherit from this `Item` type.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Mouse****Area**: We have seen the example usage of the `MouseArea` type in
    the default Qt Quick Application project. It detects mouse clicks and touch events
    within a predefined area, and calls the clicked signal whenever it detects one.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Rectangle**: A `Rectangle` QML type is pretty similar to the `Item` type,
    except it has a background that can be filled with solid color or a gradient.
    Optionally, you can also add a border to it with its own color and thickness.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Text**: The `Text` QML type is also pretty self-explanatory. It simply displays
    a line of text on the window. You can use it to display both plain and rich text
    with a specific font family and font size.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Text Edit**: The Text Edit QML type is equivalent to the `Text Edit` widget
    in Qt Widgets Application. It allows the user to key in the text when being focused.
    It can display both plain and formatted text, which is very different from the
    `Text Input` type.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Text Input**: The Text Input QML type is equivalent to the Line Edit widget
    in Qt Widgets Application, in that it can only display a single line of editable
    plain text, which is different from the `Text Edit` type. You can also apply an
    input constraint to it through a validator or input mask. It can also be used
    for password input fields by setting the `echoMode` to `Password` or `PasswordEchoOnEdit`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The QML types that we have discussed here are the most basic ones that come
    with Qt Quick Designer by default. These are also the basic building blocks used
    for constructing some other more complex QML types. There are many additional
    modules that come with Qt Quick that we can import into our project, for example,
    if we add the following line to our `MainForm.ui.qml` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'A bunch of additional QML types will then appear on your Qt Quick Designer
    when you switch over to Design mode:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/64d47d41-00c4-45c9-9bbe-80aff6dc8bd3.png)'
  prefs: []
  type: TYPE_IMG
- en: We won't go through all these QML types one by one, as there are too many of
    them. If you are interested in learning more about these QML types, please visit
    the following link:[ https://doc.qt.io/qt-5.10/qtquick-controls-qmlmodule.html](https://doc.qt.io/qt-5.10/qtquick-controls-qmlmodule.html)
  prefs: []
  type: TYPE_NORMAL
- en: Qt Quick Designer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Next, we will look at the Qt Quick Designer layout for the Qt Quick Application
    project. When you open up a `.ui.qml` file, Qt Quick Designer, the designer tool
    included in the Qt Creator toolset, will be launched automatically for you.
  prefs: []
  type: TYPE_NORMAL
- en: Those of you who have followed all the example projects since the very first
    chapter of this book may realize the Qt Quick Designer looks a bit different from
    the one we have been using all this time. This is because the Qt Quick project
    is very different from the Qt Widgets project, so naturally the designer tool
    should also look different to suit its needs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s look at how the Qt Quick Designer looks in the Qt Quick project:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a20022be-e9e5-4630-baa7-4c0b82b689c5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Library: The Library window displays all the QML types available for the current
    project. You can click and drag it to the canvas window to add it to your UI.
    You can also create your own custom QML type and display it here.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Resources: The Resources window displays all the resources in a list, which
    can then be used in your UI design.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Imports: The Imports window allows you to import different Qt Quick modules
    into your current project.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Navigator: The Navigator window displays the items in the current QML file
    as a tree structure. It''s similar to the object operator window in the Qt Widgets
    Application project.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Connections: The Connections window consists of several different tabs: Connections,
    Bindings, Properties, and Backends. These tabs allow you to add Connections (signal-and-slot),
    Bindings, and Properties to your QML file, without switching over to Edit mode.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'State Pane: State pane displays the different states in the QML project that
    typically describe UI configurations, such as the UI controls, their properties
    and behavior, and available actions.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Canvas: Canvas is the working area where you design your application UI.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Properties Pane: Similar to the property editor we used in Qt Widgets Application
    projects, the Properties pane in the QML designer displays the properties of the
    selected item. You can immediately see the result in the UI after changing the
    values here.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Qt Quick layouts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Just like the Qt Widget applications, a layout system also exists in Qt Quick
    applications. The only difference is it''s called the Positioners in Qt Quick:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ee431b85-661f-47d1-9709-8f4d7a64297b.png)'
  prefs: []
  type: TYPE_IMG
- en: The most noticeable similarity is the Column and Row positioners. These two
    are exactly the same as the Vertical Layout and Horizontal Layout in Qt Widgets
    Application. Besides that, the Grid positioner is also the same as the Grid Layout.
  prefs: []
  type: TYPE_NORMAL
- en: The only extra thing in Qt Quick is the Flow positioner. The items contained
    within the Flow positioner arrange themselves like words on a page, with items
    arranged in lines along one axis, and lines of items placed next to each other
    along another axis.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/931898a3-240c-472c-91f7-58409ec5cbc9.png)'
  prefs: []
  type: TYPE_IMG
- en: Basic QML scripting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the following section, we will learn how to create our very first Qt Quick
    application using Qt Quick Designer and QML!
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Without further ado, let's put our hands on QML and create a Qt Quick application
    ourselves! For this example project, we are going to create a dummy login screen
    using Qt Quick Designer and a QML script. First, let's open up Qt Creator and
    create a new project by going to File | New File or Project...
  prefs: []
  type: TYPE_NORMAL
- en: 'After that, select Qt Quick Application and press Choose.... After that, press
    Next all the way until the project is created. We are just going to use all the
    default settings for this example project, including the Minimal required Qt version:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f61ed1c4-6c26-438d-a9d0-adfe3d663049.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the project has been created, we need to add a few image files to our
    project, so that we can use them later:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/984d0ff3-798c-46fe-9d4c-5b9745e3590c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You can get the source files (including these images) at our GitHub page: [http://github.com/PacktPublishing/Hands-On-GUI-Programming-with-C-QT5](http://github.com/PacktPublishing/Hands-On-GUI-Programming-with-C-QT5)'
  prefs: []
  type: TYPE_NORMAL
- en: 'We can add these images to our project by right-clicking on the `qml.qrc` file
    in the Project pane and selecting Open in Editor. Add a new prefix called `images`,
    and add all the image files into that prefix:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/44cb6357-0d0f-4a8c-83c4-c8182c2cafbb.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After that, open up `MainForm.ui.qml`, and delete everything in the QML file.
    We start all over by adding an Item type to the canvas, set its size to 400 x
    400, and call it the `loginForm`. After that, add an `Image` type underneath it,
    and call it `background`. We then apply the background image to the `Image` type,
    and the canvas now looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/885c2157-4e28-477d-8ccd-ebc2c3e669ec.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Then, add a `Rectangle` type under the `Image` type (background), and open
    up the Layout tab in the Properties pane. Enable both the vertical and horizontal
    anchor options. After that, set the `width` to `402`, the `height` to `210`, and
    the `vertical anchor margin` to `50`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4b63ff3b-64b7-4cf3-919d-de2c5407db44.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Following that, we set the rectangle''s color to `#fcf9f4` and border color
    to `#efedeb`, then set the border value to `1`. The user interface so far looks
    something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2046715a-edfc-44b7-bd96-490ea0da78b6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, add an Image QML type under the rectangle, and set its anchor settings
    to top anchor and horizontal anchor. We then set its top anchor margin to `-110`
    and apply the logo image to its `image source` property. You can turn the QML
    type''s bounding rectangle and stripes on and off by clicking on the little button
    located on top of your canvas, so that it''s easier to look at the result, especially
    when your canvas is full of stuff:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fd8bc259-88d1-458d-bcae-9d0aa18e09ab.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Then, we add three `Rectangle` types to the canvas under the `loginRect` rectangle,
    and call them `emailRect`, `passwordRect`, and `loginButton`. The anchor settings
    for the rectangles are shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b5ff6a01-25f6-4081-92bb-6e0607e3bf95.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Then, we set the `border` value of both the `emailRect` and `passwordRect` to
    `1`, the `color` to `#ffffff` and the `bordercolor` to `#efedeb`. As for the `loginButton`,
    we set the `border` to `0`, the `radius` to `2` and the `color` to `#27ae61`.
    The login screen now looks like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d5578076-0799-402b-a013-554a56330e25.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Looks good so far. Next, we''re going to add a `TextInput`, `Image`, `MouseArea`,
    and a `Text` QML type to both the `emailRect` and the `passwordRect`. Since there
    are many QML types here, I will list the properties that need to be set:'
  prefs: []
  type: TYPE_NORMAL
- en: 'TextInput:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Selection color set to `#4f0080`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enable left anchor, right anchor, and vertical anchor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Left anchor margin `20`, right anchor margin `40` and vertical margin 3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Set echoMode to Password for password input only
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Image:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enable right anchor and vertical anchor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Right anchor margin set to `10`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Set image source to email icon or password icon respectively
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Set image fill mode to PreserveAspectFit
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'MouseArea:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enable fill parent item
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Text:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Set the text property to `E-Mail` and `Password` respectively
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Text color set to `#cbbdbd`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Text alignment set to Left and Top
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enable left anchor, right anchor, and vertical anchor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Left anchor margin `20`, right anchor margin `40`, and vertical margin -1
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Once you're done, add a `MouseArea` and `Text` to the `loginButton` as well.
    Enable `fill parent item` for the `MouseArea`, and enable both `vertical` and
    `horizontal anchors` for the `Text` QML type. Then, set its `text` property to
    `LOGIN`.
  prefs: []
  type: TYPE_NORMAL
- en: You don't have to follow all my steps by 100%, they are just a guideline for
    you to achieve a similar result as the screenshot above. However, it's better
    for you to apply your own design and create something unique!
  prefs: []
  type: TYPE_NORMAL
- en: 'Phew! After the long process above, our login screen should now look something
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b17e64f5-faef-47a9-abd5-88669f766d47.png)'
  prefs: []
  type: TYPE_IMG
- en: 'One last thing we need to do before moving on to `main.qml` is to expose some
    of the QML types in our login screen, so that we can link it to our `main.qml`
    file for logic programming. We can, in fact, do this directly on the designer
    tool. All you need to do is to click on the small rectangle icon located next
    to the object name, and make sure the three lines on the icon are penetrating
    the rectangular box, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/882dcceb-99d9-4358-9e59-a444ab53d9d3.png)'
  prefs: []
  type: TYPE_IMG
- en: The QML types that we need to expose/export are `emailInput` (TextInput), `emailTouch`
    (MouseArea), `emailDisplay` (Text), `passwordInput` (TextInput), `passwordTouch`
    (MouseArea), `passwordDisplay` (Text), and `loginMouseArea` (MouseArea). Once
    you have done all that, let's open up `main.qml`.
  prefs: []
  type: TYPE_NORMAL
- en: 'At first, our `main.qml` should look something like this, which will just open
    an empty window:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'After that, add in the `MainForm` object, and set its anchor setting to `anchors.fill:
    parent`. Then, print out a line of text, `Login pressed`, on the console window
    when the `loginButton` is clicked (or touched, if running on the touch device):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: After that, we are going to program the behavior when the `MouseArea` on the
    email input is clicked/touched. Since we are manually creating our own text field,
    instead of using the `TextField` QML type provided by the `QtQuick.Controls` module,
    we must manually hide and show the `E-Mail` and `Password` text displays, as well
    as changing the input focus when the user  clicks/touches down on the `MouseArea`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The reason why I chose not to use the `TextField` type is that I can hardly
    customize the `TextField''s` visual presentation, so why don''t I create my own?
    The code for doing manual focus for the email input looks like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'After that, do the same for the password field:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'That''s it; we''re done! You can now compile and run the program. You should
    get something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e4f5430c-1afb-4481-842b-fa0dcb61ffea.png)'
  prefs: []
  type: TYPE_IMG
- en: If you're not seeing the images, and are getting error messages that say Qt
    is unable to open the images, please go back to your `MainForm.ui.qml` and add
    in the prefix `image/` to the front of the source property. This is because Qt
    Quick Designer loads the images without the prefix, while your final program needs
    the prefix. After you have added the prefix, you may realize you no longer see
    the images getting displayed on Qt Quick Designer, but it will work just fine
    in your final program.
  prefs: []
  type: TYPE_NORMAL
- en: I'm not sure if this is a bug or if they intended it like that. Hopefully, Qt's
    developers can get it fixed, and we won't have to do that extra step anymore.
    That's it; hopefully, you have understood the similarities and differences between
    Qt Widgets Application and Qt Quick Application. You can now pick the best option
    from the two to fit your project's needs!
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have learned what Qt Quick is and how to create a program
    using the QML language. In the following chapter, we are going to learn how to
    export our Qt project to different platforms without much hassle. Let's go!
  prefs: []
  type: TYPE_NORMAL
