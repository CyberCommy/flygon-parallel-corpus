- en: Preface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Python is the preferred choice of developers, engineers, data scientists, and
    hobbyists everywhere. It is a great scripting language that can power your applications
    and provide great speed, safety, and scalability. By exposing Python as a series
    of simple recipes, you can gain insights into specific language features in a
    particular context. Having a tangible context helps make the language or standard
    library feature easier to understand.
  prefs: []
  type: TYPE_NORMAL
- en: This book takes a recipe-based approach, where each recipe addresses specific
    problems and issues.
  prefs: []
  type: TYPE_NORMAL
- en: What this book covers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Chapter 1](text00014.html#page "Chapter 1. Numbers, Strings, and Tuples")
    , *Numbers, Strings, and Tuples* , will look at the different kinds of numbers,
    work with strings, use tuples, and use the essential built-in types in Python.
    We will also exploit the full power of the Unicode character set.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 2](text00027.html#page "Chapter 2. Statements and Syntax") , *Statements
    and Syntax* , will cover some basics of creating script files first. Then we’ll
    move on to looking at some of the complex statements, including if, while, for,
    try, with, and raise.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 3](text00039.html#page "Chapter 3. Function Definitions") , *Function
    Definitions* , will look at a number of function definition techniques. We’ll
    also look at the Python 3.5 typing module and see how we can create more formal
    annotations for our functions.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 4](text00048.html#page "Chapter 4. Built-in Data Structures – list,
    set, dict") , *Built-in Data Structures – list, set, dict* , will look at an overview
    of the various structures that are available and what problems they solve. From
    there, we can look at lists, dictionaries, and sets in detail, and also look at
    some more advanced topics related to how Python handles references to objects.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 5](text00063.html#page "Chapter 5. User Inputs and Outputs") , *User
    Inputs and Outputs* , will explain how to use the different features of the print()
    function. We''ll also look at the different functions used to provide user input.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 6](text00070.html#page "Chapter 6. Basics of Classes and Objects")
    , *Basics of Classes and Objects* , will create classes that implement a number
    of statistical formulae.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 7](text00079.html#page "Chapter 7. More Advanced Class Design") ,
    *More Advanced Class Design* , will dive a little more deeply into Python classes.
    We will combine some features we have previously learned about to create more
    sophisticated objects.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 8](text00088.html#page "Chapter 8. Functional and Reactive Programming
    Features") , *Functional and Reactive Programming Features* , provides us with
    methods to writing small, expressive functions that perform the required data
    transformations. Moving ahead, you will learn about the idea of reactive programming,
    that is, having processing rules that are evaluated when the inputs become available
    or change.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 9](text00099.html#page "Chapter 9. Input/Output, Physical Format,
    and Logical Layout") , *Input/Output, Physical Format, Logical Layout* , will
    work with different file formats such as JSON, XML, and HTML.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 10](text00111.html#page "Chapter 10. Statistical Programming and Linear
    Regression") , *Statistical Programming and Linear Regression* , will look at
    some basic statistical calculations that we can do with Python’s built-in libraries
    and data structures. We’ll look at the questions of correlation, randomness, and
    the null hypothesis.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 11](text00120.html#page "Chapter 11. Testing") , *Testing* , will
    give us a detailed description of the different testing frameworks used in Python.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 12](text00129.html#page "Chapter 12. Web Services") , *Web Services*
    , will look at a number of recipes for creating RESTful web services and also
    serving static or dynamic content.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 13](text00137.html#page "Chapter 13. Application Integration") , *Application
    Integration* , will look at ways that we can design applications that can be composed
    to create larger, more sophisticated composite applications. We’ll also look at
    the complications that can arise from composite applications and the need to centralize
    some features, such as command-line parsing.'
  prefs: []
  type: TYPE_NORMAL
- en: What you need for this book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: All you need to follow through the examples in this book is a computer running
    any recent version of Python. While the examples all use Python 3, they can be
    adapted to work with Python 2 only a few changes.
  prefs: []
  type: TYPE_NORMAL
- en: Who this book is for
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The book is for web developers, programmers, enterprise programmers, engineers,
    and big data scientists. If you are a beginner, Python Cookbook will get you started.
    If you are experienced, it will expand your knowledge base. A basic knowledge
    of programming would help.
  prefs: []
  type: TYPE_NORMAL
- en: Conventions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this book, you will find a number of text styles that distinguish between
    different kinds of information. Here are some examples of these styles and an
    explanation of their meaning.
  prefs: []
  type: TYPE_NORMAL
- en: 'Code words in text, database table names, folder names, filenames, file extensions,
    pathnames, dummy URLs, user input, and Twitter handles are shown as follows: "We
    can include other contexts through the use of the include directive."'
  prefs: []
  type: TYPE_NORMAL
- en: 'A block of code is set as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Any command-line input or output is written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: New terms and important words are shown in bold.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Warnings or important notes appear in a box like this.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Tips and tricks appear like this.
  prefs: []
  type: TYPE_NORMAL
