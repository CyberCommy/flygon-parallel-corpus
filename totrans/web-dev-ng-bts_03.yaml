- en: Bootstrap - Grid Layout and Components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Hey—you made it to [Chapter 3](6694dd13-5500-4563-9688-74a21a06a9a9.xhtml),
    *Bootstrap – Grid Layout and Components.* Awesome! Next on the agenda is to pour
    yourself a cup, or glass, of your favorite beverage, because this is a big and
    important chapter—and so you''re going to want to be awake for it. However, it''s
    not going to be all work and no play, because this chapter is where we''re going
    to start building our example application together and we should be able to have
    some fun with it. Along the way, we''ll also be covering quite a bit of material
    in various areas. Here''s the list of things that we''re going to cover:'
  prefs: []
  type: TYPE_NORMAL
- en: We're going to formally introduce our example application, called Listing Carousel,
    and this includes some suggestions for how you may leverage this application into
    something else that you may prefer doing—either alongside this book (instead of
    building Listing Carousel), or after finishing the book, if you'll first be building
    Listing Carousel along with me.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We're going to cover our game plan for how we're going to incrementally build
    our application throughout the book, and you will also see that we have a few
    alternative technologies to choose from for building Listing Carousel—or for an
    application of your choice that you may be inspired to build by the end of the
    book.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We're also going to take a look at Sass, which is a technology for making writing
    your CSS for your projects a little easier, and even more organized.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We''ll definitely be looking at Bootstrap—at both of its major parts: its responsive
    grid, and a few of its components.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In [Chapter 1](f1243d74-a120-408f-8181-cb379b457dd1.xhtml), *Quick Start*, we
    took a sneak peek at some of the wireframes that will make up our example application.
    Well, this chapter is where we're going to write the HTML code, leveraging Bootstrap,
    to bring the wireframes to life.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As bonus material, we'll also be looking at the process in which software projects
    go from inception to realization, using a real-life case study, Listing Carousel.
    This includes project phases, such as analysis, requirement gathering, use cases
    diagrams, wireframing, and implementation.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By the end of this chapter, our web pages will be hardcoded, and won't have
    any Angular code in them whatsoever. As we progress through the book, we will
    start to slowly bring them to life by gradually converting our Bootstrap application
    into a fully fledged Angular application by adding routing, Angular components,
    templates, data, and more.
  prefs: []
  type: TYPE_NORMAL
- en: A word about what this chapter is not
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter covers a lot of ground, including Sass, and Bootstrap's responsive
    grid and several of its components. However, this chapter is not comprehensive
    coverage of all you need to know about either of these things. The reasoning for
    this is simple—not only are there books devoted to Bootstrap, but Bootstraps's
    website is the ideal place for where to look up documentation on Bootstrap. Duplicating
    their documentation would not have been a good use of this book's pages, nor would
    it have been a good use of your time and hard-earned money. Instead, the smarter
    thing to do is to introduce Bootstrap's grid and components in a practical way—such
    as by building an application together in this book—and to just refer you to the
    official documentation as needed.
  prefs: []
  type: TYPE_NORMAL
- en: By the way, the same thing applies to [Chapter 5](7a55c9e9-7f80-41bc-9678-eb191fdc4c2d.xhtml), *Flex-Layout
    – Angular's Responsive Layout Engine*, [Chapter 8](784689d5-c12c-4a1d-b2a4-dfcdbe7e6d38.xhtml), *Working
    with NG Bootstrap*, and [Chapter 9](1a222c0e-7130-4ac2-959d-ae9d6cc1ca7d.xhtml), *Working
    with Angular Material*,because each of these technologies has their own official
    documentation.
  prefs: []
  type: TYPE_NORMAL
- en: 'My job is to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Introduce these technologies to you (and point you to their official documentation)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Demonstrate how they can be applied in a practical, interesting, and, hopefully,
    engaging way
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Encourage you to work through the entire book, so you can be well on your way
    to becoming an Angular web development guru
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By the way, Angular, of course, also has its own official documentation, but
    there's so much to it that it can be intimidating to even get started. In my experience,
    a far more interesting way to learn a new technology is by following a tutorial—and
    that is exactly what this book is—a comprehensive tutorial for building an application,
    with the added explanations and some bonus material sprinkled in throughout the
    chapters in the appropriate sections. If I did my job well, you should be able
    to build almost any application you are likely to need (or want) to build with
    Angular. That's the goal.
  prefs: []
  type: TYPE_NORMAL
- en: Let's now take a look at Listing Carousel, which is the example application
    we'll be building together.
  prefs: []
  type: TYPE_NORMAL
- en: Our example application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Listing Carousel, our example application for this book, is a real-life online
    application that provides realtors (that is, professional real-estate salespeople)
    with an opportunity to share their listings to their contacts on social media
    in an engaging and informative way. One of my companies owns and operates it.
  prefs: []
  type: TYPE_NORMAL
- en: The reason I chose this application is not so you can steal my code and try
    to compete with me (which would be totally uncool and not recommended), but rather
    because with some tweaks here and there, you can turn the application into your
    very own online service if you wanted to. For example, you can easily turn this
    application into a classified application (such as Craigslist, or Kijiji) by just
    adding search capability, or even into a dating/matchmaking site by adding search,
    and just a bit more code. Or, if you love food, how about turning it into a restaurant
    site? Sign up restaurants to list their menus in the carousel—one meal or appetizer
    per slide—and then the restaurant owners can share their menus with their social
    media circles. Or, if you like having new ways to share photo albums, you can
    turn the application into something like that. One idea I had a while ago was
    to create a site where people can showcase their portfolios (such as for artists,
    architects, and photographers)—feel free to build something like that and run
    with it. The options are truly endless. The point is, I wanted to come up with
    a fun application for the book—one that would give you some motivation to work
    through the entire book. Why? Simple—because I know that this book would not be
    as valuable as it can be to you if all you were to do is to read it. So, commit
    to dive into the code with me and build something that you would enjoy. Who knows,
    maybe you will come up with a great idea for a profitable online business! My
    goal is to make the time you invest in working through this book as time well
    spent and, if I succeed, you can then give this book a five-star review (wink). Does
    this sound good?
  prefs: []
  type: TYPE_NORMAL
- en: Game plan
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There's a step-by-step game plan for using Listing Carousel as our focal point
    for our discussions as we cover the material in this book together. Though this
    book was not explicitly broken up into parts (that is, groupings of chapters),
    we can loosely group them now by partitioning the work we need to do for building
    our application into three main stages. Follow along with me, and this will all
    make sense—giving us a way to marry the material (that is, the book's chapters)
    to the application we'll be building together, as well as to give ourselves a
    target for what we're shooting for.
  prefs: []
  type: TYPE_NORMAL
- en: 'It''s nice to know where you''re going before you start driving and to be able
    to recognize where you are at all times. Having a roadmap/game plan like that
    makes the entire process more enjoyable, thereby maximizing the chances that you''ll
    work through the book instead of just using it to look things up here and there.
    This book wasn''t designed to be like a cookbook. Instead, it was designed to
    teach you how to cook. You will learn to cook by fire (pun intended), by preparing
    a meal of the right complexity—which demands a certain level of knowledge and
    skill to cook it properly. There are four main benefits of this book:'
  prefs: []
  type: TYPE_NORMAL
- en: It gives you all the ingredients and even substitutes ingredients (that is,
    choices) that you need to prepare the meal.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It gives you the knowledge and teaches you the process and skills required of
    the chef in order to cook the meal.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It does these things in a methodological way so you learn it effectively and
    as efficiently as possible.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The meal selection is a dish representative of the complexity of the majority
    of dishes you're likely to need to cook up. In other words, if you learn how to
    cook this meal (that is, our example application), you should be confident in
    being able to prepare any meal that you will be asked to prepare.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cooking analogies aside, this book's promise is to teach you how to build a
    practical application using Angular through a methodological process. After all,
    if you think about it, that's why you bought this book—isn't it? Otherwise, you
    could have just tried to Google things here and there, hoping to be able to eventually
    piece everything together. That's not fun, nor is it an intelligent way to go
    about learning Angular. When you want to learn something new, or take rudimentary
    skills to the next level—in anything, not just Angular—you need to have a target
    in mind, and a roadmap/game plan to get there. Well, we know our target, which
    is to build Listing Carousel, learning Angular, and a bunch of other goodies,
    along the way. So let's now take a look at our game plan.
  prefs: []
  type: TYPE_NORMAL
- en: In phase 1 of building our application, we need to decide what to build, what
    features it will have, and what it will look like. Once we have that all scoped
    out and wireframed, the next step is to build out the skeleton for our application.
    By the end of this stage, our application is likely to just be hardcoded—being
    nothing more than some HTML and CSS. Our only components will be the ones we select
    to use from Bootstrap's library of components. You can think of this as our application
    having skin and bones, but not yet having guts or a beating heart.
  prefs: []
  type: TYPE_NORMAL
- en: In phase 2 of building our application, well, you guessed it, we're going to
    start giving our skin and bones application some guts! Specifically, it will be
    Angular guts! Remember, in the first phase, we're not even using Angular at all—not
    a single ounce of it—which is intentional. Though our application will surely
    be more lively by the end of this second phase than what it will be in its first
    phase, it'll behave more like a robot—very mechanical. If you remember the movie, *The
    Wizard of Oz*, it will be like the Tin Man–very much alive, but with no heart.
    This second phase (that is, giving our application some guts) will be comprised
    of [Chapter 4](66c21daa-b131-470d-a21b-0fbed56c3ec9.xhtml), *Routing, *[Chapter
    7](cd8509d5-4bce-4056-8156-557186df18cd.xhtml), *Templates, Directives, and Pipes*,
    and [Chapter 6](acd5e47c-07a7-4954-993d-360134221325.xhtml), *Building Angular
    Components*.
  prefs: []
  type: TYPE_NORMAL
- en: Last, but not least, in phase 3 of building our application, we'll finally be
    giving our Tin Man a heart! Yeah! OK—what gives our application a heart? The answer
    is data and APIs! The data is like blood for our application, and the APIs are
    like the heart—taking data in and pushing data back out. I bet you never thought
    of web applications in this way, and, from now on, you won't be able to think
    of them in any other way (smiling). This third phase will comprise [Chapter 10](5f27121b-6fb2-4429-aa6e-394aec2152ac.xhtml),
    *Working with Forms,* [Chapter 12](9610f27b-03db-4258-8a68-24eb3901117b.xhtml),
    *Integrating Backend Data Services*, [Chapter 11](437face8-d59c-42f3-a49a-af43f2892f7a.xhtml),
    *Dependency Injection and Services, *and [Chapter 14](485921eb-86e2-4068-b314-5c62a1545c22.xhtml),
    *Advanced Angular Topics*.
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 13](0e54e15a-bc1a-402b-adaa-28f877c68323.xhtml), *Unit Testing*, and
    [Chapter 15](f81ae891-b2dc-4620-bb4a-ad099c96e8a0.xhtml), *Deploying Angular Applications*,
    are not really parts of any of the phases *per se,* but they play a very important
    supporting role. In these two chapters, we will learn how to test the code we
    write for our application, and how to deploy it in a couple of different ways.'
  prefs: []
  type: TYPE_NORMAL
- en: That's our big picture look at our game plan. Let's zoom in a little, and take
    a look at our five-step game plan for our first phase of building our application,
    and we'll then be on our way to our first technology topic, SASS.
  prefs: []
  type: TYPE_NORMAL
- en: '**Step 1**: In this chapter, we''re going to look at Bootstrap''s responsive
    grid, as well as several of Bootstrap''s components:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I'll be explaining how Bootstrap's grid works and can help us lay out our web
    pages.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I'll cover the Bootstrap components that we'll be using on our pages as we build
    out the pages—and we'll be using our wireframes to guide us, in conjunction with
    Bootstrap's grid.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Step 2**: In [Chapter 5](7a55c9e9-7f80-41bc-9678-eb191fdc4c2d.xhtml), *Flex-Layout
    – Angular''s Powerful Responsive Layout Engine,* we''re going to replace Bootstrap''s
    grid system with Flex-layout. We''ll only be doing this with a couple of web pages,
    leaving all the others with the Bootstrap grid. There are two reasons why we''ll
    be doing this:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To show you that there are always alternate options available—and you can often
    mix and match these alternatives.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Being able to mix and match provides us with a path to replace one technology
    with another without the need to do it all in one shot. We don't want to keep
    rebuilding things in their entirety—we just want to redo enough of a couple of
    pieces of what we built originally in order to learn how to apply that specific
    alternate technology.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Step 3**: In [Chapter 6](acd5e47c-07a7-4954-993d-360134221325.xhtml), *Building
    Angular Components,* we''ll be looking at how we can build our own components
    for use in our web pages. Since we are in control of the HTML and CSS when creating
    our components, we can leverage Bootstrap''s components for the look and feel
    when creating our own Angular components. Note: [Chapter 7](cd8509d5-4bce-4056-8156-557186df18cd.xhtml),
    *Templates, Directives, and Pipes*, is a part of this as well, since these two
    chapters go together.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Step 4**: In [Chapter 8](784689d5-c12c-4a1d-b2a4-dfcdbe7e6d38.xhtml), *Working
    with NG Bootstrap,* we will discover that there are ready-made *Angular-ready* Bootstrap
    components. Just as we will replace Bootstrap''s grid with Flex-layout for a couple
    of our pages, we will do the same thing with components—that is, to replace a
    couple of Bootstrap components with components from the NG Bootstrap project.
    Our motivation for doing this is to realize that there are many different third-party
    components that we can readily use for our Angular applications—including ones
    that are based on Bootstrap''s components.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Step 5**: In [Chapter 9](1a222c0e-7130-4ac2-959d-ae9d6cc1ca7d.xhtml), *Working
    with Angular Material,* we will once again replace a couple of our Bootstrap components,
    but this time, they will not have any relation to Bootstrap components. The Angular
    Material project has beautifully designed components that are tailor-made for
    use in Angular applications and we''ll learn how to incorporate a couple of those
    into our application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Again, the important thing to note here is that we have choices in terms of
    technologies for both laying out our web pages, and as to which components we
    use—including creating our own custom components—when building our Angular applications.
    Furthermore, as you'll see in [Chapter 12](9610f27b-03db-4258-8a68-24eb3901117b.xhtml), *Integrating
    Backend Data Services*, you have virtually unlimited choices as to server-side
    and database technology stacks. And, in [Chapter 14](485921eb-86e2-4068-b314-5c62a1545c22.xhtml), *Advanced
    Angular Topics*, we will explore a couple of third-party authentication APIs we
    may want to leverage for our application instead of writing our own from scratch.
  prefs: []
  type: TYPE_NORMAL
- en: Yup! We have a ton of interesting stuff to cover in this book together. That
    said, let's focus on first things first, and get started with the goodies this
    chapter has to offer: Sass, Bootstrap, the typical evolution of software projects
    (that is, inception to realization), and building out our pages for Listing Carousel
    using Bootstrap (that is, Phase 1 of building our application). I'll provide a
    similar game plan for phase 2 of building our application at the start of [Chapter
    7](cd8509d5-4bce-4056-8156-557186df18cd.xhtml), *Templates, Directives, and Pipes*,
    and one final game plan for phase 3 of building our application at the start of
    [Chapter 12](9610f27b-03db-4258-8a68-24eb3901117b.xhtml), *Integrating Backend
    Data Services*.
  prefs: []
  type: TYPE_NORMAL
- en: I know that was a lot of ground to cover, but reviewing our game plan was an
    important thing for us to do—it's always helpful to know where we are and where
    we're going. Now, let's pick up the pace and rip through the Sass crash course
    before our coverage of Bootstrap.
  prefs: []
  type: TYPE_NORMAL
- en: Sass crash course
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As is the case for most technologies, including all the ones mentioned in this
    book, such as ES6, Bootstrap, Node, and MongoDB, entire books can be written about
    them. Sass is no different. The goal of this crash course is not to turn you into
    a Sass expert, nor is it to regurgitate Sass's official documentation. Due to
    space constraints, the goal of the crash course is to merely introduce Sass to
    you, and to motivate you to explore it further on your own, either after you complete
    this book, or in parallel with it, because Sass is a really cool technology.
  prefs: []
  type: TYPE_NORMAL
- en: The Bootstrap team has adopted Sass for the Bootstrap project, and other technologies
    (such as Compass) are built on top of it. Strictly speaking, you don't have to
    know how to use Sass in order to write Angular applications—or even to work through
    this book—but it's a worthwhile technology to learn, and so I encourage you to
    take a closer look on your own. Let's cover some Sass basics together now.
  prefs: []
  type: TYPE_NORMAL
- en: What is Sass?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sass is an acronym for Syntactically Awesome StyleSheets—but, of course, there's
    more sassiness to Sass than the acronym! Sass is an extension to CSS, which gives
    us additional power and flexibility when writing our CSS for our web applications. Sass,
    when compiled, generates well-formatted CSS for us. Specifically, the additions
    to CSS that Sass brings to the table include things such as nested rules, variables,
    conditional logic, mathematics, mixins, and more. Additionally, Sass makes it
    easier to maintain and organize the style sheets in our web projects. We'll be
    taking a look at many of these things in this crash course.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sass is compatible with all versions of CSS, not just CSS3 and CSS4.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Thanks to the Angular CLI, Sass fits nicely into our Angular applications because
    the CLI compiles the SASS in our components for us by default.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sass's official website can be found here: [https://sass-lang.com/](https://sass-lang.com/).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compass framework
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Compass is a CSS authoring framework that is built on top of Sass, providing
    some neat additions, and will also compile your Sass to CSS. A compass is an option
    for you if you're working on non-Angular projects (remember, the Angular CLI takes
    care of compiling Sass to CSS for us for our Angular projects). We won't be covering
    Compass in this book, but I wanted to at least bring the technology to your attention
    because I know that Angular is not the only technology you'll be using as a web
    developer—however, as web developers, we can't avoid using CSS!
  prefs: []
  type: TYPE_NORMAL
- en: The takeaway point here is that you can simply use the Angular CLI for Sass
    for Angular projects, but do take a look at leveraging Compass for your non-Angular
    projects, especially if your project tends to be CSS heavy.
  prefs: []
  type: TYPE_NORMAL
- en: Large companies use Compass. Two of them that I know of, and whose online services
    I utilize on a daily bases, are LinkedIn ( [https://www.linkedin.com/](https://www.linkedin.com/)),
    the world's largest employment-oriented social networking service, and Heroku
    ([https://www.heroku.com](https://www.heroku.com/)), a super popular cloud application
    platform.
  prefs: []
  type: TYPE_NORMAL
- en: You can learn all you want to about Compass at their official website, which
    can be found here: [http://compass-style.org/](http://compass-style.org/). Another
    nice online reference that provides tutorials on Sass and Compass is named *The
    Sass Way*, and can be found here: [http://www.thesassway.com/](http://www.thesassway.com/).
  prefs: []
  type: TYPE_NORMAL
- en: Two SASS styles
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Sass has two flavors of syntax: the older syntax that relies on indentation,
    and the newer syntax that uses curly braces as opposed to indentation. Another
    difference between the two syntactical styles is that the old-style does not require
    semicolons at the end of the lines, where as the new style does require them.
    The file extensions between these two styles also differ—the older style''s file
    extension is `.sass`, and the current style''s file extension is `.scss`.'
  prefs: []
  type: TYPE_NORMAL
- en: Let's now look at a quick example of each one's CSS syntax. The first code block
    is the older style (`.sass`), and the second code block produces the same effect
    in the newer syntactical style (`.scss`). We'll be using the new style throughout
    the book.
  prefs: []
  type: TYPE_NORMAL
- en: 'The sample code given here is for writing `.sass` syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The sample code given here is for writing `.scss` syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The main difference between the two syntactical styles is that the older style
    aims to be terse, while the newer style aims to be more familiar to developers
    used to traditional CSS syntax.
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding code blocks, you may have noticed `$blue` and `$margin`. These
    are not CSS items, but rather they are examples of variables. You've probably
    also noticed division operators. Variables and mathematical evaluation are just
    a couple of things that can be in your Sass code. We'll see these and more Sass
    features a bit later in the sections that follow.
  prefs: []
  type: TYPE_NORMAL
- en: 'Regardless of which syntax you use—old or new—the compiled result is the same.
    If you were to take either of the preceding code blocks and run them through an
    online compiler, such as Sass* Meister* (I''ll mention this tool shortly as well),
    the resultant CSS will be the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Installing Ruby
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sass is written in Ruby, and so we need Ruby installed on our computers. To
    download and install the latest version navigate to Ruby's official site: [https://www.ruby-lang.org/en/downloads/](https://www.ruby-lang.org/en/downloads/).
    To find out if you already have Ruby installed on your machine, run this command
    on your command line or Terminal: `$ ruby -v`.
  prefs: []
  type: TYPE_NORMAL
- en: If Ruby is installed, the output will display the version number. For example,
    the output in my Terminal when I execute `$ ruby -v` is `ruby 2.4.1p111 (2017-03-22
    revision 58053) [x86_64-darwin16]`. Any version from 2.3 onward is more than good
    enough for our purposes.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Sass
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once you have Ruby installed, installing Sass is a breeze. Head on over to [https://sass-lang.com/install](https://sass-lang.com/install)
    and follow the directions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Just like you can get the version of Ruby by running `$ ruby -v` at your Terminal
    or command line, you can do the same thing with Sass. Execute this following command, `$
    sass -v`, to see what version of Sass you have on your system at your Terminal
    or command line. The output on my system shows the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Online tools for Sass
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are several online tools that we can use to compile our Sass files down
    to CSS files. One of the ones I like is named *Sass Meister*, and you can access
    it here: [http://www.sassmeister.com](https://www.sassmeister.com/).
  prefs: []
  type: TYPE_NORMAL
- en: I like it because it is super easy to use and provides decent help when there
    is a problem with your Sass syntax. It also supports both Sass syntaxes, the older
    style, and the newer style, and it also allows you to choose from a few different
    Sass compilers. You can find these settings under the Options menu option at the
    top of the window panes.
  prefs: []
  type: TYPE_NORMAL
- en: To use the tool, simply write your Sass code in the left pane, and the compiled
    CSS will appear in the right pane. Pay attention to the selected options so that
    the ones that are activated are the ones you want.
  prefs: []
  type: TYPE_NORMAL
- en: Offline tools for Sass
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Just as with online tools, we have several options that we can choose from to
    compile our Sass files down to CSS files using offline tools. I've used Koala
    because it's easy to use, is cross-platform, and is free. You can download Koala
    for free from the project's website: [http://koala-app.com/](http://koala-app.com/).
  prefs: []
  type: TYPE_NORMAL
- en: Koala gives you the ability to work with more than just Sass. You can also use
    Koala to compile and/or compress Less, JavaScript, CoffeeScript, and you can even
    use the Compass framework with it.
  prefs: []
  type: TYPE_NORMAL
- en: The best way to learn how to use Koala is to read the official documentation,
    which can be found at [https://github.com/oklai/koala/wiki#docs](https://github.com/oklai/koala/wiki#docs).
    But if you'll just be using Koala to compile your Sass files (at least for now),
    let me quickly outline the steps for you here to save you from needing to jump
    back and forth between the book and the online docs.
  prefs: []
  type: TYPE_NORMAL
- en: 'All you need to do is to create a web project using any text editor of your
    choice—such as Sublime Text or Visual Studio Code—and create a CSS folder as well
    as a Sass folder in your project''s root folder. You don''t need a completed project,
    of course—all you need is the very basic folder structure. Once the project structure
    is created, you can open Koala to get started, using it to compile your Sass files
    for you. Here are the basic steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create an empty project structure, which, as a minimum, has the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A root folder with an empty `index.html` page in it
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A CSS folder in the root folder with an empty `styles.css` file in it
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A Sass folder in the root folder with an empty style `.scss` file in it
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Open the Koala application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the large plus sign (+) in the top-left corner, navigate to your project's
    root folder, and select it. At this point, Koala will find your `styles.scss`
    and `styles.css` files.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on your `styles.scss` file in Koala's right-hand pane, select Set
    Output Path, and then navigate to, and select, your `styles.css` file in your
    file explorer
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Observing the preceding steps is all you need to do to set Koala up to compile
    your Sass files for you. The output of the compilation will be inserted into your
    `styles.css` file.
  prefs: []
  type: TYPE_NORMAL
- en: Sass features and syntax
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's now take a look at some of Sass's features that you are most likely to
    use in your applications. We won't be using all of these in our example application,
    but I wanted to show you some of the cool stuff that Sass has to offer.
  prefs: []
  type: TYPE_NORMAL
- en: Nesting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Using Sass, you can nest CSS rules within each other. Sass is not only easier
    to read, but it helps to avoid a lot of duplication of the CSS selectors. This
    is especially true for highly-nested CSS rules. Let''s look at a simple example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding Sass code will be compiled and the equivalent CSS code will be
    generated:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Variables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Sass variables are just like you would expect them to be: they store information
    that you''d like to reuse throughout your style sheet. This saves time and annoying
    errors. And just like global variables in other languages, you only need to define
    them in one place—so if they ever need to change, you just have to change the
    variable in one place, rather than change all of the occurrences in your CSS styles.'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can store almost anything. Here is an example where we store the font information
    and a font color:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding Sass code will be compiled and the equivalent CSS code will be
    generated:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Mathematical operations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Since Sass compiles down to CSS, you can have it do mathematical calculations
    for you instead of doing them yourself. You can also have the math be run on variables,
    as opposed to hardcoded numbers as in the following example, which, of course,
    is super handy to be able to do:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding Sass code will be compiled and the equivalent CSS code will be
    generated:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Imports
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Sass enables you to import one style sheet into another one using the `@import` directive.
    This does as it sounds, and is very straightforward. Let''s look at an example.
    In the following three code listings, the first one is the base style (`base.scss`)
    sheet that is applied to the entire site, and the second is the style sheet that
    is used for the report pages (`reports.scss`). The third is the resultant CSS
    style sheet we would get when the reports style sheet imports the base style sheet
    during Sass compilation. Note that the file extension is not required when using
    the `@import` directive in Sass:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding Sass code will be compiled and the equivalent CSS code will be
    generated:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Extend
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Using `@extend` lets you share a set of CSS properties from one selector to
    another. One selector can extend (that is, inherit) from another one using the
    `@extend` Sass directive. The following example shows a common set of style attributes
    for a set of three related styles—active, inactive, and terminated:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'When the preceding Sass code gets compiled, it turns into the following CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Mixins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Mixins are like named templates. They are Sass's way to allowing you of group
    CSS or Sass declarations (that is, CSS styles) together and give it a name. This
    way, you can include these declarations in other CSS classes as needed, without
    copying and pasting—which causes a bit of a mess should anything need to change
    later on. In a sense, they are also like variables because you only need to change
    something in one place (that is, in the mixin itself), but they are more powerful
    than variables, which is why I mentioned that they are like templates. In fact,
    mixins can even be parameterized using variables. Let's look at an example, and
    the preceding description should become clear as to what I mean when I say that
    mixins are like templates.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example of styling a dropdown that I like to use in my websites.
    We''ll parameterize the width so that we can create different sizes of dropdowns.
    Note the use of the `@mixin` directive:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'And here is how we can use the mixin (note the use of the `@include` directive):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'This will compile to the following CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: By now, you can see how cool Sass is and how much time it can save you, as well
    as how you can use it to avoid code duplication and avoid making the silly cut
    and paste mistakes.
  prefs: []
  type: TYPE_NORMAL
- en: And as if all this wasn't cool enough, Sass gives you a lot of power with its
    built-in functions. There are a ton of them, which is what gives Sass so much
    power and utility. You can take a look at them here: [http://sass-lang.com/documentation/Sass/Script/Functions.html](http://sass-lang.com/documentation/Sass/Script/Functions.html).
    We'll only be covering one, just to show you an example of how to use a function
    in the *Built-in Functions* section that follows.
  prefs: []
  type: TYPE_NORMAL
- en: Placeholders
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Placeholders are intended to be used with the `@extend` directive. Rulesets
    that do make use of placeholders, but which do not use the `@extend` directive,
    will not get rendered to CSS. A valid use case of using placeholders is if you
    are writing a Sass library for code reuse. You can write a Sass file that has
    placeholders, and which is meant to be included in another Sass file that you
    or someone else writes. If a ruleset in the Sass file imports the other Sass file
    that acts as a library, and the ruleset extends the placeholder in your library,
    it will be rendered to the CSS file when the Sass files are compiled. And, if
    no rulesets extend the placeholder, the placeholder will not be rendered/printed
    to the CSS file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at an example. Note that the placeholder is prefixed by
    a percent sign (`%`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding Sass code compiles down to the following CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Built-in functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When we covered Sass's extend feature, the border colors for each class were
    20% darker than their corresponding background colors. In order to find a color
    that is 20% darker than another, you have to do some tedious math—and if you decide
    to later change that percentage, it'll require more tedious math. Fortunately,
    Sass has built-in functions for us to do all sorts of things, including darkening
    and lightening colors and a whole lot more.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s revisit the Sass code we had seen in the previous *Extend* section,
    and this time write it more flexibly using variables and the built-in darken function
    in order to have Sass do the math for us. This way, it makes it easy to change
    the percentage later on if we choose to. The compiled output of the following
    Sass code would be the exact same as the compiled output in the previous *Extend*
    section, and so we won''t repeat that here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Custom functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sass gives us a lot of power through using its ready-to-use, built-in functions,
    but sometimes, there's no substitute for custom functions—functions that do exactly
    what you want for the project at hand. The folks on the Sass team knew this and
    thus gave us a way to add custom functions to our Sass files.
  prefs: []
  type: TYPE_NORMAL
- en: To wrap up this Sass crash course, let's take a quick look at how we can create
    a custom function. Our function will compute the width as a percentage given two
    parameters, the number of columns for the target width, and the total number of
    columns we have.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this short example, you''ll notice that we do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Make use of variables
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Perform some simple math
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use a built-in Sass function (that is, percentage)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Introduce two new Sass commands: `@function`, and `@return:`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'This compiles to the following CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: It's my hope that you'll find a place in your web development for Sass. It may
    seem like it's all just overkill at the moment, but when you take some time to
    play with it, I'm confident that you'll discover clever ways to use Sass to help
    you better organize your CSS, and have it help trim the fat of code duplication.
  prefs: []
  type: TYPE_NORMAL
- en: Let's now shift gears and take a quick look at Bootstrap.
  prefs: []
  type: TYPE_NORMAL
- en: Bootstrap crash course
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we're going to take a look at Bootstrap, in particular, its
    responsive grid and its components. We're going to cover just enough of Bootstrap's
    grid to give you a solid start on how to use it. We're also going to cover just
    five of Bootstrap's components to get you started. Bootstrap has a lot more than
    five components, and there are many ways you can customize each one of them. However,
    this is a crash course on Bootstrap and not a comprehensive manual—which is what
    would be needed to even attempt to cover Bootstrap in any level of detail. Bootstrap
    is a vast library with tons of options for its use, and thus it is far more important
    to just show you the basics and to show you where to go for further information
    on Bootstrap than it is to attempt to cover it exhaustively. The good news is
    that this crash course on Bootstrap is the fastest way to get you up and running
    with it.
  prefs: []
  type: TYPE_NORMAL
- en: 'The reasoning for taking this approach is the following:'
  prefs: []
  type: TYPE_NORMAL
- en: We won't be using all of the Bootstrap components for our example application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Our example application will also be made from ng-bootstrap components, and
    Angular Material components (which we''ll be covering in later chapters anyway:
    [Chapter 8](784689d5-c12c-4a1d-b2a4-dfcdbe7e6d38.xhtml), *Working with NG Bootstrap*,
    and [Chapter 9](1a222c0e-7130-4ac2-959d-ae9d6cc1ca7d.xhtml), *Working with Angular
    Material*)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The most important part of Bootstrap for us will be Bootstrap's Grid—and we'll
    be covering the grid in more detail than the five components we'll be looking
    at
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: However, unlike the Sass crash course, we will see how to use Bootstrap in a
    practical way, since we'll be using it directly in our example application as
    we lay out the home page in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: What is Bootstrap?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Bootstrap is a CSS framework for building responsive websites, with an emphasis
    on being mobile-first. While there are other frontend presentation frameworks,
    Bootstrap is still the king of the hill in this arena—not only due to being the
    one with the most mind share, but it probably has the most *runtime*. What I mean
    by runtime is the number of times it''s been used in websites, and thus it has
    been put through its paces more than the other CSS frameworks. Bootstrap''s leading
    mind share (that is, popularity) is primarily due to three things:'
  prefs: []
  type: TYPE_NORMAL
- en: It was one of the very first frameworks of its kind (so the competition was
    virtually non-existent)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It came with the backing of one of the top social websites in the world (that
    is, Twitter)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It has been around since August 2011, and so is mature
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Additionally, as we'll see in [Chapter 8](784689d5-c12c-4a1d-b2a4-dfcdbe7e6d38.xhtml),
    *Working with NG Bootstrap*, the ng-bootstrap project is all about creating Angular
    widgets using Bootstrap 4, which says a lot about what the Angular community thinks
    of Bootstrap.
  prefs: []
  type: TYPE_NORMAL
- en: There is a reason that this third edition remains true to the relationship between
    Angular and Bootstrap, and that is because they are each leaders in their respective
    niches, as well as being symbiotically compatible and complimentary. In fact,
    these two frameworks are all you need to build the frontend part of powerful web
    applications—choosing just about anything you like for building out the backend,
    since all backend frameworks these days can produce and consume JSON, including
    mainframes still running COBOL programs. This is because JSON has become the most
    popular way to integrate systems through messaging.
  prefs: []
  type: TYPE_NORMAL
- en: Motivation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you've ever tried to build a website that works well on different viewport
    sizes (that is, form factors/screen sizes) without the use of a framework to help
    you along, the motivation for Bootstrap is pretty easy to see—building something
    like that from scratch is both tedious and difficult. Mobile computing really
    escalated the need for something like Bootstrap to come along, and it was inevitable
    that it would. While the same can be said for just about any framework, in that
    you probably shouldn't spend time reinventing the wheel unless you have an extremely
    good set of reasons for doing so, it can be argued that (for the vast majority
    of websites, and even web applications) the frontend has become more important
    than the backend. It's been a fact for the last several years that the client
    side is the new black. I'm not suggesting that the backend is not important—nothing
    could be further from the truth, and [i](9610f27b-03db-4258-8a68-24eb3901117b.xhtml),
    *Integrating Backend Data Services*, is completely devoted to building out the
    backend. However, I am suggesting that when mobile computing came to be, we already
    had more than enough backend technologies and scores of frameworks to choose from,
    but were lacking in frontend frameworks.
  prefs: []
  type: TYPE_NORMAL
- en: The final comment I will add to conclude this motivation section is that killing
    two birds with one stone in the business world can give companies a competitive
    advantage (that is, speed to market) and/or financial advantage (that is, cost
    savings)—and so it isn't any different with software development. If you can build
    something once, in this case, a series of web pages, and use the same client-side
    code for both mobile and desktop instead of building two sets of everything (or
    even three sets, considering tablets as well), you should realize savings of both
    time and money. That is the promise—unfortunately, it is not always fulfilled.
    However, getting some advantage in these areas is certainly better than getting
    none at all.
  prefs: []
  type: TYPE_NORMAL
- en: Bootstrap's role in our example application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For our example application, Bootstrap will be used for only two purposes:'
  prefs: []
  type: TYPE_NORMAL
- en: To lay out the web page using its responsive grid
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To leverage, some of it's read-to-use components for quickly building a nicely
    styled UI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing Bootstrap
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Installing Bootstrap, for the purposes of learning it, will be different from
    how we'll install ng-bootstrap in our Angular application. This chapter focuses
    on Bootstrap's grid system as well as some of its components, and so we're going
    to keep things simple for now by not creating an Angular application—or make any
    use of Angular at all, just yet. By the end of this chapter, we'll just have our
    skin and bones application (as previously mentioned), which we will then be converting
    into a fully-fledged Angular application.
  prefs: []
  type: TYPE_NORMAL
- en: Let's get started with the minimal, and fastest, way to integrate Bootstrap
    into our HTML. To use all Bootstrap has to offer, we only need to add resource
    links to one style sheet, and three JavaScript files.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the HTML code that creates an empty HTML page that demonstrates
    the bare essentials to wire in Bootstrap:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Following the order of the linked files in the previous HTML code, here are
    what the one CSS file and the three JavaScript files are for:'
  prefs: []
  type: TYPE_NORMAL
- en: The `bootstrap.min.css` file is the minified style sheet for Bootstrap, which
    is where all the default styles are defined
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `jquery-3.2.1.slim.min.js` file is the minified JavaScript file containing
    the jQuery library and is referenced because Bootstrap itself relies on jQuery
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `popper.min.js` file is the minified JavaScript file for yet another third-party
    library called Popper and is referenced because Bootstrap makes use of the functionality
    therein for its Tooltip components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: And, finally, the `bootstrap.min.js` file is the minified JavaScript file for Bootstrap
    itself and is used for various components, such as the modal and drop-down components,
    which require JavaScript to function
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You''ll also notice that the links are resources to CDNs (that is, content
    delivery networks). Although there are other ways of installing Bootstrap in our
    website, the advantages of using CDNs are threefold:'
  prefs: []
  type: TYPE_NORMAL
- en: We don't need to download and include the files in our web project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The load time for the clients loading our web pages is minimized on account
    of the fact that these resources may have already been downloaded to their browsers
    while visiting other sites before ours
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The servers are optimized for delivering those assets (using caching and other
    hosting strategies)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will look at adding our navigation bar on our home page when we take a look
    at the Navs and the Navbar components later in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Bootstrap's responsive grid system
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: From my perspective, especially as a web developer that focuses on Angular,
    the most important thing that Bootstrap offers is a responsive grid. The reason
    for this is that there are many web / HTML components from many different libraries
    to choose from for web development (such as NG Bootstrap and Angular Material,
    both of which we'll be covering in later chapters) and, hence, we're not at all
    limited to just using Bootstrap's components. However, no matter which components
    you end up using, or if you create your own (as we'll learn how to do in [Chapter
    6](acd5e47c-07a7-4954-993d-360134221325.xhtml), *Building Angular Components*),
    the Bootstrap grid can still be used for building responsive layouts and greatly
    simplifying our laborious task of creating well-designed web applications.
  prefs: []
  type: TYPE_NORMAL
- en: Bootstrap's grid makes it really easy for us to lay out our pages for use with
    various viewport (that is, screen) sizes. We simply use special Bootstrap classes
    to dictate how things get positioned on our pages for the different viewport sizes
    that our applications may be running on.
  prefs: []
  type: TYPE_NORMAL
- en: If you've ever wondered if Bootstrap is built on top of anything else, the answer
    is, unsurprisingly, *yes*. Libraries and frameworks often piggy-back on one another.
    This is how modern software in the open-source world is built. After all, why
    reinvent the wheel when there are perfectly sound wheels already available for
    our use? We have already seen (from the previous section on installing Bootstrap)
    that Bootstrap relies on jQuery and Popper. Bootstrap's responsive grid system
    is built on top of the CSS Flexbox, which was introduced in CSS3.
  prefs: []
  type: TYPE_NORMAL
- en: There is a newer grid system in CSS4, called the CSS Grid, but Bootstrap 4 does
    not use it. Bootstrap uses CSS Flexbox. This does not mean that Bootstrap is behind
    the times because newer does not necessarily mean better. Some things are made
    easier using the CSS Grid, and other things remain easier using CSS Flexbox.
  prefs: []
  type: TYPE_NORMAL
- en: A bit later on, when we discuss Bootstrap's predefined classes that are used
    for aligning things vertically and horizontally within the grid, the class names
    may seem familiar to you if you are familiar with CSS Flexbox. This is because
    Bootstrap uses CSS Flexbox under the covers, and the class names were inspired
    by its class names.
  prefs: []
  type: TYPE_NORMAL
- en: The grid itself has three main parts to it (container, row, and column), and
    each one of these is a class defined in Bootstrap's CSS file—which is why it needs
    to be referenced in our pages.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is where the vernacular gets a little confusing, so let me explain something
    real quick. As you may know, there are no HTML elements named `container`, `row`,
    or `column`. We do, however, have the `div` element in HTML, and, in Bootstrap,
    we decorate it with a class—particularly, with a class of container, row, or column.
    But when we are talking about Bootstrap, it would be easier to pretend that there
    are HTML elements of these types. Let me clarify this because I''ll be referring
    to the Bootstrap row as the row element, and the Bootstrap column as the column
    element from here on. Here''s what I mean:'
  prefs: []
  type: TYPE_NORMAL
- en: It is easier to say *the container element*, rather than have to say *the div
    element with a class of container* (in code, this is what *the container element* looks
    like: `<div class="container">` )
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'It is easier to say *the row element*, rather than have to say *the div element
    with a class of row* (in code, this is what *the row element* looks like: `<div
    class="row">` )'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is easier to say *the column element*, rather than have to say *the div element
    with a class of column* (in code, this is what *the column element* looks like: `<div
    class="col">` )
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OK, I hope that makes sense.
  prefs: []
  type: TYPE_NORMAL
- en: The container
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The container is the root, or top-level element, in the grid. It holds one or
    more rows, which must be nested within the container, and the rows, in turn, can
    contain zero or more columns. To create a Bootstrap grid, we start off by creating
    a container—and to do that, we simply create a set of HTML `div` elements and
    assign the container class to the first `div` element.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is what this looks like in code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Ha! Do you see why I mentioned the previous stuff about a container element?
    It's a messy way to try and explain it. So, let's rephrase that now using our
    new vernacular.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create a Bootstrap grid, start off by adding a container element like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Ah, that is much easier to say and read! OK, back to our regular scheduled program...
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two types of containers that you can have—and it is their class name
    that differentiates them from one another:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: The row
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The row element must be nested within the container element. (Ha! I love this
    element stuff. Just try and explain it in writing without doing something like
    this!) A Bootstrap grid must contain at least one row and can contain as many
    rows as are needed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Adding to the previous container code, here is what the code for a grid looks
    like that has two rows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: A row does not have to contain a column at all—for example, you may simply just
    want empty space between two rows in your grid—but it can have a maximum width
    of 12 columns within it.
  prefs: []
  type: TYPE_NORMAL
- en: However, it is important to note that the number of columns a row has is not
    proportional to the number of nested column elements (we'll look at Bootstrap's
    notion of a column in the next section). This is because the total number of columns
    in a row is independent of the number of column elements in that row.
  prefs: []
  type: TYPE_NORMAL
- en: Let me show you three examples to clarify this notion by adding to the previous
    row code. I will explain what `class="col-4"` , `class="col-6"`, and, generally
    speaking, `class="col-x"` (where x is an integer ranging from 1 to 12), all mean
    right after the following three grid examples.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the first example, the grid has two rows, each of which has three columns
    of equal width:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'In the second example, the grid only has one row with two columns of equal
    width:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'In the third example, the grid also only has one row with two columns, but
    they are not of equal width. In fact, the first column only takes up 25% of the
    row''s total available width, and the second column takes up the remaining 75%:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: OK, now that we've seen three grid examples, we can discuss what on earth the `"col-x"` class
    names mean. The grid allows up to 12 columns per row, and each column element
    you embed in the row can span 1 to 12 columns—and is what the x represents. As
    a quick example, if we have a column element in our row, and we'd like for it
    to span eight of the available 12 columns, our class name would be `col-8` and
    our column element would look like this: `<div class="col-8">`. The key is that
    the total number of columns in our row (which is the addition of the x's in our
    class names) should not surpass 12\. However, it can be less than 12.
  prefs: []
  type: TYPE_NORMAL
- en: 'Additionally, each row in your grid can have different numbers of columns,
    where each column is also a different width to the other columns within the same
    row. Let''s quickly look at an example before discussing some interesting ways
    that you can align columns within the row by adding pre-defined Bootstrap classes
    to the row element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: The grid in the preceding code has two rows, where the first row has two columns
    of unequal widths, and the second row has three columns of unequal widths.
  prefs: []
  type: TYPE_NORMAL
- en: Whenever you have a grid, you need to concern yourself with how things align
    up within it. Bootstrap has pre-defined classes that can be used on the row elements
    in order to align the column elements within them.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are a few of these classes:'
  prefs: []
  type: TYPE_NORMAL
- en: justify-content-center (centers the columns)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: justify-content-start (left-justifies the columns)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: justify-content-end (right-justifies the columns)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: justify-around-end (spaces the columns evenly)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: justify-between-end (puts all the available space between the two columns)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The interesting thing about these classes—which affect the horizontal alignment
    of the columns in the encapsulating row—is that you can only see their effect
    when the total spanned columns of all the column elements amount to a number less
    than 12\. This is precisely why having fewer than 12 spanned columns is allowed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example of what a row element that contains fewer than 12 spanned
    rows looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: In this previous example, we have a grid that has one row and that row contains
    two columns. However, since the total spanned columns are fewer than 12, the horizontal
    alignment that will be applied (due to the `justify-around-end` class) will have
    a visible effect—which is to center the columns while inserting the available
    unused space (a third of the row's width in this case) around the columns. This
    will have the appearance of margins on either side of the columns, with double
    the margin between them.
  prefs: []
  type: TYPE_NORMAL
- en: The other classes mentioned have different horizontal alignment effects than
    the description beside them in the bullet list. I encourage you to play around
    with these classes to get used to them.
  prefs: []
  type: TYPE_NORMAL
- en: The column
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The column elements must be nested within the row elements, as the previous
    examples showed. We've already seen how many column elements can fit in a row,
    which depends on their respective column widths.
  prefs: []
  type: TYPE_NORMAL
- en: The columns in the grid are basically your cells in the grid and are where your
    content (that is, text, images, and so on) is to be inserted. If you have a grid
    that has six rows of four-column elements each, you have 24 cells in which to
    place your content.
  prefs: []
  type: TYPE_NORMAL
- en: Just as you can align the column elements within the row elements, using special
    classes on the row elements, you can also align the content within your column
    elements, using special classes on the column elements.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are some of the classes you can use on the column elements in order to
    align your content within them:'
  prefs: []
  type: TYPE_NORMAL
- en: '`align-self-start` will force that specific cell''s content to the top of the
    cell'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`align-self-end` will force that specific cell''s content to the bottom of
    the cell'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`align-self-center` will force that specific cell''s content to the vertical
    center of the cell'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Differing viewport sizes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The final thing that I would like to cover regarding Bootstrap's grid is probably
    the most important one of all. What makes the grid responsive? That is to say,
    how does the grid adapt to different viewport sizes? The answer to this is two-fold.
    Firstly, most HTML layouts (even vanilla layouts that were not at all designed
    to be responsive) have some built-in leeway on how they react when viewed on screens
    of varying sizes. However, while the layout of a standard web page may still be
    acceptable in the way a browser renders it on a tablet versus a regular 19-inch
    monitor, things tend to break down and not work at all for a website that looks
    decent on a tablet, but is currently being viewed on a standard mobile phone,
    such as the iPhone 7, or a similarly sized Android device. This is where we need
    some design intervention, and what leads to the second way in which a Bootstrap
    grid adapts to the device's viewport size—namely, special tweaks to the classes,
    and class names for the column.
  prefs: []
  type: TYPE_NORMAL
- en: 'You''ll remember that the class name we''ve been using for the column element
    has the following general form:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Well, in order to make the grid responsive, Bootstrap has included the ability
    for us to tweak the classes by adding a symbol to the class name between the `col` and
    the `x` (that is, an integer from 1 to 12).
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, here is what the column element''s class would look like with
    one of these symbols (in actuality, it''s not a symbol but rather a new class
    name—however, for the purposes of explaining it, you can think of it as a symbol):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'I''ll explain what the `sm` in `col-sm-4` means in a moment, but, in practice,
    you''ll see more than one class name on a column element. For instance, here is
    a likely set of class names on a column element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'OK, let''s decipher what this set of classes is for. To do that, let me first
    list the available symbols and what they mean:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Viewport size** | **Extra-small** | **Small** | **Medium** | **Large**
    | **Extra large** |'
  prefs: []
  type: TYPE_TB
- en: '| Grid breakpoint | <576px | >=576px | >=768px | >=992px | >=1200px |'
  prefs: []
  type: TYPE_TB
- en: '| Max container width | None | 540px | 720px | 960px | 1140px |'
  prefs: []
  type: TYPE_TB
- en: '| Symbol | xs | sm | md | lg | xl |'
  prefs: []
  type: TYPE_TB
- en: '| Typical devices | iPhone, iPod, Android phone | iPad 1, iPad 2, iPad Mini
    | Older monitor (low res, 800x600), a few older Android tablets | Regular modern
    monitor, most modern Android tablets | Hi-res modern monitor, iPad 3, iPad 4,
    Android tablets |'
  prefs: []
  type: TYPE_TB
- en: '| Class prefix | .col-xs- | .col-xs- | .col-md- | .col-lg- | .col-xl- |'
  prefs: []
  type: TYPE_TB
- en: In the preceding table, in the third row from the bottom, I've listed the five
    symbols that are available to you. In the secondrow from the bottom, I have listed
    the typical target devices for which the symbol, and thus the grid-breakpoint,
    applies. I'll discuss the grid-breakpoint in a moment, but I just wanted to say
    that these target devices I've listed are rules of thumb—they are not set in stone.
    For instance, Android tablets are listed in three of the five viewport size columns.
    This is because there are many Android tablet manufacturers and even more sizes
    of displays (that is, viewports) that they come in. The same can be said for laptops.
    However, the viewport sizes on Apple-based products are well known, and fewer
    in number—and is why I listed them by name. Suffice it to say, by taking a look
    at the typical device's row, you can get a fairly good idea of what column class
    you probably want to use.
  prefs: []
  type: TYPE_NORMAL
- en: 'Armed with this knowledge of viewport sizes and the previous table, let''s
    now decipher what this column element and set of classes mean:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: This column element contains a set of three classes, and each class basically
    instructs the browser on how to render the column and its contents depending on
    the viewport size. As an aside, technically speaking, the viewport size is the
    maximum dimensions (in pixels) of the display. Taking the case of a 13-inch laptop
    monitor with its resolution set to 1600 x 900, its viewport size is 1600px wide
    by 900px high. Practically, however, the viewport size is the dimensions of the
    browser window, and not the laptop's display itself. This is an important distinction
    when we talk about responsive web design because, when using a desktop or laptop
    computer, people can resize their browsers—which forces the web page to be re-rendered—and,
    hence, this is truly what the viewport size is, from Bootstrap's perspective,
    and for our purposes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Coming back to the deciphering of the previous column element, while referencing
    the previous viewport size table, and having mentioned how the resizing of the
    browser dictates the viewport size that we, as developers, care about, we can
    now decipher what these three classes are instructing the browser to do:'
  prefs: []
  type: TYPE_NORMAL
- en: '`col-xs-12`: This tells the browser that when the viewport is fewer than 576
    pixels in width, the column should span all 12 columns. In other words, the column
    should consume the entire available width of the row.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`col-sm-4`: This tells the browser that when the viewport is between 576 and
    767 pixels in width, the column should span four of the 12 available columns.
    In other words, the column should consume 1/3 of the row''s width.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`col-md-3`: This tells the browser that when the viewport is 768 or more pixels
    in width, the column should span three of the 12 available columns. In other words,
    the column should consume 1/4th of the row''s width.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We could have controlled the rendering of the column for viewport sizes 992
    or more pixels in width by adding the classes with the class prefixes `.col-lg-`
    and `.col-xl-`, but, in the example we've just seen, we didn't seem to care—which
    is to say, no matter how wide the viewport is (even 2400px!), our column's width
    would scale to consume 25% of the row's width.
  prefs: []
  type: TYPE_NORMAL
- en: And that, ladies and gentlemen, is how you can design a web page while maintaining
    how the contents in your grid's cells are to be rendered on thousands of viewport
    sizes. By leveraging Bootstrap's grid, we no longer need to code up several variations
    of our web pages to get them to display the way we want on different sized displays.
    Pretty darn cool, ain't it?
  prefs: []
  type: TYPE_NORMAL
- en: Bootstrap components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As previously mentioned near the beginning of this chapter, I did not want to
    simply regurgitate Bootstrap's documentation when covering components. Instead,
    I will briefly discuss five of Bootstrap's components that we'll be using, showing
    some basic code for them, and pointing you to Bootstrap's official documentation
    for these components so you can learn more about their options, of which there
    are many—far too numerous to cover in a book such as this fine example you are
    currently reading.
  prefs: []
  type: TYPE_NORMAL
- en: Button components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Buttons are all around us—and no, I'm not referring to the buttons on your favorite
    dress shirt. If you've ever been on an elevator (hey, some people absolutely refuse
    to step into one), you will no doubt see buttons—and pressing one of them will
    transport you to a place you want to go. The same thing goes with your TV remote—but
    instead of transporting you (at least not quite yet—but maybe in the future, y'all
    just never know), it transports your mind to another place from the very comfort
    of your living room. These buttons perform functional, meaningful tasks. How about
    buttons on a web page? Well, arguably, they also transport things—such as information,
    when you click the submit button on a form that you fill out. But perhaps an equally
    important feature of buttons is to help make your web pages attractive, and intuitive.
    Luckily, Bootstrap makes it super easy to add beautifully styled buttons to our
    web pages—100 times more refined than the default gray button that a browser renders
    when you add a button element.
  prefs: []
  type: TYPE_NORMAL
- en: Let's take a look at a few of these while exploring some of Bootstrap's pre-defined
    button classes (that is, styles).
  prefs: []
  type: TYPE_NORMAL
- en: 'Out of the box, without any tweaking necessary, we can easily insert a beautifully
    styled button by assigning two classes to the button element like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'That button is blue in color, but there are other default colors we have access
    to via these other classes:'
  prefs: []
  type: TYPE_NORMAL
- en: '`btn-secondary`: Light charcoal gray, with white font'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`btn-success`: Light green, with white font'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`btn-danger`: Red, with white font'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`btn-warning`: Goldenrod, with black font'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`btn-info`: Teal, with white font'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`btn-light`: Light gray, with black font'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`btn-dark`: Almost black, with white font'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There's also a class for turning a button into a link: `btn-link`
  prefs: []
  type: TYPE_NORMAL
- en: If you prefer something more white, or less heavy on the color, Bootstrap has
    a set of classes that match the preceding classes called *Outline buttons*. The
    colors and class names are the same, with the only difference being the word *outline* between
    *btn* and *secondary, success, dan**ger,* and so on. The buttons are transparent
    except for the outline, or border, and of course, the font color for the text
    on the button.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s what these class names look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '`btn-outline-secondary`: Light charcoal gray outline, with the same color for
    the font'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`btn-outline-success`: Light green outline, with the same color for the font'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`btn-outline-danger`: Red outline, with the same color for the font'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`btn-outline-warning`: Goldenrod outline, with the same color for the font'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`btn-outline-info`: Teal outline, with the same color for the font'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`btn-outline-light`: Light gray outline, with the same color for the font'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`btn-outline-dark`: Almost black outline, with the same color for the font'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'All these buttons come in a default size in terms of height, and font size.
    However, as you may have guessed, Bootstrap has a way in which to make the default
    button larger or smaller by adding the `.btn-lg` or `.btn-sm` class, respectively.
    Here is what that would look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '`<button type="button" class="btn btn-primary btn-lg">I''m large</button>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<button type="button" class="btn btn-primary btn-sm">I''m small</button>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can read all you care to about Bootstrap's buttons here: [https://getbootstrap.com/docs/4.0/components/buttons/](https://getbootstrap.com/docs/4.0/components/buttons/)
  prefs: []
  type: TYPE_NORMAL
- en: Alert components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When a user takes an action on a web page, such as updating their phone number
    on their user profile, it's always nice to let them know if the update was successful
    or not. Sometimes these user feedback messages are referred to as "flash messages"
    (because they often only appear for a few moments, and then fade away so as to
    not clutter the screen). Bootstrap calls them "alerts", and they are created by
    adding the predefined alert classes and a role attribute to a `div` element.
  prefs: []
  type: TYPE_NORMAL
- en: 'For the most part, their coloring and naming scheme is fairly consistent with
    the button components. Here are the alerts that are available:'
  prefs: []
  type: TYPE_NORMAL
- en: '`<div class="alert alert-primary" role="alert">This is a primary alert</div>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<div class="alert alert-secondary" role="alert">This is a secondary alert</div>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<div class="alert alert-success" role="alert">This is a success alert</div>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<div class="alert alert-danger" role="alert">This is a danger alert</div>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<div class="alert alert-warning" role="alert">This is a warning alert</div>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<div class="alert alert-info" role="alert">This is a info alert</div>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<div class="alert alert-light" role="alert">This is a light alert</div>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<div class="alert alert-dark" role="alert">This is a dark alert</div>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Not only do Bootstrap's alerts look pretty, but they are quite neat. You can
    embed links in them (since it's just HTML, after all), and even insert an optional
    dismiss button. The alert component is a good example of why Bootstrap depends
    on the jQuery library, since it's required for the dismissal of the alert component.
  prefs: []
  type: TYPE_NORMAL
- en: Alerts are worth the time to learn so that you can utilize them in your applications.
    Here is the link to Bootstrap's documentation on its alert components: [https://getbootstrap.com/docs/4.0/components/alerts/](https://getbootstrap.com/docs/4.0/components/alerts/).
  prefs: []
  type: TYPE_NORMAL
- en: Navbar component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Navbar component is very rich — you can do a lot with it—but, in essence,
    it''s Bootstrap''s way to give you a nicely styled navigation bar across the top
    of your web page. The richness comes from the fact that there are a few sub-components
    that can be used. These include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`.navbar-brand` for your company, product, or project name'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.navbar-nav` for a full-height and lightweight navigation (including support
    for dropdowns)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.navbar-toggler` for use with our collapse plugin and other navigation toggling behaviors'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.form-inline` for any form controls and actions'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.navbar-text` for adding vertically centered strings of text'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.collapse.navbar-collapse` for grouping and hiding `navbar` contents by a
    parent breakpoint'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Showing examples of all these items here would be too costly, with little associated
    benefit. Rather than do that here, I will show you how to use Bootstrap to build
    the navigation menu for our example application later in this chapter. The code
    can be found in the code listings at the end of the chapter. The first wireframe
    in the pages that follow shows a logo placeholder, a menu, and Login and Try Now
    buttons. The wireframes represent drafts of the pages we're aiming to build. Our
    navigation bar will look slightly different, but will encompass all the parts
    that are shown on the wireframe.
  prefs: []
  type: TYPE_NORMAL
- en: 'More documentation on Bootstrap''s Navs and Navbar components can be found:
    [https://getbootstrap.com/docs/4.0/components/navs/](https://getbootstrap.com/docs/4.0/components/navs/)
    and [https://getbootstrap.com/docs/4.0/components/navbar/](https://getbootstrap.com/docs/4.0/components/navbar/).'
  prefs: []
  type: TYPE_NORMAL
- en: Modal components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Modal components are great ways to draw your user's attention to things by using
    them for creating lightboxes, user notifications, and more. I like to use them
    for popping up forms for users to add items and edit them as well, directly from
    the page that lists those items. This way, all the functionality (that is, view,
    add, edit, and delete) for a listing of items is all done on one page. Using the
    modal component in this way leads to a clean design that is intuitive to users.
  prefs: []
  type: TYPE_NORMAL
- en: As with the Navbar component, showing examples here is not the best way to demonstrate
    modals. Rather than show contrived examples, I will show you through code (by
    referencing the code listings at the appropriate time) how we'll achieve creating
    the modal forms shown in the following wireframes. When you take a look at the
    wireframes, you'll see that I've used modals quite generously throughout the pages.
    I've even used them for the login and the sign-up functionality of the site.
  prefs: []
  type: TYPE_NORMAL
- en: There are several demos on Bootstrap's modal component that you can check out
    here: [https://getbootstrap.com/docs/4.0/components/modal/](https://getbootstrap.com/docs/4.0/components/modal/)
  prefs: []
  type: TYPE_NORMAL
- en: We've only covered four commonly used components that Bootstrap offers, but
    they are enough for us to get a glimpse of what can be done with pre-defined components.
    There are many other components that can be used, and you can find them on the
    official Bootstrap website here: [https://getbootstrap.com/docs/4.0/components/](https://getbootstrap.com/docs/4.0/components/)
  prefs: []
  type: TYPE_NORMAL
- en: Again, we're not covering all of Bootstrap's components because the official
    documentation has done that job already — and has done it well. Additionally,
    we'll be using NG Bootstrap components, Angular Material components, and custom
    components that we'll be creating together in later chapters.
  prefs: []
  type: TYPE_NORMAL
- en: Listing Carousel – a formal introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The evolution of a software project is a very interesting thing, and it follows
    a very logical series of stages. Here are the stages that we will cover—which
    are true of any software project:'
  prefs: []
  type: TYPE_NORMAL
- en: Idea generation/concept.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Analysis/feasibility study: The purpose of conducting a feasibility study on
    the product concept is to vet the ROI (that is, return on investment) for the
    project. In other words, is the project worth the company''s investment of its
    resources (time, money, talent, and so on)?'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Requirement gathering.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use cases.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Wireframes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Implementation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With these software project stages outlined, let's look at a real-life example
    using Listing Carousel.
  prefs: []
  type: TYPE_NORMAL
- en: Idea generation/concept
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Ideas for software projects can come from anywhere and at any time, but for
    the vast majority of the time, the ideas are inspired by a need to solve problems
    that organizations will invariably have from time to time throughout their lifetimes.
    The two main categories of problems areaddressing an inefficiency and creating
    an opportunity for itself in the market via creating a competing product that
    is better than (that is, differentiated from) those of its competitors. Stated
    in other terms, software projects can often be viewed as either being an efficient play
    or a competitive advantage play. Solving these two types of problems are the needs
    that every growing organization will have at some point, or at many points, in
    time throughout its existence.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, how was Listing Carousel conceived? Having been a real estate salesperson
    in a previous life, turned IT pro, it was easy for me to think of a way to develop
    a better way for real estate agents to spread the word of their new listings (that
    is, properties for sale) to their social media circles, and to showcase their
    listings in a more informative way than the other primary options currently available
    to them. While there are several ways a real estate agent can market their listings,
    I found they lacked two basic things:'
  prefs: []
  type: TYPE_NORMAL
- en: A way to easily spread the word of their listings to their social media circles
    (that is, Instagram and Facebook)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A way to present the properties in a slightly more engaging way, while also
    better describing the properties at the same time
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: So, the problem I had was that I had to create a software product that was markedly
    differentiated from other software services. The solution was to think of the
    two product differentiators listed previously and to assume that I can get access
    to the technology required to make it happen. Thus, for Listing Carousel, you
    can say that the software project was conceived as a competitive advantage play.
  prefs: []
  type: TYPE_NORMAL
- en: Great! I had a potential software project to work on! What's next? Well, as
    mentioned at the start of this section, the next stage was to do a feasibility
    study. Recall that the purpose of conducting a feasibility study on the product
    concept is to vet the ROI for the project, and to also do the research to see
    whether the required technology was readily available—or, if not, can it be created?
    Let's briefly look at this next.
  prefs: []
  type: TYPE_NORMAL
- en: Analysis — feasibility study
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This stage in the project analysis is where the go / no-go decision will be
    made. The proper way to conduct a feasibility study is to prepare a business plan,
    and present it to investors. Why? The reason why managers of a company go through
    the process of writing a business plan, and showing it to investors (or to the
    VP, President, or CEO of the company—for internal software projects), is because
    they need a document that they can share with an investor to gauge the interest
    in the project. If the investors would be interested in making an investment,
    then it means that the project has merit.
  prefs: []
  type: TYPE_NORMAL
- en: 'The perfect document for this is a formal business plan because it contains
    summary information on all the important things investors would want to see, namely:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Market analysis**: Is there room in the market for yet another similar product?
    What is the market potential?'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Competitive analysis**: How is our product/service going to be different?
    Are we going to compete on cost, quality, or features?'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Required resources**: What personnel does the project need? And how many
    man-hours to build it and deliver it to market?'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Budgets**: How much money in total should be budgeted for the project (IT,
    sales, operating costs, and so on)?'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Financial projections**: What revenues can be expected over the next 12 months,
    two years, three years, and five years? What is the break-even point?'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Exit strategies**: How long do we operate the company for? How do we get
    our investment out?'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You may be asking yourself if I actually prepared a detailed business plan
    for a software project that was fairly small in size. The answer—of course! Why?
    In short, I needed to see whether implenting the project was worth my time and
    money. Specifically, I spent the necessary time preparing a business plan for
    the following reasons:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Market analysis**: As good as an idea may sound to you, you need to do your
    due diligence in being reasonably sure that there is a need for yet another product
    or service in the market you are entering. If there is room, then you have a potential
    opportunity. In my case, I believed that room existed for Listing Carousel and
    that it was sufficiently differentiated to give me a competitive advantage over
    the competing products in the market.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cost and time to develop**: Time and money are valuable commodities—and developing
    a software product or service will take both. Every dollar you invest in one project
    means that you can''t invest it in another. And the same is true of your time.
    Every hour you spend on doing something means you gave that time up for doing
    something else instead. So, choose where you place your resources wisely! In my
    case, I had some money earmarked for a fun project to do—so the money part was
    taken care of. How about the time? This was a difficult decision for me. While
    I did not really have the time, I liked the project and I have friends that are
    real-estate agents—and so I decided, what the hell, let''s go for it. So, I knew
    how much money I needed to invest, and roughly how much time I had to invest as
    well.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Projected revenues**: Just because the required resources (that is, time
    and money) I had to invest were acceptable to me, it wasn''t a done deal yet.
    The next step was to make some calculations to see whether I would make a profit
    over time, and how much. If the ROI was high enough, it was a go-ahead. In my
    case, the ROI was actually not as good as I wanted it to be—in fact, it was almost
    zero! In other words, I would just break even if I was lucky. However, you also
    have to listen to your gut, and my gut was telling me that I may be able to sell
    the software service at some point, which would make the project worthwhile. At
    the time of writing, I have not yet sold Listing Carousel, but it did start to
    make a little bit of a profit.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Exit strategy**: Before you embark on building any business—and I treated
    Listing Carousel as a standalone business—you have to think of an exit strategy.
    What is an exit strategy? It basically defines how you will divorce yourself of
    your obligations of operating and/or servicing the company. Companies don''t run
    themselves, and so unless you want to stay married to the company forever, you
    need to have an exit strategy from the start. I can''t take more space in this
    book to outline this in detail, but suffice it to say, I structured the company
    in such a way where my exit strategy was baked in.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Requirement gathering
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This stage of the software project forms the basis of your project plan, which
    is what a project manager uses to keep the project on schedule and on budget.
    Requirements are typically gathered from the end client (internal or external),
    but can also come from an idea board if you are building something new that does
    not yet exist in the market.
  prefs: []
  type: TYPE_NORMAL
- en: 'For instance, for Listing Carousel, I picked the brains of a few real-estate
    agent friends, telling them what I wanted to build, and how I wanted to make it
    different from what they were already using. Here is a partial list of what we
    came up with as requirements:'
  prefs: []
  type: TYPE_NORMAL
- en: The ability to create a carousel-style photo viewer (one per listing/property,
    with any number of photos in it)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The ability for the user to upload photos
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The ability to annotate each photo (that is, a caption at the bottom of the
    photo)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The ability to flip the photo around to show a detailed description of what
    is shown on the photo
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The ability for the user to link a photo to a carousel
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The ability for the user to order/re-order the photos within a carousel
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The ability for the user to post the carousel of the listing on Facebook
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The ability for the user to post the carousel of the listing on Instagram
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The ability to have a magic link manually placed on any website that the user
    has access to, which opens the listing's carousel in a modal lighthouse in place
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The ability to have a soundtrack play while the listing's carousel auto-scrolls
    through the photos in it
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each carousel will have a unique short permalink assigned to it so that the
    user can email or text it to whomever they like
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We won't build all these features into our example application because there
    just isn't the space in the book to do so—but we will build the important ones.
    The two features that we'll omit are the magic link and the playing of the music
    soundtrack. I won't make any promises, but I may create a blog post on how to
    build the magic link on my blog, *AngularMotion.io, *in the near future.
  prefs: []
  type: TYPE_NORMAL
- en: Wireframes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This stage of the process is where the look and feel of the application are
    planned and laid out.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are the 12 wireframes for the pages we''ll be building (note:
    a couple of the wireframes were too long to have as one screenshot, such as for
    the Welcome page, and so there is more than one screenshot for them).'
  prefs: []
  type: TYPE_NORMAL
- en: We will be implementing some of these wireframes in the following sections,
    and we will learn to implement some of the layouts and components in chapters
    to follow.
  prefs: []
  type: TYPE_NORMAL
- en: Implementation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is where the rubber hits the road. We're going to code up some of our web
    pages using the wireframes we just reviewed to help guide us. We're also going
    to need a web server so we can serve up our new pages in our browser as we build
    them out.
  prefs: []
  type: TYPE_NORMAL
- en: Installing our interim web server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We'll be using Node's built-in web server for our project from [Chapter 12](9610f27b-03db-4258-8a68-24eb3901117b.xhtml), *Integrating
    Backend Data Services,* onward. But, since we've got a little while to go before
    we get to that point, we need to have a simple interim solution.
  prefs: []
  type: TYPE_NORMAL
- en: We've not spoken about browsers before because there wasn't a need to do so—but
    now, there's a need. While it doesn't matter which browser you use for viewing
    Angular applications, it would be easier—though not essential — for us to use
    the same browser while we work through this book together. My browser of choice,
    while I develop web applications, is Chrome. As with most browsers, Chrome has
    a ton of extensions that other developers have created that do everything from
    providing subscription notifications to debugging tools and more. You can download
    Chrome for the operating system of your choice from here: [https://www.google.com/chrome/](https://www.google.com/chrome/).
    You can search for and install extensions for Chrome from the Chrome Web Store
    at [https://chrome.google.com/webstore/category/extensions](https://chrome.google.com/webstore/category/extensions). We'll
    be using Chrome, and specifically, a few of its extensions, for a few things in
    this book.
  prefs: []
  type: TYPE_NORMAL
- en: The first order of business is to install a Chrome extension that will help
    us serve up the pages we build for our application. It's called, *Web Server for
    Chrome* and you can search for it and install it from the Chrome Web Store. I
    didn't include the link to it directly because the URL was incredibly long.
  prefs: []
  type: TYPE_NORMAL
- en: This extension allows you to select a folder for where the files you wish to
    be served are located, as well as a port to listen on. There are other options
    that you can select as well. One common case option that is enabled by default
    is to have the extension automatically show the `index.html` file. For example,
    assuming you enter `8887` for the port number, you would point your browser to
    `http://127.0.0.1:8887` and would see that your `index.html` page in the folder
    you specify would automatically be served up in your browser. Once you have these
    two settings configured, you're off to the races and can view the pages we create.
  prefs: []
  type: TYPE_NORMAL
- en: Welcome page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first wireframe we will implement using the Bootstrap components and grid
    layout is the Welcome home page.
  prefs: []
  type: TYPE_NORMAL
- en: 'Take a look at the following wireframe screenshot. We have a header section
    that contains our application logo placeholder, navigation menu, and Login and
    Try Now buttons on the right. This is followed by a jumbotron header that showcases
    the title of the application. Then, our content sections are divided so that we
    can add our content to the page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/3b8dbb53-1641-4561-84be-84a0a6588cc9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We will now proceed to implement our code implementation of the preceding wireframe
    screenshot. We are first going to implement the header section, and we will use
    the `<nav>` tag to categorize all of our header section code, including the logo,
    menu, and action buttons:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, we are implementing a `nav` tag element and using the
    Bootstrap navbar classes, `navbar-default`, `navbar-fixed-top`, `navbar-brand`,
    `navbar-collapse`, and so on. These classes come with default functionality that
    covers almost all aspects of a navigation section. One of the interesting things
    to note in the preceding code is the `navbar-collapse` class, which helps in rendering
    various device screen resolutions automatically. We have also added a few menu
    links for features, pricing, and about. We have also added our action items, Login
    and Try Now.
  prefs: []
  type: TYPE_NORMAL
- en: 'Launch the page in the browser and we should see the output, as shown in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/a1caaa12-0c6c-4e0d-94ee-7e0151a8acd0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, we have to make our layouts for the content sections. The jumbotron and
    content sections. We will use the `jumbotron` class with a `div` section and,
    for the content sections, the Bootstrap grid column classes, `row`, `col-sm-8`,
    and `col-sm-4`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s analyze the preceding code to understand some of the important
    points. We are making use of the awesome Bootstrap grid utilities to create our
    application layout, using the column classes to create the layout, which will
    render on various screen resolutions. Run the application in the browser and we
    should see the output as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/151afb29-603e-4200-8204-4132136db743.png)'
  prefs: []
  type: TYPE_IMG
- en: Nice work, fellas, so far. We have just created our first Welcome page layout
    using the Bootstrap layout components. We will continue to use the same and build
    some more wireframes to make you comfortable. In the next section, we will learn
    to create signup and login screens using the Bootstrap modal component.
  prefs: []
  type: TYPE_NORMAL
- en: Signup
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Next up, we will implement our signup and login pages using Bootstrap's awesome
    modal component.
  prefs: []
  type: TYPE_NORMAL
- en: 'Take a look at the following wireframe. It''s a simple modal window with some
    form field input elements:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/b30a1548-dbf1-458d-ae51-e04661c3810f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s go ahead and implement the code. The following is the sample code for
    creating the modal window:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding code, we have used Bootstrap''s modal component and modal
    classes modal and modal-dialog. Inside the modal dialog content, we have created
    our signup form with the input form elements—first name, last name, brokerage,
    user, and pass. Launch the page in the browser and we should see the output, as
    shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/ab5b6c84-f6db-4922-a26c-5aac47d00937.png)'
  prefs: []
  type: TYPE_IMG
- en: That's a great start to building our application. In the next section, we will
    build our login page using the same Bootstrap modal component.
  prefs: []
  type: TYPE_NORMAL
- en: Login
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous section, we have learned about creating the signup form inside
    a modal window. In this section, we will learn about creating a login screen inside
    the modal window. The methodology and principle are exactly the same as how we
    created the signup page.
  prefs: []
  type: TYPE_NORMAL
- en: 'Take a look at the following login wireframe, which we are going to implement
    in just a bit:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/e3ffa4f9-84c6-42c5-b190-aefa7fad371e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Time for some action. We are going to create a modal window first and we can
    bind a click event to open the dialog window:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding code, we have implemented a modal window with yet another
    form, this time for a login feature with a number of form elements—a username
    and password with a submit button. Launch the page in the browser and we should
    see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/36f91418-ece6-4d7a-82de-4638980d0afd.png)'
  prefs: []
  type: TYPE_IMG
- en: Our application is almost taking shape now. I am sure you are as excited as
    I am. Let's go ahead and implement the listings page.
  prefs: []
  type: TYPE_NORMAL
- en: Listings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In previous sections, we have created our home page, signup, and login pages
    using the Bootstrap components. In this section, we will create our listings page.
    Take a look at the following wireframe. We have to loop through our listings and
    display a grid section, where we will display all the listings we have so far.
    Simple enough? You bet:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/eb4e8f31-a686-4c64-8049-36c5bb68c327.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We will need to use Bootstrap''s advanced layout and grid components to create
    the preceding layout. Take a look at the following sample code. We can achieve
    the preceding layout in multiple ways. We can either use the Bootstrap grid columns
    to design the layout or, alternatively, we can make use of table elements to design
    the structure. In this example, I will show you how to do it using the table elements
    and I will leave the grid structure to you as homework:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding code, we have created a container using the `container-fluid`
    class and, inside the container, we have created a table and rows structure to
    display our listings. In a more practical scenario, the data will always come
    from the backend APIs or services. For our example, and for learning purposes,
    we have stubbed the data here. Launch the page in the browser and we should see
    the output as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/91f2114f-1fee-41c7-ac65-24ffb176a614.png)'
  prefs: []
  type: TYPE_IMG
- en: If you see the output as shown in the preceding screenshot, give yourself a
    pat on the back. We have made great progress in our learning. So far, we have
    created four pages using various different Bootstrap components and grid layouts.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will explore some of the other wireframes for the application,
    which I will leave it for you to practice. Most of the wireframes will use the
    same components, layouts, and grid layouts.
  prefs: []
  type: TYPE_NORMAL
- en: Create listing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, I am sharing with you the wireframe for the **Create Listing**
    page. The Create Listing page can be easily created using the Bootstrap components
    and layout. Instead, we will learn to implement this using Flex-layout in the
    next chapter. The following is the wireframe for your reference:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/3fad0b31-b358-46f4-ac6f-87b2810d5cec.png)'
  prefs: []
  type: TYPE_IMG
- en: In the next section, we will see the design and wireframe details of the **Edit
    Listing** page.
  prefs: []
  type: TYPE_NORMAL
- en: Edit listing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will learn about the design and wireframes for the **Edit
    Listing** screen. If you look carefully, the **Edit Listing** page is similar
    to the **Create Listing** page, except, the data is populated on load.
  prefs: []
  type: TYPE_NORMAL
- en: Again, like the **Cre****ate Listing** screen, we will design the **Edit Listing**
    page using Flex-layout in the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/88211f05-0260-4f98-babc-3d926dbd0f4b.png)'
  prefs: []
  type: TYPE_IMG
- en: Wireframes collection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will see the design wireframes for other pages, which we
    will create in chapters to come.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the design wireframe for the **Listing Preview** page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/6bbb42b9-7b02-44c7-b50e-1eb95824119f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The following is the design wireframe for the property details. If you notice,
    we are going to use the same Bootstrap''s modal window component. When we open
    the modal window, we should see the property details:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/5dc78645-6b9d-4855-b4c9-16c9e8f97c39.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, we will learn how to design the wireframe for the **Photos** page. If
    you look carefully, the layout structure looks familiar to the **Listings** page.
    We will have to create a reusable design using the common libraries, which can
    be reused across various pages and templates:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/0d1c9343-7c17-4fb7-b0cb-1e03a3e9d6c6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next up is the **Upload Photo** page. We will again have to create a modal
    window component and provide a file upload option through which we can upload
    photos easily:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/75b135a2-459c-4949-b173-8cc9d27e150b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, let''s move on to the **Edit Photo** wireframe. Yet again, we are making
    use of Bootstrap''s modal window component to design our **Edit Photo** page.
    We will use Angular''s data binding to bind the data in the modal window:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/60c0a802-b564-4754-8ccf-18230392c61e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Last, but not least, we will explore the **Photo Preview** page. We can display
    the photos using the modal window Bootstrap component. We will close the common
    action buttons to close or edit the modal windows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/25228d46-9c71-4e17-b473-b0bf193d8420.png)'
  prefs: []
  type: TYPE_IMG
- en: That was quite a bit of work we have done in this chapter, as we learned about
    the Bootstrap grid and layout components. We have created a few pages as part
    of our hands-on learning examples and designed our wireframes that we will use
    in our application.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter was packed with all kinds of goodies. You should now understand
    the example application that we'll be building, the high-level game plan for the
    phases of our build, and the five-step process we're going to take for the first
    phase of our build.
  prefs: []
  type: TYPE_NORMAL
- en: We then moved on to what Sass is, and a few of its features that help us with
    creating our CSS for the application. We will study the tools to help you when
    you're writing the Sass for your applications. Next, we saw what Bootstrap is
    and how to integrate it into your applications. We studied what Bootstrap's grid
    is, and the basics for how to use it, along with some of Bootstrap's components
    and how to use them.
  prefs: []
  type: TYPE_NORMAL
- en: Lastly, we studied the evolution of software projects, from inception to implementation.
    Here, we covered the different types of analysis, the gathering of the requirements
    and some use cases. We also covered wireframes, went into detail on the goal of
    each wireframe, and the basic design principles (that were mentioned during the
    description of the wireframes).
  prefs: []
  type: TYPE_NORMAL
- en: So far in the book, with the exception of the quick to-do app we've built in
    [Chapter 1](f1243d74-a120-408f-8181-cb379b457dd1.xhtml), *Quick Start*, we have
    not even touched Angular. This will change—starting with the next chapter, [Chapter
    4](66c21daa-b131-470d-a21b-0fbed56c3ec9.xhtml), *Routing*. In this chapter, we
    will create the Angular shell for our application using the CLI (as we did at
    the beginning of the book). However, we're going to be adding routing to it. I'll
    explain what routing is, and how to configure routing for our application as we
    work through it.
  prefs: []
  type: TYPE_NORMAL
- en: So, before you turn the page, pat yourself on the back, stretch a little, and
    maybe pour yourself another glass of your favorite beverage. Well done, my fellow
    budding Angular gurus. With these first three chapters behind you, you are now
    ready to meet Angular!
  prefs: []
  type: TYPE_NORMAL
