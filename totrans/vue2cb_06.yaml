- en: Single Page Applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, the following recipes will be covered:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating an SPA with vue-router
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fetching data before switching route
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using named dynamic routes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Having more than one router-view in your page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Composing your routes hierarchically
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using route aliases
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding transitions between your routes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing errors for your routes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a progress bar to load pages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to redirect to another route
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Saving scrolling position when hitting back
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Many modern applications are based on the **SPA** or **Single Page Application**
     model. From the users perspective, this means that the whole website looks similar
    to an application in a single page.
  prefs: []
  type: TYPE_NORMAL
- en: This is good because, if done correctly, it enhances the user experience, mainly
    reducing waiting times, because there are no new pages to load--the whole website
    is on a single page. This is how Facebook, Medium, Google, and many other websites
    work.
  prefs: []
  type: TYPE_NORMAL
- en: URLs don't point to HTML pages anymore, but to particular states of your application
    (that most often look like different pages). In practice, on a server, assuming
    that your application is inside the `index.html`  page, this is implemented by
    redirecting the user that is requesting ,say, about me to `index.html` .
  prefs: []
  type: TYPE_NORMAL
- en: The latter page will take the suffix of the URL and will interpret it as a **route**
    , which in turn will create a page-like component with biographical information.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an SPA with vue-router
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Vue.js implements the SPA pattern through its core plugin, vue-router. To vue-router,
    every route URL corresponds to a component. This means that we will tell vue-router
    how to behave when the user goes to a particular URL in terms of its component.
    In other words, every component in this new system is a page in the old system.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this recipe, you will only need to install vue-router and have some knowledge
    about Vue components.
  prefs: []
  type: TYPE_NORMAL
- en: To install vue-router, follow the instructions at  [https://router.vuejs.org/en/installation.html](https://router.vuejs.org/en/installation.html)
    .
  prefs: []
  type: TYPE_NORMAL
- en: If you are using JSFiddle to follow along, you can add a link similar to [https://unpkg.com/vue-router/dist/vue-router.js](https://unpkg.com/vue-router/dist/vue-router.js)
    .
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We are preparing a modern website for a restaurant and we will use the SPA pattern.
  prefs: []
  type: TYPE_NORMAL
- en: 'The website will consist of three pages: a home page, the restaurant menu,
    and the bar menu.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The whole HTML code will be like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The `<router-view>` component is the entry point for vue-router. It's where
    the components are displayed as pages.
  prefs: []
  type: TYPE_NORMAL
- en: 'The list elements will become the link. For now, they are only list elements;
    to turn them into links, we can use two different syntaxes. Wrap the first link
    as in the following line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Another example is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Another syntax we can use is the following (for the Bar link):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This, more verbose but more explicit, syntax can be used to bind a custom event
    to a particular routing.
  prefs: []
  type: TYPE_NORMAL
- en: 'To instruct Vue that we want to use the vue-router plugin, write the following
    in the JavaScript:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The part of three pages we listed at the beginning will be played by these
    three dummy components (add them to the JavaScript):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, you can finally create the router. The code for it is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'This router doesn''t do much; we have to add routes (which correspond to URLs)
    and their associated components:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Now our application is almost complete; we only need to declare a simple `Vue`
    instance:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Our application will now work; before launching it, add this CSS rule to have
    slightly better feedback:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'When you open your app and click on the Bar link, you should see something
    similar to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Image00116.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first thing your program does is to register vue-router as a plugin. The
    vue-router, in turn, registers the routes (which are parts of URLs) and connects
    components to each of them.
  prefs: []
  type: TYPE_NORMAL
- en: When we visit the application for the first time, the URL on the browser (you
    won't be able to see it changing inside JSFiddle because it is inside an iframe)
    will end with  `index.html/#/` . Everything after the hash symbol is a route for
    the vue-router. In this case, it is only a slash (`/` ) and so it matches the
    first home route.
  prefs: []
  type: TYPE_NORMAL
- en: When we click on the links, the content of the `<router-view>` changes according
    to the component we associated with that route.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The astute reader will certainly find what can be interpreted as a bug--we added
    a couple of CSS styles before running the application. The  `.router-link-active`
    class is automatically injected in the `<router-link>` component whenever the
    page corresponds to the link actually pointed to.
  prefs: []
  type: TYPE_NORMAL
- en: When we click on Menu and Bar , the background color changes but it seems that
    it remains stuck to be selected for the Home  link. This is because the matching
    performed by the `<router-link>` component is not **exact** . In other words, 
    `/bar` and `/menu` contain the `/` string and, for this reason, `/` is always
    matched.
  prefs: []
  type: TYPE_NORMAL
- en: 'A quick fix for this is to add the attribute exactly the same as  the first
    `<router-link>` :'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Now, the `Home` link is highlighted only when the route exactly matches the
    home page link.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another thing to note is the rule itself:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Why do we match two different things? It depends on how you wrote the router
    link.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code will be translated in the following DOM portion:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'While:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Becomes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Note how in the first case, the class is applied to the child anchor element;
    in the second case, it is applied to the parent element.
  prefs: []
  type: TYPE_NORMAL
- en: Fetching data before switching route
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous version of Vue, we had a dedicated method to fetch data from
    the Internet before changing the route. With Vue 2, we have a more general method
    that will take care of this and possibly other things before switching route.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To complete this recipe, you are expected to already know the basics of vue-router
    and how to make AJAX requests (more on this in the last chapter).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will write a simple web portfolio composed of two pages: a home page and
    an about me page.'
  prefs: []
  type: TYPE_NORMAL
- en: For this recipe, we will need to add Axios as a dependency.
  prefs: []
  type: TYPE_NORMAL
- en: 'The basic layout is clear from the following HTML code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'In the JavaScript, you can start building your `AboutMe` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'It will display only a name and a telephone number. Let''s declare the two
    variables in the `data` option of the component, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'The vue-router, before actually loading the component onto the scene, will
    look for an option in our object, called `beforeRouteEnter` ; we will use this
    to load the name and phone from a server. The server we are using will provide
    fake data just for the purpose of displaying something, which is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'For the other component, the home page, we will just write a small component
    as a placeholder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Next thing is that you have to register the `router` and its `paths` :'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Also, of course, you have to register a `Vue` root instance, which is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'When you launch your application and click on the About Me  link, you should
    see something similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Image00117.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You will note that there is no page reload when you click on the link, but it
    still takes quite some time to display the bio. This is because it is fetching
    the data from the Internet.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `beforeRouteEnter` hook takes three parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`to` : This is a `Route` object that represents the route requested by the
    user.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'from:  This is also a Route object that represents the current route. This
    is the route the user will be kept at in case of errors.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`next` : This is a function we can use when we are ready to go on with the
    switching of the route. Calling this function with false will prevent the route
    from being changed, and it is useful in case of errors.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When the preceding functions are called, we made a call with Axios to a web
    service that provided a string for a name and a string for a phone number.
  prefs: []
  type: TYPE_NORMAL
- en: When we are inside this hook, it's important to remember that we don't have
    access to this . It's because this hook runs before the component is actually
    instantiated, so there is no `this` to refer to.
  prefs: []
  type: TYPE_NORMAL
- en: 'When the server responds, we are inside the `then` function and want to assign
    the name and phone returned from the server but, as said, we don''t have access
    to this . The next function receives a reference to our component as an argument.
    We use this to set the variables to the received value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Using named dynamic routes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Registering all the routes by hand can be time consuming and, when the routes
    are not known in advance, it is impossible. vue-router lets you register routes
    with an argument so that you can have links for all the objects in a database
    and cover other use-cases where the user chooses a route, following some pattern
    that will result in too many routes to be registered by hand.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Except for the basics on vue-router (refer to the *Creating an SPA with vue-router*
     recipe), you won't need any additional information to complete this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will open an online restaurant with ten different dishes. We will create
    a route for every dish.
  prefs: []
  type: TYPE_NORMAL
- en: 'The HTML layout of our website is the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: This will create 11 links, one for the home page and ten for the dishes.
  prefs: []
  type: TYPE_NORMAL
- en: 'After registering the `VueRouter` in the JavaScript part, the code is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Create two components; one will be a placeholder for the home page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'The other routes will be connected to a `Menu` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding component, we refer to the global router object with `$route`
    , and we take the `id` parameter from the URL. `Lorempixel.com` is a website that
    provides sample images. We are connecting a different image for every `id` .
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, create the router itself using the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: You can see that the path for the menu contains `/:id` , which is a placeholder
    for the `id` parameter that will appear in the URL.
  prefs: []
  type: TYPE_NORMAL
- en: 'At last, write a root `Vue` instance:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'You can launch the application now and should be able to see all the menu items.
    Clicking on any one of them should order a different dish:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Image00118.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are two main parts of the code that contribute to creating the routes
    for the different dishes.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we registered a generic route using the colon syntax and assigned a
    name to it, which is as follows code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'This means that we can have a URL that ends in `/menu/82` , and the `Menu`
    component will be displayed with the `$route.params.id` variable set to `82` .
    So, the following line should be changed as per the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding line will be replaced by the following line in the rendered DOM:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Never mind the fact that there is no such image in real life.
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that we also gave a name to this route. This is not strictly necessary,
    but it enabled us to write the second main part of the code, as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Instead of writing a string, we can pass an object to the `to` prop and specify
    the `params` . In our case, the `param` is given by the `v-for` wrapping. This
    means that, for example, at the fourth cycle of the `v-for` :'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'This will result in the DOM as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Having more than one router-view in your page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Having multiple `<router-view>` enables you to have pages that can be organized
    with more complex layouts. For example, you can have a sidebar and the main view.
    This recipe is all about that.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe doesn't use any advanced concept. You are advised to familiarize
    yourself with the vue-router and learn how to install it, though. Go to the first
    recipe in the chapter to find out more.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe will use a lot of code to drive the point home. Don't be discouraged
    though, the mechanism is really simple.
  prefs: []
  type: TYPE_NORMAL
- en: We will build a second-hand hardware store. We will have a main view and a sidebar;
    these will be our router-view s. The sidebar will contain our shopping list so
    that we always know what we are shopping for and will have no distractions.
  prefs: []
  type: TYPE_NORMAL
- en: 'The whole HTML code is quite short because it only contains a title and the
    two `router-view` components:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: In this case, the list is named `router-view` . The second one does not have
    a name; thus, it gets named as  `Vue`  by default.
  prefs: []
  type: TYPE_NORMAL
- en: 'Register the `vue-router` in the JavaScript:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'After that, register the routes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Components is not a single object anymore; it''s become an object with two
    components inside it: one for the `list` and the other for the default `router-view`
    .'
  prefs: []
  type: TYPE_NORMAL
- en: 'Write the `list` component, as illustrated, before the router code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: This will display just the computer as an item we ought to remember to buy.
  prefs: []
  type: TYPE_NORMAL
- en: 'The parts component is the following; write it before the `router` code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'This contains a link to see more about the computer on sale; the next component
    is bound to that page, so write it before the `router` code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Of course, don''t forget to add the `Vue` instance:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'When you launch the app, you should see the two router views one above the
    other. If you want them side by side, you can add some CSS styles:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Image00119.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When adding the `<router-view>` components to the page, you just have to remember
    to add a name to refer to it later during route registration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'If you don''t specify a name, the route will be referred to as default:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: This way, the components will be displayed in their respective `router-view`
    elements.
  prefs: []
  type: TYPE_NORMAL
- en: If you don't specify one or more components for a named view, the `router-view`
    associated with that name will be empty.
  prefs: []
  type: TYPE_NORMAL
- en: Compose your routes hierarchically
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In many cases, the organization tree of your website may be complex. In some
    cases, there is a clear hierarchical organization that you can follow and with
    nested routes, vue-routes helps you keep everything orderly. The best situation
    is if there is an exact correspondence with how URLs are organized and how components
    are nested.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you will use components and other basic features of Vue. You
    will also use dynamic routes. Go to the *Using named dynamic routes* recipe to
    find out more about them.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you will build an online accounting website for an imaginary
    world. We will have two users--`Stark` and `Lannister` --and we will be able to
    see how much gold and how many soldier these two have.
  prefs: []
  type: TYPE_NORMAL
- en: 'The HTML layout of our website is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: We have a title and two links--one for `Stark` and one for `Lannister` --and,
    finally, the `router-view` element.
  prefs: []
  type: TYPE_NORMAL
- en: 'We add the `VueRouter` to the plugins:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we register the `routes` :'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: What we've said is to register a dynamic route,  `/user/:id` , and inside the
    `User`  component, there will be another router-view that will have the nested
    paths for gold and soldiers.
  prefs: []
  type: TYPE_NORMAL
- en: 'The three components just mentioned are written as shown; add them before the
    routing code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: As anticipated, there is another router-view entry point inside the `User` component
    that will contain the nested `routes` components.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, write the `Soldiers` and `Gold` components, always before the routing
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: These components will just display as many emojis as the gold or soldiers variable
    inside the Vue root instance data option.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is what the `Vue` root instance looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'Launching the application will enable you to have a visual representation of
    the gold and the number of soldiers of the two users:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Image00122.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To understand how nested routes work better, it''s useful to take a look at
    the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Image00123.jpg)'
  prefs: []
  type: TYPE_IMG
- en: There are only two levels in our recipe. The first level, which is the top level,
    is represented by the the big wrapping rectangle that corresponds to the  `/user/:id`
      route, meaning that every potential matching ID  will be on the same level.
  prefs: []
  type: TYPE_NORMAL
- en: The inner rectangle instead is a nested route and a nested component. It corresponds
    to the route gold and to the Gold component.
  prefs: []
  type: TYPE_NORMAL
- en: When nested `routes` correspond to nested components, this is the right choice.
    There are two other cases to consider.
  prefs: []
  type: TYPE_NORMAL
- en: When we have nested components but don't have nested routes, we can just prefix
    the nested route with a slash,  `/` . This will make it behave like a top-level
    route.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, consider that we change our code to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: Prefixing the `/gold` route will make the `Gold` component appear when we point
    the browser to the `/gold` URL instead of `/user/Lannister/gold` (which will result
    in an error and an empty page in this case because the user is not specified).
  prefs: []
  type: TYPE_NORMAL
- en: The other, opposite, case is when having nested `routes` but no components on
    the same level. In this case, just use the regular syntax to register routes.
  prefs: []
  type: TYPE_NORMAL
- en: Using route aliases
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sometimes it's necessary to have multiple URLs that point to the same page.
    This may be because the page has changed name or because the page is referred
    to differently in different parts of the site.
  prefs: []
  type: TYPE_NORMAL
- en: In particular, when a page changes its name, it is very important to also leave
    the former name in many settings. Links may break and the page may become unreachable
    from some parts of the website. In this recipe, you will prevent exactly that.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this recipe, you are only required to have some knowledge of the vue-router
    component (how to install it and basic operations). More information about vue-router
    will start from the *Creating a SPA with vue-router*  recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s imagine that we have a fashion website and Lisa, the employee responsible
    for giving titles to dresses, creates two new links for two pieces of clothing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'The developers create the corresponding routes in the vue-router:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: Later, it is discovered that the two items are not green but red. Lisa is not
    to blame since she is color-blind.
  prefs: []
  type: TYPE_NORMAL
- en: 'You are now in charge of changing all the links to reflect the true color of
    the listing. The first thing you do is change the links themselves. Here''s what
    the HTML layout looks like after you edit it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'You add the `VueRouter` plugin to `Vue` :'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, register the new `routes` as well as aliases for the old ones:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s what the mentioned components look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'Before launching the app, remember to instantiate a `Vue` instance:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'You can add a CSS rule to make the emojis look like images, as shown in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/Image00126.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Even if we changed all of our links, we cannot control how other entities are
    linked to our page. For search engines, such as Google, there is no way to tell
    them to remove their link to the old page and use the new one. This means that
    if we weren't to use aliases, we may have a lot of bad publicity in the form of
    broken links and 404 pages; in some cases, even from advertisers we are paying
    to link to a non-existent page.
  prefs: []
  type: TYPE_NORMAL
- en: Adding transitions between your routes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We explored transitions in detail in *[Chapter 3](text00140.html)* , *Transitions
    and Animations.* Here, we will use them when changing routes instead of changing
    elements or components. The same observations apply here as well.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before trying this recipe, I highly suggest that you complete some recipes in
    [*Chapter 3*](text00140.html) , *Transitions and Animations* , as well as this
    one. This recipe is a mixture of concepts learned up to now.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will build a website for a restaurant for ghosts. It won't
    be much different from the website of a regular restaurant, except for the requirements
    that the pages must fade instead of appearing instantly.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s put down some HTML layout, shall we:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: Note how we wrapped the main router display port with a `transition` tag. The
    mode `out-in` is set because we want the animation for the disappearing component
    to finish before the other component appears. If we hadn't we set that, the two
    fading components would be stacked for a brief time. For a more detailed discussion,
    you can refer to the *Letting an element leave before the enter phase in a transition*
     recipe.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create the two pages/components:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s register `routes` :'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'Before launching the application, instantiate a `Vue` object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: 'For the transition to work, you have to add a few CSS rules:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: Launch your application now. You successfully added a fade transition between
    page changes.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Wrapping the whole `<router-view>` inside a transition tag will perform the
    same transition for all the components.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we want a different transition for every component, we have an alternate
    option: we have to wrap the individual components inside transitions themselves.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s say, for example, that we have two transitions: spooky and delicious
    . We want to apply the first when the `Home` component appears, and the second
    when the `Menu` component appears.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to modify our components, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: Managing errors for your routes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It does not make much sense to go to a link if the page we go to is not found
    or is not working. Traditionally, we are presented with an error page when this
    happens. In an SPA, we are more powerful and we can prevent the user from going
    there altogether, displaying a little courtesy message stating that the page is
    not available. This greatly enhances the UX since the user can immediately take
    another action without the need to go back.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to follow along, you should complete the *Fetching data before switching
    route*  recipe.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe will build up on top of it and I'll assume that you already have
    all the relevant code in place.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As said, we will edit the resulting code from the *Fetching data before switching
    route* recipe to manage errors. Just so you remember, when going to the `/aboutme`
    page, we were loading information from the Internet. We want to avoid going to
    that page in case the information is not available.
  prefs: []
  type: TYPE_NORMAL
- en: For this recipe, add Axios as a dependency, as done in the previous recipes.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, enrich the HTML layout with the highlighted code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: 'This is a toast message that will appear on the screen whenever there is an
    error. Add some style to it with this CSS rule:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: 'The next thing you want to do is have a global mechanism to set `showError`
    to `true` . At the top of the JavaScript code, declare the `vm`  variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, assign our `Vue` root instance to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: We also added the `showError` variable to the data option.
  prefs: []
  type: TYPE_NORMAL
- en: The last thing to do is actually manage the error on the retrieval of our data,
    before displaying the bio information.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the highlighted code to the `beforeRouteEnter` hook:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: 'The next (false) command will make the user stay where they are, and we also
    edited the endpoint to `example.com` , which will return an error code on a `POST`
    request:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Image00127.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Axios will receive an error from `example.com` and this will trigger a rejection
    of the promise created when we called post. The rejection of a promise will, in
    turn, trigger the function passed inside the catch .
  prefs: []
  type: TYPE_NORMAL
- en: It's worth noting that at this point in the code,  `vm` is referring to the
    root `Vue` instance; this is because the code is always executed after the `Vue`
    instance is initialized and assigned to `vm` .
  prefs: []
  type: TYPE_NORMAL
- en: Adding a progress bar to load pages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It's true that with an SPA the user does not have to wait for a new page to
    load, but he still has to wait for the data to load. In the *Fetching data before
    switching route* recipe, we had to wait a while longer after we clicked on the
    button to the `/aboutme` page. There was nothing to suggest that the data was
    loading, and then suddenly the page appeared. Wouldn't it be great if the user
    had at least some feedback that the page is loading?
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to follow along, you should complete the *Fetching data before switching
    route*  recipe.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe will build up on top of it and I'll assume that you have all the
    relevant code in place already.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As stated earlier, I will assume that you have all the code resulting from the *Fetching
    data before switching route* recipe in place and working.
  prefs: []
  type: TYPE_NORMAL
- en: For this recipe, we will use an additional dependency--`NProgress` , a small
    utility to display a loading bar on top of the screen.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following two lines inside the head of your page or the list of dependencies
    in JSFiddle (there is also a package for npm):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: Here,  `X` is the version of `NProgress` . At writing time it was 0.2.0, but
    you can look it up online.
  prefs: []
  type: TYPE_NORMAL
- en: After we've done this, the next step is to define the behavior we want from
    the progress bar.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we''d like the progress bar to appear as soon as we click on the link.
    For this, we can add an event listener to the click event, but it will be a poor
    design if we had, say, a hundred links. A much more sustainable and clean way
    to do it is by creating a new hook for the router and connecting the appearance
    of the progress bar with the switching of the route. This will also have the advantage
    of offering a consistent experience throughout the application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: 'In a similar fashion, we want the bar to disappear when loading is completed
    successfully. This means that we want to do it inside the callback:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: 'You can now launch the application and your progress bar should already work:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Image00128.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe also demonstrates that it is not at all difficult to leverage external
    libraries, provided they are easy to install.
  prefs: []
  type: TYPE_NORMAL
- en: 'Since the `NProgress` component is so simple and useful, I report its API as
    a reference here:'
  prefs: []
  type: TYPE_NORMAL
- en: '`NProgress.start()` : Shows the progress bar'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`NProgress.set(0.4)` : Sets a percentage of the progress bar'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`NProgress.inc()` : Increments the progress bar by a little'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`NProgress.done()` : Completes the progress'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We have used two of the preceding functions.
  prefs: []
  type: TYPE_NORMAL
- en: As a precaution, I would also suggest not relying on the `done()` function being
    called by the individual components. We are calling it in the `then` function,
    but what if the next developer forgets? After all, we are starting the progress
    bar before *any* switch in route.
  prefs: []
  type: TYPE_NORMAL
- en: 'It would be better to add a new hook to the `router` :'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: Since the `done` function is idempotent, we can call it as many times as we
    want. This will, therefore, not modify the behavior of our application and will
    ensure that even if future developers forget to close the progress bar, it will
    disappear by itself once the route has changed.
  prefs: []
  type: TYPE_NORMAL
- en: How to redirect to another route
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are infinite reasons you may wish to redirect the user. You may want the
    user to log in before accessing a page, or maybe a page has moved and you want
    your user to take note of the new link. In this recipe, you will redirect the
    user to a new home page as a way to quickly modify the website.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe will only use basic knowledge about vue-router. If you have completed
    the *Creating a SPA with vue-router* recipe, you are good to go.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Suppose that we have an online clothing shop.
  prefs: []
  type: TYPE_NORMAL
- en: 'This will be the HTML layout of the site:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: It's just a page with a link to a clothes listing.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s register the `VueRouter` :'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: 'We have three pages in our website, represented by the following components:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: They represent the home page, the clothes listing, and a page we used last year
    with some discounts.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s register some `routes` :'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we add a root `Vue` instance:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: You can launch the application, and it should work without any problems.
  prefs: []
  type: TYPE_NORMAL
- en: Black Friday is tomorrow and we forgot that it's the biggest event in fashion
    around the world. We don't have time to rewrite the home page, but there's that
    page from last year's sales that can do the trick. What we will do is redirect
    users who visit our home page to that page.
  prefs: []
  type: TYPE_NORMAL
- en: 'To implement this, we need to modify how we registered our `routes` :'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: Only by adding that redirect we did save the day. Now, you will be presented
    with the sales page whenever you visit the home page.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When the root route is matched, the `Home` component won''t be loaded. The
    path of `/last-year-sales` will be matched instead. We can also omit the component
    altogether since it will never be loaded:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: There's more…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Redirecting in vue-router is more powerful than what we just saw. Here, I will
    try to enrich the application we just created with more functionality from redirecting.
  prefs: []
  type: TYPE_NORMAL
- en: Redirecting to 404s
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Redirecting not found pages is done by adding a catch-all as the last route.
    It will match everything that is not matched by the other routes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: Named redirecting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Redirection can be combined with named routes (refer to the *Using named dynamic
    routes*  recipe). We can specify the destination by name:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: Redirecting with parameters
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can also retain the parameters while redirecting:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: Dynamic redirecting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This is the ultimate redirect. You can access the route the user is trying
    to access and decide where you want to redirect him (you can''t cancel the redirection
    though):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: Saving scrolling position when hitting back
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In vue-router, there are two modes of navigation: `hash`  and `history` . The
    default mode and the one used in the previous recipes is `previouslye.` Traditionally,
    when you visit a website, scroll down a bit and click on a link to another page;
    the new page displays from the top. When you click on the browser''s back button,
    the page displays from the previous scrolled height and the link you just clicked
    on is visible.'
  prefs: []
  type: TYPE_NORMAL
- en: This is not true when you are in an SPA, or at least is not automatic. The vue-router
    history mode lets you simulate this or, even better, have fine-grained control
    of what happens to your scrolling.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To complete this recipe, we will need to switch to history mode. History mode
    only works when the app is running on a properly configured server. How to configure
    a server for SPA is out of the scope of this book (but the principle is that every
    route gets redirected from the server side to `index.html` ).
  prefs: []
  type: TYPE_NORMAL
- en: We will use an npm program to launch a small server; you are expected to have
    npm installed (you can take a look at the *Choosing a development environment*
    recipe to find out more about npm).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: First, you'll install a compact server for SPAs so that history mode will work.
  prefs: []
  type: TYPE_NORMAL
- en: 'In your favorite command line, go inside the directory that will contain your
    application. Then, type the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: After the server is run, you will have to point your browser to `http://localhost:8080`
    and if you have a file called `index.html` in your directory, it will be shown;
    otherwise you won't see much.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a file called `index.html` and fill in some boilerplate, like in the *Choosing
    a development environment*  recipe. We want an empty page with only `Vue` and
    `vue-router` as dependencies. Our empty canvas should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: 'As HTML layout, put this in the body:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: 'We have a heading with three links and a router-view entry point. We will create
    two long pages for the sports and fashion pages:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: 'We only need a stub for the home page component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: 'Write a reasonable router for this news website:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: If you go with your browser now to the address specified earlier, you should
    see the site live.
  prefs: []
  type: TYPE_NORMAL
- en: Go to the sports page, scroll down until you see the link, and click on it.
  prefs: []
  type: TYPE_NORMAL
- en: Note how the page you are visiting is not displayed from the beginning. This
    will not happen with a traditional website and is not desirable.
  prefs: []
  type: TYPE_NORMAL
- en: Click on the back button and note how we are where we last left the page; we
    want to retain this behavior.
  prefs: []
  type: TYPE_NORMAL
- en: 'Lastly, note how the URL of the page does not look natural but has the hash
    symbol inside; we would like the URL to look better:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Image00129.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'To accomplish this, let''s modify our router code to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: We added a line that specifies the new mode to be history (no hash in the link)
    and we defined the `scrollBehavior` function to go back to the last position if
    present; if it's a new page, it should scroll to the top-left corner.
  prefs: []
  type: TYPE_NORMAL
- en: You can try this by refreshing the browser and going back to the home page.
  prefs: []
  type: TYPE_NORMAL
- en: Open the sports page and click on the link in the middle of the page. The new
    page now displays from the beginning.
  prefs: []
  type: TYPE_NORMAL
- en: Click on back and the `savedPosition` gets restored.
  prefs: []
  type: TYPE_NORMAL
- en: 'Note how the URL looks much nicer now:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Image00130.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When you use a URL that contains the hash symbol in the browser, the browser
    will send a request for the URL without the suffix after the hash, that is, when
    you have an event inside a page that goes to the same page but with a different
    hash suffix:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: The browser will not reload the page; this is why vue-router can modify the
    content of the page when the user clicks on a link that only modifies the hash,
    without the page being reloaded.
  prefs: []
  type: TYPE_NORMAL
- en: When you change the mode from `hash`  to `history` , vue-router will drop the
    hash notation and will leverage the  `history.pushState()` function.
  prefs: []
  type: TYPE_NORMAL
- en: 'This function adds another virtual page and changes the URL to something else:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: The browser will not send a `GET` request to look for `page2` though; in fact,
    it won't do anything.
  prefs: []
  type: TYPE_NORMAL
- en: When you press the back button, the browser reverts the URL and vue-router receives
    an event. It will then read the URL (which is now `page1 )` and match the associated
    route.
  prefs: []
  type: TYPE_NORMAL
- en: The role of our compact history server is to redirect every GET request to the
    `index.html`  page. This is why when we try to go to `http://localhost:8080/fashion`
    directly, we don't get a *404*  error.
  prefs: []
  type: TYPE_NORMAL
