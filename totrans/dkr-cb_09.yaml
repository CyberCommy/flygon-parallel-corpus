- en: Chapter 9. Docker Security
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting Mandatory Access Control (MAC) with SELinux
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Allowing writes to volume mounted from the host with SELinux ON
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Removing capabilities to breakdown the power of a root user inside the container
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sharing namespaces between the host and the container
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Docker containers are not actually Sandbox applications, which means they are
    not recommended to run random applications on the system as root with Docker.
    You should always treat a container running a service/process as a service/process
    running on the host system and put all the security measures inside the container
    you put on the host system.
  prefs: []
  type: TYPE_NORMAL
- en: We saw in [Chapter 1](part0015.xhtml#aid-E9OE2 "Chapter 1. Introduction and
    Installation"), *Introduction and Installation*, how Docker uses namespaces for
    isolation. The six namespaces that Docker uses are Process, Network, Mount, Hostname,
    Shared Memory, and User. Not everything in Linux is namespaced, for example, SELinux,
    Cgroups, Devices (`/dev/mem`, `/dev/sd*`), and Kernel Modules. Filesystems under
    `/sys`, `/proc/sys`, `/proc/sysrq-trigger`, `/proc/irq`, `/proc/bus` are also
    not namespaced but they are mounted as read only by default with the libcontainer
    execution driver.
  prefs: []
  type: TYPE_NORMAL
- en: To make Docker a secure environment, a lot of work has been done in the recent
    past and more work is underway.
  prefs: []
  type: TYPE_NORMAL
- en: 'As Docker images are the basic building blocks, it is very important that we
    choose the right base image to start with. Docker has the concept of official
    images, which are maintained by either Docker, the vendor or someone else. If
    you recall from [Chapter 2](part0022.xhtml#aid-KVCC1 "Chapter 2. Working with
    Docker Containers"), *Working with Docker Containers*, we can search images on
    Docker Hub using the following syntax:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'For example, consider the following command :'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: We will see a column `OFFICIAL`, and if the images are official, you will see
    `[OK]` against that image in that column. There is an experimental feature added
    in Docker 1.3 ([http://blog.docker.com/2014/10/docker-1-3-signed-images-process-injection-security-options-mac-shared-directories/](http://blog.docker.com/2014/10/docker-1-3-signed-images-process-injection-security-options-mac-shared-directories/)),
    which does Digital Signal Verification of official images after pulling the image.
    If the image has been tampered with, the user will be notified, but it will not
    prevent the user from running it. At present, this feature works only with official
    images. More details about official images can be found at [https://github.com/docker-library/official-images](https://github.com/docker-library/official-images).
    The image signing and verification feature is not ready, so as of now, don't completely
    rely on it.
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 6](part0069.xhtml#aid-21PMQ1 "Chapter 6. Docker APIs and Language
    Bindings"), *Docker APIs and Language Bindings*, we saw how we can secure Docker
    remote API, when Docker daemon access is configured over TCP.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We can also consider turning off the default intercontainer communication over
    the network with `--icc=false` on the Docker host. Though containers can still
    communicate through links, which overrides the default DROP policy of iptables,
    they get set with the `--icc=false` option.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We can also set Cgroups resource restrictions through, which we can prevent
    **Denial of Service** (**DoS**) attacks through system resource constraints.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Docker takes advantage of the special device, Cgroups that allows us to specify
    which device nodes can be used within the container. It blocks the processes from
    creating and using device nodes that could be used to attack the host.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Any device node precreated on the image cannot be used to talk to kernel because
    images are mounted with the `nodev` option.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following are some guidelines (may not be complete), which one can follow
    to have a secure Docker environment:'
  prefs: []
  type: TYPE_NORMAL
- en: Run services as nonroot and treat the root in the container, as well as outside
    the container, as root.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use images from trusted parties to run the container; avoid using the `-insecure-registry=[]`
    option.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Don't run the random container from the Docker registry or anywhere else. Red
    Hat carries patches to add and block registries to give more control to enterprises
    ([http://rhelblog.redhat.com/2015/04/15/understanding-the-changes-to-docker-search-and-docker-pull-in-red-hat-enterprise-linux-7-1/](http://rhelblog.redhat.com/2015/04/15/understanding-the-changes-to-docker-search-and-docker-pull-in-red-hat-enterprise-linux-7-1/)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Have your host kernel up to date.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Avoid using `--privileged` whenever possible and drop container privileges as
    soon as possible.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configure **Mandatory Access Control** (**MAC**) through SELinux or AppArmor.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Collect logs for auditing.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Do regular auditing.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Run containers on hosts, which are specially designed to run containers only.
    Consider using Project Atomic, CoreOS, or similar solutions.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mount the devices with the `--device` option rather than using the `--privileged`
    option to use devices inside the container.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Prohibit SUID and SGID inside the container.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Recently, Docker and the Center for Internet Security ([http://www.cisecurity.org/](http://www.cisecurity.org/))
    released a best practices guide for Docker security, which covers most of the
    preceding guidelines and more guidelines at [https://blog.docker.com/2015/05/understanding-docker-security-and-best-practices/](https://blog.docker.com/2015/05/understanding-docker-security-and-best-practices/).
  prefs: []
  type: TYPE_NORMAL
- en: To set the context for some of the recipes in this chapter, let's try an experiment
    on the default installation on Fedora 21 with Docker installed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Disable SELinux using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a user and add it to the default Docker group so that the user can run
    Docker commands without `sudo`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Log in using the user we created earlier, start a container as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'From the container chroot to `/host` and run the `shutdown` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![Introduction](../Images/image00408.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: As we can see, a user in the Docker group can shut down the host system. Docker
    currently does not have authorization control, so if you can communicate to the
    Docker socket, you are allowed to run any Docker command. It is similar to `/etc/sudoers`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: This is really not good. Let's see how we can guard against this and more in
    the rest of the chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Setting Mandatory Access Control (MAC) with SELinux
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'It is recommended that you set up some form of MAC on the Docker host either
    through SELinux or AppArmor, depending on the Linux distribution. In this recipe,
    we''ll see how to set up SELinux on a Fedora/RHEL/CentOS installed system. Let''s
    first look at what SELinux is:'
  prefs: []
  type: TYPE_NORMAL
- en: SELinux is a labeling system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Every process has a label
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Every file, directory, and system object has a label
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Policy rules control access between labeled processes and labeled objects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The kernel enforces the rules
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'With Docker containers, we use two types of SELinux enforcement:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Type enforcement**: This is used to protect the host system from container
    processes. Each container process is labeled `svirt_lxc_net_t` and each container
    file is labeled `svirt_sandbox_file_t`. The `svirt_lxc_net_t` type is allowed
    to manage any content labeled with `svirt_sandbox_file_t`. Container processes
    can only access/write container files.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Multi Category Security enforcement**: By setting type enforcement, all container
    processes will run with the `svirt_lxc_net_t` label and all content will be labeled
    with `svirt_sandbox_file_t`. However, only with these settings, we are not protecting
    one container from another because their labels are the same.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We use **Multi Category Security** (**MCS**) enforcement to protect one container
    from another, which is based on **Multi Level Security** (**MLS**). When a container
    is launched, the Docker daemon picks a random MCS label, for example, `s0:c41,c717`
    and saves it with the container metadata. When any container process starts, the
    Docker daemon tells the kernel to apply the correct MCS label. As the MCS label
    is saved in the metadata, if the container restarts, it gets the same MCS label.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A Fedora/RHEL/CentOS host with the latest version of Docker installed, which
    can be accessed through a Docker client.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Fedora/RHEL/CentOS gets installed by default with SELinux in enforcing mode
    and the Docker daemon is set to start with SELinux. To check whether these conditions
    are being met, perform the following steps.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following command to make sure SELinux is enabled:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: If the preceding command returns `enforcing`, then it's all good, else we need
    to change it by updating SELinux configuration file (`/etc/selinux/config`) and
    rebooting the system.
  prefs: []
  type: TYPE_NORMAL
- en: 'Docker should be running with the `--selinux-enabled` option. You can check
    the `OPTIONS` section in the Docker daemon configuration (`/etc/sysconfig/docker`)
    file. Also, cross-check whether the Docker service has started with the SELinux
    option:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The preceding command assumes that you are not starting Docker in daemon mode
    manually.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start a container (without the privileged option) after mounting a host
    directory as volume and try to create a file in that:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it…](../Images/image00409.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'As expected, we see `Permission denied` because a container process with the
    `svirt_lxc_net_t` label cannot create files on the host''s filesystem. If we look
    at the SELinux logs (`/var/log/audit.log`) on the host, we will see messages similar
    to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it…](../Images/image00410.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The `s0:c157,c350` label is the MCS label on the container.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: SELinux sets both Type and Multi Category Security enforcement when the right
    options are set for SELinux and Docker. The Linux kernel enforces these enforcements.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If SELinux is in enforcing mode and the Docker daemon is configured to use SELinux,
    then we will not be able to shut down the host from the container, like we did
    earlier in this chapter:![There's more…](../Images/image00411.jpeg)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As we know, by default, all the containers will run with the `svirt_lxc_net_t`
    label, but we can also adjust SELinux labels for custom requirements. Visit the
    *Adjusting SELinux labels* section of [http://opensource.com/business/15/3/docker-security-tuning](http://opensource.com/business/15/3/docker-security-tuning).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up MLS with Docker containers is also possible. Visit the *Multi Level
    Security mode* section of [http://opensource.com/business/15/3/docker-security-tuning](http://opensource.com/business/15/3/docker-security-tuning).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*The SELinux Coloring Book*; visit [https://people.redhat.com/duffy/selinux/selinux-coloring-book_A4-Stapled.pdf](https://people.redhat.com/duffy/selinux/selinux-coloring-book_A4-Stapled.pdf)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Allowing writes to volume mounted from the host with SELinux ON
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we saw in the earlier recipe, when SELinux is configured, a nonprivileged
    container cannot access files on the volume created after mounting the directory
    from the host system. However, sometimes it is needed to allow access to host
    files from the container. In this recipe, we'll see how to allow access in such
    cases.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A Fedora/RHEL/CentOS host with the latest version of Docker installed, which
    can be accessed through a Docker client. Also, SELinux is set to enforcing mode
    and the Docker daemon is configured to use SELinux.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Mount the volume with the `z` or `Z` option as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '![How to do it…](../Images/image00412.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: While mounting the volume, Docker will relabel to the volume to allow access.
    From the man page of Docker run.
  prefs: []
  type: TYPE_NORMAL
- en: The `z` option tells Docker that the volume content will be shared between containers.
    Docker will label the content with a shared content label. The shared volume labels
    allow all containers to read/write content. The `Z` option tells Docker to label
    the content with a private unshared label. Private volumes can only be used by
    the current container.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Volume mounts* section at [http://opensource.com/business/14/9/security-for-docker](http://opensource.com/business/14/9/security-for-docker)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Removing capabilities to breakdown the power of a root user inside a container
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In simple terms, with capabilities, we can breakdown the power of a root user.
    From the man page for *capabilities*:'
  prefs: []
  type: TYPE_NORMAL
- en: '*For the purpose of performing permission checks, traditional UNIX implementations
    distinguish two categories of processes: privileged processes (whose effective
    user ID is 0, referred to as superuser or root), and unprivileged processes (whose
    effective UID is nonzero). Privileged processes bypass all kernel permission checks,
    while unprivileged processes are subject to full permission checking based on
    the process''s credentials (usually: effective UID, effective GID, and supplementary
    group list).*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '>'
  prefs: []
  type: TYPE_NORMAL
- en: '*Starting with kernel 2.2, Linux divides the privileges traditionally associated
    with superuser into distinct units, known as capabilities, which can be independently
    enabled and disabled. Capabilities are a per-thread attribute.*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Some example capabilities are:'
  prefs: []
  type: TYPE_NORMAL
- en: '`CAP_SYSLOG`: This modifies kernel printk behavior'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CAP_NET_ADMIN`: This configures the network'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CAP_SYS_ADMIN`: This helps you to catch all the capabilities'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are only 32 slots available for capabilities in the kernel. There is one
    capability, `CAP_SYS_ADMIN`, that catches all capabilities; this is used whenever
    in doubt.
  prefs: []
  type: TYPE_NORMAL
- en: In version 1.2, Docker added some features to add or remove the capabilities
    for a container. It uses the `chown`, `dac_override`, `fowner`, `kill`, `setgid`,
    `setuid`, `setpcap`, `net_bind_service`, `net_raw`, `sys_chroot`, `mknod`, `setfcap`,
    and `audit_write` capabilities by default and removes the following capabilities
    for a container by default.
  prefs: []
  type: TYPE_NORMAL
- en: '`CAP_SETPCAP`: This modifies the process capabilities'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CAP_SYS_MODULE`: This inserts/removes the kernel modules'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CAP_SYS_RAWIO`: This modifies the kernel memory'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CAP_SYS_PACCT`: This configures process accounting'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CAP_SYS_NICE`: This modifies the priority of processes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CAP_SYS_RESOURCE`: This overrides the resource limits'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CAP_SYS_TIME`: This modifies the system clock'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CAP_SYS_TTY_CONFIG`: This configures `tty` devices'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CAP_AUDIT_WRITE`: This writes the audit log'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CAP_AUDIT_CONTROL`: This configures the audit subsystem'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CAP_MAC_OVERRIDE`: This ignores the kernel MAC policy'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CAP_MAC_ADMIN`: This configures MAC configuration'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CAP_SYSLOG`: This modifies kernel printk behavior'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CAP_NET_ADMIN`: This configures the network'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CAP_SYS_ADMIN`: This helps you catch all the containers'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We need to be very careful what capabilities we remove, as applications can
    break if they don't have enough capabilities to run. To add and remove the capabilities
    for the container, you can use the `--cap-add` and `--cap-drop` options respectively.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A host with the latest version of Docker installed, which can be accessed through
    a Docker client.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To drop capabilities, run a command similar to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'To remove the `setuid` and `setgid` capabilities from the container so that
    it cannot run binaries, which have these bits set, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Similarly, to add capabilities, run a command similar to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'To add all the capabilities and just drop `sys-admin`, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before starting the container, Docker sets up the capabilities for the root
    user inside the container, which affects the command execution for the container
    process.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s revisit the example we saw at the beginning of this chapter, through
    which we saw the host system shut down through a container. Let SELinux be disabled
    on the host system; however, while starting the container, drop the `sys_choot`
    capability:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '![There''s more...](../Images/image00413.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Dan Walsh's articles on opensource.com at [http://opensource.com/business/14/9/security-for-docker](http://opensource.com/business/14/9/security-for-docker).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Docker 1.2 release notes at [http://blog.docker.com/2014/08/announcing-docker-1-2-0/](http://blog.docker.com/2014/08/announcing-docker-1-2-0/).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are efforts on to selectively disable system calls from container processes
    to provide tighter security. Visit the *Seccomp* section of [http://opensource.com/business/15/3/docker-security-future](http://opensource.com/business/15/3/docker-security-future).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Similar to custom namespaces and capabilities with version 1.6, Docker supports
    the `--cgroup-parent` flag to pass specific Cgroup to run containers. [https://docs.docker.com/v1.6/release-notes/](https://docs.docker.com/v1.6/release-notes/).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sharing namespaces between the host and the container
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we know, while starting the container, by default, Docker creates six different
    namespaces—Process, Network, Mount, Hostname, Shared Memory, and User for a container.
    In some cases, we might want to share a namespace between two or more containers.
    For example, in Kubernetes, all containers in a pod share the same network namespace.
  prefs: []
  type: TYPE_NORMAL
- en: In some cases, we would want to share the namespaces of the host system with
    the containers. For example, we share the same network namespace between the host
    and the container to get near line speed inside the container. In this recipe,
    we will see how to share namespaces between the host and the container.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A host with the latest version of Docker installed, which can be accessed through
    a Docker client.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To share the host network namespace with the container, run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'If you see the network details inside the container, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: You will see a result same as the host.
  prefs: []
  type: TYPE_NORMAL
- en: 'To share the host network, PID, and IPC namespaces with the container, run
    the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Docker does not create separate namespaces for containers when such arguments
    are passed to the container.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For hosts that are built to run just containers, such as Project Atomic ([http://www.projectatomic.io/](http://www.projectatomic.io/)),
    which we saw in [Chapter 8](part0081.xhtml#aid-2D7TI1 "Chapter 8. Docker Orchestration
    and Hosting Platforms"), *Docker Orchestration and Hosting Platforms*, doesn''t
    have debugging tools such as `tcpdump` and `sysstat` on the host system. So we
    have created containers with those tools and have access to host resources. In
    such cases, sharing namespaces between the host and the container becomes handy.
    You can read more about it at the following links:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://developerblog.redhat.com/2014/11/06/introducing-a-super-privileged-container-concept/](http://developerblog.redhat.com/2014/11/06/introducing-a-super-privileged-container-concept/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://developerblog.redhat.com/2015/03/11/introducing-the-rhel-container-for-rhel-atomic-host/](http://developerblog.redhat.com/2015/03/11/introducing-the-rhel-container-for-rhel-atomic-host/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Dan Walsh's documentation on Docker Security at [http://opensource.com/business/15/3/docker-security-tuning](http://opensource.com/business/15/3/docker-security-tuning)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
