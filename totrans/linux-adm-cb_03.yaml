- en: Networking and Firewalls
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following recipes will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Determining our network configuration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More examples of using the IP suite
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding and configuring network interfaces
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Modern domain name resolution on Linux
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring NTP and the problems we face
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Listing firewall rules on the command line
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding firewall rules on the command line
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Determining the running services and ports in use
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Debugging with `iftop`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Round-up-firewalls and networks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we know the ins and outs of SSH and connecting to our machines, whether
    it be the local VMs or remote servers, we're going to take a look at the most
    obvious part of the security onion (the firewall) and the Linux network stack
    in general.
  prefs: []
  type: TYPE_NORMAL
- en: Traditionally, firewall administration was handled by the `iptables` and associated
    commands, and indeed you'll be hard pressed to find system administrators who
    don't instantly install the `iptables` suite of tools on every server they find
    (that doesn't have it installed already).
  prefs: []
  type: TYPE_NORMAL
- en: On modern installations, `firewall-cmd` (CentOS) and `ufw` (Ubuntu) can be found
    installed in place of, or in addition to, traditional tools. These are an attempt
    to make the firewall process a more painless experience, though purists will defend
    `iptables` to the death.
  prefs: []
  type: TYPE_NORMAL
- en: No matter the user space (the name given to programs that operate outside the
    kernel, at the user level) tool used, all of the changes we make are being made
    using the Netfilter kernel framework. Indeed, a replacement for `iptables` and
    Netfilter, called `nft`, has been available in the kernel for some time, though
    it's not widely used at the moment.
  prefs: []
  type: TYPE_NORMAL
- en: '`iptables` is something of a catchall name, at least informally. Technically,
    `iptables` is used for IPv4, ip6tables is used for IPv6, ebtables is used for
    Ethernet frames, and arptables is used for ARP.'
  prefs: []
  type: TYPE_NORMAL
- en: Alongside our journey into the confusing world of firewalls, we're going to
    create a network interface and configure it with both static and dynamic IP allocation.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We're again going to use Vagrant and VirtualBox for our work. We'll configure
    three virtual machines.
  prefs: []
  type: TYPE_NORMAL
- en: 'I''ve put together the following `Vagrantfile` for use in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'It would be advisable to create a folder called `Chapter Three` and copy this
    code into a file called `Vagrantfile`. Running `vagrant up` from inside the folder
    containing your `Vagrantfile` should configure two VMs for testing. Once provisioned,
    make sure that you can connect to the first by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: For this section, ensure that your `centos1` VM is running, and connect to it. This
    section assumes you know networking at a basic level, in the sense that you understand
    the differences between a static and dynamic IP address, and you know roughly
    how public and private IP addresses differ.
  prefs: []
  type: TYPE_NORMAL
- en: Determining our network configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you ever find yourself working with physical equipment in a data center,
    you may wind up plonked in front of a box at some point, with only a username
    and password. You will have to use these credentials to discover the box's IP
    information so that another individual in an ivory tower somewhere can connect
    to it remotely.
  prefs: []
  type: TYPE_NORMAL
- en: The individual in the ivory tower will sometimes be paid better than you for
    lounging around in a chair all day pressing a keyboard. My advice is to not dwell
    on this, or you'll end up bitter and grumpy ahead of your years.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Connect to `centos1` if you haven't already.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'For the purposes of demonstration, ensure that `ifconfig` is installed too:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this short section, we're going to discover what IP address our box has,
    what network it's on, and we're going to learn how it's configured in the way
    it is.
  prefs: []
  type: TYPE_NORMAL
- en: Discerning the IP
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'On a modern box, this is done with `ip`, which we''ll go into greater depth
    with later:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: You can shorten `ip` commands to make them quicker to type (as we did in the
    previous chapter,) but in the preceding code I've used the full expression as
    it better expresses what we're doing.
  prefs: []
  type: TYPE_NORMAL
- en: 'This command will give you information about all the interfaces on your system.
    In the case of our VMs, it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: We know `lo` is the loopback address, which will always have the `127.0.0.1/8`
    setup, or some other address in that range.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you know the device you want explicitly, you can also specify it. In the
    following code, we''ve done this with `eth1`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Within the printed block, we''re looking for the IPv4 address, which is listed
    as being in the `inet` family:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: We have the IP, `192.168.33.10`, and we know the subnet it's in, `/24 (255.255.255.0)`.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you''re a bit lazier and want to save on eye movement, you could use something
    like the following in a scrip to get this information:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code is one of many, many ways in which you could write a one-liner
    to generate the output you desire. Linux is flexible, and you might choose to
    reach the same output in a completely different way. It doesn't overly matter
    how you do it, but if it's something you plan on sharing, doing it in a succinct
    and readable style is often best.
  prefs: []
  type: TYPE_NORMAL
- en: Discerning the IP (deprecated method)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: On older systems, or those managed by stick-in-the-mud admins, you might also
    use `ifconfig` to find the IP and subnet.
  prefs: []
  type: TYPE_NORMAL
- en: 'Simply running `ifconfig` will print all relevant information:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: As with IP, it's trivial to dump the information about a specific interface.
  prefs: []
  type: TYPE_NORMAL
- en: 'As we can see in the following code, we''re looking again at the specifics
    of `eth1`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: I use the word deprecated for this, but that's generally only true for the Linux
    world. In the BSDs and macOS, `ifconfig` is still very much the only show in town,
    and it's still being actively improved and maintained.
  prefs: []
  type: TYPE_NORMAL
- en: Discerning the gateway address
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once we have the IP address of the box and the subnet, we might want to know
    which device our machine is using to talk to the outside world.
  prefs: []
  type: TYPE_NORMAL
- en: This is the `default` route that traffic takes out of your box.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the `ip` command, this is easy to discover:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Note the `default via` section.
  prefs: []
  type: TYPE_NORMAL
- en: Discerning the gateway address (deprecated method)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'With net-tools installed, we can also use the `route` command to find our default
    route out:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you use `ip` or `ifconfig`, you're querying the network devices that the
    kernel is aware of, and which it's currently managing the traffic for.
  prefs: []
  type: TYPE_NORMAL
- en: If you don't see your network device in the list output by either of the common
    commands, it's likely that your kernel doesn't have a driver for the device in
    question. This is rare these days, but can happen for custom networking gear,
    whereupon the vendor should supply a kernel module for use with it.
  prefs: []
  type: TYPE_NORMAL
- en: '`ip` itself is more than just one command: it''s a suite, meaning that when
    we used the `ip address` command here, we were only using a subsection of the
    tools available to us.'
  prefs: []
  type: TYPE_NORMAL
- en: When you use `ip route` or the `route` command, you're actually querying the
    distribution's routing table.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Knowing the basics of how your network is configured is great, but that's usually
    only step one.
  prefs: []
  type: TYPE_NORMAL
- en: Here, I'll cover some rudimentary network troubleshooting.
  prefs: []
  type: TYPE_NORMAL
- en: Checking connectivity
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Just knowing what device our box is using as its gateway is one thing, but actually
    being able to reach it is another thing entirely.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you''re standing before a box, there''s a good chance you''ve been summoned
    to try and work out what''s not working. Trying to ping the gateway is a good
    first step:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Here, our gateway device responded, but if yours doesn't, or you get `Destination
    Host Unreachable`, then there's a good chance something is going wrong (or you've
    been given duff information by your colleague in the ivory tower—always check
    this first).
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following code, we''re checking the status of the interface itself,
    again using the `ip` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: You may be interested to know why we have three `UP` values here.
  prefs: []
  type: TYPE_NORMAL
- en: The initial `UP` value inside the chevrons is if the interface is physically
    up. The `LOWER_UP` value, also inside the chevrons, is shown if a cable is physically
    connected and up. The `state UP` value outside the chevrons is if the interface
    is administratively up, which can be changed to `DOWN` through software.
  prefs: []
  type: TYPE_NORMAL
- en: Checking what route our box will take
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It's also possible that connectivity might be failing because your box is trying
    to talk out of the wrong interface. We can check this with `ip` again.
  prefs: []
  type: TYPE_NORMAL
- en: First, let's look at which route we're going to take when communicating with
    the wider world.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following code, we''re checking how our box would attempt to talk to
    the device with the IP `1.1.1.1`. It shows us that we would go to this IP via
    the gateway address, `10.0.2.2`, and our `eth0` interface:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s see what route we''ll take if we''re communicating with our gateway.
    Here, we can see a direct connection (no `via`) also going out of `eth0`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: So far, so good, but what about if we want to talk to the other VM on our private
    network?
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '`eth1` would be used, which makes perfect sense given it''s on the same network.'
  prefs: []
  type: TYPE_NORMAL
- en: Hang on a moment—our own IP is in this subnet too, so what happens if we try
    to communicate with ourselves?
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Ah! Clever! We're still using the loopback address (`dev lo`) to talk to our
    local IP address, because Linux knows that this IP is ours.
  prefs: []
  type: TYPE_NORMAL
- en: As with the preceding example, Linux occasionally does things that might surprise
    you, especially if you're coming from a Windows or BSD administration world. Take
    the `lo` interface—it's not just `127.0.0.1`, but the entire `/8` range. You can
    ping anywhere from `127.0.0.1` to `127.255.255.254` on a typical Linux system,
    and get a response from your local machine.
  prefs: []
  type: TYPE_NORMAL
- en: You can even ping `127.1` and get a legitimate response, but I'll leave it as
    an exercise for the reader to determine why this might be.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Take a look at the `ip` and `ip-address` manual pages.
  prefs: []
  type: TYPE_NORMAL
- en: Personally, I would focus on learning about the `ip` suite, instead of the old
    net-tools, because if you're trying to work on a networking problem, there's a
    good chance you won't be able to install net-tools in a pinch.
  prefs: []
  type: TYPE_NORMAL
- en: More examples of using the ip suite
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We're going to use `ip` from here on out due to its modern nature.
  prefs: []
  type: TYPE_NORMAL
- en: This section assumes that you know networking at a basic level, in the sense
    that you understand the differences between a static and dynamic IP address, and
    know roughly how public and private IP addresses differ.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we're going to make a few changes to our networking. If at
    any point you find yourself kicked out of your VM, remember *The Hitchhiker's
    Guide to the Galaxy* and don't panic—simply destroy your VMs and start again.
  prefs: []
  type: TYPE_NORMAL
- en: Begin on the `centos1` command line.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we're going to use the `ip suite` to change some basic elements
    of our networking stack, such as adding another IP address, or shutting down an
    interface entirely.
  prefs: []
  type: TYPE_NORMAL
- en: Adding and removing an IP against an interface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This can be accomplished with the `ip address` command, but does require root.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this example, I chose another IP in the `192.168.33.0/24` subnet, which
    I know isn''t in use:'
  prefs: []
  type: TYPE_NORMAL
- en: In the real world, it's good practice to ping an IP first, even if you believe
    it's free to use.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Checking our `eth1` interface, we can now see the secondary IP:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Upon a reboot, this change will be lost. We will talk about adding IP information
    permanently in the section titled 'Adding and configuring network interfaces'.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we want to remove an IP, we again use `ip`, this time replacing the `add`
    instruction with a `del` instruction:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Shutting down and bringing up an interface administratively
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To work with the interface itself, we need to use another element of the `ip` suite,
    this being `ip link`. Note again the use of `sudo`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Checking our interfaces, we can see that the interface is in the `DOWN` state:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: You will find yourself unable to ping this host from `centos2`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To bring an interface back up, simply run the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Note that if you add another IP to an interface on a temporary basis before
    bringing an interface down and up, your temporary additional IP will not be remembered.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a new route to our routing table
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If we're working in a network with non-obvious destinations, we might need to
    add a specific route to our setup.
  prefs: []
  type: TYPE_NORMAL
- en: This is generally seen in cluster scenarios and setups where a route may be
    accessible via another channel, but may not be advertised by that same channel.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following code, we''re going to tell our VM that if it wants to talk
    to any address on the `172.16.0.0/12` network, it must send traffic via `eth1`
    and gateway `192.168.33.11` (which is our `centos2` VM):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Checking our routing table, we can see if our route is in place:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Again, we're using the `ip suite` to interact with the various network elements
    of our machine. Frequently, these commands can be used for troubleshooting and
    testing of environmental changes, prior to your making those changes permanent.
  prefs: []
  type: TYPE_NORMAL
- en: In the adding or removing of IP addresses to interfaces, you can create a situation
    where an interface has multiple IP addresses for use with different applications.
  prefs: []
  type: TYPE_NORMAL
- en: Before the days of SNI, it wasn't uncommon to see multiple IP addresses in use
    on web servers so that each HTTPS site could have its own IP assignment.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the shutting down or bringing up of network interfaces, we''re first telling
    our system to administratively down an interface, rather than physically unplugging
    an Ethernet cable. If you down an interface, then check your `/var/log/messages` file—you
    should see something like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Here, we can see the network manager running through a series of steps, upon
    its realization that the device's state has changed.
  prefs: []
  type: TYPE_NORMAL
- en: Network manager dispatcher is the service that controls what happens when an
    interfaces goes down or comes up. Take a look in `/etc/NetworkManager/dispatcher.d/`
    if you're interested in learning more.
  prefs: []
  type: TYPE_NORMAL
- en: Lastly, when we added a route to our routing table, we were telling the kernel's
    underlying routing subsystem to send packets for the network `172.16.0.0/12` through
    our `eth1` interface, with a gateway address of `192.168.33.11`.
  prefs: []
  type: TYPE_NORMAL
- en: I have frequently found myself modifying the routing table of devices, though
    most of that was done for cluster setups in phone PBX environments. It may not
    be something you do day-to-day, but it's worth knowing!
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you want to see our routed traffic that''s hitting `centos2`, log onto your
    second VM and make sure that `tcpdump` is installed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, ensure that your extra route from the before is in place on `centos1`,
    and start a `ping` going to any address in the range:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Back on `centos2`, start `tcpdump` against our `eth1` interface:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'You should start to see `ICMP echo requests` from `centos1`, without a response:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Back on `centos1`, stop your `ping` (*Ctrl *+ *C*) and note the packets transmitted
    and packets lost:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Because we had nowhere for `centos2` to route our packet to, and `centos2` isn't
    actually set up as a router, the packets simply went unanswered, and `centos1`
    remained friendless—poor `centos1`.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you're interested in using Linux as a router, this is perfectly possible
    with a sysctl change and potentially a bit of **masquerading** on the part of
    the firewall. While out of scope for this book, it is something you may find yourself
    needing in the future.
  prefs: []
  type: TYPE_NORMAL
- en: Adding and configuring network interfaces
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we're going to look at how multiple network interfaces may
    be configured in a system, and we will discuss how this might be utilized in the
    real world (such as for backup traffic).
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We're going to use our second network, which is new to this chapter. If you're
    using the `Vagrantfile` from before, you're already set up with this network.
    If you're running your own system, add another NIC to each of your virtual machines
    on the same network.
  prefs: []
  type: TYPE_NORMAL
- en: Use Vagrant to connect to `centos1`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Check that the `eth2` interface is available to you. It should look similar
    to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will look at adding network information permanently using configuration files
    so that our configuration isn't lost following a reboot (as would be the case
    if we used the `ip suite` and temporary allocation).
  prefs: []
  type: TYPE_NORMAL
- en: Configuring a new interface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Start by creating a configuration file for `eth2`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, populate it using the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: The `tee` command is used here. It enables reading from standard input and outputting
    to a destination of our choosing, in this case, a file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, restart your interface as an individual:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternatively, restart networking in general:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: It's generally a good rule of thumb to be the least disruptive when working
    with components that make up a greater whole. Even in a `dev` environment, it's
    a good habit to get into.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: All we've done here is created an interface script that your system can use
    to correctly configure an interface at boot time.
  prefs: []
  type: TYPE_NORMAL
- en: Let's go through the options we added to our file.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: This setting stands for `boot-time protocol` and we've set it to `none` instead
    of `dhcp` or `bootp`.
  prefs: []
  type: TYPE_NORMAL
- en: In a DHCP environment, you want an address to be assigned automatically by your
    DHCP server. Here, we're setting a static address, so we state the following.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: This one might seem obvious, but the default behaviour of an interface is to
    not initialize at boot. With this setting, we ensure that the network interface
    is brought up with the system.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Somewhat self-explanatory, but these options are the IP address and the subnet
    mask of the network we're configuring. Here, I chose another `/24` network, a
    few octets above our `eth1` configuration.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: This option is used to specify which hardware interface our configuration will
    apply to. It's worth noting that these interface names can be both generic (`eth0`,
    `eth1`, and so on) and network card name-specific (they might not always be `eth<something>`).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: Defaulting to `yes` in a DHCP environment, this option ensures that our system
    doesn't try to modify `/etc/resolv.conf` when the interface is brought up.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Ethernet interface configuration file (`ifcfg-eth2`) has a few other options
    that can be taken into account when setting up your network. Check whether it's
    possible to make a configuration change for your desired outcome, prior to wrapping
    networking in any scripts.
  prefs: []
  type: TYPE_NORMAL
- en: Interface bonds can also be created and configured in interface configuration
    files for use when a machine has two physical connections to the same destination
    to protect against either failure of the interface or cable.
  prefs: []
  type: TYPE_NORMAL
- en: I have seen exactly one bad `Cat-5e` cable in the entirety of my professional
    life—cables are physical, and don't spontaneously break.
  prefs: []
  type: TYPE_NORMAL
- en: One thing we didn't do was specify that the interface in question wasn't to
    be managed by a network manager (the network management daemon).
  prefs: []
  type: TYPE_NORMAL
- en: 'You can see which interfaces are and aren''t being managed by the network manager
    using the simple `nmcli device` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'We can change this, if we''d rather the network manager does not interfere,
    by adding a configuration option to our `ifcfg-eth2` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, go down and up your interface once more:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, check out `nmcli` once again, this time taking note of the `unmanaged`
    status:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: If you're curious, take a look at the `nmtui` command for an interactive way
    to configure network interfaces that the network manager is aware of.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Have a think about where it might be useful for additional networks to be in
    place. A good and common example is for backup networks, where companies will
    set up a dedicated network that's specifically for backup traffic.
  prefs: []
  type: TYPE_NORMAL
- en: Backups range in size, but can easily be gigabytes and even terabytes sometimes,
    so it makes sense to give them an entirely independent network of their own.
  prefs: []
  type: TYPE_NORMAL
- en: You can also manage traffic priority with things such as **Quality of Service**
    (**QoS**) settings on larger and enterprise networks. This can be a valid solution
    if you would rather deal with the software administration overhead of dealing
    with such scenarios. Generally, I'm a fan of simple, and though it definitely
    costs more to have physical equipment, it's less to manage in the long run.
  prefs: []
  type: TYPE_NORMAL
- en: Modern domain name resolution on Linux
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we're going to look at domain name resolution, and specifically
    the software installed on a typical CentOS box that enables the lookup of addresses
    when presented with a domain.
  prefs: []
  type: TYPE_NORMAL
- en: We'll look at `/etc/resolv.conf` and domain name resolution methods on current
    generation Linux systems (such as network manager). We're going to test the connection
    to our DNS server, and run DNS queries to see if it's working.
  prefs: []
  type: TYPE_NORMAL
- en: This section assumes a basic understanding of domain names and IP addresses.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Connect to `centos1` and check that your domain resolution is already working
    by pinging an address.
  prefs: []
  type: TYPE_NORMAL
- en: 'I''m in the UK, so I default to using the BBC for my tests:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: If yours isn't working for whatever reason, destroy and recreate your VMs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you''re sure you can ping a domain, install dig (and the myriad of other
    tools that come along with this package):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Here, we're going to run through some basic troubleshooting steps, designed
    to help you determine where a problem might be.
  prefs: []
  type: TYPE_NORMAL
- en: Querying a domain
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To query a domain name on Linux, `dig` can be used:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: Here, we can see that the server being used for domain resolution (emboldened)
    is `10.0.2.3`, which just so happens to be VirtualBox providing a resolution service.
  prefs: []
  type: TYPE_NORMAL
- en: We also see the `ANSWER SECTION` which, as the name might suggest, is the answer
    to our query. We can reach `bbc.co.uk` at any of those addresses (currently).
  prefs: []
  type: TYPE_NORMAL
- en: Checking the domain resolution settings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The source of truth when it comes to DNS configuration on a system is generally
    the resolver file, `/etc/resolv.conf`, although increasingly this file isn't used
    directly, and is instead managed by external programs.
  prefs: []
  type: TYPE_NORMAL
- en: In the case of CentOS, the `resolv.conf` file is managed by our friend network
    manager, and on other systems, it might be `systemd-resolved`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Have a look at your `resolv.conf` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: '`search` in the previous code is the search list for hostname lookup. It''s
    generated by looking at the domain the box is sitting on.'
  prefs: []
  type: TYPE_NORMAL
- en: '`nameserver` is the value of our DNS resolver, in this case, the VirtualBox
    default.'
  prefs: []
  type: TYPE_NORMAL
- en: This tells us that the network manager is the program that's populated our file.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can then use `nmcli` to list the DNS server it knows about:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: With the preceding code, we're using `nmcli` with two filters, `ipv4.dns` and `ipv4.ignore-auto-dns`,
    to check our default interface (the `eth0` system, in this case).
  prefs: []
  type: TYPE_NORMAL
- en: The value of `ipv4.dns` isn't set, meaning that it's unlikely to be reading
    the value from a configuration directive on the interface.
  prefs: []
  type: TYPE_NORMAL
- en: The value of `ipv4.ignore-auto-dns` is set, and we can tell from the `no` value
    that we're not ignoring the auto DNS allocation from the DHCP server.
  prefs: []
  type: TYPE_NORMAL
- en: Changing the domain resolution settings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To use a DNS server of our choosing, we should use `nmcli`.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following code, we''re setting our own DNS server value (`1.1.1.1`)
    and we''re flipping the truth value of `ipv4.ignore-auto-dns` from `no` to `yes`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: Note how both of these fields can be modified on one line.
  prefs: []
  type: TYPE_NORMAL
- en: 'Reload the interface configuration using the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'Look in `/etc/resolv.conf` for good measure, just to check:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, run `dig`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: '`1.1.1.1` is a new and trendy DNS service from Cloudflare and APNIC. This isn''t
    an endorsement, it''s just really easy to remember.'
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you request the destination of a domain on your system, what you're actually
    doing is sending a request to your configured resolver, which returns the address
    it (or further upstream systems) knows about.
  prefs: []
  type: TYPE_NORMAL
- en: In our case, we can see this request happening by connecting two Terminals to
    `centos1`.
  prefs: []
  type: TYPE_NORMAL
- en: 'On our first Terminal, we''re going to install and start `tcpdump` on `eth1`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'Once set up, hop to a second connection and run your `dig` against the BBC
    (or whichever British broadcaster of choice you''ve gone with):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'Flip back to your first window, and you should see the results of your request:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: We asked our name server what address `bbc.co.uk` lived at, and in the response,
    we got a few IP addresses to connect to. Neat, huh?
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section obviously made changes using network manager, but that's not to
    say this is the only way. It's possible to stop the network manager from hijacking
    and trying to control your DNS.
  prefs: []
  type: TYPE_NORMAL
- en: 'It''s possible to set `dns=none` in the `main` section of the `NetworkManager.conf`
    file, as detailed in its man page:'
  prefs: []
  type: TYPE_NORMAL
- en: '"`none: NetworkManager` will not modify `resolv.conf`. This implies'
  prefs: []
  type: TYPE_NORMAL
- en: rc-manager unmanaged"
  prefs: []
  type: TYPE_NORMAL
- en: 'Seen in the configuration file at `/etc/NetworkManager/NetworkManager.conf`,
    it would look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: Restarting `NetworkManager` at this point would stop it from trying to modify
    `/etc/resolv.conf` in the future.
  prefs: []
  type: TYPE_NORMAL
- en: This can be useful if you want something else to manage your system's DNS, even
    if it's just a script you've written to plonk your DNS servers in `/etc/resolv.conf`.
  prefs: []
  type: TYPE_NORMAL
- en: It's possible to not use `NetworkManager` at all, disabling it as a daemon and
    doing everything in the old script fashion. In fact, it's really easy, but in
    my opinion it's worth getting to grips with how things are done by default these
    days.
  prefs: []
  type: TYPE_NORMAL
- en: DNS is usually done in pairs, and it's a good idea to have a backup DNS server
    in case the first one goes to pot. Strange things can start to happen when your
    DNS fails.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We actually used `nmcli` here to make changes to configuration files. We can
    physically see those changes by looking at the `eth0` configuration file before
    and after our DNS changing command.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'While after is a bit more verbose:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: One thing we didn't cover is IPv6, but the principles are the same as IPv4.
  prefs: []
  type: TYPE_NORMAL
- en: Take a look at how IPv6 servers are configured, and how they end up in `/etc/resolv.conf`.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring NTP and the problems we face
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we're going to look at the **network time protocol** (**NTP**),
    and the default setup for a typical installation.
  prefs: []
  type: TYPE_NORMAL
- en: This section assumes a basic understanding of time.
  prefs: []
  type: TYPE_NORMAL
- en: Depending on how much Pratchett you read, your understanding of time may or
    may not be linear.
  prefs: []
  type: TYPE_NORMAL
- en: We're going to look at a few things. First, we're going to look at what NTP
    is, what software we use to set it up, and how to test whether your system is
    using it.
  prefs: []
  type: TYPE_NORMAL
- en: Starting at the top, NTP runs on port `123`, and it's the protocol that's used
    for keeping time in computer systems in sync. This is generally important because
    we want things like log-timestamps to be consistent between machines, transactions
    between boxes to have the correct time on both sides, and things like authentication
    to actually work.
  prefs: []
  type: TYPE_NORMAL
- en: Really though, misconfigured or incorrect time on a system can present a host
    of problems, not all of them obvious. If you ever find yourself using the phrase
    "this makes no sense," check the date information on your box, as a good portion
    of the time it'll be wrong. Funnily, a lot of systems depend on time being correct
    to work.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We're going to use `centos1` and `centos2`. `centos1` is going to act as our
    client, and `centos2` is going to act as our server. For this section, ensure
    that you have a connection open to both machines.
  prefs: []
  type: TYPE_NORMAL
- en: 'Again, if not already available, install `tcpdump` on both boxes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `NTP client/server` on CentOS and other systems is `chrony` these days,
    replacing the more traditional NTP implementations.
  prefs: []
  type: TYPE_NORMAL
- en: There's two main components, `chronyc` (the command-line tool) and `chronyd`
    (the daemon, which itself can act as a client or server).
  prefs: []
  type: TYPE_NORMAL
- en: Checking if NTP is running
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First, a basic check is to confirm the date is what you expect it to be, with
    the `date` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: Note that the preceding date information is set to **universal time coordinated**
    (**UTC**). This is increasingly being used as distributed computing takes hold.
    Servers don't have to be locked to one geographical region, and if you've got
    a thousand boxes over multiple geographical locations, you might choose to unify
    their time and manage specific differences in other software instead (such as
    a web app being responsible for writing the timestamp for the location its user
    is located at, for example).
  prefs: []
  type: TYPE_NORMAL
- en: 'To check whether `chronyd` itself is running, use `systemctl`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: Checking if NTP traffic is flowing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To confirm that NTP traffic is actually flowing, the catchall method is to check
    the port with `tcpdump`. NTP uses `port 123`, which is very easy to remember (there
    may be a quiz on this).
  prefs: []
  type: TYPE_NORMAL
- en: 'We know that default traffic should use `eth0` for communication, so that''s
    what we''ll specify:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: 'Soon, you should see your client trying to talk to upstream servers, asking
    for time information:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: If you've not got `tcpdump` installed, you can also use `chronyc`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s see what servers we''re talking to by using the `chronyc sources` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: 'We can get more granular information on the status of our client too by looking
    at the details it knows about from its last sync. In the following example, we
    can see that our time is very far off what''s expected:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: 'Assuming that your time isn''t ridiculously far out, the output may look as
    follows. Here, the amount of time difference between upstream and us is negligible:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: Enabling an NTP client
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Assuming that your system isn't using `chronyd`, and its date is sliding constantly,
    you can enable it manually.
  prefs: []
  type: TYPE_NORMAL
- en: 'The configuration file for `chronyd` is located at `/etc/chrony.conf`. The
    following is the default configuration file, with the commented out sections removed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: 'Once in place, if it''s not already in place and running, `systemd` is used
    to maintain the service:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: Do check that a rogue admin hasn't taken it upon themselves to install `openntpd`,
    or a different daemon, to try and manage NTP. You can check this by using the
    preceding `tcpdump` commands, or seeing if anything is running on `port 123`.
  prefs: []
  type: TYPE_NORMAL
- en: Enabling an NTP server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Maybe the network you're managing is very restricted, and it takes ages to get
    network changes done. In this case, you might have a pool of servers that are
    designated as NTP providers for the rest of your estate.
  prefs: []
  type: TYPE_NORMAL
- en: In this case, you will need to configure `chronyd` to allow connections from
    other clients. We'll use `centos2` for the server.
  prefs: []
  type: TYPE_NORMAL
- en: 'On `centos2`, add a line to the bottom of our `chrony.conf` file to allow access
    from our `eth1` network (`192.168.33.0`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: 'Restart `chronyd` with the new changes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: Now, on the system that's to be the client, `centos1`, perform the following
    steps.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, modify our `chrony.conf` file by commenting out the existing server
    lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, add the required configuration directives for pointing to `centos2`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: 'Restart `chronyd` on `centos1`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: You now have a server configured, and a client connected to it.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: NTP works in a client-server fashion, in which the client device (`centos1`,
    in our case) asks the server device (`centos2`) for an accurate time reading,
    which it then applies to the local machine.
  prefs: []
  type: TYPE_NORMAL
- en: 'When we wanted to make our own server, it was relatively trivial. On the server
    side, we only needed the line stipulating which clients could sync with `centos2`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: 'On the client side, we needed to first remove the servers it was talking to
    (using `sed` to comment out the default pool lines), and then we added our new
    source-of-time as our configured server by using the following configuration lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: The server option is the address (or DNS name, if configured) of our source-of-truth.
    The `iburst` option simply makes the first few requests faster so that the sync
    can happen quicker after starting.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we start `tcpdump` running on `centos2`, after it''s been configured as
    a server, and then restart `chronyd` on `centos1`, we should see traffic flowing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: We can see our client machine (`.10`) requesting time from `centos2`, and then
    `centos2` responding on the next line.
  prefs: []
  type: TYPE_NORMAL
- en: This also works to highlight the `iburst` option in action. Note the two-second
    differences between packet communication.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we now take another look at `chronyc tracking` on the client, we should
    see normal details:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code may take a second to populate. If you're particularly quick
    off the mark, try again in a few seconds.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can again use the `chronyc sources` command to check that the client is
    talking to the right server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sometimes, your time is out of sync, and it isn't automatically fixing itself.
    This can happen if your time is simply too far away from what it should be, as
    most systems refuse to do sudden and abrupt jerks.
  prefs: []
  type: TYPE_NORMAL
- en: 'This can be resolved by using another `chrony` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: Be wary, though—this command can have unexpected side effects. Sometimes, programs
    detect sudden jerks, and will forcibly kill themselves to avoid issues.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to tell how busy your server is, you can also use `serverstats`
    on the command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Chrony is actually a much more in-depth program than we've discussed here, and
    we barely mentioned its command-line utility (`chronyc`), which can be used to
    make all sorts of changes on the fly.
  prefs: []
  type: TYPE_NORMAL
- en: 'Check out the documentation pages for Chrony:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://chrony.tuxfamily.org/documentation.html](https://chrony.tuxfamily.org/documentation.html)'
  prefs: []
  type: TYPE_NORMAL
- en: It's also a good idea to have a think about how you're going to set up an NTP
    pool, if you find yourself in an environment requiring one. Generally, it's a
    rule of thumb that you configure multiple potential servers, instead of just one
    (that might skew or break). Three is better than one or two (two is quite bad,
    as you don't have an agreement on what the correct time is.)
  prefs: []
  type: TYPE_NORMAL
- en: Listing firewall rules on the command line
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Here, we're going to use both the newer method, `firewall-cmd` & `ufw`, for
    listing firewall rules, along with the older (but still popular) method, `iptables`.
    We're going to go into the basics of other tables within firewalls, and the storage
    location for rules.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Connect to your `centos1` VM (and `ubuntu1`, if desired).
  prefs: []
  type: TYPE_NORMAL
- en: 'Enable and start `firewalld` for later examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While most of this book can be generalized to multiple distributions, firewalls
    are one area that can differ.
  prefs: []
  type: TYPE_NORMAL
- en: In the CentOS family of distributions, `firewall-cmd` is the common way to interact
    with firewalls.
  prefs: []
  type: TYPE_NORMAL
- en: In the Ubuntu family, `ufw` is used instead.
  prefs: []
  type: TYPE_NORMAL
- en: Generally, `iptables` should work across distributions, for the foreseeable
    future at least.
  prefs: []
  type: TYPE_NORMAL
- en: iptables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Typically, you want to check the running configuration of a firewall on a box.
    To do this, you might use `iptables -L`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: 'By default, the `-L` option lists all chains within the default table (`filter`
    being the default). There are five tables out of the box:'
  prefs: []
  type: TYPE_NORMAL
- en: '`raw`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`filter`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mangle`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`security`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`nat`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We may want to list rules in the `nat` table, in which case this can be specified
    with the `-t` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: 'A different method, and one that I tend to use first, is to print the rules
    on the command line, instead of listing them (this is a subtle difference). This
    is done with the `-S` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: The reason why this method is nicer is that it shows you the syntax used to
    generate the rule in question. In a tense scenario, this type of knowledge can
    save time and stress.
  prefs: []
  type: TYPE_NORMAL
- en: firewall-cmd
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Firewalld (the daemon controlled by `firewall-cmd`) introduces the concept of
    zones to the Linux firewall.
  prefs: []
  type: TYPE_NORMAL
- en: Zones are assigned to specific interfaces, with specific rules configured per
    zone.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can list the currently configured zones using `firewall-cmd`, too:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: To check which zone we're actively using, and on which interface, we use `--get-active-zones`.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following code, we can see that `eth0` and `eth1` are using the `public`
    zone:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: '`eth2` is also under the `public` zone, but the interface is unconfigured,
    thus, inactive.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Because `eth0` is active under `public`, let''s list the details of the `public`
    zone:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: Here, we can see that the services this zone is aware of are `ssh` and `dhcpv6-client`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can specifically list the services of a zone using `--list-services`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: If we want information about exactly what that service allows, we can use `--info-service`.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following code, we''re looking at `ssh`, discovering that it allows
    port `22/tcp` through:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: ufw
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In your Ubuntu VM, `ufw` probably won''t be enabled by default. We will enable
    it, but first we''re going to add a rule to make sure that we can get back in
    once the firewall is up:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: 'You can enable it with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs: []
  type: TYPE_PRE
- en: 'We can now see the status of our firewall by using the `status verbose` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE97]'
  prefs: []
  type: TYPE_PRE
- en: The firewall is active, and there's a `22/tcp` allow rule to allow us in.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: All of the preceding examples interact with the kernel's Netfilter framework—they
    just do the same thing using different tools.
  prefs: []
  type: TYPE_NORMAL
- en: When you list rules on the command line, you're querying what the kernel knows
    to be the security rules for a box.
  prefs: []
  type: TYPE_NORMAL
- en: The reason you can list rules with both the `iptables` and `firewall-cmd` commands
    (in the case of CentOS) is because they're only acting as userland frontends.
  prefs: []
  type: TYPE_NORMAL
- en: UFW is the same, just in the Ubuntu world.
  prefs: []
  type: TYPE_NORMAL
- en: This is the reason you find a lot of setup scripts in the wild that will remove
    extra firewall tools, such as `firewalld`, and that simply use the `iptables`
    suite to manage the firewall.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you do find yourself on a box that has `firewall-cmd` installed, but not
    the `iptables` userland tool, you might find which package it''s in with `yum`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs: []
  type: TYPE_PRE
- en: In this case, `iptables` is the package you want to install, if you're something
    of a purist.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Though not yet installed by default, you may want to look into the `nft` and
    `nftables` systems.
  prefs: []
  type: TYPE_NORMAL
- en: '`nftables` is a replacement for the existing kernel framework, and `nft` is
    the accompanying command-line tool.'
  prefs: []
  type: TYPE_NORMAL
- en: Adding and removing firewall rules on the command line
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we're going to look at adding and removing example rules from
    our firewall setup.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Ensure that `firewalld` is installed and started on `centos1`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE99]'
  prefs: []
  type: TYPE_PRE
- en: 'Once done, start a Python web server in the background:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs: []
  type: TYPE_PRE
- en: This should start a web server on port `8000`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Connect to `centos2` and try to `curl` your `centos1` box on port `8000`. It
    should fail:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE101]'
  prefs: []
  type: TYPE_PRE
- en: If you want to work through the Ubuntu examples at the same time, log in to
    your Ubuntu box.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We're going to use `firewall-cmd`, `iptables`, and `ufw` to adjust our firewall.
  prefs: []
  type: TYPE_NORMAL
- en: firewall-cmd
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Our web server is listening on all interfaces (the default) and we're going
    to allow connections to it through `eth1`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We know that `eth1` is in the default (`public`) zone, thanks to the previous
    section:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE102]'
  prefs: []
  type: TYPE_PRE
- en: This means that we have to add another port allowance to our zone, enabling
    connections to `8000/tcp`.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following code, we''re adding to our firewall configuration, but we''re
    not modifying the running config—we''re adding the `permanent` option so that
    the rule is loaded on a firewall reload:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE103]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we need to run the command again, without the `permanent` option. So that
    our running configuration is modified:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE104]'
  prefs: []
  type: TYPE_PRE
- en: 'Running the `--list-all` option will now show your added port:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE105]'
  prefs: []
  type: TYPE_PRE
- en: 'You should be able to `curl centos1` on `8000/tcp` from `centos2`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE106]'
  prefs: []
  type: TYPE_PRE
- en: If you find it easier, you can also modify the running config primarily, and
    then when you're happy with it, apply the rules using the `--runtime-to-permanent`
    option. The choice is yours.
  prefs: []
  type: TYPE_NORMAL
- en: 'To reverse this addition, you would swap the `add-port` for a `remove-port`,
    like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE107]'
  prefs: []
  type: TYPE_PRE
- en: iptables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To perform the same action in `iptables`, we must first ensure that `firewalld`
    doesn't interfere.
  prefs: []
  type: TYPE_NORMAL
- en: 'Start by disabling and stopping `firewalld`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE108]'
  prefs: []
  type: TYPE_PRE
- en: 'You should now have an empty `iptables` configuration, as can be seen with
    `iptables -S`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE109]'
  prefs: []
  type: TYPE_PRE
- en: Because we've got an empty rule list, we're going to start by adding some basic
    rules.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we''re going to block `centos2` and anything else on our `eth1` network
    from SSHing to `centos1`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE110]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we''re going to allow only incoming `SSH` connections from `10.0.2.0/24`
    sources:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE111]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we''re going to change the default incoming policy from `ACCEPT` to
    `DROP`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE112]'
  prefs: []
  type: TYPE_PRE
- en: 'Because we''ve changed the default policy, we also need to ensure that `RELATED`
    and `ESTABLISHED` connections are permitted (those connections we''ve initiated
    from our box). This makes our firewall "stateful" or aware of the state:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE113]'
  prefs: []
  type: TYPE_PRE
- en: 'Running `iptables -S` will display your rules:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE114]'
  prefs: []
  type: TYPE_PRE
- en: Our configuration here is somewhat redundant, because while it serves to show
    the flexibility of `iptables` rules, the default traffic rule is a `-P INPUT DROP`,
    meaning that if traffic isn't accepted by any of our other rules, it won't be
    let in. Our `eth1` `DROP` line is therefore pointless.
  prefs: []
  type: TYPE_NORMAL
- en: ufw
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Prior to working with `ufw` in the previous section, we had to add this allow
    rule to let SSH traffic in, once the firewall was enabled:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE115]'
  prefs: []
  type: TYPE_PRE
- en: 'The default `ufw` profile has incoming connections denied, as we can see in
    the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE116]'
  prefs: []
  type: TYPE_PRE
- en: Because of this, if we wanted to access a web server hosted on our Ubuntu box,
    we'd need a new rule.
  prefs: []
  type: TYPE_NORMAL
- en: 'Previously, we used the service name (`ssh`), so this time we''re going to
    specifically allow a port (`80`, the default HTTP port) from our VirtualBox network:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE117]'
  prefs: []
  type: TYPE_PRE
- en: 'We can see this rule in action by using the `status` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE118]'
  prefs: []
  type: TYPE_PRE
- en: 'Deleting with `ufw` is simple—just prefix your original rule (be it `allow`
    or `deny`) with the word `delete`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE119]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Each of these examples are used to manipulate the running firewall configuration
    on your box. When you use the userland tools, as with the querying examples in
    the last section, you're actually modifying the Netfilter framework of the kernel.
  prefs: []
  type: TYPE_NORMAL
- en: Personally, I find it easiest to understand what's going on by using the `iptables`
    command, though you may find yourself more comfortable with an alternative.
  prefs: []
  type: TYPE_NORMAL
- en: 'As we saw in the last section, if you enable `firewalld` or `ufw`, you will
    also find that your default `iptables` rules change. Without `firewalld` or `ufw`
    enabled, the out-of-the-box `iptables` configuration will be much simpler, as
    we can see in the following lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE120]'
  prefs: []
  type: TYPE_PRE
- en: Whenever we modified our firewall, our changes were instantly applied.
  prefs: []
  type: TYPE_NORMAL
- en: 'Breaking this down, if we go back to our `iptables` example, we can step through
    what we did:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE121]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we modify `iptables` using the `iptables` userland tool:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE122]'
  prefs: []
  type: TYPE_PRE
- en: 'We then `append` a rule to our `INPUT` chain (a chain resides within a table):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE123]'
  prefs: []
  type: TYPE_PRE
- en: 'We set the source of traffic as our VirtualBox subnet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE124]'
  prefs: []
  type: TYPE_PRE
- en: 'We specify the protocol and use the extended match feature:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE125]'
  prefs: []
  type: TYPE_PRE
- en: 'We say that the destination port should be `22` (the SSH port):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE126]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we say that we should `ACCEPT` this traffic:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE127]'
  prefs: []
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you make changes with `firewall-cmd` or `ufw`, you can generally save the
    running config to the persistent config at the same time.
  prefs: []
  type: TYPE_NORMAL
- en: 'With `iptables`, we want to use `iptables-save` to modify our saved configuration,
    and ensure that it starts at boot:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE128]'
  prefs: []
  type: TYPE_PRE
- en: 'This is all fine and dandy, except it''s printed the configuration to standard
    out instead of saving it somewhere. Let''s fix that by redirecting it to the default
    `iptables` config location:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE129]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, to properly start this at boot, we need the `iptables-services` package,
    which includes things such as the `systemd` unit files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE130]'
  prefs: []
  type: TYPE_PRE
- en: 'We can now enable `iptables` to start at boot:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE131]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the `systemctl` `restart` command for `iptables` and ensure your configuration
    is correct:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE132]'
  prefs: []
  type: TYPE_PRE
- en: Firewalls can be as complex or as simple as you need them to be. It's a good
    idea to start simple and make them more complex as you go.
  prefs: []
  type: TYPE_NORMAL
- en: There's also the `iptables -F` option, which we didn't cover in this section.
  prefs: []
  type: TYPE_NORMAL
- en: '`-F` means flush, and it can be incredibly handy in certain situations for
    flushing your firewall back to its default configuration.'
  prefs: []
  type: TYPE_NORMAL
- en: However, it's worth noting that if you have your default `INPUT` policy set
    to `DROP` incoming traffic, then flushing any rules that otherwise allow you access
    will render your session unusable.
  prefs: []
  type: TYPE_NORMAL
- en: 'My default policy is `DROP`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE133]'
  prefs: []
  type: TYPE_PRE
- en: 'If I now flush my rules, my session locks up:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE134]'
  prefs: []
  type: TYPE_PRE
- en: We would now need to get to the console of the box and reinstate the rules that
    allowed us access. Most of the time, this is simply a case of running the `start`
    command of the firewall.
  prefs: []
  type: TYPE_NORMAL
- en: Determining the running services and ports in use
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we're going to use only our `centos1` VM, as we determine the
    ports in use on our box, and the services behind them.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Connect to your `centos1` VM.
  prefs: []
  type: TYPE_NORMAL
- en: 'You should also install the `lsof` package for some of the examples that we
    will be looking at:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE135]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When determining what's running on a server, you usually want to know if anything
    is listening on for connections and on what ports.
  prefs: []
  type: TYPE_NORMAL
- en: Out of the box, **socket statistics** (**ss**) is usually available. The older
    program, `netstat`, might be installed sometimes too, though it won't be covered
    here.
  prefs: []
  type: TYPE_NORMAL
- en: 'A good first step is to run `ss -tua`, which will list all TCP and UDP sockets:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE136]'
  prefs: []
  type: TYPE_PRE
- en: 'If we want to list only to `ESTAB` (`established`) connections, we can filter
    down using the `state` directive:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE137]'
  prefs: []
  type: TYPE_PRE
- en: Here, we can see my SSH session from the host machine.
  prefs: []
  type: TYPE_NORMAL
- en: 'Say we now want to list all sockets that are listening for TCP connections:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE138]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternatively, we can do this for the UDP:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE139]'
  prefs: []
  type: TYPE_PRE
- en: This is enough to give us a good overview of the services running, but it doesn't
    let us know the ports.
  prefs: []
  type: TYPE_NORMAL
- en: '`ss` will check against a known services list to determine the name to display.
    In this example, we deliberately chose to list the listening ports, filtering
    out everything but port `22`, and we can see that `ssh` has been chosen:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE140]'
  prefs: []
  type: TYPE_PRE
- en: '`::` is the IPv6 loopback denotion, which is why it shows up here next to one
    of the SSH entries.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We can check the system''s `services` list to see what it thinks `ssh` should
    be using:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE141]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`ss` is a quick way of determining the sockets that a system is currently using,
    and it''s not limited to TCP or UDP, as it''s also able to display Unix domain
    sockets (`-x`).'
  prefs: []
  type: TYPE_NORMAL
- en: In this example, we've queried the system to find out which ports are in use,
    and `ss` has performed some resolution work to determine what services those ports
    are likely to be used by.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is not a guarantee, however. For example, if you start a Python web server
    on `2222`, it would list the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE142]'
  prefs: []
  type: TYPE_PRE
- en: 'This is simply because as far as `/etc/services` is concerned, this port is
    used by `EtherNet/IP-1`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE143]'
  prefs: []
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An arguably better way of determining which process is using which port is to
    use the `lsof` command. I say arguably because it's not usually installed by default,
    though it is extremely handy and powerful.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we use `lsof` and check for commands using port `22`, we get the following
    list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE144]'
  prefs: []
  type: TYPE_PRE
- en: If you don't want to print hostnames (centos1 in the above example) and port
    names (ssh above) you can use the following extra flags instead ( `P` & `n`:)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE145]'
  prefs: []
  type: TYPE_PRE
- en: 'If we have our Python web server enabled on `2222`, we get this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE146]'
  prefs: []
  type: TYPE_PRE
- en: Notice that while the `NAME` is still listed as `EtherNet`, we know it's Python
    because the `COMMAND` is listed as such.
  prefs: []
  type: TYPE_NORMAL
- en: 'Because we also have PID (`4542`), we can get the full command easily:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE147]'
  prefs: []
  type: TYPE_PRE
- en: Debugging with iftop
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we're going to look at a member of the `top` family (which
    is quite extensive, featuring `atop`, `iotop`, `htop`, and so on), which is specifically
    geared toward network traffic statistics and debugging.
  prefs: []
  type: TYPE_NORMAL
- en: '`iftop` is both handy and very readable.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this section, we're going to use `centos1` and `centos2`, connect to both
    in separate windows.
  prefs: []
  type: TYPE_NORMAL
- en: 'Make sure that you install `iftop` on `centos2` prior to starting. This comes
    from the **Extra Packages for Enterprise Linux** (**EPEL**) repository, so we
    have to install that first:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE148]'
  prefs: []
  type: TYPE_PRE
- en: 'Start `iftop` on `centos2`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE149]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Once you''ve started `iftop` on `centos2`, switch to `centos1` and run an `ssh`
    command to generate some network traffic to `centos2`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE150]'
  prefs: []
  type: TYPE_PRE
- en: 'Back on `centos2`, you should see a brief entry in your network screen that
    shows activity:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3f3698b3-1359-4779-bc9b-13adc22dabdb.png)'
  prefs: []
  type: TYPE_IMG
- en: In my `ssh` session on `centos1` (which is now connected to `centos2`), I've
    started `top` to generate a stream of traffic.
  prefs: []
  type: TYPE_NORMAL
- en: 'At the bottom of your window, you will see the following values:'
  prefs: []
  type: TYPE_NORMAL
- en: '`TX`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`RX`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TOTAL`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/081134d8-261b-4864-a393-2420af8ade03.png)'
  prefs: []
  type: TYPE_IMG
- en: These values are total traffic transferred, received, and total.
  prefs: []
  type: TYPE_NORMAL
- en: To the right we have the rates averaged over `2`, `10`, and `40` seconds.
  prefs: []
  type: TYPE_NORMAL
- en: Clicking back to `centos1` and stopping, then starting `top`, will cause the
    `RX` values to rise, as you've sent keystrokes over the connection.
  prefs: []
  type: TYPE_NORMAL
- en: 'At the top of the window, you can see a visual representation of the traffic:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9b262467-1b14-4230-afff-3bba0f037102.png)'
  prefs: []
  type: TYPE_IMG
- en: This displays traffic sent back to `192.168.33.10` (`centos1`) and the traffic
    received in a somewhat readable format.
  prefs: []
  type: TYPE_NORMAL
- en: The scale for the transfer rate is at the top, and varies depending on quantity.
  prefs: []
  type: TYPE_NORMAL
- en: In a real-world scenario, this type of information can be invaluable, as it
    offers an at-a-glance way of seeing who might be hammering your server.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we swap to watching `eth0` traffic, then restart `chronyd`, we can see more
    servers being connected to:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3767614b-3570-4575-a11b-89893650826e.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Like `tcpdump`, `iftop` listens to the traffic on the interface you specify,
    or the default if you don't specify one.
  prefs: []
  type: TYPE_NORMAL
- en: It then prints the bandwidth usage by the host, giving a good visual representation
    of the network on your box.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`iftop` offers a lot of options, and a peruse of the manual page is worth considering.
    Simple things like using `-n` to disable hostname lookups can be handy, or changing
    how the bandwidth rates are displayed.'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can even print a text-only version to `stdout` using the `-t` flag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE151]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we took a look at networking and firewalls in the Linux world.
    I hope it didn't hurt your head too much, because it certainly causes me some
    pain.
  prefs: []
  type: TYPE_NORMAL
- en: As I alluded to earlier, networking and firewall configuration can be as complex
    or as simple as you want it to be, and in the ever-growing world of single-use
    servers, we're seeing simpler and simpler configurations in the wild.
  prefs: []
  type: TYPE_NORMAL
- en: Where you tend to find problems are around the concepts of multiple networks
    and multi-homed servers, because flat network structures are a lot easier to understand
    for the average person (myself included).
  prefs: []
  type: TYPE_NORMAL
- en: You also don't have to do everything with Linux.
  prefs: []
  type: TYPE_NORMAL
- en: Yes, Linux can act as a border firewall for an estate, but you could also use
    *F5* devices, or Check Point boxes.
  prefs: []
  type: TYPE_NORMAL
- en: Yes, Linux can act as a router, but you're much more likely to see a Cisco or
    a Juniper device in the network cabinet.
  prefs: []
  type: TYPE_NORMAL
- en: These solutions have their positives, as well as their negatives.
  prefs: []
  type: TYPE_NORMAL
- en: A simple positive is that a purpose-built appliance is generally very good at
    the thing it was purpose-built for, and the tools to manage it are pretty much
    uniform in their approach (rather than the sometimes-mash we get in the Linux
    world).
  prefs: []
  type: TYPE_NORMAL
- en: An obvious negative is that it either means you have to learn the technology
    stack of the device you're incorporating into your network, or you have to hire
    a purpose-built-person to manage the solution for you, costing time and money.
  prefs: []
  type: TYPE_NORMAL
- en: Networking seems to be something that you either like or dislike, and I fall
    firmly in the latter camp. In theory, networks and firewalls "just work" once
    they're set up, but in practice that means the edge case problems are much more
    difficult to track down and correct when they do, inevitably, happen.
  prefs: []
  type: TYPE_NORMAL
- en: One final thing to mention—because I guarantee you'll have to deal with it at
    some point in your professional career—is the problem of locking yourself out.
  prefs: []
  type: TYPE_NORMAL
- en: It happens.
  prefs: []
  type: TYPE_NORMAL
- en: When it does, don't beat yourself up about it. Literally every engineer I've
    ever worked with has locked themselves out of a box once, either through a misconfigured
    firewall rule, or a silly mistake such as changing the SSH port without first
    updating the SELinux configuration.
  prefs: []
  type: TYPE_NORMAL
- en: If you lock yourself out and you have access to a console, either a remote Keyboard
    Video Mouse system or something like a cloud provider's web-based Terminal, you're
    usually fine—it just means logging in and correcting your mistake.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you lock yourself out and the system is on the other side of the city, or
    country, you''ve got two options:'
  prefs: []
  type: TYPE_NORMAL
- en: Hop into your car and resign yourself to a long drive there and back.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Contact the remote engineer and prostrate yourself before them, admitting your
    error and begging them to find a crash cart to resolve your mishap.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you choose option two, buying them a beverage of their choice the next time
    you meet is more than agreeable.
  prefs: []
  type: TYPE_NORMAL
- en: I have been both the remote engineer tasked with fixing someone else's mistake,
    and the person making the mistake. As I said, it happens to us all.
  prefs: []
  type: TYPE_NORMAL
