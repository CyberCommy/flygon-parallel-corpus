- en: MySQL 8 Database Management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we learned about MySQL 8 data types, explaining in
    detail which data types are available and how they are categorized. There are
    various properties associated with each of these data types, and the storage capacity
    varies with each type. The previous chapter also provided you with an in-depth
    understanding of MySQL 8 data types. Now its time to get some practical knowledge
    on MySQL 8 administrative features. Isn't it interesting to know more about the
    administrative features of MySQL 8, how configuration will be done for it, and
    much more? It's extremely important for an administrator to have detailed knowledge
    on how MySQL 8 works for globalization, how logs are maintained, and how to enhance
    capability of the server. Now, let's start with some fundamental concepts.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the follow topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: MySQL 8 server administration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data directory
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The system database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running multiple instances on a single machine
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Components and plugin management
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Roles and permissions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Caching techniques
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Globalization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MySQL 8 server logs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MySQL 8 server administration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are many operating parameters that available with MySQL 8, and among them
    all the required parameters are set by default during the installation process.
    After installation, you are allowed to change the **option file** by removing
    or adding a comment sign (`#`) at the start of the line of a specific parameter
    setting. The user is also allowed to set parameters at runtime by using command
    line arguments or the option file.
  prefs: []
  type: TYPE_NORMAL
- en: Server options and different types of variables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we are going to cover **server options**, **system variable**, and
    **status variables** available in MySQL 8 on startup.
  prefs: []
  type: TYPE_NORMAL
- en: '**Server option**: As described in the previous chapter MySQL 8 uses the option
    file and command line arguments to set startup parameters. Refer to [https://dev.mysql.com/doc/refman/8.0/en/mysqld-option-tables.html](https://dev.mysql.com/doc/refman/8.0/en/mysqld-option-tables.html) for details
    on all the available options. `mysqld` accepts many command options. For a brief
    summary, execute the following command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'To see the full list, use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '**Server System variable**: The MySQL server manages many system variables.
    MySQL provides the default value for each system variable. System variables can
    be set using the command line or can be defined in the option file. MySQL 8 has
    the flexibility to change these variables at runtime without server start or stop.
    For more details refer to: [https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html](https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Server status variable**: The MySQL server uses many status variables to
    provide information about its operation. For more details refer to: [https://dev.mysql.com/doc/refman/8.0/en/server-status-variables.html](https://dev.mysql.com/doc/refman/8.0/en/server-status-variables.html).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Server SQL modes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'MySQL 8 provides different modes that will affect MySQL support and data validation
    checks. This option makes it easier for the user to use MySQL in different environments.
    To set different modes MySQL provides the `sql_mode` system variable which can
    be set at either a global or session level. Refer to the following points in detail
    to understand modes:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting the SQL mode
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'SQL mode can be setup on startup using the `--sql-mode="modes"` option. The
    user can also define this option in the option file as `sql-mode="modes"`* .*
    You can define multiple nodes by adding comma separated values. MySQL 8 uses the
    following modes as default modes:`ONLY_FULL_GROUP_BY`, `STRICT_TRANS_TABLES`,
    `NO_ZERO_IN_DATE`, `NO_ZERO_DATE`, `ERROR_FOR_DIVISION_BY_ZERO`*, *`NO_AUTO_CREATE_USER,
    NO_ENGINE_SUBSTITUTION` To change mode at runtime, execute the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'To retrieve the values of both the variables, execute the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The available SQL modes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This section describes all the available SQL modes. Out of them, the first
    three are the most important SQL modes:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ANSI`: This mode is used to change syntax and behavior, by making it closer
    to standard SQL.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`STRICT_TRANS_TABLES`: As the name implies, this mode is related to transaction
    and it is mainly used for transactional storage engines. When this mode is enable
    for nontransactional tables,  MySQL 8 will convert invalid values to the closest
    valid value and insert the adjusted value into the column. If the value is missing,
    then MySQL 8 will insert an implicit default value related to the column''s data
    type. In this case, MySQL 8 will generate a warning message instead of an error
    message, and continue with the statement execution without breaking it.In the
    case of transactional tables, however, MySQL 8 gives an error and will breaks
    execution.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TRADITIONAL`: This mode generally behaves like traditional SQL database system.
    It indicates give error instead of a warning when an incorrect value inserted
    into the column.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ALLOW_INVALID_DATES`: This mode checks only the month range and the date range
    of the date value. In other words, the month range must be between 1 to 12 and
    date range must be between 1 to 31\. This mode is applicable for `DATE` and `DATETIME`
    data types and not for `timestamp` data type.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ANSI_QUOTES`: Used to consider `"` as an identifier quote character instead
    of a string quote character. When this mode is enabled, you cannot use double
    quotation to quote string literal.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ERROR_FOR_DIVISION_BY_ZERO`: Used to handle the case of division by zero.
    This mode output also depends on strict SQL mode status:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If this mode is not enabled, division by zero inserts `NULL`and produces no
    warning.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If this mode is enabled, division by zero inserts `NULL`and produces a warning.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If this mode and strict mode are enabled, division by zero produces an error,
    unless `IGNORE`is given as well. For `INSERT IGNORE` and `UPDATE IGNORE`, division
    by zero inserts `NULL`and produces a warning.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`HIGH_NOT_PRECEDENCE`: This mode is used to set a high precedence for the `NOT`
    operator. For example, when the mode is enabled the expression `NOT a BETWEEN
    b AND c` is parsed as `NOT (a BETWEEN b AND c)` instead of `(NOT a) BETWEEN b
    AND c`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`IGNORE_SPACE`: This mode applies to built-in functions rather than user defined
    functions or stored procedures.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`NO_AUTO_CREATE_USER`: This mode is used to prevent `GRANT` statements by automatically
    creating new user accounts unless authentication information is specified.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`NO_AUTO_VALUE_ON_ZERO`: This mode is used for auto incremental columns. When
    0 is found MySQL creates a new sequence number for the field, and that will create
    problems when you are loading dump. Enable this mode before reloading dump to
    resolve this problem.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`NO_BACKSLASH_ESCAPES`: If this mode is enabled, backslash becomes an ordinary
    character.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`NO_DIR_IN_CREATE`: This option is useful for slave replication servers where
    the `INDEX DIRECTORY` and `DATA DIRECTORY` directives are ignored on table creation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`NO_ENGINE_SUBSTITUTION`: Used to provide substitution of the default storage
    engine. When this mode is enabled and the desired engine is unavailable, MySQL
    gives an error and a table is not created.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`NO_FIELD_OPTIONS`: This indicates, don''t print MySQL specific column options
    in the output of `SHOW_CREATE_TABLE`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`NO_KEY_OPTIONS`: This indicates, don''t print MySQL specific index options
    in the output of `SHOW_CREATE_TABLE`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`NO_TABLE_OPTIONS`: This indicates, don''t print MySQL specific table options
    in the output of `SHOW_CREATE_TABLE`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`NO_UNSIGNED_SUBTRACTION`: When this mode is enabled, it makes sure that subtraction
    result must be a signed value even though any of the operand is unsigned.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`NO_ZERO_DATE`: The effect of this mode depends on the strict mode as defined
    below:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If it is not enabled, 0000-00-00 is allowed and MySQL produces no warning on
    insertion
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If this mode is enabled, 0000-00-00 is allowed and MySQL records a warning
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If both this mode and strict mode are enabled, 0000-00-00 is not allowed and
    MySQL produces an error on insertion
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`NO_ZERO_IN_DATE`: This mode effect is also depending on the strict mode as
    defined below:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If it is not enabled, dates with zero parts are allowed and MySQL produces no
    warning on insertion
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If this mode is enabled, dates with zero parts are allowed and produce a warning
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If this mode and strict mode are enabled, dates with zero parts are not allowed
    and MySQL produces an error
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ONLY_FULL_GROUP_BY`: If this mode is enabled, MySQL will reject queries in
    which `select` list, `order by` list, and the `HAVING` condition refer to non
    aggregated columns.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PAD_CHAR_TO_FULL_LENGTH`: This mode is applied on the column whose data type
    is set as `CHAR`. When this mode is enabled, MySQL retrieves column values by
    padding to their full length.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PIPES_AS_CONCAT`: When this mode is set as enabled `| |` will be considered
    as a string concatenation operator instead of `OR`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`REAL_AS_FLOAT`: By default, MySQL 8 will consider `REAL` as a synonym of `DOUBLE`,
    but when this flag is enabled MySQL will consider `REAL` as a synonym of `FLOAT`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`STRICT_ALL_TABLES`: In this mode invalid data values are rejected.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TIME_TRUNCATE_FRACTIONAL`: This mode indicates if truncation is allowed on
    `TIME`, `DATE`, and `TIMESTAMP` columns or not. The default behavior is to perform
    rounding on the values instead of truncation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Combination SQL modes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'MySQL 8 also provides some special modes as combinations of mode values:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ANSI`: It includes the effects of the `REAL_AS_FLOAT`, `PIPES_AS_CONCAT`,
    `ANSI_QUOTES`, `IGNORE_SPACE`, and` ONLY_FULL_GROUP_BY` modes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DB2`: It includes the effects of the `PIPES_AS_CONCAT`, `ANSI_QUOTES`, `IGNORE_SPACE`,
    `NO_KEY_OPTIONS`, `NO_TABLE_OPTIONS`, and `NO_FIELD_OPTIONS` modes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MAXDB`: It includes the effects of  `PIPES_AS_CONCAT`, `ANSI_QUOTES`, `IGNORE_SPACE`,
    `NO_KEY_OPTIONS`, `NO_TABLE_OPTIONS`, `NO_FIELD_OPTIONS`, and `NO_AUTO_CREATE_USER`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MSSQL`: It includes the effects of `PIPES_AS_CONCAT`, `ANSI_QUOTES`, `IGNORE_SPACE`,
    `NO_KEY_OPTIONS`, `NO_TABLE_OPTIONS`, and `NO_FIELD_OPTIONS`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MYSQL323`: It includes the effects of the `MYSQL323` and `HIGH_NOT_PRECEDENCE`
    modes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MYSQL40`: It includes the effects of the `MYSQL40` and `HIGH_NOT_PRECEDENCE`
    modes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ORACLE`: It includes the effects of the `PIPES_AS_CONCAT`, `ANSI_QUOTES`,
    `IGNORE_SPACE`, `NO_KEY_OPTIONS`, `NO_TABLE_OPTIONS`, `NO_FIELD_OPTIONS`, and `NO_AUTO_CREATE_USER`
    modes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`POSTGRESQL`: It includes the effect of the `PIPES_AS_CONCAT`, `ANSI_QUOTES`,
    `IGNORE_SPACE`, `NO_KEY_OPTIONS`, `NO_TABLE_OPTIONS`, and `NO_FIELD_OPTIONS` modes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TRADITIONAL`: It includes the effects of the `STRICT_TRANS_TABLES`, `STRICT_ALL_TABLES`,
    `NO_ZERO_IN_DATE`, `NO_ZERO_DATE`, `ERROR_FOR_DIVISION_BY_ZERO`, `NO_AUTO_CREATE_USER`
    and `NO_ENGINE_SUBSTITUTION` modes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Strict SQL mode
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The **strict mode** is used to manage *Invalid data* or *missing data*. If strict
    mode is not enabled, then MySQL will manage the insert and update operations by
    adjusting values and generating warning messages. We can do the same on strict
    mode by enabling the `INSERT IGNORE` or `UPDATE IGNORE` options. Let's take a
    key insertion example where a key value exceeds the maximum limit. MySQL produces
    an error and stops the execution if strict mode is enabled, and on the opposite
    side it allows key value by truncating if strict mode is disabled. In the same
    way, in the case of the `SELECT` statement where the data is not changed, MySQL
    will still produce an error, generating a warning message in case of invalid values
    if strict mode is enabled. Strict mode is in effect if either the `STRICT_ALL_TABLES` or
    the `STRICT_TRANS_TABLES` option is enabled. These two options behave similarly
    in the case of transactional tables and differently in the case of nontransactional
    tables.
  prefs: []
  type: TYPE_NORMAL
- en: '**For transactional tables**: If either of the modes are enabled, then MySQL
    will produce an error and aborts the statement execution, in case of invalid or
    missing values.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**For nontransactional tables**: The behavior of MySql will depend on the following
    factors, when the tables are nontransactional:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`STRICT_ALL_TABLES`: In this case, an error will be generated and the execution
    will be stopped. But still, there is a possibility of error where the partial
    data gets updated. To avoid this error scenario, use a single-row statement, which
    will abort execution if the error occurred during first row insertion/updation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`STRICT_TRANS_TABLES`: This option provide flexibility to convert an invalid
    value to the closest valid value. In case of missing value, MySQL inserts the
    data type''s default value into the column. Here, MySQL generates a warning message
    and continues with the execution.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Strict mode affects handling of divisions by zero, zero dates, and zeros in
    dates as describe in the preceding points with the `ERROR_FOR_DIVISION_BY_ZERO`, `NO_ZERO_DATE `and `NO_ZERO_IN_DATE` modes.
  prefs: []
  type: TYPE_NORMAL
- en: 'The SQL mode will be applied on the following SQL statements:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: You can go to : [https://dev.mysql.com/doc/refman/8.0/en/sql-mode.html](https://dev.mysql.com/doc/refman/8.0/en/sql-mode.html) for
    a detailed list of the errors associated with strict SQL mode in MySQL.
  prefs: []
  type: TYPE_NORMAL
- en: The IGNORE keyword
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'MySQL provides an `IGNORE` keyword which is optional for statement execution.
    The `IGNORE` keyword is used to downgrade errors to warnings and applicable to
    several statements. For multiple row statements, the `IGNORE` keyword allows you
    to skip the particular row, instead of aborting. The following statements support
    the `IGNORE` keyword:'
  prefs: []
  type: TYPE_NORMAL
- en: '`CREATE TABLE ... SELECT`: Individual `CREATE` and `SELECT` statements do not
    have support on this keyword, but when we insert into the table using `SELECT`
    statement, rows that duplicate an existing row on a unique key value are discarded.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DELETE`: If this statement executes with the `IGNORE` option MySQL avoid errors
    occurred during execution.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`INSERT`: Duplicate values in unique key and data conversion issues will be
    handled by this keyword during row insertion. MySQL will insert the closest possible
    values into the column and ignore the error.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`LOAD DATA` and `LOAD XML`: At the time of loading data if duplication is found
    the statement will discard it and continue insertion for the remaining data if
    the `IGNORE` keyword is defined.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`UPDATE`: In cases of duplicate key conflict on unique key during statement
    execution, MySQL will update the column with the closest identified values.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `IGNORE` keyword also applies on some specific errors, listed here:[ https://dev.mysql.com/doc/refman/8.0/en/sql-mode.html](https://dev.mysql.com/doc/refman/8.0/en/sql-mode.html).
  prefs: []
  type: TYPE_NORMAL
- en: IPv6 support
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'MySQL 8 provides support for **IPv6**, with the following capabilities:'
  prefs: []
  type: TYPE_NORMAL
- en: MySQL server will accept TCP/IP connections from clients with IPv6 connectivity
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MySQL 8 account names permit IPv6 addresses, which enables DBA to specify privileges
    for the clients that are connected with server, using IPv6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The IPv6 functions enable conversions between string and internal IPv6 address
    formats, and checking whether the values represent a valid IPv6 address or not
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Server side help
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'MySQL 8 provides `HELP` statement, to get information from the MySQL reference
    manual. To manage this information, MySQL uses several tables of system database.
    To initialize these tables, MySQL provides the `fill_help_tables.sql` script.
    This script is available at [http://dev.mysql.com/doc/index-other.html](https://dev.mysql.com/doc/index-other.html).
    After downloading and unzipping the script file, execute the below command, for
    invoking the `HELP` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: At the time of installation process content initialization occurs. In case of
    upgrading it will be perform so; execute the above command manually.
  prefs: []
  type: TYPE_NORMAL
- en: The server shutdown process
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The server shutdown process performs the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: '**The shutdown process is initiated**: There are several ways to initialize
    the shutdown process. Execute the `mysqladmin shutdown` command which can be executed
    on any platform. There are some system specific ways to initialize the shutdown
    process; for example, Unix based systems will start to shut down when it receives
    a **SIGTERM** signal. In the same way, Window based systems will start to shut
    down when the service manager tells them to.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**The server creates a shutdown thread if necessary**: Based on the shutdown
    initialization process, the server will decide to create new thread or not. If
    it is requested by the client, a new thread will be created. If a signal is received,
    then the server might create a thread or it might handle it by itself. If the
    server tries to create a separate thread for the shutdown process and an error
    occurs, then it produces the following message in the error log:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '**The server stops accepting new connections**: When the shutdown activity
    is initiated, the server will stop accepting new connection requests, using a handler
    of network interfaces. The server will be using Windows features such as named
    pipe, TCP/IP port, the Unix socket file, and shared memory on Windows in order
    to listen to new connection requests.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**The server terminates current activity**: Once the shut down process is initialized,
    the server will start to break the connection with the client. In the normal scenario,
    the connection threads will die quickly, but the ones which are working or are
    in an ongoing activity stage will take a long time to *die*. So if a thread is
    executing open transactions and if it gets rollback in the middle of execution
    then the user might get only partially updated data. On the other hand, if the
    thread is working on a transaction, then the server will wait until the transaction
    is completed. Also, the user can terminate the ongoing transaction by executing
    the  `KILL QUERY` or `KILL CONNECTION` statements.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**The server shuts down or closes storage engines**: In this phase, the server
    flushes the cache and closes all the open tables. Here, the storage engine performs
    all the actions necessary for tables. `InnoDB` flushes its buffer pool, writes
    the current LSN into tablespace and terminates its thread. The `MyISAM` flushes
    the pending index.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**The server exits**: In this phase, the server will provide one of the following
    values to the management processes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 0 = successful termination (no restart done)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 1 = unsuccessful termination (no restart done)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 2 = unsuccessful termination (restart done)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data directory
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The data directory is the place where MySQL 8 stores all the information that
    is managed by itself. Each sub-directory of the data directory represents a database
    directory and its related data. All the MySQL installations have the following
    standard databases:'
  prefs: []
  type: TYPE_NORMAL
- en: '**The** `sys` **directory**: This represents the sys schema, which contains
    the objects useful for the Performance Schema information interpretation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The** `performance schema` **directory**: This directory is used to observe
    the internal execution of the MySQL server at run-time.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The** `mysql` **directory**: This directory is related to the MySQL system
    database, which contains the data dictionary table and the system tables. It contains
    the information that is required by the MySQL server once it is running.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The system database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The system database mainly contains the data dictionary tables that stores the
    object's metadata and system tables for other operational purposes. The system
    database contains a number of system tables. We will learn more about them in
    the coming sections.
  prefs: []
  type: TYPE_NORMAL
- en: Data dictionary tables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The data dictionary tables contains the metadata about data objects. Tables
    of this directory are invisible and are not read by general SQL queries such as `SELECT`,
    `SHOW TABLES`, `INFORMATION_SCHEMA.TABLES`, and so on. MySQL mainly exposes the
    metadata using the `INFORMATION_SCHEMA` option.
  prefs: []
  type: TYPE_NORMAL
- en: Grant system tables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: These tables are used to manage and provide grant information of users, database
    and relevant privileges. MySQL 8 uses grant tables as transactional tables, not
    nontransactional (`MyISAM`, for example) tables, so all the operations on the
    transaction are either completed or failed; no partial case will be made possible.
  prefs: []
  type: TYPE_NORMAL
- en: Object information system tables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These tables contains information related to the stored programs, components
    and server-side plugins. The following main tables are used to store information:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Component**: Works as a registry for the server. The MySQL 8 server loads
    all the components listed by this table on server startup.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Func**: This table contains information related to all the **user-defined
    functions** (**UDF**). MySQL 8 will load all the UDFs listed in this table during
    server startup.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Plugin**: Contains the information related to the server-side plugins. The
    MySQL 8 server loads all the available plugins during startup.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Log system tables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: These tables are useful for logging and using csv storage engines. For example,
    the functions `general_log` and `slow_log`.
  prefs: []
  type: TYPE_NORMAL
- en: The server-side help system tables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These tables are useful to store help information. The following tables are
    available in this category :'
  prefs: []
  type: TYPE_NORMAL
- en: '`help_category`: Provides information about the help categories'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`help_keyword`: Provides keywords associated with help topics'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`help_relation`: Helps in mappings between help keywords and topics'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`help_topic`: Help topic contents'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Time zone system tables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These tables are useful to store time zone information. The following tables
    are available in this category:'
  prefs: []
  type: TYPE_NORMAL
- en: '`time_zone`: Provides the time zone IDs and whether they use leap seconds'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`time_zone_leap_second`: Will come in handy when leap seconds occur'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`time_zone_name`: Helps in mappings between time zone IDs and names'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`time_zone_transition` and  `time_zone_transition_type`: Time zone descriptions'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Replication system tables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These tables are useful to support the replication feature. It helps to store
    replication related information when it is configured to as mentioned in following
    tables. The following tables are available in this category:'
  prefs: []
  type: TYPE_NORMAL
- en: '`gtid_executed`: Used for creating the table for storing GTID values'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ndb_binlog_index`: Provides the binary log information for MySQL Cluster replication'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`slave_master_info`, `slave_relay_log_info` and  `slave_worker_info`: Used
    to store replication information on slave servers'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Optimizer system tables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This tables are useful for optimizer. The following tables are available in
    this category:'
  prefs: []
  type: TYPE_NORMAL
- en: '`innodb_index_stats` and `innodb_table_stats`: Used for getting the `InnoDB` persistent
    optimizer statistics'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`server_cost`: Contains the optimizer cost estimates for general server operations.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`engine_cost`: Contains the estimates for operations specific to particular
    storage engines'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Other miscellaneous system tables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Tables that don''t fall into the above-mentioned categories fall under this
    category. The following tables are available in this category:'
  prefs: []
  type: TYPE_NORMAL
- en: '`servers`: Used by the `FEDERATED` storage engine'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`innodb_dynamic_metadata`: Used by the `InnoDB` storage engine to store fast
    changing table metadata such as auto-increment counter values and index tree corruption
    flags'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can learn more about the different system tables at: [https://dev.mysql.com/doc/refman/8.0/en/system-database.html](https://dev.mysql.com/doc/refman/8.0/en/system-database.html).'
  prefs: []
  type: TYPE_NORMAL
- en: Running multiple instances on a single machine
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There might be some situations where you are required to install multiple instances
    on a single machine. It may be to check the performance of two different versions,
    or perhaps there is a need to manage two separate databases on different MySQL
    instances. The reason can be anything, but MySQL allows user to execute multiple
    instances on the same machine by providing different configuration values. MySQL
    8 allows users to configure parameters by making use of the command line, option
    file, or by setting environment variables. The primary resource used by MySQL
    8 for this is the data directory and it must be unique for the two instances.
    We can define the value for the same using the `--datadir=dir_name`function. Apart
    from the data directory, we will also configure unique values for the following
    options as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '`--port=port_num`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--socket={file_name|pipe_name}`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--shared-memory-base-name=name`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--pid-file=file_name`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--general_log_file=file_name`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--log-bin[=file_name]`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '``--slow_query_log_file=file_name``'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--log-error[=file_name]`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--tmpdir=dir_name`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up multiple data directories
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As described above, each of the MySQL instances must have a separate data directory.
    The user is allowed to define separate directories using the following methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Create a new data directory**: In this method we must follow the same procedure
    which was defined in [Chapter 2](69eaf074-9446-4da9-918c-765f7e001f8c.xhtml),
    *Installing and Upgrading MySQL*. For Microsoft Windows, when we install MySQL
    8 from Zip archives, copy its data directory to the location where you want to
    set up the new instance. In the case of an MSI package along with the data directory,
    create a pristine `template` data directory named data under the installation
    directory. Once the installation is complete, copy the data directory to set up
    additional instances.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Copy an existing data directory**: In this method, we will copy an existing
    instance''s data directory to the new instance''s data directory. To copy an existing
    directory, perform the following steps:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Stop the existing MySQL instance. Make sure it's cleanly shut down so that no
    pending changes are available in the disk.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the data directory to the new location.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the `my.cnf` or `my.ini` option file used by the existing instance to the
    new location.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Modify the new option as per the new instance. Make sure all the unique configurations
    are done properly.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start the new instance with the new option file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Running multiple MySQL instances on Windows
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The user is allowed to run multiple MySQL instances on a single Windows machine
    either by using the command line and passing values or by the window service.
  prefs: []
  type: TYPE_NORMAL
- en: '**Starting multiple MySQL instances at the Windows command line: **To execute
    multiple instances using the command line, we can either specify the option at
    runtime or we can set it in the option file. The option file is a better option
    to start instances because there is no need to specify arguments every time at
    startup. To setup or configure the option file, follow the same steps described
    in [Chapter 2](https://cdp.packtpub.com/mysql_8_administrator___s_guide/wp-admin/post.php?post=121&action=edit#post_26), *Installing
    and Upgrading MySQL*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Starting multiple MySQL instances as Windows services: **To start multiple
    instance on Windows as service, we have to specify different services with unique
    names. As described in [Chapter 2](69eaf074-9446-4da9-918c-765f7e001f8c.xhtml),
    *Installing and Upgrading MySQL,* use the `–install` or `--install-manual` options
    to define MySQL as a Windows service. The following options are available to define
    multiple MySQL instances as Windows services:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Approach 1**: Create two separate option files for instances and define the `mysqld`
    group inside it. For example, use the function `C:\my-opts1.cnf`. The code for
    the same is given below for your reference:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'We can do the same using `C:\my-opts2.cnf` function as well. The following
    code depicts the process:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'You can install the MySQL8 services using the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '**Approach 2**: Create one common option file as `C:\my.cnf` for both the services:'
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Execute the following commands to install MySQL services:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'To start MySQL services, execute the following commands:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Components and plugin management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The component based structure is supported by MySQL server, to extend the server
    capabilities. MySQL 8 uses the `INSTALL COMPONENT` and `UNINSTALL COMPONENT` SQL
    statements to load and unload components at runtime. MySQL 8 manages component
    details into the `mysql.component` system table. So, every time a new component
    is installed, MySQL 8 server performs the following tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: Load components into server to make available instantly
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Load service registered component into the `mysql.component` system table.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'When we uninstall any component, MySQL server will perform the same steps,
    but in the reverse order. To see which components are available, execute the following
    query:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: MySQL 8 server plugins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: MySQL 8 server has a plugin API that enables the creation of server components.
    With MySQL 8, you have the flexibility of installing a plugin at runtime or at
    startup. In the following topics we will learn about the life cycle of the MySQL
    8 server plugins.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the plugins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The loading of the plugins varies with their types and characteristics. To
    get a clearer picture of this, let''s go though the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Built-in plugins**: The server knows about the built-in plugins and loads
    them automatically, on startup. The user is allowed to change the state of plugins
    by any of their activation statuses, which will be discussed in the following
    section.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Plugins registered in the **`mysql.plugin`** system table**: On startup MySQL
    8 server will load all the plugins which are registered in the `mysql.plugin` table.
    If the server is started with the `--skip-grant-tables` option,  the server will
    not load the plugins listed there.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Plugins named with command-line options**: MySQL 8 provides the  `--plugin-load`, `--plugin-load-add`,
    and `--early-plugin-load` options for loading plugins with the command line. The `--plugin-load`
    and `--plugin-load-add` options load the plugins on server startup after the built-in
    plugins are installed. But, we can use the `--early-plugin-load` option to load
    the plugins, prior to initialization of built-in plugins and storage engines.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Plugins installed with the **`INSTALL PLUGIN`** statement**: This is a permanent plugin
    registration option, which will register the plugin information in the `mysql.plugin`
    table. It will also load all the plugins available in the plugin library.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Activate plugin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To control the state (like the activation or deactivation) of plugins, MySQL
    8 provides the following options:'
  prefs: []
  type: TYPE_NORMAL
- en: '`--plugin_name=OFF`:Disables the named plugin. Some of the built-in plugins, 
    such as the `asmysql_native_password` plugin, are not affected by this command.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--plugin_name[=ON]`:This command enables the specified plugin. If plugin initialization
    failed during startup MySQL 8 will start with the plugin disabled.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--plugin_name=FORCE`:This is the same as the above command, except the server
    does not start. This means that it forces the server to start with the plugin
    if it is mentioned on startup.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--plugin_name=FORCE_PLUS_PERMANENT`:The same as the `FORCE` option, but additionally
    prevents the plugin from being unloaded at runtime.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Uninstall plugin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: MySQL 8 uses the `UNINSTALL PLUGIN` statement to uninstall the plugin, without
    considering whether it was installed during the runtime or at startup. But this
    statement will not allow us to uninstall the built-in plugins and the plugins
    that were installed by the  `--plugin_name=FORCE_PLUS_PERMANENT` option. This
    statement just unloads the plugin and removes it from the `mysql.plugin` table,
    so it requires additional *delete* privileges on the `mysql.plugin` table.
  prefs: []
  type: TYPE_NORMAL
- en: Getting information about the installed plugins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are multiple ways to get information about the installed plugins. Some
    of them are listed as follows, for your reference:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `INFORMATION_SCHEMA.PLUGINS` table contains plugin details such as `PLUGIN_NAME`,
    `PLUGIN_VERSION`, `PLUGIN_STATUS`, `PLUGIN_TYPE`, `PLUGIN_LIBRARY`, and many more.
    Each individual row of this table represents information about the plugin:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: The `SHOW PLUGINS` statement shows the name, status, type, library, and license
    details for each of the individual plugins. If the library value is `NULL`, it
    indicates that it is a built-in plugin and hence, it cannot be unloaded.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: The `mysql.plugin` table contains details regarding all the plugins which were
    registered by the `INSTALL PLUGIN` function.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Roles and permissions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To put it simply, a *role* is a collection of privileges. To create a role in
    MySQL 8, you must have the global `CREATE ROLE` or `CREATE USER` privilege. MySQL
    8 provides various privileges to attach to roles and users. Refer to [https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html) for
    more details on the available privileges.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s take an example to understand the role creation and privileges
    assignment. Assume we have a `hr_employee` table already created in the current
    database and we want to give access of this table to the `hrdepartment` role.
    This dilemma can be resolved by making use of the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: The above code will help us to create the `hrdepartment` role and grant all
    the necessary access to it. This topic will be covered in detailed in [Chapter
    11](d95269f6-7e47-49e2-9681-8a898d1f2742.xhtml), *Security*.
  prefs: []
  type: TYPE_NORMAL
- en: Caching techniques
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Cache is a mechanism used to improve performance. MySQL uses several strategies
    to cache information in the buffer. MySQL 8 make use of the cache at the storage
    engine level to handle its operations. It also applies the cache in prepared statements
    and stored programs to improve performance. MySQL 8 has introduced various system
    level variables to manage cache, such as `binlog_stmt_cache_size`, `daemon_memcached_enable_binlog`,
    `daemon_memcached_w_batch_size`, `host_cache_size`, and many more. We will cover
    caching in detail in [Chapter 12](e0ed94d9-6f7c-4ef1-ac13-33797e23054c.xhtml), *Optimizing
    MySQL 8*.
  prefs: []
  type: TYPE_NORMAL
- en: Globalization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Globalization is a feature which provides multi-language support for an application,
    such as enabling the use of native languages. It is much easier to understand
    messages in our own native language than other languages, right? To achieve this,
    globalization comes into the picture. Using globalization a user can store, retrieve
    and update data into many languages. There are certain parameters that are to
    be considered in globalization. We will discuss them in detail in the following
    sections.
  prefs: []
  type: TYPE_NORMAL
- en: Character sets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before going into detail about character sets it is required to understand what
    a character set actually is, as well as its related terms, right? Let's start
    with the term itself; the character set is a set of symbols and encoding. Another
    important term related to character set is **collation**, the set of rules used
    for comparing characters. Let's take a simple example to understand the character
    sets and collation. Consider two alphabets, *P* and *Q*, and assign a number to
    each, so that *P=1* and *Q=2*. Now, assume *P* is a symbol and 1 is its encoding.
    Here, the combination of both the letters and their encoding is known as the character
    set. Now suppose, we want to compare these values; the simplest way is by referring
    the encoding values. With this as 1 is less than 2 we can say *P* is less than
    *Q* which is known as collation. This is the simplest example to understand character
    sets and collation, but in real life we have many characters, including special
    characters, and in the same way collations have many rules.
  prefs: []
  type: TYPE_NORMAL
- en: Character set support
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'MySQL 8 supports many character sets, with a variety of collations. Character
    sets can be defined at the column, table, database or server levels. We can use
    the character set for `InnoDB`, `MyISAM`, and `Memory` storage engines. To check
    all the available character sets of MySQL 8, execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'In the same way, to see the collation of characters, execute the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'The collation will have the following three characteristics:'
  prefs: []
  type: TYPE_NORMAL
- en: Two different character sets cannot have the same collation.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each character set has a default collation. As displayed in the above code,
    the `show character set` command displays the default collation of the character
    set.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Collation follows predefined naming conventions, which will be explained later.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Character set repertoire**: A **repertoire **is the collection of characters
    in the dataset. Any string expression will have a repertoire attribute and will
    belong to one of the below values:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ASCII**: An expression that contains characters in the Unicode range U+0000
    to U+007F.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**UNICODE**: An expression that contains characters in the Unicode range U+0000 to U+10FFFF.
    This includes characters in the **Basic Multilingual Plane** (**BMP**) range (U+0000 to U+FFFF)
    and supplementary characters outside the BMP range (U+01000 to U+10FFFF).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'From the range of both values, we can identify that the ASCII is a subset of
    the UNICODE range and we can safely convert ASCII values to UNICODE values without
    any loss in data. The Repertoire is mainly used for the conversion of expressions
    from one character set to another. In some of the conversion cases MySQL 8 throws
    an error like illegal mix of collations; to handle these scenarios, repertoire
    is required. To understand its use, consider the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '**UTF-8 for metadata**: Metadata means the data about the data. In terms of
    database we can say that anything that describes database objects is known as
    **metadata**. For example: column names, usernames, and many more. MySQL follows
    the below two rules for metadata:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Include all characters in all the languages for metadata; this enables a user
    to use his own language for column name and table name.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Manage one common character set for all metadata. Otherwise, the `SHOW` and
    `SELECT` statements for tables in `INFORMATION_SCHEMA` will not work properly.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To follow the above rules MySQL 8 stores metadata into the Unicode format. Consider
    that MySQL functions such as `USER()`, `CURRENT_USER()`, `SESSION_USER()`, `SYSTEM_USER()`,
    `DATABASE()`, and `VERSION()` have the UTF-8 character set by default. MySQL 8
    server has defined `character_set_system` to specify character sets for metadata.
    Make sure that the storage of metadata in Unicode does not mean that column headers
    and the `DESCRIBE` function will return values in the form of the metadata character
    set. It works as per the  `character_set_results`  system variable.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the character set
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This section describes how to add character sets in MySQL 8\. This method may
    vary based on the character set type - it might be simple or complex depending
    on the character type. The following four steps are required for adding character
    sets into MySQL 8:'
  prefs: []
  type: TYPE_NORMAL
- en: Add a `<charset>` element for `MYSET` to the `sql/share/charsets/Index.xml`
    file. For the syntax, refer the already defined file for the other character set.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In this step, the process is different for simple and complex character sets.
    For simple character sets, create a configuration file, `MYSET.xml`, in the `sql/share/charsets`
    directory to describe the character set properties. In the case of complex character
    sets, the C source file is required. For example, create the `ctype-MYSET.c` type
    in the strings directory. For each `<collation>` element, provide `ctype-MYSET.c
    file`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Modify the configuration information:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Edit `mysys/charset-def.c`, and *register* the collations for the new character
    set. Add these lines to the **declaration** section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Add these lines to the **registration**section:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: If the character set uses `ctype-MYSET.c`, edit strings`/CMakeLists.txt` and
    add `ctype-MYSET.c` to the definition of the `STRINGS_SOURCES` variable.
  prefs:
  - PREF_OL
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Edit `cmake/character_sets.cmake` with the following changes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add `MYSET` to the value of with `CHARSETS_AVAILABLE` in alphabetic order.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add `MYSET` to the value of `CHARSETS_COMPLEX` in alphabetic order. This is
    needed even for simple character sets, or `CMake` will not recognize `DDEFAULT_CHARSET=MYSET.`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reconfigure, recompile, and test.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configuring the character sets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: MySQL 8 provides the `--character-set-server` and `--collation-server` options
    to configure the character sets. The default character set has been changed from
    `latin1` to `UTF8`. `UTF8` is the dominating character set, though it hadn't been
    a default one in prior versions of MySQL. With these changes globally accepted,
    character sets and collations
  prefs: []
  type: TYPE_NORMAL
- en: are now based on `UTF8`; one of the common reasons is because there are around
    21 different languages supported by `UTF8`, which makes systems provide multilingual
    support. Before configuring collation, refer to the collation list available at
    [https://dev.mysql.com/doc/refman/8.0/en/show-collation.html](https://dev.mysql.com/doc/refman/8.0/en/show-collation.html).
  prefs: []
  type: TYPE_NORMAL
- en: Language selection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'MySQL 8 uses English languages by default for the error messages, but allows
    user to choose several other languages. For example, Russian, Spanish, Swedish,
    and many more. MySQL 8 uses `lc_messages_dir` and `lc_messages`, two system variables
    that manage the language for error messages, and have the following properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '`lc_messages_dir`:  It is a system variable and is set up during server startup.
    It is global variable so is commonly used by all the clients at runtime.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`lc_messages`: This variable is used at global as well as at session level.
    Individual users are allowed to use a different language for error messages. For
    example, if `en_US` is set during server startup but if you want to use French,
    then execute the following command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'MySQL 8 server follows the below three rules for error message files:'
  prefs: []
  type: TYPE_NORMAL
- en: MySQL 8 will find the file at a location constructed by two system variables, `lc_messages_dir`
    and `lc_messages`. For example, if you start MySQL 8 with the below command then `mysqld` maps
    the locale `nl_NL` to the Dutch language and search for the  error file in the
    ` /usr/share/mysql/dutch` directory. MySQL 8 stores all language files in the `MySQL8
    Base Directory/share/mysql/LANGUAGE` directory. By default, the language files
    are located in the `share/mysql/LANGUAGE` directory under the MySQL base directory.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: If the message file does not exist under the directory then MySQL 8 will ignore
    the value of the `lc_messages` variable and consider the value of the `lc_messages_dir` variable
    as a location in which to look.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the MySQL 8 server does not find the message file, then it shows a message
    in the error log file and uses English for the messages.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Time zone settings for MySQL8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The MySQL 8 server manages time zones in three different ways:'
  prefs: []
  type: TYPE_NORMAL
- en: '**System time zone**: This is managed by the `system_time_zone` system variable,
    which can be set either by `–timezone=timezone_name` or by the `TZ` environment
    variable before execution of mysqld.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Server''s current time zone**: This is managed by the `time_zone` system
    variable. The default value of the `time_zone` variable is `SYSTEM`, which means
    the server time zone is the same as the system time zone. MySQL 8 allows users
    to set the `time_zone` global variable value at startup time by specifying `default-time-zone=''*timezone*''`
    in the option file, and at runtime by using the following command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '**Pre-connection time zone**: This is managed by the `time_zone` variable and
    specific to the client that connects to the MySQL 8 server.  This variable takes
    its initial value from the global `time_zone` variable but MySQL 8 allows the
    user to change it at runtime by executing the below command :'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: This session variable affects the display and storage of zone specific values.
    For example, values returned by the `NOW()` and `CURTIME()` functions. On the
    other hand, this variable does not affects values which are displayed and stored
    in UTC format, such as with the `UTC_TIMESTAMP()` function.
  prefs: []
  type: TYPE_NORMAL
- en: Locale support
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'MySQL 8 uses `lc_time_names` system variables to control languages which will
    impact what day, month name, and abbreviations will be displayed. The  `DATE_FORMAT()`, `DAYNAME()`,
    and `MONTHNAME()` function outputs depend on the `lc_time_names` variable''s value.
    The first question that comes to mind is, where are these locales defined and
    how do we get them? Not to worry, refer to [http://www.iana.org/assignments/language-subtag-registry](http://www.iana.org/assignments/language-subtag-registry).
    All locales are defined with language and region abbreviations by **Internet Assigned
    Numbers Authority** (**IANA**). By default, MySQL 8 sets `en_US` as the locale
    in the system variable.  There is provision for the user to set the value on server
    startup or to set `GLOBAL` if they have `SYSTEM_VARIABLES_ADMIN` or `SUPER`privileges.
    MySQL 8 allows a user to check and set the locale for his connection. Execute
    the following commands to check the locale on your workstation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: MySQL 8 server logs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'MySQL 8 server provides the following different type of logs that enable users
    to track the activity of the server in various situations:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Log type** | **Information written to log** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Error log | Problems encountered starting, running, or stopping `mysqld`
    |'
  prefs: []
  type: TYPE_TB
- en: '| General query log | Established client connections and statements received
    from clients |'
  prefs: []
  type: TYPE_TB
- en: '| Binary log | Statements that change data (also used for replication) |'
  prefs: []
  type: TYPE_TB
- en: '| Relay log | Data changes received from a replication master server |'
  prefs: []
  type: TYPE_TB
- en: '| Slow query log | Queries that took more than `long_query_time` seconds to
    execute |'
  prefs: []
  type: TYPE_TB
- en: '| DDL log (metadata log) | Metadata operations performed by DDL statements
    |'
  prefs: []
  type: TYPE_TB
- en: You can learn more about the  different type of logs at [https://dev.mysql.com/doc/refman/8.0/en/server-logs.html](https://dev.mysql.com/doc/refman/8.0/en/server-logs.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'MySQL 8 will not generate the logs in MySQL 8, except in error logs in Windows,
    unless we enable it. By default, MySQL 8 will store all logs into a file under
    the data directory. When we talk about files, so many questions come into our
    mind, right? For example; what will be the size of file? How many files will be
    generated? How do we flush log files? MySQL 8 provides various configurations
    for managing log files; we will see all these configurations in a later part of
    this chapter. Another important question is where do we store logs? In tables
    or in files? Below are some points which describe the benefits of tables compared
    to files:'
  prefs: []
  type: TYPE_NORMAL
- en: If logs are stored into tables then their contents are accessible through SQL
    statements. This means that users can execute select queries with required criteria
    to get a specific output.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Any remote user can connect to the database and get the details of the log.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Log entries are managed by standard format. You can check the structure of
    log tables with the following commands:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The code for a general log:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'The code for a slow query log:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: The error log
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This log is used to record diagnostic messages like error, warnings and notes
    that occur from the startup of MySQL 8 through till its end. MySQL 8 provides
    various configurations and components for users to generate log files as per their
    requirements. When we start writing into files some basics questions come to mind;
    what do we write? How do we write it? Where do we write it to? Let''s start with
    first question. MySQL 8 uses the `log_error_verbosity` system variable and assigns
    the below filtering options to decide what type of messages should be written
    into the error log file:'
  prefs: []
  type: TYPE_NORMAL
- en: '``Error Only``'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Errors and Warnings`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Errors, Warnings and Notes`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To write at the destination place MySQL uses the below format where the time
    stamp depends on the `log_timestamps` system variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: After writing log files, the first question that comes to mind is, how do we
    flush these logs? For that, MySQL 8 provides three ways; `FLUSH ERROR LOGS`,`FLUSH
    LOGS`, or `mysqladmin flush-logs`. These commands will close and reopen the log
    file to which it is writing. When we talk about how to write and where to write,
    there are so many things to understand.
  prefs: []
  type: TYPE_NORMAL
- en: Component configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'MySQL 8 uses the `log_error_services` system variable to control error log
    components. It allows users to define multiple components by semicolons, separated
    for the execution. Here, components will be executed in the order in which they
    are defined. The user is allowed to change the values of this variable with the
    following constraints:'
  prefs: []
  type: TYPE_NORMAL
- en: '`INSTALL COMPONENT`: To enable any log component we must first install it using
    this command, and then use the component by listing it in `log_error_services`
    system variable.  Follow the following commands to add the `log_sink_syseventlog`
    component:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: After execution of the installation command MySQL 8 will register the component
    into the `mysql.component` system table to make it available for loading on each
    startup.
  prefs: []
  type: TYPE_NORMAL
- en: '`UNINSTALL COMPONENT`: To disable any of the log components, first remove it
    from the `log_error_services` system variable list and then uninstall it with
    this command. Execute the below command to uninstall a component:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'To enable error log components on each startup, define it in the `my.cnf` file
    or use `SET_PERSIST`. When we define it in `my.cnf` it takes effect from the next
    restart, whereas `SET_PERSIST` will give an immediate effect. Use the following
    command for `SET_PERSIST`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'MySQL 8 also allows users to write error logs into system logs: for Microsoft,
    consider Event log, and for Unix based systems, consider syslog. To enable error
    logging into system `logfibf`, configure `log_filter_internal` and the system
    log writer `log_sink_syseventlog` components and follow the same instructions
    explain above. Another way is to write a JSON string into the log file configuration `log_sink_json`
    component. An interesting point about a JSON writer is that it will manage file
    naming conventions by adding NN (two-digit numbers). For example, consider file
    names as `file_name.00.json`, `file_name.01.json`, and so forth.'
  prefs: []
  type: TYPE_NORMAL
- en: Default error log destination configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Error logs can be written into log files or on console. This section describes
    how to configure the destination of error log on different environments.
  prefs: []
  type: TYPE_NORMAL
- en: Default error log destination on Windows
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`--console`: If this is given then the console will be considered the default
    destination. `--console` takes precedence over `--log-error` in cases where both
    are defined. If the default location is console, then MySQL 8 server sets the `log_error`
    variable''s value as `stderror`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--log-error`: If this is not given, or given without naming a file, then the
    default file name is `host_name.err` and the file will be created in the data
    directory unless the `--pid-fileoption` is specified. If the file name is specified
    in `–pid-file` option, then the naming convention would be a **PID** file base
    name with a suffix of `.err` in the data directory.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Default error log destination on Unix and  Unix-Like systems
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: All the above mentioned scenarios in Microsoft Windows will be managed by the `–log_error`
    option in Unix systems.
  prefs: []
  type: TYPE_NORMAL
- en: '`--log-error`: If this is not given then the default destination is the console.
    If no file name is given, then as with Windows it will create a file in the data
    directory with the `host_name.err` name. The user is allowed to specify `–log-error`
    in an option file under the `mysqld` or `mysqld_safe` sections.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The general query log
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The general query log is a general purpose log, used to record all the actions
    performed by `mysqld`. In this log, file statements are written in the sequence
    in which they are received, but the execution sequence may differ from the receiving
    sequence. It starts logging from the connection of the client and continues until
    it disconnects. Apart from SQL commands it also logs the `connection_type` means
    by which the protocol client is connected, for example TCP/IP, SSL, Socket, and
    many more. As it logs most of the action performed by `mysqld` it's very useful
    when we want to find what error occurred with the client.
  prefs: []
  type: TYPE_NORMAL
- en: 'By default, this log is disabled. We can enable it by using the **`--general_log[={0|1}]`**
    command. When we do not specify any argument or define 1 as the argument it indicates
    enable general query log, while 0 indicates disable log. In addition, we can specify
    log file name with the `--general_log_file=file_name` command. If no file name
    is specified by the command, then MySQL 8 will consider the default name as `host_name.log`.
    Setting the log file name has no effect on logging if the log destination value
    does not contain `FILE`. Server restarts and log flushing do not cause a new general
    query log file to be generated; you have to use the `rename` (For Microsoft Windows)
    or `mv` (For Linux) commands to create a new file. MySQL 8 provides a second approach
    for renaming files at runtime by disabling the log using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Once the log is disabled, rename the log file and enable the log again with
    the `ON` option. Similarly, to enable or disable the log at runtime for particular
    connections use the session `sql_log_off` variable with the `ON` or `OFF` option. One
    more option is aligning with the general log file, that is, `--log-output`. By
    using this option, we can specify the destination of log output; it does not mean
    logs are enabled.
  prefs: []
  type: TYPE_NORMAL
- en: 'The three following different options are available with this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '`TABLE`: Log to tables'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`FILE`: Log to files'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`NONE`: Do not log into tables or files. `NONE`, if present, takes precedence
    over any other specifiers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the `--log-output` option is omitted, then the default value is file.
  prefs: []
  type: TYPE_NORMAL
- en: The binary log
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The binary log is a file which contains all the events of a database that describe
    changes, for example, table creation, data updates, and deletes from the table.
    It is not used for the `SELECT` and `SHOW` statements as it is not updating any
    data. Binary log writing will slightly reduce performance of database operations,
    however it enables users to use replication setup and operation restore. The main
    purposes of the binary log are:'
  prefs: []
  type: TYPE_NORMAL
- en: '**For replication in master-slave architecture**: For replication based on
    binary file, master server performs insert and updates operations which are reflected
    in the binary log file. Now, slaves nodes are configured to read these binary
    files and same events are executed in the binary file of the slave servers to
    replicate the data onto the slave servers.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Data recovery operations**: Once backup is restored into database, the events
    of the binary log are recorded, and these events are in re-executed form, which
    brings the database up to date from the point of the backup.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The binary log is enabled by default, which indicates that the log_bin system
    variable is set as ON. To disable this log use  `--skip-log-bin` or the `--disable-log-bin` option
    at startup. To delete all binary log files, use the RESET MASTER statement, or
    a subset of them with `PURGE BINARY LOGS`. MySQL 8 server uses the following three
    logging formats to record information into the binary log file:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Statement based logging**: This format is used by starting the server with
    the `--binlog-format=STATEMENT` command. It is mainly propagation of SQL statements.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Row based logging**: Use `--binlog-format=ROW` on server startup to enable
    row based logging. This format indicates how rows are affected. This is the default
    option.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Mixed logging**: Start MySQL 8 with the `--binlog-format=MIXED` option to
    enabled mixed logging. In this mode statement based logging is available by default
    and MySQL 8 will automatically switch into row based logging in some of the cases.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'MySQL 8 allows users to change format at runtime with global and session scope.
    Global format is set for all the clients while session is use for the individual
    client. The following sets the format at runtime with the global and session scope
    respectively:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'There are two exceptional cases where we cannot change format:'
  prefs: []
  type: TYPE_NORMAL
- en: Within a stored procedure or function
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In cases where the row based format is set and temporary table is open
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MySQL 8 has the `--binlog-row-event-max-size` variable to control the size of
    the binary log file in terms of bytes. Assign as a value to this variable a multiple
    of 256; the default value of this option is 8192\. Individual storage engines
    of MySQL 8 have their own capabilities for logging. If a storage engine supports
    row based logging, then it is known as **row-logging** capable, and if a storage
    engine supports statement based logging then it is known as **statement-logging**
    capable. Refer to the below table for more information on storage engine logging
    capabilities.
  prefs: []
  type: TYPE_NORMAL
- en: '| **Storage engine** | **Row logging supported** | **Statement logging supported**
    |'
  prefs: []
  type: TYPE_TB
- en: '| `ARCHIVE` | Yes | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| `BLACKHOLE` | Yes | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| `CSV` | Yes | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| `EXAMPLE` | Yes | No |'
  prefs: []
  type: TYPE_TB
- en: '| `FEDERATED` | Yes | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| `HEAP` | Yes | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| `InnoDB` | Yes | Yes when the transaction isolation level is `REPEATABLE`, `READ`,
    or `SERIALIZABLE`; No otherwise. |'
  prefs: []
  type: TYPE_TB
- en: '| `MyISAM` | Yes | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| `MERGE` | Yes | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| `NDB` | Yes | No |'
  prefs: []
  type: TYPE_TB
- en: As describe in this section the binary log will work based on types of statement
    like safe, unsafe, or binary injected, on the logging format such as `ROW`, `STATEMENT`,
    or `MIXED`, and with the logging capabilities of storage engines like row capable,
    statement capable, both, or neither. To understand all the possible cases of binary
    logging refer to the table given in this link: [https://dev.mysql.com/doc/refman/8.0/en/binary-log-mixed.html](https://dev.mysql.com/doc/refman/8.0/en/binary-log-mixed.html).
  prefs: []
  type: TYPE_NORMAL
- en: The slow query log
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Slow query logs are used to record SQL statements that takes long time to execute.
    MySQL 8 has defined the following two system variables for time configuration
    of slow query:'
  prefs: []
  type: TYPE_NORMAL
- en: '`long_query_time`:  This is used to define the ideal time for query execution.
    If a SQL statement takes longer than this time, then it is considered a slow query
    and a statement is recorded into the log file. The default value is 10 seconds.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`min_examined_row_limit`: This is the minimum time required for the execution
    of each query. The default value is 0 seconds.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MySQL 8 will not consider the initial time of acquiring a lock into execution
    time and will return slow query logs into a file once all locks are released and
    query execution is completed. When MySQL 8 is started, slow query logging is disabled
    by default; to start this log use the `slow_query_log[={0|1}]` command, where
    `0` indicates slow query log is disabled and 1 or without argument is used to
    enabled it. To log administrative statements and queries without indexing, use
    the **`log_slow_admin_statements` **and** `log_queries_not_using_indexes`** variables.
    Here, administrative statements include `ALTER TABLE`, `ANALYZE TABLE`, `CHECK
    TABLE`, `CREATE INDEX`, `DROP INDEX`, `OPTIMIZE TABLE`, and `REPAIR TABLE`. MySQL
    8 allows users to specify the name of the log file using `--slow_query_log_file=file_name` command.
    If no file name is specified, then MySQL 8 will create a file with the `host_name-slow.log`
    naming convention in the data directory. To write minimal information into this
    log file use the `--log-short-format` option.
  prefs: []
  type: TYPE_NORMAL
- en: 'All the above described parameters are controlled by MySQL 8 in the following
    sequence:'
  prefs: []
  type: TYPE_NORMAL
- en: The query must either not be an administrative statement, or `log_slow_admin_statements`
    must be enabled
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The query must have taken at least `long_query_timeseconds`, or `log_queries_not_using_indexes` must
    be enabled and the query must have used no indexes for row lookups
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The query must have examined at least `min_examined_row_limitrows`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The query must not be suppressed according to the `log_throttle_queries_not_using_indexes`
    setting
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `--log-output` option is also available for this log file, and has the same
    implementation and effect as the general purpose log.
  prefs: []
  type: TYPE_NORMAL
- en: The DDL log
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As name implies, this log file is used to record all the DDL statement execution
    related details. MySQL 8 uses this log file to recover from crashes that occur
    during the metadata operation execution. Let''s take one example to understand
    the scenarios:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Drop table t1, t2**: We must be sure that both the t1  and t2 tables are
    dropped'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When we execute any DDL statement, a record of these operations is written into
    the `ddl_log.log` file under the MySQL 8 data directory. This file is a binary
    file and not in human readable format. The user is not allowed to update the contents
    of this log file. Metadata statements recording is not required in normal execution
    of MySQL server; enable it only if it is required.
  prefs: []
  type: TYPE_NORMAL
- en: Server log maintenance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To maintain log files, we must clean up on a regular basis to manage disk space.
    For RPM based Linux systems the `mysql-log-rotate` script is available automatically.
    For other systems no such script is available, so we must install a short script
    by ourselves to manage log files. MySQL 8 provides the `expire_logs_days` system
    variable which is used to manage binary log files. Using this variable log Binary
    log files are automatically removed after a specified period.
  prefs: []
  type: TYPE_NORMAL
- en: 'The default value of this variable is 30 days; you can change its value by
    configuration change. Binary log files are remove on server startup or when the
    log is flushed. In case of replication, you can also use the `binlog_expire_logs_seconds`
    system variable to manage logs for masters and slaves. Log flushing performs the
    following tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: If general query logging or slow query logging to a log file is enabled, the
    server closes and reopens the query log file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If binary logging is enabled, the server closes the current binary log file
    and opens a new log file with the next sequence number
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the server was started with the `--log-error` option to cause the error log
    to be written to a file, the server closes and reopens the log file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To take backup or rename the old log files before generating a new log file,
    use the `mv` (move) command for Unix system, and the `rename` function in Windows.
    In case of general query and slow query log files, you can rename a file by disabling
    the log using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'After renaming log files, enable logs using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This was an interesting chapter for any MySQL 8 user, wasn't it?  In this chapter
    we understood how MySQL 8 manages different log files and which log file to use
    at what time. At the same time we also covered many of the administrative features,
    such as globalization, system data database, and component and plugin configuration,
    and explained how to run multiple instances on a single machine. The later part
    of the chapter covered log maintenance.
  prefs: []
  type: TYPE_NORMAL
- en: Moving on to the next chapter, we will provide you with information about storage
    engines, such as what the different types of storage engine are, which one to
    use for your application, and how to create our own custom storage engine for
    MySQL 8.
  prefs: []
  type: TYPE_NORMAL
