- en: Firebase Cloud Storage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will discuss Cloud Storage for Firebase and also its integration
    with Google Cloud Platform. We will also explore Firebase hosting, which allows
    you to host your web apps and static content (CDN) on a production-grade environment.
  prefs: []
  type: TYPE_NORMAL
- en: Cloud Storage provides scalable and secure object storage space, as most of
    the enterprises today need scalable file storage, considering the huge amount
    of data they collect through mobile apps, web applications, or corporate websites.
    Even the applications that are deployed on cloud need storage space either for
    their own assets such as images, JavaScript, CSS, audio, video files, or user-generated
    content such as documents, videos, or audios.
  prefs: []
  type: TYPE_NORMAL
- en: The Firebase SDK for Cloud Storage uses Google Cloud Storage buckets to store
    the uploaded files. Google Cloud Platform needs a billing account to use its products
    though they provide a few trials. The Firebase SDK for Cloud storage uses a default
    bucket in Google App Engine free tier and hence you don't need a billing account.
    Once your app starts growing, you can also integrate other products and services
    such managed to compute as App Engine or Cloud Functions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s a list of topics that we''ll cover in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Overview of Google Cloud Storage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Key Features of Google Cloud Storage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Storage Classes supported by Google Cloud Storage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Overview of Security and **Access Control List** (**ACL**) in Google Cloud Storage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Key features of Cloud Storage for Firebase
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setup of the Cloud Storage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrate Firebase Cloud Storage with HelpDesk Application to Upload and Download
    files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Overview of Google App Engine
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Overview Firebase Hosting
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploy front-end of HelpDesk Application on Firebase Hosting
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Before we deep dive into Cloud Storage for Firebase, let's first discuss Google
    Cloud Storage and its features.
  prefs: []
  type: TYPE_NORMAL
- en: Google Cloud Storage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Google Cloud Platform provides a secure, scalable, cost-effective, and high-performance
    infrastructure that includes a wide variety of services that are needed for developing,
    managing, and operating your applications. Google Cloud Storage is a part of Google
    Cloud Platform, which is a one-stop solution for all your object storage needs—from
    storage to live streaming to analytics to archival, it covers everything. Object
    storage is a massively scalable and cost-effective storage service to store any
    type of data in its native format.
  prefs: []
  type: TYPE_NORMAL
- en: For your different storage requirements, Google Cloud Storage provides different
    classes of storage, viz, Multi-Regional Storage, Regional Storage, Nearline Storage,
    and Coldline Storage.
  prefs: []
  type: TYPE_NORMAL
- en: Key features of Google Cloud Storage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Google Cloud Storage delivers advantages in the following key areas:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Durable:** Google Cloud Storage is designed to deliver 99.999999999% annual
    durability. Data is stored redundantly. When you upload data, it gets replicated
    in the background with an automatic checksum to ensure data integrity.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Available:** Google Cloud Storage offers high availability and makes your
    data available whenever you need it. As per Google Cloud Storage documentation, Multi-Regional
    offers 99.95% and Regional storage offers 99.9% monthly availability in their
    Service Level Agreement. Nearline and Coldline storage offer 99% monthly availability.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Scalable:** Google Cloud Storage is infinitely scalable, so it can support
    small to an exabyte-scale system.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Consistent:** Google Cloud Storage ensures read-after-write consistency,
    meaning that if a write succeeds, the latest copy of the document will always
    be returned for any GET request, globally. This applies to `DELETE` or `PUT` of
    new or overwritten objects.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Secure:** Google Cloud Storage is highly secure and has Google grade security
    to protect your most critical documents, media, and assets. It also provides different
    Access Control options so that you can control who has access to storage objects
    and at what level.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Easy to Use:** Google Cloud Storage provides simple and easy-to-use APIs
    and utility tools to work with object storage.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We need to understand a few basic concepts of Google Cloud Storage to use it
    effectively. So, let''s look at them here:'
  prefs: []
  type: TYPE_NORMAL
- en: Key concepts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: All data in Cloud Storage belongs to a project. A project consists of APIs,
    a set of users, and security and monitoring settings. You can create as many projects
    as you want. Inside projects, we have data containers called Buckets, which hold
    our uploaded data as objects. An object is nothing but a file and optionally,
    some metadata that describes that file.
  prefs: []
  type: TYPE_NORMAL
- en: Buckets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Buckets are containers that hold your data. They are like directories in the
    computer file system and are basic containers where you put your data. The only
    difference is that you can't nest the buckets, unlike directories. Everything
    that you put in Cloud Storage must be inside a bucket. Buckets allow you to organize
    your data and also allow you to control access permissions to your data. When
    designing your application, you should plan fewer buckets and more objects in
    most cases due to some imposed rate limits of bucket creation and deletion. It
    is approximately 1 operation every 2 seconds per project.
  prefs: []
  type: TYPE_NORMAL
- en: 'You need to specify three things when you create a bucket: a globally unique
    name, a default storage class, and a geographic location where the bucket and
    its contents are stored. The default storage class you choose applies to the objects
    inside that bucket if you don''t specify an object class explicitly while storing
    the objects.'
  prefs: []
  type: TYPE_NORMAL
- en: Once the bucket is created, you can't change the name of the bucket and its
    location, unless you delete and recreate it. However, you can change its default
    storage class to any other class available in the bucket's location.
  prefs: []
  type: TYPE_NORMAL
- en: Bucket names should be globally unique and can be used with CNAME redirect.
  prefs: []
  type: TYPE_NORMAL
- en: 'Your bucket names must meet the following requirements:'
  prefs: []
  type: TYPE_NORMAL
- en: 'It must contain only lowercase letters, numbers, and special characters: dashes
    (-), underscores (_), and dots (.). Names containing dots require verification.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It must start and end with a number or letter.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It must be 3 to 63 characters long. Names containing dots can be 222 characters
    long, but each dot-separated component must not be longer than 63 characters.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It must not represent an IP address, such as `192.168.1.1`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It cannot begin with the "goog" prefix and cannot contain google or misspellings
    of google.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Apart from names, you can also associate key-value metadata pairs called bucket
    labels to your buckets. Bucket labels allow you to group your buckets with other
    Google Cloud Platform services, such as Virtual Machine Instances and Persistent
    Disks. You can have a maximum of 64 buckets labels per bucket.
  prefs: []
  type: TYPE_NORMAL
- en: Objects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Objects are the basic entities that you store in Cloud Storage. You can store
    an infinite number of objects in a bucket, so essentially, there is no limit.
  prefs: []
  type: TYPE_NORMAL
- en: Objects consist of *object data* and object metadata. Object data is typically
    a file and is opaque (a chunk of data) to Cloud storage. Object metadata is a
    set of key-value pairs that describe the object.
  prefs: []
  type: TYPE_NORMAL
- en: An object name should be unique in a bucket; however, different buckets can
    have objects with the same name. An object's name is a piece of object metadata
    in Cloud Storage. Object names can contain any combination of Unicode characters
    (UTF-8 encoded) and must be less than 1024 bytes in length.
  prefs: []
  type: TYPE_NORMAL
- en: 'Your object names must meet the following requirements:'
  prefs: []
  type: TYPE_NORMAL
- en: Object names must not contain Carriage Return or Line Feed characters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Object names must not start with well-known/acme-challenge
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can include a common character slash (/) in your object names if you want
    to make it appear as though they are stored in a hierarchical structure, for example,
    /team.
  prefs: []
  type: TYPE_NORMAL
- en: A common character to include in object names is a slash (/). By using slashes,
    you can make objects appear as though they're stored in a hierarchical structure.
    For example, you can name one object `/team/alpha/report1.jpg` and another `object/team/alpha/report2.jpg`.
    They appear to be in a hierarchical directory structure based on the team when
    you list these objects; however, for Cloud Storage, objects are individual pieces
    of data and not a hierarchical structure.
  prefs: []
  type: TYPE_NORMAL
- en: Apart from the name, each object has an associated number called **Generation
    Number**. Whenever your object gets overwritten, its generation number changes.
    Cloud storage also supports a feature called Object Versioning that allows you
    to refer to the overwritten or deleted objects. Once you have object versioning
    enabled for a bucket, it creates an archived version of the object that is overwritten
    or deleted and associates a unique generation number to uniquely identify an object.
  prefs: []
  type: TYPE_NORMAL
- en: Resources
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Any entity within Google Cloud Platform is a resource. Whether it is a project
    or a bucket or an object, in Google Cloud Platform, it is a resource.
  prefs: []
  type: TYPE_NORMAL
- en: Each resource has an associated unique name that identifies it. Each bucket
    has a resource name in the form of `projects/_/buckets/`[BUCKET_NAME], where [BUCKET_NAME] is
    the ID of the bucket. Each object has a resource name in the form of `projects/_/buckets/`[BUCKET_NAME]`/objects/`[OBJECT_NAME],
    where [OBJECT_NAME] is the ID of the object.
  prefs: []
  type: TYPE_NORMAL
- en: 'A #[NUMBER] can also be appended to the end of the resource name that indicates
    a specific generation of the object; #0 is a special identifier to represent the
    latest version of an object. When the name of the object ends in a string that
    would otherwise be interpreted as a generation number, #0 can be useful.'
  prefs: []
  type: TYPE_NORMAL
- en: Object immutability
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In Cloud Storage, when an object is uploaded, you cannot change it throughout
    its lifetime. The time between successful object upload and successful object
    delete is an object's lifetime. This essentially means that you cannot modify
    an existing object by appending some data to it or by truncating some data from
    it. However, you can overwrite the objects in Cloud storage. Note that the older
    version of the document will be accessible to the users until successful upload
    of the new version of the document.
  prefs: []
  type: TYPE_NORMAL
- en: A single particular object can only be updated or overwritten up to once per
    second.
  prefs: []
  type: TYPE_NORMAL
- en: So, now that we are aware of the basics of Cloud Storage, let's explore the
    Storage classes available in Cloud Storage.
  prefs: []
  type: TYPE_NORMAL
- en: Storage classes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Google Cloud Storage supports a range of storage classes based on different
    use cases. These include Multi Regional and Regional Storage for frequently accessed
    data, Nearline Storage for less frequently access data, such as data you use not
    more than once a month, and Coldline storage for infrequently accessed data, such
    as data you use very rarely, like once a year.
  prefs: []
  type: TYPE_NORMAL
- en: Let's go through them one by one.
  prefs: []
  type: TYPE_NORMAL
- en: Multi regional storage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Multi regional storage is a Geo-redundant storage; it stores your data at multiple
    Geo locations or data centers across the globe. It stores your data in at least
    two geographic locations separated by at least 100 miles within the multiregional
    location of the bucket. It is ideal for low latency high availability application
    where your application serves the content, such as live streaming of videos, audios,
    or gaming content, to the users across the globe.  Due to data redundancy, it
    provides high availability. It costs slightly more as compared to other storage
    classes.
  prefs: []
  type: TYPE_NORMAL
- en: It ensures **99.95% availability SLA^***. As your data is saved at multiple
    places, even in case of natural disasters or any other disruptions, it provides
    high availability.
  prefs: []
  type: TYPE_NORMAL
- en: The data stored as Multi regional storage can be placed only in multiregional
    locations, such as the United States, the European Union, or Asia, not specific
    regional locations such as us-central1 or asia-east1.
  prefs: []
  type: TYPE_NORMAL
- en: Regional storage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Regional storage stores data in a specific regional location, instead of having
    redundancy distributed over different geo-locations. It is cheaper as compared
    to Multi regional storage and ensures **99.9% availability SLA^***.
  prefs: []
  type: TYPE_NORMAL
- en: Regional storage is better suited for storing data in the same regional location
    of your server instances that use that data. It gives you better performance and
    in addition, it can reduce network charges.
  prefs: []
  type: TYPE_NORMAL
- en: Nearline storage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are chances that at some point in time, applications or enterprises use
    only some of the data frequently out of all the collected data. In that case,
    Multi regional or Regional storage will not be an ideal choice and will be an
    expensive option. Cloud storage provides another storage class called Nearline
    storage that can solve the earlier issue. It is a low-cost, storage service for
    storing less frequently accessed data. Nearline Storage is a better choice than
    Multi-Regional Storage or Regional Storage in scenarios where slightly lower availability
    is required. For example, you do some analytics once a month on the data collected
    throughout the month. It ensures **99.0% availability SLA^*.**
  prefs: []
  type: TYPE_NORMAL
- en: Nearline Storage is also better suited for data backup, disaster recovery, and
    archival storage. Note, however, that for data accessed less frequently than once
    a year, Coldline Storage is the most cost-effective choice, as it offers the lowest
    storage costs.
  prefs: []
  type: TYPE_NORMAL
- en: Coldline storage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Coldline storage is a very-low-cost, highly-durable storage service for data
    archiving and disaster recovery. Though it is like a "cold storage", it provides
    low latency access to your data. It is the best choice for data that you need
    once or twice a year. You can also store your daily backups and archived files
    to Coldline, as you don't need them on regular basis and will need them only in
    case of disaster recovery. It ensures **99.0% availability SLA *.**
  prefs: []
  type: TYPE_NORMAL
- en: Standard storage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When users don't specify the default storage class while creating a bucket,
    it will be considered as a Standard storage object. Objects created without a
    storage class in such a bucket are also listed as Standard Storage. If the bucket
    is located in a multiregional location, Standard storage is equivalent to Multi-Regional
    Storage and when the bucket is in a regional storage, it is considered to be in
    Regional storage.
  prefs: []
  type: TYPE_NORMAL
- en: Note that pricing will also happen accordingly. If it is equivalent to Multi
    regional storage, charges of Multi Regional storage will apply.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we know about the different storage classes, let's understand the Life
    Cycle Management of an object in Cloud Storage.
  prefs: []
  type: TYPE_NORMAL
- en: Life Cycle Management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Many applications require the functionality to delete or archive the older
    resources after a certain amount of time. The following are some example use cases:'
  prefs: []
  type: TYPE_NORMAL
- en: Move files older than 1 year from Multi Regional Storage to Coldline Storage.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Delete files older than 5 years from Coldline storage.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Keep only a few recent object versions if you have Object Versioning.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Luckily, Google Cloud Storage provides a functionality called Object Life Cycle
    Management to handle this type of operations automatically based on the configurations.
    The configurations are set of rules that apply to bucket where you have enabled
    this feature.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, the following rule specifies that it delete the files older than
    365 days:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: APIs and tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Google Cloud Platform provides SDKs for Cloud storage and also a number of
    other products for a different platform such as Node.js, Java, Python, Ruby, PHP,
    and go. It provides REST APIs if you are not using any client library. It also
    provides a command-line tool called **gsutil** that allows you to perform object
    management tasks, including the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Upload, download, and delete objects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: List buckets and objects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Move, Copy, and rename objects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Edit object and bucket ACLs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Access control
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are a number of options available for access management of your buckets
    and objects. Let''s see a summary:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Identity and Access Management** (**IAM**) permissions: Gives broad level
    control for your projects and buckets. It is useful to grant access to buckets
    and allow bulk operations on objects within a bucket.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Access Control Lists** (**ACLs**): Gives you fine-grained control to grant
    read or write access to users to individual buckets or objects.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Signed URLs (query string authentication): Grant read or write access to an
    object for a limited time period through a Signed URL.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'S**igned Policy Documents**: Allows you to define rules and perform validations
    for what objects can be uploaded in a bucket, for example, restrict based on file
    size or content-type.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Firebase Security Rules**: Provides granular and attribute-based rule language
    to provide access to mobile apps and web apps using the Firebase SDKs for Cloud
    Storage.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that we are familiar with the key concepts of Google Cloud Storage, let's
    come back to Cloud Storage for Firebase.
  prefs: []
  type: TYPE_NORMAL
- en: Key features of Cloud Storage for Firebase
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Cloud Storage for Firebase inherits advantages or features from Google Cloud
    Storage. However, it has some additional features, such as declarative security
    rule language, to specify security rules.
  prefs: []
  type: TYPE_NORMAL
- en: 'The key features of Cloud Storage are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Ease of use and Robustness**: Cloud storage for Firebase is a simple and
    powerful solution to store and retrieve the user-generated content such as documents,
    photos, audio, or videos. It provides robust upload and download capabilities
    so that file transfers get paused when internet connectivity drops and resume
    from where they were left when it is connected again. It saves time as well as
    your internet bandwidth. The API for Cloud storage is also easy and can be used
    through the use of Firebase SDK.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Powerful Security: **When it comes to storage in the cloud, the first thing
    we think about is the security. Is it secure enough? What will happen to my documents?
    Such questions are obvious and important also. The answer to that is yes, Cloud
    storage for Firebase is very much secure. It has the power of Google security.
    It is integrated with Firebase authentication to provide intuitive authentication
    for developers. You can also use declarative security rules to restrict access
    to the files based on the content type, name, or some other attributes.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**High Scalability:** Cloud storage for Firebase is backed by Google infrastructure,
    which provides a highly scalable storage environment so that you can easily scale
    your applications from prototypes to productions. This infrastructure already
    backs the most popular and high traffic applications, such as Youtube, Google
    photos, and Spotify.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Cost effective: **Cloud storage is a cost-effective solution where you just
    pay for what you use. You don''t need to purchase and maintain a server for hosting
    files.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Integrates well with other Firebase products:** Cloud storage integrates
    well with other Firebase products, for example, in our last chapter, we have seen
    that Cloud storage triggers can trigger the Cloud functions that can execute some
    logic based on the file operation on Cloud storage.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We have seen the key features and advantages of Cloud Storage for Firebase.
    Let's see how it actually works.
  prefs: []
  type: TYPE_NORMAL
- en: How does it work?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Firebase SDKs for Cloud Storage can be used to upload and download files directly
    from clients. The client is able to retry to resume the operation right where
    it left off, saving your user's time and bandwidth.
  prefs: []
  type: TYPE_NORMAL
- en: Under the hood, Cloud Storage stores your files in a Google Cloud Storage bucket
    and hence makes them accessible through both Firebase and Google Cloud. This gives
    you the flexibility to upload and download files from mobile clients via the Firebase
    SDKs, and do server-side processing, such as image thumbnail generation or video
    transcoding using Google Cloud Platform. As we have seen that Cloud Storage scales
    automatically, it can handle all types of application data, small to medium to
    large applications.
  prefs: []
  type: TYPE_NORMAL
- en: On the security front, the Firebase SDKs for Cloud Storage integrate seamlessly
    with Firebase Authentication to identify users. As we saw in [Chapter 6](3baeaa17-4005-4696-a5e3-e4dfc4986700.xhtml),
    *Firebase Security and Rules*, Firebase also provides declarative rule language that
    lets you control access to individual files or groups of files.
  prefs: []
  type: TYPE_NORMAL
- en: Let's enhance our Helpdesk application where the user can upload their profile
    picture.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the Cloud Storage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With Firebase SDK, we can easily integrate and set up Cloud Storage for Firebase
    in our application.
  prefs: []
  type: TYPE_NORMAL
- en: 'To set up Cloud Storage, you will need the URL of the Storage bucket, which
    you can get from our Firebase Console. You can get it from the `Files` tab of
    `Storage` menu, as illustrated:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/c614fd16-cc49-4962-81d6-0fc10c6b72b8.png)'
  prefs: []
  type: TYPE_IMG
- en: Once you get it, you can add it to your Firebase config.
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider this example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Now we are ready to use Cloud storage. Now we need to create a reference, which
    can be used to navigate through the file hierarchy.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can get a reference by calling a `ref()` method, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also create a reference to a specific lower node in a tree. For example,
    to get a reference to `images/homepage.png`, we can write something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also navigate to upper or lower level in a file hierarchy:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Three properties—**fullPath**, **name**, and **bucket**—are available with
    references to better understand the files that references are a point to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Now we are ready for the upload functionality. We will extend our HelpDesk application
    and give the user a functionality to upload the screenshot along with other details
    of the ticket. We will store the uploaded picture in Cloud storage for Firebase
    and retrieve it from there only.
  prefs: []
  type: TYPE_NORMAL
- en: Upload Files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can upload File or Blob types, a Uint8Array or base64 encoded strings to
    upload files to Cloud Storage. For our example, we will use File type. As mentioned
    earlier, first we need to get a reference to the full path of the file, including
    the filename.
  prefs: []
  type: TYPE_NORMAL
- en: We will modify the `AddTicketForm.jsx` file to allow the user to upload a screenshot
    or an image related to the ticket.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `src/add-ticket/''AddTicketForm.jsx''`file now looks like the following.
    The changes are highlighted in bold with comments:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s understand the preceding code:'
  prefs: []
  type: TYPE_NORMAL
- en: Add a snapshot property in the state.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`OnChange()` - register the `onChange()` event for the file to set it in snapshot
    field in the state.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`onHandleSubmit()` - We have created a reference to the file to store it in
    a folder called `''ticket_snapshots''` in Firebase Cloud storage. Once the file
    is uploaded successfully, we will get a download URL from response metadata, which
    we are storing in our realtime database along with other ticket details.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You will also do some HTML changes in the `render()` method to add input field
    for file selection:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Our add-ticket form looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/9ba63b07-30eb-4922-a971-0c9cd9981db7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You can then check your Firebase console to see whether file uploading is working
    or not. The following screenshot shows that the file (`helpdesk-db.png`) we have
    uploaded is saved successfully in Cloud Storage for Firebase:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/e5bc6f40-a481-4337-9395-563dd1a977bd.png)'
  prefs: []
  type: TYPE_IMG
- en: As mentioned earlier, Cloud storage for Firebase is highly integrated with Google
    Cloud Storage and uses a bucket of Google Cloud Storage to store the files. You
    can log in to your console of Google Cloud Platform at [https://console.cloud.google.com/storage](https://console.cloud.google.com/storage)
    and check under the storage section. You should see all your uploaded files there
    also.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next screenshot shows that the files can be viewed from Google Cloud Platform
    console:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/bd9d81f6-eae8-40fb-aba8-e85c0049e973.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, you can check your database also to see whether the ticket that has been
    created has snapshot URL property and corresponding value—downloadURL of the file.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot of the database shows that the snapshot URL is getting
    stored correctly:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/56f4ed56-165e-4da7-8b64-6c5324fc9125.png)'
  prefs: []
  type: TYPE_IMG
- en: Yay! The Cloud Storage is integrated with our application. However, we are not
    done yet. We will need to allow the user to see the uploaded images, so we will
    implement a download file functionality too. However, before we move to download
    file function, I would like to mention that you should update the security rules
    for Cloud Storage to control access to your files. As per default rules, Firebase
    Authentication is required in order to perform any `.read` and `.write` operations
    on all files.
  prefs: []
  type: TYPE_NORMAL
- en: 'The default rules look like the following image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/6fbfacaa-6461-4a1d-9bbd-885484366869.png)'
  prefs: []
  type: TYPE_IMG
- en: However, you should update them as per your requirement.
  prefs: []
  type: TYPE_NORMAL
- en: Adding file metadata
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you upload a file, you can also store some metadata for that file, such
    as Content-Type or name.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can create a JSON object with key: value pairs and pass that object when
    you upload the file. For custom metadata, you can create an object inside the
    metadata object, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Managing uploads and error handling
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Cloud Storage allows you to manage the file uploads; you can resume, pause,
    or cancel the upload. The corresponding methods are available on `UploadTask`,
    which is returned by the `put()` or `putString()` methods that can be used as
    a promise or use to manage and monitor the status of the upload:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'You can use the ''state_change'' observer to listen to the progress events.
    It is very useful if you want to show some real-time progress bar for your file
    uploading:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Event Type** | **Usage** |'
  prefs: []
  type: TYPE_TB
- en: '| running | When the task starts or resumes uploading, this event gets fired.
    |'
  prefs: []
  type: TYPE_TB
- en: '| progress | When any data is uploaded to Cloud Storage, this event gets fired.
    Useful to show progress bar for upload. |'
  prefs: []
  type: TYPE_TB
- en: '| pause | When the upload is paused, this event gets fired. |'
  prefs: []
  type: TYPE_TB
- en: When an event occurs, a **TaskSnapshot **object will be passed back, which can
    be used to view the task at the time of event occurrence.
  prefs: []
  type: TYPE_NORMAL
- en: 'The object is passed back. It contains the following properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Property | Type | Description |'
  prefs: []
  type: TYPE_TB
- en: '| bytes transferred | `Number` | Total number of bytes that have been transferred
    when the snapshot was taken. |'
  prefs: []
  type: TYPE_TB
- en: '| totalBytes | `Number` | Total number of bytes to be uploaded. |'
  prefs: []
  type: TYPE_TB
- en: '| state | `firebase.storage.TaskState` | Current upload state |'
  prefs: []
  type: TYPE_TB
- en: '| metadata | `firebaseStorage.Metadata` | Contains metadata sent by server
    on completion of upload; until then, contains the metadata sent to the server.
    |'
  prefs: []
  type: TYPE_TB
- en: '| task | `firebaseStorage.UploadTask` | Can be used to pause, cancel, or resume
    the task. |'
  prefs: []
  type: TYPE_TB
- en: '| ref | `firebaseStorage.Reference` | The reference this task came from. |'
  prefs: []
  type: TYPE_TB
- en: When you upload a file, there are chances that some error occurs. You can handle
    the error using the error object you get in callback.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code snippet shows example code to manage the file upload and
    error handling:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Now, let's move to the download file section.
  prefs: []
  type: TYPE_NORMAL
- en: Downloading files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To download a file, you will need to get a reference to that file using either
    `https:// or gs://` URL of the file, or you can construct it by appending child
    paths to the storage root.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next code snippet shows these methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'We will extend our HelpDesk application to allow the user to view the snapshot
    for a ticket if uploaded any. You will need to update code in the `ViewTickets.jsx`
    file under the `ticket-listing` folder. We already get a URL from our database,
    so we don''t need to get a reference to get the download URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Like for file upload, you need to handle errors for download in a similar manner
    as well.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's see how we can delete files from Cloud Storage.
  prefs: []
  type: TYPE_NORMAL
- en: Deleting files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To delete a file, you first need to get a reference to the file, the same as
    we saw in upload and download. Once you get a reference, you can call a `delete()`
    method on it to delete a file. It returns a promise that either resolves in case
    of success or rejects in case of an error.
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider this example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Now, let's see what is Google App Engine.
  prefs: []
  type: TYPE_NORMAL
- en: Google App Engine
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Google App Engine is a "Platform as a Service" that abstracts away the infrastructure
    worries and lets you focus only on code. It provides an automatically scalable
    platform that scales based on the amount of traffic it receives. You just need
    to upload your code, and it will automatically manage the availability of your
    app. Google App Engine is an easy and fast way to add additional processing power
    or trusted execution to your Firebase application.
  prefs: []
  type: TYPE_NORMAL
- en: If you have an App Engine application, you can use the built-in App Engine APIs
    to share data between Firebase and App Engine, since the Firebase SDKs for Cloud
    Storage use the Google App Engine default bucket. This is useful for performing
    computation intensive background processing or image operations, such as creating
    a thumbnail of uploaded image.
  prefs: []
  type: TYPE_NORMAL
- en: The Google App Engine standard environment provides an environment where your
    application runs in a sandbox, using the runtime environment of a supported language
    viz, Python 2.7, Java 8, Java 7, PHP 5.5, and Go 1.8, 1.6\. If you have application
    code that needs some other version of these languages or needs some another language,
    you can use the Google App Engine flexible environment where your application
    runs on docker containers, which run on Google Cloud Virtual machines.
  prefs: []
  type: TYPE_NORMAL
- en: There are many differences between these two environments, which can be explored
    in the Google Cloud documentation at [https://cloud.google.com/appengine/docs/the-appengine-environments](https://cloud.google.com/appengine/docs/the-appengine-environments).
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to import an existing Google Cloud Platform project into Firebase
    and want to make available any existing App Engine objects, you''ll need to set
    the default access control on your objects to allow Firebase to access them by
    running the following command using `gsutil`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Firebase hosting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Firebase hosting provides a secure and easy way to host your static website
    and resources on CDN. The key features of Hosting are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Served over a secure connection**: Content is always delivered securely over
    SSL'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Faster Content Delivery: Files are cached at CDN edges around the globe, so
    there''s faster content delivery.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Faster Deployment: You can deploy your app using Firebase CLI within a few
    seconds'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Easy and Fast rollback: In case of any mistake, roll back with a single command'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Hosting provides all the necessary infrastructure, features, and tooling tailored
    to deploying and managing static websites, whether it is a single page app or
    a complex progressive app.
  prefs: []
  type: TYPE_NORMAL
- en: Your site will be hosted on a subdomain on the [firebaseapp.com](http://firebaseapp.com)
    domain by default. Using the Firebase CLI, you can deploy files from local directories
    on your computer to your Hosting server.
  prefs: []
  type: TYPE_NORMAL
- en: When you move your site to production, you can connect your own domain name
    to Firebase Hosting.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying your site
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You will need to install the Firebase CLI to deploy your static web app.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Firebase CLI can be installed with a single command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s deploy our HelpDesk application on cloud. We have two projects
    for HelpDesk: react app (a project called code) and server app (a project called
    node). Let''s first host or deploy our client-side react app on Firebase Hosting.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Go inside your project directory (code) and run the following command to initialize
    the configurations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'As shown in the following screenshot, it will ask you "which Firebase feature
    do you want to set up for this folder?," and you need to select ''Hosting'':'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/5e9c4046-1632-42c6-8ed2-bb6a9d80a672.png)'
  prefs: []
  type: TYPE_IMG
- en: 'It will create a `firebase.json` file in the root directory of your project.
    The structure of the `firebase.json` will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: The public property tells Firebase which directory is to be uploaded to hosting.
    The directory must exist in your project directory.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can now deploy your site using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'It will ask you to do Firebase CLI login. You can do it using the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'After a successful login, you can run the `firebase deploy` command again to
    deploy your app:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/1a036823-cfec-46b2-99da-c2f952d67116.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After successful deployment, you will a Hosting URL of your project, which
    is like `https://YOUR-FIREBASE-APP>.firebaseapp.com`. In our case, it is *[https://demoproject-7cc0d.firebaseapp.com/](https://demoproject-7cc0d.firebaseapp.com/). 60. *Now
    you can go and hit the generated URL and confirm that it is accessible:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/ae4a3a72-2561-4adb-a3a2-78b4f3d0d585.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Yay! We have deployed our first app on Firebase Hosting. You can also check
    the URL in your Firebase console under Hosting section:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/1f6101cd-a142-4dcd-b7af-62700798d521.png)'
  prefs: []
  type: TYPE_IMG
- en: You can also configure your custom domain by clicking on the **Connect Domain **button.
    It will guide you through a wizard to configure your own domain.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter introduced the Google Cloud Platform. It gave you a basic understanding
    of Google Cloud Storage and Google App Engine and how we can integrate Cloud storage
    for Firebase with Google Cloud Storage. We explored Cloud Storage for Firebase
    and saw how you can upload, download, and delete files to Cloud Storage. We also
    extended the HelpDesk application to allow the user to upload a screenshot along
    with the ticket details and also view/download the uploaded image. In addition,
    we explored how we can deploy our app on Firebase Hosting.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will talk about coding standards and best practices
    that developers should follow while working with React and Firebase to have better
    application performance, reduced number of bugs, and also for easily manageable
    application code.
  prefs: []
  type: TYPE_NORMAL
