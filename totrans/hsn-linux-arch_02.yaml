- en: Introduction to Design Methodology
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: These days, IT solutions require increased performance and data availability,
    and designing a robust implementation that meets these requirements is a challenge
    that many IT experts have to go through every day.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you will learn the basics, from a bird's-eye view of architecting
    IT solutions in any type of environment, to virtualized infrastructure, bare metal,
    and even the public cloud, as basic concepts of solution design apply to any environment.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: 'You will explore the following subjects:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: Defining the stages of solution design and why they matter
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Analyzing the problem and asking the right questions
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Considering possible solutions
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing the solution
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fully understanding the aspects that you need to consider when architecting
    a solution is crucial for the success of the project, as this will determine which
    software, hardware, and configuration will help you achieve the desired state
    that meets the needs of your customers.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: Defining the stages of solution design and why they matter
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Like many things, designing solutions is a step-by-step process that not only
    involves: technical aspects, nor necessarily technical parties. Usually, you will
    be engaged by an account manager, project manager, or, if you are lucky, a CTO,
    who understands the technical part of the requirements. They are looking for an
    expert who can help them deliver a solution to a customer. These requests usually
    do not contain all the information you will need to deliver your solution, but
    it''s a start to understand what your goal is.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: For example, imagine that you receive an email from a project manager with the
    following statement.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: We require a solution that can sustain at least 10,000 website hits and will
    stay available during updates as well as survive outages. Our budget is considerably
    low, so we need to spend as little as possible, with little to no upfront cost.
    We're also expecting this to gain momentum during the project's life cycle.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: 'From the previous statement, you can only get a general idea of what is required,
    but no specifics have been given. So, you only know basic information: we require
    a solution that can sustain at least 10,000 website hits, which, for a design,
    is not good enough, as you require as much information as possible to be able
    to resolve the problems exposed by your customer. This is where you have to ask
    for as many details as possible to be able to provide an accurate set of proposals
    for your customer, which will be the first impression your customer will have
    of the project. This part is critical, as it will help you understand whether
    you understand your customer''s vision.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: It is also important to understand that you need to deliver several different
    solutions for the customer, as the customer is the one who decides which one fits
    their business needs the most. Remember that each solution has its own advantages
    and disadvantages. After the customer decides which way to go, you will have what
    is necessary to move on to the implementation of your proposal, which can always
    trigger more challenges. It will require, more often than not, some final customized
    tuning or changes that were not considered in the initial **Proof of Concept**
    (**POC**).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: 'From our previous analysis, you can see four well-defined stages of the process
    that you need to follow in order to reach the final delivery illustrated in the
    following diagram:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/10f5e07b-3251-4c6b-9cb7-a1133da3cc73.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
- en: There are many more stages and design methodologies that we could cover, but
    since they're not in the scope of this book, we will be focusing on these four
    general stages to help you understand the process in which you will be architecting
    your solutions.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: Analyzing the problem and asking the right questions
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'After getting the initial premise, you need to break it into smaller pieces
    in order to understand what is required. Each piece will raise different questions
    that you will ask your customers later. These questions will help fill in the
    gaps for your POC, ensuring that your questions cover all business needs from
    all view standpoints: the business standpoint, the functional standpoint, and,
    finally, the technical standpoint. One good way to keep track of the questions
    that arise and which business need they will be resolving is to have a checklist
    that asks which standpoint the question is being asked from and what is resolved
    or answered.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: It is also important to note that, as questions become answers, they can also
    come with constraints or other obstacles that will also need to be addressed and
    mentioned during the POC stage. The customer will have to agree with them and
    will be decisive when selecting the final solution.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: From our previous example, you can analyze the premise by dissecting it into
    standpoints.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: We require a solution that can sustain at least 10,000 website hits and will
    stay available during updates as well as survive outages. Our budget is considerably
    low, so we need to spend as little as possible, with little to no upfront cost.
    We're also expecting this to gain momentum during the project's life cycle.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: Technical standpoint
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: From this perspective, we will analyze all technical aspects of the premise
    – anything that you will need to provide the initial technical requirements of
    your solution.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: 'We will analyze it in the following way:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: You can understand, from the premise, that your customer needs some kind of
    solution that can sustain some amount of website hits, but you can't be certain
    if the web server is already set up, and whether the customer only needs a load
    balancing solution. Alternatively, maybe the customer needs both, a web server,
    that is NGINX, Apache, or something of that sort, and the load balancing solution.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The customer mentions at least 10,000 hits to their website, but they didn't
    mention if these hits are concurrent per second, daily, weekly, or even monthly.
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can also see that they need to stay available during updates and be able
    to continue serving their website if the company has an outage, but all these
    statements are very general, since availability is measured in 9s. The more 9s
    you have, the better (in reality, this is a percentage measurement of the amount
    of time during the year; a 99% availability means that there can only be 526 minutes
    of downtime per year). Outages are also very hard to predict, and it's almost
    impossible to be able to say that you will never have an outage, therefore, you
    need to plan for it. You have to have a **Recovery point objective** (**RPO**)
    and a **Recovery time objective** (**RTO**) for your solution in case of a disaster.
    The customer didn't mention this, and it is crucial to understand how much time
    a business can sustain an outage.
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When it comes to budget, this is usually from a business perspective, but the
    technical aspects are affected directly by it. It looks like the budget in the
    project is tight, and the customer wants to spend as little as possible on their
    solution, but they're not mentioning exact numbers, which you will require in
    order to fit your proposals to it. Little to no upfront cost? What does this mean?
    Are we repurposing the existing resources and building a new solution? How can
    we implement a design with no upfront cost? One way to overcome low budgets, or
    no upfront costs, at least in software, is to utilize **open source software**
    (**OSS**), but this is something that we need to ask the customer.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Gaining momentum can only mean that they are predicting that their userbase
    will grow eventually, but you need an estimate of how much they predict this will
    grow and how fast, as this will imply that you have to leave the solution ready
    to be scaled vertically or horizontally. Vertically, by leaving space to increase
    the resources eventually and take into account the business's procurement process
    if you need to buy more resources such RAM, CPU, or storage. Horizontally will
    also involve a procurement process and a considerable amount of time to integrate
    a new node/server/VM/container into the solution. None of these are included in
    the premise, and it's vital information.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here, we have a comparison of horizontal and vertical scaling. Horizontal scaling
    adds more nodes, while vertical scaling adds more resources to the existing nodes:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7e6d22ed-5063-482e-b90c-c8e875117258.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
- en: 'The following is a list of example questions that you could ask to clarify
    the gray areas:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: Is this solution for a new/existing website or web server?
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When you say 10,000 hits, are these concurrent per second or is it daily/weekly/monthly?
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Do you have any estimates or current data of how large your userbase is?
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Considering that the budget is low, can we use OSS?
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Do you have the technical resources to support the solution in case we use OSS?
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Do you have any sort of update infrastructure in place, or version control software
    implemented already?
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When you say little to no upfront cost, does this mean that you already have
    hardware, resources, or infrastructures (virtual or cloud) available that we could
    recycle and/or reuse for our new solution?
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Are there any disaster recovery sites in place that we could use to provide
    high availability?
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If your userbase grows, will this generate more storage requirements or only
    compute resources?
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Do you plan on performing any backups? What is your backup scheme?
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: From the technical perspective, once you start designing your POCs more questions
    will arise based on the software or hardware that will be used in the solution.
    You will need to know how they fit or what is needed for them to adjust to the
    customer's existing infrastructure, if any.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: Business standpoint
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here, we will be analyzing the statement from a business perspective, taking
    into account all the aspects that can affect our design:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: A main requirement is performance, as this affects how many hits the solution
    can sustain. Since this is one of the main objectives of the solution, it needs
    to be sized to meet business expectations.
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Budget seems to be the main constraint that will affect the project's design
    and scope.
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There is no mention of the actual available budget.
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Availability requirements affect how the business should react in case of an
    outage. As there's no specific **service level agreement** (**SLA**), this needs
    to be clarified to adjust to the business needs.
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A main concern is the upfront cost. This can be lowered considerably by utilizing
    OSS, as there are no licensing fees.
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It has been mentioned that the solution needs to remain up during maintenance
    operations. This might indicate that the customer is willing to invest in maintenance
    operation for further upgrades or enhancements.
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The statement—we're also expecting this to gain momentum, indicates that the
    solution will change in the amount of resources needed, thus directly affecting
    the amount of money consumed by it.
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following are questions to ask when clarifying doubts from a business standpoint:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: Based on the performance requirements, what is the business impact when performance
    goes below the expected baseline?
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is the actual budget for the project?
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Does the budget take into account maintenance operations?
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Considering the possible unplanned outages and maintenance, how much time exactly
    can your website be down per year? Will this affect business continuity?
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If an outage happens, how much time can the application tolerate not receiving
    data?
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Do we have data of any sort from which we can estimate how much your userbase
    will grow?
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Do you have any procurement process in place?
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How much time does it take to approve the acquisition of new hardware or resources?
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Functional standpoint
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the functional standpoint, you will be reviewing the functional side of
    the solution:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: You know that the customer requires 10,000 hits, but what types of user will
    be using this website?
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can see that it requires 10,000 hits, but the premise does not specify what
    the user will be doing with it.
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The premise states that they need the solution to be available during updates.
    By this, we assume that the application will be updated, but how?
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To clarify the gaps in the functional standpoint, we can ask for the following
    information:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: What type of users will be using your application?
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What will your users be doing in your website?
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How often will this application be updated or maintained?
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Who will be maintaining and supporting this solution?
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Will this website be for internal company users or external users?
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is important to note that functional standpoint overlaps considerably with
    the business standpoint, as they are both trying to address similar problems.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: Once we have gathered all the information, you can build a document summarizing
    the requirements of your solution; ensure that you go through it with the customer
    and that they agree to what is required to consider this solution complete.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: Considering possible solutions
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once all the doubts that arose during the initial premise have been cleared,
    you can move on and construct a more elaborate and specific statement that includes
    all the information gathered. We will continue working with our previous statement
    and, assuming that our customer responded to all of our previous questions, we
    can construct a more detailed statement, as follows.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: We require a new web server for our financial application that can sustain at
    least 10,000 web hits per second from approximately 2,000 users, alongside another
    three applications that will consume its data. It will be capable of withstanding
    maintenance and outages through the use of high-availability implementations with
    a minimum of four nodes. The budget for the project will be $20,000 for the initial
    implementation, and the project will utilize OSS, which will lower upfront costs.
    The solution will be deployed in an existing virtual environment, whose support
    will be handled by our internal Linux team, and updates will be conducted internally
    by our own update management solution. The userbase will grow approximately every
    two months, which is within our procurement process, allowing us to acquire new
    resources fairly quickly, without creating extensive periods of resource contention.
    User growth will impact mostly computer resources.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, it is a more complete statement on which you can already start
    working. You know that it will utilize an existing virtual infrastructure. OSS is
    a go, high availability is also required, and it will be updated via an update
    and version control infrastructure that it is already in place, so, possibly,
    only monitoring agents will be needed for your new solution.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: 'A very simplified overview with not many details of the possible design is
    as follows:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/090ba4e5-d8ae-43c6-a618-c79115c2e1e8.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
- en: In the diagram, you can see that it's a web server cluster that provides high
    availability and load balancing to the clients and applications that are consuming
    the solution.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: As you are already utilizing much of the existing infrastructure, there are
    fewer options for possible POC, so this design will be very straightforward. Nonetheless,
    there are certain variables that we can play with to provide our customer with
    several different options. For instance, for the web server we can have one solution
    with Apache and another with NGINX, or a combination of both, with Apache hosting
    the website and NGINX providing load balancing.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: POC
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With a complete statement and several options already defined, we can proceed
    to provide a POC based on one of the possible routes.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: A POC is the process of demonstrating an idea or method, in our case a solution,
    with the aim of verifying a given functionality. Additionally, it provides a broad
    overview of how the solution will behave within an environment, allowing further
    testing to be able to fine-tune for specific workloads and use cases.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: Any POC will have its advantages and disadvantages, but the main focus is for
    customers and architects to explore the different concepts of the solution of
    an actual working environment. It is important to note that you, as an architect,
    have a heavy influence in which POC will be used as a final solution, but the
    customer is the one who chooses which constraints and advantages suit their business
    better.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: With the example of choosing an NGINX as a load balancer to provide high availability
    and performance improvements to Apache web servers hosting the application files,
    we can implement a working solution with scaled-down resources. Instead of deploying
    four nodes for the final solution, we can deploy just two to demonstrate the load-balancing
    features as well as provide a practical demonstration of high availability by
    purposely bringing one of them down.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s a diagram describing the previous example:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5fbbd53f-4037-48bc-81b0-a4b85c51d757.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
- en: This does not require the full four-node cluster that was envisioned during
    the design phase, as we're not testing the full performance of the entire solution.
    For performance or load testing, this can be done by having less concurrent users
    provide a close to actual workload for the application. While having fewer users
    will never provide exact performance numbers for the full implementation, it delivers
    a good baseline with data that can later be extrapolated to provide an approximation
    of what the actual performance will be.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: As an example for performance testing, instead of having 2,000 users load the
    application, we can have a quarter of the userbase and half of the resources.
    This will considerably decrease the amount of resources needed, while providing
    enough data to be able to analyze the performance of the final solution at the
    same time.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: Also, in the information gathering stage, a document that has the different
    POC documented is a good idea, as it can serve as a starting point if the customer
    wants to construct a similar solution in the future.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: Implementing the solution
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once the customer has selected the optimal route based on their business needs,
    we can start constructing our design. At this stage, you will be facing different
    obstacles, as implementing the POC in a development or QA environment might vary
    from production. Things that worked in QA or development may now fail in production,
    and different variables might be in place; all these things only arise at the
    implementation stage, and you need to be aware that, in a worst-case scenario,
    it might mean changing a large amount of the initial design.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: This stage requires hands-on work with the customer and the customer's environment,
    so it is of utmost importance to ensure that the changes you make won't affect
    the current production. Working with the customer is also important, because this
    will familiarize their IT team with the new solution; this way, when the sign-off
    is done, they will be familiar with it and its configuration.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: The creation of an implementation guide is one of the most important parts at
    this stage, since it will document each step and every minor configuration made
    to the solution. It will also help in the future in case an issue appears and
    the support team needs to know how it was configured in order to be able to solve
    the problem.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Designing a solution requires different approaches. This chapter went through
    the basics of the design stages and why each of them matters.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: The first stage goes through analyzing the problem the design aims to solve,
    while at the same time asking the right questions. This will help define the actual
    requirements and narrow the scope to the real business needs. Working with the
    initial problem statement will impose problems further down the road, making this
    stage extremely important, as it will prevent unnecessarily going back and forth.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 第一阶段通过分析设计旨在解决的问题，同时提出正确的问题。这将有助于定义实际需求并将范围缩小到真正的业务需求。与初始问题陈述一起工作将在后续阶段带来问题，使得这个阶段非常重要，因为它将防止不必要地来回移动。
- en: Then, we considered the possible paths or solutions we can take to solve the
    already defined problem. With the right questions asked in the previous stage,
    we should be able to construct several options for the customer to select, and
    can later implement a POC. POCs help both customers and architects understand
    how the solution will behave in an actual working environment. Normally, POCs
    are scaled-down versions of the final solution, making implementation and testing
    more agile.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们考虑了解决已定义问题的可能路径或解决方案。通过在前一阶段提出正确的问题，我们应该能够构建几个选项供客户选择，并且稍后可以实施POC。POC有助于客户和架构师了解解决方案在实际工作环境中的行为。通常，POC是最终解决方案的缩减版本，使实施和测试更加灵活。
- en: Finally, the implementation stage deals with the actual configuration and hands-on
    aspects of the project. Based on the findings during the POC, changes can be made
    to accommodate the specifics of each infrastructure. Documentation delivered through
    this stage will help align parties to ensure that the solution is implemented
    as expected.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，实施阶段涉及项目的实际配置和实际操作方面。根据POC期间的发现，可以进行更改以适应每个基础设施的具体情况。通过这个阶段提供的文档将有助于使各方保持一致，以确保解决方案得到预期的实施。
- en: In the next chapter, we will jump into solving a problem that affects every
    type of implementation, regardless of cloud provider, software, or design, showing
    the necessity of high-performance redundant storage.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将着手解决影响每种实施的问题，无论是云提供商、软件还是设计，展示高性能冗余存储的必要性。
- en: Questions
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What are the stages of a solution design?
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 解决方案设计的阶段是什么？
- en: Why is it important to ask the right questions when designing a solution?
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设计解决方案时提出正确问题为什么重要？
- en: Why should we deliver several design options?
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为什么我们应该提供几种设计选项？
- en: What questions can be asked to obtain information that can help design a better
    solution?
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可以提出哪些问题以获取有助于设计更好解决方案的信息？
- en: What is a POC?
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是POC？
- en: What happens in the implementation stage?
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实施阶段发生了什么？
- en: How does the POC helps with the final implementation?
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: POC如何帮助最终实施？
- en: Further reading
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: In subsequent chapters, we'll go through the process of creating solutions for
    specific problems. As these solutions will be implemented in Linux, we recommend
    reading *Fundamentals of Linux* by *Oliver Pelz* [https://www.packtpub.com/networking-and-servers/fundamentals-linux](https://www.packtpub.com/networking-and-servers/fundamentals-linux)[.](https://www.packtpub.com/networking-and-servers/fundamentals-linux)
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在随后的章节中，我们将介绍为特定问题创建解决方案的过程。由于这些解决方案将在Linux中实施，我们建议阅读*Oliver Pelz*的*Linux基础*
    [https://www.packtpub.com/networking-and-servers/fundamentals-linux](https://www.packtpub.com/networking-and-servers/fundamentals-linux)[.](https://www.packtpub.com/networking-and-servers/fundamentals-linux)
