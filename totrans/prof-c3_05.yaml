- en: Chapter 5. Using Background Images in CSS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Background images are on almost all pages. This chapter will describe how to
    craft an optimal website with images displayed correctly on the wide spectrum
    of modern devices including mobile phones and tablets.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Usage of background images
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to set proper position for background images
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to set the size of a background position
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Images on retina and mobile devices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CSS backgrounds
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: CSS backgrounds are very useful in modern web browsers. When should you use
    a background and when should you use the `img` tag? It's a simple question—every
    image that is an element of content should be inserted into the `img` tag and
    every image that is an element of a layout should be moved to the CSS background.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will try to always use the same image to illustrate how
    each property and value is working. This image will be a bordered circle that
    will definitely show the correct aspect ratio (if it is bad, it will look more
    like ellipsis), and with the border, you can check how the repeating of images
    will work. The width and height of the image are equal to 90 pixels.
  prefs: []
  type: TYPE_NORMAL
- en: '![CSS backgrounds](img/00056.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Repeating of background
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are many options available when working with a background. The first
    is image repeat. The default value is to repeat an image in both the *x* and *y*
    axes. So when you set, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Our SASS example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Compiled CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: For all containers, the border is red so as to allow a better view of the scope
    of the container.
  prefs: []
  type: TYPE_NORMAL
- en: 'HTML:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'This code will bring us the following view:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Repeating of background](img/00057.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'For all containers, the border is red so as to allow a better view of the scope
    of the container. It means that the image is repeated in the background in both
    *x* and *y* axes. Let''s add the following code and check how it will compile
    and what impact on our view we will see:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Compiled CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Another option that we can use and the behavior of `background-repeat`:'
  prefs: []
  type: TYPE_NORMAL
- en: '`- repeat-x`: This will repeat background *x* axis![Repeating of background](img/00058.jpeg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`- repeat-y`: This will repeat background *y* axis![Repeating of background](img/00059.jpeg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`- no-repeat`: This will not repeat the background![Repeating of background](img/00060.jpeg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Background size
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'With new CSS features, you can set the background size. Size can be set as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s get the previous HTML code and append the new SASS code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Compiled CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of this code will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Background size](img/00061.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'If we want to set the full width of the container for an image and automatically
    count its height to maintain the aspect ratio of image, perform the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '![Background size](img/00062.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'We can, of course, change the `fill` option from the *x* axis to the *y* axis.
    Let''s change the `100%` value to `height` and `auto` for `width`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Compiled to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Background size](img/00063.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The `contain` value will change its width and height to contain the container.
    With this option, the aspect ratio will be maintained:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The `cover` value will change its width and height to cover the container.
    With this option, the aspect ratio will be maintained:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Background position
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In most designs, you will need to set the position of the background in a box.
    The background position can be set with CSS as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '![Background position](img/00064.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '![Background position](img/00065.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'If you want to center the position of the background in both axes perform the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '![Background position](img/00066.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'If you want to align the background to bottom right perform the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '![Background position](img/00067.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'To set the background offset in pixels perform the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '![Background position](img/00068.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Multiple backgrounds
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Back in the days, using multiple backgrounds was related to adding new DOM elements
    with separate backgrounds. All these elements would be positioned absolutely in
    a relative container. Nowadays, we can use multiple backgrounds in one container
    using CSS without any additional HTML code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s use the same HTML code and same image and let''s position this image
    in a container in the following positions:'
  prefs: []
  type: TYPE_NORMAL
- en: top left
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: top center
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: top right
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: left center
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: center center
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: right center
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: bottom left
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: bottom center
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: bottom right
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'CSS code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s describe it in SASS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'The final view will be as shown in the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Multiple backgrounds](img/00069.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: How to create and use sprites
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'What is a sprite? A sprite is an image with images in short. But how can you
    use it in your code and why should you use it in your CSS? Because it can make
    your website faster and it is rather simple to create. Let''s check the following
    image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to create and use sprites](img/00070.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: This is a basic sprite with set offsets in the *x* and *y* axes. So how can
    we extract **IMG 3** from this big image?
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Compiled CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'To understand the sprite grid better, let''s get the object with the name **IMG
    6**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Compiled:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Okay. But creating sprites is pretty boring and time-consuming. How can this
    process be automatized? It''s pretty easy with Compass. All we need to do is to
    gather all the images in a folder with the name `newsprite`. The best format for
    sprites is PNG to keep the proper transparency. Let''s assume that we have the
    following three PNG files in this folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '`circle-blue.png`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`circle-red.png`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`circle-white.png`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The images will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to create and use sprites](img/00071.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now we will need to add a little change into our automatizer:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'We changed the following line, which defines the destination for images:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we need to add a code to the run sprite creator in `compass`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'In the first line of the preceding code, we are importing the `compass` library.
    In the second line, we are mapping our images as `sprites`. In the third line,
    we are importing a folder with `sprites`. The value in brackets gives dimensions
    in classes in compiled CSS code. Now let''s analyze the compiled CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, the generated code is related to the files structure and names,
    for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Where:'
  prefs: []
  type: TYPE_NORMAL
- en: '`newsprite`: This is a folder/sprite name'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`circle-white`: This is file name'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Compass is prefixing the generated sprite image, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'And the generated file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to create and use sprites](img/00072.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now let''s change the code a little bit and let''s use sprite-map. Firstly,
    we will need to create HTML code to finally see the effect in browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Then in SASS file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Generated CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding code, we are not adding all classes with their dimensions
    like we did previously. This is important when you do not want to add a lot of
    unused code. Now we are only using the part of `sprite` that is needed. Let''s
    analyze it a little deeper:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'This line of code defines our image (which was `@import "newsprite/*.png"`).
    The second parameter defines the spacing between images in `sprite` (`$spacing:
    2px`); in this case it is `2px`. And the last parameter is defining the `layout`
    style. In this case, the images in `sprite` will look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to create and use sprites](img/00073.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'With this parameter, we can use the following values:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Vertical**: Elements of sprite will be placed in one vertical line'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Horizontal**: Elements of sprite will be placed in a horizontal line'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Diagonal**: Elements of sprite will be placed in a diagonal line'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Smart**: Elements will be adjusted to get at as small an area as it is possible'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s analyze the next part of the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'In the first line of the preceding code, we are getting the `$circle` variable,
    which is defined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: This line adds the background image. The second line is getting the position
    of the image with name `circle-red` defined in the `$circle` variable (sprite).
    The last line includes the width and height of `circle-red` in this class.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the browser, we can see the following view:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to create and use sprites](img/00074.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Usage of base64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is a technique strictly connected with page load optimization and minification
    of requests sent to the server. Conceptually, optimization was related with making
    count requests as small as possible. So let's assume that we have 10 image backgrounds,
    which we need to load on a page. The first request is for CSS and the next 10
    requests to the server are for images. But how can we make it work in one request?
    We can use `base64` coding.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s observe at how it looks in theory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'This is the main method in which we encode the image. Finally, it looks like
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Hey! But how can I change my image to encoded data? This is an excellent question
    at a great time. Open your terminal and try to do it with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: After this operation, all you need to do is to copy the output file content
    to `<encode data>` from the previous command.
  prefs: []
  type: TYPE_NORMAL
- en: Retina problems
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Retina is the high-resolution display. The only problem with this display is
    how to double the device width and height and then squeeze it into the keeping
    container. This sounds easy. The easiest way is to move as many elements as can
    be moved to fonts and HTML elements/pseudoelements. But how can we deal with background
    images in CSS?
  prefs: []
  type: TYPE_NORMAL
- en: Let's start with the basics. For a normal screen, we need the image with standard
    dimensions. The image width and height are equal to 90 pixels.
  prefs: []
  type: TYPE_NORMAL
- en: 'HTML:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'SASS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Complied CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'In case we want to display this image properly on the retina display, we need
    to change a code. This change is related with the density of the retina display.
    The pixel ratio in the retina display is equal to `2`. All we need to change is
    the width and height of the element and adjust the background image in this box:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'Compiled CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: Now `.element` is ready to display on the retina display with the correct quality.
    But it will be two times smaller than needed. All we need to do in this case is
    to start with a bigger resolution of the image—it should be two times bigger.
    For example, the design is prepared for the browser, and in the browser, the main
    wrapper width should be 1000px; so you should ask the designer to design the width
    of this wrapper equal to 200px. In bigger designs, you are cutting slices, which
    will be needed on the retina display. Then you should cut images for standard
    density. You can leave only the retina images but it can affect performance because
    bigger images will always be downloaded in the browser. To omit this problem,
    it is good to add a proper media query. In the described example, we are globally
    adding a normal version of the file (`img/circle-blue.png`) in the case of the
    retina display, which is recognized by the media query so that a two times bigger
    image will be loaded (`img/circle-blue@2x.png`).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'Compiled CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'Take the following part of the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'This part of code can be swapped with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: The image in this case will adjust to the width and height of the box into which
    the background is added.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you gained a basic knowledge about background images. You also
    learned how to position background images, set their sizes, and how to resolve
    the main performance problems with `sprites` and `base64` encoding.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will gain basic knowledge about the styling of forms.
    You will also gain in-depth knowledge about treating inputs with CSS code.
  prefs: []
  type: TYPE_NORMAL
