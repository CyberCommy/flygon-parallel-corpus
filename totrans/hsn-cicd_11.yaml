- en: Travis CI UI Logging and Debugging
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter will give an overview of the Travis job log and the various sections
    in the job log. This chapter will also explain how to debug a Travis build job
    in a couple of different ways, including building locally using Docker and then
    running a build in debug mode. We will go over all the different ways to get a
    job ID and how to enable debug mode in public repositories and then use the Travis
    API to start a build in debug mode. We will explain how to use **tmate**, which
    is a terminal multiplexor, and then we will talk about logging environment variables
    in the Travis Web Client. Finally, we will cover how to do deployments in Travis
    CI using Heroku and how to debug deployment failures.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Travis web client overview
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Debug build locally with Docker
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running build in debug mode
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Travis Web UI Logging
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Travis CI deployment overview and debugging
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter will require some basic Unix programming skills as well as some
    bash scripting knowledge. A basic understanding about how to make RESTful API
    calls would be helpful as we will be using curl as a REST client to make a call
    to the Travis API. It would be helpful to also have a basic understanding about
    Docker and containers as we will be running a local build using Docker as well.
  prefs: []
  type: TYPE_NORMAL
- en: Travis web client overview
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We briefly went over the web dashboard for Travis CI in [Chapter 9](65f27cc1-0630-4515-be75-5eedeb8004e5.xhtml),
    *Installation and Basics of Travis CI*, but let us take another look at the different
    parts of the UI again.
  prefs: []
  type: TYPE_NORMAL
- en: Main dashboard overview
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Travis CI web client has several different parts that are necessary to
    understand:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/73ea44f8-68d1-4197-962d-3b497f021eb6.png)'
  prefs: []
  type: TYPE_IMG
- en: In the left divided section, you can individually click on each repository that
    you are interested in looking at. Additionally, you can search a repository by
    name as there could be many repositories that you or the organization that you
    belong to own. Also notice that there are details about the last build that was
    run in the project and whether it passed or failed as well as build detailed information
    about the duration and when the last build was run.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the right divided section, you will find the main navigation components
    of the Travis web client. Notice here that you have several navigation links,
    such as the current build, which is the default link that is opened when you go
    to a repository. If you click the Branches link, you will see all the builds that
    have been triggered in all the different branches including pull requests. Let
    us push a new branch and create a pull request in the `multiple-languages` ([https://github.com/packtci/multiple-languages](https://github.com/packtci/multiple-languages))
    repository and see a new build in action:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/933c7985-dd0c-4010-a221-d6acaa57caba.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Notice here that Travis CI created a new build for the new branch that we pushed
    called `add-test-case`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/0eabe7cd-20b0-4415-8879-45ed92acfda0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Additionally, any pull requests that you open will trigger a new build with
    Travis CI as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/36d2d694-5a55-4915-9df5-df947dbd5053.png)'
  prefs: []
  type: TYPE_IMG
- en: When you merge a pull request into another branch then another CI build is triggered
    in Travis CI.
  prefs: []
  type: TYPE_NORMAL
- en: Job log overview
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The job log in Travis CI starts with build system configuration information:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/8ea5294f-df3d-4148-a0ae-3c1a6e7ba738.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Notice here that the build language is set to `go` and that the build operation
    system is Ubuntu Trusty 14.04:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/a4cc4055-bc8b-4f99-bac3-877a532cd0bf.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Travis CI clones a fresh copy of the `multiple-languages` repository, which
    is an important aspect of continuous integration. Remember that a CI build should
    build a fresh copy on each build and there should be no assumed environment variables:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/3877aa04-716a-498f-8e77-777f9269d632.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Notice that Travis CI sets some environment variables for us, including the
    `GOPATH` and `PATH` environment variables. Travis CI runs the `go version` command
    as a verification that Go version 1.10 is installed in the CI build:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/75efa9af-c02a-4b3c-a517-df54e64ce24f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In this step of the CI build, we install our secondary programming language
    of Node.js. This is optional but notice that Travis CI has a build label to the
    right of `before_install`, which is one of the build steps we discussed in [Chapter
    9](65f27cc1-0630-4515-be75-5eedeb8004e5.xhtml), *Installation and Basics of Travis
    CI*, in the *Build customization* section. Also, notice that to the right of the
    build life cycle labels of `before_install` and `install`, there is a timestamp
    for how long the build step actually took which is in human readable format of
    `2.55` seconds and `2.88` seconds for the `before_install` and `install` life
    cycle events:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/47a341db-4274-42f7-a727-8792e62b97ae.png)'
  prefs: []
  type: TYPE_IMG
- en: Notice here that there is no build label for the script build life cycle as
    this is the main part of the CI build.
  prefs: []
  type: TYPE_NORMAL
- en: Any other life cycle events, such as the `after_success` and `after_script`
    life cycle events will have a build label and a timestamp.
  prefs: []
  type: TYPE_NORMAL
- en: Debugging build locally with Docker
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can debug a build locally by pulling down a Docker image that is held in
    the documentation link, Troubleshooting Locally in a Docker Image ([https://docs.travis-ci.com/user/common-build-problems/#Troubleshooting-Locally-in-a-Docker-Image](https://docs.travis-ci.com/user/common-build-problems/#Troubleshooting-Locally-in-a-Docker-Image)).
    You can find the instructions to install Docker in this link ([https://docs.docker.com/install/](https://docs.docker.com/install/)).
  prefs: []
  type: TYPE_NORMAL
- en: 'Pull down the Go Docker image:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Notice that we run the `docker pull` command to actually pull down the Docker
    image
  prefs: []
  type: TYPE_NORMAL
- en: 'Start the interactive Docker session:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/8e2cbf8f-4bfa-4e57-baa5-775adf237d4c.png)'
  prefs: []
  type: TYPE_IMG
- en: Notice here that we ran an interactive shell session in detached mode
  prefs: []
  type: TYPE_NORMAL
- en: 'Open a login shell in the running container:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This command starts an interactive shell session with the running Docker container
    using a Bash shell
  prefs: []
  type: TYPE_NORMAL
- en: 'Switch to the Travis user:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: In this command, we switch to the Travis user instead of the default root user
  prefs: []
  type: TYPE_NORMAL
- en: 'Clone the `multiple-languages` Git repository into the home directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This command clones our `multiple-languages` repository locally onto the Docker
    container and then changes into this directory
  prefs: []
  type: TYPE_NORMAL
- en: Checkout the Git commit we want to test locally.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the `git log` command and find the commit we want to checkout locally.
    Most probably it is the top level Git commit that we will check:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: In this step, we want to make sure that we test only the changes corresponding
    to the changes we want to test.
  prefs: []
  type: TYPE_NORMAL
- en: 'Install the library dependencies and the secondary programming language:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: In this step, we install Node.js as the secondary programming language by using
    the **node version manager** (**nvm**) and then run `npm install` command to install
    all of our library dependencies
  prefs: []
  type: TYPE_NORMAL
- en: Run the script build steps.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the following screenshot, we run the `go test` and `npm test` command to
    simulate the script build life cycle event in our local Docker container:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/95869538-b91b-451b-89d0-da480536f6a0.png)'
  prefs: []
  type: TYPE_IMG
- en: Running build in debug mode
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Another technique to debug build time issues is by running a debug build in
    Travis CI. You need to email `support@travis-ci.com` to toggle this feature on
    for public repositories while private repositories have the debug mode enabled
    by default. The reason for this is that anyone can come across a log containing
    the SSH access and can then make a connection to the virtual machine and then
    potentially read out secret environment information, such as client IDs, secrets,
    and more.
  prefs: []
  type: TYPE_NORMAL
- en: Getting an API token from the profile page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To restart a job in debug mode via the API, you need to send a `POST` request
    to the job's debug endpoint. This request needs to be authenticated by adding
    your Travis CI API token to the authorization header. You can find your API token
    in your Travis CI Profile page for public projects.
  prefs: []
  type: TYPE_NORMAL
- en: 'You need to visit a URL, such as [https://travis-ci.org/profile/packtci](https://travis-ci.org/profile/packtci).
    Then you need to copy your API token in the profile page, which looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/dde63ac8-9b9e-4a90-b717-0ef3fb282096.png)'
  prefs: []
  type: TYPE_IMG
- en: Next, you will need to hit the debug endpoint by using a REST client with your
    API token.
  prefs: []
  type: TYPE_NORMAL
- en: Getting  access to a token using Travis CLI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can use the Travis CLI to get an access token by running the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Obtaining a job ID from the build log
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can obtain the job ID by expanding the `Build system information` tab and
    then looking for the label `Job id`. In the following screenshot, there is an
    arrow pointing to the `Job id`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/8baf12ee-0bd1-46c6-98b0-28c3f514339a.png)'
  prefs: []
  type: TYPE_IMG
- en: Obtaining the job ID from the URL in the View config button
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you click the View config button, the URL will change and you can copy the
    job ID from the URL. In the following screenshot, we clicked the View config button,
    which looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/19b95e3a-9069-47c5-bd37-4191deddef41.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Then the URL changed to this config: [https://travis-ci.org/packtci/multiple-languages/jobs/401101740/config](https://travis-ci.org/packtci/multiple-languages/jobs/401101740/config).'
  prefs: []
  type: TYPE_NORMAL
- en: The job ID is `401101740` in this URL.
  prefs: []
  type: TYPE_NORMAL
- en: Obtaining the job ID via an API call to the /builds endpoint
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can also obtain a job ID by calling the `/builds` endpoint in the Travis
    API. You will need to make a `GET` request and provide a valid access token in
    order to make the REST call. Here is a sample request using the `curl` REST client:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'This will fetch all the builds that are associated with the repository, which
    could potentially be a big JSON payload. You can use the **jq** ([https://stedolan.github.io/jq/](https://stedolan.github.io/jq/))
    command line JSON processor to filter out the job ID information. Here is the
    same REST call that pipes the JSON payload into the `jq` command-line utility
    to filter out only the job IDs that correspond to builds:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/c3632a7f-5921-44d6-8700-823b1f416fb3.png)'
  prefs: []
  type: TYPE_IMG
- en: API call to start a build job in debug mode
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can use any REST client to make a call to the Travis API as long as you
    have a valid access token.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a sample REST call to the debug endpoint for the `40110174` job ID:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/637c92b9-5e8e-4514-858e-e50f46a067ef.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Notice that in this screenshot, we added the `Authorization` HTTP header and
    used the Travis CLI to print out our access token by using Bash string interpolation
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Also notice that we are using the public Travis endpoint of [https://api.travis-ci.org](https://api.travis-ci.org).
  prefs: []
  type: TYPE_NORMAL
- en: Fetching an SSH session for the debug mode
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you travel back to the Travis web UI and look at the current job log, you
    will see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/314f356e-4f40-4f08-bdfa-774e3fed800b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now you simply go to a Command Prompt or Terminal session and enter the `ssh`
    command to start an interactive debug session with the current build:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/c01641c2-0713-4800-9613-11bd4b50a804.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The debug mode SSH session will only stay alive for 30 minutes and then you
    will need to make another API call to start another debug session:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/a12f5d24-ffc2-4d02-8eb8-ab1a47d01141.png)'
  prefs: []
  type: TYPE_IMG
- en: Travis debug mode convenience Bash functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here is a list of convenience Bash functions that are available:'
  prefs: []
  type: TYPE_NORMAL
- en: '`travis_run_before_install` corresponds to the **before_install** lifecycle
    event'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`travis_run_install` corresponds to the **install** lifecycle event'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`travis_run_before_script` corresponds to the **before_script** lifecycle event'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`travis_run_script` corresponds to the **script** lifecycle event'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`travis_run_after_success` corresponds to the **after_success** lifecycle event'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`travis_run_after_failure` corresponds to the **after_failure** lifecycle event'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`travis_run_after_script` corresponds to the **after_script** lifecycle event'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In the following screenshot, we run the `travis_run_before_install` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/bc7fd32e-d1d9-4137-a655-05f8fe0545cd.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Remember that this is running what is specified in the `before_install` life
    cycle event, which has the following in the `multiple-languages` repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we will run the `travis_run_install` convenience Bash function, which installs
    library dependencies that are specified in the Travis `install` life cycle event:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/fad602ad-6379-4c5e-aa32-9586c553be5a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We have the following entry in the `install` life cycle event in the `multiple-languages`
    repository Travis YML script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Notice that is exactly what is run when the `travis_run_install` convenience
    function is run.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we run the `travis_run_script` convenience function, which runs any scripts
    that have been defined in the Travis `script` life cycle event:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/c1441faa-cfc8-4d20-9bda-1c99dc1b0a90.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We have the following entry in the `script` life cycle event in the `multiple-languages`
    repository Travis YML script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: If we had specified any other life cycle events, we could have used the remaining
    convenience Bash functions.
  prefs: []
  type: TYPE_NORMAL
- en: tmate shell session actions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The SSH shell session uses a fork of tmux ([https://github.com/tmux/tmux](https://github.com/tmux/tmux))
    which is a Terminal multiplexor program called tmate ([https://tmate.io/](https://tmate.io/))
    and with it you can open Windows, scroll through history, and more.
  prefs: []
  type: TYPE_NORMAL
- en: If you press *Control-b* [, you will be able to scroll up and down the history
    of your commands
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](assets/932627c3-ee94-4ac2-88f0-9bdb7f71c989.png)'
  prefs: []
  type: TYPE_IMG
- en: To quit the history scroll mode, you simply press the letter *q*.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you press *Control-b c*, you will create a new window that you can work with.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you press *Control-b [0..9]*, then you can toggle between any new windows
    that you have created. Notice here the brackets mean, for instance, Control-b
    0, Control-b 1, and so on to toggle through window sessions.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Travis Web UI logging
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can certainly log out some environment variables in Travis CI but be careful
    that you do not log out secret information in your logs.
  prefs: []
  type: TYPE_NORMAL
- en: Steps that Travis CI takes to protect your environment-specific variables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Travis CI will, by default, hide any variables such as tokens and environment
    variables and simply display the string `[secure]` in their place.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you go to build #3 [https://travis-ci.org/packtci/puppeteer-headless-chrome-travis-yml-script/builds/398696669](https://travis-ci.org/packtci/puppeteer-headless-chrome-travis-yml-script/builds/398696669)),
    you will see the following entry:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/1bc0b3c7-fa90-49a4-88ca-f89a59fd4bc7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Remember that we added the following encrypted environment variable in this
    repository in [Chapter 10](1d648fa2-3d76-4cff-b286-1e1fe47b4ef3.xhtml), *Travis
    CI CLI Commands and Automation*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Notice that this command adds the following entry into the Travis YML script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Remember that the Travis Job log only showed the string `[secure]` in place
    of this environment variable.
  prefs: []
  type: TYPE_NORMAL
- en: Travis CI deployment overview and debugging
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We discussed Software Deployments in *Chapter 3, Basics of Continuous Delivery*,
    but to recap a Deployment is the end product of the software that is created by
    developers that your end users will use. A Deployment is typically done in the
    end of a successful CI/CD Pipeline has finished. Remember that a CI/CD pipeline
    can consist of a commit stage where any binaries are built and a Unit Test Suite
    is run followed by a 2nd stage where integration tests may be run, and then possibly
    followed by a 3rd stage consisting of Load Tests and/or Security Tests and then
    finally a 4th stage consisting of a suite of Acceptance Tests. If all of the stages
    of the CI/CD pipeline finish successfully then and only then should a Deployment
    pipeline be initiated.
  prefs: []
  type: TYPE_NORMAL
- en: Deployments in Travis CI are relatively easy/ Remember that you can use the
    Travis CLI to set up some deployment tools with ease in Travis CI.
  prefs: []
  type: TYPE_NORMAL
- en: Supported Providers in Travis CI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here are some supported providers that you can use with Travis CI for deployments:'
  prefs: []
  type: TYPE_NORMAL
- en: AWS CodeDeploy ([https://docs.travis-ci.com/user/deployment/codedeploy/](https://docs.travis-ci.com/user/deployment/codedeploy/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AWS Elastic Beanstalk ([https://docs.travis-ci.com/user/deployment/elasticbeanstalk/](https://docs.travis-ci.com/user/deployment/elasticbeanstalk/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AWS Lambda ([https://docs.travis-ci.com/user/deployment/lambda/](https://docs.travis-ci.com/user/deployment/lambda/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AWS S3 ([https://docs.travis-ci.com/user/deployment/s3/](https://docs.travis-ci.com/user/deployment/s3/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure Web App ([https://docs.travis-ci.com/user/deployment/azure-web-apps/](https://docs.travis-ci.com/user/deployment/azure-web-apps/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bluemix CloudFoundry ([https://docs.travis-ci.com/user/deployment/bluemixcloudfoundry/](https://docs.travis-ci.com/user/deployment/bluemixcloudfoundry/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Chef Supermarket ([https://docs.travis-ci.com/user/deployment/chefsupermarket/](https://docs.travis-ci.com/user/deployment/chefsupermarket/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CloudFoundry ([https://docs.travis-ci.com/user/deployment/cloudfoundry/](https://docs.travis-ci.com/user/deployment/cloudfoundry/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: GitHub Pages ([https://docs.travis-ci.com/user/deployment/pages/](https://docs.travis-ci.com/user/deployment/pages/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: GitHub Releases ([https://docs.travis-ci.com/user/deployment/releases/](https://docs.travis-ci.com/user/deployment/releases/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Google App Engine ([https://docs.travis-ci.com/user/deployment/google-app-engine/](https://docs.travis-ci.com/user/deployment/google-app-engine/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Google Cloud Storage ([https://docs.travis-ci.com/user/deployment/gcs/](https://docs.travis-ci.com/user/deployment/gcs/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Google Firebase ([https://docs.travis-ci.com/user/deployment/firebase/](https://docs.travis-ci.com/user/deployment/firebase/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Heroku ([h](https://docs.travis-ci.com/user/deployment/heroku/)[ttps://docs.travis-ci.com/user/deployment/heroku/](https://docs.travis-ci.com/user/deployment/heroku/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OpenShift ([https://docs.travis-ci.com/user/deployment/openshift/](https://docs.travis-ci.com/user/deployment/openshift/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: npm ([https://docs.travis-ci.com/user/deployment/npm/](https://docs.travis-ci.com/user/deployment/npm/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Surge.sh ([https://docs.travis-ci.com/user/deployment/surge/](https://docs.travis-ci.com/user/deployment/surge/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For the full list of supported providers, please go to the Travis user documentation
    ([https://docs.travis-ci.com/user/deployment/#Supported-Providers](https://docs.travis-ci.com/user/deployment/#Supported-Providers)).
  prefs: []
  type: TYPE_NORMAL
- en: Heroku setup in Travis CI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We can use the Travis CLI to help us set up Heroku ([https://www.heroku.com/platform](https://www.heroku.com/platform))
    in our `multiple-languages` ([ https://github.com/packtci/multiple-languages](https://github.com/packtci/multiple-languages))
    repository.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first step we need to do is to make sure that we are logged into Heroku
    by using the Heroku CLI, which you can download and install at [https://devcenter.heroku.com/articles/heroku-cli#download-and-install](https://devcenter.heroku.com/articles/heroku-cli#download-and-install).
    Once we are logged in, we will be given an access token that we can use:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/d4f2521f-3a8f-4f49-a62f-c39b18e00d50.png)'
  prefs: []
  type: TYPE_IMG
- en: Notice here that we used the  `heroku auth:token` command to print out our access
    token.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we simply need to use the `travis setup` command to get set up:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/889e3d33-46ca-47e5-9caa-b1d414b4ced1.png)'
  prefs: []
  type: TYPE_IMG
- en: Notice that we did not have to provide an access token as we already logged
    into Heroku and the `travis setup` command is smart enough to grab it for us.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `travis setup` command automatically updates our Travis YML script with
    Heroku provider information and now our Travis TML script looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Debug failure in Travis YML script
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If we look at build 8.1 ([https://travis-ci.org/packtci/multiple-languages/jobs/403102478#L548](https://travis-ci.org/packtci/multiple-languages/jobs/403102478#L548))
    for the `multiple-languages` project, we can see that it errored out, as the screenshot
    shows, because we don''t actually have an app in Heroku called multiple-languages:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/31a527a2-d30f-499d-b488-3cd0441689d2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We simply need to create an app in Heroku with an app named `multiple-languages`
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/ef039dd8-85f1-4d40-a42b-d29d2814a2ad.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now let us restart the build in Travis using the `travis restart` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/20ec2ee1-2e2f-417a-ace9-cbff5a19c3d9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now let us look at the job log for build 8.1 once more:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/db2db9ef-7069-430a-897e-28261c3cbcb9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now if we look at the Heroku dashboard, we can confirm that our application
    was successfully deployed to Heroku:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/03ae8c19-ca4c-40b6-81f9-aaad49942575.png)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we presented an overview of the Travis job log and explained
    the different parts of the job log. We looked at running a build locally using
    Docker and learned how to enable a build in debug mode by using the Travis API
    as well. We then looked at the steps that Travis CI takes to secure your secrets
    and keys in the job log. Finally, we looked at how to deploy an application in
    Travis CI by using by using the Travis CLI and then looked at how to debug a build
    failure and get a successful deployment in Travis CI.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will explain how to get Circle CLI set up in a software
    project and then go over the basics of the Circle CI UI.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Does another build get kicked off when you merge a pull request in GitHub?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Does the Travis job log show a label when running any scripts in the script
    life cycle event?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do we debug a build locally in Travis CI?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Is the debug build mode available for public repositories?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How would you use the Travis API to get a Job ID?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the convenience bash function that you can use for the before_install
    life cycle event when running a build in debug mode?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What Travis CLI command would you use to setup add-ons such as Heroku to do
    deployments?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can further explore debugging options and more advanced configuration information
    in the Travis user documentation: [https://docs.travis-ci.com/](https://docs.travis-ci.com/).'
  prefs: []
  type: TYPE_NORMAL
