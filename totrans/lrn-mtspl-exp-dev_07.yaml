- en: Chapter 7. Post Exploitation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we were able to compromise the system and get access
    to the meterpreter. Now once we have access to the system, our main focus lies
    on extracting as much information as we can from the system, while at the same
    time being invisible to the user. This would include information that can be analyzed
    offline on the attacker system, such as a Windows registry dump, password hash
    dump, screenshots, and audio recordings. In this chapter, we will explain the
    concept of post exploitation and its phases in detail. We will further be covering
    a tutorial on the various techniques of post exploitation.
  prefs: []
  type: TYPE_NORMAL
- en: What is post exploitation?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As the term suggests, **post exploitation** basically means the phases of operation
    once a victim's system has been compromised by the attacker. The value of the
    compromised system is determined by the value of the actual data stored in it
    and how an attacker may make use of it for malicious purposes. The concept of
    post exploitation has risen from this fact only as to how you can use the victim's
    compromised system's information. This phase actually deals with collecting sensitive
    information, documenting it, and having an idea of the configuration settings,
    network interfaces, and other communication channels. These may be used to maintain
    persistent access to the system as per the attacker's needs.
  prefs: []
  type: TYPE_NORMAL
- en: Phases of post exploitation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The various phases of post exploitation are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the victim
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Privilege escalation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cleaning tracks and staying undetected
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Collecting system information and data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up backdooring and rootkits
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pivoting to penetrate internal networks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tutorial
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Up to this point, we know how to exploit a vulnerable system. We can see in
    the following screenshot that we already have a meterpreter session running. Now
    we are going to start the first phase of post exploitation by gathering as much
    information as possible.
  prefs: []
  type: TYPE_NORMAL
- en: '![Tutorial](img/3589OS_07_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: First, we'll check for the system information by executing the `sysinfo` command.
    Type in `sysinfo`:![Tutorial](img/3589OS_07_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After executing the command, we can see here that the computer name is **EXPLOIT**.
    The operating system that is running on the victim's system is Windows XP service
    pack 2 with an x86 architecture. The language being used is US English. Let us
    check the process that has the meterpreter attached to it. For this purpose we
    use the `getpid` command, so type in `getpid` and it will show the process ID
    of the meterpreter:![Tutorial](img/3589OS_07_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The process ID shown by the `getpid` command is **1008**. Now we'll check the
    running processes in the victim system's process list, so type the `ps` command:![Tutorial](img/3589OS_07_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We can clearly see that the process **1008** is running as `svchost.exe`; it
    resides under the `windows/system32` directory.
  prefs: []
  type: TYPE_NORMAL
- en: Now check whether the victim's system is a virtual machine or not. For this,
    type in the `run checkvm` command:![Tutorial](img/3589OS_07_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After running the post exploit script it detected that the operating system
    is running under the VirtualBox virtual machine.
  prefs: []
  type: TYPE_NORMAL
- en: Now let us check whether the victim is active or not. For this, we type in `idletime`.
    Executing this script will show us the recent activity time of the victim:![Tutorial](img/3589OS_07_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It is good that the victim is active and that their recent activity is just
    16 seconds old.
  prefs: []
  type: TYPE_NORMAL
- en: Check the victim's system environment by running another meterpreter script
    by executing the `run get_env` command:![Tutorial](img/3589OS_07_07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We can see the system's environment information, such as the number of processors,
    operating system, Windows directory path, and more.
  prefs: []
  type: TYPE_NORMAL
- en: Now let us check the victim's system IP address by typing the `ipconfig` command:![Tutorial](img/3589OS_07_08.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Here we can see the IP address of the victim's PC; now if we want to see the
    full network settings, we'll type in the `route` command:![Tutorial](img/3589OS_07_09.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Here we can see the network route settings of the victim's system.
  prefs: []
  type: TYPE_NORMAL
- en: Another important script that we run for mapping the security configuration
    of the victim's system is known as `countermeasure`. Type in `run getcountermeasure`:![Tutorial](img/3589OS_07_10.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: By running this script, we can see the firewall profile configuration.
  prefs: []
  type: TYPE_NORMAL
- en: Now we are going to enable the victim's Remote Desktop Protocol service. Type
    in `run getgui`; it shows a list of the available options. We can see in **OPTIONS**
    that the `–e` syntax is used for enabling RDP, so type in the `run getgui –e`
    command:![Tutorial](img/3589OS_07_11.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Another common service that we expect to be enabled on the Windows operating
    system is the `telnet` service. The `gettelnet` script is used for enabling the
    `telnet` service on the compromised machine. So type in `run gettelnet`, and it
    will show a list of the available options. We can notice in the **OPTIONS** section
    that `–e` is used for enabling the `telnet` service, so type in `run gettelnet
    –e`:![Tutorial](img/3589OS_07_12.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let us have a look at the victim's local subnet by running another script. Type
    in the `run get_local_subnets` command:![Tutorial](img/3589OS_07_13.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We can see the local subnet of the victim's system in the preceding screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: Another interesting script is `hostedit`. It allows an attacker to add host
    entries in the Windows host file. Type in `run hostedit`:![Tutorial](img/3589OS_07_14.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Upon running this script, we can see the usage syntax of `hostedit`. Type in
    `run hostedit –e 127.0.0.1, www.apple.com`:![Tutorial](img/3589OS_07_15.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Here we can see that the host record has been added to the victim's host file.
  prefs: []
  type: TYPE_NORMAL
- en: For verifying it, we can open the victim's system directory at `c:\windows\system32\drivers\etc\`.
    Here we can find the host's file, and on opening this file in Notepad, we can
    see the host that has been added:![Tutorial](img/3589OS_07_16.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now let us enumerate as to how many users are currently logged in on the victim's
    system. For this purpose, we'll type in `run enum_logged_on_users`. Using this
    command shows us a list of available options, and we can see in **OPTIONS** that
    `–c` is being used for the currently logged-in users. So, type in `run enum_logged_on_users`:![Tutorial](img/3589OS_07_17.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We can see in the preceding screenshot that the user/victim is currently logged
    in on the system.
  prefs: []
  type: TYPE_NORMAL
- en: After enumerating the users, we then move on to enumerate the applications installed
    on the victim's system. So to enumerate the installed applications' list, we just
    need to type in `run get_application_list` and it will show us all the installed
    applications:![Tutorial](img/3589OS_07_18.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the preceding screenshot, we can see the list of installed applications.
  prefs: []
  type: TYPE_NORMAL
- en: After that, we move on to enumerate the victim's drive information for the purpose
    of gathering physical drive information. Type in `run windows/gather/forensics/enum_drives`:![Tutorial](img/3589OS_07_19.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We can see the drive name and size in bytes in the preceding screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: We also see the victim's operating system's product key. This is an amazing
    script that may be used by typing `run windows/gather/enum_ms_product_keys`; it
    will reveal the serial key:![Tutorial](img/3589OS_07_20.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using this command, in the preceding screenshot, we can see the product key
    of the Windows operating system that is installed on the victim's PC.
  prefs: []
  type: TYPE_NORMAL
- en: Now let us check the Windows `autologin` feature in the victim's system by running
    another meterpreter script. Type in `run windows/gather/credentials/windows_autologin`:![Tutorial](img/3589OS_07_21.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We can see as in the in the preceding screenshot that the victim's system username
    is `victim` and that the password is blank. He is using his system without a password.
  prefs: []
  type: TYPE_NORMAL
- en: Now another important script that we are going to run is for enumerating the
    system information. This will dump some juicy information, such as hashes and
    tokens, from the victim's system by running different utilities and commands.
    Type in `run winenum`:![Tutorial](img/3589OS_07_22.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After running the script, we notice that a lot of the commands running on the
    victim's system and all the reports are being saved in the `/root/.msf4/logs/scripts/winenum/EXPLOIT-0FE265D
    20130327.2532` directory. Now we can go through this directory and view some of
    the results:![Tutorial](img/3589OS_07_23.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In this directory, we can see some data being saved in the TXT and CSV formats.
    Now we can open any report as per our need. Here we are opening `hashdump.txt`,
    so type in `cat hashdump.txt`:![Tutorial](img/3589OS_07_24.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Here we can see all the dumped hashes of the different users.
  prefs: []
  type: TYPE_NORMAL
- en: The last script that we are going to use for this lab is called `scraper`. This
    script can be used for dumping additional information (such as extracting the
    entire registry key) that is not included in any other enumeration script from
    the victim's system. Type in `run scraper`:![Tutorial](img/3589OS_07_25.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We can see in the preceding screenshot that after running the script, it starts
    dumping hashes, registry keys, and basic system information, and it saves the
    report in the `.msf4/logs/scripts/scraper/192.168.0.104_20130327.563889503` directory.
  prefs: []
  type: TYPE_NORMAL
- en: '![Tutorial](img/3589OS_07_26.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We can see that many results have been saved in this directory in the TXT format.
  prefs: []
  type: TYPE_NORMAL
- en: We'll now open up a result as an example, so type in `cat services.txt`:![Tutorial](img/3589OS_07_27.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the preceding screenshot, we can see the different Windows Services running
    on the victim's system.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we went through the first phase of post exploitation in which
    we made an attempt to understand our victim better. Once we had the meterpreter
    session running, we leveraged it to gather important system information, hardware
    details, and so on. We used meterpreter scripts to dump the Windows registry and
    the password hashes. The attacker was able to get a list of the programs installed
    on the victim''s machine. Using post exploitation techniques, we were able to
    enumerate the victim''s hard disk information, including the physical and logical
    partitions. Further penetrating into the victim''s system, we could gather the
    network information and make changes to the host''s record file. In the next chapter,
    we will move on to the next phase of post exploitation: privilege escalation.'
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following are some helpful references that shed further light on some of
    the topics covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.pentest-standard.org/index.php/Post_Exploitation](http://www.pentest-standard.org/index.php/Post_Exploitation)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://www.securitytube.net/video/2637](http://www.securitytube.net/video/2637)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://cyruslab.wordpress.com/2012/03/09/metasploit-post-exploitation-with-meterpreter-2/](http://cyruslab.wordpress.com/2012/03/09/metasploit-post-exploitation-with-meterpreter-2/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://em3rgency.com/meterpreter-post-exploitation/](http://em3rgency.com/meterpreter-post-exploitation/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
