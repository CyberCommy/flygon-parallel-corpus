- en: Modeling with Object-Oriented Java
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you're going to learn how to create classes and objects in
    Java. Object-oriented programming allows us to explain highly complicated systems
    to the computer and also ourselves. In addition, there's a lot more to learn about
    object-oriented programming in terms of how objects fit together, the kinds of
    relationships they can have, and what we can do with objects to make our programs
    easier to write. We will also walk through the topics of creating custom classes,
    member variables, and member functions. Finally, we will look into a very special
    member assigned to our custom classes, that is, the constructor, and types of
    constructor.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: 'We are going to cover the following topics in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: Creating classes and objects
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating custom classes
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating member variables
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating member functions
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating constructors
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Types of constructors
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating classes and objects
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, you'll take the first real steps of learning object-oriented
    programming in Java. So I guess the first question to ask is, "What is object-oriented
    programming?" Well, at a high level, object-oriented programming is the creation
    of objects, discrete code, and logic entities that are unique and separate from
    each other but can have complicated relationships.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: When we write object-oriented code, we begin to deal with and think about the
    code as though it were a collection of physical pieces or objects. Java is by
    its very nature an object-oriented language. So, if you've been learning Java,
    at the very least, you've been using objects without realizing it.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: 'To see the power of object-oriented programming, take a look at the following
    program (`GettingObjectOriented.java`):'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This program is a very basic input/output program, the kind you''ve probably
    already written if you''ve been learning Java. In this program, we make use of
    a `Scanner` object that we call `reader`, and you''ll notice that we utilize `reader`
    on two lines: on one line, we declare and initialize `reader`, and on the other
    line, we call the `next()` function of `reader` to acquire some user input.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: The important thing I'd like you to notice about the relationship between these
    two lines of code is that when we declare `reader`, we provide it with some additional
    information besides simply the command to create a new `Scanner` object. This
    is interesting because later when we utilize the `next()` function of `reader`,
    we won't have to retell it what stream it should be reading from; instead, this
    information is automatically stored and recalled by the `reader` object.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: 'This is the beauty of object-oriented programming: the entities or objects
    we create can be constructed in such a way that not only do they know what to
    do with the information given to them and provide us with additional functionality,
    but also that they know exactly what information to ask to perform their later
    tasks.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: Let's make sure we have our terminology straight. First, let's analyze the `new
    Scanner(System.in)` part of our code. This command tells Java to create a new
    object, a new `Scanner` object, for use in our program. This object has location
    and memory in which it lives, and this location is referenced by the `reader`
    variable. It would be possible for us to create multiple variables that all point
    toward the same `Scanner` object; however, in the context of this simple program,
    `reader` is our only entry point to the object's location in memory. So, we can
    often get away with referring to an object like this simply by its variable name.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: Lastly, different objects operate in a different manner. It is possible for
    us to create multiple `Scanner` objects; they would not have the same location
    in memory, but they would share similar functionality. The piece of code and logic
    that declares what functionality an object has and how that functionality operates
    is called the object's class. In this case, we're creating an object of the `Scanner`
    class and pointing to it with the `reader` variable.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: This is all well and good, and we can create a whole lot of programs simply
    using the default standard libraries that Java provides; however, to really open
    the doors, we're going to need the ability to create custom classes of our own.
    Let's jump in and create one.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: Creating custom classes
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, we could create a new class within the file we're already working in; however,
    class declaration code is a little different and logically discrete from something
    like the executed `main()` method, where the lines are executed one after another
    in order. Rather, the class we're going to create is going to serve more as a
    reference for the lines of code, such as theÂ `Scanner reader = new Scanner(System.in);`
    code line. Generally, when working in an object-oriented language, a high-level
    object-oriented language such as Java, we simply put each and every new class
    we create in its own separate file.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: To create a new Java file for our class, just right-click on the package name
    on the left-hand side of the screen, that is, `gettingobjectoriented`. Then, choose
    New, followed by Java Class. Post this, we'll just be prompted to give it a name.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/88f2915e-e554-4960-845e-e813202442d0.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
- en: 'In this instance, we are going to create a class to provide and store some
    basic information about a person. We''ll call it the `Person` class, which creates
    person objects:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ea693725-8198-41c4-97bc-b9b55944f955.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
- en: 'When we press Finish, NetBeans is pretty handy and sets up some really basic
    lines of code for us. It declares this class to be in our local package. This
    means that when we reference it from our `main()` method, we won''t have to import
    this class like we do with standard library ones. NetBeans is kind enough to create
    the class declaration for us. This is simply a line of code that lets the Java
    compiler know that we''re about to declare a new class as shown in the following
    screenshot:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: For now, we'll ignore the `public` keyword, but know that it's pretty necessary
    here. The `class` keyword self-explanatorily lets us know that we're about to
    declare a class, and then just like everything we create and need to reference
    at a future date, we give the class a name or a unique keyword.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: It's time to write the code to set up our `Person` class. Remember that what
    we're doing here is teaching future pieces of our program how to create `Person`
    objects or instances of the `Person` class. So, the code we write here is going
    to look very different from what we would write in a method that simply executes
    the lines from start to finish.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: 'The information we place within a class declaration is going to fall into one
    of these two categories:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: The first category is us telling Java what information a `Person` class should
    be able to store
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The second category is us teaching Java what functionality a `Person` object
    should expose
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating member variables
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s start with the first category. Let''s tell Java what information we''d
    like to store in `Person`:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Telling Java what information to store is a lot like declaring variables in
    any other piece of code. Here, we've given the `Person` class two member variables;
    these are pieces of information that we can access in any `Person` object.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: Just about everything we declare in a class declaration needs to be given a
    protection level. When we become more advanced Java users, we'll begin to use
    different protection levels, but for now, we're simply going to declare everything
    "public."
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: So, as we've set it up here, every `Person` object has `firstName` and `lastName`.
    Remember, these member variables are unique to each instance of a `Person` object,
    so different persons do not necessarily share first and last names.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: 'To make things a little more interesting, let''s also assign birthdays to people.
    We''ll need to import `java.util` because we''re going to use another class for
    this, the `Calendar` class:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Calendars are basically points and times or dates with a whole lot of functionality
    wrapped around them. The cool thing is that `Calendar` is a class of its own.
    So we're placing a class within our `Person` class; `String` is a class too, but
    Java considers it a little special.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's head back to the `main()` method in the `GettingObjectOriented.java`
    file and see what it looks like to create a brand new person. For now, we'll leave
    this line of code so we can use it as a template. We'd like to create a new instance
    of our `Person` class or create a new `Person` object. To do this, we're first
    going to tell Java what type of object we'd like to create.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: 'Because we''ve declared the `Person` class within the package that we''re using,
    Java will understand the `Person` keyword now. Then, we need to give a name to
    the variable that we will assign our new person to; let''s name the person `john`.
    Creating a new person is as simple as creating a new `Scanner` object. We use
    the `new` keyword to let Java know that we''re creating something brand new that
    doesn''t exist yet, then we ask it to create a person:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Here, `Person john = new Person ();` will cause the person pointed to by the
    variable `john`, who we'll just think of as a person John, to come into being.
    Now `john` already has some basic functionality just by the fact that we've declared
    some member variables for the `Person` class, so even our rudimentary declaration
    of the `Person` class has given John some member variables that we can work with.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, `john` has `firstName` that we can access as a variable with the
    dot(`.`) operator, and we can go ahead and assign a value to this variable. We
    can do the same thing with John''s last name and also, of course, his birthday:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Now, I had mentioned that `birthday` was going to be a little different from
    `firstName` and `lastName` by the time we reach this point. While strings are
    technically classes in Java, Java also gives them the special privilege of being
    able to be assigned to an explicit value or a string explicit. Calendars, of course,
    don't have this unique special privilege, so we're going to need to create a new
    `Calendar` object to place within our object, that is, `john`.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: Now, `Calendar` is one of those classes that we can assign instances of; however,
    when we want to create a brand new one, we would need to create something more
    specific that is also a calendar. So, for this instance, we'll use `GregorianCalendar`.
    Then, let's assign `birthday` to `john`, say, `1988,1,5`. Then, to see that everything
    is being assigned as expected, simply print out John's first and last names.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: 'There we go! When we run the following program:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'We see `John Doe` not really properly formatted but printed to the screen,
    as expected:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/de2afc61-669a-4365-bb7b-e1a0074faf72.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
- en: We've successfully stored information in our `john` object. If we wanted to,
    we could create a brand new person "Jane" who would have `firstName`, `lastName`,
    and `birthday` of her own; her member variables being completely separate from
    that of John's.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: Creating member functions
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's go back to our `Person` class, that is, the `Person.java` file, and provide
    people with some more functionality. So, the beauty of object-oriented Java is
    that we're already beginning to think about instances of our `Person` class as
    physical objects. This makes anticipating the questions that will be asked of
    them much easier.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: For example, when I meet someone new, I'd either want to know their first name
    or their full name in most cases. So wouldn't it be nice if our person stores
    a string called `fullName` that people could just ask of rather than having to
    individually acquire their first and last names?
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: Now, of course, simply adding another member variable like this is unwieldy
    because the people creating a new instance of `Person` will need to set `fullName`.
    Also, if the person's first name, last name, or full name were to ever change,
    their `fullName`, `firstName`, and `lastName` variable might not match up properly.
    But what if instead of a member variable, we provide a member method?
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: 'When we create methods within the context of a class, we have access to the
    class''s member variables. We can modify them if we want, or if we''re doing something
    like we just did, we can simply utilize their values, in this case return this
    person''s dynamically constructed full name:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: There's another question that I anticipate this person being asked, and that
    is how old are you? This will be a lot like the method we just wrote, with one
    exception. In order to know how old this person is, this person will need to be
    told what today's date is because that's not information that this person already
    stores.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: To do this, we'll ask people to pass this information when they call this method,
    and we'll simply return the difference between today's year and the birthday year
    of this person.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, the syntax for getting a year from a calendar is a little wonky, but I
    think we should be able to follow it. We simply use the `get` method, which has
    a number of uses, and then we need to tell the method exactly what we''d like
    to get from it, and what we''d like to get is a calendar year(`Calendar.YEAR`).
    So, let''s make sure to save this file and jump over to our `main` method and
    make use of one of these new methods that we''ve just added to `Person` instances:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: So, we've set up `john`. He has a birthday. Let's ask John how old he is, right
    in our `println` statement here. To do this, we're simply going to call John's
    `age` method and create a new `Calendar` object to pass in. I think the new `GregorianCalendar`
    instance will be set to the current date and time by default.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: 'If we run the following program:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'We see that John is `29` years old:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f5c7490e-f32d-4a9f-9d4e-ebbcc7d3829c.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
- en: So there you have it. That's our basic introduction to object-oriented Java,
    but it's all going to boil down to the basics that you just learned.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: Creating constructors
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, you''re going to learn about a very special member we can
    assign to our custom classes, that is, the constructor. To start off, let''s take
    a look at the following code:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'This program creates an instance of our custom class `Person` and immediately
    assigns some values to member variables of `Person`: `firstName`, `lastName`,
    and `birthday`. Then, we utilize some of the member functions of `Person` to print
    out some information about the values we''ve just assigned.'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: 'While this is a decent program, which we''ve just written, it''s easy to see
    someone make a mistake while writing even this simple program. For example, what
    if I had forgotten, or simply didn''t realize, that `birthday` was one of the
    member variables of `Person`? If I don''t assign a birthday to a person right
    away and then attempt to use the `age()` member method as shown in the following
    code block:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Our program would crash when it attempts to access that birthday variable that
    has not been set to anything as shown in the following screenshot:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0f2b5fbb-e447-4ac9-810c-03b55d08602b.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
- en: This is a very reasonable mistake for a programmer to make, both in terms of
    not knowing that they should set this member variable to a value and also in assuming
    that this member variable would have a value because what person doesn't have
    a birthday? Fortunately, there's a system in place where we can demand information
    from the user before we allow them to even create an instance of our object. So,
    let's jump into the code that declares the `Person` class and set this class up
    so that a person can only be created if it's given all of the necessary information
    right from the start. To do this, we're going to use a constructor.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: A constructor declaration looks a lot like a normal method declaration, except
    for one thing. Where a normal method would have a return value, even the value
    null if it wasn't designed to return anything, constructors don't even have that.
    Also, the name of the constructor method is the same name that we've assigned
    to our class; however, just like normal methods, we can give input to constructors.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: 'To start off, let''s assume that all persons have `firstName`, `lastName`,
    and `birthday`; otherwise, they simply shouldn''t exist. When we create a new
    instance of the `Person` class and the `Person` class has a constructor defined,
    we will always create an instance of the class using the `Person` constructor:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'If we save this update to our `Person` class declaration and then go back to
    the `main` method of our program, we''ll get a compiler error as shown in the
    following screenshot:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f3ccf2f3-6332-408f-82f2-fd6311238cf4.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
- en: 'That''s because we''ve modified the `Person` class to demand that our newly
    created constructor be used. This constructor takes three input values: a string,
    a string, and a calendar. So, instead of modifying the member variables of `Person`
    in these three lines of code, what we''re going to do is pass these three variables
    as arguments to our constructor method:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Now, as far as the `main` method in our program is concerned, the syntax of
    our program is once again valid. Of course, if we run this program, we're going
    to run into some trouble because while we pass these arguments to the `Person`
    constructor, we haven't yet done anything with them.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, it needs to be the job of our `Person` constructor here, as opposed to
    the `main` method in our Java program, to translate these parameters into the
    values of the member variables of `Person`. So, let''s do that. Let''s change
    our `Person` class''s `firstName`, or rather set its value, to the variable passed
    to this function:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Now, this is a technically correct syntax that we have here; it will do what
    we want it to do.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: The `firstName = firstName` code line is really weird, and it's pretty ambiguous
    if you go about reading it. After all, which `firstName` variable are we talking
    about in each of these instances? Are we talking about `Person.firstName`, the
    member variable of this class, or are we talking about `firstName` that was passed
    in as an argument to the constructor method? To disambiguate this, we can do a
    couple of things.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: 'First off, we could simply change the name we assign to our method arguments
    to something that''s not identical to the local member name; however, sometimes,
    it just makes sense to explicitly ask for `firstName`. It can be a lot easier
    for people who are going to use the constructor. When we need to explicitly tell
    our program that we''re using one of `Person` class''s member variables, we should
    provide a path for it properly. The `this` keyword will allow us to access the
    class that we''re currently operating in, or rather its object instance, when
    the program runs. So, `this.firstName` will always reference the member variable
    as opposed to the one passed in as an argument. Now that we have the syntax, we
    can quickly assign the argument values to the values of our member variables:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7fe7dc9b-4335-4baa-8a59-3b6f1594e465.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
- en: 'Now when we save this file and go back to our `main` methodâthat is, `GettingObjectOriented.java`âand
    run our program, we''ll get the original output showing us that our `Person` constructor
    has properly mapped these input values to the values stored in our `Person` object:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c3d6ffb7-b1f5-472c-992b-75ea6c0f336d.png)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
- en: So this is pretty cool. We've modified our `Person` class so that it's much
    more difficult for a programmer to make an obvious mistake and call these methods
    when they're bound to fail. A programmer could still get into trouble if they
    did something along the lines of modifying one of the member variables after our
    person has been created.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: However, there's a system in place for us to protect our classes, if we choose
    to, from having their members modified without going through a proper protocol.
    Let's say that we'd like to change our `Person` class so that the only time these
    members are ever changed is once at the very beginning when the constructor calls.
    If you remember, we've been tagging all the members of our classes with this `public`
    protection tag. Something that's tagged `public` is basically viewable anytime
    by any piece of our program that has access to its container.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: 'However, we can use a couple of other different protection tags. If we were
    to tag all our member variables `private`, then they would only be viewable within
    the context of their current class. So, we could still use the member variables
    in our `Person` constructor and in our `fullName` and `age` methods, but when
    we attempt to access `lastName` outside of the actual class declaration, then
    it would be invalid:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: We can tag members `private` and then create public methods to modify their
    values when appropriate. By doing so, we will protect our objects from ever being
    given invalid values.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: Types of constructors
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, let's go back to talking about constructors before we wrap up. As with
    normal methods, we can override constructors and have more than one option for
    our programmer to choose from.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, let''s say that sometimes in our program, we want to create new
    people who have just been born. In this instance, it might make a lot of sense
    for us to construct a person by simply giving `firstName` and `lastName` to our
    constructor and then having `birthday` as `new Gregorian Calendar`, which will
    default to today''s date:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: If we wanted to use this constructor in our program instead, we'd simply call
    the constructor with only two string arguments. This would map to the newly created
    constructor that we've declared here.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider the following program:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'When we run it, since the birth date has been set to the current date and time,
    we will see that `John Doe` is now `0` years old, as shown in the following screenshot:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f0b459ab-c172-4e9d-b095-c0f2c08f85d3.png)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
- en: 'Lastly, we can give someone the option of utilizing one of our constructors
    or simply creating an instance of the class without doing anything, simply by
    declaring a constructor that is empty. Then, the syntax will look just like the
    creation of John we participated in earlier:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Generally, we don''t want to do this, though. What we want to do if we have
    an empty or default constructor is to assign default values to our member variables
    so that at the very least, we''re still not breaking our program. So, it might
    make a lot of sense for our default constructor to assign empty strings and maybe
    today''s date to our `firstName`, `lastName`, and `birthday` fields:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Then, even if our programmer doesn''t properly assign values to John''s fields
    after creating them, there''s still going to be some valid values in those fields
    to protect us from actually throwing an error when we run the following program:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The following is the output of the preceding code:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1d692259-00c3-473d-b8f1-3f01ff311b19.png)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
- en: So that's the skinny on constructors, another tool that helps us protect and
    make the code we've already written more robust.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we saw how to create classes and objects and how we can create
    member variables and functions that will make our code less complicated. You also
    learned about creating constructors assigned to the class and types of constructors.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: å¨æ¬ç« ä¸­ï¼æä»¬çå°äºå¦ä½åå»ºç±»åå¯¹è±¡ï¼ä»¥åå¦ä½åå»ºæååéåå½æ°ï¼è¿å°ä½¿æä»¬çä»£ç åå¾ä¸é£ä¹å¤æãæ¨è¿å­¦ä¹ äºå³äºåå»ºåéç»ç±»çæé å½æ°åæé å½æ°ç±»åçç¥è¯ã
