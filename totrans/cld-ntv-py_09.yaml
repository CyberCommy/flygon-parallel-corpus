- en: Continuous Delivery
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapters, we worked towards building our application and preparing
    it for the cloud environment. Since our application is stable now and ready for
    its first release, we need to start thinking about the platform (that is, the
    cloud platform) as well as the tools that can help us move our application to
    production.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter discusses the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to continuous integration and continuous delivery
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding continuous integration with Jenkins
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Evolution of continuous integration and continuous delivery
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Nowadays, lots of people are talking about **CI** (**continuous integration**)
    and **CD** (**continuous delivery**), and after examining the perspectives of
    different technologists, I believe all have different understandings of CI and
    CD, and there is still some confusion about them. Let's dive deeply into these
    and understand them.
  prefs: []
  type: TYPE_NORMAL
- en: In order to understand continuous integration, you need to first understand
    the background to **SDLC** (**system development life cycle**) and the **Agile
    software development** process, which can help during your build and release processes.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding SDLC
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'SDLC is the process of planning, developing, testing, and deploying your software.
    This process consists of a sequence of phases, and each phase takes the outcome
    from the previous phase to proceed further. The following diagram depicts SDLC:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00106.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s understand each phase in detail:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Requirement Analysis**: This is the initial phase for problem analysis, where
    business analysts perform requirement analysis, and understand the business needs.
    The requirements can be internal to the organization or external from a customer.
    Requirements include the scope of the problem, which could either be for improving
    the system or building a new one, cost analysis, and project goals.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Design**: In this phase, the design for the implementation of the features
    of the software solution is prepared and approved. This includes process diagrams,
    documentations, layouts, and so on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Implementation**: In this phase, actual implementation, based on the design,
    is carried out. Usually, developers develop the code depending on the goals defined
    in the design phase.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Testing**: In this phase, the developed code is tested by the **QA** (**quality
    assurance**) team under different scenarios. Each and every module is tested using
    unit testing as well as integration testing. In case of test failure, the developers
    are informed about the bug, and then they are required to fix it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Deployment**/**Release**: In this phase, the tested feature is moved to production
    for customer review.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Evolution**: This phase gets the customer''s review of the developed, tested,
    and published upgrades.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Agile software development process
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Agile software development process is an alternative to the traditional
    software development one. It is more like a process which helps frequent and efficient
    release of production with minimal bugs.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Agile process is based on the following principles:'
  prefs: []
  type: TYPE_NORMAL
- en: Continuous delivery of software upgrades and customer feedback at each stage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Additional improvements are welcome at any stage of the development cycle
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Stable releases should be frequent (in weeks)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Continuous communication between the business team and the developers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Continuous improvement towards technical excellence and good design
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working software is the principal measure of progress
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Continuous adaptation towards changing circumstances
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How does the Agile software development process work?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the Agile software development process, the complete system is divided into
    different phases, all modules or features are delivered in iterations, and cross-functional
    teams from various areas such as planning, unit testing, design, requirement analysis,
    coding, and so on work simultaneously. As a result, every team member is involved
    in the process, and there is no single person sitting idle, whereas, in the traditional
    SDLC, when the software is in the development phase, the remaining teams either
    sit idle or underutilized. All this makes the Agile process more advantageous
    over the traditional mode. The following diagram shows information about the workflow
    of the Agile development process:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00107.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding diagram, you won't find any requirement analysis or design
    phases, as those are accumulated in high-level planning.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the sequence of events in an Agile process:'
  prefs: []
  type: TYPE_NORMAL
- en: We start with initial planning, which gives us the details about the software
    features, and then, the goals are defined in high-level planning.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the goals are set, the developer starts coding for the required feature.
    Once the software upgrade is ready, the testing team (QA) starts executing both
    unit and integration testing.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If any bugs are found, they are fixed immediately, and then the code is delivered
    for client testing (that is, on stage or the pre-production environment). At this
    stage, the code is not released yet.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the code passes all client-based testing, which could be UI-based testing,
    then the code is pushed to production; otherwise, it iterates through the same
    cycle again.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now that we have understood the Agile work process, let''s get to know its
    advantages over the traditional SDLC, which are listed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: In Agile, each functionality can be developed and demonstrated frequently and
    quickly. The idea here is to develop features without bugs until its deployment
    in a week or so. This ensures that the customer is happy with the additional features.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There is no separate team for development, testing, or otherwise. There is a
    single team, which consists of 8-10 members (based on the requirements), and each
    member is capable of doing everything.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Agile promotes teamwork.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It requires minimal documentation.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Agile is best suited for parallel features development.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Looking at the preceding advantages, now companies have started adopting the
    Agile SDLC in their software development.
  prefs: []
  type: TYPE_NORMAL
- en: So far, we have been looking at the methodologies which are adopted as part
    of software development. Let's now look at a very crucial aspect of the Agile
    process, that is, continuous integration, which makes our development job easier.
  prefs: []
  type: TYPE_NORMAL
- en: Continuous integration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Continuous integration is a process of collaborating the code into the mainline
    code base. In simple words, continuous integration helps developers to test their
    new code at the initial stage by creating frequent builds while they are developing
    and generating test results, and if everything works, then merging the code to
    the mainline code.
  prefs: []
  type: TYPE_NORMAL
- en: 'This can be understood by the following diagram, which depicts the issues that
    occur during SDLC:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00108.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'There are, basically, the following types of issues that occur during continuous
    integration:'
  prefs: []
  type: TYPE_NORMAL
- en: Build failure before integration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integration failures
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Build failure (after integration)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In order to solve those issues, the developer needs to modify the code to fix
    it, and the complete integration process is repeated again until the feature is
    successfully deployed.
  prefs: []
  type: TYPE_NORMAL
- en: Jenkins - a continuous integration tool
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Jenkins is an open-source tool to perform continuous integration and build automation.
    It has the same purpose as any other continuous integration tool, such as Bamboo
    (CirclCI), which tests the code as early as possible in the development stage.
  prefs: []
  type: TYPE_NORMAL
- en: In Jenkins, you define the set of instructions to deploy your application over
    different application environments (development, pre-production stage, and so
    on).
  prefs: []
  type: TYPE_NORMAL
- en: Before going forward to set up a job (basically, a project) in Jenkins, and
    learn about the Jenkins plugins, let's first set up Jenkins and configure it as
    per our requirements.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Jenkins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Installation for Jenkins is straightforward in every environment whether it
    is Linux (Debian, Red Hat, and the like), Windows, or macOS.
  prefs: []
  type: TYPE_NORMAL
- en: Prerequisite
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Make sure you have Java 8 installed on your Ubuntu system. If it is not installed,
    you can follow the instructions given at the following link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://medium.com/appliedcode/how-to-install-java-8-jdk-8u45-on-ubuntu-linuxmint-via-ppa-1115d64ae325](https://medium.com/appliedcode/how-to-install-java-8-jdk-8u45-on-ubuntu-linuxmint-via-ppa-1115d64ae325).'
  prefs: []
  type: TYPE_NORMAL
- en: Installation on a Debian (Ubuntu)-based system
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Follow the steps listed next to install Jenkins on a Debian-based system:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We begin our Jenkins installation by adding the Jenkins key to the APT package
    list by executing this command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, update the source file with the server that needs to be communicated
    to validate the key, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the source list file is updated, update the APT repository by executing
    the following command at the terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we are ready to install Jenkins over Ubuntu; use the following command
    to do so:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that the installation is completed, remember that Jenkins runs on port
    `8080` by default. But if you want to run it over a different port, then you need
    to update the following line in the Jenkins configuration file (`/etc/default/jenkins`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, check the Jenkins GUI by using this URL:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the installation is local, then go to [`http://localhost:8080/`](http://localhost:8080/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the installation is on a remote machine, go to [`http://ip-address:8080`](http://ip-address:8080)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Remember, in this case, we have installed the Jenkins version (2.61); the previous
    as well as upcoming steps are valid for Jenkins version 2.x.x.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you see the following screen, it means your installation is successful:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00109.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: As you can see in the preceding image, there is a path where your default password
    is stored inside the system where Jenkins is installed.
  prefs: []
  type: TYPE_NORMAL
- en: This proves that Jenkins is installed successfully.
  prefs: []
  type: TYPE_NORMAL
- en: '**Installation on Windows** Jenkins installation on Windows is pretty simple.
    Usually, on a Windows machine, Jenkins is not run as a service. But if you want
    to enable it as a service (which is optional), you can follow the complete installation
    Jenkins docs for Windows at the following URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://wiki.Jenkins-ci.org/display/JENKINS/Installing+Jenkins+as+a+Windows+service#InstallingJenkinsasaWindowsservice-InstallJenkinsasaWindowsservice](https://wiki.Jenkins-ci.org/display/JENKINS/Installing+Jenkins+as+a+Windows+service#InstallingJenkinsasaWindowsservice-InstallJenkinsasaWindowsservice).'
  prefs: []
  type: TYPE_NORMAL
- en: Configuring Jenkins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'It''s time to configure Jenkins, So, let''s get the password from the path
    specified (that is, `/var/lib/Jenkins/secrets/initialAdminPassword`) from your
    system, paste it into the space provided in the installation wizard, and click
    on Continue. You should see a screen similar to the following one after hitting
    Continue:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00110.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: In the next screen, you will see the screen where you can install the plugins
    which we will need for the integration. We will go with the Install suggested
    plugins option for now. Note that we can install additional plugins after the
    initial configuration as well. So, no need to worry!
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you click on Install suggested plugins, you will see the following screen,
    which shows the progress of the plugin installation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00111.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: It might take a while for the plugin installation. All these plugins are suggested
    by Jenkins, as you might require them during your project-related jobs.
  prefs: []
  type: TYPE_NORMAL
- en: Once the plugin installation is complete, it will ask you to create an admin
    user to access the Jenkins console. Note that for setting up Jenkins, we used
    temporary credentials.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00112.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Once you have entered the user details, click on Save and Finish to complete
    the setup.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00113.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Your Jenkins setup is successfully completed.
  prefs: []
  type: TYPE_NORMAL
- en: Automating Jenkins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will cover the different parts of the Jenkins configuration,
    and will take a look at how we can successfully create our first job and build
    our application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Ideally, our Jenkins home page, after successful login, should look something
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00114.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Securing Jenkins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is highly recommended to set up the Jenkins security to make your console
    secure, because we are exposing our application to Jenkins.
  prefs: []
  type: TYPE_NORMAL
- en: From the Jenkins home page, click on Manage Jenkins to navigate to the settings
    section of Jenkins, then click on Configure Global Security in the right pane
    to open the security panel.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the Configure Global Security section, we can manage user authorization
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00115.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: As you can see in the preceding screenshot, here, you can define an access list
    for the users based on their role. Generally, in large organizations, user access
    is provided to different people based on their usage so that Jenkins security
    can be maintained. Usually, we go with either a Unix-based user/group database
    or Jenkins, own user database.
  prefs: []
  type: TYPE_NORMAL
- en: Plugins management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Plugins management is very important, as these plugins give us the capability
    to integrate different environments (which could be cloud platform) or on-premises
    resources with Jenkins, and also give us the capability to manage data on our
    resources like app servers, database servers, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00116.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'From the Manage Jenkins Panel, select the Manage Plugins option to open the
    Manage Plugins panel, which would look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00117.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: In this panel, you will able to install, uninstall, and upgrade any specific
    plugins from the system. From the same panel, you can upgrade Jenkins as well.
  prefs: []
  type: TYPE_NORMAL
- en: Version control systems
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Jenkins can be used mainly to either build a particular application code, or
    to deploy code over any infrastructure platform (that is, for continuous deployment).
  prefs: []
  type: TYPE_NORMAL
- en: Nowadays, organizations store their application code over any version control
    system, such as Git, where the administrator has central control, and can provide
    the required access based on the user role. Also, since we are talking of continuous
    integration, then it is recommended to store the application code at a centralized
    location with version control to maintain the integrity of the code.
  prefs: []
  type: TYPE_NORMAL
- en: So, in order to maintain the version code, make sure you install the Git plugin
    from the Manage plugin panel.
  prefs: []
  type: TYPE_NORMAL
- en: 'To clone a Git repository via Jenkins, you need to enter the email and username
    for your Jenkins system. For this, switch to your job directory, and run the Git
    config command as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: This needs to be set up in order to download the code from the repository, or
    at the time of merging the branches in Git, and other cases.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a Jenkins job
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now we are ready to set up our first Jenkins job. As discussed earlier, each
    job is created to perform certain specific tasks, which could be individual or
    could be in a pipeline.
  prefs: []
  type: TYPE_NORMAL
- en: According to Andrew Phillips, ideally, a pipeline breaks down the software delivery
    process into stages. Each stage is aimed at verifying the quality of the new features
    from a different angle to validate the new functionality, and to prevent errors
    from affecting your users. If any error is encountered, a feedback is returned
    in the form of reports, and it is ensured that the required quality of the software
    is achieved.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to initiate job creation, on the Jenkins home page, click on either
    New item on the left-hand side, or click on the create new jobs link in the right-hand
    side pane:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00118.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you click on it, it will open a wizard which will ask for your project/job
    name as well as the type of job you want to create, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00119.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The description is already provided along with the project type to give us an
    overview of the different options available in Jenkins. These types need to selected,
    as they have different configurations based on the type.
  prefs: []
  type: TYPE_NORMAL
- en: Note that since we are working on the latest Jenkins version, it is possible
    that some of the project types might not be there in the older versions, so make
    sure you have the latest Jenkins installed.
  prefs: []
  type: TYPE_NORMAL
- en: 'For now, we will select the Freestyle project, specify a unique job name, and
    then click on OK to continue to configure our job. Once you click on OK, you will
    see the following page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00120.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding page, you can define your job details such as Project name,
    Description, GitHub project, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, click on the Source Code Management tab; you will see the following screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00121.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'In this preceding section, you will define your source code details. You also
    need to set up the Jenkins user credentials if you haven''t done so previously
    in the configuration section. Click on the Add button near credentials if it is
    not set up. It will open a popup, which will look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00122.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The user you define here (that is, the admin) needs to have permission in the
    code repository to access it.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are ways by which you can set up authentication for the mentioned user
    on the repository, which are defined in Kind (the drop-down menu):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00123.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'It is important to note that Jenkins will immediately test the credentials
    against the repository URL mentioned. If it fails, it will show you the error
    as seen in this screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00124.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Assuming that the credentials match against the repository URL, let''s move
    on to clicking the Build Trigger tab to scroll on it. The following screen shows
    the Build Trigger options which can be imposed on a job for continuous deployment:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00125.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: This Build Trigger section is very important, as it determines how often your
    build should run, and also the parameters which trigger your build. For example,
    if you want to build your application after every Git commit, you can select the
    option Build when a change is pushed to GitBucket.
  prefs: []
  type: TYPE_NORMAL
- en: So, as soon as the developer commits any changes in the repository in a certain
    branch (generally, master), then this job gets triggered automatically. It's like
    a hook on top of your repository, and it keeps a track of the activities on it.
    Alternatively, if you want to build your application or run this job periodically,
    then you can specify the condition like this-- `H/15 * * * *`--in Poll SCM to
    schedule, which means that this job will run every 15 minutes. It is similar to
    a cron job, which we, usually, set up in Linux-based systems.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next two sections, **Build environment** and **Build**, are defined for
    workspace-related tasks. Since we are dealing with a Python-based application,
    and we have already built our application, we can skip these sections for now.
    But if you have an application written in Java or a .NET application, you can
    go with the ANT and Maven build tools, and branch to build. Alternatively, if
    you want to build a Python-based application, then go for tools such as pyBuilder
    ([http://pybuilder.github.io/](http://pybuilder.github.io/)). The following screen
    shows the build option:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00126.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Once you are done, you can click on the next tab, which is Post-build Actions.
    This is used to define what needs to be done once the build is successful. Because
    of this section, Jenkins can also be used as a continuous deployment tool. So,
    in this post-build action, you can specify the platform where your application
    needs to be deployed, such as on an AWS EC2 machine, Code deploy, Azure VM, or
    others.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the post-build section, in the context of continuous integration, we can
    also perform operations such as Git merge after a successful build, publish results
    on Git, and so on. Also, you can set up email notifications for your stakeholders
    to give them updates about the build results over email. See the following screenshot
    for more details:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00127.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'That''s all. Once you have filled the required details, click on Save to save
    the configuration. Now you are ready to build your application--click on the Build
    Now link in the left panel, as seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00128.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Note: For first time build execution, you need to trigger it manually if you
    haven''t set the poll SCM or the Build Triggers section.'
  prefs: []
  type: TYPE_NORMAL
- en: That's all we have from Jenkins at this point of time in terms of job creation.
    However, we will be using Jenkins as a continuous delivery and continuous integration
    tool in the upcoming chapters, where we deploy our React application that we created
    in the previous chapters on different platforms such as AWS, Azure, or Docker.
    We will also see the integration of the AWS service with Jenkins to automate application
    delivery to the GitHub repository by a single commit.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding continuous delivery
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Continuous delivery is a software engineering practice where production-ready
    features are produced and deployed to production.
  prefs: []
  type: TYPE_NORMAL
- en: The primary objective of continuous delivery is to perform successful application
    deployments irrespective of the platform, which could be a large-scale distributed
    system or a complex production environment.
  prefs: []
  type: TYPE_NORMAL
- en: In multinational companies, we always ensure that the application code is in
    a stable as well as deployable state even if there are many developers working
    on the different application components at the same time. In continuous delivery,
    we also ensure that unit testing and integration testing are successfully performed,
    making it production ready.
  prefs: []
  type: TYPE_NORMAL
- en: Need for continuous delivery
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It has been assumed that if we try to deploy software more frequently, we should
    expect lower levels of stability and reliability in our systems, but that's not
    entirely correct. Continuous delivery provides practices which provide incredible
    competitive advantages for organizations that are willing to release stable and
    reliable software in a competitive market.
  prefs: []
  type: TYPE_NORMAL
- en: 'The practices in continuous delivery give us the following important benefits:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Risk free releases**: The primary requirement of any application in a software
    release is to have a minimal or zero downtime. After all, it''s always about business,
    and the user should not be affected because of frequent releases. By using patterns
    such as BlueGreenDeployment ([https://martinfowler.com/bliki/BlueGreenDeployment.html](https://martinfowler.com/bliki/BlueGreenDeployment.html)),
    we can achieve zero downtime during deployments.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Competitive market**: In continuous delivery, all the teams, such as the
    build and deployment team, testing team, developers, and others, work together,
    which makes different activities such as testing, integration, and so on, happen
    on a daily basis. This makes the feature release process faster (a week or two),
    and we will have frequent releases to the production environment for customer
    usage.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Quality improvement**: In continuous delivery, developers don''t need to
    worry about the testing process, as it is taken care of by the pipeline, and showcases
    the result to the QA team as well. This enables the QA team and the developers
    to take a closer look at exploratory testing, usability testing, and performance
    and security testing, which can improve the customer experience.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Better products**: By using continuous delivery in build, test, deployment,
    and environment setups, we reduce the cost of making and delivering incremental
    changes in software, which makes the product much better over the course of time.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Continuous delivery versus continuous deployment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Continuous delivery and continuous deployment are similar in terms of the stages
    they have to build, tests, and the software release cycles they have to deploy,
    but they are slightly different in terms of the *process*, which you can understand
    from the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00129.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: In continuous deployment, production-ready code is directly deployed to the
    production environment once it passes all the testing checks, which makes the
    software release frequent. But in the case of continuous delivery, the production-ready
    application code is not deployed unless manually triggered or approved by the
    concerned authority.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Throughout the chapter, we discussed the CI and CD tools such as Jenkins, and
    also looked at the different functionalities of the same. It is very crucial to
    understand these tools at this stage, as most companies which deal with cloud
    platforms use these processes for their software development as well as deployment.
    So, now that you have understood the deployment pipeline, you are ready to understand
    the platform where we will deploy our application.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will talk about Docker (based on the container technology).
    I'm sure most of you have heard of Docker before, so stay tuned for a deep exposure
    to Docker. See you in the next chapter!
  prefs: []
  type: TYPE_NORMAL
