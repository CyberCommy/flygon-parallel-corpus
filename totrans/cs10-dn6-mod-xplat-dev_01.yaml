- en: '01'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '01'
- en: Hello, C#! Welcome, .NET!
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 你好，C#! 欢迎，.NET！
- en: In this first chapter, the goals are setting up your development environment,
    understanding the similarities and differences between modern .NET, .NET Core,
    .NET Framework, Mono, Xamarin, and .NET Standard, creating the simplest application
    possible with C# 10 and .NET 6 using various code editors, and then discovering
    good places to look for help.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在这第一章中，目标是设置你的开发环境，理解现代.NET、.NET Core、.NET Framework、Mono、Xamarin和.NET Standard之间的相似性和差异，使用各种代码编辑器创建尽可能简单的C#
    10和.NET 6应用程序，然后发现寻求帮助的好地方。
- en: 'The GitHub repository for this book has solutions using full application projects
    for all code tasks and notebooks when possible:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 这本书的GitHub存储库包含了所有代码任务和笔记本的完整应用程序项目的解决方案：
- en: '[https://github.com/markjprice/cs10dotnet6](https://github.com/markjprice/cs10dotnet6)'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/markjprice/cs10dotnet6](https://github.com/markjprice/cs10dotnet6)'
- en: 'Simply press the . (dot) key or change `.com` to `.dev` in the link above to
    change the GitHub repository into a live editor using Visual Studio Code for the
    Web, as shown in *Figure 1.1* :'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 只需按下.（点）键或在上面的链接中将`.com`更改为`.dev`，即可将GitHub存储库更改为使用Visual Studio Code for the
    Web进行实时编辑，如*图1.1*所示：
- en: '![Graphical user interface, text, application Description automatically generated](img/Image00007.jpg)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面，文本，应用程序描述自动生成](img/Image00007.jpg)'
- en: 'Figure 1.1: Visual Studio Code for the Web live editing the book''s GitHub
    repository'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.1：Visual Studio Code for the Web实时编辑该书的GitHub存储库
- en: This is great to run alongside your chosen code editor as you work through the
    book's coding tasks. You can compare your code to the solution code and easily
    copy and paste parts if needed.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 这对于在你选择的代码编辑器旁边运行是很好的，你可以将你的代码与解决方案代码进行比较，如果需要，可以轻松地复制和粘贴部分代码。
- en: Throughout this book, I use the term **modern .NET** to refer to .NET 6 and
    its predecessors like .NET 5 that come from .NET Core. I use the term **legacy
    .NET** to refer to .NET Framework, Mono, Xamarin, and .NET Standard. Modern .NET
    is a unification of those legacy platforms and standards.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在整本书中，我使用术语“现代.NET”来指代.NET 6及其前身，如来自.NET Core的.NET 5。我使用术语“传统.NET”来指代.NET Framework、Mono、Xamarin和.NET
    Standard。现代.NET是这些传统平台和标准的统一。
- en: 'After this first chapter, the book can be divided into three parts: first,
    the grammar and vocabulary of the C# language; second, the types available in
    .NET for building app features; and third, examples of common cross-platform apps
    you can build using C# and .NET.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在这第一章之后，这本书可以分为三个部分：第一部分是C#语言的语法和词汇；第二部分是.NET中可用的类型，用于构建应用程序功能；第三部分是使用C#和.NET构建的常见跨平台应用程序的示例。
- en: Most people learn complex topics best by imitation and repetition rather than
    reading a detailed explanation of the theory; therefore, I will not overload you
    with detailed explanations of every step throughout this book. The idea is to
    get you to write some code and see it run.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数人通过模仿和重复学习复杂的主题，而不是阅读详细的理论解释；因此，我不会在整本书中详细解释每一步。想法是让你编写一些代码并看到它运行。
- en: You don't need to know all the nitty-gritty details immediately. That will be
    something that comes with time as you build your own apps and go beyond what any
    book can teach you.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 你不需要立即了解所有细节。随着时间的推移，随着你构建自己的应用程序并超越任何书籍所能教授的内容，这些细节会逐渐明朗起来。
- en: In the words of Samuel Johnson, author of the English dictionary in 1755, I
    have committed "a few wild blunders, and risible absurdities, from which no work
    of such multiplicity is free." I take sole responsibility for these and hope you
    appreciate the challenge of my attempt to lash the wind by writing this book about
    rapidly evolving technologies like C# and .NET, and the apps that you can build
    with them.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 用塞缪尔·约翰逊（Samuel Johnson）的话来说，他是1755年英语词典的作者，我犯了“一些荒唐的错误和可笑的荒谬之处，这是任何如此多元化的作品所不可避免的。”
    我对此负有全部责任，并希望你能欣赏我尝试撰写这本关于快速发展的技术如C#和.NET以及你可以用它们构建的应用程序的书籍的挑战。
- en: 'This first chapter covers the following topics:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 第一章涵盖以下主题：
- en: Setting up your development environment
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置你的开发环境
- en: Understanding .NET
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解.NET
- en: Building console apps using Visual Studio 2022
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Visual Studio 2022构建控制台应用程序
- en: Building console apps using Visual Studio Code
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Visual Studio Code构建控制台应用程序
- en: Exploring code using .NET Interactive Notebooks
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用.NET交互式笔记本来探索代码
- en: Reviewing the folders and files for projects
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 审查项目的文件夹和文件
- en: Making good use of the GitHub repository for this book
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 充分利用GitHub存储库
- en: Looking for help
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 寻求帮助
- en: Setting up your development environment
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置你的开发环境
- en: 'Before you start programming, you''ll need a code editor for C#. Microsoft
    has a family of code editors and **Integrated Development Environments** (**IDEs**
    ), which include:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始编程之前，你需要一个C#的代码编辑器。微软有一系列代码编辑器和集成开发环境（IDE），包括：
- en: Visual Studio 2022 for Windows
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Windows的Visual Studio 2022
- en: Visual Studio 2022 for Mac
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Mac的Visual Studio 2022
- en: Visual Studio Code for Windows, Mac, or Linux
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Windows、Mac或Linux的Visual Studio Code
- en: GitHub Codespaces
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GitHub Codespaces
- en: Third parties have created their own C# code editors, for example, JetBrains
    Rider.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 第三方已经创建了他们自己的C#代码编辑器，例如JetBrains Rider。
- en: Choosing the appropriate tool and application type for learning
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 选择适合学习的工具和应用类型
- en: What is the best tool and application type for learning C# and .NET?
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 学习C#和.NET的最佳工具和应用类型是什么？
- en: When learning, the best tool is one that helps you write code and configuration
    but does not hide what is really happening. IDEs provide graphical user interfaces
    that are friendly to use, but what are they doing for you underneath? A more basic
    code editor that is closer to the action while providing help to write your code
    is better while you are learning.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在学习时，最好的工具是能帮助你编写代码和配置，但不会隐藏实际发生的事情。IDE提供了友好的图形用户界面，但在底层为你做了什么呢？在学习时，更接近行动并提供帮助编写代码的基本代码编辑器更好。
- en: Having said that, you can make the argument that the best tool is the one you
    are already familiar with or that you or your team will use as your daily development
    tool. For that reason, I want you to be free to choose any C# code editor or IDE
    to complete the coding tasks in this book, including Visual Studio Code, Visual
    Studio for Windows, Visual Studio for Mac, or even JetBrains Rider.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 话虽如此，您可以提出这样的论点，即最好的工具是您已经熟悉的工具，或者您或您的团队将作为日常开发工具使用的工具。因此，我希望您可以自由选择任何C#代码编辑器或IDE来完成本书中的编码任务，包括Visual
    Studio Code、Visual Studio for Windows、Visual Studio for Mac，甚至JetBrains Rider。
- en: In the third edition of this book, I gave detailed step-by-step instructions
    for both Visual Studio for Windows and Visual Studio Code for all coding tasks.
    Unfortunately, that got messy and confusing quickly. In this sixth edition, I
    give detailed step-by-step instructions for how to create multiple projects in
    both Visual Studio 2022 for Windows and Visual Studio Code only in *Chapter 1*
    . After that, I give names of projects and general instructions that work with
    all tools so you can use whichever tool you prefer.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的第三版中，我为Windows的Visual Studio和所有编码任务的Visual Studio Code提供了详细的逐步说明。不幸的是，情况很快变得混乱和令人困惑。在第六版中，我仅在*第1章*中提供了如何在Windows的Visual
    Studio 2022和Visual Studio Code中创建多个项目的详细逐步说明。之后，我提供了项目名称和适用于所有工具的一般说明，因此您可以使用您喜欢的任何工具。
- en: The best application type for learning the C# language constructs and many of
    the .NET libraries is one that does not distract with unnecessary application
    code. For example, there is no need to create an entire Windows desktop application
    or a website just to learn how to write a `switch` statement.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 学习C#语言构造和许多.NET库的最佳应用类型是不会分散注意力的应用程序代码。例如，没有必要创建整个Windows桌面应用程序或网站，只是为了学习如何编写`switch`语句。
- en: For that reason, I believe the best method for learning the C# and .NET topics
    in *Chapters 1* to *12* is to build console applications. Then, in *Chapter 13*
    to *19* onward, you will build websites, services, and graphical desktop and mobile
    apps.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我认为学习*第1*至*12*章中的C#和.NET主题的最佳方法是构建控制台应用程序。然后，在*第13*至*19*章以及以后，您将构建网站、服务以及图形桌面和移动应用程序。
- en: Pros and cons of the .NET Interactive Notebooks extension
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: .NET Interactive Notebooks扩展的优缺点
- en: Another benefit of Visual Studio Code is the .NET Interactive Notebooks extension.
    This extension provides an easy and safe place to write simple code snippets.
    It enables you to create a single notebook file that mixes "cells" of Markdown
    (richly formatted text) and code using C# and other related languages, such as
    PowerShell, F#, and SQL (for databases).
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio Code的另一个好处是.NET Interactive Notebooks扩展。该扩展提供了一个简单且安全的地方来编写简单的代码片段。它使您能够创建一个混合使用C#和其他相关语言（如PowerShell、F#和SQL（用于数据库））的Markdown（格式丰富的文本）和代码的“单元格”的单个笔记本文件。
- en: 'However, .NET Interactive Notebooks does have some limitations:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，.NET Interactive Notebooks确实有一些限制：
- en: They cannot read input from the user, for example, you cannot use `ReadLine`
    or `ReadKey` .
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们无法从用户那里读取输入，例如，您不能使用`ReadLine`或`ReadKey`。
- en: They cannot have arguments passed to them.
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们不能接受传递给它们的参数。
- en: They do not allow you to define your own namespaces.
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们不允许您定义自己的命名空间。
- en: They do not have any debugging tools (but these are coming in the future).
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们没有任何调试工具（但这些将来会推出）。
- en: Using Visual Studio Code for cross-platform development
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用Visual Studio Code进行跨平台开发
- en: The most modern and lightweight code editor to choose from, and the only one
    from Microsoft that is cross-platform, is Microsoft Visual Studio Code. It can
    run on all common operating systems, including Windows, macOS, and many varieties
    of Linux, including Red Hat Enterprise Linux (RHEL) and Ubuntu.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 选择最现代和轻量级的代码编辑器，也是微软唯一跨平台的代码编辑器，就是Microsoft Visual Studio Code。它可以在包括Windows、macOS和许多Linux变体在内的所有常见操作系统上运行，包括Red
    Hat Enterprise Linux（RHEL）和Ubuntu。
- en: Visual Studio Code is a good choice for modern cross-platform development because
    it has an extensive and growing set of extensions to support many languages beyond
    C#.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio Code是现代跨平台开发的不错选择，因为它有大量且不断增长的扩展，支持除了C#之外的许多语言。
- en: Being cross-platform and lightweight, it can be installed on all platforms that
    your apps will be deployed to for quick bug fixes and so on. Choosing Visual Studio
    Code means a developer can use a cross-platform code editor to develop cross-platform
    apps.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 作为跨平台和轻量级的工具，它可以安装在您的应用程序将部署到的所有平台上，以进行快速的错误修复等。选择Visual Studio Code意味着开发人员可以使用跨平台代码编辑器来开发跨平台应用程序。
- en: Visual Studio Code has strong support for web development, although it currently
    has weak support for mobile and desktop development.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio Code对Web开发有很好的支持，尽管目前对移动和桌面开发的支持较弱。
- en: Visual Studio Code is supported on ARM processors so that you can develop on
    Apple Silicon computers and Raspberry Pi.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio Code支持ARM处理器，因此您可以在Apple Silicon计算机和Raspberry Pi上进行开发。
- en: Visual Studio Code is by far the most popular integrated development environment,
    with over 70% of professional developers selecting it in the Stack Overflow 2021
    survey.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio Code是迄今为止最受欢迎的集成开发环境，超过70%的专业开发人员在Stack Overflow 2021调查中选择了它。
- en: Using GitHub Codespaces for development in the cloud
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在云中使用GitHub Codespaces进行开发
- en: GitHub Codespaces is a fully configured development environment based on Visual
    Studio Code that can be spun up in an environment hosted in the cloud and accessed
    through any web browser. It supports Git repos, extensions, and a built-in command-line
    interface so you can edit, run, and test from any device.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub Codespaces是基于Visual Studio Code的完全配置的开发环境，可以在云中托管的环境中启动，并通过任何Web浏览器访问。它支持Git存储库、扩展和内置命令行界面，因此您可以从任何设备编辑、运行和测试。
- en: Using Visual Studio for Mac for general development
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用Visual Studio for Mac进行一般开发
- en: Microsoft Visual Studio 2022 for Mac can create most types of applications,
    including console apps, websites, web services, desktop, and mobile apps.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: Microsoft Visual Studio 2022 for Mac可以创建大多数类型的应用程序，包括控制台应用程序、网站、Web服务、桌面和移动应用程序。
- en: To compile apps for Apple operating systems like iOS to run on devices like
    the iPhone and iPad, you must have Xcode, which only runs on macOS.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: Using Visual Studio for Windows for general development
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Microsoft Visual Studio 2022 for Windows can create most types of applications,
    including console apps, websites, web services, desktop, and mobile apps. Although
    you can use Visual Studio 2022 for Windows with its Xamarin extensions to write
    a cross-platform mobile app, you still need macOS and Xcode to compile it.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: It only runs on Windows, version 7 SP1 or later. You must run it on Windows
    10 or Windows 11 to create **Universal Windows Platform** (**UWP** ) apps that
    are installed from the Microsoft Store and run in a sandbox to protect your computer.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: What I used
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To write and test the code for this book, I used the following hardware:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: HP Spectre (Intel) laptop
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Apple Silicon Mac mini (M1) desktop
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Raspberry Pi 400 (ARM v8) desktop
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'And I used the following software:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: 'Visual Studio Code on:'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: macOS on an Apple Silicon Mac mini (M1) desktop
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Windows 10 on an HP Spectre (Intel) laptop
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ubuntu 64 on a Raspberry Pi 400
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Visual Studio 2022 for Windows on:'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Windows 10 on an HP Spectre (Intel) laptop
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Visual Studio 2022 for Mac on:'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: macOS on an Apple Silicon Mac mini (M1) desktop
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I hope that you have access to a variety of hardware and software too, because
    seeing the differences in platforms deepens your understanding of development
    challenges, although any one of the above combinations is enough to learn the
    fundamentals of C# and .NET and how to build practical apps and websites.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: '**More Information** : You can learn how to write code with C# and .NET using
    a Raspberry Pi 400 with Ubuntu Desktop 64-bit by reading an extra article that
    I wrote at the following link: [https://github.com/markjprice/cs9dotnet5-extras/blob/main/raspberry-pi-ubuntu64/README.md](https://github.com/markjprice/cs9dotnet5-extras/blob/main/raspberry-pi-ubuntu64/README.md)
    .'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: Deploying cross-platform
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Your choice of code editor and operating system for development does not limit
    where your code gets deployed.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: '.NET 6 supports the following platforms for deployment:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: '**Windows** : Windows 7 SP1, or later. Windows 10 version 1607, or later, including
    Windows 11\. Windows Server 2012 R2 SP1, or later. Nano Server version 1809, or
    later.'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Mac** : macOS Mojave (version 10.14), or later.'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Linux** : Alpine Linux 3.13, or later. CentOS 7, or later. Debian 10, or
    later. Fedora 32, or later. openSUSE 15, or later. Red Hat Enterprise Linux (RHEL)
    7, or later. SUSE Enterprise Linux 12 SP2, or later. Ubuntu 16.04, 18.04, 20.04,
    or later.'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Android** : API 21, or later.'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**iOS** : 10, or later.'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Windows ARM64 support in .NET 5 and later means you can develop on, and deploy
    to, Windows ARM devices like Microsoft Surface Pro X. But developing on an Apple
    M1 Mac using Parallels and a Windows 10 ARM virtual machine is apparently twice
    as fast!
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: Downloading and installing Visual Studio 2022 for Windows
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Many professional Microsoft developers use Visual Studio 2022 for Windows in
    their day-to-day development work. Even if you choose to use Visual Studio Code
    to complete the coding tasks in this book, you might want to familiarize yourself
    with Visual Studio 2022 for Windows too.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: If you do not have a Windows computer, then you can skip this section and continue
    to the next section where you will download and install Visual Studio Code on
    macOS or Linux.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: 'Since October 2014, Microsoft has made a professional quality edition of Visual
    Studio for Windows available to students, open source contributors, and individuals
    for free. It is called Community Edition. Any of the editions are suitable for
    this book. If you have not already installed it, let''s do so now:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: 'Download Microsoft Visual Studio 2022 version 17.0 or later for Windows from
    the following link: [https://visualstudio.microsoft.com/downloads/](https://visualstudio.microsoft.com/downloads/)
    .'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start the installer.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'On the **Workloads** tab, select the following:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**工作负载**选项卡上，选择以下内容：
- en: '**ASP.NET and web development**'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ASP.NET和Web开发**'
- en: '**Azure development**'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Azure开发**'
- en: '**.NET desktop development**'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**.NET桌面开发**'
- en: '**Desktop development with C++**'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用C++进行桌面开发**'
- en: '**Universal Windows Platform development**'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**通用Windows平台开发**'
- en: '**Mobile development with .NET**'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用.NET进行移动开发**'
- en: 'On the **Individual components** tab, in the **Code tools** section, select
    the following:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**单独组件**选项卡上，在**代码工具**部分，选择以下内容：
- en: '**Class Designer**'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**类设计师**'
- en: '**Git for Windows**'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Windows的Git**'
- en: '**PreEmptive Protection - Dotfuscator**'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**PreEmptive Protection - Dotfuscator**'
- en: Click **Install** and wait for the installer to acquire the selected software
    and install it.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**安装**，等待安装程序获取所选软件并安装。
- en: When the installation is complete, click **Launch** .
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装完成后，点击**启动**。
- en: 'The first time that you run Visual Studio, you will be prompted to sign in.
    If you have a Microsoft account, you can use that account. If you don''t, then
    register for a new one at the following link: [https://signup.live.com/](https://signup.live.com/)
    .'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一次运行Visual Studio时，您将被提示登录。如果您有Microsoft帐户，可以使用该帐户。如果没有，则可以在以下链接注册一个新帐户：[https://signup.live.com/](https://signup.live.com/)。
- en: The first time that you run Visual Studio, you will be prompted to configure
    your environment. For **Development Settings** , choose **Visual C#** . For the
    color theme, I chose **Blue** , but you can choose whatever tickles your fancy.
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一次运行Visual Studio时，您将被提示配置您的环境。对于**开发设置**，请选择**Visual C#**。对于颜色主题，我选择了**蓝色**，但您可以选择任何您喜欢的。
- en: If you want to customize your keyboard shortcuts, navigate to **Tools** | **Options…**
    , and then select the **Keyboard** section.
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您想要定制您的键盘快捷键，导航到**工具** | **选项...**，然后选择**键盘**部分。
- en: Microsoft Visual Studio for Windows keyboard shortcuts
  id: totrans-106
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Windows版Microsoft Visual Studio的键盘快捷键
- en: 'In this book, I will avoid showing keyboard shortcuts since they are often
    customized. Where they are consistent across code editors and commonly used, I
    will try to show them. If you want to identify and customize your keyboard shortcuts,
    then you can, as shown at the following link: [https://docs.microsoft.com/en-us/visualstudio/ide/identifying-and-customizing-keyboard-shortcuts-in-visual-studio](https://docs.microsoft.com/en-us/visualstudio/ide/identifying-and-customizing-keyboard-shortcuts-in-visual-studio)
    .'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我将避免显示键盘快捷键，因为它们经常被定制。如果它们在代码编辑器中保持一致并且被广泛使用，我会尽量展示它们。如果您想识别和定制您的键盘快捷键，那么您可以在以下链接中找到相关信息：[https://docs.microsoft.com/en-us/visualstudio/ide/identifying-and-customizing-keyboard-shortcuts-in-visual-studio](https://docs.microsoft.com/en-us/visualstudio/ide/identifying-and-customizing-keyboard-shortcuts-in-visual-studio)。
- en: Downloading and installing Visual Studio Code
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 下载并安装Visual Studio Code
- en: Visual Studio Code has rapidly improved over the past couple of years and has
    pleasantly surprised Microsoft with its popularity. If you are brave and like
    to live on the bleeding edge, then there is an Insiders edition, which is a daily
    build of the next version.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio Code在过去几年里迅速改进，并且以其受欢迎程度令微软惊喜。如果您勇敢并且喜欢尝试最新技术，那么有Insiders版本，这是下一个版本的每日构建。
- en: Even if you plan to only use Visual Studio 2022 for Windows for development,
    I recommend that you download and install Visual Studio Code and try the coding
    tasks in this chapter using it, and then decide if you want to stick with just
    using Visual Studio 2022 for the rest of the book.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 即使您打算仅在Windows上使用Visual Studio 2022进行开发，我建议您下载并安装Visual Studio Code，并尝试使用它进行本章的编码任务，然后决定是否要继续只使用Visual
    Studio 2022进行本书的其余部分。
- en: 'Let''s now download and install Visual Studio Code, the .NET SDK, and the C#
    and .NET Interactive Notebooks extensions:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们下载并安装Visual Studio Code、.NET SDK以及C#和.NET Interactive笔记本扩展：
- en: 'Download and install either the Stable build or the Insiders edition of Visual
    Studio Code from the following link: [https://code.visualstudio.com/](https://code.visualstudio.com/)
    .'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从以下链接下载并安装Visual Studio Code的稳定版本或Insiders版本：[https://code.visualstudio.com/](https://code.visualstudio.com/)。
- en: '**More Information** : If you need more help installing Visual Studio Code,
    you can read the official setup guide at the following link: [https://code.visualstudio.com/docs/setup/setup-overview](https://code.visualstudio.com/docs/setup/setup-overview)
    .'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '**更多信息**：如果您需要更多帮助安装Visual Studio Code，可以阅读以下链接的官方设置指南：[https://code.visualstudio.com/docs/setup/setup-overview](https://code.visualstudio.com/docs/setup/setup-overview)。'
- en: 'Download and install the .NET SDKs for versions 3.1, 5.0, and 6.0 from the
    following link: [https://www.microsoft.com/net/download](https://www.microsoft.com/net/download)
    .'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从以下链接下载并安装版本3.1、5.0和6.0的.NET SDK：[https://www.microsoft.com/net/download](https://www.microsoft.com/net/download)。
- en: To fully learn how to control .NET SDKs, we need multiple versions installed.
    .NET Core 3.1, .NET 5.0, and .NET 6.0 are the three currently supported versions.
    You can safely install multiple ones side by side. You will learn how to target
    the one you want throughout this book.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完全学会如何控制.NET SDK，我们需要安装多个版本。.NET Core 3.1、.NET 5.0和.NET 6.0是目前支持的三个版本。您可以安全地并排安装多个版本。在本书中，您将学习如何选择您想要的版本。
- en: To install the C# extension, you must first launch the Visual Studio Code application.
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要安装C#扩展，您必须首先启动Visual Studio Code应用程序。
- en: In Visual Studio Code, click the **Extensions** icon or navigate to **View**
    | **Extensions** .
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Visual Studio Code中，点击**扩展**图标或导航到**视图** | **扩展**。
- en: C# is one of the most popular extensions available, so you should see it at
    the top of the list, or you can enter `C#` in the search box.
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: C#是最受欢迎的扩展之一，因此您应该在列表顶部看到它，或者您可以在搜索框中输入`C#`。
- en: Click **Install** and wait for supporting packages to download and install.
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**安装**，等待支持包下载并安装。
- en: Enter `.NET Interactive` in the search box to find the **.NET Interactive Notebooks**
    extension.
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在搜索框中输入`.NET Interactive`以找到**.NET Interactive笔记本**扩展。
- en: Click **Install** and wait for it to install.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**安装**，等待安装完成。
- en: Installing other extensions
  id: totrans-122
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装其他扩展
- en: 'In later chapters of this book, you will use more extensions. If you want to
    install them now, all the extensions that we will use are shown in the following
    table:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的后面章节中，您将使用更多的扩展。如果您现在想要安装它们，我们将使用的所有扩展都显示在以下表格中：
- en: '| Extension name and identifier | Description |'
  id: totrans-124
  prefs: []
  type: TYPE_TB
  zh: '| 扩展名和标识符 | 描述 |'
- en: '| C# for Visual Studio Code (powered by OmniSharp)`ms-dotnettools.csharp` |
    C# editing support, including syntax highlighting, IntelliSense, Go to Definition,
    Find All References, debugging support for .NET, and support for `csproj` projects
    on Windows, macOS, and Linux. |'
  id: totrans-125
  prefs: []
  type: TYPE_TB
  zh: '| C# for Visual Studio Code (powered by OmniSharp)`ms-dotnettools.csharp` |
    包括语法高亮、智能感知、跳转到定义、查找所有引用、.NET 的调试支持以及对 Windows、macOS 和 Linux 上的 `csproj` 项目的支持。
    |'
- en: '| .NET Interactive Notebooks`ms-dotnettools.dotnet-interactive-vscode` | This
    extension adds support for using .NET Interactive in a Visual Studio Code notebook.
    It has a dependency on the Jupyter extension (`ms-toolsai.jupyter` ). |'
  id: totrans-126
  prefs: []
  type: TYPE_TB
  zh: '| .NET Interactive Notebooks`ms-dotnettools.dotnet-interactive-vscode` | 此扩展添加了对在
    Visual Studio Code 笔记本中使用 .NET Interactive 的支持。它依赖于 Jupyter 扩展 (`ms-toolsai.jupyter`
    )。 |'
- en: '| MSBuild project tools`tinytoy.msbuild-project-tools` | Provides IntelliSense
    for MSBuild project files, including autocomplete for `<PackageReference>` elements.
    |'
  id: totrans-127
  prefs: []
  type: TYPE_TB
  zh: '| MSBuild 项目工具`tinytoy.msbuild-project-tools` | 为 MSBuild 项目文件提供智能感知，包括 `<PackageReference>`
    元素的自动完成。 |'
- en: '| REST Client`humao.rest-client` | Send an HTTP request and view the response
    directly in Visual Studio Code. |'
  id: totrans-128
  prefs: []
  type: TYPE_TB
  zh: '| REST Client`humao.rest-client` | 直接在 Visual Studio Code 中发送 HTTP 请求并查看响应。
    |'
- en: '| ILSpy .NET Decompiler`icsharpcode.ilspy-vscode` | Decompile MSIL assemblies
    – support for modern .NET, .NET Framework, .NET Core, and .NET Standard. |'
  id: totrans-129
  prefs: []
  type: TYPE_TB
  zh: '| ILSpy .NET 反编译器`icsharpcode.ilspy-vscode` | 反编译 MSIL 程序集 - 支持现代 .NET、.NET
    Framework、.NET Core 和 .NET Standard。 |'
- en: '| Azure Functions for Visual Studio Code`ms-azuretools.vscode-azurefunctions`
    | Create, debug, manage, and deploy serverless apps directly from VS Code. It
    has dependencies on Azure Account (`ms-vscode.azure-account` ) and Azure Resources
    (`ms-azuretools.vscode-azureresourcegroups` ) extensions. |'
  id: totrans-130
  prefs: []
  type: TYPE_TB
  zh: '| Azure Functions for Visual Studio Code`ms-azuretools.vscode-azurefunctions`
    | 直接从 VS Code 创建、调试、管理和部署无服务器应用。它依赖于 Azure Account (`ms-vscode.azure-account`
    ) 和 Azure Resources (`ms-azuretools.vscode-azureresourcegroups` ) 扩展。 |'
- en: '| GitHub Repositories`github.remotehub` | Browse, search, edit, and commit
    to any remote GitHub repository directly from within Visual Studio Code. |'
  id: totrans-131
  prefs: []
  type: TYPE_TB
  zh: '| GitHub 仓库`github.remotehub` | 直接在 Visual Studio Code 中浏览、搜索、编辑和提交到任何远程 GitHub
    仓库。 |'
- en: '| SQL Server (mssql) for Visual Studio Code`ms-mssql.mssql` | For developing
    Microsoft SQL Server, Azure SQL Database, and SQL Data Warehouse everywhere with
    a rich set of functionalities. |'
  id: totrans-132
  prefs: []
  type: TYPE_TB
  zh: '| SQL Server (mssql) for Visual Studio Code`ms-mssql.mssql` | 在任何地方开发 Microsoft
    SQL Server、Azure SQL 数据库和 SQL 数据仓库，具有丰富的功能集。 |'
- en: '| Protobuf 3 support for Visual Studio Code`zxh404.vscode-proto3` | Syntax
    highlighting, syntax validation, code snippets, code completion, code formatting,
    brace matching, and line and block commenting. |'
  id: totrans-133
  prefs: []
  type: TYPE_TB
  zh: '| Visual Studio Code 的 Protobuf 3 支持`zxh404.vscode-proto3` | 语法高亮、语法验证、代码片段、代码完成、代码格式化、大括号匹配以及行和块注释。
    |'
- en: Understanding Microsoft Visual Studio Code versions
  id: totrans-134
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 了解 Microsoft Visual Studio Code 的版本
- en: 'Microsoft releases a new feature version of Visual Studio Code (almost) every
    month and bug fix versions more frequently. For example:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 微软几乎每个月发布 Visual Studio Code 的新功能版本，更频繁地发布 bug 修复版本。例如：
- en: Version 1.59, August 2021 feature release
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 版本 1.59，2021 年 8 月功能版本
- en: Version 1.59.1, August 2021 bug fix release
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 版本 1.59.1，2021 年 8 月 bug 修复版本
- en: The version used in this book is 1.59, but the version of Microsoft Visual Studio
    Code is less important than the version of the C# for Visual Studio Code extension
    that you installed.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 本书使用的版本是 1.59，但 Microsoft Visual Studio Code 的版本不如您安装的 C# for Visual Studio
    Code 扩展的版本重要。
- en: While the C# extension is not required, it provides IntelliSense as you type,
    code navigation, and debugging features, so it's something that's very handy to
    install and keep updated to support the latest C# language features.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然不需要 C# 扩展，但它提供了您输入时的智能感知、代码导航和调试功能，因此安装并保持更新以支持最新的 C# 语言特性非常方便。
- en: Microsoft Visual Studio Code keyboard shortcuts
  id: totrans-140
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Microsoft Visual Studio Code 的键盘快捷键
- en: In this book, I will avoid showing keyboard shortcuts used for tasks like creating
    a new file since they are often different on different operating systems. The
    situations where I will show keyboard shortcuts are when you need to repeatedly
    press the key, for example, while debugging. These are also more likely to be
    consistent across operating systems.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我将避免显示用于任务的键盘快捷键，比如创建新文件，因为它们在不同的操作系统上通常是不同的。我将展示键盘快捷键的情况是当您需要重复按键时，例如在调试时。这些情况更有可能在不同操作系统上保持一致。
- en: 'If you want to customize your keyboard shortcuts for Visual Studio Code, then
    you can, as shown at the following link: [https://code.visualstudio.com/docs/getstarted/keybindings](https://code.visualstudio.com/docs/getstarted/keybindings)
    .'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想要自定义 Visual Studio Code 的键盘快捷键，可以参考以下链接：[https://code.visualstudio.com/docs/getstarted/keybindings](https://code.visualstudio.com/docs/getstarted/keybindings)
    。
- en: 'I recommend that you download a PDF of keyboard shortcuts for your operating
    system from the following list:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 我建议您从以下列表中下载适用于您操作系统的键盘快捷键的 PDF：
- en: '**Windows** : [https://code.visualstudio.com/shortcuts/keyboard-shortcuts-windows.pdf](https://code.visualstudio.com/shortcuts/keyboard-shortcuts-windows.pdf)'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Windows** : [https://code.visualstudio.com/shortcuts/keyboard-shortcuts-windows.pdf](https://code.visualstudio.com/shortcuts/keyboard-shortcuts-windows.pdf)'
- en: '**macOS** : [https://code.visualstudio.com/shortcuts/keyboard-shortcuts-macos.pdf](https://code.visualstudio.com/shortcuts/keyboard-shortcuts-macos.pdf)'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**macOS** : [https://code.visualstudio.com/shortcuts/keyboard-shortcuts-macos.pdf](https://code.visualstudio.com/shortcuts/keyboard-shortcuts-macos.pdf)'
- en: '**Linux** : [https://code.visualstudio.com/shortcuts/keyboard-shortcuts-linux.pdf](https://code.visualstudio.com/shortcuts/keyboard-shortcuts-linux.pdf)'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Linux** : [https://code.visualstudio.com/shortcuts/keyboard-shortcuts-linux.pdf](https://code.visualstudio.com/shortcuts/keyboard-shortcuts-linux.pdf)'
- en: Understanding .NET
  id: totrans-147
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解 .NET
- en: .NET 6, .NET Core, .NET Framework, and Xamarin are related and overlapping platforms
    for developers used to build applications and services. In this section, I'm going
    to introduce you to each of these .NET concepts.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: .NET 6、.NET Core、.NET Framework和Xamarin是相关且重叠的开发平台，用于构建应用程序和服务。在本节中，我将向您介绍这些.NET概念。
- en: Understanding .NET Framework
  id: totrans-149
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解.NET Framework
- en: .NET Framework is a development platform that includes a **Common Language Runtime**
    (**CLR** ), which manages the execution of code, and a **Base Class Library**
    (**BCL** ), which provides a rich library of classes to build applications from.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: .NET Framework是一个开发平台，包括**公共语言运行时**（**CLR**），用于管理代码的执行，以及**基础类库**（**BCL**），提供丰富的类库来构建应用程序。
- en: Microsoft originally designed .NET Framework to have the possibility of being
    cross-platform, but Microsoft put their implementation effort into making it work
    best with Windows.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 微软最初设计.NET Framework具有跨平台的可能性，但微软将他们的实现努力放在使其与Windows最好地配合使用。
- en: Since .NET Framework 4.5.2, it has been an official component of the Windows
    operating system. Components have the same support as their parent products, so
    4.5.2 and later follow the life cycle policy of the Windows OS on which it is
    installed. .NET Framework is installed on over one billion computers, so it must
    change as little as possible. Even bug fixes can cause problems, so it is updated
    infrequently.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 自.NET Framework 4.5.2以来，它已成为Windows操作系统的官方组件。组件具有与其父产品相同的支持，因此4.5.2及更高版本遵循其安装的Windows操作系统的生命周期策略。.NET
    Framework已安装在超过10亿台计算机上，因此必须尽可能少地进行更改。即使是错误修复也可能会导致问题，因此更新频率较低。
- en: For .NET Framework 4.0 or later, all of the apps on a computer written for .NET
    Framework share the same version of the CLR and libraries stored in the **Global
    Assembly Cache** (**GAC** ), which can lead to issues if some of them need a specific
    version for compatibility.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 对于.NET Framework 4.0或更高版本，计算机上为.NET Framework编写的所有应用程序共享**全局程序集缓存**（**GAC**）中存储的CLR和库的相同版本，这可能会导致问题，如果其中一些应用程序需要特定版本以实现兼容性。
- en: '**Good Practice** : Practically speaking, .NET Framework is Windows-only and
    a legacy platform. Do not create new apps using it.'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '**良好实践**：从实际角度来看，.NET Framework仅适用于Windows，是一个传统的平台。不要使用它创建新的应用程序。'
- en: Understanding the Mono, Xamarin, and Unity projects
  id: totrans-155
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解Mono、Xamarin和Unity项目
- en: Third parties developed a .NET Framework implementation named the **Mono** project.
    Mono is cross-platform, but it fell well behind the official implementation of
    .NET Framework.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 第三方开发了一个名为**Mono**项目的.NET Framework实现。Mono是跨平台的，但远远落后于官方的.NET Framework实现。
- en: Mono has found a niche as the foundation of the **Xamarin** mobile platform
    as well as cross-platform game development platforms like **Unity** .
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: Mono已经成为**Xamarin**移动平台和跨平台游戏开发平台**Unity**的基础。
- en: Microsoft purchased Xamarin in 2016 and now gives away what used to be an expensive
    Xamarin extension for free with Visual Studio. Microsoft renamed the Xamarin Studio
    development tool, which could only create mobile apps, to Visual Studio for Mac
    and gave it the ability to create other types of projects like console apps and
    web services. With Visual Studio 2022 for Mac, Microsoft has replaced parts of
    the Xamarin Studio editor with parts from Visual Studio 2022 for Windows to provide
    closer parity of experience and performance. Visual Studio 2022 for Mac was also
    rewritten to be a truly native macOS UI app to improve reliability and work with
    macOS's built-in assistive technologies.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 微软在2016年收购了Xamarin，现在免费提供了曾经昂贵的Xamarin扩展，并将其与Visual Studio捆绑在一起。微软将只能创建移动应用程序的Xamarin
    Studio开发工具更名为Visual Studio for Mac，并赋予其创建其他类型项目（如控制台应用程序和Web服务）的能力。通过Visual Studio
    2022 for Mac，微软已经用Visual Studio 2022 for Windows的部分替换了Xamarin Studio编辑器的部分，以提供更接近的体验和性能。Visual
    Studio 2022 for Mac也被重写为真正的本地macOS UI应用程序，以提高可靠性并与macOS内置的辅助技术配合使用。
- en: Understanding .NET Core
  id: totrans-159
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解.NET Core
- en: Today, we live in a truly cross-platform world where modern mobile and cloud
    development have made Windows, as an operating system, much less important. Because
    of that, Microsoft has been working on an effort to decouple .NET from its close
    ties with Windows. While rewriting .NET Framework to be truly cross-platform,
    they've taken the opportunity to refactor and remove major parts that are no longer
    considered core.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 今天，我们生活在一个真正跨平台的世界，现代移动和云开发已经使作为操作系统的Windows变得不那么重要。因此，微软一直在努力将.NET与其与Windows的紧密联系解耦。在将.NET
    Framework重写为真正的跨平台时，他们抓住机会重构和删除不再被认为是核心的重要部分。
- en: This new product was branded .NET Core and includes a cross-platform implementation
    of the CLR known as CoreCLR and a streamlined BCL known as CoreFX.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 这个新产品被命名为.NET Core，并包括一个名为CoreCLR的跨平台CLR实现和一个名为CoreFX的精简BCL。
- en: Scott Hunter, Microsoft Partner Director Program Manager for .NET, has said
    that "Forty percent of our .NET Core customers are brand-new developers to the
    platform, which is what we want with .NET Core. We want to bring new people in."
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 微软.NET合作伙伴总监.NET项目经理Scott Hunter表示：“我们.NET Core客户中有40%是全新的开发人员，这正是我们希望.NET Core达到的效果。我们希望吸引新的开发人员。”
- en: .NET Core is fast-moving, and because it can be deployed side by side with an
    app, it can change frequently, knowing those changes will not affect other .NET
    Core apps on the same machine. Most improvements that Microsoft makes to .NET
    Core and modern .NET cannot be easily added to .NET Framework.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: .NET Core发展迅速，因为它可以与应用程序并行部署，所以它可能会经常发生变化，了解这些变化不会影响同一台机器上的其他.NET Core应用程序。微软对.NET
    Core和现代.NET所做的大多数改进都无法轻松地添加到.NET Framework中。
- en: Understanding the journey to one .NET
  id: totrans-164
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解通往一个.NET的旅程
- en: At the Microsoft Build developer conference in May 2020, the .NET team announced
    that their plans for the unification of .NET had been delayed. They said that
    .NET 5 would be released on November 10, 2020, and it would unify all the various
    .NET platforms except mobile. It would not be until .NET 6 in November 2021 that
    mobile will also be supported by the unified .NET platform.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在2020年5月的微软Build开发者大会上，.NET团队宣布他们关于.NET统一的计划已经延迟。他们表示.NET 5将于2020年11月10日发布，并将统一除移动外的所有各种.NET平台。直到2021年11月的.NET
    6版本，移动端也将被统一的.NET平台支持。
- en: .NET Core has been renamed .NET and the major version number has skipped the
    number four to avoid confusion with .NET Framework 4.x. Microsoft plans on annual
    major version releases every November, rather like Apple does major version number
    releases of iOS every September.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: .NET Core已更名为.NET，主要版本号跳过了数字四，以避免与.NET Framework 4.x混淆。微软计划每年11月发布一次主要版本，有点类似于苹果每年9月发布iOS的主要版本号。
- en: 'The following table shows when the key versions of modern .NET were released,
    when future releases are planned, and which version is used by the various editions
    of this book:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格显示了现代.NET的关键版本发布时间，未来发布计划以及本书各版本所使用的版本：
- en: '| Version | Released | Edition | Published |'
  id: totrans-168
  prefs: []
  type: TYPE_TB
  zh: '| 版本 | 发布时间 | 版本 | 发布时间 |'
- en: '| .NET Core RC1 | November 2015 | First | March 2016 |'
  id: totrans-169
  prefs: []
  type: TYPE_TB
  zh: '| .NET Core RC1 | 2015年11月 | 第一版 | 2016年3月 |'
- en: '| .NET Core 1.0 | June 2016 |  |  |'
  id: totrans-170
  prefs: []
  type: TYPE_TB
  zh: .NET Core 1.0 | 2016年6月 |  |  |
- en: '| .NET Core 1.1 | November 2016 |  |  |'
  id: totrans-171
  prefs: []
  type: TYPE_TB
  zh: .NET Core 1.1 | 2016年11月 |  |  |
- en: '| .NET Core 1.0.4 and .NET Core 1.1.1 | March 2017 | Second | March 2017 |'
  id: totrans-172
  prefs: []
  type: TYPE_TB
  zh: '| .NET Core 1.0.4 and .NET Core 1.1.1 | 2017年3月 | 第二版 | 2017年3月 |'
- en: '| .NET Core 2.0 | August 2017 |  |  |'
  id: totrans-173
  prefs: []
  type: TYPE_TB
  zh: '| .NET Core 2.0 | 2017年8月 |  |  |'
- en: '| .NET Core for UWP in Windows 10 Fall Creators Update | October 2017 | Third
    | November 2017 |'
  id: totrans-174
  prefs: []
  type: TYPE_TB
  zh: '| .NET Core for UWP in Windows 10 Fall Creators Update | 2017年10月 | 第三版 | 2017年11月
    |'
- en: '| .NET Core 2.1 (LTS) | May 2018 |  |  |'
  id: totrans-175
  prefs: []
  type: TYPE_TB
  zh: '| .NET Core 2.1 (LTS) | 2018年5月 |  |  |'
- en: '| .NET Core 2.2 (Current) | December 2018 |  |  |'
  id: totrans-176
  prefs: []
  type: TYPE_TB
  zh: '| .NET Core 2.2 (当前) | 2018年12月 |  |  |'
- en: '| .NET Core 3.0 (Current) | September 2019 | Fourth | October 2019 |'
  id: totrans-177
  prefs: []
  type: TYPE_TB
  zh: '| .NET Core 3.0 (当前) | 2019年9月 | 第四版 | 2019年10月 |'
- en: '| .NET Core 3.1 (LTS) | December 2019 |  |  |'
  id: totrans-178
  prefs: []
  type: TYPE_TB
  zh: '| .NET Core 3.1 (LTS) | 2019年12月 |  |  |'
- en: '| Blazor WebAssembly 3.2 (Current) | May 2020 |  |  |'
  id: totrans-179
  prefs: []
  type: TYPE_TB
  zh: Blazor WebAssembly 3.2 (当前) | 2020年5月 |  |  |
- en: '| .NET 5.0 (Current) | November 2020 | Fifth | November 2020 |'
  id: totrans-180
  prefs: []
  type: TYPE_TB
  zh: '| .NET 5.0 (当前) | 2020年11月 | 第五版 | 2020年11月 |'
- en: '| .NET 6.0 (LTS) | November 2021 | Sixth | November 2021 |'
  id: totrans-181
  prefs: []
  type: TYPE_TB
  zh: '| .NET 6.0 (LTS) | 2021年11月 | 第六版 | 2021年11月 |'
- en: '| .NET 7.0 (Current) | November 2022 | Seventh | November 2022 |'
  id: totrans-182
  prefs: []
  type: TYPE_TB
  zh: '| .NET 7.0 (当前) | 2022年11月 | 第七版 | 2022年11月 |'
- en: '| .NET 8.0 (LTS) | November 2023 | Eighth | November 2023 |'
  id: totrans-183
  prefs: []
  type: TYPE_TB
  zh: '| .NET 8.0 (LTS) | 2023年11月 | 第八版 | 2023年11月 |'
- en: .NET Core 3.1 included Blazor Server for building web components. Microsoft
    had also planned to include Blazor WebAssembly in that release, but it was delayed.
    Blazor WebAssembly was later released as an optional add-on for .NET Core 3.1\.
    I include it in the table above because it was versioned as 3.2 to exclude it
    from the LTS of .NET Core 3.1.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: .NET Core 3.1包括用于构建Web组件的Blazor Server。微软原本计划在该版本中包括Blazor WebAssembly，但推迟了。Blazor
    WebAssembly后来作为.NET Core 3.1的可选附加组件发布。我在上表中包括它，因为它的版本号为3.2，以排除它不在.NET Core 3.1的LTS范围内。
- en: Understanding .NET support
  id: totrans-185
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解.NET支持
- en: '.NET versions are either **Long Term Support** (**LTS** ) or **Current** ,
    as described in the following list:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: .NET版本要么是**长期支持**（**LTS**），要么是**当前**，如下列表所述：
- en: '**LTS** releases are stable and require fewer updates over their lifetime.
    These are a good choice for applications that you do not intend to update frequently.
    LTS releases will be supported for 3 years after general availability, or 1 year
    after the next LTS release ships, whichever is longer.'
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**LTS** 版本稳定，寿命内需要较少的更新。这些版本适用于您不打算经常更新的应用程序。LTS 版本将在通用可用性后支持3年，或者在下一个 LTS
    版本发布后的1年内支持，以较长者为准。'
- en: '**Current** releases include features that may change based on feedback. These
    are a good choice for applications that you are actively developing because they
    provide access to the latest improvements. After a 6-month maintenance period,
    or 18 months after general availability, the previous minor version will no longer
    be supported.'
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**当前** 版本包括可能根据反馈而更改的功能。这些版本适用于您正在积极开发的应用程序，因为它们提供了最新改进的访问权限。在6个月的维护期后，或者在通用可用性后的18个月内，之前的次要版本将不再得到支持。'
- en: Both receive critical fixes throughout their lifetime for security and reliability.
    You must stay up to date with the latest patches to get support. For example,
    if a system is running 1.0 and 1.0.1 has been released, 1.0.1 will need to be
    installed to get support.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 它们在寿命内都会接收到关于安全性和可靠性的关键修复。您必须及时更新最新的补丁以获得支持。例如，如果系统运行的是1.0版本，而1.0.1已发布，就需要安装1.0.1版本以获得支持。
- en: 'To better understand your choices of Current and LTS releases, it is helpful
    to see it visually, with 3-year-long black bars for LTS releases, and variable-length
    gray bars for Current releases that end with cross-hatching for the 6 months after
    a new major or minor release that they retain support for, as shown in *Figure
    1.2* :'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地理解您对当前和LTS版本的选择，以图形方式呈现是有帮助的，LTS版本为3年长的黑色条，当前版本为可变长度的灰色条，在新的主要或次要版本发布后的6个月内保持支持，如*图1.2*所示：
- en: '![Text Description automatically generated with low confidence](img/Image00008.jpg)'
  id: totrans-191
  prefs: []
  type: TYPE_IMG
  zh: '![Text Description automatically generated with low confidence](img/Image00008.jpg)'
- en: 'Figure 1.2: Support for various versions'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.2：各版本支持
- en: For example, if you had created a project using .NET Core 3.0, then when Microsoft
    released .NET Core 3.1 in December 2019, you had to upgrade your project to .NET
    Core 3.1 by March 2020\. (Before .NET 5, the maintenance period for Current releases
    was only three months.)
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果您使用.NET Core 3.0创建了一个项目，那么当微软在2019年12月发布.NET Core 3.1时，您必须在2020年3月之前将项目升级到.NET
    Core 3.1。（在.NET 5之前，当前版本的维护期仅为三个月。）
- en: If you need long-term support from Microsoft, then choose .NET 6.0 today and
    stick with it until .NET 8.0, even once Microsoft releases .NET 7.0\. This is
    because .NET 7.0 will be a current release and it will therefore lose support
    before .NET 6.0 does. Just remember that even with LTS releases you must upgrade
    to bug fix releases like 6.0.1.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您需要微软的长期支持，那么今天选择.NET 6.0并坚持到.NET 8.0，即使微软发布.NET 7.0。这是因为.NET 7.0将是一个当前版本，因此在.NET
    6.0之前失去支持。只需记住，即使使用LTS版本，您也必须升级到6.0.1等bug修复版本。
- en: 'All versions of .NET Core and modern .NET have reached their end of life except
    those shown in the following list:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 除以下列表中显示的版本外，所有版本的.NET Core和现代.NET都已经结束生命周期：
- en: .NET 5.0 will reach end of life in May 2022.
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: .NET 5.0将于2022年5月结束生命周期。
- en: .NET Core 3.1 will reach end of life on December 3, 2022.
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: .NET Core 3.1将于2022年12月3日结束生命周期。
- en: .NET 6.0 will reach end of life in November 2024.
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: .NET 6.0将于2024年11月结束生命周期。
- en: Understanding .NET Runtime and .NET SDK versions
  id: totrans-199
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 理解.NET Runtime和.NET SDK版本
- en: .NET Runtime versioning follows semantic versioning, that is, a major increment
    indicates breaking changes, minor increments indicate new features, and patch
    increments indicate bug fixes.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: .NET Runtime版本遵循语义版本控制，即，主要增量表示破坏性更改，次要增量表示新功能，补丁增量表示bug修复。
- en: .NET SDK versioning does not follow semantic versioning. The major and minor
    version numbers are tied to the runtime version it is matched with. The patch
    number follows a convention that indicates the major and minor versions of the
    SDK.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: .NET SDK版本不遵循语义版本控制。主要和次要版本号与其匹配的运行时版本相关联。补丁号遵循一种约定，表示SDK的主要和次要版本。
- en: 'You can see an example of this in the following table:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在以下表格中看到一个例子：
- en: '| Change | Runtime | SDK |'
  id: totrans-203
  prefs: []
  type: TYPE_TB
  zh: '| 变更 | 运行时 | SDK |'
- en: '| Initial release | 6.0.0 | 6.0.100 |'
  id: totrans-204
  prefs: []
  type: TYPE_TB
  zh: '| 初始发布 | 6.0.0 | 6.0.100 |'
- en: '| SDK bug fix | 6.0.0 | 6.0.101 |'
  id: totrans-205
  prefs: []
  type: TYPE_TB
  zh: '| SDK错误修复 | 6.0.0 | 6.0.101 |'
- en: '| Runtime and SDK bug fix | 6.0.1 | 6.0.102 |'
  id: totrans-206
  prefs: []
  type: TYPE_TB
  zh: '| 运行时和SDK错误修复 | 6.0.1 | 6.0.102 |'
- en: '| SDK new feature | 6.0.1 | 6.0.200 |'
  id: totrans-207
  prefs: []
  type: TYPE_TB
  zh: '| SDK新功能 | 6.0.1 | 6.0.200 |'
- en: Removing old versions of .NET
  id: totrans-208
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 移除旧版本的.NET
- en: .NET Runtime updates are compatible with a major version such as 6.x, and updated
    releases of the .NET SDK maintain the ability to build applications that target
    previous versions of the runtime, which enables the safe removal of older versions.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: .NET Runtime更新与6.x等主要版本兼容，更新的.NET SDK版本保持了构建针对先前版本的运行时的应用程序的能力，这使得可以安全地移除旧版本。
- en: 'You can see which SDKs and runtimes are currently installed using the following
    commands:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用以下命令查看当前安装的SDK和运行时：
- en: '`dotnet --list-sdks`'
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dotnet --list-sdks`'
- en: '`dotnet --list-runtimes`'
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dotnet --list-runtimes`'
- en: On Windows, use the **App & features** section to remove .NET SDKs. On macOS
    or Windows, use the `dotnet-core-uninstall` tool. This tool is not installed by
    default.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows上，使用“应用和功能”部分来移除.NET SDK。在macOS或Windows上，使用`dotnet-core-uninstall`工具。这个工具不是默认安装的。
- en: 'For example, while writing the fourth edition, I used the following command
    every month:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在撰写第四版时，我每个月都使用以下命令：
- en: '```cs'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: '```cs'
- en: dotnet-core-uninstall remove --all-previews-but-latest --sdk
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: dotnet-core-uninstall remove --all-previews-but-latest --sdk
- en: '```'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: What is different about modern .NET?
  id: totrans-218
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 现代.NET有何不同？
- en: Modern .NET is modularized compared to the legacy .NET Framework, which is monolithic.
    It is open source and Microsoft makes decisions about improvements and changes
    in the open. Microsoft has put particular effort into improving the performance
    of modern .NET.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 与传统的.NET Framework相比，现代.NET是模块化的，后者是单片的。它是开源的，微软在开放中做出改进和变化的决定。微软特别努力改进现代.NET的性能。
- en: It is smaller than the last version of .NET Framework due to the removal of
    legacy and non-cross-platform technologies. For example, workloads such as Windows
    Forms and **Windows Presentation Foundation** (**WPF** ) can be used to build
    **graphical user** **interface** (**GUI** ) applications, but they are tightly
    bound to the Windows ecosystem, so they are not included with .NET on macOS and
    Linux.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 由于删除了传统和非跨平台技术，它比.NET Framework的上一个版本要小。例如，工作负载，如Windows Forms和**Windows Presentation
    Foundation**（**WPF**）可用于构建**图形用户** **界面**（**GUI**）应用程序，但它们与Windows生态系统紧密绑定，因此不包括在macOS和Linux的.NET中。
- en: Windows development
  id: totrans-221
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Windows开发
- en: One of the features of modern .NET is support for running old Windows Forms
    and WPF applications using the Windows Desktop Pack that is included with the
    Windows version of .NET Core 3.1 or later, which is why it is bigger than the
    SDKs for macOS and Linux. You can make some small changes to your legacy Windows
    app if necessary, and then rebuild it for .NET 6 to take advantage of new features
    and performance improvements.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 现代.NET的一个特性是支持使用包含在Windows版本的.NET Core 3.1或更高版本中的Windows桌面包运行旧的Windows Forms和WPF应用程序，这就是为什么它比macOS和Linux的SDK更大。如果需要，您可以对旧的Windows应用程序进行一些小的更改，然后重新构建为.NET
    6，以利用新功能和性能改进。
- en: Web development
  id: totrans-223
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Web开发
- en: ASP.NET Web Forms and Windows Communication Foundation (WCF) are old web application
    and service technologies that fewer developers are choosing to use for new development
    projects today, so they have also been removed from modern .NET. Instead, developers
    prefer to use ASP.NET MVC, ASP.NET Web API, SignalR, and gRPC. These technologies
    have been refactored and combined into a platform that runs on modern .NET, named
    ASP.NET Core. You'll learn about the technologies in *Chapter 14* , *Building
    Websites Using ASP.NET Core Razor Pages* , *Chapter 15* , *Building Websites Using
    the Model-View-Controller Pattern* , *Chapter 16* , *Building and Consuming Web
    Services* , and *Chapter 18* , *Building and Consuming Specialized Services* (Chapter
    18 available at [https://github.com/markjprice/cs10dotnet6/blob/main/9781801077361_Bonus_Content.pdf](https://github.com/markjprice/cs10dotnet6/blob/main/9781801077361_Bonus_Content.pdf)
    ).
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
- en: '**More Information** : Some .NET Framework developers are upset that ASP.NET
    Web Forms, WCF, and Windows Workflow (WF) are missing from modern .NET and would
    like Microsoft to change their minds. There are open source projects to enable
    WCF and WF to migrate to modern .NET. You can read more at the following link:
    [https://devblogs.microsoft.com/dotnet/supporting-the-community-with-wf-and-wcf-oss-projects/](https://devblogs.microsoft.com/dotnet/supporting-the-community-with-wf-and-wcf-oss-projects/)
    . There is an open source project for Blazor Web Forms components at the following
    link: [https://github.com/FritzAndFriends/BlazorWebFormsComponents](https://github.com/FritzAndFriends/BlazorWebFormsComponents)
    .'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
- en: Database development
  id: totrans-226
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Entity Framework** (**EF** ) 6 is an object-relational mapping technology
    that is designed to work with data that is stored in relational databases such
    as Oracle and Microsoft SQL Server. It has gained baggage over the years, so the
    cross-platform API has been slimmed down, has been given support for non-relational
    databases like Microsoft Azure Cosmos DB, and has been renamed Entity Framework
    Core. You will learn about it in *Chapter 10* , *Working with Data Using Entity
    Framework Core* .'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
- en: If you have existing apps that use the old EF, then version 6.3 is supported
    on .NET Core 3.0 or later.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
- en: Themes of modern .NET
  id: totrans-229
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Microsoft has created a website using Blazor that shows the major themes of
    modern .NET: [https://themesof.net/](https://themesof.net/) .'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
- en: Understanding .NET Standard
  id: totrans-231
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The situation with .NET in 2019 was that there were three forked .NET platforms
    controlled by Microsoft, as shown in the following list:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
- en: '**.NET Core** : For cross-platform and new apps'
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**.NET Framework** : For legacy apps'
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Xamarin** : For mobile apps'
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each had strengths and weaknesses because they were all designed for different
    scenarios. This led to the problem that a developer had to learn three platforms,
    each with annoying quirks and limitations.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
- en: Because of that, Microsoft defined .NET Standard – a specification for a set
    of APIs that all .NET platforms could implement to indicate what level of compatibility
    they have. For example, basic support is indicated by a platform being compliant
    with .NET Standard 1.4.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
- en: With .NET Standard 2.0 and later, Microsoft made all three platforms converge
    on a modern minimum standard, which made it much easier for developers to share
    code between any flavor of .NET.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
- en: For .NET Core 2.0 and later, this added most of the missing APIs that developers
    need to port old code written for .NET Framework to the cross-platform .NET Core.
    However, some APIs are implemented but throw an exception to indicate to a developer
    that they should not actually be used! This is usually due to differences in the
    operating system on which you run .NET. You'll learn how to handle these exceptions
    in *Chapter 2* , *Speaking C#.*
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
- en: It is important to understand that .NET Standard is just a standard. You are
    not able to install .NET Standard in the same way that you cannot install HTML5\.
    To use HTML5, you must install a web browser that implements the HTML5 standard.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
- en: To use .NET Standard, you must install a .NET platform that implements the .NET
    Standard specification. The last .NET Standard, version 2.1, is implemented by
    .NET Core 3.0, Mono, and Xamarin. Some features of C# 8.0 require .NET Standard
    2.1\. .NET Standard 2.1 is not implemented by .NET Framework 4.8, so we should
    treat .NET Framework as legacy.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
- en: 'With the release of .NET 6 in November 2021, the need for .NET Standard has
    reduced significantly because there is now a single .NET for all platforms, including
    mobile. .NET 6 has a single BCL and two CLRs: CoreCLR is optimized for server
    or desktop scenarios like websites and Windows desktop apps, and the Mono runtime
    is optimized for mobile and web browser apps that have limited resources.'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
- en: Even now, apps and websites created for .NET Framework will need to be supported,
    so it is important to understand that you can create .NET Standard 2.0 class libraries
    that are backward compatible with legacy .NET platforms.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
- en: .NET platforms and tools used by the book editions
  id: totrans-244
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For the first edition of this book, which was written in March 2016, I focused
    on .NET Core functionality but used .NET Framework when important or useful features
    had not yet been implemented in .NET Core because that was before the final release
    of .NET Core 1.0\. Visual Studio 2015 was used for most examples, with Visual
    Studio Code shown only briefly.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
- en: The second edition was (almost) completely purged of all .NET Framework code
    examples so that readers were able to focus on .NET Core examples that truly run
    cross-platform.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
- en: The third edition completed the switch. It was rewritten so that all of the
    code was pure .NET Core. But giving step-by-step instructions for both Visual
    Studio Code and Visual Studio 2017 for all tasks added complexity.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
- en: The fourth edition continued the trend by only showing coding examples using
    Visual Studio Code for all but the last two chapters. In *Chapter 20* , *Building
    Windows Desktop Apps* , it used Visual Studio running on Windows 10, and in *Chapter
    21* , *Building Cross-Platform Mobile Apps* , it used Visual Studio for Mac.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
- en: In the fifth edition, *Chapter 20* , *Building Windows Desktop Apps* , was moved
    to *Appendix B* to make space for a new *Chapter 20* , *Building Web User Interfaces
    Using Blazor* . Blazor projects can be created using Visual Studio Code.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
- en: In this sixth edition, *Chapter 19* , *Building Mobile and Desktop Apps Using
    .NET MAUI* , was updated to show how mobile and desktop cross-platform apps can
    be created using Visual Studio 2022 and **.NET MAUI** (**Multi-platform App UI**
    ). You can find it at [https://github.com/markjprice/cs10dotnet6/blob/main/9781801077361_Bonus_Content.pdf](https://github.com/markjprice/cs10dotnet6/blob/main/9781801077361_Bonus_Content.pdf)
    .
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
- en: By the seventh edition and the release of .NET 7, Visual Studio Code will have
    an extension to support .NET MAUI. At that point, readers will be able to use
    Visual Studio Code for all examples in the book.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
- en: Understanding intermediate language
  id: totrans-252
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The C# compiler (named **Roslyn** ) used by the `dotnet` CLI tool converts your
    C# source code into **intermediate language** (**IL** ) code and stores the IL
    in an **assembly** (a DLL or EXE file). IL code statements are like assembly language
    instructions, which are executed by .NET's virtual machine, known as CoreCLR.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
- en: At runtime, CoreCLR loads the IL code from the assembly, the **just-in-time**
    (**JIT** ) compiler compiles it into native CPU instructions, and then it is executed
    by the CPU on your machine.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
- en: The benefit of this two-step compilation process is that Microsoft can create
    CLRs for Linux and macOS, as well as for Windows. The same IL code runs everywhere
    because of the second compilation step, which generates code for the native operating
    system and CPU instruction set.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
- en: Regardless of which language the source code is written in, for example, C#,
    Visual Basic, or F#, all .NET applications use IL code for their instructions
    stored in an assembly. Microsoft and others provide disassembler tools that can
    open an assembly and reveal this IL code, such as the ILSpy .NET Decompiler extension.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
- en: Comparing .NET technologies
  id: totrans-257
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can summarize and compare .NET technologies today, as shown in the following
    table:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
- en: '| Technology | Description | Host operating systems |'
  id: totrans-259
  prefs: []
  type: TYPE_TB
- en: '| Modern .NET | A modern feature set, full C# 8, 9, and 10 support, used to
    port existing apps or create new desktop, mobile, and web apps and services |
    Windows, macOS, Linux, Android, iOS |'
  id: totrans-260
  prefs: []
  type: TYPE_TB
- en: '| .NET Framework | A legacy feature set, limited C# 8 support, no C# 9 or 10
    support, used to maintain existing applications only | Windows only |'
  id: totrans-261
  prefs: []
  type: TYPE_TB
- en: '| Xamarin | Mobile and desktop apps only | Android, iOS, macOS |'
  id: totrans-262
  prefs: []
  type: TYPE_TB
- en: Building console apps using Visual Studio 2022
  id: totrans-263
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The goal of this section is to showcase how to build a console app using Visual
    Studio 2022 for Windows.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
- en: If you do not have a Windows computer or you want to use Visual Studio Code,
    then you can skip this section since the code will be the same, just the tooling
    experience is different.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
- en: Managing multiple projects using Visual Studio 2022
  id: totrans-266
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Visual Studio 2022 has a concept named a **solution** that allows you to open
    and manage multiple projects simultaneously. We will use a solution to manage
    the two projects that you will create in this chapter.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
- en: Writing code using Visual Studio 2022
  id: totrans-268
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's get started writing code!
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
- en: Start Visual Studio 2022.
  id: totrans-270
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Start window, click **Create a new project** .
  id: totrans-271
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Create a new project** dialog, enter `console` in the **Search for
    templates** box, and select **Console Application** , making sure that you have
    chosen the C# project template rather than another language, such as F# or Visual
    Basic, as shown in *Figure 1.3* :![](img/Image00009.jpg)
  id: totrans-272
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 1.3: Selecting the Console Application project template'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
- en: Click **Next** .
  id: totrans-274
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Configure your new project** dialog, enter `HelloCS` for the project
    name, enter `C:\Code` for the location, and enter `Chapter01` for the solution
    name, as shown in *Figure 1.4* :![](img/Image00010.jpg)
  id: totrans-275
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 1.4: Configuring names and locations for your new project'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
- en: Click **Next** .
  id: totrans-277
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We are deliberately going to use the older project template for .NET 5.0 to
    see what a full console application looks like. In the next section, you will
    create a console application using .NET 6.0 and see what has changed.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
- en: In the **Additional information** dialog, in the **Target Framework** drop-down
    list, note the choices of Current and long-term support versions of .NET, and
    then select **.NET 5.0 (Current)** and click **Create** .
  id: totrans-279
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In **Solution Explorer** , double-click to open the file named `Program.cs`
    , and note that **Solution Explorer** shows the **HelloCS** project, as shown
    in *Figure 1.5* :![](img/Image00011.jpg)
  id: totrans-280
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 1.5: Editing Program.cs in Visual Studio 2022'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
- en: In `Program.cs` , modify line 9 so that the text that is being written to the
    console says `Hello, C#!`
  id: totrans-282
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Compiling and running code using Visual Studio
  id: totrans-283
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The next task is to compile and run the code.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
- en: In Visual Studio, navigate to **Debug** | **Start Without Debugging** .
  id: totrans-285
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The output in the console window will show the result of running your application,
    as shown in *Figure 1.6* :![Graphical user interface, text, application Description
    automatically generated](img/Image00012.jpg)
  id: totrans-286
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 1.6: Running the console app on Windows'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
- en: Press any key to close the console window and return to Visual Studio.
  id: totrans-288
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **HelloCS** project and then, in the **Solution Explorer** toolbar,
    toggle on the **Show All Files** button, and note that the compiler-generated
    `bin` and `obj` folders are visible, as shown in *Figure 1.7* :![Graphical user
    interface, text, application, email Description automatically generated](img/Image00013.jpg)
  id: totrans-289
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 1.7: Showing the compiler-generated folders and files'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the compiler-generated folders and files
  id: totrans-291
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Two compiler-generated folders were created, named `obj` and `bin` . You do
    not need to look inside these folders or understand their files yet. Just be aware
    that the compiler needs to create temporary folders and files to do its work.
    You could delete these folders and their files, and they can be recreated later.
    Developers often do this to "clean" a project. Visual Studio even has a command
    on the **Build** menu named **Clean Solution** that deletes some of these temporary
    files for you. The equivalent command with Visual Studio Code is `dotnet clean`
    .
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
- en: The `obj` folder contains one compiled *object* file for each source code file.
    These objects haven't been linked together into a final executable yet.
  id: totrans-293
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `bin` folder contains the *binary* executable for the application or class
    library. We will look at this in more detail in *Chapter 7* , *Packaging and Distributing
    .NET Types* .
  id: totrans-294
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing top-level programs
  id: totrans-295
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You might be thinking that was a lot of code just to output `Hello, C#!` .
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
- en: Although the boilerplate code is written for you by the project template, is
    there a simpler way?
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
- en: Well, in C# 9 or later, there is, and it is known as **top-level programs**
    .
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s compare the console app created by the project template, as shown in
    the following code:'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
- en: '```cs'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
- en: using
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
- en: System;
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
- en: namespace
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
- en: HelloCS
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
- en: class
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
- en: Program
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
- en: static
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
- en: void
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
- en: Main
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
- en: (
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
- en: string
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
- en: '[] args'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
- en: )
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
- en: Console.WriteLine("Hello World!"
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
- en: );
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
- en: 'To the new top-level program minimum console app, as shown in the following
    code:'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
- en: '```cs'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
- en: using
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
- en: System;
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
- en: Console.WriteLine("Hello World!"
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
- en: );
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
- en: That is a lot simpler, right? If you had to start with a blank file and write
    all the statements yourself, this is better. But how does it work?
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
- en: During compilation, all the boilerplate code to define a namespace, the `Program`
    class, and its `Main` method, is generated and wrapped around the statements you
    write.
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
- en: 'Key points to remember about top-level programs include the following list:'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
- en: Any `using` statements still must to go at the top of the file.
  id: totrans-333
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There can be only one file like this in a project.
  id: totrans-334
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `using System;` statement at the top of the file imports the `System` namespace.
    This enables the `Console.WriteLine` statement to work. You will learn more about
    namespaces in the next chapter.
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
- en: Adding a second project using Visual Studio 2022
  id: totrans-336
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s add a second project to our solution to explore top-level programs:'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
- en: In Visual Studio, navigate to **File** | **Add** | **New Project** .
  id: totrans-338
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Add a new project** dialog, in **Recent project templates** , select
    **Console Application [C#]** and then click **Next** .
  id: totrans-339
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Configure your new project** dialog, for the **Project name** , enter
    `TopLevelProgram` , leave the location as `C:\Code\Chapter01` , and then click
    **Next** .
  id: totrans-340
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Additional information** dialog, select **.NET 6.0 (Long-term support)**
    , and then click **Create** .
  id: totrans-341
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In **Solution Explorer** , in the `TopLevelProgram` project, double-click `Program.cs`
    to open it.
  id: totrans-342
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In `Program.cs` , note the code consists of only a comment and a single statement
    because it uses the top-level program feature introduced in C# 9, as shown in
    the following code:'
  id: totrans-343
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
- en: // See https://aka.ms/new-console-template for more information
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
- en: Console.WriteLine("Hello, World!"
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
- en: );
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
- en: But when I introduced the concept of top-level programs earlier, we needed a
    `using System;` statement. Why don't we need that here?
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
- en: Implicitly imported namespaces
  id: totrans-350
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The trick is that we do still need to import the `System` namespace, but it
    is now done for us using a feature introduced in C# 10\. Let''s see how:'
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
- en: In **Solution Explorer** , select the `TopLevelProgram` project and toggle on
    the **Show All Files** button, and note that the compiler-generated `bin` and
    `obj` folders are visible.
  id: totrans-352
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Expand the `obj` folder, expand the `Debug` folder, expand the `net6.0` folder,
    and open the file named `TopLevelProgram.GlobalUsings.g.cs` .
  id: totrans-353
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Note that this file is automatically created by the compiler for projects that
    target .NET 6, and that it uses a feature introduced in C# 10 called **global
    imports** that imports some commonly used namespaces like `System` for use in
    all code files, as shown in the following code:'
  id: totrans-354
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
- en: // <autogenerated />
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
- en: global
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
- en: using
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
- en: global
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
- en: ::System;
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
- en: global
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
- en: using
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
- en: global
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
- en: ::System.Collections.Generic;
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
- en: global
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
- en: using
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
- en: global
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
- en: ::System.IO;
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
- en: global
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
- en: using
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
- en: global
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
- en: ::System.Linq;
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
- en: global
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
- en: using
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
- en: global
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
- en: ::System.Net.Http;
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
- en: global
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
- en: using
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
- en: global
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
- en: ::System.Threading;
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
- en: global
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
- en: using
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
- en: global
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
- en: ::System.Threading.Tasks;
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
- en: I will explain more about this feature in the next chapter. For now, just note
    that a significant change between .NET 5 and .NET 6 is that many of the project
    templates, like the one for console applications, use new language features to
    hide what is really happening.
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `TopLevelProgram` project, in `Program.cs` , modify the statement to
    output a different message and the version of the operating system, as shown in
    the following code:'
  id: totrans-387
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
- en: Console.WriteLine("Hello from a Top Level Program!"
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
- en: );
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
- en: Console.WriteLine(Environment.OSVersion.VersionString);
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
- en: In **Solution Explorer** , right-click the **Chapter01** solution, select **Set
    Startup Projects…** , set **Current selection** , and then click **OK** .
  id: totrans-393
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In **Solution Explorer** , click the **TopLevelProgram** project (or any file
    or folder within it), and note that Visual Studio indicates that **TopLevelProgram**
    is now the startup project by making the project name bold.
  id: totrans-394
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to **Debug** | **Start Without Debugging** to run the **TopLevelProgram**
    project, and note the result, as shown in *Figure 1.8* :![](img/Image00014.jpg)
  id: totrans-395
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 1.8: Running a top-level program in a Visual Studio solution with two
    projects on Windows'
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
- en: Building console apps using Visual Studio Code
  id: totrans-397
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The goal of this section is to showcase how to build a console app using Visual
    Studio Code.
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
- en: If you never want to try Visual Studio Code or .NET Interactive Notebooks, then
    please feel free to skip this section and the next, and then continue with the
    *Reviewing the folders and files for projects* section.
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
- en: Both the instructions and screenshots in this section are for Windows, but the
    same actions will work with Visual Studio Code on the macOS and Linux variants.
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
- en: 'The main differences will be native command-line actions such as deleting a
    file: both the command and the path are likely to be different on Windows or macOS
    and Linux. Luckily, the `dotnet` command-line tool will be identical on all platforms.'
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
- en: Managing multiple projects using Visual Studio Code
  id: totrans-402
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Visual Studio Code has a concept named a **workspace** that allows you to open
    and manage multiple projects simultaneously. We will use a workspace to manage
    the two projects that you will create in this chapter.
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
- en: Writing code using Visual Studio Code
  id: totrans-404
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's get started writing code!
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
- en: Start Visual Studio Code.
  id: totrans-406
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Make sure that you do not have any open files, folders, or workspaces.
  id: totrans-407
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to **File** | **Save Workspace As…** .
  id: totrans-408
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the dialog box, navigate to your user folder on macOS (mine is named `markjprice`
    ), your `Documents` folder on Windows, or any directory or drive in which you
    want to save your projects.
  id: totrans-409
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **New Folder** button and name the folder `Code` . (If you completed
    the section for Visual Studio 2022, then this folder will already exist.)
  id: totrans-410
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the `Code` folder, create a new folder named `Chapter01-vscode` .
  id: totrans-411
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the `Chapter01-vscode` folder, save the workspace as `Chapter01.code-workspace`
    .
  id: totrans-412
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to **File** | **Add Folder to Workspace…** or click the **Add Folder**
    button.
  id: totrans-413
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the `Chapter01-vscode` folder, create a new folder named `HelloCS` .
  id: totrans-414
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the `HelloCS` folder and click the **Add** button.
  id: totrans-415
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to **View** | **Terminal** .
  id: totrans-416
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We are deliberately going to use the older project template for .NET 5.0 to
    see what a full console application looks like. In the next section, you will
    create a console application using .NET 6.0 and see what has changed.
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
- en: 'In **TERMINAL** , make sure that you are in the `HelloCS` folder, and then
    use the `dotnet` command-line tool to create a new console app that targets .NET
    5.0, as shown in the following command:'
  id: totrans-418
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
- en: dotnet new console -f net5.0
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
- en: You will see that the `dotnet` command-line tool creates a new **Console Application**
    project for you in the current folder, and the **EXPLORER** window shows the two
    files created, `HelloCS.csproj` and `Program.cs` , and the `obj` folder, as shown
    in *Figure 1.9* :![](img/Image00015.jpg)
  id: totrans-422
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 1.9: The EXPLORER window will show that two files and a folder have
    been created'
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
- en: 'In **EXPLORER** , click on the file named `Program.cs` to open it in the editor
    window. The first time that you do this, Visual Studio Code may have to download
    and install C# dependencies like OmniSharp, .NET Core Debugger, and Razor Language
    Server, if it did not do this when you installed the C# extension or if they need
    updating. Visual Studio Code will show progress in the **Output** window and eventually
    the message `Finished` , as shown in the following output:'
  id: totrans-424
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
- en: Installing C# dependencies...
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
- en: 'Platform: win32, x86_64'
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
- en: Downloading package 'OmniSharp for Windows (.NET 4.6 / x64)' (36150 KB)....................
    Done!
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
- en: Validating download...
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
- en: Integrity Check succeeded.
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
- en: Installing package 'OmniSharp for Windows (.NET 4.6 / x64)'
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
- en: Downloading package '.NET Core Debugger (Windows / x64)' (45048 KB)....................
    Done!
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
- en: Validating download...
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
- en: Integrity Check succeeded.
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
- en: Installing package '.NET Core Debugger (Windows / x64)'
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
- en: Downloading package 'Razor Language Server (Windows / x64)' (52344 KB)....................
    Done!
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
- en: Installing package 'Razor Language Server (Windows / x64)'
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
- en: Finished
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
- en: The preceding output is from Visual Studio Code on Windows. When run on macOS
    or Linux, the output will look slightly different, but the equivalent components
    for your operating system will be downloaded and installed.
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
- en: Folders named `obj` and `bin` will have been created and when you see a notification
    saying that required assets are missing, click **Yes** , as shown in *Figure 1.10*
    :![Graphical user interface, text, application, email Description automatically
    generated](img/Image00016.jpg)
  id: totrans-441
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 1.10: Warning message to add required build and debug assets'
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
- en: If the notification disappears before you can interact with it, then you can
    click the bell icon in the far-right corner of the status bar to show it again.
  id: totrans-443
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After a few seconds, another folder named `.vscode` will be created with some
    files that are used by Visual Studio Code to provide features like IntelliSense
    during debugging, which you will learn more about in *Chapter 4* , *Writing, Debugging,
    and Testing Functions* .
  id: totrans-444
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In `Program.cs` , modify line 9 so that the text that is being written to the
    console says `Hello, C#!`
  id: totrans-445
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Good Practice** : Navigate to **File** | **Auto Save** . This toggle will
    save the annoyance of remembering to save before rebuilding your application each
    time.'
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
- en: Compiling and running code using the dotnet CLI
  id: totrans-447
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The next task is to compile and run the code:'
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
- en: 'Navigate to **View** | **Terminal** and enter the following command:'
  id: totrans-449
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
- en: dotnet run
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
- en: The output in the **TERMINAL** window will show the result of running your application,
    as shown in *Figure 1.11* :![Graphical user interface, text, application, email
    Description automatically generated](img/Image00017.jpg)
  id: totrans-453
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 1.11: The output of running your first console application'
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
- en: Adding a second project using Visual Studio Code
  id: totrans-455
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s add a second project to our workspace to explore top-level programs:'
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
- en: In Visual Studio Code, navigate to **File** | **Add Folder to Workspace…** .
  id: totrans-457
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the `Chapter01-vscode` folder, use the **New Folder** button to create a
    new folder named `TopLevelProgram` , select it, and click **Add** .
  id: totrans-458
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to **Terminal** | **New Terminal** , and in the drop-down list that
    appears, select **TopLevelProgram** . Alternatively, in **EXPLORER** , right-click
    the `TopLevelProgram` folder and then select **Open in Integrated Terminal** .
  id: totrans-459
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In **TERMINAL** , confirm that you are in the `TopLevelProgram` folder, and
    then enter the command to create a new console application, as shown in the following
    command:'
  id: totrans-460
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
- en: dotnet new console
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
- en: '**Good Practice** : When using workspaces, be careful when entering commands
    in **TERMINAL** . Be sure that you are in the correct folder before entering potentially
    destructive commands! That is why I got you to create a new terminal for `TopLevelProgram`
    before issuing the command to create a new console app.'
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **View** | **Command Palette** .
  id: totrans-465
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter `omni` , and then, in the drop-down list that appears, select **OmniSharp:
    Select Project** .'
  id: totrans-466
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the drop-down list of two projects, select the **TopLevelProgram** project,
    and when prompted, click **Yes** to add required assets to debug.
  id: totrans-467
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Good Practice** : To enable debugging and other useful features, like code
    formatting and Go to Definition, you must tell OmniSharp which project you are
    actively working on in Visual Studio Code. You can quickly toggle active projects
    by clicking the project/folder to the right of the flame icon on the left side
    of the status bar.'
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
- en: 'In **EXPLORER** , in the `TopLevelProgram` folder, select `Program.cs` , and
    then change the existing statement to output a different message and also output
    the operating system version string, as shown in the following code:'
  id: totrans-469
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
- en: Console.WriteLine("Hello from a Top Level Program!"
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
- en: );
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
- en: Console.WriteLine(Environment.OSVersion.VersionString);
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
- en: 'In **TERMINAL** , enter the command to run a program, as shown in the following
    command:'
  id: totrans-475
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
- en: dotnet run
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
- en: Note the output in the **TERMINAL** window, as shown in *Figure 1.12* :![](img/Image00018.jpg)
  id: totrans-479
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 1.12: Running a top-level program in a Visual Studio Code workspace
    with two projects on Windows'
  id: totrans-480
  prefs: []
  type: TYPE_NORMAL
- en: 'If you were to run the program on macOS Big Sur, the environment operating
    system would be different, as shown in the following output:'
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
- en: '```cs'
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
- en: Hello from a Top Level Program!
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
- en: Unix 11.2.3
  id: totrans-484
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
- en: Managing multiple files using Visual Studio Code
  id: totrans-486
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you have multiple files that you want to work with at the same time, then
    you can put them side by side as you edit them:'
  id: totrans-487
  prefs: []
  type: TYPE_NORMAL
- en: In **EXPLORER** , expand the two projects.
  id: totrans-488
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open both `Program.cs` files from the two projects.
  id: totrans-489
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click, hold, and drag the edit window tab for one of your open files to arrange
    them so that you can see both files at the same time.
  id: totrans-490
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Exploring code using .NET Interactive Notebooks
  id: totrans-491
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: .NET Interactive Notebooks makes writing code even easier than top-level programs.
    It requires Visual Studio Code, so if you did not install it earlier, please install
    it now.
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
- en: Creating a notebook
  id: totrans-493
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, we need to create a notebook:'
  id: totrans-494
  prefs: []
  type: TYPE_NORMAL
- en: In Visual Studio Code, close any open workspaces or folders.
  id: totrans-495
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to **View** | **Command Palette** .
  id: totrans-496
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Type `.net inter` , and then select **.NET Interactive: Create new blank notebook**
    , as shown in *Figure 1.13* :![](img/Image00019.jpg)'
  id: totrans-497
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 1.13: Creating a new blank .NET notebook'
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
- en: When prompted to select the file extension, choose **Create as '.dib'** .
  id: totrans-499
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`.dib` is an experimental file format defined by Microsoft to avoid confusion
    and compatibility issues with the .`ipynb` format used by Python interactive notebooks.
    The file extension was historically only for Jupyter notebooks that can contain
    an interactive (I) mix of data, Python code (PY), and output in a notebook file
    (NB). With .NET Interactive Notebooks, the concept has expanded to allow a mix
    of C#, F#, SQL, HTML, JavaScript, Markdown, and other languages. `.dib` is polyglot,
    meaning it supports mixed languages. Conversion between the `.dib` and `.ipynb`
    file formats is supported.'
  id: totrans-500
  prefs: []
  type: TYPE_NORMAL
- en: Select **C#** for the default language for code cells in the notebook.
  id: totrans-501
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If a newer version of .NET Interactive is available, you might have to wait
    for it to uninstall the older version and install the newer one. Navigate to **View**
    | **Output** and select **.NET Interactive : diagnostics** in the drop-down list.
    Please be patient. It can take a few minutes for the notebook to appear because
    it has to start up a hosting environment for .NET. If nothing happens after a
    few minutes, then close Visual Studio Code and restart it.'
  id: totrans-502
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once the .NET Interactive Notebooks extension is downloaded and installed,
    the **OUTPUT** window diagnostics will show that a Kernel process has started
    (your process and port number will be different from the output below), as shown
    in the following output, which has been edited to save space:'
  id: totrans-503
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  id: totrans-504
  prefs: []
  type: TYPE_NORMAL
- en: Extension started for VS Code Stable.
  id: totrans-505
  prefs: []
  type: TYPE_NORMAL
- en: '...'
  id: totrans-506
  prefs: []
  type: TYPE_NORMAL
- en: Kernel process 12516 Port 59565 is using tunnel uri http://localhost:59565/
  id: totrans-507
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  id: totrans-508
  prefs: []
  type: TYPE_NORMAL
- en: Writing and running code in a notebook
  id: totrans-509
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Next, we can write code in the notebook cells:'
  id: totrans-510
  prefs: []
  type: TYPE_NORMAL
- en: The first cell should already be set to **C# (.NET Interactive)** , but if it
    is set to anything else, then click the language selector in the bottom-right
    corner of the code cell and then select **C# (.NET Interactive)** as the language
    mode for that cell, and note your other choices of language for a code cell, as
    shown in *Figure 1.14* :![](img/Image00020.jpg)
  id: totrans-511
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 1.14: Changing the language for a code cell in a .NET Interactive notebook'
  id: totrans-512
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside the **C# (.NET Interactive)** code cell, enter a statement to output
    a message to the console, and note that you do not need to end the statement with
    a semicolon, as you normally would in a full application, as shown in the following
    code:'
  id: totrans-513
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  id: totrans-514
  prefs: []
  type: TYPE_NORMAL
- en: Console.WriteLine("Hello, .NET Interactive!"
  id: totrans-515
  prefs: []
  type: TYPE_NORMAL
- en: )
  id: totrans-516
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  id: totrans-517
  prefs: []
  type: TYPE_NORMAL
- en: Click the **Execute Cell** button to the left of the code cell and note the
    output that appears in the gray box under the code cell, as shown in *Figure 1.15*
    :![](img/Image00021.jpg)
  id: totrans-518
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 1.15: Running code in a notebook and seeing the output below'
  id: totrans-519
  prefs: []
  type: TYPE_NORMAL
- en: Saving a notebook
  id: totrans-520
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Like any other file, we should save the notebook before continuing further:'
  id: totrans-521
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **File** | **Save As…** .
  id: totrans-522
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change to the `Chapter01-vscode` folder and save the notebook as `Chapter01.dib`
    .
  id: totrans-523
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Close the `Chapter01.dib` editor tab.
  id: totrans-524
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Adding Markdown and special commands to a notebook
  id: totrans-525
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can mix and match cells containing Markdown and code with special commands:'
  id: totrans-526
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **File** | **Open File…** , and select the `Chapter01.dib` file.
  id: totrans-527
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you are prompted with `Do you` `trust the authors of these files?` , click
    **Open** .
  id: totrans-528
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Hover your mouse above the code block and click **+ Markup** to add a Markdown
    cell.
  id: totrans-529
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Type a heading level 1, as shown in the following Markdown:'
  id: totrans-530
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  id: totrans-531
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 1 - Hello, C#! Welcome, .NET!
  id: totrans-532
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Mixing *rich*
  id: totrans-533
  prefs: []
  type: TYPE_NORMAL
- en: '**text**'
  id: totrans-534
  prefs: []
  type: TYPE_NORMAL
- en: and code is cool!
  id: totrans-535
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  id: totrans-536
  prefs: []
  type: TYPE_NORMAL
- en: Click the tick in the top-right corner of the cell to stop editing the cell
    and view the processed Markdown.
  id: totrans-537
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If your cells are in the wrong order, then you can drag and drop to rearrange
    them.
  id: totrans-538
  prefs: []
  type: TYPE_NORMAL
- en: Hover between the Markdown cell and the code cell and click **+ Code** .
  id: totrans-539
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Type a special command to output version information about .NET Interactive,
    as shown in the following code:'
  id: totrans-540
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  id: totrans-541
  prefs: []
  type: TYPE_NORMAL
- en: '#!about'
  id: totrans-542
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  id: totrans-543
  prefs: []
  type: TYPE_NORMAL
- en: Click the **Execute Cell** button and note the output, as shown in *Figure 1.16*
    :![](img/Image00022.jpg)
  id: totrans-544
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 1.16: Mixing Markdown, code, and special commands in a .NET Interactive
    notebook'
  id: totrans-545
  prefs: []
  type: TYPE_NORMAL
- en: Executing code in multiple cells
  id: totrans-546
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When you have multiple code cells in a notebook, you must execute the preceding
    code cells before their context becomes available in subsequent code cells:'
  id: totrans-547
  prefs: []
  type: TYPE_NORMAL
- en: 'At the bottom of the notebook, add a new code cell, and then type a statement
    to declare a variable and assign an integer value, as shown in the following code:'
  id: totrans-548
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  id: totrans-549
  prefs: []
  type: TYPE_NORMAL
- en: int
  id: totrans-550
  prefs: []
  type: TYPE_NORMAL
- en: number = 8
  id: totrans-551
  prefs: []
  type: TYPE_NORMAL
- en: ;
  id: totrans-552
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  id: totrans-553
  prefs: []
  type: TYPE_NORMAL
- en: 'At the bottom of the notebook, add a new code cell, and then type a statement
    to output the `number` variable, as shown in the following code:'
  id: totrans-554
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  id: totrans-555
  prefs: []
  type: TYPE_NORMAL
- en: Console.WriteLine(number);
  id: totrans-556
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  id: totrans-557
  prefs: []
  type: TYPE_NORMAL
- en: Note the second code cell does not know about the `number` variable because
    it was defined and assigned in another code cell, aka context, as shown in *Figure
    1.17* :![](img/Image00023.jpg)
  id: totrans-558
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 1.17: The number variable does not exist in the current cell or context'
  id: totrans-559
  prefs: []
  type: TYPE_NORMAL
- en: In the first cell, click the **Execute Cell** button to declare and assign a
    value to the variable, and then in the second cell, click the **Execute Cell**
    button to output the `number` variable, and note that this works. (Alternatively,
    in the first cell, you can click the **Execute Cell and Below** button.)
  id: totrans-560
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Good Practice** : If you have related code split between two cells, remember
    to execute the preceding cell before executing the subsequent cell. At the top
    of the notebook, there are the following buttons – **Clear Outputs** and **Run
    All** . These are very handy because you can click one and then the other to ensure
    that all code cells are executed properly, as long as they are in the correct
    order.'
  id: totrans-561
  prefs: []
  type: TYPE_NORMAL
- en: Using .NET Interactive Notebooks for the code in this book
  id: totrans-562
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Throughout the rest of the chapters, I will not give explicit instructions
    to use notebooks, but the GitHub repository for the book has solution notebooks
    when appropriate. I expect many readers will want to run my pre-created notebooks
    for language and library features covered in *Chapters 2* to *12* , which they
    want to see in action and learn about without having to write a complete application,
    even if it is just a console app:'
  id: totrans-563
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/markjprice/cs10dotnet6/tree/main/notebooks](https://github.com/markjprice/cs10dotnet6/tree/main/notebooks)'
  id: totrans-564
  prefs: []
  type: TYPE_NORMAL
- en: Reviewing the folders and files for projects
  id: totrans-565
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you created two projects named `HelloCS` and `TopLevelProgram`
    .
  id: totrans-566
  prefs: []
  type: TYPE_NORMAL
- en: Visual Studio Code uses a workspace file to manage multiple projects. Visual
    Studio 2022 uses a solution file to manage multiple projects. You also created
    a .NET Interactive notebook.
  id: totrans-567
  prefs: []
  type: TYPE_NORMAL
- en: 'The result is a folder structure and files that will be repeated in subsequent
    chapters, although with more than just two projects, as shown in *Figure 1.18*
    :'
  id: totrans-568
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Image00024.jpg)'
  id: totrans-569
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.18: Folder structure and files for the two projects in this chapter'
  id: totrans-570
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the common folders and files
  id: totrans-571
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Although `.code-workspace` and `.sln` files are different, the project folders
    and files such as `HelloCS` and `TopLevelProgram` are identical for Visual Studio
    2022 and Visual Studio Code. This means that you can mix and match between both
    code editors if you like:'
  id: totrans-572
  prefs: []
  type: TYPE_NORMAL
- en: In Visual Studio 2022, with a solution open, navigate to **File** | **Add Existing
    Project…** to add a project file created by another tool.
  id: totrans-573
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In Visual Studio Code, with a workspace open, navigate to **File** | **Add Folder
    to Workspace…** to add a project folder created by another tool.
  id: totrans-574
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Good Practice** : Although the source code, like the `.csproj` and `.cs`
    files, is identical, the `bin` and `obj` folders that are automatically generated
    by the compiler could have mismatched file versions that give errors. If you want
    to open the same project in both Visual Studio 2022 and Visual Studio Code, delete
    the temporary `bin` and `obj` folders before opening the project in the other
    code editor. This is why I asked you to create a different folder for the Visual
    Studio Code solutions in this chapter.'
  id: totrans-575
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the solution code on GitHub
  id: totrans-576
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The solution code in the GitHub repository for this book includes separate
    folders for Visual Studio Code, Visual Studio 2022, and .NET Interactive notebook
    files, as shown in the following list:'
  id: totrans-577
  prefs: []
  type: TYPE_NORMAL
- en: 'Visual Studio 2022 solutions: [https://github.com/markjprice/cs10dotnet6/tree/main/vs4win](https://github.com/markjprice/cs10dotnet6/tree/main/vs4win)'
  id: totrans-578
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Visual Studio Code solutions: [https://github.com/markjprice/cs10dotnet6/tree/main/vscode](https://github.com/markjprice/cs10dotnet6/tree/main/vscode)'
  id: totrans-579
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '.NET Interactive Notebook solutions: [https://github.com/markjprice/cs10dotnet6/tree/main/notebooks](https://github.com/markjprice/cs10dotnet6/tree/main/notebooks)'
  id: totrans-580
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Good Practice** : If you need to, return to this chapter to remind yourself
    how to create and manage multiple projects in the code editor of your choice.
    The GitHub repository has step-by-step instructions for four code editors (Visual
    Studio 2022 for Windows, Visual Studio Code, Visual Studio 2022 for Mac, and JetBrains
    Rider), along with additional screenshots: [https://github.com/markjprice/cs10dotnet6/blob/main/docs/code-editors/](https://github.com/markjprice/cs10dotnet6/blob/main/docs/code-editors/)
    .'
  id: totrans-581
  prefs: []
  type: TYPE_NORMAL
- en: Making good use of the GitHub repository for this book
  id: totrans-582
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Git is a commonly used source code management system. GitHub is a company, website,
    and desktop application that makes it easier to manage Git. Microsoft purchased
    GitHub in 2018, so it will continue to get closer integration with Microsoft tools.
  id: totrans-583
  prefs: []
  type: TYPE_NORMAL
- en: 'I created a GitHub repository for this book, and I use it for the following:'
  id: totrans-584
  prefs: []
  type: TYPE_NORMAL
- en: To store the solution code for the book that can be maintained after the print
    publication date.
  id: totrans-585
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To provide extra materials that extend the book, like errata fixes, small improvements,
    lists of useful links, and longer articles that cannot fit in the printed book.
  id: totrans-586
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To provide a place for readers to get in touch with me if they have issues with
    the book.
  id: totrans-587
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Raising issues with the book
  id: totrans-588
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you get stuck following any of the instructions in this book, or if you
    spot a mistake in the text or the code in the solutions, please raise an issue
    in the GitHub repository:'
  id: totrans-589
  prefs: []
  type: TYPE_NORMAL
- en: 'Use your favorite browser to navigate to the following link: [https://github.com/markjprice/cs10dotnet6/issues](https://github.com/markjprice/cs10dotnet6/issues)
    .'
  id: totrans-590
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **New Issue** .
  id: totrans-591
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter as much detail as possible that will help me to diagnose the issue. For
    example:'
  id: totrans-592
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Your operating system, for example, Windows 11 64-bit, or macOS Big Sur version
    11.2.3.
  id: totrans-593
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Your hardware, for example, Intel, Apple Silicon, or ARM CPU.
  id: totrans-594
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Your code editor, for example, Visual Studio 2022, Visual Studio Code, or something
    else, including the version number.
  id: totrans-595
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As much of your code and configuration that you feel is relevant and necessary.
  id: totrans-596
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Description of expected behavior and the behavior experienced.
  id: totrans-597
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Screenshots (if possible).
  id: totrans-598
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Writing this book is a side hustle for me. I have a full-time job, so I mostly
    work on the book at weekends. This means that I cannot always respond immediately
    to issues. But I want all my readers to be successful with my book, so if I can
    help you (and others) without too much trouble, then I will gladly do so.
  id: totrans-599
  prefs: []
  type: TYPE_NORMAL
- en: Giving me feedback
  id: totrans-600
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you'd like to give me more general feedback about the book, then the GitHub
    repository `README.md` page has links to some surveys. You can provide the feedback
    anonymously, or if you would like a response from me, then you can supply an email
    address. I will only use this email address to answer your feedback.
  id: totrans-601
  prefs: []
  type: TYPE_NORMAL
- en: I love to hear from my readers about what they like about my book, as well as
    suggestions for improvements and how they are working with C# and .NET, so don't
    be shy. Please get in touch!
  id: totrans-602
  prefs: []
  type: TYPE_NORMAL
- en: Thank you in advance for your thoughtful and constructive feedback.
  id: totrans-603
  prefs: []
  type: TYPE_NORMAL
- en: Downloading solution code from the GitHub repository
  id: totrans-604
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'I use GitHub to store solutions to all the hands-on, step-by-step coding examples
    throughout chapters and the practical exercises that are featured at the end of
    each chapter. You will find the repository at the following link: [https://github.com/markjprice/cs10dotnet6](https://github.com/markjprice/cs10dotnet6)
    .'
  id: totrans-605
  prefs: []
  type: TYPE_NORMAL
- en: 'If you just want to download all the solution files without using Git, click
    the green **Code** button and then select **Download ZIP** , as shown in *Figure
    1.19* :'
  id: totrans-606
  prefs: []
  type: TYPE_NORMAL
- en: '![Table Description automatically generated](img/Image00025.jpg)'
  id: totrans-607
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.19: Downloading the repository as a ZIP file'
  id: totrans-608
  prefs: []
  type: TYPE_NORMAL
- en: I recommend that you add the preceding link to your favorite bookmarks because
    I also use the GitHub repository for this book for publishing errata (corrections)
    and other useful links.
  id: totrans-609
  prefs: []
  type: TYPE_NORMAL
- en: Using Git with Visual Studio Code and the command line
  id: totrans-610
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Visual Studio Code has support for Git, but it will use your operating system's
    Git installation, so you must install Git 2.0 or later first before you get these
    features.
  id: totrans-611
  prefs: []
  type: TYPE_NORMAL
- en: 'You can install Git from the following link: [https://git-scm.com/download](https://git-scm.com/download)
    .'
  id: totrans-612
  prefs: []
  type: TYPE_NORMAL
- en: 'If you like to use a GUI, you can download GitHub Desktop from the following
    link: [https://desktop.github.com](https://desktop.github.com) .'
  id: totrans-613
  prefs: []
  type: TYPE_NORMAL
- en: Cloning the book solution code repository
  id: totrans-614
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let''s clone the book solution code repository. In the steps that follow, you
    will use the Visual Studio Code terminal, but you could enter the commands at
    any command prompt or terminal window:'
  id: totrans-615
  prefs: []
  type: TYPE_NORMAL
- en: Create a folder named `Repos-vscode` in your user or `Documents` folder, or
    wherever you want to store your Git repositories.
  id: totrans-616
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In Visual Studio Code, open the `Repos-vscode` folder.
  id: totrans-617
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Navigate to **View** | **Terminal** , and enter the following command:'
  id: totrans-618
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  id: totrans-619
  prefs: []
  type: TYPE_NORMAL
- en: git clone https://github.com/markjprice/cs10dotnet6.git
  id: totrans-620
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  id: totrans-621
  prefs: []
  type: TYPE_NORMAL
- en: Note that cloning all the solutions for all of the chapters will take a minute
    or so, as shown in *Figure 1.20* :![Graphical user interface, text, application,
    email Description automatically generated](img/Image00026.jpg)
  id: totrans-622
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 1.20: Cloning the book solution code using Visual Studio Code'
  id: totrans-623
  prefs: []
  type: TYPE_NORMAL
- en: Looking for help
  id: totrans-624
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section is all about how to find quality information about programming
    on the web.
  id: totrans-625
  prefs: []
  type: TYPE_NORMAL
- en: Reading Microsoft documentation
  id: totrans-626
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The definitive resource for getting help with Microsoft developer tools and
    platforms is Microsoft Docs, and you can find it at the following link: [https://docs.microsoft.com/](https://docs.microsoft.com/)
    .'
  id: totrans-627
  prefs: []
  type: TYPE_NORMAL
- en: Getting help for the dotnet tool
  id: totrans-628
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'At the command line, you can ask the `dotnet` tool for help with its commands:'
  id: totrans-629
  prefs: []
  type: TYPE_NORMAL
- en: 'To open the official documentation in a browser window for the `dotnet new`
    command, enter the following at the command line or in the Visual Studio Code
    terminal:'
  id: totrans-630
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  id: totrans-631
  prefs: []
  type: TYPE_NORMAL
- en: dotnet help new
  id: totrans-632
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  id: totrans-633
  prefs: []
  type: TYPE_NORMAL
- en: 'To get help output at the command line, use the `-h` or `--help` flag, as shown
    in the following command:'
  id: totrans-634
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  id: totrans-635
  prefs: []
  type: TYPE_NORMAL
- en: dotnet new console -h
  id: totrans-636
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  id: totrans-637
  prefs: []
  type: TYPE_NORMAL
- en: 'You will see the following partial output:'
  id: totrans-638
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  id: totrans-639
  prefs: []
  type: TYPE_NORMAL
- en: Console Application (C#)
  id: totrans-640
  prefs: []
  type: TYPE_NORMAL
- en: 'Author: Microsoft'
  id: totrans-641
  prefs: []
  type: TYPE_NORMAL
- en: 'Description: A project for creating a command-line application that can run
    on .NET Core on Windows, Linux and macOS'
  id: totrans-642
  prefs: []
  type: TYPE_NORMAL
- en: 'Options:'
  id: totrans-643
  prefs: []
  type: TYPE_NORMAL
- en: -f|--framework. The target framework for the project.
  id: totrans-644
  prefs: []
  type: TYPE_NORMAL
- en: net6.0           - Target net6.0
  id: totrans-645
  prefs: []
  type: TYPE_NORMAL
- en: net5.0           - Target net5.0
  id: totrans-646
  prefs: []
  type: TYPE_NORMAL
- en: netcoreapp3.1\.   - Target netcoreapp3.1
  id: totrans-647
  prefs: []
  type: TYPE_NORMAL
- en: netcoreapp3.0\.   - Target netcoreapp3.0
  id: totrans-648
  prefs: []
  type: TYPE_NORMAL
- en: 'Default: net6.0'
  id: totrans-649
  prefs: []
  type: TYPE_NORMAL
- en: --langVersion    Sets langVersion in the created project file text – Optional
  id: totrans-650
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  id: totrans-651
  prefs: []
  type: TYPE_NORMAL
- en: Getting definitions of types and their members
  id: totrans-652
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One of the most useful features of a code editor is **Go To Definition** . It
    is available in Visual Studio Code and Visual Studio 2022\. It will show what
    the public definition of the type or member looks like by reading the metadata
    in the compiled assembly.
  id: totrans-653
  prefs: []
  type: TYPE_NORMAL
- en: Some tools, such as ILSpy .NET Decompiler, will even reverse-engineer from the
    metadata and IL code back into C# for you.
  id: totrans-654
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s see how to use the **Go To Definition** feature:'
  id: totrans-655
  prefs: []
  type: TYPE_NORMAL
- en: In Visual Studio 2022 or Visual Studio Code, open the solution/workspace named
    `Chapter01` .
  id: totrans-656
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `HelloCS` project, in `Program.cs` , in `Main` , enter the following
    statement to declare an integer variable named `z` :'
  id: totrans-657
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  id: totrans-658
  prefs: []
  type: TYPE_NORMAL
- en: int
  id: totrans-659
  prefs: []
  type: TYPE_NORMAL
- en: z;
  id: totrans-660
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  id: totrans-661
  prefs: []
  type: TYPE_NORMAL
- en: Click inside `int` and then right-click and choose **Go To Definition** .
  id: totrans-662
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the code window that appears, you can see how the `int` data type is defined,
    as shown in *Figure 1.21* :![Graphical user interface, text, application Description
    automatically generated](img/Image00027.jpg)
  id: totrans-663
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 1.21: The int data type metadata'
  id: totrans-664
  prefs: []
  type: TYPE_NORMAL
- en: 'You can see that `int` :'
  id: totrans-665
  prefs: []
  type: TYPE_NORMAL
- en: Is defined using the `struct` keyword
  id: totrans-666
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Is in the `System.Runtime` assembly
  id: totrans-667
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Is in the `System` namespace
  id: totrans-668
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Is named `Int32`
  id: totrans-669
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Is therefore an alias for the `System.Int32` type
  id: totrans-670
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implements interfaces such as `IComparable`
  id: totrans-671
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Has constant values for its maximum and minimum values
  id: totrans-672
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Has methods such as `Parse`
  id: totrans-673
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Good Practice** : When you try to use **Go To Definition** in Visual Studio
    Code, you will sometimes see an error saying **No definition found** . This is
    because the C# extension does not know about the current project. To fix this
    issue, navigate to **View** | **Command Palette** , enter `omni` , select **OmniSharp:
    Select Project** , and then select the project that you want to work with.'
  id: totrans-674
  prefs: []
  type: TYPE_NORMAL
- en: Right now, the **Go To Definition** feature is not that useful to you because
    you do not yet know what all of this information means.
  id: totrans-675
  prefs: []
  type: TYPE_NORMAL
- en: By the end of the first part of this book, which consists of *Chapters* *2*
    to *6* , and which teaches you about C#, you will know enough for this feature
    to become very handy.
  id: totrans-676
  prefs: []
  type: TYPE_NORMAL
- en: In the code editor window, scroll down to find the `Parse` method with a single
    `string` parameter on line 106, and the comments that document it on lines 86
    to 105, as shown in *Figure 1.22* :![Graphical user interface, text, application
    Description automatically generated](img/Image00028.jpg)
  id: totrans-677
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 1.22: The comments for the Parse method with a string parameter'
  id: totrans-678
  prefs: []
  type: TYPE_NORMAL
- en: 'In the comments, you will see that Microsoft has documented the following:'
  id: totrans-679
  prefs: []
  type: TYPE_NORMAL
- en: A summary that describes the method.
  id: totrans-680
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Parameters like the `string` value that can be passed to the method.
  id: totrans-681
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The return value of the method, including its data type.
  id: totrans-682
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Three exceptions that might occur if you call this method, including `ArgumentNullException`
    , `FormatException` , and `OverflowException` . Now, we know that we could choose
    to wrap a call to this method in a `try` statement and which exceptions to catch.
  id: totrans-683
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hopefully, you are getting impatient to learn what all this means!
  id: totrans-684
  prefs: []
  type: TYPE_NORMAL
- en: Be patient for a little longer. You are almost at the end of this chapter, and
    in the next chapter, you will dive into the details of the C# language. But first,
    let's see where else you can look for help.
  id: totrans-685
  prefs: []
  type: TYPE_NORMAL
- en: Looking for answers on Stack Overflow
  id: totrans-686
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Stack Overflow is the most popular third-party website for getting answers
    to difficult programming questions. It''s so popular that search engines such
    as DuckDuckGo have a special way to write a query to search the site:'
  id: totrans-687
  prefs: []
  type: TYPE_NORMAL
- en: Start your favorite web browser.
  id: totrans-688
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Navigate to [DuckDuckGo.com](https://duckduckgo.com/) , enter the following
    query, and note the search results, which are also shown in *Figure 1.23* :'
  id: totrans-689
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  id: totrans-690
  prefs: []
  type: TYPE_NORMAL
- en: '!so securestring'
  id: totrans-691
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  id: totrans-692
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application Description automatically generated](img/Image00029.jpg)'
  id: totrans-693
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.23: Stack Overflow search results for securestring'
  id: totrans-694
  prefs: []
  type: TYPE_NORMAL
- en: Searching for answers using Google
  id: totrans-695
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can search Google with advanced search options to increase the likelihood
    of finding what you need:'
  id: totrans-696
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to Google.
  id: totrans-697
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Search for information about `garbage collection` using a simple Google query,
    and note that you will probably see a lot of ads for garbage collection services
    in your local area before you see the Wikipedia definition of garbage collection
    in computer science.
  id: totrans-698
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Improve the search by restricting it to a useful site such as Stack Overflow,
    and by removing languages that we might not care about, such as C++, Rust, and
    Python, or by adding C# and .NET explicitly, as shown in the following search
    query:'
  id: totrans-699
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '```cs'
  id: totrans-700
  prefs: []
  type: TYPE_NORMAL
- en: garbage collection site:stackoverflow.com +C# -Java
  id: totrans-701
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  id: totrans-702
  prefs: []
  type: TYPE_NORMAL
- en: Subscribing to the official .NET blog
  id: totrans-703
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To keep up to date with .NET, an excellent blog to subscribe to is the official
    .NET Blog, written by the .NET engineering teams, and you can find it at the following
    link: [https://devblogs.microsoft.com/dotnet/](https://devblogs.microsoft.com/dotnet/)
    .'
  id: totrans-704
  prefs: []
  type: TYPE_NORMAL
- en: Watching Scott Hanselman's videos
  id: totrans-705
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Scott Hanselman from Microsoft has an excellent YouTube channel about computer
    stuff they didn''t teach you: [http://computerstufftheydidntteachyou.com/](http://computerstufftheydidntteachyou.com/)
    .'
  id: totrans-706
  prefs: []
  type: TYPE_NORMAL
- en: I recommend it to everyone working with computers.
  id: totrans-707
  prefs: []
  type: TYPE_NORMAL
- en: Practicing and exploring
  id: totrans-708
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's now test your knowledge and understanding by trying to answer some questions,
    getting some hands-on practice, and going into the topics covered throughout this
    chapter in greater detail.
  id: totrans-709
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 1.1 – Test your knowledge
  id: totrans-710
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Try to answer the following questions, remembering that although most answers
    can be found in this chapter, you should do some online research or code writing
    to answer others:'
  id: totrans-711
  prefs: []
  type: TYPE_NORMAL
- en: Is Visual Studio 2022 better than Visual Studio Code?
  id: totrans-712
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Is .NET 6 better than .NET Framework?
  id: totrans-713
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is .NET Standard and why is it still important?
  id: totrans-714
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Why can a programmer use different languages, for example, C# and F#, to write
    applications that run on .NET?
  id: totrans-715
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the name of the entry point method of a .NET console application and
    how should it be declared?
  id: totrans-716
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is a top-level program and how do you access any command-line arguments?
  id: totrans-717
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What do you type at the prompt to build and execute C# source code?
  id: totrans-718
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are some benefits of using .NET Interactive Notebooks to write C# code?
  id: totrans-719
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Where would you look for help for a C# keyword?
  id: totrans-720
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Where would you look for solutions to common programming problems?
  id: totrans-721
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Appendix* , *Answers to the Test Your Knowledge Questions* , is available
    to download from a link in the README on the GitHub repository: [https://github.com/markjprice/cs10dotnet6](https://github.com/markjprice/cs10dotnet6)
    .'
  id: totrans-722
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 1.2 – Practice C# anywhere
  id: totrans-723
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You don't need Visual Studio Code or even Visual Studio 2022 for Windows or
    Mac to write C#. You can go to .NET Fiddle – [https://dotnetfiddle.net/](https://dotnetfiddle.net/)
    – and start coding online.
  id: totrans-724
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 1.3 – Explore topics
  id: totrans-725
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A book is a curated experience. I have tried to find the right balance of topics
    to include in the printed book. Other content that I have written can be found
    in the GitHub repository for this book.
  id: totrans-726
  prefs: []
  type: TYPE_NORMAL
- en: I believe that this book covers all the fundamental knowledge and skills a C#
    and .NET developer should have or be aware of. Some longer examples are best included
    as links to Microsoft documentation or third-party article authors.
  id: totrans-727
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the links on the following page to learn more details about the topics
    covered in this chapter:'
  id: totrans-728
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/markjprice/cs10dotnet6/blob/main/book-links.md#chapter-1---hello-c-welcome-net](https://github.com/markjprice/cs10dotnet6/blob/main/book-links.md#chapter-1---hello-c-welcome-net)'
  id: totrans-729
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-730
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we:'
  id: totrans-731
  prefs: []
  type: TYPE_NORMAL
- en: Set up your development environment.
  id: totrans-732
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Discussed the similarities and differences between modern .NET, .NET Core, .NET
    Framework, Xamarin, and .NET Standard.
  id: totrans-733
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Used Visual Studio Code with the .NET SDK and Visual Studio 2022 for Windows
    to create some simple console applications.
  id: totrans-734
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Used .NET Interactive Notebooks to execute snippets of code for learning.
  id: totrans-735
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learned how to download the solution code for this book from a GitHub repository.
  id: totrans-736
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: And, most importantly, learned how to find help.
  id: totrans-737
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the next chapter, you will learn how to "speak" C#.
  id: totrans-738
  prefs: []
  type: TYPE_NORMAL
