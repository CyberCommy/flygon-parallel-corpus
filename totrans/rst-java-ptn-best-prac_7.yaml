- en: Appendix A. Appendix
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this era of social networking, cloud computing, and mobile applications,
    people want to be connected to each other, voice opinions, build applications
    collaboratively, share inputs, and ask questions. This is evident from the data
    mentioned in [http://www.statisticbrain.com/twitter-statistics/](http://www.statisticbrain.com/twitter-statistics/)
    that shows Twitter has around 6.5 million users and 58 million tweets per day.
    Similarly, the statistics for Facebook are mindboggling: 1.3 billion users making
    it the heart of the social web platform. Over the years, GitHub has evolved as
    the default social coding platform. Thus, Twitter, Facebook, and GitHub are among
    the most widely used platforms to build applications, mine data, as well as build
    analytics-related information.'
  prefs: []
  type: TYPE_NORMAL
- en: While the previous chapters covered topics such as building RESTful services,
    adding performance, caching, security, and scaling of RESTful services, this chapter
    will focus on some popular REST platforms and how they tie in to the different
    patterns covered in earlier chapters as part of their API infrastructure.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Overview of the REST API from GitHub
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Overview of the Open Graph API from Facebook
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Overview of the REST API from Twitter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Overview of the REST API from GitHub
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: GitHub has become extremely popular as the social collaborative coding platform
    for building code as well as contributing to other repositories. It is used by
    developers to create, build, and deploy software, with usage varying from individual
    projects to various enterprises using it as part of their processes. GitHub has
    extensive API documentation for its services at [https://developer.github.com/v3/](https://developer.github.com/v3/).
  prefs: []
  type: TYPE_NORMAL
- en: The following section covers in detail how GitHub handles all the different
    patterns we covered in earlier chapters.
  prefs: []
  type: TYPE_NORMAL
- en: Getting details from GitHub
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following commands show how to use unauthenticated cURL commands to get
    data for a user, to get details for the repositories, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following command gets details for the `javaee-samples` user:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As shown in the preceding commands, there are different URLs in the preceding
    response, which can be used to get details such as followers, commits, and so
    on. This style of presenting the URLs is different from the HATEOAS samples we
    covered earlier in the book using `links`, `href`, `rel`, and so on. This shows
    how different platforms choose various ways to provide a connected service, which
    is self-explanatory.
  prefs: []
  type: TYPE_NORMAL
- en: 'To get repos for a user with pagination, we can use the query as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: GitHub API uses OAuth2 for authenticating users for the requests. All developers
    working with GitHub API need to register their application. A registered application
    is assigned a unique client ID and client secret.
  prefs: []
  type: TYPE_NORMAL
- en: For more details on getting authenticated requests for a user, check [https://developer.github.com/v3/oauth/](https://developer.github.com/v3/oauth/).
  prefs: []
  type: TYPE_NORMAL
- en: Verbs and resource actions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following table covers how GitHub API uses verbs for a specific action
    to a resource:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Verb | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `HEAD` | This is used to get the HTTP header info |'
  prefs: []
  type: TYPE_TB
- en: '| `GET` | This is used to retrieve resources such as user details |'
  prefs: []
  type: TYPE_TB
- en: '| `POST` | This is used for creating resources such as merging pull requests
    |'
  prefs: []
  type: TYPE_TB
- en: '| `PATCH` | This is used for partial updates to resources |'
  prefs: []
  type: TYPE_TB
- en: '| `PUT` | This is used for replacing resources such as updating users |'
  prefs: []
  type: TYPE_TB
- en: '| `DELETE` | This is used for deleting resources such as removing a user as
    a collaborator |'
  prefs: []
  type: TYPE_TB
- en: Versioning
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'GitHub API uses version v3 in its URI. The default version of the API may change
    in the future. In case the client is depending on a particular version, they recommend
    sending an `Accept` header explicitly, as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Error handling
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As covered in [Chapter 2](ch02.html "Chapter 2. Resource Design"), *Resource
    Design*, client-side errors are indicated by `400 error` codes. GitHub uses a
    similar convention for denoting errors.
  prefs: []
  type: TYPE_NORMAL
- en: If a client using the API sends an invalid JSON, a `400 Bad Request` response
    is returned back to the client. If a client using the API misses to send a field
    as part of the request body, a `422 Unprocessable Entity` response is returned
    to the client.
  prefs: []
  type: TYPE_NORMAL
- en: Rate limiting
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The GitHub API also supports rate limiting so that the server is not overburdened
    with too many requests from some rogue client causing it to fail. In case of requests
    using **Basic authentication** or **OAuth**, the client is allowed to make up
    to 5,000 requests per hour. In case of unauthenticated requests, the rate limit
    is up to 60 requests per hour for a client. GitHub uses the **X-RateLimit-Limit**,
    **X-RateLimit-Remaining**, and **X-RateLimit-Reset** headers to tell the status
    of the rate limits.
  prefs: []
  type: TYPE_NORMAL
- en: Thus, we have covered details on the GitHub API on how they choose to implement
    some of the REST principles we have covered so far in this book. The next section
    covers the Facebook Open Graph REST API for topics such as versioning, error handling,
    rate limiting, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Overview of the Facebook Graph API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Facebook Graph API is a way to get information from Facebook data. Using
    the HTTP REST API, clients can do a variety of tasks such as query data, post
    updates and pictures, get albums and create albums, get the number of likes for
    a node, get comments, and so on. The following section covers how to get access
    to the Facebook Graph API.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: On the Web, Facebook uses a variant of the OAuth 2.0 protocol for authentication
    and authorization. The native Facebook App is used on iOS and Android.
  prefs: []
  type: TYPE_NORMAL
- en: 'To use the Facebook API, the client needs to procure an access token to work
    with OAuth 2.0\. The following steps shows how to create the App ID and secret
    key and then get the access token to execute queries for Facebook data:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to [developers.facebook.com/apps](http://developers.facebook.com/apps). You
    can create a new app. Once the app is created, you will be assigned the App ID
    and secret as shown in the following screenshot:![Overview of the Facebook Graph
    API](img/7963OS_07_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once you have the App ID and secret, you can get the access token and execute
    queries for Facebook data.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Facebook has a special `/me` endpoint, which corresponds to the user whose
    access token is being used. To get photos for your user, the request can be of
    the following form:'
  prefs: []
  type: TYPE_NORMAL
- en: '`GET /graph.facebook.com/me/photos`'
  prefs: []
  type: TYPE_NORMAL
- en: 'To post a message, the user can invoke a simple API as shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'To get details of your ID, name, and photos using the Graph Explorer, the query
    is as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The following screenshot shows a Graph API Explorer query with node `dalailama`.
    Clicking on the ID gives more details for the node.![Overview of the Facebook
    Graph API](img/7963OS_07_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Thus, we saw how to use the Graph API Explorer application to build up a query
    for a node in the Social Graph. We can query by various fields such as ID and
    name and try using methods such as `GET`, `POST`, or `DELETE`.
  prefs: []
  type: TYPE_NORMAL
- en: Verbs and resource actions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following table summarizes the commonly used verbs in the Facebook Graph
    API:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Verb | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `GET` | This is used to retrieve resources such as feeds, albums, posts,
    and so on |'
  prefs: []
  type: TYPE_TB
- en: '| `POST` | This is used for creating resources such as feeds, posts, albums,
    and so on |'
  prefs: []
  type: TYPE_TB
- en: '| `PUT` | This is used for replacing resources |'
  prefs: []
  type: TYPE_TB
- en: '| `DELETE` | This is used for deleting resources |'
  prefs: []
  type: TYPE_TB
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: An important observation is that the Facebook Graph API uses `POST` instead
    of `PUT` to update resources.
  prefs: []
  type: TYPE_NORMAL
- en: Versioning
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Graph API currently uses version 2.1 released on August 7, 2014\. The client
    can specify a version in the request URL. In case a client does not specify a
    version, the Facebook Open Graph API defaults to the latest version available.
    Every version is guaranteed to work for 2 years after which if the client makes
    any calls using an older version, they get redirected to the latest version of
    the API.
  prefs: []
  type: TYPE_NORMAL
- en: Error handling
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following snippet shows the error response from a failed API request:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: As shown in the preceding code, there are JSON Objects called `code` and `error_subcode`
    in the error message, which can be used to figure out what the problem is and
    what the recovery action will be. In this case, the value of `code` is `190`,
    which is an `OAuthException` value, and the `error_subcode` value of `460` indicates
    that the password may have changed and hence the `access_token` is not valid.
  prefs: []
  type: TYPE_NORMAL
- en: Rate limiting
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Facebook Graph API has different rate-limiting policies based on whether
    the entity using the API is a user, an application, or an advertisement. When
    the calls from a user exceed a limit, there is a 30-minute block-out period for
    the user. For more details, check [https://developers.facebook.com/docs/reference/ads-api/api-rate-limiting/](https://developers.facebook.com/docs/reference/ads-api/api-rate-limiting/).
    The next section covers the details of the Twitter REST API.
  prefs: []
  type: TYPE_NORMAL
- en: Overview of the Twitter API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The **Twitter API** has REST APIs and Streaming APIs, which allow developers
    to access core data such as timelines, status data, user information, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Twitter uses three-legged OAuth to make requests.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Important aspects of OAuth with Twitter API**'
  prefs: []
  type: TYPE_NORMAL
- en: The client application doesn't need to store a login ID and password. The application
    sends an access token representing the user with each request instead of using
    user credentials.
  prefs: []
  type: TYPE_NORMAL
- en: The `POST` variables, query parameters, and the URL of the request always remain
    intact for a request to successfully complete.
  prefs: []
  type: TYPE_NORMAL
- en: The user decides what applications can act on his behalf and can remove authorization
    at any time.
  prefs: []
  type: TYPE_NORMAL
- en: A unique identifier for each request (the `oauth_nonce` identifier) prevents
    replaying the same request again in case it gets snooped.
  prefs: []
  type: TYPE_NORMAL
- en: To send requests to Twitter, most developers may find the initial setup a bit
    confusing. The article at [https://blog.twitter.com/2011/improved-oauth-10a-experience](https://blog.twitter.com/2011/improved-oauth-10a-experience)
    shows how to create an application, generate the keys, and generate a request
    using the OAuth tool.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example of a request generated by the OAuth tool in Twitter, showing
    a query to get statuses for the `twitterapi` handle:'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Twitter API does not support unauthenticated requests and has very strict
    rate-limiting policies.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'This gives an output as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Verbs and resource actions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following table summarizes the commonly used verbs in the Twitter REST
    API:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Verb | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `GET` | This is used to retrieve resources such as users, followers, favorites,
    subscribers, and so on. |'
  prefs: []
  type: TYPE_TB
- en: '| `POST` | This is used to create resources such as users, followers, favorites,
    subscribers, and so on. |'
  prefs: []
  type: TYPE_TB
- en: '| `POST` with verb `update` | This is used to replace resources. For example,
    to update the friendships, the URL will be `POST friendships/update`. |'
  prefs: []
  type: TYPE_TB
- en: '| `POST` with verb `destroy` | This is used to delete resources such as deleting
    direct messages, unfollowing someone, and so on. For example, the URL will be
    `POST direct_messages/destroy`. |'
  prefs: []
  type: TYPE_TB
- en: Versioning
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The current version for the Twitter API is 1.1\. It only supports JSON and no
    longer supports XML, RSS, or Atom. With the Twitter API Version 1.1, all clients
    need to be authenticated using OAuth to make queries. The Twitter API Version
    1.0 has been deprecated and there is a 6-month window to move to the new version.
  prefs: []
  type: TYPE_NORMAL
- en: Error handling
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Twitter API returns standard HTTP error codes in the responses to the REST
    API. It returns `200 OK` in case of success. It returns `304 Not Modified` when
    there is no data to return, `401 Not Authorized` in case authentication credentials
    were missing or incorrect, `500 Internal Server Error` when something is broken
    and needs to be posted to the forum, and so on. Along with detailed error messages,
    the Twitter API produces machine-readable error codes. For example, an error code
    `32` in the response implies the server could not authenticate the user. For more
    details, check [https://dev.twitter.com/docs/error-codes-responses](https://dev.twitter.com/docs/error-codes-responses).
  prefs: []
  type: TYPE_NORMAL
- en: Recommended reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following section provides some links, which may be useful to review:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Facebook Tools: [https://developers.facebook.com/tools/](https://developers.facebook.com/tools/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Twurl (OAuth-enabled cURL for Twitter): [https://github.com/twitter/twurl](https://github.com/twitter/twurl)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'GitHub API documentation: [https://developer.github.com/v3/](https://developer.github.com/v3/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Twitter API documentation: [https://dev.twitter.com/docs/api/1.1](https://dev.twitter.com/docs/api/1.1)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Stripe API documentation: [https://stripe.com/docs/api](https://stripe.com/docs/api)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This appendix is a modest collection of APIs implemented by popular platforms
    such as GitHub, Facebook, and Twitter and the approaches they have taken to handle
    the various REST patterns. Though there are a myriad of possibilities for what
    a user can do with the data from the REST API, the commonality between the frameworks
    is the usage of REST and JSON. The REST APIs from these platforms are consumed
    by web and mobile clients. This appendix covered how these platforms handle versioning,
    verbs, error handling, and authenticating and authorizing the requests based on
    OAuth 2.0.
  prefs: []
  type: TYPE_NORMAL
- en: This book started off with the basics of REST and how to build your own RESTful
    services. Since then, we covered various topics as well as tips, and best practices
    for building scalable and highly performant REST services. We have also referred
    to various libraries and tools to improve testing and documentation of REST services
    along with emerging standards for real-time APIs. We also covered case studies
    with WebSockets, WebHooks, and the future of REST.
  prefs: []
  type: TYPE_NORMAL
- en: We hope this humble attempt from our end helps you understand, learn, design,
    and develop better REST APIs in the future.
  prefs: []
  type: TYPE_NORMAL
