- en: Chapter 6. Optimization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Caching of objects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting optimization tips with YSlow
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Speeding up JavaScript delivery through automatic compression and browser caching
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Triggering JavaScript early/on DOM load
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lazy-loading of images
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Optimizing Ajax applications automagically through Apache modules/Google mod_pagespeed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As JavaScript developers, we often face performance issues—slow loading of pages,
    poorly responsive pages, freezing of browser windows, and so on. Mostly, all these
    happen because of the bottlenecks in the script or the approach/algorithm we have
    taken. In this chapter, let's discuss possible approaches to solve these issues.
  prefs: []
  type: TYPE_NORMAL
- en: Caching of objects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As JavaScript code has to run on client machines, the code-level optimizations
    are very important. The most important of these is caching or buffering of calculations
    and objects. This basic optimization is often overlooked.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We'll need to identify the repetitive function calls to cache the results; that
    will speed up the code performance.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, in this case, we repeatedly calculate the same `sqrt(10)` and store it
    in different variables. This is overkill; as you know, it could be written as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Similarly, especially in the world of selector-based frameworks, it''s advisable
    to cache or buffer the selector objects. For example, consider the following HTML
    markup:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s the jQuery code that hides the container initially; when the trigger
    link is clicked, it shows the container as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As you can see in the preceding code snippet, we have used `$(''#container'')`
    twice; this means we''re running `$()` twice for the same purpose. If you look
    at jQuery code, the `$()` call has other functions and it''s eventually an overkill.
    So, it''s advisable to cache the `$(''#container'')` to another variable and use
    it as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: In certain cases, caching of objects (as shown in the preceding code snippet)
    could increase the page responsiveness to double. An increase in speed can easily
    be felt when caching is applied to slow/complex selectors such as `$('div p a')`.
  prefs: []
  type: TYPE_NORMAL
- en: Getting optimization tips with YSlow
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When we're hitting performance issues, we need to know what to do. **YSlow**,
    from Yahoo!, is a speed diagnostic tool that quickly lists down suggestions based
    on various factors.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We''ll require a Firefox browser with the Firebug plugin installed. YSlow is
    an add-on for Firebug that also needs to be installed to get optimization tips.
    When installed, it adds another tab inside Firebug, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](graphics/3081_06_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When executed on any page, YSlow gives a page-specific report with tips on optimization.
    It's also bundled with a few optimization tools that will help us quickly fix
    performance issues. Since it's a browser-based tool, it cannot make a suggestion
    for server-side code—it can only suggest server settings like `gzip` and `expire`
    headers.
  prefs: []
  type: TYPE_NORMAL
- en: When installing YSlow, it is a good practice to turn its autorun mode off. Otherwise,
    it will get executed for every page and that would slow down the browsing experience
    for other pages.
  prefs: []
  type: TYPE_NORMAL
- en: Here is a sample screenshot of the report when executed on [http://developer.yahoo.com/yslow/:](http://    http://developer.yahoo.com/yslow/:)
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](graphics/3081_06_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The report is based on the following 22 rules:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Minimize HTTP Requests:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When the page has lots of stylesheet and JavaScript references, its loading
    time will be affected. Each file needs to be downloaded individually. The solution
    here is to combine all JavaScript code into a single file and all stylesheets
    into a single file. As for the numerous CSS background images, we could employ
    a technique called CSS Sprites. This way, we can minimize HTTP requests. YSlow
    helps us to identify numerous such HTTP requests and gives us suggestions.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**CSS Sprites**—is a technique through which we form a single CSS background
    image called *sprite*, from a number of CSS background images, by adjusting the
    CSS style properties to use the same *sprite* image. We refer to each image in
    `sprite`, through the `background-position` property.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Use a Content Delivery Network:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A **Content Delivery Network (CDN)** is a third-party hosting solution to serve
    static content and images, the delivery speed of which will be higher compared
    to the normal server setup, as it's operated on a cloud setup. YSlow identifies
    CDN usage and, if we haven't used any CDN, it suggests that we use a CDN for better
    performance.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add an `Expires` or a `Cache-Control` header:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If we cache static content in a browser, it will improve the loading speed as
    this content doesn't have to be downloaded again. We have to ensure that we don't
    apply browser caching for dynamic content. When we have single JavaScript and
    single CSS files, to avoid HTTP requests, we can at least cache them at browser
    level. For that, we can use the `Expires` or `Cache-Control` HTTP headers. YSlow
    recognizes the HTTP headers and suggests that we use browser caching headers,
    when not used.
  prefs: []
  type: TYPE_NORMAL
- en: '`Gzip` components:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It's highly recommended to `gzip` page contents—possible through PHP or Apache.
    Apache's `mod_deflate` is preferable as it's easy to configure and can compress
    on the fly during delivery. YSlow can recognize `gzip` usage and suggests that
    we use `gzip` when not used.
  prefs: []
  type: TYPE_NORMAL
- en: 'Put stylesheets at the top:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As per browser behavior, if stylesheets are referenced at the top, users will
    have better loading experiences. If they're referenced at the bottom, the user
    will see slow application of styles, depending upon their download speed. YSlow
    grades the page, depending upon the stylesheet references.
  prefs: []
  type: TYPE_NORMAL
- en: 'Put scripts at the bottom:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When the scripts are placed at the top, they'll block the loading of the page.
    This is important when we're to link external scripts, such as Google Analytics,
    Facebook libraries, and so on. Those scripts can be referenced before the end
    of the `</body>` tag. Another solution is to use the `async` attribute when linking
    external scripts. YSlow grades the page depending upon where we have linked the
    scripts and helps us to improve the speed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Avoid CSS expressions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: CSS expressions are Internet Explorer's provision to mix JavaScript with CSS,
    up to version 8\. As per research, expressions often get triggered and lead to
    slowness in page responsiveness. YSlow detects the usage and grades the page.
  prefs: []
  type: TYPE_NORMAL
- en: 'Make JavaScript and CSS external:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It is better to keep the JavaScript and CSS files external instead of keeping
    them as inline and internal. This way, the external files can be cached at the
    browser level, for speedy loading of the pages. Separation of scripts to an external
    file is the primary concern of **Unobtrusive JavaScript** and selector-based JavaScript
    frameworks, such as, jQuery, YUI, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'Reduce DNS lookups:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the site refers to images, stylesheets, and JavaScript from different domains,
    the DNS lookup increases. Though the DNS lookups are cached, the site's loading
    time will increase when many domains are referenced. YSlow identifies different
    hostname references in URLs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Minify JavaScript and CSS:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As explained in the next recipe, minified JavaScript and CSS files can download
    faster due to reduction in file size. YSlow also has an option/tool to minify
    JavaScript and CSS files.
  prefs: []
  type: TYPE_NORMAL
- en: 'Avoid redirects:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Unnecessary page redirection will impact the loading speed.
  prefs: []
  type: TYPE_NORMAL
- en: Remove duplicate scripts
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Unnecessary duplicated scripts are overkill.
  prefs: []
  type: TYPE_NORMAL
- en: 'Configure ETags:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: An **ETag** is similar to other browser caching options. Though it can avoid
    an unnecessary round-trip, it is not consistent across servers. So, it's better
    to disable it altogether, to reduce HTTP request header size.
  prefs: []
  type: TYPE_NORMAL
- en: 'Make Ajax cacheable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Even Ajax requests can be cached at the browser end. By doing so, the application's
    responsiveness will increase.
  prefs: []
  type: TYPE_NORMAL
- en: 'Use `GET` for Ajax requests:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Yahoo! team has noted that, for Ajax requests, the `POST` operation is a
    two-step process and `GET` requests require only one TCP packet. As per HTTP specs,
    the `GET` operation is for retrieving content and POST is for posting or updating.
  prefs: []
  type: TYPE_NORMAL
- en: 'Reduce the number of DOM elements:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If we try to apply JavaScript effects or events when the page is rendered with
    lots of HTML tags, it will slow down due the fact that the JavaScript code has
    to iterate through every DOM element. YSlow suggests that we keep the DOM element
    count to minimum.
  prefs: []
  type: TYPE_NORMAL
- en: 'No 404s:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Broken links cause unnecessary requests. They usually happen due to a typo or
    bug in the referenced link. YSlow identifies the broken links and grades the page.
  prefs: []
  type: TYPE_NORMAL
- en: 'Reduce cookie size:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Cookies are always getting sent across the HTTP requests. So, if a lot of information
    is stored in cookies, it will affect the HTTP request-response time.
  prefs: []
  type: TYPE_NORMAL
- en: 'Use cookie-free domains for components:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There's no need to refer to cookies to deliver static content. So, it would
    be wiser to keep all static contents referenced through some subdomain and avoid
    setting cookies for that domain.
  prefs: []
  type: TYPE_NORMAL
- en: 'Avoid filters:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It's common to use filters in Internet Explorer to handle PNG files, but the
    use of filters usually slows down the page. The solution would be to use PNG8
    files that are already supported in IE.
  prefs: []
  type: TYPE_NORMAL
- en: 'Do not scale images in HTML:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using big images and scaling them down, using the `height` and `width` attributes,
    is not the wiser option. This forces the browser to load big images even though
    they have to be displayed in smaller dimensions. The solution is to resize the
    image at the server level.
  prefs: []
  type: TYPE_NORMAL
- en: 'Make the `favicon.ico` icon small and cacheable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Similar to images, the favicon icon has to be small in size and cacheable.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'YSlow has built-in support for JavaScript code minification and image compression
    through Yahoo!''s Smush. It is a web service. It also has a code beautification
    tool that can help us to view the JavaScript source in a formatted view, as seen
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](graphics/3081_06_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The report with its helpful tips helps us to look for performance infrastructure
    like CDN, static content delivery without cookies, and so on. Caveat: it requires
    additional effort from the developer to fix things.'
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Google''s Page Speed extension, available for download at [http://code.google.com/speed/page-speed/docs/extension.html](http://code.google.com/speed/page-speed/docs/extension.html),
    offers similar speed diagnosis and automatic suggestions. In the following screenshot,
    we can see how it has been executed on the website [http://www.packtpub.com/](http://www.packtpub.com/),
    where it offers speed scores and suggestions:'
  prefs: []
  type: TYPE_NORMAL
- en: '![There''s more...](graphics/3081_06_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Google's initiative on such speed diagnosis is no surprise, as the page speed
    might affect its search engine crawler; remember the site speed is one of the
    determining factors in Google's PageRankTM. YSlow grades the page from A to F
    whereas Page Speed provides a score out of 100\. Both plugins use similar rulesets
    to offer optimization tips.
  prefs: []
  type: TYPE_NORMAL
- en: Speeding up JavaScript delivery through automatic compression and browser caching
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: JavaScript was originally an interpreted language, but V8 and JIT compilers
    are now replacing the interpreters. V8 JavaScript engine, originally introduced
    in Google Chrome and Chromium is a trendsetter; it compiles JavaScript to native
    machine code. As the Web keeps on evolving, there will probably be more powerful
    JavaScript compilers coming up sooner or later.
  prefs: []
  type: TYPE_NORMAL
- en: 'Whether the browser has compiler or interpreter, the JavaScript code has to
    be downloaded in the client machine before it gets executed. This necessitates
    quicker download, which in turn means less code size. The quickest and most common
    approaches to achieve less code space and quicker loading are:'
  prefs: []
  type: TYPE_NORMAL
- en: Strip off whitespaces, newlines, and comments—this is possible through minification
    tools such as JSMin, Packer, Google Closure compiler, and so on.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Code compression through `gzip`—all modern browsers support `gzip` content encoding
    and this allows the content to be transferred in compressed format from server
    to client; this in turn reduces the number of bytes to be downloaded and improves
    the loading time.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Browser caching to avoid scripts being getting downloaded on each request—we
    may force the static scripts to be cached in the browser for some duration. This
    will avoid unnecessary roundtrips.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this recipe, we'll quickly compare the JavaScript minification tools and
    then we'll see how to apply them.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For comparison, we''ll require the following minification tools:'
  prefs: []
  type: TYPE_NORMAL
- en: '**JSMin** by Dougl as Crockford: [http://www.crockford.com/javascript/jsmin.html](http://www.crockford.com/javascript/jsmin.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**JSMin+** by Tweakers.net (based on the Narcissus JavaScript engine): [http://crisp.tweakblogs.net/blog/cat/716](http://crisp.tweakblogs.net/blog/cat/716)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Packer** by Dean Edwards: [http://dean.edwards.name/packer/](http://dean.edwards.name/packer/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**YUI Compressor:**[http://developer.yahoo.com/yui/compressor/](http://developer.yahoo.com/yui/compressor/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Google Closure Compiler:**[http://closure-compiler.appspot.com/](http://closure-compiler.appspot.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**UglifyJS:** [https://github.com/mishoo/UglifyJS](https://github.com/mishoo/UglifyJS)
    (PHP version: [https://github.com/kbjr/UglifyJS.php](http://https://github.com/kbjr/UglifyJS.php))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For automatic minification of JavaScript and CSS, we'll use the Minify PHP application
    from [https://github.com/mrclay/minify](http://https://github.com/mrclay/minify).
  prefs: []
  type: TYPE_NORMAL
- en: 'To compare the minification tools, let''s take the following piece of code
    that weighs `931` bytes. Note that this code has comments, whitespaces, newlines,
    and lengthy variable and function names:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: JSMin by Dougl as Crockford.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: JSMin+ by Tweakers.net (based on Narcissus JavaScript engine).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Packer by Dean Edwards.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Output with Base62 encode option (obfuscates the code):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: YUI Compressor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Google Closure Compiler.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: UglifyJS.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The tabularized results for `931` bytes JavaScript code are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Tool | Removes unreachable code | Compressed Size (bytes) | Code Saving |
      |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| JSMin by Douglas Crockford | No | 446 | 52.09% |   |'
  prefs: []
  type: TYPE_TB
- en: '| JSMin+ by Tweakers.net | No | 437 | 53.06% |   |'
  prefs: []
  type: TYPE_TB
- en: '| Packer by Dean Edwards Normal | No | 328 | 64.77% |   |'
  prefs: []
  type: TYPE_TB
- en: '| with Base62 encode | No | 515 | 44.68% |   |'
  prefs: []
  type: TYPE_TB
- en: '| YUI Compressor | No | 328 | 64.77% |   |'
  prefs: []
  type: TYPE_TB
- en: '| Google Closure Compiler | Yes | 303 | 67.45% |   |'
  prefs: []
  type: TYPE_TB
- en: '| UglifyJS | Yes | 310 | 66.70% |   |'
  prefs: []
  type: TYPE_TB
- en: All these tools strip off whitespaces, newlines, and unnecessary comments, to
    reduce the JavaScript size. Dean Edwards' Packer has both a code obfuscation and
    a minification component. Its Base62 encoding, or code obfuscation, is not recommended,
    as the unpacking has to be done in the browser and thus has significant overhead.
  prefs: []
  type: TYPE_NORMAL
- en: YUI Compressor's compression is relatively good, as it uses Java Rhino engine
    to analyze the code. Google Closure Compiler looks very promising as it has a
    built-in compiler that could detect unreachable code and could optimize the code
    further. UglifyJS is faster as it's written in `Node.js`. As shown in the preceding
    text, both UglifyJS and Google Closure Compiler could remove unreachable code
    to improve code minification.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The **Minify** application from [https://github.com/mrclay/minify](http://https://github.com/mrclay/minify)
    can be used for automation of the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Code minification
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compression through `gzip`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Browser caching through `Last-Modified` or `ETag` HTTP headers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We have to place the `min` folder of the Minify application in the document
    root. This folder contains the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`index.php:` The frontend script that delivers the minified code'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`config.php:` The settings file for the Minify application'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`groupConfig.php:` The settings file that names the group of files that can
    be minified easily'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In `config.php`, we have to specify our choice of minification tools as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: The settings shown in the preceding code snippet will first try to use Google's
    Closure Compiler and, on any error, will use the JSMinPlus library.
  prefs: []
  type: TYPE_NORMAL
- en: 'With these configurations, it''s enough to change the JavaScript, including
    syntax, from:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'This will achieve the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Combine `script1.js, script2.js`, and `script3.js`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Minify the combined script
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Handle `gzip` content encoding automatically
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Handle browser caching automatically
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'When there are lots of files to minify, we can make use of `groupConfig.php`
    and group the files into a key, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'We can simply refer them to the `g` query string through the key name, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The frontend `index.php` script receives the files to be minified, through
    query string `g`. The comma-separated files are then combined and minified through
    the minifier library of our choice:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'In order to improve the performance of future delivery, the Minify application
    stores the following versions into its cache:'
  prefs: []
  type: TYPE_NORMAL
- en: Combined minified JavaScript file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: gzipped version of combined minified JavaScript file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Files stored in its caches are used to avoid repetitive processing of JavaScript
    files over the minifier library. The application also handles `Accept-Encoding`
    HTTP headers and thereby detects the client browser's preference on `gzip`, deflates
    and delivers respective contents.
  prefs: []
  type: TYPE_NORMAL
- en: Another useful feature of this application is setting `Last-Modified` or `ETag`
    HTTP headers. This will enable caching of the script at the browser end. The web
    server will serve the complete script to the browser only when there is any change
    in the timestamp or content. Thus, it saves lot of downloads, especially on static
    JavaScript file contents.
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that jQuery''s Ajax method avoids caching of Ajax requests by default
    for scripts and `jsonp` data types. To do so, it appends `_=[timestamp]` in the
    query string. When we want to force caching, we have to enable it explicitly,
    and that will disable timestamp appending. This is done as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have a few more services and applications for checking and speeding up delivery
    options.
  prefs: []
  type: TYPE_NORMAL
- en: Comparing JavaScript minification tools
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The web-based service found at [http://compressorrater.thruhere.net/](http://compressorrater.thruhere.net/)
    can be used to compare many minification tools and, thereby, we may choose the
    appropriate tool for our code.
  prefs: []
  type: TYPE_NORMAL
- en: Automatic speed up tools
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For automatic speeding up, we may use:'
  prefs: []
  type: TYPE_NORMAL
- en: The PHP Speedy library from [http://aciddrop.com/php-speedy/](http://aciddrop.com/php-speedy/);
    it is similar to the Minify application.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `mod_pagespeed` Apache module from Google. It is explained in the *Optimizing
    Ajax applications automagically through Apache modules/Google mod_pagespeed* recipe
    in this chapter.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Triggering JavaScript early/on DOM load
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In Web 2.0 websites that have containers and animations, we'd want the JavaScript
    code to get executed as quickly as possible, so that the users won't see a flickering
    effect when we apply hide, show, or animation effects. Also, when we handle any
    events through JavaScript or JavaScript frameworks, we'd want the events such
    as click, change, and so on get applied to the DOM as quickly as possible.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Earlier, JavaScript developers mixed JavaScript and HTML together. This practice
    is called *inline scripting*. As the Web was evolving, more standards and practices
    came up. *Unobtrusive JavaScript* practice generally means that JavaScript code
    is separated from markup code and JavaScript is handled in an *unobtrusive* manner.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s some quick code written to alert the user with the message `Enter your
    name!`, when the name field is clicked:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: As seen in the preceding code, the JavaScript is written and mixed inside the
    `input` tag.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are some problems with the inline JavaScript approach, such as:'
  prefs: []
  type: TYPE_NORMAL
- en: The JavaScript code cannot be cached. If we use a single JavaScript file (a
    file that is minified, `gzipped`, and has proper HTTP headers to cache it in the
    browser), we can feel the speed increase.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Code cannot easily be maintained, especially if many programmers are working
    on the same project. For every JavaScript feature, the HTML code has to be changed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The site may have accessibility issues, since the JavaScript code may block
    the functionality on non-JavaScript devices.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The HTML script size increases. If the HTML should not be cached for some reason
    such as dynamic content, it will affect the speed of the page.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Separation of JavaScript is possible by moving the JavaScript code to the`<head>`
    tag. It's better to move the JavaScript code to a separate external file and link
    it in the`<head>` tag.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, in the following code, we try to separate the JavaScript code from the
    previous listing as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'In the JavaScript code, we add the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: As shown in the preceding code snippet, we've attached the `click` event by
    referring to the element through `document.getElementById('name')`. Note that
    we have also wrapped that under `window.onload`; otherwise, `document.getElementById('name')`
    wouldn't be available. This is due to the fact that the script in the`<head>`
    tag executes first, before the DOM is ready. `window.onload` ensures that the
    code gets executed when the document is completely downloaded and available.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The problem with the `onload` event is that it will fire only when the document
    and related files such as CSS and images get downloaded. When the page contains
    any large image files or content, it will slow down the triggering of the JavaScript
    code considerably. So, when we have to attach any event to any element (as shown
    in the preceding code), or if we have to hide any `div` containers during the
    loading of the page, it won't work as expected. Users will see an unresponsive
    or flickering website, based on their download speed.
  prefs: []
  type: TYPE_NORMAL
- en: DOMContentLoaded and workarounds
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Fortunately, Gecko-based browsers, such as Mozilla Firefox, have a special event
    called `DOMContentLoaded`. This event will get fired when the DOM is ready, before
    images, stylesheets, and subframes are completely downloaded. Wrapping the JavaScript
    code in the `DOMContentLoaded` event will improve the user experience as JavaScript
    will be triggered as soon as the DOM is ready.
  prefs: []
  type: TYPE_NORMAL
- en: 'The modified code that uses the `DOMContentLoaded` event is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'The `DOMContentLoaded` event was first introduced in Mozilla with version 1
    and, recently, other browsers (including Internet Explorer version 9) have started
    supporting it. As it has also been part of the HTML5 specification, more browsers
    might start supporting it soon. Till then, there are a lot of workarounds for
    `DOMContentLoaded`. For instance, jQuery''s `ready` function is an effort to support
    many browsers. The following code shows how the preceding code could be rewritten
    (in jQuery) with browser compatibility:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Even when we use browser-compatible hacks for the `DOMContentLoaded` event,
    there may be some circumstances where the hacks may not work as expected. In that
    case, we can trigger the `load` function by placing the initializing scripts just
    before the`</body>` tag.
  prefs: []
  type: TYPE_NORMAL
- en: Lazy-loading of images
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When lots of images are getting loaded, it will slow down the client browser;
    too many image requests will even slow down the web server. One common approach
    is to split the pages and distribute images and content equally. Another approach
    is to exploit JavaScript's power and avoid unnecessary image requests at the client
    level. The latter technique is called **lazy-loading**. In lazy-loading, the image
    requests are blocked until the image gets under the browser viewport, that is,
    until the user has physical view of the image.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We'll require a lengthy image gallery page to see how a lot of images on the
    page affects loading experience. We'll then have to decide between different approaches
    of lazy-loading implementation.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can address lazy-loading through the following methods:'
  prefs: []
  type: TYPE_NORMAL
- en: Pure JavaScript
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mangled HTML markup
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pure JavaScript approach
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In this approach, images won''t be referenced in HTML; they''ll only be referenced
    in JavaScript—either hardcoded or loaded from the JSON URL. The image elements
    will be dynamically formed, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: The problem with this approach is that the images are not defined in HTML markup
    and, thus, will not work in devices that don't support JavaScript. So, this eventually
    breaks the accessibility criteria. Pure JavaScript applications have issues getting
    indexed by search engines and, if the application's marketing is based on the
    **SEO** aka **Search Engine Optimization**, this approach fails to take off.
  prefs: []
  type: TYPE_NORMAL
- en: Mangled HTML markup
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Another approach is to keep the actual image in `rel` or `alt` attributes and
    form the `src` attribute dynamically. This is done when the image has to be displayed
    after setting the value from `rel` or `alt`. Part of the HTML markup and JavaScript
    is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Note that the mangled HTML markup approach is still not a neat and accessible
    approach.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The preceding approaches aren''t compliant with the progressive enhancement
    principles and they stop displaying images when the JavaScript engine isn''t available
    or is turned off. According to the progressive enhancement approach, the HTML
    markup should not be changed. When the DOM is ready, the `src` attribute of images
    outside the viewport is dynamically mangled so that the images won''t get downloaded.
    Part of the code that mangles up the image `src` attribute to stop downloading
    is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'When the images have to be loaded the following code snippet is used:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Though (so far) this is the best approach, and though it's easy to introduce
    lazy-loading through any JavaScript snippets, some of the latest browsers start
    downloading images much before the DOM is ready. Therefore, this approach doesn't
    work in all of the latest browsers. As the Web is evolving, this functionality
    might be added directly to browsers in the near future.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have many plugins for lazy-loading. We may also adopt a similar method—the
    deferred script loading technique—to load external scripts.
  prefs: []
  type: TYPE_NORMAL
- en: Lazy-loading plugins
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Some of the image lazy-loading plugins that are available for popular JavaScript
    frameworks are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Image Loader for YUI: [http://developer.yahoo.com/yui/3/imageloader/](http://developer.yahoo.com/yui/3/imageloader/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Lazy Load for jQuery: [http://www.appelsiini.net/projects/lazyload](http://www.appelsiini.net/projects/lazyload)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'LazyLoad for MooTools: [http://www.davidwalsh.name/lazyload](http://www.davidwalsh.name/lazyload)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'LazierLoad for Prototype: [http://www.bram.us/projects/js_bramus/lazierload/](http://www.bram.us/projects/js_bramus/lazierload/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lazy/deferred script loading
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Though lazy/deferred script loading is not directly related to the image lazy-loading
    functionality, it may be combined with the above techniques to get a better loading
    experience. When JavaScript files are normally linked in the`<head>` tag, the
    web browser will pause parsing of HTML code when the script is executed. This
    behavior will halt the browser for some time, and so the user will experience
    slow speeds. The previous suggestion was to place script linking just before the
    closing`</body>` tag. HTML5 has introduced the `async` attribute for the `script`
    tag; when it is used, the browser will continue parsing HTML code and will execute
    the script once it's downloaded. Script loading is asynchronous.
  prefs: []
  type: TYPE_NORMAL
- en: 'As the `async` attribute is supported in Gecko- and WebKit-based browsers,
    the following syntax works:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'For other browsers, `async` works only when injected through DOM. Here is the
    Google Analytics code that uses DOM injection to make asynchronous loading workable
    in all browsers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: When used for external scripts, such as Google Analytics, Facebook libraries,
    and so on, this will improve the loading speed.
  prefs: []
  type: TYPE_NORMAL
- en: Optimizing Ajax applications automagically through Apache modules/Google mod_pagespeed
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Optimizing Ajax applications automagically—without manual effort— is the most
    wanted tool for any developer. There are a few tools invented for that purpose.
    In this recipe, we'll see a few such automatic tools.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We''ll require a web application running over an Apache web server. For automatic
    optimization, we need the following Apache modules:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mod_deflate`, available at [http://httpd.apache.org/docs/2.0/mod/mod_deflate.html](http://httpd.apache.org/docs/2.0/mod/mod_deflate.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mod_expires`, available at [http://httpd.apache.org/docs/2.0/mod/mod_expires.html](http://httpd.apache.org/docs/2.0/mod/mod_expires.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mod_pagespeed`, available at [http://code.google.com/p/modpagespeed/](http://code.google.com/p/modpagespeed/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We have to install these modules and then set up the configurations for them
    to automatically handle the requests. We''ll see the configurations for each module:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mod_deflate:`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To enable automatic gzip handling for JavaScript, CSS, and HTML code, we can
    use AddOutputFilterByType and specify their MIME type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: '`mod_expires:`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To enable automatic browser caching on static content, such as, JavaScript,
    CSS, image files, SWF files, and favicons, we can specify their MIME type and
    expiration time, as shown next:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code snippet, we have registered a MIME type for icon files
    and, using the MIME type, we have set an expiration time of three months. This
    is mostly for favicon files. For static content, we can safely set an expiration
    time of 1 to 6 months, or more. The preceding code will handle the browser caching
    through the `Last-Modified` header rather than through ETag, as we have disabled
    ETag support. YSlow advises us to disable ETag altogether, in order to reduce
    the HTTP request header size.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**ETag** is now reportedly misused to uniquely identify users, as many users
    disable cookies for privacy reasons. So, there are efforts to disable ETag in
    browsers.'
  prefs: []
  type: TYPE_NORMAL
- en: '`mod_pagespeed:`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `mod_pagespeed` Apache module is Google's page speed initiative. Google's
    initiative started with the Page Speed Firefox extension, which is similar to
    YSlow. It is a page speed diagnostic tool intended to find bottlenecks and make
    suggestions. Currently, the Page Speed extension is available for Chrome, too.
  prefs: []
  type: TYPE_NORMAL
- en: The Page Speed diagnostic tool is now available as a web-based service at [http://pagespeed.googlelabs.com/](http://pagespeed.googlelabs.com/),
    so we can find out speed diagnostics without installing browser plugins.
  prefs: []
  type: TYPE_NORMAL
- en: An example of Google's remarkable effort in this domain is the invention of
    the `mod_pagespeed` Apache extension that automatically performs speed suggestions
    by rewriting HTML content by optimizing resources. When properly configured, it
    minifies, gzips, converts CSS sprites, and handles many other suggestions that
    the Page Speed browser extension would provide.
  prefs: []
  type: TYPE_NORMAL
- en: When we enable instrumentation in PageSpeed, it will inject tracker JavaScript
    code and will track through the beacon image that's dynamically added by `mod_pagespeed`.
    By accessing the `/mod_pagespeed_statistics` page in the server, we can find statistics
    about usage.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the quick configuration code to be placed in the `pagespeed.conf` file
    for `pagespeed_module`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Being modules of Apache, these modules handle optimization at the Apache level.
    That means we don't have to modify any of our PHP or JavaScript code.
  prefs: []
  type: TYPE_NORMAL
- en: '`mod_deflate:`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`mod_deflate` acts upon the specified content types. Whenever the application
    hits a specified content type, it processes the file and gzips it, based on browser
    request.'
  prefs: []
  type: TYPE_NORMAL
- en: '`mod_expires:`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This module also acts upon the configuration settings. It can process based
    on content type or file extension. When configured properly, it will add the `Last-Modified`
    header to avoid caching of resources. Based on the overall hits per day, it can
    significantly avoid downloading of static content resources to speed up the site
    loading.
  prefs: []
  type: TYPE_NORMAL
- en: '`mod_pagespeed:`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'As this module optimizes the HTML code by rewriting it, it needs to cache the
    files at the server. The path has to be configured in the `pagespeed.conf` configuration
    file. The rewriting setting is adjusted through ModPagespeedRewriteLevel, which
    is set to `CoreFilters` by default. With CoreFilters, the following filters are
    enabled automatically:'
  prefs: []
  type: TYPE_NORMAL
- en: '`add_head:` Adds a`<head>` element to the document, if not already present.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`combine_css:` Combines multiple CSS elements into one.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`rewrite_css:` Rewrites CSS files to remove excess whitespace and comments.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`rewrite_javascript:` Rewrites JavaScript files to remove excess whitespace
    and comments.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`inline_css:` Inlines small CSS files into the HTML.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`inline_javascript` Inlines small JavaScript files into the HTML.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`rewrite_images:` Optimizes images, re-encoding them, removing excess pixels,
    and inlines small images.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`insert_image:` Dimensions implied by `rewrite_images`. Adds width and height
    attributes to`<img>` tags that lack them.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`inline_images:` Implied by `rewrite_images`. Replaces small images with data
    urls inline data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`recompress_images:` Implied by `rewrite_images`. Recompresses images, removing
    excess metadata and transforming GIF images into PNGs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`resize_images:` Implied by `rewrite_images`. Resizes images when the corresponding`<img>`
    tag specifies a smaller width and height than the image size.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`extend_cache:` Extends cache lifetime of all resources by signing URLs with
    content hash.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`trim_urls:` Shortens URLs by making them relative to the base URL.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are a few other filters that are not enabled in `CoreFilters:`
  prefs: []
  type: TYPE_NORMAL
- en: '`combine_heads:` Combines multiple`<head>` elements found in the document into
    one.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`strip_scripts:` Removes all script tags from the document to help run experiments.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`outline_css:` Externalizes large blocks of CSS into a cacheable file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`outline_javascript:` Externalizes large blocks of JavaScript into a cacheable
    file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`move_css_to_head:` Moves all CSS elements into the`<head>` tag.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`make_google_analytics_async:` Converts synchronous use of Google Analytics
    API to asynchronous.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`combine_javascript:` Combines multiple script elements into one.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`convert_jpeg_to_webp:` Serves WebP rather than JPEG to compatible browsers.
    **WebP**, pronounced ''weppy'', is an image format from Google that produces better
    compression than JPEG without compromising on quality.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`remove_comments:` Removes comments in HTML files, though not inline JS or
    CSS.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`collapse_whitespace:` Removes excess whitespace in HTML files other than inside`<pre>,
    <script>, <style>`, and`<textarea>`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`elide_attributes:` Removes attributes that are not significant according to
    the HTML specs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`rewrite_domains:` Rewrites the domains of resources not otherwise touched
    by `mod_pagespeed`, based on `ModPagespeedMapRewriteDomain` and `ModPagespeedShardDomain`
    settings in `pagespeed.conf`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`remove_quotes:` Removes quotes around HTML attributes that are not lexically
    required.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`add_instrumentation:` Adds JavaScript to page to measure latency and send
    back to the server.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These filters can be enabled through `ModPagespeedEnableFilters`. Similarly,
    any filters that are enabled in CoreFilters can be disabled through `ModPagespeedDisableFilters`.
    We have to note that there will be a slight overhead in the server as this module
    rewrites all pages. We can selectively disable the filters and modify our HTML
    code manually in the way that it rewrites.
  prefs: []
  type: TYPE_NORMAL
- en: If all our pages are static, over a period of time, we may replace the HTML
    files with the rewritten HTML code available from the cache. We may then disable
    this module totally to avoid CPU overhead. This module is also a good learning
    tool, whereby we can learn what changes are needed in HTML, JavaScript, and CSS
    for improved performance.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In order to check if we have correctly configured the modules, or to check performance,
    there are a few online services available.
  prefs: []
  type: TYPE_NORMAL
- en: Testing HTTP headers
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'To ensure the `gzip` and browser caching that we have enabled are working correctly,
    we may use:'
  prefs: []
  type: TYPE_NORMAL
- en: The Net tab of the Firefox extension, Firebug, to analyze the HTTP headers manually
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The YSlow and PageSpeed extensions to check grade/score
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A web-based service, available at [http://www.webpagetest.org/](http://www.webpagetest.org/),
    that gives suggestions similar to YSlow and Page Speed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A web-based service, available at [http://redbot.org/](http://redbot.org/),
    to analyze the HTTP headers, which might be the easiest choice.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing mod_pagespeed without installing
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Using the online service available at [http://www.webpagetest.org/compare](http://www.webpagetest.org/compare),
    we can quickly test the speed improvement we may gain by installing `mod_pagespeed`.
    The video feature gives us real-time feedback about the difference.
  prefs: []
  type: TYPE_NORMAL
- en: Page Speed Service
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Google offers page speed services over the Web. We don't have to install `mod_pagespeed`
    in our server, if we use this service. The only change required in the server
    is to point the `DNS CNAME` entry to `ghs.google.com`.
  prefs: []
  type: TYPE_NORMAL
