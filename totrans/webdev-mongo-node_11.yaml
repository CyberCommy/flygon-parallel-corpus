- en: Popular Node.js Web Frameworks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Throughout this book, we've focused exclusively on using Express.js as our web
    framework of choice, primarily because it's one of the most popular web development
    frameworks for Node.js. It has been around for quite a while and is very widely
    used. However, there are a number of alternate frameworks available that I want
    to introduce you to. Some of these frameworks are much more powerful and robust
    than Express.js, while others are right in line with it, or slightly less feature
    packed.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will take a brief look at the following frameworks:'
  prefs: []
  type: TYPE_NORMAL
- en: Koa
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Meteor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sails
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Flatiron
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: total.js
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: loopback
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hapi
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: At the end, we will use one of these frameworks that is Hapi to build a server
    API. This server API will be consumed by a client-side application build in Angular
    4 in the next chapter. The whole purpose of building this web application is to
    study how can we choose a framework based on a project and how different frameworks
    have different bits and pieces of their own, yet build on the common platform
    of Node.js.
  prefs: []
  type: TYPE_NORMAL
- en: Koa
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Koa** is a new web framework designed by the same team that created Express.js.
    The goal of Koa is to be smaller, more expressive, and a more robust foundation
    for web applications. T J Holowaychuk, who is the creator of the Express framework,
    is the same person who created Koa, as well, and you can see that it focuses much
    of its capability on generators, which is a feature found in other popular programming
    languages, such as Python, C#, and Ruby. Generators were introduced to JavaScript
    with ECMAScript 6\. Generators prevent the standard callback hell that is so popular
    with the development process in Node.js. Koa has a lightweight architecture, so
    it doesn''t come with any middleware; rather, it leaves the choice of implementing
    certain features to the developers.'
  prefs: []
  type: TYPE_NORMAL
- en: More information about Koa and sample implementations can be found on its website,
    as well as at [https://github.com/koajs/koa](https://github.com/koajs/koa).
  prefs: []
  type: TYPE_NORMAL
- en: Meteor
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Meteor** is a simple and complete web framework with the goal of giving developers
    of any skillset the ability to build robust web applications in a fraction of
    the time.'
  prefs: []
  type: TYPE_NORMAL
- en: It features a handy CLI tool that you can use to scaffold new projects very
    quickly.
  prefs: []
  type: TYPE_NORMAL
- en: Meteor provides some core projects/libraries, such as blaze, DDP, livequery,
    and so on, with a unified build system. This simplifies the overall development
    process and yields an integrated developer experience.
  prefs: []
  type: TYPE_NORMAL
- en: Meteor aims to build real-time applications by providing its two core features,
    the distributed data protocol on the server side and transparent reactive rendering
    on the client side. For more details, visit [http://meteor.com/features](http://meteor.com/features).
  prefs: []
  type: TYPE_NORMAL
- en: Another notable feature of this framework is its extensive package system, named
    **atmosphere**, which has modules developed for most of the common application
  prefs: []
  type: TYPE_NORMAL
- en: use cases.
  prefs: []
  type: TYPE_NORMAL
- en: It is quickly gaining traction and becoming increasingly popular every day.
    Currently, its GitHub repo has over 38,000 stars!
  prefs: []
  type: TYPE_NORMAL
- en: More information about Meteor can be found on its website as well as on its
    official GitHub repo at [https://github.com/meteor/meteor](https://github.com/meteor/meteor).
  prefs: []
  type: TYPE_NORMAL
- en: Sails
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Sails** is another great MVC framework for building web applications using
    Node.js'
  prefs: []
  type: TYPE_NORMAL
- en: that sometimes compares itself to Ruby on Rails. Unlike Meteor, Sails is database
    agnostic, so it doesn't matter which data store you choose. Sails includes some
    handy scaffolding tools, such as an automatic RESTful API generation. `Socket.io`,
  prefs: []
  type: TYPE_NORMAL
- en: a real-time communication framework for Node.js, is built into Sails, so, including
    real-time functionalities in your application should be a breeze. Sails features
    some nice production-level automation that would typically need to be handled
    by a tool such as Grunt.js or Gulp (this includes the minification and bundling
    of CSS and JavaScript for the frontend). Sails also includes basic security and
    role-based authentication for your app, should you require that level of functionality.
    Sails could be considered a more full-fledged enterprise level framework than
    Express, as it has almost every feature that a popular framework such as Rails
    has. The Sails website is at [http://sailsjs.com](http://sailsjs.com).
  prefs: []
  type: TYPE_NORMAL
- en: More information about Sails can be found on its website, as well as its official
    GitHub repo at [https://github.com/balderdashy/sails](https://github.com/balderdashy/sails).
  prefs: []
  type: TYPE_NORMAL
- en: Flatiron
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Flatiron** is yet another Node.js MVC web application framework. What sets
    Flatiron apart from other frameworks is its package-based approach. Since it gives
    the power and freedom to decide how much or how little the framework should include,
    developers can pick and choose the packages they want to work with and include
    in their project. It handles a lot of the basic data management responsibilities
    and CRUD for you by supplying a powerful ODM that takes care of a lot of the heavy
    lifting.'
  prefs: []
  type: TYPE_NORMAL
- en: More information about Flatiron can be found on its website, as well as its
    official GitHub repo at [https://github.com/flatiron/flatiron](https://github.com/flatiron/flatiron).
  prefs: []
  type: TYPE_NORMAL
- en: total.js
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Yet another Node.js HMVC framework is total.js. As its name suggests, it provides
    total solutions from the web applications to IOT applications. You name a feature,
    and `total.js` has it; that is the speciality of `total.js`. It supports tons
    of features, such as image processing, workers, generators, static file handling,
    sitemaps, caching mechanisms, SMTP, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: The need to use a third-party module is reduced. It has a strong community support
    from the last three years and is again a strong contender that can outpace other
    frameworks in various aspects of functionality development.
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow the link for all the updates: [https://www.totaljs.com/](https://www.totaljs.com/).'
  prefs: []
  type: TYPE_NORMAL
- en: LoopBack
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: IBM and StrongLoop have architected one the of most powerful modern node frameworks,
    called **LoopBack**. It requires minimal effort to bootstrap an API server. LoopBack
    has a client inside itself called API explorer, which documents the API and also
    provides API testing at same time. It is a strong competitor for the Sails framework,
    with ready to go structure, and is fully configurable when needed. It has hooks
    for **Access control list** (**ACL**s), mobile client SDKs, convention over configuration
    based coding, and of course the IBM backed team that will maintain the project
    for long term support.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can get started with LoopBack at the following link: [https://loopback.io/](https://loopback.io/).'
  prefs: []
  type: TYPE_NORMAL
- en: Hapi
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Hapi** is the result of the team behind Walmart''s online mobile website.
    The team that built that website developed a rich set of Node.js utilities and
    libraries that can be found under the **Spumko umbrella**. Considering the tremendous
    amount of traffic Walmart''s website receives on any given day, it''s no wonder
    that the team at Walmart Labs is on the top of their game when it comes to Node.js
    development and best practices. Hapi is the web framework that was born from the
    ashes of real-world trial and error. The Hapi website is at [http://hapijs.com](http://hapijs.com).'
  prefs: []
  type: TYPE_NORMAL
- en: More information about Hapi can be found on its website, as well as its official
    GitHub repo at [https://github.com/spumko/hapi](https://github.com/spumko/hapi).
    In next section, we will implement a set of API's in the Hapi framework.
  prefs: []
  type: TYPE_NORMAL
- en: Kick starting Hapi.js
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In previous chapters, we studied and implemented Express framework. The Express
    community denotes it as minimalistic framework, and it thus provides performance
    benefits. For building any application, choosing the right framework is one of
    the most important factors for scalability of an application. In the case of Hapi,
    It has a different routing mechanism which boosts the performance of an application
    with its configurable pattern of code. It's always recommended that developers
    take into consideration all the benefits as well as downsides of any framework
    that it provides versus the functional implementation of application and its long-term
    goals. Let's understand the Hapi framework with the help of a small prototype.
  prefs: []
  type: TYPE_NORMAL
- en: The following steps give an incremental learning the experience of implementation
    of the Hapi framework using a phone book example. It is recommended to code as
    you read for better learning.
  prefs: []
  type: TYPE_NORMAL
- en: Scaffolding the Hapi app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Create a directory phone book-API and navigate to that directory by ``cd phonebook-api``.
    Use `npm init` to initialize a node project and complete the questionnaire provided
    by `npm`. Install the Hapi framework using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Setting up a server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The first file to be written must be a `server` file, so let''s create a ``server.js``.
    The minimal code required to kick-start a `server` with the `hapi` framework is
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: After reviewing the preceding code, we can observe that `hapi` starts its server
    by first configuring all the required data. It takes the host and port as input,
    and then finally starts the server. If we compare it with express, express needs
    a callback as an input first, and then the listening part.
  prefs: []
  type: TYPE_NORMAL
- en: Creating APIs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The next important step is creating routes. It is always recommended to follow
    modularity whenever we implement routes in any framework for the longtime maintainability
    of code. That being said, let''s create a `routes.js` file. As we are not going
    to use any database such as MongoDB or MySQL, let''s create a `json` file called
    `phonebook.json` for a supportive data source. Let''s create the following data
    in a `json` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The structure of our API directory is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2d90008a-d7e7-4d24-920d-5f60e0a7a65d.png)'
  prefs: []
  type: TYPE_IMG
- en: Creating a configuration-based architecture
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The configuration code pattern of `hapi` is followed everywhere, even for creating
    routes. Let''s understand it by adding a simple `GET` method and its handler in
    the following snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The preceding snippet shows the minimal configuration required to create a route.
    It consists of the `request` method, which can be `'GET'`, `'POST'`, and so on;
    the URL path for URL navigation purposes; and a `config` property that consists
    of the request handler. This handler is used to write all sort of business logic
    a on request received.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, include the route file inside `server.js` and assign the routes to the
    `hapi` server before the server starts. So to wrap up, we have the following code
    in `server.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s hit the route in the browser and view the response:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/03d443fd-2f95-4ea8-9e34-0fbe3fdf1d23.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Similarly, we can add, update, and delete the entries from the phone book.
    Our `routes.js` will look as follows :'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: We need to use a browser extension to test the preceding REST APIs. POSTMAN
    is one of popular the extensions for REST API calls. Refer chapter 8 to learn
    in details about POSTMAN.
  prefs: []
  type: TYPE_NORMAL
- en: Woot! Our server APIs are ready. In the next chapter, we will consume these
    API calls by creating a frontend application.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Even though we used Express.js exclusively throughout this book, there are many
    other options available when creating web applications using Node.js. We examined
  prefs: []
  type: TYPE_NORMAL
- en: a few of those options in this chapter, including Meteor, Sails, Hapi, Koa,
    and Flatiron. Each framework features its own strengths and weaknesses and its
    own unique approach to the standard functionality that a web application requires.
  prefs: []
  type: TYPE_NORMAL
- en: That's all, folks! I hope all the different facets of building a web app using
    Node.js and MongoDB brought the readers to a progressive way of learning and developing
    an awesome idea. Well, this is just the start. I would recommend that you follow
    the developer communities of all the technologies or libraries that you are going
    to use in your own app.
  prefs: []
  type: TYPE_NORMAL
- en: The beauty of web development with Node.js is that there's no shortage of opinions
    on how to accomplish a single task. MVC frameworks are no exception, and you can
    see from this chapter that there are a lot of really robust and feature-packed
    frameworks to choose from.
  prefs: []
  type: TYPE_NORMAL
