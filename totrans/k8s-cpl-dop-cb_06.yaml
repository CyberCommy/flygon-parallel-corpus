- en: Disaster Recovery and Backup
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will focus on the backup and disaster recovery scenarios
    that keep applications in production highly available and allow them to quickly
    recover services during cloud provider or basic Kubernetes node failures. After
    following the recipes in this chapter, you will have gained the skills to operate
    the tools that are used for **disaster recovery** (**DR**) and be able to live-migrate
    applications across clusters and clouds.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Configuring and managing S3 object storage using MinIO
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing Kubernetes Volume Snapshots and restore
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Application backup and recovery using Velero
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Application backup and recovery using Kasten
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cross-cloud application migration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The recipes in this chapter assume that you have a functional Kubernetes cluster
    deployed by following one of the recommended methods described in [Chapter 1](a8580410-3e1c-4e28-8d18-aaf9d38d011f.xhtml),* Building
    Production-Ready Kubernetes Clusters*.
  prefs: []
  type: TYPE_NORMAL
- en: The Kubernetes Operations tool `kubectl` will be used for the rest of the recipes
    in this chapter since it's the main command-line interface for running commands
    against Kubernetes clusters. If you are using a Red Hat OpenShift cluster, you
    can replace `kubectl` with `oc`. All the commands are expected to function in
    a similar fashion.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring and managing S3 object storage using MinIO
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will create an S3 object storage using MinIO to store artifacts
    or configuration files created by your applications in Kubernetes. You will learn
    how to create deployment manifest files, deploy an S3 service, and provide an
    external IP address for other applications or users to consume the service.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Clone the `k8sdevopscookbook/src` repository to your workstation to use manifest
    files under the `chapter6` directory, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Make sure you have a Kubernetes cluster ready and `kubectl` configured so that
    you can manage the cluster resources.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This section is further divided into the following subsections to make this
    process easier:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a deployment YAML manifest
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a MinIO S3 service
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Accessing the MinIO web user interface
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a deployment YAML manifest
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'All Kubernetes resources are created in a declarative way by using YAML manifest
    files. Let''s perform the following steps to create an example file we will use
    later to deploy an application in Kubernetes:'
  prefs: []
  type: TYPE_NORMAL
- en: For this recipe, we will use MinIO to create a couple of resources that we can
    use to understand the file format and later help us deploy the fully functional
    application. Open the MinIO download website by going to [https://min.io/download#/kubernetes](https://min.io/download#/kubernetes).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'On the MinIO website from the list of available download options, click on
    the Kubernetes button and select the Kubernetes CLI tab. This page will help us
    generate the YAML content required for the MinIO application based on our preferences:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/f6c098f2-e477-4d54-9dcb-c06d82636bbe.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Enter your access key and secret key pair. In our example, we used `minio`/`minio123`.
    This will be used in place of a username and password when you access your MinIO
    service. Select Distributed as the deployment model and enter `4` for the number
    of nodes. This option will create a StatefulSet with four replicas. Enter `10`
    GB as the size. In our example, we''ll use the values shown on the following configuration
    screen:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/ac4ca547-45a4-49e1-8abb-850c0d5f480c.png)'
  prefs: []
  type: TYPE_IMG
- en: Click on the Generate button and examine the file's content. You will notice
    three different resources stored in the YAML manifest, including service, StatefulSet,
    and second service, which will create a cloud load balancer to expose the first
    service ports to the external access.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the content and save it as `minio.yaml` on your workstation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Creating a MinIO S3 service
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let''s perform the following steps to create the necessary resources to get
    a functional S3 service using MinIO:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Deploy MinIO using the YAML manifest you created in the *Creating a deployment
    YAML manifest* recipe:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: As an alternative method, you can use the sample YAML file saved under the `/src/chapter6/minio`
    directory in the example repository using the `$ kubectl apply -f minio/minio.yaml`
    command.
  prefs: []
  type: TYPE_NORMAL
- en: 'Verify StatefulSet. You should see 4 out of 4 replicas deployed, similar to
    the following output. Note that if you deployed as standalone, you will not have
    StatefulSets:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Now, you have a MinIO application that's been deployed. In the next recipe,
    we will learn how to discover its external address to access the service.
  prefs: []
  type: TYPE_NORMAL
- en: Accessing the MinIO web user interface
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'As part of the deployment process, we have MinIO create a cloud load balancer
    to expose the service to external access. In this recipe, we will learn how to
    access the MinIO interface to upload and download files to the S3 backend. To
    do so, we will perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Get the `minio-service` LoadBalancer''s external IP using the following command.
    You will see the exposed service address under the `EXTERNAL-IP` column, similar
    to the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, the output service is exposed via port `9000`. To access the
    service, we also need to add port `9000` to the end of the address (`http://[externalIP]:9000`)
    and open the public address of the MinIO service in our browser.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You need to have permissions to access the Dashboard. Use the default username
    of `minio` and the default password of `minio123` we created earlier to log in
    to the Minio deployment. After you''ve logged in, you will be able to access the
    MinIO Browser, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/b5a51dc2-c1e4-4258-9fce-11333ec2342f.png)'
  prefs: []
  type: TYPE_IMG
- en: MinIO is compatible with the Amazon S3 cloud storage service and is best suited
    for storing unstructured data such as photos, log files, and backups. Now that
    you have access to the MinIO user interface, you can create bucks, upload your
    files, and access them through S3 APIs, similar to how you would access a standard
    Amazon S3 service to store your backups. You can learn more about MinIO by going
    to the *MinIO Documentation* link in the *See also* section.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe showed you how to provision a completely Amazon S3 API-compatible
    service using MinIO deployed on Kubernetes. This service will be used later for
    disaster recovery and backing up applications running on Kubernetes.
  prefs: []
  type: TYPE_NORMAL
- en: In the *Creating a MinIO S3 service* recipe, in *Step 1*, when we deploy MinIO,
    it creates a LoadBalancer service at port `9000`. Since we set the number of nodes
    to `4`, a StatefulSet will be created with four replicas. Each will use the information
    set under the `volumeClaimTemplates` section to create a PVC. If `storageClassName`
    is not defined specifically, then the default storage class will be used. As a
    result, you will see four instance of **PersistentVolumesClaim** (**PVC**) created
    on the cluster to provide a highly available MinIO service.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The MinIO documentation,at: [https://docs.min.io/docs/minio-quickstart-guide.html](https://docs.min.io/docs/minio-quickstart-guide.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MinIO Operator for Kubernetes at: [https://github.com/minio/minio-operator](https://github.com/minio/minio-operator)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The MinIO Erasure Code QuickStart Guide at: [https://docs.min.io/docs/minio-erasure-code-quickstart-guide](https://docs.min.io/docs/minio-erasure-code-quickstart-guide)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using MinIO Client, at: [https://docs.min.io/docs/minio-client-quickstart-guide](https://docs.min.io/docs/minio-client-quickstart-guide)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing Kubernetes Volume Snapshots and restore
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will create Volume Snapshots from our persistent volumes
    in Kubernetes. By following this recipe, you will learn how to enable the Volume
    Snapshot functionality, create snapshot storage classes, and restore from existing
    Volume Snapshots.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Make sure you have a Kubernetes cluster ready and `kubectl` configured to manage
    the cluster resources.
  prefs: []
  type: TYPE_NORMAL
- en: 'Clone the `k8sdevopscookbook/src` repository to your workstation to use the
    manifest files under the `chapter6` directory, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Make sure the **Container Storage Interface** (**CSI**) driver from your preferred
    storage vendor is installed on your Kubernetes cluster and has implemented the
    snapshot functionality. We covered the installation of the AWS EBS, GCP PD, Azure
    Disk, Rook, and OpenEBS CSI drivers in [Chapter 5](22439381-89a7-4cee-8aa1-77c63cb8a014.xhtml),
    *Preparing for Stateful Workloads*.
  prefs: []
  type: TYPE_NORMAL
- en: The instructions in this section work similarly with other vendors that support
    snapshots via CSI. You can find these additional drivers on the Kubernetes CSI
    documentation site at: [https://kubernetes-csi.github.io/docs/drivers.html](https://kubernetes-csi.github.io/docs/drivers.html).[ ](https://kubernetes-csi.github.io/docs/drivers.html)
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This section is further divided into the following subsections to make this
    process easier:'
  prefs: []
  type: TYPE_NORMAL
- en: Enabling feature gates
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a volume snapshot via CSI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Restoring a volume from a snapshot via CSI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cloning a volume via CSI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enabling feature gates
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Some of the features that will be discussed here may be at different stages
    (alpha, beta, or GA) at the moment. If you run into an issue, perform the following
    step:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Set the following `feature-gates` flags to `true` for both `kube-apiserver`
    and `kubelet`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: You can find the latest statuses for features and their states by going to the
    *Kubernetes Feature Gates* link in the *See also* section.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a volume snapshot via CSI
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'A volume snapshot is a copy of the state taken from a PVC in the Kubernetes
    cluster. It is a useful resource for bringing up a stateful application using
    existing data. Let''s perform the following steps to create a volume snapshot
    using CSI:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a PVC or select an existing one. In our recipe, we''ll use the AWS EBS
    CSI driver and the `aws-csi-ebs` storage class we created in [Chapter 5](22439381-89a7-4cee-8aa1-77c63cb8a014.xhtml),
    *Preparin**g for Stateful Workloads*, in the *Installing an EBS CSI driver to
    manage EBS volumes* recipe:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a pod that will write to the `/data/out.txt` file inside the **PersistentVolume**
    (**PV**):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a `VolumeSnapshotClass`. Make sure that the snapshot provider is set
    to your CSI driver name. In this recipe, this is `ebs.csi.aws.com`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'A PVC must be created using the CSI driver of a storage vendor. In our recipe,
    we will use the PVC we created in the *Installing EBS CSI driver to manage EBS
    volumes* recipe. Now, create a `VolumeSnapshot` using the PVC name (`csi-ebs-pvc`)
    we set in *Step 1*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'List the Volume Snapshots:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Validate that the status is `Ready To Use: true` when checking the output of
    the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Restoring a volume from a snapshot via CSI
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We can create snapshots in an attempt to restore other snapshots. Let''s perform
    the following steps to restore the snapshot we created in the previous recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Restore the volume from the snapshot with a PVC using the following command.
    As you can see, a new PVC named `csi-ebs-pvc-restored` will be created based on
    the `ebs-volume-snapshot` snapshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Create another pod that will continue to write to the `/data/out.txt` file
    inside the PV. This step will ensure that the volume is still accessible after
    it''s been created:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Confirm that the `newapp` pod contains the restored data and the timestamps
    from the *Creating a volume snapshot* recipe:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: With this, you've learned how to provision persistent volumes from an existing
    snapshot. This is a very useful step in a CI/CD pipeline so that you can save time
    troubleshooting failed pipelines.
  prefs: []
  type: TYPE_NORMAL
- en: Cloning a volume via CSI
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'While snapshots are a copy of a certain state of PVs, it is not the only way
    to create a copy of data. CSI also allows new volumes to be created from existing
    volumes. In this recipe, we will create a PVC using an existing PVC by performing
    the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Get the list of PVCs. You may have more than one PVC. In this example, we will
    use the PVC we created in the *Creating a volume snapshot* recipe. You can use
    another PVC as long as it has been created using the CSI driver that supports
    `VolumePVCDataSource` APIs:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a PVC using an existing PVC (in this recipe, this is `csi-ebs-pvc`)
    as the `dataSource`. The data source can be either a `VolumeSnapshot` or PVC.
    In this example, we used `PersistentVolumeClaim` to clone the data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: With that, you've learned a simple way of cloning persistent data from an existing
    data source.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe showed you how to create snapshots, bring data back from a snapshot,
    and how to instantly clone persistent volumes on Kubernetes.
  prefs: []
  type: TYPE_NORMAL
- en: In the *Restoring a volume from a snapshot* *via CSI* and *Cloning a volume
    via CSI* recipes, we added a `dataSource` to our PVC that references an existing
    PVC so that a completely independent, new PVC is created. The resulting PVC can
    be attached, cloned, snapshotted, or deleted independently if the source is deleted. The
    main difference is that right after provisioning the PVC, instead of an empty
    PV, the backend device provisions an exact duplicate of the specified volume.
  prefs: []
  type: TYPE_NORMAL
- en: It's important to note that native cloning support is available for dynamic
    provisioners using CSI drivers that have already implemented this feature. The
    CSI project is continuing to evolve and mature, so not every storage vendor provides
    full CSI capabilities.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: List of Kubernetes CSI drivers, at [https://kubernetes-csi.github.io/docs/drivers.html](https://kubernetes-csi.github.io/docs/drivers.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Container Storage Interface** (**CSI**) documentation , at [https://kubernetes-csi.github.io](https://kubernetes-csi.github.io)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The CSI spec, at [https://github.com/container-storage-interface/spec](https://github.com/container-storage-interface/spec)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kubernetes Feature Gates, at [https://kubernetes.io/docs/reference/command-line-tools-reference/feature-gates/](https://kubernetes.io/docs/reference/command-line-tools-reference/feature-gates/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kubernetes Volume Cloning documentation, at [https://kubernetes.io/docs/concepts/storage/volume-pvc-datasource/](https://kubernetes.io/docs/concepts/storage/volume-pvc-datasource/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kubernetes Volume Snapshots documentation, at [https://kubernetes.io/docs/concepts/storage/volume-snapshots/](https://kubernetes.io/docs/concepts/storage/volume-snapshots/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Application backup and recovery using Velero
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will create disaster recovery backups and migrate Kubernetes
    applications and their persistent volumes in Kubernetes using VMware Velero (formerly
    Heptio Ark).
  prefs: []
  type: TYPE_NORMAL
- en: You will learn how to install Velero, create standard and scheduled backups
    of applications with an S3 target, and restore them back to the Kubernetes clusters.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Make sure you have a Kubernetes cluster ready and `kubectl` configured to manage
    the cluster resources.
  prefs: []
  type: TYPE_NORMAL
- en: 'Clone the `k8sdevopscookbook/src` repository to your workstation to use the
    manifest files under the `chapter6` directory, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: This recipe requires an existing stateful workload with presentable data so
    that we can simulate a disaster and then restore the data. To do this, we will
    use the `mytestapp` application we created during the *Installing EBS CSI driver
    to manage EBS volumes* recipe in [Chapter 5](22439381-89a7-4cee-8aa1-77c63cb8a014.xhtml),
    *Preparing for Stateful Workloads*.
  prefs: []
  type: TYPE_NORMAL
- en: Velero also requires S3-compatible object storage to store the backups. In this
    recipe, we will use the MinIO S3 target we deployed during the *Configuring and
    managing S3 object storage using MinIO* recipe for storing our backups.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This section is further divided into the following subsections to make this
    process easier:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing Velero
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Backing up an application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Restoring an application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a scheduled backup
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Taking a backup of an entire namespace
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Viewing backups with MinIO
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deleting backups and schedules
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing Velero
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Velero is an open source project that''s used to make backups, perform disaster
    recovery, restore, and migrate Kubernetes resources and persistent volumes. In
    this recipe, we will learn how to deploy Velero in our Kubernetes cluster by following
    these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Download the latest version of Velero:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: At the time of writing this book, the latest version of Velero was v1.1.0\.
    Check the Velero repository at [https://github.com/vmware-tanzu/velero/releases](https://github.com/vmware-tanzu/velero/releases) and
    update the link with the latest download link if it's changed since this book's
    release.
  prefs: []
  type: TYPE_NORMAL
- en: 'Extract the tarball:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Confirm that the `velero` command is executable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Create the `credentials-velero` file with the access key and secret key you
    used in the *Configuring and managing S3 object storage using Minio* recipe:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Update the `s3Url` with the external IP of your MinIO service and install Velero
    Server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Confirm that the deployment was successful:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: With that, Velero has been configured on your Kubernetes cluster using MinIO
    as the backup target.
  prefs: []
  type: TYPE_NORMAL
- en: Backing up an application
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let''s perform the following steps to take a backup of an application and its
    volumes using Velero. All the YAML manifest files we create here can be found
    under the `/src/chapter6/velero` directory:'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you have an application and volumes to back up labeled already, you can
    skip to *Step 5*. Otherwise, create a namespace and a PVC with the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a PVC  in the `backup-example` namespace using your preferred `storageClass`.
    In our example this is `aws-csi-ebs`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Review the `myapp.yaml` file in the `src/chapter6/velero` directory and use
    it to create a pod that will use the PVC and write to the `/data/out.txt` file
    inside the pod:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Verify that our `myapp` pod writes data to the volume:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a backup for all the objects with the `app=app2backup` label:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Confirm that the backup phase is completed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'List all the available backups:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: With that, you've learned how to create a backup of an application using labels.
  prefs: []
  type: TYPE_NORMAL
- en: Restoring an application
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let''s perform the following steps to restore the application from its backup:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Delete the application and its PVC to simulate a data loss scenario:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Restore your application from your previous backup called `myapp-backup`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Confirm your application is running:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Confirm that our `myapp` pod writes data to the volume:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: With that, you've learned how to restore an application and its volumes from
    its backup using Velero.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a scheduled backup
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Velero supports cron expressions to schedule backup tasks. Let''s perform the
    following steps to schedule backups for our application:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a scheduled daily backup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: If you are not familiar with cron expressions, you can create a different schedule
    using the *Cron expression generator* link in the *See also* section.
  prefs: []
  type: TYPE_NORMAL
- en: Note that the preceding schedule uses a cron expression. As an alternative,
    you can use a shorthand expression such as `--schedule="@daily"` or use an online
    cron maker to create a cron expression.
  prefs: []
  type: TYPE_NORMAL
- en: 'Get a list of the currently scheduled backup jobs:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Confirm that a backup has been created by the scheduled backup job:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: With that, you've learned how to create scheduled backups of an application
    using Velero.
  prefs: []
  type: TYPE_NORMAL
- en: Taking a backup of an entire namespace
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When you take backups, you can use different types of selectors or even complete
    sources in a selected namespace. In this recipe, we will include resources in
    a namespace by performing the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Take a backup of the entire namespace using the following command. This example
    includes the `backup-example` namespace. Replace this namespace if needed. The
    namespace and resources should exist before you can execute the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'If you need to exclude specific resources from the backup, add the `backup:
    "false"` label to them and run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: With that, you've learned how to create backups of resources in a given namespace
    using Velero.
  prefs: []
  type: TYPE_NORMAL
- en: Viewing backups with MinIO
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let''s perform the following steps to view the content of the backups on the
    MinIO interface:'
  prefs: []
  type: TYPE_NORMAL
- en: Follow the instructions in the *Accessing a MinIO web user interface *recipe
    and access the MinIO Browser.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the `velero` bucket:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/efb51d77-7b1f-4a87-9833-cbf0d54a88a1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Open the `backups` directory to find a list of your Velero backups:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/06f1ed3a-b4c3-4dba-b7dd-ce13aa9cfdad.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on a backup name to access the content of the backup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/69115a8e-713f-4681-8e96-cb338c9e438c.png)'
  prefs: []
  type: TYPE_IMG
- en: With that, you've learned how to locate and review the content of Velero backups.
  prefs: []
  type: TYPE_NORMAL
- en: Deleting backups and schedules
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Velero backups can quickly grow in size if they''re not maintained correctly.
    Let''s perform the following steps to remove an existing backup resource and clean
    up scheduled backups:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Delete the existing backup named `myapp-backup`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Delete all existing backups:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Delete the scheduled backup job named `myapp-daily`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe showed you how to create disaster recovery backups, restore your
    application and its data back from an S3 target, and how to create scheduled backup
    jobs on Kubernetes.
  prefs: []
  type: TYPE_NORMAL
- en: In the *Backing up an application* recipe, in *Step 4*, when you run `velero
    backup create myapp-backup --selector app=app2backup`, the Velero client calls
    the Kubernetes API server and creates a backup object.
  prefs: []
  type: TYPE_NORMAL
- en: You can get a list of **Custom Resource Definitions** (**CRDs**) that have been
    created by Velero by running the `kubectl get crds |grep velero` command.
  prefs: []
  type: TYPE_NORMAL
- en: Velero's BackupController watches for a new object and when detected, it performs
    standard validation and processes the backup. Velero's BackupController collects
    the information to back up by asking resources from the API server. Then, it makes
    a call to the default storage provider and uploads the backup files.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Velero project repository, at [https://github.com/vmware-tanzu/velero/](https://github.com/vmware-tanzu/velero/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Velero documentation, at [https://velero.io/docs/master/index.html](https://velero.io/docs/master/index.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Velero support matrix, at [https://velero.io/docs/master/supported-providers/](https://velero.io/docs/master/supported-providers/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Velero podcasts and community articles, at [https://velero.io/resources/](https://velero.io/resources/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cron expression generator, at [https://www.freeformatter.com/cron-expression-generator-quartz.html](https://www.freeformatter.com/cron-expression-generator-quartz.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Application backup and recovery using Kasten**'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will create disaster recovery backups and migrate Kubernetes
    applications and their persistent volumes in Kubernetes using **Kasten** (**K10**).
  prefs: []
  type: TYPE_NORMAL
- en: You will learn how to install and use K10, create standard and scheduled backups
    of applications to an S3 target, and restore them back to the Kubernetes clusters.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Make sure you have a Kubernetes cluster ready and `kubectl` and `helm` configured
    so that you can manage the cluster resources. In this recipe, we will use a three-node
    Kubernetes cluster on AWS.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe requires an existing stateful workload with presentable data to
    simulate a disaster. To restore the data, we will use the `mytestapp` application
    we created in the *Installing EBS CSI Driver to manage EBS volumes* recipe in [Chapter
    5](22439381-89a7-4cee-8aa1-77c63cb8a014.xhtml), *Preparing for Stateful Workloads*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Clone the `k8sdevopscookbook/src` repository to your workstation to use the
    manifest files under the `chapter6` directory, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: K10, by default, comes with a Starter Edition license that allows you to use
    the software on a cluster with three worker nodes (at most) at no charge. K10 requires
    a backup target to be configured.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This section is further divided into the following subsections to make this
    process easier:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing Kasten
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Accessing the Kasten dashboard
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Backing up an application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Restoring an application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing Kasten
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let''s perform the following steps to install Kasten as a backup solution in
    our Kubernetes cluster:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the K10 helm repository:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'Before we start, let''s validate the environment. The following script will
    execute some pre-installation tests to verify your cluster:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'Make sure your preferred storage class is set as the default; otherwise, define
    it by adding the `-set persistence.storageClass` parameters to the following command.
    In our example, we are using the `openebs-cstor-default` storage class. Also,
    add your AWS access key and secret and install K10:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'Confirm that the deployment status is `DEPLOYED` using the following `helm`
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: All the pods should be deployed in around a minute after this step as Kasten exposes
    an API based on Kubernetes CRDs. You can either use `kubectl` with the new CRDs
    (refer to the *Kasten CLI commands* link in the *See also* section) or use the
    Kasten Dashboard by following the next recipe, that is, the *Accessing the Kasten
    Dashboard* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Accessing the Kasten Dashboard
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let''s perform the following steps to access the Kasten Dashboard. This is
    where we will be taking application backups and restoring them:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create port forwarding using the following command. This step will forward
    the Kasten Dashboard service on port `8000` to your local workstation on port
    `8080`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'On your workstation, open `http://127.0.0.1:8080/k10/#` with your browser:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'Read and accept the end user license agreement:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/d9d57128-8bd7-4866-b89c-783f526ba6e0.png)'
  prefs: []
  type: TYPE_IMG
- en: With that, you have accessed the Kasten Dashboard. You can familiarize yourself
    with it by clicking the main menus and referring to the *Kasten documentation*
    link in the *See also* section for additional settings if needed.
  prefs: []
  type: TYPE_NORMAL
- en: Backing up an application
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let''s perform the following steps to take a backup of our application:'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you have an application and persistent volumes associated with the backup
    labeled already, you can skip to *Step 5*. Otherwise, create a namespace and a
    PVC using the following example code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a PVC in the `backup-example` namespace:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a pod that will use the PVC and write to the `/data/out.txt` file inside
    the pod using the sample `myapp.yaml` manifest under the `src/chapter6/kasten`
    directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'Verify that our `myapp` pod writes data to the volume:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'On the Kasten Dashboard, click on Unmanaged applications:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/c5898a07-a42d-4519-882f-3b8df68b52fa.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the `backup-example` namespace, click on Create a policy:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/9a3b4e0b-e693-4c44-a086-9008ce33fae5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Enter a name and select the Snapshot action:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/361d0974-208f-40dd-b864-f1ad16f92c2f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Select Daily as the Action Frequency:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/e3748fc4-ecf5-4ffc-9c0d-c015fc813595.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on Create Policy:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/005f07e8-82a9-43fc-ba5c-939c8ba0cfbc.png)'
  prefs: []
  type: TYPE_IMG
- en: By following these steps, you will have created your first backup using the
    policy, as well as a schedule for the following backup jobs.
  prefs: []
  type: TYPE_NORMAL
- en: Restoring an application
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let''s perform the following steps to restore the application from an existing
    backup:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Under Applications, from the list of compliant applications, click the arrow
    icon next to `backup-example` and select Restore Application. If the application
    was deleted, then the Removed option needs to be selected:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/6622c618-54a4-4a76-a590-c6712d3fb734.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Select a restore point to recover to:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/96080433-08be-439f-8f64-7e5339a41259.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Select `backup-example` and click on Restore:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/ff4d400e-a230-4881-bd0b-ada3983bc960.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Confirm that you want this to be restored:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/03d1059c-9b06-4377-b123-798fe2c3654a.png)'
  prefs: []
  type: TYPE_IMG
- en: With that, you've learned how to restore an application and its volumes from
    its backup using Kasten.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe showed you how to create disaster recovery backups, restore your
    application and its data back from an S3 target, and how to create scheduled backups
    on Kubernetes.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the *Backing up an application* recipe, in *Step 2*, we created a pod that
    uses OpenEBS as a storage vendor. In this case, Kasten uses a generic backup method
    that requires a sidecar to your application that can mount the application data
    volume. The following is an example that you can add to your pods and deployment
    when using non-standard storage options:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Kasten documentation , at [https://docs.kasten.io/](https://docs.kasten.io/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kasten CLI commands, at [https://docs.kasten.io/api/cli.html](https://docs.kasten.io/api/cli.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More on generic backup and restore using Kanister, at [https://docs.kasten.io/kanister/generic.html#generic-kanister](https://docs.kasten.io/kanister/generic.html#generic-kanister)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cross-cloud application migration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When running applications on the cloud, it is important to have a plan in case
    cloud vendor service outages occur, as well as to avoid possible cloud lock-ins,
    by abstracting the storage layer using a cloud-native storage solution similar
    to the OpenEBS management layer that allows you to manage your exposure to each
    cloud or data center. In this section, we will migrate a cloud-native application
    from one Kubernetes cluster to another cluster running on a different cloud vendor
    to simulate a migration scenario. You will learn how to use backups to migrate
    applications using Kasten and OpenEBS Director.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Make sure you have two Kubernetes clusters ready and `kubectl` configured to
    manage the cluster resources.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will use a cluster on AWS that's been deployed and managed
    by D2iQ `Konvoy` and a cluster that's been deployed using `kops`. As an example,
    we will migrate an existing `minio` application.
  prefs: []
  type: TYPE_NORMAL
- en: The instructions provided here require an AWS account and an AWS user with a
    policy that has permission to use the related services. If you don't have one,
    go to [https://aws.amazon.com/account/](https://aws.amazon.com/account/) and create
    one.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This section is further divided into the following subsections to make this
    process easier:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating an export profile in Kasten
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exporting a restore point in Kasten
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating an import profile in Kasten
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Migrating an application in Kasten
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Importing clusters in OpenEBS Director
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Migrating an application in OpenEBS Director
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating an export profile in Kasten
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'First, we will use Kasten and create an export profile to store a remote copy
    of an example application to be used in the migration scenario. To do this, follow
    these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Under Settings, select the Mobility tab and click on New Profile:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/cdd97ec7-a6f5-4a3d-a36b-1262632e6a9c.png)'
  prefs: []
  type: TYPE_IMG
- en: To create a destination profile, select Export, check the Enable data portability
    box, select Amazon S3, and enter your user credentials.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on Validate and Save:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/b581e6be-bde1-4f00-aa14-8b4076f1eb8c.png)'
  prefs: []
  type: TYPE_IMG
- en: The export profile we created in this recipe will be used later to move data
    to another cluster.
  prefs: []
  type: TYPE_NORMAL
- en: Exporting a restore point in Kasten
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let''s perform the following steps to create an application restore point:'
  prefs: []
  type: TYPE_NORMAL
- en: Under Applications, from the list of compliant applications, click the arrow
    icon next to minio and select Export Application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select a restore point to export:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/3468839f-77dd-457a-8c9e-14bf94a24125.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Select your export profile and click on Export:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/3678bee2-6415-4002-82ef-458056c586e1.png)'
  prefs: []
  type: TYPE_IMG
- en: Confirm the restore.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Copy the text block to the clipboard:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/28bee252-28bc-4e74-9466-0d484c8fc8a6.png)'
  prefs: []
  type: TYPE_IMG
- en: Creating an import profile in Kasten
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let''s perform the following steps on our second cluster, which is where we
    want to migrate our application:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Under Settings, select the Mobility tab and click on New Profile:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/cdd97ec7-a6f5-4a3d-a36b-1262632e6a9c.png)'
  prefs: []
  type: TYPE_IMG
- en: To create a destination profile, select Import, select Amazon S3, and enter
    your user credentials.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the bucket name you created for the export profile on the source cluster.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on Validate and Save:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/45b04dbd-3d44-4082-ada0-2cf2de272c04.png)'
  prefs: []
  type: TYPE_IMG
- en: The import profile we created in this recipe will be used later to import data
    from another cluster.
  prefs: []
  type: TYPE_NORMAL
- en: Migrating an application in Kasten
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Finally, let''s perform the following steps to use the import profile and migrate
    an application from another cluster:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Under Policies, click on new policies:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/f677f96a-db96-4ea1-91c3-b4e6781a06c2.png)'
  prefs: []
  type: TYPE_IMG
- en: Select Import and check the Restore after import box.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select Daily as Action Frequency and paste the Config Data text block from the *Exporting
    a restore point* recipe.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the import profile you created in the *Creating import profile* recipe:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/d1ed6e91-6514-4442-ade2-c957aad5d211.png)'
  prefs: []
  type: TYPE_IMG
- en: Click the Create Policy button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After this step, Kasten will recover the application and its data from the restore
    point into the new cluster.
  prefs: []
  type: TYPE_NORMAL
- en: Importing clusters into OpenEBS Director
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'OpenEBS Director Online is a free-to-use **SaaS (Software as a Service)** solution
    (with the OnPrem option available for Enterprise users) for managing stateful
    applications in Kubernetes. In addition to its logging and monitoring capabilities,
    it provides **Data Migration as a Service** (**DMaaS**). In this recipe, we will
    learn how to add our existing clusters to the platform and then perform DMaaS
    in the following recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to [www.mayadata.io](http://www.mayadata.io) to sign in to your OpenEBS
    Enterprise Platform at [https://portal.mayadata.io/home](https://portal.mayadata.io/home):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/7093385d-3d37-4b90-b9f9-dd24f2b32231.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on the Connect your Cluster button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/5e7893ef-d6d6-43d4-beaf-35082cda9d66.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Name your project. Here, we used the name `GKECluster`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/94b19b9e-61be-4208-9714-10974dad61f3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Choose your Kubernetes cluster location. Here, we used a cluster on `GKE`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/d7724b3a-c711-4007-b16b-67d6d2feef3d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Copy and execute the command on your first cluster:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/5f7b4124-5ce5-4881-a11d-83724a277151.png)'
  prefs: []
  type: TYPE_IMG
- en: 'From the left-hand menu, click on Clusters:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/a221c7bb-1686-4715-acc2-ee1ed179c406.png)'
  prefs: []
  type: TYPE_IMG
- en: 'On the Clusters view, click on Connect a new Cluster and repeat *Steps 4* and
    *5* for the second cluster:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/d644a1cf-abc7-4c0f-84d4-045a43c33ed9.png)'
  prefs: []
  type: TYPE_IMG
- en: Once you are done, you will have both clusters visible on the platform.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Migrating an application in OpenEBS Director
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let''s perform data migration (DMaaS) by following these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'On the Clusters view, click on Free under the Subscription column and start
    your premium plan evaluation for both clusters:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/d187fb83-83e1-4ee4-a682-8c3ae95d2e01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'On your source cluster''s Overview page, click on the workload you want to
    migrate. In this recipe, we will migrate the MinIO workload:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/a95bcc41-65d4-4b85-8814-c5f77804a451.png)'
  prefs: []
  type: TYPE_IMG
- en: 'On the Application view, select the DMaaS tab and click on the New schedule
    button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/570b09c3-d9ed-4780-956f-979ff6bb4ed1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'On the New Schedule view, select AWS as an S3 provider and select your credentials
    and region. Finally, select the backup interval as Daily and click on the Schedule
    Now button to create a backup. As an alternative, you can also use GCP or MinIO
    as an S3 target:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/8954c3ca-0aff-46f4-8a7d-57179332ae2c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'From the left-hand menu, select DMaaS and click on the Restore button next
    to the schedule you created:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/f338c82a-6c2c-4c34-b141-eb0cd12fce7a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Select your target cluster from the list of managed clusters and click on Start
    Restore:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/ef0ee5f3-bc54-4107-a064-f3f64d09fd2f.png)'
  prefs: []
  type: TYPE_IMG
- en: Your workload will be restored to the second cluster.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: OpenEBS Director documentation, at [https://help.mayadata.io/hc/en-us](https://help.mayadata.io/hc/en-us)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using OpenEBS Director in Auto DevOps usecase, at [https://youtu.be/AOSUZxUs5BE?t=1210](https://youtu.be/AOSUZxUs5BE?t=1210)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Connecting to OpenEBS Director Online, at [https://docs.openebs.io/docs/next/directoronline.html](https://docs.openebs.io/docs/next/directoronline.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
