- en: Creating a RESTful API Using Laravel - Part 1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we get started, let's briefly introduce a software development standard
    called the RESTful API.
  prefs: []
  type: TYPE_NORMAL
- en: An **Application Programming Interface **(**API)** is a set of instructions,
    routines, and programming patterns used to access an internet-based application.
    This allows a computer or other application to understand the instructions in
    this application, interpret its data, and use it for integration with other platforms
    and software, generating new instructions that will be executed by this software
    or computers.
  prefs: []
  type: TYPE_NORMAL
- en: In this way, we understand that the APIs allow interoperability between applications.
    In other words, this is communication between applications, in our case, the communication
    between the client-side and the server-side.
  prefs: []
  type: TYPE_NORMAL
- en: '**Representational State Transfer **(**REST**) is an abstraction of the web
    architecture. Briefly, REST consists of principles, rules, and constraints that,
    when followed, allow the creation of a project with well-defined interfaces.'
  prefs: []
  type: TYPE_NORMAL
- en: The features available in a RESTful service can be accessed or manipulated from
    a set of operations that are predefined by default. The operations make it possible
    to create (PUT), read (GET), change (POST), and delete (DELETE) resources, and
    are available from messages using the HTTP protocol.
  prefs: []
  type: TYPE_NORMAL
- en: Although Laravel is an– MVC framework, we can build RESTful apps that are extremely
    robust and scalable.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, you will learn how to build a RESTful API using the core elements
    of the Laravel framework, such as controllers, routes, and Eloquent **Object Relational
    Mapping** (**ORM**). Mainly, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Preparing the application and understanding what we are building
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An Eloquent ORM relationship
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Controllers and routes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Preparing the application and understanding what we are building
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's start this session using the application that we started to develop in
    the previous chapter. However, we will make some adjustments before continuing.
    First, we are going to add our code to the version control. In this way, we will
    not lose the progress we made in the previous chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside the `chapter-04` folder, create a new file called `.gitignore` and add
    the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: See [https://help.github.com/articles/ignoring-files](https://help.github.com/articles/ignoring-files) for
    more information about ignoring files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you find yourself ignoring temporary files generated by your text editor or
    operating system, you probably want to add a global ignore instead `git config
    --global core.excludesfile '~/.gitignore_global'`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ignore the `storage` folder's due size
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The previous code just added the `storage-db` folder to untracked files.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s add the changes to source control. Inside the Terminal window, type
    the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Finally, let's add our first commit.
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside the Terminal, type the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Bravo! We have our code under Git source control.
  prefs: []
  type: TYPE_NORMAL
- en: Refactoring the application files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, it is time to change some files to adjust to `chapter-05`**:**
  prefs: []
  type: TYPE_NORMAL
- en: Copy all the content of `chapter-04` and paste it into a new folder called `chapter-05`**.**
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the `docker-compose.yml` file and replace the code with the following
    lines:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Note that we changed `MYSQL_DATABASE` and `MYSQL_USER` and also changed the
    container names to fit the `chapter-05` title.
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the `project/.env` file with the new database information, as in the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Now, delete the `storage-db` folder. Don't worry – we will create a new one
    with the `docker-compose` command later.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It's time to commit our new changes, but this time we will do it another way.
    This time, we will use the Git Lens VS Code plugin.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open VS Code. On the left-hand side bar, click on the third icon for source
    control.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add the following message inside the message box at the top-left sidebar `Init
    chapter 05`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press C*ommand* *+E**nter* on macOSX, or *Ctrl* *+* *Enter* on Windows, and
    click Yes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Well done. Now, we can start `chapter 05` with a new baseline of files.
  prefs: []
  type: TYPE_NORMAL
- en: What we are building
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, let's talk a bit about the application we have been building since the
    beginning of this book.
  prefs: []
  type: TYPE_NORMAL
- en: As we can see, we have already built a lot of things so far, but we still don't
    have a clear idea of what we are doing about the project. And this is the best
    way to learn and practice web application development.
  prefs: []
  type: TYPE_NORMAL
- en: Many times, when we are learning or doing something for the first time, we tend
    to pay close attention to the final project and, at this point, there is an anxiety
    to finish what we started to do and we cannot focus on the building process and
    details.
  prefs: []
  type: TYPE_NORMAL
- en: Here, we already have *40%* of our project ready. Then, we can reveal more details
    about what we are doing.
  prefs: []
  type: TYPE_NORMAL
- en: Remember, until now, we have prepared a highly scalable development environment
    using Docker, installed some very important tools that will help us in our development,
    and learned how to start a solid Laravel application.
  prefs: []
  type: TYPE_NORMAL
- en: 'The application will be called Custom Bike Garage, a kind of Instagram/Twitter
    for lovers of custom motorcycle culture. At the end of the development, we will
    have a web application very similar to the following wire frames screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/afbdce08-53d1-432e-bdcf-a0edffdf6e20.png)Home page'
  prefs: []
  type: TYPE_NORMAL
- en: 'The previous screenshot is just a basic application home page, with navigation
    links and a call-to-action button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/53677fd1-0c17-4b1e-b9b4-538c74d82a13.png)Bike list page'
  prefs: []
  type: TYPE_NORMAL
- en: The application's summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As we can see in the previous screenshot, our application has:'
  prefs: []
  type: TYPE_NORMAL
- en: A home page, which we will call `home` page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A page of motorcycles, which we will call a `bike-list` page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A bike detail page, which we will call a `bike-details` page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A builders page, which we will call a `builders-list` page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A builder detail page, which we will call a `builder-details` page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A register page, which we will call a `register-page` page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A login page, which we will call a `login-page` page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A rating page, where users can vote on bikes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Imagine that we are building a custom bike application for an exhibition conference.
    Each conference has a name and customer level.
  prefs: []
  type: TYPE_NORMAL
- en: Users can register, vote on the best bike, and insert their own bike. The conference
    shows some customized bikes by renowned bike builders, with many custom items
    for each bike.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, what we still need to do in order to complete the backend of the application
    is  as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Create models for `Builder`, `Item`, `Garage`, and `Rating`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create migration files for `Builder`, `Item`, `Garage`, and `Rating`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Seed the database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create controllers for `Bike`, `Builder`, `Item`, `Garage`, and `Rating`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Apply the relationship between models
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use resources to represent relationships
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a token-based authentication
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating models and migrations files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s starting creating the builders model and migration file using the `-m` flag.
    Like we did previously in this book, we can create both files at the same time:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open your Terminal window and type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Still on your Terminal window, type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Still on your Terminal window, type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Still on your Terminal window, type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '*Steps 1* to *step 4* will produce the following new files in our application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Note the `XXXX_XX_XX_XXXXXX` before the migration file name. It is a timestamp
    of when the file was created.
  prefs: []
  type: TYPE_NORMAL
- en: 'At this point, we can see the previous six models on the VS Code left-hand
    side panel, as in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/b155ca8e-c58d-4f7e-9d82-2d57457714ad.png)Left-hand side panel'
  prefs: []
  type: TYPE_NORMAL
- en: Note that we have already created the `Bike` model in [Chapter 4](81c1b0fb-3b75-44fa-8f1b-356c9e85c1ce.xhtml), *Building
    the Baseline Application, *and, by default, Laravel's created the `User` model
    for us.
  prefs: []
  type: TYPE_NORMAL
- en: Now, as we did previously, let's commit the new files created and click the source
    control icon on the left-hand panel of VS Code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type the following text inside the message input field: `Added Models and Migration
    files`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press *C**ommand* *+* *Enter* on macOSX, or *C**trl* *+* *Enter* on Windows,
    and click the Yes button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Adding content to migration files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, let''s create the content of our migration files. Remember that migration
    files are the simplest and fastest way to create our database schemes using Laravel:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `project/database/migrations/XXXX_XX_XX_XXXXXX_create_builders_table.php` and
    replace the content with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Open `project/database/migrations/XXXX_XX_XX_XXXXXX_create_items_table.php` and
    replace the content with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Notice the `$table->unsignedInteger('bike_id')` foreign key for the Bike table.
    Later in this chapter, we go deep into model relationships/associations, but for
    now let's focus on migration files.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open `project/database/migrations/XXXX_XX_XX_XXXXXX_create_garages_table.php` and
    replace the content with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Now, we need another table, just to set up the relationship between `Bike` and `Garage`.
    We are using the `artisan` command to create a migration file, since, for this
    kind of relationship, we don't need a model. This table is also known as a pivot table.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open your Terminal window and type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Open `project/database/migrations/XXXX_XX_XX_XXXXXX_create_bike_garage_table.php` and
    replace the content with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Remember that the bike migration file was created in the previous chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open your Terminal window and type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Open `project/database/migrations/XXXX_XX_XX_XXXXXX_create_ratings_table.php` and
    replace the content with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Well, its time to understand a bit more about what we did in this session, so
    let's go to the next session and understand how `Eloquent` works.
  prefs: []
  type: TYPE_NORMAL
- en: Eloquent ORM relationship
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Eloquent is the ORM that is behind Laravel's database queries. It's an abstraction
    of active record implementation.
  prefs: []
  type: TYPE_NORMAL
- en: As we saw previously, each application model has a respective table in our database.
    With this, we can query, insert, delete, and update records.
  prefs: []
  type: TYPE_NORMAL
- en: The Eloquent ORM uses the snake case plural name of the class, which will be
    used as the table name, unless another name is explicitly specified. For example,
    our `Bike` model class has its own table bikes.
  prefs: []
  type: TYPE_NORMAL
- en: 'The application models have the following tables:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Application Model | Database Table |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `Bike.php` | bikes |'
  prefs: []
  type: TYPE_TB
- en: '| `Builder.php` | builders |'
  prefs: []
  type: TYPE_TB
- en: '| `Garage.php` | garages |'
  prefs: []
  type: TYPE_TB
- en: '| `Item.php` | items |'
  prefs: []
  type: TYPE_TB
- en: '| `Rating.php` | ratings |'
  prefs: []
  type: TYPE_TB
- en: '| `Builder.php` | builders |'
  prefs: []
  type: TYPE_TB
- en: '| `User.php` | users |'
  prefs: []
  type: TYPE_TB
- en: Note that we keep the table convention name, but it is possible to use a custom
    table name. For the scope of this book, we will keep the table names  generated
    by Laravel.
  prefs: []
  type: TYPE_NORMAL
- en: You can read more about table names and model conventions in the official Laravel
    documentation at [https://laravel.com/docs/5.6/eloquent#defining-models](https://laravel.com/docs/5.6/eloquent#defining-models).
  prefs: []
  type: TYPE_NORMAL
- en: 'The Eloquent ORM supports the following relationships between models:'
  prefs: []
  type: TYPE_NORMAL
- en: One-to-one
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One-to-many
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Belongs to (inverse = one-to-many)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Many-to-many
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Has-many
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Polymorphic relations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Many-to-many polymorphic relations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will see the first four relationships in detail; however, we can't cover
    all relationships in detail in our book. It is pretty simple to understand the
    relationships, also known as associations, in many frameworks as well.
  prefs: []
  type: TYPE_NORMAL
- en: You can read more about relationships at [https://laravel.com/docs/5.6/eloquent-relationships](https://laravel.com/docs/5.6/eloquent-relationships).
  prefs: []
  type: TYPE_NORMAL
- en: One-to-one relationship
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's set up the one-to-one relationship between `Builder` and `Bike`. This
    means that a `Bike` will have just one `Builder`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `project/app/Builder.php` and replace the content with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Note that we added the Swagger documentation definition as we did in the previous
    chapter. The `bike()` function creates a one-to-one relationship. You can use
    any name on the relationship function, but we strongly recommend that you use
    the same model name, in our case, `Bike` model class.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s add the respective relationship to the `Bike` model. Open `project/app/Bike.php` and
    add the following code immediately after the protected fillable function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Notice that `belongsTo` relation is a one-to-many inverse relationship.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `project/app/Item.php` and replace the content with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: One-to-many relationship
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The one-to-many relationship will be applied between `Bike` and `Items`, which
    means that one `bike` will have many custom `items`.
  prefs: []
  type: TYPE_NORMAL
- en: Still in the `project/app/Bike.app` file, let's add the one-to-many relationship
    between the `Item` and `Bike` models.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following code immediately after the `builder()` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Many-to-many relationship
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For the many-to-many relationship, we will have many Bikes in many Garages by
    using the pivot table.
  prefs: []
  type: TYPE_NORMAL
- en: In the many-to-many relationship, we need to respect some naming rules.
  prefs: []
  type: TYPE_NORMAL
- en: The name of the pivot table should consist of singular names of both tables,
    separated by underscore symbols, and these names should be arranged in alphabetical
    order.
  prefs: []
  type: TYPE_NORMAL
- en: By default, there should only be two pivot table fields and the foreign key
    to each of the tables, in our case, `bike_id` and `garage_id`.
  prefs: []
  type: TYPE_NORMAL
- en: Still in the `project/app/Bike.app` file, let's add the many-to-many relationship
    between the Bike and Garage models.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following code immediately after the `items()` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Notice that in the previous code, we are creating the relationship of Bike and Garage in
    a third table, called the pivot table, which will hold the information relating
    to the relationship, as we explained previously.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, it is time to add the relationship between the user and the ratings with
    bikes. Add the following code immediately after the `garages()` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'At this point, we will have the following relationships in the `Bike` model:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s add the relationship in the `project/app/Garage.app` model. Replace
    its content with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Note that we are using `belongsToMany()` and not `hasMany()`. `hasMany()` is
    used for one-to-many relationships.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s add the relationship in the `project/app/User.app` model. Replace
    its content with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Open the `project/app/Rating.app` model, and replace its content with the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we have our migration files and application models ready, we can create
    the seeds file to feed our database. But before we go further, let''s migrate
    our tables to our database. Inside your Terminal window, type the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Well done! We have successfully migrated all our tables, and now our database
    is good to go.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you have some issues when trying to use the `migrate` command, use the `refresh`parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Seeding our database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Remember that, in the last chapter, we already created the Bike seed, so now
    we just need to create another three seeds, which are going to be `Builders`,
    `Items`, and `Garage`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open your Terminal window and type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following code to the `app/database/seeds/BuildersTableSeeder.php`public
    function `run()`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Still in your Terminal window, type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following code to `app/database/seeds/ItemsTableSeeder.php`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'In your Terminal window, type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following code to the `app/database/seeds/GaragesTableSeeder.php`, `run()` 
    public function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following code to the `app/database/seeds/UsersTableSeeder.php` folder''s
    public function, `run()`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Note that we are using the same function as we did in the previous chapter to
    load the sample data. Now, it's time to create the JSON files.
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside `project/database/data-sample/`, create a new file called `builders.json` and
    add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside `project/database/data-sample/`, create a new file called `items.json`and
    add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we need to create some more seeds so that we have all the database boilerplate
    for our app. Still in the Terminal window, type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following code to the `app/database/seeds/BikesGaragesTableSeeder.php` public
    function, `run()`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Notice that in the previous code, we just inserted the records manually using
    the Eloquent `insert()` method instead to create a JSON file for this task.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, open `project/database/data-sample/bikes.json` and replace the content
    with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: In the previous code, we added the `builder_id` and `user_id` to each bike record
    to make the association between a bike and its builder and the user and their
    bike. Remember that we created `project/database/data-sample/bikes.json` in the previous
    chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Note that we assigned bike `4` and `5` to `user_id` as `4` and `5`. Don't worry
    about this now, as later on in the book, you will understand why we did this now.
  prefs: []
  type: TYPE_NORMAL
- en: Open `project/database/seeds/databaseSeeder.php` and uncomment the user's seeds.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s use the `seed` command to fill our database. Type the following command
    in your Terminal window:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'After using the previous command, we will have the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: This means that everything is correct for now.
  prefs: []
  type: TYPE_NORMAL
- en: The `migrate:fresh` command will drop all tables from the database and then
    execute the `migrate` command with a fresh install.
  prefs: []
  type: TYPE_NORMAL
- en: Querying the database using Tinker
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Tinker** is a command-line application that allows you to interact with your
    Laravel application, including the Eloquent ORM, jobs, events, and more. To get
    access to the Tinker console, run the `artisan tinker` command that we previously
    used to check the database connection in [Chapter 01](74a39699-781f-4a6e-a6ab-b696bac7a0f3.xhtml),
    *Understanding the Core Concepts of Laravel 5*.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open your Terminal window and type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: Since we have not created any controllers or routes for our application yet,
    it's impossible to check our data using the browser to access the API endpoints.
  prefs: []
  type: TYPE_NORMAL
- en: However, using Tinker, it is possible to interact with our database and check
    whether everything went well with our migration files and database seed.
  prefs: []
  type: TYPE_NORMAL
- en: Let's go to the builders table and make sure that everything is set up correctly.
  prefs: []
  type: TYPE_NORMAL
- en: 'Still on your Terminal and inside the Tinker console, type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'The output on your Terminal will be a builders list that''s very similar to
    the following JSON structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: Note that you omit all the records on the builders list, so do not become repetitive
    in your code blocks.
  prefs: []
  type: TYPE_NORMAL
- en: 'Still on your Terminal and inside the Tinker console, type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we have just one record with the id `3` inside the `find()` function,
    as we can see in the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: Now, let's see how we can get the same result from the previous command, but
    this time using the Where clause and the `Builder` model instance.
  prefs: []
  type: TYPE_NORMAL
- en: 'Still on your Terminal and inside the Tinker console, type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'We will have the following output as a query result:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: But wait, you must be asking yourself, where is the bike data? Remember that
    we attribute a bike to a builder on our seed. Let's introduce the association
    query.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, imagine that we want to query all customized bikes. Still on your Terminal
    and inside the Tinker console, type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that the previous command will return the builder record with `id: 3` using
    the` find()` method and the `::with()` method association. This time, we can see
    the bike''s information, as shown in the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: Now, let's see how we can submit a query to get all model associations, this
    time using the Builder model instance.
  prefs: []
  type: TYPE_NORMAL
- en: 'Still on your Terminal and inside the Tinker console, type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that we are using an array inside the `::with()` method to get items and builderassociations,
    as we can see in the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: Creating controllers and routes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We are almost there, but we have a few steps left so that we can finish our
    API. Now, is time to create the API controller and API routes.
  prefs: []
  type: TYPE_NORMAL
- en: With the newest version (5.6) from Laravel we have a new command available to
    do this task. This is the `--api` flag. Let's see how it works in practice.
  prefs: []
  type: TYPE_NORMAL
- en: Creating and updating the controller function
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Open your Terminal window and type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that the `--api` flag creates four methods for us inside the `BuilderController`
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '`index()` = GET'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`store()` = POST'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`show($id)` = GET'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`update(Request $request, $id)` = PUT'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`destroy($id)` = POST'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Open `project/app/Http/Controllers/API/BuilderController.php` and add the `App\Builder` code
    right after the Controller import.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, let''s add the content for each method. Open `project/app/Http/Controllers/API/BuilderController.php` and
    replace the content with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s add the code for the `store/create` method. Add the following code
    right after the `index()` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s add the code for the get by `id` method. Add the following code
    right after the `store()` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s add the code for the update method. Add the following code right after
    the `show()` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s add the code for the delete method. Add the following code right
    after the `update()` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: Note that in the `index()` function, we are using the `all()` method to list
    all Bikes and using the associated `::with()` method just on the `show($id)` function.
  prefs: []
  type: TYPE_NORMAL
- en: 'We have already added the Swagger definitions to the controller, but don''t
    worry: later in this chapter, we will discuss this in detail.'
  prefs: []
  type: TYPE_NORMAL
- en: The model association query to list bikes and show bike details, is a simple
    API decision. As you can see, we are returning the bike list without all associations
    and just returning the associations on the get bike by id. It doesn't make sense
    to return every association on every request, so on the Bike list, we just show
    the bike's details and when we click on details, we will see the complete information
    with all model association. So don't worry about this now, as later on in the
    [chapter 10,](59c19982-99f5-47d5-a4ed-82763ef9288d.xhtml) *Frontend views with
    Bootstrap 4 and NgBootstrap*, we will see how to do this.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open your Terminal window and type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: Open `project/app/Http/Controllers/API/ItemController.php` and add the following
    code right after the Controller import: `use App\Item;`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s add the content for each method. Open `project/app/Http/Controllers/API/ItemController.php` and
    add the following code for each one:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'Open your Terminal window and type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'Open `project/app/Http/Controllers/API/BikeController.php` and add the following
    code right after the Controller import:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s add the content for each method. Open `project/app/Http/Controllers/API/BikeController.php` and
    add the following code for each one:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'Open your Terminal window and type the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: 'Open `project/app/Http/Controllers/API/RatingController.php` and add the following
    code right after the Controller import:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let’s add the content for each method. Open `project/app/Http/Controllers/API/RatingController.php` and
    add the following code for each one:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: You should be finding some strange things in the rating controller code. Among
    them, we have some new error codes, `422`, `405`, and a security tag in the Swagger
    documentation, plus a new import called **r****ating resource**.
  prefs: []
  type: TYPE_NORMAL
- en: This may sound strange, but do not panic; we'll look at this in detail in the
    following sections.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the API routes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, it is time to create some API routes and check what we have built so far.
    We are using the new feature of `apiResource`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `project/routes/api.php` and add the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: At this moment, we already have the necessary code for our API, so we need to
    make some small adjustments and explain some more things.
  prefs: []
  type: TYPE_NORMAL
- en: Generating Swagger UI documentation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you can see from the previous examples, we have already added the documentation
    of our API through the Swagger definitions to our recently created controllers.
    This is the same code we used in the previous example. Let's generate the documentation
    on the Swagger UI.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open your Terminal window and type the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: As you can note on the previous Swagger definitions on error messages, we have
    some new HTTP errors, such as `422`.
  prefs: []
  type: TYPE_NORMAL
- en: This means that if the user tries to input some data with one or more missing
    required fields, our API must return an HTTP error code. This will be `422`. So,
    let's see how we can implement some validation and verify some common API HTTP
    codes.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have come to the end of part one of our chapter, where we created a robust
    and scalable RESTful foundation for our API. We learned how to create controllers,
    routes, and how to deal with Eloquent relationships.
  prefs: []
  type: TYPE_NORMAL
- en: We still have a lot of work ahead, as we need to deal with error messages, resources,
    and token-based authentication. In the next chapter, we will see how to accomplish
    this.
  prefs: []
  type: TYPE_NORMAL
