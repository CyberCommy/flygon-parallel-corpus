- en: Coding on the micro:bit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will introduce the micro:bit microcontroller. We'll explore
    its features and its strengths compared to other microcontrollers. By the end
    of this chapter, you will have learned how to load your code on this microcontroller,
    control its LED grid display, as well as interact with the buttons that come on
    board. This chapter ends with a nice project so that you can create a countdown
    timer using this hardware. Each MicroPython board has its own strengths, and it's
    good to know what's out there so that you can choose the right hardware for your
    project.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Using Mu to flash code onto the micro:bit
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Mu to get a REPL on the micro:bit
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying a single character on the LED display
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying a built-in image
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying scrolling text
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Showing which button has been pressed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a countdown timer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The code files for this chapter can be found in the `Chapter09` folder in this
    book's GitHub repository, available at [https://github.com/PacktPublishing/MicroPython-Cookbook](https://github.com/PacktPublishing/MicroPython-Cookbook).
  prefs: []
  type: TYPE_NORMAL
- en: You will need the BBC micro:bit board and the Mu text editor for the recipes
    in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: The micro:bit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Micro Bit was created by the **British Broadcasting Corporation** (**BBC**)
    as a board that could be used for educational purposes in the UK. It is about
    half the size of a credit card and is packed with a number of input and output
    sensors, which is surprising when you consider its size. It has both an accelerometer
    and a magnetometer. It has two push buttons and a reset button. There is a 5 x
    5 array of LEDs that can act as a basic display to show different symbols and
    characters. The following photo shows what this board looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/e9ef093d-41ba-417b-8baf-d900e073a2d8.png)'
  prefs: []
  type: TYPE_IMG
- en: The board supports a portable power supply by using an external battery pack
    with AAA batteries. A USB connection is used to connect the board to a computer
    to transfer scripts over and run the REPL.
  prefs: []
  type: TYPE_NORMAL
- en: Using Mu to flash code onto the micro:bit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe will show you how to flash your Python scripts to the micro:bit.
    The Mu text editor has built-in support for flashing code to this type of board,
    and this recipe will take you through this process. Once we understand this, we
    can use it to develop and load whatever scripts we need onto the micro:bit board.
    This is an essential first step whenever you want to create projects and experiment
    with the micro:bit.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You will need to install the Mu text editor for this recipe. Follow the instructions
    in [Chapter 1](1c277918-6daf-4a83-8a06-6012ceda9ac1.xhtml), *Getting Started with
    MicroPython*, regarding the installation of the Mu text editor.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Follow these steps to learn how to use mu to flash code onto the micro:bit:'
  prefs: []
  type: TYPE_NORMAL
- en: Connect the micro:bit to your computer using a USB cable.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start the Mu text editor application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the Mode button in the far-left corner of the application to bring
    up the following dialog:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/9feb119a-12eb-4f33-a864-3e3b2b95f9a5.png)'
  prefs: []
  type: TYPE_IMG
- en: Select the BBC micro:bit option and press OK.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Put the following block of code in the main text editor window:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Press the Flash button on the toolbar to have the code flashed to the board.
    The following screenshot has the Flash button highlighted for reference:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/81316c08-09e2-4b52-a12a-0aad1c6e484c.png)'
  prefs: []
  type: TYPE_IMG
- en: If you look at the LED grid on the board, it should now display the `x` character.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The micro:bit takes a different approach to loading your code on the board compared
    to Circuit Playground Express. The board requires that you use certain software
    that understands how to take your Python scripts and flash them onto these types
    of boards. The Mu text editor fully supports this MicroPython board. The initial
    steps were needed to configure Mu so that it is expected to interact with a connected
    micro:bit board. The script that was created is a simple script that imports the
    display object from the micro:bit Python library and uses it to display the `x`
    character on the LED display.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The easiest program to get started with when flashing code onto the micro:bit
    is the Mu text editor. There are other options available, though, such as a command-line
    program called uFlash. The value of using the command-line approach is that it
    gives you the flexibility of using the text editor of your choice so that you
    can edit code and then flash it when you are ready to use the uFlash utility.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here are a few references regarding this recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: Documentation on the uFlash command can be found at [https://uflash.readthedocs.io/en/latest/](https://uflash.readthedocs.io/en/latest/).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Details on the HEX file format that is used when flashing code onto the board
    can be found at [https://tech.microbit.org/software/hex-format/](https://tech.microbit.org/software/hex-format/).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Mu to get a REPL on the micro:bit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe will build on the approach we covered in the previous recipe. Just
    as loading your scripts onto the board is essential, so is the REPL when it comes
    to debugging your scripts. The REPL will give you a much richer interface when
    you are trying to experiment with the board or trying to figure out what's wrong
    with your code. In the REPL, you can get tracebacks and see the output of print
    statements.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You will need to have the Mu text editor installed and configured, as well as
    your micro:bit board connected to your computer.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Follow these steps to learn how to use mu to get a REPL on the micro:bit:'
  prefs: []
  type: TYPE_NORMAL
- en: Start the Mu text editor application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the REPL button in the toolbar, which is highlighted in the following
    screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/ddea152f-5611-479c-b581-ac9a53ff6324.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The REPL interface should now appear in the lower half of the screen, as shown
    in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/57f8e521-8bd4-450e-a57e-9cc6f0786d80.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Run the following lines of code in the REPL:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the following block of code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The `microbit` library has now been imported.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Mu text editor has built-in REPL support for a number of boards, including
    the micro:bit. When you click the REPL button, the editor attempts to open a serial
    connection to the board. If successful, it starts a REPL session on the board.
  prefs: []
  type: TYPE_NORMAL
- en: The initial text that's printed out in the REPL shows the version of the MicroPython
    interpreter in use on the board. At this point, any commands you type in the REPL
    prompt will be sent to the board over the serial connection that's evaluated on
    the board. Then, their output will be returned to the computer to be displayed
    in the REPL screen.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The MicroPython REPL comes with a number of useful functions to help you explore
    the different Python modules and objects that are available on the board. You
    can call the `help` function on different modules and objects to get details on
    what they do. When you're exploring a particular object and want to know the attributes
    and methods that are available on that object, you can use the `dir` function
    to list them in the REPL session.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here are a few references regarding this recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: Documentation on the `help` function can be found at [https://docs.python.org/3/library/functions.html#help](https://docs.python.org/3/library/functions.html#help).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Documentation on the `dir` function can be found at [https://docs.python.org/3/library/functions.html#dir](https://docs.python.org/3/library/functions.html#dir).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying a single character on the LED display
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe will show you how we can use the 5 x 5 array of LEDs that comes
    with the board to display characters and numbers. The display object has a `show`
    method that will do the mapping from characters and numbers to the bitmap image
    that needs to be displayed on the LEDs. These LEDs are one of the main forms of
    output on this board, so this recipe will provide you with a valuable means to
    interact with the scripts you put on the board.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You will need to have the Mu text editor installed and configured, as well as
    your Micro Bit board connected to your computer.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Follow these steps to learn how to display a single character on the LED display:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following lines of code in the REPL:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The display should show the letter `a` now. Run the following block of code
    to display the number `1`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The following block of code will display the number `2` after it''s run:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the following block of code to turn off the display:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The following code should be put into the main text editor window and flashed
    to the board:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Once executed, this code will display the numbers 0, 1, and 2, with a 1-second
    delay between each change.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The display object that is part of the micro:bit Python library has a show method
    on it that can be used to display numbers and characters on the display. The initial
    two examples called the method with an argument whose data type was string.
  prefs: []
  type: TYPE_NORMAL
- en: When the number `2` was shown, the value was given as an integer. This is possible
    as `show` accepts either strings or integers when it receives its input. The main
    script that is flashed in the recipe first imports the necessary libraries and
    then starts a `for` loop, which loops three times. In each loop, it displays the
    current number of the iteration starting from `0` and then sleeps for one second
    before looping again.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It can be challenging dealing with such a limited display resolution of a 5
    x 5 grid of LEDs. Thankfully, the Python module that comes with the micro:bit
    has done all the work of finding a way to display all the letters and characters
    on the display in a legible fashion. In this recipe, we have seen how we can provide
    strings and integers as data to display. In the next recipe, we will see that
    the same method can also receive other objects, such as image objects.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here are a few references regarding this recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: Documentation on the `show` method can be found at [https://microbit-micropython.readthedocs.io/en/latest/display.html#microbit.display.show](https://microbit-micropython.readthedocs.io/en/latest/display.html#microbit.display.show).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Documentation on the `clear` method can be found at [https://microbit-micropython.readthedocs.io/en/latest/display.html#microbit.display.clear](https://microbit-micropython.readthedocs.io/en/latest/display.html#microbit.display.clear).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying a built-in image
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe will show you how we can use the 5 x 5 array of LEDs to display
    one of the built-in images that's available with the micro:bit library. There
    are many images available, ranging from facial expressions to animal symbols.
    They are very much like emojis.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will see how we can display the heart and the smiley icon
    on the display. When creating projects on the micro:bit, it can be useful to display
    symbols beyond text and numbers, as shown in this recipe. If you've made a game
    on the micro:bit, you might want to show a happy or sad face when the player loses
    or wins the game.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You will need to have the Mu text editor installed and configured, as well as
    your micro:bit board connected to your computer.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Follow these steps to learn how to display a built-in image:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Execute the following block of code in the REPL:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The display should show a happy face. Run the following block of code to show
    a heart icon:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The following block of code will display a clock face pointing at 1 o''clock:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the following block of code to display a clock face animation that moves
    the clock face from 1 o''clock to 12 o''clock:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The following code should be put into the main text editor window and flashed
    to the board:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Once executed, this code will continually move the clock face from 1 o'clock
    to 12 o'clock, with a delay of `0.1` seconds between each change.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `Image` object that is a part of the `microbit` Python library has a collection
    of built-in images that can be accessed by referring to their attribute name.
    The show method accepts these image objects and will display them on the grid
    once they're called. The initial examples in the REPL show a happy face, heart,
    and a clock face, just by referring to the names of these images.
  prefs: []
  type: TYPE_NORMAL
- en: A list is then created that points to each of the 12 clock face images in the
    correct order from 1 to 12\. This list can then be used to create a clock face
    animation. First, an infinite loop is started. During each iteration of the infinite
    loop, a `for` loop is started that will iterate through each of the 12 clock face
    images, displaying them and then pausing for 0.1 seconds before starting the next
    iteration. In this way, an animation is created of a clock face moving through
    the 12 positions on the clock.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are many more symbols and images than just the ones that were shown in
    this recipe. You can explore them in the REPL by either referring to the documentation
    or listing their names in the REPL using the built-in `dir` function.
  prefs: []
  type: TYPE_NORMAL
- en: The library also supports a mechanism that you can use to define your own custom
    images, which you can save in your code and reuse across projects. In this recipe,
    we showed you one way of creating image animations, but there is also built-in
    support for animations in the `show` method of the `display` object that can also
    be used.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here are a few references regarding this recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: Documentation on creating your own images can be found at [https://microbit-micropython.readthedocs.io/en/latest/tutorials/images.html#diy-images](https://microbit-micropython.readthedocs.io/en/latest/tutorials/images.html#diy-images).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Documentation on using the built-in support for creating animations can be found
    at [https://microbit-micropython.readthedocs.io/en/latest/tutorials/images.html#animation](https://microbit-micropython.readthedocs.io/en/latest/tutorials/images.html#animation).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying scrolling text
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe will show you a technique that you can use to display text to the
    user using the scrolling text feature that is available with the `microbit` library.
    The LED grid is limited to showing one character at a time. By using the scrolling
    feature, you can show a message as a sequence of characters that scroll across
    the display.
  prefs: []
  type: TYPE_NORMAL
- en: In this way, you can create projects that display short messages to the user,
    even with the limited physical display that is available on the board. This recipe
    will also show you how to control the speed of this animation and how to have
    the text loop endlessly on the display.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You will need to have the Mu text editor installed and configured, as well as
    your micro:bit board connected to your computer.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Follow these steps to learn how to display scrolling text:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the REPL to run the following lines of code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The display should show the text `''hello''` scrolling across the display.
    The default delay is 150 milliseconds. The following block of code will scroll
    the text at double the normal speed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The following block of code will display the same text at half the default
    speed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the following block of code to display the text in an endless loop:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Terminate the endless loop by pressing *Ctrl* + *C*. You should see the following
    message:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'The following code should be put into the main text editor window and flashed
    to the board:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Once executed, this code will scroll the text slow, normal, and fast, at three
    increasing speeds.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `scroll` method is a part of the `display` object and provides all the functionality
    we need to scroll text on the display. There is only one argument required, which
    is the text to display. Once you call this method, it will start the animation
    and display each character in the provided text and scroll the characters across
    the screen until the whole text is displayed.
  prefs: []
  type: TYPE_NORMAL
- en: The optional `delay` argument can be provided to control the speed at which
    the scroll animation is displayed. A lower value for the delay will create a faster
    animation, while a higher value will slow down the animation. The main script
    defines a list with three messages each, with a different setting for the the
    scroll delay. A `for` loop is then executed that will loop through each value
    and call the `scroll` method to display the specified text and apply a custom
    scroll `delay` for each message.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are other options provided by the `scroll` method that can come in handy.
    This method has the ability to run the `scroll` animation in the background. This
    can be useful when you want to let the message appear while your program performs
    some other action. You should be mindful of using the loop option that was presented
    in this recipe. Essentially, calling the `show` method in this way will have the
    call never return as it will start an infinite loop in the `show` method.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here are a few references regarding this recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: Some simple examples of calling the `scroll` method can be found at [https://microbit-micropython.readthedocs.io/en/latest/tutorials/hello.html](https://microbit-micropython.readthedocs.io/en/latest/tutorials/hello.html).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Documentation on the `scroll` method can be found at [https://microbit-micropython.readthedocs.io/en/latest/display.html#microbit.display.scroll](https://microbit-micropython.readthedocs.io/en/latest/display.html#microbit.display.scroll).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Showing which button has been pressed
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe will show you how to respond to either of the two push buttons on
    the board by displaying the button being pressed on the display each time the
    button is pressed. This will be the first recipe in this chapter where we will
    see how we can create an interactive project that responds to user input by displaying
    visual output through the onboard LED grid.
  prefs: []
  type: TYPE_NORMAL
- en: When you're creating your own projects, having access to two push buttons opens
    up a lot of possibilities in terms of creating interactive applications and games
    that respond to these inputs in different ways. This recipe will provide you with
    the basic building blocks so that you can start building these sorts of projects.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You will need to have the Mu text editor installed and configured, as well as
    your micro:bit board connected to your computer.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Follow these steps to learn how to show which button has been:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following lines of code in the REPL:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Since button A is not being pressed, the value that''s returned should be `False`.
    Hold down button A while you execute the following block of code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Hold down button B while executing the following block of code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'The following code should be put into the main text editor window and flashed
    to the board:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Once executed, this code will display the character `a` or `b` if either button
    A or B was pressed.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After the initial imports, the main script enters an infinite loop. During each
    iteration, each of the two buttons will be polled to see whether it is currently
    being pressed. If either button A or B is pressed, then the character of the pressed
    button will be displayed on the screen. The final part of the loop is to check
    if neither button is pressed and then clear the contents of the screen.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe shows the basic structure of an event loop that continuously loops
    and check for events on the input sensors and takes actions in response to these
    events as they occur. You can take this basic recipe and expand it in many ways.
    For example, you could create a script that helps the user navigate and select
    between a list of menu options.
  prefs: []
  type: TYPE_NORMAL
- en: Each press of button A could display the next menu item. When button B is pressed,
    that menu item could then be selected. The overall structure of the program would
    remain the same in terms of an event loop and the checking of the state of each
    button during each loop iteration.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here are a few references regarding this recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: An example of interacting with the push buttons can be found at [https://microbit-micropython.readthedocs.io/en/latest/tutorials/buttons.html](https://microbit-micropython.readthedocs.io/en/latest/tutorials/buttons.html).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Documentation on the `Button` class and its methods can be found at [https://microbit-micropython.readthedocs.io/en/latest/button.html](https://microbit-micropython.readthedocs.io/en/latest/button.html).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a countdown timer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe will show you how to create a countdown timer using the micro:bit
    board. The countdown timer is started each time someone presses the button A.
    It displays how many seconds are left before the countdown is complete. It will
    start at the number 9 and count down until the timer is complete, at which stage
    it will clear the screen. Consulting a recipe like this can be useful whenever
    you are thinking of creating a project that requires the incorporation of elapsed
    time into your script.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You will need to have the Mu text editor installed and configured, as well as
    your micro:bit board connected to your computer.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Follow these steps to learn how to create a countdown timer:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Execute the following block of code in the REPL:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'The list of numbers that are used for the countdown will is stored in the `NUMBERS` variable.
    The following block of code will show their values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'The following block of code will define and call the `countdown` function.
    You should see the display show a countdown from 9 to 1, with a one-second delay
    between each change:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'The following code should be put into the main text editor window and flashed
    to the board:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Once executed, this code will display a 9-second countdown each time the push
    button A is pressed.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After the initial imports, the main script enters into an infinite loop that
    keeps checking for a button press event on button A. If it detects button A being
    pressed, it will call the countdown function to start the countdown. The `countdown`
    function loops through the list of numbers from 9 to 1.
  prefs: []
  type: TYPE_NORMAL
- en: In each loop, it will display the number and pause for 1 second before continuing
    to the next iteration. Once all nine iterations have completed, it clears the
    screen to mark the end of the timer.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe could be extended so that when you press button B, a different timer
    is started. Maybe button B would start a timer to count up from 1 to 9\. You could
    also make button A start a stopwatch, and button B could stop the stopwatch and
    display the elapsed time.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here are a few references regarding this recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: Documentation on the `running_time` function can be found at [https://microbit-micropython.readthedocs.io/en/latest/microbit.html#microbit.running_time](https://microbit-micropython.readthedocs.io/en/latest/microbit.html#microbit.running_time).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Documentation on the `utime` module, which can be used on the micro:bit, can
    be found at [https://microbit-micropython.readthedocs.io/en/latest/utime.html](https://microbit-micropython.readthedocs.io/en/latest/utime.html).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
