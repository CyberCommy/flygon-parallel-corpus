- en: Implementing Requests and React Suspense
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapters, we learned how to use React context as an alternative
    to manually passing down props. We learned about context providers, consumers,
    and how to use Hooks as a context consumer. Next, we learned about inversion of
    control as an alternative to contexts. Finally, we implemented themes and global
    state, using contexts in our blog app.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we are going to set up a simple backend server, which will
    be generated from a **JavaScript Object Notation** (**JSON**) file, using the
    `json-server` tool. Then, we are going to implement requesting resources, by using
    an Effect Hook in combination with a State Hook. Next, we are going to do the
    same, using the `axios` and `react-request-hook` libraries. Finally, we are going
    to take a look at preventing unnecessary re-rendering, using `React.memo`, and
    lazily loading components through the use of React Suspense.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Requesting resources using Hooks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Preventing unnecessary re-rendering with `React.memo`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing lazy loading using React Suspense
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A fairly recent version of Node.js should already be installed (v11.12.0 or
    higher). The `npm` package manager for Node.js also needs to be installed.
  prefs: []
  type: TYPE_NORMAL
- en: The code for this chapter can be found on the GitHub repository: [https://github.com/PacktPublishing/Learn-React-Hooks/tree/master/Chapter06](https://github.com/PacktPublishing/Learn-React-Hooks/tree/master/Chapter06)[.](https://github.com/PacktPublishing/Learn-React-Hooks/tree/master/Chapter06)
  prefs: []
  type: TYPE_NORMAL
- en: 'Check out the following video to see the code in action:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://bit.ly/2Mm9yoC](http://bit.ly/2Mm9yoC)'
  prefs: []
  type: TYPE_NORMAL
- en: Please note that it is highly recommended that you write the code on your own.
    Do not simply run the code examples that have been provided. It is important that
    you write the code yourself in order for you to be able to learn and understand
    properly. However, if you run into any issues, you can always refer to the code
    example.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's get started with the chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Requesting resources with Hooks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we are going to learn how to request resources from a server,
    using Hooks. First, we are going to implement requests by only using the JavaScript
    `fetch` function, and the `useEffect`/`useState` Hooks. Then, we are going to
    learn how to request resources, using the `axios` library in combination with `react-request-hook`.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a dummy server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we can implement requests, we need to create a backend server. Since
    we are focusing on the user interface at the moment, we are going to set up a
    dummy server, which will allow us to test out requests. We are going to use the
    `json-server` tool to create a full **Representational State Transfer** (**REST**)
    API from a JSON file.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the db.json file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To be able to use the `json-server` tool, first we need to create a `db.json`
    file, which is going to contain our full database for the server. The `json-server`
    tool will allow you to make the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`GET` requests, to fetch data from the file'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`POST` requests, to insert new data into the file'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PUT` and `PATCH` requests, to adjust existing data'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DELETE` requests, to remove data'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For all modifying actions (`POST`, `PUT`, `PATCH`, and `DELETE`), the updated
    file will automatically be saved by the tool.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can use our existing structure for posts, which we defined as the default
    state of the posts reducer. However, we need to make sure that we provide an `id` value,
    so that we can query the database later:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'As for the users, we need to come up with a way to store usernames and passwords.
    For simplicity, we just store the password in plain text (do not do this in a
    production environment!). Here, we also need to provide an `id` value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Additionally, we are going to store themes in our database. In order to investigate
    whether pulling themes from our database works properly, we are now going to define
    a third theme. As always, each theme needs an `id` value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Now, all that is left to do is to combine these three arrays into a single JSON
    object, by storing the posts array under a `posts` key, the users array under
    a `users` key, and the themes array under a `themes` key.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start creating the JSON file that is used as a database for our backend
    server:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new `server/` directory in the root of our application folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a `server/db.json` file with the following contents. We can use the
    existing state from our Reducer Hook. However, since this is a database, we need
    to give each element an `id` value (marked in bold):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: For the `json-server` tool, we simply need a JSON file as the database, and
    the tool will create a full REST API for us.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the json-server tool
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, we are going to install and start our backend server by using the `json-server`
    tool:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we are going to install the `json-server` tool via `npm`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we can start our backend server, by calling the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The `npx` command executes commands that were installed locally in a project.
    We need to use `npx` here, because we did not globally install the `json-server`
    tool (via `npm install -g json-server`).
  prefs: []
  type: TYPE_NORMAL
- en: We executed the `json-server` tool, and made it watch the `server/db.json` file
    that we created earlier. The `--watch` flag means that it will listen to changes
    to the file, and refresh automatically.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we can go to `http://localhost:3000/posts/react-hooks` in order to see
    our post object:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/0c6cd543-2149-4d60-b028-38817018abf5.png)'
  prefs: []
  type: TYPE_IMG
- en: Our simple JSON server working and serving a post!
  prefs: []
  type: TYPE_NORMAL
- en: As we can see, the tool created a full REST API from the database JSON file
    for us!
  prefs: []
  type: TYPE_NORMAL
- en: Configuring package.json
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Next, we need to adjust our `package.json` file, in order to start the server,
    in addition to our client (running via `webpack-dev-server`).
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start adjusting the `package.json` file:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we create a new package script called `start:server`, by inserting it
    in the `scripts` section of the `package.json` file. We also make sure that we
    change the port, so that it does not run on the same port as our client:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we rename the `start` script to `start:client`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we install a tool called `concurrently`, which lets us start the server
    and the client at the same time:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we can define a new `start` script by using the `concurrently` command,
    and then passing the server and client commands as arguments to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Now, running `npm start` will run the client, as well as the backend server.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring a proxy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Finally, we have to define a proxy, to make sure that we can request our API
    from the same **Uniform Resource Locator (URL)** as the client. This is needed
    because, otherwise, we would have to deal with cross-site requests, which are
    a bit more complicated to handle. We are going to define a proxy that will forward
    requests from `http://localhost:3000/api/` to `http://localhost:4000/`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s configure the proxy:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we have to install the `http-proxy-middleware` package:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we create a new `src/setupProxy.js` file, with the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we have to define the target of our proxy, which will be the backend
    server, running at `http://localhost:4000`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we have to define a path-rewrite rule, which removes the `/api` prefix
    before forwarding the request to our server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding proxy configuration will link `/api` to our backend server; therefore,
    we can now start both the server and the client via the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Then, we can access the API by opening `http://localhost:3000/api/posts/react-hooks`!
  prefs: []
  type: TYPE_NORMAL
- en: Defining routes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By default, the `json-server` tool defines the following routes: [https://github.com/typicode/json-server#routes](https://github.com/typicode/json-server#routes).
  prefs: []
  type: TYPE_NORMAL
- en: We can also define our own routes, by creating a `routes.json` file, where we
    can rewrite existing routes to other routes: [https://github.com/typicode/json-server#add-custom-routes](https://github.com/typicode/json-server#add-custom-routes).
  prefs: []
  type: TYPE_NORMAL
- en: 'For our blog app, we are going to define a single custom route: `/login/:username/:password`.
    We are going to link this to a `/users?username=:username&password=:password`
    query, in order to find a user with the given username and password combination.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We are now going to define the custom login route for our app:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new `server/routes.json` file with the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, adjust the `start:server` script in the `package.json` file, and add
    the `--routes` option, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Now, our server will be serving our custom login route, which we are going to
    use later on in this chapter! We can try logging in by opening the following URL
    in our browser: `http://localhost:3000/api/login/Daniel%20Bugl/supersecure42`.
    This returns a user object; therefore, the login was successful!
  prefs: []
  type: TYPE_NORMAL
- en: 'We can see the user object being returned as text in our browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/c041ed70-364f-4077-8550-429c49d306f2.png)'
  prefs: []
  type: TYPE_IMG
- en: Accessing our custom route directly in the browser
  prefs: []
  type: TYPE_NORMAL
- en: As we can see, accessing our custom route works! We can now use it to log in
    users.
  prefs: []
  type: TYPE_NORMAL
- en: Example code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The example code can be found in the `Chapter06/chapter6_1` folder.
  prefs: []
  type: TYPE_NORMAL
- en: Just run `npm install` in order to install all dependencies, and `npm start` to
    start the application; then visit `http://localhost:3000` in your browser (if
    it did not open automatically).
  prefs: []
  type: TYPE_NORMAL
- en: Implementing requests using Effect and State/Reducer Hooks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we use a library to implement requests using Hooks, we are going to implement
    them manually, using an Effect Hook to trigger the request, and State/Reducer
    Hooks to store the result.
  prefs: []
  type: TYPE_NORMAL
- en: Requests with Effect and State Hooks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: First, we are going to request themes from our server, instead of hardcoding
    the list of themes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s implement requesting themes using an Effect Hook and a State Hook:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `src/ChangeTheme.js` file, adjust the React `import` statement in order
    to import the `useEffect` and `useState` Hooks:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Remove the `THEMES` constant, which is all of the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `ChangeTheme` component, define a new `useState` Hook in order to store
    the themes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Then define a `useEffect` Hook, where we are going to make the request:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'In this Hook, we use `fetch` to request a resource; in this case, we request `/api/themes`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Fetch makes use of the Promise API; therefore, we can use `.then()` in order
    to work with the result. First, we have to parse the result as JSON:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we call `setThemes` with the themes array from our request:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: We can also shorten the preceding function to `.then(setThemes)`, as we are
    only passing down the `themes` argument from `.then()`.
  prefs: []
  type: TYPE_NORMAL
- en: 'For now, this Effect Hook should only trigger when the component mounts, so
    we pass an empty array as the second argument to `useEffect`. This ensures that
    the Effect Hook has no dependencies, and thus will only trigger when the component
    mounts:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, all that is left to do is to replace the `THEMES` constant with our `themes`
    value from the Hook:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'As we can see, there are now three themes available, all loaded from our database
    through our server:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/5aa425f0-21e5-4624-9b93-3c1531df8414.png)'
  prefs: []
  type: TYPE_IMG
- en: Three themes loaded from our server by using hooks!
  prefs: []
  type: TYPE_NORMAL
- en: Our themes are now loaded from the backend server and we can move on to requesting
    posts via Hooks.
  prefs: []
  type: TYPE_NORMAL
- en: Requests with Effect and Reducer Hooks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We are now going to use our backend server to request the posts array, instead
    of hardcoding it as the default value for the `postsReducer`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s implement requesting posts using an Effect Hook and a Reducer Hook:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Remove** the `defaultPosts` constant definition from `src/App.js`, which
    is all of the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Replace the `defaultPosts` constant in the `useReducer` function with an empty
    array:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'In `src/reducers.js`, define a new action type, called `FETCH_POSTS`, in the
    `postsReducer` function. This action type will replace the current state with
    a new posts array:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'In `src/App.js`, define a new `useEffect` Hook, which precedes the current
    one:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'In this Hook, we again use `fetch` in order to request a resource; in this
    case, we request `/api/posts`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we dispatch a `FETCH_POSTS` action with the `posts` array from our
    request:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'For now, this Effect Hook should only trigger when the component mounts, so
    we pass an empty array as the second argument to `useEffect`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'As we can see, the posts now get requested from the server! We can have a look
    at the DevTools Network tab to see the request:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/317e2749-c1ab-4d39-9043-303e61250ac4.png)'
  prefs: []
  type: TYPE_IMG
- en: Posts being requested from our server!
  prefs: []
  type: TYPE_NORMAL
- en: The posts are now being requested from the backend server. In the next section,
    we are going to use `axios` and the `react-request-hook` to request resources
    from our server.
  prefs: []
  type: TYPE_NORMAL
- en: Example code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The example code can be found in the `Chapter06/chapter6_2` folder.
  prefs: []
  type: TYPE_NORMAL
- en: Just run `npm install` in order to install all dependencies, and `npm start` to
    start the application; then visit `http://localhost:3000` in your browser (if
    it did not open automatically).
  prefs: []
  type: TYPE_NORMAL
- en: Using axios and react-request-hook
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous section, we used an Effect Hook to trigger the request, and
    a Reducer/State Hook to update the state, using the result from the request. Instead
    of manually implementing requests like this, we can use the `axios` and `react-request-hook`
    libraries to easily implement requests using Hooks.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the libraries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we can start using `axios` and `react-request-hook`, we have to set up
    an `axios` instance and a `RequestProvider` component.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s get started setting up the libraries:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we install the libraries:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we import them in `src/index.js`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we define an `axios` instance, where we set the `baseURL` to `http://localhost:3000/api/`—our
    backend server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: In the config for our `axios` instance, we can also define other options, such
    as a default timeout for requests, or custom headers. For more information, check
    out the `axios` documentation: [https://github.com/axios/axios#axioscreateconfig](https://github.com/axios/axios#axioscreateconfig).
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, we wrap our `<App />` component with the `<RequestProvider>` component.
    Remove the following line of code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Replace it with this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Now, our app is ready to use Resource Hooks!
  prefs: []
  type: TYPE_NORMAL
- en: Using the useResource Hook
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A more powerful way of dealing with requests, is using the `axios` and `react-request-hook`
    libraries. Using these libraries, we have access to features that can cancel a
    single request, or even clear all pending requests. Furthermore, using these libraries
    makes it easier to deal with errors and loading states.
  prefs: []
  type: TYPE_NORMAL
- en: 'We are now going to implement the `useResource` Hook in order to request themes
    from our server:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In `src/ChangeTheme.js`, import the `useResource` Hook from the `react-request-hook`
    library:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: Remove the previously defined State and Effect Hooks.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Then, we define a `useResource` Hook within the `ChangeTheme` component. The
    Hook returns a value and a getter function. Calling the getter function will request
    the resource:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Here, we are using the shorthand syntax for `() => { return { } }`, which is
    `() => ({ })`. Using this shorthand syntax allows us to concisely write functions
    that only return an object.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this Hook we pass a function, which returns an object with information about
    the request:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: With `axios`, we only need to pass `/themes` as the `url`, because we already
    defined the `baseURL`, which contains `/api/`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Resource Hook returns an object with a `data` value, an `isLoading` boolean,
    an `error` object, and a `cancel` function to cancel the pending request. Now,
    we pull out the `data` value and the `isLoading` boolean from the `themes` object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we define a `useEffect` Hook to trigger the `getThemes` function. We
    only want it to trigger once, when the component mounts; therefore, we pass an
    empty array as the second argument:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Additionally, we use the `isLoading` flag to display a loading message while
    waiting for the server to respond:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we rename the `themes` value to the `data` value that is returned
    from the `useResource` Hook, and add a conditional check to ensure the `data`
    value is already available:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: If we have a look at our app now, we can see that the Loading themes... message
    gets displayed for a very short time, and, then the themes from our database get
    displayed! We can now move on to requesting posts using the Resource Hook.
  prefs: []
  type: TYPE_NORMAL
- en: Using useResource with a Reducer Hook
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `useResource` Hook already handles the state for the result of our request,
    so we do not need an additional `useState` Hook to store the state. If we already
    have an existing Reducer Hook, however, we can use it in combination with the
    `useResource` Hook.
  prefs: []
  type: TYPE_NORMAL
- en: 'We are now going to implement the `useResource` Hook in combination with a
    Reducer Hook in our app:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In `src/App.js`, import the `useResource` Hook from the `react-request-hook`
    library:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: Remove the previously defined `useEffect` Hook that uses `fetch` to request
    `/api/posts`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Define a new `useResource` Hook, where we request `/posts`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'Define a new `useEffect` Hook, which simply calls `getPosts`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, define a `useEffect` Hook, which dispatches the `FETCH_POSTS` action,
    after checking if the data already exists:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'We make sure that this Effect Hook triggers every time the `posts` object updates:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: Now, when we fetch new posts, a `FETCH_POSTS` action will be dispatched. Next,
    we move on to handling errors during requests.
  prefs: []
  type: TYPE_NORMAL
- en: Handling error state
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have already handled the loading state in the `ChangeTheme` component. Now,
    we are going to implement the error state for posts.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s get started handling the error state for posts:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In `src/reducers.js`, define a new `errorReducer` function with a new action
    type, `POSTS_ERROR`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the `errorReducer` function to our `appReducer` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'In `src/App.js`, adjust the default state of our Reducer Hook:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'Pull the `error` value out of the `state` object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we can adjust the existing Effect Hook that handles new data from the
    `posts` resource, by dispatching a `POSTS_ERROR` action in the case of an error:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we display the error message before the `PostList` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'If we only start the client now (via `npm run start:client`), the error will
    be displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/0638f515-47f9-46f4-a865-5e64b4ee4f9e.png)'
  prefs: []
  type: TYPE_IMG
- en: Displaying an error when the request fails!
  prefs: []
  type: TYPE_NORMAL
- en: As we can see, the Failed to fetch posts error gets displayed in our app, because
    the server is not running. We can now move on to implementing post creation via
    requests.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing post creation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have a good grasp on how to request data from an API, we are going
    to use the `useResource` Hook for the creation of new data.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s get started implementing post creation using the Resource Hook:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit `src/post/CreatePost.js`, and import the `useResource` Hook:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, define a new Resource Hook, below the other Hooks, but before our handler
    function definitions. Here, we set the method to `post` (creates new data) and
    we pass the data from the `createPost` function, to the request config:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we are using a shorthand syntax for array destructuring: we are ignoring
    the first element of the array, by not specifying a value name. Instead of writing
    `const [ post, createPost ]`, and then not using `post`, we just put a comma,
    as follows: `const [  , createPost ]`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we can use the `createPost` function in our `handleCreate` handler function.
    We make sure that we keep the call to the `dispatch` function there, so that we
    immediately insert the new post client-side, while waiting for the server to respond.
    The added code is highlighted in bold:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: Please note that, in this simple example, we do not expect, or handle the failure
    of post creations. In this case, we dispatch the action even before the request
    completes. However, when implementing login, we are going to handle error states
    from the request, in order to check whether the user was logged in successfully.
    It is best practice to always handle error states in real-world applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that when we insert a post now, the post will first be at the beginning
    of the list; however, after refreshing, it will be at the end of the list. Unfortunately,
    our server inserts new posts at the end of the list. Therefore, we are going to
    reverse the order, after fetching posts from the server. Edit `src/App.js`, and
    adjust the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: Now, inserting a new post via the server works fine and we can move on to implementing
    registration!
  prefs: []
  type: TYPE_NORMAL
- en: Implementing registration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Next, we are going to implement registration, which is going to work in very
    similar way to creating posts.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s get started implementing registration:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, import the `useEffect` and `useResource` Hooks in `src/user/Register.js`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, define a new `useResource` Hook, below the other Hooks, and before the
    handler functions. Unlike we did in the post creation, we now want to also store
    the resulting `user` object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, define a new `useEffect` Hook below the `useResource` Hook, which will
    dispatch a `REGISTER` action when the request completes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: Please note that, in this simple example, we do not expect, or handle the failure
    of registrations. In this case, we dispatch the action only after the successful
    creation of the user. However, when implementing login, we are going to handle
    error states from the request, in order to check whether the user was logged in
    successfully. It is best practice to always handle error states in real-world
    applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, we adjust the form submit handler in order to call the `register`
    function, instead of directly dispatching the action:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: Now, if we enter a Username and Password, and press Register, a new user will
    be inserted into our `db.json` file and, just like before, we will be logged in.
    We now move on to implementing login via Resource Hooks.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing login
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Finally, we are going to implement login, via requests using our custom route.
    After doing so, our blog app will be fully connected to the server.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s get started implementing login:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, edit `src/user/Login.js` and import the `useEffect` and `useResource`
    Hooks:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'We define a new State Hook that will store a boolean to check if the login
    failed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we define a new State Hook for the Password field, because we did not
    handle it before:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we define a handler function for the Password field, below the `handleUsername`
    function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we handle the value change in the `input` field:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we can define our Resource Hook below the State Hooks, where we are going
    to pass `username` and `password` to the `/login` route. Since we are passing
    them as part of the URL, we need to make sure that we encode them properly first:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: Please note that it is not secure to send the password in cleartext via a GET
    request. We only do this for the sake of simplicity when configuring our dummy
    server. In a real world application, use a POST request for login instead and
    send the password as part of the POST data. Also make sure to use **Hypertext
    Transfer Protocol Secure (HTTPS)** so that the POST data will be encrypted.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we define an Effect Hook, which will dispatch the `LOGIN` action if the
    request completes successfully:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: 'Because the login route returns either an empty array (login failed), or an
    array with a single user, we need to check whether the array contains at least
    one element:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: 'If the array was empty, we set `loginFailed` to `true`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: 'If we get an error response from the server, we also set the login state to
    failed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: 'We make sure that the Effect Hook triggers whenever the `user` object from
    the Resource Hook updates:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we adjust the `onSubmit` function of `form`, in order to call the `login`
    function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, below the Submit button, we display the Invalid username or password
    message, in case `loginFailed` was set to `true`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: 'As we can see, entering a wrong Username or Password (or no Password) will
    result in an error, while entering the correct Username/Password combination will
    log us in:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/a5f6d839-c39e-459a-a083-674827a8ce51.png)'
  prefs: []
  type: TYPE_IMG
- en: Displaying an error message when the login failed
  prefs: []
  type: TYPE_NORMAL
- en: Now, our app is fully connected to the backend server!
  prefs: []
  type: TYPE_NORMAL
- en: Example code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The example code can be found in the `Chapter06/chapter6_3` folder.
  prefs: []
  type: TYPE_NORMAL
- en: Just run `npm install` in order to install all dependencies, and `npm start` to
    start the application; then visit `http://localhost:3000` in your browser (if
    it did not open automatically).
  prefs: []
  type: TYPE_NORMAL
- en: Preventing unnecessary re-rendering with React.memo
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With class components we had `shouldComponentUpdate`, which would prevent components
    from re-rendering if the props did not change.
  prefs: []
  type: TYPE_NORMAL
- en: 'With function components, we can do the same using `React.memo`, which is a
    higher-order component. `React.memo` memoizes the result, which means that it
    will remember the last rendered result, and, in cases where the props did not
    change, it will skip re-rendering the component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: 'By default, `React.memo` will act like the default definition of `shouldComponentUpdate`,
    and it will only shallowly compare the props object. If we want to do a special
    comparison, we can pass a function as a second argument to `React.memo`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: Unlike `shouldComponentUpdate`, the function that is passed to `React.memo` returns
    `true` when the props are equal, and thus it should not update, which is the opposite
    of how `shouldComponentUpdate` works! After learning about `React.memo`, let's
    try it out in practice by implementing `React.memo` for the Post component.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing React.memo for the Post component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First, let''s find out when the `Post` component re-renders. To do this, we
    are going to add a `console.log` statement to our `Post` component, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit `src/post/Post.js`, and add the following debug output when the component
    renders:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, open the app at `http://localhost:3000`, and open the DevTools (on most
    browsers: right-click | Inspect on the page). Go to the Console tab, and you should
    see the output twice, because we are rendering two posts:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/cdef8b29-ea94-4c5a-8d74-673d1d9e6131.png)'
  prefs: []
  type: TYPE_IMG
- en: The debug output when rendering two posts
  prefs: []
  type: TYPE_NORMAL
- en: 'So far, so good. Now, let''s try logging in, and see what happens:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/117dcf52-9fda-4279-b272-caa9eba73376.png)'
  prefs: []
  type: TYPE_IMG
- en: Posts re-rendering after logging in
  prefs: []
  type: TYPE_NORMAL
- en: 'As we can see, the Post components unnecessarily re-render after logging in,
    although their props did not change. We can use `React.memo` to prevent this,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit `src/post/Post.js`, and remove the export default part of the function
    definition (marked in bold):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, at the bottom of the file, export the Post component, after wrapping
    it with `React.memo()`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: Now, refresh the page and log in again. We can see that the two posts get rendered,
    which produces the initial debug output. However, logging in now does not cause
    the Post components to re-render anymore!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If we wanted to do a custom check on whether the posts are equal, we could,
    for example, compare `title`, `content`, and `author`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: In our case, doing this will have the same effect, because React already does
    a shallow comparison of all props, by default. This function only becomes useful
    when we have deep objects to compare, or when we want to ignore changes in certain
    props. Please note that we should not prematurely optimize our code. Re-renders
    can be fine, since React is intelligent, and does not paint to the browser if
    nothing changed. Therefore, it might be overkill to optimize all re-renders, unless
    a certain case has already been identified as a performance bottleneck.
  prefs: []
  type: TYPE_NORMAL
- en: Example code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The example code can be found in the `Chapter06/chapter6_4` folder.
  prefs: []
  type: TYPE_NORMAL
- en: Just run `npm install` in order to install all dependencies, and `npm start` to
    start the application; then visit `http://localhost:3000` in your browser (if
    it did not open automatically).
  prefs: []
  type: TYPE_NORMAL
- en: Implementing lazy loading with React Suspense
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: React Suspense allows us to let components wait before rendering. At the moment,
    React Suspense only allows us to dynamically load components with `React.lazy`.
    In the future, Suspense will support other use cases, such as data fetching.
  prefs: []
  type: TYPE_NORMAL
- en: '`React.lazy` is another form of performance optimization. It lets us load a
    component dynamically in order to reduce the bundle size. Sometimes we want to
    avoid loading all of the components during the initial render, and only request
    certain components when they are needed.'
  prefs: []
  type: TYPE_NORMAL
- en: For example, if our blog has a member area, we only need to load it after the
    user has logged in. Doing this will reduce the bundle size for guests who only
    visit our blog to read blog posts. To learn about React Suspense, we are going
    to lazily load the `Logout` component in our blog app.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing React.Suspense
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: First, we have to specify a loading indicator, which will be shown when our
    lazily-loaded component is loading. In our example, we are going to wrap the `UserBar`
    component with React Suspense.
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit `src/App.js`, and replace the `<UserBar />` component with the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: Now, our app is ready for implementing lazy loading.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing React.lazy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Next, we are going to implement lazy loading for the `Logout` component by
    wrapping it with `React.lazy()`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit `src/user/UserBar.js`, and remove the import statement for the `Logout`
    component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, define the `Logout` component via lazy loading:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: The `import()` function dynamically loads the `Logout` component from the `Logout.js`
    file. In contrast to the static `import` statement, this function only gets called
    when `React.lazy` triggers it, which means it will only be imported when the component
    is needed.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we want to see lazy loading in action, we can set Network Throttling to
    Slow 3G in Google Chrome:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/a62969d1-50ad-4b34-98ac-b763d644f451.png)'
  prefs: []
  type: TYPE_IMG
- en: Setting Network Throttling to Slow 3G in Google ChromeIn Firefox, we can do
    the same by setting Network Throttling to GPRS.
  prefs: []
  type: TYPE_NORMAL
- en: Safari unfortunately does not offer such a feature right now, but we can use
    the Network Link Conditioner tool from Apple's "Hardware IO tools": [https://developer.apple.com/download/more/](https://developer.apple.com/download/more/)
  prefs: []
  type: TYPE_NORMAL
- en: 'If we refresh the page now, and then log in, we can first see the Loading...
    message, and then the `Logout` component will be shown. If we take a look at the
    Network logs, we can see that the `Logout` component was requested via the network:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/5d3e7ef1-f8cb-4a8a-86dd-9bfe1c8f3a0e.png)'
  prefs: []
  type: TYPE_IMG
- en: The Logout component being loaded via the network
  prefs: []
  type: TYPE_NORMAL
- en: As we can see, the `Logout` component is now lazily loaded, which means that
    it will only be requested when needed.
  prefs: []
  type: TYPE_NORMAL
- en: Example code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The example code can be found in the `Chapter06/chapter6_5` folder.
  prefs: []
  type: TYPE_NORMAL
- en: Just run `npm install` in order to install all dependencies, and `npm start` to
    start the application; then visit `http://localhost:3000` in your browser (if
    it did not open automatically).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we first learned how to set up an API server from a JSON file.
    Then, we learned how to request resources using Effect and State/Reducer Hooks.
    Next, we learned how to request resources using the `axios` and `react-request-hook`
    libraries. Finally, we learned how to prevent unnecessary re-rendering using `React.memo`,
    and how to lazily-load components with React Suspense.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we are going to add routes to our application, and learn
    how to use Hooks for routing.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to recap what we have learned in this chapter, try to answer the following
    questions:'
  prefs: []
  type: TYPE_NORMAL
- en: How can we easily create a full REST API from a simple JSON file?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are the advantages of using a proxy to access our backend server during
    development?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which combinations of Hooks can we use to implement requests?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which libraries can we use to implement requests?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How can we deal with loading states using `react-request-hook`?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How can we deal with errors using `react-request-hook`?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How can we prevent the unnecessary re-rendering of components?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How can we reduce the bundle size of our app?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you are interested in more information about the concepts that we have explored
    in this chapter, take a look at the following reading material:'
  prefs: []
  type: TYPE_NORMAL
- en: Official documentation of `json-server`: [https://github.com/typicode/json-server](https://github.com/typicode/json-server).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Official documentation of `concurrently`: [https://github.com/kimmobrunfeldt/concurrently](https://github.com/kimmobrunfeldt/concurrently).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Official documentation of `axios`: [https://github.com/axios/axios](https://github.com/axios/axios).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Official documentation of `react-request-hook`: [https://github.com/schettino/react-request-hook](https://github.com/schettino/react-request-hook).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create React App documentation on configuring proxies: [https://facebook.github.io/create-react-app/docs/proxying-api-requests-in-development#configuring-the-proxy-manually](https://facebook.github.io/create-react-app/docs/proxying-api-requests-in-development#configuring-the-proxy-manually).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fetching data with React Hooks: [https://www.robinwieruch.de/react-hooks-fetch-data](https://www.robinwieruch.de/react-hooks-fetch-data)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When to use `useMemo`: [https://kentcdodds.com/blog/usememo-and-usecallback](https://kentcdodds.com/blog/usememo-and-usecallback)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
