- en: Chapter 5. Responsive Web Forms
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the previous chapters, we learned about forms: what forms are, how we can
    validate them, how we can improve the look and feel of a form, and how to store
    the information collected with the help of forms into a database. But, with the
    enhancement of technology, different devices with different screen resolutions
    require different layouts. So, in this chapter we will learn how to make our forms
    responsive.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: What is responsive design
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What are media queries
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What are fluid grids
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to make our forms responsive
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Guidelines for making responsive forms more effective
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Responsive design
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The term responsive design was introduced in May, 2010, by *Ethan Marcotte*,
    a writer and web designer, in an article called *Responsive Web Design* that was
    published on *A List Apart*.
  prefs: []
  type: TYPE_NORMAL
- en: Basically, responsive design means how the content is displayed on the various
    screens, such as mobiles, tablets, or desktops. An approach by which a website
    or a particular page dynamically adjusts itself according to particular screen
    resolution to give the best user experience is responsive design. It ensures great
    user experience as it works independently across various devices and resolutions.
  prefs: []
  type: TYPE_NORMAL
- en: Using fluid, proportion-based grids, flexible images, and CSS3 media queries,
    a site designed with responsive web design automatically adapts the layout to
    the particular device resolution.
  prefs: []
  type: TYPE_NORMAL
- en: Web design once used to be simple. Web designers would design for the most popular
    desktop screen size, create a single layout that works for most of the devices,
    which allowed us to easily divide our design into a various number of grids so
    that we can have a well-laid, cohesive, and harmonic page.
  prefs: []
  type: TYPE_NORMAL
- en: But with the enhancements in technology and the introduction of various devices,
    such as smart phones, tablets, or even mini laptops, the whole experience of web
    layout and design was changed.
  prefs: []
  type: TYPE_NORMAL
- en: Change in Web has also changed the way people use the Internet. In earlier approaches
    to web design, it was difficult to use the Internet in mobile devices as the particular
    website, which was designed for desktops, had scrolling and had to zoom in or
    out for reading the text and wasting time. For example, pages viewed in a desktop
    might have links that are text-based and compact which are difficult to click
    on. But with responsive design, we can tackle these problems with the available
    features and capabilities of HTML5 and CSS3.
  prefs: []
  type: TYPE_NORMAL
- en: If that website or page were responsive, the text would be larger, all the content
    would fit on the screen, and the navigation would be mobile-optimized.
  prefs: []
  type: TYPE_NORMAL
- en: The breakpoints in responsive web design are the browser widths that have a
    media query declaration to change the layout of the website or web page once the
    declared range is achieved.
  prefs: []
  type: TYPE_NORMAL
- en: Google's view about responsive design
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Google recommends building smartphone-optimized sites and it supports the following
    three configurations:'
  prefs: []
  type: TYPE_NORMAL
- en: The sites which are designed to be responsive serve all devices on the same
    set of URLs, with each URL rendering the same HTML to all devices and just utilizing
    CSS to change how the page is rendered on the device
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The sites which dynamically serve all devices with the same set of URLs, but
    each URL serves different HTML (and CSS) depending on whether the user agent is
    a desktop or a mobile device
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are sites which have separate mobile and desktop URLs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Benefits of using responsive design
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Some benefits of using responsive designed websites are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Using a single URL for a particular content makes it easier for users to interact
    with, share, and link the content.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rather than developing and maintaining multiple websites for desktop and mobile,
    we just need one website to develop and maintain that works on all kinds of devices.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Loading time is reduced as no redirection is needed to get the device-optimized
    view. Moreover, user agent based redirection can degrade a website's user experience
    and is more error-prone.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is future friendly; this means it allows us to adapt to new technologies
    and progressively enhance our website as time goes on.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Apart from changing the layout, there is a lot more to responsive design. We
    can go beyond the viewing size of the device and can focus on the functionality
    or capabilities of a device. In cases, where our website uses hover functionality
    but we need to change it for touch screen devices that do not support hover functionality,
    we can serve different images or crop images on changing the screen resolution.
    Moreover, we can check whether we can trace the location of the device or whether
    the device is working on the Internet, or WIFI, and many more.
  prefs: []
  type: TYPE_NORMAL
- en: How responsive design works
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The layout of a web page depends on or we can say is controlled abstractly
    by the following web languages:'
  prefs: []
  type: TYPE_NORMAL
- en: HTML
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CSS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JavaScript
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: HTML describes what the content is, CSS is responsible for how the content looks,
    and with JavaScript we can do some really cool things, such as fallback mechanism.
    The website is designed to work for various screen sizes and devices which adapts
    and changes itself depending on the conditions using content first approach. This
    is achieved by using media queries that allow us to have specific CSS, used for
    custom fitting of layouts according to our need. We will look into media queries
    later in the chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Screen resolutions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Different devices have different screen resolutions in landscape and in portrait
    mode. Here are some devices and device-supported screen resolutions in landscape
    as well as in portrait view:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Devices | Portrait View | Landscape View |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| iPhone 3G/3GS | 320 x 480 | 480 x 320 |'
  prefs: []
  type: TYPE_TB
- en: '| Samsung Galaxy S Duos | 480 x 800 | 800 x 480 |'
  prefs: []
  type: TYPE_TB
- en: '| iPhone 4 | 640 x 960 | 960 x 640 |'
  prefs: []
  type: TYPE_TB
- en: '| iPad | 768 x 1024 | 1024 x 768 |'
  prefs: []
  type: TYPE_TB
- en: '| Devices | Resolutions |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Most Netbooks | 1024 x 600 |'
  prefs: []
  type: TYPE_TB
- en: '| MacBook Air 08 | 1280 x 800 |'
  prefs: []
  type: TYPE_TB
- en: '| Some Laptops | 1366 x 768 |'
  prefs: []
  type: TYPE_TB
- en: '| MacBook Pro 15" | 1440 x 900 |'
  prefs: []
  type: TYPE_TB
- en: Apart from these resolutions, today's latest devices, such as Samsung Galaxy
    S4 or iPhone 5, have very high resolutions in mobile device segment.
  prefs: []
  type: TYPE_NORMAL
- en: Viewport
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Metadata is data (information) about data. The `<meta>` tag provides metadata
    about the HTML document. Metadata will not be displayed on the page, but will
    be machine parseable.
  prefs: []
  type: TYPE_NORMAL
- en: Meta elements are typically used to specify page description, keywords, author
    of the document last modified, and other metadata.
  prefs: []
  type: TYPE_NORMAL
- en: The metadata can be used by browsers (how to display content or reload page),
    search engines (keywords), or other web services.
  prefs: []
  type: TYPE_NORMAL
- en: 'For responsive design, to set the viewport width and initial scale on mobile
    devices, the following `<meta>` tag is generally used. In spite of responsive
    design, we can use this tag for non-responsive design too before we finalize our
    fit or restart approach. In fact, if we are building a responsive website or any
    mobile website, we still want this following tag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Media queries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Media queries are CSS3 modules which allow content to adapt to various screen
    resolutions, such as smartphones, tablets, and high definition screens.
  prefs: []
  type: TYPE_NORMAL
- en: To deliver different styles to different devices, media queries are an excellent
    way to achieve this, providing the best experience for each type of user. As a
    part of the CSS3 specification, media queries expand the role of the `media` attribute
    that controls how the styles are applied.
  prefs: []
  type: TYPE_NORMAL
- en: A media query comprises of one or more expressions and type of media involving
    features that result in true or false. Moreover, relevant style sheet or style
    rules are applied, following the regular cascading rules when a media query is
    true.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following snippet is a very simple example which applies when the device
    width is greater than 500 px:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Media types
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The device on which the linked document (external CSS) will be applied is specified
    by the `media` attribute's value. Using the `media` attribute inside a `<link>`
    element, a media type can be declared in the head of an HTML document. Within
    XML processing instructions, media types can be declared and the `@import` at-rule
    and the `@media` at-rule can be used.
  prefs: []
  type: TYPE_NORMAL
- en: 'Other media types defined by CSS2 are:'
  prefs: []
  type: TYPE_NORMAL
- en: '`projection`: This is used for projected presentations such as slides'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`embossed`: This is used for braille printers'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`all`: This is used for all media type devices'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`aural`: This is used for sound and speech synthesizers'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tv`: This is used for television type devices'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`screen`: This is used for computer screens'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`braille`: This is used for braille tactile feedback devices'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`handheld`: This is used for handheld or small devices'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`print`: This is used for printers'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tty`: This is used for media using a fixed-pitch character grid, such as teletypes
    and terminals'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An important feature of style sheets is that they specify how a document is
    to be presented on different media, such as on paper, on the screen with a speech
    synthesizer, or on a braille device.
  prefs: []
  type: TYPE_NORMAL
- en: We can apply different styles to a page view depending on which medium it is
    being used. With the help of a `media` attribute, internal and external style
    sheets can be associated with a media type.
  prefs: []
  type: TYPE_NORMAL
- en: Internal media query
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: These are the queries written within the HTML page inside the `<style>` tag.
  prefs: []
  type: TYPE_NORMAL
- en: 'Pros of internal media query are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: There is no need of extra HTTP requests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This remains visible and not forgotten when updating the old one
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Cons of internal media query are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: There is an increase in the file size in case user needs to download
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To make it work with older versions of the Internet Explorer browser, we have
    to use JavaScript
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Syntax
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The syntax for the internal media query is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Initially, it sets the background color to blue. But up to a maximum width of
    480 pixels, it sets the background color to black that is overriding of CSS style.
  prefs: []
  type: TYPE_NORMAL
- en: External media query
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: These are the queries written and maintained in the separated file or in the
    external CSS file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Pros of external media query are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: This is easy to keep and maintain CSS when extensively used
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using conditional comments, we can use external media query with old versions
    of Internet Explorer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For non-supporting browsers, the file size is smaller
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Cons of external media query are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: An extra HTTP request is needed to apply it
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This can be easily forgotten in case of updating the old one
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Extend the existing media part of the link element or the `@import` rule:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Media features
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Media features resemble CSS properties syntactically as they have names and
    accept certain values, or we can say that they are the conditions with which we
    can customize our responsive design.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some media features are listed in the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Feature | Accepts min/max prefix | Value | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `device-width` | yes | length | Irrespective of the browser window''s width,
    this determines the width of the device''s entire screen. |'
  prefs: []
  type: TYPE_TB
- en: '| `device-height` | yes | length | This determines the height of the device''s
    screen. |'
  prefs: []
  type: TYPE_TB
- en: '| `orientation` | no | portrait or landscape | This determines the orientation
    of the device. The two orientation modes are landscape and portrait. |'
  prefs: []
  type: TYPE_TB
- en: '| `width` | yes | length | This determines the width of the displayable area.It
    remains constant in most of the mobile browsers because of the inability of resizing
    the browser size, but with desktop computers, the width changes when the user
    resizes the browser. |'
  prefs: []
  type: TYPE_TB
- en: '| `height` | yes | length | This determines the height of the display area.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `grid` | no | 1 or 0 | This detects whether the output device is bitmap or
    grid. Grid-based devices return a value of 1 and all other device return a value
    of 0. |'
  prefs: []
  type: TYPE_TB
- en: '| `device-aspect-ratio` | yes | ratio | This determines the ratio of value
    of the `device-width` media to the `device-height` media. |'
  prefs: []
  type: TYPE_TB
- en: '| `resolution` | yes | resolution | This determines the density of the pixels
    or resolution of the output device. |'
  prefs: []
  type: TYPE_TB
- en: '| `color` | yes | integer | This determines the device''s number of bits per
    color component. The value is zero when the device is not a color device. |'
  prefs: []
  type: TYPE_TB
- en: '| `color-index` | yes | integer | In the color lookup table of the output device,
    this determines the number of entries. |'
  prefs: []
  type: TYPE_TB
- en: '| `monochrome` | yes | integer | This determines the number of bits per pixel
    in a monochrome frame buffer. This value is `0` for non-monochrome devices. |'
  prefs: []
  type: TYPE_TB
- en: '| `aspect-ratio` | yes | ratio | This determines the ratio of value of the
    `width` media to the `height` media. |'
  prefs: []
  type: TYPE_TB
- en: '| `scan` | no | progressive or interlace | Progressive or interlaced, this
    determines the scanning process of TV. |'
  prefs: []
  type: TYPE_TB
- en: Different screen resolutions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this particular section, we will focus on the syntax for setting a minimum
    or maximum width of general and device-specific screen resolutions. We will also
    discuss the orientation of the device.
  prefs: []
  type: TYPE_NORMAL
- en: We cannot set the browser's screen resolution with CSS.
  prefs: []
  type: TYPE_NORMAL
- en: Small screen devices
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We can use the following code for small screen devices with a maximum device
    width of 480 px:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Any CSS written inside the media query will be applied to devices with a width
    of 480 px or less. The purpose of using `max-device-width` instead of `device-width`
    is that `device-width` refers to the width of the device but does not refer to
    the width of the display area. In case of browsers where we can change the resolution
    can be changed if the user resizes it, so we used `max-device-width`.
  prefs: []
  type: TYPE_NORMAL
- en: Until and unless, the screen resolution or browser size (in cases where we can
    change the browser size) is 480 px or less, the media query does not take effect,
    which basically leaves us for mobile devices.
  prefs: []
  type: TYPE_NORMAL
- en: High resolution displays of Apple mobile devices
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Apple introduced devices, such as the iPhone 5 and iPad 3\. In their earlier
    devices, such as the iPhone 4 and 4S, they had introduced an idea of retina display.
    In retina display, the screen resolution of the device gets doubled. Apple supports
    a proprietary property called `-webkit-device-pixel-ratio` that returns the pixel
    density of the device. So, this device returns a value of `2`.
  prefs: []
  type: TYPE_NORMAL
- en: For high resolution devices
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'We can use the following code for general Apple devices with a high resolution:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: For small screen high resolution devices
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'We can use the following code for small screen with high resolution devices,
    such as the iPhone 4:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: For large screen high resolution devices
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'We can use the following code for large screen with high resolution devices,
    such as the iPad 3:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Because of high resolution, images are the most popular choice which can be
    optimized for retina displays as depending on the device; we can serve two different
    versions of an image. For retina displays, we double the size and resolution of
    the original image but when we use this image, we apply a constraint to its dimensions
    to be the same as the original one and allow retina devices to show two pixels
    for every pixel shown as a result we get a super clear image.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code is an example for a background image:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding example, `-webkit-background-size: 50% auto;` shrinks the
    image by 50 percent of its actual dimensions, which matches that of the original
    image. `background: url(highresolution_background.jpg) center no-repeat;` is the
    high resolution image which doubles the size or resolution of the original image.'
  prefs: []
  type: TYPE_NORMAL
- en: Devices in landscape and portrait modes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Apart from dealing with screen sizes, tackling the orientation of a device
    before media queries was hectic, but the introduction of media queries has eased
    the life of developers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code will target all devices whose screen height is longer than
    its width. Going further in situations where the user might be using a small screen
    device where orientation matters.
  prefs: []
  type: TYPE_NORMAL
- en: Small screen devices in portrait mode only
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'We can use the following code for screens with a maximum width of 480 px resolution
    for portrait mode:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Small screen devices in landscape mode only
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'We can use the following code for screens with a maximum width of 640 px resolution
    for landscape mode:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Of the technical pillars of responsive web design, media queries are the best
    established and supported. Additionally, they offer a solid return on investment
    from a design perspective and can be applied to existing applications to great
    effect.
  prefs: []
  type: TYPE_NORMAL
- en: Fluid grids
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A fluid is a substance that continually changes its form and shape accordingly
    when applied under a shear stress.
  prefs: []
  type: TYPE_NORMAL
- en: In terms of web design, fluid refers to our design that we adapt and shear stress
    refers to the screen resolution according to which the fluid components adjust.
    Components in fluid designs adapt the environment or the screen resolution and
    flow accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: For responsive design, we can say that this is a combination of a number of
    elements in which one is fluid grids and another is the use of media queries to
    load CSS, depending on the size of the screen along with its types; so we can
    say that fluid grids are not exactly responsive designs in themselves.
  prefs: []
  type: TYPE_NORMAL
- en: To keep the layout clean and to easily divide the grid into a specific number
    of columns, the maximum layout size is defined in the fluid grids. Instead of
    pixel-based dimensions, each element inside the grid is designed with proportional
    widths and heights so that they adapt according to the parent container. Elements
    will adjust their width and height according to the container in which they reside
    whenever the screen size is changed.
  prefs: []
  type: TYPE_NORMAL
- en: As fluid grids flow naturally along with the change in dimensions, we have to
    perform limited adjustments for different screen sizes and device types. Whereas
    in case of adaptive grids, we have to define definite pixel-based dimensions and
    have to manually adjust the height and width of the element in device viewports.
    In fluid grids, we can adjust `max-width,` which has great importance, since nowadays
    mobile devices are more powerful, so a person may spend most of the time performing
    various tasks using the mobile device itself.
  prefs: []
  type: TYPE_NORMAL
- en: Fluid grid generators
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Fluid grids are not easy, and creating them from scratch requires effort and
    time and is a tedious task. Since most of the grid frameworks come with advanced
    built-in features and have been tested across various major browsers, it is wise
    to choose an existing CSS grid framework or a grid generator as the base for our
    layout creation and designs. Some CSS grid systems and generators that we can
    use are:'
  prefs: []
  type: TYPE_NORMAL
- en: Fluid grid system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tiny fluid grid
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fluid grids by calculator
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fluid grids by bootstrap
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a grid with fluid columns is easy when we have a CSS framework, but
    all designs are not going to be straightforward. We might need to create columns
    and rows inside other columns and rows. Nested columns are columns contained within
    a parent column.
  prefs: []
  type: TYPE_NORMAL
- en: 960 grid system
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Starting with desktop as the primary focus, 960 grid system, which was designed
    by *Nathan Smith*, is quite good if you're looking for a desktop solution. Smith
    has more recently put in the effort to move the framework so that it adapts to
    mobile devices also.
  prefs: []
  type: TYPE_NORMAL
- en: This system provides a tool that includes CSS and JavaScript files for handling
    rapid prototyping and publishing, as well as templates for many popular design
    environments, such as Omnigraffle, Fireworks, Balsamiq, and Photoshop, in order
    to provide a single solution for both desktop and mobile devices.
  prefs: []
  type: TYPE_NORMAL
- en: 960 grid system's attention to detail has inspired elastic and fluid variations,
    themes, and a system for adapting to our own CSS preferences. So, we can say that
    with this, we can set our preferred column number, column width, and gutterwidth—all
    while enjoying the benefit of the 960 grid system community.
  prefs: []
  type: TYPE_NORMAL
- en: 'Pros of 960 grid system are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The creators also released other 960-based solutions, which eased its integration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It features a custom CSS generator for customizing CSS accordingly
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 960 grid system has a lot of column configurations because it has a lot of divisors—28
    and higher
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Cons of 960 grid system are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: It contains extra markup compared to another solution
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It has extra CSS file size compared to another solution
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It contains non-semantic class names
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bootstrap
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Bootstrap is an HTML, CSS, and JavaScript framework that you can use as the
    base for creating websites or web applications. If you are involved in web development
    today, you must have heard of Twitter and GitHub, so when you hear of a framework
    that started life at Twitter and is the most popular repository on GitHub—beating
    even jQuery and Node.js—you'll gain some idea of the viral spread that has engulfed
    Bootstrap. In other words, it's a sleek, intuitive, and powerful frontend framework
    for faster and easier web development.
  prefs: []
  type: TYPE_NORMAL
- en: In short, it represents the drive behind responsive web design to enable developers
    to quickly release applications that hold the user's needs at the forefront.
  prefs: []
  type: TYPE_NORMAL
- en: As its responsive features are strong enough to stand alone, Bootstrap and its
    component library is one of the best solutions around. We can exploit the fluid
    nesting and offsetting that helps to set the framework apart from its peers. And
    while we will avoid taking advantage of the component styling for which many developers
    adopt Bootstrap, the ease with which the grid comes to life will make you keen
    to explore the framework's other features.
  prefs: []
  type: TYPE_NORMAL
- en: 'Pros of Bootstrap are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: It is fully customizable to include the only features we need to use
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It has been rigorously tested by developers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bootstrap is popular which means that developers are familiar with it
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It can help to do awesome stuff on the Web in a small amount of time
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Cons of Bootstrap are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: It contains extra markup compared to another solution
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It has extra CSS file size compared to another solution
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It contains non-semantic class names are used in it
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: But using responsive CSS framework does not make our design responsive and moreover
    responsive design is not that simple. Unless we plan the design carefully, users
    will always face problems while browsing the content on smaller devices when we
    use fluid grids.
  prefs: []
  type: TYPE_NORMAL
- en: For perfect responsive design, we cannot depend on fluid grids, but we can adjust
    the fluid grids when necessary according to the design It user with the best browsing
    experience.
  prefs: []
  type: TYPE_NORMAL
- en: Adaptive images
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Adaptive images load different types of images depending on the client-side
    adaption. They detect the user's device screen size and automatically create caches
    and deliver the appropriate type of HTML web page's images. Their basic purpose
    is to be used with responsive designs and to be combined with fluid image techniques.
    This is because our website is being viewed not only in smaller devices, but also
    devices that are slower and have lower bandwidth. So, particularly in these devices,
    our desktop-based images load slowly, which causes more user bandwidth, increases
    cost, and rendering of user interface takes time. All these problems are fixed
    by adaptive images.
  prefs: []
  type: TYPE_NORMAL
- en: Adaptive images follow an identical semantic and structural model for `<img>`,
    `<audio>`, or `<video>` elements. Moreover, the `<source>` element should have
    the `media` attribute that supports CSS3 media queries which add the respective
    elements rendered on the given device.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Features
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Some of the features of adaptive images are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: It requires no mark-up changes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It can be easily configured or customized
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It works fine with any CMS or works without CMS too
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It works easily on our existing website
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It follows the mobile-first philosophy which means design for mobile devices
    is covered first and then the larger screens.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is up and running within minutes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How it works
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The steps to use adaptive images are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Add the `.htaccess` and `adaptive-images.php` files to the `document-root` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We can download these files from [https://github.com/mattwilcox/Adaptive-Images](https://github.com/mattwilcox/Adaptive-Images).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add JavaScript to the `<head>` of the web page. Following is the JavaScript
    needed to be copied:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'For retina displays in Apple devices, we can use the following line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Add CSS media query values to `$resolutions` in the PHP file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Customization
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can also change the default values by looking in the configuration section
    at the top of the PHP file (`adaptive-images.php`). The following points can be
    customized accordingly:'
  prefs: []
  type: TYPE_NORMAL
- en: We can set breakpoints to match CSS media queries
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We can change the name and location of the `ai-cache` folder
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We can change the quality of any generated JPG images saved
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We can set how long the browser should cache images for
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To help keep detail, we can sharpen rescaled images
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Making our form responsive
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In earlier chapters, from basics of the form we learned how to style, validate,
    and link our form with the database. In this section, we will learn how to make
    our form responsive.
  prefs: []
  type: TYPE_NORMAL
- en: We will re-use our form that we styled earlier and will see the new technique
    with which we can make our forms responsive.
  prefs: []
  type: TYPE_NORMAL
- en: The HTML code remains the same except that the following links are added to
    the `<head>` tag of the HTML page.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following first line mentioned is the viewport `<meta>` tag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: The second line is an external media query (explained for example). The code
    is maintained in a separate file but the media query is written in the `<head>`
    tag.
  prefs: []
  type: TYPE_NORMAL
- en: The following mentioned CSS file will get included and comes into action when
    the device screen resolution width is lower than or exactly 520 px, but as soon
    as the device resolution exceeds 520 px in width, the media query is no longer
    active.
  prefs: []
  type: TYPE_NORMAL
- en: In the styling, we have set the widths of the input text element to be 85 percent.
    We have also cleared the value of the form element radio button marked with the
    gender class to be none. Adjustments have been made in the styling of the **Submit**
    button with the font size set to 15 px and increasing the width to 23 percent.
    The class for date of birth, `div_dob,` is also cleared to none so that it falls
    under the same line in a sequential manner.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the code written in CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: The preceding CSS code is already explained in [Chapter 3](ch03.html "Chapter 3. Styling
    the Forms"), *Styling the Forms*, but the important point here is the internal
    media query that makes our form responsive for small screen devices.
  prefs: []
  type: TYPE_NORMAL
- en: 'The third line is the external media query file linked to the main HTML page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'The following snippet is the CSS code that is maintained in a separate file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, the media query is applied to the media type screen having
    the specific minimum width of the screen to the specific maximum width of the
    screen. We have overwritten the width of the classes `txtinput`, `select`, and
    `dateinput` that adjust according to the screen resolution. The elements reflow
    and adjust according to the specific screen resolution.
  prefs: []
  type: TYPE_NORMAL
- en: The following screenshots are of our form that we have made responsive. This
    responsive form responds for both web browser (changing the browser size) and
    various device screen resolutions.
  prefs: []
  type: TYPE_NORMAL
- en: 'For resolution 480 x 800, our form looks as the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Making our form responsive](img/4661OS_05_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'For resolution 768 x 1024, our form looks as the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Making our form responsive](img/4661OS_05_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'For resolution 1280 x 800, our form looks as the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Making our form responsive](img/4661OS_05_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: For each particular resolution, we can notice that we are able to view the full
    form without any scrolling from either side.
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding scenarios, for different resolutions, some elements are resized
    and have been shifted dynamically from their original position for better user
    experience.
  prefs: []
  type: TYPE_NORMAL
- en: This way, our form dynamically responds to different resolutions.
  prefs: []
  type: TYPE_NORMAL
- en: Limitations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Mobile web design's new approach is responsive design, but one of the biggest
    challenges for web designers and their clients is finalizing the layout or wireframes
    as to how the website will look.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some of the other challenges we need to overcome to build successful websites
    are:'
  prefs: []
  type: TYPE_NORMAL
- en: Responsive design takes more development time than building other websites
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scaling images reduces image quality because scaling is based on screen size
    and not context
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: On smaller devices, using navigation menus becomes a challenge
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Browser compatibility becomes an issue; because of older browsers, the support
    of media queries becomes limited
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building complex websites becomes a tedious task with this technology
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Development cost is higher
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Response time of the website becomes slower because of the much larger size
    of the web page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The loading time in mobile devices is increased while downloading the desktop
    content that is not even displayed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Guidelines
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will look at the guidelines for responsive design so as
    to make our forms more effective.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some responsive design best practices are:'
  prefs: []
  type: TYPE_NORMAL
- en: Try to keep the content on the web page as minimum as possible for better responsive
    design.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Always prioritize the content as you have a limitation on smaller screens.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Try to use navigation as minimum as possible.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Web pages must be effectively programmed and structured.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Responsive design isn't for mobiles only. The scope of responsive design is
    not limited to mobiles or tablets; in fact, we should remember that people also
    use large 27-inch desktop screens.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Always keep focus on browser compatibility.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Keep the forms short; if long forms are used, add a **Save** button and navigate
    the user to the next page.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Always maintain separate files for responsive design for easy maintenance of
    code.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned about responsive design. Along with this, we saw
    the advantages and the recommendations for responsive design.
  prefs: []
  type: TYPE_NORMAL
- en: We learned the various techniques with which we can make our forms responsive.
  prefs: []
  type: TYPE_NORMAL
- en: Then, with the help of code, we learned the practical implementation of responsive
    web forms by re-using the example we built in earlier chapters.
  prefs: []
  type: TYPE_NORMAL
- en: Lastly, we saw the best practices for making responsive forms more effective.
  prefs: []
  type: TYPE_NORMAL
