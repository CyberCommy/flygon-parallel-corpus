- en: CSS Foundations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this first chapter, *CSS Foundations*, we're going to take a look at the
    fundamental concepts necessary to master CSS. You're going to learn about the
    best practices in web development.
  prefs: []
  type: TYPE_NORMAL
- en: In the world of web development, things change often. For instance, in the past,
    tables were the technique of choice when laying out a webpage. Today, using a
    table for layout is definitely not what you want to do. Floats have been the most
    common way to create a layout for a while and will be what we learn about first.
    In the last year or so, flexbox has started to overtake floats for layout and
    we’ll learn about flexbox towards the end of this book. CSS is progressing with
    other new layout modules that are designed to supplant floats for laying out a
    page. Grid layout, and CSS regions may be the way of the future. Since things
    rapidly evolve in the world of frontend web development, our key takeaway is that
    we can't stop learning CSS. In general, once you stop learning, your knowledge
    will becomes outdated very quickly. My intent is to teach the concepts and techniques
    that will benefit you for a long time.
  prefs: []
  type: TYPE_NORMAL
- en: In the two sections of this chapter, we'll review core concepts that are fundamental
    to web design and CSS. We'll start by reviewing how to create the most fundamental
    thing in CSS–the rule set-and go over the different places we can write those
    rule sets.
  prefs: []
  type: TYPE_NORMAL
- en: The anatomy of a rule set and the three types of style sheets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We''re now a little more familiar with the content of the book and the website
    we''re going to build. Before we start delving into more advanced topics, let''s
    review a few CSS foundations. Going forward in this book, I''ll use terms such
    as selector, property, and value, and you''ll need to understand exactly what
    these terms mean in order to follow along. Here''s what we''ll do: we''ll review
    a rule set first, and then we''ll look at the three different places we can write
    those rule sets. So let''s get started.'
  prefs: []
  type: TYPE_NORMAL
- en: Dissecting a rule set
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s jump into a CSS file and look at one of the rule sets in the following
    code block. It''s targeting an `h2`-a level two headline. It''s setting a `font-size`
    of `26px`, a `font-style` of `italic`, a `color` to a shade of red, and a `margin-bottom`
    of `10px`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'So nothing too scary here! Let''s dissect this a little bit though:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding code, `h2` is the *selector*. We are selecting an element
    on the page to target our style rules. The `h2` selector could be a `p`, an `li`,
    a `div`, an `a`, or any HTML element we want to target. It can also be a class,
    an ID, or an element attribute, which I''ll talk about later. Next, we have properties
    and values inside the curly braces. From the opening curly brace to the closing
    curly brace is the *declaration block*. You can have as many properties as you
    want inside the curly braces, or declaration block. `font-size`, `color`, `font-style`,
    and `margin` are just a few of the many different properties that you can use.
    Each property has a corresponding value. Between each property and value, you
    must have a colon. Following the value is a semi colon, which is also mandatory.
    Each property and value is called a declaration. So the declaration block is everything
    inside the curly braces and a declaration is a single line that includes a property
    and a value. But really, there are three important things to remember in the anatomy
    of a rule set: the selector, the property, and the value. Now let''s look at where
    we can write these rule sets.'
  prefs: []
  type: TYPE_NORMAL
- en: External style sheets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Currently, we write our rule sets in an external style sheet. You can see it''s
    literally its own file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00013.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'In the folder structure on the left-hand side of the screen, you can see that
    it''s in a folder called `css`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00014.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Besides `embedded` style sheets. The external style sheet is by far the best
    place to write your styles; it''s a separate file that is linked to each HTML
    page. An external style sheet can control a whole website, which is the main reason
    why this is the preferred type of style sheet. Anywhere in between the `<head></head>`
    tags of your `index.html` file; this is where you can link to your external style
    sheet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The `href` attribute points to the location of the file. Here it''s pointing
    to the `css` folder and then a file called `style.css`. There''s also a `rel`
    attribute that just basically says that this is a `stylesheet`. In the past, you
    might have seen `text/css` as the value for the `type` attribute, as shown in
    the following code block, but that is no longer necessary in HTML5:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: You may have also seen a closing forward slash on a self-closing tag like the
    `link` element, but in HTML5 that forward slash is no longer necessary. So including
    it or excluding it won't have any impact on your site.
  prefs: []
  type: TYPE_NORMAL
- en: Embedded style sheets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Instead of using the best type of style sheet, the external style sheet, we
    can also write our rule sets in the head of HTML documents. This is called an
    **embedded style sheet**. There are plenty of reasons for not doing it this way.
    The main two reasons are that it hampers the workflow, and it only controls a
    single page of the site. What we would do is simply create somewhere in the `head`
    tag, these open and close `<style>` tags:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Anywhere inside this open `<style>` tag we can start adding our rule sets,
    which will only affect this one page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Again, this isn't the most preferred place to write your styles. Keeping them
    in an external style sheet will, 99 percent of the time, be the best place, but
    you do have the option of embedding styles in the `head` tag of your document.
  prefs: []
  type: TYPE_NORMAL
- en: Inline style sheets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Finally, the third type of style sheet is the inline style sheet. And its not
    really a style sheet - more like just an *inline style*. What we could do is write
    a `style` attribute actually inside an element in our HTML:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Inline styles are a little different from external and embedded style sheets
    that use the traditional rule set; here there''s no selector and there''s no complete
    rule set because you''re writing it inside an HTML tag. We can enter a `font-size`
    of `10px`. We write that property and value the same way we do in a rule set and
    we should cap it with a semicolon:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'We can also change the color and cap that with a semicolon:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Save this, refresh the website, and you can see the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00015.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: This is by far the most inefficient way to write styles. However, writing CSS
    directly in an HTML element gives it the most weight and will overrule all embedded
    styles and all external styles that target the same element, unless the `!important`
    keyword is used. In [Chapter 4](part0072.html#24L8G0-a72d261cc09f412988422c8a08f12cd5),
    *Creating Buttons with Modular, Reusable CSS Classes, and CSS3* in the *Specificity
    Rules* section, I dive into cascades and other factors that make certain rules
    weigh more and override other rules.
  prefs: []
  type: TYPE_NORMAL
- en: 'Okay, so we have now created a rule set and learned what each part of a rule
    set is called, specifically, the selector, property, and value. This information
    will be helpful for you to retain, as I''ll use this terminology often. We also
    reviewed the three different places you can create a style sheet: externally,
    embedded within the `<head>` tag, and inline, directly inside of an element. Again,
    external style sheets are the most efficient because they can control an entire
    website. This is the only place I write CSS if I can help it. Next, we''ll review
    two more core concepts: the box model and the `display` property.'
  prefs: []
  type: TYPE_NORMAL
- en: The box model and block versus inline elements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we''ll review two more foundations of CSS: the box model and
    block versus inline elements. Fully grasping these two concepts is key in laying
    the ground work for CSS mastery later. First, we will review the box model and
    then we''ll look at how that relates to block level elements. We''ll follow that
    up with the characteristics of inline elements.'
  prefs: []
  type: TYPE_NORMAL
- en: The box model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The **box model** defines how wide and tall elements on a page will be. To
    determine the horizontal space an element occupies, you add up the `content` +
    `padding-left` + `padding-right` + `border-left` + `border-right` + `margin-left`
    + `margin-right`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00016.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: So let's take a look at this in practice by looking at the `h1` on our site,
    which is the blue text that says, "Old Chompy".
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00017.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Here is the ruleset that makes this headline look the way it does:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s add in the following properties to give it a `width`, `padding`, `border`,
    and `margin`. As well as a noticeable `background-color`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s what our headline looks like now. One big box:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00018.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: So those 5 properties that contribute to this element's box model are now in
    place; looking at the browser in the preceding screenshot, this `h1` really looks
    like a box. We can see the border of `10px`, the `margin`, which is outside the
    `border`, is `50px`, and the padding, which is between the border and the text,
    is `50px`. Then the width inside the padding is `300px`. So this element's width
    is actually *300 + 20 + 100 + 100*, which adds up to a total size of `520px`.
    So even though we said the `width` is `300px` by defining the `width` property
    in our CSS file, the true space this element occupies is `520px`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, that is the traditional box model. I can modify this traditional box model
    using the `box-sizing` property with the `border-box` value. So let''s use the
    `box-sizing` property and see how that affects the site. Add the property and
    value to the bottom of the `h1` declaration block, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: As illustrated in the following screenshot, `border-box` will include essentially
    subtract the `padding` and `border` from the `width` and `height` calculation.
    If I use `300px` as my `width`, the border of `20px` and the padding of `100px`
    will be subtracted from the `300px` I specified. This is a more intuitive box
    model and it is compatible with Internet Explorer 8 and higher, as well as all
    other major browsers. The final horizontal space this element now occupies goes
    from `520px` to `400px`.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00019.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Block level elements versus inline elements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s talk a little bit about block level elements. The heading 1 (`h1`),
    heading 2 (`h2`), paragraphs (`p`), list items (`li`), and divs (`div`) are all
    examples of natural block level elements. Block level elements have two defining
    traits: they expand the full width available, and they force elements that come
    after them to appear on the next line, meaning they stack on top of each other.
    So let''s remove the `box-sizing` property from our declaration block as well
    as the `width` property to demonstrate how they take up the full width available
    if no width is specified:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Save this and refresh the site. You can see in the following screenshot that,
    as you make your browser window larger, it takes up the full width available,
    apart from the `margin` that we set of `50px` on all sides:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00020.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now let''s go into the HTML file, add two more of these `h1` tags into the
    HTML, and save it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s what that looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00021.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now you can see how these block level elements stack on top of each other:
    good ol'' block level elements.'
  prefs: []
  type: TYPE_NORMAL
- en: Inline elements, on the other hand, behave differently. They sit next to each
    other horizontally and they don't take up the full width available. They only
    take up as much width as they need. A few elements that are naturally inline elements
    are the anchor (`<a>`), `<span>`, `<i>`, `<b>`, `<strong>`, and `<em>` tags.
  prefs: []
  type: TYPE_NORMAL
- en: 'Alright, so let me go into the HTML and add three `span` tags to the page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'What I''ll also do is generally target those `span` elements in a rule set
    and give them a green background, just to kind of see that they''re distinct:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s how that looks:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00022.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: You can notice how the green inline elements sit next to each other horizontally
    instead of stacking vertically. Nothing special, but we can see how they do not
    take up the full width available, they only take as much as they need.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are some things that inline elements do not do. They don''t respond to
    `width` or `margin-top` or `margin-bottom`. So if an element is naturally inline
    and you give it a `width` and a `margin-top` or `margin-bottom`, as shown in the
    following code, it''s going to do absolutely nothing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Nothing changes:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00022.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Inline elements just don't respect those properties, and those properties don't
    have an impact on them, so we'll remove those.
  prefs: []
  type: TYPE_NORMAL
- en: 'There''s one last interesting thing you can do. There''s a `display` property
    that allows you to change a natural block level element to inline and vice versa.
    So let''s add a `display` property with the `block` value to our `span` selector
    and view that in the browser. So, I can just say `display: block` and also add
    some `margin-top`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'We can see that these elements now stack on top of each other and now respect
    the `margin-top` and `margin-bottom` values:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00023.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Elements with the `display` property set to `block` would respect any `width`
    value I give it, but it also takes up the full width available. You can see that
    it extends all the way to the edge of our screen. We could''ve just as easily
    used the `display: inline` property on our `h1` selector to change the nature
    of the display from block to inline. Lastly though, we can use `display: none`,
    which totally hides the element from the page and is often used for various reasons.
    So let''s go to our `h1` declaration and say `display: none`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, if we look at our site, that `h1` is invisible. It''s no longer something
    that the browser is going to show us:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00024.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: To sum up, all elements conform to a box model. The box model changes a little
    depending on how the `box-sizing` property is used, if used at all. Also, the
    box model changes based on whether the element is block or inline, the two most
    common display properties.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have accomplished a lot in this first chapter. We've talked about how CSS
    is the presentation language of the web and really makes your website look like
    a website. We're now familiar with the site we'll be building and tools we'll
    be using in the upcoming chapters. We have covered core concepts such as rule
    sets, linking to an external style sheet, and the box model and display properties,
    all of which are vital in order to master CSS.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we'll get into some tools that are necessary to write CSS,
    such as a good text editor, a CSS reset, and Chrome's Developer tools.
  prefs: []
  type: TYPE_NORMAL
