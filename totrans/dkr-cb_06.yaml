- en: Chapter 6. Docker APIs and Language Bindings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the Docker daemon remote API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Performing image operations using remote APIs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Performing container operations using remote APIs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploring Docker remote API client libraries
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Securing the Docker daemon remote API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapters, we learned different commands to manage images, containers,
    and so on. Though we run all the commands through the command line, the communication
    between the Docker client (CLI) and the Docker daemon happens through APIs, which
    are called Docker daemon remote APIs.
  prefs: []
  type: TYPE_NORMAL
- en: Docker also provides APIs to communicate with Docker Hub and Docker registry,
    which the Docker client uses as well. In addition to these APIs, we have Docker
    bindings for different programming languages. So, if you want to build a nice
    GUI for Docker images, container management, and so on, understanding the APIs
    mentioned earlier would be a good starting point.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we look into the Docker daemon remote API and use the `curl`
    command ([http://curl.haxx.se/docs/manpage.html](http://curl.haxx.se/docs/manpage.html))
    to communicate with the endpoints of different APIs, which will look something
    like the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The preceding request will return with a return code and an output corresponding
    to the endpoint and request we chose. `GET`, `PUT`, and `DELETE` are the different
    kinds of requests, and GET is the default request if nothing is specified. Each
    API endpoint has its own interpretation for the return code.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the Docker daemon remote API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we know, Docker has a client-server architecture. When we install Docker,
    a user space program and a daemon get started from the same binary. The daemon
    binds to `unix://var/run/docker.sock` by default on the same host. This will not
    allow us to access the daemon remotely. To allow remote access, we need to start
    Docker such that it allows remote access, which can done by changing the `-H`
    flag appropriately.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Depending on the Linux distribution you are running, figure out the Docker daemon
    configuration file you need to change. For Fedora, /Red Hat distributions, it
    would be /`etc/sysconfig/docker` and for Ubuntu/Debian distributions , it would
    most likely be `/etc/default/docker`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'On Fedora 20 systems, add the `-H tcp://0.0.0.0:2375` option in the configuration
    file (`/etc/sysconfig/docker`), as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Restart the Docker service. On Fedora, run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Connect to the Docker host from the remote client:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![How to do it…](../Images/image00367.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Make sure the firewall allows access to port `2375` on the system where the
    Docker daemon is installed.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: With the preceding command, we allowed the Docker daemon to listen on all network
    interfaces through port `2375`, using TCP.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: With the communication that we mentioned earlier between the client and Docker,
    the host is insecure. Later in this chapter, we'll see how to enable TLS between
    them.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Docker CLI looks for environment variables; if it is being set then the
    CLI uses that endpoint to connect, for example, if we connect set as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, the future docker commands in that session connect to remote Docker Host
    by default and run this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The documentation on the Docker website [https://docs.docker.com/reference/api/docker_remote_api/](https://docs.docker.com/reference/api/docker_remote_api/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Performing image operations using remote APIs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After enabling the Docker daemon remote API, we can do all image-related operations
    through a client. To get a better understanding of the APIs, let's use `curl`
    to connect to the remote daemon and do some image-related operations.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Configure the Docker daemon and allow remote access, as explained in the previous
    recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this recipe, we''ll look at a few image operations as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To list images, use the following API:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is an example of the preceding syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '![How to do it…](../Images/image00368.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'To create an image, use the following API:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Here are a few examples:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Get the Fedora image from Docker Hub:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Get the WordPress image with the `latest` tag:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Create an image from the `tar` file, which is hosted on the accessible web
    server:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'To build an image, use the following API:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Here are a few examples:'
  prefs: []
  type: TYPE_NORMAL
- en: Build an image from the container (`container id = 704a7c71f77d`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Build an image from the Docker file:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: As the API expects the content as a `tar` file, we need to put the Docker file
    inside a tar and call the API.
  prefs: []
  type: TYPE_NORMAL
- en: 'To delete an image, use the following API:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is an example of the preceding syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In all the cases mentioned earlier, the APIs will connect to the Docker daemon
    and perform the requested operations.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have not covered all the options of the APIs discussed earlier and Docker
    provides APIs for other image-related operations. Visit the API documentation
    for more details.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Each API endpoint can have different inputs to control the operations. For more
    details, visit the documentation on the Docker website [https://docs.docker.com/reference/api/docker_remote_api_v1.18/#22-images](https://docs.docker.com/reference/api/docker_remote_api_v1.18/#22-images).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Performing container operations using remote APIs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In a similar way to how we performed image operations using APIs, we can also
    do all container-related operations using APIs.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Configure the Docker daemon and allow remote access, as explained in the earlier
    recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this recipe, we''ll look at a few container operations:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To list containers, use the following API:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Here are a few examples:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Get all the running containers:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Get all the running containers, including the stopped ones
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'To create a new container, use the following API:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Here are a few examples
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a container from the `fedora` image:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a container from the `fedora` image and name it `f21`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'To start a container, use the following API:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'For example, start a container with the `591ab8ac2650` ID:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Note that while starting the stopped container, we also passed the DNS option,
    which will change the DNS configuration of the container.
  prefs: []
  type: TYPE_NORMAL
- en: 'To inspect a container, use the following API:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'For example, inspect a container with the `591ab8ac2650` ID:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'To get a list of processes running inside a container, use the following API:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'For example, get the processes running in the container with the `591ab8ac2650`
    ID:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'To stop a container, use the following API:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'For example, stop a container with the `591ab8ac2650` ID:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have not covered all the options of the APIs discussed earlier and Docker
    provides APIs for other container-related operations. Visit the API documentation
    for more details.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The documentation on the Docker website at [https://docs.docker.com/reference/api/docker_remote_api_v1.18/#21-containers](https://docs.docker.com/reference/api/docker_remote_api_v1.18/#21-containers)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploring Docker remote API client libraries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the last few recipes, we explored the APIs provided by Docker to connect
    and perform operations to the remote Docker daemon. The Docker community has added
    bindings for different programming languages to access those APIs. Some of them
    are listed at [https://docs.docker.com/reference/api/remote_api_client_libraries/](https://docs.docker.com/reference/api/remote_api_client_libraries/).
  prefs: []
  type: TYPE_NORMAL
- en: Note that Docker Maintainers do not maintain these libraries. Let's explore
    Python bindings with a few examples and see how it uses the Docker remote API.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Install `docker-py` on Fedora:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternatively, use `pip` to install the package:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Import the module:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create the client, using the following steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Connect through the Unix Socket:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Connect over HTTP:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Here, `base_url` is the endpoint to connect, `version` is the API version the
    client will use, and `timeout` is the timeout value in seconds.
  prefs: []
  type: TYPE_NORMAL
- en: 'Search for an image using the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Pull an image using the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Start a container using the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In all the preceding cases, the Docker Python module will send RESTful requests
    to the endpoint using the API provided by Docker. Look at the methods such as
    `search`, `pull`, and `start` in the following code of `docker-py` available at
    [https://github.com/docker/docker-py/blob/master/docker/client.py](https://github.com/docker/docker-py/blob/master/docker/client.py).
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can explore different user interfaces written for Docker. Some of them
    are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Shipyard ([http://shipyard-project.com/](http://shipyard-project.com/))—written
    in Python
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DockerUI ([https://github.com/crosbymichael/dockerui](https://github.com/crosbymichael/dockerui))—written
    in JavaScript using AngularJS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Securing the Docker daemon remote API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Earlier in this chapter, we saw how to configure the Docker daemon to accept
    remote connections. However, with the approach we followed, anyone can connect
    to our Docker daemon. We can secure our connection with Transport Layer Security
    ([http://en.wikipedia.org/wiki/Transport_Layer_Security](http://en.wikipedia.org/wiki/Transport_Layer_Security)).
  prefs: []
  type: TYPE_NORMAL
- en: We can configure TLS either by using the existing **Certificate Authority**
    (**CA**) or by creating our own. For simplicity, we will create our own, which
    is not recommended for production. For this example, we assume that the host running
    the Docker daemon is `dockerhost.example.com`.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Make sure you have the `openssl` library installed.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create a directory on your host to put our CA and other related files:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Create the CA private and public keys:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: '![How to do it...](../Images/image00369.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Now, let's create the server key and certificate signing request. Make sure
    that `Common Name` matches the Docker daemon system's hostname. In our case, it
    is `dockerhost.example.com`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: '![How to do it...](../Images/image00370.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'To allow connections from 127.0.0.1 and a specific host, for example, 10.70.1.67,
    create an extensions configuration file and sign the public key with our CA:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: '![How to do it...](../Images/image00371.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'For client authentication, create a client key and certificate signing request:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: '![How to do it...](../Images/image00372.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'To make the key suitable for client authentication, create an extensions configuration
    file and sign the public key:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: '![How to do it...](../Images/image00373.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'After generating `cert.pem` and `server-cert.pem`, we can safely remove both
    the certificate signing requests:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'To set tight security and protect keys from accidental damage, let''s change
    the permissions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'Stop the daemon if it is running on `dockerhost.example.com`. Then, start the
    Docker daemon manually from `/etc/docker`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'From another terminal, go to `/etc/docker`. Run the following command to connect
    to the Docker daemon:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: You will see that a TLS connection is established and you can run the commands
    over it. You can also put the CA public key and the client's TLS certificate and
    key in the `.docker` folder in the home directory of the user and use the `DOCKER_HOST`
    and `DOCKER_TLS_VERIFY` environment variables to make a secure connection by default.
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](../Images/image00374.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: To connect from the remote host we mentioned while signing the server key with
    our CA, we will need to copy the CA public key and the client's TLS certificate
    and key to the remote machine and then connect to the Docker host as shown in
    the preceding screenshot.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We setup the TLS connection between the Docker daemon and the client for a secure
    communication.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To set up the Docker daemon to start with the TLS configuration by default,
    we will need to update the Docker configuration file. For example, on Fedora,
    you update the `OPTIONS` parameter as follows in `/etc/sysconfig/docker`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: If you recall, in [Chapter 1](part0015.xhtml#aid-E9OE2 "Chapter 1. Introduction
    and Installation"), *Introduction and Installation*, we saw how we can set up
    the Docker host using the Docker Machine ([http://docs.docker.com/machine/](http://docs.docker.com/machine/))
    and as part of this setup, the TLS setup happens between the client and the host
    running the Docker daemon. After configuring the Docker host with the Docker Machine,
    check `.docker/machine` for the user on the client system.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
