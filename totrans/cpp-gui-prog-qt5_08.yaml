- en: Graphics View
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we learned about the importance of visual presentation
    for the user by displaying coordinate data on a map. In this chapter, we will
    further explore the possibility of graphics data representation using Qt's Graphics
    View framework.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Graphics View framework
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Moveable graphics items
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating an organization chart
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: At the end of this chapter, you will be able to create an organization chart
    display using C++ and Qt's API. Let's get started!
  prefs: []
  type: TYPE_NORMAL
- en: Graphics View framework
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Graphics View framework is part of the widgets module in Qt so it is already
    supported by default, unless you're running Qt console application instead, which
    does not need the widgets module.
  prefs: []
  type: TYPE_NORMAL
- en: The Graphics View view in Qt works pretty much like a whiteboard, where you
    can draw anything on it using C/C++ code, such as drawing shapes, lines, text,
    and even images. This chapter may be a little hard to follow for beginners but
    it will definitely be a fun project to work with. Let's get started!
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a new project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First, create a new Qt Widgets Application project. After that, open `mainwindow.ui`
    and drag and drop the Graphics View widget onto the main window, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/01a52e3d-f0ef-4e70-b7dd-c390e5edc2b1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Then, create a layout for the graphics view by clicking on the Lay Out Vertically
    button at the top of the canvas. After that, open up `mainwindow.h` and add the
    following headers and variables:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'After that, open `mainwindow.cpp`. Once it is opened, add the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Build and run the program now, and you should see something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8b6246e1-dedd-4df3-b865-75e323337c8a.png)'
  prefs: []
  type: TYPE_IMG
- en: The code is a bit long so let me explain to you what it does and how it draws
    the graphics onto the screen.
  prefs: []
  type: TYPE_NORMAL
- en: 'As I said earlier, the Graphics View widget is like a canvas or whiteboard
    that allows you to draw anything you want on it. However, we also need something
    called Graphics Scene, which is essentially a scene graph that stores all the
    graphical components in a parent–child hierarchy before displaying them on the Graphics
    View, accordingly. Scene graph hierarchy is something that the image that appears
    in the previous screenshot, where each object could have a parent or children
    that link together:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/25c1c1d4-4bba-4b7d-9fe3-ec7e109bfcbb.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the preceding code, we first created a `QGraphicsScene` object and set it
    as the Graphics Scene for our Graphics View widget:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'In this example, however, we don''t have to link the graphics items together
    so we''ll just create them independently, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The `QPen` and `QBrush` classes are used to define the rendering style of these
    graphics items. `QBrush` is usually for defining the background color and pattern
    for the item, while `QPen` normally affects the outline of the item.
  prefs: []
  type: TYPE_NORMAL
- en: 'Qt provides many types of graphics items for the most common shapes, including:'
  prefs: []
  type: TYPE_NORMAL
- en: '`QGraphicsEllipseItem` – ellipse item'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QGraphicsLineItem` – line item'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QGraphicsPathItem` – arbitrary path item'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QGraphicsPixmapItem` – pixmap item'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QGraphicsPolygonItem` – polygon item'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QGraphicsRectItem` – rectangular item'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QGraphicsSimpleTextItem` – simple text label item'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QGraphicsTextItem` – advanced formatted text item'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For more information, please visit this link: [http://doc.qt.io/archives/qt-5.8/qgraphicsitem.html#details.](http://doc.qt.io/archives/qt-5.8/qgraphicsitem.html#details)'
  prefs: []
  type: TYPE_NORMAL
- en: Movable graphics items
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous example, we have successfully drawn some simple shapes and text
    onto the Graphics View widget. However, these graphics items are not interactive
    and thus don't suit our purpose. What we want is an interactive organization chart
    where the user can move the items around using mouse. It is actually really easy
    to make these items movable under Qt; let's see how we can do that by continuing
    our previous project.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, make sure you don''t change the default interactive property of our
    Graphics View widget, which is set to enabled (checkbox is checked):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/01e7d066-00f9-4c4e-ae4b-9352ecf34437.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After that, add the following code below each of the graphics items we just
    created in the previous `Hello World` example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Build and run the program again, and this time you should be able to select
    and move the items around the Graphics View. Do note that `ItemIsMovable` and
    `ItemIsSelectable` both give you a different behavior—the former flag will make
    the item movable by mouse, and the latter makes the item selectable, which typically
    gives it a visual indication using dotted outline when selected. Each of the flags
    works independently and will not affect the other.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can test out the effect of `ItemIsSelectable` flag by using the signal and
    slot mechanism in Qt. Let''s go back to our code and add the following line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The `selectionChanged()` signal will be triggered whenever you selected an
    item on the Graphics View widget and the `selectionChanged()` slot function under
    our `MainWindow` class will then be called (which we need to write). Let''s open
    up `mainwindow.h` and add in another header for displaying debug messages:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we declare the slot function, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'After that open `mainwindow.cpp` and define the slot function, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Now try and run the program again; you should see a line of debug messages that
    say Item selection which appears whenever a graphics item has been clicked. It's
    really simple, isn't it?
  prefs: []
  type: TYPE_NORMAL
- en: As for the `ItemIsMovable` flag, we won't be able to test it using the signal
    and slot method. This is because all classes inherited from `QGraphicsItem` class
    are not inherited from the `QObject` class, and therefore the signal and slot
    mechanism doesn't work on these classes. This is intentionally done by Qt developers
    to make it lightweight, which improves the performance, especially when rendering
    thousands of items on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: Even though signal and slot is not an option for this, we can still use the
    event system, which requires an override to the `itemChange()` virtual function,
    which I will demonstrate in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an organization chart
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's proceed to learn how to create an organization chart using Graphics View.
    An organization chart is a diagram that shows the structure of an organization
    and the relationship hierarchy of its employee positions. It is easy to understand
    a company's structure by using graphical representation; therefore it's best to
    use Graphics View instead of, say, a table.
  prefs: []
  type: TYPE_NORMAL
- en: This time, we need to create our own classes for the graphics items so that
    we can make use of Qt's event system, as well as have more control of how it's
    grouped and displayed.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, create a C/C++ class by going to File | New File or Project:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a86a053b-8bab-4827-b081-a2858e1b1d66.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, name our class as `profileBox` before clicking the Next and Finish button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e257c658-4e37-45d9-a89a-e0ef788161b7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After that, open `mainwindow.h` and add in these headers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, open `profilebox.h` and make our `profileBox` class inherit `QGraphicsItemGroup`
    instead:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'After that, open `profilebox.cpp` and at the constructor of the class, set
    up `QBrush`, `QPen` and `QFont`, which will be used for rendering in a moment:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'After that, also in the constructor, create a `QGraphicsRectItem`, `QGraphicsTextItem`
    and a `QGraphicsPixmapItem`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, add these items to the group, which is the current class, since this
    class is inherited from the `QGraphicsItemGroup` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, set three flags for the current class, which are `ItemIsMovable`,
    `ItemIsSelectable` and `ItemSendsScenePositionChanges`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: These flags are very important because they are all disabled by default for
    performance reasons. We have covered both `ItemIsMovable` and `ItemIsSelectable`
    in the previous section, while `ItemSendsPositionChanges` is something new. This
    flag makes the graphics item notify Graphics Scene when it's being moved by the
    user, hence the name.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, create another function called `init()` for setting up the employee profile.
    For the sake of simplicity, we only set the employee name, however, you can do
    more if you wish, such as setting a different background color based on the rank,
    or changing their profile picture:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Do notice that we also set the main window and Graphics Scene pointers here
    so that we can use them later on. We must add the `QGraphicsItem` to a scene before
    it will render on screen. In this case, we group all the graphics items into a
    `QGraphicsItemGroup` so we only need to add the group to the scene instead of
    an individual item.
  prefs: []
  type: TYPE_NORMAL
- en: 'Do note that you must do a forward declaration for the `MainWindow` class in
    `profilebox.h` after `#include "mainwindow.h"` to avoid the error that says recursive
    header inclusion. At the same time, we also placed the `MainWindow` and `QGraphicsTextItem`
    pointers in `profilebox.h` so that we can call them later:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'You will also notice that I have used an icon in the `QGraphicsPixmapItem`
    as a decorative icon:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9787b7b9-c914-42cd-a823-622a852bea88.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This icon is a PNG image that is stored within the resource file. You can get
    this image from our sample project files on our GitHub page: [http://github.com/PacktPublishing/Hands-On-GUI-Programming-with-C-QT5](http://github.com/PacktPublishing/Hands-On-GUI-Programming-with-C-QT5)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create a resource file for your project. Go to File | New File or Project
    and select the Qt Resource File option under Qt category:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b48d892f-781d-4781-a7d1-2548d6d5dca4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After you have created an empty resource file, add a new prefix by going to
    Add | AddPrefix. We will just call this prefix `images`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8a5addd2-28d8-4bb3-b595-9acd7b2a0531.png)'
  prefs: []
  type: TYPE_IMG
- en: Then, select the newly created `images` prefix and click Add | Add Files. Add
    the icon image to your resource file and save. You have now successfully added
    the image to your project.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1803de41-0a6d-4761-bf75-a9da8ff984bf.png)'
  prefs: []
  type: TYPE_IMG
- en: If your prefix name or filename is different than the prefix name or filename
    in this book, you may right-click on your image in the resource file and select
    Copy Resource Path to Clipboard and replace the one in the code with your path.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/27bfcbda-33d3-4330-8ed7-33cd8082e990.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After that, open `mainwindow.h` and add in:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, open `mainwindow.cpp` and add the following code to create a profile
    box manually:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Build and run the project now and you should see something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/af8e4e65-97ea-4571-a6f0-b00a43980191.png)'
  prefs: []
  type: TYPE_IMG
- en: Looks neat; but we're far from done. There are a few things left to be done—we
    must allow the user to add or delete profile boxes with a user interface, and
    not by using code. At the same time, we also need to add lines that connect different
    profile boxes to showcase the relationship between different employees and their
    position within the company.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start with the easy part. Open `mainwindow.ui` again and add a push
    button to the bottom of the Graphics View widget and name it `addButton`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/03f5b860-526e-425f-b3d7-d24c86c84ebd.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Then, right-click on the push button and select Go to slot... After that, select
    the clicked option and click Ok. A new slot function will be created for you automatically,
    called `on_addButton_clicked()`. Add the following code to allow the user to create
    a profile box when they click the Add button:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Instead of creating each profile box using code, users can now easily create
    any number of profile boxes they want by clicking the Add button. A message box
    will also appear and let the user type in the employee name before creating the
    profile box:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7f6b3cf5-f348-49a5-a43e-71172aab6166.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, we''ll create another class called `profileLine`. This time, we will
    make this class inherit `QGraphicsLineItem`. The `profileline.h` basically looks
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Similar to `profileBox` class, we also create an `init` function for `profileLine`
    class, called the `initLine()` function. This function takes in two `QGraphicsItem`
    objects as the starting point and ending point for rendering the line. Besides
    that, we also create an `updateLine()` function to redraw the line whenever the
    profile boxes move.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, open `profileline.cpp` and add the following code to the constructor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: We used `QPen` to set the color of the line to be black and its width to be
    `2`. After that, we also set the `Zvalue` of the line to be `-999` so that it
    will always remain at the back of the profile boxes.
  prefs: []
  type: TYPE_NORMAL
- en: 'After that, add the following code to our `initLine()` function so that it
    looks something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: What it does is basically set the boxes for it to position its starting point
    and ending point. After that, call `updateLine()` function to render the line.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, the `updateLine()` function looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code looks a little complicated, but it''s really simple if I
    put it this way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: The values `x1` and `y1` are basically the center position of the first profile
    box while `x2` and `y2` are the center position of the second profile box. Since
    the position value we get from calling `pos()` starts from the top-left corner,
    we must get the bounding size of the profile box and divide it by two to get its
    center position. Then, add that value to the top-left corner position to offset
    it to the center.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you''re done, let''s open `mainwindow.cpp` again and add the following
    code to the `on_addButton_clicked()` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, we check whether there is any profile box selected by
    the user. If there is none, we don't have to create any line. Otherwise, create
    a new `profileLine` object and set the newly created profile box and the currently
    selected profile box as the `startBox` and `endBox` properties.
  prefs: []
  type: TYPE_NORMAL
- en: 'After that, add the line to our Graphics Scene so that it will appear on the
    screen. Lastly, store this `profileLine` object to a `QList` array so that we
    can use it later. The array declaration looks like this in `mainwindow.h`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Build and run the project now. You should be able to see the line appear when
    you created the second profile box by clicking on the `Add` button, entering a
    name, and selecting OK while the first box remains selected. However, you may
    notice a problem whenever you move the profile box away from its original position—the
    lines simply won''t update themselves!:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/115bd268-e78e-49b4-95d5-f58d962cd051.png)'
  prefs: []
  type: TYPE_IMG
- en: That is the main reason we put the lines into a `QList` array, so that we can
    update these lines whenever a profile box has been moved by the user.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do that, first, we need to override the virtual function in the `profileBox`
    class called `itemChanged()`. Let''s open `profilebox.h` and add the following
    line of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, open `profilebox.cpp` and add the code for `itemChanged()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: The `itemChanged()` function is a virtual function in `QGraphicsItem` class
    which will automatically be called by Qt's event system when something has changed
    in the graphics item, be it position change, visibility change, parent change,
    selection change, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Therefore, all we need to do is to override the function and add in our own
    custom behavior to the function. In the preceding sample code, all we did was
    to call the `updateLines()` function in our main window class.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, open `mainwindow.cpp` and define the `updateLines()` function. As the
    function name implies, what you''re going to do in this function is to loop through
    all the profile line objects stored in the lines array and update every single
    one of them, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Once you''re done, build and run the project again. This time, you should be
    able to create an organization chart, such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/72762a59-c68a-4e39-8bb7-097924dd8425.png)'
  prefs: []
  type: TYPE_IMG
- en: This is just a simpler version that shows you how you can make use of Qt's powerful
    Graphics View system to display graphical representation of a set of data that
    can be easily understood by an average Joe.
  prefs: []
  type: TYPE_NORMAL
- en: 'One last thing before it''s done–we have yet to cover how to delete the profile
    box yet. It''s actually pretty simple, let''s open `mainwindow.h` and add the `keyReleaseEvent()`
    function, which looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'This virtual function will also get called by Qt''s event system automatically
    when a keyboard button is being pressed and released. The content of the function
    looks like this in `mainwindow.cpp`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'What we did in this function is first to detect the keyboard button that''s
    being pressed by the user. If the button is `Qt::Key_Delete (delete button)`,
    then we''ll check if the user has selected any profile box by checking whether
    `scene->selectedItems().size()` is empty. If the user has indeed selected a profile
    box, then remove that item from the Graphics Scene. After that, loop through the
    lines array and check whether any profile line has connected to the profile box
    that has been deleted. Remove any lines that are connected to the profile box
    from the scene and we''re done:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6fb5678c-13c1-4f9e-a849-3abd267b209c.png)'
  prefs: []
  type: TYPE_IMG
- en: This screenshot shows the result of deleting the `Jane Smith` profile box from
    the organization chart. Notice that the lines connecting the profile box have
    been correctly removed. That's it for this chapter; I hope you found this interesting
    and will perhaps go on to create something even better than this!
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have learned how to create an application using Qt that
    allows the user to easily create and edit an organization chart. We have learned
    about classes such as `QGraphicsScene`, `QGrapicsItem`, `QGraphicsTextItem`, `QGraphicsPixmapItem`
    and so on that help us to create an interactive organization chart in a short
    period of time. In the upcoming chapter, we will learn how to capture images using
    our webcam!
  prefs: []
  type: TYPE_NORMAL
