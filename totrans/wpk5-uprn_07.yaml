- en: Debugging and Migration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter will look further into migration and debugging, providing an extensive
    overview and detailed inspection of these topics.
  prefs: []
  type: TYPE_NORMAL
- en: Migration refers to the process of moving content and projects from earlier
    versions of Webpack to newer ones. We will specifically look at the move from
    Webpack version 3 to version 4 and from version 4 to version 5\. We will also
    cover how to deal with deprecated plugins and how to remove or update them. This
    will include a look at migration when using Node.js v4 and the **command-line
    interface** (**CLI**).
  prefs: []
  type: TYPE_NORMAL
- en: This chapter will discuss the `resolve` method and how `module.loaders` has
    now been replaced by the `module.rules` method. It will also cover the chaining
    of loaders, including chaining loaders that are no longer needed or have been
    removed.
  prefs: []
  type: TYPE_NORMAL
- en: Then, this chapter will move on to exploring debugging. Debugging involves the
    process of removing common faults and errors that present themselves in complex
    software systems. This chapter will explain common problems and their solutions,
    troubleshooting, the best practices to follow to avoid these problems, and how
    to find faults.
  prefs: []
  type: TYPE_NORMAL
- en: 'Topics covered in this chapter are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Debugging
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hot module replacement
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a utility
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Migration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Debugging
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Debugging tools are central to a workflow, particularly when contributing to
    core reproduction, writing a loader, or any other complex form of coding. This
    guide will take you through the utilities that are of most use when figuring out
    matters such as slow performance or an unforgiving traceback. These principle
    utilities are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The `stats` data made available through Node.js and the CLI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Chrome DevTools via `node-nightly` and the latest Node.js versions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In Webpack 5, as of the time of writing, there are some known problems; for
    example, DevTools doesn't support persistent caching and persistent cache files
    that include absolute paths are not yet portable.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `stats` data can be very useful when debugging build issues, sifting through
    data manually, or when using a tool. It can be used to find the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Build errors and warnings
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The contents of every module
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Module compilation and resolving stats
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The interrelationships between modules
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The modules contained within any given chunk
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Also, the official Webpack **analyze** tool will accept this data and visualize
    it for you.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes, a more robust solution is needed when console statements simply won't
    do the job.
  prefs: []
  type: TYPE_NORMAL
- en: As is commonly asserted among the community of frontend developers, Chrome DevTools
    is indispensable when debugging applications—but it doesn't stop there. As of
    Node.js v6.3.0+, the built-in **inspection flag** can be used by developers to
    debug a Node.js program in DevTools.
  prefs: []
  type: TYPE_NORMAL
- en: 'This short demonstration will utilize the `node-nightly` package, which provides
    access to the latest inspection capabilities. This offers the ability to create
    breakpoints, debug memory usage issues, expose objects in the console, and more:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Begin by installing the `node-nightly` package globally:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'This package must now be run using the command line to finish the installation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, using the `inspect` flag feature of `node-nightly`, we can start to debug
    any Webpack project. It should be noted that `npm` scripts cannot be run now;
    instead, the full `node_module` path will need to be expressed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The output should reveal something like the following in the command-line utility
    window:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Now, moving to Chrome's inspection feature (`chrome://inspect`), any active
    scripts should now be viewable under the `Remote Target` header.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Clicking the `inspect` link under each script will open a dedicated debugger
    or DevTools link for the node in a session, which will connect automatically*.*
    Note that **NiM** is a handy extension for Chrome that will automatically open
    DevTools in a new tab every time you make an inspection. This is extremely useful
    for longer projects.
  prefs: []
  type: TYPE_NORMAL
- en: It may also be useful to use the `inspect-brk` flag, which causes a break on
    the first statement of any script, allowing the source code to be perused, the
    breakpoints to be set, and the process to be stopped and started ad hoc. This
    also allows the programmer to continue to pass arguments to the script in question;
    this may be useful for making parallel configuration alterations.
  prefs: []
  type: TYPE_NORMAL
- en: One key feature that this all relates to—and something that has been alluded
    to previously in this guide—is the exciting subject of **hot module replacement**
    (HMR). What it is and how to use it will be covered in the following section,
    along with a tutorial.
  prefs: []
  type: TYPE_NORMAL
- en: Hot module replacement
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: HMR is possibly the most useful element of Webpack. It allows runtime updates
    of modules that need a total refresh. This section will explore the implementation
    of HMR, as well as detailing how it works and why it is so useful.
  prefs: []
  type: TYPE_NORMAL
- en: It is very important to note that HMR is not intended for and should never be
    used in production mode; it should only be used in development mode.
  prefs: []
  type: TYPE_NORMAL
- en: It's worth noting that, according to the developers, the internal HMR API for
    plugins will probably change in future updates of Webpack 5.
  prefs: []
  type: TYPE_NORMAL
- en: To enable HMR, what we first need to do is update our `webpack-dev-server` configuration
    and use Webpack's built-in HMR plugin. This feature is great for productivity.
  prefs: []
  type: TYPE_NORMAL
- en: It is also a good idea to remove the entry point for `print.js` as it will now
    be consumed by the `index.js` module.
  prefs: []
  type: TYPE_NORMAL
- en: 'Anyone who used `webpack-dev-middleware` instead of `webpack-dev-server` should
    now use the `webpack-hot-middleware` package to enable HMR:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To start using HMR, we need to return to the configuration file, `webpack.config.js`.
    Follow the amendment here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Note the additions in the preceding code—the `hot:` option is set to `true`
    and the `'Hot Module Replacement'` plugin has been added—as well as the creation
    of the new Webpack plugin in the configuration for HMR. All of this should be
    done to make use of the plugin and HMR.
  prefs: []
  type: TYPE_NORMAL
- en: 'The command line can be used to modify the `webpack-dev-server` configuration
    with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: This will allow ad hoc changes to be made to bundled applications.
  prefs: []
  type: TYPE_NORMAL
- en: '`index.js` should now be updated so that when a change in `print.js` is detected,
    Webpack can accept the updated module. The changes are illustrated in bold in
    the following example; we are simply exposing the `print.js` file with an `import`
    expression and function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'If you make changes to the console log in `print.js`, the following output
    will be seen in the browser console. The obligatory `printMe()` button is missing
    for now, but that can be updated later:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'A look at the console window should reveal the following printout:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The preceding block reveals that HMR is awaiting a signal from Webpack and should
    HMR take place, the command-line utility can perform the automatic bundle amendment.
    The command-line window will also show this when left open. Node.js has an API
    that can be used in a similar way.
  prefs: []
  type: TYPE_NORMAL
- en: Using DevServer with the Node.js API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When using **DevServer** and the Node.js API, you should not put the `dev server`
    option on the Webpack configuration object; instead, it should always be passed
    as a secondary parameter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, DevServer simply refers to the use of Webpack in development mode as
    opposed to the `watching` or `production` modes. To use DevServer with the Node.js
    API, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The function is placed in the `webpack.config.js` file, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: To enable HMR, the configuration object must first be modified to include the
    HMR entry points. The `webpack-dev-server` package includes a method called `addDevServerEntryPoints` that
    can be used to do this.
  prefs: []
  type: TYPE_NORMAL
- en: 'What follows is a short example of what it might look like using `dev-server.js`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: HMR can be difficult. To demonstrate this, in our example, click the button
    that has been created in the example web page. It is evident that the console
    is printing the old function. This is because the event handler is bound to the
    original function.
  prefs: []
  type: TYPE_NORMAL
- en: 'To resolve this for use with HMR, the binding must be updated to the newer
    function using `module.hot.accept`. See the following example using `index.js`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: By way of explanation, `btn.onclick = printMe;` is an `onclick` event that is
    bound to the original `printMe` function. `let element = component();` will store
    the element to re-render on any changes to `print.js`. Also, note the `element
    - component();` statement, which will re-render the component and update the click
    handler.
  prefs: []
  type: TYPE_NORMAL
- en: This is just one example of the kind of pitfalls that you may encounter. Luckily,
    Webpack offers a lot of loaders, some of which are discussed later, that make
    HMR much less problematic. Let's now look at HMR and style sheets.
  prefs: []
  type: TYPE_NORMAL
- en: HMR and style sheets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using HMR with CSS is a little more straightforward with the help of `style-loader`.
    This loader uses `module.hot.accept` to patch style tags when CSS dependencies
    are updated.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the next stage of our practical example, we will be taking the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Start by installing both loaders with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, update the configuration file, `webpack.config.js`, to make use of the
    loaders:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Hot loading style sheets is as easy as importing them into the module, as you
    can see from the text in bold in the previous configuration example and the directory
    structure example to follow.
  prefs: []
  type: TYPE_NORMAL
- en: 'Ensure that you organize the project files and directories, as shown, in the
    following structure:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Append the style sheet by adding a `body` style to style the background of
    the document body associated with it blue. Do this using the `styles.css` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'After that, we need to ensure the content is loaded to the `index.js` file
    correctly, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Now, when the style of the `body` tag background class is changed to red, the
    color change should be immediately noted without a page refresh, indicating the
    live nature of hot coding.
  prefs: []
  type: TYPE_NORMAL
- en: 'You should now make these changes to the background using `styles.css`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: This demonstrates, in a very simple way, how live code edits can be made. This
    was only a simple example, but it serves as a good introduction. Now, let's progress
    to something trickier—loaders and frameworks.
  prefs: []
  type: TYPE_NORMAL
- en: Other loaders and frameworks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The numerous loaders that are available and that we alluded to earlier make
    HMR interact more smoothly with a variety of frameworks and libraries. Some of
    the more useful ones are described here:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Angular HMR**: A simple change to your main `NgModule` file is all that''s
    required to have full control over the HMR APIs (does not require a loader).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**React Hot Loader**: This loader tweaks React components in real time.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Elm Hot Webpack Loader**: This loader supports HMR for the Elm programming
    language.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Vue** **Loader**: This loader supports HMR for Vue components out of the
    box.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We have gone through HMR and related loaders and frameworks but something we
    have yet to discuss—but relates to the content we have covered so far—is adding
    a utility. We will get to grips with that in the following section.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a utility
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this context, a utility means a file or module that is responsible for a
    related set of functions, designed to optimize, analyze, configure, or maintain.
    This is in contrast to an application, which tends to perform a task or set of
    tasks aimed directly at users. Therefore, you may think of a utility, in this
    context, as something that is part of the frontend but is hidden away in the background
    for background tasks.
  prefs: []
  type: TYPE_NORMAL
- en: 'To begin, add a utility file to the example project. Do this in `src/math.js`
    so that it exports two functions:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The first step will be to organize the project directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: The **project tree** shows how your files and folder should look and you will
    note some new additions in there, such as `math.js`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s now take a closer look at how `math.js` is coded:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: You'll see that they are simple-to-export functions; they will come to the fore
    later.
  prefs: []
  type: TYPE_NORMAL
- en: 'Also, make sure you set the Webpack mode to `development` in the configuration
    file, `webpack.config.js`, which ensures the bundle is not minified:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'With this in place, we next update the entry script to utilize one of these
    new methods and remove `lodash` for simplicity. This is done using the `src/index.js`
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: From the proceeding example, we can see that the `square` method was not imported
    from the `src/math.js` module. This function can be considered dead code—essentially,
    an unused export that can be dropped.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, run an `npm` build again to inspect the results:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Once that is done, locate the `dist/bundle.js` file—it should be somewhere
    on lines 90–100\. Search the file for code similar to the following example to
    follow this process:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: In this example, you will now see an `unused harmony export square` comment.
    Note that it is not being imported. It is, however, still included in the bundle
    for the time being.
  prefs: []
  type: TYPE_NORMAL
- en: 'ECMA scripting is not perfect, so it is important to provide hints to Webpack''s
    compiler about the purity of the code. The `packages.json` property will help
    with these side effects:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code doesn't contain side effects; therefore, the property should
    be marked as `false` to instruct Webpack to remove the unused exports.
  prefs: []
  type: TYPE_NORMAL
- en: In this context, a side effect is defined as a script that performs a special
    behavior when imported, as opposed to exposing more than one export, and so on.
    An example would be **polyfills**, which affect the global project and usually do
    not provide an export.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the event of the code having a side effect, an array can be provided as
    a remedy, such as in the following example:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: The array in this example accepts relative and absolute patterns.
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that any imported file is subject to tree shaking. For example, if `CSS-loader`
    is used to import a CSS file, it must be added to the side effects list to prevent
    it from being unintentionally dropped in production mode:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, `sideEffects` can also be set from the `module.rules` configuration
    option. So, we''ve queued up our dead code to be dropped by using the `import` and `export` syntax,
    but we still need to drop it from the bundle. To do that, set the `mode` configuration
    option to `production`. This is done by appending the configuration file, **`webpack.config.js`**,as
    follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: The `--optimize-minimize` flag can also be used to enable `TerserPlugin`. Now
    that we have understood that, we can run another `npm` build.
  prefs: []
  type: TYPE_NORMAL
- en: 'It will now be clear that the whole bundle is minified and mangled. A closer
    look reveals that the `square` function is missing; instead, you have a mangled
    cube function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: With minification and tree shaking, our bundle is now a few bytes smaller! While
    that may not seem like much in this contrived example, tree shaking can yield
    a significant decrease in bundle size when working on larger applications with
    complex dependency trees.
  prefs: []
  type: TYPE_NORMAL
- en: '`ModuleConcatenationPlugin` is needed for the tree shaking to work. It is added
    by using `mode: "production"`. If you are not using it, remember to add `ModuleConcatenationPlugin` manually.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following tasks must be done to take full advantage of tree shaking:'
  prefs: []
  type: TYPE_NORMAL
- en: Use the ES2015 module syntax (that is, `import` and `export`).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ensure no compilers transform your ECMAScript syntax into CommonJS modules.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add a `sideEffects` property to your `package.json` file.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use the `production` configuration option to enable various optimizations, including tree
    shaking and minification.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When it comes to tree shaking, it often helps to think of your application as
    a tree. In this analogy, the source code and libraries would be the green leaves
    and the living part of the tree, respectively. Dead code, however, would represent
    the dead leaves. Shaking that tree will remove the now defunct code.
  prefs: []
  type: TYPE_NORMAL
- en: This is especially relevant and worth considering when migrating. Given the
    changes in code deprecation between versions of Webpack, it is important to get
    your software working at its best before attempting anything like this. This will
    prevent very difficult bugs from developing.
  prefs: []
  type: TYPE_NORMAL
- en: Migration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Migration relates to moving from one version of Webpack to another. This usually
    involves upgrading to the latest version. It's something that, as a web developer,
    you may already know is tricky when dealing with other software in general, so
    this section will be an important one that perhaps you can refer back to when
    going through future development.
  prefs: []
  type: TYPE_NORMAL
- en: For the sake of providing a more detailed guide, a migration strategy for moving
    from Webpack 3.0 to Webpack 4.0 is included, so let's go through this now, before
    moving on to version 5.
  prefs: []
  type: TYPE_NORMAL
- en: Prerequisites when migrating to version 4 from version 3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are several prerequisites to go over before we begin migrating our project
    from Webpack version 3 to 4\. These involve the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Node.js
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The CLI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Plugins
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Modes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For developers using Node.js version 4 or lower, upgrading to Node.js version
    6 or higher is necessary. In terms of the command line, the CLI has moved to a
    separate package, called `webpack-cli`. You need to install it before using Webpack
    4.
  prefs: []
  type: TYPE_NORMAL
- en: 'When updating plugins, many third-party plugins need to be upgraded to their
    latest version to be compatible, so please be aware of that. It is also a good
    idea to peruse your project to find the ones that need updating. Also, be sure
    to add the new mode option to your configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Begin by setting the mode in your configuration to `production` or `development`,
    depending on the configuration type, as in the following code snippet, using `webpack.config.js`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'There is an alternative method, which can be done by passing the mode using
    the CLI, such as with the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding example shows the latter part of any Webpack command for the
    `production` mode made through the command line. The following example shows the
    same for the `development` mode:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'The next step is the removal of deprecated plugins; the plugins should be removed
    from your configuration file as they are default in production mode. The following
    example will show you how to make the edit in `webpack.config.js`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'The following example gives you a view of how this works in development mode.
    Note that the plugins are the default in development mode, again using `webpack.config.js`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'If that was done correctly, you will see that the depreciated plugins have
    been removed. Your configuration file, **`webpack.config.js`**, should look something
    like the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Also, `CommonChunkPlugin` was removed in this process with the `optimization.splitChunks`
    options offered as an alternative in Webpack 4.0.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are generating HTML from stats, `optimization.splitChunks.chunks: "all"`
    can now be used—this is the optimal configuration in most cases.'
  prefs: []
  type: TYPE_NORMAL
- en: 'There is also some work to be done regarding `import()` and CommonJS. When
    using `import()` to load any non-ESM scripts, the result has changed in Webpack
    4:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, you need to access the default property to get the value of `module.exports`.
    See the `non-esm.js` file here to see this in action:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: This is a simple JavaScipt function and you can replicate its contents to follow
    the demonstration and see how the results have changed.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next file is an **`example.js`** file. It can be called anything you want
    and you can perform any action you want. In this example, it is a simple `sayHello();`
    function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: These blocks show how to code simple functions with CommonJS. You should apply
    this convention to your existing code to ensure it doesn't break.
  prefs: []
  type: TYPE_NORMAL
- en: 'When using a custom loader to transform `.json` files, you now need to change
    the module type in `webpack.config.js`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Even when using `json-loader`, it can be removed; see the following example:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Once this is done, all of the required migration prerequisites will have been
    done. The next step is the automated updating process, which is built into Webpack.
  prefs: []
  type: TYPE_NORMAL
- en: Prerequisites when migrating to version 5 from version 4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This guide aims to help you migrate to Webpack 5 when using Webpack directly.
    If you are using a higher-level tool to run Webpack, please refer to this tool
    for migration instructions.
  prefs: []
  type: TYPE_NORMAL
- en: 'As explained in [Chapter 1](26d5b9c8-5d08-4cca-b0fb-63d0e715eba0.xhtml), *Introduction
    to Webpack 5*, Webpack 5 requires Node.js version 10.13.0 (LTS) to run; however,
    the use of a newer version can improve build performance even more:'
  prefs: []
  type: TYPE_NORMAL
- en: You should be sure to check related plugins and loaders for individual migration
    instructions through the author-provided copies, especially when upgrading across
    major versions. In such cases, be aware of deprecation warnings during the build.
    You can invoke Webpack this way to get stack traces for deprecation warnings to
    figure out which plugins and loaders are responsible. Webpack 5 will remove all
    the deprecated features. To proceed, there should be no deprecation warnings during
    the build.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Make sure you are using entry point information from stats. If you are using
    `HtmlWebpackPlugin`, you won't need to follow this step.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For builds that include static HTML or the creation thereof in some other way,
    you must ensure the use of entry points for the stats JSON file to generate any
    script and link any HTML tags. If this isn't possible, you should avoid setting
    the `splitChunks.chunks` key to `all` and putting any setting against the `splitChunks.maxSize`
    key. However, this is merely a workaround and can be considered less than ideal
    as a solution.
  prefs: []
  type: TYPE_NORMAL
- en: Be sure to set the mode to either `production` or `development` to make sure
    that corresponding mode defaults are set.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Also, be sure to update the following options to their newer version if you
    are using them at all:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we will need to test Webpack 5''s compatibility with your application.
    To do this, set the following options for your Webpack 4 configuration. If this
    works in Webpack 4 without any build errors, we will know whether any successive
    faults are unique to version 5\. This may sound tedious, but it eliminates recursive
    fault-finding:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: The preceding options are removed from the configuration in Webpack 5 and are
    set to `false` by default. Be sure to do this in your Webpack 4 test build, but
    they will need removing again in your version 5 build.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next is a simple and shorthand command-line execution to upgrade your Webpack
    version:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Now, we need to clean up our configuration.
  prefs: []
  type: TYPE_NORMAL
- en: It is advised that you change the `[hash]` placeholder in your configuration
    to `[contenthash]`. This has been proven to be more effective and can help to
    shore up your code.
  prefs: []
  type: TYPE_NORMAL
- en: If you happen to be using `pnp-webpack-plugin`, it is now supported by default
    in version 5 of Webpack but it will now need to be removed from your configuration
    schema.
  prefs: []
  type: TYPE_NORMAL
- en: '`IgnorePlugin` now takes an option object, so it will need to be rewritten
    if you are using it as a regular expression, such as in the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'For developers using WASM via `import`, you should enable the deprecated specification
    by setting the `experiments.syncWebAssembly` variable to `true`. This will set
    the same behavior in Webpack 5 as in Webpack 4. Once you have migrated to Webpack
    5, you should now change the value of the experiment to use the latest specifications
    for WASM—`{ asyncWebAssembly: true, importAsync: true }`.'
  prefs: []
  type: TYPE_NORMAL
- en: You should also take care when using a custom configuration to replace the `name`
    value with `idHint`.
  prefs: []
  type: TYPE_NORMAL
- en: In Webpack 5, named exports from JSON modules are not supported and you will
    get a warning. To import anything this way, you should do so from `package.json`
    with `const[version]=package;`.
  prefs: []
  type: TYPE_NORMAL
- en: It is now good practice to clean up the build code. Part of this means closing
    the compiler when using `const compiler =webpack(...);`. This is done with `compiler.close();`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once you run a build, there may be a few issues that develop. For instance,
    the schema validation could fail, the Webpack could exit with an error, or there
    could be build errors, build warnings, or deprecation warnings.
  prefs: []
  type: TYPE_NORMAL
- en: In each case, there will be either a breaking change note or an error message
    with instructions available through the command line, as usual.
  prefs: []
  type: TYPE_NORMAL
- en: In the case of deprecation warnings, there may be a lot of them for the time
    being as Webpack 5 is new and plugins need time to catch up with core changes.
    They should be ignored until each release is out of beta testing as a matter of
    good practice.
  prefs: []
  type: TYPE_NORMAL
- en: You can hide deprecation warnings by running the node with the `--no-deprecation`
    flag—for example, `node --no-deprecation`.
  prefs: []
  type: TYPE_NORMAL
- en: Plugin and loader contributors should follow the warning advice in the deprecation
    messages to improve their code.
  prefs: []
  type: TYPE_NORMAL
- en: 'You may also want to turn off the ES2015 syntax in the runtime code, if necessary.
    By default, Webpack''s runtime code uses ES2015 syntax to build smaller bundles.
    If your build targets environments that don''t support this syntax, such as with
    IE 11, you will need to set `output.ecmaVersion: 5` to revert to ES5 syntax.'
  prefs: []
  type: TYPE_NORMAL
- en: Dealing with legacy issues will be the biggest hurdle when migrating upwards
    and this rule is not exclusive to Webpack 5\. Webpack 5 has some features that
    will make the experience of the legacy platform user more palatable. One method
    to consider in your project planning is persistent caching.
  prefs: []
  type: TYPE_NORMAL
- en: Enabling persistent caching
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Caching is, of course, the intermediate storage of data to improve loading times
    and speed up performance. Persistent caching is something that is very common
    in database-driven projects, where the data pulled from the database is cached
    so the user has a copy of earlier versions. This can then be loaded all at once
    without causing too much demand from the database as data will be delivered at
    a slower rate than server-based file entries.
  prefs: []
  type: TYPE_NORMAL
- en: With Webpack 5, an application can utilize the same operation and improve the
    speed of loading for the user if the build changes.
  prefs: []
  type: TYPE_NORMAL
- en: First, note that persistent caching is not enabled by default. You have to opt
    in to using it. This is because Webpack 5 favors safety over performance. It is
    probably not the best idea to enable features that improve performance by even
    a small amount but break your code in any small way. At least as a default, this
    feature should remain disabled.
  prefs: []
  type: TYPE_NORMAL
- en: Serialization and deserialization would work by default; however, the developer
    may have trouble with cache invalidation.
  prefs: []
  type: TYPE_NORMAL
- en: Cache invalidation is when something changes in your application intentionally,
    such as when the developer changes the contents of a file; in this case, Webpack
    would regard the caching of the old content as invalid.
  prefs: []
  type: TYPE_NORMAL
- en: Webpack 5 does this by tracking `fileDependencies`, `contextDependencies`, and
    `missingDependencies` for each module used. Webpack then creates a filesystem
    schematic from this. The filesystem is then cross-referenced against the recorded
    copy and this, in turn, triggers a rebuild of that module.
  prefs: []
  type: TYPE_NORMAL
- en: The cache entry of the output bundle then has a tag generated for it; this is
    essentially a hash of all contributors. A match between the tag and the cache
    entry indicates content that can be used by Webpack for bundling.
  prefs: []
  type: TYPE_NORMAL
- en: Webpack 4 used this same process for in-memory caching and it will work in Webpack
    5 without extra configuration unless persistent caching is enabled.
  prefs: []
  type: TYPE_NORMAL
- en: You also need to invalidate cache entries when you upgrade a loader or plugin
    with `npm`, change a configuration, or change a file that is to be read in the
    configuration, or when upgrading a dependency that is used in the configuration,
    when passing difference command-line arguments to run a build, or when you have
    a custom build script and make changes to it.
  prefs: []
  type: TYPE_NORMAL
- en: As Webpack 5 cannot handle these exceptions out of the box, persistent caching
    is made an opt-in feature for safety in regards to securing the integrity of your
    application.
  prefs: []
  type: TYPE_NORMAL
- en: Updating Webpack
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are numerous steps that must be taken to ensure the update of Webpack
    behaves correctly. The steps that concern our example are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Upgrade and install.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add the modes to your configuration files.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add fork checkers.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Manually update relevant plugins, loaders, and utilities.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reconfigure `uglify`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Trace any further errors and make the update.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s go over each step in detail and explore what exactly is going on with
    the command line. It should help you to understand the procedure a lot better:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The first thing we need to do is upgrade Webpack and install `webpack-cli`.
    This is done in the command line, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding example shows how this is done using `yarn`; it will also give
    a version check. This should also be visible in the `package.json` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'Once this is done, the respective modes should be added to `webpack.config.dev.js` and `webpack.config.prod.js`.
    See the following `webpack.config.dev.js` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'A similar thing is done with the production configuration, as we have two configuration
    files here for each mode. The following shows the contents of the `webpack.config.prod.js` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: We are dealing with two versions—the older version (3) and the newer version
    (4). If this was done manually, you might first make a **fork** of the original
    version. The term fork refers to the icon usually associated with this operation,
    which represents one line splitting away from the other to appear as a two-pronged
    fork. So, the term fork has come to mean a subversion. Fork checkers will automatically
    check each version for differences that need to be updated as part of the operation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, go back to the command line to add the following fork checkers:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'The following should be seen in the `package.json` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code block shows that the fork checker has been installed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we need to update `html-webpack-plugin` with the command line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: '`package.json` should now show the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: Now, we need to adjust the plugin order in the `webpack.config.dev.js` and `webpack.config.prod.js` files.
  prefs: []
  type: TYPE_NORMAL
- en: 'You should take these steps to ensure that `HtmlWebpackPlugin` comes before **`InterpolateHtmlPlugin`** and `InterpolateHtmlPlugin` are
    declared, as in the following example:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'Also, be sure to update `ts-loader`, `url-loader`, and `file-loader` in the
    command line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'The `package.json` file holds information on the versions used, in terms of
    the previously mentioned loaders, and should look as in the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'If you''re using **React**, then you will need to update the development utilities,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'Again, the `package.json` file will hold the version information for the React utility
    in use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: '`extract-text-webpack-plugin` should be substituted with **`mini-css-extract-plugin`. **'
  prefs: []
  type: TYPE_NORMAL
- en: 'Take note that `extract-text-webpack-plugin` should be removed altogether while
    adding and configuring `mini-css-extract-plugin`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'The `package.json` file with version settings for the plugin should look as
    in the following for this example:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'With all this done, we should then take a look at the production mode configurations.
    This is done with the following `webpack.config.prod.js` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: We can see some differences in `webpack.config.prod.js` between versions. The
    preceding gives you a look at the format for configuration when in version 4.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, be sure to update and reconfigure `uglifyjs-webpack-plugin` using the
    command line and the `package.json` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'In the interests of prudence, we will also show the version settings for the
    `uglify` plugin here. Apply these using `package.json`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'The next and final step is the configuration for production mode using `webpack.config.prod.js`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: Once this is all done, you should be done with the updating process. However,
    you may get a unique deprecation error, which means you will need to trace these
    errors using the error message then update any further Webpack plugins as required.
    This will especially be the case if you are working with custom plugins or loaders.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter took a deep look into code debugging and we discussed HMR and other
    debugging techniques. You should now have a firm grasp of what tools and utilities
    can be used to enhance debugging procedures, including the use of `node nightly`
    to perform code inspections. We then delved into HMR, a salient and exciting feature
    of Webpack. We saw how live edits can be made of modules and style sheets, and
    even covered issues with migration. We then segued into adding utilities, which
    is an essential part of any upgrade. From there, we took you through version migration—namely,
    from version 3 to version 4—and the steps to follow to do so. Furthermore, we
    showed you how to migrate from version 4 to version 5\. This section concluded
    with a lengthy tutorial on updating a command-line upgrade to a manual alteration
    of some of the trickier elements.
  prefs: []
  type: TYPE_NORMAL
- en: You should now be confident in your debugging and upgrading skills, which puts
    you on solid ground for the next chapter. In the next chapter, we will get into
    some heavy live coding, customization, and manual bundling, which will excite
    the pants off you, no doubt!
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This chapter covered some complex issues that could be better understood through
    further reading. The following is a list of subjects and where to find the corresponding
    content alluded to earlier in this chapter, where relevant:'
  prefs: []
  type: TYPE_NORMAL
- en: Debugging optimization bailouts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Issue 6074—add support for more complex selectors for `sideEffects`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, try your hand at some of the following questions related to this chapter.
    You will find the answers in the *Assessment* section in the back matter of this
    book:'
  prefs: []
  type: TYPE_NORMAL
- en: What does HMR stand for?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What does React Hot Loader do?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What interface is Webpack updated through?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What feature of Node v6.3.0+ allows debugging via Chrome DevTools?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When migrating from Webpack version 3 to version 4 and using a custom loader
    to transform `.json` files, what must you also change?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How can a side effects list help development?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Where should deprecated plugins be removed from in production mode?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
