- en: Chapter 5. Connecting your Application to CouchDB
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have the framework for our application built, let's talk about what
    needs to happen for our application to communicate with CouchDB.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'We''ll talk through the following points in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Investigate the quick and easy way to interact with CouchDB, and talk about
    its shortcomings
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Look at existing libraries to ease in PHP and CouchDB development
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Install Sag and integrate it into Bones
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Have our signup form create CouchDB documents and verify with Futon
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Before we get started
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we do anything, let's create a database that we'll use from this point
    forward for Verge. As we've done before, let's create a database using `curl`.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — creating a database for Verge with curl
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We created a database using `curl` in [Chapter 3](ch03.html "Chapter 3. Getting
    Started with CouchDB and Futon"), *Getting Started with CouchDB and Futon*. Let's
    quickly recap how to use a `PUT` request to create a new database in CouchDB.
  prefs: []
  type: TYPE_NORMAL
- en: Create a new database by running the following command in **Terminal**. Make
    sure to replace `username` and `password` with the database administrator user
    that you created in [Chapter 3](ch03.html "Chapter 3. Getting Started with CouchDB
    and Futon").
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '**Terminal** will respond with the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We used **Terminal** to trigger a `PUT` request, using `curl`, to create a database
    through CouchDB's **RESTful JSON API**. We passed `verge` as the name of the database
    at the end of CouchDB's root URL. When the database was successfully created,
    we received a message that everything went okay.
  prefs: []
  type: TYPE_NORMAL
- en: Diving in head first
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we'll create some quick and dirty code to communicate with
    CouchDB, and then talk about some of the issues with this approach.
  prefs: []
  type: TYPE_NORMAL
- en: Adding logic to our signup script
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the previous chapter, we created a form in `views/signup.php`, with the
    following functionality:'
  prefs: []
  type: TYPE_NORMAL
- en: We asked the user to enter a value for name in a textbox
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We took the value entered in the form and posted it to the signup route
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We used Bones to grab the value passed by the form and set it to a variable
    called `message` so that we could display it on the home page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We rendered the home page and displayed the `message` variable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This was a big undertaking on our part, but we weren't able to save anything
    for later reading or writing.
  prefs: []
  type: TYPE_NORMAL
- en: Let's take this form a few steps further and ask the user to enter both a name
    and an e-mail address and then save these fields as a document in CouchDB.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — adding an e-mail field to the signup form
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's add an input field so users can enter an e-mail address into the `views/signup.php`
    page.
  prefs: []
  type: TYPE_NORMAL
- en: Open `signup.php` in your text editor (`/Library/Webserver/Documents/verge/views/signup.php`)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the highlighted code to add a label and input field for the e-mail addresses:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We added an additional field to our signup form that will accept the input for
    an e-mail address. By adding the `email` field to this form, we will be able to
    access it on form submission and eventually save it as a CouchDB document.
  prefs: []
  type: TYPE_NORMAL
- en: Using curl calls to post data to CouchDB
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We've used `curl` through **Terminal** in previous chapters to interact with
    CouchDB. You'll be happy to know that you can also use `curl` through PHP. In
    order to represent the data in CouchDB, we'll first need to get our data into
    a JSON format.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — creating a standard object to encode to JSON
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's represent a simple object in the form of JSON, so that CouchDB can interpret
    it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `index.php` in your text editor, and add the following code into the `/signup
    POST` route:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We added the code to create an object to store the specifics of a user. We used
    an instance of `stdClass` and called it `$user. stdClass` is PHP's generic empty
    class, which is useful for anonymous objects, dynamic properties, and hitting
    the ground running. Because documents require that a type should be set to classify
    the documents, we are setting this document's type to `user`. We then took the
    values that were submitted from the form and saved each of them as properties
    of the `$user` class. Finally, we used a PHP function called `json_encode` to
    take the object and create a JSON representation of it.
  prefs: []
  type: TYPE_NORMAL
- en: Let's test this out.
  prefs: []
  type: TYPE_NORMAL
- en: Open up your browser to `http://localhost/verge/signup`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter in `John Doe` into the **Name** textbox and `<[john@example.com](mailto:john@example.com)>`
    into the **Email** textbox.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Submit**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Your browser will display the following:![What just happened?](graphics/3586_05_005.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Perfect! Our form was submitted properly, and we were able to represent `stdClass
    $user` in JSON at the top of our website.
  prefs: []
  type: TYPE_NORMAL
- en: Committing it to Git
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Let's commit our code to Git so that we can look back at this code down the
    road.
  prefs: []
  type: TYPE_NORMAL
- en: Open **Terminal**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Type the following command to change directories to our working directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Give Git a description of what we''ve done since our last commit:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Now that we have our data represented in JSON, let's use a `curl` statement
    to create a CouchDB document using PHP.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — creating a CouchDB document with PHP and curl
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We've been using `curl` through the command line since the beginning of this
    book, but this time, we are going to trigger a `curl` statement using PHP.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start by initializing a `curl` session, executing it, and then closing
    it. Open `index.php` in your text editor, and add the following code into the
    `/signup POST` route:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s tell `curl` what to actually execute. We do this with an `options`
    array. Add the following code between the `curl_init()` and the `curl_exec` statements:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We initialized a `curl` session using PHP by first setting a variable `$curl`
    with the `curl_init()` resource. We then created an array with a variety of keys
    and values. The reason we picked all of these options isn''t too important for
    us now, but I would like to highlight the first three objects:'
  prefs: []
  type: TYPE_NORMAL
- en: We are setting the `CURLOPT_URL` option to the URL of the database that we want
    to save the document into. Remember that this statement will use CouchDB's RESTful
    JSON API to create a document inside of the `verge` database.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We then set `CURLOPT_POSTFIELDS` to the JSON encoded value of our `$user`. This
    is taking our JSON string and including it as data along with the URL.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Finally, we are setting the `CURLOPT_HTTPHEADER` to `array ("Content-Type:
    application/json")`, so that we can make sure that `curl` knows that we are passing
    a JSON request.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'With our options array set, we need to tell our `curl` instance to use it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'We then execute and close `curl` with the following two lines of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: With this code in our application, we should be able to submit our form and
    have it posted to CouchDB. Let's test it out.
  prefs: []
  type: TYPE_NORMAL
- en: Open your browser to `http://localhost/verge/signup`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `John Doe` into the **Name** textbox and `<[john@example.com](mailto:john@example.com)>`
    into the **Email** textbox.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Submit**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Your browser will display the following:![What just happened?](graphics/3586_05_005.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: That worked well without any errors, just as before. But this time, a CouchDB
    document should have been created. Let's check that the document was created properly
    by using Futon.
  prefs: []
  type: TYPE_NORMAL
- en: Open your browser to `http://localhost:5984/_utils/database.html?verge`. This
    direct link will show you the verge database. You'll see that there's a new document
    in here! Keep in mind that your `ID` and `rev` will be different from mine:![What
    just happened?](graphics/3586_05_010.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the document so that you can see the details.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The data in your document should match up to the information that we passed
    in using our `curl` session. Notice that `type, email`, and `name` were all set
    properly, and that CouchDB set `_id` and `_rev` for us.![What just happened?](graphics/3586_05_015.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Committing it to Git
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Let's commit our code to Git so that we can refer back to this code in the future.
  prefs: []
  type: TYPE_NORMAL
- en: Open **Terminal**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Type the following command to change directories to our working directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Give Git a description of what we''ve done since our last commit:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: We just looked at one of the simplest ways to create a CouchDB document with
    PHP. However, we need to evaluate if the code we just wrote is sustainable and
    a smart way for us to develop our application.
  prefs: []
  type: TYPE_NORMAL
- en: Is this technique good enough?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Tough question. Technically, we could build out our application this way, but
    we would need to add a lot more code and spend the rest of the book refactoring
    our calls to `curl` until it worked perfectly. Then, we would need to spend a
    ton of time refactoring our calls into a simple library so that things would be
    easier to fix. In short, this technique won't work because we want to focus on
    building our application, instead of sorting out all of the communication issues
    between PHP and CouchDB. Luckily, there are a variety of CouchDB libraries that
    we can use to simplify our development process.
  prefs: []
  type: TYPE_NORMAL
- en: Available CouchDB libraries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are a variety of libraries that can make our lives easier when developing
    with PHP and CouchDB. All of the libraries are open source projects, which is
    great! But, some of these libraries have not been actively worked on to support
    the newer versions of CouchDB. Therefore, we will need to be selective with the
    libraries we choose to work with.
  prefs: []
  type: TYPE_NORMAL
- en: 'A list of some of the PHP and CouchDB libraries can be seen here: [http://wiki.apache.org/couchdb/Getting_started_with_PHP](http://wiki.apache.org/couchdb/Getting_started_with_PHP),
    and there are a variety of others hosted on GitHub that require a bit more digging.'
  prefs: []
  type: TYPE_NORMAL
- en: Each library has strengths, but because simplicity is the key concept of Bones,
    it makes sense that we should also strive for simplicity in our PHP library. With
    that being said, our best solution is called **Sag**.
  prefs: []
  type: TYPE_NORMAL
- en: Sag
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sag is a great PHP library for CouchDB created by Sam Bisbee. Sag's guiding
    principle is simplicity, creating a powerful interface with little overhead that
    can be easily integrated with any application structure. It does not force your
    application to use a framework, special classes for documents, or ORM, but you
    still can if you want to. Sag accepts the basic PHP data structures (objects,
    strings, and so on) and returns either raw JSON or the response and the HTTP information
    in an object.
  prefs: []
  type: TYPE_NORMAL
- en: 'I''ll walk you through installation and the basics of Sag''s functionality,
    but you can also visit Sag''s website at: [http://www.saggingcouch.com/](http://www.saggingcouch.com/)
    for examples and documentation.'
  prefs: []
  type: TYPE_NORMAL
- en: Downloading and setting up Sag
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Sag is pretty unobtrusive and will fit right into our current application structure.
    All we need to do is use Git to grab Sag from its GitHub repository and place
    it in our `lib` directory.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — using Git to install Sag
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Git makes setting up third party libraries really easy and allows us to update
    to the new versions when they are available.
  prefs: []
  type: TYPE_NORMAL
- en: Open **Terminal**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Type the following command to make sure that you are in the working directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Add Sag to our repository using Git:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We used Git to add Sag into our project using `git submodule add`, and then
    we initialized the submodule by typing `git submodule init`. Git's submodules
    allow us to have a full-fledged Git repository living inside of our repository.
    Any time a new release is made to Sag, you can run `git submodule update`, and
    you will receive the latest and greatest code.
  prefs: []
  type: TYPE_NORMAL
- en: Adding Sag to Bones
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In order to use Sag, we'll add a few lines into `Bones` to make sure that our
    library can see and utilize it.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — adding Sag to Bones
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Enabling and setting up Sag to work with `Bones` is extremely easy. Let's walk
    through it together!
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `lib/bones.php` inside of our working directory, and add the following
    line to the top of our class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'We need to make sure that Sag is ready and available on each request. Let''s
    do this by adding a new variable to `Bones` called `$couch`, and setting it in
    our `__construct` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We made sure that `Bones` could access and use Sag by using `require_once` to
    load the Sag resources. We then made sure that each time `Bones` is constructed,
    we would define the database server and port and set the database that we want
    to use.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Notice that we don't need any credentials to interact with the `Verge` database
    because we haven't put any permissions on this database yet.
  prefs: []
  type: TYPE_NORMAL
- en: Simplifying our code with Sag
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: With Sag included in our application, we can simplify our database calls, hand
    off the handling and exception handling to Sag, and focus on building our product.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — creating a document with Sag
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have Sag available and ready to use anywhere in our application,
    let's refactor the saving of the user class that we placed in the `/signup post`
    route.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `index.php`, and remove all of the extra code that we added in previous
    sections so that our `/signup post` route looks similar to the following code
    snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We used Sag to create a post to our CouchDB database using substantially less
    code! Sag's post method allows you to pass data with it, so it's really easy to
    trigger.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s quickly go through the signup process again:'
  prefs: []
  type: TYPE_NORMAL
- en: Open up your browser to `http://localhost/verge/signup`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter in a new name into the **Name** textbox and a new e-mail into the **Email**
    textbox.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Submit**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'A new document was created in CouchDB, so let''s check Futon to make sure it''s
    there:'
  prefs: []
  type: TYPE_NORMAL
- en: Open your browser to `http://localhost:5984/_utils/database.html?verge`, to
    look at the verge database.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the second document in the list.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Looking at the details of this new document, you'll see that it has the same
    structure as the first one that we made.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Perfect! The result ended up exactly as it did with our quick and dirty curl
    script, but our code is much more simplified, and Sag is handling a lot for us
    behind the scenes.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We are currently not catching or handling any errors. We'll talk more about
    how to handle these in future chapters. Thankfully, CouchDB handles errors in
    a friendly manner, and Sag has made sure to make it easy to track down problems.
  prefs: []
  type: TYPE_NORMAL
- en: Adding more structure
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It's great that we can create documents so easily, but it's also important that
    we have a strong structure for our classes, allowing us to stay organized.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — including the classes directory
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order for us to use our classes, we'll need to add some code to `Bones` so
    that we can automatically load class names as they are used. This will achieve
    that, so we don't have to continuously include more files as we add new classes.
  prefs: []
  type: TYPE_NORMAL
- en: Add the following code to `lib/bones.php:`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We added a `__autoload` function to our `Bones` library that will give PHP a
    last attempt to load a class name if it can't find the class. The `__autoload`
    function is passed the `$classname`, and we use the `$classname` to find the file
    of the named class. We are making the requested `$classname` lowercase using the
    `strtolower` function so that we can find the named file. We then added the root
    of the working directory with the `ROOT` constant and the `classes` folder.
  prefs: []
  type: TYPE_NORMAL
- en: Working with classes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now that we have the ability to load classes, let's create some! We'll start
    by creating a base class from which all other classes will inherit properties.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — creating a Base object
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will create a base class called `base.php` that all of our
    classes will inherit.
  prefs: []
  type: TYPE_NORMAL
- en: Let's start by creating a new file called `base.php`, and placing it in the
    classes folder inside of the working directory (`/Library/Webserver/Documents/verge/classes/base.php`)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create an abstract class with a `__construct` function in `base.php`. On `__construct`
    of the object, let's take `$type` as an option, and set it to a protected variable
    also called `$type`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: In order to facilitate the getting and setting of variables in our classes later,
    let's add the `__get()` and `__set()` functions right after the `__construct`
    function.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Each time we save our object to Couch DB, we'll want to be able to represent
    it in the JSON string. So, let's create a helper function called `to_json()` that
    will convert our object into the JSON format.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We created a base class called `base.php` that will serve as the basis for all
    other classes that we build. Inside the class, we defined a protected variable
    called `$type`, which will store the classification of the document such as `user`
    or `post`. Next, we added a `__construct` function that will be called each time
    the object is created. This function accepts the option `$type`, which we will
    set in each of the classes that extend on `Base`. We then created the `__get`
    and `__set` functions. `__get` and `__set` are called **magic methods** and will
    allow us to use `get` and `set` protected variables without having any extra code.
    Lastly, we added a function called `to_json` that uses `get_object_vars`, along
    with `json_encode`, to represent our object in a JSON string. Doing little things
    like this in our base class will make our lives much easier down the road.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — creating a User object
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have our `Base` class created, let's create a `User` class that
    will house the properties and functions for all things related to users.
  prefs: []
  type: TYPE_NORMAL
- en: Create a new file called `user.php`, and place it in the `classes` folder along
    with `base.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's create a class that extends our `Base` class.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s add the two properties that we know we need so far: `name` and `email`,
    into our `User` class.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Let's add a `__construct` function that will tell our `Base` class that our
    document type is `user` on creation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We created a simple class called `user.php` that extends `Base`. **Extends**
    means that it will inherit the properties and functions that are available so
    that we can take advantage of them. We then included two protected properties
    called `$name` and `$email`. Finally, we created a `__construct` function. The
    construct in this instance tells the parent (which is our `Base` class) that the
    type of the document is `user`.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action — plugging the User object in
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With our new `User` object in our system, we can easily plug it into our application
    code, and we should be up and running.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open up the `index.php` file, and change `stdClass` to `User()`. While we are
    at it, we can also remove `$user->type = ''user''` because that''s now handled
    in our class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Adjust the Sag `post` statement so that we can pass our class in the JSON format:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We replaced the instance of `stdClass` with `User()`. This will give us complete
    control over getting and setting the variables. We then removed `$user->type =
    'user'` because the `__construct` functions in our `User` and `Base` objects have
    taken care of that. Finally, we added the `to_json()` function that we created
    earlier so that we could send our object as a JSON encoded string.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Sag could technically handle an object by itself with JSON, but it's important
    that we're able to retrieve a JSON string from our object so that you can interact
    with CouchDB in any way you want. It's possible that some day in the future you
    may need to come back and rewrite everything using `curl` or another library.
    So, it's important that you know how to represent your data in JSON.
  prefs: []
  type: TYPE_NORMAL
- en: Testing it out
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let''s quickly go through our signup process again to make sure that everything
    is still working:'
  prefs: []
  type: TYPE_NORMAL
- en: Open your browser to `http://localhost/verge/signup`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter in a new name into the **Name** textbox and a new e-mail into the **Email**
    textbox.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Submit**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'A new document should have been created in CouchDB. Let''s check Futon to make
    sure it''s there:'
  prefs: []
  type: TYPE_NORMAL
- en: Open up your browser to `http://localhost:5984/_utils/database.html?verge` to
    look at the verge database.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the third document in the list
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Looking at the details of this new document, you'll see that it has the same
    structure as the first two that we made.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Perfect! Everything worked just as we had it before, but we're now using a more
    elegant solution that we'll be able to build on top of in future chapters.
  prefs: []
  type: TYPE_NORMAL
- en: Committing it to Git
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let''s commit the code to Git so we''ve tracked our progress so far:'
  prefs: []
  type: TYPE_NORMAL
- en: Open **Terminal**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Type the following command to change directories to our working directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: We've added some new files in our `classes` folder. So, let's make sure we add
    those files to Git.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Give Git a description of what we''ve done since our last commit:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: By using the `classes/* syntax`, we are telling Git to add every file inside
    of the classes folder. This is handy when you've added multiple files and don't
    want to add each file individually.
  prefs: []
  type: TYPE_NORMAL
- en: Wrapping up
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We''ve completed the code for this chapter. It''s always good practice to push
    your code to GitHub once in a while. In fact, when you are working with multiple
    developers, it''s crucial. I won''t remind you to do this any more in this book.
    So, make sure you do it often:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: This line of code reads like a sentence if you add just a few words in between.
    The sentence is telling Git to `push` to the `origin` (which we have defined as
    GitHub), and we want to send the `master` branch.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I hope you enjoyed this chapter. It's fun when all of these technologies work
    together and allow us to easily save things to CouchDB.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s recap what we talked about in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: We looked at several different ways we could talk to CouchDB with PHP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We tied Sag into Bones
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We built an object-oriented class structure that will save us a lot of headaches
    down the road
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We tested to make sure that when we submitted our signup form, a CouchDB document
    was created
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the next chapter, we are going to actively look at some of the great functionality
    that CouchDB already has plugged in for our users and how we can use CouchDB to
    build out the standard signup and login processes that most applications have.
    Stretch your typing fingers, and get yourself a nice, big cup of coffee as we're
    about to have some real fun.
  prefs: []
  type: TYPE_NORMAL
