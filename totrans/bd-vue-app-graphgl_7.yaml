- en: Transforming Your App into a PWA and Deploying to the Web
  prefs: 
  - PREF_H1
  type: TYPE_NORMAL
- en: When we are done coding, it's time to finish our application and make it ready
    to be released. Now that our custom chat application is working with the Amplify
    services for the backend and Quasar and Vue for the frontend, we are ready to
    get up and running on the web.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you will learn how to transform your application into a **Progressive
    Web App** (**PWA**), add some events on the service worker to notify the user
    of new versions of your application, create a custom banner for installation on
    iOS devices, and finally deploy the application.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, in this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Transforming the application into a PWA
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating the application update notification
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a custom PWA installation notification on iOS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating the production environment and deploying
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will be using **Node.js**, **AWS Amplify**,and **Quasar
    Framework**.
  prefs: []
  type: TYPE_NORMAL
- en: 'Attention, Windows users! You need to install an `npm` package called `windows-build-tools`
    to be able to install the required packages. To do it, open PowerShell as an administrator
    and execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '`> npm install -g windows-build-tools`'
  prefs: []
  type: TYPE_NORMAL
- en: 'To install **Quasar Framework**, you need to open the Terminal (macOS or Linux)
    or the Command Prompt/PowerShell (Windows) and execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'To install **AWS Amplify****,** you need to open the Terminal (macOS or Linux)
    or the Command Prompt/PowerShell (Windows) and execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Transforming the application into a PWA
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To achieve the best experience for an application on the web right now, you
    need to have a **PWA**, where you can make your app cache certain parts of your
    code, work offline, receive push notifications, and so much more.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, you will learn how to transform your **Single-Page Application**
    (**SPA**) into a PWA and reconfigure the Amplify CLI to work with the new configuration.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The prerequisite for this recipe is Node.js 12+.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Node.js global objects that are required are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`@aws-amplify/cli`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@quasar/cli`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To start the transformation of our project into a PWA, we will continue with
    the project that was created in *Chapter 6, Creating Chat and Message Vuex, Pages,
    and Routes*.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'It''s time to transform our application into a PWA before making it available
    in the production environment. Follow these steps to add the PWA mode into Quasar:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to add the PWA mode to the Quasar application. To do it, in
    the project folder, open the Terminal (macOS or Linux) or the Command Prompt/PowerShell (Windows)
    and execute the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Open the `quasar.conf.js` file in the project root folder, and find the `pwa`
    property.  Remove the `workboxPluginMode` and `workboxOptions` properties from
    the JavaScript object, and add the `cleanupOutdatedCaches`, `skipWaiting`, and
    `clientsClaim` properties, defined as `true`. Finally, on the `manifest` property,
    change `name`, `short_name`, and `description` to match those for your application,
    as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Now it''s time to change the configuration of your Amplify CLI to the new configuration. To
    do so, in the project folder, open the Terminal (macOS or Linux) or the Command
    Prompt/PowerShell (Windows) and execute the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The CLI will ask you whether you want to change the project name. There is
    no need to change it, so press *Enter* to continue:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The CLI will ask you whether you want to change the project default editor. Select `Visual
    Studio Code` (or the default editor you are going to use in your project) and
    press *Enter* to continue:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The CLI will ask you whether you want to change the project application type. Select
    the `javascript` option and press *Enter* to continue:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The CLI will ask you whether you want to change the JavaScript framework of
    the project. Select `none` and press *Enter* to continue:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The CLI will ask you whether you want to change the project application source
    directory. There is no need to change it, so press *Enter* to continue:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The CLI will ask you whether you want to change the project application distribution
    directory; change the path to `dist/pwa`, then press *Enter* to continue:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The CLI will ask you for a `Build Command` option; change the command to `quasar
    build -m pwa`, then press *Enter* to continue:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The CLI will ask you for a `Start Command` option; change to `quasar dev -m
    pwa`, then press *Enter* to continue:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The CLI will ask you whether you want to update or remove the project configuration.
    Select `update` and press *Enter* to continue:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The CLI will ask you whether you want to use an AWS profile on this update.
    Type *Y* and press *Enter* to continue:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, select the profile you want to use and press *Enter* to continue:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we used the Quasar CLI to add the PWA development environment
    to our project, using the built-in `quasar -m add` command to add new development
    environments.
  prefs: []
  type: TYPE_NORMAL
- en: Then we configured the `quasar.conf.js` file to add new properties on the `pwa`
    property so we can add a better user experience within the application we will
    be deploying.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we changed the Amplify CLI configurations so it will use the new `pwa`
    environment as the build commands and distribution folder.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Find more information about developing a PWA with Quasar at [https://quasar.dev/quasar-cli/developing-pwa/introduction](https://quasar.dev/quasar-cli/developing-pwa/introduction).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Find more information on Amplify CLI at [https://docs.amplify.aws/cli](https://docs.amplify.aws/cli).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating the application update notification
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Keeping users notified about the updates of your application is a good practice
    because they will always know that the app is being maintained and improved.
  prefs: []
  type: TYPE_NORMAL
- en: Working with PWA, you have access to features such as creating a native mobile
    application, allowing the installation of your application on a mobile device.
  prefs: []
  type: TYPE_NORMAL
- en: When an update is released, we need to inform our users about it and update
    the currently installed code.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to use the service worker life cycle to register
    the application installation and use it to notify the user when there is a new
    update and apply the new updated version.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The prerequisite for this recipe is Node.js 12+.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Node.js global objects that are required are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`@aws-amplify/cli`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@quasar/cli`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To start adding custom update notifications, we will continue with the project
    that was created in *Transforming the application into a PWA *recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to add updates notification in our PWA:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `quasar.conf.js` file in the project root folder and find the `framework`
    property. Then for the `plugins` property, add the `''Notify''` string to the
    array so Quasar loads the `Notify` plugin on the boot of the application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Open the `register-service-worker.js` file in the `src-pwa` folder, and import
    the `Notify` plugin from Quasar:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Create an asynchronous function called `clearLocalCache`. Then create a constant
    called `cachedFiles` and define it as `await caches.keys()`; on the `cachedFiles`
    constant, execute an array `map` function with the argument being `file`; and
    inside the function, execute `await caches.delete(file)`. Finally, reload the
    application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Find the `updatefound` function, and create a constant called `installKey`
    and define it as `''chatAppInstalled''`. Then verify whether there is an item
    with the name of the constant you have created in the browser''s `localStorage` item.
    If the item is present, execute the `Notify.create` function, passing as an argument
    a JavaScript object, with the `color` property defined as `''dark''`, and `message`
    defined as the update message. If the `localStorage` item is not present, add
    to `localStorage` an item with the name of the `installKey` constant with a value
    of `''1''`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, find the `updated` function, and add a `Notify.create` function, passing
    a JavaScript object as an argument. In this object, add a `type` property defined
    as `''positive''`, a `message` property defined with the successfully updated
    message, a `caption` property with the instruction to refresh the application,
    and an `actions` property defined as an array. In the `actions` array, add a JavaScript
    object, with the `label` property defined as `''Refresh''`, the `color` property
    defined as `''white''`, and the `handler` property defined as the `clearLocalCache` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Here are the previews of the notifications:'
  prefs: []
  type: TYPE_NORMAL
- en: 'New update found:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](assets/8b444e5c-d289-4f6a-9d61-743880d74740.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Update applied:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](assets/665cbf77-cab3-4f35-b56d-c0a409ef6789.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First, we added the `Notify` plugin to the `quasar.conf.js` file plugins property,
    so the Quasar CLI could make it available to us on the execution runtime.
  prefs: []
  type: TYPE_NORMAL
- en: Then, in the `register-service-worker.js` file, we added the Notify plugin and
    created a custom cache clear function.
  prefs: []
  type: TYPE_NORMAL
- en: To the `updatefound` life cycle, we added an install verification so the new
    update notification will only be displayed for users that had the application
    installed on their browsers.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we added to the updated life cycle a notification for the update-finished
    process, and an action button for the user to clear the cache and restart the
    application.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Find more information about the Quasar Notify plugin at [https://quasar.dev/quasar-plugins/notify](https://quasar.dev/quasar-plugins/notify).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Find more information about the JavaScript cache interface at [https://developer.mozilla.org/en-US/docs/Web/API/Cache](https://developer.mozilla.org/en-US/docs/Web/API/Cache).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a custom PWA installation notification on iOS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Unfortunately, in iOS, the Safari browser engine does not provide a default
    PWA installation banner out of the box. In this case, we have to implement our
    own version of it. Using a community plugin named `a2hs.js` (for *Add to Home
    Screen*), we can enable a custom installation message to be displayed on iOS for
    our users.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to add the `a2hs.js` plugin in our project,
    and how to add it to the project boot sequence using the Quasar boot files.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The prerequisite for this recipe is Node.js 12+.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Node.js global objects that are required are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`@aws-amplify/cli`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@quasar/cli`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`a2h2.js`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To start with the development of the custom iOS PWA installation banner, we
    will continue with the project that was created in the *Creating the application
    update notification *recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the iOS platform on Safari, there is no installation banner for the PWA
    application in the browser. In these steps, we will add the `a2hs.js` plugin to
    add this missing feature:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to install the `a2js.js` plugin in our project. To do it, in
    the project folder, open the Terminal (macOS or Linux) or the Command Prompt/PowerShell (Windows)
    and execute the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `boot` folder, and then inside the `src` folder, create an `a2hs.js`
    file and open it. Next, import the `a2hs.js` plugin:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'To make a Quasar boot file to work, we need to create a default exported function.
    In this function, create a constant named `options` and define it as a JavaScript
    object, with the `brandName` property as the name of the application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, in the project root folder, open the `quasar.conf.js` file and find
    the `boot` property. In the array, add the `''a2hs''` string to make it available
    to the Quasar CLI and load the newly created boot file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is a preview of the alert that will pop up on an iOS device:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/e8ff8fe2-d307-4148-9223-38c1d933674c.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First, we added the `a2hs.js` plugin to the project with an `npm` installation.
    Then, we created an `a2hs.js` file in the `boot` folder to be used as a boot file
    on Quasar.
  prefs: []
  type: TYPE_NORMAL
- en: Then, in the newly created file, we imported the `a2hs.js` plugin and the application
    logo, followed by the instantiation of the `a2hs.js` plugin with custom options.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we added the `a2hs` boot file to the `quasar.conf.js` file's `boot`
    property.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can find more information about Quasar boot file structure at [https://quasar.dev/quasar-cli/boot-files](https://quasar.dev/quasar-cli/boot-files).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can find more information about `a2hs.js` at [https://github.com/koddr/a2hs.js/](https://github.com/koddr/a2hs.js/).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating the production environment and deploying
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After all the work has been done to get our application ready, it's time to
    build it as a production-ready distribution, by creating a production environment
    and deploying it to that environment. This new environment will have no data from
    the tests, and we will ensure that this environment will be used exclusively for
    the production state.
  prefs: []
  type: TYPE_NORMAL
- en: A production environment can be described as an environment where your application
    is placed for the final user, with code and a database that is ready to be fed
    with end user data.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to create a production environment with the
    Amplify CLI and how to define it as the default production environment on the
    Amplify console.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The prerequisite for this recipe is Node.js 12+.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Node.js global objects that are required are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`@aws-amplify/cli`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@quasar/cli`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To start with the creation of the production environment, we will continue with
    the project that was created in the *Adding a custom PWA installation notification
    on iOS *recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We need to get our application ready to be released to our users in a production
    environment. Follow these steps to create the production environment and define
    it as the default production environment for our application in the Amplify console:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the project root folder, open the Terminal (macOS or Linux) or the Command
    Prompt/PowerShell (Windows) and execute the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'The Amplify CLI will ask you whether you want to use an existing environment
    as the base; press *N* and *Enter* to continue:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Now the Amplify CLI will ask you for the name of the new environment; type
    `production` as the name and press *Enter* to continue:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'The CLI will ask you whether you want to use an AWS profile on this update;
    type *Y* and press *Enter* to continue:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Select the profile you want to use and press *Enter* to continue:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we need to push the changes made to the server; to do so, open the Terminal (macOS
    or Linux) or the Command Prompt/PowerShell (Windows), enter the project folder,
    and execute the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'The Amplify CLI will ask you whether you want to update the auto-generated
    GraphQl code; type *Y* and press *Enter *to continue:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'The Amplify CLI will ask you whether you want to overwrite the currently existing
    code; type *Y* and press *Enter* to continue:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Then publish your site to the production environment. To do this, open the Terminal (macOS
    or Linux) or the Command Prompt/PowerShell (Windows), enter the project folder,
    and execute the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'For the last part, we need to configure the application settings to use the
    new `production` environment we created. To do so, open the Terminal (macOS or
    Linux) or the Command Prompt/PowerShell (Windows), enter the project folder, and
    execute the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Open the side menu and click on the General link:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/b7081945-0d9a-4a5b-a68a-cc92f0dd841c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, on the App details card, in the top-right corner, click on the Edit button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/47f656dd-14e9-44e7-941f-753000177c57.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Then in Settings, open the Production environment selection box and select
    production:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/b1fba80a-b5bd-4cbf-a2e5-f12549521816.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Finally, to check whether the changes were properly saved, refresh the page
    and check the Settings section of the App details card:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/5cf19669-f198-4def-b807-dce6e093918b.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we started by adding a new environment to the local Amplify
    instance with the Amplify CLI and chose to use a brand new environment. Then we
    sent this new environment to the cloud, updating our local code base and finishing
    with the publication of the project using this new environment.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we went to the Amplify console to configure the production environment
    of the application as the new environment that we created.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Find more information on Amplify CLI at [https://docs.amplify.aws/cli](https://docs.amplify.aws/cli).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Find more information on the Amplify console at [https://aws.amazon.com/amplify/console/?nc1=h_ls](https://aws.amazon.com/amplify/console/?nc1=h_ls).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
