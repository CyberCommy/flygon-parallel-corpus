- en: Transforming Your App into a PWA and Deploying to the Web
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将您的应用程序转换为PWA并部署到Web
- en: When we are done coding, it's time to finish our application and make it ready
    to be released. Now that our custom chat application is working with the Amplify
    services for the backend and Quasar and Vue for the frontend, we are ready to
    get up and running on the web.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们编码完成时，是时候完成我们的应用程序并准备发布了。现在，我们的自定义聊天应用程序已经与后端的Amplify服务以及前端的Quasar和Vue一起运行，我们已经准备好在网络上运行。
- en: In this chapter, you will learn how to transform your application into a **Progressive
    Web App** (**PWA**), add some events on the service worker to notify the user
    of new versions of your application, create a custom banner for installation on
    iOS devices, and finally deploy the application.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习如何将您的应用程序转换为**渐进式Web应用程序**（**PWA**），在服务工作者上添加一些事件以通知用户您的应用程序的新版本，为iOS设备创建自定义横幅以进行安装，并最终部署应用程序。
- en: 'So, in this chapter, we will cover the following recipes:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在本章中，我们将涵盖以下配方：
- en: Transforming the application into a PWA
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将应用程序转换为PWA
- en: Creating the application update notification
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建应用程序更新通知
- en: Adding a custom PWA installation notification on iOS
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在iOS上添加自定义PWA安装通知
- en: Creating the production environment and deploying
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建生产环境和部署
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: In this chapter, we will be using **Node.js**, **AWS Amplify**,and **Quasar
    Framework**.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用**Node.js**，**AWS Amplify**和**Quasar Framework**。
- en: 'Attention, Windows users! You need to install an `npm` package called `windows-build-tools`
    to be able to install the required packages. To do it, open PowerShell as an administrator
    and execute the following command:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，Windows用户！您需要安装一个名为`windows-build-tools`的`npm`包，以便能够安装所需的软件包。要执行此操作，请以管理员身份打开PowerShell并执行以下命令：
- en: '`> npm install -g windows-build-tools`'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '`> npm install -g windows-build-tools`'
- en: 'To install **Quasar Framework**, you need to open the Terminal (macOS or Linux)
    or the Command Prompt/PowerShell (Windows) and execute the following command:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装**Quasar Framework**，您需要打开终端（macOS或Linux）或命令提示符/PowerShell（Windows）并执行以下命令：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'To install **AWS Amplify****,** you need to open the Terminal (macOS or Linux)
    or the Command Prompt/PowerShell (Windows) and execute the following command:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装**AWS Amplify**，您需要打开终端（macOS或Linux）或命令提示符/PowerShell（Windows）并执行以下命令：
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Transforming the application into a PWA
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将应用程序转换为PWA
- en: To achieve the best experience for an application on the web right now, you
    need to have a **PWA**, where you can make your app cache certain parts of your
    code, work offline, receive push notifications, and so much more.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在当前网络上获得应用程序的最佳体验，您需要有一个**PWA**，在其中可以使您的应用程序缓存代码的某些部分，离线工作，接收推送通知等等。
- en: In this recipe, you will learn how to transform your **Single-Page Application**
    (**SPA**) into a PWA and reconfigure the Amplify CLI to work with the new configuration.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，您将学习如何将您的**单页应用程序**（**SPA**）转换为PWA，并重新配置Amplify CLI以适应新的配置。
- en: Getting ready
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 做好准备
- en: The prerequisite for this recipe is Node.js 12+.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 此配方的先决条件是Node.js 12+。
- en: 'The Node.js global objects that are required are as follows:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 所需的Node.js全局对象如下：
- en: '`@aws-amplify/cli`'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@aws-amplify/cli`'
- en: '`@quasar/cli`'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@quasar/cli`'
- en: To start the transformation of our project into a PWA, we will continue with
    the project that was created in *Chapter 6, Creating Chat and Message Vuex, Pages,
    and Routes*.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始将我们的项目转换为PWA，我们将继续使用在*第6章，创建聊天和消息Vuex，页面和路由*中创建的项目。
- en: How to do it...
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'It''s time to transform our application into a PWA before making it available
    in the production environment. Follow these steps to add the PWA mode into Quasar:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在将应用程序发布到生产环境之前，是时候将我们的应用程序转换为PWA了。按照以下步骤将PWA模式添加到Quasar中：
- en: 'First, we need to add the PWA mode to the Quasar application. To do it, in
    the project folder, open the Terminal (macOS or Linux) or the Command Prompt/PowerShell (Windows)
    and execute the following command:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要将PWA模式添加到Quasar应用程序中。要做到这一点，在项目文件夹中，打开终端（macOS或Linux）或命令提示符/PowerShell（Windows），并执行以下命令：
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Open the `quasar.conf.js` file in the project root folder, and find the `pwa`
    property.  Remove the `workboxPluginMode` and `workboxOptions` properties from
    the JavaScript object, and add the `cleanupOutdatedCaches`, `skipWaiting`, and
    `clientsClaim` properties, defined as `true`. Finally, on the `manifest` property,
    change `name`, `short_name`, and `description` to match those for your application,
    as shown in the following code:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目根文件夹中打开`quasar.conf.js`文件，并找到`pwa`属性。从JavaScript对象中删除`workboxPluginMode`和`workboxOptions`属性，并添加`cleanupOutdatedCaches`，`skipWaiting`和`clientsClaim`属性，定义为`true`。最后，在`manifest`属性上，更改`name`，`short_name`和`description`以匹配您的应用程序，如下面的代码所示：
- en: '[PRE3]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Now it''s time to change the configuration of your Amplify CLI to the new configuration. To
    do so, in the project folder, open the Terminal (macOS or Linux) or the Command
    Prompt/PowerShell (Windows) and execute the following command:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在是时候将Amplify CLI的配置更改为新的配置。为此，在项目文件夹中，打开终端（macOS或Linux）或命令提示符/PowerShell（Windows），并执行以下命令：
- en: '[PRE4]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The CLI will ask you whether you want to change the project name. There is
    no need to change it, so press *Enter* to continue:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: CLI将要求您是否要更改项目名称。无需更改，因此按*Enter*继续：
- en: '[PRE5]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The CLI will ask you whether you want to change the project default editor. Select `Visual
    Studio Code` (or the default editor you are going to use in your project) and
    press *Enter* to continue:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: CLI将要求您是否要更改项目默认编辑器。选择`Visual Studio Code`（或者您将在项目中使用的默认编辑器），然后按*Enter*继续：
- en: '[PRE6]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The CLI will ask you whether you want to change the project application type. Select
    the `javascript` option and press *Enter* to continue:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: CLI将要求您是否要更改项目应用程序类型。选择`javascript`选项，然后按*Enter*继续：
- en: '[PRE7]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The CLI will ask you whether you want to change the JavaScript framework of
    the project. Select `none` and press *Enter* to continue:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: CLI将要求您是否要更改项目的JavaScript框架。选择`none`，然后按*Enter*继续：
- en: '[PRE8]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The CLI will ask you whether you want to change the project application source
    directory. There is no need to change it, so press *Enter* to continue:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: CLI将要求您是否要更改项目应用程序源目录。无需更改，因此按*Enter*继续：
- en: '[PRE9]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The CLI will ask you whether you want to change the project application distribution
    directory; change the path to `dist/pwa`, then press *Enter* to continue:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: CLI将要求您是否要更改项目应用程序分发目录；更改路径为`dist/pwa`，然后按*Enter*继续：
- en: '[PRE10]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The CLI will ask you for a `Build Command` option; change the command to `quasar
    build -m pwa`, then press *Enter* to continue:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: CLI将要求您输入`Build Command`选项；更改命令为`quasar build -m pwa`，然后按*Enter*继续：
- en: '[PRE11]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The CLI will ask you for a `Start Command` option; change to `quasar dev -m
    pwa`, then press *Enter* to continue:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: CLI将要求您输入`Start Command`选项；更改为`quasar dev -m pwa`，然后按*Enter*继续：
- en: '[PRE12]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The CLI will ask you whether you want to update or remove the project configuration.
    Select `update` and press *Enter* to continue:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: CLI将要求您是否要更新或删除项目配置。选择`update`，然后按*Enter*继续：
- en: '[PRE13]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The CLI will ask you whether you want to use an AWS profile on this update.
    Type *Y* and press *Enter* to continue:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: CLI将要求您在此更新中是否要使用AWS配置文件。输入*Y*，然后按*Enter*继续：
- en: '[PRE14]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Finally, select the profile you want to use and press *Enter* to continue:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，选择您想要使用的配置文件，然后按*Enter*继续：
- en: '[PRE15]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: How it works...
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: In this recipe, we used the Quasar CLI to add the PWA development environment
    to our project, using the built-in `quasar -m add` command to add new development
    environments.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们使用Quasar CLI将PWA开发环境添加到我们的项目中，使用内置的`quasar -m add`命令来添加新的开发环境。
- en: Then we configured the `quasar.conf.js` file to add new properties on the `pwa`
    property so we can add a better user experience within the application we will
    be deploying.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们配置了`quasar.conf.js`文件，以在`pwa`属性上添加新属性，以便我们可以在部署的应用程序中添加更好的用户体验。
- en: Finally, we changed the Amplify CLI configurations so it will use the new `pwa`
    environment as the build commands and distribution folder.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们更改了Amplify CLI配置，以便它将使用新的`pwa`环境作为构建命令和分发文件夹。
- en: See also
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: Find more information about developing a PWA with Quasar at [https://quasar.dev/quasar-cli/developing-pwa/introduction](https://quasar.dev/quasar-cli/developing-pwa/introduction).
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[https://quasar.dev/quasar-cli/developing-pwa/introduction](https://quasar.dev/quasar-cli/developing-pwa/introduction)找到有关使用Quasar开发PWA的更多信息。
- en: Find more information on Amplify CLI at [https://docs.amplify.aws/cli](https://docs.amplify.aws/cli).
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[https://docs.amplify.aws/cli](https://docs.amplify.aws/cli)找到有关Amplify CLI的更多信息。
- en: Creating the application update notification
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建应用程序更新通知
- en: Keeping users notified about the updates of your application is a good practice
    because they will always know that the app is being maintained and improved.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 让用户始终了解应用程序的更新是一个好习惯，因为他们将始终知道应用程序正在维护和改进。
- en: Working with PWA, you have access to features such as creating a native mobile
    application, allowing the installation of your application on a mobile device.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 使用PWA，您可以访问诸如创建原生移动应用程序、允许在移动设备上安装应用程序等功能。
- en: When an update is released, we need to inform our users about it and update
    the currently installed code.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 发布更新时，我们需要通知用户并更新当前安装的代码。
- en: In this recipe, we will learn how to use the service worker life cycle to register
    the application installation and use it to notify the user when there is a new
    update and apply the new updated version.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将学习如何使用服务工作程序生命周期来注册应用程序安装，并将其用于在有新更新时通知用户并应用新的更新版本。
- en: Getting ready
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备好了吗？
- en: The prerequisite for this recipe is Node.js 12+.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程的先决条件是Node.js 12+。
- en: 'The Node.js global objects that are required are as follows:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 所需的Node.js全局对象如下：
- en: '`@aws-amplify/cli`'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@aws-amplify/cli`'
- en: '`@quasar/cli`'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@quasar/cli`'
- en: To start adding custom update notifications, we will continue with the project
    that was created in *Transforming the application into a PWA *recipe.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始添加自定义更新通知，我们将继续使用在*将应用程序转换为PWA*教程中创建的项目。
- en: How to do it...
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Follow these steps to add updates notification in our PWA:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤在我们的PWA中添加更新通知：
- en: 'Open the `quasar.conf.js` file in the project root folder and find the `framework`
    property. Then for the `plugins` property, add the `''Notify''` string to the
    array so Quasar loads the `Notify` plugin on the boot of the application:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开项目根文件夹中的`quasar.conf.js`文件，找到`framework`属性。然后对于`plugins`属性，将`'Notify'`字符串添加到数组中，以便Quasar在应用程序启动时加载`Notify`插件：
- en: '[PRE16]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Open the `register-service-worker.js` file in the `src-pwa` folder, and import
    the `Notify` plugin from Quasar:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`src-pwa`文件夹中的`register-service-worker.js`文件，并从Quasar导入`Notify`插件：
- en: '[PRE17]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Create an asynchronous function called `clearLocalCache`. Then create a constant
    called `cachedFiles` and define it as `await caches.keys()`; on the `cachedFiles`
    constant, execute an array `map` function with the argument being `file`; and
    inside the function, execute `await caches.delete(file)`. Finally, reload the
    application:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Find the `updatefound` function, and create a constant called `installKey`
    and define it as `''chatAppInstalled''`. Then verify whether there is an item
    with the name of the constant you have created in the browser''s `localStorage` item.
    If the item is present, execute the `Notify.create` function, passing as an argument
    a JavaScript object, with the `color` property defined as `''dark''`, and `message`
    defined as the update message. If the `localStorage` item is not present, add
    to `localStorage` an item with the name of the `installKey` constant with a value
    of `''1''`:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Finally, find the `updated` function, and add a `Notify.create` function, passing
    a JavaScript object as an argument. In this object, add a `type` property defined
    as `''positive''`, a `message` property defined with the successfully updated
    message, a `caption` property with the instruction to refresh the application,
    and an `actions` property defined as an array. In the `actions` array, add a JavaScript
    object, with the `label` property defined as `''Refresh''`, the `color` property
    defined as `''white''`, and the `handler` property defined as the `clearLocalCache` function:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Here are the previews of the notifications:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: 'New update found:'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](assets/8b444e5c-d289-4f6a-9d61-743880d74740.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
- en: 'Update applied:'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](assets/665cbf77-cab3-4f35-b56d-c0a409ef6789.png)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
- en: How it works...
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First, we added the `Notify` plugin to the `quasar.conf.js` file plugins property,
    so the Quasar CLI could make it available to us on the execution runtime.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: Then, in the `register-service-worker.js` file, we added the Notify plugin and
    created a custom cache clear function.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: To the `updatefound` life cycle, we added an install verification so the new
    update notification will only be displayed for users that had the application
    installed on their browsers.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we added to the updated life cycle a notification for the update-finished
    process, and an action button for the user to clear the cache and restart the
    application.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Find more information about the Quasar Notify plugin at [https://quasar.dev/quasar-plugins/notify](https://quasar.dev/quasar-plugins/notify).
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Find more information about the JavaScript cache interface at [https://developer.mozilla.org/en-US/docs/Web/API/Cache](https://developer.mozilla.org/en-US/docs/Web/API/Cache).
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a custom PWA installation notification on iOS
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Unfortunately, in iOS, the Safari browser engine does not provide a default
    PWA installation banner out of the box. In this case, we have to implement our
    own version of it. Using a community plugin named `a2hs.js` (for *Add to Home
    Screen*), we can enable a custom installation message to be displayed on iOS for
    our users.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to add the `a2hs.js` plugin in our project,
    and how to add it to the project boot sequence using the Quasar boot files.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The prerequisite for this recipe is Node.js 12+.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: 'The Node.js global objects that are required are as follows:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: '`@aws-amplify/cli`'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@quasar/cli`'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`a2h2.js`'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To start with the development of the custom iOS PWA installation banner, we
    will continue with the project that was created in the *Creating the application
    update notification *recipe.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the iOS platform on Safari, there is no installation banner for the PWA
    application in the browser. In these steps, we will add the `a2hs.js` plugin to
    add this missing feature:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to install the `a2js.js` plugin in our project. To do it, in
    the project folder, open the Terminal (macOS or Linux) or the Command Prompt/PowerShell (Windows)
    and execute the following command:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'In the `boot` folder, and then inside the `src` folder, create an `a2hs.js`
    file and open it. Next, import the `a2hs.js` plugin:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'To make a Quasar boot file to work, we need to create a default exported function.
    In this function, create a constant named `options` and define it as a JavaScript
    object, with the `brandName` property as the name of the application:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Finally, in the project root folder, open the `quasar.conf.js` file and find
    the `boot` property. In the array, add the `''a2hs''` string to make it available
    to the Quasar CLI and load the newly created boot file:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Here is a preview of the alert that will pop up on an iOS device:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/e8ff8fe2-d307-4148-9223-38c1d933674c.png)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
- en: How it works...
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First, we added the `a2hs.js` plugin to the project with an `npm` installation.
    Then, we created an `a2hs.js` file in the `boot` folder to be used as a boot file
    on Quasar.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: Then, in the newly created file, we imported the `a2hs.js` plugin and the application
    logo, followed by the instantiation of the `a2hs.js` plugin with custom options.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we added the `a2hs` boot file to the `quasar.conf.js` file's `boot`
    property.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can find more information about Quasar boot file structure at [https://quasar.dev/quasar-cli/boot-files](https://quasar.dev/quasar-cli/boot-files).
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can find more information about `a2hs.js` at [https://github.com/koddr/a2hs.js/](https://github.com/koddr/a2hs.js/).
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating the production environment and deploying
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After all the work has been done to get our application ready, it's time to
    build it as a production-ready distribution, by creating a production environment
    and deploying it to that environment. This new environment will have no data from
    the tests, and we will ensure that this environment will be used exclusively for
    the production state.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: A production environment can be described as an environment where your application
    is placed for the final user, with code and a database that is ready to be fed
    with end user data.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to create a production environment with the
    Amplify CLI and how to define it as the default production environment on the
    Amplify console.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The prerequisite for this recipe is Node.js 12+.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: 'The Node.js global objects that are required are as follows:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: '`@aws-amplify/cli`'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@quasar/cli`'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To start with the creation of the production environment, we will continue with
    the project that was created in the *Adding a custom PWA installation notification
    on iOS *recipe.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-137
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We need to get our application ready to be released to our users in a production
    environment. Follow these steps to create the production environment and define
    it as the default production environment for our application in the Amplify console:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
- en: 'In the project root folder, open the Terminal (macOS or Linux) or the Command
    Prompt/PowerShell (Windows) and execute the following command:'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The Amplify CLI will ask you whether you want to use an existing environment
    as the base; press *N* and *Enter* to continue:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Now the Amplify CLI will ask you for the name of the new environment; type
    `production` as the name and press *Enter* to continue:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'The CLI will ask you whether you want to use an AWS profile on this update;
    type *Y* and press *Enter* to continue:'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Select the profile you want to use and press *Enter* to continue:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Now we need to push the changes made to the server; to do so, open the Terminal (macOS
    or Linux) or the Command Prompt/PowerShell (Windows), enter the project folder,
    and execute the following command:'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'The Amplify CLI will ask you whether you want to update the auto-generated
    GraphQl code; type *Y* and press *Enter *to continue:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'The Amplify CLI will ask you whether you want to overwrite the currently existing
    code; type *Y* and press *Enter* to continue:'
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Then publish your site to the production environment. To do this, open the Terminal (macOS
    or Linux) or the Command Prompt/PowerShell (Windows), enter the project folder,
    and execute the following command:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'For the last part, we need to configure the application settings to use the
    new `production` environment we created. To do so, open the Terminal (macOS or
    Linux) or the Command Prompt/PowerShell (Windows), enter the project folder, and
    execute the following command:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Open the side menu and click on the General link:'
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/b7081945-0d9a-4a5b-a68a-cc92f0dd841c.png)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
- en: 'Now, on the App details card, in the top-right corner, click on the Edit button:'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/47f656dd-14e9-44e7-941f-753000177c57.png)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
- en: 'Then in Settings, open the Production environment selection box and select
    production:'
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/b1fba80a-b5bd-4cbf-a2e5-f12549521816.png)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
- en: 'Finally, to check whether the changes were properly saved, refresh the page
    and check the Settings section of the App details card:'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/5cf19669-f198-4def-b807-dce6e093918b.png)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
- en: How it works...
  id: totrans-167
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we started by adding a new environment to the local Amplify
    instance with the Amplify CLI and chose to use a brand new environment. Then we
    sent this new environment to the cloud, updating our local code base and finishing
    with the publication of the project using this new environment.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we went to the Amplify console to configure the production environment
    of the application as the new environment that we created.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-170
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Find more information on Amplify CLI at [https://docs.amplify.aws/cli](https://docs.amplify.aws/cli).
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Find more information on the Amplify console at [https://aws.amazon.com/amplify/console/?nc1=h_ls](https://aws.amazon.com/amplify/console/?nc1=h_ls).
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
