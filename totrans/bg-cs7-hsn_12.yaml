- en: Queries That Perform Aggregation Functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will explore LINQ further. Specifically, we'll look at the
    power of LINQ to perform, for example, aggregation functions like averaging, summation,
    counting, and so on. Also, we'll talk about lists of lists, which is a very practical
    thing.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a show button to the HTML
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Bring up project and, to keep things brief, all we will do is put in a button
    below the line beginning with `<form id=....`. To do this, go to Toolbox, grab
    a `Button` control, and drag it in there. Change the text on the Button to say
    `Show`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, switch to the Design view and double-click on the Show button. This takes
    us into `Default.aspx.cs`. Delete the `Page_Load` block. We don''t need that.
    The relevant portion of the starting code for this project should look like *Figure
    12.7.1*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/578ad64b-616f-4e92-9494-7532354fad7b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.7.1: The starting code section for this project'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the next stage, go to the top of the file and, under `using System`, enter
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Creating an array
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There is a lot of code to enter in this chapter, but it''s mechanical. First,
    we will create an array, so enter the following between the curly braces under
    the line beginning with `protected void Button1_Click...`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Here, `IEnumerable` is the data type and `scores` is the name of the array.
    It doesn't matter what values you put into the array.
  prefs: []
  type: TYPE_NORMAL
- en: Averaging the values in a list
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, first we will find an average of this list. So, enter the following next:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: We will select students who score `90` or above. Imagine, those are the semester
    grades for several students. So, in the preceding line, we're saying where the
    score is `>=90`, select that score. This is a query that you can write in a single
    line. In this context, `score` is the range variable, `scores` is the array, and
    the condition that selects is `where score=>90`. Then, you enter `.` (dot) `Average()`
    to average the whole thing out. In other words, the way that this is written is
    that the query between the parentheses will run and then average the list of values
    in the array. If you hover your mouse over `var` in this line, you'll see that
    it says `double`, because, as you can see if you hover your mouse over `Average`,
    it too returns a double. So, this `Average()` function acts on a list of the `IEnumerable`
    type, but it returns a `double` data type to us.
  prefs: []
  type: TYPE_NORMAL
- en: Displaying the results
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, you can display the results, of course, because remember that it''s just
    a single numerical value, an aggregation quantity. You can now say the following
    under this line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Using the Count function
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, if you want, you can, for example, also use the `Count` function, so you
    could say something like the following next:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding line beginning with `var`, we used the query syntax in a single
    line, or inline query syntax, because we used `from` and `where`. Now, we can
    express the same thing using method chaining and the Lambda expressions within
    them. So, here we say `scores.Where`, and then we say where the `grade` is such
    that `70 <=grade`, but `grade <80`. Thus, we''re defining people who earn scores
    of between `70` and `80`, exclusive of a score of `80`, and we''re labeling them
    as average students. Then we''ll `Count` those. This will tell us how many of
    these people are there and then we can display that number. For example, you can
    enter the following next:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Remember, `averageStudentCount` yields a number, so, for example, the results
    could be, *There are 25 average students*.
  prefs: []
  type: TYPE_NORMAL
- en: Working with a list of lists
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, a very realistic application of this concept might be to have a list of
    lists. Start by entering the following next:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Imagine that you have one student, `firstStudent`. Then, he or she has some
    grade scores, so you make `new List` of integers and then you initialize this
    list with some values within a set of curly braces. So, throw in some values as
    shown. (Note that the values I entered are in the `90` +/- range.) This is how
    you can initialize a list in away that we have not seen before.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s do one more list of integers for another student. To do this, enter
    the following for `secondStudent`, and write `new List` of integers. Again, initialize
    this list with another set of values. (Note, in this line, the values I will enter
    are in the `80` +/- range.) Now, when you have a whole class, you would have a
    list of such lists, correct? This works because you have multiple students to
    a class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'So, now you can create constructors. Enter the following next:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Adding students to the classList
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here, we have a list of lists of integers—you can embed lists inside other
    lists. Then, we will say, for example, the `classList` list, which equals a new
    list of lists. To initialize this list, you can use `Add`. For the next line,
    enter the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: This is how you can add the first student, the second student, and so on to
    the class list.
  prefs: []
  type: TYPE_NORMAL
- en: Summarizing the information in the classList
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the next stage, you want to be able to get some useful information. For
    example, imagine you have this list of lists and you want to summarize. So, enter
    the following next:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Now `avgPerStudent`, as an example, represents the average student grade. Now,
    after you type `classList.Select()`, the quantity to be selected is the list that
    represents each individual student, which is captured by `(student => student.Average())`.
    Now, be sure that you understand what a `student` parameter is. Here, you select
    a student and average out their grade scores. Hover your mouse over `student`,
    and as you can see, the quantity represents a list of integers that corresponds
    to the first student. Then, `student.Average` means averaging out that student
    and then repeating this process for the next student. If you hover your mouse
    over `var`, you''ll see that the return in this case is of the `IEnumerable` type.
    You can iterate over those values. To do this, you''ll enter the following next:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, underneath this line, enter the following within a set of curly braces
    to display the results:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Running the program
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, build this program and run it in your browser. Click on the Show button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/69bcb0bf-e199-4312-af4e-1d98e351469b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.7.2: The results from running our program'
  prefs: []
  type: TYPE_NORMAL
- en: Now these are some professional-looking results. The average for great students
    is 98.5\. There are three average students. The extended average grade for the
    two lists is shown at the end.
  prefs: []
  type: TYPE_NORMAL
- en: So, you learned more of what can be done with LINQ—the `Average` function and
    the `Count` function and you also learned that you can make a list of lists. You
    can operate on these lists using statements such as `Select` and then you can
    embed Lambda expressions to act on each list in the list of lists individually.
  prefs: []
  type: TYPE_NORMAL
- en: Chapter review
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For review, the complete version of the `Default.aspx.cs` file for this chapter,
    including comments, is shown in the following code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we explored LINQ further. Specifically, we looked at the power
    of LINQ to perform aggregation functions, such as averaging, summation, and counting.
    Also, we talked about lists of lists. You averaged the values in a list, used
    the `Count` function, worked with a list of lists, added students to the `classList`,
    and summarized the information in the `classList`.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will learn about tuples, which are basically collections
    of several values.
  prefs: []
  type: TYPE_NORMAL
