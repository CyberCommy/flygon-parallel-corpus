- en: Preface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Cryptography has a long and important history in protecting critical systems
    and sensitive information. This book will show you how to encrypt, evaluate, compare,
    and attack data using Python. Overall, the book will help you deal with the common
    errors in encryption and show you how to exploit them.
  prefs: []
  type: TYPE_NORMAL
- en: Who this book is for
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book is intended for security professionals who want to learn how to encrypt
    data, evaluate and compare encryption methods, and how to attack them.
  prefs: []
  type: TYPE_NORMAL
- en: What this book covers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Chapter 1](part0019.html#I3QM0-6963dc2081804897894c8854b7cc74fd), *Obfuscation*,
    covers the Caesar cipher and ROT13, simple character substitution ciphers, and
    base64 encoding. We then move on to XOR. In the end, there are challenges to test
    your learning  that involve cracking the Caesar cipher, reversing base64 encoding,
    and deciphering XOR encryption without the key.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 2](part0035.html#11C3M0-6963dc2081804897894c8854b7cc74fd), *Hashing*,
    covers the older MD5 and the newer SHA hashing techniques and also Windows password
    hashes. The weakest type of hashing is common use, followed by Linux password
    hashes, which are the strongest type of hashing in common use. Afterward, there
    are some challenges to complete. The first is to crack some Windows hashes and
    recover passwords, then you will be tasked with cracking hashes where you don''t
    even know how many rounds of hashing algorithm were used, and finally you will
    be asked to crack those strong Linux hashes.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 3](part0048.html#1DOR00-6963dc2081804897894c8854b7cc74fd), *Strong
    Encryption*, coversthe primary mode used to hide data today. It is strong enough
    for the US military. Then, there are two of its modes, ECB and CBC; CBC being
    the stronger and more common one. We will also discuss the padding oracle attack,
    which makes it possible to overcome some parts of AES CBC if the designer makes
    an error and the overly informative error message gives information to the attacker.
    Finally, we introduce RSA, the main public key algorithm used today, which makes
    it possible to send secrets over an insecure channel without having exchanged
    a gives private key. Following all that, we will perform a challenge where, we
    will crack RSA in the case where it is erroneously created with two similar prime
    numbers instead of two random prime numbers.'
  prefs: []
  type: TYPE_NORMAL
- en: To get the most out of this book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You do not need to have programming experience or any special computer. Any
    computer that can run Python can do these projects, and you don't need much math
    because we'll not be inventing new encryption techniques just to learn how to
    use the pre-existing standard ones that don't require anything more than very
    basic algebra.
  prefs: []
  type: TYPE_NORMAL
- en: Download the example code files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can download the example code files for this book from your account at [www.packtpub.com](http://www.packtpub.com).
    If you purchased this book elsewhere, you can visit [www.packtpub.com/support](http://www.packtpub.com/support) and
    register to have the files emailed directly to you.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can download the code files by following these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in or register at [www.packtpub.com](http://www.packtpub.com/support).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the SUPPORT tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on Code Downloads & Errata.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the name of the book in the Search box and follow the onscreen instructions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once the file is downloaded, please make sure that you unzip or extract the
    folder using the latest version of:'
  prefs: []
  type: TYPE_NORMAL
- en: WinRAR/7-Zip for Windows
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Zipeg/iZip/UnRarX for Mac
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 7-Zip/PeaZip for Linux
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The code bundle for the book is also hosted on GitHub at [https://github.com/PacktPublishing/Hands-On-Cryptography-with-Python](https://github.com/PacktPublishing/Hands-On-Cryptography-with-Python). In
    case there's an update to the code, it will be updated on the existing GitHub
    repository.
  prefs: []
  type: TYPE_NORMAL
- en: We also have other code bundles from our rich catalog of books and videos available
    at **[https://github.com/PacktPublishing/](https://github.com/PacktPublishing/)**.
    Check them out!
  prefs: []
  type: TYPE_NORMAL
- en: Download the color images
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We also provide a PDF file that has color images of the screenshots/diagrams
    used in this book. You can download it here: [https://www.packtpub.com/sites/default/files/downloads/HandsOnCryptographywithPython_ColorImages.pdf](https://www.packtpub.com/sites/default/files/downloads/HandsOnCryptographywithPython_ColorImages.pdf).
  prefs: []
  type: TYPE_NORMAL
- en: Conventions used
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are a number of text conventions used throughout this book.
  prefs: []
  type: TYPE_NORMAL
- en: '`CodeInText`: Indicates code words in text, database table names, folder names,
    filenames, file extensions, pathnames, dummy URLs, user input, and Twitter handles. Here
    is an example: "If we enter `HELLO`, it prints out the correct answer of `KHOOR`."'
  prefs: []
  type: TYPE_NORMAL
- en: 'A block of code is set as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Any command-line input or output is written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '**Bold**: Indicates a new term, an important word, or words that you see onscreen.
    For example, words in menus or dialog boxes appear in the text like this. Here
    is an example: "Select System info from the Administration panel."'
  prefs: []
  type: TYPE_NORMAL
- en: Warnings or important notes appear like this.Tips and tricks appear like this.
  prefs: []
  type: TYPE_NORMAL
