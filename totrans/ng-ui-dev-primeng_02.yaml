- en: Theming Concepts and Layouts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The main goal of this chapter is to provide an introduction to PrimeNG themes,
    layouts, and the concepts involved. The **theming** concept used in PrimeNG is
    similar to the jQuery ThemeRoller CSS Framework ([http://jqueryui.com/themeroller](http://jqueryui.com/themeroller)).
    PrimeNG components are designed to allow a developer to integrate them seamlessly
    into the look and feel of an entire web application. At the time of writing, there
    are 17 free themes and 5 premium themes and layouts. Free themes include ThemeRoller
    themes, a Twitter Bootstrap theme, and some custom themes powered by PrimeFaces
    and PrimeNG. Such themes are distributed along with PrimeNG itself under Apache
    License.
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 1](0cbd9d79-a0ba-42ba-9172-2b76d8ad8788.xhtml), *Getting Started
    with Angular and PrimeNG*, we showed three possible setups and theme installations.
    You can also play with the free themes in the PrimeNG showcase ([https://www.primefaces.org/primeng](https://www.primefaces.org/primeng))
    by switching them dynamically--a theme switcher is available at the top-right
    corner. Premium themes can be purchased as standalone themes. You can preview
    premium themes and layouts in the PrimeNG Theme Gallery ([http://primefaces.org/themes](http://primefaces.org/themes)).
  prefs: []
  type: TYPE_NORMAL
- en: Elite or pro users can use some premium themes (currently Omega) without extra
    costs. More information about license models can be found on the license page
    ([https://www.primefaces.org/licenses](https://www.primefaces.org/licenses)).
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding structural and skinning CSS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Organizing your project structure with SASS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Simple ways to create a new theme
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Responsive grid system in PrimeNG
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bootstrap's responsive layout meets PrimeNG
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding structural and skinning CSS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Each component is styled with CSS and contains two layers of style information:
    structural or component-specific and skinning or component-independent styles.
    In this section, you will understand the difference between these two types of
    CSS, learn some useful selectors, and see an exemplary styling of the Paginator
    component in the generated HTML. Let''s start. Go to the Paginator showcase ([https://www.primefaces.org/primeng/#/paginator](https://www.primefaces.org/primeng/#/paginator))
    and explore the HTML code of the Paginator component. The next screenshot shows
    the HTML and styles in the Google Chrome DevTools.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Shortcuts for opening DevTools: *F12* (Windows), *command* + *option* + *I*
    (Mac).![](assets/61574c6b-b56b-4c92-af5a-6bb6c7071528.png)'
  prefs: []
  type: TYPE_NORMAL
- en: 'The highlighted line in the preceding screenshot represents the container element
    of the Paginator component with the following style classes:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ui-paginator`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ui-unselectable-text`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ui-widget`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ui-widget-header`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The first two style classes `ui-paginator` and `ui-unselectable-text` are generated
    by PrimeNG. These are structural style classes. The first one provides a semantic
    presentation to indicate the role of an element. Other examples for such style
    classes are `ui-datatable` for a table and `ui-button` for a button.
  prefs: []
  type: TYPE_NORMAL
- en: The second one is applied in situations where you want to avoid accidentally
    copy-pasting useless things, such as icons or images. In general, structural style
    classes define the skeleton of the components and include CSS properties such
    as margin, padding, display type, overflow behavior, dimensions, and positioning.
  prefs: []
  type: TYPE_NORMAL
- en: Almost every component documentation in the PrimeNG showcase contains a Styling
    section with the component's structural style classes.
  prefs: []
  type: TYPE_NORMAL
- en: As already said, PrimeNG leverages the jQuery ThemeRoller CSS Framework. The
    `ui-widget` and `ui-widget-header` classes mentioned earlier are defined by ThemeRoller
    and affect the look and feel of the underlying HTML element and associated component.
    These are skinning style classes, which define CSS properties such as text colors,
    border colors, and background images.
  prefs: []
  type: TYPE_NORMAL
- en: '| **Selector** | **Applies** |'
  prefs: []
  type: TYPE_TB
- en: '| `.ui-widget` | This is the class applied to all PrimeNG components. It applies,
    for example, font family and font size. |'
  prefs: []
  type: TYPE_TB
- en: '| `.ui-widget-header` | This is the class applied to the header section(s)
    of a component. |'
  prefs: []
  type: TYPE_TB
- en: '| `.ui-widget-content` | This is the class applied to the content section(s)
    of a component. |'
  prefs: []
  type: TYPE_TB
- en: '| `.ui-state-default` | This is the default class applied to clickable, button-like
    components, or their elements. |'
  prefs: []
  type: TYPE_TB
- en: '| `.ui-state-hover` | This is the class applied on a `mouseover` event to clickable,
    button-like components, or their elements. |'
  prefs: []
  type: TYPE_TB
- en: '| `.ui-state-active` | This is the class applied on a `mousedown` event to
    clickable, button-like components, or their elements. |'
  prefs: []
  type: TYPE_TB
- en: '| `.ui-state-disabled` | This is the class applied to components or their elements
    when they are disabled. |'
  prefs: []
  type: TYPE_TB
- en: '| `.ui-state-highlight` | This is the class applied to components or their
    elements when they are highlighted or selected. |'
  prefs: []
  type: TYPE_TB
- en: '| `.ui-corner-all` | This is the class that applies corner radius to all four
    corners of a component. |'
  prefs: []
  type: TYPE_TB
- en: '| `.ui-corner-top` | This is the class that applies corner radius to both top
    corners of a component. |'
  prefs: []
  type: TYPE_TB
- en: '| `.ui-corner-bottom` | This is the class that applies corner radius to both
    bottom corners of a component. |'
  prefs: []
  type: TYPE_TB
- en: '| `.fa` | This is the class applied to elements representing an icon. |'
  prefs: []
  type: TYPE_TB
- en: These styles are applied consistently across all PrimeNG components, so a clickable
    button and accordion tab have the same `ui-state-default` class applied to indicate
    that they are clickable. When a user moves the mouse over one of these elements,
    this class gets changed to `ui-state-hover`, and then to `ui-state-active` when
    these elements are selected.
  prefs: []
  type: TYPE_NORMAL
- en: This approach makes it easy to ensure that all elements with a similar interaction
    state will look identical across all components. The main advantage of the presented
    PrimeNG selectors is a great flexibility in theming because you don't need to
    know each and every skinning selector to change the styles of all available components
    in your web application consistently.
  prefs: []
  type: TYPE_NORMAL
- en: In rare cases, some style classes are not generated by PrimeNG explicitly and
    not defined by the ThemeRoller. The Schedule component ([https://www.primefaces.org/primeng/#/schedule](https://www.primefaces.org/primeng/#/schedule))
    is one of such cases. It has structural classes `fc-head`, `fc-toolbar`, `fc-view-container`,
    and so on, which are controlled by the third-party plugin `FullCalendar` ([https://fullcalendar.io](https://fullcalendar.io)).
  prefs: []
  type: TYPE_NORMAL
- en: 'Free themes use the relative `em` unit to define the font size of the widgets
    having the `.ui-widget` class. This is `1em` by default. For example, the Omega
    theme defines the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Thanks to the `em` unit, the font size is easily customizable. It is suggested
    to apply a base font size on the `body` element to adjust the size of components
    throughout the web application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Organizing your project structure with Sass
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Every large frontend application needs a robust, scalable CSS architecture.
    A CSS preprocessor is indispensable--it helps to write cleaner, modular code with
    reusable pieces and maintain large and complex style sheets. A CSS preprocessor
    is basically a scripting language that extends CSS and compiles it into regular
    CSS. There are three primary CSS preprocessors today: Sass, LESS, and Stylus.
    As per Google Trends, Sass is the most used preprocessor today. Sass mimics the
    HTML structure and lets you nest CSS selectors that follow the same visual HTML
    hierarchy. With CSS, you would need to write this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'With Sass, you can simply write this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Sass is backward compatible with CSS, so you can easily convert your existing
    CSS files just by renaming the `.css` file extension to `.scss`.
  prefs: []
  type: TYPE_NORMAL
- en: 'While nesting CSS selectors, you can use the handy `&` symbol. The `&` symbol
    concatenates CSS rules. For example, consider the following Sass snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'This will be compiled to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The `&` symbol is also useful for sandboxed UI components when every component
    only uses class names prefixed with a unique namespace. For example, the following
    imaginary header module is sandboxed with the `.mod-header` namespace:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The output results in two classes: `.mod-header-link` and `.mod-header-menu`.
    As you see, Sass helps to avoid CSS collisions. It is recommended to write separate
    Sass files for each UI component and then combine them together by means of `@import`
    directive. With this directive, one Sass file can be imported into another one.
    The preprocessor will take the file that you want to import and combine it with
    the file you are importing into. This is a little bit different to the native
    CSS `@import`. The CSS `@import` always creates an HTTP request to fetch the imported
    file. The Sass `@import` combines the files so that one single CSS file will be
    sent to the browser.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Another power Sass concept is **partial files**. It is possible to create partial
    Sass files that contain small snippets for inclusion into other Sass files. Two
    typical examples of partial files are **variables** and **mixins.** Variables
    facilitate storing information that you want to reuse throughout your style sheets.
    Variables begin with dollar signs. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Usage:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'A mixin lets you make groups of CSS declarations that you want to reuse throughout
    your style sheets. They behave like parameterized functions. A mixin begins with
    the `@mixin` directive followed by a name. Let''s create a mixin to center any
    HTML content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The mixin name is `center` and the parameter `$axis` has a default value `"both"`
    if you don''t pass the parameter value explicitly. The usage is simple--the mixin
    has to be included with the `@include` directive:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'This leads to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'A partial file is named with a leading underscore, for example, `_variables.scss`,
    `_mixins.scss`. The underscore lets Sass know that the file should not be compiled
    to a CSS file. The underscore and file extension in the `@import` directive can
    be omitted:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Sass has more powerful features such as inheritance, operators, built-in functions,
    and handling media queries. Refer to the official Sass site for more details ([http://sass-lang.com](http://sass-lang.com)).
    You can play with Sass online on [http://www.sassmeister.com](http://www.sassmeister.com):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/d22e162b-7454-4587-b393-52443f7daf92.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Or you can use it at [http://sass.js.org](http://sass.js.org):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/60eef939-fd89-430b-9a5b-a59d6ec0fc22.png)'
  prefs: []
  type: TYPE_IMG
- en: 'It is high time to provide a guideline for organizing your Sass files. What
    is a good CSS architecture and project structure with a lot of Sass files? When
    planning your CSS architecture, you should modularize directories and files into
    categories. There are several proposals and recommendations. At the end, it depends
    on conventions in your team. One of the popular proposals is The 7-1 Pattern ([https://sass-guidelin.es/#the-7-1-pattern](https://sass-guidelin.es/#the-7-1-pattern)).
    This architecture provides seven folders and one main file to import all files
    and compile them into a single file. These are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`base/`: This folder contains global styles, such as CSS resets, typography,
    colors, and so on. For example:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`_reset.scss`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`_typography.scss`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`helpers/`: This folder contains Sass tools and helpers, such as variables,
    mixins, functions, and so on. This folder should not output a single line of CSS
    when compiled on its own:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`_variables.scss`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`_mixins.scss`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`components/`: This folder holds styles for self-contained components. These
    are normally widgets--small building blocks other components can be composed of.
    For example:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`_button.scss`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`_carousel.scss`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`layout/`: This folder holds macro layout styles for larger components, such
    as CSS grid, header, footer, sidebar, and so on:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`_header.scss`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`_footer.scss`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pages/`: This is an optional folder, which contains page-specific styles:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`_home.scss`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`_about.scss`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`themes/`: This is an optional folder, which contains styling for different
    themes. It makes sense for large sites with multiple themes:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`_omega.scss`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`_ultima.scss`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`vendors/`: This folder contains files from external libraries and frameworks,
    such as Bootstrap, jQueryUI, Select2, and so on:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`bootstrap.scss`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jquery-ui.scss`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Some folders are project specific and might not exist in many projects. Folder
    names are arbitrary. For instance, the `components/` folder might also be called
    `modules/`, depending on what you prefer. In Angular projects, each Sass file
    for component styling resides in the same folder as the corresponding component.
    There is no dedicated folder for them.
  prefs: []
  type: TYPE_NORMAL
- en: 'For this book, a demo project was born--an imaginary graphic editor that demonstrates
    styling concepts. The web application is built on top of Angular 4 and Bootstrap
    3 ([http://getbootstrap.com](http://getbootstrap.com)). It has various panels
    on the left and right sides as well as a toolbar. The layout is responsive--panels
    get stacked on small screens. All styling files are gathered in the `main.scss`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: The complete graphic editor with Sass files is available on GitHub at
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/ova2/angular-development-with-primeng/tree/master/chapter2/graphic-editor-sass.](https://github.com/ova2/angular-development-with-primeng/tree/master/chapter2/graphic-editor-sass)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once `main.scss` file is imported into the file where you bootstrap the Angular
    application, Webpack creates a link to the `main.css` in `index.html` automatically
    (thanks to `HtmlWebpackPlugin`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: More flexible and modern responsive layout with Bootstrap 4 will be illustrated
    in the *Bootstrap flexbox layout meets PrimeNG* section. The graphic editor serves
    as a basis for a new demo application.
  prefs: []
  type: TYPE_NORMAL
- en: Simple ways to create a new theme
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We sometimes need to create our own themes instead of using the predefined ones.
    Web applications should often feature a company-specific look and feel, which
    is constant and preset by company-wide style guides. Creating new themes is easy
    with PrimeNG, because it is powered by the ThemeRoller CSS Framework ([http://jqueryui.com/themeroller](http://jqueryui.com/themeroller)).
    ThemeRoller provides a powerful and easy-to-use online visual tool. In this section,
    we will systematically show all the required steps to create a new theme. There
    are two ways how to create a new theme, either by ThemeRoller or from scratch
    with Sass.
  prefs: []
  type: TYPE_NORMAL
- en: ThemeRoller approach
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To gain first-hand experience of the ThemeRoller online visual tool, go to the
    ThemeRoller home page, explore the available theme's gallery, and play with the
    CSS properties to see changes for widgets embedded on the page. All CSS changes
    will be applied on the fly.
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/3ae3aff6-a6ba-4580-a76e-e44448a327b6.png)'
  prefs: []
  type: TYPE_IMG
- en: We have to select one of the existing themes (the Gallery tab) and edit it (the
    Roll Your Own tab). A click on the Download theme button accomplishes the work.
  prefs: []
  type: TYPE_NORMAL
- en: We should deselect the Toggle All checkbox under the Components option on the
    Download Builder page so that our new theme only includes the skinning styles.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we need to migrate the downloaded theme files from ThemeRoller to the
    PrimeNG theme infrastructure. The migration steps are straightforward:'
  prefs: []
  type: TYPE_NORMAL
- en: The theme package that we have downloaded will have a CSS file `jquery-ui.theme.css`
    (as well as minified variant) and the `images` folder. Extract the package and
    rename the CSS file as `theme.css`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In your web application, create a folder with the name of the new theme, for
    example, `src/assets/themes/crazy`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy `theme.css` and the `images` folder into `src/assets/themes/crazy`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After you are done with these steps, you can create a link to the `theme.css`
    in the `index.html` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: This was the easiest way to create your custom themes without requiring knowledge
    of CSS.
  prefs: []
  type: TYPE_NORMAL
- en: The Sass approach
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The second way is more flexible and accurate. It is preferable to create a new
    theme manually by Sass because the theme is better maintainable. The main CSS
    settings, such as font, colors, border radius, and many more can be done configurable
    by Sass variables. You can create a new theme by setting custom values for those
    variables. This is exactly the approach followed by PrimeNG. The mostly free themes
    were created in such manner.
  prefs: []
  type: TYPE_NORMAL
- en: The free themes are hosted on GitHub at [https://github.com/primefaces/primeng/tree/master/resources/themes](https://github.com/primefaces/primeng/tree/master/src/assets/components/themes).
  prefs: []
  type: TYPE_NORMAL
- en: 'Every theme has a separate folder with a Sass file where variables are set.
    The variables themselves are used in `_theme.scss`--shared file for all free themes.
    This file can be found under `node_modules/primeng/resources/themes/`, if you
    install PrimeNG as the dependency. Sometimes, you also need to set custom fonts
    or special settings for particular CSS selectors. You can overwrite default style
    rules with your own ones--just write them after importing `_theme.scss`. The general
    structure of the custom theme file looks like as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s create the following folder structure with three Sass files for a new
    `crazy` theme:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Sass variables can be copied from any other theme, such as Omega and placed
    in `_variables.scss`. Some of them get custom values as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'As you see, we would like to use a custom font `Quicksand`. You can download
    this font in the `.otf` format (OpenType Font) from this free resource: [https://www.fontsquirrel.com/fonts/quicksand](https://www.fontsquirrel.com/fonts/quicksand).
    For cross-browser support, we need fonts in four formats: `.ttf`, `.eot`, `.woff`,
    and `.svg`. There are many converter tools and one of these can be found at [http://www.font2web.com](http://www.font2web.com),
    which allows converting any `.otf` file to the mentioned four formats. After conversion,
    custom fonts should be moved to the `fonts` folder and installed via the `@font-face`
    rule.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Furthermore, we want to have pink gradient colors for widget''s header and
    red borders around invalid fields. All these custom rules are done in the theme
    file `theme.scss`. An excerpt from this file illustrates the idea:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: The complete project with the `crazy` theme is available on GitHub at
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/ova2/angular-development-with-primeng/tree/master/chapter2/custom-theme.](https://github.com/ova2/angular-development-with-primeng/tree/master/chapter2/custom-theme)'
  prefs: []
  type: TYPE_NORMAL
- en: 'The proposed structure allows to create as many themes as you want. But, how
    to compile `theme.scss` to `theme.css`? There are two ways to compile Sass to
    CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: Install the Sass from the command line. The installation process is described
    on the Sass homepage ([http://sass-lang.com/install](http://sass-lang.com/install)).
    Note that you need preinstalled Ruby. Once Sass is installed, you can run `sass
    theme.scss theme.css` from your terminal.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use `node-sass` ([https://github.com/sass/node-sass](https://github.com/sass/node-sass))
    under Node.js.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the project on GitHub, we used `node-sass` along with `autoprefixer` ([https://github.com/postcss/autoprefixer](https://github.com/postcss/autoprefixer))
    and `cssnano` ([http://cssnano.co](http://cssnano.co)). All required dependencies
    are installed locally:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Four handy npm scripts in `package.json` help to create the theme file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: The `@import "primeng/resources/themes/theme"` path is found thanks to the `--include-path
    node_modules/` option, which sets the path to look for the imported files. This
    helps to avoid all the mess with relative paths.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `npm run build:css` command will produce `theme.min.css`, which should
    be included on the page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'The look and feel of the new theme is amazing:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/62845b68-aba2-4c25-ba07-8ebd89f0da3b.png)'
  prefs: []
  type: TYPE_IMG
- en: The responsive grid system in PrimeNG
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: PrimeNG has **Grid CSS**--a responsive and fluid layout system optimized for
    mobile devices, tablets, and desktops. PrimeNG components use Grid CSS internally,
    but this lightweight utility can be used as standalone as well. CSS Grid is based
    on the 12-columns layout as many other grid systems. The total width of all columns
    is 100%. In this section, we will explain all features of the PrimeNG grid system
    in details.
  prefs: []
  type: TYPE_NORMAL
- en: Basic principles
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The layout container should have the `ui-g` style class. Children elements
    of the layout container become columns when they are prefixed with `ui-g-*` where
    `*` is any number from 1 to 12\. The number expresses the taken space of 12 available
    units. When the number of columns exceeds 12, columns wrap to the next line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'The following layout has two lines (rows):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/643b5dfc-196b-4da6-b0fd-1644f939d3cd.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The same two-row layout is also possible with two `ui-g` containers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Generally, *n* containers with the `ui-g` style class creates *n* rows.
  prefs: []
  type: TYPE_NORMAL
- en: Nested columns
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Columns can be nested in more complex layouts. To achieve that, just nest elements
    with the `ui-g-*` style classes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'With this structure, columns with different content will not have equal height.
    There is a more robust solution to force equal height for columns with different
    content. Just wrap the internal `div` elements inside another `div` with the `ui-g`
    style class or even simpler, assign `ui-g` to the column having nested columns:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'The result looks like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/e96d526f-f1fd-4ad4-93dd-ef80d565a14e.png)Columns have a default
    padding of `0.5em`. To remove it, you need to apply the `ui-g-nopad` style class.
    This was demonstrated in the earlier examples.'
  prefs: []
  type: TYPE_NORMAL
- en: Responsive and fluid layout
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Responsive layout is achieved by applying additional classes to the columns.
    Four screen sizes are supported with different breakpoints.
  prefs: []
  type: TYPE_NORMAL
- en: '| **Prefix** | **Device** | **Size** |'
  prefs: []
  type: TYPE_TB
- en: '| `ui-sm-*` | Small devices like phones | `max-width: 640px` |'
  prefs: []
  type: TYPE_TB
- en: '| `ui-md-*` | Medium-sized devices like tablets | `min-width: 641px` |'
  prefs: []
  type: TYPE_TB
- en: '| `ui-lg-*` | Large-sized devices like desktops | `min-width: 1025px` |'
  prefs: []
  type: TYPE_TB
- en: '| `ui-xl-*` | Big screen monitors | `min-width: 1441px` |'
  prefs: []
  type: TYPE_TB
- en: 'When an element features multiple style classes listed in the table, they get
    applied from the bottom to the top. Let''s take an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: What is happening here?
  prefs: []
  type: TYPE_NORMAL
- en: On large screens, three columns are displayed in proportion 2:12, 2:12, and
    8:12.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: On medium screens, two rows are displayed. The first row has equal columns and
    the second row has a column 4:12.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: On small screens (mobile devices) columns get stacked--each column is displayed
    in its own row.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The screenshot shows the arrangement of columns on medium-sized devices:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/daa75ad7-7fe2-4cf3-a36b-8a745a9b8ec5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'PrimeNG components have a built-in responsive mode. They understand a special
    `ui-fluid` style class. The Grid CSS and any other grid system can be used together
    with this style class, which provides a 100% width to components. This behavior
    helps to use the screen space efficiently. An example demonstrates various components
    in the fluid layout:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'The layout from medium up to big screens looks as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/86b5cdab-9375-4eb7-b385-44e4c3bbd4dd.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The layout on small screens has stacked columns:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/3bab0f56-a8cf-4568-bc14-bea917f27b00.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As you can see, all right-aligned labels become left aligned. You can achieve
    this behavior with media queries:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: The complete demo application with instructions is available on GitHub at
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/ova2/angular-development-with-primeng/tree/master/chapter2/primeng-grid-css.](https://github.com/ova2/angular-development-with-primeng/tree/master/chapter2/primeng-grid-css)'
  prefs: []
  type: TYPE_NORMAL
- en: Bootstrap flexbox layout meets PrimeNG
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will reimplement the graphic editor introduced in the *Organizing
    your project structure with Sass* section with Bootstrap 4 ([https://v4-alpha.getbootstrap.com](https://v4-alpha.getbootstrap.com))
    and PrimeNG components. Starting with the version v4.0.0-alpha.6, Bootstrap only
    has a flexbox-based layout by default, with no fallback.
  prefs: []
  type: TYPE_NORMAL
- en: '**Flexbox** is a new layout model, which is widely supported in all modern
    browsers ([http://caniuse.com/#search=flexbox](http://caniuse.com/#search=flexbox)).
    There are many tutorials on the Internet. You can, for example, read a comprehensive
    guide to the CSS flexbox layout at [https://css-tricks.com/snippets/css/a-guide-to-flexbox](https://css-tricks.com/snippets/css/a-guide-to-flexbox).
    Flexbox tackles many layout problems. One of the main advantages of flexbox is
    the ability to fill extra space. All columns in the flexbox layout have the same
    height irrespective of their content. Let''s show final screens of the graphic
    editor for two device resolutions.'
  prefs: []
  type: TYPE_NORMAL
- en: 'For desktop:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/9b6cf052-35eb-4e31-b089-c8192e78f549.png)'
  prefs: []
  type: TYPE_IMG
- en: 'For mobile:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/08227be2-bbd3-455d-b231-2fce6ee922f1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Beside PrimeNG, we need to install the latest Bootstrap 4\. This is 4.0.0-alpha.6
    at the time of writing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'After installation, you need to import the CSS file with flexbox layout rules
    into the `main.scss` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'In the prior Bootstrap versions, you had to enable the flexbox layout explicitly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'If you intend to use the styles for additional flex alignment options, you
    have to import `bootstrap-grid.scss` and `_flex.scss`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: '`_flex.scss` is a set of utilities for vertically and horizontally alignment
    of columns, for controlling the visual order of your content, and so on. The file
    contains various CSS rules such as `justify-content-start`, `align-items-end`,
    `align-self-auto`, `flex-first`, `flex-last`, and so on. Some of the rules are
    explained here. Refer to the official Bootstrap documentation to learn more details
    ([https://v4-alpha.getbootstrap.com/layout/grid](https://v4-alpha.getbootstrap.com/layout/grid)).'
  prefs: []
  type: TYPE_NORMAL
- en: 'The skeleton of the whole application resides in two files: `app.component.html`
    and `layout.component.html`. The first file contains a PrimeNG''s tabbed menu
    with two menu items:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Each item defines `routerLink`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'A click on a tab in the tabbed menu loads `layout.component.html` into `router-outlet`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: The `ng-content` area gets replaced by SVG or Canvas surface where the user
    can draw shapes. The `ge-toolbar` component contains PrimeNG's `<p-toolbar>`.
    The other `ge-*` components contain panels, for example, `<p-panel header="Palette">`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The most interesting part is the style classes. The short description of the
    style classes used in the preceding code snippet is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Style class** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `row` | This serves as a container for columns that go inside the row. Each
    column can take from 1 to 12 spaces. |'
  prefs: []
  type: TYPE_TB
- en: '| `align-items-*` | This defines where flex columns inside the row are vertically
    positioned. The `align-items-center` class positions the column in the middle.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `no-gutters` | This removes the margin from rows and padding from columns.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `col` | This sets the `auto-layout` mode--a new feature of the Bootstrap
    4 for equal width columns. The columns will automatically distribute the space
    in the row. |'
  prefs: []
  type: TYPE_TB
- en: '| `col-<prefix>-<number>` | This indicates the number of columns you would
    like to use out of the possible 12 per row. The prefix defines the breakpoint.
    For example, the `col-md-8` class means, the column will be 8 of 12 on medium,
    and larger screens and 12 of 12 (default) on screens smaller than medium size.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `flex-column` | This changes `flex-direction` of items (columns). Items are
    laid out either in the horizontal or vertical direction. The `flex-column` class
    changes the direction from left-to-right to top-to-bottom. |'
  prefs: []
  type: TYPE_TB
- en: '| `flex-<prefix>-first` | This reorders the column as the first column in the
    layout. The prefix defines the breakpoint the reordering should be applied from.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `flex-<prefix>-last` | This reorders the column as last column in the layout.
    The prefix described as earlier. |'
  prefs: []
  type: TYPE_TB
- en: '| `flex-<prefix>-unordered` | This displays the columns between first and last.
    The prefix described as earlier. |'
  prefs: []
  type: TYPE_TB
- en: 'Note that, on small devices, we have decreased the font size. This can be achieved
    with breakpoint mixins provided by Bootstrap:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'There are various breakpoint mixins, which expect one of the following parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`xs`: Extra small screens < 576px'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sm`: Small screens >= 576px'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`md`: Medium screens >= 768px'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`lg`: Large screens >= 992px'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`xl`: Extra large screens >= 1200px'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For example, the element with the `ge-palette` style class gets `margin-top:
    0` on screens over 768px, and `margin-top: 0.5em` on screens less than 768px:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: The complete graphic editor with Bootstrap 4 and PrimeNG is available on GitHub
    at
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/ova2/angular-development-with-primeng/tree/master/chapter2/graphic-editor-bootstrap4.](https://github.com/ova2/angular-development-with-primeng/tree/master/chapter2/graphic-editor-bootstrap4)'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After reading this chapter, you can distinguish between structural and skinning
    style classes. In short words, structural style classes define the skeleton of
    the components and the skinning ones are for theming. We have seen how to set
    up any PrimeNG theme and create a new one. A new theme can be created either by
    ThemeRoller or by setting custom values for Sass variables and CSS properties
    of an existing theme with subsequent compilation to a CSS file. We encourage to
    use a CSS preprocessor for a modular CSS architecture. Sass preprocessor helps
    in writing better styles. A guideline for organizing the Sass files was provided
    as well.
  prefs: []
  type: TYPE_NORMAL
- en: After reading this chapter, you are also able to use one of the responsive grid
    systems, either PrimeNG own or Bootstrap's one. PrimeNG offers a lightweight responsive
    and fluid layout system. Furthermore, PrimeNG components having built-in responsive
    mode when using the `.ui-fluid` style class on the top container element. The
    flexbox-based layout is a new standard and a benefit for every HTML5 web application.
    One of the main advantages of flexbox is the ability to fill an extra space--all
    columns have the same height. Bootstrap 4 adds support for the flexbox model and
    lets you develop stunning layouts.
  prefs: []
  type: TYPE_NORMAL
- en: Starting with the next chapter, we will dive deep into each component. Our journey
    into the exciting PrimeNG world begins with input and select components.
  prefs: []
  type: TYPE_NORMAL
