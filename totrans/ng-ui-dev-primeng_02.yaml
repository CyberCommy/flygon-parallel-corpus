- en: Theming Concepts and Layouts
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 主题概念和布局
- en: The main goal of this chapter is to provide an introduction to PrimeNG themes,
    layouts, and the concepts involved. The **theming** concept used in PrimeNG is
    similar to the jQuery ThemeRoller CSS Framework ([http://jqueryui.com/themeroller](http://jqueryui.com/themeroller)).
    PrimeNG components are designed to allow a developer to integrate them seamlessly
    into the look and feel of an entire web application. At the time of writing, there
    are 17 free themes and 5 premium themes and layouts. Free themes include ThemeRoller
    themes, a Twitter Bootstrap theme, and some custom themes powered by PrimeFaces
    and PrimeNG. Such themes are distributed along with PrimeNG itself under Apache
    License.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的主要目标是介绍PrimeNG主题、布局和相关概念。PrimeNG中使用的**主题**概念类似于jQuery ThemeRoller CSS框架（[http://jqueryui.com/themeroller](http://jqueryui.com/themeroller)）。PrimeNG组件旨在允许开发人员将它们无缝地集成到整个Web应用程序的外观和感觉中。在撰写本文时，有17个免费主题和5个高级主题和布局。免费主题包括ThemeRoller主题、Twitter
    Bootstrap主题和一些由PrimeFaces和PrimeNG提供支持的自定义主题。这些主题与PrimeNG本身一起根据Apache许可证进行分发。
- en: In [Chapter 1](0cbd9d79-a0ba-42ba-9172-2b76d8ad8788.xhtml), *Getting Started
    with Angular and PrimeNG*, we showed three possible setups and theme installations.
    You can also play with the free themes in the PrimeNG showcase ([https://www.primefaces.org/primeng](https://www.primefaces.org/primeng))
    by switching them dynamically--a theme switcher is available at the top-right
    corner. Premium themes can be purchased as standalone themes. You can preview
    premium themes and layouts in the PrimeNG Theme Gallery ([http://primefaces.org/themes](http://primefaces.org/themes)).
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第1章](0cbd9d79-a0ba-42ba-9172-2b76d8ad8788.xhtml)中，*使用Angular和PrimeNG入门*，我们展示了三种可能的设置和主题安装。您还可以在PrimeNG展示页面（[https://www.primefaces.org/primeng](https://www.primefaces.org/primeng)）中玩转免费主题，通过在右上角切换主题--可以使用主题切换器。高级主题可以作为独立主题购买。您可以在PrimeNG主题库（[http://primefaces.org/themes](http://primefaces.org/themes)）中预览高级主题和布局。
- en: Elite or pro users can use some premium themes (currently Omega) without extra
    costs. More information about license models can be found on the license page
    ([https://www.primefaces.org/licenses](https://www.primefaces.org/licenses)).
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 精英或专业用户可以在不额外费用的情况下使用一些高级主题（目前是Omega）。有关许可模型的更多信息，请访问许可页面（[https://www.primefaces.org/licenses](https://www.primefaces.org/licenses)）。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Understanding structural and skinning CSS
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解结构和皮肤CSS
- en: Organizing your project structure with SASS
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用SASS组织项目结构
- en: Simple ways to create a new theme
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建新主题的简单方法
- en: Responsive grid system in PrimeNG
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PrimeNG中的响应式网格系统
- en: Bootstrap's responsive layout meets PrimeNG
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Bootstrap的响应式布局符合PrimeNG
- en: Understanding structural and skinning CSS
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解结构和皮肤CSS
- en: 'Each component is styled with CSS and contains two layers of style information:
    structural or component-specific and skinning or component-independent styles.
    In this section, you will understand the difference between these two types of
    CSS, learn some useful selectors, and see an exemplary styling of the Paginator
    component in the generated HTML. Let''s start. Go to the Paginator showcase ([https://www.primefaces.org/primeng/#/paginator](https://www.primefaces.org/primeng/#/paginator))
    and explore the HTML code of the Paginator component. The next screenshot shows
    the HTML and styles in the Google Chrome DevTools.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 每个组件都使用CSS进行样式设置，并包含两层样式信息：结构或组件特定样式和皮肤或组件独立样式。在本节中，您将了解这两种类型的CSS之间的区别，学习一些有用的选择器，并查看在生成的HTML中Paginator组件的示例样式。让我们开始吧。转到Paginator展示页面（[https://www.primefaces.org/primeng/#/paginator](https://www.primefaces.org/primeng/#/paginator)）并探索Paginator组件的HTML代码。下一张截图显示了Google
    Chrome DevTools中的HTML和样式。
- en: 'Shortcuts for opening DevTools: *F12* (Windows), *command* + *option* + *I*
    (Mac).![](assets/61574c6b-b56b-4c92-af5a-6bb6c7071528.png)'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 打开DevTools的快捷键：*F12*（Windows），*command* + *option* + *I*（Mac）。![](assets/61574c6b-b56b-4c92-af5a-6bb6c7071528.png)
- en: 'The highlighted line in the preceding screenshot represents the container element
    of the Paginator component with the following style classes:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面截图中突出显示的行代表了Paginator组件的容器元素，具有以下样式类：
- en: '`ui-paginator`'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ui-paginator`'
- en: '`ui-unselectable-text`'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ui-unselectable-text`'
- en: '`ui-widget`'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ui-widget`'
- en: '`ui-widget-header`'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ui-widget-header`'
- en: The first two style classes `ui-paginator` and `ui-unselectable-text` are generated
    by PrimeNG. These are structural style classes. The first one provides a semantic
    presentation to indicate the role of an element. Other examples for such style
    classes are `ui-datatable` for a table and `ui-button` for a button.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 前两个样式类`ui-paginator`和`ui-unselectable-text`是由PrimeNG生成的。这些是结构样式类。第一个为元素提供语义呈现，指示元素的角色。其他类似的样式类示例包括`ui-datatable`用于表格和`ui-button`用于按钮。
- en: The second one is applied in situations where you want to avoid accidentally
    copy-pasting useless things, such as icons or images. In general, structural style
    classes define the skeleton of the components and include CSS properties such
    as margin, padding, display type, overflow behavior, dimensions, and positioning.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个样式类适用于希望避免意外复制粘贴无用内容（如图标或图像）的情况。一般来说，结构样式类定义了组件的骨架，并包括诸如边距、填充、显示类型、溢出行为、尺寸和定位等CSS属性。
- en: Almost every component documentation in the PrimeNG showcase contains a Styling
    section with the component's structural style classes.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: PrimeNG展示中几乎每个组件文档都包含一个带有组件结构样式类的样式部分。
- en: As already said, PrimeNG leverages the jQuery ThemeRoller CSS Framework. The
    `ui-widget` and `ui-widget-header` classes mentioned earlier are defined by ThemeRoller
    and affect the look and feel of the underlying HTML element and associated component.
    These are skinning style classes, which define CSS properties such as text colors,
    border colors, and background images.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 正如已经提到的，PrimeNG利用了jQuery ThemeRoller CSS框架。前面提到的`ui-widget`和`ui-widget-header`类是由ThemeRoller定义的，影响了底层HTML元素和相关组件的外观和感觉。这些是皮肤样式类，定义了诸如文本颜色、边框颜色和背景图像等CSS属性。
- en: '| **Selector** | **Applies** |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| **选择器** | **应用** |'
- en: '| `.ui-widget` | This is the class applied to all PrimeNG components. It applies,
    for example, font family and font size. |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| `.ui-widget` | 这是应用于所有PrimeNG组件的类。例如，它应用了字体系列和字体大小。|'
- en: '| `.ui-widget-header` | This is the class applied to the header section(s)
    of a component. |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| `.ui-widget-header` | 这是应用于组件的头部部分的类。|'
- en: '| `.ui-widget-content` | This is the class applied to the content section(s)
    of a component. |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| `.ui-widget-content` | 这是应用于组件的内容部分的类。|'
- en: '| `.ui-state-default` | This is the default class applied to clickable, button-like
    components, or their elements. |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| `.ui-state-default` | 这是应用于可点击的、类似按钮的组件或其元素的默认类。|'
- en: '| `.ui-state-hover` | This is the class applied on a `mouseover` event to clickable,
    button-like components, or their elements. |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| `.ui-state-hover` | 这是应用于可点击的、类似按钮的组件或其元素的`mouseover`事件的类。|'
- en: '| `.ui-state-active` | This is the class applied on a `mousedown` event to
    clickable, button-like components, or their elements. |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| `.ui-state-active` | 这是应用于可点击的、类似按钮的组件或其元素的`mousedown`事件的类。|'
- en: '| `.ui-state-disabled` | This is the class applied to components or their elements
    when they are disabled. |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| `.ui-state-disabled` | 这是应用于组件或其元素被禁用时的类。|'
- en: '| `.ui-state-highlight` | This is the class applied to components or their
    elements when they are highlighted or selected. |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| `.ui-state-highlight` | 这是应用于组件或其元素被突出显示或选中时的类。|'
- en: '| `.ui-corner-all` | This is the class that applies corner radius to all four
    corners of a component. |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| `.ui-corner-all` | 这是将圆角半径应用于组件的四个角的类。 |'
- en: '| `.ui-corner-top` | This is the class that applies corner radius to both top
    corners of a component. |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| `.ui-corner-top` | 这是将圆角半径应用于组件的顶部两个角的类。 |'
- en: '| `.ui-corner-bottom` | This is the class that applies corner radius to both
    bottom corners of a component. |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| `.ui-corner-bottom` | 这是将圆角半径应用于组件的底部两个角的类。 |'
- en: '| `.fa` | This is the class applied to elements representing an icon. |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| `.fa` | 这是应用于表示图标的元素的类。 |'
- en: These styles are applied consistently across all PrimeNG components, so a clickable
    button and accordion tab have the same `ui-state-default` class applied to indicate
    that they are clickable. When a user moves the mouse over one of these elements,
    this class gets changed to `ui-state-hover`, and then to `ui-state-active` when
    these elements are selected.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这些样式一贯地应用于所有PrimeNG组件，因此可点击的按钮和手风琴标签都应用了相同的`ui-state-default`类来指示它们是可点击的。当用户将鼠标移动到这些元素之一上时，这个类会被更改为`ui-state-hover`，当这些元素被选中时，又会变成`ui-state-active`。
- en: This approach makes it easy to ensure that all elements with a similar interaction
    state will look identical across all components. The main advantage of the presented
    PrimeNG selectors is a great flexibility in theming because you don't need to
    know each and every skinning selector to change the styles of all available components
    in your web application consistently.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法可以确保所有具有类似交互状态的元素在所有组件中看起来都是相同的。所提供的PrimeNG选择器的主要优势是在主题设置上具有很大的灵活性，因为您不需要了解每个皮肤选择器来一致地更改Web应用程序中所有可用组件的样式。
- en: In rare cases, some style classes are not generated by PrimeNG explicitly and
    not defined by the ThemeRoller. The Schedule component ([https://www.primefaces.org/primeng/#/schedule](https://www.primefaces.org/primeng/#/schedule))
    is one of such cases. It has structural classes `fc-head`, `fc-toolbar`, `fc-view-container`,
    and so on, which are controlled by the third-party plugin `FullCalendar` ([https://fullcalendar.io](https://fullcalendar.io)).
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在少数情况下，一些样式类并不是由PrimeNG明确生成的，也没有被ThemeRoller定义。日程安排组件（[https://www.primefaces.org/primeng/#/schedule](https://www.primefaces.org/primeng/#/schedule)）就是这样的情况之一。它具有结构类`fc-head`、`fc-toolbar`、`fc-view-container`等，这些类由第三方插件`FullCalendar`（[https://fullcalendar.io](https://fullcalendar.io)）控制。
- en: 'Free themes use the relative `em` unit to define the font size of the widgets
    having the `.ui-widget` class. This is `1em` by default. For example, the Omega
    theme defines the following:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 免费主题使用相对的`em`单位来定义具有`.ui-widget`类的小部件的字体大小。默认情况下为`1em`。例如，Omega主题定义了以下内容：
- en: '[PRE0]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Thanks to the `em` unit, the font size is easily customizable. It is suggested
    to apply a base font size on the `body` element to adjust the size of components
    throughout the web application:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`em`单位，字体大小很容易定制。建议在`body`元素上应用基本字体大小，以调整整个Web应用程序中组件的大小：
- en: '[PRE1]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Organizing your project structure with Sass
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Sass组织项目结构
- en: 'Every large frontend application needs a robust, scalable CSS architecture.
    A CSS preprocessor is indispensable--it helps to write cleaner, modular code with
    reusable pieces and maintain large and complex style sheets. A CSS preprocessor
    is basically a scripting language that extends CSS and compiles it into regular
    CSS. There are three primary CSS preprocessors today: Sass, LESS, and Stylus.
    As per Google Trends, Sass is the most used preprocessor today. Sass mimics the
    HTML structure and lets you nest CSS selectors that follow the same visual HTML
    hierarchy. With CSS, you would need to write this:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'With Sass, you can simply write this:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Sass is backward compatible with CSS, so you can easily convert your existing
    CSS files just by renaming the `.css` file extension to `.scss`.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: 'While nesting CSS selectors, you can use the handy `&` symbol. The `&` symbol
    concatenates CSS rules. For example, consider the following Sass snippet:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This will be compiled to the following:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The `&` symbol is also useful for sandboxed UI components when every component
    only uses class names prefixed with a unique namespace. For example, the following
    imaginary header module is sandboxed with the `.mod-header` namespace:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The output results in two classes: `.mod-header-link` and `.mod-header-menu`.
    As you see, Sass helps to avoid CSS collisions. It is recommended to write separate
    Sass files for each UI component and then combine them together by means of `@import`
    directive. With this directive, one Sass file can be imported into another one.
    The preprocessor will take the file that you want to import and combine it with
    the file you are importing into. This is a little bit different to the native
    CSS `@import`. The CSS `@import` always creates an HTTP request to fetch the imported
    file. The Sass `@import` combines the files so that one single CSS file will be
    sent to the browser.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: 'Another power Sass concept is **partial files**. It is possible to create partial
    Sass files that contain small snippets for inclusion into other Sass files. Two
    typical examples of partial files are **variables** and **mixins.** Variables
    facilitate storing information that you want to reuse throughout your style sheets.
    Variables begin with dollar signs. For example:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Usage:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'A mixin lets you make groups of CSS declarations that you want to reuse throughout
    your style sheets. They behave like parameterized functions. A mixin begins with
    the `@mixin` directive followed by a name. Let''s create a mixin to center any
    HTML content:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 混合器允许您创建要在样式表中重复使用的CSS声明组。它们的行为类似于带参数的函数。混合器以`@mixin`指令开头，后跟名称。让我们创建一个混合器来居中任何HTML内容：
- en: '[PRE9]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The mixin name is `center` and the parameter `$axis` has a default value `"both"`
    if you don''t pass the parameter value explicitly. The usage is simple--the mixin
    has to be included with the `@include` directive:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 混合器名称是`center`，参数`$axis`具有默认值`"both"`，如果您没有显式传递参数值。使用方法很简单--混合器必须使用`@include`指令包含：
- en: '[PRE10]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'This leads to the following:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这导致以下结果：
- en: '[PRE11]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'A partial file is named with a leading underscore, for example, `_variables.scss`,
    `_mixins.scss`. The underscore lets Sass know that the file should not be compiled
    to a CSS file. The underscore and file extension in the `@import` directive can
    be omitted:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 部分文件以前导下划线命名，例如，`_variables.scss`，`_mixins.scss`。下划线让Sass知道该文件不应编译为CSS文件。`@import`指令中的下划线和文件扩展名可以省略：
- en: '[PRE12]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Sass has more powerful features such as inheritance, operators, built-in functions,
    and handling media queries. Refer to the official Sass site for more details ([http://sass-lang.com](http://sass-lang.com)).
    You can play with Sass online on [http://www.sassmeister.com](http://www.sassmeister.com):'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: Sass还具有更强大的功能，如继承，运算符，内置函数和处理媒体查询。有关更多详细信息，请参阅官方Sass网站（[http://sass-lang.com](http://sass-lang.com)）。您可以在[http://www.sassmeister.com](http://www.sassmeister.com)上在线使用Sass：
- en: '![](assets/d22e162b-7454-4587-b393-52443f7daf92.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/d22e162b-7454-4587-b393-52443f7daf92.png)'
- en: 'Or you can use it at [http://sass.js.org](http://sass.js.org):'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 或者您可以在[http://sass.js.org](http://sass.js.org)使用它：
- en: '![](assets/60eef939-fd89-430b-9a5b-a59d6ec0fc22.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/60eef939-fd89-430b-9a5b-a59d6ec0fc22.png)'
- en: 'It is high time to provide a guideline for organizing your Sass files. What
    is a good CSS architecture and project structure with a lot of Sass files? When
    planning your CSS architecture, you should modularize directories and files into
    categories. There are several proposals and recommendations. At the end, it depends
    on conventions in your team. One of the popular proposals is The 7-1 Pattern ([https://sass-guidelin.es/#the-7-1-pattern](https://sass-guidelin.es/#the-7-1-pattern)).
    This architecture provides seven folders and one main file to import all files
    and compile them into a single file. These are as follows:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候为组织您的Sass文件提供指南了。有很多Sass文件的良好CSS架构和项目结构是什么？在规划CSS架构时，您应该将目录和文件模块化为类别。有几个提议和建议。最后，这取决于您团队中的约定。其中一个流行的提议是7-1模式（[https://sass-guidelin.es/#the-7-1-pattern](https://sass-guidelin.es/#the-7-1-pattern)）。这种架构提供了七个文件夹和一个主文件，用于导入所有文件并将它们编译成一个单一文件。它们如下：
- en: '`base/`: This folder contains global styles, such as CSS resets, typography,
    colors, and so on. For example:'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`base/`: 此文件夹包含全局样式，如CSS重置，排版，颜色等。例如：'
- en: '`_reset.scss`'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`_reset.scss`'
- en: '`_typography.scss`'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`_typography.scss`'
- en: '`helpers/`: This folder contains Sass tools and helpers, such as variables,
    mixins, functions, and so on. This folder should not output a single line of CSS
    when compiled on its own:'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`helpers/`: 此文件夹包含Sass工具和辅助程序，如变量，混合器，函数等。该文件夹在单独编译时不应输出任何一行CSS：'
- en: '`_variables.scss`'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`_variables.scss`'
- en: '`_mixins.scss`'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`_mixins.scss`'
- en: '`components/`: This folder holds styles for self-contained components. These
    are normally widgets--small building blocks other components can be composed of.
    For example:'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`components/`: 此文件夹包含独立组件的样式。这些通常是小部件，其他组件可以由它们组合而成。例如：'
- en: '`_button.scss`'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`_button.scss`'
- en: '`_carousel.scss`'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`_carousel.scss`'
- en: '`layout/`: This folder holds macro layout styles for larger components, such
    as CSS grid, header, footer, sidebar, and so on:'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`layout/`: 这个文件夹包含了更大组件的宏布局样式，比如CSS网格、页眉、页脚、侧边栏等等：'
- en: '`_header.scss`'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`_header.scss`'
- en: '`_footer.scss`'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`_footer.scss`'
- en: '`pages/`: This is an optional folder, which contains page-specific styles:'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pages/`: 这是一个可选的文件夹，其中包含特定于页面的样式：'
- en: '`_home.scss`'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`_home.scss`'
- en: '`_about.scss`'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`_about.scss`'
- en: '`themes/`: This is an optional folder, which contains styling for different
    themes. It makes sense for large sites with multiple themes:'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`themes/`: 这是一个可选的文件夹，其中包含不同主题的样式。对于具有多个主题的大型网站来说是有意义的：'
- en: '`_omega.scss`'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`_omega.scss`'
- en: '`_ultima.scss`'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`_ultima.scss`'
- en: '`vendors/`: This folder contains files from external libraries and frameworks,
    such as Bootstrap, jQueryUI, Select2, and so on:'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`vendors/`: 这个文件夹包含来自外部库和框架的文件，比如Bootstrap、jQueryUI、Select2等等：'
- en: '`bootstrap.scss`'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bootstrap.scss`'
- en: '`jquery-ui.scss`'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jquery-ui.scss`'
- en: Some folders are project specific and might not exist in many projects. Folder
    names are arbitrary. For instance, the `components/` folder might also be called
    `modules/`, depending on what you prefer. In Angular projects, each Sass file
    for component styling resides in the same folder as the corresponding component.
    There is no dedicated folder for them.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 有些文件夹是特定于项目的，可能在许多项目中不存在。文件夹名称是任意的。例如，`components/`文件夹也可以根据您的喜好称为`modules/`。在Angular项目中，每个组件样式的Sass文件都驻留在与相应组件相同的文件夹中。没有专门的文件夹供它们使用。
- en: 'For this book, a demo project was born--an imaginary graphic editor that demonstrates
    styling concepts. The web application is built on top of Angular 4 and Bootstrap
    3 ([http://getbootstrap.com](http://getbootstrap.com)). It has various panels
    on the left and right sides as well as a toolbar. The layout is responsive--panels
    get stacked on small screens. All styling files are gathered in the `main.scss`
    file:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本书来说，诞生了一个演示项目--一个想象的图形编辑器，演示了样式概念。这个Web应用是建立在Angular 4和Bootstrap 3之上的（[http://getbootstrap.com](http://getbootstrap.com)）。它在左右两侧有各种面板以及一个工具栏。布局是响应式的--在小屏幕上，面板会堆叠。所有样式文件都被收集在`main.scss`文件中：
- en: '[PRE13]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The complete graphic editor with Sass files is available on GitHub at
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 带有Sass文件的完整图形编辑器可以在GitHub上找到
- en: '[https://github.com/ova2/angular-development-with-primeng/tree/master/chapter2/graphic-editor-sass.](https://github.com/ova2/angular-development-with-primeng/tree/master/chapter2/graphic-editor-sass)'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/ova2/angular-development-with-primeng/tree/master/chapter2/graphic-editor-sass.](https://github.com/ova2/angular-development-with-primeng/tree/master/chapter2/graphic-editor-sass)'
- en: 'Once `main.scss` file is imported into the file where you bootstrap the Angular
    application, Webpack creates a link to the `main.css` in `index.html` automatically
    (thanks to `HtmlWebpackPlugin`):'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦`main.scss`文件被导入到引导Angular应用程序的文件中，Webpack会自动在`index.html`中创建一个到`main.css`的链接（感谢`HtmlWebpackPlugin`）：
- en: '[PRE14]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: More flexible and modern responsive layout with Bootstrap 4 will be illustrated
    in the *Bootstrap flexbox layout meets PrimeNG* section. The graphic editor serves
    as a basis for a new demo application.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '*Bootstrap flexbox布局满足PrimeNG*部分将展示更灵活和现代的响应式布局。图形编辑器作为一个新的演示应用的基础。 '
- en: Simple ways to create a new theme
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建新主题的简单方法
- en: We sometimes need to create our own themes instead of using the predefined ones.
    Web applications should often feature a company-specific look and feel, which
    is constant and preset by company-wide style guides. Creating new themes is easy
    with PrimeNG, because it is powered by the ThemeRoller CSS Framework ([http://jqueryui.com/themeroller](http://jqueryui.com/themeroller)).
    ThemeRoller provides a powerful and easy-to-use online visual tool. In this section,
    we will systematically show all the required steps to create a new theme. There
    are two ways how to create a new theme, either by ThemeRoller or from scratch
    with Sass.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有时需要创建自己的主题，而不是使用预定义的主题。Web应用程序通常应该具有公司特定的外观和感觉，这是由公司范围的样式指南固定和预设的。使用PrimeNG创建新主题很容易，因为它由ThemeRoller
    CSS框架（[http://jqueryui.com/themeroller](http://jqueryui.com/themeroller)）提供支持。ThemeRoller提供了一个功能强大且易于使用的在线可视工具。在本节中，我们将系统地展示创建新主题所需的所有步骤。有两种方法可以创建新主题，一种是通过ThemeRoller，另一种是使用Sass从头开始。
- en: ThemeRoller approach
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 主题滚动器方法
- en: To gain first-hand experience of the ThemeRoller online visual tool, go to the
    ThemeRoller home page, explore the available theme's gallery, and play with the
    CSS properties to see changes for widgets embedded on the page. All CSS changes
    will be applied on the fly.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 要第一手体验ThemeRoller在线可视工具，请转到ThemeRoller主页，浏览可用主题库，并调整CSS属性以查看页面上嵌入的小部件的变化。所有CSS更改都将实时应用。
- en: '![](assets/3ae3aff6-a6ba-4580-a76e-e44448a327b6.png)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/3ae3aff6-a6ba-4580-a76e-e44448a327b6.png)'
- en: We have to select one of the existing themes (the Gallery tab) and edit it (the
    Roll Your Own tab). A click on the Download theme button accomplishes the work.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须选择现有主题（“画廊”选项卡）并编辑它（“自定义”选项卡）。单击“下载主题”按钮即可完成工作。
- en: We should deselect the Toggle All checkbox under the Components option on the
    Download Builder page so that our new theme only includes the skinning styles.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该在下载生成器页面的组件选项下取消选择“全部切换”复选框，以便我们的新主题只包括皮肤样式。
- en: 'Next, we need to migrate the downloaded theme files from ThemeRoller to the
    PrimeNG theme infrastructure. The migration steps are straightforward:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要将从ThemeRoller下载的主题文件迁移到PrimeNG主题基础设施。迁移步骤很简单：
- en: The theme package that we have downloaded will have a CSS file `jquery-ui.theme.css`
    (as well as minified variant) and the `images` folder. Extract the package and
    rename the CSS file as `theme.css`.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们下载的主题包将包含一个CSS文件`jquery-ui.theme.css`（以及缩小的变体）和`images`文件夹。解压包并将CSS文件重命名为`theme.css`。
- en: In your web application, create a folder with the name of the new theme, for
    example, `src/assets/themes/crazy`.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的Web应用程序中，创建一个名为新主题的文件夹，例如`src/assets/themes/crazy`。
- en: Copy `theme.css` and the `images` folder into `src/assets/themes/crazy`.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`theme.css`和`images`文件夹复制到`src/assets/themes/crazy`中。
- en: 'After you are done with these steps, you can create a link to the `theme.css`
    in the `index.html` file:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这些步骤后，您可以在`index.html`文件中创建一个指向`theme.css`的链接：
- en: '[PRE15]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: This was the easiest way to create your custom themes without requiring knowledge
    of CSS.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 这是创建自定义主题的最简单方法，无需了解CSS知识。
- en: The Sass approach
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Sass方法
- en: The second way is more flexible and accurate. It is preferable to create a new
    theme manually by Sass because the theme is better maintainable. The main CSS
    settings, such as font, colors, border radius, and many more can be done configurable
    by Sass variables. You can create a new theme by setting custom values for those
    variables. This is exactly the approach followed by PrimeNG. The mostly free themes
    were created in such manner.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 第二种方法更灵活和准确。最好通过Sass手动创建新主题，因为主题更易维护。主要的CSS设置，如字体、颜色、边框半径等，可以通过Sass变量进行配置。您可以通过为这些变量设置自定义值来创建新主题。PrimeNG正是采用了这种方法。大多数免费主题都是以这种方式创建的。
- en: The free themes are hosted on GitHub at [https://github.com/primefaces/primeng/tree/master/resources/themes](https://github.com/primefaces/primeng/tree/master/src/assets/components/themes).
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 免费主题托管在GitHub上，网址为[https://github.com/primefaces/primeng/tree/master/resources/themes](https://github.com/primefaces/primeng/tree/master/src/assets/components/themes)。
- en: 'Every theme has a separate folder with a Sass file where variables are set.
    The variables themselves are used in `_theme.scss`--shared file for all free themes.
    This file can be found under `node_modules/primeng/resources/themes/`, if you
    install PrimeNG as the dependency. Sometimes, you also need to set custom fonts
    or special settings for particular CSS selectors. You can overwrite default style
    rules with your own ones--just write them after importing `_theme.scss`. The general
    structure of the custom theme file looks like as follows:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 每个主题都有一个单独的文件夹，其中包含设置变量的Sass文件。这些变量本身在`_theme.scss`中使用--这是所有免费主题共享的文件。如果您将PrimeNG安装为依赖项，则可以在`node_modules/primeng/resources/themes/`下找到此文件。有时，您还需要为特定的CSS选择器设置自定义字体或特殊设置。您可以用自己的样式规则覆盖默认样式规则--只需在导入`_theme.scss`后编写它们。自定义主题文件的一般结构如下所示：
- en: '[PRE16]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Let''s create the following folder structure with three Sass files for a new
    `crazy` theme:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建以下文件夹结构，其中包含三个用于新`crazy`主题的Sass文件：
- en: '[PRE17]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Sass variables can be copied from any other theme, such as Omega and placed
    in `_variables.scss`. Some of them get custom values as shown here:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: Sass变量可以从任何其他主题（如Omega）复制，并放置在`_variables.scss`中。其中一些变量会有自定义值，如下所示：
- en: '[PRE18]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'As you see, we would like to use a custom font `Quicksand`. You can download
    this font in the `.otf` format (OpenType Font) from this free resource: [https://www.fontsquirrel.com/fonts/quicksand](https://www.fontsquirrel.com/fonts/quicksand).
    For cross-browser support, we need fonts in four formats: `.ttf`, `.eot`, `.woff`,
    and `.svg`. There are many converter tools and one of these can be found at [http://www.font2web.com](http://www.font2web.com),
    which allows converting any `.otf` file to the mentioned four formats. After conversion,
    custom fonts should be moved to the `fonts` folder and installed via the `@font-face`
    rule.'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们希望使用自定义字体`Quicksand`。您可以从这个免费资源以`.otf`格式（OpenType Font）下载这种字体：[https://www.fontsquirrel.com/fonts/quicksand](https://www.fontsquirrel.com/fonts/quicksand)。为了跨浏览器支持，我们需要四种格式的字体：`.ttf`、`.eot`、`.woff`和`.svg`。有许多转换工具，其中之一可以在[http://www.font2web.com](http://www.font2web.com)找到，它允许将任何`.otf`文件转换为上述四种格式。转换后，自定义字体应该被移动到`fonts`文件夹，并通过`@font-face`规则安装。
- en: 'Furthermore, we want to have pink gradient colors for widget''s header and
    red borders around invalid fields. All these custom rules are done in the theme
    file `theme.scss`. An excerpt from this file illustrates the idea:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们希望小部件标题使用粉色渐变颜色，无效字段周围有红色边框。所有这些自定义规则都在主题文件`theme.scss`中完成。此文件的摘录说明了这个想法：
- en: '[PRE19]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The complete project with the `crazy` theme is available on GitHub at
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '`crazy`主题的完整项目可以在GitHub上找到'
- en: '[https://github.com/ova2/angular-development-with-primeng/tree/master/chapter2/custom-theme.](https://github.com/ova2/angular-development-with-primeng/tree/master/chapter2/custom-theme)'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/ova2/angular-development-with-primeng/tree/master/chapter2/custom-theme.](https://github.com/ova2/angular-development-with-primeng/tree/master/chapter2/custom-theme)'
- en: 'The proposed structure allows to create as many themes as you want. But, how
    to compile `theme.scss` to `theme.css`? There are two ways to compile Sass to
    CSS:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 建议的结构允许创建任意数量的主题。但是，如何将`theme.scss`编译成`theme.css`呢？有两种将Sass编译成CSS的方法：
- en: Install the Sass from the command line. The installation process is described
    on the Sass homepage ([http://sass-lang.com/install](http://sass-lang.com/install)).
    Note that you need preinstalled Ruby. Once Sass is installed, you can run `sass
    theme.scss theme.css` from your terminal.
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use `node-sass` ([https://github.com/sass/node-sass](https://github.com/sass/node-sass))
    under Node.js.
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the project on GitHub, we used `node-sass` along with `autoprefixer` ([https://github.com/postcss/autoprefixer](https://github.com/postcss/autoprefixer))
    and `cssnano` ([http://cssnano.co](http://cssnano.co)). All required dependencies
    are installed locally:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Four handy npm scripts in `package.json` help to create the theme file:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The `@import "primeng/resources/themes/theme"` path is found thanks to the `--include-path
    node_modules/` option, which sets the path to look for the imported files. This
    helps to avoid all the mess with relative paths.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: 'The `npm run build:css` command will produce `theme.min.css`, which should
    be included on the page:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The look and feel of the new theme is amazing:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/62845b68-aba2-4c25-ba07-8ebd89f0da3b.png)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
- en: The responsive grid system in PrimeNG
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: PrimeNG has **Grid CSS**--a responsive and fluid layout system optimized for
    mobile devices, tablets, and desktops. PrimeNG components use Grid CSS internally,
    but this lightweight utility can be used as standalone as well. CSS Grid is based
    on the 12-columns layout as many other grid systems. The total width of all columns
    is 100%. In this section, we will explain all features of the PrimeNG grid system
    in details.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: Basic principles
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The layout container should have the `ui-g` style class. Children elements
    of the layout container become columns when they are prefixed with `ui-g-*` where
    `*` is any number from 1 to 12\. The number expresses the taken space of 12 available
    units. When the number of columns exceeds 12, columns wrap to the next line:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The following layout has two lines (rows):'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/643b5dfc-196b-4da6-b0fd-1644f939d3cd.png)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
- en: 'The same two-row layout is also possible with two `ui-g` containers:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Generally, *n* containers with the `ui-g` style class creates *n* rows.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
- en: Nested columns
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Columns can be nested in more complex layouts. To achieve that, just nest elements
    with the `ui-g-*` style classes:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'With this structure, columns with different content will not have equal height.
    There is a more robust solution to force equal height for columns with different
    content. Just wrap the internal `div` elements inside another `div` with the `ui-g`
    style class or even simpler, assign `ui-g` to the column having nested columns:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The result looks like the following:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/e96d526f-f1fd-4ad4-93dd-ef80d565a14e.png)Columns have a default
    padding of `0.5em`. To remove it, you need to apply the `ui-g-nopad` style class.
    This was demonstrated in the earlier examples.'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
- en: Responsive and fluid layout
  id: totrans-158
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Responsive layout is achieved by applying additional classes to the columns.
    Four screen sizes are supported with different breakpoints.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
- en: '| **Prefix** | **Device** | **Size** |'
  id: totrans-160
  prefs: []
  type: TYPE_TB
- en: '| `ui-sm-*` | Small devices like phones | `max-width: 640px` |'
  id: totrans-161
  prefs: []
  type: TYPE_TB
- en: '| `ui-md-*` | Medium-sized devices like tablets | `min-width: 641px` |'
  id: totrans-162
  prefs: []
  type: TYPE_TB
- en: '| `ui-lg-*` | Large-sized devices like desktops | `min-width: 1025px` |'
  id: totrans-163
  prefs: []
  type: TYPE_TB
- en: '| `ui-xl-*` | Big screen monitors | `min-width: 1441px` |'
  id: totrans-164
  prefs: []
  type: TYPE_TB
- en: 'When an element features multiple style classes listed in the table, they get
    applied from the bottom to the top. Let''s take an example:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: What is happening here?
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
- en: On large screens, three columns are displayed in proportion 2:12, 2:12, and
    8:12.
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: On medium screens, two rows are displayed. The first row has equal columns and
    the second row has a column 4:12.
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: On small screens (mobile devices) columns get stacked--each column is displayed
    in its own row.
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The screenshot shows the arrangement of columns on medium-sized devices:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/daa75ad7-7fe2-4cf3-a36b-8a745a9b8ec5.png)'
  id: totrans-172
  prefs: []
  type: TYPE_IMG
- en: 'PrimeNG components have a built-in responsive mode. They understand a special
    `ui-fluid` style class. The Grid CSS and any other grid system can be used together
    with this style class, which provides a 100% width to components. This behavior
    helps to use the screen space efficiently. An example demonstrates various components
    in the fluid layout:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'The layout from medium up to big screens looks as follows:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/86b5cdab-9375-4eb7-b385-44e4c3bbd4dd.png)'
  id: totrans-176
  prefs: []
  type: TYPE_IMG
- en: 'The layout on small screens has stacked columns:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/3bab0f56-a8cf-4568-bc14-bea917f27b00.png)'
  id: totrans-178
  prefs: []
  type: TYPE_IMG
- en: 'As you can see, all right-aligned labels become left aligned. You can achieve
    this behavior with media queries:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: The complete demo application with instructions is available on GitHub at
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/ova2/angular-development-with-primeng/tree/master/chapter2/primeng-grid-css.](https://github.com/ova2/angular-development-with-primeng/tree/master/chapter2/primeng-grid-css)'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
- en: Bootstrap flexbox layout meets PrimeNG
  id: totrans-183
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will reimplement the graphic editor introduced in the *Organizing
    your project structure with Sass* section with Bootstrap 4 ([https://v4-alpha.getbootstrap.com](https://v4-alpha.getbootstrap.com))
    and PrimeNG components. Starting with the version v4.0.0-alpha.6, Bootstrap only
    has a flexbox-based layout by default, with no fallback.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
- en: '**Flexbox** is a new layout model, which is widely supported in all modern
    browsers ([http://caniuse.com/#search=flexbox](http://caniuse.com/#search=flexbox)).
    There are many tutorials on the Internet. You can, for example, read a comprehensive
    guide to the CSS flexbox layout at [https://css-tricks.com/snippets/css/a-guide-to-flexbox](https://css-tricks.com/snippets/css/a-guide-to-flexbox).
    Flexbox tackles many layout problems. One of the main advantages of flexbox is
    the ability to fill extra space. All columns in the flexbox layout have the same
    height irrespective of their content. Let''s show final screens of the graphic
    editor for two device resolutions.'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
- en: 'For desktop:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/9b6cf052-35eb-4e31-b089-c8192e78f549.png)'
  id: totrans-187
  prefs: []
  type: TYPE_IMG
- en: 'For mobile:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/08227be2-bbd3-455d-b231-2fce6ee922f1.png)'
  id: totrans-189
  prefs: []
  type: TYPE_IMG
- en: 'Beside PrimeNG, we need to install the latest Bootstrap 4\. This is 4.0.0-alpha.6
    at the time of writing:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'After installation, you need to import the CSS file with flexbox layout rules
    into the `main.scss` file:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'In the prior Bootstrap versions, you had to enable the flexbox layout explicitly:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'If you intend to use the styles for additional flex alignment options, you
    have to import `bootstrap-grid.scss` and `_flex.scss`:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '`_flex.scss` is a set of utilities for vertically and horizontally alignment
    of columns, for controlling the visual order of your content, and so on. The file
    contains various CSS rules such as `justify-content-start`, `align-items-end`,
    `align-self-auto`, `flex-first`, `flex-last`, and so on. Some of the rules are
    explained here. Refer to the official Bootstrap documentation to learn more details
    ([https://v4-alpha.getbootstrap.com/layout/grid](https://v4-alpha.getbootstrap.com/layout/grid)).'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
- en: 'The skeleton of the whole application resides in two files: `app.component.html`
    and `layout.component.html`. The first file contains a PrimeNG''s tabbed menu
    with two menu items:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Each item defines `routerLink`:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'A click on a tab in the tabbed menu loads `layout.component.html` into `router-outlet`:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: The `ng-content` area gets replaced by SVG or Canvas surface where the user
    can draw shapes. The `ge-toolbar` component contains PrimeNG's `<p-toolbar>`.
    The other `ge-*` components contain panels, for example, `<p-panel header="Palette">`.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
- en: 'The most interesting part is the style classes. The short description of the
    style classes used in the preceding code snippet is as follows:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
- en: '| **Style class** | **Description** |'
  id: totrans-207
  prefs: []
  type: TYPE_TB
- en: '| `row` | This serves as a container for columns that go inside the row. Each
    column can take from 1 to 12 spaces. |'
  id: totrans-208
  prefs: []
  type: TYPE_TB
- en: '| `align-items-*` | This defines where flex columns inside the row are vertically
    positioned. The `align-items-center` class positions the column in the middle.
    |'
  id: totrans-209
  prefs: []
  type: TYPE_TB
- en: '| `no-gutters` | This removes the margin from rows and padding from columns.
    |'
  id: totrans-210
  prefs: []
  type: TYPE_TB
- en: '| `col` | This sets the `auto-layout` mode--a new feature of the Bootstrap
    4 for equal width columns. The columns will automatically distribute the space
    in the row. |'
  id: totrans-211
  prefs: []
  type: TYPE_TB
- en: '| `col-<prefix>-<number>` | This indicates the number of columns you would
    like to use out of the possible 12 per row. The prefix defines the breakpoint.
    For example, the `col-md-8` class means, the column will be 8 of 12 on medium,
    and larger screens and 12 of 12 (default) on screens smaller than medium size.
    |'
  id: totrans-212
  prefs: []
  type: TYPE_TB
- en: '| `flex-column` | This changes `flex-direction` of items (columns). Items are
    laid out either in the horizontal or vertical direction. The `flex-column` class
    changes the direction from left-to-right to top-to-bottom. |'
  id: totrans-213
  prefs: []
  type: TYPE_TB
- en: '| `flex-<prefix>-first` | This reorders the column as the first column in the
    layout. The prefix defines the breakpoint the reordering should be applied from.
    |'
  id: totrans-214
  prefs: []
  type: TYPE_TB
- en: '| `flex-<prefix>-last` | This reorders the column as last column in the layout.
    The prefix described as earlier. |'
  id: totrans-215
  prefs: []
  type: TYPE_TB
- en: '| `flex-<prefix>-unordered` | This displays the columns between first and last.
    The prefix described as earlier. |'
  id: totrans-216
  prefs: []
  type: TYPE_TB
- en: 'Note that, on small devices, we have decreased the font size. This can be achieved
    with breakpoint mixins provided by Bootstrap:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'There are various breakpoint mixins, which expect one of the following parameters:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
- en: '`xs`: Extra small screens < 576px'
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sm`: Small screens >= 576px'
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`md`: Medium screens >= 768px'
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`lg`: Large screens >= 992px'
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`xl`: Extra large screens >= 1200px'
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For example, the element with the `ge-palette` style class gets `margin-top:
    0` on screens over 768px, and `margin-top: 0.5em` on screens less than 768px:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: The complete graphic editor with Bootstrap 4 and PrimeNG is available on GitHub
    at
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/ova2/angular-development-with-primeng/tree/master/chapter2/graphic-editor-bootstrap4.](https://github.com/ova2/angular-development-with-primeng/tree/master/chapter2/graphic-editor-bootstrap4)'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-229
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After reading this chapter, you can distinguish between structural and skinning
    style classes. In short words, structural style classes define the skeleton of
    the components and the skinning ones are for theming. We have seen how to set
    up any PrimeNG theme and create a new one. A new theme can be created either by
    ThemeRoller or by setting custom values for Sass variables and CSS properties
    of an existing theme with subsequent compilation to a CSS file. We encourage to
    use a CSS preprocessor for a modular CSS architecture. Sass preprocessor helps
    in writing better styles. A guideline for organizing the Sass files was provided
    as well.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
- en: After reading this chapter, you are also able to use one of the responsive grid
    systems, either PrimeNG own or Bootstrap's one. PrimeNG offers a lightweight responsive
    and fluid layout system. Furthermore, PrimeNG components having built-in responsive
    mode when using the `.ui-fluid` style class on the top container element. The
    flexbox-based layout is a new standard and a benefit for every HTML5 web application.
    One of the main advantages of flexbox is the ability to fill an extra space--all
    columns have the same height. Bootstrap 4 adds support for the flexbox model and
    lets you develop stunning layouts.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
- en: Starting with the next chapter, we will dive deep into each component. Our journey
    into the exciting PrimeNG world begins with input and select components.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
