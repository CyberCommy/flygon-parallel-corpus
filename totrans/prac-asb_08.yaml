- en: Consuming and Creating Plugins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Modules have been a very obvious and key part of our journey through Ansible
    so far. They are used to execute well-defined tasks and can be used either in
    one-off commands (using ad hoc commands) or as part of a much larger playbook.
    Plugins are just as important to Ansible, and we have used them in all of our
    testings so far without even realizing it! While modules are always used to create
    some kind of task in Ansible, the way that plugins are used depends on their use
    case. There are many different types of plugins; we will introduce them to you
    in this chapter and give you an idea of their purpose. But, as a taster, did you
    realize that when Ansible connects to a remote server using SSH, functionality
    is provided by a connection plugin? This demonstrates the important role that
    plugins play.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will provide you with an in-depth introduction to plugins,
    as well as show you how to explore the various plugins that come with Ansible.
    We'll then expand on this by demonstrating how you can create your own plugins
    and use them in an Ansible project, in very much the same way as we did with our
    custom module in the previous chapter. This will hopefully help you to understand
    the limitless possibilities that open source software such as Ansible provides.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Discovering the plugin types
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finding the included plugins
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating custom plugins
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter assumes that you have set up your control host with Ansible, as
    detailed in [Chapter 1](0efc8364-b8a4-4866-9ff4-1e2d09f6724b.xhtml), *Getting
    Started with Ansible*, and that you are using the most recent version available.
    The examples in this chapter are tested with Ansible 2.9\. This chapter also assumes
    that you have at least one additional host to test against; ideally, this should
    be Linux-based.
  prefs: []
  type: TYPE_NORMAL
- en: Although we will give specific examples of hostnames in this chapter, you are
    free to substitute them with your own hostname and/or IP addresses, and details
    of how to do this are provided at the appropriate places. The plugin development
    work covered in this chapter assumes the presence of a Python 2 or Python 3 development
    environment on your computer, and that you are running either Linux, FreeBSD,
    or macOS. Where additional Python modules are needed, their installation is documented.
    The task of building module documentation has some very specific requirements
    in Python 3.5 or later, so it is assumed you can install a suitable Python environment
    if you wish to attempt this.
  prefs: []
  type: TYPE_NORMAL
- en: The code bundle for this chapter is available at [https://github.com/PacktPublishing/Ansible-2-Cookbook/tree/master/Chapter%206](https://github.com/PacktPublishing/Ansible-2-Cookbook/tree/master/Chapter%206).
  prefs: []
  type: TYPE_NORMAL
- en: Finding included plugins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we discussed in the preceding section, plugins are not as apparent in Ansible
    as their module counterparts are, and yet we have been using them behind the scenes
    in every single Ansible command we've issued so far! Let's build on our work in
    the previous section, where we looked at the plugin documentation by looking at
    where we can find the source code for the plugins. This, in turn, will serve as
    a precursor to us building a simple plugin of our own.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you installed Ansible on a Linux system using a package manager (that is,
    via an RPM or DEB package), then the location of your plugins will depend on your
    OS. For example, on my test CentOS 7 system where I installed Ansible from the
    official RPM package, I can see the plugins installed here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Notice how the plugins are separated into subdirectories, all named after their
    categories. If we want to look up the `paramiko_ssh` plugin that we reviewed the
    documentation of in the preceding section, we can look in the `connection/` subdirectory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'However, in general, I do not recommend that you edit or change the files installed
    from a package as you might all too easily overwrite them when upgrading the package.
    As one of our goals in this chapter is to write our own simple custom plugin,
    let''s look at how to find the plugins in the official Ansible source code:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Clone the official Ansible repository from GitHub, as we did previously, and
    change the directory to the location of your clone:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Within the official source code directory structure, you will find that the
    plugins are all contained (again, in categorized subdirectories) under `lib/ansible/plugins/`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'We can explore the connection-based plugins by looking in the `connection`
    directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The exact contents of this directory will depend on the version of Ansible
    source code that you have cloned. At the time of writing, it looks as follows,
    with one Python file for each plugin (similar to how we saw one Python file for
    each module in [Chapter 5](6f89dca6-e6ba-4229-a7fd-dc4ef5ca39f5.xhtml),  *Consuming
    and Creating Modules*):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'You can review the contents of each plugin to learn more about how they work,
    which is again part of the beauty of open source software:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'An example of the beginning of this file is shown in the following code block
    to give you an idea of the kind of output you should be seeing if this command
    runs correctly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Notice the `DOCUMENTATION` block, which is very similar to what we saw when
    we were working with the module source code. If you explore the source code of
    each plugin, you will find that the structure bears some similarity to the module
    code structure. However, rather than simply taking this statement at face value,
    in the next section, let's get started with building our very own custom plugin
    to learn, through a practical example, how they are put together.
  prefs: []
  type: TYPE_NORMAL
- en: Creating custom plugins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will take you through a practical guide on creating your
    own plugin. The example will be, by necessity, simple. However, hopefully, it
    will serve you well in guiding you in the principles and best practices of plugin
    development and give you a solid foundation to build your own more complex plugins.
    We will even show you how to integrate these with your own playbooks and, when
    you're ready, submit them to the official Ansible project for inclusion.
  prefs: []
  type: TYPE_NORMAL
- en: 'As we noted when we built our own module, Ansible is written in Python, and
    its plugins are no exception. As a result, you will need to write your plugin
    in Python; so, to get started on developing your own plugin, you will need to
    make sure you have Python and a few essential tools installed. If you already
    have Ansible running on your development machine, you probably have the required
    packages installed. However, if you are starting from scratch, you will need to
    install Python, the Python package manager (`pip`), and perhaps some other development
    packages. The exact process will vary widely between OSes, but here are some examples
    to get you started:'
  prefs: []
  type: TYPE_NORMAL
- en: 'On Fedora, you can run the following command to install the required packages:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Similarly, on CentOS, you can run the following command to install the required
    packages:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'On Ubuntu, you can run the following commands to install the packages you will
    need:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'If you are working on macOS and using the Homebrew packaging system, the following
    command will install the packages you need:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Once you have installed the required packages, you will need to clone the Ansible
    Git repository to your local machine, as there are some valuable scripts in there
    that we will need later on in the module development process. Use the following
    command to clone the Ansible repository to your current directory on your development
    machine:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: With all of these prerequisites in place, let's get started with creating your
    own plugin. Although there are many similarities between coding modules and plugins,
    there are also fundamental differences. In fact, each of the different types of
    plugins that Ansible can work with is actually coded slightly differently and
    has different recommendations. Sadly, we don't have space to go through each one
    in this book, but you can find out more about the requirements for each plugin
    type from the official Ansible documentation at [https://docs.ansible.com/ansible/latest/dev_guide/developing_plugins.html](https://docs.ansible.com/ansible/latest/dev_guide/developing_plugins.html).
  prefs: []
  type: TYPE_NORMAL
- en: For our simple example, we'll create a filter plugin that replaces a given string
    with another. If you refer to the preceding documentation link, filter plugins
    are perhaps some of the easiest ones to code because there isn't a stringent requirement
    on the documentation in the same way that there is for modules. However, if we
    were to create a `lookup` plugin, we would be expected to create the same `DOCUMENTATION`,
    `EXAMPLES`, and `RETURN` documentation sections that we created in [Chapter 5](6f89dca6-e6ba-4229-a7fd-dc4ef5ca39f5.xhtml),
    *Consuming and Creating Modules*. We would also need to test and build our web
    documentation in the same way.
  prefs: []
  type: TYPE_NORMAL
- en: We have already covered this, so it doesn't serve to repeat the entirety of
    this process again in this chapter. Instead, we will focus on creating a filter
    plugin, first. In contrast with other Ansible plugins and modules, you can actually
    have several filters defined in a single Python plugin file. Filters are, by nature,
    quite compact to code. They are also numerous, so having one file per filter doesn't
    scale well. However, if you want to code other types of plugins (such as `lookup`
    plugins), you *will* need to create one Python file per plugin.
  prefs: []
  type: TYPE_NORMAL
- en: Let's get started on creating our simple filter plugin. As we are only creating
    one, it will live in its own single Python file. You could propose a modification
    to one of the Ansible core filter Python files if you want to submit your code
    back to the Ansible project; but for now, we'll leave that as a project for you
    to complete yourself. Our filter file will be called `custom_filter.py` and it
    will live in a directory called `filter_plugins`, which must be in the same directory
    as your playbook.
  prefs: []
  type: TYPE_NORMAL
- en: 'Perform the following steps to create and test your plugin code:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Start your plugin file with a header so that people will know who wrote the
    plugin and what license it is released under. Naturally, you should update both
    the copyright and license fields with values appropriate to your plugin, but the
    following text is given as an example for you to get started with:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we''ll add a very simple Python function—yours can be as complex as you
    want it to be, but for ours, we will simply use the Python `.replace` function
    to replace one string with another inside a `string` variable. The following example
    looks for instances of `Puppet` and replaces them with `Ansible`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we need to create an object of the `FilterModule` class, which is how
    Ansible will know that this Python file contains a filter. Within this object,
    we can create a `filters` definition and return the value of our previously defined
    filter function to Ansible:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, this code is all incredibly simple and we''re able to use built-in
    Python functions, such as `replace`, to manipulate the strings. There isn''t a
    specific test harness for plugins in Ansible, so we will test out our plugin code
    by writing a simple playbook that will implement it. The following playbook code
    defines a simple string that includes the word `Puppet` in it and prints this
    to the console using the `debug` module, applying our newly defined filter to
    the string:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, before we attempt to run this, let''s recap what the directory structure
    should look like. Just as we were able to utilize the custom module that we created
    in [Chapter 5](6f89dca6-e6ba-4229-a7fd-dc4ef5ca39f5.xhtml), *Consuming and Creating
    Modules*, by creating a `library/` subdirectory to house our module, we can also
    create a `filter_plugins/` subdirectory for our plugin. Your directory tree structure,
    when you have finished coding the various file details in the preceding code block,
    should look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s now run our little test playbook and see what output we get. If all
    goes well, it should look something like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, our new filter plugin replaced the `Puppet` string in our variable's
    contents and replaced it with the `Ansible` string. This, of course, is just a
    silly test and not one you are likely to contribute back to the Ansible project.
    However, it shows how, in just six lines of code and with a modicum of Python
    knowledge, we have created our own filter plugin to manipulate a string. You could
    come up with something far more complex and useful, I'm sure!
  prefs: []
  type: TYPE_NORMAL
- en: 'Other plugin types require more effort than this; although we won''t go through
    the process of creating a filter plugin here, you''ll find coding a filter plugin
    more akin to coding a module, as you need to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Include the `DOCUMENTATION`, `EXAMPLES`, and `RETURN` sections with the appropriate
    documentation.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ensure you have incorporated appropriate and sufficient error handling in the
    plugin.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Test it thoroughly, including both the failure and success cases.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'As an example of this, let''s repeat the preceding process, but to create a
    `lookup` plugin, instead. This plugin will be based heavily on a simplified version
    of the file `lookup` plugin. However, we want to adapt our version to return only
    the first character of a file. You could adapt this example to perhaps read the
    header from a file, or you could add arguments to the plugin to allow you to extract
    a substring using character indexes. We will leave this enhancement activity as
    an exercise for you to carry out yourself. Let''s get started! Our new lookup
    plugin will be called `firstchar`, and as `lookup` plugins have a one-to-one mapping
    with their Python files, the plugin file will be called `firstchar.py`. (In fact,
    Ansible will use this filename as the name of the plugin—you won''t find a reference
    to it in the code anywhere!). If you intend to test this from a playbook, as executed
    previously, you should create this in a directory called `lookup_plugins/`:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Start by adding a header to the plugin file, as before, so that the maintainer
    and copyright details are clear. We are borrowing a large chunk of the original
    `file.py` `lookup` plugin code for our example, so it is important we include
    the relevant credit:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, add in the Python 3 headers—these are an absolute requirement if you
    intend to submit your plugin via a **Pull Request** (**PR**) to the Ansible project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, add a `DOCUMENTATION` block to your plugin so that other users can understand
    how to interact with it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the relevant `EXAMPLES` blocks to show how to use your plugin, just as
    we did for modules:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Also, make sure you document the `RETURN` values from your plugin:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'With the documentation complete, we can now start to work on our Python code.
    We will start by importing all the Python modules we need to make our module work.
    We''ll also set up the `display` object, which is used in verbose output and debugging.
    This should be used in place of the `print` statements in your plugin code if
    you need to display the `debug` output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'We will now create an object of the `LookupModule` class. Define a default
    function within this called `run` (this is expected for the Ansible `lookup` plugin
    framework) and initialize an empty array for our return data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'With this in place, we will start a loop to iterate over each of the terms
    (which, in our simple plugin, will be the filenames passed to the plugin). Although
    we will only test this on simple use cases, the way that lookup plugins can be
    used means that they need to support the lists of `terms` to operate on. Within
    this loop, we display valuable debugging information and, most importantly, define
    an object with the details of each of the files we will open, called `lookupfile`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we will read in the file contents. This could be as simple as using one
    line of Python code, but we know from our work on modules in [Chapter 5](6f89dca6-e6ba-4229-a7fd-dc4ef5ca39f5.xhtml),
    *Consuming and Creating Modules*, that we should not take it for granted that
    we will be passed a file we can actually read. As a result, we will put the statement
    to read our file contents into a `try` block and implement exception handling
    to ensure that the behavior of the plugin is sensible, even in error cases, and
    that easy-to-understand error messages are passed back to the user, rather than
    to Python tracebacks:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Notice that within this, we append the first character of the file contents
    (denoted by the `[0]` index) to our empty array. We also remove any training spaces
    using `rstrip`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, we return the character we gathered from the file to Ansible with
    a `return` statement:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Once again, we can create a simple test playbook to test out our newly created
    plugin:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Again, we are using the debug module to print output to the console and referencing
    our `lookup` plugin to obtain the output.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the text file referenced in the previous code block, called `testdoc.txt`.
    This can contain anything you like—mine contains the following simple text:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'For clarity, your final directory structure should look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, when we run our new playbook, we should see an output similar to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: If all goes well, your playbook should return the first character of the text
    file you created. Naturally, there is a lot we could do to enhance this code,
    but this serves as a nice, simple example to get you started.
  prefs: []
  type: TYPE_NORMAL
- en: With this foundation in place, you should now have a reasonable idea of how
    to get started with writing your own plugins for Ansible. The next logical step
    for us is to look in greater depth at how we can test our newly written plugins,
    which we will do in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Learning to integrate custom plugins with Ansible source code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we have only tested our plugin in a standalone manner. This is all well
    and good, but what if you actually wanted to add it either to your own fork of
    the Ansible source code—or, better yet, submit it back to the Ansible project
    for inclusion with a PR? Fortunately, this process is very similar to the one
    we covered in [Chapter 5](6f89dca6-e6ba-4229-a7fd-dc4ef5ca39f5.xhtml), *Consuming
    and Creating Modules*, only with slightly different folder structures.
  prefs: []
  type: TYPE_NORMAL
- en: 'As before, your first task will be to obtain a copy of the official Ansible
    project source code—for example, by cloning the GitHub repository to your local
    machine:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Next, you will need to copy your plugin code into one of the appropriate plugin
    directories.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, our example filter would be copied to the following directory
    in the source code you just cloned:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Similarly, our custom `lookup` plugin would go in the `lookup` plugin''s directory,
    using a command such as the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'With your code copied into place, you need to test the documentation (that
    is, whether your plugin includes it) as before. You can build the `webdocs` documentation
    in exactly the same way as we did in [Chapter 5](6f89dca6-e6ba-4229-a7fd-dc4ef5ca39f5.xhtml),
    *Consuming and Creating Modules*, so we will not recap this here. However, as
    a refresher, we can quickly check whether the documentation renders correctly
    using the `ansible-doc` command, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: As you have seen so far, there is a great deal of overlap between plugin development
    and module development in Ansible. It is especially important to pay attention
    to error handling with exceptions to produce good quality, easy-to-understand
    error messages and to adhere to and uphold Ansible's high documentation standards.
    One additional item that we have not covered here is the plugin output. All plugins
    must return strings in Unicode; this ensures that they can run through the `jinja2`
    filters correctly. Further guidance can be found in the official Ansible documentation
    at [https://docs.ansible.com/ansible/latest/dev_guide/developing_plugins.html](https://docs.ansible.com/ansible/latest/dev_guide/developing_plugins.html).
  prefs: []
  type: TYPE_NORMAL
- en: Armed with this knowledge, you should now be well placed to begin your own plugin
    development work, and even to submit your code back to the community, if you desire.
    We'll offer a brief recap of this in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Sharing plugins with the community
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You may wish to submit your new plugin to the Ansible project, just as we considered
    for our custom modules in [Chapter 5](6f89dca6-e6ba-4229-a7fd-dc4ef5ca39f5.xhtml),
    *Consuming and Creating Modules*. The process for doing this with plugins is almost
    identical to what you do for modules, which this section will recap.
  prefs: []
  type: TYPE_NORMAL
- en: Using the following process will submit a real request to the Ansible project
    on GitHub to merge the code you submit with their code. Do *not* follow this process
    unless you genuinely have a new module that is ready for submission to the Ansible
    codebase.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to submit your plugin as a PR of the Ansible repository, you first
    need to fork the `devel` branch of the official Ansible repository. To do this,
    log into your GitHub account on your web browser (or create an account if you
    don''t already have one), and then navigate to [https://github.com/ansible/ansible.git](https://github.com/ansible/ansible.git).
    Click on Fork at the top-right corner of the page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/e7b8c847-4112-4e50-bc4e-3fb49b62e8ef.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you have forked the repository to your own account, we will walk you through
    the commands you need to run to add your module code to it and then to create
    the required PRs in order to merge your new module with the upstream Ansible project:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Clone the `devel` branch that you just forked to your local machine. Use a
    command similar to the following, but be sure to replace the URL with one that
    matches your own GitHub account:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Copy your module code into the appropriate `plugins/` directory. The `copy`
    command used in the following code block is just an example to give you an idea
    as to what to do—in reality, you should choose the appropriate category subdirectory
    for your plugin as it won''t necessarily fit into the `lookup` category. Once
    you''ve added your Python file, perform a `git add` command to make Git aware
    of the new file, and then commit it with a meaningful `commit` message. Some example
    commands are shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, be sure to push the code to your forked repository using the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Return to GitHub in your web browser and navigate to the Pull Requests page,
    as in the following screenshot. Click on the New pull request button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](Images/25997bfa-230e-4627-9bef-042c675fb503.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Follow the PR creation process, as guided by the GitHub website. Once you have
    successfully submitted your PR, you should be able to navigate to the list of
    PRs on the official Ansible source code repository and find yours there. An example
    of the PR list is shown in the following screenshot for your reference:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/c2be2eb5-8243-4e21-8d26-96e2769181b6.png)'
  prefs: []
  type: TYPE_IMG
- en: As discussed previously, don't be alarmed if it takes a long time for your PR
    to be reviewed—this is simply due to how many PRs there are to review and process.
    You can always use your plugin code locally by adding it to a local `*_plugins/` directory,
    as we demonstrated earlier, so that the processing speed of your PR doesn't hinder
    your work with Ansible. Further details of where to place your plugin code when
    working locally can be found at [https://docs.ansible.com/ansible/latest/dev_guide/developing_locally.html](https://docs.ansible.com/ansible/latest/dev_guide/developing_locally.html).
  prefs: []
  type: TYPE_NORMAL
- en: That completes our look at the creation of plugins, including two working examples.
    Hopefully, you have found this journey informative and valuable and it has enhanced
    your ability to work with Ansible and extend its functionality where required.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Ansible plugins are a core part of Ansible's functionality and we discovered,
    in this chapter, that we have been working with them throughout this book without
    even realizing it! Ansible's modular design makes it easy to extend and add functionality
    to, regardless of whether you are working with modules or the various types of
    plugins that are currently supported. Whether it's to add a new filter for string
    processing or a new way of looking up data (or perhaps even a new connection mechanism
    to new technology), Ansible plugins provide a complete framework that can extend
    Ansible far beyond its already extensive capabilities.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we learned about the various types of plugins that are supported
    by Ansible, before exploring them in greater detail and looking at how you can
    obtain documentation and information on the existing ones. We then completed two
    practical examples to create two different types of plugin for Ansible while looking
    at the best practices for plugin development and how this overlaps with module
    development. We finished off by recapping how to submit our new plugin code as
    a PR back to the Ansible project.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will explore the best practices that you should adhere
    to when writing your Ansible playbooks to ensure that you produce manageable,
    high-quality automation code.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Which of the following `ansible-doc` commands can you use to list the names
    of all the cache plugins?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A) `ansible-doc -a cache -l`
  prefs: []
  type: TYPE_NORMAL
- en: B) `ansible-doc cache -l`
  prefs: []
  type: TYPE_NORMAL
- en: C) `ansible-doc -a cache`
  prefs: []
  type: TYPE_NORMAL
- en: D) `ansible-doc -t cache -l`
  prefs: []
  type: TYPE_NORMAL
- en: E) `ansible-doc cache`
  prefs: []
  type: TYPE_NORMAL
- en: Which class do you need to add to your `lookup` plugin's code to include the
    bulk of the plugin code, including `run()`, the `items` loop, `try`, and `except`?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A) `LookupModule`
  prefs: []
  type: TYPE_NORMAL
- en: B) `RunModule`
  prefs: []
  type: TYPE_NORMAL
- en: C) `StartModule`
  prefs: []
  type: TYPE_NORMAL
- en: D) `InitModule`
  prefs: []
  type: TYPE_NORMAL
- en: E) `LoadModule`
  prefs: []
  type: TYPE_NORMAL
- en: 'True or false – in order to create custom plugins using Python, you need to
    install Python with the relevant dependencies on your OS:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A) True
  prefs: []
  type: TYPE_NORMAL
- en: B) False
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can find all of the plugins on Ansible by accessing the Ansible repository
    directly at [https://github.com/ansible/ansible/tree/devel/lib/ansible/plugins](https://github.com/ansible/ansible/tree/devel/lib/ansible/plugins).
  prefs: []
  type: TYPE_NORMAL
