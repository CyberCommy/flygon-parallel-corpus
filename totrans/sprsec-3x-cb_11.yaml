- en: Chapter 11. More on Spring Security
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Spring Security with multiple authentication providers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring Security with multiple input authentications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring Security with Captcha integration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring Security with JAAS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter we will see some more examples of Spring Security. Let's see
    how we can integrate Spring Security with multiple authentication providers. We
    will also see an example of authentication using Spring with multiple inputs.
  prefs: []
  type: TYPE_NORMAL
- en: Spring Security with multiple authentication providers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Spring Security provides an option to add many authentication providers. The
    filter chain checks with each and every authentication provider until it gets
    authenticated successfully.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, let's see how to configure multiple authentication providers
    and how Spring does the authentication with multiple authentication providers.
  prefs: []
  type: TYPE_NORMAL
- en: For example, we are using the `horrormovie` application in which authentication
    and authorization is handled by Spring Security with database.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a maven web project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add the `spring-security` dependency
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add the spring-core related dependency
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configure the Spring context listener in the `Web.xml` file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create the `AddHorroMovieController.java` controller and add the request mapping
    methods for addition, deletion, and listing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Edit the `application-security.xml` file with another authentication provider
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following are the steps to integrate multiple authentication providers
    with Spring Security:'
  prefs: []
  type: TYPE_NORMAL
- en: Edit the `application-security.xml` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Deploy the application on a GlassFish application server; access the following
    URL: `http://localhost:8080/list` and log in with username/password (`Vikash`/`Vikash123`).'
  prefs: []
  type: TYPE_NORMAL
- en: This is the user created in the derby database with access (`ROLE_EDITOR`).
  prefs: []
  type: TYPE_NORMAL
- en: Then log out and log in again with username as `shami` and password as `shami123`.
    Here the user is authenticated by both the authentication providers in a sequential
    manner.
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/7525OS_11_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Spring Security with multiple input authentications* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Spring Security with Captcha integration* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Spring Security with JAAS* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring Security with multiple input authentications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will demonstrate multiple input authentications. This is
    also called two factor authentications. So far, in all our examples, we are authenticating
    against username and password. In this example, we will provide another field
    for phone number along with username. It is the same `horrormovie` application
    with hibernate and derby database.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a custom filter to handle the new login form
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configure the custom filter in your `Springsecurity.xml` file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Update the `UserDetailsService` implementation class to handle the additional
    input
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add an extra column named `MOBILE_NO` in your database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Update the `login.jsp` file to take `MOBILE_NO` as input
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following are the steps to implement multiple input authentications with
    Spring Security:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a custom filter named `MultipleInputAuthenticationFilter` to extract
    the extra mobile number parameter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Update the `application-security.xml` file to handle the custom filter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Update `UsersDAOImpl` to handle the extra input.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Implement the methods in the `MyUserDetails` class, which implements the `UserDetailsService`
    interface to handle the extra inputs.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Access the following URL: `http://localhost:8080/SpringSecurity_MultipleInputAuth/login`'
  prefs: []
  type: TYPE_NORMAL
- en: The user is authenticated not just with the username and password as demonstrated
    in all the applications used in the book, but also with the mobile number parameter.
  prefs: []
  type: TYPE_NORMAL
- en: When the user submits the information in the login page and hits on **SubmitQuery**,
    the username and mobile number gets clubbed with a delimiter and Spring Security
    will invoke the `MyUserDetails` class, which will again split the parameter and
    authenticate the user based on the inputs provided by the user using hibernate.
  prefs: []
  type: TYPE_NORMAL
- en: On successful authentication, the user is redirected to the authorized page.
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/7525OS_11_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Spring Security with multiple authentication providers* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Spring Security with Captcha integration* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Spring Security with JAAS* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring Security with Captcha integration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let us demonstrate the integration of Spring Security with Captcha. We have
    downloaded a `Kaptcha.jar` Captcha provider for this purpose. We need to install
    the jar file into the maven local repository for the application to work.
  prefs: []
  type: TYPE_NORMAL
- en: The example is an extension of the previous recipe where an additional input,
    mobile number, was considered for authorization and authentication by Spring Security.
    In this example, we will get the code for username and password from the user
    along with the Captcha code. The username is authenticated against the database,
    and the requested Captcha and the Captcha entered by the user are also compared.
  prefs: []
  type: TYPE_NORMAL
- en: When the entire conditions match, the user is said to be authenticated or else
    the authentication is a failure.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Add the `Kaptcha` servlet to the `Web.xml` file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configure the custom filter in your `Springsecurity.xml` file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Update the `UserDetailsService` implementation class to handle `Kaptcha`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Update the `login.jsp` file to take `Kaptcha` as an input
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Extend `UsernamePasswordAuthenticationFilter`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following are the steps to integrate Spring Security with Captcha:'
  prefs: []
  type: TYPE_NORMAL
- en: Add the `Kaptcha` servlet to the `Web.xml` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Update the `application-security.xml` to handle the custom filter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Update `UsersDAOImpl` to handle the extra input.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Update the `UserDetailsService` class to handle the extra input.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Extend `UsernamePasswordAuthenticationFilter` and override the `obtainUsername`
    (`HttpServletRequest` request) method in the `MultipleInputAuthenticationFilter`
    class.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Access the following URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '`http://localhost:8080/SpringSecurity_MultipleInputAuth/login`'
  prefs: []
  type: TYPE_NORMAL
- en: The `Kaptcha` servlet displays different diagrams for the user on the browser.
  prefs: []
  type: TYPE_NORMAL
- en: The value entered by the user and the value generated by `Kaptcha` are compared
    in the `UsersDAOImpl.java` class along with the `Username` field from the database.
    When entire conditions match, that is, `Kaptcha` entered by the user should be
    the same as `Kaptcha` displayed by the browser and the username should be present
    in the database, then the user is said to be authenticated. The user is redirected
    to the authenticated and authorized page.
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/7525OS_11_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Spring Security with multiple authentication providers* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Spring Security with multiple input authentications* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Spring Security with JAAS* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring Security with JAAS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [Chapter 1](ch01.html "Chapter 1. Basic Security"), *Basic Security*, we
    have already demonstrated how to use JAAS configuration in JBOSS for authentication
    and authorization. Spring Security also provides a full support to implement JAAS-based
    authentication. We need to configure `DefaultJaasAuthenticationProvider` as the
    authentication provider. In this section, we will demonstrate integration of Spring
    Security with JAAS.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let us see some of the JAAS-based classes and interfaces offered by Spring
    Security APIs:'
  prefs: []
  type: TYPE_NORMAL
- en: '`org.springframework.security.authentication.jaas`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`AbstractJaasAuthenticationProvider`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`AuthorityGranter`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DefaultJaasAuthenticationProvider`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DefaultLoginExceptionResolver`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`JaasAuthenticationCallbackHandler`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`JaasAuthenticationToken`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`JaasGrantedAuthority`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`JaasNameCallbackHandler`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`LoginExceptionResolver`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SecurityContextLoginModule`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Implement the `AuthorityGranter` interface by `org.springframework.security.authentication.jaas.AuthorityGranter`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implement the `LoginModule` interface by `javax.security.auth.spi.LoginModule`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configure the `DefaultJaasAuthenticationProvider` class in the `context.xml`
    file. Implement the `AuthorityGranter` interface and its configurations.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following are the steps for implementing JAAS with Spring Security:'
  prefs: []
  type: TYPE_NORMAL
- en: Implement the `AuthorityGranter` class using the `AuthorityGranterImpl` class.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Implement the `LoginModule` class, which is available in the `javax.security.auth.spi`
    package, using the `LoginModuleImpl` class.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Configure Spring Security with JAAS.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Access the URL: `http://localhost:8080/SpringSecurity_Jaas/`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Log in using the following credentials: `publisher`/`publisher123` and `editor`/`editor123`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The authentication is handled by `DefaultJaasAuthenticationProvider`. The user
    information and authentication is handled by `InMemoryConfiguration`, which implies
    that the `LoginModule` class of JAAS does the authentication and authorization
    using `callbackhandlers`. On successful authentication, user is redirected to
    the authorized page. The following screenshots show the workflow of the application:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/7525OS_11_04.jpg)![How it works...](img/7525OS_11_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Spring Security with multiple authentication providers* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Spring Security with multiple input authentications* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Spring Security with JAAS* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
