- en: Chapter 10. Making It Look Good
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we started to add a little beauty to our application
    by making our URLs more attractive to both the user and to search engine bots
    that crawl the site. In this chapter, we are going to turn our focus more to the
    look and feel of our application by covering the topics of layouts and themes
    in Yii. We will be focusing on the approach one takes and the tools available
    to help design the frontend of a Yii application rather than the design itself.
    So this chapter will focus more on how to make your applications look good, rather
    than spending a lot of time specifically designing our TrackStar application to
    actually be good-looking.
  prefs: []
  type: TYPE_NORMAL
- en: Feature planning
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter aims to focus on the frontend. We want to create a new look for
    our site that is reusable and able to be implemented dynamically. We also want
    to accomplish this without overwriting or otherwise removing our current design.
    Finally, we are going to dig into the internationalization features of Yii to
    better understand how to accommodate users from different geographic regions.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a list of high-level tasks that we will need to complete in
    order to achieve these goals:'
  prefs: []
  type: TYPE_NORMAL
- en: To create a new theme for our application by creating a new layout, CSS, and
    other asset files needed to provide the application with a new frontend design
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To use the internationalization and localization features of Yii to help translate
    a portion of our application to a new language
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Designing with layouts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One thing that you may have noticed is that we have added a lot of functionality
    to our application without adding any explicit navigation to access this functionality.
    Our home page has not yet changed from the default application we built. We still
    have the same navigation items as we did when we first created our new application.
    We need to change our basic navigation to better reflect the underlying functionality
    present in the application.
  prefs: []
  type: TYPE_NORMAL
- en: Thus far, we have not fully covered how our application is using all of the
    view files responsible for displaying the content. We know that our view files
    are responsible for our data display and for housing the HTML sent back in response
    to each page request. When we create new controller actions, we often create new
    views to handle the display of the returned content from these action methods.
    Most of these views are very specific to the action methods they support and are
    not used across multiple pages. However there are some things, such as the main
    menu navigation, that are used across multiple pages throughout the site. These
    types of UI components are better suited to reside in what are called layout files.
  prefs: []
  type: TYPE_NORMAL
- en: A **layout** in Yii is a special view file used to decorate other view files.
    Layouts typically contain markup or other user interface components that are common
    across multiple view files. When using a layout to render a view file, Yii embeds
    the view file into the layout.
  prefs: []
  type: TYPE_NORMAL
- en: Specifying a layout
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are two main places where a layout can be specified. One is the property
    called `$layout` of the `CWebApplication` itself. This defaults to `protected/views/layouts/main.php`.
    As is the case with all application settings, this can be overridden in the main
    configuration file `protected/config/main.php`. For example, if we created a new
    layout file `protected/views/layouts/newlayout.php` and wanted to use this new
    file as our application-wide layout file, we could alter our main `config.php`
    file to set the layout property as such:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The filename is specified without the `.php` extension and is relative to the
    `$layoutPath` property of `CWebApplication`, which defaults to `Webroot/protected/views/layouts`
    (which itself could be overridden in a similar manner if this location does not
    suit your application's needs).
  prefs: []
  type: TYPE_NORMAL
- en: The other place to specify the layout is by setting the `$layout` property of
    the controller class. This allows for more granular control of the layout on a
    controller-by-controller basis. This is the way it was specified when we generated
    the initial application. Using the `yiic` tool to create our initial application
    automatically created a controller base class `Webroot/protected/components/Controller.php`,
    from which all of our other controller classes extend. Opening up this file reveals
    that the `$layout` property has been set to `column1`. Setting the layout file
    at the more granular controller level will override the setting in the `CWebApplication`
    class.
  prefs: []
  type: TYPE_NORMAL
- en: Applying and using a layout
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The use of a layout file is implicit in the call to the `CController::render()`
    method. That is, when you make the call to the `render()` method to render a view
    file, Yii will embed the contents of the view file into the layout file specified
    in either the controller class or the one specified at the application level.
    You can avoid applying any layout decoration of the rendered view file by calling
    the `CController::renderPartial()` method instead.
  prefs: []
  type: TYPE_NORMAL
- en: 'As previously mentioned, a layout file is typically used to decorate other
    view files. One example use of a layout is to provide a consistent header and
    footer layout to each and every page. When the `render()` method is called, what
    happens behind the scenes is that a call is first sent to `renderPartial()` on
    the specified view file. The output of this is stored in a variable called `$content`,
    which is then made available to the layout file. So a very simple layout file
    might look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'In fact let''s try this out. Create a new file called `newlayout.php` and place
    it in the default directory for layout files, called `/protected/views/layouts/`.
    Add the preceding HTML content to this file and save it. Now we''ll put this to
    use by altering our site controller to use this new layout. Open up `SiteController.php`
    and override the layout property set in the base class by explicitly adding it
    to this class, as such:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This will set the layout file to `newlayout.php`, but only for this controller.
    Now every time we make the call to the `render()` method within `SiteController`,
    the `newlayout.php` layout file will be used.
  prefs: []
  type: TYPE_NORMAL
- en: 'One page that `SiteController` is responsible for rendering is the login page.
    Let''s take a look at that page to verify these changes. If we navigate to `http://localhost/trackstar/site/login`
    (assuming we are not already logged in), we now see something similar to the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Applying and using a layout](graphics/8727_10_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: If we simply comment out the `$layout` attribute we just added and refresh the
    login page again, we'll be back to using the original `main.php` layout and our
    page will now be back to what it looked like earlier.
  prefs: []
  type: TYPE_NORMAL
- en: Deconstructing the main.php layout file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, all of our application pages have been using the `main.php` layout file
    to provide the primary layout markup. Before we start making changes to our page
    layout and design, it would serve us well to take a closer look at this main layout
    file. You can view it in its entirety from the downloadable code for this chapter,
    or view the standalone file at [https://gist.github.com/3781042](https://gist.github.com/3781042).
  prefs: []
  type: TYPE_NORMAL
- en: 'The first five lines will probably look somewhat familiar to you:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: These lines define a standard, HTML document-type declaration, followed by a
    starting `<html>` element and then the start of our `<head>` element. Within the
    `<head>` tag, we first have a `<meta>` tag to declare the standard `XHTML-compliant
    uft-8` character encoding, followed by another `<meta>` tag that specifies `English`
    as the primary language in which the website is written.
  prefs: []
  type: TYPE_NORMAL
- en: Introducing the Blueprint CSS framework
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The next several lines beginning with the comment `<!—blueprint CSS framework
    -->` may be less familiar to you. Another great thing about Yii is that it utilizes
    other best-in-breed frameworks when appropriate, and the Blueprint CSS framework
    is one such example.
  prefs: []
  type: TYPE_NORMAL
- en: The Blueprint CSS framework was included in the application as a by-product
    of using the `yiic` tool when we initially created our application. It is included
    to help standardize the CSS development. Blueprint is a CSS Grid framework. It
    helps standardize your CSS, provides cross-browser compatibility, and provides
    consistency in HTML element placement, helping reduce CSS errors. It comes with
    many screen- and print-friendly layout definitions and helps jumpstart your design
    by providing all of the CSS that you need, to get something that looks good and
    is in place. For more on the Blueprint framework, visit [http://www.blueprintcss.org/](http://www.blueprintcss.org/).
  prefs: []
  type: TYPE_NORMAL
- en: 'So the following lines of code are required and specific to the Blueprint CSS
    framework:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The call to `Yii::app()->request->baseUrl;` is used here to get the relative
    URL to the application.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the Blueprint installation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Yii by no means requires the use of Blueprint. However since the default application
    generated does include the framework, understanding its installation and use will
    be beneficial.
  prefs: []
  type: TYPE_NORMAL
- en: 'The typical installation of Blueprint involves first downloading the framework
    files and then placing three of its `.css` files into the Yii application''s main
    `css` directory. If we take a peek under the main `Webroot/css` directory within
    our TrackStar application, we already see the inclusion of these three files:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ie.css`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`print.css`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`screen.css`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: So luckily for us, the basic installation has already been completed. In order
    to take advantage of the framework, the previous `<link>` tags need to be placed
    under the `<head>` tag for each web page. This is why these declarations are made
    in the layout file.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next two `<link>` tags are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: These `<link>` tags define some custom `css` definitions used to provide layout
    declarations in addition to the ones specified in the Blueprint files. You should
    always place any custom definitions below the ones provided by Blueprint so that
    your custom declarations take precedence.
  prefs: []
  type: TYPE_NORMAL
- en: Setting the page title
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Setting a specific and meaningful page title on a per page basis is important
    for indexing your website pages in search engines, and helpful to users who want
    to bookmark specific pages of your site. The next line in our main layout file
    specifies the page title in the browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Remember that `$this` in a view file refers to the controller class instance
    that initially rendered the view. The `$pageTitle` attribute is defined down in
    Yii's `CController` base class and will default to the action name followed by
    the controller name. This is easily customized in the specific controller class
    or even within each specific view file.
  prefs: []
  type: TYPE_NORMAL
- en: Defining a page header
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'It is often the case that websites are designed to have consistent header content
    repeated across many pages. The next few lines in our main layout file define
    the area for a page header:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The first `<div>` tag with a class of `container` is required by the Blueprint
    framework in order to display the content as a grid.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Again, using the Blueprint CSS Grid framework or any other CSS framework is
    not at all a requirement of Yii. It is just there to help you jumpstart your design
    layout if desired.
  prefs: []
  type: TYPE_NORMAL
- en: The next three lines lay out the first of the main content we see on these pages.
    They display the name of the application in large letters. So far this has been
    displaying the text **My Web Application**. I am sure that it has been driving
    some of you crazy. Although we may change this later to use a logo image, let's
    go ahead and change this to the real name of our application, **TrackStar**.
  prefs: []
  type: TYPE_NORMAL
- en: We could hardcode this name right here in the HTML. However, if we alter our
    application configuration to reflect our new name, the changes will be propagated
    everywhere throughout the site, wherever `Yii::app()->name` is being used. I am
    sure that you could make this simple change in your sleep at this point. Simply
    open up the main `config.php` file `/protected/config/main.php` where our application
    configuration settings are defined, and change the value of the `name` property
    from `'name'=>'My Web Application',` to the new value `'name'=>'TrackStar',`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Save the file, refresh your browser, and the header on the home page should
    now look something similar to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Defining a page header](graphics/8727_10_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: One thing we immediately notice in the previous screenshot is that the change
    has been made in two places. It just so happens that the view file responsible
    for our home page content, `/protected/views/site/index.php`, also uses the application
    name property. Since we made the change in the application configuration file,
    our change is reflected in both places.
  prefs: []
  type: TYPE_NORMAL
- en: 'Since the name property is something you may decide to change at some point,
    it is good practice to also define the application `id` property. This property
    is used by the framework to create unique signed keys as a prefix to access session
    variables, cached data, and other tokens. If there is no `id` property specified,
    the `name` property will be used. So changing it could render this data invalid.
    Let''s also define an `id` property for our application. This is added to `protected/config/main.php`,
    just as we did for the `name` property. We can use the same value for this as
    we are using for our name:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Displaying menu navigation items
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The main site''s navigation controls are often repeated across multiple pages
    in a web application, and housing this in a layout makes it very easy to re-use.
    The next block of markup and code in our main layout file defines the top-level
    menu items:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Here we see that one of the Zii components called `CMenu` is being used. We
    introduced Zii back in [Chapter 8](ch08.html "Chapter 8. Adding User Comments"),
    *Adding User Comments*. To jog your memory, the Zii extension library is a set
    of extensions developed by the Yii developer team. This library comes packaged
    with the core Yii framework. Any of these extensions can easily be used within
    a Yii application, simply by referring to the desired extension class file using
    a path alias in the form of `zii.path.to.ClassName`. The root alias `zii` is predefined
    by the application and the rest of the path is relative to this framework directory.
    Since this Zii menu extension resides on your filesystem at `YiiRoot/zii/widgets/CMenu.php`,
    we can simply use `zii.widgets.CMenu` when referring to this in our application
    code.
  prefs: []
  type: TYPE_NORMAL
- en: '`CMenu` takes in an array of associative arrays that provide the menu items.
    Each item array consists of a `label` that will be displayed, a URL to which that
    item should be linked, and an optional third value `visible`, which is a `boolean`
    value indicating whether or not that menu item should be displayed. This is used
    here when defining the **Login** and **Logout** menu items. We only want the **Login**
    menu item to be displayed as a clickable link if the user is not already logged
    in. And conversely, we would only want the **Logout** menu link to be displayed
    if the user is already logged in. The use of the visible element in the array
    allows us to display these links dynamically based on whether the user is logged
    in or not. The use of `Yii::app()->user->isGuest` is for this. This returns `true`
    if the user is not logged in and `false` if the user is logged in. I am sure that
    you have already noticed that the **Login** option turns into a **Logout** option
    in our application''s main menu whenever you are logged in, and vice versa.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s update our menu to provide the users with a way to navigate to our specific
    TrackStar functionality. First off, we don''t want anonymous users to be able
    to access any real functionality except the login. So we need to make sure that
    the login page is more or less the home page for anonymous users. Also, the main
    home page for logged-in users should just be a listing of their projects. We''ll
    achieve this by making the following changes:'
  prefs: []
  type: TYPE_NORMAL
- en: Changing our default home URL for the application to be the project listing
    page rather than just `site/index`, as it is now.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Changing the default action within our default controller `SiteController` to
    be the login action. In this way, any anonymous user that visits the top-level
    URL `http://localhost/trackstar/` will be redirected to the login page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Altering our `actionLogin()` method to redirect the user to the project listing
    page if they are already logged in.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Changing the **Home** menu item to read **Projects**, and changing the URL to
    be the project listing page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'These are simple changes that we need to make. Starting at the top, we can
    change the home URL application property in our main application `config.php`
    file. Open up `protected/config/main.php` and add the following `name=>value`
    pair to the returned array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: This is all that is needed to make that change.
  prefs: []
  type: TYPE_NORMAL
- en: 'For the next change, open up `protected/controllers/SiteController.php` and
    add the following to the top of the controller class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'This sets the default action to be login. Now if you visit your top-level URL
    `http://localhost/trackstar/` for the application, you should be taken to the
    login page. The only issue with this is that you will continue to be taken to
    the login page from this top-level URL regardless of whether you are already logged
    in or not. Let''s fix this by implementing step 3 of the previous list. Change
    the `actionLogin()` method within `SiteController` to include the following code
    at the beginning of the method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: This will redirect all the logged-in users to the application `homeUrl`, which
    we just previously set to be the project listing page.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally let''s alter the input array to our `CMenu` widget, to change the specification
    for the **Home** menu item. Alter that block of code in the `main.php` layout
    file and replace the line `array(''label''=>''Home'', ''url''=>array(''/site/index'')),`
    with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: With this replacement, all of our previously outlined changes are in place.
    If we now visit the TrackStar application as an anonymous user, we are directed
    to the login page. If we click on the **Projects** link, we are still directed
    to the login page. We can still access the **About** and **Contact** pages, which
    is fine for an anonymous user. If we log in, we are directed to the project listing
    page. Now if we click on the **Projects** link, we are allowed to see the project
    listings.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a breadcrumb navigation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Turning back to our `main.php` layout file, the three lines of code that follow
    our menu widget define another Zii extension widget called `CBreadcrumbs`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: This is another Zii widget that can be used to display a list of links indicating
    the position of the current page, relative to the other pages in the whole website.
    For example, a linked navigation list of the format **Projects >> Project 1 >
    > Edit** indicates that the user is viewing an edit page for project number one.
    This is helpful for the user to find their way back to where they started, which
    is a listing of all the projects, as well as easily see where they are in the
    website-page hierarchy. This is why it is referred to as a **breadcrumb** . Many
    websites implement this type of UI navigational component in their design.
  prefs: []
  type: TYPE_NORMAL
- en: 'To use this widget, we need to configure its `links` property, which specifies
    the links that are to be displayed. The expected value for this property is an
    array that defines the `breadcrumb` path from a starting point, down to the specific
    page being viewed. Using our previous example, we could specify the `links` array
    as such:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The `breadcrumbs` widget, by default, adds the very top-level **Home** link
    automatically, based on the application configuration setting `homeUrl`. So what
    would be generated from the previous code snippet would be a breadcrumb like the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Home >> Projects >> Project 1 >> Edit**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Since we explicitly set our application `$homeUrl` property to be the project
    listings page, our first two links are the same in this case. The code in the
    layout file sets the link property to be the `$breadcrumbs` property of the controller
    class that is rendering the view. You can see this explicitly being set in the
    several view files that were autogenerated for us when we created our controller
    files using the Gii code generation tool. For example, if you take a look at `protected/views/project/update.php`,
    you will see the following code snippet at the very top of that file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'And if we navigate to that page in the website, we will see the following navigational
    breadcrumb generated just below the main navigation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a breadcrumb navigation](graphics/8727_10_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Specifying the content being decorated by the layout
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The next line in the layout file shows where the content of the view file that
    is being decorated by this layout file is placed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: This was discussed earlier in the chapter. When you use `$this->render()` in
    a controller class to display a certain view file, the use of a layout file is
    implied. Part of what this method does is to place all of the content in the specific
    view file being rendered into a special variable called `$content`, which is then
    made available to the layout file. So if we take our project update view file
    as an example again, the contents of `$content` would be the rendered content
    contained in the file `protected/views/project/update.php`.
  prefs: []
  type: TYPE_NORMAL
- en: Defining the footer
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Just as with the *header* area, it is often the case that websites are designed
    to have consistent *footer* content repeated across many pages. The final few
    lines of our `main.php` layout file define a consistent `footer` for every page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Nothing special going on here, but we should go ahead and update it to reflect
    our specific website. We can leave the **Powered by Yii Framework.** line in there
    to help promote this great framework. We can simply change `My Company` in the
    previous code snippet to `TrackStar` and we''re done. Refreshing the pages in
    the website will now reveal our footer as depicted in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Defining the footer](graphics/8727_10_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Nesting the layouts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Though it is true that the original layout we have been seeing on our pages
    is utilizing the file `protected/layouts/main.php`, this is not the whole story.
    When our initial application was created, all of the controllers were created
    to extend from the base controller located at `protected/components/Controller.php`.
    If we take a peek into this file, we see that there is a layout property explicitly
    defined. But it does not specify the main layout file. Rather it specifies `column1`
    as the default layout file for all the child classes. You may have already noticed
    that when the new application was created, there were a few layout files generated
    for us as well, all in the `protected/views/layouts/` directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '`column1.php`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`column2.php`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`main.php`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: So unless explicitly overridden in a child class, our controllers are defining
    `column1.php` as the primary layout file and not `main.php`.
  prefs: []
  type: TYPE_NORMAL
- en: So why did we spend all that time going through `main.php`, you ask? Well it
    turns out that the `column1.php` layout file is itself decorated by the `main.php`
    layout file. So not only can normal view files be decorated by layout files, but
    layout files themselves can be decorated by other layout files forming a hierarchy
    of nested layout files. This allows for great flexibility in design and also greatly
    minimizes the need for any repeated markup in the view files. Let's take a closer
    look at `column1.php` to see how this is achieved.
  prefs: []
  type: TYPE_NORMAL
- en: 'The contents of that file are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Here we see the use of a couple of methods that we have not seen before. The
    base controller methods `beginContent()` and `endContent()` are being used to
    decorate the enclosed content with the specified view. The view being specified
    here is our main layout page `'//layouts/main'`. The `beginContent()` method actually
    makes use of the built-in Yii widget `CContentDecorator`, whose primary purpose
    is to allow for nested layouts. So whatever content is between the calls `beginContent()`
    and `endContent()` will be decorated with the view specified in the call `beginContent()`.
    If nothing is specified, it will use the default layout specified at the controller
    level, or if not specified at the controller level, at the application level.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In the preceding code snippet, we see the view file being specified with double
    slashes '`//`'. In this case, the view will be searched for under the application's
    view path rather than in the currently active modules view path. This forces it
    to use the main application view path rather than the module's view path. Modules
    are the subject of the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: The rest works just as a normal layout file. All of the markup in the specific
    view file will be contained in the variable `$content` when this `column1.php`
    layout file is rendered, and then the other markup contained in this layout file
    will be contained again in the variable `$content` made available for the final
    rendering of the main parent layout file `main.php`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s walk through an example. Take the rendering of the login view as an
    example, that is the following code in the `SiteController::actionLogin()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Behind the scenes the following steps are being performed:'
  prefs: []
  type: TYPE_NORMAL
- en: Render all of the content in the specific view file `/protected/views/site/login.php`,
    and make that content available via the variable `$content` to the layout file
    specified in the controller, which in this case is `column1.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Since `column1.php` is itself being decorated by the layout `main.php`, the
    content between the `beingContent()` and `endContent()` calls is again rendered
    and made available to the `main.php` file, again via the `$content` variable.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The layout file `main.php` is rendered and returned back to the user, incorporating
    both the content from the specific view file for the login page as well as the
    "nested" layout file `column1.php`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Another layout file that was autogenerated when we initially created the application
    is `column2.php`. You probably won''t be surprised to discover that this file
    lays out a two-column design. We can see this used in the project pages where
    we have a little submenu **Operations** widget displayed along the right-hand
    side. The contents of this layout are as follows, and we can see that the same
    approach is being used to achieve the nested layout as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Creating themes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Themes provide a systematic way of customizing the design layout of a web application.
    One of the many benefits of an MVC architecture is the separation of the presentation
    from the rest of the "backend" stuff. Themes make great use of this separation
    by allowing you to easily and dramatically change the overall look and feel of
    a web application during runtime. Yii allows for an extremely easy application
    of themes to provide greater flexibility in your web application design.
  prefs: []
  type: TYPE_NORMAL
- en: Building themes in Yii
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In Yii, each theme is represented as a directory consisting of view files, layout
    files, and relevant resource files, such as images, CSS files, and JavaScript
    files. The name of a theme is the same as its directory name. By default, all
    themes reside under the same directory `WebRoot/themes`. Of course, as is the
    case with all other application settings, this default directory can be configured
    to be a different one. To do so, simply alter the `basePath` properties and the
    `baseUrl` properties of the `themeManager` application component.
  prefs: []
  type: TYPE_NORMAL
- en: Contents under a theme directory should be organized in the same way as those
    under the application base path. So all the view files are located under a `views/`
    directory, layout view files under `views/layouts/`, and system view files under
    `views/system/`. For example, if we have created a new theme called `custom` and
    want to replace the update view of our `ProjectController` with a new view under
    this theme, we need to create a new `update.php` view file and save it in our
    application project as `themes/custom/views/project/update.php`.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a theme
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's take this for a spin to give our TrackStar application a little facelift.
    We need to name our new theme and create a directory under the `Webroot/themes`
    directory with this same name. We'll exercise our extreme creativity and call
    our new theme `newtheme`.
  prefs: []
  type: TYPE_NORMAL
- en: Create a new directory to hold this new theme that is located at `Webroot/themes/newtheme`.
    Then under this newly created directory, create two other new directories called
    `css/` and `views/`. The former is not required by the theming system but helps
    us keep our CSS organized. The latter is required if we are going to make any
    alterations to our default view files, which we are. Since we are going to change
    the `main.php` layout file just a little, we need yet another directory under
    this newly created `views/` directory called `layouts/` (remember that the directory
    structure needs to mirror that in the default `Webroot/protected/views/` directory).
  prefs: []
  type: TYPE_NORMAL
- en: Now let's make some changes. Since our view file markup is already referencing
    the `css` class and `id` names currently defined in the `Webroot/css/main.css`
    file, the fastest path to a new face of the application is to use this as a starting
    point and make changes to it as needed. Of course this is not a requirement, as
    we could recreate every single view file of our application in the new theme.
    However to keep things simple, we'll create our new theme by making a few changes
    to the `main.css` file that was autogenerated for us when we created the application,
    as well as the primary layout file `main.php`.
  prefs: []
  type: TYPE_NORMAL
- en: To begin with, let's make a copy of these two files and place them in our new
    theme directory. Copy the file `Webroot/css/main.css` to a new location `Webroot/themes/newtheme/css/main.css`,
    and also copy the file `Webroot/protected/views/layouts/main.php` to a new location
    `Webroot/themes/newtheme/views/layouts/main.php`.
  prefs: []
  type: TYPE_NORMAL
- en: Now we can open up the newly copied version of the `main.css` file, remove the
    contents, and add in the necessary styles for our new theme. For the purpose of
    our example, we will use the CSS available from the downloadable code for this
    chapter, or the standalone file available at [https://gist.github.com/3779729](https://gist.github.com/3779729).
  prefs: []
  type: TYPE_NORMAL
- en: You may have noticed that some of these changes are referencing the image files
    that do not yet exist in our project. We have added an `images/background.gif`
    image reference in the body declaration, a new `images/bg2.gif` image is referenced
    in the `#mainmenu` ID declaration, and a new `images/header.jpg` image in the
    `#header` ID declaration. These are available in the downloadable source code.
    We'll place these new images into an image directory within the `css/` directory,
    namely `Webroot/themes/newtheme/css/images/`.
  prefs: []
  type: TYPE_NORMAL
- en: 'After these changes are in place, we need to make a couple of small adjustments
    to our `main.php` layout file in this new theme. For one, we need to alter the
    markup in the `<head>` element to properly reference our new `main.css` file.
    Currently the `main.css` file is being pulled in via this line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'This references the application request `baseUrl` property to construct the
    relative path to the CSS file. However, we want to use our new `main.css` file
    located in our new theme. For this, we can lean on the theme manager application
    component defined by default to use the Yii built-in `CThemeManager.php` class.
    We access the theme manager in the same way that we access other application components.
    So rather than using the request base URL, we should use the base URL defined
    by the theme manager, which knows what theme the application is using at any given
    time. Alter the previously mentioned code in `/themes/newtheme/views/layouts/main.php`,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Once we configure our application to use our new theme (something we have not
    yet done), this `baseUrl` will resolve to the relative path to where our theme
    directory resides.
  prefs: []
  type: TYPE_NORMAL
- en: 'The other small change that we need to make is to remove the display of the
    application title from the header. Since we altered our CSS to use a new image
    file to provide our header and logo information, we don''t need to display the
    application name in this section. So in `/themes/newtheme/views/layouts/main.php`
    again, we simply need to change the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Alter the previous code as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: We have put in a comment to remind us where our header image is defined.
  prefs: []
  type: TYPE_NORMAL
- en: Now once we configure the application to use our new theme, it will first look
    for a `main.php` layout in the themes directory and use that file if it exists.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the application to use a theme
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Okay, with our `newtheme` theme that we now created and have in place, we need
    to tell the application to use this theme. Doing so is very easy. Just alter the
    main application''s `theme` property setting by changing the main application
    configuration file. By now we will have become old pros at doing this. Simply
    add the following `name=>value` pair to the returned array in the `/protected/config/main.php`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Once this is saved, our application is now using our newly created theme and
    has a brand new face. When we take a look at the login page, which is also our
    default home page if not logged in, we now see what is depicted in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Configuring the application to use a theme](graphics/8727_10_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This, of course, is not a huge change. We have kept the changes fairly minimal,
    but they do illustrate the process of creating a new theme. The application will
    first look for view files in this new theme and use them if they exist, otherwise
    it will pull them from the default location. You see how easy it is to give the
    application a new look and feel. You could create a new theme for each season
    or based on your different moods, and then change the application to fit the season
    or mood quickly and easily, as desired.
  prefs: []
  type: TYPE_NORMAL
- en: Translating the site to other languages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before we close this chapter, we are going to talk about internationalization
    (`i18n`) and localization (`l10n`) in Yii. **Internationalization** refers to
    the process of designing software applications in such a manner that they can
    be adapted to various languages without having to make underlying engineering
    changes. **Localization** refers to the process of adapting internationalized
    software applications for a specific geographic location or language, by adding
    locale-dependent formatting and translating text. Yii provides support for these
    in the following ways:'
  prefs: []
  type: TYPE_NORMAL
- en: It provides the locale data for nearly every language and region
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It provides services to assist in the translation of text message strings and
    files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It provides locale-dependent date and time formatting
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It provides locale-dependent number formatting
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defining locale and language
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Locale** refers to a set of parameters that define the user''s language,
    country, and any other user-interface preferences that may be relevant to a user''s
    location. It is typically identified by a composite `ID` consisting of a language
    identifier and a region identifier. For example, a locale ID of `en_us` stands
    for the English language in the region of the United States. For consistency,
    all locale IDs in Yii are standardized to the format of either `LanguageID` or
    `LanguageID_RegionID` in lowercase (for example, `en` or `en_us`).'
  prefs: []
  type: TYPE_NORMAL
- en: 'In Yii, locale data is represented as an instance of the `CLocale` class or
    a child class thereof. It provides locale-specific information including currency
    and numeric symbols for currency, number, date, and time formats, and date-related
    names such as months, days of the week, and others. Given a locale ID, one can
    get the corresponding `CLocale` instance by either using the static method `CLocale::getInstance($localeID)`
    or using the application. The following example code creates a new instance based
    on the `en_us` locale identifier using the application component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Yii comes with locale data for nearly every language and region. The data comes
    from the Common Locale Data Repository ([http://cldr.unicode.org/](http://cldr.unicode.org/)),
    and is stored in files that are named according to their respective locale ID,
    and located in the Yii framework directory `framework/i18n/data/`. So in the previous
    example of creating a new `CLocale` instance, the data used to populate the attributes
    came from the file `framework/i18n/data/en_us.php`. If you look under this directory,
    you will see datafiles for many languages and regions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Going back to our example, if we wanted to get the names of the months in English
    that is specific to the US region, we could execute the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of which would produce the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Defining locale and language](graphics/8727_10_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'If we wanted the same month names for the Italian language, we could do the
    same but create a different `CLocale` instance:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Now our output would produce the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Defining locale and language](graphics/8727_10_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The first instance is based on the data file `framework/i18n/data/en_us.php`
    and the latter on `framework/i18n/data/it.php`. If desired, the application's
    `localeDataPath` property can be configured in order to specify a custom directory
    in which you can add your custom locale data files.
  prefs: []
  type: TYPE_NORMAL
- en: Performing language translation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Perhaps the most desired feature of `i18n` is language translation. As mentioned
    previously, Yii provides both message translation and view file translation. The
    former translates a single text message to a desired language, and the latter
    translates an entire file to the desired language.
  prefs: []
  type: TYPE_NORMAL
- en: A translation request consists of the object that is to be translated (either
    a string of text or a file), the source language that the object is in, and the
    target language to which the object is to be translated. A Yii application makes
    a distinction between its target language and its source language. The **target**
    language is the language (or locale) that we are targeting for the user, whereas
    the **source** language refers to the language in which the application files
    are written. So far, our TrackStar application has been written in English and
    is also targeted for users of the English language. Our target and source languages
    thus far have been the same. The internationalization features of Yii, which include
    translation, are only applicable when these two languages are different.
  prefs: []
  type: TYPE_NORMAL
- en: Performing message translation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Message translation is performed by calling the following application method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: This method translates the message from the source language to the target language.
  prefs: []
  type: TYPE_NORMAL
- en: When translating a message, the category must be specified to allow a message
    to be translated differently under different categories (contexts). The category
    `Yii` is reserved for the messages used by the Yii framework core code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Messages can also contain parameter placeholders that will be replaced with
    the actual parameter values upon calling `Yii::t()`. The following example depicts
    the translation of an error message. This message translation request would replace
    the `{errorCode}` placeholder in the original message with the actual `$errorCode`
    value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: The translated messages are stored in a repository called **message source**.
    A message source is represented as an instance of `CMessageSource` or a child
    class thereof. When `Yii::t()` is invoked, it will look for the message in the
    message source and return its translated version if it is found.
  prefs: []
  type: TYPE_NORMAL
- en: 'Yii comes with the following types of message sources:'
  prefs: []
  type: TYPE_NORMAL
- en: '**CPhpMessageSource**: This is the default message source. The message translations
    are stored as key-value pairs in a PHP array. The original message is the key
    and the translated message is the value. Each array represents the translations
    for a particular category of messages, and is stored in a separate PHP script
    file whose name is the category name. The PHP translation files for the same language
    are stored under the same directory named as the locale ID. And all these directories
    are located under the directory specified by `basePath`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CGettextMessageSource**: The message translations are stored as `GNU Gettext`
    files.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CDbMessageSource**: The message translations are stored in database tables.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A message source is loaded as an application component. Yii predeclares an application
    component named `messages` to store the messages that are used in a user application.
    By default, the type of this message source is `CPhpMessageSource` and the base
    path for storing the PHP translation files is `protected/messages`.
  prefs: []
  type: TYPE_NORMAL
- en: 'An example will go a long way to help bring all of this together. Let''s translate
    the form field labels on our **Login** form into a fictitious language that we''ll
    call `Reversish`. **Reversish** is written by taking an English word or phrase
    and writing it in reverse. So here are the Reversish translations of our login
    form field labels:'
  prefs: []
  type: TYPE_NORMAL
- en: '| English | Reversish |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Username | Emanresu |'
  prefs: []
  type: TYPE_TB
- en: '| Password | Drowssap |'
  prefs: []
  type: TYPE_TB
- en: '| Remember me next time | Emit txen em rebmemer |'
  prefs: []
  type: TYPE_TB
- en: 'We''ll use the default `CPhpMessageSource` implementation to house our message
    translations. So the first thing we need to do is create a PHP file containing
    our translations. We''ll make the locale ID `rev`, and we''ll just call the category
    `default` for now. We need to create a new file under the messages base directory
    that follows the format `/localeID/CategoryName.php`. So we need to create a new
    file located at `/protected/messages/rev/default.php` and then add the following
    translation array to this file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Next we need to set the application target language to be Reversish. We can
    do this in the application configuration file so that it will impact the entire
    site. Simply add the following `name=>value` pair to the returned array in the
    `/protected/config/main.php` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Now the last thing we need to do is to make our calls to `Yii::t()` so that
    our login form field labels are sent through the translation. These form field
    labels are defined in the `LoginForm::attributeLabels()` method. Replace that
    entire method with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Now if we visit our **Login** form again, we see a new Reversish version as
    depicted in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Performing message translation](graphics/8727_10_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Performing file translation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Yii also provides the ability to use different files based on the target locale
    ID setting of the application. File translation is accomplished by calling the
    application method `CApplication::findLocalizedFile()`. This method takes in the
    path to a file and will look for that file with the same name, but under a directory
    that has been named with the same name as the target locale ID. The target locale
    ID is specified either as an explicit input to the method or as what is specified
    in the application configuration.
  prefs: []
  type: TYPE_NORMAL
- en: Let's try this out. All we really need to do is create the appropriate translation
    file. We'll stick with translating the login form. So we create a new view file
    `/protected/views/site/rev/login.php` and then add our translated content. Again,
    this is too long to list in its entirety, but you can view this in the downloadable
    code files or the standalone content at [https://gist.github.com/3779850](https://gist.github.com/3779850).
  prefs: []
  type: TYPE_NORMAL
- en: 'We are already setting the target language for the application in the main
    configuration file, and the call to get the localized file will be taken care
    of for us behind the scenes when calling `render(''login'')`. So with this file
    in place, our login form now looks as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Performing file translation](graphics/8727_10_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have seen how a Yii application allows you to quickly and
    easily polish up the design. We were introduced to the concept of layout files,
    and walked through how to use these in an application to lay out content and design
    that needs to be implemented in a similar manner across many different web pages.
    This also introduced us to the `CMenu` and `CBreadcrumbs` built-in widgets that
    provide very easy to use UI navigational constructs on each page.
  prefs: []
  type: TYPE_NORMAL
- en: We then introduced the idea of a theme within web applications and how you can
    create them in Yii. We saw that themes allow you to easily put a new face on an
    existing web application, and allow you to redesign your application without rebuilding
    any of the functionality or "backend".
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we looked at changing the face of the application through the lens
    of `i18n` and language translation. We learned how to set the target locale of
    the application to enable localization settings and language translations.
  prefs: []
  type: TYPE_NORMAL
- en: We have made a few references in this and past chapters to "modules", but have
    yet to dive into what exactly these are within a Yii application. That is going
    to be the focus of the next chapter.
  prefs: []
  type: TYPE_NORMAL
