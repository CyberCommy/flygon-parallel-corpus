- en: Appendix C. Generic View Reference
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Chapter 10](ch10.xhtml "Chapter 10. Generic Views"), *Generic Views*, introduced
    generic views but left out some of the gory details. This appendix describes each
    generic view along with a summary of options each view can take. Be sure to read
    [Chapter 10](ch10.xhtml "Chapter 10. Generic Views"), *Generic Views*, before
    trying to understand the reference material that follows. You might want to refer
    back to the `Book`, `Publisher`, and `Author` objects defined in that chapter;
    the examples that follow use these models. If you want to dig deeper into more
    advanced generic view topics (like using mixins with the class-based views), see
    the Django Project website at [https://docs.djangoproject.com/en/1.8/topics/class-based-views/](https://docs.djangoproject.com/en/1.8/topics/class-based-views/).'
  prefs: []
  type: TYPE_NORMAL
- en: Common arguments to generic views
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Most of these views take a large number of arguments that can change the generic
    view's behavior. Many of these arguments work the same across multiple views.
    *Table C.1* describes each of these common arguments; anytime you see one of these
    arguments in a generic view's argument list, it will work as described in the
    table.
  prefs: []
  type: TYPE_NORMAL
- en: '| **Argument** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `allow_empty` | A Boolean specifying whether to display the page if no objects
    are available. If this is `False` and no objects are available, the view will
    raise a 404 error instead of displaying an empty page. By default, this is `True`.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `context_processors` | A list of additional template-context processors (besides
    the defaults) to apply to the view''s template. See [Chapter 9](ch09.xhtml "Chapter 9. Advanced
    Models"), *Advanced Models*, for information on template context processors. |'
  prefs: []
  type: TYPE_TB
- en: '| `extra_context` | A dictionary of values to add to the template context.
    By default, this is an empty dictionary. If a value in the dictionary is callable,
    the generic view will call it just before rendering the template. |'
  prefs: []
  type: TYPE_TB
- en: '| `mimetype` | The MIME type to use for the resulting document. It defaults
    to the value of the `DEFAULT_MIME_TYPE` setting, which is `text/html` if you haven''t
    changed it. |'
  prefs: []
  type: TYPE_TB
- en: '| `queryset` | A `QuerySet` (that is, something like `Author.objects.all()`)
    to read objects from. See Appendix B for more information about `QuerySet` objects.
    Most generic views require this argument. |'
  prefs: []
  type: TYPE_TB
- en: '| `template_loader` | The template loader to use when loading the template.
    By default, it''s `django.template.loader`. See [Chapter 9](ch09.xhtml "Chapter 9. Advanced
    Models"), *Advanced Models*, for information on template loaders. |'
  prefs: []
  type: TYPE_TB
- en: '| `template_name` | The full name of a template to use in rendering the page.
    This lets you override the default template name derived from the `QuerySet`.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `template_object_name` | The name of the template variable to use in the
    template context. By default, this is `''object''`. Views that list more than
    one object (that is, `object_list` views and various objects-for-date views) will
    append `''_list''` to the value of this parameter. |'
  prefs: []
  type: TYPE_TB
- en: 'Table C.1: Common Generic View Arguments'
  prefs: []
  type: TYPE_NORMAL
- en: Simple generic views
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The module `django.views.generic.base` contains simple views that handle a
    couple of common cases: rendering a template when no view logic is needed and
    issuing a redirect.'
  prefs: []
  type: TYPE_NORMAL
- en: Rendering a template-TemplateView
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This view renders a given template, passing it a context with keyword arguments
    captured in the URL.
  prefs: []
  type: TYPE_NORMAL
- en: '**Example:**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Given the following URLconf:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'And a sample `views.py`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: a request to `/` would render the template `home.html`, returning a context
    containing a list of the top 5 articles.
  prefs: []
  type: TYPE_NORMAL
- en: Redirecting to another URL
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`django.views.generic.base.RedirectView()` redirects to a given URL.'
  prefs: []
  type: TYPE_NORMAL
- en: The given URL may contain dictionary-style string formatting, which will be
    interpolated against the parameters captured in the URL. Because keyword interpolation
    is *always* done (even if no arguments are passed in), any "`%`" characters in
    the URL must be written as "`%%`" so that Python will convert them to a single
    percent sign on output.
  prefs: []
  type: TYPE_NORMAL
- en: If the given URL is `None`, Django will return an `HttpResponseGone` (410).
  prefs: []
  type: TYPE_NORMAL
- en: '**Example** **views.py**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**Example urls.py**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Attributes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: url
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The URL to redirect to, as a string. Or `None` to raise a 410 (Gone) HTTP error.
  prefs: []
  type: TYPE_NORMAL
- en: pattern_name
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The name of the URL pattern to redirect to. Reversing will be done using the
    same `*args` and `**kwargs` as are passed in for this view.
  prefs: []
  type: TYPE_NORMAL
- en: permanent
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Whether the redirect should be permanent. The only difference here is the HTTP
    status code returned. If `True`, then the redirect will use status code 301\.
    If `False`, then the redirect will use status code 302\. By default, `permanent`
    is `True`.
  prefs: []
  type: TYPE_NORMAL
- en: query_string
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Whether to pass along the GET query string to the new location. If `True`, then
    the query string is appended to the URL. If `False`, then the query string is
    discarded. By default, `query_string` is `False`.
  prefs: []
  type: TYPE_NORMAL
- en: Methods
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`get_redirect_url(*args, **kwargs)` constructs the target URL for redirection.'
  prefs: []
  type: TYPE_NORMAL
- en: The default implementation uses `url` as a starting string and performs expansion
    of `%` named parameters in that string using the named groups captured in the
    URL.
  prefs: []
  type: TYPE_NORMAL
- en: If `url` is not set, `get_redirect_url()` tries to reverse the `pattern_name`
    using what was captured in the URL (both named and unnamed groups are used).
  prefs: []
  type: TYPE_NORMAL
- en: If requested by `query_string`, it will also append the query string to the
    generated URL. Subclasses may implement any behavior they wish, as long as the
    method returns a redirect-ready URL string.
  prefs: []
  type: TYPE_NORMAL
- en: List/detail generic views
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The list/detail generic views handle the common case of displaying a list of
    items at one view and individual detail views of those items at another.
  prefs: []
  type: TYPE_NORMAL
- en: Lists of objects
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Use this view to display a page representing a list of objects.
  prefs: []
  type: TYPE_NORMAL
- en: '**Example views.py**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '**Example myapp/urls.py**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '**Example myapp/article_list.html**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Detail views
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: django.views.generic.detail.DetailView
  prefs: []
  type: TYPE_NORMAL
- en: This view provides a detail view of a single object.
  prefs: []
  type: TYPE_NORMAL
- en: '**Example myapp/views.py**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '**Example myapp/urls.py**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '**Example myapp/article_detail.html**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Date-Based Generic Views
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Date-based generic views, provided in `django.views.generic.dates`, are views
    for displaying drilldown pages for date-based data.
  prefs: []
  type: TYPE_NORMAL
- en: ArchiveIndexView
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A top-level index page showing the latest objects, by date. Objects with a date
    in the *future* are not included unless you set `allow_future` to `True`.
  prefs: []
  type: TYPE_NORMAL
- en: '**Context**'
  prefs: []
  type: TYPE_NORMAL
- en: 'In addition to the context provided by `django.views.generic.list.MultipleObjectMixin`
    (via `django.views.generic.dates.BaseDateListView`), the template''s context will
    be:'
  prefs: []
  type: TYPE_NORMAL
- en: '`date_list`: A `DateQuerySet` object containing all years that have objects
    available according to `queryset`, represented as `datetime.datetime` objects,
    in descending order'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Notes**'
  prefs: []
  type: TYPE_NORMAL
- en: Uses a default `context_object_name` of `latest`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Uses a default `template_name_suffix` of `_archive`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Defaults to providing `date_list` by year, but this can be altered to month
    or day using the attribute `date_list_period`. This also applies to all subclass
    views:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '**Example myapp/article_archive.html**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: This will output all articles.
  prefs: []
  type: TYPE_NORMAL
- en: YearArchiveView
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A yearly archive page showing all available months in a given year. Objects
    with a date in the *future* are not displayed unless you set `allow_future` to
    `True`.
  prefs: []
  type: TYPE_NORMAL
- en: '**Context**'
  prefs: []
  type: TYPE_NORMAL
- en: 'In addition to the context provided by `django.views.generic.list.MultipleObjectMixin`
    (via `django.views.generic.dates.BaseDateListView`), the template''s context will
    be:'
  prefs: []
  type: TYPE_NORMAL
- en: '`date_list`: A `DateQuerySet` object containing all months that have objects
    available according to `queryset`, represented as `datetime.datetime` objects,
    in ascending order'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`year`: A `date` object representing the given year'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`next_year`: A `date` object representing the first day of the next year, according
    to `allow_empty` and `allow_future`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`previous_year`: A `date` object representing the first day of the previous
    year, according to `allow_empty` and `allow_future`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Notes**'
  prefs: []
  type: TYPE_NORMAL
- en: Uses a default `template_name_suffix` of `_archive_year`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Example myapp/views.py**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '**Example myapp/urls.py**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '**Example myapp/article_archive_year.html**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: MonthArchiveView
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A monthly archive page showing all objects in a given month. Objects with a
    date in the *future* are not displayed unless you set `allow_future` to `True`.
  prefs: []
  type: TYPE_NORMAL
- en: '**Context**'
  prefs: []
  type: TYPE_NORMAL
- en: 'In addition to the context provided by `MultipleObjectMixin` (via `BaseDateListView`),
    the template''s context will be:'
  prefs: []
  type: TYPE_NORMAL
- en: '`date_list`: A `DateQuerySet` object containing all days that have objects
    available in the given month, according to `queryset`, represented as `datetime.datetime`
    objects, in ascending order'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`month`: A `date` object representing the given month'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`next_month`: A `date` object representing the first day of the next month,
    according to `allow_empty` and `allow_future`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`previous_month`: A `date` object representing the first day of the previous
    month, according to `allow_empty` and `allow_future`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Notes**'
  prefs: []
  type: TYPE_NORMAL
- en: Uses a default `template_name_suffix` of `_archive_month`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Example myapp/views.py**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '**Example myapp/urls.py**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '**Example myapp/article_archive_month.html**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: WeekArchiveView
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A weekly archive page showing all objects in a given week. Objects with a date
    in the *future* are not displayed unless you set `allow_future` to `True`.
  prefs: []
  type: TYPE_NORMAL
- en: '**Context**'
  prefs: []
  type: TYPE_NORMAL
- en: 'In addition to the context provided by `MultipleObjectMixin` (via `BaseDateListView`),
    the template''s context will be:'
  prefs: []
  type: TYPE_NORMAL
- en: '`week`: A `date` object representing the first day of the given week'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`next_week`: A `date` object representing the first day of the next week, according
    to `allow_empty` and `allow_future`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`previous_week`: A `date` object representing the first day of the previous
    week, according to `allow_empty` and `allow_future`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Notes**'
  prefs: []
  type: TYPE_NORMAL
- en: Uses a default `template_name_suffix` of `_archive_week`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Example myapp/views.py**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '**Example myapp/urls.py**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '**Example myapp/article_archive_week.html**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: In this example, you are outputting the week number. The default `week_format`
    in the `WeekArchiveView` uses week format "`%U`" which is based on the United
    States week system where the week begins on a Sunday. The "`%W`" format uses the
    ISO week format and its week begins on a Monday. The "`%W`" format is the same
    in both the `strftime()` and the `date`.
  prefs: []
  type: TYPE_NORMAL
- en: However, the `date` template filter does not have an equivalent output format
    that supports the US based week system. The `date` filter "`%U`" outputs the number
    of seconds since the Unix epoch.
  prefs: []
  type: TYPE_NORMAL
- en: DayArchiveView
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A day archive page showing all objects in a given day. Days in the future throw
    a 404 error, regardless of whether any objects exist for future days, unless you
    set `allow_future` to `True`.
  prefs: []
  type: TYPE_NORMAL
- en: '**Context**'
  prefs: []
  type: TYPE_NORMAL
- en: 'In addition to the context provided by `MultipleObjectMixin` (via `BaseDateListView`),
    the template''s context will be:'
  prefs: []
  type: TYPE_NORMAL
- en: '`day`: A `date` object representing the given day'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`next_day`: A `date` object representing the next day, according to `allow_empty`
    and `allow_future`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`previous_day`: A `date` object representing the previous day, according to
    `allow_empty` and `allow_future`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`next_month`: A `date` object representing the first day of the next month,
    according to `allow_empty` and `allow_future`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`previous_month`: A `date` object representing the first day of the previous
    month, according to `allow_empty` and `allow_future`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Notes**'
  prefs: []
  type: TYPE_NORMAL
- en: Uses a default `template_name_suffix` of `_archive_day`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Example myapp/views.py**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '**Example myapp/urls.py**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '**Example myapp/article_archive_day.html**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: TodayArchiveView
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A day archive page showing all objects for *today*. This is exactly the same
    as `django.views.generic.dates.DayArchiveView`, except today's date is used instead
    of the `year`/`month`/`day` arguments.
  prefs: []
  type: TYPE_NORMAL
- en: '**Notes**'
  prefs: []
  type: TYPE_NORMAL
- en: Uses a default `template_name_suffix` of `_archive_today`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Example myapp/views.py**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: '**Example myapp/urls.py**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Where is the example template for `TodayArchiveView`?
  prefs: []
  type: TYPE_NORMAL
- en: This view uses by default the same template as the `DayArchiveView`, which is
    in the previous example. If you need a different template, set the `template_name`
    attribute to be the name of the new template.
  prefs: []
  type: TYPE_NORMAL
- en: DateDetailView
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A page representing an individual object. If the object has a date value in
    the future, the view will throw a 404 error by default, unless you set `allow_future`
    to `True`.
  prefs: []
  type: TYPE_NORMAL
- en: '**Context**'
  prefs: []
  type: TYPE_NORMAL
- en: Includes the single object associated with the `model` specified in the `DateDetailView`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Notes**'
  prefs: []
  type: TYPE_NORMAL
- en: Uses a default `template_name_suffix` of `_detail`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: '**Example myapp/article_detail.html**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Form handling with class-based views
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Form processing generally has 3 paths:'
  prefs: []
  type: TYPE_NORMAL
- en: Initial `GET` (blank or prepopulated form)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`POST` with invalid data (typically redisplay form with errors)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`POST` with valid data (process the data and typically redirect)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing this yourself often results in a lot of repeated boilerplate code
    (see Using a form in a view). To help avoid this, Django provides a collection
    of generic class-based views for form processing.
  prefs: []
  type: TYPE_NORMAL
- en: Basic forms
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Given a simple contact form:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'The view can be constructed using a `FormView`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Notes:'
  prefs: []
  type: TYPE_NORMAL
- en: '`FormView` inherits `TemplateResponseMixin` so `template_name` can be used
    here'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The default implementation for `form_valid()` simply redirects to the `success_url`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Model forms
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Generic views really shine when working with models. These generic views will
    automatically create a `ModelForm`, so long as they can work out which model class
    to use:'
  prefs: []
  type: TYPE_NORMAL
- en: If the `model` attribute is given, that model class will be used
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If `get_object()` returns an object, the class of that object will be used
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If a `queryset` is given, the model for that queryset will be used
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Model form views provide a `form_valid()` implementation that saves the model
    automatically. You can override this if you have any special requirements; see
    below for examples.
  prefs: []
  type: TYPE_NORMAL
- en: You don't even need to provide a `success_url` for `CreateView` or `UpdateView`-they
    will use `get_absolute_url()` on the model object if available.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to use a custom `ModelForm` (for instance to add extra validation)
    simply set `form_class` on your view.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When specifying a custom form class, you must still specify the model, even
    though the form_class may be a ModelForm.
  prefs: []
  type: TYPE_NORMAL
- en: 'First we need to add `get_absolute_url()` to our `Author` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Then we can use `CreateView` and friends to do the actual work. Notice how
    we''re just configuring the generic class-based views here; we don''t have to
    write any logic ourselves:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: We have to use `reverse_lazy()` here, not just `reverse` as the urls are not
    loaded when the file is imported.
  prefs: []
  type: TYPE_NORMAL
- en: The `fields` attribute works the same way as the `fields` attribute on the inner
    `Meta` class on `ModelForm`. Unless you define the form class in another way,
    the attribute is required and the view will raise an `ImproperlyConfigured` exception
    if it's not.
  prefs: []
  type: TYPE_NORMAL
- en: If you specify both the `fields` and `form_class` attributes, an `ImproperlyConfigured`
    exception will be raised.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, we hook these new views into the URLconf:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'In this example:'
  prefs: []
  type: TYPE_NORMAL
- en: '`CreateView` and `UpdateView` use `myapp/author_form.html`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DeleteView` uses `myapp/author_confirm_delete.html`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you wish to have separate templates for `CreateView` and `UpdateView`, you
    can set either `template_name` or `template_name_suffix` on your view class.
  prefs: []
  type: TYPE_NORMAL
- en: Models and request.user
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To track the user that created an object using a `CreateView`, you can use
    a custom `ModelForm` to do this. First, add the foreign key relation to the model:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'In the view, ensure that you don''t include `created_by` in the list of fields
    to edit, and override `form_valid()` to add the user:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Note that you'll need to decorate this view using `login_required()`, or alternatively
    handle unauthorized users in the `form_valid()`.
  prefs: []
  type: TYPE_NORMAL
- en: AJAX example
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here is a simple example showing how you might go about implementing a form
    that works for AJAX requests as well as *normal* form `POST`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
