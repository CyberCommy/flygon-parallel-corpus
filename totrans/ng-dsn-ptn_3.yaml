- en: Classical Patterns
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: TypeScript is an object-oriented programming language and, as such, we can leverage
    decades of knowledge on object-oriented architecture. In this chapter, we'll explore
    some of the most useful object-oriented design patterns and learn how to apply
    them in an Angular way.
  prefs: []
  type: TYPE_NORMAL
- en: Angular is, by itself, an object-oriented framework, and it forces you to do
    most of your development in certain ways. For example, you are required to have
    components, services, pipes, and so on. Forcing these building blocks upon you
    contributes to building a good architecture, very much like what the Zend framework
    does for PHP, or Ruby on Rails for Ruby. Of course, frameworks are there to make
    your life easier and speed up development time.
  prefs: []
  type: TYPE_NORMAL
- en: While the Angular way of designing things is way above average, we can always
    do better. I do not claim that what I present in this chapter is the ultimate
    design, or that you will be able to use it to resolve anything from bakery one-pagers
    to dashboards for the Mars One mission—such a design doesn't exist, unfortunately—but
    it'll definitively improve your toolbelt.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we''ll see the following classical patterns:'
  prefs: []
  type: TYPE_NORMAL
- en: Components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Singletons
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Observers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the first three chapters of this book, we saw a whole lot of Angular components.
    The Angular `Component` is one of the main building blocks of an Angular application
    with, for example, `services`, `pipes`, and so on. As a reminder, a TypeScript
    class becomes an Angular component using the following annotation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Here, the `AppComponent` class is supercharged with the behavior of the`selector`,
    `templateUrl`, and `styleUrls` Angular components.
  prefs: []
  type: TYPE_NORMAL
- en: Singleton
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Another handy pattern to use for frontend applications is the singleton. The
    singleton ensures that only one instance of a given object exists in your program.
    Moreover, it provides a global point of access to the object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s what it looks like in practice:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'We have a class that has a `private static instance:MySingleton` attribute.
    Then, we have a private constructor that makes the following fail:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Note that it fails because your TypeScript transpiler complains about the visibility.
    However, if you transpile the `MySingleton` class to JavaScript and import it
    into another TypeScript project, you'll be able to use the *new* operator because
    the transpiled TypeScript  doesn't have any visibility.
  prefs: []
  type: TYPE_NORMAL
- en: 'The problem with this fairly simple implementation of the singleton pattern
    is concurrency. Indeed, if two processes hit `getInstance():MySingleton` at the
    same time, then we''ll have two instances of`MySingleton` on the program. To be
    sure that doesn''t happen, we can use a technique known as early instantiation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'While you can implement your singleton in TypeScript, you can also leverage
    the Angular way of creating a singleton: services! Indeed, in Angular, services
    are only instantiated once and injected to any components needing it. Here''s
    an example of a service and injection via the `NgModule` we have seen before in
    this book:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding code, we have the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`APIService`, which displays the `@Injectable()` annotation that makes it,
    well, injectable. Also, the `APIService` has an`increment:number` attribute that
    is incremented every time a new instance is created. With `increment:number` being
    static, it''ll tell us exactly how many instances there are in our program. Finally, `APIService`
    has a `toString:string` method that returns the current instance number.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`AppComponent` is a classical component that receives an injection of`APIService`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`OtherComponent` is another classical component that receives an injection
    of`APIService`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/app.module.ts` contains`NgModule`. In `NgModule`, most of the declarations
    shown here have already been discussed in this book. The novelty comes from the
    `providers: [APIService]` part. Here, we declare a provider for`APIService` itself.
    As `APIService` doesn''t do anything too crazy, it suffices itself and can be
    provided by using a reference to the class. More complex services that, for example,
    themselves require injection, need custom-tailored providers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now, if we navigate to these two components, the result would be the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'This proves that only an instance has been created and the same instance has
    been injected into both components. Hence, we have a singleton. However, this
    singleton, while convenient, isn''t really safe. Why you ask? Well, `APIService`
    can also be provided at the component level, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'In such a case, two separate instances would be created, resulting in the following
    output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Consequently, using Angular services, you can't enforce the singleton pattern,
    contrary to its plain TypeScript counterpart. Also, the plain TypeScript would
    be an order of magnitude faster than the Angular services, as we skip the injection
    process altogether. The exact number depends heavily on the CPU/RAM of your machine.
  prefs: []
  type: TYPE_NORMAL
- en: The only questions left to answer in the case of the singleton is when to use
    it or which implementation performs the best. The singleton enforces only one
    instance of a given class in your program. Consequently, it's a very good fit
    for any communication with a backend or any hardware access. For example, in the
    case of communication with a backend, it might be desirable to have only one `APIService`
    handling API keys, API limits, and `csrf` tokens across the board without having
    to make sure we pass the same instance of the service throughout all our components,
    model, and so on. In the case of hardware access, you might want to be sure that
    you have only one connection open to the webcam or the microphone of our users
    so that you can properly release them when you are done with them.
  prefs: []
  type: TYPE_NORMAL
- en: 'On the performance side, here are the results, in milliseconds, for each implementation.
    I ran each version 100 times, excluded the outliers (best and worst 5%), and averaged
    the remaining 90 calls in the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Singleton Lazy** | **Singleton Early** | **Service Injection** |'
  prefs: []
  type: TYPE_TB
- en: '| 196ms | 183ms | 186ms |'
  prefs: []
  type: TYPE_TB
- en: 'The code I ran was the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'For the experiment with the service injection, I had to add the following line
    in `app.module.ts: providers: [SingletonService]`.'
  prefs: []
  type: TYPE_NORMAL
- en: To my surprise, the results are fairly close from one approach to the other.
    The singleton implementation leveraging the early instantiation performs only
    2% better than the more practical service injection. The singleton with the lazy
    instantiation is closing the podium with 196 ms (7% worse than singleton early
    instantiation and 5% worse than service injection).
  prefs: []
  type: TYPE_NORMAL
- en: Factory method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s assume that we have a `User` class with two private variables: `lastName:string`
    and `firstName:string`. In addition, this simple class proposes the `hello` method that
    prints `"Hi I am", this.firstName, this.lastName`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, consider that we receive users through a JSON API. It''ll more than likely
    look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'With the following snippet, we can create a `User`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Until now, the TypeScript compiler doesn''t complain, and it executes smoothly.
    It works because the `parse` method returns `any` (for example, the TypeScript
    equivalent of the Java object). Sure enough, we can convert the `any` into `User`.
    However, `userFromJSONAPI.hello();` will yield the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Why? Well, the left-hand side of assignation is defined as `User`, sure, but
    it'll be erased when we transpile it to JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: 'The type-safe TypeScript way to do it would be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Interestingly enough, the type of function won't help you either. In both cases,
    it'll display `object` instead of `User`, as the very concept of user doesn't
    exist in JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: While the direct type-safe approach works, it isn't very expansible nor reusable.
    Indeed, the map callback method would have to be duplicated everywhere you receive
    a JSON user. The most convenient way to do that is through the `Factory` pattern.
    A Factory is used for objects without exposing the instantiation logic to the
    client.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we were to have a factory to create a user, it would look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Here, we have a `static` method, named `buildUser`, that receives a JSON object
    and take all the required value inside the JSON object to invoke, with the right
    attributes, a hypothetical `User` constructor. The method is static, like all
    the methods of such a factory are. Indeed, we don't need to save any states or
    instance-bound variables in a factory; we only encapsulate away the gruesome creation
    of users. Note that your factory will likely be shared with the rest of your POTOs.
  prefs: []
  type: TYPE_NORMAL
- en: Observer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The observable pattern that allows an object, called the subject, to keep track
    of other objects, called observers, is interested in the subject state. When the
    subject state changes, it notifies its observers. The mechanism behind this is
    really simple.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at the following observer/subject implementation in pure
    TypeScript (no Angular 2 or framework of any kind, just Typescript). First, I
    defined an `Observer` interface that any concrete implementation will have to
    implement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'This interface only defines the `notify()` method. This method will be called
    by the subject (the object being observed by the observer) when its state changes.
    Then, I have an implementation of this interface, named `HumanObserver`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'This implementation leverages the TypeScript property constructor, where you
    can define the property of your class inside the constructor. This notation is
    100% equivalent to the following while being shorter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Following the definitions of the `Observer` interface and the `HumanObserver`,
    we can move on to the subject. I defined a subject class that manages the observers.
    This class has three methods: `attachObserver`, `detachObserver`, and `notifyObservers`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: The `attachObserver` method pushes new observers into the `observers` property,
    while the `detachObserver` removes them.
  prefs: []
  type: TYPE_NORMAL
- en: Subject implementations are often found with attach/detach, subscribe/unsubscribe,
    or add/delete prefixes.
  prefs: []
  type: TYPE_NORMAL
- en: 'The last method is `notifyObservers`, which iterates over the observers and
    invokes their notify method. The last class allowing us to showcase the observable
    mechanism is IMDB, which extends `subject`. It will notify observers when a movie
    gets added:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'To make the pieces communicate with each other, we have to: create a `Subject`,
    create an `Observer`, attach the `Observer` to the `Subject`, and change the state
    of the subject via the `addMovie` method.'
  prefs: []
  type: TYPE_NORMAL
- en: 'More concretely, here''s an implementation of the previous list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: To speed up our development process, we will install `ts-node`. This node package
    will transpile TypeScript files into JavaScript and resolve the dependencies between
    said files.
  prefs: []
  type: TYPE_NORMAL
- en: 'The output is `Mathieu Notified`. We can try to detach `mathieu` and add another
    movie:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: The output is still `Mathieu Notified`, which happens after we add the `Jaws`
    movie. The second movie addition (`Die Hard`) doesn't trigger a `Mathieu Notified`
    print to the console as it has been detached.
  prefs: []
  type: TYPE_NORMAL
- en: TypeScript observables with parameters
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'So, this is a basic implementation of the observer pattern. Nevertheless, it
    is not fully fledged as the `HumanObserver` only knows that something has changed
    in one of the subjects it observes. Consequently, it has to iterate over all of
    the subjects it observes and check their previous state against their current
    state to identify what has changed and where. A better way to go about this would
    be to modify the `notify` of the `Observer` so that it contains more information.
    For example, we could add optional parameters as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'The `notify()` method now accepts an optional value parameter, which characterizes
    the new state of the `subject` object. We can also receive a reference to the
    `Subject` object itself. This is useful in case the observer observes many subjects.
    In such a case, we need to be able to differentiate them. Accordingly, we have
    to change the Subject and IMDB a bit so that they use the new notify:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, the output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: This is way more expressive than `Mathieu Notified`. Now, when we use `Observer`
    patterns for asynchronous programming, what we really mean is that we ask for
    something, and we do not want to wait to do anything during its processing. Instead,
    what we do is subscribe to the response event to be notified when the response
    comes. In the following sections, we will use the same pattern and mechanisms
    with Angular.
  prefs: []
  type: TYPE_NORMAL
- en: Observing HTTP responses
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we will build a JSON API that returns movies according to
    search parameters. Instead of simply waiting for the HTTP query to complete, we
    will leverage the power of the observer design pattern to let the user know we
    are waiting and, if need be, execute other processes. First things first: we need
    a data source for our IMDB-like application. Building and deploying a server-side
    application that''s able to interpret an HTTP query and send results accordingly
    is relatively simple nowadays. However, this falls outside the scope of this book.
    Instead, what we will do is fetch a static JSON file hosted at [http://bit.ly/mastering-angular2-marvel](http://bit.ly/mastering-angular2-marvel).
    This file contains some of the latest movies of the Marvel Cinematic Universe.
    It contains a JSON array describing 14 movies as JSON objects. Here''s the first
    movie:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: You can find standard information that an IMDB-like application would provide,
    such as release year, running time, and so on. Our goal is to design an asynchronous
    JSON API making each field searchable.
  prefs: []
  type: TYPE_NORMAL
- en: 'As we are fetching a static JSON file (we will not insert, update, or delete
    any elements), acceptable API calls would be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: The first call simply fetches the movie with `movie_id = 1`; the second call
    is a more generic one that works in any field. To prevent the API consumer from
    requesting fields that don't exist in our movie, we restrict the field values
    using an enumerator defined inside a `Movie` class. Now, the important part here
    is the actual return of these calls. Indeed, they will trigger an observable mechanism
    wherein the caller will attach him/herself to an observable HTTP call. Then, when
    the HTTP call is complete and the results have filtered according to the query
    parameter, the callee will notify the caller about the response. Consequently,
    the caller does not have to wait for the callee (`IMDBAPI`), as they will be notified
    when the request is complete.
  prefs: []
  type: TYPE_NORMAL
- en: Implementation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s dive into the implementation. First, we will need to create a new Angular
    project using the Angular CLI:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we will need a model to represent the movie concept. We will generate
    this class using the `ng g class` models/Movie command line. Then, we can add
    a constructor defining all the private fields of the `Movie` models, which is
    the same as we did for the getters and setters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Here, each field of the movie JSON definition is mapped into a private member
    of the `Movie` class using the constructor property declaration
  prefs: []
  type: TYPE_NORMAL
- en: of TypeScript. We also override the `toString` method so that it prints every
    field. In the `toString` method, we take advantage of multi-line strings provided
    by the backtick ([PRE30]
  prefs: []
  type: TYPE_NORMAL
- en: IMDBAPI.fetchOneById(1);
  prefs: []
  type: TYPE_NORMAL
- en: IMDBAPI.fetchByFields(MovieFields.release_date, 2015);
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: import { Injectable } from '@angular/core';
  prefs: []
  type: TYPE_NORMAL
- en: import { Http }  from '@angular/http';
  prefs: []
  type: TYPE_NORMAL
- en: import { Movie, MovieFields } from '../models/movie';
  prefs: []
  type: TYPE_NORMAL
- en: import { Observable } from 'rxjs/Rx';
  prefs: []
  type: TYPE_NORMAL
- en: import 'rxjs/Rx';
  prefs: []
  type: TYPE_NORMAL
- en: '@Injectable()'
  prefs: []
  type: TYPE_NORMAL
- en: export class IMDBAPIService {
  prefs: []
  type: TYPE_NORMAL
- en: private moviesUrl:string = "app/marvel-cinematic-universe.json";
  prefs: []
  type: TYPE_NORMAL
- en: 'constructor(private http: Http) { }'
  prefs: []
  type: TYPE_NORMAL
- en: /**
  prefs: []
  type: TYPE_NORMAL
- en: '* Return an Observable to a Movie matching id'
  prefs: []
  type: TYPE_NORMAL
- en: '* @param  {number}           id'
  prefs: []
  type: TYPE_NORMAL
- en: '* @return {Observable<Movie>}'
  prefs: []
  type: TYPE_NORMAL
- en: '*/'
  prefs: []
  type: TYPE_NORMAL
- en: public fetchOneById(id:number):Observable<Movie>{
  prefs: []
  type: TYPE_NORMAL
- en: console.log('fetchOneById', id);
  prefs: []
  type: TYPE_NORMAL
- en: return this.http.get(this.moviesUrl)
  prefs: []
  type: TYPE_NORMAL
- en: /**
  prefs: []
  type: TYPE_NORMAL
- en: '* Transforms the result of the HTTP get, which is observable'
  prefs: []
  type: TYPE_NORMAL
- en: '* into one observable by item.'
  prefs: []
  type: TYPE_NORMAL
- en: '*/'
  prefs: []
  type: TYPE_NORMAL
- en: .flatMap(res => res.json().movies)
  prefs: []
  type: TYPE_NORMAL
- en: /**
  prefs: []
  type: TYPE_NORMAL
- en: '* Filters movies by their movie_id'
  prefs: []
  type: TYPE_NORMAL
- en: '*/'
  prefs: []
  type: TYPE_NORMAL
- en: .filter((movie:any)=>{
  prefs: []
  type: TYPE_NORMAL
- en: console.log("filter", movie);
  prefs: []
  type: TYPE_NORMAL
- en: return (movie.movie_id === id)
  prefs: []
  type: TYPE_NORMAL
- en: '})'
  prefs: []
  type: TYPE_NORMAL
- en: /**
  prefs: []
  type: TYPE_NORMAL
- en: '* Map the JSON movie item to the Movie Model'
  prefs: []
  type: TYPE_NORMAL
- en: '*/'
  prefs: []
  type: TYPE_NORMAL
- en: .map((movie:any) => {
  prefs: []
  type: TYPE_NORMAL
- en: console.log("map", movie);
  prefs: []
  type: TYPE_NORMAL
- en: return new Movie(
  prefs: []
  type: TYPE_NORMAL
- en: movie.movie_id,
  prefs: []
  type: TYPE_NORMAL
- en: movie.title,
  prefs: []
  type: TYPE_NORMAL
- en: movie.phase,
  prefs: []
  type: TYPE_NORMAL
- en: movie.category_name,
  prefs: []
  type: TYPE_NORMAL
- en: movie.release_year,
  prefs: []
  type: TYPE_NORMAL
- en: movie.running_time,
  prefs: []
  type: TYPE_NORMAL
- en: movie.rating_name,
  prefs: []
  type: TYPE_NORMAL
- en: movie.disc_format_name,
  prefs: []
  type: TYPE_NORMAL
- en: movie.number_discs,
  prefs: []
  type: TYPE_NORMAL
- en: movie.viewing_format_name,
  prefs: []
  type: TYPE_NORMAL
- en: movie.aspect_ratio_name,
  prefs: []
  type: TYPE_NORMAL
- en: movie.status,
  prefs: []
  type: TYPE_NORMAL
- en: movie.release_date,
  prefs: []
  type: TYPE_NORMAL
- en: movie.budget,
  prefs: []
  type: TYPE_NORMAL
- en: movie.gross,
  prefs: []
  type: TYPE_NORMAL
- en: movie.time_stamp
  prefs: []
  type: TYPE_NORMAL
- en: );
  prefs: []
  type: TYPE_NORMAL
- en: '});'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: import { Injectable } from '@angular/core';
  prefs: []
  type: TYPE_NORMAL
- en: import { Http } from '@angular/http';
  prefs: []
  type: TYPE_NORMAL
- en: import { Movie, MovieFields } from '../models/movie';
  prefs: []
  type: TYPE_NORMAL
- en: import { Observable } from 'rxjs/Rx';
  prefs: []
  type: TYPE_NORMAL
- en: import 'rxjs/Rx';
  prefs: []
  type: TYPE_NORMAL
- en: '@Injectable()'
  prefs: []
  type: TYPE_NORMAL
- en: export class IMDBAPIService {
  prefs: []
  type: TYPE_NORMAL
- en: private moviesUrl:string = "app/marvel-cinematic-universe.json";
  prefs: []
  type: TYPE_NORMAL
- en: 'constructor(private http: Http) { }'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'movie.movie_id(25) TypeError: movie.movie_id is not a function at Object.<anonymous>'
  prefs: []
  type: TYPE_NORMAL
- en: 'movie: Movie = JSON.parse(`{'
  prefs: []
  type: TYPE_NORMAL
- en: '"movie_id" : 1,'
  prefs: []
  type: TYPE_NORMAL
- en: '"title" : "Iron Man",'
  prefs: []
  type: TYPE_NORMAL
- en: '"phase" : "Phase One: Avengers Assembled",'
  prefs: []
  type: TYPE_NORMAL
- en: '"category_name" : "Action",'
  prefs: []
  type: TYPE_NORMAL
- en: '"release_year" : 2015,'
  prefs: []
  type: TYPE_NORMAL
- en: '"running_time" : 126,'
  prefs: []
  type: TYPE_NORMAL
- en: '"rating_name" : "PG-13",'
  prefs: []
  type: TYPE_NORMAL
- en: '"disc_format_name" : "Blu-ray",'
  prefs: []
  type: TYPE_NORMAL
- en: '"number_discs" : 1,'
  prefs: []
  type: TYPE_NORMAL
- en: '"viewing_format_name" : "Widescreen",'
  prefs: []
  type: TYPE_NORMAL
- en: '"aspect_ratio_name" : " 2.35:1",'
  prefs: []
  type: TYPE_NORMAL
- en: '"status" : 1,'
  prefs: []
  type: TYPE_NORMAL
- en: '"release_date" : "May 2, 2008",'
  prefs: []
  type: TYPE_NORMAL
- en: '"budget" : "140,000,000",'
  prefs: []
  type: TYPE_NORMAL
- en: '"gross" : "318,298,180",'
  prefs: []
  type: TYPE_NORMAL
- en: '"time_stamp" : "2015-05-03"'
  prefs: []
  type: TYPE_NORMAL
- en: '}`);'
  prefs: []
  type: TYPE_NORMAL
- en: Console.log(movie.movie_id(25));
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: import{ bootstrap } from '@angular/platform-browser-dynamic';
  prefs: []
  type: TYPE_NORMAL
- en: import{ enableProdMode } from '@angular/core';
  prefs: []
  type: TYPE_NORMAL
- en: import{ AngularObservableAppComponent, environment } from './app/';
  prefs: []
  type: TYPE_NORMAL
- en: import{ IMDBAPIService } from './app/services/imdbapi.service';
  prefs: []
  type: TYPE_NORMAL
- en: import { HTTP_PROVIDERS } from '@angular/http';
  prefs: []
  type: TYPE_NORMAL
- en: if(environment.production) {
  prefs: []
  type: TYPE_NORMAL
- en: enableProdMode();
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: bootstrap(AngularObservableAppComponent,
  prefs: []
  type: TYPE_NORMAL
- en: '[IMDBAPIService , HTTP_PROVIDERS]'
  prefs: []
  type: TYPE_NORMAL
- en: );
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: import { Component } from '@angular/core';
  prefs: []
  type: TYPE_NORMAL
- en: import { IMDBAPIService } from './services/imdbapi.service';
  prefs: []
  type: TYPE_NORMAL
- en: import { Movie } from './models/movie';
  prefs: []
  type: TYPE_NORMAL
- en: '@Component({'
  prefs: []
  type: TYPE_NORMAL
- en: 'moduleId: module.id,'
  prefs: []
  type: TYPE_NORMAL
- en: 'selector: ''angular-observable-app'','
  prefs: []
  type: TYPE_NORMAL
- en: 'templateUrl: ''angular-observable.component.html'','
  prefs: []
  type: TYPE_NORMAL
- en: 'styleUrls: [''angular-observable.component.css'']'
  prefs: []
  type: TYPE_NORMAL
- en: '})'
  prefs: []
  type: TYPE_NORMAL
- en: export class AngularObservableAppComponent {
  prefs: []
  type: TYPE_NORMAL
- en: title = 'angular-observable works!';
  prefs: []
  type: TYPE_NORMAL
- en: private movies:Movie[] = [];
  prefs: []
  type: TYPE_NORMAL
- en: private error:boolean = false;
  prefs: []
  type: TYPE_NORMAL
- en: private finished:boolean = false;
  prefs: []
  type: TYPE_NORMAL
- en: constructor(private IMDBAPI:IMDBAPIService){
  prefs: []
  type: TYPE_NORMAL
- en: this.IMDBAPI.fetchOneById(1).subscribe(
  prefs: []
  type: TYPE_NORMAL
- en: value => {this.movies.push(value); console.log("Component",value)},
  prefs: []
  type: TYPE_NORMAL
- en: error => this.error = true,
  prefs: []
  type: TYPE_NORMAL
- en: () => this.finished =true
  prefs: []
  type: TYPE_NORMAL
- en: )
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: <h1>
  prefs: []
  type: TYPE_NORMAL
- en: '{{title}}'
  prefs: []
  type: TYPE_NORMAL
- en: </h1>
  prefs: []
  type: TYPE_NORMAL
- en: <ul>
  prefs: []
  type: TYPE_NORMAL
- en: <li *ngFor = "let movie of movies">{{movie}}</li>
  prefs: []
  type: TYPE_NORMAL
- en: </ul>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'javascript fetchOneById 1 :4200/app/services/imdbapi.service.js:30 filter Object
    :4200/app/services/imdbapi.service.js:34 map Object :4200/app/angular-observable.component.js:21
    Component Movie_aspect_ratio_name: " 2.35:1"_budget: "140,000,000"_category_name:
    "Action"_disc_format_name: "Blu-ray"_gross: "318,298,180"_movie_id: 1_number_discs:
    1_phase: "Phase One: Avengers Assembled"_rating_name: "PG-13"_release_date: "May
    2, 2008"_release_year: 2015_running_time: 126_status: 1_time_stamp: "2015-05-03"_title:
    "Iron Man"_viewing_format_name: "Widescreen"aspect_ratio_name: (...)budget: (...)category_name:
    (...)disc_format_name: (...)gross: (...)movie_id: (...)number_discs: (...)phase:
    (...)rating_name: (...)release_date: (...)release_year: (...)running_time: (...)status:
    (...)time_stamp: (...)title: (...)toString: ()viewing_format_name: (...)__proto__:
    Object :4200/app/services/imdbapi.service.js:30 filter Object :4200/app/services/imdbapi.service.js:30
    filter Object :4200/app/services/imdbapi.service.js:30 filter Object :4200/app/services/imdbapi.service.js:30
    filter Object :4200/app/services/imdbapi.service.js:30 filter Object :4200/app/services/imdbapi.service.js:30
    filter Object :4200/app/services/imdbapi.service.js:30 filter Object :4200/app/services/imdbapi.service.js:30
    filter Object :4200/app/services/imdbapi.service.js:30 filter Object :4200/app/services/imdbapi.service.js:30
    filter Object :4200/app/services/imdbapi.service.js:30 filter Object :4200/app/services/imdbapi.service.js:30
    filter Object :4200/app/services/imdbapi.service.js:30 filter Object'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: public fetchByField(field:MovieFields, value:any){
  prefs: []
  type: TYPE_NORMAL
- en: console.log('fetchByField', field, value);
  prefs: []
  type: TYPE_NORMAL
- en: return this.http.get (this.moviesUrl)
  prefs: []
  type: TYPE_NORMAL
- en: .flatMap(res => res.json().movies)
  prefs: []
  type: TYPE_NORMAL
- en: /**
  prefs: []
  type: TYPE_NORMAL
- en: '* Filters movies by their field'
  prefs: []
  type: TYPE_NORMAL
- en: '*/'
  prefs: []
  type: TYPE_NORMAL
- en: .filter((movie:any) =>{
  prefs: []
  type: TYPE_NORMAL
- en: console.log("filter" , movie);
  prefs: []
  type: TYPE_NORMAL
- en: return (movie[MovieFields[field]] === value)
  prefs: []
  type: TYPE_NORMAL
- en: '})'
  prefs: []
  type: TYPE_NORMAL
- en: /**
  prefs: []
  type: TYPE_NORMAL
- en: '* Map the JSON movie item to the Movie Model'
  prefs: []
  type: TYPE_NORMAL
- en: '*/'
  prefs: []
  type: TYPE_NORMAL
- en: '.map(( movie: any) => {'
  prefs: []
  type: TYPE_NORMAL
- en: console.log ("map", movie);
  prefs: []
  type: TYPE_NORMAL
- en: return new Movie(
  prefs: []
  type: TYPE_NORMAL
- en: movie.movie_id,
  prefs: []
  type: TYPE_NORMAL
- en: movie.title,
  prefs: []
  type: TYPE_NORMAL
- en: movie.phase,
  prefs: []
  type: TYPE_NORMAL
- en: movie.category_name,
  prefs: []
  type: TYPE_NORMAL
- en: movie.release_year,
  prefs: []
  type: TYPE_NORMAL
- en: movie.running_time,
  prefs: []
  type: TYPE_NORMAL
- en: movie.rating_name,
  prefs: []
  type: TYPE_NORMAL
- en: movie.disc_format_name,
  prefs: []
  type: TYPE_NORMAL
- en: movie.number_discs,
  prefs: []
  type: TYPE_NORMAL
- en: movie.viewing_format_name,
  prefs: []
  type: TYPE_NORMAL
- en: movie.aspect_ratio_name,
  prefs: []
  type: TYPE_NORMAL
- en: movie.status,
  prefs: []
  type: TYPE_NORMAL
- en: movie.release_date,
  prefs: []
  type: TYPE_NORMAL
- en: movie.budget,
  prefs: []
  type: TYPE_NORMAL
- en: movie.gross,
  prefs: []
  type: TYPE_NORMAL
- en: movie.time_stamp
  prefs: []
  type: TYPE_NORMAL
- en: );
  prefs: []
  type: TYPE_NORMAL
- en: '}); }'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: return (movie[MovieFields[field]] === value).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: (function(MovieFields) {
  prefs: []
  type: TYPE_NORMAL
- en: MovieFields[MovieFields["movie_id"] = 0] = "movie_id";
  prefs: []
  type: TYPE_NORMAL
- en: MovieFields[MovieFields["title"] = 1] = "title";
  prefs: []
  type: TYPE_NORMAL
- en: MovieFields[MovieFields["phase"] = 2] = "phase";
  prefs: []
  type: TYPE_NORMAL
- en: MovieFields[MovieFields["category_name"] = 3] = "category_name";
  prefs: []
  type: TYPE_NORMAL
- en: MovieFields[MovieFields["release_year"] = 4] = "release_year";
  prefs: []
  type: TYPE_NORMAL
- en: MovieFields[MovieFields["running_time"] = 5] = "running_time";
  prefs: []
  type: TYPE_NORMAL
- en: MovieFields[MovieFields["rating_name"] = 6] = "rating_name";
  prefs: []
  type: TYPE_NORMAL
- en: MovieFields[MovieFields["disc_format_name"] = 7] ="disc_format_name";
  prefs: []
  type: TYPE_NORMAL
- en: MovieFields[MovieFields["number_discs"] = 8] = "number_discs";
  prefs: []
  type: TYPE_NORMAL
- en: MovieFields[MovieFields["viewing_format_name"] = 9] = "viewing_format_name";
  prefs: []
  type: TYPE_NORMAL
- en: MovieFields[MovieFields["aspect_ratio_name"] = 10] =  "aspect_ratio_name";
  prefs: []
  type: TYPE_NORMAL
- en: MovieFields[MovieFields["status"] = 11] = "status";
  prefs: []
  type: TYPE_NORMAL
- en: MovieFields[MovieFields["release_date"] = 12] = "release_date";
  prefs: []
  type: TYPE_NORMAL
- en: MovieFields[MovieFields["budget"] = 13] = "budget";
  prefs: []
  type: TYPE_NORMAL
- en: MovieFields[MovieFields["gross"] = 14] = "gross";
  prefs: []
  type: TYPE_NORMAL
- en: MovieFields[MovieFields["time_stamp"] = 15] = "time_stamp";
  prefs: []
  type: TYPE_NORMAL
- en: '})(exports.MovieFields || (exports.MovieFields =  {}));'
  prefs: []
  type: TYPE_NORMAL
- en: var MovieFields = exports.MovieFields;
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: fetchByField 4 2015
  prefs: []
  type: TYPE_NORMAL
- en: 'imdbapi.service.js:43 filter Object {movie_id: 1, title: "Iron Man", phase:
    "Phase One: Avengers Assembled", category_name: "Action", release_year: 2015...}'
  prefs: []
  type: TYPE_NORMAL
- en: 'imdbapi.service.js:47 map Object {movie_id: 1, title: "Iron Man", phase: "Phase
    One: Avengers Assembled", category_name: "Action", release_year: 2015...}'
  prefs: []
  type: TYPE_NORMAL
- en: 'angular-observable.component.js:22 Component Movie {_movie_id: 1, _title: "Iron
    Man", _phase: "Phase One: Avengers Assembled", _category_name: "Action", _release_year:
    2015...}'
  prefs: []
  type: TYPE_NORMAL
- en: 'imdbapi.service.js:43 filter Object {movie_id: 2, title: "The Incredible Hulk",
    phase: "Phase One: Avengers Assembled", category_name: "Action", release_year:
    2008...}'
  prefs: []
  type: TYPE_NORMAL
- en: 'imdbapi.service.js:43 filter Object {movie_id: 3, title: "Iron Man 2", phase:
    "Phase One: Avengers Assembled", category_name: "Action", release_year: 2015...}'
  prefs: []
  type: TYPE_NORMAL
- en: 'imdbapi.service.js:47map Object {movie_id: 3 =, title: "Iron Man 2", phase:
    "Phase One: Avengers Assembled", category_name: "Action", release_year: 2015...}'
  prefs: []
  type: TYPE_NORMAL
- en: 'angular-observable.component.js:22 Component Movie{_movie_id: 3, _title: "Iron
    Man 2", _phase: "Phase One: Avengers Assembled", _category_name: "Action", _release_year:2015...}'
  prefs: []
  type: TYPE_NORMAL
- en: 'imdbapi.service.js:43 filter Object {movie_id: 4, title: "Thor", phase: "Phase
    One: Avengers Assembled", category_name: "Action", release_year:2011...}'
  prefs: []
  type: TYPE_NORMAL
- en: 'imdbapi.service.js:43filter Object {movie_id: 5, title: "Captain America",
    phase: "Phase One: Avengers Assembled", category_name: "Action", release_year:
    2011...}'
  prefs: []
  type: TYPE_NORMAL
- en: 'imdbapi.service.js:43 filter Object {movie_id: 6, title: "Avengers, The", phase:
    "Phase One: Avengers Assembled", category_name: "Science Fiction", release_year:
    2012...}'
  prefs: []
  type: TYPE_NORMAL
- en: 'imdbapi.service.js:43 filter Object {movie_id: 7, title: "Iron Man 3", phase:
    "Phase Two", category_name: "Action", release_year : 2015...}'
  prefs: []
  type: TYPE_NORMAL
- en: 'imdbapi.service.js:47 map Object {movie_id: 7, title: "Iron Man 3", phase:
    "Phase Two", category_name: "Action", release_year:2015...}'
  prefs: []
  type: TYPE_NORMAL
- en: 'angular-observable.component.js: 22 Component Movie {_movie_id: 7, _title:
    "Iron Man 3", _phase: "Phase Two", _category_name:"Action", _release_year: 2015...}'
  prefs: []
  type: TYPE_NORMAL
- en: 'imdbapi.service.js:43 filter Object {movie_id: 8, title: "Thor: The Dark World",
    phase: "Phase Two", category_name: "Science Fiction", release_year: 2013...}'
  prefs: []
  type: TYPE_NORMAL
- en: 'imdbapi.service.js:43 filter Object {movie_id: 9, title: "Captain America:
    The Winter Soldier", phase: "Phase Two", category_name: "Action", release_year:
    2014...}'
  prefs: []
  type: TYPE_NORMAL
- en: 'imdbapi.service.js:43 filter Object {movie_id: 10, title: "Guardians of the
    Galaxy", phase: "Phase Two", category_name: "Science Fiction", release_year: 2014...}'
  prefs: []
  type: TYPE_NORMAL
- en: 'imdbapi.service.js:43 filter Object {movie_id: 11, title: "Avengers: Age of
    Ultron", phase: "Phase Two", category_name: "Science Fiction", release_year: 2015...}'
  prefs: []
  type: TYPE_NORMAL
- en: 'imdbapi.service.js:47 map Object {movie_id: 11, title: "Avengers: Age of Ultron",
    phase: "Phase Two", category_name: "Science Fiction", release_year: 2015...}'
  prefs: []
  type: TYPE_NORMAL
- en: 'angular-observable.component.js:22 Component Movie {_movie_id: 11, _title:
    "Avengers: Age of Ultron", _phase: "Phase Two", _category_name: "Science Fiction",
    _release_year:2015...}'
  prefs: []
  type: TYPE_NORMAL
- en: 'imdbapi.service.js:43 filter Object {movie_id: 12, title: "Ant-Man", phase:
    "Phase Two", category_name: "Science Fiction", release_year: 2015...}'
  prefs: []
  type: TYPE_NORMAL
- en: 'imdbapi.service.js:47 map Object {movie_id: 12, title: "Ant-Man", phase: "Phase
    Two", category_name: "Science Fiction", release_year: 2015...}'
  prefs: []
  type: TYPE_NORMAL
- en: 'angular-observable.component.js:22 Component Movie {_movie_id: 12, _title:
    "Ant-Man", _phase: "Phase Two", _category_name: "Science Fiction", _release_year:
    2015...}'
  prefs: []
  type: TYPE_NORMAL
- en: 'imdbapi.service.js:43 filter Object {movie_id: 13, title: "Captain America:
    Civil War",phase: "Phase Three", category_name: "Science Fiction", release_year:
    2016...}'
  prefs: []
  type: TYPE_NORMAL
- en: 'imdbapi.service.js:43 filter Object {movie_id: 14, title: "Doctor Strange",
    phase: "Phase Two", category_name: "Science Fiction", release_year: 2016...}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: constructor(private IMDBAPI:IMDBAPIService{ let imdbSubscription = this.IMDBAPI.fetchByField(MovieFields.release_year,
    2015).subscribe(
  prefs: []
  type: TYPE_NORMAL
- en: value=> {
  prefs: []
  type: TYPE_NORMAL
- en: this.movies.push(value);
  prefs: []
  type: TYPE_NORMAL
- en: console.log("Component", value)
  prefs: []
  type: TYPE_NORMAL
- en: if(this.movies.length > 2){
  prefs: []
  type: TYPE_NORMAL
- en: imdbSubscription.unsubscribe();
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '},'
  prefs: []
  type: TYPE_NORMAL
- en: error => this.error = true,
  prefs: []
  type: TYPE_NORMAL
- en: () => this.finished = true
  prefs: []
  type: TYPE_NORMAL
- en: );
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: fetchByField 4 2015
  prefs: []
  type: TYPE_NORMAL
- en: 'imdbapi.service.js:43 filter Object {movie_id: 1, title: "Iron Man", phase:
    "Phase One: Avengers Assembled", category_name: "Action", release_year: 2015...}'
  prefs: []
  type: TYPE_NORMAL
- en: 'imdbapi.service.js:49 map Object {movie_id: 1, title: "Iron Man", phase: "Phase
    One: Avengers Assembled", category_name: "Action", release_year: 2015...}'
  prefs: []
  type: TYPE_NORMAL
- en: 'angular-observable.component.js:24 Component Movie {_movie_id: 1, _title: "Iron
    Man", _phase: "Phase One: Avengers Assembled", _category_name: "Action", _release_year:
    2015...}'
  prefs: []
  type: TYPE_NORMAL
- en: 'imdbapi.service.js:43 filter Object {movie_id: 2, title: "The Incredible Hulk",
    phase: "Phase One: Avengers Assembled", category_name: "Action", release_year:
    2008...}'
  prefs: []
  type: TYPE_NORMAL
- en: 'imdbapi.service.js:43 filter Object { movie_id: 3, title: "Iron Man 2", phase:
    "Phase One: Avengers Assembled", category_name: "Action", release_year: 2015...}'
  prefs: []
  type: TYPE_NORMAL
- en: 'imdbapi.service.js:49 map Object {movie_id: 3, title: "Iron Man 2", phase:
    "Phase One: Avengers Assembled", category_name: "Action", release_year: 2015...}'
  prefs: []
  type: TYPE_NORMAL
- en: 'angular-observable.component.js:24 Component Movie {_movie_id: 3, _title: "Iron
    Man 2", _phase: "Phase One: Avengers Assembled", _category_name: "Action",_release_year:
    2015...}'
  prefs: []
  type: TYPE_NORMAL
- en: 'imdbapi.service.js:43 filter Object {movie_id: 4, title: "Thor", phase: "Phase
    One: Avengers Assembled", category_name: "Action", release_year: 2011...}'
  prefs: []
  type: TYPE_NORMAL
- en: 'imdbapi.service.js:43 filter Object {movie_id: 5, title: "Captain America",
    phase: "Phase One: Avengers Assembled", category_name: "Action",release_year:
    2011...}'
  prefs: []
  type: TYPE_NORMAL
- en: 'imdbapi.service.js:43 filter Object {movie_id: 6, title: "Avengers, The", phase:
    "Phase One: Avengers Assembled", category_name: "Science Fiction", release_year:
    2012...}'
  prefs: []
  type: TYPE_NORMAL
- en: 'imdbapi.service.js:43 filter Object {movie_id: 7, title: "Iron Man 3", phase:
    "Phase Two", category_name: "Action", release_year: 2015...}'
  prefs: []
  type: TYPE_NORMAL
- en: 'imdbapi.service.js:49 map Object {movie_id: 7, title: "Iron Man 3", phase:
    "Phase Two", category_name: "Action", release_year: 2015...}'
  prefs: []
  type: TYPE_NORMAL
- en: 'angular-observable.component.js:24 Component Movie {_movie_id: 7, _title: "Iron
    Man 3", _phase: "Phase Two", _category_name: "Action", _release_year: 2015...}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: /**
  prefs: []
  type: TYPE_NORMAL
- en: '* Return a Promise to a Movie matching id'
  prefs: []
  type: TYPE_NORMAL
- en: '*@param {number} id'
  prefs: []
  type: TYPE_NORMAL
- en: '*@return {Promise<Movie>}'
  prefs: []
  type: TYPE_NORMAL
- en: '*/'
  prefs: []
  type: TYPE_NORMAL
- en: 'public fetchOneById(id:number) : Promise <Movie>{'
  prefs: []
  type: TYPE_NORMAL
- en: console.log('fecthOneById', id);
  prefs: []
  type: TYPE_NORMAL
- en: return this.http.get(this.moviesUrl)
  prefs: []
  type: TYPE_NORMAL
- en: /**
  prefs: []
  type: TYPE_NORMAL
- en: '* Transforms the result of the HTTP get, which is observable'
  prefs: []
  type: TYPE_NORMAL
- en: '* into one observable by item.'
  prefs: []
  type: TYPE_NORMAL
- en: '*/'
  prefs: []
  type: TYPE_NORMAL
- en: .flatMap(res => res.json().movies)
  prefs: []
  type: TYPE_NORMAL
- en: /**
  prefs: []
  type: TYPE_NORMAL
- en: '* Filters movies by their movie_id'
  prefs: []
  type: TYPE_NORMAL
- en: '*/'
  prefs: []
  type: TYPE_NORMAL
- en: .filter((movie:any) =>{
  prefs: []
  type: TYPE_NORMAL
- en: console.log("filter", movie);
  prefs: []
  type: TYPE_NORMAL
- en: return (movie.movie_id === id)
  prefs: []
  type: TYPE_NORMAL
- en: '})'
  prefs: []
  type: TYPE_NORMAL
- en: .toPromise()
  prefs: []
  type: TYPE_NORMAL
- en: /**
  prefs: []
  type: TYPE_NORMAL
- en: '* Map the JSON movie item to the Movie Model'
  prefs: []
  type: TYPE_NORMAL
- en: '*/'
  prefs: []
  type: TYPE_NORMAL
- en: .then((movie:any) => {
  prefs: []
  type: TYPE_NORMAL
- en: console.log("map", movie);
  prefs: []
  type: TYPE_NORMAL
- en: return new Movie(
  prefs: []
  type: TYPE_NORMAL
- en: movie.movie_id,
  prefs: []
  type: TYPE_NORMAL
- en: movie.title,
  prefs: []
  type: TYPE_NORMAL
- en: movie.phase,
  prefs: []
  type: TYPE_NORMAL
- en: movie.category_name,
  prefs: []
  type: TYPE_NORMAL
- en: movie.release_year,
  prefs: []
  type: TYPE_NORMAL
- en: movie.running_time,
  prefs: []
  type: TYPE_NORMAL
- en: movie.rating_name,
  prefs: []
  type: TYPE_NORMAL
- en: movie.disc_format_name,
  prefs: []
  type: TYPE_NORMAL
- en: movie.number_discs,
  prefs: []
  type: TYPE_NORMAL
- en: movie.viewing_format_name,
  prefs: []
  type: TYPE_NORMAL
- en: movie.aspect_ratio_name,
  prefs: []
  type: TYPE_NORMAL
- en: movie.status,
  prefs: []
  type: TYPE_NORMAL
- en: movie.release_date,
  prefs: []
  type: TYPE_NORMAL
- en: movie.budget,
  prefs: []
  type: TYPE_NORMAL
- en: movie.gross,
  prefs: []
  type: TYPE_NORMAL
- en: movie.time_stamp
  prefs: []
  type: TYPE_NORMAL
- en: ) });
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: this.IMDBAPI.fetchOneById(1).then(
  prefs: []
  type: TYPE_NORMAL
- en: value => {
  prefs: []
  type: TYPE_NORMAL
- en: this.movies.push(value);
  prefs: []
  type: TYPE_NORMAL
- en: console.log("Component", value)
  prefs: []
  type: TYPE_NORMAL
- en: '},'
  prefs: []
  type: TYPE_NORMAL
- en: error => this.error = true
  prefs: []
  type: TYPE_NORMAL
- en: );
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'imdbapi.service.js:30 filter Object {movie_id: 2, title: "The Incredible Hulk",
    phase: "Phase One: Avengers Assembled", category_name: "Action", release_year:
    2008...}'
  prefs: []
  type: TYPE_NORMAL
- en: 'imdbapi.service.js:30 filter Object {movie_id: 3, title: "Iron Man 2", phase
    : "Phase One: Avengers Assembled", category_name: "Action", release_year: 2015...}'
  prefs: []
  type: TYPE_NORMAL
- en: 'imdbapi.service.js:30 filter Object {movie_id: 4, title: "Thor", phase: "Phase
    One: Avengers Assembled", category_name: "Action", release_year: 2011...}'
  prefs: []
  type: TYPE_NORMAL
- en: 'imdbapi.service.js:30 filter Object {movie_id: 5, title: "Captain America",
    phase: "Phase One: Avengers Assembled", category_name: "Action", release_year:
    2011...}'
  prefs: []
  type: TYPE_NORMAL
- en: 'imdbapi.service.js:30 filter Object {movie_id: 6, title: "Avengers, The", phase:
    "Phase One: Avengers Assembled", category_name:"Science Fiction", release_year:
    2012...}'
  prefs: []
  type: TYPE_NORMAL
- en: 'imdbapi.service.js:30 filter Object {movie_id: 7, title: "Iron Man 3", phase:
    "Phase Two", category_name: "Action", release_year: 2015...}'
  prefs: []
  type: TYPE_NORMAL
- en: 'imdbapi.service.js:30 filter Object {movie_id: 8, title: "Thor: The Dark World",
    phase: "Phase Two", category_name: "Science Fiction", release_year: 2013...}'
  prefs: []
  type: TYPE_NORMAL
- en: 'imdbapi.service.js:30 filter Object {movie_id: 9, title: "Captain America:
    The Winter Soldier", phase: "Phase Two", category_name: "Action",release_year:
    2014...}'
  prefs: []
  type: TYPE_NORMAL
- en: 'imdbapi.service.js:30 filter Object {movie_id: 10, title: "Guardians of the
    Galaxy", phase: "Phase Two", category_name: "Science Fiction", release_year: 2014...}'
  prefs: []
  type: TYPE_NORMAL
- en: 'imdbapi.service.js:30 filter Object { movie_id: 11, title: "Avengers: Age of
    Ultron", phase: "Phase Two", category_name: "Science Fiction", release_year: 2015...}'
  prefs: []
  type: TYPE_NORMAL
- en: 'imdbapi.service.js:30 filter Object {movie_id: 12, title: "Ant-Man", phase:
    "Phase Two", category_name: "Science Fiction", release_year: 2015...}'
  prefs: []
  type: TYPE_NORMAL
- en: 'imdbapi.service.js:30 filter Object {movie_id: 13, title: "Captain America:
    Civil War", phase: "Phase Three", category_name: "Science Fiction", release_year:
    2016...}'
  prefs: []
  type: TYPE_NORMAL
- en: 'imdbapi.service.js:30 filter Object {movie_id: 14, title: "Doctor Strange",
    phase: "Phase Two", category_name: "Science Fiction", release_year: 2016...}'
  prefs: []
  type: TYPE_NORMAL
- en: 'imdbapi.service.js:35 map Object {movie_id: 1, title: "Iron Man", phase: "Phase
    One: Avengers Assembled", category_name: "Action", release_year: 2015...}'
  prefs: []
  type: TYPE_NORMAL
- en: 'angular-observable.component.js:23 Component Movie {_movie_id: 1, _title: "Iron
    Man", _phase: "Phase One: Avengers Assembled", _category_name: "Action", _release_year:
    2015...}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'public fetchByField(field: MovieFields, value: any) :Promise<Movie[]>{'
  prefs: []
  type: TYPE_NORMAL
- en: console.log('fetchByField', field, value);
  prefs: []
  type: TYPE_NORMAL
- en: return this.http.get(this.moviesUrl)
  prefs: []
  type: TYPE_NORMAL
- en: .map(res => res.json().movies.filter(
  prefs: []
  type: TYPE_NORMAL
- en: (movie)=>{
  prefs: []
  type: TYPE_NORMAL
- en: return (movie[MovieFields[field]] === value)
  prefs: []
  type: TYPE_NORMAL
- en: '})'
  prefs: []
  type: TYPE_NORMAL
- en: )
  prefs: []
  type: TYPE_NORMAL
- en: .toPromise()
  prefs: []
  type: TYPE_NORMAL
- en: /**
  prefs: []
  type: TYPE_NORMAL
- en: '* Map the JSON movie items to the Movie Model'
  prefs: []
  type: TYPE_NORMAL
- en: '*/'
  prefs: []
  type: TYPE_NORMAL
- en: .then((jsonMovies:any[]) => {
  prefs: []
  type: TYPE_NORMAL
- en: console.log("map",jsonMovies);
  prefs: []
  type: TYPE_NORMAL
- en: let movies:Movie[] = [];
  prefs: []
  type: TYPE_NORMAL
- en: for (var i = 0; i < jsonMovies.length; i++) {
  prefs: []
  type: TYPE_NORMAL
- en: movies.push(
  prefs: []
  type: TYPE_NORMAL
- en: new Movie(
  prefs: []
  type: TYPE_NORMAL
- en: jsonMovies[i].movie_id,
  prefs: []
  type: TYPE_NORMAL
- en: jsonMovies[i].title,
  prefs: []
  type: TYPE_NORMAL
- en: jsonMovies[i].phase,
  prefs: []
  type: TYPE_NORMAL
- en: jsonMovies[i].category_name,
  prefs: []
  type: TYPE_NORMAL
- en: jsonMovies[i].release_year,
  prefs: []
  type: TYPE_NORMAL
- en: jsonMovies[i].running_time,
  prefs: []
  type: TYPE_NORMAL
- en: jsonMovies[i].rating_name,
  prefs: []
  type: TYPE_NORMAL
- en: jsonMovies[i].disc_format_name,
  prefs: []
  type: TYPE_NORMAL
- en: jsonMovies[i].number_discs,
  prefs: []
  type: TYPE_NORMAL
- en: jsonMovies[i].viewing_format_name,
  prefs: []
  type: TYPE_NORMAL
- en: jsonMovies[i].aspect_ratio_name,
  prefs: []
  type: TYPE_NORMAL
- en: jsonMovies[i].status,
  prefs: []
  type: TYPE_NORMAL
- en: jsonMovies[i].release_date,
  prefs: []
  type: TYPE_NORMAL
- en: jsonMovies[i].budget,
  prefs: []
  type: TYPE_NORMAL
- en: jsonMovies[i].gross,
  prefs: []
  type: TYPE_NORMAL
- en: jsonMovies[i].time_stamp
  prefs: []
  type: TYPE_NORMAL
- en: )
  prefs: []
  type: TYPE_NORMAL
- en: )
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: return movies;
  prefs: []
  type: TYPE_NORMAL
- en: '});'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: this.IMDBAPI.fetchByField(MovieFields.release_year, 2015).then(
  prefs: []
  type: TYPE_NORMAL
- en: value => {
  prefs: []
  type: TYPE_NORMAL
- en: this.movies = value;
  prefs: []
  type: TYPE_NORMAL
- en: console.log("Component", value)
  prefs: []
  type: TYPE_NORMAL
- en: '},'
  prefs: []
  type: TYPE_NORMAL
- en: error => this.error = true
  prefs: []
  type: TYPE_NORMAL
- en: )
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: /**
  prefs: []
  type: TYPE_NORMAL
- en: '* Private member storing pending promises'
  prefs: []
  type: TYPE_NORMAL
- en: '*/'
  prefs: []
  type: TYPE_NORMAL
- en: private promises:Promise<Movie[]>[] = [];
  prefs: []
  type: TYPE_NORMAL
- en: /**
  prefs: []
  type: TYPE_NORMAL
- en: '* Register one promise for field/value. Returns this'
  prefs: []
  type: TYPE_NORMAL
- en: '* for chaining i.e.'
  prefs: []
  type: TYPE_NORMAL
- en: '*'
  prefs: []
  type: TYPE_NORMAL
- en: '* byField(Y, X)'
  prefs: []
  type: TYPE_NORMAL
- en: '* .or(...)'
  prefs: []
  type: TYPE_NORMAL
- en: '* .fetch()'
  prefs: []
  type: TYPE_NORMAL
- en: '*'
  prefs: []
  type: TYPE_NORMAL
- en: '* @param {MovieFields} field'
  prefs: []
  type: TYPE_NORMAL
- en: '* @param {any}  value'
  prefs: []
  type: TYPE_NORMAL
- en: '* @return {IMDBAPIService}'
  prefs: []
  type: TYPE_NORMAL
- en: '*/'
  prefs: []
  type: TYPE_NORMAL
- en: public byField(field:MovieFields, value:any):IMDBAPIService{
  prefs: []
  type: TYPE_NORMAL
- en: this.promises.push(this.fetchByField(field, value));
  prefs: []
  type: TYPE_NORMAL
- en: return this;
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: /**
  prefs: []
  type: TYPE_NORMAL
- en: '* Convenient method to make the calls more readable, i.e.'
  prefs: []
  type: TYPE_NORMAL
- en: '*'
  prefs: []
  type: TYPE_NORMAL
- en: '* byField(Y, X)'
  prefs: []
  type: TYPE_NORMAL
- en: '* .or(...)'
  prefs: []
  type: TYPE_NORMAL
- en: '* .fetch()'
  prefs: []
  type: TYPE_NORMAL
- en: '*'
  prefs: []
  type: TYPE_NORMAL
- en: '* instead of'
  prefs: []
  type: TYPE_NORMAL
- en: '*'
  prefs: []
  type: TYPE_NORMAL
- en: '* byField(Y, X)'
  prefs: []
  type: TYPE_NORMAL
- en: '* .byField(...)'
  prefs: []
  type: TYPE_NORMAL
- en: '* .fetch()'
  prefs: []
  type: TYPE_NORMAL
- en: '*'
  prefs: []
  type: TYPE_NORMAL
- en: '* @param {MovieFields} field'
  prefs: []
  type: TYPE_NORMAL
- en: '* @param {any}  value'
  prefs: []
  type: TYPE_NORMAL
- en: '* @return {IMDBAPIService}'
  prefs: []
  type: TYPE_NORMAL
- en: '*/ public or(field:MovieFields, value:any):IMDBAPIService{'
  prefs: []
  type: TYPE_NORMAL
- en: return this.byField(field, value);
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: /**
  prefs: []
  type: TYPE_NORMAL
- en: '* Join all the promises and return the aggregated result.'
  prefs: []
  type: TYPE_NORMAL
- en: '*'
  prefs: []
  type: TYPE_NORMAL
- en: '*@return {Promise<Movie[]>}'
  prefs: []
  type: TYPE_NORMAL
- en: '*/'
  prefs: []
  type: TYPE_NORMAL
- en: public fetch():Promise<Movie[]>{
  prefs: []
  type: TYPE_NORMAL
- en: return Promise.all(this.promises).then((results:any) => {
  prefs: []
  type: TYPE_NORMAL
- en: //result is an array of movie arrays. One array per
  prefs: []
  type: TYPE_NORMAL
- en: //promise. We need to flatten it.
  prefs: []
  type: TYPE_NORMAL
- en: return [].concat.apply([], results);
  prefs: []
  type: TYPE_NORMAL
- en: '});'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: this.IMDBAPI.byField(MovieFields.release_year, 2015)
  prefs: []
  type: TYPE_NORMAL
- en: .or(MovieFields.release_year, 2014)
  prefs: []
  type: TYPE_NORMAL
- en: .or(MovieFields.phase, "Phase Two")
  prefs: []
  type: TYPE_NORMAL
- en: .fetch()
  prefs: []
  type: TYPE_NORMAL
- en: .then (
  prefs: []
  type: TYPE_NORMAL
- en: value => {
  prefs: []
  type: TYPE_NORMAL
- en: this.movies = value;
  prefs: []
  type: TYPE_NORMAL
- en: console.log("Component", value)
  prefs: []
  type: TYPE_NORMAL
- en: '},'
  prefs: []
  type: TYPE_NORMAL
- en: error => this.error = true
  prefs: []
  type: TYPE_NORMAL
- en: );
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: This is very simple to read and understand while keeping all the asynchronism
    capabilities of Angular 2.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we learned how to use some of the most useful classical patterns:
    component, singleton, and observer. We learned how to do it in pure TypeScript
    as well as by using Angular 2 building blocks. The code for this chapter can be
    found here: [https://github.com/MathieuNls/Angular-Design-Patterns-and-Best-Practices/tree/master/chap4](https://github.com/MathieuNls/Angular-Design-Patterns-and-Best-Practices/tree/master/chap4).'
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we'll focus on patterns, aiming to ease and organize navigation
    in our Angular 2 application.
  prefs: []
  type: TYPE_NORMAL
