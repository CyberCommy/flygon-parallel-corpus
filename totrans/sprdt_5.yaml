- en: Chapter 5. Getting Started with Spring Data Redis
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before the Spring Data Redis project was born, a normal way to communicate with
    Redis was to use client libraries that can be compared to the JDBC drivers of
    relational databases. The difference is that these clients do not implement a
    standard API that makes it hard to switch from one connector to another. Obviously,
    the million-dollar question is, how can Spring Data Redis make our life easier?
  prefs: []
  type: TYPE_NORMAL
- en: Spring Data Redis hides the APIs of different client libraries behind a single
    API that is clean and easy to use. In theory, this ensures that we can change
    the used Redis connector without making any changes to our application. Even though
    this is indeed a useful feature if we have to change the used connector, it would
    be naive to claim that we should start using Spring Data Redis only because of
    this feature. We have to remember that we will most likely stick with one Redis
    connector throughout the life cycle of our application.
  prefs: []
  type: TYPE_NORMAL
- en: However, we must remember that applications are basically built by combining
    different components together. Spring Data Redis provides a seamless integration
    with the Spring framework that is a popular tool used to create enterprise applications.
    This is naturally a huge benefit for any developer who is writing a Spring-powered
    application that uses Redis.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: More information about Spring Data Redis and its features can be found at [http://www.springsource.org/spring-data/redis/](http://www.springsource.org/spring-data/redis/).
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter will guide us through the initial configuration phase and help
    us to set up a web application project that uses Spring Data Redis. In this chapter,
    we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: How we can install Redis to a computer running a Unix-like operating system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How we can get the required dependencies of Spring Data Redis by using Maven
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How we can configure the application context of our application by using programmatic
    configuration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How we can configure our Redis connection in an application context configuration
    class
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing Redis
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Spring Data Redis requires that Redis 2.0 or above is used, and it recommends
    that Redis 2.2 is used. However, it is possible to use newer Redis versions even
    though the new features might not be supported yet. This book assumes that we
    are using Redis version 2.6.0-rc6.
  prefs: []
  type: TYPE_NORMAL
- en: At the moment Redis does not officially support Windows but there are some unofficial
    ports available. If you want to install Redis to a Windows computer, download
    one of the unofficial source packages and follow its installation instructions.
    The download links of the unofficial Windows ports are available at [http://redis.io/download](http://redis.io/download).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The only dependencies of Redis are a working GCC compiler and libc. The best
    way to install these dependencies is to use the package manager of the used Linux
    distribution. If Redis is compiled on a computer that uses an OS X operating system,
    one should ensure that both Xcode and its command line tools are installed.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can install Redis to a computer running a Unix-like operating system by
    following these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Download the Redis source package. We use a command line utility called `wget`
    for retrieving the source package.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Decompress the source package.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Compile Redis.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We can finish the installation procedure by running these commands at the command
    line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: At the moment the source packages are hosted on Google Code. If the packages
    are moved to a different host or if a different Redis version is installed, these
    commands must be modified accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: 'After the compilation has finished successfully, we can start our Redis server
    by running the following command at the command prompt:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'If our installation was successful, we should see the output as shown in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing Redis](img/9045_05_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The official Redis homepage has a comprehensive documentation that offers more
    information about the usage and configuration of Redis. This documentation is
    available at [http://redis.io/documentation](http://redis.io/documentation).
  prefs: []
  type: TYPE_NORMAL
- en: Getting the required dependencies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Getting the dependencies required by Spring Data Redis is rather easy. The
    only dependency that is required is Spring Data Redis, and we can get it by adding
    the following dependency declaration to the `pom.xml` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Configuring the Spring application context
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will use the Java configuration for configuring the application context
    of our application. The name of our application context configuration class is
    `ApplicationContext`, and its implementation is explained in the following points:'
  prefs: []
  type: TYPE_NORMAL
- en: The `@Configuration` annotation is used to identify the class as an application
    context configuration class.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `@ComponentScan` annotation is used to configure the base package of our
    controllers.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `@EnableWebMvc` annotation is used to enable the Spring MVC.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The values of the configuration parameters are fetched from a property file
    that is imported by using the `@PropertySource` annotation. The `Environment`
    interface is used to access the property values stored in this file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `redisConnectionFactory()` method is used to configure the Redis connection
    factory bean. The implementation of this method depends on the used Redis connector.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The source code of our application context configuration skeleton class is
    given as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The contents of the `application.properties` file are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Configuring the Redis connection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Spring Data Redis supports four different connectors that can be used to interact
    with a Redis server. These connectors are described in the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Connector | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Jedis | Jedis is a Redis connector that is fully compatible with Redis 2.0.0
    commands. The project is hosted at GitHub, and more information about this found
    at [https://github.com/xetorthio/jedis](https://github.com/xetorthio/jedis). |'
  prefs: []
  type: TYPE_TB
- en: '| JRedis | JRedis is a Redis connector that does not yet have official support
    for Redis 2.x. However, it is possible to use a forked version of this library
    that adds support for Redis 2.x. The forked version of the JRedis library is hosted
    at GitHub, and its homepage is found at [https://github.com/anthonylauzon/jredis](https://github.com/anthonylauzon/jredis).
    |'
  prefs: []
  type: TYPE_TB
- en: '| RJC | RJC is a Redis connector that is compatible with Redis 2.X. More information
    about the RJC connector is found at [https://github.com/e-mzungu/rjc](https://github.com/e-mzungu/rjc).
    |'
  prefs: []
  type: TYPE_TB
- en: '| SRP | SRP is a Redis connector that supports Redis 2.6 commands. The project''s
    homepage is found at [https://github.com/spullara/redis-protocol](https://github.com/spullara/redis-protocol).
    |'
  prefs: []
  type: TYPE_TB
- en: Unfortunately, at the moment some of the supported connectors are at the early
    stage of development and they do not support all the available features of Redis.
    If the underlying connector does not support the performed operation, the exception,
    `UnsupportedOperationException`, is thrown.
  prefs: []
  type: TYPE_NORMAL
- en: 'Also, the configuration options that we can use with Spring Data Redis depend
    on the used connector. The following table describes differences between the supported
    Redis connectors (X means that the configuration option is supported and - means
    that it is not):'
  prefs: []
  type: TYPE_NORMAL
- en: '| Connector | Password | Connection Pool |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Jedis | X | X |'
  prefs: []
  type: TYPE_TB
- en: '| JRedis | X | X |'
  prefs: []
  type: TYPE_TB
- en: '| RJC | X | X |'
  prefs: []
  type: TYPE_TB
- en: '| SRP | - | - |'
  prefs: []
  type: TYPE_TB
- en: Jedis is the default connector of Spring Data Redis and at the moment it should
    be our first choice because it is the most mature of the supported connectors
    and it is being actively developed. However, we will take a look at the configuration
    process of each supported connector because the situation might change in the
    future and if it does, we should know that we have other options as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'The configuration of each supported Redis connector always has the following
    two steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the correct Maven dependency.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configuring the correct Redis connection factory bean in the `redisConnectionFactory()`
    method of the `ApplicationContext` class.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configuring the Jedis connector
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Because Jedis is the default connector of Spring Data Redis, we don''t have
    to make any changes to our `pom.xml` file. The only thing that we have to do is
    to add the Redis connection factory bean in our application context configuration.
    The correct Redis connection factory bean class for the Jedis connector is the
    `JedisConnectionFactory` class, and it has the following configuration properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Property | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `dataBase` | The index of the used database. |'
  prefs: []
  type: TYPE_TB
- en: '| `hostName` | The hostname of the used Redis server. |'
  prefs: []
  type: TYPE_TB
- en: '| `password` | The password used for authenticating with the Redis server.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `poolConfig` | The connection pool configuration that is given by using the
    `redis.clients.jedis.JedisPoolConf` `ig` class. |'
  prefs: []
  type: TYPE_TB
- en: '| `port` | The port of the used Redis server. |'
  prefs: []
  type: TYPE_TB
- en: '| `shardInfo` | An alternative method for configuring the `JedisConnectionFactory`
    object. The configuration is given by using the `redis.clients.jedis.JedisShardInfo`
    class. This method has precedence over other colliding configuration properties.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `timeout` | The connection timeout. |'
  prefs: []
  type: TYPE_TB
- en: '| `usePool` | A `boolean` value describing if connection pooling is used. |'
  prefs: []
  type: TYPE_TB
- en: 'We will configure the Redis connection factory bean in the `redisConnectionFactory()`
    method of the `ApplicationContext` class. Our implementation includes the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a new `JedisConnectionFactory` object.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configuring the Redis connection factory bean.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Returning the created object.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The source code of the implemented `redisConnectionFactory()` method is given
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Configuring the JRedis connector
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The first step is to configure the Maven dependencies of JRedis. We can configure
    the required dependencies by following these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Exclude the transitive Jedis dependency from our build.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add the forked JRedis connector as a dependency.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After we have followed the described steps, we should have the following dependency
    declarations in the `pom.xml` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The second step is to configure the used Redis connection factory bean. Because
    we want to use the JRedis connector, we have to use the `JRedisConnectionFactory`
    class. The configuration properties of this class are described in following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Property | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `dataBase` | The index of the used database. |'
  prefs: []
  type: TYPE_TB
- en: '| `hostName` | The hostname of the used Redis server. |'
  prefs: []
  type: TYPE_TB
- en: '| `password` | The password user for authenticating with the Redis server.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `poolSize` | The size of the connection pool. |'
  prefs: []
  type: TYPE_TB
- en: '| `port` | The port of the used Redis server. |'
  prefs: []
  type: TYPE_TB
- en: '| `usePool` | A `boolean` value describing if connection pooling is used. |'
  prefs: []
  type: TYPE_TB
- en: 'In order to configure the Redis connector, we have to add the implementation
    of the `redisConnectionFactory()` method to the `ApplicationContext` class. We
    can do this by following these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new `JRedisConnectionFactory` object.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configure the Redis connection factory bean.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Return the created object.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The source code of our Redis connection factory bean configuration is given
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Configuring the RJC connector
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First we have to configure the required Maven dependencies. This process includes
    the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Exclude the transitive Jedis dependency from our build.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add the RJC connector as a dependency.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The dependency declarations, which we must add to the dependencies section
    of our `pom.xml` file, are given as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The last step is to add the configuration of the used Redis connection factory
    bean to our application context configuration class. Because we are using the
    RJC connector, the correct Redis connection factory class is `RjcConnectionFactory`.
    This class has the following configuration properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Property | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `dataBase` | The index of the used database. |'
  prefs: []
  type: TYPE_TB
- en: '| `hostName` | The hostname of the used Redis server. |'
  prefs: []
  type: TYPE_TB
- en: '| `password` | The password that used for authenticating with the Redis server.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `port` | The port of the used Redis server. |'
  prefs: []
  type: TYPE_TB
- en: '| `timeout` | The value for connection timeout. |'
  prefs: []
  type: TYPE_TB
- en: '| `usePool` | A `boolean` value describing if connection pooling is used. |'
  prefs: []
  type: TYPE_TB
- en: 'Our implementation of the `redisConnectionFactory()` method includes the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new `RjcConnectionFactory` object.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configure the Redis connection factory bean.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Return the created object.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The source code of our Redis connection factory bean configuration is given
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Configuring the SRP connector
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The first step is to configure the Maven dependencies of the SRP Redis connector.
    We can configure the required dependencies by following these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Exclude the transitive Jedis dependency from our build.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add the SRP connector as a dependency.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This leads into the following dependency declarations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The second step is to configure the Redis connection factory bean. The correct
    connection factory bean class for the SRP connector is `SrpConnectionFactory`,
    and it has the following configuration properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Property | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `hostName` | The hostname of the used Redis server. |'
  prefs: []
  type: TYPE_TB
- en: '| `port` | The port of the used Redis server. |'
  prefs: []
  type: TYPE_TB
- en: 'We can configure the SRP connector by writing an implementation to the `redisConnectionFactory()`
    method. Our implementation has the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new `SrpConnectionFactory` object.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configure the Redis connection factory bean.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Return the created object.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The source code of our Redis connection factory bean configuration is given
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we have learned that:'
  prefs: []
  type: TYPE_NORMAL
- en: Redis does not have complex dependencies, and it is easy to install Redis to
    a computer that runs a Unix-like operating system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Some of the supported connectors do not support all features of Redis yet
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The configuration options that we can use when we are configuring our Redis
    connection depend on the used connector
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We should use the Jedis connector when we are writing applications by using
    Spring Data Redis
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We have now learned how can set up a web application project that uses Spring
    Data Redis. In the next chapter, we will write some code and implement a contact
    manager application by using Spring Data Redis.
  prefs: []
  type: TYPE_NORMAL
