- en: Best Practices
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter goes through some points that you should know if you want to become
    a full stack developer or if you want progress further in your software-development
    career. We will also go through some best practices that are good to keep in mind
    when you're working in the field of software development.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will look at the following:'
  prefs: []
  type: TYPE_NORMAL
- en: What kind of technologies you should know
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What kind of best practices are important to you
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What to learn next
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To become a full stack developer, you have to be able to work with both the
    backend and the frontend. That sounds like quite a challenging task, but if you
    focus on the right things and don't try to master everything, it is possible.
    Nowadays, the technology stack available is huge and you might often wonder what
    you should learn next. There are multiple factors that might give you some hints
    about where to go next. One way is to browse job opportunities and see which technologies
    companies are looking for.
  prefs: []
  type: TYPE_NORMAL
- en: There are multiple ways, and no right path, to start learning a new technology.
    The usage of programming web courses is a really popular starting point and that
    gives you basic knowledge to start the learning process. The process is never-ending
    because technologies are developing and changing all the time.
  prefs: []
  type: TYPE_NORMAL
- en: The following technologies are necessary to understand if you want to become
    a full stack developer. This is not the complete list, but it is a good starting
    point.
  prefs: []
  type: TYPE_NORMAL
- en: HTML
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: HTML is the most fundamental thing in web development that you should learn.
    You don't have to master all the details of HTML, but you should have a good basic
    knowledge of it. HTML 5 introduced a lot of new features that are also worth learning.
  prefs: []
  type: TYPE_NORMAL
- en: CSS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: CSS is also a very basic thing to learn. The good thing is that there are lots
    of good tutorials available for both HTML and CSS. It is a good idea also to learn
    the usage of some CSS libraries, such as Bootstrap, which is widely used. CSS
    preprocessors, such as SASS and LESS, are also worth learning.
  prefs: []
  type: TYPE_NORMAL
- en: HTTP
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: HTTP protocol is the key part when developing web applications and RESTful Web
    Services. You have to understand the basics of HTTP and know its limitations.
    You should also know what kind of methods exist and how to use these with different
    programming languages.
  prefs: []
  type: TYPE_NORMAL
- en: JavaScript
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: JavaScript is definitely the programming language that you should master. Without
    JavaScript skills, it is really hard to work with a modern frontend development.
    ES6 is also good to learn because that makes JavaScript coding cleaner and more
    efficient.
  prefs: []
  type: TYPE_NORMAL
- en: A backend programming language
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It's hard to survive without knowing a few programming languages. If JavaScript
    is used for frontend development, it can also be used in the backend with Node.js.
    That is the benefit with Node.js; you can use one programming language in the
    frontend and the backend. Other popular languages for backend development are
    Java, C#, Python, and PHP. All these languages also have good backend frameworks
    you can use.
  prefs: []
  type: TYPE_NORMAL
- en: Some frontend libraries or frameworks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this book, we used React.js in the frontend, which is currently a popular
    option, but there are many others that are also good options, such as Angular
    and Vue.js.
  prefs: []
  type: TYPE_NORMAL
- en: Databases
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You should also know how to use databases with your backend programming language.
    The database can be either a SQL or NoSQL database, and it is good to know both
    options. You should also know how performance can be optimized with the database
    you are using and the queries you are executing.
  prefs: []
  type: TYPE_NORMAL
- en: Version control
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The version control is something that you can't live without. Nowadays, Git
    is a really popular version control system and it's really important to know how
    to use it. There are also repository management services, such as GitHub and GitLab,
    that are good to know.
  prefs: []
  type: TYPE_NORMAL
- en: Useful tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are also many different tools that can help to make your development process
    more efficient. Here, we just mention some tools that might be useful for you.
    Gulp.js is an open source JavaScript toolkit to automate your tasks in the development
    process. Grunt is similar to the JavaScript task runner, which you can use to
    automate your process. Webpack is a JavaScript module bundler that creates static
    assets from your dependencies. create-react-app, which we usedÂ in previous chapters,
    actually uses Webpack under the hood.
  prefs: []
  type: TYPE_NORMAL
- en: Security
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You have to know the basics of web security and how to take care of these issues
    in web development. A good way to start learning is to read *OWASP Top 10 Most
    Critical Web Application Security Risks* ([https://www.owasp.org/index.php/Category:OWASP_Top_Ten_Project](https://www.owasp.org/index.php/Category:OWASP_Top_Ten_Project)).
    Then you have to learn how to handle these issues with the frameworks you are
    using.
  prefs: []
  type: TYPE_NORMAL
- en: Best practices
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Software development is always team work and therefore it is really important
    that everyone in a team is using common best practices. Here, we will go through
    some basic things that you have to take into account. This is not the whole list,
    but we try to concentrate on some basic things that you should know.
  prefs: []
  type: TYPE_NORMAL
- en: Coding conventions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Coding conventions are guidelines that describe how the code should be written
    in a specific programming language. It makes code more readable and easier to
    maintain. Naming conventions define how variables, methods, and more should be
    named. Naming is really important because that helps developers understand the
    purpose of a certain unit in the program. The layout convention defines how the
    structure of the source code should look, for example, indenting and usage of
    spaces. The commenting convention defines how the source code should be commented.
    Quite often it is good to use some standardized ways for the commenting, such
    as Javadoc with Java.
  prefs: []
  type: TYPE_NORMAL
- en: Most of the software development environments and editors offer tools that help
    you with code conventions. You can also use code formatters, such as prettier
    for JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: Choosing the proper tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You should always choose the proper tools that best fit your software development
    process. This makes your process more efficient and also helps you in the development
    life cycle. There are many tools to automate tasks in the development process
    and that is good way to avoid mistakes that occurs in repetitive tasks. Of course,
    the tools you use will depend on the process and the technologies you're using.
  prefs: []
  type: TYPE_NORMAL
- en: Choosing the proper technologies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When starting to develop an application, one of the first things to decide is
    which technologies (programming language, frameworks, databases, and so on) you
    should use. Quite often, it feels safe to select technologies that you have always
    used, but that's not always the optimal choice. The application itself normally
    makes some limitations to the technologies that you can use. For example, if you
    have to create a mobile application, there are several technologies that you can
    use. But if you have to develop a similar application that you have made many
    times, it might be wiser to use technologies that you already know well.
  prefs: []
  type: TYPE_NORMAL
- en: Minimizing the amount of coding
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A common good practice is to minimize the amount of coding. This is really wise
    because it makes code maintenance and testing much easier. **DRY** (**Don't Repeat
    Yourself**) is a common principle in software development. The basic idea of DRY
    is to reduce the amount of code by avoiding repetitions in the code. It is always
    good practice to split your source code into smaller components because smaller
    units are always easier to manage. Of course, the optimum structure depends on
    the programming language you are using. One good statement is also **Keep it Simple,
    Stupid** (**KISS**) that should guide you in the right direction.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we covered the technologies that you should be familiar with
    if you want to become a full stack developer. The amount of knowledge that you
    should have sounds like a lot, but you don't have to be the master of all the
    technologies that we described. It is also good to understand some best practices
    of software development because then you can avoid common mistakes and your source
    code will be more readable and easier to maintain.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Why are coding conventions important?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Why should you try to avoid excessive coding?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Why are naming conventions important?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Packt has other great resources for learning about full stack development:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.packtpub.com/application-development/complete-javascript-developer-primer-full-stack-js-video](https://www.packtpub.com/application-development/complete-javascript-developer-primer-full-stack-js-video)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://www.packtpub.com/application-development/full-stack-development-jhipster](https://www.packtpub.com/application-development/full-stack-development-jhipster)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://www.packtpub.com/networking-and-servers/fundamentals-continuous-delivery-pipeline-video](https://www.packtpub.com/networking-and-servers/fundamentals-continuous-delivery-pipeline-video)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
