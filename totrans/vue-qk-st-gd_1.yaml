- en: Introducing Vue
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will look into how to start learning Vue 2\. This chapter
    will show you the easiest way to get started quickly and how to keep track of
    your progress easily with the help of the available SaaS platforms.
  prefs: []
  type: TYPE_NORMAL
- en: We will also look at why Vue is getting so popular, and why we should use it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Furthermore, we''ll discuss the basic building blocks of Vue: mustache templates,
    directives, modifiers, methods, and computed properties.'
  prefs: []
  type: TYPE_NORMAL
- en: Along the way, we will look at a number of practical examples. Let's begin by
    looking at just what exactly Vue is.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will take a look at the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: What is Vue?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What problems does Vue solve?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Why use Vue?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is Vue?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Vue is a simple and easy-to-use JS framework which appeared in 2013\. It is
    the successful result of taking some excellent ideas from Angular and React and
    combining them in an easy-to-use package.
  prefs: []
  type: TYPE_NORMAL
- en: Compared with other popular frontend frameworks, Vue comes out on top for simplicity
    and ease of use.
  prefs: []
  type: TYPE_NORMAL
- en: Let's see how we can start using it.
  prefs: []
  type: TYPE_NORMAL
- en: The quickest way to start using Vue2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the last decade, a lot of the tools for web development have moved to the
    web, so let's go with the flow and start a new pen on [http://codepen.io/](http://codepen.io/).
  prefs: []
  type: TYPE_NORMAL
- en: You don't have to be a member of [https://codepen.io/](https://codepen.io/) to
    create pens there—you can just save them with the blanket username `Captain Anonymous`.
    However, it's better to open an account so you have all your experiments in one
    place.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you navigate your browser to [https://codepen.io](https://codepen.io),
    you''ll be greeted with the following screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/a22c888d-87fc-45c2-a410-f1a05a28556b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on the Create dropdown (in the main navigation, in the top-right area
    of the screen), and then click New Pen. Once you do, you will see the default
    editor setup:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/054f991f-fa02-48c4-8f43-a86eb87133c1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, click the Settings button in the top right of the screen, and in the
    popup that appears choose JavaScript:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/75cbf157-55fa-4267-b981-c4216eeaf22e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, in the Quick-add drop-down field, select the Vue option. Once you do,
    the first input will be filled out with the current minified version of Vue which
    is served from the Cloudflare CDN, or, more specifically, from this link: [https://cdnjs.cloudflare.com/ajax/libs/vue/2.5.13/vue.min.js](https://cdnjs.cloudflare.com/ajax/libs/vue/2.5.13/vue.min.js).'
  prefs: []
  type: TYPE_NORMAL
- en: That's it! We're ready to start using Vue2 in our Codepen project.
  prefs: []
  type: TYPE_NORMAL
- en: 'One thing to understand about Vue is that it makes our HTML dynamic. This is
    achieved by adding **mustache syntax**. This syntax is very easy to understand.
    We simply insert it inside an HTML element. For example, we can add mustache syntax
    to an `h1` tag like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'So, let''s go over how this works in detail. Feel free to work on your own
    pen or see the example here: [https://codepen.io/AjdinImsirovic/pen/rKYyvE](https://codepen.io/AjdinImsirovic/pen/rKYyvE).'
  prefs: []
  type: TYPE_NORMAL
- en: Mustache template example
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s begin working with our first pen:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'We can now see our HTML being rendered in the CodePen preview pane, with the
    following text printed on the screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Note that the CodePen app will often update the preview pane even without saving,
    which is a lot better than refreshing the browser—that must be done when working
    on your projects locally. Still, it is good to save your CodePen projects often,
    to not lose any changes (in the odd case of your browser freezing or something
    else out of the ordinary happening).
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, let''s add the following Vue code to the JS pane inside our pen:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, let''s update the HTML so that the Vue code can work its magic:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: In the previous code example, we can see how we use mustache templates to dynamically
    insert data into our HTML.
  prefs: []
  type: TYPE_NORMAL
- en: Mustache templating is achieved by simply passing the keys of our data object
    into our HTML tags and surrounding the keys with the opening `{{` and closing
    `}}` tags.
  prefs: []
  type: TYPE_NORMAL
- en: As mentioned before, CodePen will auto-update the preview pane, but this will
    not affect the preview since we are effectively producing the same output as we
    did when we were using just plain HTML.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we can play with it simply by changing the key-value pairs inside our data
    entry:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'This time, the output will auto-update to this:'
  prefs: []
  type: TYPE_NORMAL
- en: This is an h1
  prefs: []
  type: TYPE_NORMAL
- en: Just an h2 heading
  prefs: []
  type: TYPE_NORMAL
- en: Vue2 is fun
  prefs: []
  type: TYPE_NORMAL
- en: 'We can also change our entry point. For example, we can have Vue access only
    the `p` tag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'After this change, our preview pane will show the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '{{ heading1 }}'
  prefs: []
  type: TYPE_NORMAL
- en: Just an {{ heading2 }}
  prefs: []
  type: TYPE_NORMAL
- en: Vue2 is fun
  prefs: []
  type: TYPE_NORMAL
- en: 'From this output, we can conclude that our mustache templates will be rendered
    in our HTML output as regular text if either of the following things happen:'
  prefs: []
  type: TYPE_NORMAL
- en: Our entry point does not reference the data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The entry in our data does not exist
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We've also seen how our entry point can be any kind of selector. You can think
    of it as being similar to how you can target different elements in jQuery.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, we could have a more complex selector as our app''s entry point:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Using Vue's data option as a function
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Note that the `data` option of our Vue instance can be either an object or a
    function. An example of data as an object can be seen in the previous code. Using
    data as a function is easy as well.
  prefs: []
  type: TYPE_NORMAL
- en: Data as an object doesn't work well with reusable components. For this reason,
    using data as a function is, generally speaking, a more useful way to use the
    data option in Vue.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s see another pen. This time, we''ll use the data option as a function,
    instead of as an object. The pen is available here: [https://codepen.io/AjdinImsirovic/pen/aKVJgd](https://codepen.io/AjdinImsirovic/pen/aKVJgd).
    The only change we''ll make is in our Vue code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Now that we're familiar with the very basics of Vue syntax, let's look at what
    it can be used for.
  prefs: []
  type: TYPE_NORMAL
- en: What problems does Vue solve?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Without trying to make an extensive list, let''s quickly highlight some of
    Vue''s greatest strengths:'
  prefs: []
  type: TYPE_NORMAL
- en: Vue—a jQuery successor?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Vue is a great learning tool for beginners
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Vue is a versatile and progressive framework
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Vue is an awesome tool for animations and interactions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Vue's approach is similar to other modern frontend frameworks and libraries
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Next, let's briefly go over each of these points.
  prefs: []
  type: TYPE_NORMAL
- en: Vue, a jQuery successor
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The famous jQuery library appeared in 2006\. When it came out, it did a few
    things beautifully:'
  prefs: []
  type: TYPE_NORMAL
- en: It made writing cross-browser JavaScript a lot easier, which was a big plus
    at the time since it dramatically decreased the need for developers to mess with
    various browsers' quirks and inconsistencies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It had a simple syntax that made it easier to target and manipulate specific
    DOM nodes, which is beautifully phrased in their motto *write less, do more*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It was an excellent entry point to learning JavaScript in general
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It had a great API that made working with Ajax simple and easy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: However, a lot has changed since then—for the better.
  prefs: []
  type: TYPE_NORMAL
- en: Arguably, the biggest improvement that happened in JavaScript-land between 2006
    and today is the virtual DOM.
  prefs: []
  type: TYPE_NORMAL
- en: 'The virtual DOM was a paradigm shift: we no longer had to write procedural,
    spaghetti JS to instruct the browser on how to traverse and manipulate the DOM.
    Instead of telling the browser *how* to update the DOM, we can now simply tell
    it *what* to update. Or, to be more specific, we tell *a framework* what to update—a
    framework like View or React. The actual implementation of the virtual DOM is
    framework-specific and not really something to be concerned with at this point.'
  prefs: []
  type: TYPE_NORMAL
- en: We can now work with the DOM indirectly, by using *declarative* code that deals
    with the virtual DOM implementation of the underlying framework. This abstraction
    is the one thing that more or less made jQuery redundant.
  prefs: []
  type: TYPE_NORMAL
- en: Of course, since so many apps are still powered by jQuery and since legacy code
    has a tendency to stick around, jQuery *will* be alive and well in the years to
    come.
  prefs: []
  type: TYPE_NORMAL
- en: However, the paradigm shift in the way we think about DOM manipulation makes
    Vue a strong contender to jQuery's throne as the most popular game in town.
  prefs: []
  type: TYPE_NORMAL
- en: 'Vue also has other advantages: it is an excellent starting point to learn present-day
    frontend development. The barrier to entry is really low.'
  prefs: []
  type: TYPE_NORMAL
- en: A learning tool for beginners
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If a jQuery developer was faced with the option of learning either of the modern
    frontend frameworks/libraries, React, Angular, Vue, Ember... which one would probably
    be the easiest to get started with?
  prefs: []
  type: TYPE_NORMAL
- en: Vue, of course!
  prefs: []
  type: TYPE_NORMAL
- en: As we've seen already, getting started with Vue can be as simple as importing
    a CDN. And since we humans are wired to thrive on small, frequent victories, Vue
    seems to be the happy route to take. This is not to say that a developer should
    not try to learn other frontend frameworks too. It just seems that Vue is the
    easiest way to get started and the best way to get productive quickly.
  prefs: []
  type: TYPE_NORMAL
- en: A versatile and progressive framework
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The official website for Vue JS says that Vue is *the Progressive JavaScript
    Framework*. This means you can add Vue to an existing server-side project incrementally.
    Basically, you can add Vue to just one simple section of your website. No wonder
    Laravel chose to bundle with Vue on its frontend.
  prefs: []
  type: TYPE_NORMAL
- en: But you don't have to settle for only sprinkling Vue in here and there. You
    can also extend it using Vuex and Vue-Router. This makes Vue very versatile and
    usable in a number of different scenarios.
  prefs: []
  type: TYPE_NORMAL
- en: A tool for animations and transitions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you need to make high-performance animations and transitions, look no further
    than Vue! Vue's animations API is very easy to understand and it's a joy to use.
    It is so easy to do animations in Vue that you will be amazed at how much you
    can accomplish in a very short time.
  prefs: []
  type: TYPE_NORMAL
- en: Features similar to other modern frontend frameworks and libraries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Just like other modern frontend frameworks, such as React and Angular, Vue
    has the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Virtual DOM
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A command-line interface (Vue-cli)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: State management (Vuex)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Routing (Vue-Router)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'However, it seems that Vue''s core team is going out of their way to make Vue
    as approachable as possible. This is evident in several examples:'
  prefs: []
  type: TYPE_NORMAL
- en: The effort they've put in to avoid the hassle of setting up Vue-cli, which makes
    it very easy to get started with
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The lack of complicated toolchains
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The simplicity of Vue's API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Like the official project's website states, Vue is approachable, versatile,
    and performant.
  prefs: []
  type: TYPE_NORMAL
- en: Why use Vue?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We have discussed the problems that Vue solves in the previous section. In
    this section, we will look at practical examples of why it is a pleasure to work
    with:'
  prefs: []
  type: TYPE_NORMAL
- en: Declarative code (we tell Vue what to do, not how to do it)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Easy to understand syntax (it's as minimal as it can get)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Feels like a right fit for a variety of projects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Declarative code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's compare vanilla JavaScript code with Vue JavaScript code.
  prefs: []
  type: TYPE_NORMAL
- en: For this example, we'll print out members of an array.
  prefs: []
  type: TYPE_NORMAL
- en: 'In vanilla JavaScript, this will be the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: In this file, the focus should be on the code inside the `script` tags.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can see this example in the form of a pen at this URL: [https://codepen.io/AjdinImsirovic/pen/xzPdxO](https://codepen.io/AjdinImsirovic/pen/xzPdxO).'
  prefs: []
  type: TYPE_NORMAL
- en: 'There are several things that we are doing in this code:'
  prefs: []
  type: TYPE_NORMAL
- en: We are setting `array1`, which will later populate the list items we will create
    dynamically
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We are creating a `ul`—an unordered list element that will wrap all our list
    items (all our `li` elements)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We are setting the styles for our `ul`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We are appending `unorderedList` to the body of our document
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, we use a `for` loop to create three `li` elements
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Still inside the `for` loop, we add a class to each list item
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We then append each of them to the unordered list element
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, we add `innerHTML` to each list item
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Many objections could be made to the way that this code is made. We could have
    used a `forEach`; we could have avoided adding styles the way we did and instead
    called the CSS from a separate file. But the biggest objection is how fragile
    this code is. Let's contrast this code with the same thing written in Vue.
  prefs: []
  type: TYPE_NORMAL
- en: 'In Vue, our code will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The code for this example can be found here: [https://codepen.io/AjdinImsirovic/pen/VdrbYW](https://codepen.io/AjdinImsirovic/pen/VdrbYW).'
  prefs: []
  type: TYPE_NORMAL
- en: As we can see at just a simple glance, Vue's code is a lot easier to understand
    and reason about in comparison to the same code implemented in vanilla JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: The `el` here is the entry point for our Vue app. The `data` option is the actual
    data our Vue app will work with.
  prefs: []
  type: TYPE_NORMAL
- en: 'There''s also another major benefit to this setup: once you understand how
    Vue works, any other project that uses Vue will simply make sense to you, which
    will yield increased productivity and efficiency.'
  prefs: []
  type: TYPE_NORMAL
- en: The Vue way of doing things thus promotes being faster and doing more things
    in less time.
  prefs: []
  type: TYPE_NORMAL
- en: Feels like a right fit for a variety of projects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the strengths of Vue is the possibility of incremental implementation.
    If you would just like to make a quick, simple experiment in Vue, no problems.
    You can start with Vue in under a minute, literally.
  prefs: []
  type: TYPE_NORMAL
- en: This makes it great for converting legacy projects, building projects from scratch,
    or for simple experiments.
  prefs: []
  type: TYPE_NORMAL
- en: 'Vue is also maturing quickly. There is a vibrant Vue community and a lot of
    developers are working on it continuously. For example, one of the arguments for
    people to choose React over Vue was the lack of a framework to build native mobile
    apps in Vue. That''s no longer the case: Vue Native is available as of June 2018\.
    You can check it out at [https://github.com/GeekyAnts/vue-native-core](https://github.com/GeekyAnts/vue-native-core),
    or find out more about it at [https://vue-native.io/](https://vue-native.io/).'
  prefs: []
  type: TYPE_NORMAL
- en: With all of this in mind, there are plenty of reasons why learning Vue is a
    nice return on investment for anyone, especially frontend developers.
  prefs: []
  type: TYPE_NORMAL
- en: Easy-to-understand syntax
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One thing that can be noticed in this example of a very simple Vue app is the
    use of the `v-for` HTML attribute.
  prefs: []
  type: TYPE_NORMAL
- en: Directives
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: All the `v-*` attributes in Vue are called *directives*, which is borrowed from
    Angular.
  prefs: []
  type: TYPE_NORMAL
- en: The concept of directives is very interesting. They make code easier to understand,
    easier to think about, and easier to work with.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are other directives in Vue that we will use extensively throughout this
    book. For now, let''s just list some of them: `v-bind`, `v-cloak`, `v-for`, `v-else`,
    `v-else-if`, `v-model`, `v-on`, `v-once`, `v-text`, and `v-html`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'An example of a useful directive is `v-model`. The `v-model` directive is used
    to make forms reactive; it helps us update data on user input events. While this
    topic might sound a bit advanced to a beginner in Vue, this complexity is dealt
    with so elegantly that even beginners should find it easy to see what is happening
    in the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, the `{{ someNum }}` value is bound to whatever a user types
    into the input field. In other words, the underlying data model—the value of `someNum`—will
    change based on user input.
  prefs: []
  type: TYPE_NORMAL
- en: To view the pen for the preceding example, visit [https://codepen.io/AjdinImsirovic/pen/pKdPgX](https://codepen.io/AjdinImsirovic/pen/pKdPgX).
  prefs: []
  type: TYPE_NORMAL
- en: Modifiers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The directives in Vue are further extended with the help of modifiers.
  prefs: []
  type: TYPE_NORMAL
- en: The link to official documentation on modifiers in directives can be found at
    this link: [https://vuejs.org/v2/guide/forms.html#Modifiers](https://vuejs.org/v2/guide/forms.html#Modifiers).
  prefs: []
  type: TYPE_NORMAL
- en: 'To use a modifier, we simply append it to a directive. The simplest possible
    example might look a bit like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: We have just appended the `trim` modifier to the `v-model` directive.
  prefs: []
  type: TYPE_NORMAL
- en: You can view the example for this code at this link: [https://codepen.io/AjdinImsirovic/pen/eKeRXK](https://codepen.io/AjdinImsirovic/pen/eKeRXK).
  prefs: []
  type: TYPE_NORMAL
- en: This modifier will trim any whitespace (such as spaces or tabs) typed into the
    input field by the user.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before continuing with this 10,000-foot overview of Vue syntax, let''s also
    mention the `v-on` directive, which is used for event handling. Here is a quick
    example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Vue even provides shortcut syntax for `v-on`: the `@` symbol. Thus, we can
    replace `v-on:click` with just `@click` and our Vue counter will still work.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To view this example in [http://codepen.io/](http://codepen.io/), visit the
    following URL: [https://codepen.io/AjdinImsirovic/pen/PaOjvz](https://codepen.io/AjdinImsirovic/pen/PaOjvz).'
  prefs: []
  type: TYPE_NORMAL
- en: Vue methods
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `methods` option in a Vue instance just lists all the functions that exist
    on that Vue instance (or on a Vue component).
  prefs: []
  type: TYPE_NORMAL
- en: 'The `methods` option works with the data of the Vue instance. What follows
    is a simple demonstration of this concept in practice:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: As we can see, the `data` option holds the `Vue.js` string, which can be accessed
    via the `name` key.
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside the `methods` option, we can see two functions: `whatIsVue` and `whyUseVue`.
    The `whatIsVue` function takes the click event and logs out the value inside `name` to
    the console. The `whyUseVue` function inside the `methods` option works similarly.'
  prefs: []
  type: TYPE_NORMAL
- en: 'This code can be seen in a pen at this address: [https://codepen.io/AjdinImsirovic/pen/yEPXdK](https://codepen.io/AjdinImsirovic/pen/yEPXdK?editors=1111).'
  prefs: []
  type: TYPE_NORMAL
- en: Computed properties and watchers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Computed properties are used to avoid complex logic adding bloat to your views.
    In other words, computed properties are useful to hide the complexity from our
    HTML and thus keep our HTML understandable, easy to use, and declarative. Put
    differently, when we need to compute some values from the `data` option, we can
    do that with the help of computed properties.
  prefs: []
  type: TYPE_NORMAL
- en: 'The full code for the following example can be seen at [https://codepen.io/AjdinImsirovic/pen/WyXEOz](https://codepen.io/AjdinImsirovic/pen/WyXEOz):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Computed properties are cached. As long as a computed property's dependencies
    do not change, Vue will return the cached value of the computed property.
  prefs: []
  type: TYPE_NORMAL
- en: Watchers are not as frequently used as computed properties are. In other words,
    the watch option is to be used less frequently than the computed properties option.
    Watchers are commonly used for asynchronous or otherwise costly operations with
    changing data.
  prefs: []
  type: TYPE_NORMAL
- en: Watchers have to do with reactive programming; they allow us to observe a sequence
    of events through time and react to changes as they happen on a certain data property.
  prefs: []
  type: TYPE_NORMAL
- en: We will cover the subject of computed properties and watchers in later chapters.
    For now, it is sufficient to know that they exist in Vue and that they are widely
    used.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we looked at how to get started with Vue quickly, with the
    help of [codepen.io](http://codepen.io). We also discussed some of the most important
    ideas and concepts in Vue, such as the quickest and most developer-friendly way
    to start learning Vue 2\. We looked into what problems Vue solves, what its strengths are,
    and why it is sometimes referred to as *the new jQuery*. We learned about mustache
    templates, Vue's declarative code, and its easy-to-understand syntax. Finally,
    we introduced directives, modifiers, methods, computed properties, and watchers.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will see what reactive programming is and how it is
    applied in Vue. We will also look at further expanding the concepts covered in
    this chapter, and we will introduce some additional features of Vue.
  prefs: []
  type: TYPE_NORMAL
