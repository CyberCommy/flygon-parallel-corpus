- en: Chapter 12. Production with Django
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When the development phase of a website is complete and you want to make it
    accessible to users, you must deploy it. The following are the steps to do this:'
  prefs: []
  type: TYPE_NORMAL
- en: Completing the development
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Selecting the physical server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Selecting the server software
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Selecting the server database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing PIP and Python 3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing PostgreSQL
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing Nginx
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing virtualenv and creating a virtual environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing Django, South, Gunicorn, and psycopg2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring PostgreSQL
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adaptation of Work_manager to the production
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Initial South migration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Gunicorn
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Starting Nginx
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Completing the development
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'It is important to carry out some tests before starting the deployment. Indeed,
    when the website is deployed, problems are harder to solve; it can be a huge waste
    of time for the developers and users. That''s why I emphasize once again: you
    must overdo tests!'
  prefs: []
  type: TYPE_NORMAL
- en: Selecting the physical server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A physical server is the machine that will host your website. It is possible
    to host your own website at home, but this is not suitable for professional websites.
    Indeed, as many web users use the site, it is necessary to use a web host. There
    are so many different types of accommodations, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Simple hosting**: This type of hosting is suitable for websites that need
    quality service without having a lot of power. With this accommodation, you do
    not have to deal with system administration, but it does not allow the same flexibility
    as dedicated servers. This type of hosting also has another disadvantage with
    Django websites: there are not many hosts offering a compatible accommodation
    with Django yet.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**A dedicated server**: This is the most flexible type of accommodation. We
    rent (or buy) a server with a web host that provides us with an Internet connection
    and other services. The prices are different depending on the desired configuration,
    but powerful servers are very expensive. This type of accommodation requires you
    to deal with system administration, unless you subscribe to an outsourcing service.
    An outsourcing service allows you to use a system administrator who will take
    care of the server against remuneration.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**A virtual server**: Virtual servers are very similar to dedicated servers.
    They are usually less expensive because some virtual servers can run on a single
    physical server. Hosts regularly offer additional services such as server hot
    backups or replication.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Choosing a type of accommodation should be based on your needs and financial
    resources.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a nonexhaustive list of hosts that offer Django:'
  prefs: []
  type: TYPE_NORMAL
- en: alwaysdata
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: WebFaction
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DjangoEurope
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DjangoFoo Hosting
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Selecting the server software
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'During the development phase, we used the server that comes with Django. This
    server is very convenient during development, but it is not suitable for a production
    website. Indeed, the development server is neither efficient nor secure. You have
    to choose another type of server to install it. There are many web servers; we
    selected two of them:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Apache HTTP Server**: This has been the most-used web server since 1996,
    according to Netcraft. It is a modular server that allows you to install modules
    without the need to compile the server. In recent years, it''s been used less
    and less. According to Netcraft, in April 2013, the market share was 51 percent.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Nginx**: Nginx is known for its performance and low memory consumption. It
    is also modular, but the modules need to be integrated in the compilation. In
    April 2013, Nginx was used by 14 percent of all the websites whose web server
    Netcraft knows about.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Selecting the server database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The choice of server database is important. Indeed, this server will store all
    the data of the website. The main characteristics that are sought after in a database
    are performance, safeness, and reliability.
  prefs: []
  type: TYPE_NORMAL
- en: 'The choice depends on the importance of these three criteria:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Oracle**: This database is a system database developed by Oracle Corporation.
    There is a free open source version of this database, but its features are limited.
    This is not a free-of-charge database.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**MySQL**: This is a database system that belongs to Oracle (since the purchase
    of Sun Microsystems). It is a widely used database on the Web, including the **LAMP**
    (**Linux Apache MySQL PHP**) platform. It is distributed under a dual GPL and
    a proprietary license.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**PostgreSQL**: This is a system of free databases distributed under the BSD
    license. This system is known to be stable and offers advanced features (such
    as the creation of data types).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**SQLite**: This is the system that we used during the development of our website.
    It is not suitable for a website that gets a lot of visitors. Indeed, the entire
    database is in a SQLite file and does not allow a competitor to access the data.
    Furthermore, there is no user or system without a security mechanism. However,
    it is quite possible to use it to demonstrate to a client.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**MongoDB**: This is a document-oriented database. This database system is
    classified as a NoSQL database because it uses a storage architecture that uses
    the **BSON** (**binary JSON**) format. This system is popular in environments
    where the database is distributed among several servers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying the Django website
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For the rest of the book, we will use the HTTP Nginx server and PostgreSQL database.
    The chapter's explanation will be made on a GNU / Linux Debian 7.3.0 32-bit system.
    We will start with a new Debian operating system without any installations.
  prefs: []
  type: TYPE_NORMAL
- en: Installing PIP and Python 3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For the following commands, you must log on with a user account that has the
    same privileges as a superuser account. For this purpose, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: After this command, you must type the root password.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we update the Debian repositories:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we install Python 3 and PIP as done in [Chapter 2](part0019.html#page
    "Chapter 2. Creating a Django Project"), *Creating a Django Project*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Installing PostgreSQL
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will install four packages to be able to use PostgreSQL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we will install our web Nginx server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Installing virtualenv and creating a virtual environment
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We have installed Python and PIP as done in [Chapter 2](part0019.html#page
    "Chapter 2. Creating a Django Project"), *Creating a Django Project*, but before
    installing Django, we will install virtualenv. This tool is used to create virtual
    environments for Python and to have different library versions on the same operating
    system. Indeed, on many Linux systems with Debian, a version of Python 2 is already
    installed. It is recommended that you do not uninstall it to keep the system stable.
    We will install virtualenv to set our own environments and facilitate our future
    Django migration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'You must then create a folder that will host your virtual environments:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The following command creates a virtual environment named `django1.6` in the
    `/home/env/` folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'We will then provide all the rights to all the users to access the folder of
    the environment by issuing the following command. From the point of view of safety,
    it would be better to restrict access by user or group, but this will take a lot
    of time:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Installing Django, South, Gunicorn, and psycopg2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will install Django and all the components that are needed for Nginx and
    Django to be able to communicate. We will first activate our virtual environment.
    The following command will connect us to the virtual environment. As a result,
    all Python commands made from this environment can only use packages installed
    in this environment. In our case, we will install four libraries that are only
    installed in our virtual environment. For the following commands, you must log
    in as a user who does not have the superuser privileges. We cannot perform the
    following commands from the root account because we need virtualenv. However,
    the root account sometimes overrides the virtual environment to use Python from
    the system, instead of the one present in the virtual environment.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Gunicorn is a Python package that plays the role of a WSGI interface between
    Python and Nginx. To install it, issue the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'psycopg2 is a library that allows Python and PostgreSQL to communicate with
    each other:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'To reconnect as a superuser, we have to disconnect from the virtual environment:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Configuring PostgreSQL
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For the following commands, you must log on with a user account that has the
    same privileges as a superuser. We will connect to the PostgreSQL server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The following command creates a database called `workmanager`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'We will then create a user for PostgreSQL. After entering the following command,
    more information is requested:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The following lines are the information requested by PostgreSQL for the new
    user and the responses (used for this chapter):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we must connect to the PostgreSQL interpreter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'We give all the rights to our new user on the new database:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we quit the SQL interpreter and the connection to PostgreSQL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Adaptation of Work_manager to production
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For the following commands, you must log in as a user who does not have the
    superuser privileges.
  prefs: []
  type: TYPE_NORMAL
- en: At this stage of deployment, we have to copy the folder that contains our Django
    project. The folder to be copied is the `Work_manager` folder (which contains
    the `Work_manager` and `TasksManager` folders and the `manage.py` file). We will
    copy it to the root of the virtual environment, that is, in `/home/env/django1.6`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To copy it, you can use the means you have at your disposal: a USB key, SFTP,
    FTP, and so on. We then need to edit the `settings.py` file of the project to
    adapt it to the deployment.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The part that defines the database connection becomes the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'We must modify the `ALLOWED_HOSTS` line with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Also, it is important to not use the `DEBUG` mode. Indeed, the `DEBUG` mode
    can provide valuable data to hackers. For this, we must change the `DEBUG` and
    `TEMPLATE_DEBUG` variables in the following way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Initial South migration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We activate our virtual environment to perform the migration and launch Gunicorn:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Sometimes, the creation of the database with PostgreSQL generates an error
    when everything goes well. To see if the creation of the database went well, we
    must run the following commands as the root user and verify that the tables have
    been created:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'If they were properly created, you have to make a fake South migration to manually
    tell it that everything went well:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Using Gunicorn
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We then start our WSGI interface for Nginx to communicate with:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Starting Nginx
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Another command prompt as the root user must run Nginx with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Now, our web server is functional and is ready to work with many users.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned how to deploy a Django website with a modern architecture.
    In addition, we used virtualenv, which allows you to use several versions of Python
    libraries on the same system.
  prefs: []
  type: TYPE_NORMAL
- en: In this book, we learned what the MVC pattern is. We have installed Python and
    Django for our development environment. We learned how to create templates, views,
    and models. We also used the system for routing Django URLs. We also learned how
    to use some specific elements such as Django forms, CBV, or the authentication
    module. Then, we used session variables and AJAX requests. Finally, we learned
    how to deploy a Django website on a Linux server.
  prefs: []
  type: TYPE_NORMAL
