- en: Managing Logs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Managing the error log
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing the general query log and slow query log
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing the binary logs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You will now learn about managing different type of logs: error log, general
    query log, slow query log, binary logs, relay logs, and DDL logs.'
  prefs: []
  type: TYPE_NORMAL
- en: Managing the error log
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As per the MySQL documentation:'
  prefs: []
  type: TYPE_NORMAL
- en: The error log contains a record of `mysqld` startup and shutdown times. It also
    contains diagnostic messages such as errors, warnings, and notes that occur during
    server startup and shutdown, and while the server is running.
  prefs: []
  type: TYPE_NORMAL
- en: 'The error log subsystem consists of components that perform log event filtering
    and writing, as well as a system variable called `log_error_services` that configures
    which components to enable to achieve the desired logging result. The default
    value of `global.log_error_services` is `log_filter_internal; log_sink_internal`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: That value indicates that log events first pass through the built-in filter
    component, `log_filter_internal`, then through the built-in log writer component,
    `log_sink_internal`. Component order is significant because the server executes
    components in the order listed. Any loadable (not built in) component named in
    the `log_error_services` value must first be installed with `INSTALL COMPONENT`
    which will be described in this section.
  prefs: []
  type: TYPE_NORMAL
- en: To know about all types of error logging, refer to [https://dev.mysql.com/doc/refman/8.0/en/error-log.html](https://dev.mysql.com/doc/refman/8.0/en/error-log.html)
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Error logs are easy, in a way. Let's see how to configure an error log first.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the error log
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The error logging is controlled by the `log_error` variable (`--log-error` for
    a startup script).
  prefs: []
  type: TYPE_NORMAL
- en: If `--log-error` is not given, the default destination is the console.
  prefs: []
  type: TYPE_NORMAL
- en: If `--log-error` is given without naming a file, the default destination is
    a file named `host_name.err` in the `data directory` .
  prefs: []
  type: TYPE_NORMAL
- en: If `--log-error` is given to name a file, the default destination is that file
    (with an `.err` suffix added if the name has no suffix), located under the `data
    directory`  unless an absolute path name is given to specify a different location.
  prefs: []
  type: TYPE_NORMAL
- en: The `log_error_verbosity` system variable controls server verbosity for writing
    error, warning, and note messages to the error log. Permitted `log_error_verbosity`
    values are `1` (errors only), `2` (errors and warnings), and `3` (errors, warnings,
    and notes), with a default of `3`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To change the error log location, edit the configuration file and restart MySQL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Verify the error log:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'To adjust the verbosity, you can change the `log_error_verbosity` variable
    dynamically. However, it is recommended to keep the default value of `3` so that
    error, warning, and note messages are logged:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Rotating the error log
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Suppose the error log file has become bigger and you want to rotate it; you
    can simply move the file and execute the `FLUSH LOGS` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: You can automate the preceding steps using some scripts and put them into `cron`.
  prefs: []
  type: TYPE_NORMAL
- en: 'If the location of an error log file is not writable by the server, the log-flushing
    operation fails to create a new log file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Using the system log for logging
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To use the system log for logging, you need to load the system log writer called
    `log_sink_syseventlog`. You can use the built-in filter, `log_filter_internal`,
    for filtering:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Load the system log writer:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Make it persistent across restarts:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: You can verify that the logs will be directed to the syslog. On CentOS and Red
    Hat, you can check in `/var/log/messages`; on Ubuntu, you can check in `/var/log/syslog`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For the sake of a demo, the server was restarted. You can see those logs in
    the syslog:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: If you have multiple `mysqld` processes running, you can differentiate using
    the PID specified in `[]`. Otherwise, you can set the `log_syslog_tag` variable,
    which appends the server identifier with a leading hyphen, resulting in an identifier
    of `mysqld-tag_val`.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, you can tag an instance with something like `instance1`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: You will notice that the `instance1` tag is appended to the log so that you
    can easily identify between multiple instances.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you wish to switch back to the original logging, you can set `log_error_services`
    to `''log_filter_internal; log_sink_internal''`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Error logging in JSON format
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To use the JSON format for logging, you need to load the JSON log writer called
    `log_sink_json`. You can use the built-in filter, `log_filter_internal`, for filtering:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install the JSON log writer:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Make it persistent across restarts:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The JSON log writer determines its output destination based on the default
    error log destination, which is given by the `log_error` system variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: The log will be something like `mysqld.log.00.json`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After a restart, the JSON log file looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'If you wish to switch back to original logging, you can set `log_error_services`
    to `''log_filter_internal; log_sink_internal''`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: To know more about the error logging configuration, refer to [https://dev.mysql.com/doc/refman/8.0/en/error-log-component-configuration.html](https://dev.mysql.com/doc/refman/8.0/en/error-log-component-configuration.html).
  prefs: []
  type: TYPE_NORMAL
- en: Managing the general query log and slow query log
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are two ways you can log the queries. One way is through general query
    log, and other way is through slow query log. In this section, you will learn
    about configuring them.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will get into the details in the following subsections.
  prefs: []
  type: TYPE_NORMAL
- en: General query log
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As per the MySQL documentation:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The general query log is a general record of what `mysqld` is doing. The server
    writes information to this log when clients connect or disconnect, and it logs
    each SQL statement received from clients. The general query log can be very useful
    when you suspect an error in a client and want to know exactly what the client
    sent to `mysqld`:'
  prefs: []
  type: TYPE_NORMAL
- en: Specify the file for logging. If you do not specify, it will be created in the
    `data directory` with the name `hostname.log`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The server creates the file in the `data directory` unless an absolute path
    name is given to specify a different directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Enable the general query log:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'You can see that the queries are logged:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: General query log generates a very big log file. Be very cautious when enabling
    it on a production server. It drastically affects the server's performance.
  prefs: []
  type: TYPE_NORMAL
- en: Slow query log
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As per the MySQL documentation:'
  prefs: []
  type: TYPE_NORMAL
- en: '"The slow query log consists of SQL statements that took more than long_query_time
    seconds to execute and required at least min_examined_row_limit rows to be examined."'
  prefs: []
  type: TYPE_NORMAL
- en: To log all the queries, you can set the value of `long_query_time` to `0`. The
    default value of `long_query_time` is `10` seconds and `min_examined_row_limit`
    is `0`.
  prefs: []
  type: TYPE_NORMAL
- en: By default, queries that do not use indexes for lookups and administrative statements
    (such as `ALTER TABLE`, `ANALYZE TABLE`, `CHECK TABLE`, `CREATE INDEX`, `DROP
    INDEX`, `OPTIMIZE TABLE`, and `REPAIR TABLE`) are not logged. This behavior can
    be changed using `log_slow_admin_statements` and `log_queries_not_using_indexes`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To enable slow query log, you can dynamically set `slow_query_log=1` and you
    can set the filename using `slow_query_log_file`. To specify the log destination,
    use `--log-output`:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Verify `long_query_time` and adjust it as per your requirement:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Verify the slow query file. By default, it would be in the `data directory`
    with the `hostname-slow` log:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Enable the slow query log:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Verify that the queries are logged (You have to execute few long running queries
    to see them in slow query log):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Selecting  query log output destinations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can log the queries to either `FILE` or `TABLE` in MySQL itself by specifying
    the `log_output` variable, which can be either `FILE` or `TABLE`, or both `FILE` and `TABLE`.
  prefs: []
  type: TYPE_NORMAL
- en: If you specify `log_output` as `FILE`, the general query log and the slow query
    log will be written to the files specified by `general_log_file` and `slow_query_log_file`,
    respectively.
  prefs: []
  type: TYPE_NORMAL
- en: If you specify `log_output` as `TABLE`, the general query log and the slow query
    log will be written to the `mysql.general_log` and `mysql.slow_log` tables respectively.
    Log contents are accessible through SQL statements.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Execute a few queries and then query the `mysql.general_log` table:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'You can use the `slow_log` table in a similar way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'If the slow query log table has become huge, you can rotate it by creating
    a new table and swapping it:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new table, `mysql.general_log_new`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Swap the tables using the `RENAME TABLE` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Managing the binary logs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, managing the binary logs in a replication environment is covered.
    Basic binary log handling is already covered in Chapter 6, *Binary Logging*, using
    the `PURGE BINARY LOGS` command and `expire_logs_days` variable.
  prefs: []
  type: TYPE_NORMAL
- en: Using those methods is unsafe in a replication environment because if any one
    of the slaves has not consumed the binary logs and you have deleted them, the
    slave will go out of sync and you'll need to rebuild it.
  prefs: []
  type: TYPE_NORMAL
- en: The safe way to delete the binary logs is by checking which binary logs have
    been read on each slave and deleting them. You can use the `mysqlbinlogpurge`
    utility to achieve this.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Execute the `mysqlbinlogpurge` script on any of the servers and specify the
    master and slave hosts. The script connects to all the slaves and finds out the
    latest binary log applied. Then it purges the master binary logs until that point.
    You need a superuser to connect to all slaves:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Connect to any of the servers and execute the `mysqlbinlogpurge` script:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'If you wish to discover all the slaves without specifying in the command, you
    should set `report_host` and `report_port` on all slaves and restart MySQL server.
    On each slave:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Execute `mysqlbinlogpurge` with the `discover-slaves-login` option:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
