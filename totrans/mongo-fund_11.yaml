- en: 11\. Backup and Restore in MongoDB
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Overview
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will examine exactly how to load backups, samples, and test
    databases into a target MongoDB instance, and just as importantly, you will learn
    how to export an existing dataset for backup and restoration at a later date.
    By the end of this chapter, you will be able to backup, export, import, and restore
    MongoDB data into an existing server. This allows you to recover data from disasters
    as well as quickly load known information into a system for testing.
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapters, we have relied primarily on the sample data preloaded
    into a MongoDB Atlas instance. Unless you are working on a new project, this is
    generally the way a database will first appear to you. However, when you are hired
    or moved to a different project with a MongoDB database, it will contain all the
    data that was created before you started there.
  prefs: []
  type: TYPE_NORMAL
- en: Now, what if you require a local copy of this data to test your applications
    or queries? It is often not safe or feasible to run queries directly against production
    databases, so the process of duplicating datasets onto a testing environment is
    quite common. Similarly, when creating a new project, you may wish to load some
    sample data or test data into the database. In this chapter, we will examine the
    procedures for migrating, importing or exporting for an existing MongoDB server
    and setting up a new database with existing data.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Throughout this chapter, the exercises and activities included are iterations
    on a single scenario. The data and examples are based on the MongoDB Atlas sample
    database titled `sample_mflix`.
  prefs: []
  type: TYPE_NORMAL
- en: For the duration of this chapter, we will follow a set of exercises based on
    a theoretical scenario. This is an expansion of the scenario covered in *Chapter
    7*, *Data Aggregation* and *Chapter 8*, *Coding JavaScript in MongoDB*. As you
    may recall, a cinema chain asked you to create queries and programs that would
    analyze their database to produce a list of movies to screen during their promotional
    season.
  prefs: []
  type: TYPE_NORMAL
- en: Over the course of these chapters, you built up some aggregations whose output
    was a new collection containing summary data. You also created an application
    that enabled users to update movies programmatically. The company has been so
    delighted with your work that they have decided to migrate the entire system to
    more significant, better hardware. Although the system administrators feel they
    are confident in migrating the existing MongoDB instance to the new hardware,
    you have decided it would be best if you manually test the procedure to ensure
    you can assist if required.
  prefs: []
  type: TYPE_NORMAL
- en: The MongoDB Utilities
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The mongo shell does not include functions for exporting, importing, backup
    or restore. However, MongoDB has created methods for accomplishing this, so that
    no scripting work or complex GUIs are needed. For this, several utility scripts
    are provided that can be used to get data in or out of the database in bulk. These
    utility scripts are:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mongoimport`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mongoexport`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mongodump`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mongorestore`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will cover each of these utilities in detail in the upcoming sections. As
    their names suggest, these four utilities correspond to importing documents, exporting
    documents, backing up a database and restoring a database. We will start with
    the topic of exporting data.
  prefs: []
  type: TYPE_NORMAL
- en: Exporting MongoDB Data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When it comes to moving data in and out of MongoDB in bulk, the most common
    and generally useful utility is `mongoexport`. This command is useful because
    it is one of the primary ways to extract large amounts of data from MongoDB in
    a usable format. Getting your MongoDB data out into a JSON file allows you to
    ingest it with other applications or databases and share data with stakeholders
    outside of MongoDB.
  prefs: []
  type: TYPE_NORMAL
- en: 'It is important to note that `mongoexport` must run on a single specified database
    and collection. You cannot run `mongoexport` on an entire database or multiple
    collections. We will see how to accomplish larger scope backups like these later
    in the chapter. The following snippet is an example of `mongoexport` in action:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This example is a more complex command, which includes some optional parameters
    and explicitly sets others. In practice though, your export commands may be much
    more straightforward. The structure and parameters used here are explained in
    detail in the following section.
  prefs: []
  type: TYPE_NORMAL
- en: Using mongoexport
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The best way to learn the `mongoexport` syntax is to build up a command parameter
    by parameter. So let''s do that, beginning with the simplest possible version
    of an export:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, in its simplest form, the command only requires a single parameter:
    `–-collection`. This parameter is the collection for which we wish to export our documents.'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you execute this command, you may encounter some puzzling results, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: We get this result because we have not specified a database or URI. In such
    cases, where these details are not specified, `mongoexport` defaults to using
    a local MongoDB on port 27017 and the default database. Since we have been running
    our MongoDB server on Atlas in previous chapter examples and exercises, let's
    update our command to specify these parameters.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: You cannot specify both database and URI; this is because the database is a
    part of the URI. In this chapter, we will use URI for our exports.
  prefs: []
  type: TYPE_NORMAL
- en: 'The updated command would look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that you have a valid command, run it against the MongoDB Atlas database.
    You will see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'At the end of the output, you should see the number of exported records:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'With your URI specified, the export operation worked, and you can see all the
    documents from the `theatres` collection. However, it''s not very useful having
    all these documents flooding your output. You could use some shell commands to
    pipe or append this output into a file, but the `mongoexport` command provides
    another parameter in its syntax for outputting to a file automatically. You can
    see this parameter (`--out`) in the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'After running this command, you will see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Now, there is a new file created in that directory called `output.json`. If
    you look inside this file, you can see our documents exported from the theatres
    collection.
  prefs: []
  type: TYPE_NORMAL
- en: The parameters `uri`, `collection`, and `out` enable the majority of use cases
    for exporting. Once you have your data in a file on the disk, it is easy to integrate
    it with other applications or scripts.
  prefs: []
  type: TYPE_NORMAL
- en: mongoexport Options
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We now know about the three most important options for a `mongoexport`. However,
    there are several other useful options that are helpful for exporting data from
    MongoDB. Here are some of these options and their effects:'
  prefs: []
  type: TYPE_NORMAL
- en: '`--quiet`: This option reduces the amount of output sent to the command line
    during export.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--type`: This will affect how the documents are printed in the console and
    defaults to JSON. For example, you can export the data in **Comma-Separated Value**
    (**CSV**) format by specifying CSV.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--pretty`: This outputs the documents in a nicely formatted manner.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--fields`: This specifies a comma-separated list of keys in your documents
    to be exported, similar to an export level projection.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--skip`: This works similar to a query level skip, skipping documents in the export.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--sort`: This works similar to a query level sort, sorting documents by some keys.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--limit`: This works similar to a query level limit, limiting the number of
    documents outputted.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here is an example with some of these options used, in this case outputting
    ten `theatre` documents, sorted by id, into a file called `output.json`. Additionally,
    the `--quiet` parameter has also been used:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Since we have used the `--quiet` option, we will not see any output at all.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'However, if we look inside the `output.json` file, we can see the ten documents
    sorted by ID:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.1: Contents of output.json file (truncated)'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15507_11_01.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 11.1: Contents of output.json file (truncated)'
  prefs: []
  type: TYPE_NORMAL
- en: There is another option that can be used for more advanced exports, and that
    is the query option. The query option allows you to specify a query, using the
    same format as your standard MongoDB queries. Only documents matching this query
    will be exported. Using this option in combination with other options like --fields,
    `--skip`, and `--limit` allows you to define a complete query with formatted output
    and then export that into a file.
  prefs: []
  type: TYPE_NORMAL
- en: The following is an export that uses the query option to return a specific subset
    of documents. In this case, we are getting all cinemas with a `theaterId` of `4`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'On MacOS you may need to wrap the `theaterId` in quotation marks, for example:
    `--query="{\"theaterId\": 4}"`'
  prefs: []
  type: TYPE_NORMAL
- en: 'We will now see the document we''re looking for as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Let us use these options in the next Exercise.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 11.01: Exporting MongoDB Data'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before you begin this exercise, let's revisit the movie company from the scenario
    outlined in the *Introduction* section. Say your client (the cinema company) is
    going to migrate their existing data, and you're worried about any loss of valuable
    information. One of the first things you decide to do is export the documents
    from the database as JSON files, which can be stored in inexpensive cloud storage
    in case of a disaster. Additionally, you are going to create a different export
    for each film category.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: To demonstrate knowledge of `mongoexport`, we will not create an export for
    each category, but just for a single category. You will also only export the top
    three documents.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this exercise, you will use `mongoexport` to create a file called `action_movies.json`,
    which contains three action movies, sorted by release year. The following steps
    will help you accomplish the task:'
  prefs: []
  type: TYPE_NORMAL
- en: Fine-tune your export and save it for later. Create a new file called `Exercise11.01.txt`
    to store your export command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, type the standard `mongoexport` syntax with just the URI and `movies` collection:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Add extra parameters to satisfy your conditions. First, output your export
    into a file called `action_movies.json`. Use the `--out` parameter as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, add your sort condition to sort the movies by release year as per the
    specifications of this exercise. You can accomplish this using `--sort`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'If you were to run this command at its current intermediary stage, you would
    encounter the following error:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: This is because there are a large number of documents that the MongoDB server
    is trying to sort for us. To improve the performance of your exports and imports,
    you can limit the number of documents you retrieve, so MongoDB doesn't have to
    sort so many for you.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add a `--limit` parameter to reduce the number of documents being sorted and
    satisfy the three-document condition:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Finally, you need to add your query parameter to filter out any documents not
    in the movie genre.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'On MacOS and Linux, you may need to change the quotation marks around strings
    within parameters, for example in the preceding query you will need to use: `--query=''{"genres":
    "Action"}''`'
  prefs: []
  type: TYPE_NORMAL
- en: 'With your command complete, copy it from your `Exercise11.01.txt` file into
    your terminal or command prompt to run it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: The output looks good so far, but you need to check your output file to ensure
    the correct documents have been exported. In the directory in which you just executed
    your command, you should see the new file `action_movies.json`. Open this file
    and view the contents inside.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The plot field is removed to improve the clarity of the output.
  prefs: []
  type: TYPE_NORMAL
- en: 'You should see the following documents:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.2: Contents of the action_movies.json file (truncated for brevity)'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15507_11_02.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 11.2: Contents of the action_movies.json file (truncated for brevity)'
  prefs: []
  type: TYPE_NORMAL
- en: This exercise illustrated the fundamentals required to export your documents
    from MongoDB in a robust and flexible way. Combining the parameters learned here,
    most basic exports will now be easy. To master data exports in MongoDB, it is
    helpful to keep experimenting and learning.
  prefs: []
  type: TYPE_NORMAL
- en: Importing Data into MongoDB
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You now know how to get your collection data out of MongoDB and into an easy-to-use
    format on disk. But say that you have this file on disk, and you want to share
    it with someone with their own MongoDB database? This situation is where `mongoimport`
    comes in handy. As you may have guessed from the name, this command is essentially
    the reverse of `mongoexport`, and it is designed to take the output of `mongoexport`
    as an input into `mongoimport`.
  prefs: []
  type: TYPE_NORMAL
- en: However, it is not only data exported from MongoDB that you can use with `mongoimport`.
    The command supports JSON, CSV and TSV formats, meaning data extracted from other
    applications or manually created can still be easily added to the database using
    `mongoimport`. By supporting these widespread file formats, the command becomes
    an all-purpose way to load bulk data into MongoDB.
  prefs: []
  type: TYPE_NORMAL
- en: As with `mongoexport`, `mongoimport` operates on a single target collection
    within the specified database. This means that if you wish to import data into
    multiple collections, you must separate the data into individual files.
  prefs: []
  type: TYPE_NORMAL
- en: Following is an example a complex `mongoimport`. We'll go through the syntax
    in detail during the next section.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Using mongoimport
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following is a `mongoimport` command with the fewest possible parameters.
    This is significantly simpler than preceding command.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: This example should also look very similar to some of the snippets we saw in
    the previous section. It is almost identical to our `mongoexport` syntax, except,
    instead of providing a location to create a new file using `--out`, we're entering
    a `--file` parameter which specifies the data we wish to load in. Our database
    and collection parameters are provided with the same syntax as in the `mongoexport`
    examples.
  prefs: []
  type: TYPE_NORMAL
- en: As you may have guessed, another similarity that `mongoimport` shares with `mongoexport`
    is that, by default, it would run against a MongoDB database running on your local
    machine. We use the same `--uri` parameter to specify that we are loading data
    into a remote MongoDB server—in this case, on MongoDB Atlas.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: As with `mongoexport`, the `db` and `uri` parameters are mutually exclusive
    as the database is defined in the `uri` itself.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `mongoimport` command, when using the `--uri` parameter, will look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Before you can execute this command against your MongoDB database and import,
    you require a file containing valid data. Let's create one now. One of the simplest
    ways to create importable data is to run a `mongoexport`. However, to improve
    your knowledge of importing files, we'll create one from scratch.
  prefs: []
  type: TYPE_NORMAL
- en: You would begin by creating a file called `contacts.json`. Open the file in
    a text editor and create some very simple documents. When importing JSON files,
    each line within the file must contain exactly one document.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `contacts.json` file should look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Execute the following import:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'This will result in the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also use a JSON array format for your file, meaning your import file
    contains an array of many different JSON documents. In that case, you must specify
    the `--jsonArray` option in your command. This JSON array structure should be
    very familiar to you by now, as it matches both the `mongoexport` output as well
    as the results you receive from MongoDB queries. For example, if your file contains
    an array as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'You could still import the file using the `mongoimport` command with the `--jsonArray`
    option as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'This will result in the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding example, you will notice that you can provide `_id` values
    for documents in the import. If no `_id` is provided, one will be generated for
    the document. You must ensure that the `_id` you provide is not already used;
    otherwise, the `mongoimport` command will throw an error.
  prefs: []
  type: TYPE_NORMAL
- en: These two imports have shown us simple ways to get data into our MongoDB database,
    but let's have a look at what happens when things go wrong. Let's modify our file
    to specify the `_id` for a few of our documents.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Execute this once, and you should get an output without error.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'You will see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Now, if you rerun the same command, you see an error because that `_id` value
    already exists in your collection.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: You can see the error in your output. Another thing you may notice is that the
    documents without problems are still imported successfully. `mongoimport` will
    not fail on a single document if you're importing a ten-thousand document file.
  prefs: []
  type: TYPE_NORMAL
- en: Say you did want to update this document without changing its `_id`. You couldn't
    use this `mongoimport` command because you would receive a duplicate key error
    every time.
  prefs: []
  type: TYPE_NORMAL
- en: You can log into MongoDB using the mongo shell and manually remove this document
    before importing, but this would be a slow way to do it. With `mongoimport`, we
    can use the --drop option to drop the collection before the import takes place.
    This is a great way to ensure that what exists in your file exists in the collection.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, consider that you have the following documents in our collection
    before our import:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, run the following `mongoimport` command with `--drop`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: You will see that the collection has the following documents once the command
    is executed, view these documents using the find command.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: In the next section, we will look at the options we can use with `mongoimport`.
  prefs: []
  type: TYPE_NORMAL
- en: mongoimport Options
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We now know about the fundamental options you need to use `mongoimport` with
    the `--uri`, `--collection`, and `--file` parameters. But, just as with `mongoexport`
    in our last section, there are several additional options you may wish to use
    when running the command. Many of these options are the same as from `mongoexport`.
    The following list describes some of the options and their effects.
  prefs: []
  type: TYPE_NORMAL
- en: '`--quiet`: This reduces the amount of output messaging from the import.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--drop`: This drops the collection before beginning import.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--jsonArray`: A JSON type only, this specifies if the file is in a JSON array format.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--type`: This can be either JSON, CSV, or TSV to specify what type of file
    will be imported, but the default type is JSON.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--ignoreBlanks` TSV and CSV only, this will ignore empty fields in your import file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--headerline` : TSV and CSV only, this will assume the first line of your
    import file is a list of field names.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--fields`: TSV and CSV only, this will specify a comma-separated list of keys
    in your documents for CSV and TSV formats. This is only needed if you do not have
    a header line.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--stopOnError`: If specified, the import will stop on the first error it encounters.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Here is an example with some more of these options used—specifically, a CSV
    import with a header line. We will also have to ignore blanks so that a document
    is not given a blank `_id` value.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is our `.csv` file, called `contacts.csv`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'We will use the following command to import the CSV:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding command results in the following documents in our collection:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: Of course, these are only some of the more common options you may encounter.
    There is a full list available in the documentation. It is useful to familiarize
    yourself with these in case you need to run a more advanced import to a differently
    configured MongoDB server.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 11.02: Loading Data into MongoDB'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this scenario, you have successfully created an export of the clients' data
    on your local machine. You have set up a new server on a different version and
    would like to make sure the data imports correctly into the new configuration.
    Additionally, you have been given some data files from another, older database
    in CSV format that will be migrated to the new MongoDB server. You want to ensure
    this different format also imports correctly. With that in mind, your goal is
    to import two files (shown as follows) into your Atlas database and test that
    the documents exist in the correct collections.
  prefs: []
  type: TYPE_NORMAL
- en: In this exercise, you will use `mongoimport` to import two files (`old.csv`
    and `new.json`) into two separate collections (`oldData` and `newData`) and use
    drop to ensure no leftover documents exist.
  prefs: []
  type: TYPE_NORMAL
- en: 'This aim can be accomplished by executing the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Fine-tune your import and save it for later. Create a new file called `Exercise11.02.txt`
    to store your export command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create your `old.csv` and `new.json` files that contain the data to be imported.
    Either download the files from GitHub at [https://packt.live/2LsgKS3](https://packt.live/2LsgKS3)
    or copy the following into identical files in your current directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The `old.csv` file should look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'The `new.json` file should look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Enter the standard `mongoimport` syntax into your `Exercise11.02.txt` file,
    with just the URI, collection, and file location. Import your data into the `"imports"`
    database, importing the old data first:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, start adding your extra parameters to satisfy the conditions for your
    CSV file. Specify `type=CSV`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Next, because you have a header row in your old data, use the `headerline` parameter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: When you saw a CSV import in some of the examples earlier in the chapter, the
    `--ignoreBlanks` parameter was used to ensure empty fields were not imported.
    This is a good practice, so add it here too.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, for this exercise, you need to make sure you don''t import on top
    of the existing data, as this may cause conflicts. To ensure your data is imported
    cleanly, use the `--drop` parameter as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: That should be everything you need for your CSV import. Start writing your JSON
    import by copying your existing command on to a new line and then removing the
    CSV specific parameters.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, change the `file` and `collection` parameters by importing your `new.json`
    file into a `newData` collection as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'You can see that the data in your `new.json` file is in a JSON array format,
    so add the matching parameter, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: You should now have the following two commands in your `Exercise11.02.txt` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'Run your `newData` import using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, execute the `oldData` import as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'Check the two new collections in MongoDB by running the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.3: Displaying the new collections'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15507_11_03.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 11.3: Displaying the new collections'
  prefs: []
  type: TYPE_NORMAL
- en: First, we learned how to export our data from our MongoDB server. Now we are
    able to take that external data and enter it back into MongoDB using the import
    command. By combining these two simple commands, we can also shift data between
    instances of MongoDB or create data using external tools before importing them
    into MongoDB.
  prefs: []
  type: TYPE_NORMAL
- en: Backing up an Entire Database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using `mongoexport`, we could theoretically take an entire MongoDB server and
    extract all the data in each database and collection. However, we would have to
    do this with one collection at a time, ensuring that the files correctly mapped
    to the original database and collection. Doing this manually is possible but difficult.
    A script could accomplish this reliably for an entire MongoDB server even with
    hundreds of collections
  prefs: []
  type: TYPE_NORMAL
- en: Fortunately, along with `mongoimport` and `mongoexport`, the MongoDB tools package
    also provides a tool for exporting the entire contents of a database. This utility
    is called `mongodump`. This command creates a backup of the entire MongoDB instance.
    All you need to provide is the URI (or host and port numbers), and the `mongodump`
    command does the rest. This export creates a binary file that can be restored
    using `mongorestore` (a command covered in the next section). By combining `mongodump`
    and `mongorestore`, you have a reliable way of backing up, restoring, and migrating
    your MongoDB databases across different hardware and software configurations.
  prefs: []
  type: TYPE_NORMAL
- en: Using mongodump
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following is a `mongodump` command in its simplest possible form:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: Interestingly enough, you can run `mongodump` without a single parameter. This
    is because the only piece of information the command needs to use is the location
    of your MongoDB server. If no URI or host is specified, it will attempt to create
    a backup of a MongoDB server running on your local system.
  prefs: []
  type: TYPE_NORMAL
- en: We can specify a URI using the `--uri` parameter to specify the location of
    our MongoDB server.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: As with `mongoexport`, the `--db/--host` and `--uri` parameters are mutually
    exclusive.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we did have a local MongoDB server running, however, this is the sort of
    output we may receive:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: At the end of this command, we can see there is a new folder in our directory
    containing the dump of our database. By default, `mongodump` exports everything
    in our MongoDB server. However, we can be more selective with our exports, and
    we see an example of this in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: mongodump Options
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `mongodump` command requires very minimal options to function; in most cases,
    you may only be using the `–-uri` parameter. However, there are several options
    we can use to get the most out of this utility command. Following is a list of
    some of the most useful options.
  prefs: []
  type: TYPE_NORMAL
- en: '`--quiet`: This reduces the amount of output messaging from the dump.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--out`: This allows you to specify a different location for the export to
    be written to disk, by default it will create a directory called "dump" in the
    same directory the command is run.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--db`: This allows you to specify a single database for the command to backup,
    by default it will back up all databases.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--collection`: This allows you to specify a single collection to backup, by
    default it will back up all collections.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--excludeCollection`: This allows you to specify a collection to exclude from
    the backup.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--query`: This allows you to specify a query document which will limit the
    documents being backed up to only those matching the query.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--gzip`: If enabled, the output of the export will be a compressed file in
    `.gz` format instead of a directory.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We'll look at creating a dump of a single database, with users and roles, to
    a specific location on disk. Because we are doing a single database dump, we can
    use `--uri` with the database we want to use.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see in the preceding screenshot, only the collections existing in
    our specified database were exported. You can even see this if you have a look
    at the folder containing our exports:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: You can see in the imports directory that two files are created for each collection
    in the dump, a `.bson` file containing our data and a `.metadata.json` file for
    the collection metadata. All `mongodump` results will match this format.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, use your `--query` parameter to dump only specific documents in a collection.
    You can specify your collection using a standard query document. For example,
    consider the following command on Windows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'On MacOS/Linux, you will have to modify the quotation marks to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: The movies collection has over 20,000 documents in it, but we have exported
    only the `2539` matching documents.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, execute this same export without the `--query` parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: We can see in the preceding output that the number of documents dumped is significantly
    higher without the `--query` parameter, meaning we have reduced the number of
    documents exported from our collection to only those matching the query.
  prefs: []
  type: TYPE_NORMAL
- en: As with the commands we learned earlier, these options only represent a small
    subset of the parameters you can provide to `mongodump`. By combining and experimenting
    with these options, you will be able to create a robust backup and snapshot solution
    for your MongoDB server.
  prefs: []
  type: TYPE_NORMAL
- en: By using `mongoimport` and `mongoexport`, you have been able to get specific
    collections in and out of a database easily. However, as part of the backup strategy
    for your MongoDB server, you may want to back up the entire state of your MongoDB
    database. In the next exercise, we will create a dump of only the `sample_mflix`
    database, rather than creating a larger dump of the many different databases we
    may have within our MongoDB server.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 11.03: Backing up MongoDB'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this exercise, you will use `mongodump` to create a backup of the `sample_mflix`
    database. Export the data to a `.gz` file in a folder called `movies_backup`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Perform the following steps to complete this exercise:'
  prefs: []
  type: TYPE_NORMAL
- en: To fine-tune your import and save it for later, create a new file called `Exercise11.03.txt`
    to store your `mongodump` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, type the standard `mongodump` syntax with just the `--uri` parameter set.
    Remember, the `--uri` includes the target database within it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, add the parameter which specifies the location your dump should be saved
    to. In this case, that is a folder called `movies_backup`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: Finally, to automatically place your dump file in a `.gz` file, use the `--gzip`
    parameter and run the command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Because this command will dump the entire `sample_mflix` database, it may take
    a little bit of time depending on your internet connection.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the command executes, you should see output similar to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.4: Output after the mongodump command is executed'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15507_11_04.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 11.4: Output after the mongodump command is executed'
  prefs: []
  type: TYPE_NORMAL
- en: Check your dump directory. You can see all the `mongodump` data has been written
    into the correct directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: Over the course of this exercise, you have learned how to write a `mongodump`
    command that will correctly create a compressed backup of your database. You will
    now be able to integrate this technique as part of a database migration or backup strategy.
  prefs: []
  type: TYPE_NORMAL
- en: Restoring a MongoDB Database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous section, we learned how to create a backup of an entire MongoDB
    database using `mongodump`. However, these exports would not be beneficial in
    our backup strategy unless we possess a method for loading them back into a MongoDB
    server. The command that complements `mongodump` by putting our export back into
    the Database is `mongorestore`.
  prefs: []
  type: TYPE_NORMAL
- en: Unlike `mongoimport` which allows us to import commonly used formats into MongoDB,
    `mongorestore` is only used to importing `mongodump` results. This means it is
    most commonly used for restoring most or all of a database to a specific state.
    The `mongorestore` command is ideal for restoring a dump after a disaster or for
    migrating an entire MongoDB instance to a new configuration.
  prefs: []
  type: TYPE_NORMAL
- en: When put in combination with our other commands, it should be clear that `mongorestore`
    completes the import and export lifecycle. With the three commands (`mongoimport`,
    `mongoexport`, and `mongodump`), we have learned we can export collection-level
    data, import collection-level data, export at the server level, and now finally,
    with `mongorestore`, we can import server-level information.
  prefs: []
  type: TYPE_NORMAL
- en: Using mongorestore
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As with the other commands, let's have a look at a simple implementation of
    the `mongorestore` command.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: 'Or on MacOS/Linux, you can enter the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: The only required parameter we need to pass in is the location of the dump we
    are restoring. However, as you may have guessed from our other commands, by default
    `mongorestore` attempts to restore the backup to the local system.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The dump location does not require a `--parameter` format and, instead, can
    be passed in as the last value of the command.
  prefs: []
  type: TYPE_NORMAL
- en: Here again, we can specify a URI using the `--uri` parameter to specify the
    location of our MongoDB server.
  prefs: []
  type: TYPE_NORMAL
- en: 'As an example, let''s say that we did have a local MongoDB server running.
    To complete a restore we would need a previously created dump . Here is the dump
    command based off *Exercise 11.03, Backing up MongoDB*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: 'If we now run `mongorestore` against this dump using the `--drop` option, you
    might see an output similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.5: Output after mongorestore is run using the –drop option'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15507_11_05.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 11.5: Output after mongorestore is run using the –drop option'
  prefs: []
  type: TYPE_NORMAL
- en: As you would expect, this output should be most similar to the output from `mongoimport`,
    telling us exactly how many documents and indexes were restored from the dump
    file. If your use case is to restore as part of a backup strategy, this simple
    command with minimal parameters is all you need.
  prefs: []
  type: TYPE_NORMAL
- en: By default, `mongorestore` restores every database, collection and document
    in the targeted dump. If you wish to be more specific with your restore, there
    are several handy options which allow you to restore only specific collections
    or even rename collections during the restore. Examples of these options are provided
    in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: The mongorestore Options
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Like `mongodump`, the `mongorestore` command can satisfy most use cases with
    just its fundamental parameters such as `--uri` and the location of the dump file.
    If you wish to accomplish a more specific type of restore, you can use some of
    the following options:'
  prefs: []
  type: TYPE_NORMAL
- en: '`--quiet`: This reduces the amount of output messaging from the dump.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--drop`: Similar to `mongoimport`, the `--drop` option will drop the collections
    to be restored before restoring them, allowing you to ensure no old data remains
    after the command has run.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--dryRun`: This allows you to see the output of running a `mongorestore` without
    actually changing the information in the database, this is an excellent way to
    test your command before executing potentially dangerous operations.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--stopOnError`: If enabled, the process stops as soon as a single error occurs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--nsInclude`: Instead of providing a database and collection specifically,
    this option allows you to define which namespaces (databases and collections)
    should be imported from the dump file. We will see an example of this later in
    the chapter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--nsExclude`: This is the complimentary option for `nsInclude`, allowing you
    to provide a namespace pattern that is not imported when running the restore.
    There is an example of this in the next section.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--nsFrom`: Using the same namespace pattern as in `nsInclude` and `nsExclude`,
    this parameter can be used with `--nsTo` to provide a mapping of namespaces in
    the export to new namespaces in the restored backup. This allows you to change
    the names of collections during your restore.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now, let us look at some examples of these options being used. Note that for
    these examples, we are using the dump file created in the previous section. As
    a reminder, this is the command required to create this dump file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: Firstly, assume you have a full `mongodump` created from the `sample_mflix`
    database. The following is an example of the command required to restore just
    a subset of our collections. You may notice the parameter is in the format of
    `{database}.{collection}`, but you can use the wild-star (`*`) operator to match
    all values. In the following example, we are including any collections that match
    the namespace `"sample_mflix.movies"` (only the movies collection of the `sample_mflix`
    database).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: 'Once this command finishes running, you should see an output similar to the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: 'In the output, you can see that only the matching namespaces are restored.
    Now let''s examine how the `nsFrom` and `nsTo` parameters can be used to rename
    collections, using the same format as in the preceding example. We will rename
    collections in the `sample_mflix` database to the same collection name but in
    a new database called backup:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: 'Once execution of this command is complete, the final few lines should look
    similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, if we observe the collections in our MongoDB database, we will see that
    the `sample_mflix` collections exist in a database called `backup` as well, for
    example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, let''s have a quick look at how the `dryRun` parameter works. Take
    a look at the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: You will notice an output about the command preparing the restore. However,
    it will not load any data. None of the underlying data in MongoDB has changed.
    This serves as an excellent way to make sure your command will run without error
    before executing it.
  prefs: []
  type: TYPE_NORMAL
- en: The `mongorestore` command completes our four commands, that is, `mongoimport`,
    `mongoexport`, `mongodump`, and `mongorestore`. Although it is straightforward
    to use `mongorestore`, if your backup strategy has a more complicated setup, you
    may need to use multiple options and to refer the documentation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 11.04: Restoring MongoDB Data'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the previous exercise, you used `mongodump` to create a backup of the `sample_mflix`
    database. As part of the backup strategy for your MongoDB server, you now need
    to place this data back into the database. In this exercise, pretend that the
    database you exported from and imported to are different databases. So, to prove
    to the client that the backup strategy works, you will use `mongorestore` to import
    that dump back into a different namespace.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: You need to create a dump from *Exercise 11.03*, *Backing up MongoDB*, before
    completing this exercise.
  prefs: []
  type: TYPE_NORMAL
- en: In this exercise, you will use `mongorestore` to restore the `sample_mflix`
    database from the `movies_backup` dump created in the previous exercise, changing
    the namespace of each collection to `backup_mflix`.
  prefs: []
  type: TYPE_NORMAL
- en: Fine-tune your import and save it for later. Create a new file called `Exercise11.04.txt`
    to store your restore command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Make sure the `movies_backup` dump from *Exercise 11.03*, *Backing up MongoDB*,
    is in your current directory as well. Otherwise, you can create a new backup using
    the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, type the standard `mongorestore` syntax with just the URI and location
    of the dump file being provided. Remember, the URI includes the target database
    within it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: Since the dump file is in `gzip` format, you also need to add the `--gzip` parameter
    to your restore command so that it can decompress the data.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: 'To ensure the restore ends up with a clean result, use your `--drop` parameter
    to drop the relevant collections before you try and restore them:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, add the parameters that modify your namespace. Because you are restoring
    a dump of the `sample_mflix` database, `"sample_mflix"` will be the value of your
    `nsFrom` parameter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: This use case dictates that these collections will be restored in a database
    named `backup_mflix`. Provide this new namespace with the `nsTo` parameter as follows.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: 'Your command is now complete. Copy and paste this code into your Terminal or
    Command Prompt and run it. There will be a lot of output to show you the progress
    of the restore, but at the end, you should see an output like the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: From reading the output, you can see that the restoration completed, restoring
    each existing collection into a new database titled `backup_mflix`. The output
    will even tell you exactly how many documents were written as part of the restore.
    For example, `23541` documents were restored into the `movies` collection.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now if you log into your server with the mongo shell, you should be able to
    see your newly restored `backup_mflix` database and relevant collections as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: And that's it. You have successfully restored your backup into the MongoDB server.
    With your working knowledge of `mongorestore`, you will now be able to backup,
    and migrate entire MongoDB databases or servers efficiently. As noted earlier
    in this chapter, you might have been able to manage this same task with `mongoimport`,
    but being able to use `mongodump` and `mongorestore` will make your task significantly
    simpler.
  prefs: []
  type: TYPE_NORMAL
- en: With the four key commands you've learned about in this chapter (`mongoexport`,
    `mongoimport`, `mongodump` and `monogrestore`), you should now be able to accomplish
    the majority of backup, migration and restoration tasks that you will encounter
    when working with MongoDB.
  prefs: []
  type: TYPE_NORMAL
- en: 'Activity 11.01: Backup and Restore in MongoDB'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Your client (the cinema company) already has several scripts that run nightly
    to export, import, backup, and restore data. They run both backups and exports
    to ensure there are redundant copies of the data. However, due to their lack of
    experience with MongoDB, these commands are not functioning correctly. To resolve
    this, they have asked you to assist them with fine-tuning their backup strategy.
    Follow these steps to complete this activity:'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The four commands in this activity must be run in the correct order, as the
    `import` and `restore` commands depend on the output from the `export` and `dump`
    commands.
  prefs: []
  type: TYPE_NORMAL
- en: '`theaterId` fields, sorted by `theaterId`, into a CSV file called `theaters.csv`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: '`theaters.csv` file into a new collection called `theaters_import`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: '`theaters` collection into a folder called `backups` in `gzip` format:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: '`sample_mflix_backup`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: Your goal is to take the provided scripts from the client, determine what is
    wrong with these scripts, and fix these problems. You can test that these scripts
    are running correctly on your own MongoDB server.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can complete this objective in several ways, but remember what we have
    learned throughout the chapter and attempt to create simple, easy to use code.
    The following steps will help you to complete this task:'
  prefs: []
  type: TYPE_NORMAL
- en: The target database is specified twice, try removing the redundant parameter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Rerun the `export` command. We are missing an option specific to the CSV format.
    Add this parameter to ensure we export the `theaterId` and location fields.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now looking at the `import` command, you should immediately notice there are
    some missing parameters required for CSV imports.
  prefs: []
  type: TYPE_NORMAL
- en: Firstly for the `dump` command, one of the options is not correct; run the command
    for the hint.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Secondly, the `nsInclude` option is not available for the dump command, as this
    is a `mongorestore` option. Replace it with the appropriate option for `mongodump`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the `restore` command, there are some options with incorrect names. Fix these
    names.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Also in the `restore` command, restore a `gzip` format dump from the preceding
    command. Add an option to your restore command to support this format.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, in the `restore` command, look at values of the `nsFrom` and `nsTo`
    options and check whether they are in the correct namespace format.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To test your results, run the four resulting commands in order (export, import,
    dump, restore.)
  prefs: []
  type: TYPE_NORMAL
- en: 'The output from the `mongoexport` command would look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: 'The output from the `mongoimport` command will look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: 'The output from the `mongodump` command will look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.6 Output from the mongodump command'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15507_11_06.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.6 Output from the mongodump command
  prefs: []
  type: TYPE_NORMAL
- en: 'The start of the output from the `mongorestore` command will look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.7: Start of the output from the mongorestore command'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15507_11_07.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 11.7: Start of the output from the mongorestore command'
  prefs: []
  type: TYPE_NORMAL
- en: 'The end of the output from the `mongorestore` command will look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.8: End of the output from the mongorestore command'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15507_11_08.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 11.8: End of the output from the mongorestore command'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The solution for this activity can be found via [this link](B15507_Solution_Final_SZ_ePub.xhtml#_idTextAnchor481).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have covered four separate commands. However, these four
    commands all serve as elements in a complete backup and restore lifecycle for
    MongoDB. By using these fundamental commands in combination with their advanced
    options, you should now be able to ensure that any MongoDB server you are responsible
    for can be appropriately snapshotted, backed up, exported, and restored in case
    of data corruption, loss, or disaster.
  prefs: []
  type: TYPE_NORMAL
- en: You may not be responsible for backing up your MongoDB data, but these commands
    can also be used for a vast array of utilities. For example, being able to export
    the data into a CSV format will be very handy when trying to explore the information
    as a spreadsheet visually or even to present it to colleagues who are unfamiliar
    with the document model. By using `mongoimport`, you can also reduce the amount
    of manual work required to import data that is not provided in MongoDB format
    as well as import MongoDB data from other servers in bulk.
  prefs: []
  type: TYPE_NORMAL
- en: The next chapter covers data visualization, an incredibly important concept
    for transforming MongoDB information into easily understood results that can provide
    insight and clarity for business problems as well as integrating them into presentations
    to persuade or convince stakeholders of hard to explain trends in the data.
  prefs: []
  type: TYPE_NORMAL
