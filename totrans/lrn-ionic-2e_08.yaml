- en: Ionic 2 Migration Guide
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we are going to take a look at migrating an existing Ionic
    1 app to Ionic 2/Ionic 3\. We are first going to build a simple Todo app using
    Ionic 1 and then understand how we would go about migrating the same to Ionic
    2:'
  prefs: []
  type: TYPE_NORMAL
- en: Why migration?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building a simple Ionic 1 Todo app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Migration game plan
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Migrating the Ionic 1 Todo app to Ionic 2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This migration guide will still be valid if you would like to migrate from Ionic
    1 to Ionic 3 as well. Refer to [Chapter 11](part0170.html#523VK0-9757c8e51afd47e0a7a9ced32db749b8),
    *Ionic 3* to better understand the changes in Ionic 3.
  prefs: []
  type: TYPE_NORMAL
- en: Why migration?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, in this book, we have gone through the process of building apps with
    Ionic 2, without the knowledge of Ionic 1\. But as far as the real world goes,
    there are a few thousand apps already deployed with Ionic 1\. Those apps can take
    advantage of the improved features of Ionic 2 to make the app experience better.
  prefs: []
  type: TYPE_NORMAL
- en: Migrating code in the world of software is a daunting task. In our case, the
    migration is even more complex because we are not just upgrading the libraries
    of Ionic 1 to Ionic 2 but upgrading the language itself on which these are written
    for example, ES5 to ES6 and TypeScript.
  prefs: []
  type: TYPE_NORMAL
- en: The new ecosystem for JavaScript apps primarily revolves around ES6, TypeScript,
    and Web Components. Adapting to these to take advantage of the latest technologies
    is what Angular 2 has done. Ionic 2 has also done this.
  prefs: []
  type: TYPE_NORMAL
- en: IMHO, with so many changes, migrating a fully functioning app from Ionic 1 to
    Ionic 2 should be taken with a pinch of salt and needs to be done only if necessary.
  prefs: []
  type: TYPE_NORMAL
- en: '*If things work, why change?*'
  prefs: []
  type: TYPE_NORMAL
- en: When it comes to changing an app base from Ionic 1 to Ionic 2, some call it
    migration, but I call it rewriting.
  prefs: []
  type: TYPE_NORMAL
- en: Todo app - Ionic v1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we are going to build a Todo app using Ionic 1\. The app we
    are going to build is going to have a piece of almost all the features of a typical
    Ionic app. We are going to have:'
  prefs: []
  type: TYPE_NORMAL
- en: Routing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Persistence
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Local notifications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: REST API integration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The first page in the two-page Todo app will be a login page and on the second
    page, we work with Todos. We are going to use `LocalStorage` to save the authentication
    status as well as the Todos that we are going to create. We are also going to
    show local notifications when a user creates, updates, or deletes a todo. Showing
    local notifications is more along the lines of interfacing an Ionic app with device
    features. And finally a REST API request to [https://www.ipify.org/](https://www.ipify.org/)
    to fetch the IP address of the device we are accessing this app from.
  prefs: []
  type: TYPE_NORMAL
- en: 'The final app is going to look like the following image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00109.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Building the app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we have an idea as to what we are going to build, let us get started.
    Create a folder named `chapter8` and open a new command prompt/terminal inside
    the `chapter8` folder and run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: We are scaffolding a blank project using Ionic v1\. Do notice that we are not
    using the `--v2` flag. Once the project is scaffolded, open it in your favorite
    text editor.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we start working on the two pages, we are going to create the required
    services. We are going to create five services:'
  prefs: []
  type: TYPE_NORMAL
- en: 'LocalStorage Service: To interact with LocalStorage'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'LocalNotification Service: To interact with `$cordovaLocalNotification`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'IP Service: To interact with [https://api.ipify.org](https://api.ipify.org)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Auth Service: To manage authentication'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Todos Service: To manage Todos'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For that, we will create another file named `services.js` inside the `www/js`
    folder. Open `todoapp_v1/www/js/services.js` and add the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The `LS` service exposes a wrapper to the HTML5 `localStorage`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, add a wrapper for the local notification service in the same file, after
    the `LS` service:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: We will add the required dependencies from `ngCordova` at the end of writing
    the code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we will add the `IP` service to interact with [https://api.ipify.org](https://api.ipify.org)
    and get the IP address of the user. Append the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'And finally, the two key services to manage authentication and todos. Add the
    following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: With this, we are done with the required services.
  prefs: []
  type: TYPE_NORMAL
- en: 'Since this is going to be a two-page app, we will be working with the State
    router to define and manage routes. Open `todoapp_v1/www/js/app.js` and add the
    following `config` section under the `run` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding snippet we have defined two routes - Login and Home. Now we
    need to create the required templates and controllers.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new file named `controllers.js` inside `www/js` folder. Open `todoapp_v1/www/js/controllers.js`
    and the `LoginCtrl` as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Here we are checking if the user is already authenticated, if yes, we redirect
    the user to the home page. The `login()` takes the user's credentials and validates
    them with `AUTH.login().` If the authentication fails, we show an alert using
    `$ionicPopup` service.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we will add the `HomeCtrl` as shown in the following code::'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'We start off by checking authentication. Next, we fetch all the todos. We have
    defined four methods on `HomeCtrl` scope: `add(),``update(),``delete(),` and `logout().`'
  prefs: []
  type: TYPE_NORMAL
- en: Add method is used to add a new todo. We show a popup using `$ionicPopup` service,
    where the user enters the Todo text. Once the todo is added, we push a local notification
    using the `LN` service.
  prefs: []
  type: TYPE_NORMAL
- en: Update method updates the todo's `isCompleted` property in the local storage
    and pushes a local notification indicating the same.
  prefs: []
  type: TYPE_NORMAL
- en: Delete method shows a confirm box asking the user to confirm the deletion activity.
    If the user confirms the deletion, we remove the todo from the collection and
    persist the collection back to the local storage. To complete the deletion process,
    we push a local notification indicating that the todo is deleted.
  prefs: []
  type: TYPE_NORMAL
- en: And finally the logout method clears the authentication status and redirects
    the user back to the login page.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we are done with the controllers, we will work on the required templates.
    Create a new folder named `templates` inside the `www` folder. Inside the templates
    folder, create a file named `login.html`. Open `todoapp_v1/www/templates/login.html`
    and update it as shown in the following code::'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'We have a simple login form. In the footer, we will be displaying the IP address
    of the user. To get the IP address of the user, we are going to update the `run`
    method in `todoapp_v1/www/js/app.js` as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: We are storing the IP address on the root scope.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, create a new file named `home.html` inside the `www/templates` folder.
    Update `todoapp_v1/www/templates/home.html` as shown shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'When a user marks a `todo` as completed, for visual effect, we are adding a
    class named `strike`. Open `todoapp_v1/www/css/style.css` and update it as shown in
    the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: With this, we are done with implementing the required code. Now, we are going
    to add the required dependencies and update `www/index.html`.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we are going to add `ngCordova` ([http://ngcordova.com/](http://ngcordova.com/))
    support to our project. Run the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, the local notification plugin: ([http://ngcordova.com/docs/plugins/localNotification/](http://ngcordova.com/docs/plugins/localNotification/))
    cordova plugin add: [https://github.com/katzer/cordova-plugin-local-notifications.git](https://github.com/katzer/cordova-plugin-local-notifications.git).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we will update `www/index.html` to add the `ngCordova` dependency. Add
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Next, add references to `services.js` and `controllers.js:`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'After `app.js` has been included. Next, will update the body section as shown
    in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: We have added `<ion-nav-view></ion-nav-view>` to support routing.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, open `todoapp_v1/www/js/app.js` and update the starter module definition
    to: `angular.module(''starter'', [''ionic'', ''ngCordova''])`'
  prefs: []
  type: TYPE_NORMAL
- en: 'That is it! Now all we need to do is add a platform and start testing the Todo
    app built with Ionic v1:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'And then run the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'And we should see the Login page come up:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00110.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once successfully logged in, we should be able to add a new todo:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00111.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'We can update the todo or delete the todo:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00112.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'When a todo is added, updated, or deleted, we push a local notification:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00113.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: With this, we complete building an Ionic 1 Todo app.
  prefs: []
  type: TYPE_NORMAL
- en: Migration plan
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we are done with our Ionic v1 Todo app, we will be looking at migrating
    the same to Ionic 2.
  prefs: []
  type: TYPE_NORMAL
- en: 'Note: If you were planning to migrate from Ionic 1 to Ionic 3, you would be
    following a similar approach.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The plan is simple; we are going to scaffold a new blank template using the
    `--v2` flag and start putting stuff together. The following table would be a good
    starting point:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Component** | **Ionic 1** | **Ionic 2** |'
  prefs: []
  type: TYPE_TB
- en: '| Ionic starter template | Blank | Blank |'
  prefs: []
  type: TYPE_TB
- en: '| Bootstrap application | ng-app | `NgModule` |'
  prefs: []
  type: TYPE_TB
- en: '| Navigation | State router | `NavController` |'
  prefs: []
  type: TYPE_TB
- en: '| Components | Templates and controllers | `@Component` |'
  prefs: []
  type: TYPE_TB
- en: '| Services/factory | Service provider | `@Injectable Provider` |'
  prefs: []
  type: TYPE_TB
- en: '| Persistence | Local storage | Storage API |'
  prefs: []
  type: TYPE_TB
- en: '| Device interaction | `NgCordova` | Ionic Native |'
  prefs: []
  type: TYPE_TB
- en: '| Local notifications | `$cordovaLocalNotification` service | LocalNotifications
    class |'
  prefs: []
  type: TYPE_TB
- en: Now that we are aware of the high level mapping, we will start by scaffolding
    a new blank template in v2.
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside the `chapter8` folder, open a new command prompt/terminal and run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the scaffolding is completed, `cd` into the `todoapp_v2` folder. We will
    be generating the required components and providers. Run the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'This will generate the login page. Next, the three providers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Since we are using the Storage API from Ionic 2, we are not going to create
    a separate provider for that.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have the required pages and providers, we will bootstrap the app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `todoapp_v2/src/app/app.module.ts` and the required imports:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we will update the `@NgModule` as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: As we did with the Ionic 1 app, we will install the required dependencies at
    the end.
  prefs: []
  type: TYPE_NORMAL
- en: Open `todoapp_v2/src/app/app.component.ts` and update the `rootPage` to `LoginPage`.
    We would update the `import { HomePage }` from `'../pages/home/home';` to `import
    { LoginPage }` from `'../pages/login/login';` and `rootPage = HomePage;` to `rootPage
    = LoginPage;`
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we will update the providers. Open `todoapp_v2/src/providers/ip.ts` and
    update it as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, open `todoapp_v2/src/providers/auth.ts`. Update it as shown as following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'And finally, open `todoapp_v2/src/providers/auth.ts` and update it as following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: The preceding three providers are quite simple. They replicate the same logic
    as shown in Ionic 1, except these are written in TypeScript, following Angular
    2 structure.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we are going to work on the pages. First is the login page. Open `todoapp_v2/src/pages/login/login.ts`
    and update it as in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'The logic in this file is quite similar to the one from `LoginCtrl` in Ionic
    1 app. Next we will update `todoapp_v2/src/pages/login/login.html` as shown in
    the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: The page structure is exactly the same as Ionic 1 except for the way in which
    we interact with the components; `[(ngModel)]` syntax for two-way data binding
    `(ng-model)` and `(click)` syntax for event handling on the button `(ng-click).`
  prefs: []
  type: TYPE_NORMAL
- en: Do notice the class positive on `ion-header`. We will use this to give almost
    the same look and feel for the page as we did for the Ionic 1 app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we are going to work on `todoapp_v2/src/pages/home/home.ts`. Update `todoapp_v2/src/pages/home/home.ts`
    as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: The same logic of `HomeCtrl` is replicated here. The only key difference is
    that `notify()` is used as a wrapper to present Local Notifications, unlike in
    Ionic 1 app, where we had a service for the same.
  prefs: []
  type: TYPE_NORMAL
- en: 'The updated `todoapp_v2/src/pages/home/home.html` would be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, the styles. Open `todoapp_v2/src/app/app.scss` and add the following CSS
    rules:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'This wraps our coding part. Now, we will install the required dependencies.
    First storage-related dependencies, run the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, local notification dependencies:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: This should take care of the required dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we will add a platform and test the app:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'And then run the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'And you should see the Login page come up:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00114.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The home page that manages Todos:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00115.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Finally, the notifications that get pushed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00116.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: With this, we have completed the migration of our Ionic 1 Todo App to Ionic
    2\. Hopefully, this example has given some idea on how to approach the migration
    of Ionic 1 apps to Ionic 2 as well as Ionic 3.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have gone through the process of building a simple Ionic
    1 Todo App. Next, we prepared a rough migration plan and followed the same to
    migrate the Ionic 1 Todo app to Ionic 2\. We have seen some key differences between
    the Ionic 1 and Ionic 2 app, when it comes to migration and taking advantage of
    the latest features such as Ionic Native and Storage API.
  prefs: []
  type: TYPE_NORMAL
- en: Do check out [Chapter 11](part0170.html#523VK0-9757c8e51afd47e0a7a9ced32db749b8),
    *Ionic 3* to see the difference between Ionic 2 and Ionic 3.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will be testing the Ionic 2 Todo App that we have migrated.
  prefs: []
  type: TYPE_NORMAL
