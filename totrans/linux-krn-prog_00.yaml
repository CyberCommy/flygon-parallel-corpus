- en: Preface
  prefs: []
  type: TYPE_NORMAL
- en: This book has been explicitly written with a view to helping you learn Linux
    kernel development in a practical, hands-on fashion, along with the necessary
    theoretical background to give you a well-rounded view of this vast and interesting
    topic area. It deliberately focuses on kernel development via the powerful **Loadable
    Kernel Module** (**LKM**) framework; the vast majority of kernel projects and
    products, which includes device driver development, are done in this manner.
  prefs: []
  type: TYPE_NORMAL
- en: The focus is kept on both working hands-on with, and understanding at a sufficiently
    deep level, the internals of the Linux OS. In these regards, we cover everything
    from building the Linux kernel from source through understanding and working with
    complex topics such as synchronization within the kernel.
  prefs: []
  type: TYPE_NORMAL
- en: To guide you on this exciting journey, we divide this book into three sections.
    The first section covers the basics – setting up a workspace required for kernel
    development, building the kernel from source, and writing your first kernel module.
  prefs: []
  type: TYPE_NORMAL
- en: The next section, a key one, will help you understand important and essential
    kernel internals – the Linux kernel architecture, the task structure, and user
    and kernel-mode stacks. Memory management is a key and interesting topic – we
    devote three whole chapters to it (covering the internals to a sufficient extent,
    and importantly, how exactly to allocate any free kernel memory). The working
    and deeper details of CPU scheduling on Linux round off this section.
  prefs: []
  type: TYPE_NORMAL
- en: The last section of the book deals with the more advanced topic of kernel synchronization
    – a necessity for professional design and code on the Linux kernel. We devote
    two whole chapters to covering key topics within this.
  prefs: []
  type: TYPE_NORMAL
- en: The book uses the, at the time of writing, latest 5.4 **Long Term Support**
    (**LTS**) Linux kernel. It's a kernel that will be maintained (both bug and security
    fixes) from November 2019 right through December 2025! This is a key point, ensuring
    that this book's content remains current and valid for years to come!
  prefs: []
  type: TYPE_NORMAL
- en: 'We very much believe in a hands-on approach: over 20 kernel modules (besides
    several user apps and shell scripts) on this book''s GitHub repository make the
    learning come alive, making it fun, interesting, and useful.'
  prefs: []
  type: TYPE_NORMAL
- en: We highly recommend you also make use of this book's companion guide, *Linux
    Kernel Programming (Part 2)*.
  prefs: []
  type: TYPE_NORMAL
- en: It's an excellent industry-aligned beginner's guide to writing `misc` character
    drivers, performing I/O on peripheral chip memory and handling hardware interrupts.
    You can get this book for free along with your copy, alternately you can also
    find this eBook in the GitHub repository at: [https://github.com/PacktPublishing/Linux-Kernel-Programming/tree/master/Linux-Kernel-Programming-(Part-2)](https://github.com/PacktPublishing/Linux-Kernel-Programming/tree/master/Linux-Kernel-Programming-(Part-2)).
  prefs: []
  type: TYPE_NORMAL
- en: We really hope you learn from and enjoy this book. Happy reading!
  prefs: []
  type: TYPE_NORMAL
- en: Who this book is for
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book is primarily for those of you beginning your journey in the vast arena
    of Linux kernel module development and, to some extent, Linux device driver development.
    It's also very much targeted at those of you who have already been working on
    Linux modules and/or drivers, who wish to gain a much deeper, well-structured
    understanding of Linux kernel architecture, memory management, and synchronization.
    This level of knowledge about the underlying OS, covered in a properly structured
    manner, will help you no end when you face difficult-to-debug real-world situations.
  prefs: []
  type: TYPE_NORMAL
- en: What this book covers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Chapter 1](ad75db43-a1a2-4f3f-92c7-a544f47baa23.xhtml), *Kernel Workspace
    Setup*, guides you on setting up a full-fledged Linux kernel development workspace
    (typically, as a fully virtualized guest system). You will learn how to install
    all required software packages on it, including a cross toolchain. You will also
    learn about several other open source projects that will be useful on your journey
    to becoming a professional kernel/driver developer. Once this chapter is done,
    you will be ready to build a Linux kernel as well as to start writing and testing
    kernel code (via the loadable kernel module framework). In our view, it''s very
    important for you to actually use this book in a hands-on fashion, trying out
    and experimenting with code. The best way to learn something is to do so empirically
    – not taking anyone''s word on anything at all, but by trying it out and experiencing
    it for yourself.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 2](e0b89a37-18a3-424d-8983-58c4ac0725f6.xhtml), *Building the 5.x
    Linux Kernel from Source – Part 1*, is the first part of explaining how to build
    the modern Linux kernel from scratch with source code. In this part, you will
    be given necessary background information – the version nomenclature, the different
    source trees, the layout of the kernel source – on the kernel source tree. Next,
    you will be shown in detail how exactly to download a stable vanilla Linux kernel
    source tree onto the VM. We shall then learn a little regarding the layout of
    the kernel source code, getting, in effect, a "10,000-foot view" of the kernel
    code base. The actual work of extracting and configuring the Linux kernel then
    follows. Creating and using a custom menu entry for kernel configuration is also
    shown.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 3](93e5c09d-6c80-47e7-91ab-d3f3f25d00e1.xhtml), *Building the 5.x
    Linux Kernel from Source – Part 2*, is the second part on performing kernel builds
    from source code. In this part, you will continue from the previous chapter, now
    actually building the kernel, installing kernel modules, understanding what exactly
    `initramfs` (`initrd`) is and how to generate it, as well as setting up the bootloader
    (for x86). Also, as a valuable add-on, this chapter then explains how to cross-compile
    the kernel for a typical embedded ARM target (using the popular Raspberry Pi as
    a target device). Several tips and tricks on kernel builds, and even kernel security
    (hardening), are mentioned as well.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 4](1c494ebd-e7ec-4a78-8695-5b97bdc3d6be.xhtml),* Writing Your First
    Kernel Module – LKMs Part 1*, is the first of two parts that cover a fundamental
    aspect of Linux kernel development – the LKM framework, and how it is to be understood
    and used by the "module user," by you – the kernel module or device driver programmer.
    It covers the basics of the Linux kernel architecture and then, in great detail,
    every step involved in writing a simple "Hello, world" kernel module, compiling,
    inserting, checking, and removing it from the kernel space. We also cover kernel
    logging via the ubiquitous printk API in detail.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 5](408b6f9d-42dc-4c59-ab3d-1074d595f9e2.xhtml), *Writing Your First
    Kernel Module – LKMs Part 2*, is the second part that covers the LKM framework.
    Here, we begin with something critical – learning how to use a "better" Makefile,
    which will help you generate more robust code (having several code-checking, correction,
    static analysis targets, and so on). We then show in detail the steps to successfully
    cross-compile a kernel module for an alternate architecture, how to emulate "library-like"
    code in the kernel (via both the "linking" and the module-stacking approaches),
    defining and using passing parameters to your kernel module. Additional topics
    include the auto-loading of modules at boot, important security guidelines, and
    some information on the kernel documentation and how to access it. Several example
    kernel modules make the learning more interesting.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 6](e13fb379-a77f-4ba5-9de6-d6707b0214e6.xhtml), *Kernel Internals
    Essentials – Processes and Threads, *delves into some essential kernel internals
    topics. We begin with what is meant by execution in process and interrupt contexts,
    and minimal but required coverage of the process user **virtual address space**
    (**VAS**) layout. This sets the stage for you; you''ll then learn about Linux
    kernel architecture in more depth, focusing on the organization of process/thread
    task structures and their corresponding stacks – user- and kernel-mode. We then
    show you more on the kernel task structure (a "root" data structure), how to practically
    glean information from it, and even iterate over various (task) lists. Several
    kernel modules make the topic come alive.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 7](06ee05b5-3e71-482d-93b8-235c27ce23bc.xhtml), *Memory Management
    Internals – Essentials, *a key chapter, delves into essential internals of the
    Linux memory management subsystem, to the level of detail required for the typical
    module author or driver developer. This coverage is thus necessarily more theoretical
    in nature; nevertheless, the knowledge gained here is crucial to you, the kernel
    developer, both for deep understanding and usage of appropriate kernel memory
    APIs as well as for performing meaningful debugging at the level of the kernel.
    We cover the VM split (and how it is on various actual architectures), gaining
    deep insight into the user VAS (our procmap utility will be an eye-opener), as
    well as the kernel segment (or kernel VAS). We then briefly delve into the security
    technique of memory layout randomization ([K]ASLR), and end this chapter with
    a discussion on physical memory organization within Linux.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 8](e78245d1-5a99-4b9e-a98c-cb16b15f3bee.xhtml), *Kernel Memory Allocation
    for Module Authors Part 1, *gets our hands dirty with the kernel memory allocation
    (and obviously, deallocation) APIs. You will first learn about the two allocation
    "layers" within Linux – the slab allocator that''s layered above the kernel memory
    allocation "engine," and the page allocator (or BSA). We shall briefly learn about
    the underpinnings of the page allocator algorithm and its "freelist" data structure;
    this information is valuable when deciding which layer to use. Next, we dive straight
    into the hands-on work of learning about the usage of these key APIs. The ideas
    behind the slab allocator (or cache) and the primary kernel allocator APIs – the
    `kzalloc`/`kfree` – are covered. Importantly, the size limitations, downsides,
    and caveats when using these common APIs are covered in detail as well. Also,
    especially useful for driver authors, we cover the kernel''s modern resource-managed
    memory allocation APIs (the `devm_*()` routines).'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 9](dbb888a2-8145-4132-938c-1313a707b2f2.xhtml), *Kernel Memory Allocation
    for Module Authors Part 2*, goes further, in a logical fashion, from the previous
    chapter. Here, you will learn how to create custom slab caches (useful for high-frequency
    (de)allocations for, say, a custom driver), along with some help regarding debugging
    memory allocations at the slab layer. Next, you''ll understand and use the `vmalloc()`
    API (and friends). Very importantly, having covered many APIs for kernel memory
    (de)allocation, you will now learn how to pick and choose an appropriate API given
    the real-world situation you find yourself in. This chapter is rounded off with
    important coverage of the kernel''s **Out Of Memory** (**OOM**) "killer" framework.
    Understanding it will also lead to a much deeper understanding of how user space
    memory allocation really works, via the demand paging technique.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 10](5391e3c1-30ad-4c75-a106-301259064881.xhtml), *The CPU Scheduler
    - Part 1*, the first part of two chapters, covers a useful mix of theory and practice
    regarding CPU scheduling on the Linux OS. The minimal necessary theoretical background
    on the thread as the KSE and available kernel scheduling policies are topics initially
    covered. Next, sufficient kernel internal details on CPU scheduling are covered
    to have you understand how scheduling on the modern Linux OS works. Along the
    way, you will learn how to "visualize" PU scheduling with powerful tools such
    as perf; thread scheduling attributes (policy and real-time priority) are delved
    into as well.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 11](d6e5ebd3-1f04-40e8-a240-2607c58b1299.xhtml), *The CPU Scheduler
    – Part 2,* the second part on CPU scheduling, continues to cover the topic in
    more depth. Here, we cover further visualization tools for CPU scheduling (leveraging
    powerful software such as LTTng and the trace-cmd utility). Next, the CPU affinity
    mask and how to query/set it, controlling scheduling policy and priority on a
    per-thread basis – such a powerful feature! – are delved into. An overview of
    the meaning and importance of control groups (cgroups), along with an interesting
    example on CPU bandwidth allocation via cgroups v2 is seen. Can you run Linux
    as an RTOS? Indeed you can! The details on actually doing so are then shown. We
    round off this chapter with a discussion on (scheduling) latencies and how to
    measure them.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 12](4a13cf52-b1b2-4536-93f4-4c7b3e9a862d.xhtml), *Kernel Synchronization
    – Part 1*, first covers the key concepts regarding critical sections, atomicity,
    what a lock conceptually achieves and, very importantly, the why of all this.
    We then cover concurrency concerns when working within the Linux kernel; this
    moves us naturally on to important locking guidelines, what deadlock means, and
    key approaches to preventing deadlock. Two of the most popular kernel locking
    technologies – the mutex lock and the spinlock – are then discussed in depth along
    with several (driver) code examples.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 13](4cdb6ffc-0afc-4031-a20e-1f1a0170a163.xhtml), *Kernel Synchronization
    – Part 2*, continues the journey on kernel synchronization. Here, you''ll learn
    about key locking optimizations – using lightweight atomic and (the more recent)
    refcount operators to safely operate on integers, RMW bit operators to safely
    perform bit ops, and the usage of the reader-writer spinlock over the regular
    one. Inherent risks, such as cache "false sharing" are discussed as well. An overview
    of lock-free programming techniques (with an emphasis on per-CPU variables and
    their usage, along with examples) is then covered. A critical topic – lock debugging
    techniques, including the usage of the kernel''s powerful "lockdep" lock validator,
    is then covered. The chapter is rounded off with a brief look at memory barriers
    (along with an example).'
  prefs: []
  type: TYPE_NORMAL
- en: To get the most out of this book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To get the most out of this book, we expect you to have knowledge and experience
    in the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Know your way around a Linux system, on the command line (the shell).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The C programming language.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It's not mandatory but experience with Linux system programming concepts and
    technologies will greatly help.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The details on hardware and software requirements, as well as their installation,
    are covered completely and in depth in [Chapter 1](ad75db43-a1a2-4f3f-92c7-a544f47baa23.xhtml), *Kernel
    Workspace Setup*. It's critical that you read it in detail and follow the instructions
    therein.
  prefs: []
  type: TYPE_NORMAL
- en: 'Also, we have tested all the code in this book (it has its own GitHub repository
    as well) on these platforms:'
  prefs: []
  type: TYPE_NORMAL
- en: x86_64 Ubuntu 18.04 LTS guest OS (running on Oracle VirtualBox 6.1)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: x86_64 Ubuntu 20.04.1 LTS guest OS (running on Oracle VirtualBox 6.1)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: x86_64 Ubuntu 20.04.1 LTS native OS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ARM Raspberry Pi 3B+ (running both its "distro" kernel as well as our custom
    5.4 kernel); lightly tested
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: x86_64 CentOS 8 guest OS (running on Oracle VirtualBox 6.1); lightly tested
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We assume that, when running Linux as a guest (VM), the host system is either
    Windows 10 or later (of course, even Windows 7 will work), or a recent Linux distribution
    (for example, Ubuntu or Fedora), or even macOS.
  prefs: []
  type: TYPE_NORMAL
- en: '**If you are using the digital version of this book, we advise you to type
    the code yourself or, better, access the code via the GitHub repository (link
    available in the next section). Doing so will help you avoid any potential errors
    related to the copying and pasting of code.**'
  prefs: []
  type: TYPE_NORMAL
- en: I strongly recommend that you follow the *empirical approach: not taking anyone's
    word on anything at all, but trying it out and experiencing it for yourself. *Hence,
    this book gives you many hands-on experiments and kernel code examples that you
    can and must try out yourself; this will greatly aid you in making real progress
    and deeply learning and understanding various aspects of Linux kernel development.
  prefs: []
  type: TYPE_NORMAL
- en: Download the example code files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can download the example code files for this book from GitHub at [https://github.com/PacktPublishing/Linux-Kernel-Programming](https://github.com/PacktPublishing/Linux-Kernel-Programming). In
    case there's an update to the code, it will be updated on the existing GitHub
    repository.
  prefs: []
  type: TYPE_NORMAL
- en: We also have other code bundles from our rich catalog of books and videos available
    at **[https://github.com/PacktPublishing/](https://github.com/PacktPublishing/)**.
    Check them out!
  prefs: []
  type: TYPE_NORMAL
- en: Download the color images
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We also provide a PDF file that has color images of the screenshots/diagrams
    used in this book. You can download it here: [http://www.packtpub.com/sites/default/files/downloads/9781789953435_ColorImages.pdf](_ColorImages.pdf).
  prefs: []
  type: TYPE_NORMAL
- en: Conventions used
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are a number of text conventions used throughout this book.
  prefs: []
  type: TYPE_NORMAL
- en: '`CodeInText`: Indicates code words in text, database table names, folder names,
    filenames, file extensions, pathnames, dummy URLs, user input, and Twitter handles. Here
    is an example: "The `ioremap()` API returns a KVA of the `void *` type (since
    it''s an address location)"'
  prefs: []
  type: TYPE_NORMAL
- en: 'A block of code is set as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'When we wish to draw your attention to a particular part of a code block, the
    relevant lines or items are set in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Any command-line input or output is written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**Bold**: Indicates a new term, an important word, or words that you see onscreen.
    For example, words in menus or dialog boxes appear in the text like this. Here
    is an example: "Select System info from the Administration panel."'
  prefs: []
  type: TYPE_NORMAL
- en: Warnings or important notes appear like this.
  prefs: []
  type: TYPE_NORMAL
- en: Tips and tricks appear like this.
  prefs: []
  type: TYPE_NORMAL
- en: Get in touch
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Feedback from our readers is always welcome.
  prefs: []
  type: TYPE_NORMAL
- en: '**General feedback**: If you have questions about any aspect of this book, mention
    the book title in the subject of your message and email us at `customercare@packtpub.com`.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Errata**: Although we have taken every care to ensure the accuracy of our
    content, mistakes do happen. If you have found a mistake in this book, we would
    be grateful if you would report this to us. Please visit [www.packtpub.com/support/errata](https://www.packtpub.com/support/errata),
    selecting your book, clicking on the Errata Submission Form link, and entering
    the details.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Piracy**: If you come across any illegal copies of our works in any form
    on the Internet, we would be grateful if you would provide us with the location
    address or website name. Please contact us at `copyright@packt.com` with a link
    to the material.'
  prefs: []
  type: TYPE_NORMAL
- en: '**If you are interested in becoming an author**: If there is a topic that you
    have expertise in and you are interested in either writing or contributing to
    a book, please visit [authors.packtpub.com](http://authors.packtpub.com/).'
  prefs: []
  type: TYPE_NORMAL
- en: Reviews
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Please leave a review. Once you have read and used this book, why not leave
    a review on the site that you purchased it from? Potential readers can then see
    and use your unbiased opinion to make purchase decisions, we at Packt can understand
    what you think about our products, and our authors can see your feedback on their
    book. Thank you!
  prefs: []
  type: TYPE_NORMAL
- en: For more information about Packt, please visit [packt.com](http://www.packt.com/).
  prefs: []
  type: TYPE_NORMAL
