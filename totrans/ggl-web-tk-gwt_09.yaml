- en: Chapter 9. I18N and XML
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will learn how to use internationalization in a GWT application.
    We will also create samples that showcase GWT support for the client-side creation
    and parsing of XML documents.
  prefs: []
  type: TYPE_NORMAL
- en: 'The tasks that we will address are:'
  prefs: []
  type: TYPE_NORMAL
- en: Internationalization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create XML documents
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Parse XML documents
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Internationalization (I18N)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: GWT provides extensive support for creating applications that can display text
    in a wide variety of languages. In this section, we are going to utilize GWT to
    create a page that can display text in the appropriate language for a given locale.
  prefs: []
  type: TYPE_NORMAL
- en: Time for Action—Using the I18N Support
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We are going to create a simple GWT user interface that displays the appropriate
    image and translation for the text "Welcome" for the specified locale. The image
    displayed will be the flag that corresponds to the chosen locale. The steps are
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new Java file named `I18NSamplesConstants.java` in the `com.packtpub.gwtbook.samples.client.util`
    package that defines an interface named `I18NSamplesConstants`. Add the following
    two methods to the interface—one for retrieving the welcome text and one for retrieving
    the image:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new file named `I18NSamplesConstants.properties` in the `com.packtpub.gwtbook.samples.client.util`
    package. Add the properties for the welcome text and the image to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This properties file represents the default locale, in this case US English.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new file named `I18NSamplesConstants_el_GR.properties` in the `com.packtpub.gwtbook.samples.client.util`
    package. Add the properties for the welcome text and the image to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This properties file represents the locale for Greek.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new file named `I18NSamplesConstants_es_ES.properties` in the `com.packtpub.gwtbook.samples.client.util`
    package. Add the properties for the welcome text and the image to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This properties file represents the locale for Spanish.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new file named `I18NSamplesConstants_zh_CN.properties` in the `com.packtpub.gwtbook.samples.client.util`
    package. Add the properties for the welcome text and the image to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: This properties file represents the locale for Chinese.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new Java file named `I18NPanel.java` in the `com.packtpub.gwtbook.samples.client.panels`
    package. Create `VerticalPanel` that will contain the user interface. We will
    add this panel into `DockPanel` and add it into our `Samples` application, like
    all the other applications that we have been working on in this book. Add a label
    that will display the welcome text message in the appropriate language for the
    provided locale:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Create an instance of `I18NSamplesConstants` in the constructor. Add an image
    widget for displaying the flag image and a label for displaying the welcome text
    to the panel. Set the text for the label and the image file by using `I18NSamplesConstants`.
    Finally, create a little info panel that displays descriptive text about this
    application, so that we can display the text when this sample is selected in the
    list of available samples in our `Samples` application. Add the info panel and
    the work panel to a dock panel, and initialize the widget:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Add an entry to import the I18N module to the `Samples.gwt.xml` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Add an entry for each locale that we support to the `Samples.gwt.xml` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Run the application. Here is the default interface displayed in the default
    locale—`en_US:`
  prefs: []
  type: TYPE_NORMAL
- en: '![Time for Action—Using the I18N Support](img/1007_09_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Modify the URL to add a locale query parameter with each of the locales that
    we support to see the user interface displayed in the appropriate language. Here
    is the user interface displayed in Greek—`el_GR:`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '![Time for Action—Using the I18N Support](img/1007_09_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Here is the user interface displayed in Spanish—`es_ES:`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '![Time for Action—Using the I18N Support](img/1007_09_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Here is the user interface displayed in Chinese—`zh_CN:`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '![Time for Action—Using the I18N Support](img/1007_09_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: What Just Happened?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'GWT provides various tools and techniques that help in developing internationalized
    applications that can display text in various languages. There are two main techniques
    for developing internationalized applications using GWT:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Static String Internationalization:** This is a type-safe technique that
    depends on Java interfaces and regular properties files. It generates code from
    the previous two components to provide an application with messages that are aware
    of the locale whose context they are operating in. This technique is recommended
    for new applications that do not have existing localized properties files.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Dynamic String Internationalization:** This technique is used when you already
    have an existing localization system, such as your web server that can generate
    localized strings. These translated strings are then printed within your HTML
    page. This approach is usually slower than the static approach, but since it does
    not have the code generation phase, you do not need to recompile your application
    every time your message strings are modified, or the list of locales supported
    is changed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this sample, we are using the static internationalization technique. We create
    an interface `I18NSamplesConstants` that defines two methods—one method returns
    the welcome message, while the other method returns the flag-image file name.
    We then create a properties file for each locale supported by our application,
    and add the messages in the appropriate language to the file.
  prefs: []
  type: TYPE_NORMAL
- en: 'A `locale` is an object that uniquely identifies a particular combination of
    language and a region. So for instance, a locale of `en_US` refers to the language
    as English and the region as United States. Similarly, `fr_FR` refers to the language
    French and the region France. The properties file name must end with the locale
    identifier before the extension `properties`. Here are the contents of our properties
    file for Spanish language in the region Spain:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Our user interface is very simple, and it consists of one image with a label
    under it. The image will display the flag of the region whose locale we are using,
    and the label will display the welcome text in the language for the locale. The
    application on startup will display the page in the default locale for your environment.
    You can change this by appending a query parameter with the key `locale` and a
    value equal to any of the supported locales. So in order to view the page in Greek,
    you would append `locale=el_GR` to the respective URL.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you provide a locale that is not supported, the web page will be displayed
    in the default locale. We access the appropriate text by creating the `I18NSamplesConstants`
    class, using the accessors to get the localized messages, and setting the values
    for the two widgets:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The `I18NSamplesConstants` class extends from the `Constants` class, which
    enables binding at compile time to constant values that are acquired from simple
    property files. When we use `GWT.create()` method to instantiate `I18NSamplesConstants`,
    GWT automatically generates the right subclass that uses values from the property
    file for the appropriate locale and returns it. The supported locales themselves
    are defined by the module file, using an extend-property tag. This informs the
    GWT framework that we want to extend the default property "locale", by providing
    alternatives for it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: We also inherit from `com.google.gwt.i18n.I18N` in the `Samples.gwt.xml` file
    so that our module can have access to the I18N functionality provided by GWT.
  prefs: []
  type: TYPE_NORMAL
- en: There are several other tools provided by GWT to enhance the I18N support. There
    is a `Messages` class that can be used when we want to provide localized messages
    that have parameters passed to them. We can also ignore the localization, and
    use a regular properties file to store configuration information. We also have
    an `i18nCreator` command script that can generate the `Constants` or `Messages`
    interfaces and sample properties files. Finally, a `Dictionary` class is also
    available that can be used for dynamic internationalization, as it provides a
    way to dynamically look up key-value pairs of strings that are defined in the
    HTML page for the module.
  prefs: []
  type: TYPE_NORMAL
- en: The I18N support in GWT is quite extensive and can be used to support either
    simple or complicated internationalization scenarios.
  prefs: []
  type: TYPE_NORMAL
- en: Creating XML Documents
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: XML is in wide-spread use across enterprises in a variety of applications, and
    is also very commonly used when integrating disparate systems. In this section,
    we will learn about GWT's XML support and how to use it to create an XML document
    on the client side.
  prefs: []
  type: TYPE_NORMAL
- en: Time for Action—Creating an XML Document
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We are going to take customer data stored in a CSV file, and create an XML
    document containing the customer data. The steps are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a simple CSV file with the customer data in a file named `customers.csv`
    in the `com.packtpub.gwtbook.samples.public` package. Add the information for
    two customers to this file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Create the user interface in a new Java file named `CreateXMLPanel.java` in
    the package `com.packtpub.gwtbook.samples.client.panels`. Create a private `HTMLPanel`
    variable that will display the XML document that we are going to create. Also
    create a `VerticalPanel` class that will be the container for the user interface:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a private method named `createXMLDocument()` that can take a string
    and create the customer''s XML document from it. Create an XML document object,
    add the processing instruction for the XML version, and create a root node named
    `customers`. Loop through the customer information on each row from the CSV file.
    Create the appropriate XML nodes, set their value, and add them to the root node.
    Finally return the XML document created:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Create a new method named `createPrettyXML()` that will format our XML document
    nicely by indenting the nodes before we display it in `HTMLPanel:`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: This is just a quick-and-dirty way of formatting the XML document, as GWT does
    not currently provide a nice way to do this.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the user interface for this application in a new Java file named `CreateXMLPanel.java`
    in the `com.packtpub.gwtbook.samples.client.panels` package. In the constructor
    `CreateXMLPanel()`, make an asynchronous HTTP request to get the `customers.csv`
    file. On success, create the XML document from the data contained in the CSV file
    and display it in the `HTMLPanel`. Finally, create a little info panel that displays
    descriptive text about this application, so that we can display the text when
    this sample is selected in the list of available samples in our `Samples` application.
    Add the info panel and the work panel to a dock panel, and initialize the widget:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Add an entry to import the XML module to the `Samples.gwt.xml` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the page displaying the XML document created from the customer''s CSV
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Time for Action—Creating an XML Document](img/1007_09_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: What Just Happened?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'GWT provides good support for generating XML documents on the client side,
    and like everything else in the framework, it is browser-independent. You can
    utilize the `XMLParser` class to generate the documents, and can be assured that
    the XML document will be generated correctly in all the supported browsers. In
    this example, we create a simple CSV file with the customer data. This customer
    data is retrieved by using the `asyncGet()` method on the `HTTPRequest` object.
    Since there is no support provided for reading files from the file system in GWT,
    this is a workaround to load external files without resorting to using RPC services.
    We provide the name of the file and `ResponseTextHandler` as parameters to this
    method. `ResponseTextHandler` provides a callback that is executed when the synchronous
    call is completed. In the callback, we read in the contents of the response and
    create an XML document with the values. A new document is created by using the
    `XMLParser` object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'A processing instruction is added first to this document, so that the XML is
    well formed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'We then create the root node and child node. We add a text node to the new
    node with the value that we have parsed from the CSV file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: This new document is displayed by using a pre-formatted block in `HTMLPanel`.
    However, we need to format and indent the text nicely before displaying it in
    the panel; otherwise the entire document will appear as one line string. We have
    a private method that indents and formats the document nicely by using regular
    expressions. This is slightly tedious. Hopefully, in the future GWT will support
    creating pretty XML document in the framework itself. In this example, we are
    retrieving the contents of the CSV file via an HTTP request; we can provide the
    data for generating the XML in any format we like by using an RPC service.
  prefs: []
  type: TYPE_NORMAL
- en: Parse XML Documents
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous section, we used the GWT support for creating XML documents.
    In this section, we are going to learn how to read XML documents. We will be creating
    an application that can parse an XML file and populate a table using the data
    from the file.
  prefs: []
  type: TYPE_NORMAL
- en: Time for Action—Parsing XML on the Client
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will be creating a GWT application that can read an XML file containing
    information about some books, and populate a table with that data. The steps are
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a simple XML file with the books'' data in a file named `books.xml`
    in the `com.packtpub.gwtbook.samples.client.public` package:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Create the user interface for this application in a new Java file named `ParseXMLPanel.java`
    in the `com.packtpub.gwtbook.samples.client.panels` package. Create a `VerticalPanel`
    class that will contain our user interface, and a `FlexTable` class that we will
    use for displaying the data from the XML file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a private method named `getElementTextValue()` that can take a parent
    XML element and a tag name, and return the text value for that node:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'In the constructor `ParseXMLPanel()`, add the table headers and styles for
    the flex table:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'In the same constructor, make an asynchronous HTTP request to get the `books.xml`
    file, and on completion, parse the XML document and populate a flex table with
    the data. Finally, create a little info panel that displays descriptive text about
    this application, so that we can display the text when this sample is selected
    in the list of available samples in our `Samples` application. Add the info panel
    and the work panel to a dock panel, and initialize the widget:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the page with the table containing the data from the `books.xml` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Time for Action—Parsing XML on the Client](img/1007_09_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: What Just Happened?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We once again use the `HTTPRequest` object to retrieve the contents of a file
    on the server, in this case the `books.xml` file, which contains some data on
    published books that we want to display in a table on the page. The `XMLParser`
    object is utilized to read in the contents of the asynchronous response into a
    document. This XML document is then traversed using the familiar DOM API, and
    the text values of the appropriate nodes are retrieved and used to populate the
    respective column cells in the flex table. We use the `getElementsByTagName()`
    method to get a `NodeList` that contains all the book elements:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Once we have this list, we just iterate through its child nodes, and access
    the values we are interested in:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: We inherit from the `com.google.gwt.xml.xml` file in the `Samples.gwt.xml` file
    so that our module can have access to the XML functionality provided by GWT.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned how to create an application with internationalization
    (I18N) support. We created a page that can display text in the appropriate language
    for a given locale. Then, we created an XML document on the client side using
    GWT's XML support.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we created an application that can parse an XML file and populate a
    table using the data from the file.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn how to deploy our GWT application in Tomcat.
  prefs: []
  type: TYPE_NORMAL
