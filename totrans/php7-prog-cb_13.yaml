- en: Chapter 13. Best Practices, Testing, and Debugging
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Using Traits and Interfaces
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Universal exception handler
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Universal error handler
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing a simple test
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing a test suite
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generating fake test data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Customizing sessions using `session_start` parameters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will show you how traits and interfaces work together. Then,
    we turn our attention to the design of a fallback mechanism that will catch errors
    and exceptions in situations where you were not able (or forgot) to define specific
    `try/catch` blocks. We will then venture into the world of unit testing, showing
    you first how to write simple tests, and then how to group those tests together
    into test suites. Next, we define a class that lets you create any amount of generic
    test data. We close the chapter with a discussion of how to easily manage sessions
    using new PHP 7 features.
  prefs: []
  type: TYPE_NORMAL
- en: Using Traits and Interfaces
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is considered a best practice to make use of interfaces as a means of establishing
    the classification of a set of classes, and to guarantee the existence of certain
    methods. Traits and Interfaces often work together, and are an important aspect
    of implementation. Wherever you have a frequently used Interface that defines
    a method where the code does not change (such as a setter or getter), it is useful
    to also define a Trait that contains the actual code implementation.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this example, we will use `ConnectionAwareInterface`, first presented in
    [Chapter 4](ch04.html "Chapter 4. Working with PHP Object-Oriented Programming"),
    *Working with PHP Object-Oriented Programming*. This interface defines a `setConnection()`
    method that sets a `$connection` property. Two classes in the `Application\Generic`
    namespace, `CountryList` and `CustomerList`, contain redundant code, which matches
    the method defined in the interface.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Here is what `CountryList` looks like before the change:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'We will now move `list()` into a trait called `ListTrait`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'We can then insert the code from `ListTrait` into a new class, `CountryListUsingTrait`,
    as shown next:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we observe that many classes need to set a connection instance. Again,
    this calls for a trait. This time, however, we place the trait in the `Application\Database`
    namespace. Here is the new trait:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Traits are often used to avoid duplication of code. It is often the case that
    you also need to identify the class that uses the trait. A good way to do this
    is to develop an interface that matches the trait. In this example, we will define
    `Application\Database\ConnectionAwareInterface`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'And here is the revised `CountryListUsingTrait` class. Note that as the new
    trait is affected by its location in the namespace, we needed to add a `use` statement
    at the top of the class. You will also note that we implement `ConnectionAwareInterface`
    to identify the fact that this class requires the method defined in the trait.
    Notice that we are taking advantage of the new PHP 7 group use syntax:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First of all, make sure the classes developed in [Chapter 4](ch04.html "Chapter 4. Working
    with PHP Object-Oriented Programming"), *Working with PHP Object-Oriented Programming*,
    have been created. These include the `Application\Generic\CountryList` and `Application\Generic\CustomerList`
    classes discussed in [Chapter 4](ch04.html "Chapter 4. Working with PHP Object-Oriented
    Programming"), *Working with PHP Object-Oriented Programming*, in the recipe *Using
    interfaces*. Save each class in a new file in the `Application\Generic` folder
    as `CountryListUsingTrait.php` and `CustomerListUsingTrait.php`. Be sure to change
    the class names to match the new names of the files!
  prefs: []
  type: TYPE_NORMAL
- en: As discussed in step 3, remove the `list()` method from both `CountryListUsingTrait.php`
    and `CustomerListUsingTrait.php`. Add `use ListTrait;` in place of the method
    removed. Place the removed code into a separate file, in the same folder, called
    `ListTrait.php`.
  prefs: []
  type: TYPE_NORMAL
- en: You will also notice further duplication of code between the two list classes,
    in this case the `setConnection()` method. This calls for another trait!
  prefs: []
  type: TYPE_NORMAL
- en: Cut the `setConnection()` method out of both `CountryListUsingTrait.php` and
    `CustomerListUsingTrait.php` list classes, and place the removed code into a separate
    file called `ConnectionTrait.php`. As this trait is logically related to `ConnectionAwareInterface`
    and `Connection`, it makes sense to place the file in the `Application\Database`
    folder, and to specify its namespace accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, define `Application\Database\ConnectionAwareInterface` as discussed
    in step 6\. Here is the final `Application\Generic\CustomerListUsingTrait` class
    after all changes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'You can now copy the `chap_04_oop_simple_interfaces_example.php` file mentioned
    in [Chapter 4](ch04.html "Chapter 4. Working with PHP Object-Oriented Programming"),
    *Working with PHP Object-Oriented Programming*, to a new file called `chap_13_trait_and_interface.php`.
    Change the reference from `CountryList` to `CountryListUsingTrait`. Likewise,
    change the reference from `CustomerList` to `CustomerListUsingTrait`. Otherwise,
    the code can remain the same:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be exactly as described in the *Using interfaces* recipe of
    [Chapter 4](ch04.html "Chapter 4. Working with PHP Object-Oriented Programming"),
    *Working with Object-Oriented Programming*. You can see the country list portion
    of the output in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](graphics/B05314_13_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The next image displays the customer list portion of the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](graphics/B05314_13_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Universal exception handler
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Exceptions are especially useful when used in conjunction with code in a `try/catch`
    block. Using this construct, however, can be awkward in some situations, making
    code virtually unreadable. Another consideration is that many classes end up throwing
    exceptions that you have not anticipated. In such cases, it would be highly desirable
    to have some sort of fallback exception handler.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, we define a generic exception handling class, `Application\Error\Handler`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'We define properties that represents a log file. If the name is not supplied,
    it is named after the year, month, and day. In the constructor, we use `set_exception_handler()`
    to assign the `exceptionHandler()` method (in this class) as the fallback handler:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we define the `exceptionHandler()` method, which takes an `Exception`
    object as an argument. We record the date and time, the class name of the exception,
    and its message in the log file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: If we specifically put a `try/catch` block in our code, this will override our
    universal exception handler. If, on the other hand, we do not use try/catch and
    an exception is thrown, the universal exception handler will come into play.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Best practice**'
  prefs: []
  type: TYPE_NORMAL
- en: You should always use try/catch to trap exceptions and possibly continue in
    your application. The exception handler described here is only designed to allow
    your application to end "gracefully" in situations where exceptions thrown have
    not been caught.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, place the code shown in the preceding recipe into a `Handler.php` file
    in the `Application\Error` folder. Next, define a test class that will throw an
    exception. For the purposes of illustration, create an `Application\Error\ThrowsException`
    class that will throw an exception. As an example, set up a PDO instance with
    the error mode set to `PDO::ERRMODE_EXCEPTION`. You then craft an SQL statement
    that is guaranteed to fail:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, define a calling program called `chap_13_exception_handler.php` that
    sets up autoloading, uses the appropriate classes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'At this point, if you create a `ThrowsException` instance without implementing
    the universal handler, a `Fatal Error` is generated as an exception has been thrown
    but not caught:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '![How it works...](graphics/B05314_13_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'If, on the other hand, you use a `try/catch` block, the exception will be caught
    and your application is allowed to continue, if it is stable enough:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'You will observe the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](graphics/B05314_13_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'To demonstrate use of the exception handler, define a `Handler` instance, passing
    a parameter that represents the directory to contain log files, before the `try/catch`
    block. After `try/catch`, outside the block, create another instance of `ThrowsException`.
    When you run this sample program, you will notice that the first exception is
    caught inside the `try/catch` block, and the second exception is caught by the
    handler. You will also note that after the handler, the application ends:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the output from the completed example program, along with the contents
    of the log file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](graphics/B05314_13_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'It might be a good idea to review the documentation on the `set_exception_handler()`
    function. Have a look, especially, at the comment (posted 7 years ago, but still
    pertinent) by Anonymous that clarifies how this function works: [http://php.net/manual/en/function.set-exception-handler.php](http://php.net/manual/en/function.set-exception-handler.php).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Universal error handler
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The process of developing a universal error handler is quite similar to the
    preceding recipe. There are certain differences, however. First of all, in PHP
    7, some errors are thrown and can be caught, whereas others simply stop your application
    dead in its tracks. To further confuse matters, some errors are treated like exceptions,
    whereas others are derived from the new PHP 7 `Error` class. Fortunately for us,
    in PHP 7, both `Error` and `Exception` implement a new interface called `Throwable`.
    Accordingly, if you are not sure whether your code will throw an `Exception` or
    an `Error`, simply catch an instance of `Throwable` and you'll catch both.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Modify the `Application\Error\Handler` class defined in the preceding recipe.
    In the constructor, set a new `errorHandler()` method as the default error handler:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'We then define the new method, using the documented parameters. As with our
    exception handler, we log information to a log file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Also, just to be able to distinguish errors from exceptions, add `EXCEPTION`
    to the message sent to the log file in the `exceptionHandler()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, make the changes to `Application\Error\Handler` as defined previously.
    Next, create a class that throws an error that, for this illustration, could be
    defined as `Application\Error\ThrowsError`. For example, you could have a method
    that attempts a divide by zero operation, and another that attempts to parse non-PHP
    code using `eval()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'You can then define a calling program called `chap_13_error_throwable.php`
    that sets up autoloading, uses the appropriate classes, and creates an instance
    of `ThrowsError`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'If you then call the two methods, without a try/catch block and without defining
    the universal error handler, the first method generates a `Warning`, whereas the
    second throws a `ParseError`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Because this is an error, program execution stops, and you will not see `Application
    continues ...`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](graphics/B05314_13_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'If you wrap the method calls in `try/catch` blocks and catch `Throwable`, the
    code execution continues:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'From the following output, you will also note that the program exits with `code
    0`, which tells us all is OK:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](graphics/B05314_13_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Finally, after the `try/catch` blocks, run the errors again, moving the echo
    statement to the end. You will see in the output that the errors were caught,
    but in the log file, notice that `DivisionByZeroError` is caught by the exception
    handler, whereas the `ParseError` is caught by the error hander:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '![How it works...](graphics/B05314_13_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: PHP 7.1 allows you to specify more than one class in the `catch` `()` clause.
    So, instead of a single `Throwable` you could say `catch` `(Exception` `|` `Error
    $e)` `{` `xxx` `}`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing a simple test
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The primary means of testing PHP code is to use **PHPUnit**, which is based
    on a methodology called **Unit Testing**. The philosophy behind unit testing is
    quite simple: you break down your code into the smallest possible logical units.
    You then test each unit in isolation to confirm that it performs as expected.
    These expectations are codified into a series of **assertions**. If all assertions
    return `TRUE`, then the unit has passed the test.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In the case of procedural PHP, a unit is a function. For OOP PHP, the unit is
    a method within a class.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The first order of business is to either install PHPUnit directly onto your
    development server, or download the source code, which is available in the form
    of a single **phar** (**PHP archive**) file. A quick visit to the official website
    for PHPUnit ([https://phpunit.de/](https://phpunit.de/)) lets us download right
    from the main page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'It is a best practice, however, to use a package manager to both install and
    maintain PHPUnit. For this purpose, we will use a package management program called
    **Composer**. To install Composer, visit the main website, [https://getcomposer.org/](https://getcomposer.org/),
    and follow the instructions on the download page. The current procedure, at the
    time of writing, is as follows. Note that you need to substitute the hash of the
    current version in place of `<hash>`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Best practice**'
  prefs: []
  type: TYPE_NORMAL
- en: The advantage of using a package management program such as Composer is that
    it will not only install, but can also be used to update any external software
    (such as PHPUnit) used by your application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we use Composer to install PHPUnit. This is accomplished by creating
    a `composer.json` file that contains a series of directives outlining project
    parameters and dependencies. A full description of these directives is beyond
    the scope of this book; however, for the purposes of this recipe, we create a
    minimal set of directives using the key parameter `require`. You will also note
    that the contents of the file are in **JavaScript Object Notation** (**JSON**)
    format:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'To perform the installation from the command line, we run the following command.
    The output is shown just after:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '![How to do it...](graphics/B05314_13_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'PHPUnit and its dependencies are placed in a `vendor` folder that Composer
    will create if it does not already exist. The primary command to invoke PHPUnit
    is then symbolically linked into the `vendor/bin` folder. If you place this folder
    in your `PATH`, all you need do is to run this command, which checks the version
    and incidentally confirms the installation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Running simple tests
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For the purposes of this illustration, let''s assume we have a `chap_13_unit_test_simple.php`
    file that contains the `add()` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Tests are then written as classes that extend `PHPUnit\Framework\TestCase`.
    If you are testing a library of functions, at the beginning of the test class,
    include the file that contains function definitions. You would then write methods
    that start with the word `test`, usually followed by the name of the function
    you are testing, and possibly some additional CamelCase words to further describe
    the test. For the purposes of this recipe, we will define a `SimpleTest` test
    class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Assertions form the heart of any set of tests. The `See also` section gives
    you the documentation reference for the complete list of assertions. An assertion
    is a PHPUnit method that compares a known value against a value produced by that
    which you wish to test. An example is `assertEquals()`, which checks to see whether
    the first argument equals the second. The following example tests a method called
    `add()` and confirms **2** is the return value for `add(1,1)`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also test to see whether something is *not* true. This example asserts
    that 1 + 1 does not equal 3:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'An assertion that is extremely useful when used to test a string is `assertRegExp()`.
    Assume, for this illustration, that we are testing a function that produces an
    HTML table out of a multidimensional array:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'We can construct a simple test that confirms that the output contains `<table>`,
    one or more characters, followed by `</table>`. Further, we wish to confirm that
    a `<td>B</td>` element exists. When writing the test, we build a test array that
    consists of three sub-arrays containing the letters A—C, D—F, and G—I. We then
    pass the test array to the function, and run assertions against the result:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'To test a class, instead of including a library of functions, simply include
    the file that defines the class to be tested. For the sake of illustration, let''s
    take the library of functions shown previously and move them into a `Demo` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'In our `SimpleClassTest` test class, instead of including the library file,
    we include the file that represents the `Demo` class. We need an instance of `Demo`
    in order to run tests. For this purpose, we use a specially designed `setup()`
    method, which is run before each test. Also, you will note a `teardown()` method,
    which is run immediately after each test:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The reason why `setup()` and `teardown()` are run before and after each test
    is to ensure a fresh test environment. That way, the results of one test will
    not influence the results of another test.
  prefs: []
  type: TYPE_NORMAL
- en: Testing database Model classes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When testing a class, such as a Model class, that has database access, other
    considerations come into play. The main consideration is that you should run tests
    against a test database, not the real database used in production. A final point
    is that by using a test database, you can populate it in advance with appropriate,
    controlled data. `setup()` and `teardown()` could also be used to add or remove
    test data.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'As an example of a class that uses the database, we will define a class `VisitorOps`.
    The new class will include methods to add, remove, and find visitors. Note that
    we''ve also added a method to return the latest SQL statement executed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: For tests that involve a database, it is recommended that you use a test database
    instead of the live production database. Accordingly, you will need an extra set
    of database connection parameters that can be used to establish a database connection
    in the `setup()` method.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It's possible that you wish to establish a consistent block of sample data.
    This could be inserted into the test database in the `setup()` method.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, you may wish to reset the test database after each test, which is accomplished
    in the `teardown()` method.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using mock classes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In some cases, the test will access complex components that require external
    resources. An example is a service class that needs access to a database. It is
    a best practice to minimize database access in a test suite. Another consideration
    is that we are not testing database access; we are only testing the functionality
    of one specific class. Accordingly, it is sometimes necessary to define **mock**
    classes that mimic the behavior of the their parent class, but that restrict access
    to external resources.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Best practice**'
  prefs: []
  type: TYPE_NORMAL
- en: Limit actual database access in your tests to the Model (or equivalent) classes.
    Otherwise, the time it takes to run the entire set of tests could become excessive.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this case, for illustration, define a service class, `VisitorService`, which
    makes use of the `VisitorOps` class discussed earlier:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'For test purposes, we add a getter and setter for the `$visitorOps` property.
    This allows us to insert a mock class in place of the real `VisitorOps` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we define a `VisitorOpsMock` mock class that mimics the functionality
    of its parent class. Class constants and properties are inherited. We then add
    mock test data, and a getter in case we need access to the test data later:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we override `findAll()` to return test data using `yield`, just as in
    the parent class. Note that we still build the SQL string, as this is what the
    parent class does:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'To mock `findById()` we simply return that array key from `$this->testData`.
    For `removeById()`, we unset the array key supplied as a parameter from `$this->testData`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Adding data is slightly more complicated in that we need to emulate the fact
    that the `id` parameter might not be supplied, as the database would normally
    auto-generate this for us. To get around this, we check for the `id` parameter.
    If not set, we find the largest array key and increment:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Using anonymous classes as mock objects
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A nice variation on mock objects involves the use of the new PHP 7 anonymous
    class in place of creating a formal class that defines mock functionality. The
    advantage of using an anonymous class is that you can extend an existing class,
    which makes the object appear legitimate. This approach is especially useful if
    you only need to override one or two methods.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For this illustration, we will modify `VisitorServiceTest.php` presented previously,
    calling it `VisitorServiceTestAnonClass.php`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'You will notice that in `setup()`, we define an anonymous class that extends
    `VisitorOps`. We only need to override the `findAll()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that in `testShowAllVisitors()`, when `$this->visitorService->showAllVisitors()`
    is executed, the anonymous class is called by the visitor service, which in turn
    calls the overridden `findAll()`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: Using Mock Builder
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Another technique is to use `getMockBuilder()`. Although this approach does
    not allow a great deal of finite control over the mock object produced, it's extremely
    useful in situations where you only need to confirm that an object of a certain
    class is returned, and when a specified method is run, this method returns some
    expected value.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the following example, we copied `VisitorServiceTestAnonClass`; the only
    difference is in how an instance of `VisitorOps` is supplied in `setup()`, in
    this case, using `getMockBuilder()`. Note that although we did not use `with()`
    in this example, it is used to feed controlled parameters to the mocked method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We have shown how to create simple one-off tests. In most cases, however, you
    will have many classes that need to be tested, preferably all at once. This is
    possible by developing a *test suite*, discussed in more detail in the next recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First, you need to install PHPUnit, as discussed in steps 1 to 5\. Be sure to
    include `vendor/bin` in your PATH so that you can run PHPUnit from the command
    line.
  prefs: []
  type: TYPE_NORMAL
- en: Running simple tests
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Next, define a `chap_13_unit_test_simple.php` program file with a series of
    simple functions, such as `add()`, `sub()` and so on, as discussed in step 1\.
    You can then define a simple test class contained in `SimpleTest.php` as mentioned
    in steps 2 and 3.
  prefs: []
  type: TYPE_NORMAL
- en: 'Assuming `phpunit` is in your `PATH`, from a terminal window, change to the
    directory containing the code developed for this recipe, and run the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Running simple tests](graphics/B05314_13_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Make a change in `SimpleTest.php` so that the test will fail (step 4):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the revised output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Running simple tests](graphics/B05314_13_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Next, add the `table()` function to `chap_13_unit_test_simple.php` (step 5),
    and `testTable()` to `SimpleTest.php` (step 6). Re-run the unit test and observe
    the results.
  prefs: []
  type: TYPE_NORMAL
- en: To test a class, copy the functions developed in `chap_13_unit_test_simple.php`
    to a `Demo` class (step 7). After making the modifications to `SimpleTest.php`
    suggested in step 8, re-run the simple test and observe the results.
  prefs: []
  type: TYPE_NORMAL
- en: Testing database model classes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'First, create an example class to be tested, `VisitorOps`, shown in step 2
    in this subsection. You can now define a class we will call `SimpleDatabaseTest`
    to test `VisitorOps`. First of all, use `require_once` to load the class to test.
    (We will discuss how to incorporate autoloading in the next recipe!) Then define
    key properties, including test database configuration and test data. You could
    use `php7cookbook_test` as the test database:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, define `setup()`, which inserts the test data, and confirms that the
    last SQL statement was `INSERT`. You should also check to see whether the return
    value was positive:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'After that, define `teardown()`, which removes the test data and confirms that
    the query for `id = 1` comes back as `FALSE`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'The first test is for `findAll()`. First, confirm the data type of the result.
    You could take the topmost element using `current()`. We confirm there are five
    elements, that one of them is `name`, and that the value is the same as that in
    the test data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'The next test is for `findById()`. It is almost identical to `testFindAll()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: You do not need to bother with a test for `removeById()` as this is already
    done in `teardown()`. Likewise, there is no need to test `runSql()` as this is
    done as part of the other tests.
  prefs: []
  type: TYPE_NORMAL
- en: Using mock classes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: First, define a `VisitorService` service class as described in steps 2 and 3
    in this subsection. Next, define a `VisitorOpsMock` mock class, which is discussed
    in steps 4 to 7.
  prefs: []
  type: TYPE_NORMAL
- en: 'You are now in a position to develop a test, `VisitorServiceTest`, for the
    service class. Note that you need provide your own database configuration as it
    is a best practice to use a test database instead of the production version:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'In `setup()`, create an instance of the service, and insert `VisitorOpsMock`
    in place of the original class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'In our test, which produces an HTML table from the list of visitors, you can
    then look for certain elements, knowing what to expect in advance as you have
    control over the test data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: You might then wish to experiment with the variations suggested in the last
    two subsections, *Using Anonymous Classes as Mock Objects*, and *Using Mock Builder*.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Other assertions test operations on numbers, strings, arrays, objects, files,
    JSON, and XML, as summarized in the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Category | Assertions |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| General | `assertEquals()`, `assertFalse()`, `assertEmpty()`, `assertNull()`,
    `assertSame(), assertThat()`, `assertTrue()` |'
  prefs: []
  type: TYPE_TB
- en: '| Numeric | `assertGreaterThan()`, `assertGreaterThanOrEqual()`, `assertLessThan()`,
    `assertLessThanOrEqual()`, `assertNan()`, `assertInfinite()` |'
  prefs: []
  type: TYPE_TB
- en: '| String | `assertStringEndsWith()`, `assertStringEqualsFile()`, `assertStringStartsWith()`,
    `assertRegExp()`, `assertStringMatchesFormat()`, `assertStringMatchesFormatFile()`
    |'
  prefs: []
  type: TYPE_TB
- en: '| Array/iterator | `assertArrayHasKey()`, `assertArraySubset()`, `assertContains()`,
    `assertContainsOnly()`, `assertContainsOnlyInstancesOf()`, `assertCount()` |'
  prefs: []
  type: TYPE_TB
- en: '| File | `assertFileEquals()`, `assertFileExists()` |'
  prefs: []
  type: TYPE_TB
- en: '| Objects | `assertClassHasAttribute()`, `assertClassHasStaticAttribute()`,
    `assertInstanceOf()`, `assertInternalType()`, `assertObjectHasAttribute()` |'
  prefs: []
  type: TYPE_TB
- en: '| JSON | `assertJsonFileEqualsJsonFile()`, `assertJsonStringEqualsJsonFile()`,
    `assertJsonStringEqualsJsonString()` |'
  prefs: []
  type: TYPE_TB
- en: '| XML | `assertEqualXMLStructure()`, `assertXmlFileEqualsXmlFile()`, `assertXmlStringEqualsXmlFile()`,
    `assertXmlStringEqualsXmlString()` |'
  prefs: []
  type: TYPE_TB
- en: See also...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For a good discussion on unit testing, have a look here: [https://en.wikipedia.org/wiki/Unit_testing](https://en.wikipedia.org/wiki/Unit_testing).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For more information on `composer.json` file directives, see [https://getcomposer.org/doc/04-schema.md](https://getcomposer.org/doc/04-schema.md).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For a complete list of assertions, have a look at this PHPUnit documentation
    page: [https://phpunit.de/manual/current/en/phpunit-book.html#appendixes.assertions](https://phpunit.de/manual/current/en/phpunit-book.html#appendixes.assertions).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The PHPUnit documentation also goes into using `getMockBuilder()` in detail
    here: [https://phpunit.de/manual/current/en/phpunit-book.html#test-doubles.mock-objects](https://phpunit.de/manual/current/en/phpunit-book.html#test-doubles.mock-objects)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing a test suite
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You may have noticed after having read through the previous recipe that it can
    quickly become tedious to have to manually run `phpunit` and specify test classes
    and PHP filenames. This is especially true when dealing with applications that
    employ dozens or even hundreds of classes and files. The PHPUnit project has a
    built-in capability to handle running multiple tests with a single command. Such
    a set of tests is referred to as a **test suite**.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'At its simplest, all you need to do is to move all the tests into a single
    folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'You''ll need to adjust commands that include or require external files to account
    for the new location. The example shown (`SimpleTest`) was developed in the preceding
    recipe:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'You can then simply run `phpunit` with the directory path as an argument. PHPUnit
    will then automatically run all tests in that folder. In this example, we assume
    there is a `tests` subdirectory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'You can use the `--bootstrap` option to specify a file that is executed prior
    to running the tests. A typical use for this option is to initiate autoloading:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the sample `bootstrap.php` file that implements autoloading:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'Another possibility is to define one or more sets of tests using an XML configuration
    file. Here is an example that runs only the Simple* tests:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is another example that runs a test based on a directory and also specifies
    a bootstrap file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Make sure all the tests discussed in the previous recipe, *Writing a simple
    test*, have been defined. You can then create a `tests` folder and move or copy
    all the `*Test.php` files into this folder. You'll then need to adjust the path
    in the `require_once` statements, as shown in step 2.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to demonstrate how PHPUnit can run all tests in a folder, from the
    directory containing the source code you defined for this chapter, run the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](graphics/B05314_13_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'To demonstrate the use of a autoloading via a bootstrap file, create a new
    `tests_with_autoload` directory. In this folder, define a `bootstrap.php` file
    with the code shown in step 5\. Create two directories in `tests_with_autoload`:
    `Demo` and `Simple`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'From the directory containing the source code for this chapter, copy the file
    (discussed in step 12 of the previous recipe) into `tests_with_autoload/Demo/Demo.php`.
    After the opening `<?php` tag, add this line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, copy the `SimpleTest.php` file to `tests_with_autoload/Simple/ClassTest.php`.
    (Notice the filename change!). You will need to change the first few lines to
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: 'After that, create a `tests_with_autoload/phpunit.xml` file that pulls everything
    together:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, change to the directory that contains the code for this chapter. You
    can now run a unit test that incorporates a bootstrap file, along with autoloading
    and namespaces, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: 'The output should appear as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](graphics/B05314_13_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: See also...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For more information on writing PHPUnit test suites, have a look at this documentation
    page: [https://phpunit.de/manual/current/en/phpunit-book.html#organizing-tests.xml-configuration](https://phpunit.de/manual/current/en/phpunit-book.html#organizing-tests.xml-configuration).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generating fake test data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Part of the testing and debugging process involves incorporating realistic test
    data. In some cases, especially when testing database access and producing benchmarks,
    large amounts of test data are needed. One way in which this can be accomplished
    is to incorporate a process of scraping data from websites, and then putting the
    data together in realistic, yet random, combinations to be inserted into a database.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The first step is to determine what data is needed in order to test your application.
    Another consideration is dose the website address an international audience, or
    will the market be primarily from a single country?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In order to produce a consistent fake data tool, it's extremely important to
    move the data from its source into a usable digital format. The first choice is
    a series of database tables. Another, not as attractive, alternative is a CSV
    file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You may end up converting the data in stages. For example, you could pull data
    from a web page that lists country codes and country names into a text file.![How
    to do it...](graphics/B05314_13_13.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Since this list is short, it's easy to literally cut and paste this into a text
    file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We can then do a search for " " and replace with "`\n`", which gives us this:![How
    to do it...](graphics/B05314_13_14.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This can then be imported into a spreadsheet, which then lets you export to
    a CSV file. From there, it's a simple matter to import it into a database. phpMyAdmin,
    for example, has such a facility.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For the sake of this illustration, we will assume that we are generating data
    that will end up in the `prospects` table. Here is the SQL statement used to create
    this table:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: 'Now it''s time to create a class that is capable of generating fake data. We
    will then create methods to generate data for each of the fields shown above,
    except for `id`, which is auto-generated:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we define constants and properties that will be used as part of the process:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: 'We then define properties that will be used to generate random letters, street
    names, and e-mail addresses. You can think of these arrays as seeds that can be
    modified and/or expanded to suite your needs. As an example, you might substitute
    street name fragments in Paris for a French audience:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: 'In the constructor, we accept a `Connection` object, used for database access,
    an array of mappings to the fake data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: 'To generate street names, rather than attempt to create a database table, it
    might be more efficient to use a set of seed arrays to generate random combinations.
    Here is an example of how this might work:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: 'Depending on the level of realism desired, you could also build a database
    table that matches postal codes to cities. Postal codes could also be randomly
    generated. Here is an example that generates postal codes for the UK:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: 'Fake e-mail generation can likewise use a set of seed arrays to produce random
    results. We could also program it to receive an existing `$entry` array, with
    parameters, and use those parameters to create the name portion of the address:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: 'For date generation, one approach would be to accept as arguments an existing
    `$entry` array, with parameters. The parameters would be an array where the first
    value is a start date. The second parameter would be the maximum number of days
    to *subtract* from the start date. This effectively lets you return a random date
    from a range. Note that we use `DateTime::sub()` to subtract a random number of
    days. `sub()` requires a `DateInterval` instance, which we build using `P`, the
    random number of days, and then `''D''`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: 'As mentioned at the beginning of this recipe, the data sources we will use
    for fake data generation will vary. In some cases, as shown in the previous few
    steps, we use seed arrays, and build the fake data. In other cases, we might want
    to use a text or CSV file as a data source. Here is how such a method might look:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: 'You will note that we first need to pull the file data into an array, which
    forms the return value. Here is the method that does that for us. We throw an
    `Exception` if the specified file is not found. The file type is identified as
    one of our class constants: `FILE_TYPE_TEXT` or `FILE_TYPE_CSV`. Depending on
    the type, we use either `fgetcsv()` or `fgets()`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: 'Probably the most complicated aspect of this process is drawing random data
    from a database table. We accept as arguments the table name, the name of the
    column that comprises the primary key, an array that maps between the database
    column name in the lookup table, and the target column name:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: 'We are now in a position to set up the prepared statement and initialize a
    number of critical variables:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: 'The actual lookup we place inside a `do...while` loop. The reason for this
    is that we need to run the query at least once to achieve results. Only if we
    do not arrive at a result do we continue with the loop. We generate a random number
    between the lowest ID and the highest ID, and then use this in a parameter in
    the query. Notice that we also decrement a counter to prevent an endless loop.
    This is in case the IDs are not sequential, in which case we could accidentally
    generate an ID that does not exist. If we exceed the maximum attempts, still with
    no results, we throw an `Exception`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: 'We then use the mapping array to retrieve values from the source table using
    keys expected in the destination table:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: 'The heart of this class is a `getRandomEntry()` method, which generates a single
    array of fake data. We loop through `$mapping` one entry at a time and examine
    the various parameters:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: 'The `source` parameter is used to implement what effectively serves as a Strategy
    Pattern. We support four different possibilities for `source`, all defined as
    class constants. The first one is `SOURCE_FILE`. In this case, we use the `getEntryFromFile()`
    method discussed previously:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: 'The callback option returns a value according to the callback supplied in the
    `$mapping` array:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: 'The `SOURCE_TABLE` option uses the database table defined in `$mapping` as
    a lookup. Note that `getEntryFromTable()`, discussed previously, is able to return
    an array of values, which means we need to use `array_merge()` to consolidate
    the results:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: 'The `SOURCE_METHOD` option, which is also the default, uses a method already
    included with this class. We check to see whether parameters are included, and,
    if so, add those to the method call. Note the use of `{}` to influence interpolation.
    If we made a `$this->$value[''name'']()` PHP 7 call, due to the Abstract Syntax
    Tree (AST) rewrite, it would interpolate like this, `${$this->$value}[''name'']()`,
    which is not what we want:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: 'We define a method that loops through `getRandomEntry()` to produce multiple
    lines of fake data. We also add an option to insert to a destination table. If
    this option is enabled, we set up a prepared statement to insert, and also check
    to see whether we need to truncate any data currently in this table:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we loop through the number of lines of data requested, and run `getRandomEntry()`.
    If a database insert is requested, we execute the prepared statement in a `try/catch`
    block. In any event, we turn this method into a generator using the `yield` keyword:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Best practice**'
  prefs: []
  type: TYPE_NORMAL
- en: If the amount of data to be returned is massive, it's much better to yield the
    data as it is produced, thus saving the memory required for an array.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The first thing to do is to ensure you have the data ready for random data generation.
    In this recipe, we will presume that the destination table is `prospects`, which
    has the following SQL database definition shown in step 7.
  prefs: []
  type: TYPE_NORMAL
- en: As a data source for names, you could create text files for first names and
    surnames. In this illustration, we will reference the `data/files` directory,
    and the files `first_names.txt` and `surnames.txt`. For city, state or province,
    postal code, and country, it might be useful to download the data from a source
    such as [http://www.geonames.org/](http://www.geonames.org/), and upload to a
    `world_city_data` table. For the remaining fields, such as address, e-mail, status,
    and so on, you could either use methods built into `FakeData`, or define callbacks.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, be sure to define `Application\Test\FakeData`, adding the content discussed
    in steps 8 to 29\. After you have finished, create a calling program called `chap_13_fake_data.php`,
    which sets up autoloading and uses the appropriate classes. You should also define
    constants that match the path to the database configuration, and names files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, define a mapping array that uses the column names in the destination
    table (prospects) as a key. You need to then define sub-keys for `source`, `name`,
    and any other parameters that are required. For starters, ''`first_name`'' and
    ''`last_name`'' will both use a file as a source, ''name'' points to the name
    of the file, and ''`type`'' indicates a file type of text:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: 'The `''address''`, `''email''`, and `''last_updated''` all use built-in methods
    as a data source. The last two also define parameters to be passed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: 'The `''phone''`, `''status''` and `''budget''` could all use callbacks to provide
    fake data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: 'And finally, `''city''` draws its data from a lookup table, which also gives
    you data for the fields listed in the `''mapping''` parameter. You can then leave
    those keys undefined. Notice that you should also specify the column representing
    the primary key for the table:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: 'You can then define the destination table, a `Connection` instance, and create
    the `FakeData` instance. A `foreach()` loop will suffice to display a given number
    of entries:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs: []
  type: TYPE_PRE
- en: 'The output, for 10 rows, would look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](graphics/B05314_13_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here is a summary of websites with various lists of data that could be of use
    when generating test data:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Type of Data | URL | Notes |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Names | [http://nameberry.com/](http://nameberry.com/) |   |'
  prefs: []
  type: TYPE_TB
- en: '|   | [http://www.babynamewizard.com/international-names-lists-popular-names-from-around-the-world](http://www.babynamewizard.com/international-names-lists-popular-names-from-around-the-world)
    |   |'
  prefs: []
  type: TYPE_TB
- en: '| Raw Name Lists | [http://deron.meranda.us/data/census-dist-female-first.txt](http://deron.meranda.us/data/census-dist-female-first.txt)
    | US female first names |'
  prefs: []
  type: TYPE_TB
- en: '|   | [http://deron.meranda.us/data/census-dist-male-first.txt](http://deron.meranda.us/data/census-dist-male-first.txt)
    | US male first names |'
  prefs: []
  type: TYPE_TB
- en: '|   | [http://www.avss.ucsb.edu/NameFema.HTM](http://www.avss.ucsb.edu/NameFema.HTM)
    | US female first names |'
  prefs: []
  type: TYPE_TB
- en: '|   | [http://www.avss.ucsb.edu/namemal.htm](http://www.avss.ucsb.edu/namemal.htm)
    | US male first names |'
  prefs: []
  type: TYPE_TB
- en: '| Last Names | [http://names.mongabay.com/data/1000.html](http://names.mongabay.com/data/1000.html)
    | US surnames from census |'
  prefs: []
  type: TYPE_TB
- en: '|   | [http://surname.sofeminine.co.uk/w/surnames/most-common-surnames-in-great-britain.html](http://surname.sofeminine.co.uk/w/surnames/most-common-surnames-in-great-britain.html)
    | British surnames |'
  prefs: []
  type: TYPE_TB
- en: '|   | [https://gist.github.com/subodhghulaxe/8148971](https://gist.github.com/subodhghulaxe/8148971)
    | List of US surnames in the form of a PHP array |'
  prefs: []
  type: TYPE_TB
- en: '|   | [http://www.dutchgenealogy.nl/tng/surnames-all.php](http://www.dutchgenealogy.nl/tng/surnames-all.php)
    | Dutch surnames |'
  prefs: []
  type: TYPE_TB
- en: '|   | [http://www.worldvitalrecords.com/browsesurnames.aspx?l=A](http://www.worldvitalrecords.com/browsesurnames.aspx?l=A)
    | International surnames; just change the last letter(s) to get a list of names
    starting with that letter(s) |'
  prefs: []
  type: TYPE_TB
- en: '| Cities | [http://www.travelgis.com/default.asp?framesrc=/cities/](http://www.travelgis.com/default.asp?framesrc=/cities/)
    | World cities |'
  prefs: []
  type: TYPE_TB
- en: '|   | [https://www.maxmind.com/en/free-world-cities-database](https://www.maxmind.com/en/free-world-cities-database)
    |   |'
  prefs: []
  type: TYPE_TB
- en: '|   | [https://github.com/David-Haim/CountriesToCitiesJSON](https://github.com/David-Haim/CountriesToCitiesJSON)
    |   |'
  prefs: []
  type: TYPE_TB
- en: '|   | [http://www.fallingrain.com/world/index.html](http://www.fallingrain.com/world/index.html)
    |   |'
  prefs: []
  type: TYPE_TB
- en: '| Postal Codes | [https://boutell.com/zipcodes/](https://boutell.com/zipcodes/)
    | US only; includes cities, postal codes, latitude and longitude |'
  prefs: []
  type: TYPE_TB
- en: '|   | [http://www.geonames.org/export/](http://www.geonames.org/export/) |
    International; city names, postal codes, EVERYTHING!; free download |'
  prefs: []
  type: TYPE_TB
- en: Customizing sessions using session_start parameters
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Up until PHP 7, in order to override `php.ini` settings for secure session management,
    you had to use a series of `ini_set()` commands. This approach is extremely annoying
    in that you also needed to know which settings were available, and being able
    to re-use the same settings in other applications was difficult. As of PHP 7,
    however, you can supply an array of parameters to the `session_start()` command,
    which immediately sets those values.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We start by developing an `Application\Security\SessOptions` class, which will
    hold session parameters and also have the ability to start the session. We also
    define a class constant in case invalid session options are passed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE97]'
  prefs: []
  type: TYPE_PRE
- en: Next we scan the list of `php.ini` session directives (documented at [http://php.net/manual/en/session.configuration.php](http://php.net/manual/en/session.configuration.php)).
    We are specifically looking for directives that, in the `Changeable` column, are
    marked `PHP_INI_ALL`. Such directives can be overridden at runtime, and are thus
    available as arguments to `session_start()`:![How to do it...](graphics/B05314_13_16.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We then define these as class constants, which will make this class more usable
    for development purposes. Most decent code editors will be able to scan the class
    and give you a list of constants, making it easy to manage session settings. Please
    note that not all settings are shown, in order to conserve space in the book:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs: []
  type: TYPE_PRE
- en: 'We are then in a position to define the constructor, which accepts an array
    of `php.ini` session settings as an argument. We use `ReflectionClass` to get
    a list of class constants, and run the `$options` argument through a loop to confirm
    the setting is allowed. Also note the use of `array_flip()`, which flips keys
    and values, so that the actual values for our class constants form the array key,
    and the name of the class constant becomes the value:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE99]'
  prefs: []
  type: TYPE_PRE
- en: 'We then close with two more methods; one gives us outside access to the allowed
    parameters, while the other starts the session:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Place all the code discussed in this recipe into a `SessOptions.php` file in
    the `Application\Security` directory. You can then define a calling program called
    `chap_13_session_options.php` to test the new class, which sets up autoloading
    and uses the class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE101]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, define an array that uses the class constants as keys, with values as
    desired to manage the session. Note that in the example shown here, session information
    is stored in a subdirectory, `session`, which you need to create:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE102]'
  prefs: []
  type: TYPE_PRE
- en: 'You can now create the `SessOptions` instance and run `start()` to start the
    session. You could use `phpinfo()` here to show some information on the session:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE103]'
  prefs: []
  type: TYPE_PRE
- en: 'If you look for information on cookies using your browser''s developer tools,
    you will note the name is set to `UNLIKELYSOURCE` and the expiration time is 5
    minutes from now:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](graphics/B05314_13_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'If you do a scan of the session directory, you will see that the session information
    has been stored there:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](graphics/B05314_13_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: See also...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For more information on session-related `php.ini` directives, see this summary:
    [http://php.net/manual/en/session.configuration.php](http://php.net/manual/en/session.configuration.php)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
