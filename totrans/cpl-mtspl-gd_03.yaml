- en: Metasploit Components and Environment Configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For any tool that we use to perform a particular task, it''s always helpful
    to know that tool inside out. A detailed understanding of the tool enables us
    to use it aptly, making it perform to the fullest of its capability. Now that
    you have learned some of the absolute basics of the Metasploit Framework and its
    installation, in this chapter, you will learn how the Metasploit Framework is
    structured and what the various components of the Metasploit ecosystem. The following
    topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Anatomy and structure of Metasploit
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Metasploit components--auxiliaries, exploits, encoders, payloads, and post
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting started with msfconsole and common commands
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring local and global variables
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Updating the framework
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Anatomy and structure of Metasploit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The best way to learn the structure of Metasploit is to browse through its
    directory. When using a Kali Linux, the Metasploit Framework is usually located
    at path `/usr/share/metasploit-framework`, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/27cf4c84-1f03-4d55-8e27-dd8e43a708e5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'At a broad level, the Metasploit Framework structure is as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/15ec4cab-a7ef-44c7-903f-ffc91f0201a9.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The Metasploit Framework has a very clear and well-defined structure, and the
    tools/utilities within the framework are organized based on their relevance in
    various phases of the penetration testing life cycle. We'll be using tools/utilities
    from each of these categories as we progress through the book.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we'll have a brief overview of all the Metasploit components.
  prefs: []
  type: TYPE_NORMAL
- en: Metasploit components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Metasploit Framework has various component categories based on their role
    in the penetration testing phases. The following sections will provide a detailed
    understanding of what each component category is responsible for.
  prefs: []
  type: TYPE_NORMAL
- en: Auxiliaries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You have learned so far that Metasploit is a complete penetration testing framework
    and not just a tool. When we call it a framework, it means that it consists of
    many useful tools and utilities. Auxiliary modules in the Metasploit Framework
    are nothing but small pieces of code that are meant to perform a specific task
    (in the scope of our penetration testing life cycle). For example, you might need
    to perform a simple task of verifying whether a certificate of a particular server
    has expired or not, or you might want to scan your subnet and check whether any
    of the FTP servers allow anonymous access. Such tasks can be very easily accomplished
    using auxiliary modules present in the Metasploit Framework.
  prefs: []
  type: TYPE_NORMAL
- en: There are 1000 plus auxiliary modules spread across 18 categories in the Metasploit
    Framework.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following table shows various categories of auxiliary modules present in
    the Metasploit Framework:'
  prefs: []
  type: TYPE_NORMAL
- en: '| `gather` | `pdf` | `vsploit` |'
  prefs: []
  type: TYPE_TB
- en: '| `bnat` | `sqli` | `client` |'
  prefs: []
  type: TYPE_TB
- en: '| `crawler` | `fuzzers` | `server` |'
  prefs: []
  type: TYPE_TB
- en: '| `spoof` | `parser` | `voip` |'
  prefs: []
  type: TYPE_TB
- en: '| `sniffer` | `analyze` | `dos` |'
  prefs: []
  type: TYPE_TB
- en: '| `docx` | `admin` | `scanner` |'
  prefs: []
  type: TYPE_TB
- en: Don't get overwhelmed with the number of auxiliary modules present in the Metasploit
    Framework. You may not need to know each and every module individually. You just
    need to search the right module in the required context and use it accordingly.
    We will now see how to use an auxiliary module.
  prefs: []
  type: TYPE_NORMAL
- en: 'During the course of this book, we will use many different auxiliary modules
    as and when required; however, let''s get started with a simple example:'
  prefs: []
  type: TYPE_NORMAL
- en: Open up the terminal window and start Metasploit using the command `msfconsole`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the `auxiliary` module `portscan/tcp` to perform a port scan against
    a target system.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using the `show` command, list down all parameters that need to be configured
    in order to run this auxiliary module.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using the `set RHOSTS` command, set the IP address of our target system.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using the `set PORTS` command, select the port range you want to scan on your
    target system.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using the `run` command, execute the auxiliary module with the parameters configured
    earlier.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You can see the use of all the previously mentioned commands in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5444ac03-268e-4203-afe2-a517f6ce0114.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Exploits
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Exploits are the most important part of the Metasploit Framework. An exploit
    is the actual piece of code that will give you the required access to the target
    system. There are 2500 plus exploits spread across more than 20 categories based
    on platform that exploit is supported. Now, you might be thinking that out of
    so many available exploits, which is the one that needs to be used. The decision
    to use a particular exploit against a target can be made only after extensive
    enumeration and vulnerability assessment of our target. (Refer to the section
    penetration testing life cycle from [Chapter 1](225d5f1a-f19d-43ba-90eb-c41039afaad7.xhtml),
    *Introduction to Metasploit and Supporting Tools*). Proper enumeration and a vulnerability
    assessment of the target will give us the following information based on which
    we can choose the correct exploit:'
  prefs: []
  type: TYPE_NORMAL
- en: Operating system of the target system (including exact version and architecture)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Open ports on the target system (TCP and UDP)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Services along with versions running on the target system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Probability of a particular service being vulnerable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following table shows the various categories of exploits available in the
    Metasploit Framework:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Linux** | **Windows** | **Unix** | **OS X** | **Apple iOS** |'
  prefs: []
  type: TYPE_TB
- en: '| `irix` | `mainframe` | `freebsd` | `solaris` | `bsdi` |'
  prefs: []
  type: TYPE_TB
- en: '| `firefox` | `netware` | `aix` | `android` | `dialup` |'
  prefs: []
  type: TYPE_TB
- en: '| `hpux` | `jre7u17` | `wifi` | `php` | `mssql` |'
  prefs: []
  type: TYPE_TB
- en: In the upcoming chapters, we'll see how to use an exploit against a vulnerable
    target.
  prefs: []
  type: TYPE_NORMAL
- en: Encoders
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In any of the given real-world penetration testing scenario, it's quite possible
    that our attempt to attack the target system would get detected/noticed by some
    kind of security software present on the target system. This may jeopardize all
    our efforts to gain access to the remote system. This is exactly when encoders
    come to the rescue. The job of the encoders is to obfuscate our exploit and payload
    in such a way that it goes unnoticed by any of the security systems on the target
    system.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following table shows the various encoder categories available in the Metasploit
    Framework:'
  prefs: []
  type: TYPE_NORMAL
- en: '| `generic` | `mipsbe` | `ppc` |'
  prefs: []
  type: TYPE_TB
- en: '| `x64` | `php` | `mipsle` |'
  prefs: []
  type: TYPE_TB
- en: '| `cmd` | `sparc` | `x86` |'
  prefs: []
  type: TYPE_TB
- en: We'll be looking at encoders in more detail in the upcoming chapters.
  prefs: []
  type: TYPE_NORMAL
- en: Payloads
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To understand what a payload does, let's consider a real-world example. A military
    unit of a certain country develops a new missile that can travel a range of 500
    km at very high speed. Now, the missile body itself is of no use unless it's filled
    with the right kind of ammunition. Now, the military unit decided to load high
    explosive material within the missile so that when the missile hits the target,
    the explosive material within the missile explodes and causes the required damage
    to the enemy. So, in this case, the high explosive material within the missile
    is the payload. The payload can be changed based on the severity of damage that
    is to be caused after the missile is fired.
  prefs: []
  type: TYPE_NORMAL
- en: 'Similarly, payloads in the Metasploit Framework let us decide what action is
    to be performed on the target system once the exploit is successful. The following
    are the various payload categories available in the Metasploit Framework:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Singles**: These are sometimes also referred to as inline or non staged payloads.
    Payloads in this category are a completely self-contained unit of the exploit
    and require shellcode, which means they have everything that is required to exploit
    the vulnerability on the target. The disadvantage of such payloads is their size.
    Since they contain the complete exploit and shellcode, they can be quite bulky
    at times, rendering them useless in certain scenarios with size restrictions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Stagers**: There are certain scenarios where the size of the payload matters
    a lot. A payload with even a single byte extra may not function well on the target
    system. The stagers payload come handy in such a situation. The stagers payload
    simply sets up a connection between the attacking system and the target system.
    It doesn''t have the shellcode necessary to exploit the vulnerability on the target
    system. Being very small in size, it fits in well in many scenarios.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Stages**: Once the stager type payload has set up a connection between the
    attacking system and the target system, the "stages" payloads are then downloaded
    on the target system. They contain the required shellcode to exploit the vulnerability
    on the target system.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following screenshot shows a sample payload that can be used to obtain
    a reverse TCP shell from a compromised Windows system:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/cd86e78f-33cc-4b84-9df3-6edf7952937d.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You will be learning how to use various payloads along with exploits in the
    upcoming chapters.
  prefs: []
  type: TYPE_NORMAL
- en: Post
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The **post** modules contain various scripts and utilities that help us to
    further infiltrate our target system after a successful exploitation. Once we
    successfully exploit a vulnerability and get into our target system, post-exploitation
    modules may help us in the following ways:'
  prefs: []
  type: TYPE_NORMAL
- en: Escalate user privileges
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dump OS credentials
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Steal cookies and saved passwords
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Get key logs from the target system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Execute PowerShell scripts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Make our access persistent
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following table shows the various categories of "post" modules available
    in the Metasploit Framework:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Linux** | **Windows** | **OS X** | **Cisco** |'
  prefs: []
  type: TYPE_TB
- en: '| Solaris | Firefox | Aix | Android |'
  prefs: []
  type: TYPE_TB
- en: '| Multi | Zip | Powershell |  |'
  prefs: []
  type: TYPE_TB
- en: The Metasploit Framework has more than 250 such post-exploitation utilities
    and scripts. We'll be using some of them when we discuss more on post-exploitation
    techniques in the upcoming chapters.
  prefs: []
  type: TYPE_NORMAL
- en: Playing around with msfconsole
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have a basic understanding of the structure of the Metasploit Framework,
    let's get started with the basics of `msfconsole` practically.
  prefs: []
  type: TYPE_NORMAL
- en: The `msfconsole` is nothing but a simple command-line interface of the Metasploit
    Framework. Though `msfconsole` may appear a bit complex initially, it is the easiest
    and most flexible way to interact with the Metasploit Framework. We'll use `msfconsole`
    for interacting with the Metasploit framework throughout the course of this book.
  prefs: []
  type: TYPE_NORMAL
- en: Some of the Metasploit editions do offer GUI and a web-based interface. However,
    from a learning perspective, it's always recommended to master the command-line
    console of the Metasploit Framework that is `msfconsole`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s look at some of the `msfconsole` commands:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `banner` command: The `banner` command is a very simple command used to
    display the Metasploit Framework banner information. This information typically
    includes its version details and the number of exploits, auxiliaries, payloads,
    encoders, and nops generators available in the currently installed version.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Its syntax is `msf> banner`. The following screenshot shows the use of the
    `banner` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/58b4e734-0bff-4b84-be19-b7bc9a4e66d7.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The `version` command: The `version` command is used to check the version of
    the current Metasploit Framework installation. You can visit the following site
    in order to check the latest version officially released by Metasploit:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://github.com/rapid7/metasploit-framework/wiki/Downloads-by-Version](https://github.com/rapid7/metasploit-framework/wiki/Downloads-by-Version)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Its syntax is `msf> version`. The following screenshot shows the use of the
    `version` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f158beba-59f0-48ff-9cdc-d725fa9c3c62.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The `connect` command: The `connect` command present in the Metasploit Framework
    gives similar functionality to that of a putty client or netcat. You can use this
    feature for a quick port scan or for port banner grabbing.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Its syntax is `msf> connect <ip:port>`. The following screenshot shows the
    use of the `connect` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/462a7394-2152-419f-9905-19a6355f0e3d.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The `help` command: As the name suggests, the `help` command offers additional
    information on the usage of any of the commands within the Metasploit Framework.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Its syntax is `msf> help`. The following screenshot shows the use of the `help`
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7264dc7f-0742-4616-9a98-aa8d4ff5bbf5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The `route` command: The `route` command is used to add, view, modify, or delete
    the network routes. This is used for pivoting in advanced scenarios, which we
    will cover later in this book.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Its syntax is `msf> route`. The following screenshot shows the use of the `route`
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fa5f8fb1-6c01-4200-b0ce-ec3d79a91402.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The `save` command: At times, when performing a penetration test on a complex
    target environment, a lot of configuration changes are made in the Metasploit
    Framework. Now, if the penetration test needs to be resumed again at a later point
    of time, it would be really painful to configure the Metasploit Framework again
    from scratch. The `save` command saves all the configurations to a file and it
    gets loaded upon the next startup, saving all the reconfiguration efforts.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Its syntax is `msf>save`. The following screenshot shows the use of the `save`
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7a17a776-4823-42c4-9305-f000a33faf19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The `sessions` command: Once our target is exploited successfully, we normally
    get a shell session on the target system. If we are working on multiple targets
    simultaneously, then there might be multiple sessions actively open at the same
    time. The Metasploit Framework allows us to switch between multiple sessions as
    and when required. The `sessions` command lists down all the currently active
    sessions established with various target systems.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Its syntax is `msf>sessions`. The following screenshot shows the use of the
    `sessions` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1f2d3a78-714a-4fc4-9a5f-35dbd857601e.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The `spool` command: Just like any application has debug logs that help out
    in debugging errors, the `spool` command prints out all the output to a user-defined
    file along with the console. The output file can later be analyzed based on the
    requirement.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Its syntax is `msf>spool`. The following screenshot shows the use of the `spool`
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/65a945d8-6273-4aff-a321-d14209ccd793.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The `show` command: The `show` command is used to display the available modules
    within the Metasploit Framework or to display additional information while using
    a particular module.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Its syntax is `msf> show`. The following screenshot shows the use of the `show`
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1a7b8409-4229-42c5-885a-3432802c1a70.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The `info` command: The `info` command is used to display details about a particular
    module within the Metasploit Framework. For example, you might want to view information
    on meterpreter payload, such as what the supported architecture ia and what the
    options required in order to execute this are:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Its syntax is `msf> info`. The following screenshot shows the use of the `info`
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0b92866c-e5a6-4203-a7f5-e95acd2c95c6.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The `irb` command: The `irb` command invokes the interactive Ruby platform
    from within the Metasploit Framework. The interactive Ruby platform can be used
    for creating and invoking custom scripts typically during the post-exploitation
    phase.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Its syntax is `msf>irb`. The following screenshot shows the use of the `irb`
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/be2a6bc4-77c8-4e3a-babb-a9b753d35136.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The `makerc` command: When we use the Metasploit Framework for pen testing
    a target, we fire a lot many commands. At end of the assignment or that particular
    session, we might want to review what all activities we performed through Metasploit.
    The `makerc` command simply writes out all the command history for a particular
    session to a user defined output file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Its syntax is `msf>makerc`. The following screenshot shows the use of the `makerc`
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bb26c1eb-8e9f-4811-b165-e5c5f77b3c5c.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Variables in Metasploit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For most exploits that we use within the Metasploit Framework, we need to set
    values to some of the variables. The following are some of the common and most
    important variables in the Metasploit Framework:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Variable name** | **Variable description** |'
  prefs: []
  type: TYPE_TB
- en: '| `LHOST` | Local Host: This variable contains the IP address of the attacker''s
    system that is the IP address of the system from where we are initiating the exploit.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `LPORT` | Local Port: This variable contains the (local) port number of the
    attacker''s system. This is typically needed when we are expecting our exploit
    to give us reverse shell. |'
  prefs: []
  type: TYPE_TB
- en: '| `RHOST` | Remote Host: This variable contains the IP address of our target
    system. |'
  prefs: []
  type: TYPE_TB
- en: '| `RPORT` | Remote Port: This variable contains the port number on the target
    system that we will attack/exploit. For example, for exploiting an FTP vulnerability
    on a remote target system, RPORT will be set to 21. |'
  prefs: []
  type: TYPE_TB
- en: 'The `get` command: The `get` command is used to retrieve the value contained
    in a particular local variable within the Metasploit Framework. For example, you
    might want to view what is the IP address of the target system that you have set
    for a particular exploit.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Its syntax is `msf>get`. The following screenshot shows the use of the `msf>
    get` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e67fe1c2-7067-48b1-af06-6dbaf39b2a2e.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The `getg` command: The `getg` command is very similar to the `get` command,
    except it returns the value contained in the global variable.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Its syntax is `msf> getg`. The following screenshot shows the use of the `msf>
    getg` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/21ba77ae-8ba7-417e-9ff6-dcbb9a602d2d.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The `set` and `setg` commands: The `set` command assigns a new value to one
    of the (local) variables (such as `RHOST`, `RPORT`, `LHOST`, and `LPPORT`) within
    the Metasploit Framework. However, the `set` command assigns a value to the variable
    that is valid for a limited session/instance. The `setg` command assigns a new
    value to the (global) variable on a permanent basis so that it can be used repeatedly
    whenever required.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Its syntax is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'We can see the `set` and `setg` commands in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2a690008-4b20-45aa-9323-462d09b1e925.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The `unset` and `unsetg` commands: The `unset` command simply clears the value
    previously stored in a (local) variable through the `set` command. The `unsetg`
    command clears the value previously stored in a (global) variable through the
    `setg` command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'syntax is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'We can see the `unset` and `unsetg` commands in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6d69985e-c49e-474d-9ca7-aa714603e711.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Updating the Metasploit Framework
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Metasploit Framework is commercially backed by Rapid 7 and has a very active
    development community. New vulnerabilities are discovered almost on a daily basis
    in various systems. For any such newly discovered vulnerability, there's quite
    a possibility that you get a ready-to-use exploit in the Metasploit Framework.
    However, in order to keep abreast with the latest vulnerabilities and exploits,
    it's important to keep the Metasploit Framework updated. You may not need to update
    the framework on a daily basis (unless you are very actively involved in penetration
    testing); however, you can target for weekly updates.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Metasploit Framework offers a simple utility called `msfupdate` that connects
    to the respective online repository and fetches the updates:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d3a1b5d7-47e2-4514-99aa-aba935b30953.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we have seen how the Metasploit Framework is structured and
    some common console commands. In the next chapter, we''ll practically start using
    the Metasploit Framework for performing information gathering and enumeration
    on our target systems. For using most modules within the Metasploit Framework,
    remember the following sequence:'
  prefs: []
  type: TYPE_NORMAL
- en: Use the `use` command to select the required Metasploit module.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the `show options` command to list what all variables are required in order
    to execute the selected module.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the `set` command to set the values for required variables.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the `run` command to execute the module with the variables configured earlier.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Exercises
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can try the following exercises:'
  prefs: []
  type: TYPE_NORMAL
- en: Browse through the directory structure of the Metasploit Framework
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Try out some of the common console commands discussed in this chapter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Update the Metasploit Framework to the latest available version
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
