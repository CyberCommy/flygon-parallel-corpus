- en: '*Chapter 9*: Introducing Helm for Kubernetes'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we learned how to install and use Kustomize. In this
    chapter, let's learn about Helm ([https://helm.sh](https://helm.sh)).
  prefs: []
  type: TYPE_NORMAL
- en: Helm is the de facto Kubernetes package manager, and one of the best and easiest
    ways to install any kind of complex application on Kubernetes.
  prefs: []
  type: TYPE_NORMAL
- en: Helm is not part of `kubectl`, nor does it have a `kubectl` plugin, but it plays
    a big role in the Kubernetes space and is a must-know tool.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we are going to learn about Helm v3, in particular, how to
    install applications, upgrade and roll back application releases, create and lint
    Helm charts, and extend Helm with plugins.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: We are going to use Helm v3 as it was the latest version of Helm at the time
    of writing.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''re going to cover the following main topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to Helm
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing applications using Helm charts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Upgrading Helm releases
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rolling back to a previous Helm release
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Helm's template command
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a Helm chart
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Helm's linting feature
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Extending Helm with plugins
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction to Helm
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Helm is a Kubernetes package manager that allows developers and users an easy
    way to package, configure, share, and deploy Kubernetes applications onto Kubernetes
    clusters.
  prefs: []
  type: TYPE_NORMAL
- en: You can think of Helm as the same as the Homebrew/APT/Yum package managers,
    but for Kubernetes.
  prefs: []
  type: TYPE_NORMAL
- en: Helm v3 is based on a client-only architecture. It connects to the Kubernetes
    API the same way as `kubectl` does, by using a `kubeconfig` file containing the
    Kubernetes cluster connection settings. So where `kubectl` works, the Helm CLI
    will work too, using the same `kubectl` capabilities and permissions.
  prefs: []
  type: TYPE_NORMAL
- en: 'To better understand Helm, you should get familiar with the following concepts:'
  prefs: []
  type: TYPE_NORMAL
- en: '**The Helm CLI**: A command-line tool that interacts with the Kubernetes API
    and does various functions, such as installing, upgrading, and deleting Helm releases.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**A chart**: This is a collection of template files that describe Kubernetes
    resources.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Chart templating**: Helm chart templating language used in the charts.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**A repository**: A Helm repository is a location where packaged charts are
    stored and shared.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**A release**: A specific instance of a chart deployed to a Kubernetes cluster.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's take a look at each one of them in detail in the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: The Helm CLI
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Helm CLI can be installed on different operating systems using the following
    commands:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Installing on macOS is done as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Installing on Windows is done with the following command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Installing on Linux is done as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'You can get all available Helm CLI commands with `helm –h`. Let''s list the
    most used ones, along with their descriptions:'
  prefs: []
  type: TYPE_NORMAL
- en: '`helm repo add`: Adds a Helm chart repository to the local cache list, after
    which we can reference it to pull charts from the repository.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`helm repo update`: Gets the latest information about chart repositories; the
    information is stored locally.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`helm search repo`: Searches for charts in the given repositories.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`helm pull`: Downloads a given chart from the chart repository.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`helm upgrade -i`: If there is no release then install it, otherwise upgrade
    the release.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`helm ls`: Lists releases in the current namespace. If the `-A` flag is provided,
    it will list all the namespaces.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`helm history`: Prints historical revisions for a given release.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`helm rollback`: Rolls back a release to a previous revision.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`helm template`: Renders chart templates locally and displays the output.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`helm create`: Creates a chart.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`helm lint`: Lints a chart.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`helm plugin`: Installs, lists, updates, and uninstalls Helm plugins.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's learn each one of these in more detail in the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: Helm charts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A chart is a Helm package. It is a collection of template files that describe
    Kubernetes resources. It uses templating to create Kubernetes manifests.
  prefs: []
  type: TYPE_NORMAL
- en: 'An example Helm chart structure is shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.1 – hart folders layout'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B16411_09_001.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.1 – Chart folders layout
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s discuss some of the preceding contents in detail:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Chart.yaml`: The file that contains information about the chart''s metadata.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`charts`: The folder where sub-charts get stored.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`templates`: The folder where template files get stored.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`values.yaml`: A YAML-formatted file with configuration values used by the
    chart templates. These values can be resources, replica counts, or an image repository
    and tag, among other things.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: To change values, it is recommended to use the `override-values.yaml` file,
    in which you just enter the values you want to change. Changing the default `values.yaml`
    file that comes with the chart is not recommended, as you might lose track of
    changes in the newer versions of the file.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have learned some of the basics of the Helm chart structure, let's
    dive into chart templating.
  prefs: []
  type: TYPE_NORMAL
- en: Chart templating
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The strongest feature of Helm is chart templating. The Helm template language
    is based on the Go language package `text/template` syntax. Values used with templating
    syntax can be employed to customize Kubernetes resource manifests. Before chart
    installation, Helm renders the chart's templates by injecting specified values
    and then does the chart install.
  prefs: []
  type: TYPE_NORMAL
- en: Values are read from the default `values.yaml` file that comes with the chart,
    or a user-provided file, for example, named `override-values.yaml`. Both files'
    values will be combined and then applied to the chart.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at the following chart template example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.2 – Chart template example'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B16411_09_002.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.2 – Chart template example
  prefs: []
  type: TYPE_NORMAL
- en: The preceding code snippet of the Helm template, which is a Kubernetes service
    resource, allows us to set the service type and port. If the default values do
    not suit your requirements, you can change the default values by providing new
    ones using a custom `override-values.yaml` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Other values such as `name`, `labels`, and `selector` get injected from the
    `_helpers.tpl` file, which is the default location for template partials:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.3 – A partial example of _helpers.tpl'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B16411_09_003.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.3 – A partial example of _helpers.tpl
  prefs: []
  type: TYPE_NORMAL
- en: The preceding code snippet is of a `_helpers.tpl` file that defines labels and
    the selector to be injected into the chart's templates.
  prefs: []
  type: TYPE_NORMAL
- en: Repositories
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A repository is a location where packaged charts are stored and shared. It can
    be any web server capable of serving files. Charts in a repository are stored
    in the compressed `.tgz` format.
  prefs: []
  type: TYPE_NORMAL
- en: Releases
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A release is a specific instance of a chart deployed to a Kubernetes cluster.
    One Helm chart can be installed many times using the same release name, and each
    time a new release version will be created.
  prefs: []
  type: TYPE_NORMAL
- en: The release information for a particular release is stored in the same namespace
    as the release itself.
  prefs: []
  type: TYPE_NORMAL
- en: You can install the same Helm chart using the same release name but a different
    namespace an infinite number of times.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have learned some of the basics of Helm, let's dive into installing
    applications using charts.
  prefs: []
  type: TYPE_NORMAL
- en: Installing applications using Helm charts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are many Helm chart repositories, and it is way too much hassle to set
    them all up one by one.
  prefs: []
  type: TYPE_NORMAL
- en: 'Instead, we are going to use as our central Helm chart repository [https://chartcenter.io](https://chartcenter.io),
    which has over 300 Helm repositories and can be our single source of truth to
    install all the charts from one location. It also has a nice UI where you can
    search for charts and get very informative details about them:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.4 – ChartCenter UI'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B16411_09_004.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.4 – ChartCenter UI
  prefs: []
  type: TYPE_NORMAL
- en: The preceding screenshot shows the ChartCenter **UI**.
  prefs: []
  type: TYPE_NORMAL
- en: 'It is also very easy to set ChartCenter as your central Helm repository, as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The preceding commands added the `center` chart repository and updated the Helm
    local cache with its content.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we can try searching for the `postgresql` chart by running the `$ helm
    search repo center/bitnami/postgresql -l | head -n 5` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.5 – Searching for PostgreSQL chart'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B16411_09_005.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.5 – Searching for the PostgreSQL chart
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding screenshot, we can see that we got the latest five versions
    of the Bitnami PostgreSQL chart.
  prefs: []
  type: TYPE_NORMAL
- en: Before installing the PostgreSQL chart, we should set a password, as it is a
    good practice to set your own password instead of using one generated by Helm
    charts.
  prefs: []
  type: TYPE_NORMAL
- en: 'By reading the chart''s `README` at [https://chartcenter.io/bitnami/postgresql](https://chartcenter.io/bitnami/postgresql),
    we can find the value name we need to use:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.6 – PostgreSQL chart password'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B16411_09_006.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.6 – PostgreSQL chart password
  prefs: []
  type: TYPE_NORMAL
- en: The preceding screenshot shows us that the `postgresqlPassword` variable in
    the `values.yaml` file is needed to set the password for the PostgreSQL chart.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let''s create a `password-values.yaml` file to store the PostgreSQL
    password:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'And let''s install it using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The output for the preceding command is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.7 – Helm installing the PostgreSQL chart'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B16411_09_007.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.7 – Helm installing the PostgreSQL chart
  prefs: []
  type: TYPE_NORMAL
- en: The preceding command installed the PostgreSQL chart with the name `postgresql`
    into the current namespace.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: The preceding `helm upgrade` command has an `–i` flag (with the long name of
    `--install`), which allows us to use the same command for both the first install
    and the following upgrades afterward.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s check what was installed with the chart using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of the preceding command is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.8 – Listing all installed resources'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B16411_09_008.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.8 – Listing all installed resources
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding screenshot, we can see the `postgresql` pod, two `postgresql-`related
    services, and `statefulset`. Looking at `service/postgresql`, we can see that
    `postgresql` can be accessed by other Kubernetes applications on `postgresql:5432`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s check that all secrets were properly created by running the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of the preceding command is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.9 – Listing all installed secrets'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B16411_09_009.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.9 – Listing all installed secrets
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding screenshot, we see the `postgresql` secret where the PostgreSQL
    password is stored, and `sh.helm.release.v1.postgresql.v1`, where the Helm release
    information is stored.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s check for Helm releases in the current namespace by running the
    following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of the preceding command is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.10 – Listing Helm releases'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B16411_09_010.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.10 – Listing Helm releases
  prefs: []
  type: TYPE_NORMAL
- en: 'In the preceding screenshot, we see a successfully deployed Helm release of
    `postgresql`, where we have a list of the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`STATUS`: Shows the release status as `deployed`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CHART`: Shows the chart name and version as `postgresql-9.2.1`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`APP VERSION`: Shows the PostgreSQL version; in this case, `11.9.0`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This was easy to install – we just had to provide the password, and boom, we
    have a fully installed PostgreSQL instance, and its password is even stored in
    the secret.
  prefs: []
  type: TYPE_NORMAL
- en: Upgrading Helm releases
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous section, we installed PostgreSQL, so now let's try and upgrade
    it. We need to know how to do this because it will have to be upgraded from time
    to time.
  prefs: []
  type: TYPE_NORMAL
- en: For the upgrade, we are going to use the latest available PostgreSQL chart version,
    that is, `9.3.2.`
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s get and run the upgrade with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of the preceding command is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.11 – Listing Helm releases'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B16411_09_011.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.11 – Listing Helm releases
  prefs: []
  type: TYPE_NORMAL
- en: We ran the preceding `helm upgrade` command to change the `postgresql` chart
    version to `9.3.2`, but we see the PostgreSQL version is still the same as it
    was, that is, `11.9.0`, so that means the chart itself received some changes,
    but the application version was kept the same.
  prefs: []
  type: TYPE_NORMAL
- en: Running `helm ls` shows `REVISION 2`, which means the second release for the
    PostgreSQL chart.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s check the secrets one more time by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of the preceding command is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.12 – Listing Helm releases'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B16411_09_012.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.12 – Listing Helm releases
  prefs: []
  type: TYPE_NORMAL
- en: From the preceding screenshot, we can see a new secret, `sh.helm.release.v1.postgresql.v2`,
    which is where the PostgreSQL upgrade release was stored.
  prefs: []
  type: TYPE_NORMAL
- en: It's nice to see how Helm keeps track of all releases and allows easy application
    upgrades with a single `helm upgrade` command.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: A Helm release contains all Kubernetes templates from the chart, which make
    it much easier to track them (from the perspective of releases) as one single
    unit.
  prefs: []
  type: TYPE_NORMAL
- en: Let's learn how to do a release rollback. We'll do this because, from time to
    time, releases can go bad and need to be rolled back.
  prefs: []
  type: TYPE_NORMAL
- en: Rolling back to a previous Helm release
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, let's see how to roll back to a previous version using the
    `helm rollback` command.
  prefs: []
  type: TYPE_NORMAL
- en: The `helm rollback` command is unique to Helm, and it allows us to roll back
    the whole application, so you do not have to worry about which Kubernetes resources
    need to be rolled back specifically.
  prefs: []
  type: TYPE_NORMAL
- en: Of course, when dealing with the release IDs of real-world applications, database
    schemas get changed as well, so to roll back the frontend application, you have
    to roll back the database schema changes too. This means that things aren't always
    so straightforward as they may seem here, but using Helm still simplifies some
    parts of the application release rollback process.
  prefs: []
  type: TYPE_NORMAL
- en: 'To run the `helm rollback` command, we first need to know the release revision
    we want to roll back to, which we can find with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of the preceding command is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.13 – Listing Helm release revisions'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B16411_09_013.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.13 – Listing Helm release revisions
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding `helm history postgresql` command, we got a list of release
    revisions.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, we want to roll back `postgresql` to revision `1`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of the preceding command is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.14 – Helm rollback release'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B16411_09_014.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.14 – Helm rollback release
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding screenshot, we see that the rollback was done with the `helm
    rollback postgresql 1` command and now we see three revisions, as even when doing
    a rollback, a new release gets created.
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, rolling back to the previous release is quite easy.
  prefs: []
  type: TYPE_NORMAL
- en: Using Helm's template command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With Helm's helm `template` command, you can check the output of the chart in
    fully rendered Kubernetes resource templates. This is a very handy command to
    check the templates' outputs, especially when you are developing a new chart,
    making changes to the chart, debugging, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, let''s check it out by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: The preceding command will print all templates on the screen. Of course, you
    can pipe it out to the file as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'As the output is very long, we aren''t going to print all of it, but only parts
    of the Kubernetes manifest:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: The preceding output shows all of the resources that are part of the `postgresql`
    chart. The resources are divided with `---`.
  prefs: []
  type: TYPE_NORMAL
- en: '`helm template` is a powerful command for checking a chart''s templates and
    printing the output so you read it through. `helm template` doesn''t connect to
    the Kubernetes cluster, it only fills the templates with values and prints the
    output.'
  prefs: []
  type: TYPE_NORMAL
- en: You can achieve the same thing by adding `--dry-run --debug` flags to the `helm
    upgrade` command. With this, Helm will validate the templates against the Kubernetes
    cluster.
  prefs: []
  type: TYPE_NORMAL
- en: 'An example of the full command would look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: We have learned a few handy Helm commands to be used before installing or upgrading
    our Helm release.
  prefs: []
  type: TYPE_NORMAL
- en: Another strong use case for using `helm template` is to render templates to
    a file and then compare them. This is useful for comparing chart versions or the
    impact of customized parameters on the final output.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Helm chart
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have learned many cool tricks we can do with Helm! Let's now learn how to
    create a Helm chart.
  prefs: []
  type: TYPE_NORMAL
- en: The `helm create` command creates an example chart for you, so you can use it
    as a base and update it with the required Kubernetes resources, values, and so
    on. It creates a fully working `nginx` chart, so we are going to name the chart
    by that name.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s now check how easy it is to create a chart by running the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of the preceding command is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.15 – The helm create command'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B16411_09_015.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.15 – The helm create command
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding screenshot, we ran the `helm create nginx` command, where `nginx`
    is our chart name. The name is also used to create a new folder where the chart
    content will be stored. The folder structure is shown using the `tree nginx` command.
  prefs: []
  type: TYPE_NORMAL
- en: As you can see in the screenshot, the `deployment.yaml` file, **Horizontal Pod
    Autoscaler** (**HPA**), `ingress`, `service`, and `serviceaccount` resource templates
    have been created, all of which provide a good base to start from.
  prefs: []
  type: TYPE_NORMAL
- en: The preceding command also created the `test-connection.yaml` file so we can
    run a test with `helm test` against the installed `nginx` chart.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s install the chart by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of the preceding command is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.16 – Installing the nginx chart'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B16411_09_016.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.16 – Installing the nginx chart
  prefs: []
  type: TYPE_NORMAL
- en: 'In the preceding screenshot, we ran `helm install nginx nginx`. This command
    uses the following basic syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Here, `<CHART NAME>` is the local folder, so note that you can install the chart
    from remote Helm repositories and also from local folders, both with the same
    command.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next command we used is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: This command helped us to show the resources deployed by default by the chart.
  prefs: []
  type: TYPE_NORMAL
- en: 'As we already mentioned the `helm test` command, let''s check out how that
    command functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of the preceding command is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.17 – Testing the nginx chart'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B16411_09_017.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.17 – Testing the nginx chart
  prefs: []
  type: TYPE_NORMAL
- en: The preceding `helm test nginx` command runs the test against the Helm release
    named `nginx`. The output of the `kubectl get pods` command shows the `nginx-test-connection`
    pod that was used to run the chart test and was then stopped.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, let''s check the contents of the `test-connection.yaml` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of the preceding command is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.18 – test-connection.yaml content'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B16411_09_018.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.18 – test-connection.yaml content
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding screenshot, you can see a simple pod template that runs the
    `curl` command against the `nginx` service resource.
  prefs: []
  type: TYPE_NORMAL
- en: 'This `args: [''{{ include "nginx.fullname" . }}:{{ .Values.service.port }}'']`
    line of template code gets converted to `nginx:80` when the actual Kubernetes
    resource gets created.'
  prefs: []
  type: TYPE_NORMAL
- en: Simple and easy, right? As we can see, the `helm create` command creates a working
    chart with the example resource templates, and even with the test template.
  prefs: []
  type: TYPE_NORMAL
- en: Using Helm's linting feature
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we've learned how to create a Helm chart. However, we also need to know
    how to check the chart for possible issues and errors. For that, we can use the
    `helm lint <CHART NAME>` command, which will check the Helm chart content by running
    a series of tests to verify the chart integrity.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s `lint` the `nginx` chart we have created:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of the preceding command is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.19 – Linting the nginx chart'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B16411_09_019.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.19 – Linting the nginx chart
  prefs: []
  type: TYPE_NORMAL
- en: As you can see in the preceding screenshot, our chart has no issues and can
    be installed safely. The `[INFO]` message is just the warning that the chart's
    icon is missing, which can be safely ignored.
  prefs: []
  type: TYPE_NORMAL
- en: It is really recommend to have it if you want to host your charts for example
    in [https://chartcenter.io](https://chartcenter.io) where it gets shown in its
    UI.
  prefs: []
  type: TYPE_NORMAL
- en: Extending Helm with plugins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Helm can be extended with plugins as well. Plugins are useful to extend Helm
    features that are not part of the Helm CLI, as Helm might not have everything
    that you need.
  prefs: []
  type: TYPE_NORMAL
- en: There is no central Helm plugins repository yet, where you would be able to
    see a list of all available plugins, nor is there a Helm plugin manager.
  prefs: []
  type: TYPE_NORMAL
- en: 'As most of the plugins are stored in GitHub repositories, and it is recommended
    to use the GitHub topic `helm-plugin` to label the plugin, you can easily search
    for available plugins there:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.20 – Helm plugins search on GitHub'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B16411_09_020.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.20 – Helm plugins search on GitHub
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding screenshot [https://github.com/search?q=helm-plugin](https://github.com/search?q=helm-plugin)
    was used to search for Helm plugins in GitHub.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s see how easy it is to install a Helm plugin:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of the preceding command is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.21 – Helm plugin helm-diff being installed'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B16411_09_021.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.21 – Helm plugin helm-diff being installed
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding command, `helm plugin list`, we checked for installed plugins,
    then we used `helm plugin` install [https://github.com/databus23/helm-diff](https://github.com/databus23/helm-diff)
    to install the `helm-diff` plugin. The preceding plugin installation output was
    cut as the installed plugin prints a lot of information.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s check the plugins list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of the preceding command is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.22 – Helm plugin list'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B16411_09_022.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.22 – Helm plugin list
  prefs: []
  type: TYPE_NORMAL
- en: 'We see that the `diff` plugin is installed, which is basically a new Helm command:
    `helm diff`.'
  prefs: []
  type: TYPE_NORMAL
- en: We are not going to check how `helm diff` works, but it is a very handy one
    as you can check the differences between the installed and new chart versions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s install one more:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of the preceding command is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.23 – Helm plugin install helm-kubeval'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B16411_09_023.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.23 – helm plugin install helm-kubeval
  prefs: []
  type: TYPE_NORMAL
- en: The preceding command, `helm plugin install` [https://github.com/instrumenta/helm-kubeval](https://github.com/instrumenta/helm-kubeval),
    installed the `kubeval` plugin, which validates Helm charts against Kubernetes
    schemas.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s validate the `nginx` chart that we created with `helm create` before:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of the preceding command is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.24 – Validating nginx chart with kubeval plugin'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B16411_09_024.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.24 – Validating the nginx chart with the kubeval plugin
  prefs: []
  type: TYPE_NORMAL
- en: The preceding `helm kubeval nginx` command validated the `nginx` chart – as
    we can see, it's all green, so no issues there. This plugin is a good addition
    to the `helm lint` command, and the combination of both gives you nice tooling
    to check charts with.
  prefs: []
  type: TYPE_NORMAL
- en: Now, we know how to extend Helm with extra features, as one tool cannot have
    everything. Plugins are easy to write as well, and you can learn that in your
    own time, of course.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have learned how to use Helm for installing, upgrading,
    rolling back releases, checking chart templates' output, creating a chart, linting
    a chart, and extending Helm with plugins.
  prefs: []
  type: TYPE_NORMAL
- en: Helm is a powerful tool with which you can deploy both simple and complex Kubernetes
    applications. It will help you to deploy real-world applications, especially as
    there are so many different charts ready to use from many Helm repositories.
  prefs: []
  type: TYPE_NORMAL
- en: In the last chapter of this book, we're going to learn `kubectl` best practices
    and `kubectl` commands for Docker users.
  prefs: []
  type: TYPE_NORMAL
