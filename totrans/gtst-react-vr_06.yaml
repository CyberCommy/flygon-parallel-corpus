- en: Working with Poly and the Gon Family
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When people that are just getting used to computer graphics see some of the
    first VR graphics, their first reaction is "*Oh no, not polygons!"* A friend of
    mine said this in exasperation, when looking at her first massively multiplayer
    online role play game. It wasn''t as low poly as *Money for Nothing,* but it was
    pretty close. *Money for Nothing* was one of the first music videos that used
    computer graphics and looked something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/4b7e52a0-ee86-4846-9565-3bb646d51bac.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Polygons are the best way to present real-time graphics. In this section, we
    will have to make a few of them! You may already be familiar with **Computer Aided**
    (**Design**/**Drafting**/**Drawing**) (**CAD**) software or Computer Modeling software;
    or you might be a complete newcomer. There are so many different CAD systems,
    we are going to use Blender, a freely available/open source CAD system to illustrate
    some of the important ways to bring interesting objects  into Virtual Reality.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, you will learn:'
  prefs: []
  type: TYPE_NORMAL
- en: How to perform basic polygon modeling
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to export a model in OBJ form from Blender
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to apply basic UV texture mapping
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to export texture maps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to create an MTL file to properly show real-time OBJ texturing and materials
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Polygons and why we like them
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'I think the confusion with *"Oh no, not polygons"* is that polygons, unless
    they are elevated to an art form, as in the preceding music video, can be a really
    crude way of creating something. For example, this does not look much like an
    apple:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/d544809d-1289-4dab-bfd9-cf2f02312be5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Many CAD systems do have other representations such as **Non**-**Uniform Rational
    B**-**Spline** (**NURBS**), which is a type of curve, or primitives that essentially
    have no polygons but are what they represent. A sphere, for example, may be arbitrarily
    smooth with no facets or flat areas.
  prefs: []
  type: TYPE_NORMAL
- en: The world would be boring if everything was just cubes and spheres. Unless it
    was Minecraft, then it would be pretty cool. Aside from Minecraft, many CAD systems
    build up more interesting objects via **Constructive Solid Geometry** (**CSG**)
    to drill out and add the basic primitives to other primitives to make more complex
    objects.
  prefs: []
  type: TYPE_NORMAL
- en: Why doesn't VR use some of these techniques?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Generally speaking, they are slow. Something has to convert the precise, accurate
    mathematical models into something that video hardware can display. Some video
    cards and advanced APIs can build objects out of things other than polygons, calculate
    smooth curves, and the like, but by far the most common workflow in the VR and
    game industry revolves around polygons and textures.
  prefs: []
  type: TYPE_NORMAL
- en: We can, therefore, take polygons as a given. Modern video cards, and high-end
    cell phones have quite a lot of capability when it comes to rendering objects,
    although to maintain frame rates for VR, we do have to pay attention to the number
    of polygons.
  prefs: []
  type: TYPE_NORMAL
- en: 'The good news is that, you can make very good looking VR objects for a reasonable
    low number of polygons. For example, take a look at our apple. The low resolution
    version just shown has just 44 faces (polygons) and 24 vertices (points). If we
    increase the number of polygons to just 492, it looks significantly better:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/7f6942ba-3cca-400f-b13a-d64b9e730552.png)In these examples, I''m
    using Blender version, v2.79\. You can use any CAD program that will read and
    write to OBJ files, which is nearly all of them. I use Blender because it is free,
    so anyone reading this book can follow along without worrying about purchasing
    an expensive CAD program.'
  prefs: []
  type: TYPE_NORMAL
- en: Blender is very full featured and can certainly be used for production work,
    although describing every possible CAD system and recommending one is out of the
    scope of this book (and I never like to discuss religion publicly!). From the
    preceding model though, you can see the limits of Blender; this model had rather
    strange **texture mapping** and reducing the resolution too much created some
    weird stripping on the texture map.
  prefs: []
  type: TYPE_NORMAL
- en: 'Of course, we could just throw polygons at the system like we are running on
    a PC from 2030, nearly 512 times faster than what we have now, if Moore''s law
    holds out. Our apple would look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/64396fd3-0e9c-42a9-a7a6-36959e3393a1.png)'
  prefs: []
  type: TYPE_IMG
- en: It is really not that much different to the medium resolution apple, although
    those weird texture lines have disappeared. It looks pretty good (and this is
    not a full detail render). To make the lower resolution polygons, I did a quick
    decimation in Blender. Decimate is Blender's way of taking a model with a lot
    of polygons and reducing it to fewer, and is a very handy way to take very complicated
    models and make them Virtual Reality ready. Performing a decimate by hand, and
    applying new textures to the model, would probably get rid of the seams.
  prefs: []
  type: TYPE_NORMAL
- en: For advanced modelers, you can use a low polygon version of your model, in conjunction
    with a high polygon version, to make a normal map, which unlike a bump map, allows
    the model to look like it has more polygons than it really does.
  prefs: []
  type: TYPE_NORMAL
- en: You may need to experiment some with normal mapping; it really depends on the
    browser and model.
  prefs: []
  type: TYPE_NORMAL
- en: Now, you might be thinking you'd prefer to use the apple with 25,206 faces.
    It might work, but this is a fairly large model. Many people ask *"How many polygons
    can I use?"* although this is a difficult question to answer. It would be like
    asking your mother how many groceries can she fit in the car? A lot of it depends
    on what groceries. If she is bringing back a 24 pack of that nice comfy toilet
    tissue, I can tell you from personal experience that only one or two will fit
    in a 2-seater sports car. (Relax, I'm not bragging, my sports car is 12 years
    old.)
  prefs: []
  type: TYPE_NORMAL
- en: A better way to think of your polygon budget is in comparison to the other objects
    you could have. That high resolution apple? For the same speed (very roughly),
    you could have over 48 of the medium resolution apples.
  prefs: []
  type: TYPE_NORMAL
- en: If you are going to offer refreshments to your Space Gallery patrons, would
    you rather give out 1 or 48?
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/4314ed05-7fa3-4a7a-9d39-39b069b891da.jpg)Keep your objects as low
    resolution as possible, and still maintain the visual look you need. You may need
    access to low poly objects or a good CAD system that can reduce polygons.'
  prefs: []
  type: TYPE_NORMAL
- en: After having said that, I was getting somewhat reasonable frame rates from the
    previous one. My goal isn't to give you an absolute number, but to show how important
    a vertex budget is.
  prefs: []
  type: TYPE_NORMAL
- en: What is a polygon? discussion of vertices, polygons, and edges
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you use a modeling program, you will not have to deal with the intricacies
    of the definitions of these objects much. However, from time to time you may need
    to get into the details, so some background is in order. If you are an old hand
    at computer graphics, you may already know a lot of this. I do include some practical
    advice on how best to get them into React VR, so it would be good to review.
  prefs: []
  type: TYPE_NORMAL
- en: A polygon is an *n*-sided object composed of vertices (points), edges, and faces.
    A face can face in or out or be double sided. For most real-time VR, we use single–sided
    polygons; we noticed this when we first placed a plane in the world and, depending
    on the orientation, you may not see it.
  prefs: []
  type: TYPE_NORMAL
- en: To really show how this all works, I'm going to show the internal format of
    an OBJ file. Normally, you won't hand edit these — we are beyond the days of VR
    constructed with a few thousand polygons (my first VR world had a train that represented
    downloads, and it had six polygons, each point lovingly crafted by hand), so hand
    editing things isn't necessary, but you may need to edit the OBJ files to include
    the proper paths or make changes your modeler may not do natively–so let's dive
    in!
  prefs: []
  type: TYPE_NORMAL
- en: Polygons are constructed by creating points in 3D space, and connecting them
    with faces. You can consider that the vertices are connected by lines (most modelers
    work this way), but in the native WebGL that React VR is based on, it's really
    just faces. The points don't really exist by themselves, but more or less "anchor"
    the corners of the polygon.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, here is a simple triangle, modeled in Blender:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/869b944a-86fe-4fd3-8ba9-3a327af75f96.png)'
  prefs: []
  type: TYPE_IMG
- en: In this case, I have constructed a triangle with three vertices and one face
    (with just a flat color, in this case green; if you are reading a physical book or
    an eInk electronic reader (Kindle), it'll be a shade of gray of course). The edges,
    shown in yellow or lighter shade, are there for the convenience of the modeler
    and won't be explicitly rendered.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is what the triangle looks like inside our gallery:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/45d4186a-0ae8-4d29-9194-cdad9424788a.jpg)'
  prefs: []
  type: TYPE_IMG
- en: If you look closely in the Blender photograph, you'll notice that the object
    is not centered in the world. When it exports, it will export with the translations
    that you have applied in Blender. This is why the triangle is slightly off center
    on the pedestal. The good news is that we are in outer space, floating in orbit,
    and therefore do not have to worry about gravity. (React VR does not have a physics
    engine, although it is straightforward to add one.)
  prefs: []
  type: TYPE_NORMAL
- en: The second thing you may notice is that the yellow lines (lighter gray lines
    in print) around the triangle in Blender do not persist in the VR world. This
    is because the file is exported as one face, which connects three vertices.
  prefs: []
  type: TYPE_NORMAL
- en: The plural of vertex is vertices, not vertexes. If someone asks you about vertexes,
    you can laugh at them almost as much as when someone pronouncing Bézier curve
    as "bez ee er."
  prefs: []
  type: TYPE_NORMAL
- en: Ok, to be fair, I did that once, now I always say Beh zee a.
  prefs: []
  type: TYPE_NORMAL
- en: Okay, all levity aside, now let's make it look more interesting than a flat
    green triangle. This is done through something usually called texture mapping.
  prefs: []
  type: TYPE_NORMAL
- en: Honestly, the phrase "textures" and "materials" often get swapped around interchangeably,
    although lately they have sort of settled down to materials meaning anything about
    an object's physical appearance except its shape; a material could be how shiny
    it is, how transparent it is, and so on. A **texture** is usually just the colors
    of the object — tile is red, skin may have freckles — and is therefore usually
    called a texture map which is represented with a JPG, TGA, or other image format.
  prefs: []
  type: TYPE_NORMAL
- en: There is no real cross software file format for materials or **shaders** (which
    are usually computer code that represents the material). When it comes time to
    render, there are some shader languages that are standard, although these are
    not always used in CAD programs.
  prefs: []
  type: TYPE_NORMAL
- en: You will need to learn what your CAD program uses, and become proficient in
    how it handles materials (and texture maps). This is far beyond the scope of this
    book.
  prefs: []
  type: TYPE_NORMAL
- en: 'The OBJ file format (which is what React VR usually uses) allows the use of
    several different texture maps to properly construct the material. It also can
    indicate the material itself via parameters coded in the file. First, let''s take
    a look at what the triangle consists of. We imported OBJ files via the `Model`
    keyword:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'First, let''s open the `MTL` (material) file (as the .obj file uses the .mtl
    file). The OBJ file format was developed by Wavefront:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'A lot of this is housekeeping, but the important things are the following parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Ka` : Ambient color, in RGB format'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Kd` : Diffuse color, in RGB format'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Ks` : Specular color, in RGB format'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Ns` : Specular exponent, from 0 to 1,000'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`d` : Transparency (d meant *dissolved*). Note that WebGL cannot normally show
    refractive materials, or display real volumetric materials and raytracing, so
    `d` is simply the percentage of how much light is blocked. `1` (the default) is
    fully opaque. Note that `d` in the .obj specification works for illum mode 2.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Transparent materials, at the time of writing this book, are not supported by
    React VR. This is currently under development, however, so perhaps soon they will
    be.
  prefs: []
  type: TYPE_NORMAL
- en: 'Tr : Alternate representation of transparency; 0 is fully opaque.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`illum` <#> (a number from 0 to 10). Not all illumination models are supported
    by WebGL. The current list is:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Color on and Ambient off.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Color on and Ambient on.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Highlight on (and colors) <= this is the normal setting.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There are other illumination modes, but are currently not used by WebGL. This
    of course, could change.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Ni` is optical density. This is important for CAD systems, but the chances
    of it being supported in VR without a lot of tricks are pretty low.  Computers
    and video cards get faster and faster all the time though, so maybe optical density
    and real time raytracing will be supported in VR eventually, thanks to Moore''s
    law (statistically, computing power roughly doubles every two years or so).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Very important: Make sure you include the "lit" keyword with all of your model
    declarations, otherwise the loader will assume you have only an emissive (glowing)
    object and will ignore most of the parameters in the material file!'
  prefs: []
  type: TYPE_NORMAL
- en: YOU HAVE BEEN WARNED. It'll look very weird and you'll be completely confused.
    Don't ask me why I know!
  prefs: []
  type: TYPE_NORMAL
- en: 'The OBJ file itself has a description of the geometry. These are not usually
    something you can hand edit, but it''s useful to see the overall structure. For
    the simple object, shown before, it''s quite manageable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: First, you see a comment (marked with `#`) that tells you what software made
    it, and the name of the original file. This can vary. The `mtllib` is a call out
    to a particular material file, that we already looked at. The `o` lines (and `g` line
    is if there a group) define the name of the object and group; although React VR
    doesn't  really  use these (currently), in most modeling packages this will be
    listed in the hierarchy of objects. The `v` and `vn` keywords are where it gets
    interesting, although these are still not something visible. The `v` keyword creates
    a vertex in x, y, z space. The vertices built will later be connected into polygons. The `vn`
    establishes the normal for those objects, and `vt` will create the texture coordinates
    of the same points. More on texture coordinates in a bit.
  prefs: []
  type: TYPE_NORMAL
- en: The `usemtl BaseMat` establishes what material, specified in your .mtl file,
    that will be used for the following faces.
  prefs: []
  type: TYPE_NORMAL
- en: The `s off` means smoothing is turned off. Smoothing and vertex normals can
    make objects look smooth, even if they are made with very few polygons. For example,
    take a look at these two teapots; the first is without smoothing.
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/98c63628-9ac2-47a4-b90d-156e10875858.png)'
  prefs: []
  type: TYPE_IMG
- en: Looks pretty computer graphics like, right? Now, have a look at the same teapot
    with the "s 1" parameter specified throughout, and normals included in the file. 
    This is pretty normal (pun intended), what I mean is most CAD software will compute
    normals for you. You can make normals; smooth, sharp, and add edges where needed.
    This adds detail without excess polygons and is fast to render.
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/7d3ee609-8afd-4706-9f42-0d2ddc9a11c9.png)'
  prefs: []
  type: TYPE_IMG
- en: The smooth teapot looks much more real, right? Well, we haven't seen anything
    yet! Let's discuss texture.
  prefs: []
  type: TYPE_NORMAL
- en: I didn't used to like Sushi because of the texture. We're not talking about
    that kind of texture.
  prefs: []
  type: TYPE_NORMAL
- en: Texture mapping is a lot like taking a piece of Christmas wrapping paper and
    putting it around an odd shaped object. Just like when you get that weird looking
    present at Christmas and don't know quite what to do, sometimes doing the wrapping
    doesn't have a clear right way to do it. Boxes are easy, but most interesting
    objects aren't always a box. I found this picture online with the caption *"I
    hope it's an X-Box*.*"*
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/a90e54eb-6ec1-4097-bc3e-74cf3d60e917.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The "wrapping" is done via U, V coordinates in the CAD system. Let''s take
    a look at a triangle, with proper UV coordinates. We then go get our wrapping
    paper, that is to say, we take an image file we are going to use as the texture,
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/20e61ca4-70bf-478c-a278-f17f9a5bcb81.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We then wrap that in our CAD program by specifying this as a texture map. We'll
    then export the triangle, and put it in our world.
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/647e8ee1-d882-4fb8-b15a-40c7d0ca2f65.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You would probably have expected to see "left and bottom" on the texture map.
    Taking a closer look in our modeling package (Blender still) we see that the default
    UV mapping (using Blender's standard tools) tries to use as much of the texture
    map as possible, but from an artistic standpoint, may not be what we want.
  prefs: []
  type: TYPE_NORMAL
- en: '![](Images/4e7c5e33-dd23-44c0-832c-77d075b43ca1.png)'
  prefs: []
  type: TYPE_IMG
- en: This is not to show that Blender is "yer doin' it wrong" but to make the point
    that you've got to check the texture mapping before you export. Also, if you are
    attempting to import objects without U,V coordinates, double-check them!
  prefs: []
  type: TYPE_NORMAL
- en: If you are hand editing an .mtl file, and your textures are not showing up,
    double–check your .obj file and make sure you have `vt` lines; if you don't, the
    texture will not show up. This means the U,V coordinates for the texture mapping
    were not set.
  prefs: []
  type: TYPE_NORMAL
- en: Texture mapping is non-trivial; there is quite an art about it and even entire
    books written about texturing and lighting. After having said that, you can get
    pretty far with Blender and any OBJ file if you've downloaded something from the
    internet and want to make it look a little better. We'll show you how to fix it.
    The end goal is to get a UV map that is more usable and efficient. Not all OBJ
    file exporters export proper texture maps, and frequently .obj files you may find
    online may or may not have UVs set.
  prefs: []
  type: TYPE_NORMAL
- en: You can use Blender to fix the unwrapping of your model. While this is not a
    Blender tutorial, I'll show you enough here that with a book on Blender (Packt
    has several good Blender books) you can get a head start. You can also use your
    favorite CAD modeling program, such as Max, Maya, Lightwave, Houdini, and so on.
    (and forgive me if I missed your favorite package!).
  prefs: []
  type: TYPE_NORMAL
- en: This is important, so I'll mention it again in an info box. If you already use
    a different polygon modeler or CAD page, you don't have to learn Blender; your
    program will undoubtedly work fine.  You can skim this section.
  prefs: []
  type: TYPE_NORMAL
- en: If you don't want to learn Blender anyway, you can download all of the files
    that we construct from the Github link. You'll need some of the image files if
    you do work through the examples. Files for this chapter are at: [http://bit.ly/VR_Chap7](http://bit.ly/VR_Chap7).
  prefs: []
  type: TYPE_NORMAL
- en: Where to get 3D models
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Which brings us to a brief diversion. Where do you get these models in the first
    place?
  prefs: []
  type: TYPE_NORMAL
- en: The best way to get 3D models is to make them yourself. If you do, you are probably
    not reading this, as you already know what polygons are and how to texture them.
    However, more likely you will go to a paid or free model site and download something
    you find appealing for the world you are trying to create. It just saves time.
    Here's a brief mention of a few sites that I've found useful over the years. Some
    of these sites can have very expensive models, as they often cater to high–end
    graphics companies (television, architecture, movies, designers), as well as high
    quality, but expensive, game art. Game art is about what you're looking for, to
    do good VR; some sites now have "low poly" or VR/AR categories. Some of them,
    especially ShareCG and Renderosity, tend to be very amateur in places. The site
    itself is great, but the uploaded files frequently have no editorial control;
    as a result, you may be able to find things that violate copyrights (Star Wars
    and Star Trek models) that you won't find on other sites for obvious reasons (lawyers!).
    Then again, you may find your own content on these sites that people are making
    money off of, and thus want to find your own lawyers.
  prefs: []
  type: TYPE_NORMAL
- en: Speaking of lawyers, you need to check the license for any files you do download.
    You may have the right to use these models for rendering, for example, but not
    distribution. This may or may not allow you to ship a game with these models in
    it, or that may require an additional (more expensive) license.
  prefs: []
  type: TYPE_NORMAL
- en: 'A few websites (by no means exclusive) where you can download models are at:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Turbosquid.com ](http://Turbosquid.com)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[CGStudio.com ](http://CGStudio.com)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[creativemarket.com/3d](http://creativemarket.com/3d)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[CGTrader.com](http://CGTrader.com)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Grabcad.com](http://Grabcad.com)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[ShareCG.com](http://ShareCG.com)  (several of the models for this book came
    from here)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[3dwarehouse.sketchup.com](http://3dwarehouse.sketchup.com)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Why do you find such good models on these sites? Why do some of the models look
    so — odd, artistically? Many artists have contracts that do not require exclusivity,
    or people are working on a game that disbands and never ships. They can upload
    these unused or lesser used models and let other people use them, and even profit
    off of their sales.
  prefs: []
  type: TYPE_NORMAL
- en: You can spend days searching all of these sites for that perfect content for
    your site.
  prefs: []
  type: TYPE_NORMAL
- en: You've been warned!
  prefs: []
  type: TYPE_NORMAL
- en: There are also a large number of 3D model sites intended for 3D printing. These
    models may be very dense (high polygon), but might have some content you could
    use.
  prefs: []
  type: TYPE_NORMAL
- en: I like to use a program called "Poser" to do human modeling, although many CGI
    artists would prefer to roll their own. DAZ3D sells human models as well, and
    many of them work with Poser. Both of these are good resource sites for inexpensive,
    reasonable quality rendering (depending on your skill setting up a scene). The
    Poser program has many sites dedicated to objects, scenes, models, and textures
    usable for it. Poser human models won't display terribly well in VR due to high
    polygon counts and very dense textures, but these sites may still have objects
    and add-on tools, usually at a very reasonable price.
  prefs: []
  type: TYPE_NORMAL
- en: 'A few web sites that have good Poser models, as well as a lot of other free
    objects are:'
  prefs: []
  type: TYPE_NORMAL
- en: '[my.smithmicro.com/poser-3d-animation-software.html](http://my.smithmicro.com/poser-3d-animation-software.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[DAZ3D.com](http://DAZ3D.com)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Contentparadise.com](http://Contentparadise.com)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Renderosity.com](http://Renderosity.com)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Several images in this book were done with Poser and DAZ Studio.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned the basics of polygon modeling with Blender. You've
    learned the importance of polygon budgets, how to export those models, and details
    about the OBJ/MTL file formats. You've also learned where we can get 3D models
    for our worlds.
  prefs: []
  type: TYPE_NORMAL
- en: These objects can look plain; however, in the next section, you will learn how
    to wrap a paper around a teapot. This is not just a skill for giving gifts to
    people, it'll be vital for making our virtual worlds look real.
  prefs: []
  type: TYPE_NORMAL
