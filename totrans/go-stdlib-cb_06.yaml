- en: Discovering the Filesystem
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This chapter contains the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: Getting file information
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating temporary files
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing the file
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing the file from multiple goroutines
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Listing a directory
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changing file permissions
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating files and directories
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Filtering file listings
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Comparing two files
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Resolving the user home directory
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter will lead you through the typical operations in files and directories.
    We will also touch on how to obtain the user home directory and create the temporary
    files for it.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: Check whether Go is properly installed. The *Getting ready* section from the *Retrieving
    Golang version* recipe of [Chapter 1](acf67248-0aa9-4150-a43b-d13eb9de89f2.xhtml), *Interacting
    With Environment* will help you.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: Getting file information
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you need to discover basic information about the accessed file, Go's standard
    library provides a way on how you can do this. This recipe shows how you can access
    this information.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open the console and create the folder `chapter06/recipe01`.
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to the directory.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create the sample `test.file` with the content `This is test file`.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create the `fileinfo.go` file with the following content:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Execute the code by running `go run fileinfo.go` in the main Terminal.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You will see the following output:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e2f33ff9-7999-4025-b4ff-7e7e16fb7461.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
- en: How it works...
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `os.File` type provides access to the `FileInfo` type via the `Stat` method.
    The `FileInfo` struct contains all the basic information about the file.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: Creating temporary files
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Temporary files are commonly used while running test cases or if your application
    needs to have a place to store short-term content such as user data uploads and
    currently processed data. This recipe will present the easiest way to create such
    a file or directory.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open the console and create the folder `chapter06/recipe02`.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to the directory.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create the `tempfile.go` file with the following content:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Execute the code by running `go run tempfile.go` in the main Terminal.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You will see the following output:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/8eff29ed-d69c-4413-bb1d-72031e8dfdbe.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
- en: How it works...
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `ioutil` package contains the functions `TempFile` and `TempDir`. The `TempFile`
    function consumes the directory and the file prefix. The `os.File` with the underlying
    temporary file is returned. Note that the caller is responsible for cleaning out
    the file. The previous example uses the `os.Remove` function to do that.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: The `TempDir` function works the same way. The difference is that the `string`
    with the path to the directory is returned.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: The temp `file`/`dir` name is composed of the prefix and the random suffix.
    Multiple programs calling the `TempFile`/`Dir` function with the same arguments
    won't get the same result.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: Writing the file
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Writing a file is an essential task for every programmer; Go supports multiple
    ways on how you can do this. This recipe will show a few of them.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open the console and create the folder `chapter06/recipe03`.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to the directory.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create the `writefile.go` file with the following content:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Execute the code by running `go run writefile.go` in the main Terminal.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Check the content of the created `sample.file`:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/11071c1b-0250-44c7-851b-aa46aee6bd05.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
- en: How it works...
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `os.File` type implements the `Writer` interface, so writing to the file
    could be done by any option that uses the `Writer` interface. The preceding example
    uses the  `WriteString` method of the `os.File` type. The `io.WriteString` method
    can also be used in general.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: Writing the file from multiple goroutines
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe will show you how to safely write to the file from multiple goroutines.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open the console and create the folder `chapter06/recipe04`.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to the directory.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create the `syncwrite.go` file with the following content:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Execute the code by running `go run syncwrite.go` in the main Terminal.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Check the content of the created `sample.file`:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/bfd4b0c5-3ce0-402a-b5f9-344d12d0f2da.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bfd4b0c5-3ce0-402a-b5f9-344d12d0f2da.png)'
- en: How it works...
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Writing concurrently to a file is a problem that can end up with inconsistent file
    content. It is better to synchronize the writing to the file by using `Mutex`
    or any other synchronization primitive. This way, you ensure that only one goroutine
    at a time will be able to write to the file.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 并发写入文件是一个可能导致文件内容不一致的问题。最好通过使用`Mutex`或任何其他同步原语来同步对文件的写入。这样，您可以确保一次只有一个goroutine能够写入文件。
- en: The preceding code creates a `Writer` with `Mutex`, which embeds the `Writer`
    (`os.File`, in this case), and for each `Write` call, internally locks the `Mutex`
    to provide exclusivity. After the write operation is complete, the `Mutex` primitive
    is unlocked naturally.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码创建了一个带有`Mutex`的`Writer`，它嵌入了`Writer`（在本例中是`os.File`），对于每个`Write`调用，内部锁定`Mutex`以提供排他性。写操作完成后，`Mutex`原语会自然解锁。
- en: Listing a directory
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 列出目录
- en: This recipe will show you how to list directory content.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例将向您展示如何列出目录内容。
- en: How to do it...
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: Open the console and create the folder `chapter06/recipe05`.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开控制台并创建文件夹`chapter06/recipe05`。
- en: Navigate to the directory.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到目录。
- en: Create a directory named `folder`.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`folder`的目录。
- en: 'Create the `listdir.go` file with the following content:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`listdir.go`文件，并包含以下内容：
- en: '[PRE4]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Execute the code by running `go run listdir.go` in the main Terminal.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在主终端中运行`go run listdir.go`来执行代码。
- en: 'You will see the following output:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将看到以下输出：
- en: '![](img/44fd0deb-bd33-4068-a8d7-25f36bf535db.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![](img/44fd0deb-bd33-4068-a8d7-25f36bf535db.png)'
- en: How it works...
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The folder listing the example above uses two approaches. The first, simpler
    one is implemented by using the `listDirByReadDir` function and utilizes the `ReadDir`
    function from the `ioutil` package. This function returns the slice of `FileInfo`
    structs that represent the actual directory content. Note that the `ReadDir` function
    does not read the folders recursively. In fact, the `ReadDir` function internally
    uses the `Readdir` method of the `File` type in the `os` package.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '上面的示例中的文件夹列表使用了两种方法。第一种更简单的方法是使用`listDirByReadDir`函数，并利用`ioutil`包中的`ReadDir`函数。此函数返回表示实际目录内容的`FileInfo`结构的切片。请注意，`ReadDir`函数不会递归读取文件夹。实际上，`ReadDir`函数在内部使用`os`包中`File`类型的`Readdir`方法。 '
- en: On the other hand, the more complicated `listDirByWalk` uses the `filepath.Walk`
    function which consumes the path to be walked and has a function that processes
    each file or folder in any given path. The main difference is that the `Walk`
    function reads the directory recursively. The core part of this approach is the `WalkFunc`
    type, where its function is to consume the results of the listing. Note that the
    function blocks the recursive call on underlying folders by returning the `filepath.SkipDir` error.
    The `Walk` function also processes the called path at first, so you need to handle
    this as well (in this case, we skip the printing and return nil because we need
    to process this folder recursively).
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，更复杂的`listDirByWalk`使用`filepath.Walk`函数，该函数消耗要遍历的路径，并具有处理给定路径中的每个文件或文件夹的函数。主要区别在于`Walk`函数递归读取目录。这种方法的核心部分是`WalkFunc`类型，其函数是消耗列表的结果。请注意，该函数通过返回`filepath.SkipDir`错误来阻止基础文件夹上的递归调用。`Walk`函数还首先处理调用路径，因此您也需要处理这一点（在本例中，我们跳过打印并返回nil，因为我们需要递归处理此文件夹）。
- en: Changing file permissions
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更改文件权限
- en: This recipe illustrates how file permissions can be changed programmatically.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例说明了如何以编程方式更改文件权限。
- en: How to do it...
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: Open the console and create the folder `chapter06/recipe06`.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开控制台并创建文件夹`chapter06/recipe06`。
- en: Navigate to the directory.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到目录。
- en: 'Create the `filechmod.go` file with the following content:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`filechmod.go`文件，并包含以下内容：
- en: '[PRE5]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Execute the code by running `go run filechmod.go` in the main Terminal.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在主终端中运行`go run filechmod.go`来执行代码。
- en: 'You will see the following output:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将看到以下输出：
- en: '![](img/43fb2a64-e3e7-46c8-80c1-c2cc04adb430.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![](img/43fb2a64-e3e7-46c8-80c1-c2cc04adb430.png)'
- en: How it works...
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `Chmod` method of the `File` type in the `os` package can be used to change
    file permissions. The preceding example just creates the file and changes the
    permissions to `0777`.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '`os`包中`File`类型的`Chmod`方法可用于更改文件权限。上面的示例只是创建文件并将权限更改为`0777`。'
- en: Just note that the `fi.Mode()` is called twice because it extracts the permissions
    (`os.FileMode`) for the current state of the file.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 只需注意`fi.Mode()`被调用两次，因为它提取了文件当前状态的权限（`os.FileMode`）。
- en: The shortest way to change the permissions is by using the `os.Chmod` function,
    which does the same, but you do not need to obtain the `File` type in the code.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 更改权限的最简单方法是使用`os.Chmod`函数，它执行相同的操作，但您不需要在代码中获取`File`类型。
- en: Creating files and directories
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建文件和目录
- en: This recipe describes a few general ways you can create files and directories
    in code.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例描述了在代码中创建文件和目录的几种一般方法。
- en: How to do it...
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: Open the console and create the folder `chapter06/recipe07`.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开控制台并创建文件夹`chapter06/recipe07`。
- en: Navigate to the directory.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到目录。
- en: 'Create the `create.go` file with the following content:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`create.go`文件，并包含以下内容：
- en: '[PRE6]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Execute the code by running `go run create.go` in the main Terminal.
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在主终端中运行`go run create.go`来执行代码。
- en: 'List the content of  the `chapter06/recipe07` directory:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 列出`chapter06/recipe07`目录的内容：
- en: '![](img/f3fed783-e2ae-485f-8dac-2d249b399835.png)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f3fed783-e2ae-485f-8dac-2d249b399835.png)'
- en: How it works...
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The previous example represents four ways you can create a file or directory.
    The `os.Create` function is the simplest way to create the file. By using this
    function, you will create the file with permissions such as `0666`.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的示例代表了创建文件或目录的四种方法。`os.Create`函数是创建文件的最简单方法。使用此函数，您将以`0666`的权限创建文件。
- en: If you need to create the file with any other configuration of permissions,
    then the `OpenFile` function of the `os` package is the one to be used.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: The directories can be created by using the `Mkdir` function of the `os` package.
    This way, a directory with given permissions is created. The second option is
    to use the `MkdirAll` function. This function also creates the directory, but
    if the given path contains non-exiting directories, then all directories in the
    path are created (it works the same as the `-p` option of Unix's `mkdir` utility).
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: Filtering file listings
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe shows you how to list the file paths, matching a given pattern.
    The list does not have to be from the same folder.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open the console and create the folder `chapter06/recipe08`.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to the directory.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create the `filter.go` file with the following content:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Execute the code by running `go run filter.go` in the main Terminal.
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You will see the following output:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/7f64fba3-2f97-4423-971d-910b0c7a38a8.png)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
- en: How it works...
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To get the filtered file list which corresponds to the given pattern, the `Glob`
    function from the `filepath` package can be used. For the pattern syntax, see
    the documentation of the `filepath.Match` function ([https://golang.org/pkg/path/filepath/#Match](https://golang.org/pkg/path/filepath/#Match)).
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: Note that the returning result of `filepath.Glob` is the slice of strings with
    matching paths.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Listing a directory* recipe of this chapter, which shows a more generic
    approach where the `filepath.Walk` function can be used to list and filter the
    path too.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: Comparing two files
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe gives you a hint on how to compare two files. The recipe will show
    you how to quickly determine whether the files are identical. The recipe will
    also present you with a way to find differences between the two.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open the console and create the folder `chapter06/recipe09`.
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to the directory.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create the `comparison.go` file with the following content:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Execute the code by running `go run comparison.go` in the main Terminal.
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You will see the following output:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/5a8c71ae-bf9f-4fb3-b6f2-8199b1e68b4b.png)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
- en: How it works...
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The comparison of the two files can be done in a few ways. This recipe describes
    the two basic ones. The first one is by doing a comparison of the whole file by
    creating the checksum of the file.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: The *Generating checksum* recipe of [Chapter 3](4bb72b92-6a09-45b0-a5ab-b37b3694e23f.xhtml), *Dealing
    with Numbers* shows how you can create the checksum of the file. This way, the `getMD5SumString` function
    generates the checksum string, which is a hexadecimal representation of the byte
    result of MD5\. The strings are then compared.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: The second approach compares the files line by line (in this case, the string
    content). In case the lines are not matching, the `x` sign is included. This is
    the same way you can compare the binary content, but you will need to scan the
    file by blocks of bytes (byte slices).
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: Resolving the user home directory
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It could be beneficial for the program to know the user's home directory, for
    example, in case you need to store a custom user configuration or any other data
    related to the user. This recipe will describe how you can find out the current
    user's home directory.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open the console and create the folder `chapter06/recipe10`.
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to the directory.
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create the `home.go` file with the following content:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Execute the code by running `go run home.go` in the main Terminal.
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You will see the following output:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b2bf798b-0699-4ddc-84da-74155349b6b1.png)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
- en: How it works...
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `os/user` package contains the  `Current` function, which provides the `os.User`
    type pointer. The `User` contains the `HomeDir` property, which contains the path
    of the current user's home directory.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
- en: Note that this won't work for the cross-compiled code because the implementation
    depends on the native code.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
