- en: Discovering the Filesystem
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This chapter contains the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Getting file information
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating temporary files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing the file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing the file from multiple goroutines
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Listing a directory
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changing file permissions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating files and directories
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Filtering file listings
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Comparing two files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Resolving the user home directory
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter will lead you through the typical operations in files and directories.
    We will also touch on how to obtain the user home directory and create the temporary
    files for it.
  prefs: []
  type: TYPE_NORMAL
- en: Check whether Go is properly installed. The *Getting ready* section from the *Retrieving
    Golang version* recipe of [Chapter 1](acf67248-0aa9-4150-a43b-d13eb9de89f2.xhtml), *Interacting
    With Environment* will help you.
  prefs: []
  type: TYPE_NORMAL
- en: Getting file information
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you need to discover basic information about the accessed file, Go's standard
    library provides a way on how you can do this. This recipe shows how you can access
    this information.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open the console and create the folder `chapter06/recipe01`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to the directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create the sample `test.file` with the content `This is test file`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create the `fileinfo.go` file with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Execute the code by running `go run fileinfo.go` in the main Terminal.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You will see the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e2f33ff9-7999-4025-b4ff-7e7e16fb7461.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `os.File` type provides access to the `FileInfo` type via the `Stat` method.
    The `FileInfo` struct contains all the basic information about the file.
  prefs: []
  type: TYPE_NORMAL
- en: Creating temporary files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Temporary files are commonly used while running test cases or if your application
    needs to have a place to store short-term content such as user data uploads and
    currently processed data. This recipe will present the easiest way to create such
    a file or directory.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open the console and create the folder `chapter06/recipe02`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to the directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create the `tempfile.go` file with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Execute the code by running `go run tempfile.go` in the main Terminal.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You will see the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/8eff29ed-d69c-4413-bb1d-72031e8dfdbe.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `ioutil` package contains the functions `TempFile` and `TempDir`. The `TempFile`
    function consumes the directory and the file prefix. The `os.File` with the underlying
    temporary file is returned. Note that the caller is responsible for cleaning out
    the file. The previous example uses the `os.Remove` function to do that.
  prefs: []
  type: TYPE_NORMAL
- en: The `TempDir` function works the same way. The difference is that the `string`
    with the path to the directory is returned.
  prefs: []
  type: TYPE_NORMAL
- en: The temp `file`/`dir` name is composed of the prefix and the random suffix.
    Multiple programs calling the `TempFile`/`Dir` function with the same arguments
    won't get the same result.
  prefs: []
  type: TYPE_NORMAL
- en: Writing the file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Writing a file is an essential task for every programmer; Go supports multiple
    ways on how you can do this. This recipe will show a few of them.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open the console and create the folder `chapter06/recipe03`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to the directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create the `writefile.go` file with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Execute the code by running `go run writefile.go` in the main Terminal.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Check the content of the created `sample.file`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/11071c1b-0250-44c7-851b-aa46aee6bd05.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `os.File` type implements the `Writer` interface, so writing to the file
    could be done by any option that uses the `Writer` interface. The preceding example
    uses the  `WriteString` method of the `os.File` type. The `io.WriteString` method
    can also be used in general.
  prefs: []
  type: TYPE_NORMAL
- en: Writing the file from multiple goroutines
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe will show you how to safely write to the file from multiple goroutines.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open the console and create the folder `chapter06/recipe04`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to the directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create the `syncwrite.go` file with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Execute the code by running `go run syncwrite.go` in the main Terminal.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Check the content of the created `sample.file`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/bfd4b0c5-3ce0-402a-b5f9-344d12d0f2da.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Writing concurrently to a file is a problem that can end up with inconsistent file
    content. It is better to synchronize the writing to the file by using `Mutex`
    or any other synchronization primitive. This way, you ensure that only one goroutine
    at a time will be able to write to the file.
  prefs: []
  type: TYPE_NORMAL
- en: The preceding code creates a `Writer` with `Mutex`, which embeds the `Writer`
    (`os.File`, in this case), and for each `Write` call, internally locks the `Mutex`
    to provide exclusivity. After the write operation is complete, the `Mutex` primitive
    is unlocked naturally.
  prefs: []
  type: TYPE_NORMAL
- en: Listing a directory
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe will show you how to list directory content.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open the console and create the folder `chapter06/recipe05`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to the directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a directory named `folder`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create the `listdir.go` file with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Execute the code by running `go run listdir.go` in the main Terminal.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You will see the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/44fd0deb-bd33-4068-a8d7-25f36bf535db.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The folder listing the example above uses two approaches. The first, simpler
    one is implemented by using the `listDirByReadDir` function and utilizes the `ReadDir`
    function from the `ioutil` package. This function returns the slice of `FileInfo`
    structs that represent the actual directory content. Note that the `ReadDir` function
    does not read the folders recursively. In fact, the `ReadDir` function internally
    uses the `Readdir` method of the `File` type in the `os` package.
  prefs: []
  type: TYPE_NORMAL
- en: On the other hand, the more complicated `listDirByWalk` uses the `filepath.Walk`
    function which consumes the path to be walked and has a function that processes
    each file or folder in any given path. The main difference is that the `Walk`
    function reads the directory recursively. The core part of this approach is the `WalkFunc`
    type, where its function is to consume the results of the listing. Note that the
    function blocks the recursive call on underlying folders by returning the `filepath.SkipDir` error.
    The `Walk` function also processes the called path at first, so you need to handle
    this as well (in this case, we skip the printing and return nil because we need
    to process this folder recursively).
  prefs: []
  type: TYPE_NORMAL
- en: Changing file permissions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe illustrates how file permissions can be changed programmatically.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open the console and create the folder `chapter06/recipe06`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to the directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create the `filechmod.go` file with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Execute the code by running `go run filechmod.go` in the main Terminal.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You will see the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/43fb2a64-e3e7-46c8-80c1-c2cc04adb430.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `Chmod` method of the `File` type in the `os` package can be used to change
    file permissions. The preceding example just creates the file and changes the
    permissions to `0777`.
  prefs: []
  type: TYPE_NORMAL
- en: Just note that the `fi.Mode()` is called twice because it extracts the permissions
    (`os.FileMode`) for the current state of the file.
  prefs: []
  type: TYPE_NORMAL
- en: The shortest way to change the permissions is by using the `os.Chmod` function,
    which does the same, but you do not need to obtain the `File` type in the code.
  prefs: []
  type: TYPE_NORMAL
- en: Creating files and directories
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe describes a few general ways you can create files and directories
    in code.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open the console and create the folder `chapter06/recipe07`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to the directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create the `create.go` file with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Execute the code by running `go run create.go` in the main Terminal.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'List the content of  the `chapter06/recipe07` directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f3fed783-e2ae-485f-8dac-2d249b399835.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The previous example represents four ways you can create a file or directory.
    The `os.Create` function is the simplest way to create the file. By using this
    function, you will create the file with permissions such as `0666`.
  prefs: []
  type: TYPE_NORMAL
- en: If you need to create the file with any other configuration of permissions,
    then the `OpenFile` function of the `os` package is the one to be used.
  prefs: []
  type: TYPE_NORMAL
- en: The directories can be created by using the `Mkdir` function of the `os` package.
    This way, a directory with given permissions is created. The second option is
    to use the `MkdirAll` function. This function also creates the directory, but
    if the given path contains non-exiting directories, then all directories in the
    path are created (it works the same as the `-p` option of Unix's `mkdir` utility).
  prefs: []
  type: TYPE_NORMAL
- en: Filtering file listings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe shows you how to list the file paths, matching a given pattern.
    The list does not have to be from the same folder.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open the console and create the folder `chapter06/recipe08`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to the directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create the `filter.go` file with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Execute the code by running `go run filter.go` in the main Terminal.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You will see the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/7f64fba3-2f97-4423-971d-910b0c7a38a8.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To get the filtered file list which corresponds to the given pattern, the `Glob`
    function from the `filepath` package can be used. For the pattern syntax, see
    the documentation of the `filepath.Match` function ([https://golang.org/pkg/path/filepath/#Match](https://golang.org/pkg/path/filepath/#Match)).
  prefs: []
  type: TYPE_NORMAL
- en: Note that the returning result of `filepath.Glob` is the slice of strings with
    matching paths.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Listing a directory* recipe of this chapter, which shows a more generic
    approach where the `filepath.Walk` function can be used to list and filter the
    path too.
  prefs: []
  type: TYPE_NORMAL
- en: Comparing two files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe gives you a hint on how to compare two files. The recipe will show
    you how to quickly determine whether the files are identical. The recipe will
    also present you with a way to find differences between the two.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open the console and create the folder `chapter06/recipe09`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to the directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create the `comparison.go` file with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Execute the code by running `go run comparison.go` in the main Terminal.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You will see the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/5a8c71ae-bf9f-4fb3-b6f2-8199b1e68b4b.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The comparison of the two files can be done in a few ways. This recipe describes
    the two basic ones. The first one is by doing a comparison of the whole file by
    creating the checksum of the file.
  prefs: []
  type: TYPE_NORMAL
- en: The *Generating checksum* recipe of [Chapter 3](4bb72b92-6a09-45b0-a5ab-b37b3694e23f.xhtml), *Dealing
    with Numbers* shows how you can create the checksum of the file. This way, the `getMD5SumString` function
    generates the checksum string, which is a hexadecimal representation of the byte
    result of MD5\. The strings are then compared.
  prefs: []
  type: TYPE_NORMAL
- en: The second approach compares the files line by line (in this case, the string
    content). In case the lines are not matching, the `x` sign is included. This is
    the same way you can compare the binary content, but you will need to scan the
    file by blocks of bytes (byte slices).
  prefs: []
  type: TYPE_NORMAL
- en: Resolving the user home directory
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It could be beneficial for the program to know the user's home directory, for
    example, in case you need to store a custom user configuration or any other data
    related to the user. This recipe will describe how you can find out the current
    user's home directory.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open the console and create the folder `chapter06/recipe10`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to the directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create the `home.go` file with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Execute the code by running `go run home.go` in the main Terminal.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You will see the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b2bf798b-0699-4ddc-84da-74155349b6b1.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `os/user` package contains the  `Current` function, which provides the `os.User`
    type pointer. The `User` contains the `HomeDir` property, which contains the path
    of the current user's home directory.
  prefs: []
  type: TYPE_NORMAL
- en: Note that this won't work for the cross-compiled code because the implementation
    depends on the native code.
  prefs: []
  type: TYPE_NORMAL
