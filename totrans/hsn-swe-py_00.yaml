- en: Preface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Ultimately, the purpose of this book is to illustrate pragmatic software engineering
    principles and how they can be applied to Python development. To that end, most
    of this book is dedicated to exploring and implementing what I''d consider to
    be a realistically scoped, but probably unrealistic project: a distributed product-management
    and order-fulfillment system. In many cases, the functionality is developed from
    scratch, and from first principles—the fundamental concepts and assumptions that
    lie at the foundation of the system. In a real-world scenario, the odds are good
    that ready-made solutions would be available to deal with many of the implementation
    details, but exposing the underlying theories and requirements is, I think, essential
    for understanding why things work the way they do. That, I believe, is an essential
    part of the difference between programming and software engineering, no matter what
    languages are in play.'
  prefs: []
  type: TYPE_NORMAL
- en: Python is a rare beast in many respects—it's a dynamic language that is nevertheless strongly
    typed. It's an object-oriented language too. These, taken together, make for an
    amazingly flexible and sometimes surprisingly powerful language. Though it can
    be taken as my opinion, I strongly believe that you'd be hard-pressed to find
    another language that is as generally capable as Python that is also as easy to
    write and maintain code in. It doesn't surprise me in the least that Python has
    racked up the kinds of success stories that are listed on the language's official
    site ([https://www.python.org/about/success/](https://www.python.org/about/success/)).
    It also doesn't surprise me that Python is one of the core supported languages
    for at least two of the big name public cloud providers—Amazon and Google. Even
    so, it's often still thought of as only a scripting language, and I sincerely
    hope that this book can also show that view to be wrong.
  prefs: []
  type: TYPE_NORMAL
- en: Who this book is for
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book is aimed at developers with some Python experience looking to expand
    their repertoire from "just writing code" to a more "software engineering" focus.
    Knowledge of Python basics—functions, modules, and packages, and their relationship
    to files in a project's structure, as well as how to import functionality from
    other packages—is assumed.
  prefs: []
  type: TYPE_NORMAL
- en: What this book covers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Chapter 1](00411ded-4009-487f-a5a8-5938546b5c04.xhtml), *Programming versus
    Software Engineering*, discusses the differences between programming (merely writing
    code), and software engineering—the discipline, mindset, and ramifications of
    them.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 2](40bbefdd-792d-4828-a556-d08d399efe0d.xhtml), *The Software Development
    Life Cycle*, examines a detailed software development life cycle, with particular
    attention to the inputs, needs, and outcomes that relate to software engineering.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 3](dd61b582-20a9-4a97-b73e-6c66ee2c0a3b.xhtml), *System Modeling*,
    explores different ways of modeling and diagramming functional, data-flow, and
    interprocess-communication aspects of systems and their components, and what information
    those provide with respect to software engineering.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 4](5d9146f5-67e4-4aee-b9d7-bc945eadc93d.xhtml), *Methodologies, Paradigms,
    and Practices*, delves into current process methodologies, including a few Agile
    process variants, looking at the advantages and drawbacks to each, before reviewing
    **object-oriented programming** (**OOP**) and functional programming paradigms.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 5](80078535-ae8d-4df2-a568-133aaf82ae13.xhtml), *The* *hms_sys System
    Project*, introduces the concepts behind the example project used through the
    book to exercise software engineering design and development mindsets.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 6](62f5861c-5fbb-44f3-82c3-585d2b238773.xhtml), *Development Tools
    and Best Practices*, investigates some of the more common (or at least readily
    available) development tools—both for writing code and for managing it in ways
    that reduce ongoing development efforts and risks.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 7](cabfde73-7c51-4741-8832-ca8427793869.xhtml), *Setting up Projects
    and Processes*, walks through an example structure that could be used for any
    Python project or system, and the thought processes behind establishing a common
    starting-point that is compatible with source control management, automated testing,
    and repeatable build and deployment processes.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 8](515bcc32-44a7-45a0-b73a-9774704580ff.xhtml), *Creating the Business
    Objects*, starts the first iteration of the `hms_sys` project, defining core library
    business-object data structures and capabilities.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 9](0d743eb2-7811-438f-be1b-49c8413922ec.xhtml), *Testing the Business
    Objects*, closes the first iteration of the `hms_sys` project after designing,
    defining, and executing repeatable automated testing of the business object code
    defined during the iteration.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 10](4d1c6624-dca4-4f64-beac-4c5132125cec.xhtml), *Thinking about Business
    Object Data Persistence*, examines the common need for data persistence in applications,
    some of the more common mechanisms, and criteria for selecting a "best match"
    data-storage solution for a variety of implementation requirements.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 11](ef48dfea-6bc9-4ba1-b5aa-9856bd54d0b1.xhtml), *Data Persistence
    and BaseDataObject*, starts the second iteration of the `hms_sys` project with
    the design and implementation of a common, abstract data-access strategy that
    can be re-used across any of the project''s components.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 12](c68ea186-809d-4c66-aa38-737f4cb070d5.xhtml), *Persisting Object
    Data to Files*, continues the second iteration''s efforts with a concrete implementation
    of the abstract **Data Access Layer** (**DAL**), which persists business-object
    data into local files.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 13](ac879763-a226-43d5-b968-9b3ddf4121d7.xhtml), *Persisting Data
    to a Database*, implements a concrete DAL that stores and retrieves data from
    a commonly used NoSQL database—MongoDB—and compares that approach with the requirements of
    an equivalent SQL-based DAL.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 14](28bf2021-0590-406b-b059-693465ecf4be.xhtml), *Testing Data Persistence*,
    concludes the second iteration of the `hms_sys` project by implementing automated
    tests against the varied implementations of both DAL strategies built during the
    iteration.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 15](26ce9de7-eb44-4e33-afa2-fccb17e75aa8.xhtml), *Anatomy of a Service*,
    analyzes the common functional requirements for free-standing services, and works
    through the construction of abstract service/daemon classes, which are reusable
    for creating a variety of concrete service implementations.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 16](9e235ce2-5611-4e7d-a16b-3332561fe85b.xhtml), *The Artisan Gateway
    Service*, starts the third iteration of the `hms_sys` project with an analysis
    of the communication needs of the system components, several options for implementing
    those communications, securing them, and finally working them into the concrete
    implementation of the core service for the project.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 17](b21d33e8-90c4-4a67-af0e-9fc0211d8e3a.xhtml), *Handling Service
    Transactions*, considers all of the necessary business-object communications between
    `hms_sys` components, extracts some common functionality for all of them, and
    walks through the processes required to implement them.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 18](d429c04c-389c-4e6f-9a49-4a162ffacdd7.xhtml), *Testing and Deploying
    Services*, wraps up the `hms_sys` development in the book, and investigates and
    resolves some common automated-testing concerns for service/daemon applications.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 19](0f8e550d-d950-4551-ba4b-b652003658a5.xhtml), *Multi-Processing
    and HPC in Python*, walks through the theory and basic practices involved in writing
    Python code that can scale to multiple processors on a single machine, or to multiple
    machines in a clustered-computing environment, and provides starting-point code-structure
    variations for executing Python code on common high-performance computing systems.'
  prefs: []
  type: TYPE_NORMAL
- en: To get the most out of this book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You should know, specifically, about the following:'
  prefs: []
  type: TYPE_NORMAL
- en: How to download and install Python (3.6.x was used while writing this book,
    but the code here is expected to work in 3.7.x with little or no modification)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to write Python functions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to write basic Python classes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to install Python modules with pip, and how to import modules into your
    code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Download the example code files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can download the example code files for this book from your account at [www.packt.com](http://www.packtpub.com).
    If you purchased this book elsewhere, you can visit [www.packt.com/support](http://www.packtpub.com/support)
    and register to have the files emailed directly to you.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can download the code files by following these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in or register at [www.packt.com](http://www.packtpub.com/support)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the SUPPORT tab
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on Code Downloads & Errata
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the name of the book in the Search box and follow the onscreen instructions
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once the file is downloaded, please make sure that you unzip or extract the
    folder using the latest version of:'
  prefs: []
  type: TYPE_NORMAL
- en: WinRAR/7-Zip for Windows
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Zipeg/iZip/UnRarX for Mac
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 7-Zip/PeaZip for Linux
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The code bundle for the book is also hosted on GitHub at **[https://github.com/PacktPublishing/](https://github.com/PacktPublishing/Hands-On-Software-Engineering-with-Python)****[Hands-On-Software-Engineering-with-Python](https://github.com/PacktPublishing/Hands-On-Software-Engineering-with-Python)**.
    We also have other code bundles from our rich catalog of books and videos available
    at **[https://github.com/PacktPublishing/](https://github.com/PacktPublishing/)**.
    Check them out!
  prefs: []
  type: TYPE_NORMAL
- en: Download the color images
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We also provide a PDF file that has color images of the screenshots/diagrams
    used in this book. You can download it here: [https://www.packtpub.com/sites/default/files/downloads/9781788622011_ColorImages.pdf](https://www.packtpub.com/sites/default/files/downloads/9781788622011_ColorImages.pdf).'
  prefs: []
  type: TYPE_NORMAL
- en: Conventions used
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are a number of text conventions used throughout this book.
  prefs: []
  type: TYPE_NORMAL
- en: '`CodeInText`: Indicates code words in text, database table names, folder names,
    filenames, file extensions, pathnames, dummy URLs, user input, and Twitter handles.
    Here is an example: "Within the `src` directory is the package tree for the project."'
  prefs: []
  type: TYPE_NORMAL
- en: 'A block of code is set as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'When we wish to draw your attention to a particular part of a code block, the
    relevant lines or items are set in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Any command-line input or output is written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**Bold**: Indicates a new term, an important word, or words that you see on
    the screen, for example, in menus or dialog boxes, also appear in the text like
    this. For example: "Select System info from the Administration panel."'
  prefs: []
  type: TYPE_NORMAL
- en: Warnings or important notes appear like this.Tips and tricks appear like this.
  prefs: []
  type: TYPE_NORMAL
