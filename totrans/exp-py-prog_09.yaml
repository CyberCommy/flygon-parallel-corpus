- en: Chapter 9. Documenting Your Project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Documentation is the work that is often neglected by developers and sometimes
    by managers. This is often due to a lack of time towards the end of development
    cycles, and the fact that people think they are bad at writing. Some of them are
    bad indeed, but the majority of them are able to produce a fine documentation.
  prefs: []
  type: TYPE_NORMAL
- en: In any case, the result is a disorganized documentation made of documents that
    are written in a rush. Developers hate doing this kind of work most of the time.
    Things get even worse when the existing documents need to be updated. Many projects
    out there are just providing poor, out-of-date documentation because the manager
    does not know how to deal with it.
  prefs: []
  type: TYPE_NORMAL
- en: But setting up a documentation process at the beginning of the project and treating
    documents as if they were modules of code makes documenting easier. Writing can
    even be fun when a few rules are followed.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter provides a few tips to start documenting your project through:'
  prefs: []
  type: TYPE_NORMAL
- en: The seven rules of technical writing that summarize the best practices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A reStructuredText primer, which is a plain text markup syntax used in most
    of the Python projects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A guide for building good project documentation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The seven rules of technical writing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Writing good documentation is easier in many aspects than writing code. Most
    developers think it is very hard, but by following a simple set of rules it becomes
    really easy.
  prefs: []
  type: TYPE_NORMAL
- en: We are not talking here about writing a book of poems but a comprehensive piece
    of text that can be used to understand a design, an API, or anything that makes
    up the codebase.
  prefs: []
  type: TYPE_NORMAL
- en: 'Every developer is able to produce such material, and this section provides
    seven rules that can be applied in all cases:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Write in two steps**: Focus on ideas and then on reviewing and shaping your
    text.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Target the readership**: Who is going to read it?'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Use a simple style**: Keep it straight and simple. Use good grammar.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Limit the scope of the information**: Introduce one concept at a time.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Use realistic code examples**: "Foos" and "bars" should be avoided.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Use a light but sufficient approach**: You are not writing a book!'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Use templates**: Help the readers to get habits.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'These rules are mostly inspired and adapted from *Agile Documentation: A Pattern
    Guide to Producing Lightweight Documents for Software Projects*, *Wiley*, a book
    by Andreas Rüping that focuses on producing the best documentation in software
    projects.'
  prefs: []
  type: TYPE_NORMAL
- en: Write in two steps
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Peter Elbow, in *Writing With Power: Techniques for Mastering the Writing Process*,
    *Oxford University Press*, explains that it is almost impossible for any human
    being to produce a perfect text in one shot. The problem is that many developers
    write documentation and try to directly come up with some perfect text. The only
    way they succeed in this exercise is by stopping writing after every two sentences
    to read them back and doing some corrections. This means that they are focusing
    both on the content and the style of the text.'
  prefs: []
  type: TYPE_NORMAL
- en: This is too hard for the brain and the result is often not as good as it could
    be. A lot of time and energy is spent in polishing the style and shape of the
    text before its meaning is completely thought through.
  prefs: []
  type: TYPE_NORMAL
- en: Another approach is to drop the style and organization of the text and focus
    on its content. All ideas are laid down on paper, no matter how they are written.
    The developer starts to write a continuous stream and does not pause when he or
    she makes grammatical mistakes, or for anything that is not about the content.
    For instance, it does not matter if the sentences are barely understandable as
    long as the ideas are written down. He or she just writes down what he wants to
    say with a rough organization.
  prefs: []
  type: TYPE_NORMAL
- en: By doing this, the developer focuses on what he or she wants to say and will
    probably get more content out of his or her mind than he or she initially thought
    they would.
  prefs: []
  type: TYPE_NORMAL
- en: Another side-effect when doing free writing is that other ideas that are not
    directly related to the topic will easily go through the mind. A good practice
    is to write them down on a second piece of paper or screen when they appear, so
    they are not lost, and then get back to the main writing.
  prefs: []
  type: TYPE_NORMAL
- en: The second step consists of reading back the whole text and polishing it so
    that it is comprehensible to everyone. Polishing a text means enhancing its style,
    correcting its faults, reorganizing it a bit, and removing any redundant information
    it has.
  prefs: []
  type: TYPE_NORMAL
- en: When the time dedicated to writing documentation is limited, a good practice
    is to split this time into two halves—one for writing the content and one to clean
    and organize the text.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Focus on the content and then on style and cleanliness.
  prefs: []
  type: TYPE_NORMAL
- en: Target the readership
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When writing content, there is a simple question the writer should consider:
    *Who is going to read it?*'
  prefs: []
  type: TYPE_NORMAL
- en: This is not always obvious, as a technical text explains how a piece of software
    works and is often written for every person who might get and use the code. The
    reader can be a researcher who is looking for an appropriate technical solution
    to a problem or a developer who needs to implement a feature with it. A designer
    might also read it to know if the package fits his or her needs from an architectural
    point of view.
  prefs: []
  type: TYPE_NORMAL
- en: Good documentation should follow a simple rule—each text should have only one
    kind of reader.
  prefs: []
  type: TYPE_NORMAL
- en: This philosophy makes the writing easier. The writer precisely knows what kind
    of reader he or she is dealing with. He or she can provide concise and precise
    documentation that is not vaguely intended for all kinds of readers.
  prefs: []
  type: TYPE_NORMAL
- en: 'A good practice is to provide a small introductory text that explains in one
    sentence what the documentation is about and guides the reader to the appropriate
    part:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: By taking care of directing your readers in this way, you will probably produce
    better documentation.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Know your readership before you start to write.
  prefs: []
  type: TYPE_NORMAL
- en: Use a simple style
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Seth Godin is one of the best-selling writers on marketing topics. You might
    want to read *Unleashing the Ideavirus*, *Hachette Books*, which is available
    for free on the Internet ([http://www.sethgodin.com/ideavirus/downloads/IdeavirusReadandShare.pdf](http://www.sethgodin.com/ideavirus/downloads/IdeavirusReadandShare.pdf)).
  prefs: []
  type: TYPE_NORMAL
- en: Some time ago, he made an analysis on his blog to try to understand why his
    books sold so well. He made a list of all the best sellers in the marketing area
    and compared the average number of words per sentences in each one of them.
  prefs: []
  type: TYPE_NORMAL
- en: He realized that his books had the lowest number of words per sentence (thirteen
    words). This simple fact, Seth explained, proved that readers prefer short and
    simple sentences, rather than long and stylish ones.
  prefs: []
  type: TYPE_NORMAL
- en: By keeping sentences short and simple, your writings will consume less brain
    power for their content to be extracted, processed, and then understood. Writing
    technical documentation aims to provide a software guide to readers. It is not
    a fiction story and should be closer to your microwave notice than to the latest
    Stephen King novel.
  prefs: []
  type: TYPE_NORMAL
- en: 'A few tips to keep in mind are:'
  prefs: []
  type: TYPE_NORMAL
- en: Use simple sentences. They should not be longer than two lines.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each paragraph should be composed of three or four sentences, at the most, that
    express one main idea. Let your text breathe.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Don't repeat yourself too much. Avoid journalistic styles where ideas are repeated
    again and again to make sure they are understood.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Don't use several tenses. The present tense is enough most of the time.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Do not make jokes in the text if you are not a really fine writer. Being funny
    in a technical text is really hard, and few writers master it. If you really want
    to distill some humor, keep it in code examples and you will be fine.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You are not writing fiction, so keep the style as simple as possible.
  prefs: []
  type: TYPE_NORMAL
- en: Limit the scope of information
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There's a simple sign of bad documentation in a software—you are looking for
    some information that you know is present somewhere but you cannot find it. After
    spending some time reading the table of contents, you are starting to grep the
    files trying several word combinations but cannot get what you are looking for.
  prefs: []
  type: TYPE_NORMAL
- en: This happens when writers are not organizing their texts in topics. They might
    provide tons of information, but it is just gathered in a monolithic or non-logical
    way. For instance, if a reader is looking for a big picture of your application,
    he or she should not have to read the API documentation—that is a low-level matter.
  prefs: []
  type: TYPE_NORMAL
- en: To avoid this effect, paragraphs should be gathered under a meaningful title
    for a given section, and the global document title should synthesize the content
    in a short phrase.
  prefs: []
  type: TYPE_NORMAL
- en: A table of contents could be made of all the section's titles.
  prefs: []
  type: TYPE_NORMAL
- en: A simple practice to compose your titles is to ask yourself, "What phrase would
    I type in Google to find this section?"
  prefs: []
  type: TYPE_NORMAL
- en: Use realistic code examples
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Foo* and *bar* are bad citizens. When a reader tries to understand how a piece
    of code works with a usage example, having an unrealistic example will make it
    harder to understand.'
  prefs: []
  type: TYPE_NORMAL
- en: Why not use a real-world example? A common practice is to make sure that each
    code example can be cut and pasted in a real program.
  prefs: []
  type: TYPE_NORMAL
- en: 'To show an example of bad usage, let''s assume we want to show how to use the
    `parse()` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'A better example would be when the parser knows how to return a feed content
    with the parse function, available as a top-level function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This slight difference might sound overkill, but in fact it makes your documentation
    a lot more useful. A reader can copy those lines into a shell, understand that
    parse uses a URL as a parameter, and that it returns an iterator that contains
    blog entries.
  prefs: []
  type: TYPE_NORMAL
- en: Of course, giving a realistic example is not always possible or viable. This
    is especially true to very generic code. Even this book has few occurrences of
    vague `foo` and `bar` strings where the name context is unimportant. Anyway, you
    should always strive to reduce the amount of such unrealistic examples to minimum.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Code examples should be directly reusable in real programs.
  prefs: []
  type: TYPE_NORMAL
- en: Use a light but sufficient approach
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In most agile methodologies, documentation is not the first citizen. Making
    software that works is the most important thing over detailed documentation. So
    a good practice, as Scott Ambler explains in his book *Agile Modeling: Effective
    Practices for eXtreme Programming and the Unified Process*, *John Wiley & Sons*,
    is to define the real documentation needs, rather than create an exhaustive set
    of documents.'
  prefs: []
  type: TYPE_NORMAL
- en: For instance, let's see an example documentation of some simple project—`ianitor`—that
    is available on GitHub under [https://github.com/ClearcodeHQ/ianitor](https://github.com/ClearcodeHQ/ianitor).
    It is a tool that helps registering processes in the Consul service discovery
    cluster, so it is mostly aimed at system administrators. If you take a look at
    its documentation, you will realize that this is just a single document (the `README.md`
    file). It only explains how it works and how to use it. From the administrator's
    perspective, this is sufficient. They only need to know how to configure and run
    the tool and there is no other group of people expected to use `ianitor`. This
    document limits its scope by answering one question, "How do I use `ianitor` on
    my server?"
  prefs: []
  type: TYPE_NORMAL
- en: Use templates
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Every page on Wikipedia is similar. There are boxes on the one side that are
    used to summarize dates or facts. At the beginning of the document is a table
    of contents with links that refer to anchors in the same text. There is always
    a reference section at the end.
  prefs: []
  type: TYPE_NORMAL
- en: Users get used to it. For instance, they know they can have a quick look at
    the table of contents, and if they do not find the info they are looking for,
    they will go directly to the reference section to see if they can find another
    website on the topic. This works for any page on Wikipedia. You learn the *Wikipedia
    way* to be more efficient.
  prefs: []
  type: TYPE_NORMAL
- en: So, using templates forces a common pattern for documents and therefore makes
    people more efficient in using them. They get used to the structure and know how
    to read it quickly.
  prefs: []
  type: TYPE_NORMAL
- en: Providing a template for each kind of document also provides a quick start for
    writers.
  prefs: []
  type: TYPE_NORMAL
- en: A reStructuredText primer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: reStructuredText is also called reST (refer to [http://docutils.sourceforge.net/rst.html](http://docutils.sourceforge.net/rst.html)).
    It is a plain text markup language widely used in the Python community to document
    packages. The great thing about reST is that the text is still readable since
    the markup syntax does not obfuscate the text like LaTeX would.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s a sample of such a document:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: reST comes in `docutils`, a package that provides a suite of scripts to transform
    a reST file to various formats, such as HTML, LaTeX, XML, or even S5, Eric Meyer's
    slide show system (refer to [http://meyerweb.com/eric/tools/s5](http://meyerweb.com/eric/tools/s5)).
  prefs: []
  type: TYPE_NORMAL
- en: Writers can focus on the content and then decide how to render it, depending
    on the needs. For instance, Python itself is documented into reST, which is then
    rendered in HTML to build [http://docs.python.org](http://docs.python.org), and
    in various other formats.
  prefs: []
  type: TYPE_NORMAL
- en: 'The minimum elements one should know to start writing reST are:'
  prefs: []
  type: TYPE_NORMAL
- en: Section structure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lists
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Inline markup
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Literal block
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Links
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This section is a really fast overview of the syntax. A quick reference is
    available for more information at: [http://docutils.sourceforge.net/docs/user/rst/quickref.html](http://docutils.sourceforge.net/docs/user/rst/quickref.html),
    which is a good place to start working with reST.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To install reStructuredText, install `docutils`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'For instance, the `rst2html` script provided by the `docutils` package will
    produce HTML output given a reST file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Section structure
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The document's title and its sections are underlined using nonalphanumeric characters.
    They can be overlined and underlined, and a common practice is to use this double
    markup for the title and keep a simple underline for sections.
  prefs: []
  type: TYPE_NORMAL
- en: 'The most used characters to underline a section title are in the following
    order of precedence: `=, -, _, :, #, +, ^`.'
  prefs: []
  type: TYPE_NORMAL
- en: When a character is used for a section, it is associated with its level and
    it has to be used consistently throughout the document.
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider the following code for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '![Section structure](graphics/5295_09_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1 reStructuredText converted to HTML and rendered in the browser
  prefs: []
  type: TYPE_NORMAL
- en: Lists
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'reST provides readable syntax for bullet lists, enumerated lists, and definition
    lists with autoenumeration features:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '![Lists](graphics/5295_09_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2 Different types of lists rendered as HTML
  prefs: []
  type: TYPE_NORMAL
- en: Inline markup
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The text can be styled using an inline markup:'
  prefs: []
  type: TYPE_NORMAL
- en: '`*emphasis*`: Italics'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`**strong emphasis**`: Boldface'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE8]: Inline preformatted text (usually monospaced, terminal-like)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '``a text with a link`_`: This will be replaced by a hyperlink as long as it
    is provided in the document (see in the *Links* section)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Literal block
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When you need to present some code examples, a literal block can be used. Two
    colons are used to mark the block, which is an indented paragraph:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Don't forget to add a blank line after `::` and after the block, otherwise it
    will not be rendered.
  prefs: []
  type: TYPE_NORMAL
- en: 'Notice that the colon characters can be put in a text line. In that case, they
    will be replaced by a single colon in various rendering formats:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: If you don't want to keep a single colon, you can insert a space between the
    leading text and `::`. In that case, `::` will be interpreted and totally removed.
  prefs: []
  type: TYPE_NORMAL
- en: '![Literal block](graphics/5295_09_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3 Code samples in reST rendered as HTML
  prefs: []
  type: TYPE_NORMAL
- en: Links
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A text can be changed into an external link with a special line starting with
    two dots, as long as it is provided in the document:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: A usual practice is to group the external links at the end of the document.
    When the text to be linked contains spaces, it has to be surrounded with [PRE12]
  prefs: []
  type: TYPE_NORMAL
- en: This is a code example
  prefs: []
  type: TYPE_NORMAL
- en: '.. _example:'
  prefs: []
  type: TYPE_NORMAL
- en: '::'
  prefs: []
  type: TYPE_NORMAL
- en: '>>> 1 + 1'
  prefs: []
  type: TYPE_NORMAL
- en: '2'
  prefs: []
  type: TYPE_NORMAL
- en: Let's continue our text, or maybe go back to
  prefs: []
  type: TYPE_NORMAL
- en: the example_.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: ==============
  prefs: []
  type: TYPE_NORMAL
- en: Document title
  prefs: []
  type: TYPE_NORMAL
- en: ==============
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to the document content.
  prefs: []
  type: TYPE_NORMAL
- en: Section 1
  prefs: []
  type: TYPE_NORMAL
- en: =========
  prefs: []
  type: TYPE_NORMAL
- en: First document section.
  prefs: []
  type: TYPE_NORMAL
- en: Section 2
  prefs: []
  type: TYPE_NORMAL
- en: =========
  prefs: []
  type: TYPE_NORMAL
- en: -> go back to `Section 1`_
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: =========================================
  prefs: []
  type: TYPE_NORMAL
- en: Design document title
  prefs: []
  type: TYPE_NORMAL
- en: =========================================
  prefs: []
  type: TYPE_NORMAL
- en: ':Author: Document Author'
  prefs: []
  type: TYPE_NORMAL
- en: ':Tags: document tags separated with spaces'
  prefs: []
  type: TYPE_NORMAL
- en: ':abstract:'
  prefs: []
  type: TYPE_NORMAL
- en: Write here a small abstract about your design document.
  prefs: []
  type: TYPE_NORMAL
- en: '.. contents ::'
  prefs: []
  type: TYPE_NORMAL
- en: Audience
  prefs: []
  type: TYPE_NORMAL
- en: ========
  prefs: []
  type: TYPE_NORMAL
- en: Explain here who is the target readership.
  prefs: []
  type: TYPE_NORMAL
- en: Content
  prefs: []
  type: TYPE_NORMAL
- en: =======
  prefs: []
  type: TYPE_NORMAL
- en: Write your document here. Do not hesitate to split it in several sections.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: ==========
  prefs: []
  type: TYPE_NORMAL
- en: Put here references, and links to other documents.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: ===========
  prefs: []
  type: TYPE_NORMAL
- en: Recipe name
  prefs: []
  type: TYPE_NORMAL
- en: ===========
  prefs: []
  type: TYPE_NORMAL
- en: ':Author: Recipe Author'
  prefs: []
  type: TYPE_NORMAL
- en: ':Tags: document tags separated with spaces'
  prefs: []
  type: TYPE_NORMAL
- en: ':abstract:'
  prefs: []
  type: TYPE_NORMAL
- en: Write here a small abstract about your design document.
  prefs: []
  type: TYPE_NORMAL
- en: '.. contents ::'
  prefs: []
  type: TYPE_NORMAL
- en: Audience
  prefs: []
  type: TYPE_NORMAL
- en: ========
  prefs: []
  type: TYPE_NORMAL
- en: Explain here who is the target readership.
  prefs: []
  type: TYPE_NORMAL
- en: Prerequisites
  prefs: []
  type: TYPE_NORMAL
- en: =============
  prefs: []
  type: TYPE_NORMAL
- en: Write the list of prerequisites for implementing this recipe. This can be additional
    documents, software, specific libraries, environment settings or just anything
    that is required beyond the obvious language interpreter.
  prefs: []
  type: TYPE_NORMAL
- en: Problem
  prefs: []
  type: TYPE_NORMAL
- en: =======
  prefs: []
  type: TYPE_NORMAL
- en: Explain the problem that this recipe is trying to solve.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs: []
  type: TYPE_NORMAL
- en: ========
  prefs: []
  type: TYPE_NORMAL
- en: Give solution to problem explained earlier. This is the core of a recipe.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs: []
  type: TYPE_NORMAL
- en: ==========
  prefs: []
  type: TYPE_NORMAL
- en: Put here references, and links to other documents.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '**$ cd my-project**'
  prefs: []
  type: TYPE_NORMAL
- en: '**$ find docs**'
  prefs: []
  type: TYPE_NORMAL
- en: '**docs**'
  prefs: []
  type: TYPE_NORMAL
- en: '**docs/source**'
  prefs: []
  type: TYPE_NORMAL
- en: '**docs/source/design**'
  prefs: []
  type: TYPE_NORMAL
- en: '**docs/source/operations**'
  prefs: []
  type: TYPE_NORMAL
- en: '**docs/source/usage**'
  prefs: []
  type: TYPE_NORMAL
- en: '**docs/source/usage/cookbook**'
  prefs: []
  type: TYPE_NORMAL
- en: '**docs/source/usage/modules**'
  prefs: []
  type: TYPE_NORMAL
- en: '**docs/source/usage/tutorial**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: ==========
  prefs: []
  type: TYPE_NORMAL
- en: Operations
  prefs: []
  type: TYPE_NORMAL
- en: ==========
  prefs: []
  type: TYPE_NORMAL
- en: 'This section contains operations documents:'
  prefs: []
  type: TYPE_NORMAL
- en: − How to install and run the project
  prefs: []
  type: TYPE_NORMAL
- en: − How to install and manage a database for the project
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '**project/docs$ make html**'
  prefs: []
  type: TYPE_NORMAL
- en: '**sphinx-build -b html -d _build/doctrees   . _build/html**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Running Sphinx v1.3.6**'
  prefs: []
  type: TYPE_NORMAL
- en: '**making output directory...**'
  prefs: []
  type: TYPE_NORMAL
- en: '**loading pickled environment... not yet created**'
  prefs: []
  type: TYPE_NORMAL
- en: '**building [mo]: targets for 0 po files that are out of date**'
  prefs: []
  type: TYPE_NORMAL
- en: '**building [html]: targets for 1 source files that are out of date**'
  prefs: []
  type: TYPE_NORMAL
- en: '**updating environment: 1 added, 0 changed, 0 removed**'
  prefs: []
  type: TYPE_NORMAL
- en: '**reading sources... [100%] index**'
  prefs: []
  type: TYPE_NORMAL
- en: '**looking for now-outdated files... none found**'
  prefs: []
  type: TYPE_NORMAL
- en: '**pickling environment... done**'
  prefs: []
  type: TYPE_NORMAL
- en: '**checking consistency... done**'
  prefs: []
  type: TYPE_NORMAL
- en: '**preparing documents... done**'
  prefs: []
  type: TYPE_NORMAL
- en: '**writing output... [100%] index**'
  prefs: []
  type: TYPE_NORMAL
- en: '**generating indices... genindex**'
  prefs: []
  type: TYPE_NORMAL
- en: '**writing additional pages... search**'
  prefs: []
  type: TYPE_NORMAL
- en: '**copying static files... done**'
  prefs: []
  type: TYPE_NORMAL
- en: '**copying extra files... done**'
  prefs: []
  type: TYPE_NORMAL
- en: '**dumping search index in English (code: en) ... done**'
  prefs: []
  type: TYPE_NORMAL
- en: '**dumping object inventory... done**'
  prefs: []
  type: TYPE_NORMAL
- en: '**build succeeded.**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Build finished. The HTML pages are in _build/html.**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: ========
  prefs: []
  type: TYPE_NORMAL
- en: Cookbook
  prefs: []
  type: TYPE_NORMAL
- en: ========
  prefs: []
  type: TYPE_NORMAL
- en: Welcome to the Cookbook.
  prefs: []
  type: TYPE_NORMAL
- en: 'Available recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: '.. toctree::'
  prefs: []
  type: TYPE_NORMAL
- en: ':glob:'
  prefs: []
  type: TYPE_NORMAL
- en: '*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: =======
  prefs: []
  type: TYPE_NORMAL
- en: session
  prefs: []
  type: TYPE_NORMAL
- en: =======
  prefs: []
  type: TYPE_NORMAL
- en: '.. module:: db.session'
  prefs: []
  type: TYPE_NORMAL
- en: The module session...
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: =======
  prefs: []
  type: TYPE_NORMAL
- en: session
  prefs: []
  type: TYPE_NORMAL
- en: =======
  prefs: []
  type: TYPE_NORMAL
- en: '.. module:: db.session'
  prefs: []
  type: TYPE_NORMAL
- en: '.. index::'
  prefs: []
  type: TYPE_NORMAL
- en: Database Access
  prefs: []
  type: TYPE_NORMAL
- en: Session
  prefs: []
  type: TYPE_NORMAL
- en: The module session...
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: :mod:`db.session`
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: Here, `:mod:` is the module marker's prefix and ``db.session`` is the name of
    the module to be linked to (as registered previously); keep in mind that `:mod:`
    as well as the previous elements are the specific directives introduced in reSTructuredText
    by Sphinx.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Sphinx provides a lot more features that you can discover on its website. For
    instance, the *autodoc* feature is a great option to automatically extract your
    doctests to build the documentation. Refer to [http://sphinx.pocoo.org](http://sphinx.pocoo.org).
  prefs: []
  type: TYPE_NORMAL
- en: Documentation building and continuous integration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Sphinx really improves the readability and experience of reading documentation
    from the consumer's point of view. As already said, it is especially helpful when
    some of its parts are tightly coupled to the code, so in the form of dosctrings
    or module helpers. While this approach really makes it easier to ensure that the
    source version of the documentation matches with the code it documents, it does
    not guarantee that documentation readership will have access to the latest and
    most up to date compiled version.
  prefs: []
  type: TYPE_NORMAL
- en: Having only minimal source representation is also not enough if the target readers
    of the documentation are not proficient enough with command-line tools and will
    not know how to build it into browsable and readable form. This is why it is important
    to build your documentation into a consumer-friendly form automatically whenever
    any change to the code repository is committed/pushed.
  prefs: []
  type: TYPE_NORMAL
- en: The best way to host the documentation built with Sphinx is to generate an HTML
    build and serve it as a static resource with your web server of choice. Sphinx
    provides proper `Makefile` to build HTML files with the `make html` command. Because
    `make` is a very common utility, it should be very easy to integrate this process
    with any continuous integration systems discussed in [Chapter 8](ch08.html "Chapter 8. Managing
    Code"), *Managing Code*.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are documenting an open source project with Sphinx, then you will make
    your life a lot easier by using **Read the Docs** ([https://readthedocs.org/](https://readthedocs.org/)).
    It is a free service for hosting documentation of open source Python projects
    with Sphinx. The configuration is completely hassle-free and it integrates very
    easily with two popular code hosting services: GitHub and Bitbucket. In practice,
    if you have your accounts properly connected and code repository properly set
    up, enabling documentation hosting on Read the Docs is a matter of just a few
    clicks.'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This chapter explained in detail how to:'
  prefs: []
  type: TYPE_NORMAL
- en: Use a few rules for efficient writing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use reStructuredText, the Pythonista's LaTeX
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Build a document portfolio and landscape
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use Sphinx to generate useful web documentations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The hardest thing to do when documenting a project is to keep it accurate and
    up to date. Making the documentation part of the code repository makes it a lot
    easier. From there, every time a developer changes a module, he or she should
    change the corresponding documentation as well.
  prefs: []
  type: TYPE_NORMAL
- en: This can be quite difficult in big projects, and adding a list of related documents
    in the header of the modules can help in that case.
  prefs: []
  type: TYPE_NORMAL
- en: A complementary approach to make sure the documentation is always accurate is
    to combine the documentation with tests through doctests. This is covered in the
    next chapter, which presents test-driven development principles and then document-driven
    development.
  prefs: []
  type: TYPE_NORMAL
