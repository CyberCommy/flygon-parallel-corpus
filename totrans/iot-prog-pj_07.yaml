- en: Setting Up a Raspberry Pi Web Server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will begin our journey to create an IoT home security dashboard by learning
    how to use the CherryPy web server framework. Our chapter will start by introducing
    **CherryPy**. We will go through a few examples before we create an HTML weather
    dashboard using a modified version of our `CurrentWeather` class from [Chapter
    4](626664bb-0130-46d1-b431-682994472fc1.xhtml), *Subscribing to Web Services*.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Introducing CherryPy—a minimalist Python Web framework
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a simple web page using CherryPy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Knowledge required to complete this chapter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The reader should have a working knowledge of Python in order to complete this
    chapter. A basic understanding of HTML, including CSS, is also required to complete
    the project in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Project overview
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will build an HTML weather dashboard using the CherryPy
    and Bootstrap frameworks. Intimate knowledge of these frameworks is not required
    to complete the project.
  prefs: []
  type: TYPE_NORMAL
- en: This project should take a couple of hours to complete.
  prefs: []
  type: TYPE_NORMAL
- en: Getting started
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To complete this project, the following will be required:'
  prefs: []
  type: TYPE_NORMAL
- en: A Raspberry Pi Model 3 (2015 model or newer)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A USB power supply
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A computer monitor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A USB keyboard
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A USB mouse
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introducing CherryPy – a minimalist Python web framework
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For our project, we will use the CherryPy Python library (be aware that it is
    CherryPy with a "y", not CherryPi with an "i").
  prefs: []
  type: TYPE_NORMAL
- en: What is CherryPy?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: According to their website, CherryPy is a Pythonic, object-oriented web framework.
    CherryPy gives developers the power to build web applications as if they were
    building any object-oriented Python program. In true Python style, CherryPy programs
    have less code and are developed in less time than other web frameworks.
  prefs: []
  type: TYPE_NORMAL
- en: Who uses CherryPy?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Some of the companies that use CherryPy include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Netflix**: Netflix uses CherryPy in its infrastructure through RESTful API
    calls. Other Python libraries used by Netflix include Bottle and SciPy.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Hulu**: CherryPy is used for some of Hulu''s projects.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Indigo Domotics**: Indigo Domotics is a home automation company that uses
    the CherryPy framework.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing CherryPy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will use Python's `pip3` package management system to install CherryPy.
  prefs: []
  type: TYPE_NORMAL
- en: A package management system is a program that helps install and configure applications.
    It can also carry out upgrades and uninstalls.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do this, open up a Terminal window and type in the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Hit *Enter*. You should see the following in the Terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/2fe0a193-759c-49b0-9c82-57ce1f5766dc.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In Thonny, go to Tools | Manage Packages. You should see that CherryPy is now
    installed, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/7f7232a1-86e0-4f95-ab6b-c8c9c3cb45a2.png)'
  prefs: []
  type: TYPE_IMG
- en: Creating a simple web page using CherryPy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To get started, let's build the most basic of programs with CherryPy. By this,
    I mean, of course, the ubiquitous `Hello World` program that we will use to say
    `Hello Raspberry Pi!`. We will work through a few examples before we build a dashboard
    to display weather data using a modified version of the `CurrentWeather` class
    from [Chapter 4](626664bb-0130-46d1-b431-682994472fc1.xhtml), *Subscribing to
    Web Services*.
  prefs: []
  type: TYPE_NORMAL
- en: Hello Raspberry Pi!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To build the `Hello Raspberry Pi!` web page, do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Open up Thonny from Application Menu | Programming | Thonny Python IDE.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the New icon to create a new file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Type the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Ensure that the line, `cherrypy.quickstart(HelloWorld())`, is inline with the
    `import` and `class` statements.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save the file as `HelloRaspberryPi.py`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the file by clicking on the green `Run current script` button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You should see the CherryPy web server starting up as indicated in the shell:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/ecbc3a89-f763-46b3-bbde-b32f6e46aa04.png)'
  prefs: []
  type: TYPE_IMG
- en: From the output to the shell you should be able to observe the ip address and
    port that CherryPy is running on, `http://127.0.0.1:8080`. You may recognize the
    ip address as the loopback address. CherryPy uses the port `8080`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open a web browser on your Raspberry Pi and type in the address from the previous
    step:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/8f293187-5738-4253-8d25-32b1172d5aac.png)'
  prefs: []
  type: TYPE_IMG
- en: Congratulations, you have just turned your humble Raspberry Pi into a web server.
  prefs: []
  type: TYPE_NORMAL
- en: If you are like me, you probably didn't think a web server could be created
    with such little code. CherryPy basically focuses on one task, which is to take
    in an HTTP request and turn it into a Python method.
  prefs: []
  type: TYPE_NORMAL
- en: So how does it work? The decorator in our `HelloWorld` class, `@cherrypy.expose`, exposes
    the method index that happens to correspond to the root of the web server. When
    we load our web page using the loopback address (`127.0.0.1`) and port that CherryPy
    is running on (`8080`), the `index` method is served up as the page. In our code
    we simply return the string `Hello Raspberry Pi!` which is then displayed as our
    web page.
  prefs: []
  type: TYPE_NORMAL
- en: The loopback address is an IP number used as the software loopback interface
    of a machine. This number is generally `127.0.0.1`. This address is not physically
    connected to a network and is used often to test the installation of a web server
    installed on the same machine.
  prefs: []
  type: TYPE_NORMAL
- en: Say hello to myFriend
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'So what happens if we expose another method in our Python code? We can check
    that easily by using the decorator before a method. Let''s write some code to
    do this:'
  prefs: []
  type: TYPE_NORMAL
- en: Open up Thonny from Application Menu | Programming | Thonny Python IDE.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the New icon to create a new file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Type the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Save the file as `SayHello.py`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Stop and start the CherryPy server by clicking on the Interrupt/Reset button,
    and then the Run current script button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, type the following into your browser's address bar and press *Enter*:` http://127.0.0.1:8080/sayHello`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You should see the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/41a50c34-5bce-48d0-817a-40f6cfed119b.png)'
  prefs: []
  type: TYPE_IMG
- en: So what did we do differently this time? For starters, we didn't just access
    the root of our server. We added `/sayHello` to our URL. Usually, when we do that
    on a web server, we are directed to a subfolder. In this case, we are taken to
    the method in our `HelloWorld` class, called `sayHello()`.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we look closely at the `sayHello()` method, we can see that it takes a parameter
    called `myFriend`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: We can see that the `myFriend` parameter has a default value of `my Friend`.
    So, when we run CherryPy and navigate to the URL at `http://127.0.0.1:8080/sayHello`,
    the `sayHello` method is called and the `"Hello " + my friend` string is returned.
  prefs: []
  type: TYPE_NORMAL
- en: Now, type the following into the the address box and hit *Enter*: `http://127.0.0.1:8080/sayHello?myFriend=Raspberry%20Pi`
  prefs: []
  type: TYPE_NORMAL
- en: In this URL, we set the value of `myFriend` to `Raspberry%20Pi` (the `%20` is
    used instead of a space). We should get the same result as our first example.
  prefs: []
  type: TYPE_NORMAL
- en: As we can see, it is very easy to connect Python methods to an HTML output.
  prefs: []
  type: TYPE_NORMAL
- en: What about static pages?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Static pages were at one time ubiquitous with the internet. Simple links between
    static pages made up what was considered a web site at the time. A lot has changed
    since then, however, being able to serve up a simple HTML page is still a basic
    requirement of a web server framework.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, how would we would do that with CherryPy? It''s pretty simple actually.
    We simply open a static HTML page in a method and return it. Let''s have CherryPy
    serve up a static page by doing the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Open up Thonny from Application Menu | Programming | Thonny Python IDE.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the New icon to create a new file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Type the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Save the file as `static.html`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In Thonny click on the New icon to create a new file in the same directory as
    `static.html`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Type the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Save the file as `StaticPage.py`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If CherryPy is still running stop it by clicking on the red button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the file `StaticPage.py` to start CherryPy.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You should see CherryPy starting up as indicated in the shell.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To view our new static web page, open up a web browser on the Raspberry Pi and
    type the following into the address bar: `http://127.0.0.1:8080`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You should see the static page displayed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/6418ac8e-b97b-49d3-9c72-7edc6d83348f.png)'
  prefs: []
  type: TYPE_IMG
- en: So what did we do here? We changed our `index` method so that it returned an
    open `static.html` file with the line return `open ('static.html')`. This opened
    up `static.html` in our browser as our index (or `http://127.0.0.1:8080/index`).
    Note that trying to type in the page name `static.html` in the url (`http://127.0.0.1:8080/static.html`)
    will not work. CherryPy serves up the content based on the method name. In this
    case the method name is index, which is the default.
  prefs: []
  type: TYPE_NORMAL
- en: HTML weather dashboard
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now it's time to add what we learned from the previous chapters. Let's revisit
    the `CurrentWeather` class from [Chapter 4](626664bb-0130-46d1-b431-682994472fc1.xhtml),
    *Subscribing to Web Servic**es*. We will rename it `WeatherData`, as this name
    is more appropriate for this project, and change it a little bit.
  prefs: []
  type: TYPE_NORMAL
- en: Open up Thonny from Application Menu | Programming | Thonny Python IDE
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the New icon to create a new file
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Type the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Save the file as `WeatherData.py`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the code
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You should see the weather for London, England printed in the following shell:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](assets/88d68f15-1946-4c56-9a03-d4549b87e934.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s take a look at the code. Basically `WeatherData.py` is exactly the same
    as `CurrentWeather.py` from [Chapter 4](626664bb-0130-46d1-b431-682994472fc1.xhtml),
    *Subscribing to Web Servic**es*, but with an extra method called `getTime`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: We use this method to return the time when the call is made to the weather web
    service for use in our web page.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will now use CherryPy and the [Bootstrap](https://getbootstrap.com) framework
    to create our dashboard. To do this do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Open up Thonny from Application Menu | Programming | Thonny Python IDE
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the New icon to create a new file
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Type the following (pay particular attention to the quotation marks):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Save the file as `WeatherDashboardHTML.py`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This may look like a whole lot of code—and it is. If we break it down, though,
    it's not really that complicated. Basically, we are using CherryPy to return an
    HTML string, which will be served up in the root of our URL through the `index` method.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we can do that, we instantiate the `WeatherDashboardHTML` class by passing
    in a `WeatherData` object. We give this `WeatherData` object the name `currentWeather`,
    as shown in the `init` (class constructor) method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'CherryPy serves up the `index` method by printing out an HTML string that is
    sprinkled with parameters from our `currentWeather` object. We are using the Bootstrap
    component library in our HTML code. We add it by incorporating the standard Bootstrap
    boilerplate code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'We use the Bootstrap `card` component as our content container. `card` allows
    us to create a header, body, and footer:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The header section of the `card` component features the name of the city. We
    use the `getCity` method from our `currentWeather` object to get the name of the
    city:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'In the body section of the `card` component, we create a row with three columns.
    Each column contains a title (`<h5>`), as well as data pulled from our `WeatherData`
    object, called `currentWeather`. You can see the title, `Temperature`, with the
    temperature value pulled from the `currentWeather` method, `getTemperature`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: For the footer we simply return the instantiation time of the `currentWeather`
    object. We will take this time as the time the weather information was checked
    from our program.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Our style section at the top allows us to customize the look of our dashboard. We
    create a CSS class, called `element-box`, in order to create a silver (`#C8C8C8`)
    rounded corner box around our weather parameters. We also limit the width of the
    card (and thus the dashboard) to `600px`. Lastly, we put a margin of `10px` around
    the columns, so that the rounded boxes do not touch each other:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Our `main` method at the bottom instantiates a `WeatherData` class as an object,
    called `currentWeather`. In our example, we are using data from the city of `Paris`.
    Our code then passes the `currentWeather` object to the `cherrypy.quickstart()`
    method, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Stop and start the CherryPy server while on the `WeatherDashboardHTML.py` file.
    If you do not have any errors in your code, you should see something similar to
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/ce7db347-f9c2-4e2b-a938-903edd69a563.png)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we turned our Raspberry Pi into a web server using the CherryPy
    HTTP framework. With its minimalist architecture, CherryPy allows the developer
    to set up a web-enabled Python program in a very short time.
  prefs: []
  type: TYPE_NORMAL
- en: We started this chapter by installing CherryPy on our Raspberry Pi. After a
    few simple examples, we built an HTML weather dashboard by modifying and utilizing
    the web service code that we wrote in [Chapter 4](626664bb-0130-46d1-b431-682994472fc1.xhtml),
    *Subscribing to Web Services*.
  prefs: []
  type: TYPE_NORMAL
- en: In the coming chapters, we will use the knowledge we gained in this chapter
    to build an IoT home security dashboard.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: True or false? It's CherryPi, not CherryPy.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: True or false? CherryPy is used by Netflix.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do we tell CherryPy that we want to expose a method?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: True or false? CherryPy requires many lines of boilerplate code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Why do we rename our `CurrentWeather` class to `WeatherData`?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: True or false? The default port used by CherryPy is `8888`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Why do we add a margin to our `col` CSS class?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which method from our `WeatherData` class do we use to get the image URL of
    the current weather conditions?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which Bootstrap component do we use as our content container?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: True or false? In our example, it is sunny and hot in London.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we only scratched the surface of the CherryPy and Bootstrap
    frameworks. Further reading can be found at the CherryPy website, available at
    [www.cherrypy.org](http://www.cherrypy.org), and Bootstrap's site, at [https://getbootstrap.com](https://getbootstrap.com).
    This is recommended to improve the developer's knowledge of these powerful frameworks.
  prefs: []
  type: TYPE_NORMAL
