- en: Chapter 3. Styling the Forms
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In earlier chapters, we learned how to build a form using HTML5, but CSS3 is
    used by web designers and developers to give web forms a rich and elegant look.
    With the basic understanding of CSS3, in this chapter we will learn how to improve
    the look and feel of the forms.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: CSS3 and its modules
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Styling the forms
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Guidelines for effective styling of the forms
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CSS3 for web forms
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: CSS3 brings us infinite new possibilities and allows styling to make better
    web forms. CSS3 gives us a number of new ways to create an impact with our form
    designs, with quite a few important changes. HTML5 introduced useful new form
    elements such as sliders and spinners and old elements such as `textbox` and `textarea`,
    and we can make them look really cool with our innovation and CSS3\. Using CSS3,
    we can turn an old and boring form into a modern, cool, and eye catching one.
  prefs: []
  type: TYPE_NORMAL
- en: CSS3 is completely backwards compatible, so we will not have to change the existing
    form designs. Browsers have and will always support CSS2.
  prefs: []
  type: TYPE_NORMAL
- en: 'CSS3 forms can be split up into modules. Some of the most important CSS3 modules
    are:'
  prefs: []
  type: TYPE_NORMAL
- en: Selectors (with pseudo-selectors)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Backgrounds and Borders
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Text (with Text Effects)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fonts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Gradients
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Styling of forms always varies with requirements and the innovation of the web
    designer or developer. In this chapter, we will look at those CSS3 properties
    with which we can style our forms and give them a rich and elegant look.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some of the new properties of CSS3 required vendor prefixes, which were used
    frequently as they helped browsers to read the code. In general, it is no longer
    needed to use them with CSS3 for some of the properties, such as `border-radius`,
    but they come into action when the browser doesn''t interpret the code. A list
    of all the vendor prefixes for major browsers is given as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`-moz-`: Firefox'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-webkit-`: WebKit browsers such as Safari and Chrome'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-o-`: Opera'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-ms-`: Internet Explorer'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Before we start styling the form, let us have a quick revision of form modules
    for better understanding and styling of the forms.
  prefs: []
  type: TYPE_NORMAL
- en: Selectors and pseudo-selectors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Selectors are a pattern used to select the elements which we want to style.
    A selector can contain one or more simple selectors separated by combinators.
    The CSS3 Selectors module introduces three new attribute selectors; they are grouped
    together under the heading **Substring Matching Attribute Selectors**.
  prefs: []
  type: TYPE_NORMAL
- en: 'These new selectors are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`[att^=val]`: The "begins with" selector'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`[att$=val]`: The "ends with" selector'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`[att*=val]`: The "contains" selector'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The first of these new selectors, which we will refer to as the "begins with"
    selector, allows the selection of elements where a specified attribute (for example,
    the `href` attribute of a hyperlink) begins with a specified string (for example,
    `http://`, `https://`, or `mailto:`).
  prefs: []
  type: TYPE_NORMAL
- en: In the same way, the additional two new selectors, which we will refer to as
    the "ends with" and "contains" selectors, allow the selection of elements where
    a specified attribute either ends with or contains a specified string respectively.
  prefs: []
  type: TYPE_NORMAL
- en: A CSS pseudo-class is just an additional keyword to selectors that tells a special
    state of the element to be selected. For example, `:hover` will apply a style
    when the user hovers over the element specified by the selector. Pseudo-classes,
    along with pseudo-elements, apply a style to an element not only in relation to
    the content of the document tree, but also in relation to external factors like
    the history of the navigator, such as `:visited`, and the status of its content,
    such as `:checked`, on some form elements.
  prefs: []
  type: TYPE_NORMAL
- en: 'The new pseudo-classes are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Type | Details |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `:last-child` | It is used to match an element that is the last child element
    of its parent element. |'
  prefs: []
  type: TYPE_TB
- en: '| `:first-child` | It is used to match an element that is the first child element
    of its parent element. |'
  prefs: []
  type: TYPE_TB
- en: '| `:checked` | It is used to match elements such as radio buttons or checkboxes
    which are checked. |'
  prefs: []
  type: TYPE_TB
- en: '| `:first-of-type` | It is used to match the first child element of the specified
    element type. |'
  prefs: []
  type: TYPE_TB
- en: '| `:last-of-type` | It is used to match the last child element of the specified
    element type. |'
  prefs: []
  type: TYPE_TB
- en: '| `:nth-last-of-type(N)` | It is used to match the Nth child element from the
    last of the specified element type. |'
  prefs: []
  type: TYPE_TB
- en: '| `:only-child` | It is used to match an element if it''s the only child element
    of its parent. |'
  prefs: []
  type: TYPE_TB
- en: '| `:only-of-type` | It is used to match an element that is the only child element
    of its type. |'
  prefs: []
  type: TYPE_TB
- en: '| `:root` | It is used to match the element that is the root element of the
    document. |'
  prefs: []
  type: TYPE_TB
- en: '| `:empty` | It is used to match elements that have no children. |'
  prefs: []
  type: TYPE_TB
- en: '| `:target` | It is used to match the current active element that is the target
    of an identifier in the document''s URL. |'
  prefs: []
  type: TYPE_TB
- en: '| `:enabled` | It is used to match user interface elements that are enabled.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `:nth-child(N)` | It is used to match every Nth child element of the parent.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `:nth-of-type(N)` | It is used to match every Nth child element of the parent
    counting from the last of the parent . |'
  prefs: []
  type: TYPE_TB
- en: '| `:disabled` | It is used to match user interface elements that are disabled.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `:not(S)` | It is used to match elements that aren''t matched by the specified
    selector. |'
  prefs: []
  type: TYPE_TB
- en: '| `:nth-last-child(N)` | Within a parent element''s list of child elements,
    it is used to match elements on the basis of their positions. |'
  prefs: []
  type: TYPE_TB
- en: Backgrounds
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: CSS3 contains several new background attributes; and moreover, in CSS3, some
    changes are also made in the previous properties of the background; which allow
    greater control on the background element.
  prefs: []
  type: TYPE_NORMAL
- en: The new background properties added are as follows.
  prefs: []
  type: TYPE_NORMAL
- en: The background-clip property
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `background-clip` property is used to determine the allowable area for the
    background image.
  prefs: []
  type: TYPE_NORMAL
- en: If there is no background image, then this property has only visual effects
    such as when the border has transparent regions or partially opaque regions; otherwise,the
    border covers up the difference.
  prefs: []
  type: TYPE_NORMAL
- en: Syntax
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The syntax for the `background-clip` property are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Values
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The values for the `background-clip` property is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`border-box`: With this, the background extends to the outside edge of the
    border'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`padding-box`: With this, no background is drawn below the border'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`content-box`: With this, the background is painted within the content box;
    only the area the content covers is painted'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`no-clip`: This is the default value, same as `border-box`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The background-origin property
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `background-origin` property specifies the positioning of the background
    image or color with respect to the `background-position` property.
  prefs: []
  type: TYPE_NORMAL
- en: This property has no effect if the `background-attachment` property for the
    background image is fixed.
  prefs: []
  type: TYPE_NORMAL
- en: Syntax
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The following is the syntax for the `background-attachment` property:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Values
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The values for the `background-attachment` property are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`border-box`: With this, the background extends to the outside edge of the
    border'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`padding-box`: By using this, no background is drawn below the border'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`content-box`: With this, the background is painted within the content box'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The background-size property
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `background-size` property specifies the size of the background image.
  prefs: []
  type: TYPE_NORMAL
- en: If this property is not specified then the original size of the image will be
    displayed.
  prefs: []
  type: TYPE_NORMAL
- en: Syntax
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The following is the syntax for the `background-size` property:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Values
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The values for the `background-size` property are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`length`: This specifies the height and width of the background image. No negative
    values are allowed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`percentage`: This specifies the height and width of the background image in
    terms of the percent of the parent element.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cover`: This specifies the background image to be as large as possible so
    that the background area is completely covered.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`contain`: This specifies the image to the largest size such that its width
    and height can fit inside the content area.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Apart from adding new properties, CSS3 has also enhanced some old background
    properties, which are as follows.
  prefs: []
  type: TYPE_NORMAL
- en: The background-color property
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If the underlying layer of the background image of the element cannot be used,
    we can specify a fallback color in addition to specifying a background color.
  prefs: []
  type: TYPE_NORMAL
- en: We can implement this by adding a forward slash before the fallback color.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The background-repeat property
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In CSS2 when an image is repeated at the end, the image often gets cut off.
    CSS3 introduced new properties with which we can fix this problem:'
  prefs: []
  type: TYPE_NORMAL
- en: '`space`: By using this property between the image tiles, an equal amount of
    space is applied until they fill the element'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`round`: By using this property until the tiles fit the element, the image
    is scaled down'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The background-attachment property
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: With the new possible value of `local`, we can now set the background to scroll
    when the element's content is scrolled.
  prefs: []
  type: TYPE_NORMAL
- en: 'This comes into action with elements that can scroll. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'CSS3 allows web designers and developers to have multiple background images,
    using nothing but just a simple comma-separated list. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Borders
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `border` property allows us to specify the style and color of an element's
    border, and with the help of CSS3 we have stepped into the next level.
  prefs: []
  type: TYPE_NORMAL
- en: With CSS3, we can create rounded borders, add shadow, and use an image as a
    border without using various design programs such as Photoshop.
  prefs: []
  type: TYPE_NORMAL
- en: The new border properties added are as follows.
  prefs: []
  type: TYPE_NORMAL
- en: The border-radius property
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Creating rounded borders using CSS was never easy. There were numerous methods
    available, but none of the approaches were straightforward. Moreover, it was necessary
    to use vendor prefixes for both WebKit and Mozilla, in order to apply the style
    correctly.
  prefs: []
  type: TYPE_NORMAL
- en: The `border-radius` property can be applied to customize buttons. We can also
    apply `border-radius` to individual corners. And with the help of this property,
    we can create rounded borders easily.
  prefs: []
  type: TYPE_NORMAL
- en: Syntax
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The syntax for the `border-radius` property is given as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Values
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Following are the values of the `border-radius` property:'
  prefs: []
  type: TYPE_NORMAL
- en: '`length`: This defines the size of the radius of the circle'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`%`: This defines the size of the radius of the circle using percentage values'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The box-shadow property
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `box-shadow` property allows designers and developers to create multiple
    drop shadows easily. These can be outside or inside the boxes, specifying values
    for color, size, blur, and offset.
  prefs: []
  type: TYPE_NORMAL
- en: By simply declaring `box-shadow` once, we can use both `outer` and `inset` versions,
    separated by a comma.
  prefs: []
  type: TYPE_NORMAL
- en: Syntax
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The syntax for the `box-shadow` property is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Values
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The following shows the values of the `box-shadow` property:'
  prefs: []
  type: TYPE_NORMAL
- en: '`inset`: This changes the outer (outset) shadow to the inner shadow'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<h-shadow>`, `<v-shadow>`: This specifies the position of the shadow'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<blur>`: The larger this value, the bigger the blur'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<spread>`: This specifies the size of the shadow'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<color>`: This specifies the color of the shadow'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The border-image property
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `border-image` property is a little tricky, but it allows us to create boxes
    with custom borders. With this feature, you can define an image to be used as
    a border instead of the normal border.
  prefs: []
  type: TYPE_NORMAL
- en: We can create decorative borders beyond simple rounded corners with images or
    even with gradients.
  prefs: []
  type: TYPE_NORMAL
- en: 'This feature is actually split into a couple of properties:'
  prefs: []
  type: TYPE_NORMAL
- en: border-image
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: border-corner-image
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Syntax
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The syntax for the `border-image` property are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Values
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The values of the `border-image` property is given as:'
  prefs: []
  type: TYPE_NORMAL
- en: '`source`: This specifies the image to be used for the border.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`slice`: This specifies the inward offsets of the border.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`width`: This specifies the width of the border.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`outset`: This specifies how much the border image area extends beyond the
    border box.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`repeat`: This specifies whether the border should be stretched or not. If
    yes, then whether it is rounded or stretched.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Text effects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have seen many websites with various text effects, and they are rapidly getting
    popular as the current and upcoming trend for good form design. With the help
    of CSS3, the best thing about these effects is that they can be achieved with
    pure CSS, that is, no more image replacements and image-heavy design. In this
    section, we will learn some new text effects that CSS3 provides us.
  prefs: []
  type: TYPE_NORMAL
- en: The new text features are as follows.
  prefs: []
  type: TYPE_NORMAL
- en: The text-shadow property
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `text-shadow` property is used to apply shadow effects to the text content.
    We can have one or more effects for a single text by using a simple comma.
  prefs: []
  type: TYPE_NORMAL
- en: These effects consist of a shadow color, x/y offset of the shadow effect, and
    a blurring radius for the shadow effect. The effects can overlap each other, but
    for clarity they should not overlap the text content.
  prefs: []
  type: TYPE_NORMAL
- en: Syntax
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The syntax for the `text-shadow` property is given as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The word-wrap property
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `word-wrap` property is used by the browser to break lines within the words
    to prevent the text from exceeding the boundary, or else it will exceed the boundary.It
    forces the text to wrap, even if it has to split it in the middle of a word.
  prefs: []
  type: TYPE_NORMAL
- en: Syntax
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The syntax for the `word-wrap` property is given as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Values
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The values of the `word-wrap` property are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`word-break`: This allows unbreakable words to be broken'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`normal`: This breaks words only at the allowed break points'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Some new text properties which CSS3 provides are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`hanging-punctuation`: This specifies whether a punctuation character can be
    placed outside the line box or not'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`punctuation-trim`: This specifies whether a punctuation character should be
    trimmed or not'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`text-align-last`: This describes how the last line of a block or a line right
    before a forced line break is aligned'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`text-emphasis`: This applies emphasis marks to the element''s text and the
    foreground color to the emphasis marks'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`text-justify`: This specifies the justification method used when `text-align`
    is `justify`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`text-outline`: This specifies the outline of the text'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`text-overflow`: This specifies what action needs to be taken when the text
    overflows in the containing element'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`text-wrap`: This specifies the line-breaking rules for the text'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`word-break`: For non-CJK scripts, this specifies the line-breaking rules'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fonts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In CSS2, the fonts module is used to define size, line height, and weight of
    a text, as well as other properties such as style and family.
  prefs: []
  type: TYPE_NORMAL
- en: In CSS we could use only predefined font families that were available on the
    computer, but CSS3 gives us the facility to use user-defined fonts which can be
    used to style the web forms.
  prefs: []
  type: TYPE_NORMAL
- en: The @font-face rule
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Fonts play a major role in deciding how a page or a particular part of a page
    looks, and that's where the web designers and corporates take benefit, such as
    in the case of branding.
  prefs: []
  type: TYPE_NORMAL
- en: The `@font-face` property has taken the usage of fonts to the next level.
  prefs: []
  type: TYPE_NORMAL
- en: This rule allows users to specify any real fonts to the text on the web forms
    or page. To be more precise, this rule allows downloading a particular font from
    the server and using it in the web form or page if the user hasn't got that particular
    font already installed.
  prefs: []
  type: TYPE_NORMAL
- en: Syntax
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The syntax for the `@font-face` property is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Font descriptors
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: CSS3 provides new font descriptors that can be defined inside the `@font-face`
    rule. Various font descriptors that can be used are as follows.
  prefs: []
  type: TYPE_NORMAL
- en: The src font descriptor
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `src` font descriptor is used to define the URL of the font.
  prefs: []
  type: TYPE_NORMAL
- en: 'Value: `URL`.'
  prefs: []
  type: TYPE_NORMAL
- en: The font-style font descriptor
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `font-style` font descriptor is used to define the style of the font that
    is to be used. It is an optional field and the default is `normal`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Values: `normal`, `italic`, and `oblique`.'
  prefs: []
  type: TYPE_NORMAL
- en: The font-stretch font descriptor
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `font-stretch` font descriptor is used to define how much the font should
    be stretched. It is an optional field and the default is `normal`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Value: `normal`, `condensed`, `ultra-condensed`, `extra-condensed`, `semi-condensed`,
    `expanded`, `semi-expanded`, `extra-expanded`, and `ultra-expanded`.'
  prefs: []
  type: TYPE_NORMAL
- en: The font-family font descriptor
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `font-family` font descriptor is used to define the name or type of the
    font.
  prefs: []
  type: TYPE_NORMAL
- en: 'Value: `name`.'
  prefs: []
  type: TYPE_NORMAL
- en: The unicode-range font descriptor
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `unicode-range` font descriptor is used to define the range of Unicode characters
    that the font supports. It is an optional field and by default its value is `U+0-10FFFF`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Value: `Unicode-range`.'
  prefs: []
  type: TYPE_NORMAL
- en: The font-weight descriptor
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `font-weight` font descriptor is used to define how bold the font should
    be. It is an optional field and by default it is `normal`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Values: `normal`, `bold`, `100`, `200`, `300`, `400`, `500`, `600`, `700`,
    `800`, and `900`.'
  prefs: []
  type: TYPE_NORMAL
- en: Gradients
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of CSS3's amazing color feature is gradients. They allow a smooth transition
    from one color to another.
  prefs: []
  type: TYPE_NORMAL
- en: They are declared using the `background-image` property as they have no special
    property.
  prefs: []
  type: TYPE_NORMAL
- en: Gradients allow us to create transparency by translating the color `hex` to
    `rgba` mode.
  prefs: []
  type: TYPE_NORMAL
- en: In spite of many enhancements, vendor prefixes are used to make the form browser
    compatible so the browser can interpret the styles.
  prefs: []
  type: TYPE_NORMAL
- en: Syntax
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The syntax for gradients is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Values
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The values of gradients include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`angle`: This specifies the gradient''s angle of direction'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`color`: This specifies the color value with an optional option of stop position'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Styling the forms
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After a quick revision of the new CSS3 properties, it's time to customize the
    old and boring forms.
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 1](ch01.html "Chapter 1. Forms and Their Significance"), *Forms
    and Their Significance*, we built a **Health Survey Form**. We will reuse that
    form example to talk about the new CSS3 as well as the basic CSS properties and
    how they work to enhance the creativity in the form.
  prefs: []
  type: TYPE_NORMAL
- en: 'For styling, we will just take the first part of the form which is **Personal
    Information**. With some minor changes which need no explanation, the following
    is the HTML code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Since our main focus is on styling, let us take a look at the CSS of the form.
    The following code is maintained in a separate file with a `.css` extension (external
    CSS file), which is linked to the main HTML page. Having a separate CSS file should
    be followed as it improves code readability as well as the maintenance of styling
    is made easier.
  prefs: []
  type: TYPE_NORMAL
- en: 'Also, new properties and font types are highlighted in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The result of the previous HTML and CSS code is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Styling the forms](img/4661OS_03_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: If we compare the new CSS3 form with the first section of the form which we
    built in [Chapter 1](ch01.html "Chapter 1. Forms and Their Significance"), *Forms
    and Their Significance*, we will see the difference in the look and feel of both
    the forms.
  prefs: []
  type: TYPE_NORMAL
- en: 'For better comparison, the first section of the form in [Chapter 1](ch01.html
    "Chapter 1. Forms and Their Significance"), *Forms and Their Significance*, is
    given as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Styling the forms](img/4661OS_03_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now, we realize the power of CSS3, using which we have converted a simple and
    boring form into something stylish and eye catching very easily.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let us see the various selectors used in the CSS of the form and their significance:'
  prefs: []
  type: TYPE_NORMAL
- en: '`<body>`: The CSS attributes applied to the `<body>` tag acts as a fallback
    or default attribute as it acts as the parent tag containing several other tags
    inside it. The `fallback` attributes for CSS are `font-family`, `font-size`, and
    so on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An attribute such as `background` which utilizes the color (in terms of RBG),
    is set with the help of `linear-gradient`. The `linear-gradient` is described
    with the help of RBG color value, starting from the top with stop values defined
    as percentage till the bottom. They are described for the different browser supports
    which contain start values such as `–webkit`, `-O`, "and" `-ms`. It shows the
    blue background of the form. Apart from this, various other CSS attributes such
    as `font-size`, `height`, and `width` are also used.
  prefs: []
  type: TYPE_NORMAL
- en: '`heading` and `legend`: For our form heading (**Health Survey Form**) and legend
    heading (**Personal Information**), we have implemented a new font type, `Conv_azoft-sans-bold-italic`,
    which is defined in the `font-family` attribute in the `heading` and `legend`
    class using the `@font-face` property.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We have imported the font type files `.eot`, `.woff`, `.ttf`, and `.svg` for
    supporting different browsers with the help of the `@font-face` property.
  prefs: []
  type: TYPE_NORMAL
- en: Also, for the `legend` tag we have utilized the `fieldset_border` class for
    changing the border color and style.
  prefs: []
  type: TYPE_NORMAL
- en: '`dateinput` and `div_dob`: Both these classes are defined for the `<input>`
    type `date` for the user to pick his/her date of birth from the drop-down calendar.
    The `div_dob` class is defined for the arrangement of the elements on the screen
    by utilizing the `float` attribute one the left-hand side. Along with it, the
    `dateinput` class is used for placing the date icon with the help of the `background`,
    `background-position`, and `background-size` properties for proper rendering.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`txtinput`: The `txtinput` class is used for styling the text inputs used in
    the form, and apart from using the previous CSS attributes, such as `font-family`
    and `border-style`, we have used a new attribute named `border-radius` to give
    the text input a rounded border on all sides.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We have also added a property for the `cursor` type as a pointer that shows
    a hand-click icon when we move the mouse pointer over the input field.
  prefs: []
  type: TYPE_NORMAL
- en: The classes `name`, `address_img`, `home_tel`, `work_tel`, `email`, `dropdown`,
    and `calendar` have been used for setting the background image for the text inputs
    fields with their respective icon images depending on the `<input>` type. We have
    utilized various properties of the background, such as `background`, `background-position`,
    and `background-size` for proper rendering of an icon image.
  prefs: []
  type: TYPE_NORMAL
- en: The `autofocus` attribute is used on the first name text input for the automatic
    focus of the cursor during the form load.
  prefs: []
  type: TYPE_NORMAL
- en: '`radiobutton`: The `<input>` type `radio` is an old HTML input, which is used
    here for the purpose of selecting the gender. We have also used the `float` property
    for aligning the radio buttons on the right-hand side of the date of birth.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We have also added a property for the `cursor` type as a pointer that shows
    a hand-click icon when we move the mouse pointer over the input field.
  prefs: []
  type: TYPE_NORMAL
- en: '`submit`: For submitting the form to the server, we have created a **Submit**
    button. In the `submit_btn` class we have performed button customization using
    the previous version properties such as color, width, and height, along with CSS3
    properties such as `border-radius` to round the button from all sides, `box-shadow`,
    and `background` with a color attribute using `linear-gradients` to provide the
    desired effect.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We have also added a property for the `cursor` type which is a pointer that
    shows a hand-click icon when we move the mouse pointer over the input field.
  prefs: []
  type: TYPE_NORMAL
- en: Guidelines
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will see the CSS3 guidelines for effective styling of the
    forms.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some of the best practices for CSS3 are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Avoid using inline styling for CSS. External CSS files must be used for styling.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Minified CSS files must be used wherever possible as this a practice for removing
    unnecessary characters from the code to reduce the size.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use combined files for CSS.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Avoid use of multiple declarations wherever possible.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Always think of progressive enhancement.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Vendor prefixes should be organized and well commented.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For background-related properties use fallback.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The readability of the text should not be affected while using typography.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enable the fallback and test the form in every browser.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Try to use efficient CSS selectors.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Avoid the usage of CSS Expression wherever possible.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Specify image dimensions to improve the rendering speed of the web page.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use CSS sprites for faster rendering of images.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned about the basics of CSS3 and the modules in which
    we can categorize the CSS3 for forms, such as vendor prefixes, gradients, and
    backgrounds.
  prefs: []
  type: TYPE_NORMAL
- en: Then, with the help of a code example, we learned a practical implementation
    of most of the CSS3 properties that can be used for improving the look and feel
    of the forms.
  prefs: []
  type: TYPE_NORMAL
- en: Lastly, we learned the best practices for the effective styling of the forms.
  prefs: []
  type: TYPE_NORMAL
