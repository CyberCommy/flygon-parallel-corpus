- en: Chapter 3. Gathering Additional Host Information
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This chapter shows you how to do some things that in many situations might be
    illegal, unethical, a violation of the terms of service, or just not a good idea.
    It is provided here to give you information that may be of use to protect yourself
    against threats and make your own system more secure. Before following these instructions,
    be sure you are on the right side of the legal and ethical line... use your powers
    for good!
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Geolocating an IP address
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting information from WHOIS records
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Checking if a host is known for malicious activities
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Collecting valid e-mail accounts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Discovering hostnames pointing to the same IP address
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Brute forcing DNS records
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fingerprinting the operating system of a host
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Discovering UDP services
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Listing protocols supported by a remote host
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Discovering stateful firewalls by using a TCP ACK scan
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Matching services with known security vulnerabilities
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spoofing the origin IP of a port scan
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The most important process during a penetration test is the information gathering
    phase. During this process we investigate our target with the goal of learning
    everything about it. The information we discover could be invaluable in further
    stages of our penetration test. During this process we gather information such
    as usernames, possible passwords, additional hosts and services, or even version
    banners, among many other interesting bits of data.
  prefs: []
  type: TYPE_NORMAL
- en: There are several tools that help us retrieve information about our target,
    using many different sources. Our success comes from using all available resources.
    Dare to ignore or neglect any of them and you could be missing out on the one
    piece of information that you need to completely compromise your target.
  prefs: []
  type: TYPE_NORMAL
- en: Nmap is well known for its information-gathering capabilities such as OS fingerprinting,
    port enumeration, and service discovery, but thanks to the Nmap Scripting Engine,
    it is now possible to perform several new information-gathering tasks such as
    geolocating an IP, checking if a host is conducting malicious activities, brute
    forcing DNS records, and collecting valid e-mail accounts using Google, among
    many others.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter I will cover a combination of Nmap options and NSE scripts to
    query WHOIS servers, discover UDP services, and match services against public
    security vulnerabilities.
  prefs: []
  type: TYPE_NORMAL
- en: Geolocating an IP address
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Identifying the location of an IP address helps system administrators in many
    situations, such as when tracing the origin of an attack, a network connection,
    or a harmless poster in their forums.
  prefs: []
  type: TYPE_NORMAL
- en: 'Gorjan Petrovski submitted three Nmap NSE scripts that help us geolocate a
    remote IP address: `ip-geolocation-maxmind`, `ip-geolocation-ipinfodb`, and `ip-geolocation-geobytes`.'
  prefs: []
  type: TYPE_NORMAL
- en: This recipe will show you how to set up and use the geolocation scripts included
    with Nmap NSE.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For the script `ip-geolocation-maxmind` an external database is needed. Download
    Maxmind's city database from [http://geolite.maxmind.com/download/geoip/database/GeoLiteCity.dat.gz](http://geolite.maxmind.com/download/geoip/database/GeoLiteCity.dat.gz
    ) and extract it to your local Nmap data folder `($NMAP_DATA/nselib/data/`).
  prefs: []
  type: TYPE_NORMAL
- en: For *ip-geolocation-ipinfodb* an API key is needed, so you need to register
    at [http://ipinfodb.com/register.php](http://ipinfodb.com/register.php) to get
    it. This service does not impose a query limit, unlike Geobytes, so I highly recommend
    grabbing your own API key to enable this script.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open a terminal and enter the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The argument `--script ip-geolocation-*` tells Nmap to launch all scripts with
    the pattern `ip-geolocation-` at the beginning of the name. At the time of writing
    there are three geolocation scripts available: `ip-geolocation-geoplugin`, `ip-geolocation-maxmind`,
    and `ip-geolocation-ipinfodb`. Sometimes service providers will not return any
    information on a particular IP address, so it is recommended that you try and
    compare the results of all of them. The information returned by these scripts
    include latitude and longitude coordinates, country, state, and city where available.'
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Keep in mind that the `ip-geolocation-geoplugin` script works by querying a
    free public service. Before using this script, consider the amount of queries
    you need to do since many public services impose a limit of allowed queries.
  prefs: []
  type: TYPE_NORMAL
- en: It is a common misconception that IP-to-geolocation services provide a 100 percent
    location of the computer or device. The location accuracy heavily depends on the
    database, and each service provider may have used different methods of collecting
    data. Remember this when interpreting results from these NSE scripts.
  prefs: []
  type: TYPE_NORMAL
- en: Submitting a new geo-location provider
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you know a better IP-to-geolocation provider, don't hesitate in submitting
    your own geolocation script to `nmap-dev`. Don't forget to document if the script
    requires an external API or database. If you do not have experience in developing
    for Nmap, you may add your idea to the NSE script wish list located at [https://secwiki.org/w/Nmap/Script_Ideas.](https://secwiki.org/w/Nmap/Script_Ideas.)
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Getting information from WHOIS records* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Checking if a host is known for malicious activities* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Brute forcing DNS records* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Collecting valid e-mail accounts* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Discovering hostnames pointing to the same IP address* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Matching services with known security vulnerabilities* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Spoofing the origin IP of a port scan* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Generating a network topology graph with Zenmap* recipe in [Chapter 8](ch08.html
    "Chapter 8. Generating Scan Reports"), *Generating Scan Reports*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting information from WHOIS records
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**WHOIS** records often contain important data such as the registrar name and
    contact information. System administrators have been using WHOIS for years now,
    and although there are many tools available to query this protocol, Nmap proves
    itself invaluable because of its ability to deal with IP ranges and hostname lists.'
  prefs: []
  type: TYPE_NORMAL
- en: This recipe will show you how to retrieve the WHOIS records of an IP address
    or domain name by using Nmap.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open a terminal and enter the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will look similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The argument `--script whois` tells Nmap to query a Regional Internet Registries
    WHOIS database in order to obtain the records of a given target. This script uses
    the IANA''s Assignments Data to select the RIR and it caches the results locally.
    Alternatively, you could override this behavior and select the order of the service
    providers to use in the argument `whodb`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: This script will query, sequentially, a list of WHOIS providers until the record
    or a referral to the record is found. To ignore the referral records, use the
    value `nofollow` *:*
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To query the WHOIS records of a hostname list (`-iL <input file>`) without
    launching a port scan (`-sn`), enter the following Nmap command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will look similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Disabling cache and the implications of this
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Sometimes cached responses will be preferred over querying the WHOIS service,
    and this might prevent the discovery of an IP address assignment. To disable the
    cache you could set the script argument `whodb` to `nocache`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: As with every free service, we need to consider the amount of queries that we
    need to make in order to avoid reaching the daily limit and geting banned.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Geolocating an IP address* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Checking if a host is known for malicious activities* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Brute forcing DNS records* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Collecting valid e-mail accounts* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Fingerprinting the operating system of a host* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Matching services with known security vulnerabilities* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Spoofing the origin IP of a port scan* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Generating a network topology graph with Zenmap* recipe in [Chapter 8](ch08.html
    "Chapter 8. Generating Scan Reports"), *Generating Scan Reports*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Checking if a host is known for malicious activities
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: System administrators hosting users often struggle with monitoring their servers
    against malware distribution. Nmap allows us to systematically check if a host
    is known for distributing malware or being used in phishing attacks, with some
    help from the **Google Safe Browsing** API.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe shows system administrators how to check if a host has been flagged
    by Google's Safe Browsing Service as being used in phishing attacks or distributing
    malware.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The script `http-google-malware` depends on Google's Safe Browsing service and
    it requires you to register to get an API key. Register at [http://code.google.com/apis/safebrowsing/key_signup.html](http://code.google.com/apis/safebrowsing/key_signup.html).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open your favorite terminal and type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The script will return a message indicating if the server is known by Google's
    Safe Browsing for distributing malware or being used in a phishing attack.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The script `http-google-malware` queries Google Safe Browsing Service to determine
    if a host is suspected to be malicious. This service is used by web browsers such
    as Mozilla Firefox and Google Chrome to protect its users, and the lists are updated
    very frequently.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you don''t want to use the `http-google-malware.api` argument every time
    you launch this script, you can edit the `http-google-malware.nse` file and hardcode
    your API key into the script. Look for the following section and store your key
    in the variable `APIKEY`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'For complete documentation visit [http://nmap.org/nsedoc/scripts/http-google-malware.html](http://nmap.org/nsedoc/scripts/     http-google-malware.html).'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Geolocating an IP address* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Getting information from WHOIS records* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Discovering hostnames pointing to the same IP address* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Matching services with known security vulnerabilities* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Spoofing the origin IP of a port scan* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Brute forcing DNS records* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Discovering UDP services* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Generating a network topology graph with Zenmap* recipe in [Chapter 8](ch08.html
    "Chapter 8. Generating Scan Reports"), *Generating Scan Reports*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Collecting valid e-mail accounts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Valid e-mail accounts are very handy to penetration testers since they can be
    used for exploiting trust relationships in phishing attacks, brute-force password
    auditing to mail servers, and as usernames in many IT systems.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe illustrates how to get a list of valid public e-mail accounts by
    using Nmap.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The script `http-google-email` is not included in Nmap''s official repository.
    So you need to download it from [http://seclists.org/nmap-dev/2011/q3/att-401/http-google-email.nse](http://seclists.org/nmap-dev/2011/q3/att-401/     http-google-email.nse ) and copy it to your local scripts directory. After copying
    `http-google-email.nse`, you should update the script database with:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open your favorite terminal and type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see something similar to the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Nmap Scripting Engines allows penetration testers to gather e-mails in
    two ways:'
  prefs: []
  type: TYPE_NORMAL
- en: Shinook's `http-google-email` script uses Google Web and Google Groups Search
    to find public e-mail accounts belonging to a given domain.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pattrik Karlsson's `http-email-harvest` spiders the given web server and extracts
    all of the e-mail addresses found.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The argument `-p80 --script http-google-email,http-email-harvest` limits port
    scanning to port 80 and initiates the scripts mentioned previously to try to gather
    as many valid e-mail accounts as possible.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The script `http-email-harvest` depends on the `httpspider` library, which
    is highly customizable. For example, to allow the spider to crawl additional pages,
    use the argument `httpspider.maxpagecount`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'To start spidering from a different page than the root folder, use the argument
    `httpspider.url`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: The official documentation for this library can be found at [http://nmap.org/nsedoc/lib/httpspider.html#script-args](http://nmap.org/nsedoc/lib/httpspider.html#script-args).
  prefs: []
  type: TYPE_NORMAL
- en: 'For `http-google-email`,there are a couple of arguments that are good to know:'
  prefs: []
  type: TYPE_NORMAL
- en: You can specify the domain name to look for by using the script argument `domain`*.*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'By increasing the number of page results with the script argument `pages` you
    might get additional results:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: NSE script arguments
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The flag `--script-args` is used to set arguments of NSE scripts. For example,
    if you would like to set the HTTP library argument `useragent`, use the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also use aliases when setting arguments of NSE scripts. Use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Instead of:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: HTTP User Agent
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'There are some packet filtering products that block requests made using Nmap''s
    default HTTP User Agent. You can set a different HTTP UserAgent by setting the
    argument `http.useragent`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Hiding our traffic with additional random data* recipe in [Chapter 2](ch02.html
    "Chapter 2. Network Exploration"), *Network Exploration*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Geolocating an IP address* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Getting information from WHOIS records* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Fingerprinting the operating system of a host* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Discovering hostnames pointing to the same IP address* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Checking if a host is known for malicious activities* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Brute forcing DNS records* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Discovering hostnames pointing to the same IP address
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Web servers return different content depending on the hostname used in the HTTP
    request. By discovering new hostnames, penetration testers can access new target
    web applications that were inaccessible using the server's IP.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe shows how to enumerate all hostnames pointing to the same IP , in
    order to discover new targets.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The script `hostmap` depends on external services, and the official version
    only supports BFK''s DNS Logger. In my experience, this service works great for
    popular servers but not so much for the others. For this reason I created my own
    version of `hostmap.nse` that adds a new service provider: [ip2hosts.com.](http://ip2hosts.com.)
    This service uses Bing''s Search API and often returns additional records not
    available in BFK''s records.'
  prefs: []
  type: TYPE_NORMAL
- en: Download `hostmap.nse` with Bing support at [https://secwiki.org/w/Nmap/External_Script_Library](https://secwiki.org/w/Nmap/External_Script_Library).
  prefs: []
  type: TYPE_NORMAL
- en: 'After copying it to your local script directory, update your script database
    by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open a terminal and enter the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will look similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The arguments `--script hostmap -p80` tell Nmap to start the HTTP script hostmap
    and limit port scanning to port 80 to speed up this task.
  prefs: []
  type: TYPE_NORMAL
- en: 'This version of `hostmap.nse` queries two different web services: BFK''s DNS
    Logger and [ip2hosts.com](http://ip2hosts.com). BFK''s DNS Logger is a free service
    that collects its information from public DNS data, and [ip2hosts.com](http://ip2hosts.com)
    is a web service maintained by myself that is based on Bing''s Search API. It
    basically launches a Bing search using the keywords "ip:<target ip>" to extract
    a list of known hostnames.'
  prefs: []
  type: TYPE_NORMAL
- en: Both of these services are free, and abusing them will most likely get you banned
    from the service.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You could specify the service provider by setting the argument `hostmap.provider`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'To save a hostname list for each IP scanned, use the argument `hostmap.prefix`.
    Setting this argument will create a file with a filename of `<prefix><target>`
    in your working directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Gathering network information with broadcast scripts* recipe in [Chapter
    2](ch02.html "Chapter 2. Network Exploration"), *Network Exploration*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Geolocating an IP address* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Getting information from WHOIS records* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Collecting valid e-mail accounts* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Checking if a host is known for malicious activities* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Listing protocols supported by a remote host* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Brute forcing DNS records* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Brute forcing DNS records
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: DNS records hold a surprising amount of host information. By brute forcing them
    we can reveal additional targets. Also, DNS entries often give away information,
    for example "mail" indicating that we are obviously dealing with the mail server,
    or Cloudflare's default DNS entry "direct" which most of the time will point to
    the IP that they are trying to protect.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe shows how to brute force DNS records with Nmap.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open your terminal and type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'The results should include a list of DNS records found if successful:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The argument `--script dns-brute` initiates the NSE script `dns-brute`.
  prefs: []
  type: TYPE_NORMAL
- en: '`dns-brute` was developed by Cirrus and it attempts to discover new hostnames
    by brute forcing the target''s DNS records. The script basically iterates through
    a hostname list, checking if the DNS entry exists to find valid records.'
  prefs: []
  type: TYPE_NORMAL
- en: This brute force attack is easily detected by security mechanism monitoring
    for NXDOMAIN responses.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The default dictionary used by `dns-brute` is hardcoded in the NSE file located
    in your local script folder `/scripts/dns-brute.nse`. To use your own dictionary
    file, use the argument `dns-brute.hostlist`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'To set the number of threads, use the argument `dns-brute.threads`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'You can set a different DNS server with `--dns-servers <serv1[,serv2],...>`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Target library
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The argument `--script-args=newtargets` forces Nmap to use new hosts found
    as targets:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will look similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Note how we only specified one target when we launched the scan, but the `newtargets`
    argument added new IPs to the scanning queue.
  prefs: []
  type: TYPE_NORMAL
- en: 'The argument `max-newtargets` sets the maximum number of hosts to be allowed
    to added to the scanning queue:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Fingerprinting services of a remote host* recipe in [Chapter 1](ch01.html
    "Chapter 1. Nmap Fundamentals"), *Nmap Fundamentals*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Geolocating an IP address* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Collecting valid e-mail addresses* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Getting information from WHOIS records* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Discovering hostnames pointing to the same IP address* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Spoofing the origin IP of a port scan* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Discovering UDP services* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fingerprinting the operating system of a host
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Determining the operating system of a host is essential to every penetration
    tester for many reasons including listing possible security vulnerabilities, determining
    the available system calls to set the specific exploit payloads, and for many
    other OS-dependent tasks. Nmap is known for having the most comprehensive OS fingerprint
    database and functionality.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe shows how to fingerprint the operating system of a remote host by
    using Nmap.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open a terminal and enter the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will look similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The option `-O` tells Nmap to enable OS detection. Nmap's OS detection is very
    powerful due to its user community, which abidingly contributes fingerprints that
    identify a wide variety of systems, including residential routers, IP webcams,
    operating systems, and many other hardware devices.
  prefs: []
  type: TYPE_NORMAL
- en: Nmap conducts several tests to try to determine the operating system of a target.
    The complete documentation can be found at [http://nmap.org/book/osdetect-methods.html](http://nmap.org/book/osdetect-methods.html).
  prefs: []
  type: TYPE_NORMAL
- en: OS detection requires raw packets, and Nmap needs enough privileges to create
    these packets.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Nmap uses the **CPE** (**Common Platform Enumeration**) as the naming scheme
    for service and operating system detection. This convention is used in the information
    security industry to identify packages, platforms, and systems.
  prefs: []
  type: TYPE_NORMAL
- en: 'In case OS detection fails, you can use the argument `--osscan-guess` to try
    to guess the operating system:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'To launch OS detection only when the scan conditions are ideal, use the argument
    `--osscan-limit`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: OS detection in verbose mode
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Try OS detection in verbose mode to see additional host information, such as
    the IP ID sequence number used for idle scanning:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Submitting new OS fingerprints
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Nmap will let you know when you can contribute to the project by submitting
    an unidentified operating system or device.
  prefs: []
  type: TYPE_NORMAL
- en: I encourage you to contribute to this project, as Nmap's detection capabilities
    come directly from its database. Please visit [http://insecure.org/cgi-bin/submit.cgi?new-os](http://insecure.org/cgi-bin/submit.cgi?new-os)
    to submit a new fingerprint.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Listing open ports on a remote host* recipe in [Chapter 1](ch01.html "Chapter 1. Nmap
    Fundamentals"), *Nmap Fundamentals*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Fingerprinting services of a remote host* recipe [Chapter 1](ch01.html
    "Chapter 1. Nmap Fundamentals"), *Nmap Fundamentals*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Scanning IPv6 addresses* recipe [Chapter 2](ch02.html "Chapter 2. Network
    Exploration"), *Network Exploration*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Listing protocols supported by a remote host* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Matching services with known security vulnerabilities* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Spoofing the origin IP of a port scan* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Brute forcing DNS records* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Discovering stateful firewalls with a TCP ACK scan* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Discovering UDP services* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Discovering UDP services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: UDP services are often ignored during penetration tests, but good penetration
    testers know that they frequently reveal important host information and can even
    be vulnerable and used to compromise a host.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe shows how to use Nmap to list all open UDP ports on a host.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open your terminal and type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'The output follows Nmap''s standard format:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The argument `-sU` tells Nmap to launch a *UDP scan* against the target host.
    Nmap sends UDP probes to the selected ports and analyzes the response to determine
    the port''s state. Nmap''s *UDP scanning technique* works in the following way:'
  prefs: []
  type: TYPE_NORMAL
- en: A UDP packet is sent to the target with an empty UDP payload unless one is specified
    in the file `nmap-payloads`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the port is closed, a ICMP Port Unreachable message is received from the
    target.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the port is open, UDP data is received.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the port does not respond at all, we assume the port state is `filtered|open`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: UDP scanning is slow due to transmission rates imposed by operating systems
    that limit the number of responses per second. Also, firewalled hosts blocking
    ICMP will drop port unreachable messages. This makes it difficult for Nmap to
    differentiate between closed and filtered ports, and causes retransmissions that
    make this scan technique even slower. It is important that you consider this beforehand
    if you need to do an inventory of UDP services and are on a tight time schedule.
  prefs: []
  type: TYPE_NORMAL
- en: Port selection
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Because UDP scanning can be very slow, it is recommended that you use the flag
    `-p` for port selection:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'The alias `-F` can also be used for fast port scanning:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Fingerprinting services of a remote host* recipe in [Chapter 1](ch01.html
    "Chapter 1. Nmap Fundamentals"), *Nmap Fundamentals*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Getting information from WHOIS records* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Fingerprinting the operating system of a host* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Discovering hostnames pointing to the same IP address* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Listing protocols supported by a remote host* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Matching services with known security vulnerabilities* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Spoofing the origin IP of a port scan* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Brute forcing DNS records* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Listing protocols supported by a remote host
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An **IP Protocol scan** is useful for determining what communication protocols
    are being used by a host. This information serves different purposes, including
    packet filtering testing and remote operating system fingerprinting.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe shows how to use Nmap to enumerate all of the IP protocols supported
    by a host.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open a terminal and type the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: The results will show what protocols are supported, along with their states.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The flag `-sO` tells Nmap to perform an IP Protocol Scan. This type of scan
    iterates through the protocols found in the file `nmap-protocols`, and creates
    IP packets for every entry. For the IP protocols TCP, ICMP, UDP, IGMP, and SCTP,
    Nmap will set valid header values but for the rest, an empty IP packet will be
    used.
  prefs: []
  type: TYPE_NORMAL
- en: 'To determine the protocol state, Nmap classifies the different responses received,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: If it receives an ICMP protocol unreachable error type 3 code 2, the protocol
    is marked as closed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ICMP unreachable errors type 3 code 1,3,9,10 or 13 indicate that a protocol
    is filtered
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If no response is received, the protocol is marked as `filtered|open`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Any other response will cause the protocol to be marked as opened
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To specify what protocols should be scanned, we could set the argument `-p`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: Customizing the IP protocol scan
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The file containing the IP protocol list is named `nmap-protocols` and is located
    at the root folder of your Nmap installation. To add a new IP protocol, we simply
    need to add its entry to this file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Fingerprinting the operating system of a host* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Discovering hostnames pointing to the same IP address* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Matching services with known security vulnerabilities* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Spoofing the origin IP of a port scan* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Brute forcing DNS records* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Discovering stateful firewalls with a TCP ACK* *scan* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Discovering UDP services* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Discovering stateful firewalls by using a TCP ACK scan
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The **TCP ACK scanning technique** uses packets with the flag ACK on to try
    to determine if a port is filtered. This technique comes handy when checking if
    the firewall protecting a host is stateful or stateless.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe shows how to perform TCP ACK port scanning by using Nmap.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open your terminal and type the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'The output follows the standard port format:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The argument `-sA` tells Nmap to launch a *TCP ACK port scan* against the target
    host. The TCP ACK port scanning technique works in the following way:'
  prefs: []
  type: TYPE_NORMAL
- en: A packet with the flag ACK is sent to each selected port.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the port is open or closed, a RST packet is sent by the target machine. This
    response also indicates that the target host is not behind a stateful firewall.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We can determine that a host is firewalled if it does not return a response,
    or if it returns an ICMP error message.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It is important to remember that this technique does not differentiate between
    open and closed ports. It is mainly used to identify the packet filtering systems
    protecting a host.
  prefs: []
  type: TYPE_NORMAL
- en: This scanning technique can be combined with the Nmap option `--badsum` to improve
    the probability of detecting a firewall or IPS. Packet filtering systems that
    do not calculate the checksum correctly will return an ICMP destination unreachable
    error, hence giving away their presence.
  prefs: []
  type: TYPE_NORMAL
- en: 'Port ranges can be set by using the flags `-p`, `-p[1-65535]`, or `-p-` for
    all possible TCP ports:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: Port states
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Nmap categorizes ports using the following states:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Open`: Indicates that an application is listening for connections on this
    port.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Closed`: Indicates that the probes were received but there is no application
    listening on this port.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Filtered`: Indicates that the probes were not received and the state could
    not be established. It also indicates that the probes are being dropped by some
    kind of filtering.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Unfiltered`: Indicates that the probes were received but a state could not
    be established.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Open/Filtered`: Indicates that Nmap couldn''t determine if the port is filtered
    or open.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Closed/Filtered`: Indicates that Nmap couldn''t determine if the port is filtered
    or closed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Fingerprinting the operative system of a host* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Discovering hostnames pointing to the same IP address* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Checking if a host is known for malicious activities* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Listing protocols supported by a remote host* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Matching services with known security vulnerabilities* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Spoofing the origin IP of a port scan* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Brute forcing DNS records* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Discovering UDP services* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Matching services with known security vulnerabilities
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Version discovery is essential to pen-testers as they can use this information
    to find public security vulnerabilities affecting a scanned service. The Nmap
    Scripting Engine allows us to match the popular OSVDB vulnerability database with
    the discovered services in our scans.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe shows how to list known security vulnerabilities in the `osvdb`
    database that could possibly affect a service discovered by using Nmap.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To accomplish this task, we use the NSE script `vulscan` developed by Marc Ruef.
    This script is not included in the official Nmap repository, so you need to install
    it separately before continuing.
  prefs: []
  type: TYPE_NORMAL
- en: To install it, download the latest version of `vulscan` from [http://www.computec.ch/mruef/?s=software&l=e](http://www.computec.ch/mruef/?s=software&l=e).
  prefs: []
  type: TYPE_NORMAL
- en: After extracting the files, copy the script `vulscan.nse` in your local script
    folder `($NMAP_INSTALLATION/scripts/`). Then create a folder named `vulscan` in
    the same directory and place the `osvdb` database files `object_products.txt`,
    `object_correlations.txt`, `object_links.txt`, and `vulnerabilities.txt` in it.
  prefs: []
  type: TYPE_NORMAL
- en: 'To update the script database run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open a terminal and enter the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'The script `vulscan` will include the matching records after every service
    is discovered:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the previous command, the flag `-sV` enables service detection, and the argument
    `--script vulscan` initiates the NSE script `vulscan`.
  prefs: []
  type: TYPE_NORMAL
- en: The website [osvdb.org](http://osvdb.org) is an open source vulnerability database
    created by HD Moore and Forrest Rae. The script `vulscan` parses each service
    name and version and compares these against a local copy of the `vulnerability`
    database at [osvdb.org](http://osvdb.org).
  prefs: []
  type: TYPE_NORMAL
- en: This method is far from perfect, as name matching for `vulscan` still suffers
    some bugs and we also depend on Nmap's version detection. But it is still amazingly
    useful to locate possible public vulnerabilities affecting the scanned service.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To update your local copy of the `osvdb` database, visit [osvdb.org](http://osvdb.org),
    grab the latest CSV export and replace the files in `/scripts/vulscan/`.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Fingerprinting the operating system of a host* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Collecting valid e-mail accounts* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Discovering hostnames pointing to the same IP address* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Listing the protocols supported by a remote host* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Spoofing the origin IP of a port scan* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Brute forcing DNS records* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Discovering UDP services* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spoofing the origin IP of a port scan
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*Idle scanning* is a very powerful technique, where Nmap takes advantage of
    an idle host with a predictable IP ID sequence number to spoof the origin IP of
    a port scan.'
  prefs: []
  type: TYPE_NORMAL
- en: This recipe illustrates how to find zombie hosts and use them to spoof your
    IP address when scanning a remote host with Nmap.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To launch an idle scan we need a *zombie host*. A zombie host is a machine with
    a predictable IP ID sequence number that will be used as the spoofed IP address.
    A good candidate must not be communicating with other hosts, in order to maintain
    the correct IP ID sequence number and avoid false positives.
  prefs: []
  type: TYPE_NORMAL
- en: 'To find hosts with an incremental IP ID sequence, you could use the script
    `ipidseq` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'Possible candidates will return the text `Incremental` in the script''s output
    section:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To launch an idle scan, open your terminal and type the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will look similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'Idle scanning should work if the zombie host meets the previously-discussed
    requirements. If something did not work as expected, the returned error message
    should give you an idea of what went wrong:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Idle scanning was originally discovered by Salvatore Sanfilipo (author of `hping`)
    in 1998\. It is a clever and very stealthy scanning technique where the origin
    IP is spoofed by forging packets and analyzing IP ID sequence numbers of an idle
    host usually referred as the zombie host.
  prefs: []
  type: TYPE_NORMAL
- en: 'The flag `-sI <zombie>` is used to tell Nmap to initiate an idle port scan
    using `<zombie>` as the origin IP. Idle scanning works in the following way:'
  prefs: []
  type: TYPE_NORMAL
- en: Nmap determines the IP ID sequence of the zombie host.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Nmap sends a forged SYN packet to the target as if it were sent by the zombie
    host.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the port is open, the target sends to the zombie host a SYN/ACK packet and
    increases its IP ID sequence number.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Nmap analyzes the increment of the zombie's IP ID sequence number to know if
    a SYN/ACK packet was received from the target and to determine the port state.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Other hosts communicating with the zombie machine increment its IP ID sequence
    number causing false positives in your scans. Hence, this technique only works
    if the zombie host is idle. So making the right selection is crucial.
  prefs: []
  type: TYPE_NORMAL
- en: It is also important that you find out if your ISP is not actively filtering
    spoofed packets. Many ISPs today block and even modify spoofed packets, replacing
    the spoofed address with your real IP address, making this technique useless as
    the target will receive your real IP address. Unfortunately Nmap can't detect
    this situation and this may cause you to think you are scanning a host leaving
    no tracks when in reality all of your packets are sending your real IP address.
  prefs: []
  type: TYPE_NORMAL
- en: The IP ID sequence number
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The ID field in the IP header is mostly used to track packets for reassembling
    but because a lot of systems implement this number in different ways, it has been
    used by security enthusiasts to fingerprint, analyze, and gather information from
    these systems.
  prefs: []
  type: TYPE_NORMAL
- en: 'Home routers, printers, IP webcams, and primitive often use incremental IP
    ID sequence numbers and are great candidates to be used as zombie hosts. They
    also tend to sit idle most of the time, which is an important requirement for
    idle scanning. To find out if a host has an incremental IP ID sequence there are
    two options:'
  prefs: []
  type: TYPE_NORMAL
- en: Using verbose mode with OS detection.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: Using Kriss Katterjon's `ipidseq` NSE script.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Fingerprinting the operating system of a host* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Discovering hostnames pointing to the same IP address* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Checking if a host is known for malicious activities* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Listing protocols supported by a remote host* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Matching services with known security vulnerabilities* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Brute forcing DNS records* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Discovering stateful firewalls with a TCP ACK scan* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
