- en: Assessing Web Application Security
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter is about learning various aspects of web application security.
    We will be gaining skills for assessing web applications from a security perspective
    and uncovering potential flaws using both automated and manual techniques.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the following topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Importance of web application security testing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Application profiling
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Common web application security testing tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Authentication
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Authorization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Session management
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Input validation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Security misconfiguration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Business logic flaws
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Auditing and logging
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cryptography
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Importance of web application security testing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Long ago, organizations used to deploy and work on thick clients. However, now,
    as we are shifting more toward mobility and ease of access, thin clients (web
    applications) are in high demand. The same web application, once hosted, can be
    accessed via multiple endpoints such as a PC, a smartphone, a tablet, and so on.
    But this has certainly increased the risk factor. Even a single vulnerability
    in the web application can have devastating effects on the entire organization.
    Also, as the network and infrastructure security evolved, web applications became
    easy targets for intruders to gain access inside the organization. Web application
    security testing is much more than just running an automated scanner to discover
    vulnerabilities. The automated scanner would not take procedural aspect a into
    consideration and would also report many false positives.
  prefs: []
  type: TYPE_NORMAL
- en: Application profiling
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An enterprise organization might have tons of applications designed and built
    for serving various business purposes. The applications may be small or complex
    and could be built using various technologies. Now, when it's time to design and
    implement an enterprise-wide application security program, it really becomes crucial
    to decide upon the priority for assessment. There might be 100 applications in
    all; however due to limited resources, it may not be possible to test all 100
    of them within the specific duration. This is when application profiling comes
    handy.
  prefs: []
  type: TYPE_NORMAL
- en: 'Application profiling involves classifying applications into various criticality
    groups such as high, medium, and low. Once classified, an assessment priority
    can then be decided on, based on the group the application belongs to. Some of
    the factors that help to classify the applications are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: What is the type of application (thick client or thin client or mobile app).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is the mode of access (internet/intranet).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Who is the users of the application?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What are the approximate number of users using the application?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Does the application contain any business-sensitive information?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Does the application contain any **Personally Identifiable Information** (**PII**)?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Does the application contain any **nonpublic information** (**NPI**)?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Are there any regulatory requirements pertaining to the application?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is the time duration for which the application users can sustain in case
    of unavailability of the application?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The answers to the preceding questions can help classify the applications. Application
    classification can also help in effectively scoring vulnerabilities.
  prefs: []
  type: TYPE_NORMAL
- en: Common web application security testing tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are tons of tools available for performing web application security testing.
    Some of them are freeware/open-source while some are commercially available. The
    following table lists some of the basic tools that can be used effectively for
    performing web application security testing. Most of these tools are part of the
    default Kali Linux installation:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Test** | **Tools required** |'
  prefs: []
  type: TYPE_TB
- en: '| Information gathering | Nikto, web developer plugin, Wappalyzer |'
  prefs: []
  type: TYPE_TB
- en: '| Authentication | ZAP, Burp Suite |'
  prefs: []
  type: TYPE_TB
- en: '| Authorization | ZAP, Burp Suite |'
  prefs: []
  type: TYPE_TB
- en: '| Session management | Burp Suite web developer plugin, OWASP CSRFTester, WebScarab
    |'
  prefs: []
  type: TYPE_TB
- en: '| Input validation | XSSMe, SQLMe, Paros, IBM AppScan, SQLMap, Burp Suite |'
  prefs: []
  type: TYPE_TB
- en: '| Misconfiguration | Nikto |'
  prefs: []
  type: TYPE_TB
- en: '| Business logic | Manual testing using ZAP or Burp Suite |'
  prefs: []
  type: TYPE_TB
- en: '| Auditing and logging | Manual assessment |'
  prefs: []
  type: TYPE_TB
- en: '| Web services | WSDigger, IBM AppScan web service scanner |'
  prefs: []
  type: TYPE_TB
- en: '| Encryption | Hash identifier, weak cipher tester |'
  prefs: []
  type: TYPE_TB
- en: Authentication
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Authentication is the act of establishing or confirming something (or someone)
    as authentic or genuine. Authentication depends upon one or more authentication
    factors. Testing the authentication schema means understanding and visualizing
    the overall process of how the authentication works and using that information
    to find vulnerabilities in the implementation of the authentication mechanism.
    Compromising the authentication system gives attackers direct entry into the application,
    making it further exposed to variety of attacks.
  prefs: []
  type: TYPE_NORMAL
- en: The upcoming sections describe a few important tests for authentication.
  prefs: []
  type: TYPE_NORMAL
- en: Credentials over a secure channel
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This is indeed a very basic check. Applications must transmit user credentials
    and all sensitive data strictly over the secured HTTPS protocol. If the application
    uses HTTP to transmit user credentials and data, it is vulnerable to eavesdropping.
    We can quickly check if the website is using HTTP or HTTPS by inspecting the URL
    bar as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/26c9bd95-8b40-4cd5-9643-c4311cf2e885.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Further we can also check the certificate details to sure HTTPS implementation
    as shown in the following image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d2243089-c7b2-4753-a783-307d5b827e00.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Authentication error messages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Quite often, an authentication failure on the application login page reveals
    unwanted information. For example, a user enters the wrong username and password,
    then the application throws an error saying username not found. This is revealing
    whether or not the given user belongs to the application or not. The attacker
    could simply write a script to check 1,000 users for validity. This type of attack
    is known as user enumeration. Hence it is recommended that authentication failure
    messages should be generic in nature and should not reveal if the username/password
    was wrong. A generic message such as *either username/password was wrong* doesn't
    necessarily prove if the username belonged to the application or not.
  prefs: []
  type: TYPE_NORMAL
- en: Password policy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Password policy is a trivial security control related to authentication. Passwords
    are commonly prone to dictionary attacks, brute-force attacks, and password-guessing
    attacks. If the application allows weak passwords to be set, then they could easily
    get compromised. A strong password policy typically has the following conditions:'
  prefs: []
  type: TYPE_NORMAL
- en: Minimum length of 8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Must contain at least 1 lower case character, 1 uppercase character, 1 digit,
    and 1 special character.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Password minimum age
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Password maximum age
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Password history restriction
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Account lockout
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is important to note that the password policy must be enforced both on the
    client as well as the server side.
  prefs: []
  type: TYPE_NORMAL
- en: Method for submitting credentials
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: GET and POST are two methods used for submitting user data over the HTTP/HTTPS
    protocols. Secure applications always use the POST method for transmitting user
    credentials and sensitive user data. If the GET method is used then the credentials/data
    become part of a publicly visible URL and are easily prone to attacks.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following image shows a typical login request and response and highlights
    the use of the POST method:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6b53df1c-8282-413f-856f-9b2d85cc3f68.png)'
  prefs: []
  type: TYPE_IMG
- en: OWASP mapping
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Authentication related vulnerabilities are part of OWASP Top 10 2017\. They
    are covered under A2:2017 Broken Authentication. Some of the vulnerabilities listed
    under this category are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The application allows automated attacks such as credential stuffing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The application allows brute-force attacks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The application allows users to set default, weak, or well-known passwords
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The application has a weak password recovery process
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Authorization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once a user has been authenticated, the next task is to authorize the user to
    give him/her access to data. Based on the user role and privileges, the application
    grants authorization. To test for authorization vulnerabilities, we require valid
    credentials from each of the different roles present in an application. Using
    some preliminary tools, we can attempt to bypass the authorization schema and
    gain access to the superuser account while using the credentials of a normal user.
  prefs: []
  type: TYPE_NORMAL
- en: OWASP mapping
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Authorization-related vulnerabilities are part of the OWASP Top 10 2017\. They
    are covered under A5:2017 Broken Access Control. Some of the vulnerabilities listed
    under this category are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Bypassing access control checks by tampering with the URL
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Allowing the primary key to be changed to another user's record, and allowing
    viewing or editing someone else's account
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Escalating privileges
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Session management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Session management is at the core of any web-based application. It defines how
    the application maintains state and thereby controls user-interaction with the
    site. Session is initiated when a user initially connects to the site and is expected
    to end upon user disconnection. Since HTTP is a stateless protocol, the session
    needs to be handled explicitly by the application. A unique identifier such as
    a session ID or a cookie is normally used for tracking user sessions.
  prefs: []
  type: TYPE_NORMAL
- en: Cookie checks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As a cookie is an important object for storing the user''s session information,
    it must be configured securely. The following image shows a sample cookie with
    its attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/95f7f125-b43d-453a-ba35-bc2e5701bdb4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding image, the last three parameters are important from the security
    perspective. The Expires parameter is set to At end of session, which implies
    the cookie is not persistent and will be destroyed once the user logs out. The
    Secure flag is set to No, which is a risk. The site should implement HTTPS and
    then enable the Secure cookie flag. The HTTPOnly flag is set to Yes, which prevents
    unauthorized access to the cookie from other sites.
  prefs: []
  type: TYPE_NORMAL
- en: Cross-Site Request Forgery
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Cross-Site Request Forgery is a common attack against web applications and typically
    happens due to weak session management. In the CSRF attack, the attacker sends
    a specially crafted link to the victim. As the victim clicks the link sent by
    attacker, it triggers some malicious action in the vulnerable application. Anti-CSRF
    or CAPTCHA are some of the common defenses against CSRF. OWASP has a special tool
    to test if an application is vulnerable to CSRF. It can be found at [https://www.owasp.org/index.php/File:CSRFTester-1.0.zip](https://www.owasp.org/index.php/File:CSRFTester-1.0.zip).
  prefs: []
  type: TYPE_NORMAL
- en: 'The OWASP CSRF tester captures application requests and then generates a CSRF
    proof of concept as shown in the following image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f91cea07-638f-4a95-8eee-3b9d5eb16bfc.png)'
  prefs: []
  type: TYPE_IMG
- en: OWASP mapping
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Session management-related vulnerabilities are part of the OWASP Top 10 2017\.
    They are covered under A2:2017 Broken Authentication. Some of the vulnerabilities
    listed under this category are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Application generating session ID that is not unique, random, complex, and is
    easily guessable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Application exposing session identifiers in part of the URL or audit log file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Application vulnerable to replay attack
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Application vulnerable to Cross-Site Request Forgery attack
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Input validation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Improper validation of input is one of the most common and inherent flaws in
    most web applications.
  prefs: []
  type: TYPE_NORMAL
- en: This weakness further leads to many critical vulnerabilities in web applications,
    such as cross-site scripting, SQL injection, buffer overflows, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Most times when an application is developed, it blindly accepts all the data
    coming to it. However from the security perspective, this is a harmful practice
    as malicious data could also get in due to lack of proper validation.
  prefs: []
  type: TYPE_NORMAL
- en: OWASP mapping
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Input validation related vulnerabilities are part of the OWASP Top 10 2017\.
    They are covered under A1:2017 Injection, A4:2017-XML External Entities (XXE),
    A7:2017-Cross-Site Scripting (XSS), and A8:2017-Insecure Deserialization. Some
    of the vulnerabilities listed under this category are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Application not validating input both on the client side as well as the server
    side.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Application allowing harmful blacklisted characters (&lt;&gt;;’”!()).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Application vulnerable to injection flaws such as SQL injection, command injection,
    LDAP (Lightweight Directory Access Protocol) injection, and so on.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Application vulnerable to Cross-Site Scripting attack. The image below shows
    a reflected Cross Site Scripting attacks:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/6b38a077-8e73-4a35-8317-0f181445e22a.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Application vulnerable to buffer overflows.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Security misconfiguration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We may take a lot of efforts in securing the application. However applications
    cannot work in isolation. Running an application, requires a lot of supporting
    components such as web server, database server, and more. If the application isn't
    securely configured with all these supporting components, many vulnerabilities will
    be opened for potential attackers. So, the application should not only be developed
    securely, but should also be deployed and configured securely.
  prefs: []
  type: TYPE_NORMAL
- en: OWASP mapping
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Security misconfiguration related vulnerabilities are part of the OWASP Top
    10 2017\. They are covered under A6:2017 Security Misconfiguration. Some of the
    vulnerabilities listed under this category are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Security hardening not done on the application stack.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Unnecessary or unwanted features are enabled or installed (for example, ports,
    services, admin pages, accounts, or privileges). The following image shows the
    default Tomcat page accessible to all users:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/2deb764d-21c4-4f7e-be33-5bcb24ab5eba.png)'
  prefs: []
  type: TYPE_IMG
- en: Application default accounts are active with default passwords.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Improper error handling reveals stack traces and internal application information
    as shown in the following image:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/077cbef2-db3d-449e-824b-5a232e2d7386.png)'
  prefs: []
  type: TYPE_IMG
- en: Application servers, application frameworks (for example, Struts, Spring, ASP.NET),
    libraries, databases, and so on, aren't configured securely.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The application allows directory listing as shown in the following image:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/84ce8095-c4f9-4d13-acb8-e6a89d072bf6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Nikto is an excellent tool that scans for security misconfiguration issues,
    as shown in the following image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a4f91dd2-10da-439d-82c9-976e32765b66.png)'
  prefs: []
  type: TYPE_IMG
- en: Business logic flaws
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Business logic is at the core of the application and decides how an application
    is expected to behave. Business logic is mainly derived from the objective/aim
    of the application and is contained mainly in the server side code of the application.
    If the business logic has some flaws or shortcomings, they can be seriously misused
    by the attackers. Automated security scanners are not really capable of finding
    business logic-related issues since they cannot understand the context of the
    application as humans do. So foolproof business logic along with stringent validation
    is absolutely required to build a secure web application.
  prefs: []
  type: TYPE_NORMAL
- en: Testing for business logic flaws
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As mentioned earlier, business logic-related flaws cannot be tested comprehensively
    using automated tools. The following are some guidelines to test business logic:'
  prefs: []
  type: TYPE_NORMAL
- en: Have a brainstorming session with the application architect, the business users
    of the application, and the developer to understand what the application is all
    about
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understand all the workflows in the application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jot down critical areas of the application where things might go wrong and have
    a larger impact
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create sample/raw data and try to explore the application both as a normal user
    as well as from an attacker's perspective
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Develop attack scenarios and logical tests for testing specific business logic
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a comprehensive threat model
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Example of a business logic flaw**'
  prefs: []
  type: TYPE_NORMAL
- en: Consider an e-commerce website selling recharge coupons for TV set-top boxes.
    It is connected to an external payment gateway. Now a user selects a recharge
    amount on the e-commerce website and then the e-commerce website transfers the
    user to the payment gateway to make a payment. If the payment is successful, the
    payment gateway will return a success flag to the e-commerce website and then
    the e-commerce website will actually initiate the user requested recharge in the
    system. Now suppose the attacker chooses to buy a recharge worth X$ and proceeds
    to a payment gateway, but, while returning to the e-commerce website, he tampers
    with the HTTP request and sets the amount to X+10$. Then, in this case, the e-commerce
    website might accept the request thinking that the user actually paid X+10$ instead
    of X$. This is a simple business logic flaw which happened due to improper synchronization
    between the e-commerce website and the payment gateway. A simple checksum mechanism
    for communication between the two could have prevented such a flaw.
  prefs: []
  type: TYPE_NORMAL
- en: Auditing and logging
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Checking for the completeness of application audit logs is one of the most important
    procedural aspects of application security assessment. Audit logs are categorized
    as detective controls which come handy in the case of a security incident. An
    enterprise application is typically complex in nature and interconnected with
    several other systems such as a database server, load balancer, caching server
    and many more. In the case of a breach, audit logs play the most important role
    in reconstructing the incident scenario. Audit logs with insufficient details
    would limit the incident investigation to a greater extent. So the capability
    of an application to generate event logs must be carefully examined to find any
    shortcomings as applicable.
  prefs: []
  type: TYPE_NORMAL
- en: OWASP mapping
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Auditing and logging-related vulnerabilities are part of the OWASP Top 10 2017\.
    They are covered under A10:2017 Insufficient Logging and Monitoring. Some of the
    vulnerabilities listed under this category are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The application doesn't log events such as logins, failed logins, and high-value
    transactions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The application generates warnings and errors, which are inadequate
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Applications and API logs aren't regularly monitored for suspicious activity
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: No backup strategy defined for application logs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The application is not able to detect, escalate, or alert active attacks in
    real time or near real time
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cryptography
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we are aware, encryption helps keep data confidential; it plays an important
    role in web application security as well. Both *encryption of data at rest* and
    *encryption of data in transit* have to be considered while building a secure
    web application.
  prefs: []
  type: TYPE_NORMAL
- en: OWASP mapping
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Cryptography-related vulnerabilities are part of the OWASP Top 10 2017\. They
    are covered under A3:2017 Sensitive Data Exposure. Some of the vulnerabilities
    listed under this category are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Applications transmitting data in clear text. This concerns protocols such as
    HTTP, SMTP, and FTP.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Application using old or weak cryptographic algorithms.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Application using the default crypto keys.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Application not enforcing encryption.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Application not encrypting user sensitive information while in storage.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Application using an invalid SSL certificate.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Qualys provides an excellent online tool for testing SSL certificates. The
    following images show sample results from the Qualys SSL test, which can be accessed
    at [https://www.ssllabs.com/ssltest/](https://www.ssllabs.com/ssltest/):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/70c9a8ef-6206-4156-adf4-6d146bfd84a5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Some more results from the website:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/378a570c-6572-4922-8947-076585d2a5fb.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Testing tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have already seen a list of various tools earlier in this chapter that we
    can use for performing web application security testing. In this section, we'll
    have a brief introduction to two such tools.
  prefs: []
  type: TYPE_NORMAL
- en: OWASP ZAP
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: OWASP ZAP is a multi-functional tool that can perform an array of tasks related
    to application security testing. It is capable of doing automated scanning as
    well and is extremely effective in manual testing and fuzzing. OWASP ZAP can be
    downloaded from [https://www.owasp.org/index.php/OWASP_Zed_Attack_Proxy_Project](https://www.owasp.org/index.php/OWASP_Zed_Attack_Proxy_Project).
  prefs: []
  type: TYPE_NORMAL
- en: 'The following image shows the initial OWASP ZAP console. The left pane displays
    the site hierarchy, the right pane displays individual requests and responses,
    and the bottom pane displays active scans:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/34fcf979-f0ae-4ba7-b152-123df898b136.png)'
  prefs: []
  type: TYPE_IMG
- en: We can either first crawl the application or directly enter the URL to attack
    as shown in the following image. We can see the active scan in the bottom pane
    and, once it is completed, we can simply click the Report menu and select Generate
    HTML Report.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/81835fb6-a7c9-4d56-9e1f-89b90ec670e1.png)'
  prefs: []
  type: TYPE_IMG
- en: Burp Suite
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: BurpSuite is an extremely flexible and powerful tool for performing web application
    security testing. It is available free for download and also comes in a commercial
    version. Burp Suite can be downloaded from [https://portswigger.net/burp/communitydownload](https://portswigger.net/burp/communitydownload).
  prefs: []
  type: TYPE_NORMAL
- en: 'The following image shows the initial Burp Suite console:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/10f8ea17-4bd0-4098-babb-5d08f6331a95.png)'
  prefs: []
  type: TYPE_IMG
- en: 'BurpSuite has various features as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Proxy**: It acts as an interceptor proxy and allows editing all application
    requests.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Spider**: It automatically crawls the application in scope and creates an
    application hierarchy for further testing.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Scanner**: It runs pre-defined security tests on the target application and
    generates a vulnerability report. This feature is available only in the commercial
    version.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Intruder**: This feature can be effectively used for fuzzing various input
    fields in the application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Repeater**: This can be used for sending a particular request multiple times
    and analyzing the response.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Decoder**: This can be used for decoding content in various formats such
    as Base64, and so on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Extender**: This can be used for adding additional extensions to Burp Suite.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned various aspects of web application security, mapped
    them with Burp Suite OWASP Top 10, and had a brief introduction to various tools
    that can be used to performing web application security testing.
  prefs: []
  type: TYPE_NORMAL
