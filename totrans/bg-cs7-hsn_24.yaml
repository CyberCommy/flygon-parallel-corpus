- en: Serializing and Deserializing Objects
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you will learn another way of saving objects to a hard drive—using
    serialization. You will also learn the process of rebuilding an object from the
    hard drive, which is called deserialization.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: Adding two buttons to the HTML
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Crank up a project, and in this one, you will insert two buttons into the <html>
    page. You''ll place the first button below the line beginning with `<form id=...`.
    To do this, go to Toolbox, grab a `Button` control, and drag it in there. Change
    the text on the first button to say `Save`. Now grab another button, and drag
    and drop it below that line. Change the text on the second button to say `Open`.
    So you place two buttons in the page, as follows:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Delete the two `<div>` lines—you won''t need them. Of course, at the end you
    also have a label:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'In the Design view, as shown in *Figure 24.3.1*, you have two buttons—Save
    and Open—and then a label where the opened object can be displayed:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/158ec832-f711-4990-a112-346c9eb40087.png)'
  id: totrans-8
  prefs: []
  type: TYPE_IMG
- en: 'Figure 24.3.1: Our simple interface in the Design view'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: Beginning to code the project
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First, we will create the `Save` button, so double-click on it, which brings
    up the event handler for `Button1_click`. Delete the `Page_Load` block. The relevant
    portion of the starting code for this project should look like *Figure 24.3.2*:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/98553561-10b2-4839-9c47-3c16324e7b3d.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
- en: 'Figure 24.3.2: The starting code for this project'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: Adding namespaces
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Next, you need to add new namespaces, so near the top of the file under `using
    System`, enter the following:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Clearly, this line is used for input and output. Next, enter the following:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This line allows you to do the write of the code. You''ll understand the purpose
    of these namespaces better as we write the code together. Next, let''s do one
    more, as follows:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This line is needed just so that you can open Notepad. You will use Notepad
    to view the file after it's saved in binary format. Now you can collapse these
    namespaces if you like.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: Creating a serializable class
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'So first you need something that you can serialize—a serializable class. You
    will place that below that previous `using` statement. Enter the following:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'You can decorate a class this way. Next, the thing to be serialized is entered
    below this, as follows:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Adding features to the serializable class
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This is your serializable class. Next, you will add features to it. So, between
    a set of curly braces beneath this line, enter the following:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Next, we will override a method so that we can display a person and actually
    format it. So, enter the following:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Now, if you hover your mouse over `ToString`, you'll see that it's an object
    class. Remember, an object class is the parent class of the entire hierarchy.
    This is where `ToString` is defined. The tooltip says string object.ToString().
    We'll now overwrite it and write our own definition.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, enter the following between a set of curly braces beneath the `override`
    line:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This will be our particular implementation of `ToString`; that is, `Name` makes
    some amount of money per year—whatever the name and salary happen to be for each
    instance of the `Person` class.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: Defining the path for saving a file
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Next, within a set of curly braces beneath the line that begins with `protected
    void Button1_Click...`, enter the following:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Here, you're defining the path where the file will be saved. Note that this
    time we are using a different extension—`.bin` for binary, rather than `.txt`
    for text.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: Making a Person object
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Next, to make a new `Person` object, enter the following:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Remember, another way of creating objects is that you can set the values of
    the properties within curly braces. So here we have `John Smith` and his `Salary`
    property value. Thus, we've made a `new Person` object.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: Handling unmanaged resources
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, enter the following:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Hover your mouse over `FileStream` in the preceding line to see where it's located;
    it's inside `System.IO`. Notice that `using System.IO;` is no longer greyed out
    because `FileStream` is now there.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, right-click on `FileStream` and select Go To Definition. You can see
    that it is derived from `Stream`. Now, if you scroll down to the bottom where
    it says `Dispose` and expand that, you''ll see that it says Releases the unmanaged
    resources used by the System.IO.FileStream..., as shown in *Figure 24.3.3*:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6e558476-79a3-474e-a266-c7ecf84d8485.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
- en: 'Figure 24.3.3: Expanded definition of FileStream'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: This is why we put it inside a `using` statement, because it deals with unmanaged
    resources, such as low-level disk access. So, we will create a file.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: Making a binary formatter
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Next, you''ll make a binary formatter, so enter the following between a set
    of curly braces:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Again, `BinaryFormatter` here is a class, so if you hover your mouse over it,
    the tooltip says Serializes and deserializes an object, or an entire graph of
    connected objects in binary format.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: Serializing an object
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Next, to serialize our object, you say `binFormatter.Serialize`, which is a
    function defined there, and then you need a stream and an object (`per`) to be
    serialized through the stream:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'To confirm that this works, enter the following below the closing curly brace:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: This will just launch the file for us to confirm that it's been saved.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: Testing the program
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we write the rest of the code, we can give this one a test. So let's
    launch this in a browser and click on Save*:*
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9f0a1fb0-8eed-4e22-ba68-3a1215442cf8.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
- en: 'Figure 24.3.4: A test run of the program to make sure that it works'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: 'You can see now that when you examine it, the stuff that was saved looks very
    different from just plain text. Remember that when you were learning about properties,
    we talked about *backing fields*. The actual value of the fields is shown in *Figure
    24.3.5*. You can see the salary, the name values, and then the fields. This is
    what we mean by *binary*. It looks quite different from just plain text:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/39d60141-5f30-4c9d-9d4f-d29ca4665ca0.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
- en: 'Figure 24.3.5: The Backing Field shows the actual values of the field'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: Rebuilding an object from a hard drive
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the next stage, we want to be able to rebuild this object from the hard drive.
    For this, double-click on the Open button in the Design view. This takes you back
    into the `Default.aspx.cs` file.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, within a set of curly braces below the line that begins with `protected
    void Button2_Click...`, you''ll make a new `Person` object, as follows:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'We construct this from the hard drive. Next, enter the following below this
    line:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: With this line, we'll be reading back from that file.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, you have to confirm that the file actually exists, so enter the following:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: If the file exists, you will take some actions, and those actions will be the
    ones that rebuild the objects.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: 'Now enter the following between a set of curly braces below this line:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Here, we open the file for reading. Hover your mouse over `OpenRead`. Notice
    that it returns a `FileStream` class, so the right-hand and left-hand sides of
    the expression agree.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, between another set of curly braces below this line, enter the following:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Now, we will rebuild the `Person` object, so enter the following next:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: This will be a cast to the `Person` type. Then, you're passing in `personStream`
    into the `Deserialize` function, defined on the binary reader, and then you cast
    that back up to a `Person` object.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: Displaying the results
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, with that in place we can display things. For example, enter the following
    next:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Remember that `ToString` in this line is the one that's defined inside `Person`.
    It's the one that overrides the basic `ToString` method defined inside the object.
    If you hover your mouse over `ToString` here, it says string Person.ToString().
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: Running the program
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now let''s open this in your browser with this new code in place. Click on
    the Save button, and it opens Notepad, as shown in *Figure 24.3.6*:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们在浏览器中打开这个新代码。单击“保存”按钮，它会打开记事本，如*图24.3.6*所示：
- en: '![](img/2d7833d7-ce76-4c76-abdd-b9df6f9892b3.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2d7833d7-ce76-4c76-abdd-b9df6f9892b3.png)'
- en: 'Figure 24.3.6: The results of running the program when the Save button is clicked'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 图24.3.6：单击“保存”按钮时运行程序的结果
- en: 'Now click on the Open button, and it looks like the screen shown in *Figure
    24.3.7*:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 现在单击“打开”按钮，它看起来像*图24.3.7*中显示的屏幕：
- en: '![](img/c9bc2839-63b6-4824-a6e6-e171a5eadb17.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c9bc2839-63b6-4824-a6e6-e171a5eadb17.png)'
- en: 'Figure 24.3.7: The results of running the program when the Open button is clicked'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 图24.3.7：单击“打开”按钮时运行程序的结果
- en: So, this proves that the object has been constructed, and it also confirms that
    on this reconstructed object, `personRebuilt`, you can call the usual functions,
    methods, and so on, that were spelled out in the definition of the class in the
    `return $"{Name} makes {Salary:C} per year.";` line.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，这证明了对象已被构建，并且还证实了在这个重建的对象`personRebuilt`上，您可以调用在类的定义中详细说明的通常函数、方法等，即`return
    $"{Name} makes {Salary:C} per year.";`行。
- en: Chapter review
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 章节回顾
- en: To review, remember that the big idea here is that you can start with an object
    and add quite a few namespaces, specifically `BinaryFormatter` and `IO`. Next,
    you define a class, and add the serializable attribute below. Then you write code
    to save in a binary format and also code to reconstruct from the binary format
    to the one that you can use in your app.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 回顾一下，要记住的重点是，您可以从一个对象开始，并添加相当多的命名空间，特别是`BinaryFormatter`和`IO`。接下来，您定义一个类，并在下面添加可序列化属性。然后，您编写代码以二进制格式保存，还编写了代码以从二进制格式重建为您的应用程序中可以使用的格式。
- en: 'The complete version of the `Default.aspx.cs` file for this chapter, including
    comments, is shown in the following code block:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的`Default.aspx.cs`文件的完整版本，包括注释，如下所示：
- en: '[PRE23]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Summary
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you learned another way of saving objects to the hard drive—using
    serialization. Then, you learned the process of rebuilding an object from the
    hard drive—deserialization. You created a `serializable` class, added features
    to the class, defined the path for saving a file, made a `Person` object, wrote
    code to handle unmanaged resources, made a binary formatter, serialized an object,
    and tested your program.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您学习了另一种将对象保存到硬盘的方法——使用序列化。然后，您学习了从硬盘重建对象的过程——反序列化。您创建了一个`serializable`类，为该类添加了特性，定义了保存文件的路径，创建了一个`Person`对象，编写了处理非托管资源的代码，创建了一个二进制格式化程序，对对象进行了序列化，并测试了您的程序。
- en: In the next chapter, you will take a look at working with images at the pixel
    level. We will invert the colors and change that around.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，您将学习如何在像素级别处理图像。我们将反转颜色并进行更改。
