- en: Serializing and Deserializing Objects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you will learn another way of saving objects to a hard drive—using
    serialization. You will also learn the process of rebuilding an object from the
    hard drive, which is called deserialization.
  prefs: []
  type: TYPE_NORMAL
- en: Adding two buttons to the HTML
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Crank up a project, and in this one, you will insert two buttons into the <html>
    page. You''ll place the first button below the line beginning with `<form id=...`.
    To do this, go to Toolbox, grab a `Button` control, and drag it in there. Change
    the text on the first button to say `Save`. Now grab another button, and drag
    and drop it below that line. Change the text on the second button to say `Open`.
    So you place two buttons in the page, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Delete the two `<div>` lines—you won''t need them. Of course, at the end you
    also have a label:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'In the Design view, as shown in *Figure 24.3.1*, you have two buttons—Save
    and Open—and then a label where the opened object can be displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/158ec832-f711-4990-a112-346c9eb40087.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 24.3.1: Our simple interface in the Design view'
  prefs: []
  type: TYPE_NORMAL
- en: Beginning to code the project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First, we will create the `Save` button, so double-click on it, which brings
    up the event handler for `Button1_click`. Delete the `Page_Load` block. The relevant
    portion of the starting code for this project should look like *Figure 24.3.2*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/98553561-10b2-4839-9c47-3c16324e7b3d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 24.3.2: The starting code for this project'
  prefs: []
  type: TYPE_NORMAL
- en: Adding namespaces
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Next, you need to add new namespaces, so near the top of the file under `using
    System`, enter the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Clearly, this line is used for input and output. Next, enter the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'This line allows you to do the write of the code. You''ll understand the purpose
    of these namespaces better as we write the code together. Next, let''s do one
    more, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: This line is needed just so that you can open Notepad. You will use Notepad
    to view the file after it's saved in binary format. Now you can collapse these
    namespaces if you like.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a serializable class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'So first you need something that you can serialize—a serializable class. You
    will place that below that previous `using` statement. Enter the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'You can decorate a class this way. Next, the thing to be serialized is entered
    below this, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Adding features to the serializable class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This is your serializable class. Next, you will add features to it. So, between
    a set of curly braces beneath this line, enter the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we will override a method so that we can display a person and actually
    format it. So, enter the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Now, if you hover your mouse over `ToString`, you'll see that it's an object
    class. Remember, an object class is the parent class of the entire hierarchy.
    This is where `ToString` is defined. The tooltip says string object.ToString().
    We'll now overwrite it and write our own definition.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, enter the following between a set of curly braces beneath the `override`
    line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: This will be our particular implementation of `ToString`; that is, `Name` makes
    some amount of money per year—whatever the name and salary happen to be for each
    instance of the `Person` class.
  prefs: []
  type: TYPE_NORMAL
- en: Defining the path for saving a file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Next, within a set of curly braces beneath the line that begins with `protected
    void Button1_Click...`, enter the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Here, you're defining the path where the file will be saved. Note that this
    time we are using a different extension—`.bin` for binary, rather than `.txt`
    for text.
  prefs: []
  type: TYPE_NORMAL
- en: Making a Person object
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Next, to make a new `Person` object, enter the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Remember, another way of creating objects is that you can set the values of
    the properties within curly braces. So here we have `John Smith` and his `Salary`
    property value. Thus, we've made a `new Person` object.
  prefs: []
  type: TYPE_NORMAL
- en: Handling unmanaged resources
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, enter the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Hover your mouse over `FileStream` in the preceding line to see where it's located;
    it's inside `System.IO`. Notice that `using System.IO;` is no longer greyed out
    because `FileStream` is now there.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, right-click on `FileStream` and select Go To Definition. You can see
    that it is derived from `Stream`. Now, if you scroll down to the bottom where
    it says `Dispose` and expand that, you''ll see that it says Releases the unmanaged
    resources used by the System.IO.FileStream..., as shown in *Figure 24.3.3*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6e558476-79a3-474e-a266-c7ecf84d8485.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 24.3.3: Expanded definition of FileStream'
  prefs: []
  type: TYPE_NORMAL
- en: This is why we put it inside a `using` statement, because it deals with unmanaged
    resources, such as low-level disk access. So, we will create a file.
  prefs: []
  type: TYPE_NORMAL
- en: Making a binary formatter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Next, you''ll make a binary formatter, so enter the following between a set
    of curly braces:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Again, `BinaryFormatter` here is a class, so if you hover your mouse over it,
    the tooltip says Serializes and deserializes an object, or an entire graph of
    connected objects in binary format.
  prefs: []
  type: TYPE_NORMAL
- en: Serializing an object
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Next, to serialize our object, you say `binFormatter.Serialize`, which is a
    function defined there, and then you need a stream and an object (`per`) to be
    serialized through the stream:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'To confirm that this works, enter the following below the closing curly brace:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: This will just launch the file for us to confirm that it's been saved.
  prefs: []
  type: TYPE_NORMAL
- en: Testing the program
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we write the rest of the code, we can give this one a test. So let's
    launch this in a browser and click on Save*:*
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9f0a1fb0-8eed-4e22-ba68-3a1215442cf8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 24.3.4: A test run of the program to make sure that it works'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can see now that when you examine it, the stuff that was saved looks very
    different from just plain text. Remember that when you were learning about properties,
    we talked about *backing fields*. The actual value of the fields is shown in *Figure
    24.3.5*. You can see the salary, the name values, and then the fields. This is
    what we mean by *binary*. It looks quite different from just plain text:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/39d60141-5f30-4c9d-9d4f-d29ca4665ca0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 24.3.5: The Backing Field shows the actual values of the field'
  prefs: []
  type: TYPE_NORMAL
- en: Rebuilding an object from a hard drive
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the next stage, we want to be able to rebuild this object from the hard drive.
    For this, double-click on the Open button in the Design view. This takes you back
    into the `Default.aspx.cs` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, within a set of curly braces below the line that begins with `protected
    void Button2_Click...`, you''ll make a new `Person` object, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'We construct this from the hard drive. Next, enter the following below this
    line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: With this line, we'll be reading back from that file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, you have to confirm that the file actually exists, so enter the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: If the file exists, you will take some actions, and those actions will be the
    ones that rebuild the objects.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now enter the following between a set of curly braces below this line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Here, we open the file for reading. Hover your mouse over `OpenRead`. Notice
    that it returns a `FileStream` class, so the right-hand and left-hand sides of
    the expression agree.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, between another set of curly braces below this line, enter the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we will rebuild the `Person` object, so enter the following next:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: This will be a cast to the `Person` type. Then, you're passing in `personStream`
    into the `Deserialize` function, defined on the binary reader, and then you cast
    that back up to a `Person` object.
  prefs: []
  type: TYPE_NORMAL
- en: Displaying the results
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, with that in place we can display things. For example, enter the following
    next:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Remember that `ToString` in this line is the one that's defined inside `Person`.
    It's the one that overrides the basic `ToString` method defined inside the object.
    If you hover your mouse over `ToString` here, it says string Person.ToString().
  prefs: []
  type: TYPE_NORMAL
- en: Running the program
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now let''s open this in your browser with this new code in place. Click on
    the Save button, and it opens Notepad, as shown in *Figure 24.3.6*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2d7833d7-ce76-4c76-abdd-b9df6f9892b3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 24.3.6: The results of running the program when the Save button is clicked'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now click on the Open button, and it looks like the screen shown in *Figure
    24.3.7*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c9bc2839-63b6-4824-a6e6-e171a5eadb17.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 24.3.7: The results of running the program when the Open button is clicked'
  prefs: []
  type: TYPE_NORMAL
- en: So, this proves that the object has been constructed, and it also confirms that
    on this reconstructed object, `personRebuilt`, you can call the usual functions,
    methods, and so on, that were spelled out in the definition of the class in the
    `return $"{Name} makes {Salary:C} per year.";` line.
  prefs: []
  type: TYPE_NORMAL
- en: Chapter review
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To review, remember that the big idea here is that you can start with an object
    and add quite a few namespaces, specifically `BinaryFormatter` and `IO`. Next,
    you define a class, and add the serializable attribute below. Then you write code
    to save in a binary format and also code to reconstruct from the binary format
    to the one that you can use in your app.
  prefs: []
  type: TYPE_NORMAL
- en: 'The complete version of the `Default.aspx.cs` file for this chapter, including
    comments, is shown in the following code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned another way of saving objects to the hard drive—using
    serialization. Then, you learned the process of rebuilding an object from the
    hard drive—deserialization. You created a `serializable` class, added features
    to the class, defined the path for saving a file, made a `Person` object, wrote
    code to handle unmanaged resources, made a binary formatter, serialized an object,
    and tested your program.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will take a look at working with images at the pixel
    level. We will invert the colors and change that around.
  prefs: []
  type: TYPE_NORMAL
