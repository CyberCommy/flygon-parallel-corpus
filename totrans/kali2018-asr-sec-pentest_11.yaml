- en: Wireless Penetration Testing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For much of our previous discussion, we have looked at techniques that involve
    penetration testing while connected to a wired network. This included both internal
    **Local Area Networking** (**LAN**) and techniques such as web application assessments
    over the public internet. One area of focus that deserves attention is wireless
    networking. Wireless networks are ubiquitous, having been deployed in a variety
    of environments, such as commercial, government, educational, and residential
    environments. As a result, penetration testers should ensure that these networks
    have the appropriate amount of security controls and are free from configuration
    errors.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will discuss the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Wireless networking**: In this topic, we address the underlying protocols
    and configuration that govern how clients, such as laptops and tablets, authenticate
    and communicate with wireless-network access points.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Reconnaissance**: Just like in a penetration test that we conduct over a
    wired connection, there are tools within Kali Linux and others that can be added
    and leveraged to identify potential target networks, as well as other configuration
    information we can leverage during an attack.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Authentication attacks**: Unlike attempting to compromise a remote server,
    the attacks we will discuss revolve around gaining authenticated access to the
    wireless network. Once authenticated, we can connect and then put into action
    the tools and techniques we have previously examined.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**What to do after authentication**: Here, we will discuss some of the actions
    that can be taken after the authentication mechanism has been cracked. These include
    attacks against the access points and how to bypass a common security control
    implemented into wireless networks. Sniffing wireless network traffic to gain
    access to credentials or other information is also addressed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Having a solid understanding of wireless network penetration testing is becoming
    more and more important. Technology is rapidly adopting the concept of the **Internet
    of Things** (**IoT**), which aims to move more and more of our devices that are
    used for comfort and convenience to the internet. Facilitating this advance will
    be wireless networks.
  prefs: []
  type: TYPE_NORMAL
- en: As a result, more and more of these networks will be needed, which corresponds
    to an increase in the attack surface. Clients and organizations will need to understand
    the risks and how attackers go about attacking these systems.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, two different USB antennas are used. The first is a TP-LINK
    TL-WN722N Wireless N150 High Gain USB Adapter and the other is an Alfa AWUSO36NH
    High Gain USB Wireless G/N Long-Rang Wi-Fi Network Adapter. Both of these are
    readily available on the commercial market. For more information, consult the
    following website for supported wireless antennas and chipsets: [http://aircrack-ng.org/doku.phpid=compatibility_drivers&DokuWiki=090ueo337eqe94u5gkjo092di6#which_is_the_best_card_to_buy](http://aircrack-ng.org/doku.phpid=compatibility_drivers&DokuWiki=090ueo337eqe94u5gkjo092di6#which_is_the_best_card_to_buy).'
  prefs: []
  type: TYPE_NORMAL
- en: Wireless networking
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Wireless networking is governed by protocols and configurations in much the
    same way that wired networks are. Wireless networks make use of radio spectrum
    frequencies to transmit data between the access point and the connected networks.
    For our purposes, **Wireless Local Area Networks** (**W****LANs**) have a great
    deal of similarities to standard **Local Area Networks** (**LANs**). The major
    focus of penetration testers is on identifying the target network and gaining
    access.
  prefs: []
  type: TYPE_NORMAL
- en: Overview of 802.11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The overriding standard governing wireless network is the IEEE 802.11 standard.
    This set of rules was first developed for ease of use and the ability to rapidly
    connect devices. Concerns about security were not addressed in the initial standards
    that were published in 1997\. Since then, the standards have had a number of amendments;
    the first of these with significant impact on wireless networking was 802.11b.
    This was the most widely accepted standard and was released in 1999.
  prefs: []
  type: TYPE_NORMAL
- en: As the 802.11 standard makes use of radio signals, specific regions have different
    laws and regulations that pertain to the use of wireless networks. In general,
    though, there are only a few types of security controls built into the 802.11
    standard and its associated amendments.
  prefs: []
  type: TYPE_NORMAL
- en: The Wired Equivalent Privacy standard
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The **Wired Equivalent Privacy** (**WEP**)Â standard was the first security standard
    to be developed in conjunction with the 802.11 standards. First deployed in 1999
    alongside the first widely adopted iteration of 802.11, WEP was designed to provide
    the same amount of security that was found on wired networks. This was accomplished
    using a combination of RC4 ciphers to provide confidentiality and the use of the
    CRC32 for integrity.
  prefs: []
  type: TYPE_NORMAL
- en: Authenticating to a WEP network is done through the use of either a 64- or 128-bit
    key. The 64-bit key is derived by entering a series of 10 hexadecimal characters.
    These initial 40 bits are combined with a 24-bit **Initialization Vector** (**IV**),
    which forms the RC4 encryption key. For the 128-bit key, a 104-bit key or 26 hexadecimal
    characters are combined with the 24-bit IV to create the RC4 key.
  prefs: []
  type: TYPE_NORMAL
- en: 'Authenticating to a WEP wireless network is a four-stage process:'
  prefs: []
  type: TYPE_NORMAL
- en: The client sends a request to the WEP access point to authenticate.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The WEP access point sends a cleartext message to the client.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The client takes the entered WEP key and encrypts the cleartext message that
    the access point transmitted. The client sends this on to the access point.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The access point decrypts the message sent by the client with its own WEP key.
    If the message is decrypted properly, the client is allowed to connect.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As was addressed previously, WEP was not designed with message confidentiality
    and integrity as a central focus. As a result, there are two key vulnerabilities
    with WEP implementations. First, the CRC32 algorithm is not used for encryption
    per se, but rather as a checksum against errors. The second is that the RC4 is
    susceptible to what is known as an Initialization Vector attack. The IV attack
    is possible due to the fact that the RC4 cipher is a stream cipher and, as a result,
    the same key should never be used twice. The 24-bit key is too short on a busy
    wireless network to be of use. In about 50% of cases, the same IV will be used
    in a wireless communication channel within 5,000 uses. This will cause a collision,
    whereby the IV and the entire WEP key can be reversed.
  prefs: []
  type: TYPE_NORMAL
- en: Due to the security vulnerabilities, WEP began to be phased out in 2003 in favor
    of more secure wireless implementations. As a result, there is a good chance that
    you may not see one implemented in the wild, but there are access points sold
    on the commercial market to this day that still have WEP enabled. Also, you may
    encounter legacy networks that still use this protocol.
  prefs: []
  type: TYPE_NORMAL
- en: Wi-Fi Protected Access (WPA)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'With the security vulnerabilities of the WEP wireless network implementations
    being evident, the 802.11 standards were updated to apply a greater degree of
    security around the confidentiality and integrity of wireless networks. This was
    done with the design of the **Wi-Fi Protected Access** (**WPA**) standard that
    was first implemented in the 802.11i standard in 2003\. The WPA standard was further
    updated with WPA2 in 2006, thereby becoming the standard for Wi-Fi Protected Access
    networks. WPA2 has three different versions, which each utilize their own authentication
    mechanisms:'
  prefs: []
  type: TYPE_NORMAL
- en: '**WPA-Personal**: This type of WPA2 implementation is often found in residential
    or small-to-medium business settings. WPA2 makes use of a pre-shared key, which
    is derived from the combination of a passcode and the broadcast **Service Set
    Identifier** (**SSID**) of the wireless network. This passcode is configured by
    the user and can be anything from 8 to 63 characters in length. This passcode
    is then salted with the SSID, along with the 4,096 interactions of the SHA1 hashing
    algorithm.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**WPA-Enterprise**: The enterprise version of WPA/WPA2 makes use of a RADIUS
    authentication server. This allows for the authentication of the user and devices,
    and severely reduces the ability of brute-forcing pre-shared keys.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Wi-Fi Protected Setup (WPS)**: This is a simpler version of authentication
    that makes use of a PIN code versus a passcode or passphrase. Initially developed
    as an easier way to connect devices to wireless networks, we will see how this
    implementation can be cracked, revealing both the PIN code and the passcode utilized
    in the wireless network implementation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For our purposes, we will focus on testing the WPA-Personal and WPS implementations.
    In the case of WPA-Personal, authentication and encryption is handled through
    the use of a four-way handshake:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/56b356b7-1e3c-4731-8c29-9f7988215e4d.png)'
  prefs: []
  type: TYPE_IMG
- en: The access point transmits a random number to the client, referred to as an
    **ANonce**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The client creates another random number called an **SNonce**. The SNonce, ANonce,
    and the passcode the user entered are combined to create what is referred to as
    a **Message Integrity CheckÂ **(**MIC**). The MIC and SNonce are sent back to the
    access point.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The access point hashes the ANonce, SNonce, and pre-shared key together and,
    if they match, authenticates the client. It then sends an encryption key to the
    client.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The client acknowledges the encryption key.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'There are two key vulnerabilities within the WPA-Personal implementation that
    we will focus on:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Weak pre-shared key**: In the WPA-Personal implementation, the user is the
    one that configures the settings on the access point. Often, users will configure
    the access point with a short, easy-to-remember passcode. As shown previously,
    we were able to sniff the traffic between an access point and client. If we are
    able to capture the four-way handshake, we have all of the information necessary
    to reverse the passcode and then authenticate to the network.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**WPS**: The Wi-Fi Protected Setup is a user-friendly way for end users to
    connect devices to a wireless network through the use of a PIN. Devices such as
    printers and entertainment devices will often make use of this technology. All
    a user has to do is push a button on a WPS-enabled access point and the same on
    a WPS-enabled access point, and then a connection can be established. The drawback
    is that this method of authentication is done through the use of a PIN. This PIN
    can be reversed, revealing not only the WPS PIN but also the wireless passcode.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Wireless network reconnaissance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As with penetration testing LANs or over the public internet, we need to perform
    reconnaissance to identify our target wireless network. As opposed to having a
    network connection, we also have to take care and ensure that we do not target
    a network that we are not authorized to test. This becomes a significant issue
    when discussing wireless penetration testing, as you will often find a number
    of wireless networks co-mingled with a target network. This is especially true
    in cases where our target organization and their associated networks are located
    in an office building or park.
  prefs: []
  type: TYPE_NORMAL
- en: Antennas
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One key consideration when beginning wireless penetration testing is the selection
    of antennas. Virtual machines and laptops often do not have the proper wireless
    cards and antennas to support wireless penetration testing. As a result, you will
    have to acquire an external antenna that is supported. Most of these antennas,
    though, can be easily purchased online for a moderate price.
  prefs: []
  type: TYPE_NORMAL
- en: Iwlist
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Kali Linux has several tools that can be used to identify wireless networks;
    one basic tool is theÂ `iwlist`Â Linux command. This command lists the available
    wireless networks within range of the wireless card. Open a Command Prompt and
    type the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/13db4bc9-cffa-4daf-abe4-42374b5cdfdb.png)'
  prefs: []
  type: TYPE_IMG
- en: While a simple tool, this gives us some good information. This includes the
    BSSID or MAC address of the wireless access point (which will become important
    later), the type of authentication and encryption, and other information.
  prefs: []
  type: TYPE_NORMAL
- en: Kismet
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Kismet is a combination wireless scanner, IDS/IPS, and packet sniffer that
    comes installed on Kali Linux 2.0\. Written in C++, Kismet offers some additional
    functionality that is not normally found in purely command-line tools. To start
    Kismet, you can navigate to Applications | Wireless Attacks | Kismet or type the
    following into a command prompt:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'When the command executes, you will be brought to a window. There are different
    color schemes available and the initial message will verify that you are able
    to see Kismet in the Terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6d966b5e-1d06-4c8b-8ae0-ee31f7954b84.png)'
  prefs: []
  type: TYPE_IMG
- en: Click Yes if you have no issue seeing the Terminal.
  prefs: []
  type: TYPE_NORMAL
- en: 'Kismet needs to have a source for analysis. This will be the wireless interface
    on your Kali Linux installation. If you are unsure, type `ifconfig` into a command
    prompt; the interface that begins with WLAN is your wireless interface:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e99717fd-99c5-4f3f-8bbe-c1b6c28fbe02.png)'
  prefs: []
  type: TYPE_IMG
- en: Press the *Enter* key to indicate Yes.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next screen allows you to enter an interface for Kismet to use for scanning.
    In the following screenshot, we enter `wlan0`, as that is the interface we are
    working with:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/30f1b06a-22b6-48d4-9cd4-235bec2cebc6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Hit *Enter* to add the interface. At this point, Kismet will start to collect
    wireless access points. This includes the BSSID and channels that each access
    point is using:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2f22b3c1-e248-42c9-81d5-ea570fc775d0.png)'
  prefs: []
  type: TYPE_IMG
- en: From the output of Kismet, you can start to gain an understanding of what wireless
    networks are visible to your system. From here, attempt to identify those wireless
    access points or networks that are part of your penetration test.
  prefs: []
  type: TYPE_NORMAL
- en: WAIDPS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Another command-line tool that is useful for wireless penetration testing is
    the WAIDPS tool. While billed as an intrusion-detection platform for wireless
    networks, this Python script is handy for gathering information about wireless
    networks and clients. To use WAIDPS, simply download theÂ `WAIDPS.py`Â Python script
    from the website at [https://github.com/SYWorks/waidps](https://github.com/SYWorks/waidps).
  prefs: []
  type: TYPE_NORMAL
- en: 'Once downloaded, place the script into any directory and then run it using
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the command executes, you will be brought to a screen while the script
    runs through the configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d4466907-0f02-406d-aa69-dd7655eed71b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'WAIDPS has an optional feature that compares the MAC address of wireless access
    points to a list of known manufacturers. This feature is useful if you know that
    a particular target utilizes a specific manufacturer for their access points:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ac8c31d1-d8a3-4c13-abda-f700c7d5ffb1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the initial configuration has run, WAIDPS will supply a list of access
    points and wireless networks that are in range. In addition, there is information
    on the type of encryption in use, as well as the authentication mechanism. Another
    good piece of information is the PWR or power indicator. This indicates the strength
    of the specific access point''s signal. The closer the number is to zero, the
    stronger the signal. This is helpful if you are targeting a specific access point.
    If the signal is weaker than you would like, it indicates you may have to get
    closer to the actual access point:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/22323310-7643-4ec2-9c6d-2c95d84946e7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In addition to identifying wireless access points, WAIDPS has the ability to
    scan for clients that may have wireless enabled but are not associated with an
    access point. This information can become useful if you need to spoof a MAC address
    that appears to come from a legitimate client:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/054bd279-1104-4708-9684-0a5a4216cf39.png)'
  prefs: []
  type: TYPE_IMG
- en: Wireless testing tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Kali Linux comes prepackaged with a number of command-line and GUI-based tools.
    These tools can be leveraged to convert our network interface into a network monitor,
    capture traffic, and reverse the authentication passcode. The first of these tools,
    Aircrack-ng, is a suite of tools. In addition, we will examine some other command-line
    and GUI tools that cover the full spectrum of tasks involved in wireless penetration
    testing.
  prefs: []
  type: TYPE_NORMAL
- en: Aircrack-ng
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Aircrack-ng is a suite of tools that allow penetration testers to test the
    security of wireless networks. The suite includes tools that perform the following
    tasks related to wireless penetration testing:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Monitoring**: These are tools designed specifically to capture traffic for
    later analysis. We will see in greater depth the ability of the Aircrack-ng tools
    to capture wireless traffic that we can use on other third-party software, such
    as Wireshark, to examine.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Attacking**: These tools are available to attack target networks. They include
    tools that allow for de-authentication attacks and replay attacks that take advantage
    of Aircrack-ng''s ability to conduct packet injections, whereby Aircrack-ng actually
    sends packets into the wireless data stream to both clients and the access point
    as part of the attack.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Testing**: These tools allow for the testing of wireless capabilities in
    hardware such as wireless cards.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cracking**: The Aircrack-ng toolset also has the capability to crack wireless
    pre-shared keys found in the WEP, WPA, and WP2.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In addition to the command-line tools, Aircrack-ng is used in a number of GUI-based
    tools. Having a solid understanding of how Aircrack-ng works will provide a solid
    foundation to the use of other tools we will explore later on in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: WPA pre-shared key-cracking
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now we will use the Aircrack-ng suite of tools against a WPA2 wireless network.
    The process involves identifying our target network, capturing the four-way handshake,
    and then utilizing a wordlist to brute-force the passcode that, in combination
    with the wireless network''s SSID, is the pre-shared key. By cracking the passcode,
    we will then be able to authenticate to the target wireless network:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Ensure that you have your wireless network card inserted and that it is working
    properly. For this, enter the following command into the command line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The command should output something similar to the following screenshot. If
    you do not see the wireless interface, ensure that it is properly configured:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/efe691cc-680d-40cd-85b0-d92879df6338.png)'
  prefs: []
  type: TYPE_IMG
- en: Here we have identified our wireless interface as `wlan0`. If you have more
    than one interface, you may see `wlan1` as well. Be sure you are using the correct
    interface during these tests.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first tool we will use in the Aircrack-ng suite is `airmon-ng`. This tool
    allows us to change our wireless network card into what is known as monitor mode.
    This is much like placing a network interface into promiscuous mode. This allows
    us to capture more traffic than just what we would see with a normal wireless
    network card. To find out the options available in `airmon-ng`, type the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'This will produce the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/01c3fe6b-030c-452d-815f-e5b6cafcabcd.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To change our wireless network card to monitor mode, type the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'If successful, we will see this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f5c1d4b2-b3e6-4663-b3cd-73c0a1dec5c7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If we check the interfaces again using `iwconfig`, we can see that our interface
    has been changed as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/515e1605-246e-409a-91e3-f83dc52575c9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Sometimes, there are processes that interfere with putting the wireless card
    into monitor mode. When you execute theÂ `airmon-ng start wlan0`Â command, you may
    see the following message:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f7250e26-c88e-424f-b288-65846659b4fc.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In this case, there are three possible processes that can interfere with the
    wireless card in monitor mode. In this case, we run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/4a76d2c1-7fcb-42bf-bb7d-cc17c46782e5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'At this point, issuing the following commands will allow us to proceed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'This kills the processes that can interfere with `airmon-ng`. To re-enable
    these processes, type the following two commands into the command line, once you
    are done using the Aircrack-ng tools:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: If there are still any issues, you can restart Kali Linux and these services
    will be re-enabled.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the next step, we need to scan for our target network. In the previous section,
    we discussed some of the reconnaissance necessary to identify potential target
    networks. In this case, we are going to use a tool called `airodump-ng` to identify
    our target network, as well as identify the BSSID it is using and the channel
    it is broadcasting on. To access the options for `airodump-ng`, type the following
    into Command Prompt:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'This will produce the following partial output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f0002a72-7680-4b0d-93ef-0095d7fb22bb.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now we will use the `airodump-ng` command to identify our target network. Type
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '`airodump-ng` will run as long as you let it. Once you see the target network,
    press *Ctrl* + *C* to stop. You will see the following output. We have identified
    the network we are going to try to crack in red:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/99fc1e78-500b-4e63-987b-3b67631702b3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The previous step has identified three key pieces of information for us. First,
    we have identified our target network, `Aircrack_Wifi`. Second, we have the BSSID,
    which is the MAC address for the target network, `44:94:FC:37:10:6E`, and finally,
    the channel number, `6`. The next stage is to capture wireless traffic to and
    from our target access point. Our goal is to capture the four-way handshake. To
    start capturing traffic, type the following into the Command Prompt:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The command tells `airodump-ng` to use the monitor interface to capture traffic
    for the BSSID and channel of our target network. The following screenshot shows
    the output of the command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ff3bbc97-b086-4c61-bb2d-b5ad833199cb.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As the command runs, we want to ensure that we capture that handshake. In the
    event that a client connects with a valid handshake, the command output shows
    the handshake as having been captured:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ab123482-4e71-47ee-9664-d06555dea13b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the event that you are not able to obtain the WPA handshake, look to see
    whether there is a client accessing the network. In this case, we see a station
    attached to the target wireless network with the MAC address of `64:A5:C3:DA:30:DC`.
    As this device has authenticated, it will most likely automatically reconnect
    in the event that the connection is temporarily lost. In this case, we can type
    the following command into command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: The `aireplay-ng` command allows us to inject packets into the communication
    stream and de-authenticate the client. This will then force the client to complete
    a new WPA handshake that we can capture.
  prefs: []
  type: TYPE_NORMAL
- en: 'After we have captured the handshake, we stop `airodump-ng` by pressing *Ctrl*
    + *C*. If we examine the root folder, we will see four files that have been created
    from our dump:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/304decfd-c197-464a-8aff-fb29e0e1fa0d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can examine the `wificrack-01.cap` file in Wireshark. If we drill down to
    theÂ EAPOLÂ protocol, we can actually see the four-way handshake that we have captured:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/da1d297a-1856-424c-b220-e37db5b15198.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Further examination shows the specific WPA key Nonce and its associated information:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d2b90d0c-7cef-4958-a8f5-2b78aa56b721.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We have the information necessary to attempt to crack the WPA pre-shared key.
    To do this, we use theÂ `aircrack-ng`Â tool. The following is the `aircrack-ng`
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding command, we are identifying the target network''s BSSID with
    theÂ `-b`Â option. We then point towards the capture file, `wificrack-01.cap`. Finally,
    we utilize a wordlist in much the same way we would crack a password file. In
    this case, we will use theÂ `rockyou.txt`Â wordlist. Once the command is set, hit
    *Enter* and `aircrack-ng` will start working:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d5f7e6ad-1587-45ec-b00a-5421099b810c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Aircrack-ng will utilize the `rockyou.txt` password list and try every combination
    against the capture file. If the `passcode` utilized in the pre-shared key is
    within the file, `aircrack-ng` will produce the following message:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f27753ee-96d5-4e75-b4fb-c782c68bb75e.png)'
  prefs: []
  type: TYPE_IMG
- en: From the preceding screenshot, we can see thatÂ `passcode "15SHOUTINGspiders"`
    was in the `rockyou.txt` file we used to brute-force. Also note that this took
    approximately one hour and 42 minutes, and ended up trying a total of 8,623,648
    different passcodes. This technique can be attempted with any password list much
    the same way we discussed in the password-cracking chapter. Just remember that
    the passcode can be anywhere from 8 to 63 characters in length. The amounts of
    combinations that are available are too numerous to try. This attack, though,
    is successful against easy-to-remember or short passphrases, much the same way
    password-cracking is.
  prefs: []
  type: TYPE_NORMAL
- en: WEP-cracking
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The process for WEP-cracking is very similar to that which was utilized for
    cracking WPA. Identify the target network, capture traffic, which includes the
    authentication mechanism, and then point a brute-force attack to reverse the key.
    There are some differences, though. As opposed to WPA-cracking, where all we had
    to do was capture the four-way handshake, in WEP-cracking, we have to ensure we
    gather enough of the **Initialization Vectors** (**IVs**) to properly crack the
    WEP key. Although this may seem like a tall order, techniques are available to
    force this process and make the time necessary to sniff traffic as short as possible:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To start the process of cracking WEP, we put our wireless card into monitor
    mode in the same fashion as in WPA-cracking. Type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'We attempt to find our target network using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'This produces the list of wireless networks:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ef80c30e-8ba5-493a-baf8-edcbe6236195.png)'
  prefs: []
  type: TYPE_IMG
- en: We have identified a target network running WEP with the BSSID of `C0:56:27:DB:30:41`.
    In the same vein, we need to make a note of that, as well as the channel that
    the access point is using, in this case, channel `11`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Capture the data on the target wireless network. Here we will use the `airodump-ng`
    command to capture this data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'This command points `airdump-ng` to our target network on the appropriate channel.
    In addition, we are capturing traffic written to theÂ `"belkincrack"`Â file. This
    command produces the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4ae32059-8e0f-42fd-870d-651187191b4b.png)'
  prefs: []
  type: TYPE_IMG
- en: Note that we do not see any data moving across this access point yet. This is
    important, as we need to capture data packets that contain IVs in order to crack
    the WEP key.
  prefs: []
  type: TYPE_NORMAL
- en: 'We have to fake an authentication to our target network. Essentially, we are
    using an Aircrack-ng tool called `aireplay-ng` to tell the access point that we
    have the proper WEP key and are ready to authenticate. Even though we do not have
    the proper key, the following command lets us fake an authentication and allows
    us to communicate with the WEP access point:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding command, we have `aireplay-ng` fake the authentication with
    `"-1"`, `"0"` as the retransmission time, and `"-a"` as the BSSID of our target
    access point. The command produces the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5f3cb2a5-be14-4865-a72a-4c7c6e42b49a.png)'
  prefs: []
  type: TYPE_IMG
- en: We now have the ability to communicate with the WEP access point.
  prefs: []
  type: TYPE_NORMAL
- en: 'As we saw in step 3, there was very little data moving back and forth through
    the access point. We need to capture a great deal of data to ensure that we are
    able to grab those IVs and force a collision. We can again use `aireplay-ng` to
    increase the data to the access point. In the following command, we are going
    to conduct an ARP Request Replay Attack. In this attack, we are going to use `aireplay-ng`
    to retransmit ARP requests to the access point. Each time it does this, it generates
    a new IV, increasing our chances of forcing that collision. Open a second command
    prompt and type the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding command, `"-3"` tells `aireplay-ng` to conduct the ARP Request
    Replay Attack against the following network, `"-b"` on the specific interface,
    `"wlanomon"`. Once the command runs, you need to force the ARP requests by pinging
    another host on the same network. This will force the ARP requests. Once that
    is started, you will see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/59230ea0-4e8d-4068-93b0-b0c3e0960647.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If we return to the first Command Prompt, where `airodump-ng` is running, we
    see the data rate start to increase. In this case, over 16,000 IVs:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6647269f-543b-4d7c-a067-fea572cfed1c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Open a third Terminal. Here we are going to start the WEP-cracking. This can
    run while the `airodump-ng` command is capturing IVs. To start the process, type
    the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Here we are simply pointing `aircrack-ng` to the capture file that is running.
    `aircrack-ng` starts working immediately, as the screenshot indicates:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2c9f43e3-2624-4583-b348-60b834a05f87.png)'
  prefs: []
  type: TYPE_IMG
- en: '`aircrack-ng` may indicate that there are not enough IVs and that it will reattempt
    when there are enough IVs. As we see in the following screenshot, `aircrack-ng`
    was able to determine the WEP key. All told, there were 15,277 IVs that had been
    captured, which were utilized for the cracking. In addition, `73253` keys were
    tested in less than three minutes:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/cb7d24c1-d1e7-401b-9978-695213dbb61e.png)'
  prefs: []
  type: TYPE_IMG
- en: As we can see in this attack, with the right amount of wireless traffic and
    the `aircrack-ng` suite of tools, we were able to determine the WEP key that allows
    us to authenticate to the network. It is the ease of this attack that has seen
    the move from WEP to WPA authentication. While WEP networks are becoming rarer
    in the wild because of this attack, you still may seem some. If you do come across
    them, this attack is fantastic for demonstrating to clients the significant security
    vulnerabilities present.
  prefs: []
  type: TYPE_NORMAL
- en: PixieWPS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'PixieWPS is an offline brute-forcing tool that is utilized to reverse the PIN
    of a WPS wireless access point. The name of PixieWPS comes from the Pixie-Dust
    attack that was discovered by Dominique Bongard. This vulnerability allows for
    the brute forcing of the WPS PIN. (For more detailed information on this vulnerability,
    see Bongard''s presentation: [https://passwordscon.org/wp-content/uploads/2014/08/Dominique_Bongard.pdf](https://passwordscon.org/wp-content/uploads/2014/08/Dominique_Bongard.pdf).)'
  prefs: []
  type: TYPE_NORMAL
- en: 'To access PixieWPS, type the following into Command Prompt:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'The command will give you the different command options. In order for PixieWPS
    to work properly, a good deal of information must be obtained. This includes the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: Enrollee public key
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Registrant public key
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enrollee Hash-1
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enrollee Hash-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Authentication session key
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enrollee nonce
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Because of all these components that are required, PixieWPS is often run as
    part of another tool, such as Wifite.
  prefs: []
  type: TYPE_NORMAL
- en: Wifite
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Wifite is an automated wireless penetration-testing tool that utilizes the tools
    associated with Aircrack-ng and the Reaver and PixieWPS command-line tools.
  prefs: []
  type: TYPE_NORMAL
- en: 'This gives Wifite the ability to capture traffic and reverse the authentication
    credentials for WEP-, WPA-, and WPS-type wireless networks. Navigate to Applications
    | Wireless Attacks | Wifite or through command line to start Wifite:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Either will bring you to the initial screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4bdb099f-22fc-4b40-ac64-ba4d85cef47e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Wifite will automatically put the wireless card into monitor mode and then
    start to scan for wireless networks:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f78d12a6-0bc8-449c-942c-16d9d7be1770.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you see the target network in the list, in this case the ESSID or broadcast
    SSID Brenner, hit *Ctrl* + *C*. At that time, you will be prompted to enter either
    a single number or a range for testing. In this case, we enter the number `4`
    and hit *Enter*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/17d37599-ad2c-46fe-adef-47d18a499dc3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Wifite automatically starts the WPS Pixie attack by capturing the necessary
    information. If successful, the following will display:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ba7de24f-f539-4480-a400-4fb60fda8a5a.png)'
  prefs: []
  type: TYPE_IMG
- en: If the WPS vulnerability is present, as in the case of the wireless network
    here, Wifite is able to determine both the WPA key and the PIN.
  prefs: []
  type: TYPE_NORMAL
- en: Fern Wifi-Cracker
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Fern Wifi-Cracker is a GU- based tool written in Python for testing the
    security of wireless networks. There are currently two supported versions: a paid,
    professional version that has a great deal more functionality, and a free version
    that has limited functionality. The version included with Kali Linux requires
    `aircrack-ng` and other wireless tools to function properly.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To start Fern, you can navigate to Applications | Wireless Attacks | Fern Wifi
    Cracker, or type the following into command prompt:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot is the initial page that loads:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b29be887-c9fc-474e-b7cf-49a2641c92d0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We will use the Fern Wifi Cracker to attack the same wireless network, Aircrack-Wifi,
    utilizing the GUI instead of having to use the command line in our attack:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Select the interface. Click on the Select InterfaceÂ drop-down menu. In this
    case, we will select wlan0\. Fern will automatically place our interface into
    monitor mode for us:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f68397a3-37ba-44d6-b68f-7e8787c1a9a8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on theÂ Scan for Access PointsÂ button. Fern will automatically scan for
    wireless networks within range of your antenna. After the scanning is complete,
    the Wifi WEP and WiFi WPA buttons will change from grayed-out to colored, indicating
    wireless access points utilizing those security settings have been detected:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/03335b4a-7702-4a07-a09a-4f11e0d22872.png)'
  prefs: []
  type: TYPE_IMG
- en: Clicking on the Wifi WPA button displays an attack panel, which contains a graphical
    representation of the WPA wireless access points that we can attack. In this case,
    we will select the button for Aircrack_Wifi:![](img/83f620b6-8ddb-4af1-abfb-b1725a4b359d.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This screen provides details about the selected access point. In addition, Fern
    Wifi Cracker allows for a WPA attack or a WPS attack. In this case, we will stay
    with a WPA attack:![](img/c8335752-2280-48c1-82ec-769b4ba93e11.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the passcode file that Fern Wifi-Cracker will use to reverse the passcode.
    In this case, we have crafted a special Wi-Fi passcode list and point Fern Wifi-Cracker
    to that text file:![](img/b5271b9f-5995-44b3-be4d-198794ecd298.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the Wifi Attack button. Fern Wifi-Cracker completes the entire process
    we previously covered in the Aircrack-ng section. This includes de-authenticating
    a client, then capturing the four-way handshake. Finally, Fern Wifi-Cracker will
    move through the passcode file and, if the passcode is in that file, the following
    message appears:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/cb49a80e-9301-4a30-9973-1fc4ab25db9f.png)'
  prefs: []
  type: TYPE_IMG
- en: Fern Wifi-Cracker takes care of the backend work in terms of cracking Wi-Fi
    network and access points. While it may seem easier to use this tool, it is best
    to have a solid understanding of how Aircrack-ng works. Fern Wifi-Cracker and
    other GUI-based Wi-Fi cracking programs are based around Aircrack-ng, and having
    a solid understanding of that toolsetÂ allows you to fully understand what is happening
    behind the scenes with such programs.
  prefs: []
  type: TYPE_NORMAL
- en: Evil Twin attack
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It's practically impossible to go into any major city or corporate environment
    and not find a Wi-Fi signal. Many of these, particularly in public spaces, Wi-Fi
    spots require no authentication and others present you with a captive portal that
    may just require you to accept some terms and conditions or require you to log
    in using something such as your email or Facebook account.
  prefs: []
  type: TYPE_NORMAL
- en: An Evil Twin attack, also known as a Rogue Access Point or a Fake Access Point,
    is an access point that masquerades as a legitimate access point without the owner's
    knowledge or consent. End users who would connect to the legitimate access point
    will connect to the fake point as it is generally the stronger signal.
  prefs: []
  type: TYPE_NORMAL
- en: The attacker who set up the fake point will now be able to get capture the actual
    password for a password-protected SSID, setting the stage for Man-in-the-Middle
    and other attacks.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''re going to need to include the Aircrack Suite and `dnsmasq`. dnsmasq is
    a small, lightweight tool that acts as an easy-to-configure DNS forwarder and
    DHCP server. Depending on the attack vector you''d like to use, you''ll need some
    additional tools, such as `apache2` and `dnsspoof`:'
  prefs: []
  type: TYPE_NORMAL
- en: Verify that you have the tools. We know the Aircrack tools and Apache2 are pre-installed
    on Kali. In a Terminal, enter `apt-get install dnsmasq`. If itâs already installed,
    youâll have nothing to do; if not, youâll be prompted with an installation confirmation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Determine your target network by putting one of your wireless adapters into
    monitor mode with `airmon-ng start <interface>`Â and then launch `airodump-ng <interface>`
    to start listing all the networks currently being broadcast:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0620d16c-acc6-4dec-8d62-da28ee9f42d5.png)'
  prefs: []
  type: TYPE_IMG
- en: '![](img/8a903d37-72fb-45e7-88a3-ff8cdb37d39b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You may see errors similar to those in the screenshot. In most cases, these
    are safe to ignore. If you encounter issues, use `kill <PID>` to end the process.
    For example, I would use kill `610` to end the `NetworkManager` process:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2209b3b4-d3c2-4d78-a17f-ae133e19be45.png)'
  prefs: []
  type: TYPE_IMG
- en: Note the BSSID (MAC Address), ESSID (broadcast name, SSID), and channel of the
    target network.
  prefs: []
  type: TYPE_NORMAL
- en: 'Set up a configuration file for `dnsmasq` to work with.Â I created a folder
    in my home directory called `tmp` using `mkdir tmp`. Changed the directory, then
    at the terminal entered `touch dnsmasq.conf`. This will create a file called `dnsmasq`.
    Typing `nano dnsmasq.conf` will open theÂ `dnsmasq.conf`Â file in the `cli`Â nano
    text editor. Enter the following lines:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: In the `dnsmasq.conf` file, we just specified the interface (`at0`), the `dhcp`
    range to use (`10.0.0.10 - 10.0.0.250`, `12h` lease time), `dhcp-option=3` as
    the gateway (`10.0.0.1`), and `dhcp-option=3` as the DNS server (`10.0.0.1`).
    Why is the interface `at0`? This is because `airbase-ng` creates a default bridge
    interface known as `at0`.
  prefs: []
  type: TYPE_NORMAL
- en: Save your changes in nano with *Ctrl* + *O*, *Y* and exit with *Ctrl* + *X*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Set up `airbase-ng`. This will create our access point. Set it up usingÂ `airbase-ng
    -e <ESSID> -c <channel> <monitor interface>`. My target `ESSID` is set to `ARRIS-4BE2`,
    the channel is set to `11`, and the monitor interface isÂ `wlan0mon`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/9f50d5a8-29cb-4eb3-b6e0-ba639778b290.png)'
  prefs: []
  type: TYPE_IMG
- en: Enable the `at0` interface, work with `iptables` a bit, and enable/disable traffic
    to pass. You can do these one after the other, as shown.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4d167000-68b1-495e-99a2-16393f2a3020.png)'
  prefs: []
  type: TYPE_IMG
- en: '![](img/a96ceae2-7b3f-408a-8df6-9eb20edc6642.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Launch `dnsmasq` with `dnsmasq -C <config file> -d`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2fea28c9-7885-478e-8903-caeb167e5a24.png)'
  prefs: []
  type: TYPE_IMG
- en: You can prevent traffic from passing and capture the IVS as previously shown
    (using `echo 0 > /proc/sys/net/ipv4/ip_forward`), or you can present the user
    with a captive portal or allow traffic to pass (usingÂ `echo 1 > /proc/sys/net/ipv4/ip_forward`)
    only redirecting specific target sites to set up a MitM attack.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Here, we can take this into several directions. We can continue and set up a
    full-fledged Evil Twin (Rogue AP) in order to capture the password of the network,
    or we can set up a man-in-the-middle attack, sniffing and capturing the traffic
    of any client that connects to our wireless signal by incorporating other tools,
    such as theÂ `dsniff` suite of tools orÂ `sslstrip`, or combine this with **Browser
    Exploitation Framework** (**BeEF**)Â to attack the client side directly by hijacking
    users' browsers.
  prefs: []
  type: TYPE_NORMAL
- en: Post cracking
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you are successful in acquiring the WPA or WEP key, you now have the ability
    to authenticate to the network. Once on the wireless network, you have the same
    range of tools that we have discussed throughout this book. This is due to the
    fact that once properly authenticated, your Kali Linux installation is just part
    of a **Local Area Network** (**LAN**), just as we would be if we were connected
    via a network cable. Therefore, we have the ability to scan for other devices,
    leverage vulnerabilities, exploit systems, and elevate our credentials.
  prefs: []
  type: TYPE_NORMAL
- en: MAC-spoofing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are a few techniques that are useful in demonstrating other vulnerabilities
    on wireless networks that we can explore. One such issue is bypassing a common
    wireless control called MAC filtering. MAC filtering is a control on some routers
    whereby only specific MAC addresses or MAC types are allowed. For example, you
    may be testing a commercial location that utilizes iPads. The wireless network
    is only going to allow MAC addresses with the first three hex characters of `34:12:98`.
    Other organizations may have a set list of MAC addresses that are allowed to join.
  prefs: []
  type: TYPE_NORMAL
- en: If you are able to compromise the WPA key but find that you are unable to join
    the network, the target organization may be utilizing some form of MAC address
    filtering. To bypass this, we will use the Macchanger command-line tool. This
    simple command allows us to change our MAC address to something that will allow
    us to connect. First, you can easily find a new MAC address from previous reconnaissance
    and cracking attempts. The Airodump-ng tool will identify clients that are connected
    to wireless networks. Furthermore, parsing through capture files with Wireshark
    will allow you to identify potentially valid MAC addresses.
  prefs: []
  type: TYPE_NORMAL
- en: 'For this example, we have identified a wireless client that was connected to
    the target wireless network with a MAC address ofÂ `34:12:98:B5:7E:D4`. To change
    our MAC address to pose as that legitimate MAC address, simply type the following
    into the command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'The command produces the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7d5f9bd9-5ee5-4cbc-8ff0-7f1ec9534e26.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In addition, if we run theÂ `ifconfig wlan0`Â command, we can see our spoofed
    MAC address:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/630e2806-b851-471b-a3ba-e82418ce58cc.png)'
  prefs: []
  type: TYPE_IMG
- en: We now have the ability to bypass any MAC filtering that is taking place on
    the access point. There is now the ability to connect to the wireless network.
    Like any system that we are able to compromise, setting up persistence is another
    critical step. This gives us a certain measure of certainty that we will be able
    to access the system again if we lose our connection.
  prefs: []
  type: TYPE_NORMAL
- en: Persistence
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once we have a valid way to authenticate to the wireless network and are able
    to connect, the next step is to set up persistence. One area to focus on is the
    wireless router. Most wireless routers have either a web-based, or other console
    in which legitimate administrators are able to log in and manage the router. Usually,
    these routers are located at the beginning of the subnet of the wireless LAN we
    connect to. For example, if we connect to `Wifi_Crack` and run theÂ `ifconfig wlan0`Â command,
    it identifies us as having the IP address of `10.0.0.7`.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we navigate to [`http://10.0.0.1`](http://10.0.0.1) via the Iceweasel browser,
    we are brought to this page. You can also type `route -n` into a Terminal, which
    will give you the default gateway:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0cc31dca-b88e-4481-99f9-4ecb42d7b16e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If we enter theÂ `admin`Â username without a password and click OK, this is what
    we get:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/34822b7f-ba0a-4219-ad61-027f130531b1.png)'
  prefs: []
  type: TYPE_IMG
- en: What we see is the default password for the administrator account. While not
    common, it is not out of the realm of possibility that the systems administrator
    for this network left the default credentials for the wireless router. If we do
    not get this error message, there are a great deal of resources on the internet
    that aggregate the default administrator accounts for a wide variety of routers,
    switches, and wireless access points.
  prefs: []
  type: TYPE_NORMAL
- en: One such site is [http://www.routerpasswords.com/](http://www.routerpasswords.com/).
    If that doesn't work, the next option is to brute-force the sign-in using techniques
    we have previously covered.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we are able to compromise the administrator accounts and gain access to
    the administrative settings, take note of information that will allow you to sign
    in again, such as the WPS PIN:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/dc5fb669-f2af-4e55-a08e-eda43ddb344c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Administrators may change the wireless access point WPA passcode, but often
    leave the WPS PIN in place. Also, you should check to see whether you have the
    ability to access the MAC address-filtering controls:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ee95fe48-fc11-4371-9ffe-6c7cf13b1d48.png)'
  prefs: []
  type: TYPE_IMG
- en: From here, you can enter several MAC addresses that you can use in the future.
  prefs: []
  type: TYPE_NORMAL
- en: Sniffing wireless traffic
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When examining techniques for sniffing wireless traffic, there are two types
    of techniques available. The first is sniffing WLAN traffic while authenticated
    and connected to the target WLAN. In this instance, there is the ability to utilize
    a Man-in-the-Middle attack in conjunction with tools such as Ettercap, which forces
    network traffic through our testing machine.
  prefs: []
  type: TYPE_NORMAL
- en: A second technique is sniffing all the wireless traffic that we can get from
    a specific wireless network and decrypting it with the WPA or WEP passcode. This
    may become necessary if we are attempting to limit our footprint by not connecting
    to the WLAN. By passively sniffing traffic and decrypting it later, we lessen
    the chance that we will be detected.
  prefs: []
  type: TYPE_NORMAL
- en: Sniffing WLAN traffic
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Just as in a wired LAN, on WLAN, we have the ability to sniff network traffic.
    The following sniffing technique requires that you have been properly authenticated
    to the wireless network you are testing and have received a valid IP address from
    the router. This type of sniffing will make use of the Ettercap tool to conduct
    an ARP poisoning attack and sniff out credentials:'
  prefs: []
  type: TYPE_NORMAL
- en: Start Ettercap by going to Applications | Sniffing and Spoofing | Ettercap-gui
    or by entering `ettercap-gui` into command prompt. Navigate to Sniff and click
    on Unified Sniffing. Once there, you will be given a drop-down list of network
    interfaces. Choose your wireless interface, in our case, WLAN0:![](img/6574cc02-2827-43a3-951f-245f4e7e1bc5.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on Hosts and click Scan for Hosts. After the scanning is complete, hit
    Hosts List. If it is an active wireless network, you should see a few hosts on
    there.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on MiTM and then ARP Poisoning. On the next screen, choose one IP address
    and click on Target 1, and then a second IP address and click on Target 2:![](img/7195b214-8690-4a5e-892d-7793afbfe40b.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Sniff Remote Connections radio button and click OK:![](img/df1ce8c7-f483-4ccf-b9c1-c29e5c865430.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This will start the ARP Poisoning attack whereby we will be able to see all
    the traffic between the two hosts that we have chosen.
  prefs: []
  type: TYPE_NORMAL
- en: 'Start a Wireshark capture. When you are brought to the first screen, make sure
    you choose the wireless interface, in this case, WLAN0:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/949163e6-5ce3-4dab-8289-c12cf3c83776.png)'
  prefs: []
  type: TYPE_IMG
- en: 'When you examine the traffic, we can see a number of types of traffic being
    captured. Most notable is a Telnet session that has been opened between our two
    hosts:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/83861a93-1904-49fa-bc3e-8e13e42ab078.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If we right-click on the Telnet session and choose Follow TCP Stream, we are
    able to see the credentials for a Metasploitable instance with the Telnet credentials
    in cleartext:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6c64a92d-e242-43c7-bc55-055bb5b695c3.png)'
  prefs: []
  type: TYPE_IMG
- en: Passive sniffing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In passive sniffing, we are not authenticated to the network. If we suspect
    that there is the possibility of alerting such intrusion-prevention controls as
    rogue-host detection, this is a good way to avoid those controls while still gaining
    potentially confidential information:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Passively scan for wireless traffic on a target network. Ensure you have your
    wireless card in monitor mode:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Use the `airodump-ng` tool to sniff the network traffic, the same way that
    we did during the WPA-cracking section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Run the tool as long as you want. To ensure that we can decrypt the traffic,
    we will need to ensure we capture the full four-way handshake, if it is a WPA
    network. Once we have captured enough traffic, hit *Ctrl* + *C*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to the folder with the capture file and double-click. This should automatically
    open the capture in Wireshark:![](img/70f0c58a-fcd1-484b-bebf-bd79a78627a0.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The capture is encrypted and all that is visible are a number of `802.11` packets.
  prefs: []
  type: TYPE_NORMAL
- en: 'In Wireshark, navigate to Edit and then to Preferences. A new bow will open
    up; click on the triangle next to Protocols and then click on 802.11\. The following
    should open:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/41dcd0ae-cedc-4cd1-b76b-5f69d4f1fe76.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on Edit. This will bring you to a screen to enter WEP or WPA decryption
    keys. Click on New. Under Key Type, enter `WPA` and then the passcode and SSID.
    In this case, it will be `Induction:Coherer`. Click on Apply and OK:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/443cb449-46f1-4d3d-b2f0-8c95d8db1f1c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To apply this decryption key to our capture, navigate to View and then down
    to Wireless Toolbar. Enable the wireless toolbar. In the main screen, you will
    see the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ad07a219-cb06-4db0-84d1-be6d5cdb6be9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'On the wireless toolbar, click on Decryption Keys. A box will appear. In the
    drop-down menu in the upper left, chose Wireshark for the decryption mode. Make
    sure the applicable key is selected. Click on Apply and OK:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ca9f583f-6f78-4716-a8bc-e6cd97fdb5c3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Wireshark applies the decryption key to the capture and, where applicable,
    is able to decrypt the traffic:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/71ef8191-1aac-4cb8-ac53-5ec2c9aec960.png)'
  prefs: []
  type: TYPE_IMG
- en: As the preceding screenshot demonstrates, it is possible to decrypt traffic
    that we have captured without having to join the network. It is important to reiterate
    that this technique requires a full four-way handshake for each session captured.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The use of wireless networks permeates all organizations. As with any system
    that we have explored so far, there are vulnerabilities with wireless networks
    as well. These vulnerabilities, in the way that traffic is encrypted or in the
    methods of authentication, can be leveraged with tools that Kali Linux supplies.
    Demonstrating these vulnerabilities and their associated exploits by penetration
    testers provides those that employ these types of networks a clear understanding
    of what measures they need employ in order to safeguard themselves from attacks.
    As the world moves to an increasingly wireless world, with smartphones, laptops,
    and the Internet of Things, it is crucial that wireless networks and their security
    controls are constantly tested.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the next chapter, we are going to discuss wireless networking as part of
    a larger methodology of penetration testing: using Kali Linux''s Nethunter on
    a mobile device pen-testing platform. We are going to see several of the techniques
    presented in a new fashion, with a flexible penetration testing tool.'
  prefs: []
  type: TYPE_NORMAL
