- en: Chapter 5. Packages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we used packages to make our lives easier. We used
    Oil to quickly get up and running, as well as the Auth package that helped with
    user authentication.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: What is a package?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Recommended packages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with the Auth package for user authentication
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is Composer and how to use it?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An introduction to building your own package
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is a package?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As developers, we often have code that we use on multiple projects. It could
    be as simple as string manipulation, but we would be lost without the code we
    are familiar with.
  prefs: []
  type: TYPE_NORMAL
- en: This is where packages come in useful. They give a great way of organizing,
    re-using, and sharing your code. Packages can contain all sorts of code, such
    as models, configurations, and even third-party libraries.
  prefs: []
  type: TYPE_NORMAL
- en: Due to the class structure of FuelPHP and other packages, it's possible to extend
    other packages and to the FuelPHP core. This is all possible without changing
    the core files—making upgrades easier and more straightforward.
  prefs: []
  type: TYPE_NORMAL
- en: Although there is a lot that packages can do, there are some things that packages
    can't do. For example, they can't map to a URL; this is the role of the application
    or project code. If there is a functionality that you'll re-use in multiple projects
    and which also requires URL access, it is recommended to use modules. These will
    be introduced in the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Running through some recommended packages is a great way to demonstrate what
    is possible when using packages.
  prefs: []
  type: TYPE_NORMAL
- en: Recommended packages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Although your requirements may differ, in this section we'll introduce a few
    packages that often come in useful.
  prefs: []
  type: TYPE_NORMAL
- en: OAuth
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The internet nowadays is filled with big players like Facebook and Twitter,
    each one has a different structure and use; but they all support a version of
    **OAuth** for user authentication. This means that many projects may require the
    use of OAuth for user authentication and single sign-ins.
  prefs: []
  type: TYPE_NORMAL
- en: One highly-recommended package is a port from the Kohana PHP framework ([http://kohanaframework.org](http://kohanaframework.org)).
    It can be found at [https://github.com/fuel-packages/fuel-oauth](https://github.com/fuel-packages/fuel-oauth).
  prefs: []
  type: TYPE_NORMAL
- en: 'This package handles the authentication with third-party services such as:'
  prefs: []
  type: TYPE_NORMAL
- en: Dropbox
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Flickr
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: LinkedIn
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tumblr
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Twitter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Vimeo
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When using this package, you'll need to copy the configuration file to your
    application configuration directory. This will allow you to add your consumer
    key and secret for the third party systems.
  prefs: []
  type: TYPE_NORMAL
- en: OAuth2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You would have noticed that Facebook was missing from the available interactions
    for the OAuth package. This was mainly due to Facebook using the **OAuth2** standard
    ([http://oauth.net/2](http://oauth.net/2)). Although it does a similar job to
    the first package, you may find the OAuth2 package useful. This package can be
    found at [https://github.com/fuel-packages/fuel-oauth2](https://github.com/fuel-packages/fuel-oauth2)
    and supports the following third-party services:'
  prefs: []
  type: TYPE_NORMAL
- en: Facebook
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Foursquare
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: GitHub
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Google
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PayPal
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Instagram
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Soundcloud
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Windows Live
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: YouTube
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As with the previous package, you will need to create the controller and application
    code to make use of the authentication data from OAuth.
  prefs: []
  type: TYPE_NORMAL
- en: Mandrill
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Sometimes, we need to send e-mails. Although it is certainly easier to use the
    default `mail()` PHP function, this method is not always reliable. Sometimes,
    the `mail()` function will silently fail. This is where third-party systems come
    in handy. There are several large e-mail services, such as **Campaign Monitor**
    and **MailChimp**. These tend to be e-mail campaign and mailing lists. Luckily
    for us, MailChimp have opened their infrastructure in the form of **Mandrill**
    ([http://mandrill.com](http://mandrill.com)).
  prefs: []
  type: TYPE_NORMAL
- en: The Fuel Mandrill package is an unofficial one and can be obtained from [https://github.com/Izikd/fuel-mandrill](https://github.com/Izikd/fuel-mandrill).
    It is a package wrapper for the official Mandrill API library, so you can be confident
    that it will work fine.
  prefs: []
  type: TYPE_NORMAL
- en: Sprockets
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Frontend development and HTML is starting to become more structured with compilers
    such as LESS, Sass, and Compass. Usually, we need to compile the assets for serving
    on the Web with external libraries or tools. The Sprockets package is inspired
    by the Ruby on Rails asset pipeline ([http://guides.rubyonrails.org/asset_pipeline.html](http://guides.rubyonrails.org/asset_pipeline.html)).
    It handles this compiling for using ports of Sass, LESS, and CoffeeScript compilers.
    More information and installation instructions are available at [https://github.com/vesselinv/fuel-sprockets](https://github.com/vesselinv/fuel-sprockets).
  prefs: []
  type: TYPE_NORMAL
- en: Using the Auth package for user authentication
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Although we touched upon the Auth package in [Chapter 4](ch04.html "Chapter 4. Demo
    Application"), *Demo Application*, let's examine the package in detail.
  prefs: []
  type: TYPE_NORMAL
- en: The `Auth` package is not part of the FuelPHP core, it provides a standardized
    interface for the user authentication in FuelPHP. This allows developers to write
    their own drivers and easily integrate a new driver to work with the old code,
    but still keep the methods consistent.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `Auth` package includes three basic drivers: login, group, and **ACL**
    (**Access Control List**). It is worth noting that login drivers can handle multiple
    login drivers at the same time. For example, users could log in using a username
    and password pair, or authenticate via a third-party system, such as Twitter.'
  prefs: []
  type: TYPE_NORMAL
- en: Three of the included drivers are **SimpleAuth**, **ORMAuth**, and **OPAuth**.
  prefs: []
  type: TYPE_NORMAL
- en: SimpleAuth
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This is a simple authentication system that uses a database table to store
    user information. It stores information regarding groups, roles, and ACLs in a
    configuration file. It was used as part of the administration system. As we saw
    in [Chapter 4](ch04.html "Chapter 4. Demo Application"), *Demo Application*, SimpleAuth
    includes the migrations necessary to create the database tables that store the
    user information. Simply configuring your application to use SimpleAuth and then
    running the following command will create the tables:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'More information on configuring SimpleAuth, along with usage examples can be
    found at the following link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://fuelphp.com/docs/packages/auth/simpleauth/intro.html](http://fuelphp.com/docs/packages/auth/simpleauth/intro.html)'
  prefs: []
  type: TYPE_NORMAL
- en: ORMAuth
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is similar to SimpleAuth in many aspects except that it stores all the
    configuration in the database rather than in a configuration file.
  prefs: []
  type: TYPE_NORMAL
- en: The user controls and roles can be more fine grained and assigned to individual
    users. Unlike SimpleAuth, the user attributes are stored in a metadata table rather
    than a serialized array in the user table. Another nice feature is that a history
    of user login times is kept.
  prefs: []
  type: TYPE_NORMAL
- en: To enable the ORMAuth package, you will need to add `ORMAuth` to the `always
    load` code section in the `app/config/config.php` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'More information can be found at the following link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://fuelphp.com/docs/packages/auth/ormauth/usage.html](http://fuelphp.com/docs/packages/auth/ormauth/usage.html)'
  prefs: []
  type: TYPE_NORMAL
- en: OPAuth
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is the most complex of the three provided drivers. It supports authentication
    against OAuth and OpenID providers. It also supports single sign-in; so, when
    a user is logged into a third-party site, such as Twitter, OPAuth will be able
    to detect the session and log in the user transparently.
  prefs: []
  type: TYPE_NORMAL
- en: 'More information on the OPAuth driver can be obtained at the following link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://fuelphp.com/docs/packages/auth/opauth/intro.html](http://fuelphp.com/docs/packages/auth/opauth/intro.html)'
  prefs: []
  type: TYPE_NORMAL
- en: 'As you saw in the scaffolding of the journal administration system, the authentication
    methods will need to be implemented in our application. The Auth methods are well
    documented and named as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Auth::check()`: This method checks if the user is authenticated and returns
    a Boolean true or false'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Auth::remember_me()`: This method creates a "remember me" cookie'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Auth::dont_remember_me()`: This method deletes the "remember me" cookie'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Auth::logout()`: This method logs the user out'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Auth::create_user( array())`: This method registers a user'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Every web application is different, but at least the FuelPHP Auth package gives
    a good starting point for user authentication. It's usually good enough for the
    majority of uses.
  prefs: []
  type: TYPE_NORMAL
- en: Composer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are currently a lot of ways to manage code and install third-party functionality.
    The Ruby world has the Gem packaging system. As mentioned in [Chapter 1](ch01.html
    "Chapter 1. What is FuelPHP?") *, What is FuelPHP?*, the framework is adopting
    the PHP coding and interoperability standards. Part of this is the ability to
    use code from other frameworks without rewriting them to a FuelPHP package.
  prefs: []
  type: TYPE_NORMAL
- en: During the life span of a project, the packages may change with new functionality
    and security fixes. Like Bundler for Ruby on Rails, PHP has a dependency manager
    called Composer.
  prefs: []
  type: TYPE_NORMAL
- en: Composer allows you to declare which versions of libraries to install in your
    project, and it will install them for you. This is great when developing and testing,
    as you know exactly what code is installed. It also allows you to source control
    any changes to those libraries.
  prefs: []
  type: TYPE_NORMAL
- en: 'Although it is still early days for FuelPHP packages and Composer, there are
    a few packages available at the following link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://packagist.org/search/?q=fuel-](https://packagist.org/search/?q=fuel-)'
  prefs: []
  type: TYPE_NORMAL
- en: To add more dependencies to your project, simply change the `composer.json`
    file found at `~/Sites/journal/composer.json`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have found a package you would like to use with Composer, it is a
    case of adding something like the following code in your `composer.json` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This will ensure that you have the latest point release of the Monolog 1.2 package.
  prefs: []
  type: TYPE_NORMAL
- en: An introduction to building your own package
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you have seen so far, packages are very useful, besides they can also be
    simple to create. We will run through some of the basics in this section while
    creating a text manipulation package.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a repository
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The first thing to do is set up a repository. Like in the previous chapter,
    we will use GitHub.
  prefs: []
  type: TYPE_NORMAL
- en: We will be creating a package called **Journal String**; this will have a repository
    name of `journal-string`. Ordinarily, it is recommend to use something like Fuel
    String, but since this is a simple example, it's not necessary to include Fuel
    within the title of the package.
  prefs: []
  type: TYPE_NORMAL
- en: We will be using the new repository as a submodule within the journal project,
    so make sure you make a note of the repository address, which will be something
    like `git@github.com:digitales/journal-string.git`.
  prefs: []
  type: TYPE_NORMAL
- en: Working the package as a submodule
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We need to add this new submodule into our project, so it's time to load a console/terminal
    window. In the terminal, navigate to the top level of the journal project and
    then add the submodule. Make sure that it is cloned to the packages directory.
    In this example, we are checking out the submodule into a directory called string,
    rather than `journal-string`; this is to save typing and make it easier to autoload.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The last command takes us into the `string` package directory. Git submodules
    act as a completely separate repository enclosed within the main project repository.
    This means that any changes made to the `journal-text` package will need to be
    committed to its own repository, and then the main repository will need to be
    updated.
  prefs: []
  type: TYPE_NORMAL
- en: Structuring your package
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Since you will be sharing the package with your team or yourself or with the
    community, in the future, the structure of the directories and files is important.
    It will help you with a quick familiarization when working with the package. The
    recommended directory structure is given as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Every package should include a `bootstrap.php` file in the top directory of
    the package. This file can be used to add a namespace for the package and to add
    the package classes for better performance and auto-loading purposes. If you want
    to override the core classes, you will need to add the package namespace to the
    core namespace, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s create our package structure, as shown in the following hierarchy:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'In this example, we will create some basic two-way encryption for a string
    of text and give it the namespace `String`. We will have a configuration file
    to allow us to salt the encrypted string. So, let''s first create the example
    configuration file. Load the `string.php` file located at `/journal/config/`,
    and add the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: In the `string.php` file, there are a couple of example environments. In the
    configuration file, we are also dynamically setting the environment with `Fuel::$env`.
    This will be used within the main string class to load the configuration for the
    correct environment. Then, the correct values will be assigned to a static class
    variable called `$_config`.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `encode` and `decode` functions, we are making use of the FuelPHP **Crypt**
    functionality. We are also including some uppercase and lowercase string manipulation
    functions for demonstration purposes later. Without further adieu, an example
    of the string manipulation class is given as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'This class will include a `StringExeption` exception that extends the FuelPHP
    `Exception` class, allowing us to customize the exceptions when we need to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The following function is used to get the `string.php` file from within the
    application configuration directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The `encode()` function will encode the string and return the encrypted string.
    Next, we will decode the string in the `decode()` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s introduce a quick **password hashing** method. It is worth noting
    that in PHP 5.5 we can use the new password hasher:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'In the next few functions, we will perform some straightforward text string
    manipulations. First, let''s change the string to be all lowercase:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s convert the string to uppercase:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s make the first character lowercase:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s make the first character uppercase:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s make the first character of each word uppercase:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Now that we have the basic functionality sorted, the application code will need
    to be capable of accessing it. For this, we can use the `bootstrap.php` file in
    the top level of the journal package directory.
  prefs: []
  type: TYPE_NORMAL
- en: 'Load the `bootstrap.php` file located at `packages/journal-string/`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we will be able to call the functionality using something like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Configuring your package
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The first thing to do when using the package will be to create a project-specific
    version of the package configuration. To do this, run the following in your terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'We need to add some custom `salt` text strings which will be used as keys in
    the newly copied `string.php` configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Using your package
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that you have configured the package and created the string functions,
    it''s time to demonstrate using the new package. First, let''s add the `String`
    package to our `config.php` applications file:'
  prefs: []
  type: TYPE_NORMAL
- en: 'As we added a core namespace `String`, we can call our string functions using
    the following method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: You can test the functionality in your controllers and then display the results
    in the views. Creating packages is a simple process and one that you should get
    familiar with. Once you have created your package, you may want to share it with
    others.
  prefs: []
  type: TYPE_NORMAL
- en: Letting people know about your package
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So, you've created your package, it's time to publish it. First, it is a good
    idea to check that the functions are all commented and you have documented how
    to use the package in the `Readme.md` file (or a `Readme.txt` file). If you are
    using GitHub for your code, they provide a quick way of creating a webpage to
    publicize your package or project. When creating a page with GitHub, they will
    use the Readme file as a starting point and then let you customize any of the
    information you may like to include about your package. More information can be
    seen at [https://help.github.com/categories/20/articles](https://help.github.com/categories/20/articles).
  prefs: []
  type: TYPE_NORMAL
- en: Once you are happy that the code is ready to be shared, send a tweet to the
    FuelPHP Twitter account ([https://twitter.com/FuelPHP](https://twitter.com/FuelPHP)).
    They will often "retweet" your message to their followers. In addition to this,
    you can share your package link on the FuelPHP forums at [http://fuelphp.com/forums/categories/codeshare](http://fuelphp.com/forums/categories/codeshare).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have covered some of the package basics, along with examples
    of useful packages that can make our development life easier. With a collection
    of dependable packages, we can concentrate on the fun job of creating the application
    and delivering what the client wants. We have created a package, configured it,
    and demonstrated its use.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter we will cover some of the more advanced topics, including
    functionality portability, unit testing, and profiling within FuelPHP.
  prefs: []
  type: TYPE_NORMAL
