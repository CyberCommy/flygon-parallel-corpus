- en: Chapter 3. Files and Directories
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Copying, removing, and updating files and directories
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finding files using find and locate
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating text files – vim, Emacs, and others
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the file command
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using grep to find patterns
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compressing files using ZIP and TAR
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Other helpful commands such as stat, sum, touch, and more
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can think of everything in a Linux filesystem as a stream of bytes. This
    is simply called a file. A directory is also a file that contains other files.
    Most of the files are located on your computer's hard disk. However, some are
    in memory, for example, `/proc` and `/sys` are actually virtual filesystems. Files
    can also be stored on removable media too such as USB devices, CD/DVDs, and on
    other machines (that is, NFS mounts).
  prefs: []
  type: TYPE_NORMAL
- en: Understanding inodes and the superblock
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Every file under a filesystem has a special number called an **inode**. The
    inode is where the OS stores the properties of the file and contains the following
    information:'
  prefs: []
  type: TYPE_NORMAL
- en: The file type such as regular, directory, special, link, socket, pipe, or block
    device
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The owner and group information
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The permissions of the file (more on this in [Chapter 5](ch05.html "Chapter 5. Permissions,
    Access, and Security"), *Permissions, Access, and Security*)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Date and time on which the file was created and when last changed or read
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The file size
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The inode contains some other information as well
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Things that are not available in the inode are the full path and name of the
    file itself. This is stored in the `/proc` filesystem under the **PID** (**process
    ID**) of the process that owns the file.
  prefs: []
  type: TYPE_NORMAL
- en: The **superblock** is what ties all of the inodes together on a filesystem.
    It contains all of the information needed to manage the files. Being very important
    to the system, most Linux filesystems have a backup copy of the superblock at
    regular intervals, while also being retained in memory.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `dumpe2fs` command can be used to show the contents of the superblock.
    The following is a screenshot of `dumpe2fs` taken on Fedora 17:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Understanding inodes and the superblock](img/3008OS_03_00.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This shows the superblock information for the first partition on this hard drive.
  prefs: []
  type: TYPE_NORMAL
- en: Copying, removing, and updating files and directories
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section we will briefly explore how to copy, remove, and update files.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Several books have been written about filesystem management, and so this will
    serve as just a brief overview. If you have a Linux machine available you can
    try out these commands. We will be doing everything in the `/tmp` filesystem,
    so you don't have to worry about messing anything up on your system.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following is the method to create some files and directories:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to the `/tmp` directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Make a test directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Go to the directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s create some files:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Also, create some directories:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The syntax for copy is `cp source-file destination-file`, so now run `cp f1
    f5`. This will create file `f5` which is a copy of file `f1`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You can copy to a directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The above is a relative path, because it starts from the current directory.
    To use an absolute path do this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let''s remove file `f3` from the current directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s move file `f2` to `dir2`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The `mv` command is also used to rename a file. To rename `f1` to `f6`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'To see a text mode graphical representation of this directory run the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'It is optional to clean up everything we just did, `cd /tmp` and then run:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is a screenshot of the above commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/3008OS_03_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A file can be copied from another location on your computer to the current
    directory. This is performed using the dot operator:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'You don''t have to `cd` to a directory first. You can do something like the
    following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: This is very handy, especially when configuring a machine.
  prefs: []
  type: TYPE_NORMAL
- en: So what happens if you copy a file to a file that already exists? Assuming you
    have the proper permissions, the file being copied overwrites the other file.
    Also, be careful when using `rm`, as it is very difficult to recover a deleted
    file on a Linux system.
  prefs: []
  type: TYPE_NORMAL
- en: Finding files using find and locate
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `find` command is normally used to search for files starting from the current
    directory. The `locate` command uses the `updatedb` database to find files or
    directories on the entire system (with some exceptions).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s use `find` and `locate` to look for some common Linux files:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First change the directory to `/usr`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Now try it with a wildcard:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'It will also find directories:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Now suppose we want to look for a file, but don't really know where it might
    be on the system. The `find` command is also slow at times, because it has to
    search the filesystem from the current point. Here's where `locate` comes in real
    handy.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can be in any directory for this example. Run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Now try the command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'See how fast this is? Now try:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'To ignore case do:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `find` command has over 100 parameters; consult the man page for more information.
  prefs: []
  type: TYPE_NORMAL
- en: The `locate` command uses a database(s) to store the location of files. This
    database is usually automatically recreated by a cron job every night. If you
    want to refresh the database immediately run the `updatedb` command. Note that
    it may take a while on a large filesystem and/or slow computer.
  prefs: []
  type: TYPE_NORMAL
- en: Creating text files – vim, Emacs, and others
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Most users are probably familiar with a GUI-based word processing program. For
    example, I am using LibreOffice Writer to compose this book. However, you can
    edit files using the command line as well. Some of us even prefer it.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It is assumed the reader has access to a Linux machine with a selection of text
    editors available. We will start with **vim**, a text editor that is available
    on every Linux/Unix system. If **Emacs** is not on your system, try installing
    it with `yum install emacs` or `apt-get install emacs`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following is the method to create and edit a text file using the `vi` command:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s go to the `tmp` directory. Run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Now run:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Your terminal should have cleared with vim running in it. Vim is modeless, and
    so always has to be told what mode to be in. Press the *A* key.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Vim should now be in Insert mode. You may see something like `-- INSERT --`
    at the bottom of the screen. Now type some characters.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The normal cursor control keys should be functional. When done editing, press
    the *Esc* key to get out of Insert mode.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To enter command mode, press the colon key, and then any letter. To save the
    file for example type `:w`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To save the file and then quit vim, press *Esc* and then type `:wq`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following is a screenshot of vim editing a Java file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/3008OS_03_02_new.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now let''s take a look at the Emacs editor:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Change to the `/tmp` directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'To start Emacs in text mode run:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: It will start up in edit mode. Type a few lines
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To save the file, press *Ctrl* + *C* and then press *Ctrl* + *S*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The standard cursor keys should get you around the screen; try it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press *Ctrl*+*H*+*?* to bring up the **Help** window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To go back to your original screen, press *Ctrl*+*X*+*1*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To close the Emacs session, press *Ctrl* + *X* and then press *Ctrl* + *C*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following is a screenshot of Emacs editing the Java file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/3008OS_03_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Vim and Emacs are very powerful editors. They are most often used by programmers
    writing code and sys admins maintaining shell scripts. To get more information
    consult the man and/or info pages, or their websites.
  prefs: []
  type: TYPE_NORMAL
- en: 'And for a bonus, here''s a picture of my personally-written text editor:'
  prefs: []
  type: TYPE_NORMAL
- en: '![There''s more...](img/3008OS_03_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This was written in C language under DOS about 20 years ago. I have now compiled
    and run it on over 20 different platforms.
  prefs: []
  type: TYPE_NORMAL
- en: Using the file command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We talked about text files above. In general, humans can read and edit text
    files rather easily. A binary file is different, it is (loosely) what the computer
    "reads". For example, when you run a command such as `vim filename1.txt` vim is
    a binary file and `filename1.txt` is a text file.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following is an example of running the Linux `file` command:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Change the directory to `/tmp` as usual:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s create a text file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'What kind of file is it? Run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, the `file` command can tell us what kind of file something is.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: All of that information means it's a binary file. It also shows what platform
    bash was written for, and some other info.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Try running file on some different files on your system to get an idea of what
    there is out there.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You must have the proper permissions to run the `file` command as it must perform
    an open operation on the file.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We mentioned editing text files. Binary files can be edited as well, if you
    really know what you are doing. This is sometimes needed during low-level work,
    for example, when working on device drivers. A binary editor may look something
    like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![There''s more...](img/3008OS_03_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Oh no, I have edited a file but now can''t save it!**'
  prefs: []
  type: TYPE_NORMAL
- en: From time to time, you may get into a text editing situation that seems hopeless.
    You have spent some time changing a file but now can't save it. The error is usually
    something like "Permission denied". There are usually two things that can cause
    this; you can't write into the directory where the file is located, or the file
    already exists but not with the proper writeable permissions. The best way to
    save your work, if the program allows it, is to simply write the file somewhere
    else, for example, in `/tmp`.
  prefs: []
  type: TYPE_NORMAL
- en: This is a rather simplistic example, but it gets the idea across. I wish I had
    already known this procedure the first time it happened to me.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following is the method to save a file when you get a permission error:'
  prefs: []
  type: TYPE_NORMAL
- en: 'As a normal user (not root) go to the `/usr` directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Now run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: It should open up an empty file as normal. Press *A* and then then enter some
    text.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now press *Esc*, and type `:w`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'It should show a write error, so save the file to `/tmp`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: That should succeed. You can then take steps to correct the real problem (that
    is, don't edit files where you are not supposed to!).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using grep to find patterns
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When dealing with files, it is convenient to be able to search for patterns
    within the text. This is often used in code development for example. Here we show
    how to use **grep**.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will use the `dmesg` program, which shows information about the running kernel,
    for this example. If it is not available, or if your computer has been running
    for a long time, the following may not match up quite right on your system.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following is an example on using `grep`:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Use `dmesg` to create a file, so we can search for some information about your
    system:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s see if we can determine what network device is being used. Run:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'The output might not be very informative. But what if case is an issue? Try
    the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'The `-i` tells `grep` to ignore case. You should now see which network driver
    your system is using. Now try the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: '`grep` returns a code based on the results of the search. Run the above command
    again (remember the up arrow shortcut?):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Now run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Assuming the text was found, the return code will be `0`. Now search for a
    string that should not be there:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: The return code should not be `0`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This might seem a little backwards, that zero means success and non-zero means
    failure. This is common to many Linux commands, because in many cases the number
    returned is an error code.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `grep` program can search in an incredible amount of different ways. You
    can specify very complicated patterns as well. Consult the man page for more information.
    Also, we will visit the return code from `grep` again in [Chapter 8](ch08.html
    "Chapter 8. Working with Scripts"), *Working with Scripts*.
  prefs: []
  type: TYPE_NORMAL
- en: Compressing files using ZIP and TAR
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It's no secret that a Linux system has a *lot* of files. A typical code development
    project might have over 1000 files, spread across several directories. And how
    do we back all of that stuff up?
  prefs: []
  type: TYPE_NORMAL
- en: The answer is file packaging and compression. Here we will show two favorites,
    **ZIP** and **TAR**.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Most Linux systems have both ZIP and TAR, and so it will be assumed they are
    already available on your system.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here we will experiment with the `zip` and `unzip` command::'
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s make a temporary directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let''s create some files:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, create some more files:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s package and compress the first ones into a single file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, the syntax for ZIP is "zip zipped-file files-to-zip". We could
    have also used wildcards above:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let''s include the others:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'The unzip program is used to extract files out of a zipped file (also called
    an archive). Make another directory using the command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'Now unzip the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: Perform an `ls -la` command. You should see the files as before.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You can also view the contents of a ZIP file, without extracting anything,
    by running the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'I use ZIP when there are just a few files, or when I am sending them to someone
    running a non-Linux OS. While ZIP can be used to span directories, it doesn''t
    normally deal well with some Linux files. Tar is a better alternative:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We can use the same files as before: cd /tmp/lbooktemp'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run `tar cvzf lbook1.tar.gz *.txt`. This will create a gzip compressed archive
    file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now run `file lbook1.tar.gz`. It should show something like the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'To extract, first copy it to the test directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: Perform an `ls -la` command. You should see the files again.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To view a tar archive, use the `t` (for tell) option:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let''s TAR the the whole directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: This will get the entire directory, even the hidden files if any exist.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following is a screenshot of the `zip` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/3008OS_03_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: ZIP and TAR are used quite frequently in system administration to back up everything.
    It should be noted that "tarring up" a system, copying that file to another machine,
    and "untarring" the file is a great way to clone a box (I use this all the time).
  prefs: []
  type: TYPE_NORMAL
- en: Later, when we discuss crontab in [Chapter 9](ch09.html "Chapter 9. Automating
    Tasks Using Cron"), *Automating Tasks Using Cron*, I will show how I use TAR to
    backup my system every night.
  prefs: []
  type: TYPE_NORMAL
- en: Other helpful commands such as stat, sum, touch, and more
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are many more commands available in Linux that deal with files. In this
    section I show how to use a few of them.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following are some of the commands I find myself using all the time:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: Now run `ls -la` and remember the info. We will use this later.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Use the `stat` command to see practically everything you would ever want to
    know about the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'Now suppose you have sent that file to someone that is running a Linux system,
    and want to ensure it did not get corrupted along the way. Run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: The first number is the checksum and the second is the number of blocks for
    that file. If the other person runs `sum` on his copy of the file and sees the
    same info, the files are the same.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The file names do not have to match.
  prefs: []
  type: TYPE_NORMAL
- en: 'We have created a lot of files by using the redirection operator. You can also
    use the touch command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: 'Since `file2.txt` did not already exist, touch will create it as an empty file.
    In fact, let''s prove that:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: 'So what happens if we run touch on an existing file? Does it empty it? No,
    it updates the time and date on it. Run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: 'Now run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: Run `ls -la` again. You should notice it now shows the current date and time
    on that file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Suppose you want to just view a text file. Run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: When using the `less` command press the Space bar to scroll down. Press *Q*
    to exit.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Say we want to see just the first few lines in that file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: 'The `head` command shows the first 10 lines by default. How about the last
    10 lines? Run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As I have said before, there are many, many more commands that deal with files.
    And, of the commands I have mentioned, I have only scratched the surface of what
    they can do. As always, consult the man pages for more information.
  prefs: []
  type: TYPE_NORMAL
