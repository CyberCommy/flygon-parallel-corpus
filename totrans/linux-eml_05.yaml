- en: Chapter 5. Securing Your Installation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Of all the things that can happen to your SMTP server, probably the worst is
    having it abused as an open relay—a server that relays mail to third parties without
    your permission. This will consume a lot of bandwidth (which can be costly), eat
    up server resources (possibly slowing down or stopping other services), and can
    be expensive in both time and money. A more serious consequence is that your e-mail
    server will probably end up on one or more blacklists, and any e-mail server that
    refers to those lists will refuse to accept any mail from your server until you
    have proven it to be relay safe. If you need to use e-mail in order to carry out
    business, you will have a big problem.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter will explain how to:'
  prefs: []
  type: TYPE_NORMAL
- en: Protect Postfix from relay abuse
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Differentiate between statically and dynamically assigned IP addresses
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configure relay permissions using Postfix for static IP addresses
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use Cyrus SASL for authentication from unpredictable and dynamic IP addresses
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use the Secure Sockets Layer to prevent usernames and passwords from being sent
    in plaintext
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configure Postfix to defeat or at least slow down dictionary attacks, where
    e-mails are sent to many e-mail addresses within a domain, in the hope that a
    few will reach a valid recipient
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring Postfix network maps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When the Internet was mainly used by academics, no one had to protect their
    mail servers from relay abuse. In fact, not many people had a mail server, and
    so permitting others who did not have an e-mail server to relay e-mail using your
    server was considered a service to them.
  prefs: []
  type: TYPE_NORMAL
- en: This changed with the advent of people who soon became known as spammers. They
    would abuse open relays to send advertisements to large numbers of remote recipients
    leaving the owner of the mail server to pay for the traffic.
  prefs: []
  type: TYPE_NORMAL
- en: This is when postmasters started to handle relay permissions restrictively.
    They used to permit relaying only for trusted IP addresses, refusing messages
    from other IP addresses. A trusted IP address in this context was an IP address
    that could be associated statically (refer the *Static IP Ranges* section) with
    a host that belonged to a known user, or a range of IP addresses known to belong
    to a trusted network. It worked well as most computers would have static IP addresses
    (the IP address wouldn't change over time).
  prefs: []
  type: TYPE_NORMAL
- en: However a new approach had to be found when users became mobile and would use
    dial-up providers to access the Internet and wanted to use a mail server in an
    unknown location. Access providers would give these users dynamic IP addresses,
    that is, their IP address would change every time they dialed in.
  prefs: []
  type: TYPE_NORMAL
- en: 'Suddenly the criteria used to distinguish good users from bad users were gone.
    Postmasters would either have to loosen their relay permissions to permit a whole
    network of potentially untrusted IPs to use the relay, or would have to find another
    way to handle relaying for dynamic IP addresses. Over time, several approaches
    to handle relaying for dynamic IP addresses emerged, such as:'
  prefs: []
  type: TYPE_NORMAL
- en: SMTP-after-POP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Virtual Private Networks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SMTP Authentication
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All of the three approaches differ in their requirements and how they work.
    The following sections provide more detail on each approach.
  prefs: []
  type: TYPE_NORMAL
- en: SMTP-after-POP
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Historically, many internet connections were dial up; if one wished to send
    an e-mail, he/she would have to compose it offline, start the dial-up connection,
    and then tell the e-mail client to "send and receive" mails. In this case, the
    mail client first sends mail (via SMTP) and then checks the server (via POP) to
    see if there is any new mail—the SMTP part happens before the POP part.
  prefs: []
  type: TYPE_NORMAL
- en: This makes it impossible for the SMTP server to find out if the sender should
    be permitted to relay, because the dynamic IP is in no relation with any other
    criteria that would make the sender's one a trusted host. ISP's would be able
    to recognize the IP address of the dial-up connection as one of their own, and
    permit relaying. Any connection from outside their own network would typically
    be rejected. For a small organization with users outside the corporate network,
    it is impossible to keep track of all potential valid source IP addresses.
  prefs: []
  type: TYPE_NORMAL
- en: However, the transactions can be turned on their head, and the checking for
    mail can be performed before sending mail. Checking for mail requires a password,
    which means that the user can be authenticated. Popular e-mail clients can now
    check for e-mail as soon as they are started, and check for new e-mails periodically.
    If the SMTP server can be told that the user at a particular IP address is authenticated
    by the POP server, it can allow relaying. This is the essence of SMTP-after-POP.
    The SMTP server needs to know if a particular IP address has an authentic POP
    user connected to it.
  prefs: []
  type: TYPE_NORMAL
- en: There has to be a time limit on how long the user connection is valid after
    the last connection to the POP server, otherwise a traveling salesman might leave
    a hundred different IP addresses as valid relay hosts a week, one of which might
    later be occupied by a spammer. These days e-mails are often composed while the
    user is online and sent between periodic, automatic checks for new mail. Therefore,
    any composed e-mails sent to the SMTP server will normally be sent within a few
    minutes of a POP3 request, so the time period can be short, typically tens of
    minutes.
  prefs: []
  type: TYPE_NORMAL
- en: The disadvantages of SMTP-after-POP are that you need a POP server even if you
    only want to allow relaying of messages. A POP server will complicate the setup
    on a server if you don't need it. It might also bind updates of your SMTP server
    to your POP server to keep compatibility. And POP is not a secure method of authentication,
    as it can be spoofed.
  prefs: []
  type: TYPE_NORMAL
- en: Virtual Private Networks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Virtual Private Networks** (**VPNs**) assign the client another private IP
    address if authentication to the VPN succeeds. The VPN server will allocate IP
    addresses in a known block. The SMTP server can be configured to permit relaying
    for a mail client coming from a VPN-allocated IP address.'
  prefs: []
  type: TYPE_NORMAL
- en: Again, running a VPN just for the sake of relaying mails involves a lot of effort.
    It only pays off if additional resources and services are provided via the VPN,
    for example access to shared storage, databases, intranet sites, or applications.
  prefs: []
  type: TYPE_NORMAL
- en: SMTP Authentication
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**SMTP Authentication**, also known as **SMTP AUTH**, uses a different method
    to identify valid relay users. It requires mail clients to send a username and
    password to the SMTP server during the SMTP dialogue, and if the authentication
    succeeds, they may relay.'
  prefs: []
  type: TYPE_NORMAL
- en: It is less complex than running a full-blown POP server or a VPN, and it solves
    the problem where it arises—in the SMTP server. You will learn what it takes to
    offer SMTP AUTH, after you've learned how to configure your server to handle a
    range of trusted static IP addresses.
  prefs: []
  type: TYPE_NORMAL
- en: Static IP ranges
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: By default, Postfix will allow only hosts from its own network(s) to relay messages.
    Trustworthy networks are those you configured for your network interfaces. Run
    `ifconfig -a` to get a list of what has been configured on your system.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to change the default, you can either use some generic values using
    the `mynetworks_style` parameter or provide explicit ranges of IP addresses noted
    as values for the `mynetworks` parameter in `main.cf`.
  prefs: []
  type: TYPE_NORMAL
- en: Generic relay rules
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To configure generic relay rules, you need to add one of the following values
    to the `mynetworks_style` parameter in `main.cf:`
  prefs: []
  type: TYPE_NORMAL
- en: '`host:` If you configure `mynetworks_style = host`, Postfix will permit only
    the IP addresses of the host it runs on to send messages to remote destinations.
    If you provide only a webmail interface, this may be acceptable, but no desktop
    clients would be able to connect.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`class:` If you configure `mynetworks_style = class`, Postfix will allow every
    host in the network class (Network class A/B/C) it serves to relay. A network
    class specifies a range of IP addresses, either approximately 255 (class C), 65,000
    (class B), or 16,000,000 (class A) addresses.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Explicit relay rules
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Explicit relay rules allow for finer-grained relay permissions. To use this,
    you need to understand the notation used to specify network address ranges. If
    your network spans the range from 192.168.1.0 to 192.168.1.255, then this can
    be specified as 192.168.1.0/24\. The 24 is used as the first 24 bits of the 32-bit
    network address are the same for each client. If you use a DHCP server (for example,
    in your Linux server or a firewall serving a DSL connection), your network address
    range will probably be defined by that device, and you should use appropriate
    values in your Postfix settings. If you allocate IP addresses manually and hard-code
    them, you can either specify each IP address individually as a /32 range, or you
    can ensure that each IP address falls in an easily identifiable range once you
    allocate them. The class A network 10.0.0.0/8, the 16 class B networks in the
    range 172.16.0.0 to 172.31.255.255 and the 256 class C networks in the range 192.168.0.0
    to 192.168.255.255\. These are all available for private network addresses and
    can be used for internal network addresses.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can add a list of remote and local hosts and/or networks to the `mynetworks`
    parameter in `main.cf`. If you want to permit localhost, all hosts in your LAN
    (in the following example the IP addresses `10.0.0.0` to `10.0.0.254)`, and your
    static IP from home (here `192.0.34.166)` should be noted as a list in CIDR notation
    as shown in this example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Once you reload Postfix, the new settings will take effect.
  prefs: []
  type: TYPE_NORMAL
- en: Dynamic IP ranges
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the previous section, you saw how to permit relaying for static IP addresses.
    This section will show how you can configure Postfix to permit relaying for dynamic
    IP addresses.
  prefs: []
  type: TYPE_NORMAL
- en: Although, as mentioned in this chapter's introduction, there are several ways
    to achieve this, we are only going to describe the method of SMTP authentication.
    It provides a simple and stable mechanism, but the setup is not trivial. The reason
    for this is that SMTP AUTH isn't processed by Postfix on its own. Another software
    module, Cyrus SASL, is required to offer and process SMTP AUTH to mail clients.
    You will need to configure Cyrus SASL, Postfix, and how they interoperate.
  prefs: []
  type: TYPE_NORMAL
- en: Cyrus SASL
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Cyrus SASL ([http://cyrusimap.web.cmu.edu/](http://cyrusimap.web.cmu.edu/))
    is Carnegie Mellon University's implementation of SASL. **SASL** (**Simple Authentication
    and Security Layer**), is an authentication framework described in RFC 2222 ([http://www.ietf.org/rfc/rfc2222.txt](http://www.ietf.org/rfc/rfc2222.txt)).
  prefs: []
  type: TYPE_NORMAL
- en: SASL was written to provide an application-independent authentication framework
    for any application that needs to use or offer authentication services.
  prefs: []
  type: TYPE_NORMAL
- en: Cyrus SASL isn't the only SASL available today, but was the first to emerge
    and is used in various applications such as Postfix, Sendmail, Mutt, and OpenLDAP.
    In order to use Cyrus SASL, you need to understand its architecture, how the various
    layers are made to work together, and how the layers' functionalities are configured.
  prefs: []
  type: TYPE_NORMAL
- en: SASL layers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: SASL consists of three layers— **authentication interface, mechanism**, and
    **method**. Each of these takes care of a distinct job when an authentication
    request is being processed.
  prefs: []
  type: TYPE_NORMAL
- en: 'An authentication process usually goes through the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: A client connects to an SASL server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The server announces its capabilities.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The client recognizes the option to authenticate among the listed capabilities.
    It also recognizes a list of mechanisms it can choose to process authentication.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The client chooses one of the mechanisms and computes a coded message. The exact
    content of the message depends on the mechanism used.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The client sends the command `AUTH <mechanism> <coded message>` to the server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The server receives the authentication request and hands it over to SASL.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: SASL recognizes the mechanism and decodes the coded message. The decoding depends
    on the mechanism chosen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: SASL contacts an authentication backend in order to verify the information given
    by the client. What it exactly looks for, depends on the mechanism used.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If it can verify the information it will tell the server and the server should
    permit the client to relay a message. If it can't verify the information, it will
    tell the server and the server may reject the client's wish to relay a message.
    In both cases, the server will tell the client whether authentication was successful
    or it failed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's take a closer look at the three SASL layers in the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: Authentication interface
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In steps 1 to 5 and step 9 that we just discussed, you can see client and server
    exchange data to process authentication. This part of communication takes place
    in the authentication interface.
  prefs: []
  type: TYPE_NORMAL
- en: Though SASL defines what data must be exchanged, it does not specify how it
    must be communicated between the client and the server. It leaves this to their
    specific communication protocol, which is why SASL can be used by various services
    such as SMTP, IMAP, or LDAP.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'SASL is not as old as the SMTP protocol (see: RFC 821). It was added later
    in RFC 2554 ([http://www.ietf.org/rfc/rfc2554.txt](http://www.ietf.org/rfc/rfc2554.txt)),
    which describes the **SMTP Service Extension for Authentication**.'
  prefs: []
  type: TYPE_NORMAL
- en: 'An SMTP conversation where the server offers SMTP authentication among its
    other capabilities looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '`250-AUTH PLAIN LOGIN CRAM-MD5 DIGEST-MD5 1):` This line tells the client that
    the server offers `SMTP AUTH`. It consists of two logical parts. The first part,
    `250-AUTH`, announces `SMTP AUTH` capability and the rest of the line is a list
    of available mechanisms from which the client may choose the one it prefers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`250-AUTH=PLAIN LOGIN CRAM-MD5 DIGEST-MD5 2):` This line repeats the line above,
    but differs in the way it announces SMTP authentication. Instead of whitespace
    after `250-AUTH`, it adds an equal sign like this `250-AUTH=`. This is for broken
    clients that do not follow the final specification of SASL.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mechanism
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Mechanisms (as described in steps 4 through 7) represent the second layer of
    SASL. They determine the verification strategy used during authentication. There
    are several mechanisms known to SASL. They differ in how they transmit data and
    their level of security during transmission. The most commonly used mechanisms
    can be grouped into **plaintext** and **shared secret** mechanisms.
  prefs: []
  type: TYPE_NORMAL
- en: One mechanism you should never have Postfix offer to clients is the **anonymous**
    mechanism. We will have a look at this first.
  prefs: []
  type: TYPE_NORMAL
- en: '`anonymous:` The anonymous mechanism requires a client to send any string it
    wants to. It was designed to allow anonymous access to, say, global IMAP folders,
    but not for SMTP. An SMTP server offering `ANONYMOUS` in the AUTH line will eventually
    be abused. You should never offer this in an SMTP server! Postfix does not offer
    anonymous access in out of the box configuration.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`plaintext:` Cyrus SASL knows the **PLAIN** and **LOGIN** plaintext mechanisms.
    `LOGIN` is pretty much the same as `PLAIN`, but is used for mail clients that
    don''t follow the final SASL RFC by the books, such as Outlook and Outlook Express.
    Both mechanisms require the client to calculate a Base64 encoded string of the
    username and password and transmit it to the sever for authentication. The great
    thing about plaintext mechanisms is that they are supported by nearly every mail
    client in use today. The bad news is that plaintext mechanisms are not secure
    if used without **Transport Layer Security** (**TLS**). This is because a Base64
    encoded string is merely encoded, but not encrypted—it can easily be decoded.
    It is safe though to use plaintext mechanisms to transmit one during a Transport
    Layer encrypted session. However, if you use TLS, it will protect the Base64 encoded
    string from eavesdroppers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`shared secret:` The shared secret mechanisms available in Cyrus SASL are **CRAM-MD5**
    and **DIGEST-MD5**. Shared secret based authentication has a totally different
    strategy to verify a client. It is based upon the assumption that client and server
    both share a secret. A client choosing a shared secret mechanism will only tell
    the server the name of the specific shared secret mechanism. The server will then
    generate a challenge, based on their secret and send it to the client. The client
    then generates a response, proving that it knows the secret. During the whole
    authentication process neither a username nor a password is sent over the wire.
    That''s why shared secret mechanisms are a lot more secure than the ones mentioned
    before. However, the most popular mail clients Outlook and Outlook Express do
    not support shared secret mechanisms.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: On a heterogeneous network, you will probably end up offering plaintext and
    shared secret mechanisms side by side.
  prefs: []
  type: TYPE_NORMAL
- en: Now that the mechanisms have been covered, there's only one layer left—the method
    layer. This is where lookups to data stores that hold credentials are configured
    and processed. The next section will tell you more about methods.
  prefs: []
  type: TYPE_NORMAL
- en: Method
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The last layer SASL refers to is the method layer. Methods are represented
    by libraries in the Cyrus SASL install directory. They serve to access data stores,
    which Cyrus SASL not only refers to as methods but also as authentication backends.
    Out of the number of methods SASL has, the most commonly used are:'
  prefs: []
  type: TYPE_NORMAL
- en: '`rimap:` The `rimap` method stands for **remote IMAP** and enables SASL to
    log in to an IMAP server. It uses the username and password given by the client.
    A successful IMAP login is a successful SASL authentication.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ldap:` The `ldap` method queries an LDAP server to verify a username and password.
    If the query succeeds the authentication succeeds.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`kerberos:` The `kerberos` method uses the popular Kerberos method, and checks
    a Kerberos ticket.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Getpwent/shadow:` The `getpwent` and `shadow` methods access your system''s
    local user password databases to verify an authentication request.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pam:` The `pam` method accesses any PAM module you configure in your PAM settings
    to verify an authentication request.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sasldb:` The `sasldb` method reads and even writes to Cyrus SASL''s own database
    called sasldb2\. Usually this database is used in conjunction with Cyrus IMAP,
    but you can use it without the IMAP server.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sql:` This method uses SQL queries to access various SQL servers. Currently
    these are MySQL, PostgreSQL, and SQLite.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now that you know about the three layers of the SASL architecture, it's time
    to take a look at the SASL service that handles all the requests between them.
    It is called the **password verification service** and will be described in the
    following section.
  prefs: []
  type: TYPE_NORMAL
- en: Password verification service
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A password verification service handles an incoming authentication request from
    a server, does mechanism-specific calculations, calls a method to query an authentication
    backend, and finally returns the result to the server that sent the authentication
    request.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In the case of Postfix, the server that hands over the authentication request
    is the `smtpd` daemon. In the *Postfix SMTP AUTH configuration* section you will
    learn how you can configure the `smtpd` daemon to choose the right password verification
    service.
  prefs: []
  type: TYPE_NORMAL
- en: 'Cyrus SASL version 2.1.23, the latest version at the moment, provides us with
    three different password verification services:'
  prefs: []
  type: TYPE_NORMAL
- en: '`saslauthd`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`auxprop`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`authdaemond`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mechanisms that your mail clients may use successfully and the methods that
    Cyrus SASL can access during authentication depend on the password verification
    service you tell Postfix to use.
  prefs: []
  type: TYPE_NORMAL
- en: '`saslauthd: saslauthd` is a standalone daemon. It can be run as root, which
    gives it the privileges needed to access sources accessible to root only. However,
    `saslauthd` is limited in the range of mechanisms it supports; it can handle only
    plaintext mechanisms.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`auxprop: auxprop` is the short name for **auxiliary property plugins**, a
    term used in the Project Cyrus mail server architecture. `auxprop` represents
    a library that is used by the server offering authentication. It accesses sources
    with the privileges of the server that uses it. Unlike `saslauthd, auxprop` can
    handle every mechanism available within the Cyrus SASL authentication framework.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`authdaemond: authdaemond` is a password verification service written especially
    to use Courier''s `authdaemond` as password verifier. This way you can access
    any authentication backend that Courier can deal with. This `auxprop` plugin can
    deal only with plaintext mechanisms.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following table gives you an overview of the mechanisms the password verification
    services (methods) can handle:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Method/mechanisms | PLAIN | LOGIN | CRAM-MD5 | DIGEST-MD5 |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `saslauthd` | yes | yes | no | no |'
  prefs: []
  type: TYPE_TB
- en: '| `auxprop` | yes | yes | yes | yes |'
  prefs: []
  type: TYPE_TB
- en: '| `authdaemond` | yes | yes | no | no |'
  prefs: []
  type: TYPE_TB
- en: Only the `auxprop` password verification service is able to handle the more
    secure mechanisms; `saslauthd` and `authdaemond` can process only plaintext mechanisms.
  prefs: []
  type: TYPE_NORMAL
- en: Now we have covered some of the Cyrus SASL theory, it is about time to install
    it. This is exactly what we do in the next sections.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Cyrus SASL
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The chances are that you already have Cyrus SASL on your system. However, various
    Linux distributions have begun to install Cyrus SASL in a different location from
    the typical default one of `/usr/lib/sasl2`. To check if Cyrus SASL is installed
    on your server, either run your package manager and query for `cyrus-sasl` or
    run `find`. A query to the Red Hat package manager (on Fedora Core 11) would return
    something like this if SASL is installed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'A query to `dpkg` (on Ubuntu) would return something like this if SASL is installed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'A `find` looking for `libsasl*.*` looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'This proves that you have SASL installed on your system. To verify the location
    of the SASL libraries simply do an `ls` like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing Cyrus SASL](img/8648_05_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As mentioned earlier, your distribution might put them somewhere else. In this
    case, the `find` method will locate the correct location, or your distribution's
    documentation should give you this information.
  prefs: []
  type: TYPE_NORMAL
- en: If you don't have Cyrus SASL installed, you will have to either use your package
    manager to get it, or install it manually.
  prefs: []
  type: TYPE_NORMAL
- en: 'The latest version of Cyrus is normally available to download from [http://cyrusimap.web.cmu.edu/downloads.html](http://cyrusimap.web.cmu.edu/downloads.html).
    To download version 2.1.23 (always choose the latest stable release, not a developer
    release), issue these commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'After you have downloaded and unpacked the source files, change into the source
    directory and run `configure`. A typical configuration of the sources goes like
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: This will configure Cyrus SASL to give you plaintext and shared secret mechanisms,
    and will build `saslauthd` and give you the SQL method including support for MySQL
    and PostgreSQL.
  prefs: []
  type: TYPE_NORMAL
- en: After the `configure` script has finished, run `make`, become `root`, and then
    run `make install`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Cyrus SASL will install itself to `/usr/local/lib/sasl2`, but it will expect
    to find the libraries in `/usr/lib/sasl2`. You need to create a symbolic link
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Finally you need to check if SASL log messages will be caught and written to
    a log file by `syslogd`. Cyrus SASL logs to the `syslog auth` facility. Check
    your `syslogd` configuration, usually `/etc/syslog.conf`, to see if it contains
    a line that catches auth messages.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: If you don't find an entry, add the following, save the file, and restart `syslogd:`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Once you've got all this done, you are ready to configure SASL.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring Cyrus SASL
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It is vital that you always configure and test Cyrus SASL before you return
    to Postfix and work on Postfix-specific SMTP AUTH settings.
  prefs: []
  type: TYPE_NORMAL
- en: The reason to follow this procedure is quite simple. An authentication framework
    that cannot authenticate will be of no assistance to any other application using
    it. It's quite possible that you will end up debugging Postfix for hours when
    the problem is Cyrus SASL-related.
  prefs: []
  type: TYPE_NORMAL
- en: To understand how and where you must configure SASL, recall that it is an authentication
    framework and was designed to offer its service to many applications. These applications
    might have totally different requirements for not only the password verification
    service to be used but also the mechanisms to be offered, along with the method
    used to access an authentication backend.
  prefs: []
  type: TYPE_NORMAL
- en: Cyrus is configured using application-specific files. The configuration for
    each client application is in a separate file. When an application connects to
    the SASL server, it sends its application name. Cyrus uses this name to look for
    the correct configuration file to use.
  prefs: []
  type: TYPE_NORMAL
- en: In our scenario, the application requiring SMTP AUTH is the `smtpd` daemon within
    Postfix. When it contacts SASL, it not only sends authentication data but also
    its application name, `smtpd`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The application name `smtpd` is a default value that is sent to Cyrus SASL from
    Postfix. You can change it using the `smtpd_sasl_application_name`, but usually
    this is not required. You need it only if you run different Postfix daemons that
    need different Cyrus SASL configurations.
  prefs: []
  type: TYPE_NORMAL
- en: When Cyrus SASL receives the application name, it will append a `.conf` and
    start to look for a configuration file containing configuration settings.
  prefs: []
  type: TYPE_NORMAL
- en: By default, the location for `smtpd.conf` is `/usr/lib/sasl2/smtpd.conf` but
    for various reasons some Linux distributions have started to put it in other locations.
    On Debian Linux you will have to create the configuration at `/etc/postfix/sasl/smtpd.conf`.
    Mandrake Linux expects the file to be located at `/var/lib/sasl2/smtpd.conf`.
    All others are known to expect it at `/usr/lib/sasl2/smtpd.conf`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Check your system and find out if `smtpd.conf` has already been created. If
    not, a simple `touch` command (as root) will create it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'All of the configuration that follows now will center on `smtpd.conf`. Here''s
    a quick rundown of what we will put in there:'
  prefs: []
  type: TYPE_NORMAL
- en: The name of the password verification service we want to use
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The log level at which SASL should send log messages to the log output
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A list of mechanisms Postfix should advertise when offering SMTP AUTH to clients
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuration settings specific to the password verification service chosen
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally we will configure how the password verification service should access
    the authentication backend. How this needs to be done depends on the password
    verification service we choose and will be explained when we get there.
  prefs: []
  type: TYPE_NORMAL
- en: Selecting a password verification service
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The first configuration step is to choose the password verification service
    that SASL should use during authentication. The parameter that tells SASL which
    password verification service should handle authentication is `pwcheck_method`.
    The values you may provide are:'
  prefs: []
  type: TYPE_NORMAL
- en: '`saslauthd`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`auxprop`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`authdaemond`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Depending on the password verification service you've chosen, you will have
    to add the correct value. The names should speak for themselves and tell you which
    password verification service will be called. A configuration that would use `saslauthd`
    would add the following line to `smtpd.conf:`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Choosing a log level
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Cyrus SASL does not handle logging consistently. What Cyrus SASL will log depends
    on the password verification service and the method that is being used. The parameter
    to define a log level is `log_level`. A reasonable setting during setup would
    be log level 3.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: This line should be added to `smtpd.conf`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a list of all the log levels Cyrus SASL knows:'
  prefs: []
  type: TYPE_NORMAL
- en: '| log_level value | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `0` | No logging |'
  prefs: []
  type: TYPE_TB
- en: '| `1` | Log unusual errors; this is the default |'
  prefs: []
  type: TYPE_TB
- en: '| `2` | Log all authentication failures |'
  prefs: []
  type: TYPE_TB
- en: '| `3` | Log non-fatal warnings |'
  prefs: []
  type: TYPE_TB
- en: '| `4` | More verbose than 3 |'
  prefs: []
  type: TYPE_TB
- en: '| `5` | More verbose than 4 |'
  prefs: []
  type: TYPE_TB
- en: '| `6` | Log traces of internal protocols |'
  prefs: []
  type: TYPE_TB
- en: '| `7` | Log traces of internal protocols, including passwords |'
  prefs: []
  type: TYPE_TB
- en: Choosing valid mechanisms
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Your next step will be to choose the mechanisms that Postfix may offer when
    it advertises SMTP authentication to clients. The parameter in Cyrus SASL to configure
    a list of valid mechanisms is `mech_list`. The names of the mechanisms are exactly
    like the ones we used when we introduced them in the *Mechanism* section.
  prefs: []
  type: TYPE_NORMAL
- en: It is important to set the `mech_list` parameter and list only the mechanisms
    your password verification service can handle. If you don't do it, Postfix will
    offer all mechanisms SASL provides and authentication will fail if your mail client
    chooses a mechanism that the SASL password verification service cannot handle.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Recall that the password verification services `saslauthd` and `authdaemond`
    can handle only two plaintext mechanisms— `PLAIN` and `LOGIN`. Consequently a
    `mech_list` for those password verification services must hold only the values
    `PLAIN` and `LOGIN`. Any mail client capable of stronger mechanisms will always
    prefer the stronger over the weaker ones. It will do its calculation and send
    the result to the server. The server will fail to authenticate because neither
    `saslauthd` nor `authdaemond` is capable of handling non-plaintext mechanisms.
  prefs: []
  type: TYPE_NORMAL
- en: The following example would define valid mechanisms for `saslauthd` in `smtpd.conf:`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'A list of valid mechanisms for any of the `auxprop` password verification services
    could go further and list the following mechanisms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The order of mechanisms in this list has no influence on the mechanism the client
    will choose. Which mechanism is selected depends on the client; it will usually
    choose the one that provides the strongest cryptography.
  prefs: []
  type: TYPE_NORMAL
- en: In the sections that follow, we will take a look at how you configure the password
    verification service to choose an authentication backend and how to provide additional
    information to pick the relevant data. As mentioned before, this is handled differently
    by the three password verification services. We will have a look at each password
    verification service separately.
  prefs: []
  type: TYPE_NORMAL
- en: saslauthd
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Before you can use `saslauthd`, you need to check whether it is able to establish
    a socket in a directory that `saslauthd` refers to as `state dir`. Check this
    carefully because there are two common problems related to the socket:'
  prefs: []
  type: TYPE_NORMAL
- en: '**The directory does not exist:** In this case, `saslauthd` will quit running
    and you will find a log message indicating the missing directory.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The directory is not accessible to applications other than** `saslauthd:`
    In this case, you will find log messages in the mail log indicating that `smtpd`
    was unable to connect to the socket.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To get around these problems, you first need to find out where `saslauthd`
    would like to establish the socket. Just fire it up as root, like in the example
    (shown next) and look out for the line that has `run_path` in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: As you can see in the previous example, `saslauthd` would want to access `/var/run/saslauthd`
    as `run_path`. As it cannot access the directory, it quits immediately. Now there
    are two ways to deal with this. It depends whether you acquired `saslauthd` from
    a package or installed it from the source.
  prefs: []
  type: TYPE_NORMAL
- en: In the first case, it is quite likely that the package maintainer built `saslauthd`
    with the default settings; choose a different location as `state dir` and configure
    the `init-script` to override the default path by giving the `-m /path/to/state_dir`
    option.
  prefs: []
  type: TYPE_NORMAL
- en: 'On Debian systems, you would typically find command-line options in `/etc/default/saslauthd`.
    On Red Hat systems, you would typically find command-line options passed to `saslauthd`
    in `/etc/sysconfig/saslauthd`. The following listing gives you an overview of
    the settings for Fedora Core 2:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Speaking for most Linux distributions, typical locations for the `state dir`
    would be either `/var/state/saslauthd` or `/var/run/saslauthd`.
  prefs: []
  type: TYPE_NORMAL
- en: Now consider the case where you built `saslauthd` manually. You should then
    create a directory that matches the value of the `--with-saslauthd` parameter
    you used when you executed the `configure` script.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the SASL configuration example, the value for `--with-saslauthd` was `/var/state/saslauthd`.
    Create this directory and make it accessible to user root and group postfix like
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Once you have verified `saslauthd` can create a socket and `pid` file in your
    `state dir`, you can start configuring `saslauthd` to access the authentication
    backend of your choice.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The following examples presume that you don't have to provide an extra run path
    to `saslauthd`. If you need to do so, just add it to the examples given.
  prefs: []
  type: TYPE_NORMAL
- en: Using an IMAP server as authentication backend
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'Specify the `-a` option together with the value `rimap` to have Cyrus SASL
    log in to an IMAP server with the credentials given by the mail client. Additionally
    you must use the `-O` option to tell `saslauthd` which IMAP server it should turn
    to, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Upon successful login into an IMAP server, `saslauthd` will report an authentication
    success to Postfix and Postfix may permit the mail client to hand over the credentials
    to the relay.
  prefs: []
  type: TYPE_NORMAL
- en: Using an LDAP server as authentication backend
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Verifying credentials with an LDAP server is a little more complex than with
    an IMAP server. It requires far more configuration and that's why you don't give
    all the options to `saslauthd` on the command line but put them into a configuration
    file instead. By default, `saslauthd` expects the LDAP configuration to be located
    at `/usr/local/etc/saslauthd.conf`. If you choose a different location, you need
    to state it on the command line.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'In the previous example, the value `ldap` tells `saslauthd` to turn to an LDAP
    server and the `-O` option provides the path to the configuration file. Your configuration
    file might hold the following parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: As you might have expected, you will have to accommodate the settings to suit
    your LDAP tree and other settings specific to your LDAP server. For a complete
    list of all LDAP-related parameters (there are many more than listed here), take
    a look at the `LDAP_SASLAUTHD readme` that comes with the Cyrus SASL sources and
    is located in the `saslauthd` subdirectory.
  prefs: []
  type: TYPE_NORMAL
- en: Using the local user accounts
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: This is the configuration that most people use `saslauthd` for. You can either
    configure `saslauthd` to read from the local password file or the local shadow
    password file on systems that support shadow passwords.
  prefs: []
  type: TYPE_NORMAL
- en: 'To have it read from `/etc/passwd`, use the `-a getpwent` option like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Most modern Linux distributions do not store passwords in `/etc/passwd`, but
    in `/etc/shadow`. If you want `saslauthd` to read from `/etc/shadow`, run it as
    root like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Using PAM
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: 'It is also possible to use **PAM (Pluggable Authentication Modules)** as the
    authentication backend, which in turn has to be configured to access other authentication
    backends. Start by running `saslauthd` like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Then create a `/etc/pam.d/smtp` file or a section in `/etc/pam.conf` and add
    PAM-specific settings to it. If you installed Cyrus SASL from a package, the chances
    are that you already have such a file. For example, on Red Hat it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The name of the configuration file must be `smtp`. This has been defined in
    `RFC 2554`, which says that the service name for SASL over SMTP is `smtp`. The
    postfix `smtpd` daemon passes the value `smtp` as the service name to Cyrus SASL.
    `saslauthd` in turn passes it to PAM, which then looks in the `smtp` file for
    authentication instructions.
  prefs: []
  type: TYPE_NORMAL
- en: auxprop
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '**Auxiliary Property Plugins** (or **auxprop)** are configured differently
    from `saslauthd`. Instead of passing command-line options, you simply add auxprop-specific
    settings to your `smtpd.conf`. Any auxprop configuration that you set up in your
    `smtpd.conf` should begin with these three lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: To tell Cyrus SASL which plugin you want to use, you need to add an additional
    parameter to the configuration. The parameter is called `auxprop_plugin` and we
    will examine its use in the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the sasldb plugin
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: The auxprop plugin `sasldb` is the default plugin that Cyrus SASL will use even
    if you don't set the `auxprop_plugin` parameter. `sasldb` is SASL's own database
    that is manipulated with the `saslpasswd2` utility.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This tends to irritate people who try to set up a different plugin and have
    something wrong in their configuration. Cyrus SASL will fail if it uses the default
    configuration instead of the desired one. When you get an error message that says
    Cyrus SASL can't locate `sasldb`, it is probably an error in your configuration
    (unless you chose to configure `sasldb` deliberately), and the first step should
    be to check your configuration files.
  prefs: []
  type: TYPE_NORMAL
- en: To use `sasldb`, first of all you need to create an `sasldb` database. Use the
    following command as root to create an `sasldb2` file and add a user.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: This command will create an `sasldb2` file and will add a user username with
    the realm of `example.com`. It is important that you pay special attention to
    the realm you add, as it will be part of the username the mail client will have
    to send later.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The realm is part of the concept of Kerberose infrastructure. Kerberose is a
    distributed, encrypted authentication protocol. By adding a realm you can define
    a context (for example, a domain or host) in which the user may do something.
    If you don't add a realm, `saslpasswd2` will add the hostname of your server by
    default.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that you have created the database and added a user, you need to change
    access permissions on `sasldb` to have Postfix access the database as well. Simply
    give access to the group `postfix` to `sasldb2` like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Don''t get confused because the `sasldb` is called `sasldb2`. The format of
    `sasldb` changed when Cyrus SASL major version 2.x came out. For reasons of compatibility,
    the new `sasldb` file is called `sasldb2`. Once you''ve created the database,
    you need to tell Cyrus SASL to use it. Add the `auxprop_plugin` parameter to `smtpd.conf`
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'That''s all you need to do and you should be ready to start testing (see the
    *Testing Cyrus SASL authentication* section). If, for any reason, you need to
    put `sasldb` in a location that differs from the default, you can use the following
    additional parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Configuring the sql plugin
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: The **sql auxprop** plugin is a generic plugin that gives you access to MySQL,
    PostgreSQL, and SQLite. As an example we will show you how to configure the sql
    plugin to access a MySQL database. Configuring access to the other two databases
    is pretty much the same, with one exception that we will note.
  prefs: []
  type: TYPE_NORMAL
- en: First of all, you need to create a database. This, of course, is specific to
    the database you use. Connect to MySQL and create a database if you don't have
    one already.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Then add a table that holds everything you need to SASL-authenticate users.
    It will look similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: The table has fields for username, userrealm, userpassword, and an additional
    field `auth` that we will use later to determine if a user may relay or not. This
    way we can use the table for other authentication purposes as well—for example,
    for granting access to specific folders over `httpd` in conjunction with the `mysql`
    module for Apache.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Don't forget to set a default value for the `userpassword`, as shown in the
    previous example, or all that would be required to get relay permissions would
    be sending a valid username.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you''ve created the table, add a user like this for testing purposes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Then add a user for Postfix to access the database to the user database of
    MySQL like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Once you''re done setting up MySQL, you need to add `sql auxprop-specific`
    parameters to your `smtpd.conf`. The following parameters are available:'
  prefs: []
  type: TYPE_NORMAL
- en: '`sql_engine:` Specifies the database type. You can pick `mysql, pgsql`, or
    `sqlite`. We use `mysql` in this example. If you choose a different database,
    you will need to change this value as appropriate.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sql_hostnames:` Specifies the database server name. You can specify one or
    more FQDNs or IP addresses separated by commas. Even if you pick `localhost`,
    the SQL engine tries to communicate over a socket.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sql_database:` Tells Cyrus SASL the name of the database to connect to.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sql_user:` The value you set here must match the name of the user that connects
    to the database.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sql_passwd:` The value you set here must match the password of the user that
    connects to the database. It must be a plaintext password.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sql_select:` The `sql_select` parameter defines the `SELECT` statement to
    authenticate a user.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sql_insert:` The `sql_insert` parameter defines an `INSERT` statement that
    would allow Cyrus SASL to create users in the SQL database. You would use the
    `saslpasswd2` program to do so.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sql_update:` The `sql_update` parameter defines the `UPDATE` statement that
    would allow Cyrus SASL to modify existing entries in your database. If you choose
    to configure this you will have to use it in combination with the `sql_insert`
    parameter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sql_usessl:` You can set either `yes, 1, on`, or `true` to enable SSL to access
    the MySQL over an encrypted connection. By default this option is `off.`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A straightforward configuration bringing all parameters together would look
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, macros have been used in the `sql_select` statement. Their
    meaning is:'
  prefs: []
  type: TYPE_NORMAL
- en: '`%u:` This macro is a placeholder for the username that is to be queried for
    during authentication.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`%p:` This macro is a placeholder for the password.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`%r:` The `r` stands for realm and whatever was given as realm by the client
    will be inserted at `%r.`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`%v:` This macro is only used in combination with the `sql_update` or `sql_insert`
    statement. It represents the submitted value that should replace an existing value.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Take special notice of the notations. Macros must be quoted using single quotation
    marks (').
  prefs: []
  type: TYPE_NORMAL
- en: That completes the configuration. If you are using `auxprop` and followed the
    instructions to this point, you are ready to start testing and can skip the next
    section on `authdaemond`.
  prefs: []
  type: TYPE_NORMAL
- en: authdaemond
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '`authdaemond` was created especially to work together with Courier IMAP. If
    you configure Cyrus SASL to use `authdaemond`, it will connect to Courier authlib''s
    `authdaemond` socket asking Courier authlib to verify the credentials of the mail
    client sent in. On one hand Cyrus SASL benefits from the various backends Courier
    authlib can turn to for user verification, but on the other hand Cyrus SASL''s
    `authdaemond` password verification service is limited to plaintext mechanisms,
    which doesn''t give you the mileage you get when you use `auxprop` plugins.'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the authdaemond password verification service is pretty straightforward.
    We will take a look at it in the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: Setting the authdaemond password verification service
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: Your first step is to configure Postfix to use the `authdaemond` password verification
    service. Just as with `saslauthd` or `auxprop`, you add the `pwcheck_method` parameter
    to your `smtpd.conf` and choose it to be `authdaemond.`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Due to the limitations of `authdaemond`, you must also limit the list of mechanisms
    to `PLAIN` and `LOGIN`—the only plaintext mechanisms available.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the authdaemond socket path
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: You need to tell Cyrus SASL where it can find the socket that has been created
    by Courier authlib's `authdaemond`.
  prefs: []
  type: TYPE_NORMAL
- en: Use the `authdaemond_path` parameter to provide the full path including the
    socket name.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: Finally check the permissions of the `authdaemond` directory and verify that
    at least the user `postfix` may access the directory. Once this is done you are
    ready to start testing.
  prefs: []
  type: TYPE_NORMAL
- en: Testing Cyrus SASL authentication
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are no testing utilities, but you can use the sample applications `sample-server`
    and `sample-client` to test authentication without any other application (example
    Postfix) interfering with the test. If you built Cyrus SASL from source, you can
    find them in the `sample` subdirectory of the Cyrus SASL sources. Fedora-based
    Linux distributions include the samples as part of the `cyrus-sasl-devel` package,
    so if available, you should install that package. Debian-based Linux distributions
    do not have a similar package, so you will now have to build them yourself.
  prefs: []
  type: TYPE_NORMAL
- en: 'To build just the samples, locate, download, and extract the release of Cyrus
    SASL that matches your installation from your package manager. To locate and install
    the source, follow the instructions as described in the *Cyrus SASL installation*
    section. Then instead of issuing the `make install` command, issue these commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'We will use these samples to test the Cyrus SASL configuration we''ve created
    in `smtpd.conf`. However, the programs don''t expect to find their configuration
    in `smtpd.conf`, but in `sample.conf`. We will simply create a symbolic link from
    `sample.conf` to `smtpd.conf` to meet the requirements:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Next we need to start the server application to have it listen for incoming
    connections. Start the server like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Do not be concerned about the message `bind: Address already in use`. The fact
    that the server has continued to run indicates that it has managed to listen on
    the specified port. The message is because the application is IPv6 enabled and
    the underlying system does not support IPv6.'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you receive an error such as `./server: No such file or directory`, check
    that you have installed the `cyrus-sasl-devel` package from your distribution,
    or that your build from source worked correctly and that you are in the correct
    directory.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The server will listen on port `8000` for incoming connections. Next open a
    new terminal and start the client using the same port and the mechanism `PLAIN`
    and point to `localhost` where your server utility should be listening. When prompted,
    enter `test, test`, and `testpass`, which are valid values provided by the test
    server. A successful authentication looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Testing Cyrus SASL authentication](img/8648_05_2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'You should be able to see some logging in the `auth` log. If you are going
    to use `saslauthd`, start it on a separate terminal in debug mode and you will
    be able to follow the authentication like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'saslauthd[4548] :get_accept_lock : acquired accept lock'
  prefs: []
  type: TYPE_NORMAL
- en: If you were able to authenticate successfully, proceed to configure `SMTP AUTH`
    in Postfix. If your authentication fails, follow the log and iterate through the
    instructions on how to set up and configure SASL as discussed earlier.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring Postfix SMTP AUTH
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Configuring `SMTP AUTH` in Postfix is pretty straightforward now that you have
    managed to set up and configure Cyrus SASL. The first thing you need to do is
    to check if Postfix was built to support SMTP authentication. Use the `ldd` utility
    to check if the Postfix `smtpd` daemon has been linked to `libsasl:`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: If you don't get any output, you will probably have to rebuild Postfix. Read
    the `SASL_README` from the Postfix `README_FILES` directory to get detailed information
    on what you must include in the `CCARGS` and `AUXLIBS` statements.
  prefs: []
  type: TYPE_NORMAL
- en: Preparing the configuration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Once you've verified that Postfix supports `SMTP AUTH`, you need to verify that
    the `smtpd` daemon does not run `chrooted` while you configure `SMTP AUTH`. Many
    people spend hours with a `chrooted` Postfix that cannot access the `saslauthd`
    socket before they realize that the reason is the `chroot` jail. A Postfix `smtpd`
    daemon that does not run `chrooted` has an `n` in the `chroot` column in `/etc/postfix/master.cf:`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: Reload Postfix if it was running `chrooted` after you changed the `chroot` settings
    for `smtpd` and turn to `main.cf`.
  prefs: []
  type: TYPE_NORMAL
- en: Enabling SMTP AUTH
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The first thing you will do is enable `SMTP AUTH` by adding the `smtpd_sasl_auth_enable`
    parameter and setting it to `yes:`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: This will make Postfix offer `SMTP AUTH` to clients that use `ESMTP`, but you
    still need to configure a few settings before you can start testing.
  prefs: []
  type: TYPE_NORMAL
- en: Setting the security policy
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You will have to decide which mechanisms Postfix should offer using the `smtpd_sasl_security_options`
    parameter. This parameter takes a list of one or more of the following values:'
  prefs: []
  type: TYPE_NORMAL
- en: '`noanonymous:` You should always set this value or Postfix will offer anonymous
    authentication to mail clients. Allowing anonymous authentication makes you an
    open relay and should not be used for SMTP servers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`noplaintext:` The `noplaintext` value will prevent Postfix from offering the
    plaintext mechanisms `PLAIN` and `LOGIN`. Usually you don''t want that because
    the most widespread clients support only `LOGIN`. If you set this option, we won''t
    be able to authenticate some clients.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`noactive:` This setting excludes SASL mechanisms that are susceptible to active
    (non-dictionary) attacks.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`nodictionary:` This keyword excludes all mechanisms that can be broken by
    means of a dictionary attack.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mutual_auth:` This form of authentication requires the server to authenticate
    itself to the client as well as the other way around. If you set it, only servers
    and clients capable of doing this form or authentication will be able to authenticate.
    This option is hardly ever used.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A common setting for the `smtpd_sasl_security_options` parameter adds the following
    line to `main.cf:`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: This prevents anonymous authentication and permits all others.
  prefs: []
  type: TYPE_NORMAL
- en: Including broken clients
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Next you have to decide if Postfix should offer `SMTP AUTH` to broken clients.
    Broken clients, in the context of `SMTP AUTH`, are clients that will not recognize
    a server''s SMTP AUTH capability if authentication has been offered the way RFC
    2222 requires. Instead they adhere to a draft of the RFC that had an additional
    `=` in the line that shows `SMTP AUTH` capability during SMTP communication. Among
    the clients that are broken are several versions of Microsoft Outlook Express
    and Microsoft Outlook. To get around this problem, just add the `broken_sasl_auth_clients`
    parameter to `main.cf` like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: Postfix will print an additional `AUTH` line when it lists its capabilities
    to the mail client. This line will have the extra `=` in it and the broken clients
    will notice the `SMTP AUTH` capability.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, if you want to limit the users that may relay to a group with the
    same realm, add the `smtpd_sasl_local_domain` parameter and provide the realm
    as value like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: Postfix will append the value to all usernames that get sent by mail clients
    successfully limiting relaying to those users whose username contains the `smtpd_sasl_local_domain`
    value in their username.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you''re done with all the configuration steps, reload Postfix to let the
    settings become active and start testing. As root, issue the command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: Testing SMTP AUTH
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you test SMTP authentication, don't use a regular mail client as the mail
    client may introduce some problems. Instead use the Telnet client program and
    connect to Postfix in an SMTP communication. You will need to send the username
    and password of your test user in a Base64-encoded form so the first step will
    be to create such a string. Use the following command to create a Base64 encoded
    string for the user `test` using the password `testpass:`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that the `\0` separates the username from the password, and the username
    will have to be repeated twice. This is because SASL expects two, possibly different
    usernames (`userid, authid`) to support additional functionality that isn't used
    for SMTP authentication.
  prefs: []
  type: TYPE_NORMAL
- en: Also keep in mind that if your username or password contains the `@` or `$`
    characters you will need to escape them with a prepended `\`, or Perl will interpret
    them and this will result in a non-functional Base64 encoded string.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have the Base64 encoded string at hand, use the Telnet program to
    connect to port `25` on your server like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: You can see that in the previous example the authentication was successful.
    First the mail client sent an `EHLO` during the introduction and Postfix responded
    with a list of capabilities. If you set the `broken_sasl_auth_clients` parameter
    to `yes` as we did in our example, you will also have noted the additional `AUTH`
    line containing the `=`.
  prefs: []
  type: TYPE_NORMAL
- en: Authentication took place when the client sent the `AUTH` string along with
    the mechanism it wanted to use and, in the case of plain mechanism, appended the
    Base64 encoded string. If your authentication did not succeed, but you were able
    to authenticate during the SASL testing, take a look at the parameters in `main.cf`
    and double-check the `chroot` status of `smtpd` in `master.cf`.
  prefs: []
  type: TYPE_NORMAL
- en: Enabling relaying for authenticated clients
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If authentication has been successful, we just have to tell Postfix to allow
    relaying of messages for those who have been authenticated. This is done by editing
    `main.cf` and adding the `permit_sasl_authenticated` option to your list of restrictions
    in `smtpd_recipient_restrictions` like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: Reload Postfix and start testing with a real mail client. If possible, ensure
    that its IP address is not part of `mynetworks`, as Postfix might be allowed to
    relay for that reason and not because `SMTP AUTH` worked out. You might want to
    limit relaying to the server only during the test. Change the `mynetwork_classes
    = host` setting so that clients from other machines automatically will not be
    a part of the Postfix network.
  prefs: []
  type: TYPE_NORMAL
- en: If you still experience problems with `SMTP AUTH`, take a look at `saslfinger`
    ([http://postfix.state-of-mind.de/patrick.koetter/saslfinger/](http://postfix.state-of-mind.de/patrick.koetter/saslfinger/)).
    It's a script that gathers all kinds of useful information about `SMTP AUTH` configuration
    and gives you output that you can append to your mail when you ask on the Postfix
    mailing list.
  prefs: []
  type: TYPE_NORMAL
- en: Securing plaintext mechanisms
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We already noted that `SMTP AUTH` using plaintext mechanisms isn't really safe
    because the string that is sent during authentication is merely encoded and not
    encrypted. This is where **Transport Layer Security** (**TLS**) comes in handy
    because it can shield the transmission of the encoded string from curious eyes.
  prefs: []
  type: TYPE_NORMAL
- en: Enabling Transport Layer Security
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To enable TLS you must generate a key pair and a certificate, and then alter
    the postfix configuration to recognize them.
  prefs: []
  type: TYPE_NORMAL
- en: To generate an SSL certificate, and to use SSL, you need to have the OpenSSL
    package installed. This will be installed in many cases, otherwise use your distribution's
    package manager to install it.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create a certificate, issue the following commands (as root):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Enabling Transport Layer SecuritySASL layerplaintext mechanism](img/8648_05_3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This will create certificates in `/etc/postfix/certs` called `smtpd.key` and
    `smtpd.crt`. Add the `smtpd_use_tls` parameter to `main.cf` and set it to `yes:`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'Then you will need to tell `smtpd` where it can find the key and the certificate
    by adding the `smtpd_tls_key_file` and `smtpd_tls_cert_file` parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'A mail server that sends a certificate to prove its identity must also keep
    a copy of the certification authority''s public certificate on hand. Presuming
    that you''ve already added it to your server''s local CA root store in `/usr/share/ssl/certs`,
    use the following parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'If the CA certificates aren''t all in one file, but in separate files in the
    same directory, for example `/usr/share/ssl/certs`, use the following parameter
    instead:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: Once you have all this configured, you're done with the basic TLS configuration
    and you can take care of securing plaintext authentication.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring security policy
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are several ways you can secure plaintext authentication using TLS. The
    most radical approach is to use `smtpd_tls_auth_only` parameter and set it to
    `yes`. If you use it, `SMTP AUTH` will be announced only once the mail client
    and mail server have established an encrypted communication layer. By doing this,
    all username/password combinations will be encrypted and not vulnerable to eavesdropping.
  prefs: []
  type: TYPE_NORMAL
- en: However, this punishes all the other mail clients that are capable of using
    other safer mechanisms such as shared secret mechanisms. If you want to handle
    this a little more selectively you should go for the following approach that disables
    plaintext authentication over an unencrypted wire, but permits it as soon as an
    encrypted communication has been established.
  prefs: []
  type: TYPE_NORMAL
- en: 'First of all you need to reconfigure your `smtpd_sasl_security_options` parameter
    to exclude plaintext mechanisms from being offered to mail clients:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'Then you set the additional `smtpd_sasl_tls_security_options` parameter that
    controls the same settings, but applies to TLS sessions only:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, the `smtpd_sasl_tls_security_options` parameter will not exclude
    plaintext mechanisms. This way clients that can use other non-plaintext mechanisms
    don't have to go for TLS and those that can only do plaintext mechanisms can do
    it safely once they have established an encrypted session.
  prefs: []
  type: TYPE_NORMAL
- en: Once you've reloaded Postfix, you are ready to test.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Don't forget to add the certificate of the certification authority that signed
    your server's certificate request to your mail client's CA root store, or it will
    at the very minimum complain that it cannot verify the server's identity when
    it presents its server certificate.
  prefs: []
  type: TYPE_NORMAL
- en: Dictionary attacks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Dictionary attacks are attacks where clients try to send mail to countless
    potential recipients, whose e-mail addresses are derived from words or names in
    a dictionary:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: If your server doesn't have a list of valid recipient addresses, it must accept
    these mails regardless whether the recipient actually exists. Then, this onslaught
    of e-mails needs to be processed as usual (virus check, spam check, local delivery)
    until, at some stage, the system realizes that the recipient does not even exist!
  prefs: []
  type: TYPE_NORMAL
- en: Then a non-delivery report will be generated and sent back to the sender.
  prefs: []
  type: TYPE_NORMAL
- en: So, for every non-existing recipient, one mail is being accepted and processed,
    and additionally another e-mail (the bounce) is generated, and is subject to delivery
    attempts.
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, this course of action wastes precious resources on your servers.
    Because the server is busy trying to deliver mail that it should never have accepted
    in the first place, legitimate mail is falling behind in the flood of spam. Spammers
    can also use the bounce messages to determine legitimate e-mail addresses for
    further attacks. Bounce messages can also give a hint at which SMTP server is
    used, allowing them to target any known vulnerabilities in particular versions.
  prefs: []
  type: TYPE_NORMAL
- en: Recipient maps
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Postfix is able to verify recipient addresses before it accepts a message. It
    can run checks for local domains (listed in `mydestination)` and for relay domains
    (listed in `relay_domains`).
  prefs: []
  type: TYPE_NORMAL
- en: Checking local domain recipients
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `local_recipient_maps` parameter controls which recipients Postfix will
    hold to be valid local recipients. It defaults to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: With this setting, Postfix will check the local `/etc/passwd` file for recipient
    names as well as any map that has been assigned to the `alias_maps` parameter
    in `main.cf`. Adding virtual users is beyond the scope of this book, but if you
    needed to expand this list, you would create a database with the users and add
    the path to the map that holds additional local recipients.
  prefs: []
  type: TYPE_NORMAL
- en: Checking relay domain recipients
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `relay_recipient_maps` parameter controls which recipients are valid for
    relay domains. It is empty by default, and in order to have Postfix get more control,
    you need to build a map where Postfix can look up valid recipients.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s say your server relays mail to and from `example.com`, then you would
    create the following configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'The `relay_domain` parameter tells Postfix to relay mail for recipients in
    the `example.com` domain and the `relay_recipient_maps` parameter points to a
    map that holds valid recipients. In the map you would create a list like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: 'Then run the `postmap` command to create an indexed map like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'To get postfix to recognize the new database, reload it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: This will allow only `adam@example.com` and `eve@example.com` as recipients
    for the domain `example.com`. Mail to `snake@example.com` would be rejected with
    a **User unknown in relay recipient table** error message.
  prefs: []
  type: TYPE_NORMAL
- en: Rate-limiting connections
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Rejecting mail for non-existing recipients helps a lot, but when your server
    is subject to a dictionary attack, it will still accept all the client's connections
    and produce an appropriate error message (or accept the mail, should a valid recipient
    address have been hit by chance).
  prefs: []
  type: TYPE_NORMAL
- en: 'Postfix''s anvil server maintains short-term statistics to defend your system
    against clients that hammer your server with either of the following cases within
    a configurable period of time:'
  prefs: []
  type: TYPE_NORMAL
- en: Too many simultaneous sessions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Too many successive requests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As the hardware and the software you use limit the number of mails your server
    is able to process per given time unit, it makes sense not to accept more mail
    than your server can handle.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: 'The previous line specifies the time interval used for all the following limits:'
  prefs: []
  type: TYPE_NORMAL
- en: '`smtpd_client_connection_rate_limit = 40:` This specifies the number of connections
    a client can make during the period specified by `anvil_rate_time_unit`. In this
    case, it''s 40 connections per 60s.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`smtpd_client_connection_count_limit = 16:` This gives the maximum number of
    simultaneous connections any client is allowed to make to this service per `anvil_rate_time_unit`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`smtpd_client_message_rate_limit = 100:` This is an important limit, as a client
    could reuse an established connection and send many mails using just this single
    connection.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`smtpd_client_recipient_rate_limit = 32:` This gives the maximum number of
    recipient addresses that any client is allowed to send to this service per `anvil_rate_time_unit`
    regardless of whether or not Postfix actually accepts those recipients.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`smtpd_client_event_limit_exceptions = $mynetworks:` This can be used to exempt
    certain networks or machines from the rate limiting. You may want to exempt your
    mailing list server from the rate limiting, as it will undoubtedly send lots of
    mails to many recipients during a short period.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `anvil` will emit detailed log data about the maximum connection rate (here:
    `5/60s)` and which client reached that maximum rate (`212.227.51.110`) and when
    ( `Dec28 13:19:23)`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: 'This second log entry shows which client established the most concurrent connections
    and when:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: 'If any limit is being exceeded, `anvil` will log this as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: Any client that exceeds these limits will be given a temporary error code, thus
    signaling it to retry at a later time. Legitimate clients will honor that and
    retry. Open proxies and trojaned machines will most likely not retry.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we discussed how to secure your installation. There were several
    different topics covered, firstly, the configuration of Postfix to only accept
    e-mail from certain IP addresses, which is useful if all your users are office
    based. Next, the chapter covered using SASL to authenticate users who might connect
    from any IP address. Then, we looked at using TLS to encrypt the authentication
    between client and server. Finally, we looked at limiting clients which behave
    badly, using the `anvil` daemon to limit clients that connect too often within
    a certain time period, and clients that open too many connections at one time.
  prefs: []
  type: TYPE_NORMAL
- en: The measures shown in this chapter will make your life as a postmaster easier,
    and also help to limit the amount of spam that your users endure, and if you had
    inadvertently configured an open relay, limit the amount of spam passed on to
    other Internet users too. For more details on limiting spam, move on to Chapter
    8 that describes using the open source spam filtering tool SpamAssassin. Or read
    on to Chapter 6 that covers using Procmail to manipulate e-mail messages as they
    arrive.
  prefs: []
  type: TYPE_NORMAL
