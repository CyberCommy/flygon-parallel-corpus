- en: Chapter 6. Optimizing Responsive Content
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, you will learn about:'
  prefs: []
  type: TYPE_NORMAL
- en: Responsive testing using IE's Developer Tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Browser testing – using plugins
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Development environments – getting a free IDE
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Virtualization – downloading VirtualBox
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting a browser resizer for Chrome
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The recipes in this chapter cover a broad range of topics. There is no code
    covered in this chapter, but the recipes fall under a more functional umbrella.
    This chapter talks more about the tools you will use to develop and test code.
    Here we will make sure that our code works the way we want it to. While this topic
    may seem uninteresting, it is as important as honing your skills in design and
    development. No amount of confident boasting makes a frontend developer immune
    to errors, and there are simply too many things that can go wrong as a project
    grows. Please go through these recipes and try out the tools, they will make your
    work easier and less prone to errors down the line.
  prefs: []
  type: TYPE_NORMAL
- en: Responsive testing using IE's Developer Tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Having a responsive design also includes having an optimized design for all
    of the prolific browsers, which is without equivocation, the least exciting aspect
    of Responsive Design. There is no way to sugarcoat this, many features of HTML5
    and CSS3 are not supported even in the future versions of Internet Explorer, and
    those that are supported can sometimes be rendered incorrectly. To add more madness,
    Versions 7, 8, and 9 all behave differently, and there are countless users who
    just cannot or will not update their browsers. There's also the problem of a number
    of companies having invested in web software that only runs on older versions
    of Internet Explorer. This lack of updating has been solved by other browsers
    such as Chrome and Firefox; the Internet Explorer team really needs to catch up.
    However, because you want your work to always look good no matter what browser
    it's in, the responsibility is yours to make it work for every browser.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Talk to your clients and fellow designers on the project about what levels of
    support you want to provide for Internet Explorer users. There are a few strategies
    possible for supporting the older versions of Internet Explorer. Talk about how
    much additional work each will require to support older versions of Internet Explorer,
    how much it should cost, and who should pay for it. The last thing you want is
    to launch your clients' brand new web project and them starting to complain that
    it looks broken in their favorite, degraded old browser.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first question to ask is: what can you do with Internet Explorer F12 Developer
    Tools? The answer is, you can use it to debug the rather wonkish way in which
    Internet Explorer is displaying your code, and to toggle between the different
    versions of Internet Explorer to see how your site looks in each.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you don't use a Windows computer, you won't be able to natively get a hold
    of Internet Explorer F12 Developer Tools. That doesn't mean that you simply forget
    about testing for IE and hope what you do works. There are legions of web pages
    and plugins that promise to accurately emulate the quirks of IE's multitude of
    versions. I have tried many and found that there was not one that actually stood
    up to testing against the original IE Developer Tools. So after much trial and
    failure, I found that the only dependable way to test for IE, without having to
    go and buy several computers just for testing, was to use virtualization. I have
    a few instances of Windows on virtual machines, with different versions of Internet
    Explorer installed. I have found that it's the only way to be sure. If you want
    to learn how to get started with virtualization, see the *Virtualization – Downloading
    VirtualBox* recipe in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'So once we have started up our Windows machine and updated to the latest version
    of Internet Explorer, let us see what the F12 Developer Tools can do for us. Either
    press *F12* on your keyboard or click on the gear icon on the toolbar at the top-right
    corner of the screen to display the F12 Developer Tools. This is demonstrated
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/5442OT_06_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The first useful thing you can do here is click on the pointer icon and move
    your mouse over the browser window to the element that is misbehaving. While the
    mouse is traveling, you will see that the element your mouse is moving over gets
    a white border around it. Once you see the white border around the element you
    want to inspect, click on it; the HTML pane will then bring that line of HTML
    code into focus in the left-hand side window, and its CSS on the right. In the
    CSS pane, you can edit the tree of CSS attributes for each element.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to add a CSS attribute, click on the **Attributes** button. By scrolling
    down to the bottom of the page, you can add a new name and value pair for the
    attributes. You can use these two tools to test out different CSS attribute variations
    or debug some strange IE behavior.
  prefs: []
  type: TYPE_NORMAL
- en: 'The other useful tool is the **Browser Mode** select menu. You can use this
    tool to toggle between the different browser versions. This is a good tool to
    do on-the-fly checking of your work. Here, you can also test out your IE-specific
    stylesheets. You can see this in following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/5442OT_06_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: According to MSDN, the F12 Developer Tools represents the actual way in which
    the Document Object Model (DOM) interprets the page, and not the code you actually
    wrote.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: An additional pitfall you may fall into occurs when you are designing a site
    that may be accessed as internal software or on the same domain as the intranet.
    Internet Explorer will use Internet Explorer 7 Compatibility View as the default
    rendering view.
  prefs: []
  type: TYPE_NORMAL
- en: Compatibility mode was a feature added in IE 8 so that websites that were developed
    for the older standards could still work in the new browsers. Often, people's
    browsers are set to render intranet sites in compatibility mode. To make a site
    that is built for IE 7 work in the most recent Internet Explorer, you would have
    to set this `<meta>` tag to render it at the desired rendering version. To force
    the browser to always render this using the most recent rendering engine, you'll
    need to specify the following `<meta>` tag to prevent this.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Browser testing – using plugins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Testing is a big deal in any and all development processes. For some, the idea
    of testing is incorrectly perceived as a sign of poor workmanship or criticality
    of their work. This idea could not be more wrong. On the contrary, rigorous and
    thorough testing is the only way to ensure that your software approaches a state
    of perfection. I consider myself very fortunate to work with QA testers whose
    role is to test the work of the development team. Having had to do all of my own
    testing (in a previous life), I can say that this is a luxury.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will discuss a specific area of testing, cross-browser testing.
    Not too long ago, this was less complicated, and more challenging at the same
    time. The idea of testing a web project for mobile devices was not very common;
    it was simply not expected to look remotely similar, or even display the same
    content. Therefore the number of devices you needed to test for were usually limited
    to what you could spin up in a virtual environment, and they were all desktop
    devices. The tools were also limited, and were often only virtual desktops with
    older browser versions. Remember those stubborn people who refused to move beyond
    IE6?
  prefs: []
  type: TYPE_NORMAL
- en: One approach to browser testing is to simply get your credit card out and buy
    every device you think it would be plausible for your software to be viewed on.
    I have never actually met anyone who has done this, but I think one or two of
    the fairy tales I read to my children spoke of this sort of phenomenon happening.
    This is not a practical solution for people who work for money. This has resulted
    in a market of paid and free cross-browser testing tools popping up on the Internet.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you were starting to think that this is going to be an expensive recipe,
    calm down. There will be no need to go out and buy every new mobile device on
    the market. There are plenty of emulators that will cover most of your bases.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: I have scoured the Internet and built a list of free tools for you to use for
    testing. Go through the list with me and check them out. Open one of your previous
    responsive web design (RWD) recipe project files in a browser tab to continue.
    For each of the simulators, you will have to open the file by entering it into
    the simulated browser's address bar. If you have not done any of these or simply
    do not have the files handy, go to the Packt website and download them. On to
    the simulators.
  prefs: []
  type: TYPE_NORMAL
- en: 'First let''s look at online browser simulators. Go to [http://theleggett.com/tools/webapptester](http://theleggett.com/tools/webapptester).
    Here you can test you RWD site on a web simulation of iOS devices. It can read
    your localhost files. You can toggle between the portrait and landscape modes
    and choose iPhone versus iPad. It''s simple enough and you don''t need to install
    any complicated applications or plugins. This is good if you need something in
    a pinch, want to test fast, and don''t want to install anything. You can see the
    simulator in action in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/5442OT_06_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'There is another handy web-based iOS simulator at [http://ipadpeek.com](http://ipadpeek.com).
    You can get the portrait versus landscape and iPad versus iPhone (including iPhone
    5) options here as well. This one too can view your localhost server. I keep mentioning
    this because there are too many web-based emulators that did not make it to this
    list for that reason, including some commercial emulators. The next screenshot
    displays this web-based emulator:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/5442OT_06_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Next let's look at some application-based browser testing tools.
  prefs: []
  type: TYPE_NORMAL
- en: The Ripple browser plugin is an excellent testing tool. It can be downloaded
    at [https://chrome.google.com/webstore/detail/ripple-emulator-beta](https://chrome.google.com/webstore/detail/ripple-emulator-beta).
    This emulator blows the others out of the water. First, it does the same job as
    the others (that is, emulating the iOS devices), but it does it well. This one
    does so much more than what you need, but it will do everything you need for testing
    for the future mobile integration of your web apps. Let us get started by finding
    and installing the Ripple browser plugin. That's an easy task. Just go search
    for it. Remember when things used to be hard?
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you get to the Google Chrome Web Store, click on the big blue button and
    install the browser plugin. See the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/5442OT_06_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once it is installed, you will see a new browser button with blue ripples appearing
    next to the address bar of your Chrome browser. In your browser, go to your responsive
    web app. Next, click on the **Ripple plugin** button, and then click on **Enable**
    when a menu pops up asking whether you want to enable the Ripple plugin. The contents
    of the browser window transform to display an emulation of the device, which displays
    the mobile version of your page. In addition, you will notice a number of toolbars
    full of amazing settings and tools. Let''s explore some of these. Most of them
    are beyond the scope of what we are doing, but you should still take note of these.
    These come in handy as you develop more advanced mobile web apps. You can see
    the numerous settings for Ripple in the next screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/5442OT_06_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: First, click on the menu at the top-left corner of the screen to reveal a number
    of different mobile devices. Under that, you can select either the landscape or
    portrait orientation. As you go through the different simulated devices, you will
    see that there is an information panel that gets updated with the technical specs
    of the current simulated device. When you are done testing, simply click on the
    Ripple button again and select the **Disable** option.
  prefs: []
  type: TYPE_NORMAL
- en: There are a number of other awesome tools in this simulator that are outside
    the scope of this book. Spend some more time on your own to discover useful tools
    to use for future mobile web app projects. Now let's move on to the next browser
    testing tool.
  prefs: []
  type: TYPE_NORMAL
- en: The Opera Mobile Emulator is located at [http://www.opera.com/developer/tools/mobile](http://www.opera.com/developer/tools/mobile).
    When I first saw this, I nearly skipped it, because it's Opera. Even though it's
    a serious browser project, I had gotten used to ignoring it for testing. It really
    is a respectable browser for mobile devices. I'm happy that I tried it out anyway.
    I was surprised to find that it has a number of options, and you really could
    use it to simulate a number of devices. It turns out to be a good mobile device
    browser testing tool to test a project on multiple Android devices. That's an
    important statement; note that I said Android devices, it means that it only tests
    those devices. It does, however, allow you to create and save custom screen sizes
    and settings. Let's jump straight to installing it and setting some custom screen
    sizes.
  prefs: []
  type: TYPE_NORMAL
- en: To find it, use your favorite search engine and type in `Opera Mobile Emulator`.
    This should lead you to a page to download the Opera Mobile Emulator specific
    to your operating system ([http://www.opera.com/developer/tools/mobile/](http://www.opera.com/developer/tools/mobile/)).
    Once you have downloaded and installed it, launch the application.
  prefs: []
  type: TYPE_NORMAL
- en: 'When the application loads, you can see that there are a number of defined
    devices you can choose from on the left-hand side of the screen. Select any one
    of those devices and then click on the **Launch** button. See the following screenshot
    for demonstration:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/5442OT_06_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We can also create custom device profiles and save them. Since there are no
    iPhone device settings, we will setup a custom screen for the iPhone. Select **Custom**
    from the **Profile** list. Next, in the **Resolution** drop-down menu, select
    a resolution of 320 x 480\. Then under the **Pixel Density** drop-down menu, click
    on **Add**, and add `326`. Now click on **Launch**. You can also click on the
    **Save** or **Save As...** buttons to save your profile. The dimensions for iPhone
    4 are 640 x 960, and 640 x 1136 for iPhone 5\. This is displayed in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/5442OT_06_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: One important feature of the Opera Mobile browser for your desktop is that you
    can use it to debug your code! To use this tool, download and install Opera for
    desktop devices; go to [www.opera.com](http://www.opera.com). Next, open it and
    then under **Menu**, go to **Tools** | **Advanced** | **Opera Dragonfly**. In
    Opera Dragonfly, in the right-hand side window, find and click on the **Remote
    debug configuration** button, and then click on **Apply**. Then in your mobile
    browser emulator, in the address bar, enter `opera:debug` and click on **Connect**.
    Now you can debug your mobile code.
  prefs: []
  type: TYPE_NORMAL
- en: Development environments – getting a free IDE
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Throughout this book, I've often referred to developing code in an IDE, or integrated
    development environment. The IDE is the toolset of the developer to create and
    manage code. There are many out there, free and paid, which you can use to help
    produce good code. Which IDE should you choose? That depends on a number of factors.
    Cost would be an important factor; Visual Studio can cost hundreds of dollars,
    and even more for additional auto-suggest plugins. The expensive IDEs are great
    as long as someone else is paying for them!
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, let us take the easier, cheaper route and install a good, free
    IDE. I spent some years working as a scientist, and because nine out of ten scientists
    prefer NetBeans, you might hypothesize that I use NetBeans. I can tell you that
    your hypothesis is empirically correct with a 90 percent probability.
  prefs: []
  type: TYPE_NORMAL
- en: You might think that an enhanced notepad is a sufficient tool to build your
    applications. This may be the truth; your notepad is sufficient to write some
    code. But using a development environment brings much more than just a big program
    to write your code in. There are features such as enhanced project organization,
    autosuggest, and community-developed plugins for nearly every type of project
    or special function imaginable.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To get NetBeans, you can go straight to the NetBeans site at [www.netbeans.org](http://www.netbeans.org)
    and click on the big orange **Download** button. The next page has a grid of options
    for the NetBeans download; you can either select the PHP option, or the "All"
    option to get the IDE package you need for frontend development. But before you
    download anything, there is another piece to the puzzle. NetBeans runs on Java,
    and both OSX and Windows do not come with Java preloaded. See the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it…](img/5442OT_06_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: If you already have Java Development Kit installed, continue with the download
    and install process. If not, go to the Java JDK site instead at [http://www.oracle.com/technetwork/java/javase/downloads/index.html](http://www.oracle.com/technetwork/java/javase/downloads/index.html)
    (if that URL does not work, just search for Java JDK, and then click on the **Downloads**
    link). Here you can download a package of the latest stable NetBeans release with
    JDK. It's a large file, so start the download and go get some coffee.
  prefs: []
  type: TYPE_NORMAL
- en: Expand the downloaded package; the install process will take care of the installation
    of the IDE and JDK.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, open NetBeans. You should see the file and project browser on the left-hand
    side pane of the IDE. If not, and you are unable to open any of your projects,
    then it does not have the Web Development plugins activated. Open the **Tools**
    menu and select **Plugins**. In **Available Plugins**, find the PHP plugin and
    activate it. Your IDE will ask to restart. After restarting, you will see the
    **Projects** and **File** panes on the left-hand side in the IDE. This is displayed
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it…](img/5442OT_06_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The NetBeans Integrated Development Environment is built in Java and therefore
    needs JDK to run. It comes as a base IDE; you download and install the plugins
    you need for your specific project. Additionally, because it is open source, people
    can develop more cool and useful plugins. There are testing, autosuggest, language,
    and other plugins continuously being developed. So try to be brave and experiment
    with some to see whether they enhance your development work.
  prefs: []
  type: TYPE_NORMAL
- en: Virtualization – downloading VirtualBox
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Virtualization is one of the keystone tools in the developer's toolbox. It is
    used in a number of different phases of the development process. Our focus for
    this recipe will be on testing. But first, I want to mention how it can be used
    further upstream in the process. Setting up virtual machines allows you to use
    your preferred operating system and toolset in a shop that only provides and supports
    different ones. For example, if you need to be able to use Visual Studio but don't
    want to use Windows, you can spin up a virtual machine and develop applications
    on it. You can also use a LAMP stack on a virtual machine and spin it up.
  prefs: []
  type: TYPE_NORMAL
- en: Virtualization is a resource-intensive computing task. It won't take much to
    bog down your system when you are running a virtual machine with an IDE, a web
    server, and a remote desktop viewer, and it might just drag your system down to
    a screeching halt. So my advice is to load up on memory before you try to load
    up multiple VMs.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before we go on to the simple task of spinning up a new VM, let us explore some
    of the rationale behind what we are about to embark on. The first reason is, Internet
    Explorer. Do I need to say anything else? I will anyway, for the uninitiated.
    There is an earth-shattering collective groan whenever a designer has to make
    his beautiful modern website terrible for it to work in any version of Internet
    Explorer. It isn't enough that it looks good in IE9; we will also be required
    to make it look presentable in IE8.
  prefs: []
  type: TYPE_NORMAL
- en: Why is this the reality of web development? Because people are slow when it
    comes to upgrading; businesses are even worse in this matter. To get a picture
    of the ratio of your site's visitors that are using deprecated browsers, install
    Google Analytics and monitor the types of browsers used to visit your page. You
    might be horrified to find that 20 percent of your traffic is using Internet Explorer
    7, and you need to market to them. You cannot run IE7 along with IE9 on the same
    computer. So the solution is starting to visualize its problem.
  prefs: []
  type: TYPE_NORMAL
- en: To be able to test your site to make sure it's optimized, or at least, degrades
    well for every old version of Internet Explorer, or is responsive for mobile devices,
    you can employ virtualization. Spin up a new virtual machine for each different
    browser version that you need to test for. For the rest of this recipe, we will
    go through the process of creating new virtual machines.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: VirtualBox is a free software made available by Oracle. There are other virtualization
    software out there, such as VMware, which are not free. To download VirtualBox,
    go to [www.VirtualBox.org](http://www.VirtualBox.org) and download it from the
    **Downloads** page.
  prefs: []
  type: TYPE_NORMAL
- en: Once downloaded, the install process is as straightforward as anything else.
    In OS X, unpack it and drag it into the `Applications` folder. In Windows, it
    gives different options. I would not try anything tricky at this point; it will
    work great with the default options. Both versions will set up directories for
    the virtual machines in your profile's home directory.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, you will need the operating system install disk or disk image (ISO) for
    the guest operating system you want installed on the virtual machine. When you
    are ready and have your OS installation software ready at hand, click on the **New**
    button at the top-left corner of **Oracle VM VirtualBox Manager**. This will start
    up a wizard called **New Virtual Machine Wizard**. See the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/5442OT_06_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You will be asked to enter a name and OS type on the next screen. Next, select
    the memory to allocate for the VM. The recommended base memory size is 192 MB.
    The next screen asks you to either create a new disk or use an existing disk.
    When installing a new OS from a disk or image, you will want to select **Create
    new hard disk**. On the next screen, use the already selected default, **VDI**
    (VirtualBox Disk Image), and then select **Dynamically Allocated**.
  prefs: []
  type: TYPE_NORMAL
- en: You will then be asked to name the folder that holds the virtual image, and
    also the size of the virtual disk; the default is 10 GB. The summary pages follow,
    where you can review your choices before you proceed. Thus far, we have only created
    the virtual machine, the equivalent of turning on a new computer with no operating
    system.
  prefs: []
  type: TYPE_NORMAL
- en: To finish what we have started, we need to start up your new virtual machine
    and install Windows on it. Select your new virtual machine and start it to initiate
    the **First Run Wizard**. It will prompt you for the installation media; here
    you select your disk or image ISO. Select your installation media, continue to
    the **Summary** page, and then on to the OS installation process. This goes pretty
    fast since it is a virtual drive. I'll skip the ins and outs of installing your
    Windows Desktop Operating System software; there are no secret best practices
    here, just click through the defaults and keep going.
  prefs: []
  type: TYPE_NORMAL
- en: 'While I was writing that paragraph, my VM finished installing the OS. I told
    you it was fast. Once it starts up, you can use the default browser version or
    get an updated version. This depends on the needs of your project. I recommend
    having a separate VM for IE9, IE8, and even IE7\. Once you get it running, you
    should have a good, clean, working version of Windows XP. See the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/5442OT_06_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now that the virtual machine has its OS installed, fire up the browser and point
    it to the IP address of your host computer. If you have your local web server
    running, and have not monkeyed around with your VirtualBox network settings, you
    should see the files on your local web server.
  prefs: []
  type: TYPE_NORMAL
- en: You can use this to test your web design to make sure the desktop version works
    well for all of your desktop audience, even those using IE7.
  prefs: []
  type: TYPE_NORMAL
- en: You don't need to host multiple versions of Chrome or Firefox anymore, they
    have all started auto-updating. The old Firefox version is a thing of the past.
  prefs: []
  type: TYPE_NORMAL
- en: That covers testing for desktop. Before we move on to the next chapter, let
    us take a look at how we can use VirtualBox to test for mobile devices as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'There exist out there on the Internet, downloadable virtual machines that already
    have Android installed. I found a few downloadable resources at [http://www.android-x86.org/download](http://www.android-x86.org/download).
    By doing a search for `Android-v4.7z`, I found a good download link here: [http://www.vmlite.com/index.php?option=com_kunena&func=view&catid=9&id=8838](http://www.vmlite.com/index.php?option=com_kunena&func=view&catid=9&id=8838).
    It offers you a link to download it from [http://www.vmlite.com/vmlite/VMLite-Android-v4.0.4.7z](http://www.vmlite.com/vmlite/VMLite-Android-v4.0.4.7z).
    Download and extract the virtual image to your hard drive.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let us see what happens when we open up one of these Android images with VirtualBox.
    After you have downloaded an Android image, spin up a new virtual image. When
    asked to select the OS type, choose **Linux** from the list of operating systems
    in the drop-down list and choose **Other Linux** for **Version**. See the following
    screenshot for demonstration:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/5442OT_06_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: On the **Virtual Hard Disk** screen, select **Use existing hard disk**, and
    then in the select dialog box, browse to the folder you extracted to your drive.
    Inside it is a `*.vmdk` file. Select it to load it into your new virtual machine,
    and click on **Continue**.
  prefs: []
  type: TYPE_NORMAL
- en: 'Continue beyond the **Summary** page, and your Android emulator will spin up
    and be fully operational. Now you can test your apps on a true Android emulation
    as shown in the next screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/5442OT_06_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Virtual machines allow you to install an operating system on a generic type
    of emulated computer. You can copy, edit, and delete the virtual machine on the
    fly, and it allows you to jump between VMs easily. In these, you can do a number
    of things; take a snapshot, and if something goes wrong, just start over completely.
    It is a good practice to use VMs and not need to worry too much about getting
    your OS to run Apache.
  prefs: []
  type: TYPE_NORMAL
- en: Getting a browser resizer for Chrome
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Imagine yourself dragging your browser window's bottom corner left and right
    to resize it over and over again, watching for the points where your best visual
    estimation tells you it should be hitting the breakpoint of your media query and
    eloquently respond by showing a new optimized display of your website. The far
    from small problem that you have is you have no idea where your breakpoints will
    hit because you have no real clue of your current browser size, and no reliable
    way to set it to its desired size. Looks silly doesn't it? The co-worker sitting
    behind you thinks so too.
  prefs: []
  type: TYPE_NORMAL
- en: There has to be a better way. There is! Now you can stop your co-worker from
    laughing at your browser window antics.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are some websites out there in Internet-land that can resize your browsers
    to the most popular breakpoints. However, these are difficult to find and are
    not reliable. I have found that the best option is to install a good browser resizer
    plugin.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The best solution I have found is the Chrome Window Resizer plugin. To get it
    for Chrome, search for `Window Resizer` in your favorite search engine and click
    on the link to go to the plugin's page at the Chrome Web Store. Click on the big
    blue button that says **Add to Chrome**.
  prefs: []
  type: TYPE_NORMAL
- en: 'It''s a fairly brief and easy installation. Go through the process and say
    yes every time you are prompted. See the resizer in action in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/5442OT_06_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Once you are done, you will see the world's tiniest browser perched next to
    the address bar of the Chrome browser; no, just kidding, it's an icon. When you
    click on it, you will see a drop-down menu of different window sizes. These sizes
    were chosen as they are the most common size screens found in the wild of Internet-land.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you have an analytics tool such as Google Analytics installed in your web
    project, you can get a good picture of what your viewers are like. With respect
    to this recipe, you would want to look at the browser screen sizes. Navigate to
    the **Audience** tab and expand the **Technology** toggle element to expose the
    **Browser & OS** link. You will see the breakdown of your audience''s browsers.
    On that page, change the **Primary Dimension:** to **Screen Resolution**. Now
    you will be able to see the most common screen sizes of your site''s visitors.
    This tool should give you an insight into areas to concentrate on in your design.
    See the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/5442OT_06_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Analytics will provide some good intelligence about your user's screens, but
    remember that people often use only part of their screen for the browser window.
  prefs: []
  type: TYPE_NORMAL
- en: Back to the browser resizer plugin; try out some of the built-in sizes on your
    project and see how it responds. This tool will be a great testing tool in your
    Responsive Design toolbox.
  prefs: []
  type: TYPE_NORMAL
- en: 'In addition to the set sizes, you will see that the drop-down menu also has
    an **Edit resolutions** menu item. Here you can add any screen sizes that you
    discover on your analytics screen. Based on my analytics report, I might want
    to start by adding `1920 x 1080`, `960 x 1080`, `1772 x 1038`, and `886 x 1038`.
    I have demonstrated this option in the next screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/5442OT_06_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This highly useful tool plugs right into your browser to work its magic by emulating
    different screen resolutions. It's not really magic, even though good software
    can appear to be magical sometimes. With Analytics tools, you can design specific
    optimizations for your website viewer's screens.
  prefs: []
  type: TYPE_NORMAL
