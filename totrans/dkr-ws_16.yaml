- en: Appendix
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 1\. Running My First Docker Container
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Activity 1.01: Pulling and Running the PostgreSQL Container Image from Docker
    Hub'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Solution**:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To start the Postgres Docker container, first determine what environment variables
    are required to set the default username and password credentials for the database.
    Reading through the official Docker Hub page, you can see that you have configuration
    options for the `POSTGRES_USER` and `POSTGRES_PASSWORD` environment variables.
    Pass the environment variables using the `-e` flag. The final command to start
    our Postgres Docker container will be as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Running this command will start the container.
  prefs: []
  type: TYPE_NORMAL
- en: 'Execute the `docker ps` command to verify that it is running and healthy:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The command should return output like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: It can be seen from the preceding output that the container with the ID `29f115af8cdd`
    is up and running.
  prefs: []
  type: TYPE_NORMAL
- en: In this activity, you have successfully started a PostgreSQL version 12 container
    that is part of the Panoramic Trekking App, which will be built over the course
    of this book.
  prefs: []
  type: TYPE_NORMAL
- en: 'Activity 1.02: Accessing the Panoramic Trekking App Database'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Solution**:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Log in to the database instance using `docker exec` to start the PSQL shell
    inside the container, passing in the `--username` flag and leaving the `--password`
    flag empty:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This should prompt you for the password and start a PSQL shell.
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the `\l` command to list all the databases:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'A list of databases running in the container will be returned:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.4: List of databases'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B15021_01_04.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 1.4: List of databases'
  prefs: []
  type: TYPE_NORMAL
- en: Finally, use the `\q` shortcut to exit from the shell.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the `docker stop` and `docker rm` commands to stop and clean up the container
    instance.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In this activity, you accessed the database running in the container by logging
    in using the credentials that were set up in *Activity 1.01*, *Pulling and Running
    the PostgreSQL Container Image from Docker Hub*. You also listed the databases
    running in the container. The activity gave you hands-on experience of how to
    access the database running in any container using a PSQL shell.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Getting Started with Dockerfiles
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Activity 2.01: Running a PHP Application on a Docker Container'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Solution**:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new directory named `activity-02-01` for this activity:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Navigate to the newly created `activity-02-01` directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Within the `activity-02-01` directory, create a file named `welcome.php`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, open `welcome.php` using your favorite text editor:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Create the `welcome.php` file with the content provided at the beginning of
    the activity, and then save and exit from the `welcome.php` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Within the `activity-02-01` directory, create a file named `Dockerfile`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, open the `Dockerfile` using your favorite text editor:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following content to the `Dockerfile`, and then save and exit from
    the `Dockerfile`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: We are starting this `Dockerfile` using the `ubuntu` base image followed by
    setting a couple of labels. Next, the `DEBIAN_FRONTEND` environment variable is
    set to `noninteractive` to make the package installations non-interactive. Then,
    the `apache2`, `php`, and `curl` packages are installed, and PHP files are copied
    to the `/var/www/html` directory. Next, the health check is configured and port
    `80` is exposed. Finally, the `apache2ctl` command is used to start the Apache
    web server.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, build the Docker image:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'You should get the following output after running the `build` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.22: Building the activity-02-01 Docker image'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B15021_02_22.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 2.22: Building the activity-02-01 Docker image'
  prefs: []
  type: TYPE_NORMAL
- en: 'Execute the `docker container run` command to start a new container from the
    Docker image that you built in the previous step:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Since you are starting the Docker container in detached mode (with the `-d`
    flag), the preceding command will output the ID of the resulting Docker container.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, you should be able to view the Apache home page. Go to the `http://127.0.0.1/welcome.php`
    endpoint from your favorite web browser:![Figure 2.23: PHP application page'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B15021_02_23.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 2.23: PHP application page'
  prefs: []
  type: TYPE_NORMAL
- en: Note that the default Apache home page is visible. In the preceding output,
    you received the output as `Good Morning`. This output may differ, appearing as
    either `Good Afternoon` or `Good Evening` based on the time you run this container.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, clean up the container. First, stop the Docker container with the docker
    container stop command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, remove the Docker container with the `docker container rm` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: In this activity, we learned how to use the `Dockerfile` directives that we
    have learned so far in this chapter to dockerize a sample PHP application. We
    used multiple `Dockerfile` directives, including `FROM`, `LABEL`, `ENV`, `RUN`,
    `COPY`, `WORKDIR`, `HEALTHCHECK`, `EXPOSE`, and `ENTRYPOINT`.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Managing Your Docker Images
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Activity 3.01: Build Scripts Using Git Hash Versioning'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Solution**:'
  prefs: []
  type: TYPE_NORMAL
- en: 'There are a variety of ways you could complete this activity. Here is one example:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new build script. The first line, showing the set `–ex` command, prints
    each step to the screen and will fail the script if any of the steps fail. *Lines
    3* and *4* set the variables for your registry and service names:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'In *line 6*, set the `GIT_VERSION` variable to point to your short Git commit
    hash. The build script then prints this value to the screen in *line 7*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Use the `docker build` command in *line 9* to create your new image and add
    the `docker push` command in *line 11* to push the image to your local Docker registry:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'The script file will look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the following command to ensure that the script has been built and runs successfully:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'You should get output like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Activity 3.02: Configuring Your Local Docker Registry Storage'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Solution**:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following steps describe one of the ways of achieving the goal of the activity:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the `test_registry` directory in your home directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the local registry, but in this instance, include the `-v` option, which
    connects the directory you created in the preceding step to the container directory
    of `/var/lib/registry`. Also, use the `:rw` option to make sure you can both read
    and write to the directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, push the image to your newly mounted registry as you normally would:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: To verify that the images are now being stored in your newly mounted directory,
    list the files in the `registry/docker/registry/v2/repositories/` directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see the new images you have just pushed in the previous step:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: This activity has allowed us to start working with some more advanced Docker
    options. Don't worry, there will be further chapters dedicated to helping you
    understand volume mounts and storage when running your containers.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Multi-Stage Dockerfiles
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Activity 4.01: Deploying a Golang HTTP Server with a Multi-Stage Docker Build'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Solution**:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new directory named `activity-04-01` for this activity:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Navigate to the newly created `activity-04-01` directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Within the `activity-04-01` directory, create a file named `main.go`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, open the `main.go` file using your favorite text editor:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following content to the `main.go` file, and then save and exit this
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Within the `activity-04-01` directory, create a file named `Dockerfile`. This
    file will be the multi-stage `Dockerfile`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, open the `Dockerfile` using your favorite text editor:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following content to the `Dockerfile` and save the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: This `Dockerfile` has two stages, named `builder` and `runtime`. The builder
    stage uses the Golang Docker image as the parent and is responsible for creating
    the executable from the Golang source file. The runtime stage uses the `alpine`
    Docker image as the parent image and executes the executable file copied from
    the `builder` stage.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, build the Docker image with the `docker build` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'You should get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.14: Building the Docker image'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B15021_04_14.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 4.14: Building the Docker image'
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the `docker image` ls command to list all the Docker images available on
    your computer. Verify the size of the image:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'The command will return the list of all available Docker images:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.15: Listing all Docker images'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B15021_04_15.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 4.15: Listing all Docker images'
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding output, you can see that the size of the optimized Docker image
    named `activity-04-01` is 13.1 MB, while the parent image used at the builder
    stage (the Golang image) was 370 MB in size.
  prefs: []
  type: TYPE_NORMAL
- en: 'Execute the `docker container run` command to start a new container from the
    Docker image that you built in the previous step:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'You should get an output similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'View the application at the following URL in your favorite web browser:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'The following image shows the home page when we navigate to the URL `http://127.0.0.1:8080/`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.16: Golang application – Home Page'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B15021_04_16.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 4.16: Golang application – Home Page'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, browse to the following URL on your favorite web browser:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'The following image shows the contact page when we navigate to the URL `http://127.0.0.1:8080/contact`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.17: Golang application – Contact Us page'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B15021_04_17.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 4.17: Golang application – Contact Us page'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, enter the following URL in your favorite web browser:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'The following image shows the login page when we navigate to the URL `http://127.0.0.1:8080/login`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.18: Golang application – Login Page'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B15021_04_18.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 4.18: Golang application – Login Page'
  prefs: []
  type: TYPE_NORMAL
- en: In this activity, we learned how to deploy a Golang HTTP server that can return
    different responses based on the invoke URL. We used the multi-stage Docker builds
    in this activity to create a minimal-sized Docker image.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Composing Environments with Docker Compose
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Activity 5.01: Installing WordPress Using Docker Compose'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Solution**:'
  prefs: []
  type: TYPE_NORMAL
- en: 'It is possible to create a database and install WordPress with the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the required directory and navigate into it using `cd` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a `docker-compose.yaml` file with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'Start the application with the `docker-compose up --detach` command:![Figure
    5.22: Start of the application'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B15021_05_22.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 5.22: Start of the application'
  prefs: []
  type: TYPE_NORMAL
- en: 'Check for the running containers with the `docker-compose ps` command. You
    should get the following output:![Figure 5.23: WordPress and database containers'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B15021_05_23.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 5.23: WordPress and database containers'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `http://localhost:8080` in your browser to check the WordPress setup screen:![Figure
    5.24: WordPress setup screen'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B15021_05_24.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 5.24: WordPress setup screen'
  prefs: []
  type: TYPE_NORMAL
- en: In this activity, you have created a deployment for a real-life application
    using Docker Compose. The application consists of a database container and a WordPress
    container. Both container services are configured using environment variables,
    connected via Docker Compose networking and volumes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Activity 5.02: Installing the Panoramic Trekking App Using Docker Compose'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Solution**:'
  prefs: []
  type: TYPE_NORMAL
- en: 'It is possible to create the database and Panoramic Trekking App with the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the required directory and change into it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a `docker-compose.yaml` file with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'Start the application with the `docker-compose up --detach` command. You should
    get output similar to the following:![Figure 5.25: Start of the application'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B15021_05_25.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 5.25: Start of the application'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: You can also use `docker-compose up -d` command to start the application.
  prefs: []
  type: TYPE_NORMAL
- en: Check for the running containers with the `docker-compose ps` command. You should
    get output similar to the following:![Figure 5.26 Application, database, and nginx
    containers
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B15021_05_26.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.26 Application, database, and nginx containers
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the administration section of the Panoramic Trekking App in the browser
    with the address of `http://0.0.0.0:8000/admin`:![Figure 5.27: Admin setup logon'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B15021_05_27.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 5.27: Admin setup logon'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: You can also run `firefox http://0.0.0.0:8000/admin` command to open the administration
    section of the Panoramic Trekking App.
  prefs: []
  type: TYPE_NORMAL
- en: 'Log in with the username `admin` and password `changeme` and add new photos
    and countries. The following screen will appear:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.28: Admin setup view'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B15021_05_28.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 5.28: Admin setup view'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the Panoramic Trekking App at the address `http://0.0.0.0:8000/photo_viewer`
    in the browser:![Figure 5.29: Application view'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B15021_05_29.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 5.29: Application view'
  prefs: []
  type: TYPE_NORMAL
- en: In this activity, you have created a three-tier application using Docker Compose,
    with tiers for a PostgreSQL database, a backend, and a proxy service. All services
    are configured and connected using Docker Compose with its networking and storage capabilities.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Introduction to Docker Networking
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Activity 6.01: Leveraging Docker Network Drivers'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Solution**:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the most common way to complete this activity according to
    best practices:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the `docker network create` command to create a network for the NGINX web
    server. Call it `webservernet` and give it a subnet of `192.168.1.0/24` and a
    gateway of `192.168.1.1`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: This should create the `bridge` network, `webservernet`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the `docker run` command to create an NGINX web server. Use the `-p` flag
    to forward port `8080` on the host to port `80` on the container instance:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: This will start the `webserver1` container in the `webservernet` network.
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the `docker run` command to start an Alpine Linux container named `monitor`
    in `host` networking mode. This way, you will know that the container has access
    to the host ports of the main system as well as access to the `bridge` network
    IP address:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: This will start an Alpine Linux container instance in `host` networking mode.
  prefs: []
  type: TYPE_NORMAL
- en: 'Use `docker inspect` to find the IP address of the `webserver1` container:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'The verbose details of the container will be displayed in JSON format; get
    the IP address from the `IPAddress` parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.27: Inspecting the webserver1 container instance'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B15021_06_27.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 6.27: Inspecting the webserver1 container instance'
  prefs: []
  type: TYPE_NORMAL
- en: 'Access an `sh` shell inside the monitoring container using the `docker exec` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: This should drop you into a root shell.
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the `apk install` command to install the `curl` command inside this container:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'This should install the `curl` utility:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'Use the `curl` command to validate connectivity works at the host level, by
    calling port `8080` on the host machine:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'You should receive a `200 OK` response from NGINX, indicating successful connectivity
    at the host level:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.28: Accessing the webserver1 container from the exposed ports on
    the host'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B15021_06_28.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 6.28: Accessing the webserver1 container from the exposed ports on the
    host'
  prefs: []
  type: TYPE_NORMAL
- en: 'Likewise, use the `curl` command to access the IP address of the container
    in the Docker `bridge` network directly over port `80`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'You should similarly receive another `200 OK` response, indicating a successful connection:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.29: Accessing the NGINX web server from the IP'
  prefs: []
  type: TYPE_NORMAL
- en: address of the container instance
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B15021_06_29.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 6.29: Accessing the NGINX web server from the IP address of the container
    instance'
  prefs: []
  type: TYPE_NORMAL
- en: In this activity, we were able to illustrate the connectivity between containers
    using different Docker networking drivers. This scenario applies to real-world
    production infrastructure because, when deploying a containerized solution, engineers
    will strive to deploy an infrastructure that is as immutable as possible. With
    the ability to deploy containers in Docker that exactly mimic the networking at
    the host level, infrastructure can be designed that requires very minimal configuration
    on the host OS. This makes it very easy to deploy and scale the host that Docker
    is deployed on. Packages such as `curl` and other monitoring tools can be deployed
    into containers that run on the Docker hosts instead of being installed on the
    hosts themselves. This guarantees ease of deployment and maintenance, as well
    as increasing the speed at which additional hosts can be deployed to meet increasing
    demand.
  prefs: []
  type: TYPE_NORMAL
- en: 'Activity 6.02: Overlay Networking in Action'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Solution**:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a Docker `overlay` network called `panoramic-net` on `Machine1` in the
    Docker swarm cluster, using the `docker network create` command, by passing the
    custom `subnet`, `gateway`, and `overlay` network driver:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'Use the `docker service create` command on `Machine1` to create a service named
    `trekking-app` in the `panoramic-net` network:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: This will start a service called `trekking-app` in the `panoramic-net` `overlay`
    network.
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the `docker service create` command on `Machine1` to create a service named
    `database-app` in the `panoramic-net` network. Set default credentials and specify
    the `postgres:12` version of the Docker image:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'Use `docker exec` to access an `sh` shell inside the `trekking-app` service container:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: This should drop you into a root shell inside the `trekking-app` container instance.
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the `ping` command to validate network connectivity to the `database-app` service:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'The ICMP replies should indicate the connectivity is successful:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: In this activity, we leveraged a custom Docker `overlay` network across a Docker
    swarm cluster to illustrate connectivity between two Docker swarm services using
    Docker DNS. In a real-world multi-tier application, many microservices can be
    deployed in large Docker swarm clusters that use an `overlay` network mesh to
    directly talk to each other. Understanding how `overlay` networking works in tandem
    with Docker DNS is vital to achieving efficient scalability as your containerized
    infrastructure continues to grow.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. Docker Storage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Activity 7.01: Storing Container Event (State) Data on a PostgreSQL Database'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Solution**:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following commands to remove all the objects in your host:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'Get the volume names, and then remove all the volumes using the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: 'Get the network names and then remove all the networks using the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: Open two terminals, one dedicated to seeing `docker events --format '{{json
    .}}'` in effect. The other one should be opened to execute the previously mentioned
    high-level steps.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the first terminal, run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: 'You should get an output like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.11: Output of the docker events command'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B15021_07_11.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 7.11: Output of the docker events command'
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following command to start the `ubuntu` container in the second terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: 'You should get an output like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.12: Output of the docker run command'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B15021_07_12.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 7.12: Output of the docker run command'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a volume named `vol1` using the following command in the second terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a network named `net1` using the following command in the second terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: 'Remove the container using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: 'Remove the volume and the network using the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: Click *Ctrl* + *C* in the `docker events` terminal to terminate it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Check the following two examples to understand the JSON output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Example 1**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: '**Example 2**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: You will find that there are different attributes and structures depending on
    the object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run a PostgreSQL container with a volume. Name the container `db1`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the `exec` command so that bash is replaced with the command to be executed.
    The shell will change to `posgres=#` to indicate that you are inside the container:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a table with two columns: `ID` of the `serial` type and `info` of the
    `json` type:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: 'Insert the first row of the `JSON` output from the first example into the table:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: 'Verify that the row is saved in the database by typing the following SQL statement:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: 'You should get an output like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.13: Verifying that the row is saved in the database'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B15021_07_13.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 7.13: Verifying that the row is saved in the database'
  prefs: []
  type: TYPE_NORMAL
- en: Insert Docker events into the `events` table using the SQL `insert` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Please refer to the `events.txt` file at [https://packt.live/2ZKfGgB](https://packt.live/2ZKfGgB)
    to insert Docker events using the `insert` command.
  prefs: []
  type: TYPE_NORMAL
- en: 'You should get an output like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.14: Inserting multiple rows in the database'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B15021_07_14.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 7.14: Inserting multiple rows in the database'
  prefs: []
  type: TYPE_NORMAL
- en: From this output, it is clear that 11 events have been inserted successfully
    into the PostgreSQL database.
  prefs: []
  type: TYPE_NORMAL
- en: Run the following three queries one by one.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Query 1**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as in the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.15: Output of Query 1'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B15021_07_08.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 7.15: Output of Query 1'
  prefs: []
  type: TYPE_NORMAL
- en: '**Query 2**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as in the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.16: Output of Query 2'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B15021_07_16.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 7.16: Output of Query 2'
  prefs: []
  type: TYPE_NORMAL
- en: '**Query 3**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as in the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.17: Output of Query 3'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B15021_07_17.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 7.17: Output of Query 3'
  prefs: []
  type: TYPE_NORMAL
- en: In this activity, you learned how to log and monitor a container and query the
    container's events using SQL statements, as well as how to get a JSON output of
    the events and save in a PostgreSQL database. You also studied the JSON output
    structure and learned how to query it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Activity 7.02: Sharing NGINX Log Files with the Host'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Solution**:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Verify that you do not have the `/var/mylogs` folder on your host by running
    the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: 'You should get an output like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: 'Run a container based on the NGINX image. Specify the path of the shared volumes
    on the host and inside the container in the `run` command. Inside the container,
    NGINX uses the `/var/log/nginx` path for the log files. Specify the path on the
    host as `/var/mylogs`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: 'The Docker Engine will pull the image automatically if you do not have it locally:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.18: Output of the docker run command'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B15021_07_18.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 7.18: Output of the docker run command'
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to the path of `/var/mylogs`. List all the files in that directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: 'You should find two files there:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: '(Optional) If no errors were generated, the two files will be empty. You check
    the contents by using the `cat` Linux command or by using the `tail` Linux command.
    As we used the `cat` command before, let''s use the `tail` command for this example:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: 'You should get an output like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: As this NGINX server did not generate any errors or was not accessed, the files
    are currently empty. However, if NGINX crashes at any instant, the errors generated
    will be saved in `error.log`.
  prefs: []
  type: TYPE_NORMAL
- en: In this activity, you learned how to share the log files of a container to the
    host. You used the NGINX server, so if it crashes, you can trackback what happened
    from its log files.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Service Discovery
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Activity 8.01: Utilizing Jenkins and SonarQube'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Solution**:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install SonarQube and run it as a container using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: 'You should get the container ID as the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: 'Log in to SonarQube by using `admin/admin` credentials:![Figure 8.38: Log in
    to SonarQube'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B15021_08_38.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.38: Log in to SonarQube'
  prefs: []
  type: TYPE_NORMAL
- en: 'After the successful login, a screen similar to the following should appear:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.39: The SonarQube dashboard'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B15021_08_39.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.39: The SonarQube dashboard'
  prefs: []
  type: TYPE_NORMAL
- en: 'At the top right, click on the user. A drop-down menu will appear. Click on
    `My Account`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Scroll down and click on `Generate` under `Security` to generate a token. You
    must copy it now because you will not be able to access it later:![Figure 8.40:
    Generating the token'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B15021_08_40.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.40: Generating the token'
  prefs: []
  type: TYPE_NORMAL
- en: 'In Jenkins, click on `Manage Jenkins` > `Plugin Manager`. Search for `Sonar`
    in the `Available` list. Install the `SonarQube Scanner` plugin.![Figure 8.41:
    Installing the SonarQube Scanner plugin'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B15021_08_41.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.41: Installing the SonarQube Scanner plugin'
  prefs: []
  type: TYPE_NORMAL
- en: 'Verify that the installation is correct by clicking on the `hit_count` project
    and then clicking the `Configure` option. Click on `Add build step` and then `Execute
    SonarQube Scanner` on the `Build` tab, as in *Figure 8.43*:![Figure 8.42: Selecting
    Execute SonarQube Scanner'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B15021_08_42.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.42: Selecting Execute SonarQube Scanner'
  prefs: []
  type: TYPE_NORMAL
- en: 'However, the new box will generate errors, like the one shown in the following
    screenshot. To rectify that, integrate SonarQube and Jenkins through the `system
    configuration` and `global tool configuration` options:![Figure 8.43: Errors generated
    since SonarQube is not configured yet'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B15021_08_43.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.43: Errors generated since SonarQube is not configured yet'
  prefs: []
  type: TYPE_NORMAL
- en: 'In Jenkins, click on `Manage Jenkins`. Click the `Global Tool Configuration`
    option and then click `Add SonarQube Scanner`:![Figure 8.44: Adding SonarQube
    Scanner on the Global Tool Configuration page'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B15021_08_44.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.44: Adding SonarQube Scanner on the Global Tool Configuration page'
  prefs: []
  type: TYPE_NORMAL
- en: Enter the name `SonarQube Scanner`. Check `Install automatically`. Under `Install
    from Maven Central`, in `Version`, select `SonarQube Scanner 3.2.0.1227`. Click
    on `Add Installer`. In the `Label` field, enter `SonarQube`. In the `Download
    URL for binary archive` field, enter the link `https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-3.2.0.1227-linux.zip`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on `Save`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.45: Adding details for SonarQube Scanner](image/B15021_08_45.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.45: Adding details for SonarQube Scanner'
  prefs: []
  type: TYPE_NORMAL
- en: You are now done with the `Global Tool Configuration` option, so it is time
    to go to the `Configure System` option.
  prefs: []
  type: TYPE_NORMAL
- en: 'In `Manage Jenkins`, click `Configure System`:![Figure 8.46: Click on Configure
    System on the Manage Jenkins page'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B15021_08_46.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.46: Click on Configure System on the Manage Jenkins page'
  prefs: []
  type: TYPE_NORMAL
- en: 'You cannot enter the system configuration right now as it asks for `Server
    Authentication Token`. When you click the `Add` button, it will do nothing. Enter
    the token as secret text in the following steps, and then return to `Manage Jenkins`:![Figure
    8.47: Inserting the SonarQube token in Jenkins configuration'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B15021_08_47.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.47: Inserting the SonarQube token in Jenkins configuration'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on `Manage Credentials`:![Figure 8.48: The Manage Jenkins page'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B15021_08_48.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.48: The Manage Jenkins page'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on `Jenkins`:![Figure 8.49: The Jenkins Credentials page'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B15021_08_49.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.49: The Jenkins Credentials page'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on `Global credentials (unrestricted)`:![Figure 8.50: The Global credentials
    (unrestricted) domain'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B15021_08_50.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.50: The Global credentials (unrestricted) domain'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on `adding some credentials`:![Figure 8.51: Adding some credentials'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B15021_08_51.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.51: Adding some credentials'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `Kind` drop-down menu, click on `Secret text`:![Figure 8.52: Selecting
    Secret text for Kind'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B15021_08_52.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.52: Selecting Secret text for Kind'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `Secret` textbox, paste the token that you copied in *Step 5* in this
    activity. In the `ID` field, enter `SonarQubeToken`. Click `OK`:![Figure 8.53:
    Adding the token to the Secret textbox'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B15021_08_53.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.53: Adding the token to the Secret textbox'
  prefs: []
  type: TYPE_NORMAL
- en: '`SonarQubeToken` will be saved in the `Global credentials` option. You will
    see a screen similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.54: SonarQubeToken saved in the Global credentials'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B15021_08_54.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.54: SonarQubeToken saved in the Global credentials'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return to `Manage Jenkins`. Click `Configuration System` and then `Refresh`.
    Now, in the `Server Authentication Token` drop-down menu, you will find `SonarQubeToken`.
    Check `Enable injection of SonarQube server configuration as build environment
    variables`. Enter `SonarQube` in the `Name` field. Enter `http://<your IP>:9000`
    in the `Server URL` field. Then click `Save`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You can run the `ifconfig` command to fetch your IP. You will find the IP in
    the `en0` section of the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: This is the last step in integrating Jenkins with SonarQube. Let's return to
    the project.
  prefs: []
  type: TYPE_NORMAL
- en: 'In `Build Environment`, check `Prepare SonarQube Scanner environment`. Set
    `Server authentication token` to `SonarQubeToken`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, click on the project name and then `Configure`. In the `Build` step, enter
    the following code in the `Analysis Properties` field:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: Click `Save`.
  prefs: []
  type: TYPE_NORMAL
- en: 'After saving, you will find the SonarQube logo showing on the project page,
    as in *Figure 8.55*. Click on `Build Now`:![Figure 8.55: The SonarQube option
    showing on our project''s dashboard'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B15021_08_55.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.55: The SonarQube option showing on our project''s dashboard'
  prefs: []
  type: TYPE_NORMAL
- en: 'In `Build History`, click on `Console Output`. You should get the screen similar
    to the following:![Figure 8.56: Console Output'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B15021_08_56.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.56: Console Output'
  prefs: []
  type: TYPE_NORMAL
- en: 'Check the report on `SonarQube`. In the browser, type `http://<ip>:9000` or
    `http://localhost:9000`. You will find that Jenkins added your `hit_count` project
    automatically to SonarQube:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click `hit_count`. You will find a detailed report. Whenever Jenkins builds
    the project, SonarQube will analyze the code automatically
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In this activity, you learned how to integrate Jenkins with SonarQube and install
    the required plugins, which you verified by checking SonarQube in the browser.
    You also applied SonarQube to your simple web application, `hit_counter`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Activity 8.02: Utilizing Jenkins and SonarQube in the Panoramic Trekking Application'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Solution**:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new item named `trekking` in Jenkins. Select it as a `FREESTYLE` project.
    Click `OK`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the `General` tab, select `Discard old builds`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `Source Code Management` tab, select `GIT`. Then enter the URL `http://github.com/efoda/trekking_app`:![Figure
    8.57: Inserting the GitHub URL'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B15021_08_57.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.57: Inserting the GitHub URL'
  prefs: []
  type: TYPE_NORMAL
- en: 'In `Build Triggers`, select `Poll SCM` and enter `H/15 * * * *`:![Figure 8.58:
    Inserting the scheduling code'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B15021_08_58.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.58: Inserting the scheduling code'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `Build Environment` tab, select `Prepare SonarQube Scanner environment`.
    Select the `Server authentication token` from the drop-down menu:![Figure 8.59:
    Selecting SonarQubeToken as the Server authentication token'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B15021_08_59.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.59: Selecting SonarQubeToken as the Server authentication token'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `Build` tab, enter the following code in `Analysis properties`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: Click `Save`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Select `Build Now`. When the build is done successfully, select `Console Output`.
    The following output will indicate that it finished successfully:![Figure 8.60:
    Verifying Jenkins has built the image successfully'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B15021_08_60.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.60: Verifying Jenkins has built the image successfully'
  prefs: []
  type: TYPE_NORMAL
- en: 'Switch to the `SonarQube` tab in the browser and check the output. The following
    report indicates that the trekking app has two bugs and zero security vulnerabilities:![Figure
    8.61: Report shown in the SonarQube browser tab'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B15021_08_61.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 8.61: Report shown in the SonarQube browser tab'
  prefs: []
  type: TYPE_NORMAL
- en: If you click on `New Code`, it will be blank as you built the project only once.
    When Jenkins builds it another time, you will find a comparison between the two builds.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to edit the project's code, fork the GitHub code to your account
    and edit the code to fix the bugs and the vulnerabilities. Edit the project's
    configuration to have your GitHub code instead of the code provided in the `Source
    Code` tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In this activity, you integrated Jenkins with SonarQube and applied it to the
    Panoramic Trekking application. At the end of the activity, you inspected the
    reports that SonarQube generated showing the bugs and the vulnerabilities in the
    code.
  prefs: []
  type: TYPE_NORMAL
- en: 9\. Docker Swarm
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Activity 9.01: Deploying the Panoramic Trekking App to a Single-Node Docker
    Swarm'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Solution**:'
  prefs: []
  type: TYPE_NORMAL
- en: 'There are a number of ways in which you can perform this activity. These steps
    are one way to do it:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a directory for the application. In this instance, you will create a
    directory called `Activity1` and move into the new directory using the `cd` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: 'Clone the application from its GitHub repository to ensure that you will have
    all the relevant information and applications needed for the Panoramic Trekking
    App services you want to deploy to your swarm:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: 'You won''t need any of the supporting directories for NGINX, but ensure that
    your web service and database running are listed here, including the `panoramic_trekking_app`
    and `photo_viewer` directories and the `Dockerfile`, `entrypoint.sh`, `manage.py`,
    and `requirements.txt` scripts and files:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: 'The command should return output similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs: []
  type: TYPE_PRE
- en: 'Create the `.env.dev` file in the directory and add in the following details
    for `panoramic_trekking_app` to use in its `settings.py` file. These environment
    variables will set up the database name, user, password, and other database settings:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE97]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new `docker-compose.yml` file and open it with your text editor and
    add in the following details:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs: []
  type: TYPE_PRE
- en: As you can see from the highlighted line in the `docker-compose.yml` file, the
    `web` service relies on the `activity_web:latest` Docker image.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following `docker build` command to build the image and tag it appropriately:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE99]'
  prefs: []
  type: TYPE_PRE
- en: 'It''s now time to deploy the stack to Swarm. Run the following `stack deploy`
    command using `the docker-compose.yml` file you have created:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the network has been created, you should see the `activity_swarm_web`
    and `activity_swarm_db` services made available:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE101]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the `service ls` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE102]'
  prefs: []
  type: TYPE_PRE
- en: 'Verify that all the services have started successfully and are showing `1/1`
    replicas, as we have here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE103]'
  prefs: []
  type: TYPE_PRE
- en: Finally, open your web browser and verify that you are able to access the site
    from `http://localhost:8000/admin/` and `http://localhost:8000/photo_viewer/`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Panoramic Trekking App is created and set up in a similar way to some of
    the other services you have already completed in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Activity 9.02: Performing an Update to the App While the Swarm Is Running'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Solution**:'
  prefs: []
  type: TYPE_NORMAL
- en: 'There are a number of ways in which we can perform this activity. The following
    steps detail one way to do this:'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you do not have a Swarm running, deploy the `docker-compose.yml` file you
    created in *Activity 9.01*, *Deploying the Panoramic Trekking App to a Single-Node
    Docker Swarm*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE104]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, all three services are now running:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE105]'
  prefs: []
  type: TYPE_PRE
- en: 'In the same directory where you have performed the `stack deploy` command,
    open the `photo_viewer/templates/photo_index.html` file with your text editor
    and change line four to match the following details, basically adding the word
    `Patch` to the main heading:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: photo_index.html
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE106]'
  prefs: []
  type: TYPE_PRE
- en: You can find the complete code here [https://packt.live/3ceYnta](https://packt.live/3ceYnta).
  prefs: []
  type: TYPE_NORMAL
- en: 'Build a new image, this time tagging the image as `patch_1` with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE107]'
  prefs: []
  type: TYPE_PRE
- en: 'Deploy the patch to your Swarm web service using the `service update` command.
    Provide the image name and the service the update is going to be applied to as
    well:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE108]'
  prefs: []
  type: TYPE_PRE
- en: 'The output should look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE109]'
  prefs: []
  type: TYPE_PRE
- en: 'List the services running and verify that the new image is running as part
    of the `activity_swarm_web` service:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE110]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see from the output, the web service is no longer tagged with the
    `latest` tag. It is now displaying the `patch_1` image tag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE111]'
  prefs: []
  type: TYPE_PRE
- en: 'Verify that the changes have been applied to the image by accessing `http://localhost:8000/photo_viewer/`
    and seeing that the heading now shows `Patch Panoramic Trekking App`:![Figure
    9.10: Patch version of the Panoramic Trekking App'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B15021_09_10.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 9.10: Patch version of the Panoramic Trekking App'
  prefs: []
  type: TYPE_NORMAL
- en: In this activity, you made a minor change to the Panoramic Trekking App so that
    a rolling update can be made to the service. You then deployed the image into
    the running environment and performed a rolling update to verify that the changes
    were successful. The change in the heading showed that the rolling update was
    performed successfully.
  prefs: []
  type: TYPE_NORMAL
- en: 10\. Kubernetes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Activity 10.01: Installing the Panoramic Trekking App on Kubernetes'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Solution**:'
  prefs: []
  type: TYPE_NORMAL
- en: 'It is possible to create the database and Panoramic Trekking App with the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install the database with the following `helm` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE112]'
  prefs: []
  type: TYPE_PRE
- en: 'This will install multiple Kubernetes resources for PostgreSQL and show a summary
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.23: Database installation'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B15021_10_23.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 10.23: Database installation'
  prefs: []
  type: TYPE_NORMAL
- en: This output first lists Helm chart-related information such as name, deployment
    time, status, and revision, followed by information related to the PostgreSQL
    instance and how to access it. This is a widely accepted method in Helm charts
    to give such information following the installation of a chart. Otherwise, it
    would be difficult to learn how to connect to the applications installed by Helm.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a `statefulset.yaml` file with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE113]'
  prefs: []
  type: TYPE_PRE
- en: This file creates a Statefulset with the name `panoramic-trekking-app`. There
    are two containers defined in the `spec` section with the names `nginx` and `pta`.
    In addition, a volume claim is defined with the name `static` and is mounted to
    both the containers.
  prefs: []
  type: TYPE_NORMAL
- en: 'Deploy the `panoramic-trekking-app` StatefulSet with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE114]'
  prefs: []
  type: TYPE_PRE
- en: 'This will create a StatefulSet for our application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE115]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a `service.yaml` file with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE116]'
  prefs: []
  type: TYPE_PRE
- en: 'This Service definition has a `LoadBalancer` type to access the Pods with the
    label `app: panoramic-trekking-app`. Port `80` will be made available to access
    the `web` port of the Pods.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Deploy the `panoramic-trekking-app` Service with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE117]'
  prefs: []
  type: TYPE_PRE
- en: 'This will create a Service resource as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE118]'
  prefs: []
  type: TYPE_PRE
- en: 'Get the IP of the Service with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE119]'
  prefs: []
  type: TYPE_PRE
- en: Store the IP to access the Panoramic Trekking App in the following steps.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the administration section of the Panoramic Trekking App in the browser
    with `http://$SERVICE_IP/admin`:![Figure 10.24: Admin login view'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B15021_10_24.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 10.24: Admin login view'
  prefs: []
  type: TYPE_NORMAL
- en: 'Log in with the username `admin` and the password `changeme` and add new photos
    and countries:![Figure 10.25: Admin setup view'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B15021_10_25.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 10.25: Admin setup view'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the Panoramic Trekking App at `http://$SERVICE_IP/photo_viewer` in the
    browser:![Figure 10.26: Application view'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B15021_10_26.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 10.26: Application view'
  prefs: []
  type: TYPE_NORMAL
- en: The Photo Viewer application shows that the photos and countries have been retrieved
    from the database. It also indicates that the application is set up correctly
    and is running flawlessly.
  prefs: []
  type: TYPE_NORMAL
- en: In this activity, you have deployed the Panoramic Trekking App to a Kubernetes
    cluster. You started with a database using its Helm chart and then created Kubernetes
    resources for the application. Finally, you accessed the app from the browser
    and tested it with the addition of new photos. By the end of this activity, you
    have discovered how to deploy a database by using its official Helm chart, created
    a series of Kubernetes resources to connect to the database and deploy your application,
    and gathered information from the cluster to access the application. The steps
    in the activity covered the life cycle of a containerized application being deployed
    in a Kubernetes cluster.
  prefs: []
  type: TYPE_NORMAL
- en: 11\. Docker Security
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Activity 11.01: Setting up a seccomp Profile for the Panoramic Trekking App'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Solution**:'
  prefs: []
  type: TYPE_NORMAL
- en: 'There are a number of ways in which you can create a `seccomp` profile that
    will stop users from performing the `mkdir`, `kill`, and `uname` commands. These
    steps show one way that this can be done:'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you don’t already have `postgres` image locally, execute the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE120]'
  prefs: []
  type: TYPE_PRE
- en: 'Use the `wget` command on your system to obtain a copy of the default `seccomp`
    profile. Name the file you are downloading as `activity1.json`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE121]'
  prefs: []
  type: TYPE_PRE
- en: 'Remove the following three commands from the profile to allow us to further
    lock down our image. Open the `activity1.json` file with your favorite text editor
    and remove the following lines from the file. You should look to remove *lines
    1500* to *1504* to remove the `uname` command, *669* to *673* to remove the `mkdir`
    command, and *lines 579* to *583* to remove the `kill` command from being available:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE122]'
  prefs: []
  type: TYPE_PRE
- en: 'You can find the modified `activity1.json` file at the following link: [https://packt.live/32BI3PK](https://packt.live/32BI3PK).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Test the new profile with the `postgres` image by assigning a new profile as
    it is running, using the `–-security-opt seccomp=activity1.json` option when we
    are running the image:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE123]'
  prefs: []
  type: TYPE_PRE
- en: 'As you are now logged on to the running container, test the new permissions
    of the profile you have now assigned to the container. Perform a `mkdir` command
    to create a new directory on the system:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE124]'
  prefs: []
  type: TYPE_PRE
- en: 'The command should show an `Operation not permitted` output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE125]'
  prefs: []
  type: TYPE_PRE
- en: 'To test that you are no longer able to kill the running processes, you need
    to start something up. Start the `top` process and run it in the background. Do
    this by typing `top` into the command line and then adding `&`, before pressing
    *Enter* to run the process in the background. The following command then provides
    the process command (`ps`) to see what processes are running on the container:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE126]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see from the following output, the `top` process is running as `PID
    8`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE127]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The `ps` and `top` commands aren't available in a container based on `postgres`
    image. However, this doesn't cause any issues, as running `kill` command with
    any random pid number is sufficient to demonstrate that the command is not permitted
    to run.
  prefs: []
  type: TYPE_NORMAL
- en: 'Kill the top process by using the `kill -9` command followed by the PID number
    of the process you want to kill. The `kill -9` command will try to force the command
    to stop:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE128]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see `Operation not permitted`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE129]'
  prefs: []
  type: TYPE_PRE
- en: 'Test the `uname` command. This is a little different from the other commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE130]'
  prefs: []
  type: TYPE_PRE
- en: 'You will get an `Operation not permitted` output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE131]'
  prefs: []
  type: TYPE_PRE
- en: This has been a good activity to show that there is still a lot we can do to
    limit what can be done to our images if they are accessed by an attacker.
  prefs: []
  type: TYPE_NORMAL
- en: 'Activity 11.02: Scanning Your Panoramic Trekking App Images for Vulnerabilities'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Solution:**'
  prefs: []
  type: TYPE_NORMAL
- en: 'There are a number of ways in which we can scan our images for vulnerabilities.
    The following steps are one way to do this, using Anchore to verify whether the
    `postgres-app` image is safe for use by our application:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Tag the image and push it to your Docker Hub repository. In this case, tag
    the `postgres-app` image with our repository name and tag it as `activity2`. We
    are also pushing it to our Docker Hub repository:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE132]'
  prefs: []
  type: TYPE_PRE
- en: 'You should still have the `docker-compose.yaml` file you were using originally
    in this chapter. If you don''t have Anchore running already, run the `docker-compose`
    command and export the `ANCHORE_CLI_URL`, `ANCHORE_CLI_URL`, and `ANCHORE_CLI_URL`
    variables, as you did previously, to allow us to run the `anchore-cli` commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE133]'
  prefs: []
  type: TYPE_PRE
- en: 'Check the status of the Anchore application by running the `anchore-cli system
    status` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE134]'
  prefs: []
  type: TYPE_PRE
- en: 'Use the `feeds list` command to check whether the feeds lists are all updated:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE135]'
  prefs: []
  type: TYPE_PRE
- en: 'Once all the feeds have been updated, add the `postgres-app` image that we''ve
    pushed to Docker Hub. Use the `image add` command provided by `anchore-cli`, and
    provide the repository, image, and tag of the image we want to scan. This will
    add the image to our Anchore database, ready for it to be scanned:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE136]'
  prefs: []
  type: TYPE_PRE
- en: 'Use the `image list` command to allow us to verify that our image has been
    analyzed. Once it is complete, you should see the word `analyzed` displayed in
    the `Analysis Status` column:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE137]'
  prefs: []
  type: TYPE_PRE
- en: 'Use the `image vuln` command with our image name to see a list of all the vulnerabilities
    found on our `postgres-app` image. This image is a lot larger and a lot more complex
    than the images we have tested previously, so there is a long list of vulnerabilities
    found when we use the `all` option. Fortunately, most of the vulnerabilities present
    either `Negligible` or `Unknown`. Run the `image vuln` command and pipe out the
    results to the `wc -l` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE138]'
  prefs: []
  type: TYPE_PRE
- en: 'This will give us a count of the numbers of vulnerabilities found. There are
    over 100 values in this case:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE139]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, use the `evaluate check` command to see whether the vulnerabilities
    found will give us a pass or fail:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE140]'
  prefs: []
  type: TYPE_PRE
- en: 'Fortunately, as you can see from the following output, we have a pass:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE141]'
  prefs: []
  type: TYPE_PRE
- en: As the image is provided by a large organization, it is in their best interests
    to make sure it is safe for you to use, but as it is so easy to scan the images,
    we should be still scanning them to verify that they are 100% safe for use.
  prefs: []
  type: TYPE_NORMAL
- en: 12\. Best Practices
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Activity 12.01: Viewing the Resources Used by the Panoramic Trekking App'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Solution:**'
  prefs: []
  type: TYPE_NORMAL
- en: 'There are a number of ways in which we perform the first activity in this chapter.
    The following steps are one way to do this by using the `docker stats` command
    to view the resources being used by a service in the Panoramic Trekking App. For
    this example, we are going to use the `postgresql-app` service, which is running
    as part of the Panoramic Trekking App:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a script that will create a new table and fill it with random values.
    The following script does exactly what we want in this situation as we want to
    create a long processing query and see how it affects the resources on our container.
    Add in the following details and save the file as `resource_test.sql` using your
    favorite editor:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE142]'
  prefs: []
  type: TYPE_PRE
- en: '*Lines 1* to *6* create the new table and set up the three different rows it
    includes, while *lines* *8 to 14* run through a new table, populating it with
    random values.'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you have not got a copy of the PostgreSQL Docker image already, pull the
    image from the supported PostgreSQL Docker Hub repository using the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE143]'
  prefs: []
  type: TYPE_PRE
- en: 'Move into a new terminal window and run the `docker stats` command to view
    the `CPU` percentage being used, as well as the memory and memory percentage being
    used:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE144]'
  prefs: []
  type: TYPE_PRE
- en: 'In the following command, we are not displaying the container ID as we wanted
    to limit the amount of data showing on our output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE145]'
  prefs: []
  type: TYPE_PRE
- en: 'To simply test this image, you don''t need to have the running container mounted
    on a specific volume to use the data you have previously used for this image.
    Move into a different terminal to the one monitoring your CPU and memory. Start
    the container and name it `postgres-test` and ensure that the database is accessible
    from your host system by exposing the ports needed to run a `psql` command. We
    have also specified a temporary password of `docker` in this instance using the
    environment variable (`-e`) option:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE146]'
  prefs: []
  type: TYPE_PRE
- en: 'Before you run your test script, move to the terminal where you are monitoring
    the CPU and memory usage. You can see that our container is already using some
    of the resources without even really doing anything:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE147]'
  prefs: []
  type: TYPE_PRE
- en: 'Enter the terminal inside your container using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE148]'
  prefs: []
  type: TYPE_PRE
- en: 'Use the `psql` command to send the `postgres-test` container command to create
    a new database called `resource_test`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE149]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the script you created earlier. Make sure you include the `time` command
    before you run the script as this will allow you to see the time it takes to complete:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE150]'
  prefs: []
  type: TYPE_PRE
- en: 'We have reduced the output of the command in the following code block. It took
    50 seconds to fill up the `resource_database` tables with data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE151]'
  prefs: []
  type: TYPE_PRE
- en: 'Move to the terminal where your `docker stats` command is running. You will
    see an output depending on the number of cores your system is running and the
    memory it has available. The script being run doesn''t seem to be very memory-intensive,
    but it is pushing up the CPU available to the container to 100%:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE152]'
  prefs: []
  type: TYPE_PRE
- en: 'Before you can run the container with the changes to the CPU and memory configuration,
    delete the running container to make sure you have a fresh database running by
    using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE153]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the container again. In this instance, you will limit the CPU available
    to only half of one core on the host system, and as the test was not too memory-intensive,
    set the memory limit to `256MB`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE154]'
  prefs: []
  type: TYPE_PRE
- en: 'Enter the container using the `exec` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE155]'
  prefs: []
  type: TYPE_PRE
- en: 'Again, before running your tests, create the `resource_test` database:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE156]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, to see what changes have been made to our resources, limit what can be
    used by the container. Run the `resource_test.sql` script again and by limiting
    the resources, specifically the CPU, we can see that it now takes more than 1
    minute to complete:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE157]'
  prefs: []
  type: TYPE_PRE
- en: 'Move to the terminal where your `docker stats` command is running. It should
    also look different as the percentage of CPU available to be used will be halved.
    The change you have made to the CPU slows the running of the script and, as a
    result, seems to reduce the memory being used as well:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE158]'
  prefs: []
  type: TYPE_PRE
- en: This activity gave you a good indication of the balancing act you sometimes
    need to perform when you are monitoring and configuring your container resources.
    It does clarify that you need to be aware of the tasks your services are performing,
    as well as how changes to configurations will then affect how your services will
    operate.
  prefs: []
  type: TYPE_NORMAL
- en: 'Activity 12.02: Using hadolint to Improve the Best Practices on Dockerfiles'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Solution**'
  prefs: []
  type: TYPE_NORMAL
- en: 'There are a number of ways in which we can perform this activity. The following
    steps show one way to do this:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Pull the image from the `hadolint` repository with the following `docker pull` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE159]'
  prefs: []
  type: TYPE_PRE
- en: 'Use `hadolint` to lint the `docker-stress` `Dockerfile` we have been using
    throughout this chapter and document the warnings presented:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE160]'
  prefs: []
  type: TYPE_PRE
- en: 'You will get warnings such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE161]'
  prefs: []
  type: TYPE_PRE
- en: There are no real changes from when you originally tested the image. However,
    there are only three lines of code in the `Dockerfile`, so see whether you can
    reduce the number of warnings being presented by `hadolint`.
  prefs: []
  type: TYPE_NORMAL
- en: 'As mentioned earlier in this chapter, the `hadolint` wiki page will provide
    you with details on how to resolve each of the warnings presented. However, if
    you move through each line, you should be able to resolve all these warnings.
    The first one presented, `DL3006`, asks to tag the version of the Docker image
    you are using, which is a new version of the Ubuntu image. Change *line 1* of
    your `Dockerfile` to now include the `18.08` image version, as shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE162]'
  prefs: []
  type: TYPE_PRE
- en: 'The next four warnings are all related to the second line of our `Dockerfile`.
    `DL3008` asks to pin the version of the application being installed. In the following
    case, pin the stress application to version 1.0.3\. `DL3009` states that you should
    delete any lists. This is where we have added *lines 4* and *5* in the following
    code. `DL3015` states that you should also use `--no-install-recommends`, making
    sure you don''t install applications you don''t need. Lastly, `DL3014` is suggesting
    you include the `-y` option to make sure you are not prompted to verify the installation
    of your application. Edit the `Dockerfile` to look as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE163]'
  prefs: []
  type: TYPE_PRE
- en: '`DL3025` is your last warning and states that you need to have your `CMD` instruction
    in JSON format. This could cause issues as you are trying to use environment variables
    with your stress application. To clear up this warning, run the `stress` command
    with the `sh -c` option. This should still allow you to run the command with environment
    variables:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE164]'
  prefs: []
  type: TYPE_PRE
- en: 'Your complete `Dockerfile`, now adhering to the best practices, should look
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE165]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, lint the `Dockerfile` again using `hadolint`, with no more warnings presented:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE166]'
  prefs: []
  type: TYPE_PRE
- en: 'If you want to be 100% sure that the `Dockerfile` is looking as good as it
    can be, perform one final test. Open `FROM:latest` in your browser and you will
    see the `Dockerfile` with the latest changes showing `No problems or suggestions
    found!`:![Figure 12.4: The docker-stress Dockerfile now adhering to the best practices'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B15021_12_04.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 12.4: The docker-stress Dockerfile now adhering to the best practices'
  prefs: []
  type: TYPE_NORMAL
- en: Your `Dockerfiles` may be a lot larger than the ones presented in this chapter,
    but as you can see, a systematic line-by-line approach will help you correct any
    issues that your `Dockerfiles` may have. Using applications such as `hadolint`
    and `FROM latest`, with their suggestions on how to resolve warnings, will familiarize
    you with the best practices as you go along. This brings us to the end of our
    activities and this chapter, but there is still more interesting content to go,
    so don't stop now.
  prefs: []
  type: TYPE_NORMAL
- en: 13\. Monitoring Docker Metrics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Activity 13.01: Creating a Grafana Dashboard to Monitor System Memory'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Solution**:'
  prefs: []
  type: TYPE_NORMAL
- en: 'There are a number of ways in which you can perform this activity. The following
    steps are one such method:'
  prefs: []
  type: TYPE_NORMAL
- en: Make sure that Prometheus is running and collecting data, Docker and `cAdvisor`
    are configured to expose metrics, and Grafana is running and configured with Prometheus
    as a data source.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the Grafana web interface and the `Container Monitoring` dashboard you
    created in *Exercise 13.05: Installing and Running Grafana on Your System*'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'There is an `Add panel` option at the top of the dashboard and to the right
    of the dashboard name. Click the `Add panel` icon to add in your new dashboard panel:![Figure
    13.26: Adding a new panel to the container monitoring dashboard'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B15021_13_26.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 13.26: Adding a new panel to the container monitoring dashboard'
  prefs: []
  type: TYPE_NORMAL
- en: Select `Prometheu`s from the drop-down list as the data source we will be using
    to produce the new dashboard panel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `metrics` section, add the following PromQL query, `container_memory_usage_bytes`,
    searching only for entries that have a name value. Then, sum by each name to provide
    a line graph for each container:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE167]'
  prefs: []
  type: TYPE_PRE
- en: 'Depending on the amount of data you have available in your time-series database,
    adjust the relative time if needed. Perhaps set the relative time to `15m`. The
    previous three steps are captured in the following diagram:![Figure 13.27: Adding
    a new panel to the Container Monitoring dashboard'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B15021_13_27.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 13.27: Adding a new panel to the Container Monitoring dashboard'
  prefs: []
  type: TYPE_NORMAL
- en: Select `Show options` and add the title of `Memory Container Usage`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If you click on `Save`, you will notice that you cannot save the panel as the
    dashboard has been provisioned on startup. You can export the JSON, which you
    can then add to your provisioning directory. Click the `Share Dashboard` button
    and export the JSON. Select `Save JSON to file` and store the dashboard file in
    the `/tmp directory`:![Figure 13.28: Warning that we cannot save the new dashboard'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B15021_13_28.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 13.28: Warning that we cannot save the new dashboard'
  prefs: []
  type: TYPE_NORMAL
- en: 'Stop your Grafana container from running so that you can add to the provisioning
    file in your environment. Do this with the following `docker kill` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE168]'
  prefs: []
  type: TYPE_PRE
- en: 'You already have a file named `ContainerMonitoring.json` in the `provisioning/dashboards`
    directory. Copy the JSON file you have just created from your `tmp` directory
    and replace the original file in the `provisioning/dashboards` directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE169]'
  prefs: []
  type: TYPE_PRE
- en: 'Start the Grafana image again and log in to the application using the default
    administration password:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE170]'
  prefs: []
  type: TYPE_PRE
- en: 'Log in to Grafana one more time and move to the `Container Monitoring` dashboard
    you have been provisioning. You should now see the newly created `Memory Container
    usage` panel at the top of our dashboard, similar to the following screenshot:![Figure
    13.29: New dashboard panel displaying memory usage'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B15021_13_24.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 13.29: New dashboard panel displaying memory usage'
  prefs: []
  type: TYPE_NORMAL
- en: This should now make it a lot easier to monitor the memory and CPU usage of
    containers running on your system. The dashboard provides an easier interface
    than looking through the `docker stats` command, especially when you start to
    run a few more containers on your system.
  prefs: []
  type: TYPE_NORMAL
- en: 'Activity 13.02: Configuring the Panoramic Trekking App to Expose Metrics to
    Prometheus'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Solution**:'
  prefs: []
  type: TYPE_NORMAL
- en: 'There are a number of ways in which we can perform this activity. Here, we
    have chosen to add an exporter to the PostgreSQL container we have running as
    part of the panoramic trekking app:'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you don''t have the panoramic trekking app running, make sure that at least
    the PostgreSQL container is running so that you can complete this activity. You
    won''t need to have Prometheus running yet as you will need to make some changes
    to the configuration file first. Run the following command to verify that the
    PostgreSQL database is running:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE171]'
  prefs: []
  type: TYPE_PRE
- en: 'To gather further metrics from your PostgreSQL container, you can locate an
    exporter already created by the user `albertodonato` on GitHub. Using one that
    someone has already created makes it a lot easier than having to create your own.
    Documentation and details can be found at the following URL: [https://github.com/albertodonato/query-exporter](https://github.com/albertodonato/query-exporter).'
  prefs: []
  type: TYPE_NORMAL
- en: 'The aforementioned GitHub account has a good breakdown of how to set up the
    configuration and metrics. Set up a basic configuration file to get started. Find
    the IP address that the PostgreSQL container is running on by running the following
    `docker inspect` command. This gives you the internal IP address your container
    is running on. You''ll also need to substitute the container name you have running
    for `<container_name>`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE172]'
  prefs: []
  type: TYPE_PRE
- en: 'Your IP address might be different to the one here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE173]'
  prefs: []
  type: TYPE_PRE
- en: For this exporter, you need to set up some extra configurations to feed into
    the exporter. To start with, create a configuration file named `psql_exporter_config.yml`
    in your working directory and open the file with your text editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter the first four lines into your configuration file below. This is how
    the exporter connects to the database. You will need to provide the password with
    which the database can be accessed and the IP address that you obtained in the
    previous step or if a domain is assigned to the database:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE174]'
  prefs: []
  type: TYPE_PRE
- en: 'Add your first metric to the configuration file. Enter the following lines
    to add your metric name, type of gauge, description, and a label:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE175]'
  prefs: []
  type: TYPE_PRE
- en: 'Set up a database query to gather the metric details you want for the `pg_process`
    gauge. *Line 13* shows that you want to create a database query with *lines 14*
    and *15,* assigning the results to the metric you created earlier. *Lines 16*
    to *23* are the query we want to run on our database in order to create a gauge
    for the number of processes running on the database:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: psql_exporter_config.yml
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE176]'
  prefs: []
  type: TYPE_PRE
- en: You can find the complete code here [https://packt.live/32C47K3](https://packt.live/32C47K3).
  prefs: []
  type: TYPE_NORMAL
- en: 'Save the configuration file and run the exporter from the command line. The
    exporter will expose its metrics on port `9560`. Mount the configuration file
    you created earlier in this activity. You are also getting the latest version
    of the `adonato/query-exporter` image:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE177]'
  prefs: []
  type: TYPE_PRE
- en: 'Open a web browser and use the URL `http://0.0.0.0:9560/metrics` to view the
    new metrics you have set up for the PostgreSQL container running as part of the
    panoramic trekking app:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE178]'
  prefs: []
  type: TYPE_PRE
- en: 'Move into the directory where you have Prometheus installed, open the `prometheus.yml`
    file with your text editor, and add in the exporter details to allow Prometheus
    to start collecting the data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE179]'
  prefs: []
  type: TYPE_PRE
- en: 'Save the changes you''ve made to the `prometheus.yml` file and start the Prometheus
    application again from the command line, as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE180]'
  prefs: []
  type: TYPE_PRE
- en: 'If everything has worked as it should, you should now see the `postgres-web`
    target displayed on the Prometheus `Targets` page, as demonstrated here:![Figure
    13.30: New postgres-web Targets page displayed on Prometheus'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B15021_13_25.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 13.30: New postgres-web Targets page displayed on Prometheus'
  prefs: []
  type: TYPE_NORMAL
- en: That brings us to the end of the activities and the end of this chapter. The
    activities should have helped to solidify the knowledge learned earlier on and
    provided you with experience in gathering metrics for your applications and running
    systems and displaying them in a more user-friendly fashion.
  prefs: []
  type: TYPE_NORMAL
- en: 14\. Collecting Container Logs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Activity 14.01: Creating a docker-compose.yml File for Your Splunk Installation'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Solution**:'
  prefs: []
  type: TYPE_NORMAL
- en: There are a number of ways in which we can perform this activity. The following
    steps outline one possible method.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, you will set up a `docker-compose.yml` file that will at least run your
    Splunk container the same way it has been running throughout this chapter. You
    will set up two volumes in order to mount the `/opt/splunk/etc` directory, as
    well as the `/opt/splunk/var` directory. You need to expose ports `8000`, `9997`,
    and `8088` to allow access to your web interface and allow data to be forwarded
    to the Splunk instance. Finally, you will need to set up some environment variables
    that will accept the Splunk license and add the Administrator password. Let''s
    get started:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new file called `docker-compose.yml` and open it with your favorite
    text editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Start with the version of `Docker Compose` you prefer and create the volumes
    you are going to use in order to mount the `var` and `ext` directories:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE181]'
  prefs: []
  type: TYPE_PRE
- en: 'Set up the service for the Splunk installation, using `splunk` as the hostname
    and `splunk/splunk` as the image you have been using as your installation. Also,
    set up the environment variables for `SPLUNK_START_ARGS` and `SPLUNK_PASSWORD`,
    as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE182]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, mount the volumes and expose the ports your installation will need
    to access the web interface and forward data from a forwarder and the containers:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE183]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the `docker-compose up` command to make sure it is all working correctly.
    Use the `-d` option to make sure it is running as a daemon in the background of
    our system:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE184]'
  prefs: []
  type: TYPE_PRE
- en: 'The command should return an output similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE185]'
  prefs: []
  type: TYPE_PRE
- en: 'Once your Splunk installation is running again, it''s time to get one of your
    services from the Panoramic Trekking App running so that you can forward logs
    to Splunk to be indexed. When using the `docker run` command, add the log driver
    details, as you did previously in this chapter, and make sure you include the
    correct token for your `HTTP Event Collector`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE186]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Observe that we are using `-c log_statement=all` in the `docker run` command
    as this will make sure all of our PostgreSQL queries will be logged and sent to
    Splunk.
  prefs: []
  type: TYPE_NORMAL
- en: 'Log in to the Splunk web interface and access the `Search & Reporting` app.
    Enter the `source="http:docker logs" AND postgres-test` query into the interface
    and press *Enter*. Since you have tagged our container, you should see your containers
    tagged with the name and full ID, so adding `postgres-test` to your search will
    make sure only your PostgreSQL logs are visible:![Figure 14.48: PostgreSQL logs
    displaying in Splunk'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B15021_14_46.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 14.48: PostgreSQL logs displaying in Splunk'
  prefs: []
  type: TYPE_NORMAL
- en: As you can see from the preceding screenshot, our logs are flowing through Splunk
    successfully. Make note of the tag that was added to the log entries, as shown
    in the preceding screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: This activity taught us how to implement the logging procedures in our development
    projects using Docker Compose.
  prefs: []
  type: TYPE_NORMAL
- en: 'Activity 14.02: Creating a Splunk App to Monitor the Panoramic Trekking App'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Solution**:'
  prefs: []
  type: TYPE_NORMAL
- en: 'There are a number of ways in which you can perform this activity. The following
    steps are one way to do this. Here, you will add an exporter to the `PostgreSQL`
    container you have running as part of the Panoramic Trekking App:'
  prefs: []
  type: TYPE_NORMAL
- en: Make sure Splunk is running and that the service you have been monitoring has
    been running for a little while to make sure you are collecting some logs for
    this activity.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Log in to the Splunk web interface. From the Splunk home screen, click on the
    cog icon next to the `Apps` menu; you will be presented with the `Apps` page for
    your Splunk environment:![Figure 14.49: Apps page of the Splunk environment'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B15021_14_49.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 14.49: Apps page of the Splunk environment'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the `Create` app button and fill in the form. It will be similar to the
    following, in which `Name` is set to `Panoramic Trekking App`, `Folder name` is
    set to `panoramic_trekking_app`, and `Version` is set to `1.0.0`. Click `Save`
    to create the new app:![Figure 14.50: Creating your new app in Splunk'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B15021_14_50.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 14.50: Creating your new app in Splunk'
  prefs: []
  type: TYPE_NORMAL
- en: 'Return to the Splunk home page and make sure your `Panoramic Trekking App`
    is visible from the `Apps` menu. Click `Panoramic Trekking App` to bring up the
    `Search & Reporting` page so that you can start querying your data:![Figure 14.51:
    Selecting Panoramic Trekking App'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B15021_14_51.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 14.51: Selecting Panoramic Trekking App'
  prefs: []
  type: TYPE_NORMAL
- en: 'Type `source="http:docker logs" AND postgres-test AND INSERT AND is_superuser
    | stats count` into the query bar and press *Enter*. The search will look for
    any `Super Users` that were created as part of the application. When your data
    comes up, click the `Visualization` tab and change it to display a single-value
    visualization:![Figure 14.52: Entering a query in the query bar'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B15021_14_52.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 14.52: Entering a query in the query bar'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the `Save As` button at the top of the screen and select the `Dashboards`
    panel. When you are presented with this screen, select the panel to be added to
    a new dashboard and give it the name `PTA Monitoring`. Also, give the panel the
    title `Super User Access` and click `Save`:![Figure 14.53: Adding details to the
    dashboard panel'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B15021_14_53.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 14.53: Adding details to the dashboard panel'
  prefs: []
  type: TYPE_NORMAL
- en: 'When you are presented with your new dashboard, click the `Edit` and `Add`
    panel buttons. Select `New` and then `Single Value` as the visualization type.
    Set `Content Title` to `Database Creation`. Add the `source="http:docker logs"
    AND postgres-test AND CREATE DATABASE | stats count` source string and click `Save`.
    This will search through your logs to show if anyone has created any databases
    on the PostgreSQL database, which should only happen when the app is set up and created:![Figure
    14.54: Editing the dashboard panel'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B15021_14_54.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 14.54: Editing the dashboard panel'
  prefs: []
  type: TYPE_NORMAL
- en: Again, click the `New Panel` button and select `New` and then `Column Chart`
    from the visualizations. Add a `Content Title` of `App Usage`, add the `source="http:docker
    logs" AND postgres-test AND SELECT AND photo_viewer_photo earliest=-60m | timechart
    span=1m count` search query, and click `Save`. This search will provide you with
    a count over time of people who are using the app to view your photos.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Feel free to move the panels around the dashboard. When you are happy with
    the changes, click the `Save` button. Your dashboard should look similar to the following:![Figure
    14.55: New dashboard panel used to monitor PostgreSQL usage'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B15021_14_55.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 14.55: New dashboard panel used to monitor PostgreSQL usage'
  prefs: []
  type: TYPE_NORMAL
- en: This activity helped you gather log data for your Panoramic Trekking App and
    display it in a more user-friendly fashion using Splunk.
  prefs: []
  type: TYPE_NORMAL
- en: 15\. Extending Docker with Plugins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Activity 15.01: Installing WordPress with Network and Volume Plugins'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Solution:**'
  prefs: []
  type: TYPE_NORMAL
- en: 'It is possible to create containers for the database and the WordPress blog
    using volume and networking plugins with the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a network with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE187]'
  prefs: []
  type: TYPE_PRE
- en: 'This command creates a network using the Weave Net plugin, specified with the
    `driver` flag. In addition, the volume is specified as `attachable`, which means
    you can connect to Docker containers in the future. Finally, the name of the container
    will be `wp-network`. You should get output like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE188]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a volume with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE189]'
  prefs: []
  type: TYPE_PRE
- en: 'This command creates a volume over SSH using the `vieux/sshfs` plugin. The
    name of the volume is `wp-content` and additional options are passed for the `ssh`
    command, port, and password:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE190]'
  prefs: []
  type: TYPE_PRE
- en: 'Create the `mysql` container with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE191]'
  prefs: []
  type: TYPE_PRE
- en: This command runs the `mysql` container in detached mode, with the environment
    variables and the `wp-network` connection.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the `wordpress` container with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE192]'
  prefs: []
  type: TYPE_PRE
- en: This command runs the `wordpress` container in detached mode with the environment
    variables and the `wp-network` connection. In addition, port `80` of the container
    is available at port `8080` of the host system.
  prefs: []
  type: TYPE_NORMAL
- en: 'With the successful start, you will have two containers running for `mysql`
    and `wordpress`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE193]'
  prefs: []
  type: TYPE_PRE
- en: '![Figure 15.17: The WordPress and database containers'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/B15021_15_15.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 15.17: The WordPress and database containers'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `http://localhost:8080` in your browser to check the WordPress setup screen:![Figure
    15.18: WordPress setup screen'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/B15021_15_18.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 15.18: WordPress setup screen'
  prefs: []
  type: TYPE_NORMAL
- en: The WordPress setup screen verifies that WordPress is installed using the network
    and volume plugins.
  prefs: []
  type: TYPE_NORMAL
- en: In this activity, you have created a custom network using the Weave Net plugin
    and a custom volume using the `sshfs` plugin. You created a database container
    that uses the custom network and a WordPress container that uses the custom network
    and the custom volume. With a successful setup, your Docker containers connect
    with each other over custom networking and use the volume over SSH. With this
    activity, you have used Docker extensions for a real-life application. You can
    now confidently extend Docker with your custom business requirements and technologies.
  prefs: []
  type: TYPE_NORMAL
