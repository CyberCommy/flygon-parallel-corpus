- en: 13\. MongoDB Case Study
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Overview
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you will learn how MongoDB can be used in a business use case.
    It begins with a scenario wherein an imaginary city council and a local start-up
    jointly develop a mobile-application-based bike-sharing platform. It will then
    cover a detailed project proposal and a few challenges, and how the challenges
    are solved by using a MongoDB Atlas-based Database-as-a-Service solution. Finally,
    you will explore how MongoDB can be used for some use cases, go through each of
    them, and verify that the database design covers all the requirements.
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far in this book, we have successfully mastered various aspects of MongoDB,
    from a basic introduction to disaster recovery. For any tool or technology that
    you choose to learn, it is important to learn how it is used, and that is what
    we have achieved in the previous chapters. This final chapter, then, will focus
    on using this technology to solve real-life problems and to make life easier.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will study a use case of an imaginary city council and their
    upcoming bike-sharing project. First, we will look at the details of the project
    and see why it is needed; then, we will cover the requirements and find out how
    MongoDB can solve their problem.
  prefs: []
  type: TYPE_NORMAL
- en: Fair Bay City Council
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Fair Bay is a city located on the east coast of North Roseland and is traditionally
    known for its pleasant climate and historical significance. It is also one of
    the major business hubs of the country. Over the last two decades, this city has
    generated tremendous job opportunities and attracted talent from all over the
    country and across the globe. Consequently, it has seen a huge population rise
    over the last decade, which in turn has boosted the city's real estate market.
  prefs: []
  type: TYPE_NORMAL
- en: The city is expanding at a fast pace, and the local city council is working
    hard to assess and redevelop the city's basic infrastructure and facilities to
    maintain its ease of living index. They frequently conduct surveys and assessments
    of their public infrastructures to identify some of the most common issues raised
    by the public.
  prefs: []
  type: TYPE_NORMAL
- en: 'In past assessments and surveys, the following concerns were repeatedly raised
    by the residents of the local communities:'
  prefs: []
  type: TYPE_NORMAL
- en: Local transport is always crowded.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There is frequent traffic congestion.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fuel and parking prices are rising.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There is bad air quality in the central parts of the city.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Commute times are increasing.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To resolve these complaints, the council invites corporates, start-ups, and
    even the public to come forward with smart and innovative ideas and related project
    proposals. Upon close review and approval, the best proposals are sent to the
    Development and Planning Commission of the state for funding. The council's initiative
    has been a big success so far, as they have several popular ideas. This year,
    one of the submitted project proposals caught everyone's attention. One of the
    local start-ups has proposed a rollout of Fair Bay City Bikes, which is an online
    bike-sharing platform. Besides being a unique, innovative solution, it is also
    one of the most environmentally friendly project proposals. The details of their
    proposal are outlined in the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: Fair Bay City Bikes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Densely populated metropolitan cities often suffer from traffic congestion
    and overcrowded public transport. A bike-sharing program is a sustainable way
    of traveling for several reasons. It provides a healthier and cheaper mode of
    transportation than using cars, public transport, or private bikes. It involves
    procuring and parking bikes in various locations across the city. These bikes
    can be used by the public, on a first come first serve basis, to travel into the
    city. Typically, the booking and tracking of the bikes are controlled via an online
    platform. Studies and surveys have concluded that a well-implemented bike-sharing
    program can:'
  prefs: []
  type: TYPE_NORMAL
- en: Reduce traffic congestion
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improve air quality
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reduce car and public transport usage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Help people save money spent on other vehicles
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Encourage healthier lifestyles
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improve the sense of community
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For these reasons, many cities are actively encouraging bike riding by providing
    bike-sharing platforms and dedicated cycle lanes in the city. The Fair Bay City
    Bikes project is a next-generation bike-sharing platform with some unique qualities,
    such as automated self-locking and a user-friendly mobile app. Next, we will look
    at some of the major highlights of their proposal.
  prefs: []
  type: TYPE_NORMAL
- en: Proposal Highlights
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Some of the highlights of the Fair Bay City Bikes project are as follows.
  prefs: []
  type: TYPE_NORMAL
- en: Dockless Bikes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Fair Bay City Bike project is a dockless bike-sharing project. Generally,
    bikes need dedicated docking stations where they remain locked. Users need to
    access these docking stations to start and end their rides. The major drawback
    of such systems is setting up docking station infrastructure evenly across the
    city. Establishing such a network involves finding a safe and suitable place in
    every area, which is often unaffordable. Secondly, people tend to find it difficult
    to locate and access the docking stations. Not finding an empty docking station
    close to the destination is a common problem for users, which discourages them
    from using the system.
  prefs: []
  type: TYPE_NORMAL
- en: On the other hand, dockless bikes have a built-in automated self-locking and
    unlocking mechanism. They can be picked up, parked, and left in any safe place
    or any dedicated parking area. Users can pick up any of the bikes that are parked
    in their surrounding area and leave them in any safe parking space close to their
    destination.
  prefs: []
  type: TYPE_NORMAL
- en: Ease of Use
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The users can download and access the City Bikes app on their mobile phones.
    Upon providing a few personal details, such as name, phone number, and a government-issued
    photo ID such as a driver's license, they are free to use the bikes anytime theyÂ want.
  prefs: []
  type: TYPE_NORMAL
- en: To start a bike ride, users can use the find function in the app and, based
    on their location, a list of the closest available bikes will be displayed in
    a map view. The user can then select any of the available bikes and use the in-app
    navigation assistance to reach it. Next, the user needs to scan a unique Quick
    Response (QR) code located on the bike and then simply click to unlock it.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.1: QR code that the user can scan to unlock a bike'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15507_13_01.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 13.1: QR code that the user can scan to unlock a bike'
  prefs: []
  type: TYPE_NORMAL
- en: Once the bike is unlocked, it becomes temporarily associated with the user's
    account. Upon finishing the journey, the user needs to park the bike at a safe
    location, open the app, and click to lock the bike, which will in turn release
    it from the user's account.
  prefs: []
  type: TYPE_NORMAL
- en: Real-Time Tracking
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: All bikes have an inbuilt GPS tracking device, which enables real-time tracking
    of their locations. With this tracking ability, a user can easily search for available
    bikes in their surrounding area and use navigation assistance to access the bike.
  prefs: []
  type: TYPE_NORMAL
- en: Also, once the ride has started, each bike's location is tracked and logged
    into the system every 30 seconds. The logs will be used for reporting, analytics,
    and tracking the bikes in case of emergency or theft. Users can take the bikes
    24/7 to any part of the city and the real-time tracking helps them feel safe,
    no matter the time of the day.
  prefs: []
  type: TYPE_NORMAL
- en: Maintenance and Care
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: All bikes need periodic maintenance and careful inspections to ensure they work
    efficiently. This maintenance is done every 15 days, during which the bike is
    cleaned, the moving parts are lubricated, tire pressure is checked and regulated,
    and the brakes are inspected and adjusted. Every day, the system identifies the
    bikes that are due for maintenance, takes them out of the list of available bikes
    on the system, and notifies a team of technicians.
  prefs: []
  type: TYPE_NORMAL
- en: Technical Discussions and Decisions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The proposal is highly appreciated by the council members, and they are impressed
    with its cutting-edge features and low-cost implementations, as the dockless system
    is a lot cheaper than using docking bikes. The council is ready to procure the
    bikes, construct cycle lanes, and implement the signaling system throughout the
    city. They will also prepare the usage and safety guidelines as well as handling
    advertising. The team at the start-up is responsible for building the IT infrastructure
    and mobileÂ application.
  prefs: []
  type: TYPE_NORMAL
- en: The council has insisted that the team keep the IT infrastructure cost to a
    minimum, reduce the overall rollout time, and build a scalable and flexible system
    for future requirement changes. The technical team at the start-up did some research
    to address these conditions, as detailed in the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: Quick Rollout
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The team is on a tight schedule and needs to find a way to *build fast and ship
    fast*. The key to achieve this is to reduce research time and go with well-known
    and proven technologies. The technical team already has the mobile application
    and the backend application ready. The only thing they need to do now is to decide
    on a suitable database platform. A database is required to persist customer details,
    bike details, real-time locations of the bikes, and ride details. This database
    platform should be quick to set up without worrying much about the infrastructure,
    integrations, security, or backups. The team has decided to go for a **Database-as-a-Service**
    (**DBaaS**) solution to provide a reliable, scalable solution, and reduce the
    time to market.
  prefs: []
  type: TYPE_NORMAL
- en: Cost Effective
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As the council is simultaneously funding numerous projects, there is a bit of
    a budget crunch. For this reason, they have decided to start with 200 bikes first,
    observe the effectiveness, and seek public feedback. Based on this feedback, they
    are willing to increase the fleet size to 1,000, or even 2,000 if required. This
    increase in fleet size will in turn lead to an increase in the data to be managed.
    For this, **DBaaS** platforms are a great choice as it allows you to start with
    minimal setup and scale as and when youÂ need.
  prefs: []
  type: TYPE_NORMAL
- en: The initial 200 bikes mean at any time there will be 200 rides at most. Therefore,
    there will not be any need for large dataset processing, and so the team has decided
    to go for low RAM and low CPU clusters. As the fleet size grows, they can scale
    up or scale out and the costs will always be optimized to the usage requirements.
  prefs: []
  type: TYPE_NORMAL
- en: Flexible
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'During a council meeting, a few members made the following suggestions:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Charge fees: Only residents can use it free of charge, while tourists and visitors
    will be charged for each ride.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Use passport as valid proof of ID: Add passport to the list of valid IDs. Customers
    who do not have a photo ID provided by the government use their passports to enroll
    in the system.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Add scooters into the fleet: The system should support bike-sharing and scooterÂ sharing.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These suggestions will certainly improve the system by making it more user friendly.
    However, before they are incorporated into the system, some analysis needs to
    be carried out. Charging fees and supporting different types of ID verification
    requires integration with federal and external systems. This integration needs
    to comply with different rules, regulations, and safety and privacy policies issued
    by the concernedÂ departments.
  prefs: []
  type: TYPE_NORMAL
- en: Considering these challenges, the council has decided to stick to the current
    plan for phase 1 of the rollout. The requirements for the suggested changes will
    be finalized and incorporated in phase 2 of the project.
  prefs: []
  type: TYPE_NORMAL
- en: The technical team understands that the system needs to be flexible enough to
    incorporate any future changes that are still unknown or uncertain. With the current
    technical design, the user has a driving license number as ID, but it needs to
    be more flexible to store other types of ID. Also, to charge the fees, the schema
    needs to be flexible enough to incorporate users' bank accounts or credit card
    details. Similarly, to introduce scooters in the fleet (which may have different
    maintenance requirements or a different fee structure), the system needs to be
    able to differentiate between a cycle and a scooter.
  prefs: []
  type: TYPE_NORMAL
- en: In this scenario, traditional database entities, which are bound to strict schema
    definitions, are not a good choice. To incorporate some of the future changes,
    their schema definitions need to be updated first. With traditional databases,
    the schema changes are difficult to roll out and roll back. Upon careful consideration
    and comparison, the team has decided to go for a MongoDB Atlas cluster. MongoDB
    provides a flexible schema and horizontal as well as vertical scaling capabilities.
    The Atlas cluster helps to roll out a production-level system with just a few
    clicks and saves significantly on cost and time. In the next section, we will
    look at the detailed database design.
  prefs: []
  type: TYPE_NORMAL
- en: Database Design
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As per the requirements described in the previous sections, the three basic
    entities to be persisted are `user`, `vehicle`, and `ride`. The `user` and `vehicle`
    entities will store the attributes of users and vehicles respectively, while the
    `ride` entity will be created whenever a new ride is commenced.
  prefs: []
  type: TYPE_NORMAL
- en: Apart from the basic entities, an additional entity is needed to track the bike
    ride logs. For each active ride, the system captures and logs the bike's location.
    The logs will be used for reporting and analytics purposes.
  prefs: []
  type: TYPE_NORMAL
- en: Because of the document-based dataset offered by MongoDB, all the entities can
    easily be designed as collections. These collections and some of their sample
    records will be explored in the next sections.
  prefs: []
  type: TYPE_NORMAL
- en: Users
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `users` collection holds data for all who have registered in the system.
    The following code snippet shows a sample document that represents one of the
    registered users:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The primary key in the document is a randomly generated unique UUID string.
    There are other fields to hold the user's basic information, such as their first
    name, last name, date of birth, address, email address, and system registration
    date. The `id_documents` field is an array and currently stores driving license
    details. In the future, when other ID types such as passports are enabled, the
    user will be able to provide multiple ID details. The payment details are currently
    collected as a precaution. Customers will not be charged unless the bike is damaged
    or stolen during a ride. The `payments` field is an array and currently stores
    credit card details. Once the system is integrated with other payment gateways,
    the user will be given an option for other means of payment.
  prefs: []
  type: TYPE_NORMAL
- en: Vehicles
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `vehicles` collection represents the bikes in the fleet. City Bikes will
    have 200 bikes initially. The structure of a vehicle document with all the fields
    and example values is shown in the following snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The primary key in this document is a unique UUID string. This ID is used to
    uniquely refer to the vehicleâfor example, in the QR code or vehicle ride details.
    There are other static fields to represent the vehicle''s rollout date, manufacturer
    name, model, frame number, number of gears, and more. Considering the council''s
    plan to roll out scooters in the future, a field named `vehicle_type` is introduced.
    This field differentiates between a bike and a scooter. The `status` field denotes
    whether the bike is currently available, on a ride, or under maintenance (in this
    case, it is available). This field can hold any of these three values: `available`,
    `on_ride`, and `under_maintenance`. The last maintenance date helps identify whether
    the vehicle is due for maintenance. The `location` field represents the current
    geographical location of the vehicle, and it is represented in MongoDB''s geospatial
    index of `Point` type. The other optional fields, such as `has_basket`, `has_helmet`,
    and `bike_type`, are useful for serving customers with specific requirements.
    Note that the bike models can be categorized as `men`, `women`, or unisex bikes,
    while scooters are always `unisex`. Hence, the `bike_type` field will be present
    only if the `vehicle_type` isÂ `bike`.'
  prefs: []
  type: TYPE_NORMAL
- en: Rides
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `rides` collection represents the trips, and the total number of documents
    in this collection denotes the number of rides taken through the system:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Each ride has a primary key of a randomly generated UUID string. The `user_id`
    and `vehicle_id` fields denote the user currently availing themself of the ride
    and the vehicle, respectively. The `ride` document is created when the user unlocks
    the bike and the `start_time` and `start_location` fields are inserted upon creation.
    The `end_time` and `end_location` fields are created when the user locks the bike
    at the end of the trip. There is an optional field to represent the feedback,
    where the star rating and user comments are recorded.
  prefs: []
  type: TYPE_NORMAL
- en: Ride Logs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `ride_logs` collection records the progress of each active ride at 30-second
    intervals. This collection is mainly used for analytics and reporting purposes.
    By using the data in this collection, any ride''s complete path can be traced
    in real time. While on a ride, if the bike is involved in an accident or if the
    bike goes missing, the last logged entry of the bike can help to locate it. The
    following code snippet shows three consecutive log entries for the same bike ride:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Each of these log entries has a primary key of a unique UUID string. The document
    contains `ride_id`, which helps trace the ride, user, and vehicle details. The
    `time` and `location` fields help track the geographic coordinates of the vehicle
    at a given time. For analytics purposes, this collection can be used in numerous
    ways to generate useful statistics to identify and address existing issues or
    carry out future improvements. For example, this collection helps find the average
    bike speed for all rides, the average speed in certain areas, or the average speed
    of riders within certain age groups. By comparing these statistics, the council
    can identify the areas of the city in which riders tend to ride more slowly and
    provide adequate cycle lanes. Also, they can examine bike usage and speed patterns
    by the age of riders and designate safe speed limits. The collection also helps
    to find the most and least popular areas of the city for bike riders. Based on
    this information, the council can take appropriate measures to make more bikes
    available in popular areas and fewer bikes available in unpopular ones.
  prefs: []
  type: TYPE_NORMAL
- en: This section covered the details of the MongoDB database structure and the anatomy
    of the collections. In the next section, we will run through the various use cases
    using some example scenarios.
  prefs: []
  type: TYPE_NORMAL
- en: Use Cases
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The preceding sections provided an overview of the City Bikes system, the requirements
    and considerations, and the database structure. Now, we will list the system use
    cases using some example scenarios and the database queries to run through them.
    This will help verify the correctness of the design and help ensure that no requirement
    is missed.
  prefs: []
  type: TYPE_NORMAL
- en: User Finds Available Bikes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Consider a situation in which a user opens the app on their mobile phone and
    clicks to find a bike in a radius of 300 meters from their location. The user''s
    current coordinates are *Longitude 111.189528 and Latitude -72.454567*. The next
    snippet shows the corresponding database query:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The query finds all the bikes that are currently available and located within
    the requested 300-meter radius.
  prefs: []
  type: TYPE_NORMAL
- en: User Unlocks a Bike
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The user scans the QR code on the bike (`227fe7e0-76c7-410b-afe8-6ae5785ac937`)
    and clicks to unlock it. Unlocking a bike starts the ride and makes the bike unavailable
    to the other users.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using our database, this scenario can be implemented in two steps. First, the
    status of the bike should be changed, and then, a new ride entry should be created.
    The following snippet shows how to do this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding command sets the status of the bike to `on_ride`. As the status
    of the bike is no longer set to `available`, it will not appear in bike searches
    performed by other users. The next snippet shows the `insert` command on the `rides`
    collection:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: This `insert` command creates a new ride entry and associates the user, the
    bike, and the ride together. It also captures the start time and the start location
    of the ride.
  prefs: []
  type: TYPE_NORMAL
- en: User Locks the Bike
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'At the end of the trip, the user parks the bike at a safe location, opens the
    application, and clicks on the screen to finish the ride. This also requires two
    steps. First, the ride entry needs to be updated with the end-of-trip details.
    Second, the status and new location of the vehicle need to be updated:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding command sets the end time and the coordinates in the ride. Note
    that the absence of an end location and end time indicates that the ride is still
    in progress:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The preceding command marks the vehicle as available and updates its location
    with the new coordinates.
  prefs: []
  type: TYPE_NORMAL
- en: System Logs the Geographical Coordinates of Rides
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Every 30 seconds, a scheduled job queries for all the bikes from active rides,
    gathers their latest geographical coordinates through GPS, and creates ride log
    entries for each of them. The next snippet shows an `insert` command for the `logs`
    collection:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The preceding command demonstrates how a new ride log is created. It uses `new
    Date()` to log the current timestamp in *GMT* and inserts the latest location
    coordinates for the given bike ride.
  prefs: []
  type: TYPE_NORMAL
- en: System Sends Bikes for Maintenance
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'All the bikes need regular maintenance every two weeks. The technicians perform
    regular checks on the bikes and fix any identified problems. A scheduled job is
    carried out every night at midnight, and the last maintenance dates of all bikes
    are checked. The job helps find all the bikes whose maintenance has not been done
    in the last 15 days and marks them as due for maintenance. The bikes then become
    unavailable. The following command finds all the bikes where the last maintenance
    date is more than 15 days prior to the current date:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The `1000 * 60 * 60 * 24 * 15` expression represents 15 days in milliseconds.
    The calculated number of milliseconds is then subtracted from the current date
    to find that date 15 days ago. If the bike's `last_maintenance_date` field is
    older than 15 days, its status is marked as `under_maintenance`.
  prefs: []
  type: TYPE_NORMAL
- en: Technician Performs Fortnightly Maintenance
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The technician team finds all the bikes with the `under_maintenance` status,
    performs the maintenance, and makes the bikes available:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: This command sets the bike status as available and sets `last_maintenance_date`
    to the current timestamp.
  prefs: []
  type: TYPE_NORMAL
- en: Generating Stats
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The analysts are tasked with using the various stats generated by the app to
    identify areas of improvement and optimization as well as to assess the system
    benefits in terms of the money being spent. They can use the database in more
    than one way; however, we will use a sample use case for demonstration.
  prefs: []
  type: TYPE_NORMAL
- en: The city's Central Park (located at *108.146337, -78.617716*) is a very popular
    and crowded place. To make riding easy for cyclists, the council has built special
    cycle lanes in the area surrounding the park. The council wants to know how many
    City Bike riders have traveled on these lanes.
  prefs: []
  type: TYPE_NORMAL
- en: 'The analysts execute a quick query to find bike rides traveled through the
    area within a 200-meter radius of Central Park:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: This distinct query on the `ride_logs` filters all the log entries to find how
    many bike rides were geographically close to the given location and prints their
    ride IDs.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we discussed various scenarios where the app could be used
    and satisfied them with MongoDB queries and commands.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter explored the City Bikes project implemented by an imaginary city
    council. This began with a consideration of the predicted problems faced by the
    council and how the project proposal might address those problems. Among these
    considerations were the council's time and budget, uncertain requirements, and
    the technical team's decision to use a MongoDB Atlas-based **Database-as-a-Service**
    (**DBaaS**) solution to address all these issues. You studied the database design
    in detail and reviewed MongoDB queries to log, implement, and resolve several
    example scenarios in this example system.
  prefs: []
  type: TYPE_NORMAL
- en: Throughout this course, you have been introduced to various features and benefits
    of MongoDB through practical examples and applications. You started with the basics
    of MongoDB, looking at its nature and function, and how it differs from traditional
    RDBMS databases. You then uncovered the benefits offered by its JSON-based data
    structure and flexible schema. Next, you learned the core database operations
    and operators to find, aggregate, insert, update, and delete data from collections,
    as well as more advanced concepts such as performance improvement, replication,
    backup and restore, and data visualization. You also created your own MongoDB
    database cluster in the cloud using MongoDB Atlas, then loaded a real-life example
    dataset into the cluster, which you used throughout the book. Finally, this chapter
    concluded this course by demonstrating how MongoDB solutions can solve real-life
    problems.
  prefs: []
  type: TYPE_NORMAL
- en: With the knowledge and skills that you have gained over the course of this book,
    you will be able to implement a highly scalable, robust database design that meets
    business requirements at your workplace, or for your own personal projects.
  prefs: []
  type: TYPE_NORMAL
