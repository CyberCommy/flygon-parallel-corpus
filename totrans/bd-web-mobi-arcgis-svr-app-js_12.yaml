- en: Chapter 12. Creating Mobile Applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The ArcGIS Server API for JavaScript provides support for mobile platforms.
    Support is currently provided for iOS, Android, and BlackBerry operating systems.
    The API is integrated with `dojox/mobile`. In this chapter, you'll learn about
    the compact build of the API that makes web mapping applications possible through
    WebKit browsers as well as the built-in gesture support. Keep in mind that this
    is not the same as the ArcGIS API for iOS or Android, which is what you'd use
    to build native applications that can be made available through an app store.
    JavaScript API applications are rendered through the WebKit browser that is part
    of the mobile device.
  prefs: []
  type: TYPE_NORMAL
- en: We'll also cover the Geolocation API and how it can be integrated into your
    ArcGIS Server applications. The Geolocation API is a part of HTML5 and is used
    to get the location of a mobile device. Most mobile browsers support the Geolocation
    API specification that provides scripted access to geographical location information
    associated with a hosting device.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: ArcGIS API for JavaScript – a compact build
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting the viewport scale
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Time to practice with the compact build
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrating the Geolocation API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Time to practice with the Geolocation API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ArcGIS API for JavaScript – a compact build
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The ArcGIS API for JavaScript has a compact build that can be used to limit
    the footprint of the API, resulting in quicker downloads for mobile devices. This
    smaller footprint is a great choice for mobile applications, including the iPhone
    and iPad. There are two primary differences between the standard and compact builds
    of the API:'
  prefs: []
  type: TYPE_NORMAL
- en: The first difference is that the compact build only loads objects that are needed
    for your application. For example, if you don't need a `Calendar` widget, then
    it's not loaded.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The second difference is that the compact build only loads 32 code modules instead
    of the 80 modules loaded with the standard build. If you need to use a code module
    that is not downloaded as part of the compact build, then you can use the `require()`
    function to load the specific module that you use.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Referencing the compact build is as simple as adding the word `compact` to the
    end of your reference to the API. You will see an example later. Using the API
    in a mobile application isn't any different from the techniques you've learned
    for creating web applications. However, you will need to learn some new techniques
    for creating the user interface for mobile applications. There are a number of
    good JavaScript mobile frameworks available for accomplishing this task, including
    Dojox Mobile and jQuery Mobile. The mobile frameworks style the web content to
    make it look like a mobile application. Safari browsers look like an iPhone application
    and Android browsers look like an Android application. Creating mobile user interfaces
    is beyond the scope of this text but there are many good resources available in
    print and online. In the following code example, you will see how to add a reference
    to the compact build of the ArcGIS API for JavaScript. Note the inclusion of the
    compact keyword at the end of the API.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Setting the viewport scale
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You will want to use the `viewport <meta>` tag to set some initial display
    characteristics for your application. The `<meta>` tag should be included in the
    `<head>` section of your web page. A value of `1.0` for the initial scale is recommended
    and will fill the entire viewport of the screen. Values can be set between `0`
    and `1.0`. If you don''t set a width, your mobile browser will use `device-width`
    when in portrait mode. If you don''t set a height, the browser will use `device-height`
    when in landscape mode:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Time to practice with the compact build
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this exercise, you will build the most basic mobile mapping application possible.
    We're simply going to use the compact build of the ArcGIS Server API for JavaScript
    to create a mapping application centered on the town of Banff, Alberta, Canada.
    The application won't be able to do anything other than zoom and pan. There won't
    be any sort of user interface beyond just the map. The goal is just to illustrate
    the basic structure of a mobile application built with the API for JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: This exercise will be a little different from the exercises you've worked on
    in previous chapters. You won't use the ArcGIS API for JavaScript Sandbox. Instead,
    you'll write your code in a text editor (I recommend Notepad++) and test using
    a mobile emulator.
  prefs: []
  type: TYPE_NORMAL
- en: Before starting this exercise, you'll want to make sure you have access to a
    web server. If you don't have access to a web server or one that isn't already
    installed on your computer, you can download and install the open source web server,
    Apache ([http://httpd.apache.org/download.cgi](http://httpd.apache.org/download.cgi)).
    Microsoft IIS is another commonly used web server and there are many others that
    you can use as well. For the purposes of this exercise, I will assume that you
    are using the Apache web server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A web server installed on your local computer will be referred to through the
    URL `http://localhost`, which is used to access the web server. This points to
    the `htdocs` folder under `C:\Program Files\Apache Software Foundation\Apache2.2`
    if you've installed Apache on a Windows platform.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In your `ArcGISJavaScriptAPI` folder, you'll find a file called `mobile_map.html`.
    I have prewritten some of the code that you will use in this step, so that you
    can focus on adding referencing to the compact build as well as some other items
    related to mobile development. Use this file as your starting point and copy it
    to the root directory of your web server (`C:\Program Files\Apache Software Foundation\Apache2.2\htdocs`
    if you're using Apache on Windows).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open `mobile_map.html` in your favorite text editor. I recommend Notepad++,
    but you can use any text editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add a reference to the compact version of the API as well as the Esri stylesheet.
    Add the following highlighted lines of code to your application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'You will want to use the `viewport <meta>` tag attribute to set some initial
    display characteristics for your application. A value of `1.0` for the initial
    scale is recommended and will fill the entire viewport of the screen. Values can
    be set between `0` and `1.0`. If you don''t set a width, mobile browsers will
    use `device-width` when in portrait mode, and if you don''t set a height, they
    will use `device-height` when in landscape mode. Add the following line of code
    under the `<head>` tag at the start of the code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `<script>` tag, add the `require()` function seen highlighted in the
    following code snippet as well as the references that we''ll use in this exercise:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'As is the case with a traditional web mapping application built with the API
    for JavaScript, you will create a `<div>` tag to hold the map for your mobile
    application. With a mobile application, you will want to style the map so that
    it takes up the entire viewport of the mobile application. This is accomplished
    by setting the width and height to `100%`, respectively. Add the `<div>` map container
    to your application. Make sure that you set the style of the width and height
    to `100%`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Mobile devices can display their viewport in the standard or landscape mode
    simply by rotating the device. Your application will need to deal with these events
    as and when they occur. Add the `onorientationchange()` event to the `<body>`
    tag. The `onorientationchange()` event references a JavaScript function called
    `orientationChanged()`, which we have not yet defined. We''ll do that in the next
    step:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new `Map` object, set the basemap, and center the map as well as the
    zoom scale level:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Create the `orientationChanged()` JavaScript function, as seen in the following
    code. This function can be added anywhere inside the `<script>` tag:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Save the file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open a web browser and load an emulator. I recommend [iphone4simulator.com](http://iphone4simulator.com)
    but there are many others that you can use. These sites emulate how a website
    or application will look and behave.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You are also welcome to upload these exercise files to a web server that is
    outside the firewall if you'd prefer to view them on an actual mobile device rather
    than an emulator.
  prefs: []
  type: TYPE_NORMAL
- en: If you are using Apache, then you've most likely saved the file to the root
    location of the web server, which is `C:\Program Files\Apache Software Foundation\Apache2.2\htdocs`.
    The file can then be accessed through a web browser using the URL `http://localhost/mobile_map.html`.
    Type `http://localhost/mobile_map.html` in the emulator address bar, as seen in
    the following screenshot. You should see a map appear.![Time to practice with
    the compact build](graphics/7965_12_4.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The compact version of the API for JavaScript creates a *minified* version of
    the zoom scale slider. This is about as simple as a mapping application can get
    but hopefully it illustrates the basic characteristics of building a mobile mapping
    application.
  prefs: []
  type: TYPE_NORMAL
- en: You can use the zoom slider to zoom in and out and keep in mind that the ArcGIS
    Server API for JavaScript also supports gestures, so you can use a pinch gesture
    to zoom in and out as well. However, keep in mind that this will not work in the
    emulator. Use the zoom in and zoom out buttons on the interface for the application
    to zoom in and out as seen in the following screenshot:![Time to practice with
    the compact build](graphics/7965_12_5.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You may want to review the solution file (`mobile_map_solution.html`) in your
    `ArcGISJavaScriptAPI` folder to verify that your code has been written correctly.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Integrating the Geolocation API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Geolocation API can be integrated with your ArcGIS Server applications to
    get the location of a mobile device. It can also be used to get the location from
    a web-based application, but this isn't nearly as accurate as it uses the IP address
    rather than a GPS or cell tower triangulation.
  prefs: []
  type: TYPE_NORMAL
- en: 'This API has built-in security that requires explicit permission from the end
    user before this functionality can be used in an application. Mobile and web applications
    will both display a prompt that requests permission to obtain the current location
    of a device. This prompt will appear similar to what is shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Integrating the Geolocation API](graphics/7965_12_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Most browsers support the Geolocation API specification, which provides scripted
    access to geographical location information associated with a hosting device.
    The primary purpose of the Geolocation API is to identify the location of a mobile
    device. There are various ways in which a mobile device can be located, including
    cell tower triangulation, IP address, and GPS location. The `Geolocation.getCurrentPosition()`
    method returns the current location of the mobile device. You could easily use
    this API to place a point on the mapping application that corresponds to the current
    user location. The `Geolocation.watchPosition()` method can be used to track a
    location as it changes with a callback method being fired each time the position
    changes. So, if your application needs to be able to track the location of a device
    over time, then you'll want to use `watchPosition()` instead of `getCurrentPosition()`,
    which simply gets the location at a single point in time.
  prefs: []
  type: TYPE_NORMAL
- en: The following code snippet contains a simple example detailing the basic use
    of a Geolocation API. The first thing we do is check whether the browser supports
    the Geolocation API. This is done with the `navigator.geolocation` property, which
    returns a value of `true` or `false`. Generally, this will prompt the user to
    allow the application to collect the current location and also make sure that
    the browser supports Geolocation.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To see if your browser supports Geolocation or any other HTML5 feature, go to
    [http://caniuse.com/](http://caniuse.com/).
  prefs: []
  type: TYPE_NORMAL
- en: 'If the browser supports the Geolocation API and the end user gives it permission
    to collect the location, then we call the `geolocation.getCurrentPosition()` method.
    The first parameter passed to this method indicates a success callback function,
    which will be executed if the device is located successfully. Similarly, an error
    callback function can also be provided (`locationError`). A `Position` object
    is passed to the success callback function. This `Position` object can then be
    examined to obtain the latitude/longitude coordinates of the location. That''s
    what we''ve done in the `zoomToLocation()` function which accepts a `Position`
    object as the only parameter. This function then obtains the latitude/longitude
    coordinates and plots the point on the map:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Time to practice with the Geolocation API
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this exercise, you will learn how to integrate the Geolocation API into an
    ArcGIS Server API for JavaScript application.
  prefs: []
  type: TYPE_NORMAL
- en: Open the JavaScript Sandbox at [http://developers.ArcGIS.com/en/javascript/sandbox/sandbox.html](http://developers.ArcGIS.com/en/javascript/sandbox/sandbox.html).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Remove the JavaScript content from the `<script>` tag that I have highlighted
    in the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following references for the objects that we''ll use in this exercise:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new `Map` object centered on San Diego, CA, with a basemap layer of
    the streets. This will serve as the default map and zoom extent if the browser
    you are using doesn''t support the Geolocation API or if permission to access
    the current device location is not provided:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Create an `if` statement that checks for browser support of the Geolocation
    API and gains permission to access the current device location. The `Navigator.geolocation`
    property will return a `true` or `false` value. If the browser supports the Geolocation
    API and permission is given by the end user, then this property will contain a
    `true` value:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see from the code you''ve added in the previous step, the `Geolocation.getCurrentPosition()`
    function defines two callback functions—one for success (`zoomToLocation`) and
    one for failure (`locationError`). In this step, you''ll create the success callback
    function by adding the following code block. The success callback function, called
    `zoomToLocation`, will zoom to the location of the mobile device:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s add the error callback function called `locationError()`. This
    function will test for various types of errors related to not being able to find
    the current location of the device. Add the following function just below the
    success callback function that you created in the previous step:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: You may want to review the solution file (`geolocation.html`) in your `ArcGISJavaScriptAPI`
    folder to verify that your code has been written correctly.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Run** button. Initially, you should see a message similar to
    that displayed in the following screenshot:![Time to practice with the Geolocation
    API](graphics/7965_12_2.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Share Location** and if the browser you are using supports the Geolocation
    API, then a new map should be displayed with your current location, represented
    by a symbol. Your location will obviously differ from mine.![Time to practice
    with the Geolocation API](graphics/7965_12_3.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Mobile GIS applications are becoming very popular and the ArcGIS Server API
    for JavaScript can be used to quickly develop applications that are supported
    in both web and mobile applications. The API comes with built-in gesture support
    and supports iOS, Android, and BlackBerry platforms. The compact version of the
    API provides a smaller footprint that downloads quickly on mobile platforms. In
    addition, you can combine the Geolocation API into your applications, in order
    to locate the device and update the map to show the current location. In the next
    chapter, you will learn basic techniques used for designing and creating the layout
    of your application.
  prefs: []
  type: TYPE_NORMAL
