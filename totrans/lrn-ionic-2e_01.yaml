- en: Angular - A Primer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When Sir Timothy Berners-Lee invented the Internet, he never anticipated that
    the Internet would be used to publish selfies, share cat videos, or bomb web page
    with ads. His main intention (guessing) was to create a web of documents so a
    user on the Internet can access these hypertexts from anywhere and make use of
    it.
  prefs: []
  type: TYPE_NORMAL
- en: 'An interesting article published by Craig Buckler at Sitepoint titled, The
    Web Runs Out of Disk Space ([http://www.sitepoint.com/web-runs-disk-space/](http://www.sitepoint.com/web-runs-disk-space/)),
    shows how the content on the Internet is spread out:'
  prefs: []
  type: TYPE_NORMAL
- en: 28.65% pictures of cats
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 16.80% vain selfies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 14.82% pointless social media chatter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 12.73% inane vlogger videos
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 9.76% advertising/clickbait pages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 8.70% scams and cons
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 4.79% articles soliciting spurious statistics
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 3.79% new JavaScript tools/libraries
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 0.76% documents for the betterment of human knowledge
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can see, since the invention of the Internet to the present day, how we
    have evolved. *Better evolution needs better frameworks* to build and manage such
    apps that need to be scalable, maintainable, and testable. This is where Angular
    stepped in back in 2010 to fill the gap and it has been evolving quite well since
    then.
  prefs: []
  type: TYPE_NORMAL
- en: We are going to start our journey by understanding the new changes to Angular,
    the importance of TypeScript, and see how Ionic 2 has adapted itself with Angular
    to help build performance-efficient and modern Mobile Hybrid apps.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will take a quick peek at new topics added as part of Angular
    with the help of an example. The main changes that have taken place in Angular
    (2) are primarily on the lines of performance and componentization, apart from
    the language update. We will be going through the following topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: What is new in Angular?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TypeScript and Angular
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building a Giphy app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is new in Angular?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Angular 2 is one of the most anticipated and dramatic version upgrades I have
    seen for any software. Angular 1 was a boon to web/mobile web/hybrid app developers,
    where managing a lot of things was made easy. Not only did Angular 1 help restructure
    client-side app development, but it also provided a platform to build applications;
    not websites, but applications. Though the first release suffered performance
    issues when dealing with large datasets, the Angular team bounced back quite well
    with the later releases of Angular 1, that is, Angular 1.4.x and above, and fixed
    these performance issues by releasing a more stable version in the form of Angular
    (2).
  prefs: []
  type: TYPE_NORMAL
- en: 'Some of the new changes that have accompanied with Angular (2) are:'
  prefs: []
  type: TYPE_NORMAL
- en: Speed and performance improvements.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Component based (not the typical MV*).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Angular CLI.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Simple and expressive syntax.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Progressive Web Apps (PWA).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cross-platform app development, which includes desktops, mobile, and web.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cordova-based Hybrid app development.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Angular Universal provider for the server side for fast initial views.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Upgrades to better animation, internationalization, and accessibility.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Angular can be written on ES5, ES6, TypeScript, and Dart are based on the user's
    comfort with the JavaScript flavor.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With these new updates, developing apps has never been easier, be it on the
    desktop, mobile, or Mobile Hybrid environments.
  prefs: []
  type: TYPE_NORMAL
- en: 'Note: The latest version of Angular is going to be called just Angular, not
    Angular 2, or AngularJS 4, or NG4\. So throughout this book, I will refer to Angular
    version 2 as Angular.'
  prefs: []
  type: TYPE_NORMAL
- en: The current latest version of Angular is 4\. Do checkout [Chapter 11](part0170.html#523VK0-9757c8e51afd47e0a7a9ced32db749b8),
    *Ionic 3*, to know a bit more about Angular 4 and how it improves Ionic.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can find more information about Angular here: [https://angular.io](https://angular.io).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Note: If you are new to Angular, you can refer to these books:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.packtpub.com/web-development/learning-angular-2](https://www.packtpub.com/web-development/learning-angular-2)'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.packtpub.com/web-development/mastering-angular-2-components](https://www.packtpub.com/web-development/mastering-angular-2-components)'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.packtpub.com/web-development/mastering-angular-2](https://www.packtpub.com/web-development/mastering-angular-2)'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.packtpub.com/web-development/angular-2-example](https://www.packtpub.com/web-development/angular-2-example)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Or these videos:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.packtpub.com/web-development/angular-2-projects-video](https://www.packtpub.com/web-development/angular-2-projects-video)'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.packtpub.com/web-development/web-development-angular-2-and-bootstrap-video](https://www.packtpub.com/web-development/web-development-angular-2-and-bootstrap-video)'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.packtpub.com/web-development/angular-2-web-development-TypeScript-video](https://www.packtpub.com/web-development/angular-2-web-development-TypeScript-video)'
  prefs: []
  type: TYPE_NORMAL
- en: TypeScript primer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Angular uses TypeScript extensively for app development. Hence as part of the
    Angular primer, we will refresh the necessary TypeScript concepts as well.
  prefs: []
  type: TYPE_NORMAL
- en: If you are new to TypeScript, TypeScript is a typed superset of JavaScript that
    compiles to plain JavaScript. TypeScript provides static typing, classes, and
    interfaces and supports almost all features of ES6 and ES7 before they land in
    the browser.
  prefs: []
  type: TYPE_NORMAL
- en: A TypeScript file is saved with a `.ts` extension.
  prefs: []
  type: TYPE_NORMAL
- en: The main advantage of adding typings to an untyped language (JavaScript) is
    to make IDEs understand what we are trying to do and better assist us while coding;
    in other words, Intellisense.
  prefs: []
  type: TYPE_NORMAL
- en: Having said that, here is what we can do with TypeScript.
  prefs: []
  type: TYPE_NORMAL
- en: Variable typing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In vanilla JavaScript, we would do something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: But in TypeScript, we cannot do as shown in the preceding code snippet, the
    TypeScript compiler would complain as we are modifying the variable type at runtime.
  prefs: []
  type: TYPE_NORMAL
- en: Defining types
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When we declare variables, we can optionally declare the types of variables.
    For instance:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This increases the predictability of what we are trying to do.
  prefs: []
  type: TYPE_NORMAL
- en: Classes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I am a guy who believes that JavaScript is an object-based programming language
    and not an object-oriented programming language, and I know quite a lot of people
    who disagree with me.
  prefs: []
  type: TYPE_NORMAL
- en: 'In vanilla JavaScript, we have functions, which act like a class and exhibit
    prototype-based inheritance. In TypeScript/ES6, we have the class construct:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, we have defined a class named Person and we are defining
    the class constructor, which accepts the name on initialization of the class.
  prefs: []
  type: TYPE_NORMAL
- en: To initialize the class, we will invoke the class with a new keyword and pass
    in the name to the constructor. The variable that stores the instance of the class
    -- the object, `arvind` in the preceding example, can also be typed to the class.
    This helps in better understanding the possibilities of the `arvind` object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Note: The classes in ES6 still follow Prototypal-based Inheritance and not
    the classical Inheritance model.'
  prefs: []
  type: TYPE_NORMAL
- en: Interface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we start building complex apps, there will be a common need for a certain
    type of structure to be repeated throughout the app, which follows certain rules.
    This is where an interface comes into the picture. Interfaces provide *structural
    subtyping* or *duck* *typing* to check the type and *shape* of entities.
  prefs: []
  type: TYPE_NORMAL
- en: 'For instance, if we are working with an app that deals with cars, every car
    will have a certain common structure that needs to be adhered to when used within
    the app. Hence we create an interface named ICar. Any class working with cars
    will implement this interface as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Modules and imports
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In vanilla JavaScript, you must have observed code blocks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Modules are achieved in ES6/TS using the imports and exports syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: These are the bare essentials that we would need to get started with TypeScript.
    We will look at more such concepts where needed.
  prefs: []
  type: TYPE_NORMAL
- en: With this we wrap up the key concepts needed to get started with TypeScript.
    Let us get started with Angular.
  prefs: []
  type: TYPE_NORMAL
- en: 'For more information on TypeScript, check out: [https://www.TypeScriptlang.org/docs/tutorial.html](https://www.typescriptlang.org/docs/tutorial.html).
    Also check out the TypeScript introduction video: [https://channel9.msdn.com/posts/Anders-Hejlsberg-Introducing-TypeScript](https://channel9.msdn.com/posts/Anders-Hejlsberg-Introducing-TypeScript).'
  prefs: []
  type: TYPE_NORMAL
- en: Angular
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Angular (2) has added a bunch of new features and updated existing features
    and removed a few over Angular 1.x. In this section, we will go through some of
    the essential features of Angular.
  prefs: []
  type: TYPE_NORMAL
- en: Components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Angular components are inspired by the Web Components specification. At a very
    high level, Web Components have four pieces:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Custom elements**: A user can create their own HTML element.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**HTML imports**: Import one HTML document into another.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Templates**: HTML definitions of the custom elements.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Shadow DOM**: A specification to write encapsulated logic of custom elements.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The preceding four specifications explain how a frontend developer can develop
    their own standalone, isolated, and reusable components, similar to a HTML select
    box (`<select></select>`), or a text area (`<textarea></textarea>`), or an input
    (`<input />`).
  prefs: []
  type: TYPE_NORMAL
- en: 'You can read more about the Web Component specification here: [https://www.w3.org/standards/techs/components#w3c_all](https://www.w3.org/standards/techs/components#w3c_all).'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you would like to dig deeper into the Web Component, check out: [http://webcomponents.org/](http://webcomponents.org/).'
  prefs: []
  type: TYPE_NORMAL
- en: As mentioned, Angular is (loosely) built on Web Components, where the preceding
    four specifications are implemented in an Angular way.
  prefs: []
  type: TYPE_NORMAL
- en: 'In simple terms, our entire app is a tree of components. For example, if we
    look at the world''s most viewed page, [https://www.google.com](https://www.google.com),
    it would look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00005.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: And if we had to build this page in Angular, we would first split the page into
    components.
  prefs: []
  type: TYPE_NORMAL
- en: 'A visual representation of all the components that go into the preceding page
    would look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00006.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Note: Each black box is a (custom) component.'
  prefs: []
  type: TYPE_NORMAL
- en: As we can see from the preceding figure, the entire page is a tree of custom
    components.
  prefs: []
  type: TYPE_NORMAL
- en: 'A (custom) component would typically consist of three pieces:'
  prefs: []
  type: TYPE_NORMAL
- en: '`component.ts`: This represents the component logic'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`component.html`: This represents the component view (template)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`component.css`: This represents the component specific styles'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To build a custom component, we need to use a `Component` decorator on top of
    a class. In simple terms, a decorator lets us configure a class with specific
    metadata on them. This metadata will then be used by Angular to understand the
    behavior of that class. Decorators start with an `@`, followed by the name of
    the decorator.
  prefs: []
  type: TYPE_NORMAL
- en: 'The component decorator tells Angular that the class being processed needs
    to exhibit the behavior of an Angular component. A simple decorator would look
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Some of the properties that go into a component decorator are:'
  prefs: []
  type: TYPE_NORMAL
- en: '`selector`: CSS selector that identifies this component in a template'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`templateUrl`: URL to an external file containing a template for the view'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`styleUrls`: List of URLs to style sheets to be applied to this component''s
    view'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`providers` : List of providers available to this component and its children'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To know more about the Component decorator, refer to the following link: [https://angular.io/docs/ts/latest/api/core/index/Component-decorator.html](https://angular.io/docs/ts/latest/api/core/index/Component-decorator.html)'
  prefs: []
  type: TYPE_NORMAL
- en: Zones
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Zones are one of the new concepts that have been introduced in Angular. The
    concept of Zones was migrated from Dart to JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: The main reason why a lot of developers were attracted towards Angular initially
    was by its *Auto-magic Data Binding* among other things. This was achieved using
    scopes in Angular 1.x. In Angular 2, we are using Zone.js ([https://github.com/angular/zone.js](https://github.com/angular/zone.js))
    to achieve the same.
  prefs: []
  type: TYPE_NORMAL
- en: Whenever there is a change in the data, Angular updates the appropriate *stakeholders* (variables,
    interfaces, providers, and so on) with new data. Angular can track all synchronous
    activities quite easily. But for change detection in asynchronous code, such as
    event handling, AJAX calls, or Timers, Angular 2 uses Zone.js.
  prefs: []
  type: TYPE_NORMAL
- en: 'To know more about zones, how they work, and change detection in Angular, check
    out Zones in Angular: [http://blog.thoughtram.io/angular/2016/02/01/zones-in-angular-2.html](http://blog.thoughtram.io/angular/2016/02/01/zones-in-angular-2.html)
    and Angular change detection explained: [http://blog.thoughtram.io/angular/2016/02/22/angular-2-change-detection-explained.html](http://blog.thoughtram.io/angular/2016/02/22/angular-2-change-detection-explained.html).'
  prefs: []
  type: TYPE_NORMAL
- en: Templates
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Templates are used to bind the component logic to the HTML. Templates are also
    used as an interface between the user interaction of the user and app logic.
  prefs: []
  type: TYPE_NORMAL
- en: Templates have changed quite a bit when compared to version 1 of Angular. But
    there are a few things that still remain the same. For instance, the way we take
    a value from a component and display it in the user interface remains the same
    with the double curly brace notation (interpolation syntax).
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a sample `app.component.ts`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The `app.component.html` would look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Templates can also be made inline by passing in the template metadata to the
    decorator instead of `templateUrl`. This would look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The `template` metadata takes higher priority over `templateUrl`. For example,
    if we have defined both a `template` and `templateUrl` metadata, `template` is
    picked up and rendered.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can also write multiline templates using backtick(`) instead of quotes,
    in both ES6 as well as TypeScript. For more information, refer to Template Literals:
    [https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Template_literals](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Template_literals)'
  prefs: []
  type: TYPE_NORMAL
- en: In Angular 1.x, we have core/custom directives. But in Angular (2), we have
    various notations, using which we achieve the same behavior of a directive from
    Angular 1.
  prefs: []
  type: TYPE_NORMAL
- en: 'For instance, if we want to add a custom class to an element based on the truthiness
    of an expression, it would look this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The preceding is a replacement for the famous `ng-class` Angular 1.x directive.
  prefs: []
  type: TYPE_NORMAL
- en: 'To handle events, we use the `( )` notation, as in:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: And this `pullhair()` is defined inside the component class.
  prefs: []
  type: TYPE_NORMAL
- en: 'To keep the data bindings up to date, we use the `[( )]` notation, as in:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: This keeps the name property in the component class in sync with the textbox.
  prefs: []
  type: TYPE_NORMAL
- en: 'An example of `*ngFor`, which is a replacement for `ng-repeat`, is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Note that `let` in front of `todo` indicates that it is a local variable in
    that zone.
  prefs: []
  type: TYPE_NORMAL
- en: These are some of the basic concepts that we need to get started with our hands-on
    example. I will talk about other Angular (2) concepts as and when they appear
    in our app.
  prefs: []
  type: TYPE_NORMAL
- en: Giphy app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using the concepts we have learned so far, we are going to build a simple app
    using Angular and an Open JSON API provider named Giphy.
  prefs: []
  type: TYPE_NORMAL
- en: Giphy ([http://giphy.com](http://giphy.com)) is a simple Gif search engine.
    The guys at Giphy exposed an open REST API that we can consume and do a bunch
    of things with the data.
  prefs: []
  type: TYPE_NORMAL
- en: 'The app we are going to build is going to talk to the Giphy JSON API and return
    the results. Using Angular, we are going to build interfaces for three features
    in the app:'
  prefs: []
  type: TYPE_NORMAL
- en: Show a random Gif
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Show trending Gifs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Search a Gif
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will be using Angular CLI ([https://cli.angular.io/](https://cli.angular.io/))
    and Twitter Bootstrap ([http://getbootstrap.com/](http://getbootstrap.com/)) with
    the Cosmos theme ([https://bootswatch.com/cosmo/](https://bootswatch.com/cosmo/)).
  prefs: []
  type: TYPE_NORMAL
- en: Before we start building the app, let's first understand the app structure.
  prefs: []
  type: TYPE_NORMAL
- en: Architecture
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The first thing we are going to look at is the architecture of the app. On
    the client side, we will have a router, from which all things start flowing. The
    router will have four routes:'
  prefs: []
  type: TYPE_NORMAL
- en: Home route
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Browse route
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Search route
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Page Not Found route
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will have one service, with three methods that will interact with the Giphy
    REST API.
  prefs: []
  type: TYPE_NORMAL
- en: 'Apart from the previously mentioned items, we will have the following components:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Nav Component**: App Navbar'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Home Component**: Home Page which shows a random gif'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Trending Component**: Show trending gifs'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Search Component**: Search a gif'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Giphy Component**: Template for a gif'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Page not found Component**: To show a page that tells the user that nothing
    is found'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The component tree for this would look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00007.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Giphy API is quite easy to understand and use. You can find the official
    API documents here: [https://github.com/Giphy/GiphyAPI](https://github.com/Giphy/GiphyAPI).'
  prefs: []
  type: TYPE_NORMAL
- en: 'The APIs that we are going to consume are:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Random Gif: [http://api.giphy.com/v1/gifs/random?api_key=dc6zaTOxFJmzC](http://api.giphy.com/v1/gifs/random?api_key=dc6zaTOxFJmzC)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Trending Gifs: [http://api.giphy.com/v1/gifs/trending?api_key=dc6zaTOxFJmzC](http://api.giphy.com/v1/gifs/trending?api_key=dc6zaTOxFJmzC)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Search Gifs: [http://api.giphy.com/v1/stickers/search?q=cat&api_key=dc6zaTOxFJmzC](http://api.giphy.com/v1/stickers/search?q=cat&api_key=dc6zaTOxFJmzC)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can navigate to the preceding links to see the sample data.
  prefs: []
  type: TYPE_NORMAL
- en: At the time of writing, Giphy exposed `dc6zaTOxFJmzC` as the API key to use.
  prefs: []
  type: TYPE_NORMAL
- en: Angular CLI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To develop our Giphy app, we are going to use Angular CLI. If you are new to
    the CLI and its features, I recommend checking out this video: Simple Angular
    2 App With Angular CLI: [https://www.youtube.com/watch?v=QMQbAoTLJX8](https://www.youtube.com/watch?v=QMQbAoTLJX8).'
  prefs: []
  type: TYPE_NORMAL
- en: This example is written with Angular CLI version 1.0.0-beta.18.
  prefs: []
  type: TYPE_NORMAL
- en: Installing software
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For us to successfully develop the Angular-Giphy App, we need to have Node.js
    installed ([https://nodejs.org/en](https://nodejs.org/en)). We will be using NPM
    ([https://www.npmjs.com](https://www.npmjs.com)) to download the required modules
    via the Angular CLI.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once Node.js is installed, open a new command prompt/terminal and run the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: This will go ahead and install the Angular CLI generator. That is all we would
    need to start developing our app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Note: I have used angular-cli version 1.0.0 to build this app.'
  prefs: []
  type: TYPE_NORMAL
- en: Text editors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Regarding text editors, you can use any editor to work with Angular as well
    as Ionic. You can also try Sublime text ([http://www.sublimetext.com/3](http://www.sublimetext.com/3))
    or Atom editor ([https://atom.io/](https://atom.io/)) or Visual Studio Code ([https://code.visualstudio.com/](https://code.visualstudio.com/))
    for working with the code.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are using Sublime text, you can take a look at: [https://github.com/Microsoft/TypeScript-Sublime-Plugin](https://github.com/Microsoft/TypeScript-Sublime-Plugin)
    to add TypeScript intelligence to your editor. And for Atom, refer to the following
    link: [https://atom.io/packages/atom-TypeScript](https://atom.io/packages/atom-typescript).'
  prefs: []
  type: TYPE_NORMAL
- en: Scaffolding an Angular 2 app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The first thing we are going to do is scaffold an Angular app using the Angular
    CLI. Create a new folder named `chapter1` and open a command prompt/terminal in
    that folder and run the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Now Angular CLI generator will go ahead and create all the files and folders
    necessary to work with our Angular app.
  prefs: []
  type: TYPE_NORMAL
- en: 'As mentioned earlier, you can check out Simple Angular 2 app with Angular CLI:
    [https://www.youtube.com/watch?v=QMQbAoTLJX8](https://www.youtube.com/watch?v=QMQbAoTLJX8),
    as well to go through Angular CLI docs: [https://cli.angular.io/reference.pdf](https://cli.angular.io/reference.pdf)
    to know more about it.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The scaffolded project structure would look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'We will be spending most of our time inside the `src` folder. Once the project
    is completely scaffolded, `cd` into the `giphy-app` folder and run the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'This will start the built-in server. Once the build is completed, we can navigate
    to [http://localhost:4200](http://localhost:4200) to view the page. The page should
    look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00008.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Building the Giphy app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have all the pieces to get started, we will start off by adding
    Twitter Bootstrap CSS to the app.
  prefs: []
  type: TYPE_NORMAL
- en: 'For this example, we will be using a Bootstrap theme from [https://bootswatch.com/](https://bootswatch.com/)
    named Cosmos. We can find the Cosmos CSS theme on the theme page: [https://bootswatch.com/cosmo/](https://bootswatch.com/cosmo/),
    by clicking on the Cosmos dropdown and selecting the `bootstrap.min.css` option.
    Or alternatively, we can find it here: [https://bootswatch.com/cosmo/bootstrap.min.css](https://bootswatch.com/cosmo/bootstrap.min.css).'
  prefs: []
  type: TYPE_NORMAL
- en: If you want, you can use any other theme or the vanilla Bootstrap CSS as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'To add the theme file, navigate to `giphy-app/src/styles.css` and add the following
    line inside it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: That is it, now our app is powered with Twitter Bootstrap CSS.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we will start working on our app''s main page. For that we will be leveraging
    an example template from Twitter Bootstrap named the Starter Template. The template
    can be found here: [http://getbootstrap.com/examples/starter-template/](http://getbootstrap.com/examples/starter-template/).'
  prefs: []
  type: TYPE_NORMAL
- en: The Starter template consists of a navigation bar and a body section where the
    content gets displayed.
  prefs: []
  type: TYPE_NORMAL
- en: For the Navbar section, we will be generating a new component named `nav-bar`
    and updating the relevant code in it.
  prefs: []
  type: TYPE_NORMAL
- en: 'To generate a new custom component using Angular CLI, navigate to the `giphy-app`
    folder and run the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Note: You can either kill the current running command or spawn a new command
    prompt/terminal to run the preceding command.'
  prefs: []
  type: TYPE_NORMAL
- en: 'And you should see something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Now open `giphy-app/src/app/nav-bar/nav-bar.component.html` and update it as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: All we are doing here is creating the header bar with two menu items and the
    app name, which acts as a link to the home page.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we will update the `giphy-app/src/app/app.component.html` to load the
    `nav-bar` component. Replace the contents of that file with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Next, we will start adding routes to the app. As discussed earlier, we are going
    to have three routes.
  prefs: []
  type: TYPE_NORMAL
- en: 'To add routing support to the current app, we need to do three things:'
  prefs: []
  type: TYPE_NORMAL
- en: Create the routes needed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configure `@NgModule`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tell Angular where to load the content of these routes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At the time of writing, Angular CLI has disabled route generation. Hence we
    are going to create the same manually. Otherwise we could simply run `ng generate
    route home` to generate the home route.
  prefs: []
  type: TYPE_NORMAL
- en: 'So first, let''s define all the routes. Create a new file named `app.routes.ts`
    inside the app folder. Update the file as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: All we have done here is exported an array of routes. Do notice the path `'**'`.
    This is how we define the other section of the routes.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will create the required components now. Run the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we will configure the `@NgModule`. Open `giphy-app/src/app/app.module.ts`
    and add the following imports at the top:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, update the `imports` property of the `@NgModule` decorator as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'The completed page would look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Now we will update the app component to show the Navbar as well as the current
    route content.
  prefs: []
  type: TYPE_NORMAL
- en: 'Update the `giphy-app/src/app/app.component.html` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Using the `router-outlet`, we tell the router to load the current route content
    at that location.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to know more about routing in Angular, you can check out: Routing
    in Eleven Dimensions with Component Router by Brian Ford: [https://www.youtube.com/watch?v=z1NB-HG0ZH4](https://www.youtube.com/watch?v=z1NB-HG0ZH4).'
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will update the home component HTML and test the app so far.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `giphy-app/src/app/home/home.component.html` and update it as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Once this is done, save the file and run the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'And we should see the following page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00009.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'As we can see, the page looks broken. Let''s fix this by adding a couple of
    styles. Open `giphy-app/src/styles.css` and add the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Now our page will look as expected:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00010.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Next, we will start by writing the service to talk to the Giphy API. We will
    be writing three methods, one to get a random gif, one to get the latest trends,
    and one to search the Gif API with a keyword.
  prefs: []
  type: TYPE_NORMAL
- en: 'To get started, we will generate a service. Run the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: As shown in the warning, the service that has been generated has not been marked
    as a provider. So we need to do that manually.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `giphy-app/src/app/app.module.ts` and import the `GiphyService`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, add the `GiphyService` as a provider in the `@NgModule` decorator, `providers`
    property:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'The complete `giphy-app/src/app/app.module.ts` would look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we will update the `giphy-app/src/app/giphy.service.ts` with the three
    methods. Open `giphy-app/src/app/giphy.service.ts` and update it as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: All we are doing here is making an HTTP GET request to the corresponding Giphy
    API URLs and returning an Observable.
  prefs: []
  type: TYPE_NORMAL
- en: In RxJS ([http://reactivex.io/rxjs/](http://reactivex.io/rxjs/)), an Observable
    is an entity, which can change over a period of time. This is the most basic building
    block of RxJS. An Observer subscribes to an Observable and reacts to its changes.
    This pattern is called a Reactive pattern.
  prefs: []
  type: TYPE_NORMAL
- en: 'Quoting from the documentation:'
  prefs: []
  type: TYPE_NORMAL
- en: This pattern facilitates concurrent operations because it does not need to block
    while waiting for the Observable to emit objects, but instead it creates a sentry
    in the form of an observer that stands ready to react appropriately at whatever
    future time the Observable does so.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are new to Observables, you can start here: [http://reactivex.io/documentation/observable.html](http://reactivex.io/documentation/observable.html)
    followed by: Taking advantage of Observables in Angular: [http://blog.thoughtram.io/angular/2016/01/06/taking-advantage-of-observables-in-angular2.html](http://blog.thoughtram.io/angular/2016/01/06/taking-advantage-of-observables-in-angular2.html)
    and Angular 2 HTTP requests with Observables: [https://scotch.io/tutorials/angular-2-http-requests-with-observables](https://scotch.io/tutorials/angular-2-http-requests-with-observables).'
  prefs: []
  type: TYPE_NORMAL
- en: Now that the service is completed, we will update the `HomeComponent` to get
    a random gif and display it on the home page.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `giphy-app/src/app/home/home.component.ts` and update it as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, first off, we have imported `GiphyService` and added
    it to the constructor. Next, we have written `getRandomGif()` and invoked `getRandomGif()`
    from the constructor. In `getRandomGif()`, we have invoked `getRandomGif()` on
    `giphyService` to get a random gif. We are then assigning the gif to a class variable
    named `gif`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Just to see if everything is working fine, we will run the app by executing
    `ng serve` and opening developer tools. If everything goes well, we should see
    the response from the Giphy API:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00011.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Now that we have the response, we want to build a component that will display
    the gif. We want to build a separate component for this because we will be using
    the same component on other pages as well to display a gif where needed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s go ahead and scaffold the component. Run the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, open `giphy-app/src/app/gif-viewr/gif-viewr.component.html` and update
    it as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: Once this is done, we need to tell the component to expect the data from the
    parent component, as the home component will pass the `imgUrl` to the `gif-viewer`
    component.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `giphy-app/src/app/gif-viewr/gif-viewr.component.ts`. First, update the
    import statement by adding a reference to the Input decorator:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, add an Input decorator to the `imgUrl` variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'The updated `giphy-app/src/app/gif-viewr/gif-viewr.component.ts` would look
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'Note: To define an input for a component, we use the `@Input` decorator. To
    know more about the `@Input` decorator, refer to the Attribute Directives section
    in Angular docs: [https://angular.io/docs/ts/latest/guide/attribute-directives.html](https://angular.io/docs/ts/latest/guide/attribute-directives.html).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Save the file and open `giphy-app/src/app/home/home.component.html`. We will
    add the `app-gif-viewr` component inside this page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'The complete file would look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we will update CSS to beautify the page. Open `giphy-app/src/styles.css`
    and add the following CSS to the existing styles:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'If we go back to the browser and refresh, we should see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00012.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: And every time we refresh a page, we will see a new gif come up.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we are going to work on the Trending page. This page will show gifs that
    are trending using the Pintrest layout (or Masonry layout). The Trending REST
    API supports pagination. We will be making use of this to load 12 gifs at a time.
    And then provide a Load More button to fetch the next 12 gifs.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let''s get the data from the Giphy API. Open `giphy-app/src/app/trending/trending.component.ts`.
    We will first import the `GiphyService`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we will add the same to the constructor and update the constructor to
    invoke `getTrendingGifs()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: '`offset` and `perPage` will be used to manage pagination.'
  prefs: []
  type: TYPE_NORMAL
- en: '`results` will be used to store the response from the server.'
  prefs: []
  type: TYPE_NORMAL
- en: '`gifs` is the array consisting of an array of trending gifs that we are exposing
    to the template.'
  prefs: []
  type: TYPE_NORMAL
- en: '`isLoading` is a `boolean` variable to keep track if a request is in progress
    or not. Using `isLoading`, we will show/hide the Load More button.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we will add `getTrendingGifs()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'To display the gifs retrieved, we will update the trending component template.
    Open `giphy-app/src/app/trending/trending.component.html` and update it as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: All we are doing here is setting up `app-gif-viewr` to take the gif URL by applying
    an `*ngFor` directive on it. And at the bottom, a Load More button, so a user
    can load more gifs.
  prefs: []
  type: TYPE_NORMAL
- en: 'And finally to achieve the Pintrest/Masonry layout, we will add a couple of
    CSS rules. Open `giphy-app/src/styles.css` and add the following styles:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'Save all the files and head back to the browser. If we click on the trending
    menu item in the Navbar, we should see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00013.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'And if we scroll down completely, we should see a Load More button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00014.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Clicking on the Load More button will load the next set of gifs:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00015.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: I wasted about 15 minutes clicking Load More and watching the gifs. I think
    this is why APIs should have a rate limit.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, we will implement searching gif. Open giphy-`app/src/app/search/search.component.ts`
    and import `GiphyService`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'Add `giphyService` as a class variable in the constructor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we will add variables to manage pagination as well as the response:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we will invoke `searchGifs`, which makes a REST call to get the searched
    gifs, by passing in the query string:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is a method to manage the search form submit button:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'And finally, `getMore()` to load more pages of the same query:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'The updated `giphy-app/src/app/search/search.component.ts` would look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we will update the `giphy-app/src/app/search/search.component.html`. Open
    `giphy-app/src/app/search/search.component.html` and update it as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: This view is the same as the Trending component, except there is a search textbox,
    which will allow the user to search by entering a string.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we save all the files, go back to the browser, and navigate to the Search
    page, we should see an empty page with a search textbox. At this point, the load
    more button will not be shown. If we enter text and hit the return key, we should
    see results, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00016.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: With this we have completed the implementation of a Giphy API with an Angular
    app.
  prefs: []
  type: TYPE_NORMAL
- en: 'To bring this example to a closure, we will update `giphy-app/src/app/page-not-found/page-not-found.component.html`
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'And when we navigate to [http://localhost:4200/nopage](http://localhost:4200/nopage),
    we should see the following page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00017.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have gone through a high level overview of TypeScript and
    why we use TypeScript. Next we got acquainted with Angular's new syntax and the
    component structure. Using this knowledge, we have built an app named Giphy, which
    interfaces with the Giphy REST API to get gifs.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can read more about Angular here: [https://angular.io](https://angular.io).'
  prefs: []
  type: TYPE_NORMAL
- en: Also, check out [Chapter 11](part0170.html#523VK0-9757c8e51afd47e0a7a9ced32db749b8),
    *Ionic 3*, to know more about the changes to Angular 4.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter -- Welcome to Ionic, we will get started with Mobile Hybrid
    development using Cordova and we will look at how Ionic fits into the bigger scheme
    of things.
  prefs: []
  type: TYPE_NORMAL
