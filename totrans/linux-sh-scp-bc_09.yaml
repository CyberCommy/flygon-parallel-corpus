- en: Chapter 9. Debugging Scripts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter shows how to debug Bash shell scripts.
  prefs: []
  type: TYPE_NORMAL
- en: Programming in any language, be it C, Java, FORTRAN, COBOL*, or Bash can be
    a lot of fun. However, what is often not fun is when something goes wrong, and
    when it takes an inordinate amount of time to find the problem and then solve
    it. This chapter will attempt to show the reader how to avoid some of the more
    common syntax and logic errors, and also how to find them when they occur.
  prefs: []
  type: TYPE_NORMAL
- en: '*COBOL: Okay, I have to say that programming in COBOL was never fun!'
  prefs: []
  type: TYPE_NORMAL
- en: 'The topics covered are in the chapter are:'
  prefs: []
  type: TYPE_NORMAL
- en: How to prevent some common syntax and logic errors.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The shell debugging commands such as `set -x` and `set -v`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The other ways to set up debugging.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How redirection can be used to debug in real time.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Syntax errors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Nothing can be so frustrating than to be on a roll when coding your script
    or program and then have a syntax error pop up. In some cases the solution is
    so easy you find and solve it right away. In other cases it can take minutes or
    even hours. Here are a few pointers:'
  prefs: []
  type: TYPE_NORMAL
- en: When coding a loop put the whole `while...do...done` structure in first. It
    is sometimes really easy to forget the ending `done` statement, especially if
    the code spans more than a page.
  prefs: []
  type: TYPE_NORMAL
- en: 'Take a look at *Script 1*:'
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 9 - Script 1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'And here is the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Chapter 9 - Script 1](img/B07040_09_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Look at this real closely, it says the error is at **line 26**. Wow, how can
    that be, when the file has only has 25 lines in it? The simple answer is that's
    just the way the Bash interpreter handles this type of situation. If you have
    not already found the bug it's actually at line 12\. This is where the `done`
    statement should have been and by omitting it I intentionally caused the error.
    Now imagine if this had been a really long script. Depending on the circumstances
    it could take a long time to find the line that caused the problem.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now take a look at *Script 2*, which is just *Script 1* with some additional
    `echo` statements:'
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 9 - Script 2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Chapter 9 - Script 2](img/B07040_09_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You can see that the `echo` statement `Start of x loop` was displayed. However,
    the second one, `Start of y loop` was not displayed. This gives you a good idea
    that the error is somewhere before the 2nd `echo` statement. In this case it is
    right before, but don't expect to be that lucky every time.
  prefs: []
  type: TYPE_NORMAL
- en: Automatic backups
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now for a bit of free programming advice, making automatic backups of files
    was mentioned in [Chapter 4](ch04.html "Chapter 4. Creating and Calling Subroutines"),
    *Creating and Calling Subroutines*. I strongly suggest you use something like
    this when you are writing anything that is even slightly complicated. There is
    nothing more frustrating than to be working on your program or script and have
    it going pretty well, only to make a few changes and have it fail in some bizarre
    fashion. You had it working a few minutes ago and then wham! It has a fault and
    you can't figure out what change caused it. If you don't have a numbered backup
    you could literally spend hours (maybe days) trying to find the bug. I have seen
    people spend hours backing out every change until the problem was found. Yes,
    I have done it too.
  prefs: []
  type: TYPE_NORMAL
- en: Obviously if you have a numbered backup you can simply go back and find the
    latest one that doesn't have the fault. You can then diff the two versions and
    probably find the error really fast. Without a numbered backup, well you are on
    your own. Don't do what I did and wait 2 years or more before realizing all of
    this.
  prefs: []
  type: TYPE_NORMAL
- en: More syntax errors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A fundamental problem with shell scripts is syntax errors don''t usually show
    up until the line with the problem is parsed by the interpreter. Here''s a common
    error that I still find myself doing more than I should. See if you can locate
    the problem by just reading the script:'
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 9 - Script 3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Chapter 9 - Script 3](img/B07040_09_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Did you find my mistake? When I code an `if...elif...else` statement, I tend
    to copy and paste the first `if` statement. I then prepend `elif` to the next
    statement but forget to remove the `if`. This gets me almost every time.
  prefs: []
  type: TYPE_NORMAL
- en: Look at how I ran this script. I started first with just the name of the script
    to invoke the `Usage` clause. You may find it interesting that the syntax error
    was not reported by the interpreter. That's because it never got down to that
    line. This can be a real problem with scripts, as it may run for days, weeks,
    or even years before running a part of code that has a syntax error in it and
    then failing. Keep this in mind when writing and testing your scripts.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is another quick example of a classic syntax error (classic in the sense
    that I just now made it again):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'When run it outputs this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Can you find my mistake? If not look again. I forgot the `do` statement after
    the `for` statement. Bad Jim!
  prefs: []
  type: TYPE_NORMAL
- en: One of the easiest things to do wrong in a script is to forget the `$` in front
    of a variable. This is particularly so if you code in other languages such as
    C or Java, because you don't prepend a `$` to variables in those languages. The
    only real advice I can give here is if your script just doesn't seem to be doing
    anything right check all of your variables for the `$`. But be careful you don't
    go too far and start adding them where they don't belong!
  prefs: []
  type: TYPE_NORMAL
- en: Logic errors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now let's talk about logic errors. These can be very hard to diagnose, and unfortunately
    I don't have any magical ways to avoid those. There are some things that can be
    pointed out however to help track them down.
  prefs: []
  type: TYPE_NORMAL
- en: A common problem with coding is what is called off by 1 errors. This was caused
    when computer language designers in the sixties decided to number things starting
    at 0 instead of 1\. Computers will happily start counting anywhere you want them
    to and never complain at all, but most humans tend to do better when they start
    counting at 1\. Most of my peers would probably disagree with this, but since
    I was the one who always had to fix their off by 1 defects I stand by my comments.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s look at the following very simple script:'
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 9 - Script 4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'And the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Chapter 9 - Script 4](img/B07040_09_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Look at the subtle differences between the two loops:'
  prefs: []
  type: TYPE_NORMAL
- en: In the `x` loop the counting was started at `0`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`x` was incremented while it was less than `5`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The value of `x` after the loop was `5`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The var `maxx`, which is supposed to equal the number of iterations, is set
    to `x`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the y loop the counting was started at `1`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`y` was incremented while it was less than or equal to `5`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The value of `y` after the loop was `6`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The var `maxy`, which is supposed to equal the number of iterations, is set
    to `y-1`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you already understand the above perfectly you will probably never have a
    problem with 1 off errors and that's great.
  prefs: []
  type: TYPE_NORMAL
- en: For the rest of us I suggest looking over this very carefully until you get
    it just right.
  prefs: []
  type: TYPE_NORMAL
- en: Using set to debug scripts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can use the `set` commands to help with debugging your scripts. There are
    two common options to `set`, `x` and `v`. Here is a description of each.
  prefs: []
  type: TYPE_NORMAL
- en: Note that a `-` activates the set while a `+` deactivates it. If that sounds
    backwards to you it is because it is backwards.
  prefs: []
  type: TYPE_NORMAL
- en: 'Use:'
  prefs: []
  type: TYPE_NORMAL
- en: '`set -x`: to display the expanded trace before running the command'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`set -v`: to display the input line as it is parsed'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Take a look at *Script 5* which shows what `set -x` does:'
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 9 - Script 5 and Script 6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'And the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Chapter 9 - Script 5 and Script 6](img/B07040_09_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: If this looks a little strange at first don't worry, it gets easier the more
    you look at it. In essence, the lines that start with a `+` are the expanded source
    code lines, and the lines without a `+` are the output of the script.
  prefs: []
  type: TYPE_NORMAL
- en: 'Look at the first two lines. It shows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The first line shows the expanded command and the second the output.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also use the `set -v` option. Here is a screenshot of *Script 6* which
    is just *Script 5* but with `set -v` this time:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Chapter 9 - Script 5 and Script 6](img/B07040_09_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You can see the output is quite a bit different.
  prefs: []
  type: TYPE_NORMAL
- en: Note that with the `set` commands you can turn them on and off at any point
    you want in the script. This is so you can limit the output to just the areas
    of the code you are interested in.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s look at an example of this:'
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 9 - Script 7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'And the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Chapter 9 - Script 7](img/B07040_09_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Notice how the debugging was explicitly turned off at the beginning of the script
    even though it is off by default. This is a good way to keep track of when it
    is off and when it is on. Look at the output closely and see how the debug statements
    don't start displaying until the second loop with the array. Then it is turned
    off before running the last two lines.
  prefs: []
  type: TYPE_NORMAL
- en: The output when using the `set` commands can be pretty hard to look at sometimes
    and so this is a good way to limit what you have to wade through to get to the
    lines of interest.
  prefs: []
  type: TYPE_NORMAL
- en: There is another debugging technique that I use quite frequently. In many cases
    I think it is superior to using the `set` commands as the display does not get
    quite as cluttered. You may recall in [Chapter 6](ch06.html "Chapter 6. Automating
    Tasks with Scripts"), *Automating Tasks with Scripts*, that we were able to display
    output to other terminals. This is a very handy feature.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following script shows how to display output in another terminal. A subroutine
    is used for convenience:'
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 9 - Script 8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'And the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Chapter 9 - Script 8](img/B07040_09_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Remember to quote the parameter to `p1` in case it contains blank characters.
  prefs: []
  type: TYPE_NORMAL
- en: This subroutine might be a bit of overkill to use for debugging but it captures
    many of the concepts previously discussed in this book. This approach can also
    be used in a script to display information in multiple terminals. We will go over
    that in the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When writing to a terminal if you get a message similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '`./script8: line 26: /dev/pts/99: Permission denied`'
  prefs: []
  type: TYPE_NORMAL
- en: It probably means the terminal has not been opened yet. Also remember to put
    your terminal device strings into a variable because those tend to change after
    a reboot. Something like `TTY=/dev/pts/35` is a good idea.
  prefs: []
  type: TYPE_NORMAL
- en: A great time to use this debugging technique is when writing a form script as
    we did in [Chapter 5](ch05.html "Chapter 5. Creating Interactive Scripts"), *Creating
    Interactive Scripts*. So, let's take a look at that script again and put this
    new subroutine to use.
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 9 - Script 9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the output from the debug terminal (`dev/pts/35`):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Chapter 9 - Script 9](img/B07040_09_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: By having the debug information display in another terminal it is much easier
    to see what is happening in the code.
  prefs: []
  type: TYPE_NORMAL
- en: You can put the `p1` routine where ever you think the problem might be. Labeling
    which subroutine is being used can also help locate if the problem is in a subroutine
    or in the main code body.
  prefs: []
  type: TYPE_NORMAL
- en: When your script is completed and ready for use, you don't have to remove the
    calls to the `p1` routine unless you really want to. You can just code a `return
    0` at the top of the routine.
  prefs: []
  type: TYPE_NORMAL
- en: I use this approach when debugging shell scripts or C programs and it has always
    worked very well for me.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter we explained how to prevent some common syntax and logic errors.
    The shell debugging commands `set -x` and `set -v` were also described. Using
    redirection to send the output from a script to another terminal was also shown
    as a way to debug in real time.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter we will talk about scripting best practices. This includes
    making careful backups of your work and selecting a good text editor. A way to
    help you be more productive using the command line by using environment variables
    and aliases will also be discussed.
  prefs: []
  type: TYPE_NORMAL
