- en: '*Chapter 13*: Building PWAs with Angular'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**PWAs** or **Progressive Web Apps** are web applications at their core. Although
    they are built with enhanced features and experiences that are supported by modern
    browsers, if a PWA is run in a browser that doesn''t support the modern features/enhancements,
    the user still gets the core experience of the web application. In this chapter,
    you''re going to learn how to build Angular apps as PWAs. You''ll learn some techniques
    to make your apps **installable, capable, fast, and reliable**. The following
    are the recipes we''re going to cover in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Converting an exsisting Angular app into a PWA with the Angular CLI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Modifying the theme color for your PWA
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Dark Mode in your PWA
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Providing a custom installable experience in your PWA
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Precaching requests using an Angular service worker
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating an App Shell for your PWA
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For the recipes in this chapter, make sure you have **Git** and **Node.js**
    installed on your machine. You also need to have the `@angular/cli` package installed,
    which you can do with `npm install -g @angular/cli` from your terminal. You also
    need to install the `http-server` package globally. You can install it by running
    `npm install -g http-server` in your terminal. The code for this chapter can be
    found at [https://github.com/PacktPublishing/Angular-Cookbook/tree/master/chapter13](https://github.com/PacktPublishing/Angular-Cookbook/tree/master/chapter13).
  prefs: []
  type: TYPE_NORMAL
- en: Converting an existing Angular app into a PWA with the Angular CLI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A PWA involves a few interesting components, two of which are the service worker
    and the web manifest file. The service worker helps to cache the static resources
    and caching requests, and the web manifest file contains information about app
    icons, the theme color of the app, and so on. In this recipe, we'll convert an
    existing Angular application to a PWA. The principles apply to a fresh Angular
    app as well if you were to create it from scratch. For the sake of the recipe,
    we're going to convert an existing Angular app. We'll see what changed in our
    Angular web app and how the `@angular/pwa` package converts it into a PWA. Also,
    how it helps to cache the static resources.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The project that we are going to work with resides in `chapter13/start_here/angular-pwa-app`
    inside the cloned repository:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the project in Visual Studio Code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the terminal and run `npm install` to install the dependencies of the project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once done, run `ng build --configuration production`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now run `http-server dist/angular-pwa-app -p 4200`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This should run the app at `http://localhost:4200` in production mode, and
    should look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.1 – angular-pwa-app running on http://localhost:4200'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_13.01_B15150.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 13.1 – angular-pwa-app running on http://localhost:4200
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have the app running locally, let's see the steps of the recipe
    in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The app we''re working with is a simple counter application. It has a min and
    max value, and some buttons that can increment, decrement, and reset the counter''s
    value. The app saves the value of the counter in `localStorage` but it is not
    a PWA yet. Let''s convert it into a PWA:'
  prefs: []
  type: TYPE_NORMAL
- en: First, let's see if our application works offline at all, because that's one
    of the traits of PWAs. Open Chrome DevTools for the app. Go to the **Network**
    tab and change **Throttling** to **Offline** as follows:![Figure 13.2 – Changing
    network throttling to Offline to see the offline experience
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/Figure_13.2_B15150.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 13.2 – Changing network throttling to Offline to see the offline experience
  prefs: []
  type: TYPE_NORMAL
- en: Now stop the `http` server by exiting the process from your terminal. Once done,
    refresh the app's page. You should see that the app doesn't work anymore, as shown
    in the following figure:![Figure 13.3 – App not working offline
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/Figure_13.03_B15150.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 13.3 – App not working offline
  prefs: []
  type: TYPE_NORMAL
- en: 'To convert this app into a PWA, open a new terminal window/tab and make sure
    you''re inside the `chapter13/start_here/angular-pwa-app` folder. Once inside,
    run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: You should see a bunch of files created and updated as the process from the
    command finishes.
  prefs: []
  type: TYPE_NORMAL
- en: Now build the app again by running `ng build --configuration production`. Once
    done, serve it using the `http-server dist/angular-pwa-app -p 4200` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now make sure you have turned off throttling by switching to the **Network**
    tab and setting **No throttling** as the selection option, as shown in *Figure
    13.4*. Also, notice that the **Disable cache** option is turned off:![Figure 13.4
    – Turning off network throttling
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/Figure_13.04_B15150.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 13.4 – Turning off network throttling
  prefs: []
  type: TYPE_NORMAL
- en: Now refresh the app once. You should see the app working and the network logs
    showing that assets such as JavaScript files were loaded from the server as shown
    in *Figure 13.5*:![Figure 13.5 – Assets downloaded from the source (Angular server)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/Figure_13.05_B15150.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 13.5 – Assets downloaded from the source (Angular server)
  prefs: []
  type: TYPE_NORMAL
- en: Now refresh the app once again and you'll see that the same assets are now downloaded
    from the cache using the service worker, as shown in *Figure 13.6*:![Figure 13.6
    – Assets downloaded from the cache using the service worker
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/Figure_13.06_B15150.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 13.6 – Assets downloaded from the cache using the service worker
  prefs: []
  type: TYPE_NORMAL
- en: Now is the moment we've been waiting for. Change the network throttling back
    to **Offline** to go into the **Offline** mode and refresh the app. You should
    still see the app working in the **Offline** mode because of the service worker,
    as shown in *Figure 13.7*:![Figure 13.7 – Angular app working offline as a PWA
    using a service worker
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/Figure_13.07_B15150.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 13.7 – Angular app working offline as a PWA using a service worker
  prefs: []
  type: TYPE_NORMAL
- en: 'What''s more, you can actually install this PWA now on your machine. Since
    I''m using a MacBook, it is installed as a Mac app. If you''re using Chrome, the
    installation option should be around the address bar, as shown in *Figure 13.8*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.8 – Installing the Angular PWA from Chrome'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_13.08_B15150.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 13.8 – Installing the Angular PWA from Chrome
  prefs: []
  type: TYPE_NORMAL
- en: 'Kaboom! Just by using the `@angular/pwa` package, with zero configuration done
    ourselves, we converted our existing Angular app into a PWA. We are now able to
    run our application offline, and we can install it as a PWA on our devices. See
    *Figure 13.9* to see how the app looks – just like a native app on macOS X:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.9 – How our Angular PWA looks as a native app on macOS X'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_13.09_B15150.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 13.9 – How our Angular PWA looks as a native app on macOS X
  prefs: []
  type: TYPE_NORMAL
- en: Cool, right? Now that you know how to build a PWA with the Angular CLI, see
    the next section to understand how it works.
  prefs: []
  type: TYPE_NORMAL
- en: How it works
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Angular core team and the community have done an amazing job with the `@angular/pwa`
    package and, in general, with the `ng add` command, which allows us to add different
    packages to our applications using Angular schematics. In this recipe, when we
    run `ng add @angular/pwa`, it uses schematics to generate the app icons along
    with the web app manifest. If you look at the changed files, you can see the new
    files, as shown in *Figure 13.10*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.10 – Web manifest file and the app icon files'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_13.10_B15150.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 13.10 – Web manifest file and the app icon files
  prefs: []
  type: TYPE_NORMAL
- en: The `manifest.webmanifest` file is a file that contains a JSON object. This
    object defines the manifest for the PWA and contains some information. The information
    includes the name of the app, the short name, the theme color, and the configuration
    for different icons, for different devices. Imagine this PWA installed on your
    Android phone. You definitely need an icon in your home drawer to tap on the icon
    to open the app. This file holds the information regarding which icon to use based
    on different device sizes.
  prefs: []
  type: TYPE_NORMAL
- en: 'We also see the file `ngsw-config.json`, which contains the configuration for
    the service worker. Behind the scenes, while the `ng add` command is running the
    schematics, it also installs the `@angular/service-worker` package in our project.
    If you open the `app.module.ts` file, you''ll see the code to register our service
    worker as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The code registers a new service worker file named `ngsw-worker.js`. This file
    uses the configuration from the `ngsw-config.json` file to decide which resource
    to cache and using which strategies.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you know how the recipe works, see the next section for further reading.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Angular service worker intro ([https://angular.io/guide/service-worker-intro](https://angular.io/guide/service-worker-intro))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What are PWAs? ([https://web.dev/what-are-pwas/](https://web.dev/what-are-pwas/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Modifying the theme color for your PWA
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous recipe, we learned how to convert an Angular app into a PWA.
    And when we do so, the `@angular/pwa` package creates the web app manifest file
    with a default theme color, as shown in *Figure 13.9*. However, almost every web
    app has its own branding and style. And if you want to theme your PWA's title
    bar according to your branding, this is the recipe for you. We'll learn how to
    modify the web app manifest file to customize the PWA's theme color.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The project for this recipe resides in `chapter13/start_here/pwa-custom-theme-color`:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the project in Visual Studio Code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the terminal and run `npm install` to install the dependencies of the project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once done, run `ng build --configuration production`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now run `http-server dist/pwa-custom-theme-color -p 5300` to serve it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open `localhost:5300` to view the application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, install the PWA as shown in *Figure 13.8*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If you open the PWA, it should look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.11 – PWA Custom Theme Color app'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_13.11_B15150.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 13.11 – PWA Custom Theme Color app
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have the app running, let's see the steps of the recipe in the next
    section.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As you can see in *Figure 13.11*, the header of the app has a bit of a different
    color than the app''s native header (or toolbar). Due to this difference, the
    app looks a bit weird. We''ll modify the web app manifest to update the theme
    color. Let''s get started:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `src/manifest.webmanifest` file in your editor and change the theme
    color as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'We also have `theme-color` set in our `index.html` file. By default, that has
    precedence over the web app manifest file. Therefore, we need to update it. Open
    the `index.html` file and update it as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, build the app again using the `ng build --configuration production` command.
    Then serve it using `http-server` as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Open the PWA app again and uninstall it as shown in *Figure 13.12*. Make sure
    to check the box that says **Also clear data from Chrome (...)** when prompted:![Figure
    13.12 – Uninstalling the pwa-custom-theme-color app
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/Figure_13.12_B15150.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 13.12 – Uninstalling the pwa-custom-theme-color app
  prefs: []
  type: TYPE_NORMAL
- en: Now open the Angular app in a new Chrome tab at `http://localhost:5300` and
    install the app again as a PWA as shown in *Figure 13.8*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The PWA should already be opened. If not, open it from your applications and
    you should see the updated theme color as shown in *Figure 13.13*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.13 – PWA app with the updated theme color'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_13.13_B15150.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 13.13 – PWA app with the updated theme color
  prefs: []
  type: TYPE_NORMAL
- en: Awesomesauce! You've just learned how to update the theme color for an Angular
    PWA. Now that you've finished the recipe, see the next section for further reading.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Creating a PWA with the Angular CLI ([https://web.dev/creating-pwa-with-angular-cli/](https://web.dev/creating-pwa-with-angular-cli/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Dark Mode in your PWA
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the modern age of devices and applications, the preferences of end users
    have evolved a bit as well. With the increased usage of screens and devices, health
    is one of the major concerns. And we know that almost all screen devices now support
    dark mode. Considering this fact, if you're building a web app, you might want
    to provide dark mode support for it. And if it is a PWA that presents itself as
    a native app, the responsibility is much greater. In this recipe, you'll learn
    how to provide a dark mode for your Angular PWA.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The project for this recipe resides in `chapter13/start_here/pwa-dark-mode`:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the project in Visual Studio Code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the terminal and run `npm install` to install the dependencies of the project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once done, run `ng build --configuration production`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now run `http-server dist/pwa-dark-mode -p 6100` to serve it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, install the PWA as shown in *Figure 13.8*
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now make sure you have the Dark theme enabled on your machine. If you're running
    macOS X, you can open **Settings** | **General** and select the **Dark** appearance
    as shown in *Figure 13.14*:![Figure 13.14 – Changing the system appearance to
    Dark mode in macOS X
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/Figure_13.14_B15150.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 13.14 – Changing the system appearance to Dark mode in macOS X
  prefs: []
  type: TYPE_NORMAL
- en: 'Once done, open the PWA as the native app and you should see it as shown in
    *Figure 13.15*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.15 – PWA Custom Theme Color app in System Dark Mode appearance'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_13.15_B15150.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 13.15 – PWA Custom Theme Color app in System Dark Mode appearance
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have the PWA running as a native app, and the Dark mode applied
    to the system, let's see the steps of the recipe in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As you can see, the Angular app doesn''t have support for dark mode at the
    moment. We''ll begin by serving the app in development mode and by adding different
    colors for dark mode. Let''s get started:'
  prefs: []
  type: TYPE_NORMAL
- en: Serve the app in development mode by running the command `ng serve -o --port
    9291`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This should serve the app in a new browser tab at `http://localhost:4200`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, open the `styles.scss` file to use the `prefers-color-scheme` media query.
    We''ll use a different value for our global CSS variables to create a different
    view for dark mode. Update the file as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'If you refresh the app again in the browser tab, you''ll see a different dark
    mode view based on the `prefers-color-scheme` media query as shown in *Figure
    13.16*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.16 – The dark mode view using the prefers-color-scheme media query'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_13.16_B15150.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 13.16 – The dark mode view using the prefers-color-scheme media query
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: It is possible that you already have run a PWA at `localhost:4200`; that is
    why in *step 1* we're targeting port `9291`. If even that has been used earlier,
    please make sure to clear the application cache and then refresh.
  prefs: []
  type: TYPE_NORMAL
- en: Let's simulate the dark and light modes using Chrome DevTools as it provides
    a really nice way to do so. Open Chrome DevTools and then open the **Command**
    menu. On macO SX, the keys are *Cmd* + *Shift* + *P*. On Windows, it is *Ctrl*
    + *Shift* + *P*. Then type `Render` and select the **Show Rendering** option as
    shown in *Figure 13.17*:![Figure 13.17 – Open the rendering view using the Show
    Rendering option
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/Figure_13.17_B15150.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 13.17 – Open the rendering view using the Show Rendering option
  prefs: []
  type: TYPE_NORMAL
- en: Now, in the **Rendering** tab, toggle the `prefers-color-scheme` emulation for
    light and dark modes as shown in *Figure 13.18*:![Figure 13.18 – Simulate prefers-color-scheme
    modes
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/Figure_13.18_B15150.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 13.18 – Simulate prefers-color-scheme modes
  prefs: []
  type: TYPE_NORMAL
- en: Now that we've tested both modes. We can create the production build and re-install
    the PWA. Run the `ng build --configuration production` command to build the app
    in production mode.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now uninstall the existing PWA by opening it and then selecting the **Uninstall**
    option from the **More** menu as shown in *Figure 13.12*. Make sure to check the
    box that says **Also clear data from Chrome (...)** when prompted.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following command to serve the built app on the browser and then navigate
    to `http://localhost:6100`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Wait for a few seconds for the **Install** button to show up in the address
    bar. Then install the PWA similar to *Figure 13.8*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'As soon as you run the PWA now, you should see the dark mode view as shown
    in *Figure 13.19*, if your system''s appearance is set to dark mode:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.19 – Our PWA supporting dark mode out of the box'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_13.19_B15150.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 13.19 – Our PWA supporting dark mode out of the box
  prefs: []
  type: TYPE_NORMAL
- en: Awesome! If you switch your system appearance from dark mode to light mode or
    vice versa, you should see the PWA reflecting the appropriate colors. Now that
    you know how to support dark mode in your PWA, see the next section to see links
    for further reading.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Prefers color scheme ([https://web.dev/prefers-color-scheme/](https://web.dev/prefers-color-scheme/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using color scheme with prefers-color-scheme ([https://web.dev/color-scheme/](https://web.dev/color-scheme/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Providing a custom installable experience in your PWA
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We know that PWAs are installable. This means they can be installed on your
    devices like a native application. However, when you first open the app in the
    browser, it totally depends on the browser how it shows the **Install** option.
    It varies from browser to browser. And it also might not be very prompt or clearly
    visible. And also, you might want to show the **Install** prompt at some point
    in the app instead of the app launch, which is annoying for some users. Luckily,
    we have a way to provide our own custom dialog/prompt for the installation option
    for our PWAs. And that is what we'll learn in this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The project for this recipe resides in `chapter13/start_here/pwa-custom-install-prompt`:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the project in Visual Studio Code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the terminal and run `npm install` to install the dependencies of the project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once done, run `ng build --configuration production`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now run `http-server dist/pwa-custom-install-prompt -p 7200` to serve it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Navigate to `http://localhost:7200`. Wait for a while and you should see the
    install prompt as shown in *Figure 13.20*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.20 – pwa-custom-install-prompt running at http://localhost:7200'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_13.20_B15150.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 13.20 – pwa-custom-install-prompt running at http://localhost:7200
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have the app running, let's see the steps of the recipe in the next
    section.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We have the Dice Guesser application in which you roll the dice and guess the
    output. For this recipe, we''ll prevent the default installation prompt and will
    show it only when the user has made a correct guess. Let''s begin:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First of all, create a service that will show our custom installable prompt
    in the next steps. In the project root, run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Now open the created file, `installable-prompt.service.ts`, and update the
    code as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s build the custom dialog/prompt we''ll show to the user. We''re
    going to use the **Material** dialog from the `@angular/material` package that
    we already have installed in the project. Open the `app.module.ts` file and update
    it as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s create a component for the **Material** dialog. In the project root,
    run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'We''ll use this component in `InstallablePromptService` now. Open the `installable-prompt.service.ts`
    file and update the code as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'We also need to show the browser''s prompt based on our selection from our
    custom installable prompt. For example, if the user clicks the **Yes** button,
    it means they want to install the app as a PWA. In this case, we''ll show the
    browser''s prompt. Update the `installable-prompt.service.ts` file further as
    follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we have set up the main code for the browser''s prompt. Let''s work
    on the template of our custom installable prompt. Open the `installable-prompt.component.html`
    file and replace the template with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, let''s show this prompt whenever the user makes a correct guess. Open
    the `game.component.ts` file and update it as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s test the application now. Build the app in production mode and serve
    it using the `http-server` package on port `7200` by using the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Before we test it out, you might want to clear the app's cache and unregister
    the service worker. You can do it by opening Chrome DevTools and navigating to
    the **Application** tab. Then click the **Clear site data** button as shown in
    *Figure 13.21*. Make sure the option **Unregister service workers** is checked:![Figure
    13.21 – Clearing site data including service workers
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/Figure_13.21_B15150.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 13.21 – Clearing site data including service workers
  prefs: []
  type: TYPE_NORMAL
- en: 'Now play the game until you guess one right answer. As soon as you get it,
    you''ll see the custom installable prompt as shown in *Figure 13.22*. Click the
    **Sure** button and you should see the browser''s prompt:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.22 – Custom installable prompt for our PWA'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_13.22_B15150.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 13.22 – Custom installable prompt for our PWA
  prefs: []
  type: TYPE_NORMAL
- en: Awesome! You can now play around with the app by installing and uninstalling
    the PWA a few times and trying out all the combinations of the user choosing to
    install or not to install the app. It's all fun and games. And now that you know
    how to implement a custom installation prompt for an Angular PWA, see the next
    section to understand how it works.
  prefs: []
  type: TYPE_NORMAL
- en: How it works
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The heart of this recipe is the `beforeinstallprompt` event. It is a standard
    browser event that is supported in the latest version of Chrome, Firefox, Safari,
    Opera, UC Browser (Android version), and Samsung Internet, that is, almost all
    major browsers. The event has a `prompt()` method that shows the browser's default
    prompt on the device. In the recipe, we create `InstallablePromptService` and
    store the event in its `local` property. This is so we can use it later on-demand
    when the user has guessed a correct roll value. Note that as soon as we receive
    the `beforeinstallprompt` event, we remove the event listener from the `window`
    object so we only save the event once. That is when the app starts. And if the
    user chooses not to install the app, we don't show the prompt again within the
    same session. However, if the user refreshes the app, they will still get the
    prompt one time for the first correct guess. We could go one step further to save
    this state in `localStorage` to avoid showing the prompt after the page refreshes,
    but that's not a part of this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: 'For the custom installation prompt, we use the `MatDialog` service from the
    `@angular/material` package. This service has an `open()` method, which takes
    two parameters: the component to show as a Material dialog and `MatDialogConfig`.
    In the recipe, we create the `InstallablePromptComponent`, which uses some HTML
    elements with directives from the `@angular/material/dialog` package. Note that
    on the buttons, we use the attribute `[mat-dialog-close]` in the `installable-prompt.component.html`
    file. And the values are set to `true` and `false` for the **Sure** and **No Thanks**
    buttons respectively. These attributes help us send the respective value from
    this modal to `InstallablePromptService`. Notice the usage of `dialogRef.afterClosed().subscribe()`
    in the `installable-prompt.service.ts` file. That''s where the values are passed
    back. If the value is `true`, then we use the event, that is, the `this.installablePrompt`
    property''s `.prompt()` method to show the browser''s prompt. Note that we set
    the `installablePrompt` property''s value to `null` after its usage. This is so
    we don''t show the prompt again in the same session until the user refreshes the
    page.'
  prefs: []
  type: TYPE_NORMAL
- en: Now that you understand how it all works, see the next section to see links
    for further reading.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Angular Material Dialog examples (https://material.angular.io/components/dialog/examples)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MatDialogConfig (https://material.angular.io/components/dialog/api#MatDialogConfig)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to provide your own app-install experience (web.dev) (https://web.dev/customize-install/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Precaching requests using an Angular service worker
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With the addition of service workers in our previous recipes, we've seen that
    they already cache the assets and serve them using the service worker if we go
    into **Offline** mode. But what about network requests? If the user goes offline
    and refreshes the application right now, the network requests fail because they're
    not cached with the service worker. This results in a broken offline user experience.
    In this recipe, we'll configure the service worker to precache network requests
    so the app works fluently in **Offline** mode as well.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The project that we are going to work with resides in `chapter13/start_here/precaching-requests`
    inside the cloned repository:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the project in Visual Studio Code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once done, run `ng build --configuration production`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now run `http-server dist/precaching-requests -p 8300` to serve it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Navigate to `http://localhost:8300`. Refresh the app once. Then switch to **Offline**
    mode as shown in *Figure 13.2*. If you go to the **Network** tab and filter the
    requests using the query `results`, you should see that the requests fail as shown
    in *Figure 13.23*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.23 – Offline experience broken due to not caching the network request'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_13.23_B15150.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 13.23 – Offline experience broken due to not caching the network request
  prefs: []
  type: TYPE_NORMAL
- en: Now that we see the network requests failing, lets see the steps of the recipe
    in the next section to fix this.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For this recipe, we have the users list and search app that fetches some users
    from an API endpoint. As you can see in *Figure 13.23*, if we go into **Offline**
    mode, the `fetch` call fails as well as the call for the request to the service
    worker. This is because the service worker isn''t configured yet to cache the
    data request. Let''s get started with the recipe to fix this:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to cache the network requests, open the `ngsw-config.json` file and
    update it as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s test the application now. Build the app in production mode and serve
    it using the `http-server` package on port `8300` by using the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Now navigate to http://localhost:8300\. Make sure you're not using **Network
    throttling** at this moment. That is, you are not in **Offline** mode.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Clear the app data using Chrome DevTools as shown in *Figure 13.21*. Once done,
    refresh the app page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In Chrome DevTools, go to the **Network** tab and switch to **Offline** mode
    as shown in *Figure 13.2*. Now filter the network requests using the query `results`.
    You should see the results despite being offline. And the network call is served
    from the service worker as shown in *Figure 13.24*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.24 – Network call working offline using the service worker'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_13.24_B15150.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 13.24 – Network call working offline using the service worker
  prefs: []
  type: TYPE_NORMAL
- en: And boom! Even if you click a card now, you should still see the app working
    flawlessly because all the pages use the same API call, hence, served from the
    service worker. And with that, you've just learned how to configure a service
    worker in an Angular app to cache network/data requests. And you can install the
    PWA and use it even if you're offline. Awesome! Right?
  prefs: []
  type: TYPE_NORMAL
- en: Now that we've finished the recipe, let's see in the next section how it all
    works.
  prefs: []
  type: TYPE_NORMAL
- en: How it works
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The heart of this recipe is the `ngsw-config.json` file. This file is used
    by the `@angular/service-worker` package when generating the service worker file.
    The file already contains a JSON object out of the box when we use the `@angular/pwa`
    schematics by running `ng add @angular/pwa`. This JSON contains a property called
    `assetGroups`, which basically configures the caching of the assets based on the
    provided configuration. For this recipe, we wanted to cache network requests along
    with the assets. Therefore, we added the new property `dataGroups` in the JSON
    object. Let''s have a look at the configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, `dataGroups` is an array. We can provide different configuration
    objects as elements to it. Each configuration has a `name`, an array of `urls`,
    and a `cacheConfig` that defines the caching strategy. For our configuration,
    we use a wildcard with the API URL, that is, we use `urls:` `["`https://api.randomuser.me/?results*`"]`.
    For the `cacheConfig`, we're using the `"freshness"` strategy, which means the
    app will always fetch the data from its origin first. If the network is unavailable,
    then it will use the response from the service worker cache. An alternate strategy
    is `"performance"`, which first looks up the service worker for a cached response.
    If there's nothing in the cache for the particular URL (or URLs), then it fetches
    the data from the actual origin. The `maxSize` property defines how many requests
    can be cached for the same pattern (or set of URLs). And the `maxAge` property
    defines how long the cached data would live in the service worker cache.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you know how the recipe works, see the next section for links for further
    reading.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Angular Service Worker Intro (https://angular.io/guide/service-worker-intro)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Angular Service Worker Config (https://angular.io/guide/service-worker-config)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating an offline fallback page (web.dev) (https://web.dev/offline-fallback-page/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating an App Shell for your PWA
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When it comes to building fast user experiences for web apps, one of the major
    challenges is minimizing the critical rendering path. This includes loading the
    most critical resources for the target page, parsing and executing JavaScript,
    and so on. With an App Shell, we have the ability to render a page, or a portion
    of the app, at build time rather than runtime. This means the user will see the
    pre-rendered content initially, until JavaScript and Angular kick in. This means
    the browser doesn't have to work and wait a while for the first meaningful paint.
    In this recipe, you'll create an App Shell for an Angular PWA.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The project that we are going to work with resides in `chapter13/start_here/pwa-app-shell`
    inside the cloned repository:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the project in Visual Studio Code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the terminal and run `npm install` to install the dependencies of the project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once done, run `ng serve -o`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This should open a tab and run the app at `http://localhost:4200` as shown
    in *Figure 13.25*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.25 – pwa-app-shell running on http://localhost:4200'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_13.25_B15150.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 13.25 – pwa-app-shell running on http://localhost:4200
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we''ll disable JavaScript to simulate taking a lot of time to parse JavaScript.
    Or, to simulate that there''s no App Shell in place yet. Open Chrome DevTools
    and open the command panel. The shortcut is *Cmd* + *Shift* + *P* on macOS X and
    *Ctrl* + *Shift* + *P* on Windows. Type `Disable JavaScript`, select the option,
    and hit *Enter*. You should see the message that follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.26 – No App Shell present in the app'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_13.26_B15150.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 13.26 – No App Shell present in the app
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have checked the absence of the App Shell, let's see the steps of
    the recipe in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We have an Angular application that fetches some users from an API. We will
    create an App shell for this app so it can provide the first meaningful paint
    faster as a PWA. Let''s get started:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, create the App Shell for the app by running the following command from
    the project root:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Update `app.module.ts` to export the components so we can use them to render
    the **Users** page in the App Shell. The code should look as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Now open the `app-shell.component.html` file and use the `<app-users>` element
    so we render the whole `UsersComponent` in the App Shell. The code should look
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we have the code written for the App Shell. Let''s create it. Run
    the following command to generate the App Shell in development mode:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the App Shell is generated in *Step 4*, run the following command to serve
    it using the `http-server` package:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Make sure that the JavaScript is still turned off for the app. If not, open
    Chrome DevTools and press *Cmd* + *Shift* + *P* for macOS X to open the Command
    Panel (*Ctrl* + *Shift* + *P* on Windows). Then type `Disable Javascript` and
    hit *Enter* selecting the option as shown in *Figure 13.27*:![Figure 13.27 – Disable
    JavaScript using Chrome DevTools
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/Figure_13.27_B15150.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 13.27 – Disable JavaScript using Chrome DevTools
  prefs: []
  type: TYPE_NORMAL
- en: Refresh the app while JavaScript is disabled. You should now see the app still
    showing the pre-rendered users page, despite JavaScript being disabled as shown
    in *Figure 13.28*. Woohoo!![Figure 13.28 – App Shell showing the pre-rendered
    Users page
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/Figure_13.28_B15150.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 13.28 – App Shell showing the pre-rendered Users page
  prefs: []
  type: TYPE_NORMAL
- en: To verify that we are pre-rendering the users page at build time, inspect the
    generated code at `<project-root>/dist/pwa-app-shell/browser.index.html`. You
    should see the entire rendered page inside the `<body>` tag as shown in *Figure
    13.29*:![Figure 13.29 – index.html file containing the pre-rendered Users page
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](image/Figure_13.29_B15150.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 13.29 – index.html file containing the pre-rendered Users page
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the production build with the App Shell and serve it on port `1020`
    by running the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Navigate to `http://localhost:1020` in your browser and install the app as
    a PWA as shown in *Figure 13.8*. Once done, run the PWA and it should look as
    follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.30 – pwa-app-shell running as a native app after installation'
  prefs: []
  type: TYPE_NORMAL
- en: '](image/Figure_13.30_B15150.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 13.30 – pwa-app-shell running as a native app after installation
  prefs: []
  type: TYPE_NORMAL
- en: Great!!! You now know how to create an App Shell for your Angular PWAs. Now
    that you've finished the recipe, see the next section on how it works.
  prefs: []
  type: TYPE_NORMAL
- en: How it works
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The recipe begins with disabling JavaScript for our application. This means
    when the app runs, we only show static HTML and CSS since there's no JavaScript
    execution. We see a message about JavaScript not being supported, as shown in
    *Figure 13.26*.
  prefs: []
  type: TYPE_NORMAL
- en: 'We then run the `ng generate app-shell` command. This Angular CLI command does
    the following things for us:'
  prefs: []
  type: TYPE_NORMAL
- en: Creates a new component named `AppShellComponent` and generates its relevant
    files.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installs the `@angular/platform-server` package in the project.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Updates the `app.module.ts` file to use the `BrowserModule.withServerTransition()`
    method so we can provide the `appId` property for server-side rendering.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adds some new files, namely `main.server.ts` and `app.server.module.ts`, to
    enable server-side rendering (build time rendering for our App Shell, to be exact).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Most importantly, it updates the `angular.json` file to add a bunch of schematics
    for server-side rendering as well as for generating the `app-shell`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the recipe, we export the components from `AppModule` so we can use them
    in the App Shell. This is because the App Shell is not part of the `AppModule`.
    Instead, it is part of the newly created `AppServerModule` in the `app.server.module.ts`
    file. As you can see, in the file, we have `AppModule` already being imported.
    Although, we can't use the components unless we export them from `AppModule`.
    After exporting the components, we update the `app-shell.component.html` (the
    App Shell template) to use the `<app-users>` selector, which reflects the `UsersComponent`
    class. That is the entire Users page.
  prefs: []
  type: TYPE_NORMAL
- en: We verify the App Shell by running the `ng run pwa-app-shell:app-shell` command.
    This command generates an Angular build in development mode with the App Shell
    (non-minified code). Note that in a usual build, we would generate the `pwa-app-shell`
    folder inside the `dist` folder. And inside, we would have `index.html`. However,
    in this case, we create two folders inside the `pwa-app-shell` folder, that is,
    the `browser` folder and the `server` folder. And our `index.html` resides in
    the `browser` folder. As shown in *Figure 13.29*, we have the code of the entire
    Users page inside the `<body>` tag in the `index.html` file. This code is pre-rendered
    at build time. This means Angular opens up the app, makes the network call, and
    then pre-renders the UI as the App Shell at build time. So as soon as the app
    opens, the content is pre-rendered.
  prefs: []
  type: TYPE_NORMAL
- en: To generate the production build with the App Shell, we run the `ng run pwa-app-shell:app-shell:production`
    command. This generates the production Angular build with minified code for the
    App Shell as well. And finally, we install the PWA to test it out.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you know how the recipe works, see the next section for links for further
    reading.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Angular App Shell Guide (https://angular.io/guide/app-shell)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The App Shell Model (Web Fundamentals by Google) (https://developers.google.com/web/fundamentals/architecture/app-shell)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
