- en: Controlling a Servo with Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Analog meters and instrumentation were the only ways to display data prior to
    the rise of digital technologies. Once the move was made to digital, analog meters
    fell out of vogue. Generations that grew up learning to tell the time on an analog
    clock may suddenly find this skill to be out of date, as digital displays of time
    have become the norm.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will bridge the gap between the digital and analog worlds
    by changing the position of a servo motor based on a digital value.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Wiring up a servo motor to the Raspberry Pi
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Controlling the servo through the command line
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing a Python program to control the servo
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Knowledge required to complete this chapter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The reader will need a working knowledge of the Python programming language
    to complete this chapter. Knowledge of using a simple breadboard to connect components
    is also a must.
  prefs: []
  type: TYPE_NORMAL
- en: Project overview
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this project, we will wire up a servo motor and LED, and control it using
    the `GPIO Zero` library. We will start by designing the circuit in Fritzing, and
    then we will assemble it.
  prefs: []
  type: TYPE_NORMAL
- en: We will start controlling the servo using Python shell.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we will expand on this knowledge by creating a Python class that will
    turn the servo motor based on a percentage amount, and turn on, turn off, or flash
    the LED based on a number passed to the class.
  prefs: []
  type: TYPE_NORMAL
- en: This project should take about 2 hours to complete.
  prefs: []
  type: TYPE_NORMAL
- en: Getting started
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To complete this project, the following will be required:'
  prefs: []
  type: TYPE_NORMAL
- en: A Raspberry Pi Model 3 (2015 model or newer)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A USB power supply
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A computer monitor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A USB keyboard
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A USB mouse
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A small servo motor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A breadboard
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A LED (any color)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jumper wires for the breadboard
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Wiring up a servo motor to the Raspberry Pi
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This project involves wiring up a servo motor to our Raspberry Pi. Many people
    confuse servo motors with stepper and DC motors. Let's take a look at the differences
    between these types of motors.
  prefs: []
  type: TYPE_NORMAL
- en: Stepper motors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Stepper motors are brushless DC electrical motors that move a full rotation
    of equal steps. The position of the motor is controlled without the use of a feedback
    system (open-loop system). This makes stepper motors relatively inexpensive and
    popular for robotics, 3-D printers, and CNC-type applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a crude diagram of the internal workings of a stepper motor:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/35ada15a-697a-46e7-9680-659725d49243.jpg)'
  prefs: []
  type: TYPE_IMG
- en: By turning on and off the coils **A** and **B** in sequence, the **Permanent
    Magnet** (which is attached to the shaft of the motor) is spun. Precise steps
    are used, allowing precise control of the motor, as the number of steps may be
    controlled easily.
  prefs: []
  type: TYPE_NORMAL
- en: Stepper motors tend to be heavier and bulkier than other types of small motors.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following photo shows a typical stepper motor used in a 3-D printer:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/29d7c3f6-9842-4328-aa1e-6d1fac677db1.png)'
  prefs: []
  type: TYPE_IMG
- en: DC motors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: DC motors are similar to stepper motors, but do not divide motion into equal
    steps. They were the first widely used electrical motors, and are in use in electric
    cars, elevators, and any other application that does not require precise control
    of the position of the motor. DC motors may be brushed or brushless.
  prefs: []
  type: TYPE_NORMAL
- en: Brushed motors are simpler to operate, but have limitations on **revolutions
    per minute** (**RPM**) and usage life. Brushless motors are more complicated,
    and require electronics for control—for example, the **Electronic Speed Controllers**
    (**ESCs**) used on some drones. Brushless motors may be operated at a much higher
    RPM, and have a longer usage life than brushed motors.
  prefs: []
  type: TYPE_NORMAL
- en: DC motors have a much shorter response time than stepper motors, and tend to
    be lighter than comparable stepper motors.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a photo of a typical small brushed DC motor:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/a1a836f9-1ba8-4389-a264-e9334868bcba.png)'
  prefs: []
  type: TYPE_IMG
- en: Servo motors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Servo motors use a closed-loop feedback mechanism to provide extremely precise
    control of the position of the motor. They are considered a high-performance alternative
    to stepper motors. The range can vary depending on the servo, with some servos
    limited to 180-degree movement while others can move a full 360 degrees.
  prefs: []
  type: TYPE_NORMAL
- en: Closed-loop control systems, unlike open-loop control systems, maintain an output
    by measuring the actual condition of the output, and comparing it to the desired
    outcome. Closed-loop control systems are often called feedback control systems,
    as it is this feedback that is used to adjust the condition.
  prefs: []
  type: TYPE_NORMAL
- en: The angle of a servo is determined by pulses passed to the control pin on the
    servo. Different brands of servo have different maximum and minimum values to
    determine the angle of the servo needle.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a diagram to demonstrate the relationship between **p****ulse
    width modulation** (**PWM**) and the position of a 180-degree servo:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/2f396a7b-6ff8-4927-b78c-9b6e8e46d669.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The following is a photo of the small servo motor that we will be using for
    our circuit. We are able to connect this servo directly to our Raspberry Pi (this
    may not be possible with larger servos):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/f4c4ea4c-ac2d-443e-95c3-adeb4af4fd75.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The following is a chart of servo color codes:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/d0ff3d63-d318-408e-aa5d-f8b7c7d0e08e.png)'
  prefs: []
  type: TYPE_IMG
- en: Connecting the servo motor to our Raspberry Pi
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Our circuit will consist of a simple servo and LED.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the Fritzing diagram of the circuit:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/51200b9c-1606-418a-b96b-dfc27c026afe.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We connect:'
  prefs: []
  type: TYPE_NORMAL
- en: The positive power of the servo to the 5V DC supply, and the ground to GND
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The control signal from the servo to GPIO 17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The positive end of the LED to GPIO 14, and the resistor to GND
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Be sure to use a small servo motor, as larger ones may require more power than
    the Raspberry Pi is able to supply. The circuit should resemble the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/02e23687-6fd6-40d8-9f3c-a9d313002c39.png)'
  prefs: []
  type: TYPE_IMG
- en: Control the servo through the command line
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that our servo is connected to our Raspberry Pi, let's write some code at
    the command line to control it. We will use the Raspberry Pi Python library `GPIO
    Zero` to do this.
  prefs: []
  type: TYPE_NORMAL
- en: 'Load up Thonny and click on Shell:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/60473ee5-7d07-4f6d-a96d-697fe870bd5b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Type the following in the shell:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'After a short delay, the cursor should return. What we have done here is load
    the `servo` object from `gpiozero` into memory. We will assign pin GPIO `17` with
    the following statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'We will now move the servo motor to the minimum (`min`) position. Type the
    following into the command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: You should hear the servo motor moving, and the needle will go to its farthest
    position (if it is not already there).
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s move the servo motor to the maximum ( `max`) position with the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, move the servo to the middle ( `mid`) position with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The servo motor should move to its middle position.
  prefs: []
  type: TYPE_NORMAL
- en: 'When you place your hand over the servo motor, you may feel a slight jerking
    motion. To temporarily disable control of the servo, type the following into the
    command line and press Enter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The jerking motion should stop, and the needle indicator attached to the servo
    should stay in its current position.
  prefs: []
  type: TYPE_NORMAL
- en: As we can see, it is very easy to move the servo motor to its minimum, middle,
    and maximum values. But what if we want to have more precise control of the servo?
    For those instances, we may use the value property of the `servo` object. A value
    between `-1` (minimum) and `1` (maximum) can be used to move the servo motor.
  prefs: []
  type: TYPE_NORMAL
- en: 'Type the following into the command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The `servo` should move to its minimum position. Now, type the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The `servo` should now move to its maximum position. Let''s use the value property
    to indicate weather conditions. Type the following into the command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Test the code in the shell with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see the following in the shell:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'With our `servo` object and our `weather_conditions` dictionary, we may now
    use the servo motor to indicate the weather conditions physically. Type the following
    into the shell:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The servo motor should move to the minimum position to indicate that the weather
    conditions are `cloudy`. Now, let''s try `sunny`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: The servo should move to the maximum position to indicate `sunny` weather conditions.
  prefs: []
  type: TYPE_NORMAL
- en: 'For `partly cloudy` and `partly sunny` conditions, use the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Write a Python program to control the servo
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Jerry Seinfeld once joked that all we need to know about the weather is: Should
    we bring a coat or not? For the rest of this chapter and the next, we will build
    an analog meter needle dashboard to indicate the wardrobe needed for the weather
    conditions.'
  prefs: []
  type: TYPE_NORMAL
- en: We will also add an LED that will turn on to indicate that an umbrella is needed,
    and flash to indicate a very bad storm.
  prefs: []
  type: TYPE_NORMAL
- en: Before we can build the dashboard in [Chapter 6](f9133d23-c79a-4bf6-98f3-5405b8f0f5cf.xhtml),
    *Working with the Servo Control Code to Control an Analog Device*, we need code
    to control the servo and LED. We will start by creating a class to do just that.
  prefs: []
  type: TYPE_NORMAL
- en: 'This class will set the servo position and LED state on our circuit:'
  prefs: []
  type: TYPE_NORMAL
- en: Open up Thonny from Application Menu | Programming | Thonny Python IDE
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the New icon to create a new file
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Type the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Save the file as `WeatherDashboard.py`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the code
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You should see the servo move to the middle position, and the LED should turn
    on
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Experiment with other values and see if you can move the servo to 75% and have
    the LED blink.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at the code. After defining the class, we set GPIO pin values
    for the servo and LED with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: As you saw in the circuit we built, we connected the servo and LED to GPIO `17`
    and GPIO `14`, respectively. `GPIO Zero` allows us to assign GPIO values easily
    without boilerplate code.
  prefs: []
  type: TYPE_NORMAL
- en: 'In our class initialization method, we create `Servo` and `LED` objects called
    `servo` and `led` respectively:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'From here, we call the methods in our class that move the servo and set the
    LED. Let''s look at the first method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'In this method, we simply set the value property in `servo` object. As this
    property only accepts values from `-1` to `1`, and we are passing a value from
    `0` to `100`, we need to convert our `servo_position`. We do that with the following
    method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: In order to convert a percentage value to a `-1` to `1` scale value, we multiply
    the percentage value by `0.02`, and then subtract `1`. It's easy to verify this
    math by using the percentage value of `50`. The value of `50` represents the middle
    value in a `0` to `100` scale. Multiplying `50` by `0.02` produces the value of
    `1`. Subtracting `1` from this value produces `0`, which is the middle value in
    a `-1` to `1` scale.
  prefs: []
  type: TYPE_NORMAL
- en: 'To set the status of the LED (`off`, `on`, or `blink`) we call the following method
    from our initialization method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: In `set_led_status`, we set our LED to `off` if the value passed in is `0`,
    `on` if the value is `1`, and `blink` if it is any other value.
  prefs: []
  type: TYPE_NORMAL
- en: 'We test out our class with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: In [Chapter 6](f9133d23-c79a-4bf6-98f3-5405b8f0f5cf.xhtml), *Working with the
    Servo Control Code to Control an Analog Device*, we will use this class to build
    our analog weather dashboard.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we can see, bridging the gap between the digital and analog worlds for data
    display is relatively easy using the Raspberry Pi. Its GPIO port allows for easy
    connection to various output devices such as motors and LEDs.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we connected a servo motor and LED, and controlled them using
    Python code. We will expand on this in [Chapter 6](f9133d23-c79a-4bf6-98f3-5405b8f0f5cf.xhtml),
    Working with the Servo Control code to Control an Analog Device, as we build an
    IoT weather dashboard with an analog meter display.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: True or false? A stepper motor is controlled using an open-loop feedback system.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What type of electric motor would you use if you were building an electric car?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: True or false? Servo motors are considered a high-performance alternative to
    stepper motors.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What controls the angle of the servo motor?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: True or false? DC motors have shorter response times than stepper motors.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which Python package do we use to control our servo?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: True or false? We are able to control a servo using the Python shell in Thonny.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which command is used to move the servo to its maximum position?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: True or false? We can only move the servo to its minimum, maximum, and middle
    positions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do we convert percentage values to the corresponding values that the `servo`
    object understands in our code?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `GPIO Zero` documentation gives a complete overview of this amazing Raspberry
    Pi Python library. Find out more at [https://gpiozero.readthedocs.io/en/stable/](https://gpiozero.readthedocs.io/en/stable/).
  prefs: []
  type: TYPE_NORMAL
