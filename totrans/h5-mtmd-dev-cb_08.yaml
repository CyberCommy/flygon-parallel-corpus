- en: Chapter 8. Embracing Audio and Video
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Saying no to Flash
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding `audio` and `video` file formats
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying `video` for everybody
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating accessible `audio` and `video`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Crafting a slick `audio` player
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Embedding `audio` and `video` for mobile devices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '"Flash was created during the PC era - for PCs and mice. Flash is a successful
    business for Adobe, and we can understand why they want to push it beyond PCs.
    But the mobile era is about low power devices, touch interfaces and open web standards
    all areas where Flash falls short. The avalanche of media outlets offering their
    content for Apple''s mobile devices demonstrates that Flash is no longer necessary
    to watch video or consume any kind of web content." - Steve Jobs'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Like many of the other new technologies we've looked at already, in the open
    source HTML5 standard, the new `audio` and `video` elements are more mature and
    usable than ever before. That's a good thing, because users' expectations for
    multimedia are much higher than ever before. Back in the day we used 300-baud
    modems that took 10 minutes to download one photo. Later, we used Napster to illegally
    download MP3 `audio` files. Now, we stream television and pornography on our mobile
    devices. Since the bandwidth pipe has gotten fatter and fatter, our demand for
    interactive entertainment has become virtually insatiable. It's time for the money
    shot.
  prefs: []
  type: TYPE_NORMAL
- en: For years the battle was between QuickTime, RealPlayer, and Flash for video
    playback dominance on the web. These browser plugins were easy to install and
    *usually* produced expected results.
  prefs: []
  type: TYPE_NORMAL
- en: Over time, QuickTime and RealPlayer continued as playback platforms but the
    makers of the proprietary Flash tool also created a robust development environment,
    allowing not just designers but also developers to see it as a viable platform.
  prefs: []
  type: TYPE_NORMAL
- en: While QuickTime and RealPlayer still exist, Flash has won the war. For animations
    and cartoons, Flash is the ideal tool. But is it the best to serve up `audio`
    and `video` anymore? Steve Jobs sure didn't think so.
  prefs: []
  type: TYPE_NORMAL
- en: In 2010, Jobs, head of Apple Computer, drew a line in the sand and said Flash
    would never appear on his best selling iPhones and iPads. Instead, he came out
    strongly in favor of the open HTML5 standard and ignited an online holy war.
  prefs: []
  type: TYPE_NORMAL
- en: Soon, pronouncements of "The Death of Flash" made headlines in the media and
    throughout the blogosphere. Some wrote with such bile it was as if a dam had burst
    and all the accumulated filth and scum was allowed to flood our collective multimedia
    conversations.
  prefs: []
  type: TYPE_NORMAL
- en: 'Quickly, even non-web designers and developers took notice, like when C.C.
    Chapman, noted author of the book "Content *Rules"* expressed his dissatisfaction
    with The Today Show not being available on his iPad:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Introduction](img/1048_08_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The issue has quickly permeated our online entertainment discussions. You no
    longer have to be a web designer or developer to know there's a real issue here.
  prefs: []
  type: TYPE_NORMAL
- en: C.C. spoke simply and to the point, but the author knows he's managed to put
    his foot in his mouth when talking about the Flash/HTML5 `video` war that Steve
    created. Sometimes he's argued his point with too much gusto and bravado, but
    the truth is those with clearer heads like web designer Jessica Bonn are right
    when they remind us that Flash and HTML5 `video` can peacefully coexist.
  prefs: []
  type: TYPE_NORMAL
- en: In less than a year since Steve made his pronouncement, sites like ABC, CBS,
    CNN, ESPN, Facebook, Fox News, MSNBC, National Geographic, Netflix, The New York
    Times, NPR, People, Sports Illustrated, Time, Vimeo, The Wall Street Journal,
    YouTube, and more have adopted the new HTML5 `audio` and `video` elements. As
    of this writing, more than 60 percent of all web `video` is now HTML5 ready. It's
    safe to say that the new HTML5 `audio` and `video` capabilities are some of the
    most exciting and anticipated new developments!
  prefs: []
  type: TYPE_NORMAL
- en: 'Browsers that support the new HTML5 `audio` and `video` elements include:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Introduction](img/1048_08_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In this chapter, we'll look at real-life examples of saying no to Flash, understanding
    the new `video` and `audio` file formats, displaying `video` for everybody, creating
    accessible `audio` and `video`, crafting a slick `audio` player, and embedding
    `audio` and `video` for mobile devices.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's get cooking!
  prefs: []
  type: TYPE_NORMAL
- en: Saying no to Flash
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The author's mom used to say there's a time and place for everything, and we
    believe there's a time and place for Flash. It's just that now with more mature
    technology, there's less time and less place for Flash in this author's opinion.
  prefs: []
  type: TYPE_NORMAL
- en: '![Saying no to Flash](img/1048_08_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'In the bad old days, if we wanted to use a YouTube video like "Neutraface",
    the typography world''s answer to Lady Gaga''s "Pokerface", in a web page, we''d
    have to work with some ugly code like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: That's long, ugly, convoluted, and won't pass a validation test. It also relies
    on a third-party plugin. Ugh.
  prefs: []
  type: TYPE_NORMAL
- en: For years, we suffered with that junk, but no more. Now we can rebuild it —
    we have the technology.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Instead of that bloated `object` code, now we can use something much more elegant:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: That's all that's required. It's short, pretty, and it validates. And best of
    all, it doesn't require a plugin. Tell me again why we thought Flash was a good
    idea.
  prefs: []
  type: TYPE_NORMAL
- en: To add a bit more style and functionality, let's include just a little more
    code.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: That code should be pretty straightforward. As you might guess, `src` refers
    to the source `video` file, `controls` indicate the `video` should play with standard
    playback and volume controls, and `height` and `width` are self explanatory.
  prefs: []
  type: TYPE_NORMAL
- en: 'Modern browsers now have their own native HTML5 `audio` and `video` playback
    controls. Let''s take a look at each one, starting with Apple Safari:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/1048_08_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'This is how Google Chrome displays the playback controls:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/1048_08_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Microsoft Internet Explorer 9 displays it differently:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/1048_08_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Then, Mozilla Firefox does it differently still:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/1048_08_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'It should come as no surprise that Opera displays the playback controls in
    yet another way:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/1048_08_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Every single one of those looks different. If each of those different appearances
    are sufficient for your needs, great! If not, that will definitely require more
    work to get those to act and appear similar.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are a few optional attributes we could include, too. They are:'
  prefs: []
  type: TYPE_NORMAL
- en: '`autobuffer` - This Boolean attribute tells the browser to start downloading
    the song or movie even before the user clicks the play button.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`autoplay` - As you might guess, this tells the browser to start playing the
    HTML5 `audio` or `video` automatically.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`loop` - Also a Boolean attribute, it plays the HTML5 `audio` or `video` file
    over and over.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: preload - The preload attribute starts loading the file before it's even played.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`poster` - The `poster` attribute is a static placeholder image displayed while
    the new HTML5 `video` loads. This attribute wouldn''t apply to an HTML5 `audio`
    file, obviously.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Whether you add none or all of these optional attributes, you'll still end up
    with a prettier, more semantic, more accessible method of displaying `audio` and
    `video` than relying upon Flash to serve it up for you.
  prefs: []
  type: TYPE_NORMAL
- en: Some good news
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Unlike the `canvas` chapter, the good news about the new HTML5 `audio` and `video`
    elements is that they are accessible. Right out of the box, the new HTML5 `audio`
    and `video` elements feature keyboard accessibility. Since the browser now handles
    the new HTML5 `audio` and `video` elements natively, it can support your keyboard
    just as if it had buttons instead of keys. This alone could go a long way toward
    acceptance of this new technology.
  prefs: []
  type: TYPE_NORMAL
- en: Video with style
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The new HTML5 `audio` and `video` elements are visually stylable with CSS. We
    can use CSS to not only control the size of the player but also add `:hover` and
    `:transform` effects. In addition, we can use JavaScript to control the new HTML5
    `audio` and `video` behavior. Cool!
  prefs: []
  type: TYPE_NORMAL
- en: Cover your assets
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: One area where Flash does provide an advantage is in protecting your `audio`
    and `video` content. Remember that by nature, the new HTML5 `audio` and `video`
    elements are open source and feature no digital rights management. If protecting
    your `audio` or `video` file from being downloaded is a deal breaker for you,
    the new HTML5 `audio` and `video` elements are not the tools for you — Flash probably
    still is. That's not to say that Flash offers ultimate protection against thievery
    — it's simply to say that out of the box, Flash obscures the ability to find the
    media track, where the new HTML5 `<audio>` and `<video>` elements by default leave
    those files right out in the open to anyone. Flash Media Server, however, does
    allow you to completely protect your assets.
  prefs: []
  type: TYPE_NORMAL
- en: Still not sure whether to choose HTML5 audio and video or Flash? Try this list
    of handy tips.
  prefs: []
  type: TYPE_NORMAL
- en: 'The benefits of HTML5 include:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Accessibility:** If accessibility matters to you (and it should) then the
    new HTML5 `audio` and `video` elements are your best options.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**iOS:** If you want your `audio` and `video` to display on the iPhone or iPad,
    HTML5 is your only choice.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Mobile:** Mobile devices other than Apple''s have great support for the new
    HTML5 `audio` and `video` elements.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Video/Audio` **Streaming:** If the content you''re streaming isn''t proprietary
    and doesn''t require rights management, HTML5 is the perfect option for you.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The benefits of Flash include:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Accessibility:** If you don''t care about the blind or deaf, don''t support
    them. Who cares if you get sued, right?'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Animation:** Without a doubt, the best reason to use Flash is if you have
    intensive animation on your site. Sites like [http://jibjab.com](http://jibjab.com)
    couldn''t exist without it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Desktop-only development:** If you don''t need to support mobile users. That''s
    just a fad anyway.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Video/Audio` **Streaming:** If you don''t like to share and must lock your
    `audio` or `video` down so it''s not easy for people to download, stick with Flash.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Webcams:** If you use webcams (and other than [http://chatroulette.com](http://chatroulette.com),
    who does that anymore?), then Flash is the way to go.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Is this *really* the most compelling reason to use Flash?
  prefs: []
  type: TYPE_NORMAL
- en: '![Cover your assets](img/1048_08_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Want to be able to play the new HTML5 `audio` and `video` elements in all major
    browsers, including all the way back to Internet Explorer 6? Who doesn't? If that's
    the case, check out the free, open-source Projekktor project at [http://projekktor.com](http://projekktor.com).
    The brain child of Sascha Kluger, Projekktor uses JavaScript to ensure the various
    supported browsers each see the specific HTML5 `video` file format they can correctly
    interpret and display.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding audio and video file formats
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are plenty of different `audio` and `video` file formats. These files
    may include not just `video` but also `audio` and metadata — all in one file.
    These file types include:'
  prefs: []
  type: TYPE_NORMAL
- en: '`.avi` - A blast from the past, the Audio Video Interleave file format was
    invented by Microsoft. Does not support most modern `audio` and `video` codecs
    in use today.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.flv` - Flash `video`. This used to be the only `video` file format Flash
    fully supported. Now it also includes support for `.mp4`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.mp4` or `.mpv` - MPEG4 is based on Apple''s QuickTime player and requires
    that software for playback.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Each of the previously mentioned `video` file formats require a browser plugin
    or some sort of standalone software for playback. Next, we'll look at new open-source
    `audio` and `video` file formats that don't require plugins or special software
    and the browsers that support them.
  prefs: []
  type: TYPE_NORMAL
- en: '**H.264** has become of the most commonly used high definition `video` formats.
    Used on Blu-ray Discs as well as many Internet `video` streaming sites including
    Flash, iTunes Music Store, Silverlight, Vimeo, YouTube, cable television broadcasts,
    and real-time videoconferencing. In addition, there is a patent on H.264 is therefore,
    by definition, not open source. Browsers that support H.264 `video` file format
    include:![How it works...](img/1048_08_10.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Google has now partially rejected the H.264 format and is leaning more toward
    its support of the new WebM `video` file format instead.
  prefs: []
  type: TYPE_NORMAL
- en: '**Ogg** might be a funny sounding name, but its potential is very serious,
    I assure you. Ogg is really two things: Ogg Theora, which is a `video` file format;
    and Ogg Vorbis, which is an `audio` file format. Theora is really much more of
    a `video` file compression format than it is a playback file format, though it
    can be used that way also. It has no patents and is therefore considered open
    source. We''ll discuss Ogg Vorbis in the next section.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Fun fact: According to Wikipedia, "Theora is named after Theora Jones, Edison
    Carter''s controller on the Max Headroom television program."'
  prefs: []
  type: TYPE_NORMAL
- en: 'Browsers that support the Ogg `video` file format include:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/1048_08_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**WebM** is the newest entrant in the online `video` file format race. This
    open source `audio/video` file format development is sponsored by Google. A WebM
    file contains both an Ogg Vorbis `audio` stream as well as a VP8 `video` stream.
    It is fairly well supported by media players including Miro, Moovidia, VLC, Winamp,
    and more, including preliminary support by YouTube. The makers of Flash say it
    will support WebM in the future, as will Internet Explorer 9\. Browsers that currently
    support WebM include:![How it works...](img/1048_08_12.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: So far this may seem like a laundry list of `audio` and `video` file formats
    with spotty browser support at best. If you're starting to feel that way, you'd
    be right.
  prefs: []
  type: TYPE_NORMAL
- en: The truth is no one `audio` or `video` file format has emerged as the one true
    format to rule them all. Instead, we developers will often have to serve up the
    new `audio` and `video` files in multiple formats while letting the browser decide
    whichever one it's most comfortable and able to play. That's a drag for now but
    here's hoping in the future we settle on fewer formats with more consistent results.
  prefs: []
  type: TYPE_NORMAL
- en: Audio file formats
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There are a number of `audio` file formats as well. Let's take a look at those.
  prefs: []
  type: TYPE_NORMAL
- en: '**AAC** - Advanced Audio Coding files are better known as AACs. This `audio`
    file format was created by design to sound better than MP3s using the same bitrate.
    Apple uses this `audio` file format for its iTunes Music Store. Since the AAC
    `audio` file format supports DRM, Apple offers files in both protected and unprotected
    formats. There is an AAC patent, so by definition we can''t exactly call this
    `audio` file format open source. All Apple hardware products, including their
    mobile iPhone and iPad devices as well as Flash, support the AAC `audio` file
    format. Browsers that support AAC include:![Audio file formats](img/1048_08_13.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**MP3** - MPEG-1 Audio Layer 3 files are better known as MP3s. Unless you''ve
    been hiding under a rock, you know MP3s are the most ubiquitous `audio` file format
    in use today. Capable of playing two channels of sound, these files can be encoded
    using a variety of bitrates up to 320\. Generally, the higher the bitrate, the
    better the `audio` file sounds. That also means larger file sizes and therefore
    slower downloads. There is an MP3 patent, so by definition we can''t exactly call
    this `audio` file format open source either. Browsers that support MP3 include:![Audio
    file formats](img/1048_08_14.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Ogg** - We previously discussed the Ogg Theora `video` file format. Now,
    let''s take a look at the Ogg Vorbis `audio` format. As mentioned before, there
    is no patent on Ogg files and are therefore considered open source.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Another fun fact: According to Wikipedia, "Vorbis is named after a *Discworld*
    character, Exquisitor Vorbis in *Small Gods* by *Terry Pratchett."*'
  prefs: []
  type: TYPE_NORMAL
- en: '![Audio file formats](img/1048_08_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: File format agnosticism
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We''ve spent a lot of time examining these various `video` and `audio` file
    formats. Each has its own plusses and minuses and are supported (or not) by various
    browsers. Some work better than others, some sound and look better than others.
    But here''s the good news: The new HTML5 `<video>` and `<audio>` elements themselves
    are file-format agnostic! Those new elements don''t care what kind of `video`
    or `audio` file you''re referencing. Instead, they serve up whatever you specify
    and let each browser do whatever it''s most comfortable doing.'
  prefs: []
  type: TYPE_NORMAL
- en: Can we stop the madness one day?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The bottom line is that until one new HTML5 `audio` and one new HTML5 `video`
    file format emerges as the clear choice for all browsers and devices, `audio`
    and `video` files are going to have to be encoded more than once for playback.
    Don't hold your breath for this to change any time soon.
  prefs: []
  type: TYPE_NORMAL
- en: Displaying video for everybody
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'According to author Mark Pilgrim, your HTML5 web `video` work flow will look
    something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: Make one version that uses WebM (VP8 and Vorbis).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Make another version that uses H.264 baseline `video` and AAC "low complexity"
    `audio` in an MP4 container.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Make another version that uses Theora `video` and Vorbis `audio` in an Ogg container.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Link to all three `video` files from a single `<video>` element, and fall back
    to a Flash-based `video` player.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kroc Camen did exactly that when he created "Video for Everybody", a chunk of
    HTML code that displays the new HTML5 `video` element if the user's browser can
    handle it and a Flash movie if it can't — all without JavaScript. Let's look at
    how Kroc did it at [http://camendesign.com/code/video_for_everybody](http://camendesign.com/code/video_for_everybody).
  prefs: []
  type: TYPE_NORMAL
- en: '![Displaying video for everybody](img/1048_08_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Looking closely, it's easy to see what Kroc did. First, he called the browser-native
    playback `controls`, as well as the new HTML5 `video` element's associated `height`
    and `width`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Next, one by one, Kroc calls each of the new HTML5 `video` sources in order,
    beginning with an MP4 file. Desktop browsers won't care much which order the HTML5
    `video` files are included in, but the iPad is picky about wanting an MP4 file
    specified first, so fine. You win again, Steve Jobs.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Kroc then hedges his bets by calling a Flash `video` version of the same file
    for wimpy browsers that can't handle the new HTML5 `video` element.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Finally, Kroc adds a nice extra touch by prompting the user to optionally download
    the new HTML5 `video` file itself in both closed (MP4) as well as open (Ogg) formats.
    Sharing is caring.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Of course you'd replace things like "_VIDEO_.MP4" with the path to your own
    files.
  prefs: []
  type: TYPE_NORMAL
- en: This approach is so full of win because no matter what web browser you use,
    you get to see *something* — all without requiring JavaScript or downloading Flash.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The concept is really quite simple: If your browser is capable of playing a
    new HTML5 `video` element file, that''s exactly what you''ll see. If it''s not
    capable of that, a Flash movie is also included in the code stack, so you should
    see that instead. If, for some reason, your browser won''t natively support the
    new HTML5 `video` element and the Flash player crashes or isn''t available, you''ll
    see a static image in its place. Everybody''s covered.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Browsers that will display the new HTML5 `video` element using this approach
    include:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/1048_08_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Browsers that will display Flash `video` using this approach include:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/1048_08_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'All other Flash `video` embedding methods prompt the user to download Flash
    if it isn''t already installed. "Video for Everybody" is unique in that it doesn''t
    do that. Author Kroc Camen did that by design, saying:'
  prefs: []
  type: TYPE_NORMAL
- en: '"Users have enough problems with security already without random websites prompting
    them to install things — and it''s even more annoying for people who don''t want
    or cannot use Flash anyway."'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: A mime is a terrible thing to waste
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Kroc reminds us to ensure our servers are using the correct `mime-types` and
    suggests placing these lines in your `.htaccess` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: External "Video for Everybody"
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There's now a "Video for Everybody" plugin for WordPress at [http://wordpress.org/extend/plugins/external-video-for-everybody](http://wordpress.org/extend/plugins/external-video-for-everybody).
    Now you can easily use Kroc's approach on your blog too.
  prefs: []
  type: TYPE_NORMAL
- en: Be flexible with your approach
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Later we''ll look at an approach that accomplishes much the same thing as Kroc''s
    approach does, but this time with JavaScript. Remember: Do what makes the most
    sense for you, your project, and most importantly, your customers.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Humanstxt.org is a project to make the developers behind websites more known.
    The site encourages developers to include a small text file that contains information
    about each of the team members that contributed to creating and building the site.
    Check it out at: [http://humanstxt.org](http://humanstxt.org).'
  prefs: []
  type: TYPE_NORMAL
- en: Creating accessible audio and video
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We've looked quite extensively at how to serve online HTML5 `video` to people
    regardless of their browser but haven't paid much attention to those who rely
    on assistive technologies. That ends now.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, we''ll start with Kroc Camen''s "Video for Everybody" code chunk and
    examine how to make it accessibility friendly to ultimately look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The first thing you'll notice is we've wrapped the new HTML5 `video` element
    in a wrapper `div`. While this is not strictly necessary semantically, it will
    give a nice "hook" to tie our CSS into.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Much of the next chunk should be recognizable from the previous section. Nothing
    has changed here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'So far, we''re still using the approach of serving the new HTML5 `video` element
    to those browsers capable of handling it and using Flash as our first fallback
    option. But what happens next if Flash isn''t an option gets interesting:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: What the heck is that, you might be wondering.
  prefs: []
  type: TYPE_NORMAL
- en: '"The `track` element allows authors to specify explicit external timed text
    tracks for media elements. It does not represent anything on its own." - W3C HTML5
    specification'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Here''s our chance to use another new part of the HTML5 spec: the new `<track>`
    element. Now, we can reference the type of external file specified in the `kind="captions"`.
    As you can guess, `kind="captions"` is for a caption file, whereas `kind="descriptions"`
    is for an `audio` description. Of course the `src` calls the specific file and
    `srclang` sets the source language for the new HTML5 `track` element. In this
    case, `en` represents English. Unfortunately, no browsers currently support the
    new `track` element.'
  prefs: []
  type: TYPE_NORMAL
- en: Lastly, we allow one last bit of fallback content in case the user can't use
    the new HTML5 `video` element or Flash when we give them something purely text
    based.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Now, even if the user can't see an image, they'll at least have some descriptive
    content served to them.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we''ll create a container `div` to house our text-based captions. So
    no browser currently supports closed captioning for the new HTML5 `audio` or `video`
    element, we''ll have to leave room to include our own:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Lastly, we''ll include Kroc''s text prompts to download the HTML5 `video` in
    closed or open file formats:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In addition to the optional `controls` attribute for the new HTML5 `audio`
    and `video` elements, there''s also the optional `loop` attribute. As you might
    guess, this example would allow the HTML5 `video` to keep playing over and over:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Always consider accessibility
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: That final descriptive content we're defaulting to could be an alternate place
    to serve downloadable links to those using accessibility technologies. It would
    obfuscate the download ability from those who can see or hear, so you should determine
    if that approach works for you.
  prefs: []
  type: TYPE_NORMAL
- en: Browser support
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The web browsers that have the best accessibility support for the new HTML5
    `audio` and `video` elements include:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Browser support](img/1048_08_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: See more
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can keep track of HTML5 accessibility at [http://html5accessibility.com](http://html5accessibility.com).
    The site tracks what new HTML5 features like `audio` and `video` are available
    and in which browsers. You might be surprised to discover that as of this writing,
    Opera is the least accessibility friendly web browser, rating even below Microsoft
    Internet Explorer 9\. Surprise, surprise.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Video.Js is another free, open-source HTML5 video player. It's lightweight,
    using no images, but remains fully skinnable via CSS. It looks great and supports
    Apple Safari, Google Chrome, Microsoft Internet Explorer 9, Mozilla Firefox, and
    Opera with fallback support for IE 6-8\. It even works for mobile devices like
    the iPhone, iPad, and Android. Check it out at [http://videojs.com](http://videojs.com).
  prefs: []
  type: TYPE_NORMAL
- en: Crafting a slick audio player
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Neutron Creations Principal and Co-Founder and front-end developer Ben Bodien
    created a customized HTML5 `audio` player for Tim Van Damme's The Box podcast
    at [http://thebox.maxvoltar.com](http://thebox.maxvoltar.com). Ben's creation
    is fast, intuitive, and slick. Let's take a deeper look at how he did it.
  prefs: []
  type: TYPE_NORMAL
- en: '![Crafting a slick audio player](img/1048_08_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Ben's custom HTML5 `audio` player features an attractive photo of the person
    being interviewed (Shaun Inman, in this case), a play/pause button, a track indicating
    playback progress, and the ability to pop the HTML5 `audio` player itself out
    into a separate window if you so choose. That's it. Nothing more is needed. As
    an added touch, notice the detail of the slight transparency of the HTML5 `audio`
    player bar. Smooooth.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'At first, Ben''s markup seems deceptively simple:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Wait a minute, I hear you thinking, "Where's the HTML5 `audio` tag?!" Never
    fear. Ben's a clever guy and has a plan for this. But first let's examine what
    he's done so far.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: This one's simple so far. Ben creates a wrapping element (a `<p>` in this case)
    to put his player in. Could he have used a `<div>` instead? Perhaps. Do what makes
    the most sense for you and your project.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Ben then uses this self-closing (notice the trailing slash at the end) `span`
    for the play/pause toggle button.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Now, it gets interesting. Ben's "gutter" `span` houses the timeline track with
    a bar indicating the loading or buffering progress of the HTML5 `audio` file and
    the circular element indicating the playback head, which you can "scrub" back
    and forth if you choose.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Finally, Ben uses another self-closing `span` to display the remaining time,
    in minutes and seconds.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `<span>` element does the job, but it isn't very semantic, is it? Patrick
    H. Lauke was quick to point out that using focusable elements would go a long
    way toward making this approach accessible to those who rely on assistive technologies.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Ben uses jQuery to detect support for HTML5 `audio`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: In that chunk of code, we can see how if the browser supports HTML5 `audio`,
    it gets served the full HTML5 `<audio>` tag, complete with fallbacks to `.ogg,
    .mp3`, and `.wav`, a file format we haven't worked with yet. Since the new HTML5
    `<audio>` and `<video>` elements are file format agnostic, a `.wav` file should
    work just fine too.
  prefs: []
  type: TYPE_NORMAL
- en: Ben has created a simple bit of JavaScript to allow browsers to do what they
    feel most comfortable doing. Consider this approach if it makes sense for you
    and your project, but remember that you're relying on JavaScript to do the heavy
    lifting, as opposed to other approaches we've looked at that don't rely on it.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that if you use a `<div>` to contain the HTML5 `video` player, that JavaScript
    would have to be adjusted as well. Simply put, the `<p class="player">` … `</p>`
    would be changed to `<div class="player">` … `</div>`.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: So far, we've set the markup for the player and "sniffed" to see which file
    format any particular browser wants. Now, we need to add some functionality.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: And then add a function to calculate the position of the playback head to determine
    the time remaining, being careful to include a leading zero if the time remaining
    calls for it.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: The only thing left to invoke is the play/pause button functionality.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Style and substance
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'After the simple markup and detailed JavaScript to create Ben''s customized
    HTML5 `audio` player, the only thing left is to style it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: It's a lot easier and more rewarding to spend the time to create something interesting
    when the content it's wrapping is compelling. The Box audio interviews are always
    a good listen — it's just too bad the author Tim Van Damme doesn't publish them
    more often. Here's hoping that changes in the future. Check it out at [http://thebox.maxvoltar.com](http://thebox.maxvoltar.com).
  prefs: []
  type: TYPE_NORMAL
- en: Being careful with details
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This approach works beautifully when there's one new HTML5 `audio` or `video`
    element on a page at a time to deliver. If you require more than one, you're going
    to have to modify the JavaScript to tie into multiple "hooks" in the markup.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'SublimeVideo takes a different approach to HTML5 online `video` playback: In
    this case, the player is not created or hosted by you, but by the makers of the
    player itself in the cloud. The benefit is that you always have the latest, freshest
    version of the player possible. That way when new features are available or bugs
    are fixed, there''s nothing for you to do. You automatically have the freshest
    features. Check it out at [http://sublimevideo.net](http://sublimevideo.net).'
  prefs: []
  type: TYPE_NORMAL
- en: Embedding audio and video for mobile devices
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We've really only touched on the mobile experience thus far but as development
    increases for ever-smarter mobile units, we need to turn our attention to getting
    our new HTML5 `audio` and `video` to display on those devices. Here's how.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that we know how to choose a HTML5 `audio` or `video` file format for our
    intended audience, we can now turn our attention to making sure they can hear
    or view it not just on their desktop computers and laptops, but also on their
    mobile devices.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll start by creating a free account with [http://vimeo.com](http://vimeo.com).
    Once your registration is complete, choose the Upload | Video ability in the main
    menu. You''ll choose the file you want to upload, add optional metadata, and let
    the Vimeo servers do their work setting up your file. Next is when the real excitement
    begins: Embedding the `video`. Choose **Tools** | **Embed This Video** from the
    Vimeo main menu.'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/1048_08_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Vimeo used to use the now old-fashioned Flash embedding method we looked at
    earlier. Now it uses an iFrame-based method that will allow the HTML5 `video`
    to be played on the iPhone, iPad, and other mobile devices. Here''s a sample,
    based on a `video` the author uploaded:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once you copy and paste that iFrame-based code snippet onto a web page and
    view it on an iPhone or iPad, you should have a mobile-friendly HTML5 `video`
    that you can make full size just like this one:'
  prefs: []
  type: TYPE_NORMAL
- en: '![There''s more...](img/1048_08_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Vimeo offers much more
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Vimeo also allows you to add friends from your e-mail contact list, create `video`
    subscriptions, make widgets, and much more. They now even offer Video School to
    help educate users on the most effective ways of capturing, editing, and sharing
    your `videos`.
  prefs: []
  type: TYPE_NORMAL
- en: Coming full circle
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: YouTube, the world's most popular online `video-viewing` site, also now uses
    an iFrame-based approach to embedding `videos` now too. We can take the same "Neutraface"
    `video` we started with at the beginning of this chapter, use the new iFrame-based
    embedding approach, and end up with something much more semantic and friendly.
    It also passes validation!
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Look at how much prettier that is!
  prefs: []
  type: TYPE_NORMAL
- en: We've come full circle and fully transformed our `video` capturing, editing,
    and playback abilities to work in modern browsers while supporting both those
    who rely on assistive technologies and those on mobile devices. And that's one
    to grow on.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Is Adobe cutting its own throat? Hardly. In early 2011, Adobe introduced a free
    Flash-to-HTML5 converter, codenamed "Wallaby". Unfortunately, many designers and
    developers felt Adobe over-promised when it claimed Wallaby could export Flash
    to HTML5 using web standards. The truth is all it does is convert the simplest
    animation created in Flash CS5 or later to simple markup and style. There's no
    ability to convert ActionScript to JavaScript, an ability that would truly make
    the tool valuable. Check out the Wallaby announcement over at John Nack's blog
    at [http://blogs.adobe.com/jnack/2011/03/wallaby-flash-to-html5-conversion-tool-now-available.html](http://blogs.adobe.com/jnack/2011/03/wallaby-flash-to-html5-conversion-tool-now-available.html).
  prefs: []
  type: TYPE_NORMAL
