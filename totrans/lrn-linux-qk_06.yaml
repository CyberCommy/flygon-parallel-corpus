- en: Hard versus Soft Links
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we further our knowledge on Linux files, and we discuss the
    differences between hard and soft links. If you have ever created a shortcut in
    Windows (or macOS) before, you will quickly grasp the concept of a soft link.
    But before we discuss hard and soft links, you first have to understand the concept
    of an inode.
  prefs: []
  type: TYPE_NORMAL
- en: File inodes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When you go to a grocery store, you will find that each product has a set of
    attributes like:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Product type: Chocolate'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Product price: $2.50'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Product supplier: Kit Kat'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Amount left: 199'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'These attributes can be displayed on any product in the grocery store by scanning
    the product''s barcode. And each barcode is unique, of course. Well, you can apply
    this analogy to Linux. Every file on Linux has a set of attributes like:'
  prefs: []
  type: TYPE_NORMAL
- en: File type
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: File size
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: File owner
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: File permissions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Number of hard links
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: File timestamp
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'These attributes are stored in a data structure called the inode (index node),
    and each inode is identified by a number (inode number). So you can think of inode
    numbers like the barcodes in a grocery store. Every file in Linux has an inode
    number and every inode number points to a file data structure, that is, the inode.
    And here is a formal definition of an inode:'
  prefs: []
  type: TYPE_NORMAL
- en: '**What is an Inode?**'
  prefs: []
  type: TYPE_NORMAL
- en: An inode is simply a file data structure that stores file information (attributes),
    and every inode is uniquely identified by a number (inode number).
  prefs: []
  type: TYPE_NORMAL
- en: Displaying file inode number
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are two commands you can use to view the inode number of a file:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ls -i` file'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`stat` file'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For example, to view the inode number of `facts.txt`, you can run the command
    `ls -i facts.txt`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'And it will spit out the inode number for you. You can also use the `stat`
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The `stat` command doesn't just list the inode number of a file; it also lists
    all the file attributes as you can see from the command output.
  prefs: []
  type: TYPE_NORMAL
- en: Creating soft links
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now since you understand what a file inode is, you can easily understand the
    concept of hard and soft links. And let us start with soft links:'
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT IS A SOFT LINK?**'
  prefs: []
  type: TYPE_NORMAL
- en: A soft link (also referred to as a symbolic link) is simply a file that points
    to another file.
  prefs: []
  type: TYPE_NORMAL
- en: A picture is worth a thousand words, so the following diagram will help you
    visualize soft links.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/cd68ca82-ecf6-448a-bc85-a2a2781e55c1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1: A soft link visualization'
  prefs: []
  type: TYPE_NORMAL
- en: 'To create a soft link, we use the `ln` command with the `-s` option as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'So to create a soft link named `soft.txt` to the `facts.txt` file, you can
    run the command `ln -s facts.txt soft.txt`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let''s do a long listing on the soft link file `soft.txt` that we just
    created:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: You will notice two things. First, the letter `l` in the first column of the
    output `lrwxrwxrwx`, which signals that the file is a link (soft link), and secondly
    you can see the right arrow `soft.txt → facts.txt`, which basically tells us that
    `soft.txt` is a soft link that points to the file `facts.txt`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s check the contents of the file `soft.txt`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Of course, it contains the same data that the original file `facts.txt` has.
    In fact, if you edit the soft link, it will actually edit the original file as
    well.
  prefs: []
  type: TYPE_NORMAL
- en: 'To demonstrate, open the file `soft.txt` with any text editor and add the line
    "Grass is green." at the very end of the file, and then save and exit so the contents
    of `soft.txt` will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let''s check the contents of the original file `facts.txt`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, the new line "Grass is green." is also there. That's because
    every time you edit a soft link, it actually edits the original file that it points
    to as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now if you delete the soft link, nothing will happen to the original file,
    it remains intact:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let''s create the soft link `soft.txt` again:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'If you delete the original file `facts.txt`, the soft link `soft.txt` will
    become useless! But before we delete the `facts.txt` file, let''s make a copy
    of it in `/tmp` because we will need it later on:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let''s delete the file `facts.txt` from `elliot`''s home directory and
    see what happens to the soft link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, the soft link `soft.txt` becomes useless as it's now pointing
    to nowhere. Keep in mind that the file `soft.txt` still exists, as shown in the
    following screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e811db2d-563a-4f9d-aaab-28ab68e72bd2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2: soft.txt becomes useless!'
  prefs: []
  type: TYPE_NORMAL
- en: The following diagram shows you that the soft link `soft.txt` points to nowhere
    after the original file `facts.txt` has been deleted.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4ca73beb-0143-44b9-be29-5c5d02bccfe7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3: soft.txt points to nowhere'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now if we moved `facts.txt` back to `elliot`''s home directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: The soft link `soft.txt` will be useful again! You can say that we resurrected
    the soft link!
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s compare the inode numbers of the soft link `soft.txt` and the original
    file `facts.txt`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, the inode numbers of the two files are different. Finally,
    let''s run the `stat` command on the soft link `soft.txt`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, it lists the file as a symbolic link, which is another name
    for a soft link.
  prefs: []
  type: TYPE_NORMAL
- en: 'So as you have seen so far, a soft link has the following properties:'
  prefs: []
  type: TYPE_NORMAL
- en: The inode of a soft link is different from the original file.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A soft link becomes useless once the original file is deleted.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Any change to the soft link is actually a change in the original file.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can create soft links to directories.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can create soft links to directories the same way you can create soft links
    to files. To demonstrate, let''s first create a directory named `sports` in `elliot`''s
    home directory. And inside `sports`, create three files – `swimming`, `soccer`,
    and `hockey` – as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let''s create a soft link named `softdir1` to the `sports` directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Now if you change to `softdir1`, you are actually changing to `sports`, and
    so you will see the same directory contents:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Of course, the same thing holds for directories as well; that is, if you delete
    the original directory, the soft link will become useless!
  prefs: []
  type: TYPE_NORMAL
- en: Creating hard links
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The story is a little bit different when it comes to hard links. That''s because
    a hard link is a replica of the original file. And here is a definition of a hard
    link:'
  prefs: []
  type: TYPE_NORMAL
- en: '**WHAT IS A HARD LINK?**'
  prefs: []
  type: TYPE_NORMAL
- en: A hard link is simply an additional name for an existing file. It has the same
    inode of the original file, and hence, it's indistinguishable from the original
    file.
  prefs: []
  type: TYPE_NORMAL
- en: You can think of it as a nickname. When somebody calls you by your nickname,
    they are still referring to you.
  prefs: []
  type: TYPE_NORMAL
- en: 'A hard link has the following properties:'
  prefs: []
  type: TYPE_NORMAL
- en: A hard link has (shares) the same inode of the original file.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A hard link remains intact if the original file gets deleted.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Any change in the hard link is reflected in the original file.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can't create hard links to directories.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following diagram helps you visualize hard links:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ec54b906-da01-41fc-87c8-c2571ebb9a2d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4: A hard link visualization'
  prefs: []
  type: TYPE_NORMAL
- en: 'We use the same `ln` command to create hard links, but this time we omit the
    `-s` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'So to create a hard link named `hard.txt` to the file `facts.txt`, you can
    simply run the command `ln facts.txt hard.txt`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let''s do a long listing on the hard link `hard.txt` and the original file
    `facts.txt`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'They are identical! The hard link also has the same contents just like the
    original file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Now add the line "Swimming is a sport." to the very end of the hard link `hard.txt` with
    the text editor of your choice:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Now just like in the case with soft links, the content of the original file
    has also changed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let''s check the inode numbers of both files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Notice that both files have the same inode number. Now let''s run the `stat`
    command on both files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of the `stat` command is identical for both files. And also, the
    number of `Links: 2` here means that there are two hard links to the file. Hmmm!
    We have only created one hard link to the file `facts.txt`, then how come it listed
    two hard links? Well, the original file is a hard link to itself, and so any file
    has a minimum of one hard link (itself).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now unlike the case with soft links, if you delete the original file `facts.txt`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'The hard link remains intact:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: The following diagram shows you why the hard link remains intact.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5072e80d-4954-4b5b-8441-aabf89fc7768.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5: hard.txt remains intact'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now notice that after the removal of the file `facts.txt`, the number of hard
    links count of the file `hard.txt` will decrease to one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'You can''t create a hard link to a directory. If you don''t believe me, then
    try creating a hard link named `variables` to the `/var` directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: I told you hard links are not allowed for directories! Why do you doubt me?
  prefs: []
  type: TYPE_NORMAL
- en: '**MIND-BLOWING FACT**'
  prefs: []
  type: TYPE_NORMAL
- en: There is NO WAY to differentiate between an original file and a hard link. For
    example, if you are given two files, and one of them happens to be a hard link
    for the other file, there is NO WAY to tell which file is the original! It is
    like the chicken and egg dilemma; no one knows which one came first!
  prefs: []
  type: TYPE_NORMAL
- en: Knowledge check
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For the following exercises, open up your Terminal and try to solve the following
    tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: Display the inode number of the `/var/log` directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Display the number of hard links for the `/boot` directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new directory named `coins` in your home directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a soft link to `coins` named `currency`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inside the `coins` directory, create two files – `silver` and `gold`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new file `bronze` inside `currency`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: List the contents of both directories – `coins` and `currency`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new file `beverages` with the line "coffee is awesome" in your home
    directory and create a hard link named `drinks` to `beverages`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add the line "lemon is refreshing" to the `drinks` file and then remove the
    `beverages` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Display the contents of your `drinks` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: True or false
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The **File Name** is a part of the inode data structure.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **File Size** is a part of the inode data structure.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can create soft links to directories.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can create hard links to directories.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The minimum number of hard links for a directory is `2`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Soft links have the same inode number as the original file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Hard links have the same inode number as the original file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
