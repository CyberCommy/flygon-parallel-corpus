- en: Building a Website with Bootstrap
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We just saw how powerful Bootstrap can be. With an extensive list of components
    and elements we can reuse, it can make our development phase very easy, and that''s
    why developers love it. In this chapter, we''ll discuss how to build our website
    using the Bootstrap framework using the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Learning how to set up Bootstrap in your project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating and styling our Navigation bar
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Continuing with the hero section
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating and styling the Blog section
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating and styling the About section
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finishing with the Footer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We'll start the project from scratch and create the same page we created before
    to compare our initial technique with the Bootstrap technique. Let's get started!
  prefs: []
  type: TYPE_NORMAL
- en: Installing Bootstrap
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The first thing we will need to do is download Bootstrap. There are any ways
    to download it. Let''s head to the download page to check it out. Click on the
    Download button on the homepage. Now you can take a look at the different methods
    of downloading the latest version of Bootstrap:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0aa32595-f9b0-4a0b-9c58-86b73c7287d4.png)'
  prefs: []
  type: TYPE_IMG
- en: Downloading Bootstrap
  prefs: []
  type: TYPE_NORMAL
- en: The first method is to download the Compiled version of Bootstrap. Your version
    will depend on when you take this course, but always take the latest version of
    Bootstrap.
  prefs: []
  type: TYPE_NORMAL
- en: You can also download the source version of Bootstrap with all the files, but,
    most of the time, you'll only need the compiled files, because it's quicker and
    easier to get Bootstrap up and running.
  prefs: []
  type: TYPE_NORMAL
- en: If you scroll down a little bit, you would notice BoostrapCDN. Bootstrap also
    provides a **C****ontent Delivery Network** (**CDN**) that will host the latest
    version of Bootstrap in a server, so you can paste only the URL without having
    to host the files on your server. It's pretty good, as your users will not have
    to download the files again, as it might have already downloaded the files by
    visiting another website using Bootstrap.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up our project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To get started, let's create a folder called `Racing Club Bootstrap`. In Atom,
    we will open a new window, click on Add Project Folder..., and locate the `Racing
    Club Bootstrap`.
  prefs: []
  type: TYPE_NORMAL
- en: Inside, let's create our `index.html` file. Click on Create New (*Ctrl* + *N*
    or *Cmd* + *N*), and save it so that we can name the file `index.html`.
  prefs: []
  type: TYPE_NORMAL
- en: Once done, let's head to the Bootstrap website ([http://getbootstrap.com/docs/4.0/getting-started/introduction/](http://getbootstrap.com/docs/4.0/getting-started/introduction/)),
    specifically, the Introduction section.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this section, Bootstrap provides you with a template to kick-start your
    project:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5b6a6c41-9f62-47cf-9fdd-dfc04b123f54.png)'
  prefs: []
  type: TYPE_IMG
- en: The Starter template
  prefs: []
  type: TYPE_NORMAL
- en: Copy the code provided and paste it into your `index.html` file. We can remove
    `<h1>Hello, world!</h1>` from the template.
  prefs: []
  type: TYPE_NORMAL
- en: We're ready to start, but we also want to write our own CSS. For that, let's
    create a folder called `css` and a CSS file called `styles.css`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do that quickly, you can right-click on the left-hand bar in Atom and click
    on New Folder, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/74a2f7cf-5ae1-4fe8-ae30-50fd5798182a.png)'
  prefs: []
  type: TYPE_IMG
- en: Create a folder in Atom
  prefs: []
  type: TYPE_NORMAL
- en: 'When you create a CSS file, you will always need to link it to your HTML file,
    otherwise it doesn''t work. If you remember to link it, you''ll have to add the
    following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Now that we have created our CSS file and linked it to our HTML file, the last
    thing we need to do is to duplicate the `img` and `fonts` folders we created in
    our last project. This is easier, as we will recreate the same page. Just copy
    and paste those folders to our new project.
  prefs: []
  type: TYPE_NORMAL
- en: 'Don''t forget to link the font CSS to your HTML. Add it before your `styles.css`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Install the Google Font Roboto:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Now that we're all set, let's get started.
  prefs: []
  type: TYPE_NORMAL
- en: Bootstrap navbar
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The first thing we will create is the Bootstrap `navbar`. The `navbar` within
    Bootstrap is one of the most recognizable features within the Bootstrap framework
    due to the nature of how it works. So, to provide an example of how it works,
    if we navigate to the Bootstrap website and then to the Documentation tab, we
    have all the navigation elements across the top of the screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c78be0f0-5ca3-4ec2-8f7e-a1087a470fbd.png)'
  prefs: []
  type: TYPE_IMG
- en: The Bootstrap navigation
  prefs: []
  type: TYPE_NORMAL
- en: 'If we shrink the browser, we can see how the navigation shrinks as well. Then,
    when it hits the smaller screen, we get this hamburger menu, which, if we click
    on it, displays the navigation elements within it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8c3ee499-9e69-44e7-a6d1-eeac3e734a44.png)'
  prefs: []
  type: TYPE_IMG
- en: The Bootstrap mobile navigation
  prefs: []
  type: TYPE_NORMAL
- en: Coding the Bootstrap navigation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now let's head to the `navbar` section of Components in our Bootstrap website.
    Here, you can find all the necessary documentation to build your navigation with
    Bootstrap.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s head back to our HTML file and write the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The details of the preceding code are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: We start off within the body of the content by adding our `<nav>` element and
    all `<nav>` elements require a `navbar` class.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, we added the new expand class, which is the `navbar-expand-lg`. This essentially
    tells the browser when to collapse the `navbar` and when to expand it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: So, in this case, it will expand and show the desktop version when it hits large
    screens. If we wanted to expand when we hit medium screens, then we just need
    to change `lg` to `md` or, for smaller screens, to `sm`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, we added the positioning class, and, because we want this `navbar` to
    be fixed at the top of the screen so that when the user scrolls, the navigation
    is always visible, we simply added the class `fixed-top`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, let''s add some navigation options:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'In this code, we simply id the following things:'
  prefs: []
  type: TYPE_NORMAL
- en: We added a `div` to the `collapse` class. This simply informs the browser that
    this `div` and all its content will be a collapsible element.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, we added a class of `navbar-collapse`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Lastly, we added an `id="navigation-bar"` that will link to our toggle button
    later on.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now we will need to add our navigation list, with a `<ul>` and `<li>` for the
    list and an `<a>` for every link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: To make the navigation work properly, we will need the `.navbar-nav` class on
    the `<ul>` and the `nav-item` class on the `<li>`. Lastly, we will need a `.nav-link`
    class on the `<a>` tag.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s check out our list in our browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/94dfd980-0930-46ae-850c-dc26b0b0ab45.png)'
  prefs: []
  type: TYPE_IMG
- en: Work in progress on our navigation
  prefs: []
  type: TYPE_NORMAL
- en: We have our Bootstrap navigation, but if you shrink the page to a mobile view,
    you will notice that the navigation disappears. That is because we haven't included
    our toggle button, so let's add it now.
  prefs: []
  type: TYPE_NORMAL
- en: 'Back in our `index.html`, we can add our button above the `div` we created.
    Let''s create a button tag and give it the `.navbar-toggler` class and instructions,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The `data-target` attribute is how we link the navigation options that we had
    earlier, which is the `#navigation-bar` ID.
  prefs: []
  type: TYPE_NORMAL
- en: Now we will need to add the hamburger menu inside this button. To do that, we
    can use the `≡` HTML code, which is the HTML code for a three-bar icon. There
    are plenty of HTML symbols available that you could use. You can google HTML symbols
    and that will provide you with plenty of examples and symbols.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s add a `span` tag with the `.navbar-toggler-icon` class and the HTML
    symbol inside:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, if we save and check it, we can see our menu icon on a mobile screen,
    and if we click on it, the menu appears correctly:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6786a443-f0fb-406d-9dd1-312be245c07b.png)'
  prefs: []
  type: TYPE_IMG
- en: Mobile navigation.
  prefs: []
  type: TYPE_NORMAL
- en: Now let's add the logo in our `navbar`. Usually, the logo is a link, so let's
    add a `<a>` tag with the `.navbar-brand` class.
  prefs: []
  type: TYPE_NORMAL
- en: 'We don''t want the logo to collapse on mobile view, so we''ll just add `<a>`
    before the `<button>`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'In this `<a>`, we added the following:'
  prefs: []
  type: TYPE_NORMAL
- en: A class `.navbar-brand`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: An `img` tag linked with our logo
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In this `img`, we added a `.img-fluid` class that makes this image responsive
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We have our logo set now, but it''s not done yet. We will need to add the right-hand
    side navigation. To do that, we simply need to add another `<ul>` after our `<ul
    class="navbar-nav">`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: We added the `.ml-auto` class to move this second navigation to the right. This
    stands for `margin-left` automatic. It fills the margin on the left-hand side
    of our navigation, which will effectively shift it to the right-hand side. If
    you wanted the opposite effect, you would simply add the `.mr-auto` class.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s take a look at our navigation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/524cb84d-b1e7-475e-947f-08d129cf635d.png)'
  prefs: []
  type: TYPE_IMG
- en: Bootstrap navigation
  prefs: []
  type: TYPE_NORMAL
- en: Our navigation looks awesome, and we have all the elements that we need for
    the navigation bar. Next, we will add some styles.
  prefs: []
  type: TYPE_NORMAL
- en: Styling our navigation bar
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Styling Bootstrap components is fairly simple. The only thing we need to do
    is to overwrite the Bootstrap CSS. However, we don''t want to overwrite Bootstrap
    CSS files themselves; the only thing we want to do is add additional CSS properties
    that will overwrite the original Bootstrap CSS. We have beforehand created a CSS
    file called `styles.css`, and, since this file is linked after the Bootstrap CSS
    file in order on the HTML document, every CSS we write having the same properties
    and class will overwrite the original Bootstrap CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'We need to target the right CSS class to overwrite it. If you remember, we
    used Google Chrome''s Inspector to inspect elements and check their CSS. To open
    the Inspector (or Developer Tool), right-click on the element and click on Inspect:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9f641423-5b66-4374-83b7-f5acb2bf06e3.png)'
  prefs: []
  type: TYPE_IMG
- en: The Inspect element on Chrome
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we can see the developer panel, and there is a lot of information there.
    You can check the different panels available. When hovering over an element in
    the HTML, you can see it displayed on the web page itself:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ba2dda67-2b7a-4f43-935e-9a3cc0ed40f8.png)'
  prefs: []
  type: TYPE_IMG
- en: The Google Chrome Inspector
  prefs: []
  type: TYPE_NORMAL
- en: This is very useful when you want to fix any CSS style issues or look at the
    HTML. Let's fix the CSS now.
  prefs: []
  type: TYPE_NORMAL
- en: With the Inspector, we can see that the `.navbar` class has some padding by
    default, but we want to get rid of it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Simply add the following CSS to your `styles.css`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'After saving, you can check that we overwrote the bootstrap CSS with our own:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/94265ee5-1fe8-4d71-89d2-5e58dd87961f.png)'
  prefs: []
  type: TYPE_IMG
- en: Overwriting the Bootstrap CSS
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that you understand the principle, we can quickly fix the navigation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code will stylize the `navbar` correctly. You can see that everything
    is functional without too many lines of code, even the responsive part. That's
    the power of Bootstrap. If we compare what we've done to make the navigation responsive,
    with jQuery and all the media queries, we've written a lot less code than we did
    for the first project. Let's move on to the hero section now.
  prefs: []
  type: TYPE_NORMAL
- en: Styling the hero section
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we understand how to use Bootstrap, we can start to use other components
    in Bootstrap''s library:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Let me explain the preceding piece of code a bit.
  prefs: []
  type: TYPE_NORMAL
- en: 'For the *first* `div` it is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: We first set a custom class—`.hero`—so that we can apply a custom code in the
    parent element.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We add the utility classes `.position-relative` and `.overflow-hidden` provided
    by Bootstrap so we don't have to apply them in the CSS.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The class `.d-flex` will set the display on `display: flex`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The utility class `.align-items-center` will align the child elements so that
    they are vertically centered.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We add a custom font `.custom-font-title` so that we can add to every element
    with a custom font.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We then apply a *second* `div` with the `.container` class so that we can apply
    the Bootstrap default `container` class.
  prefs: []
  type: TYPE_NORMAL
- en: The following classes are all part of the Bootstrap library. You can see them
    on the Bootstrap website.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next part is to customize the `.hero` class we added:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Save, and take a look at what we have:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/848912ed-18a1-4b45-a653-cc2db2a26cd8.png)'
  prefs: []
  type: TYPE_IMG
- en: Preview of the hero section
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s add the final touch to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'This will overwrite the default style of Bootstrap for the heading and primary
    button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/39b8112b-a917-461b-b3d1-c31910ad78e7.png)'
  prefs: []
  type: TYPE_IMG
- en: Our final hero section
  prefs: []
  type: TYPE_NORMAL
- en: Let's start the Blog section now.
  prefs: []
  type: TYPE_NORMAL
- en: Styling the Blog section
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With the earlier website that we built, we had our own grid system. However,
    now, we can simply use Bootstrap grid, which is way better and more practical
    than the one we created.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start with the HTML:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding code, you can note that there are a lot of `.py-5` `.my-5`
    classes. Those classes are spacing classes; they''ve been added to the last version
    of Bootstrap, so you can add spacing just with a simple class. To understand how
    you can use them, navigate to the Spacing section in the Utilities section of
    the documentation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7eda7dc3-316a-4503-ac85-b5bdc892d03f.png)'
  prefs: []
  type: TYPE_IMG
- en: Spacing utilities in Bootstrap
  prefs: []
  type: TYPE_NORMAL
- en: Also, you would have noticed we used the grid for each card. The grid is a bit
    tricky to understand at first, but, once you get it, it's very powerful and useful.
    The best thing to do is to play around with it. You can play around with the grid
    by checking the given examples at [https://getbootstrap.com/docs/4.0/layout/grid/](https://getbootstrap.com/docs/4.0/layout/grid/).
  prefs: []
  type: TYPE_NORMAL
- en: Here, we added the `.col-md-4` class because we want three same blocks with
    the same width, as Bootstrap works with a 12-column system—12 divided by 3 equals
    4\. Furthermore, we used the `md` property so that it only applies when the browser
    resolution is bigger than 768px.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s now duplicate the card six times for our six blog posts:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'The last thing is to add the Show more button. We also need to center the button
    horizontally. For that, we''ll use the `.d-flex` flexbox Bootstrap class paired
    with the `.align-items-center` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Finally, to make it centered, we just need to add the `.mx-auto` class, so the
    left and right margins are in auto.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s check what we have now:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f0024867-8940-465b-b99e-ed92a16ee425.png)'
  prefs: []
  type: TYPE_IMG
- en: Work in progress – the Blog section
  prefs: []
  type: TYPE_NORMAL
- en: 'We have something pretty neat, without any styling at all. The only thing left
    is to customize the cards and the outline button, and we''re good to go:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is the final stage of the design:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e2164d73-9ded-4348-a013-18eb5677f6e2.png)'
  prefs: []
  type: TYPE_IMG
- en: The design finalized in the blog section
  prefs: []
  type: TYPE_NORMAL
- en: That's it; we're all done with the Blog section. Let's start the ABOUT US section.
  prefs: []
  type: TYPE_NORMAL
- en: Styling the about section
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This section is pretty straightforward. We''ll reuse the same class as previously
    used. You can observe the following HTML code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'The only new class we used is the `.text-white` class. It''s a utility class
    of Bootstrap that lets you color the font with some primary colors. You can access
    the document at [https://getbootstrap.com/docs/4.0/utilities/colors/](https://getbootstrap.com/docs/4.0/utilities/colors/):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bf3957fb-8ac2-4200-915f-73be91b4a2bb.png)'
  prefs: []
  type: TYPE_IMG
- en: Text color classes in Bootstrap.
  prefs: []
  type: TYPE_NORMAL
- en: 'For the CSS, we only need to add the background and a little styling on the
    title:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s take a look at how it looks:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d9733fd1-16a6-48ac-af89-5821475342b4.png)'
  prefs: []
  type: TYPE_IMG
- en: The About Us section
  prefs: []
  type: TYPE_NORMAL
- en: This About Us section was pretty easy; let's continue to the PARTNERS section.
  prefs: []
  type: TYPE_NORMAL
- en: Styling the partner section
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For the PARTNERS section, we set the HTML to something such as this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, we used the class `.justify-content-center` to horizontally
    center the two partners. Everything else is pretty simple.
  prefs: []
  type: TYPE_NORMAL
- en: 'In terms of CSS, the only thing we had to do was change the color of the background
    to black:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'It''s done! How easy was it?:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/77f400eb-da8f-4344-ab15-f25816c7a3ae.png)'
  prefs: []
  type: TYPE_IMG
- en: The PARTNERS section
  prefs: []
  type: TYPE_NORMAL
- en: Let's head to the final step, that is, the footer.
  prefs: []
  type: TYPE_NORMAL
- en: Styling the footer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For the footer, things will get a bit more complex. The HTML will be something
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'In a lot of Bootstrap classes, there are some responsive utility classes you
    can apply, and they''re always with the same references: `xs`, `sm`, `md`, and `lg`.
    For example, for the `.d-flex` class, you can apply the responsive utility class
    when you need to. By adding `.d-md-flex`, you apply the `display:flex` property only
    on medium screens. This is very useful and can be applied to a lot of Bootstrap
    classes.'
  prefs: []
  type: TYPE_NORMAL
- en: 'With the good use of classes, the only CSS we needed to write was the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'This is what our footer looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1e039c8d-f312-4a4a-a978-62a4c4a3dfbc.png)'
  prefs: []
  type: TYPE_IMG
- en: Our footer section
  prefs: []
  type: TYPE_NORMAL
- en: 'It''s fully responsive:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0dffa5c5-80b5-4870-8064-0fb4318f6db7.png)'
  prefs: []
  type: TYPE_IMG
- en: The footer section on mobile
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You saw how Bootstrap can help you in your development phase. If you can master
    the use of Bootstrap, you can really kick-start or implement any project with
    ease and efficiency. This is why so many developers love Bootstrap, and you should
    too.
  prefs: []
  type: TYPE_NORMAL
- en: What's next? Next, we will have an introduction to server-side rendering and
    why it's the new development trend. Let's go.
  prefs: []
  type: TYPE_NORMAL
