- en: AWS Cloud Networking
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Cloud computing is one of the major trends in computing today. Public cloud
    providers have transformed the high-tech industry and what it means to launch
    a service from scratch. We no longer need to build our own infrastructure; we can
    pay the public cloud providers to rent a portion of their resources for our infrastructure
    needs. Nowadays, walking around any technology conferences or meetups, we will
    be hard-pressed to find a person who has not learned about, used, or built services
    based in the cloud. Cloud computing is here, and we better get used to working
    with it.
  prefs: []
  type: TYPE_NORMAL
- en: There are several service models of cloud computing, roughly divided into **Software-as-a-Service**
    (**SaaS**) ([https://en.wikipedia.org/wiki/Software_as_a_service](https://en.wikipedia.org/wiki/Software_as_a_service)),
    **Platform-as-a-Service** (**PaaS**) ([https://en.wikipedia.org/wiki/Cloud_computing#Platform_as_a_service_(PaaS)](https://en.wikipedia.org/wiki/Cloud_computing#Platform_as_a_service_(PaaS))),
    and **Infrastructure-as-a-Service** (**IaaS**) ([https://en.wikipedia.org/wiki/Infrastructure_as_a_service](https://en.wikipedia.org/wiki/Infrastructure_as_a_service)).
    Each service model offers a different level of abstraction from the user's perspective.
    For us, networking is part of the Infrastructure-as-a-Service offering and the
    focus of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: '**Amazon Web Services** (**AWS**—[https://aws.amazon.com/](https://aws.amazon.com/))
    is the first company to offer IaaS public cloud services and the clear leader
    in the space by market share in 2018\. If we define the term **Software Defined
    Networking** (**SDN**) as a group of software services working together to create
    network constructs – IP addresses, access lists, Network Address Translation,
    routers – we can make the argument that AWS is the world''s largest implementation
    of SDN. They utilize their massive scale of the global network, data centers,
    and hosts to offer an amazing array of networking services.'
  prefs: []
  type: TYPE_NORMAL
- en: If you are interested in learning about Amazon's scale and networking, I would
    highly recommend taking a look at James Hamilton's AWS re:Invent 2014 talk: [https://www.youtube.com/watch?v=JIQETrFC_SQ](https://www.youtube.com/watch?v=JIQETrFC_SQ).
    It is a rare insider's view of the scale and innovation at AWS.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will discuss the networking services offered by the AWS
    cloud services and how we can use Python to work with them:'
  prefs: []
  type: TYPE_NORMAL
- en: AWS setup and networking overview
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Virtual private cloud
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Direct Connect and VPN
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Networking scaling services
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Other AWS network services
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AWS setup
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you do not already have an AWS account and wish to follow along with these
    examples, please log on to [https://aws.amazon.com/](https://aws.amazon.com/)
    and sign up. The process is pretty straightforward and simple; you will need a
    credit card and some form of verification. AWS offers a number of services in
    a free tier ([https://aws.amazon.com/free/](https://aws.amazon.com/free/)), where
    you can use some of the most popular services for free up to a certain level.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some of the services listed are free for the first year, and others are free
    up to a certain limit without time restraint. Please check the AWS site for the
    latest offerings:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/c63f6039-b3d3-41b9-9654-c91aa3b51537.png)AWS free tier'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have an account, you can sign in via the AWS console ([https://console.aws.amazon.com/](https://console.aws.amazon.com/))
    and take a look at the different services offered by AWS. The console is where
    we can configure all the services and look at our monthly bills:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/40bd402d-f546-4d6c-b4bc-157cff3d978a.png)AWS console'
  prefs: []
  type: TYPE_NORMAL
- en: AWS CLI and Python SDK
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can also manage the AWS services via the command-line interface. The AWS
    CLI is a Python package that can be installed via PIP ([https://docs.aws.amazon.com/cli/latest/userguide/installing.html](https://docs.aws.amazon.com/cli/latest/userguide/installing.html)).
    Let''s install it on our Ubuntu host:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the AWS CLI is installed, for easier and more secure access, we will create
    a user and configure AWS CLI with the user credentials. Let''s go back to the
    AWS console and select IAM for user and access management:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/5fc1647e-cd89-424f-81af-e674415d622c.png) AWS IAM'
  prefs: []
  type: TYPE_NORMAL
- en: 'We can choose `Users` on the left panel to create a user:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/697ef15f-61f3-445d-a5ef-3f24332c0a84.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Select programmatic access and assign the user to the default administrator
    group:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/b6f17d3f-d822-41e8-a054-4089af2a9e9d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The last step will show an Access key ID and a Secret access key. Copy them
    into a text file and keep it in a safe place:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/3a53eaff-674a-4c07-8d58-3e256e86bfab.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We will complete the AWS CLI authentication credential setup via `aws configure` in
    the terminal. We will go over AWS regions in the upcoming section; we will use
    `us-east-1` for now, but feel free to come back and change this value later:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'We will also install the AWS Python SDK, Boto3 ([https://boto3.readthedocs.io/en/latest/](https://boto3.readthedocs.io/en/latest/)):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: We are now ready to move on to the subsequent sections, starting with an introduction
    to AWS cloud networking services.
  prefs: []
  type: TYPE_NORMAL
- en: AWS network overview
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When we discuss AWS services, we need to start at the top with regions and
    availability zones. They have big implications for all of our services. At the
    time of writing this book, AWS listed 18 Regions, 55 **Availability**** Zones**
    (**AZ**), and one local region around the world. In the words of AWS Global Infrastructure,
    ([https://aws.amazon.com/about-aws/global-infrastructure/](https://aws.amazon.com/about-aws/global-infrastructure/)):'
  prefs: []
  type: TYPE_NORMAL
- en: '"The AWS Cloud infrastructure is built around Regions and Availability Zones
    (AZs). AWS Regions provide multiple, physically separated and isolated Availability
    Zones which are connected with low latency, high throughput, and highly redundant
    networking."'
  prefs: []
  type: TYPE_NORMAL
- en: 'Some of the services AWS offer are global, but most of the services are region-based.
    What this means for us is that we should build our infrastructure in a region
    that is closest to our intended users. This will reduce the latency of the service
    to our customer. If our users are in the United States east coast, we should pick
    `us-east-1` (N. Virginia) or `us-east-2` (Ohio) as our region if the service is
    regional-based:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/8255a3ce-7fed-4297-aa14-49c62b673c65.png)AWS regions'
  prefs: []
  type: TYPE_NORMAL
- en: 'Not all regions are available to all users, for example, GovCloud and the China region
    are not available to users in the United States by default. You can list the regions
    available to you via `aws ec2 describe-regions`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'All the regions are completely independent of one another. Most resources are
    not replicated across regions. If we have multiple regions, say `US-East` and
    `US-West`, and need redundancy between them, we will need to replicate the necessary
    resources ourselves. The way you choose a region is on the top right corner of
    the console:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/6c3fe18c-aab2-4757-85b8-ce9584f5eddd.png)If the service is region-based,
    for example, EC2, the portal will only show the service when the right region
    is selected. If our EC2 instances are in `us-east-1` and we are looking at the
    us-west-1 portal, none of the EC2 instances will show up. I have made this mistake
    a few times, and wondered where all of my instances went!'
  prefs: []
  type: TYPE_NORMAL
- en: 'The number behind the regions in the preceding AWS regions screenshot represents
    the number of AZ in each region. Each region has multiple availability zones.
    Each availability zone is isolated, but the AZs in a region are connected through
    low-latency fiber connections:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/9d72cf3c-5508-4524-966e-84554a9fa937.png)AWS regions and availability zones'
  prefs: []
  type: TYPE_NORMAL
- en: Many of the resources we built are copied across availability zones. The concept
    of AZ is very important, and its constraints are important to us for the network
    services we will build.
  prefs: []
  type: TYPE_NORMAL
- en: AWS independently maps availability zones to identifiers for each account. For
    example, my availability zone, us-eas-1a, might not be the same as `us-east-1a`
    for another account.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can check the AZs in a region in AWS CLI:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Why do we care about regions and availability zones so much? As we will see
    in the coming few sections, the networking services are usually bound by the region
    and availability zones. **Virtual Private Cloud (VPC)**, for example, needs to
    reside entirely in one region, and each subnet needs to reside entirely in one
    availability zone. On the other hand, **NAT Gateway** is AZ-bound, so we will
    need to create one per AZ if we needed redundancy. We will go over both services
    in more detail, but their use cases are offered here as examples of how regions
    and availability zones are the basis of the AWS network services offering.
  prefs: []
  type: TYPE_NORMAL
- en: '**AWS Edge locations** are part of the **AWS CloudFront** content delivery
    network in 59 cities across 26 countries. These edge locations are used to distribute
    content with low latency with a smaller footprint than the full data center Amazon
    builds for the region and availability zones. Sometimes, people mistook the edge
    locations'' point-of-presence for full AWS regions. If the footprint is listed
    as an edge location only, the AWS services such as EC2 or S3 will not be offered.
    We will revisit the edge location in the *AWS CloudFront* section.'
  prefs: []
  type: TYPE_NORMAL
- en: '**AWS Transit Centers** is one of the least documented aspects of AWS networks.
    It was mentioned in James Hamilton''s 2014 **AWS re:Invent** keynote ([https://www.youtube.com/watch?v=JIQETrFC_SQ](https://www.youtube.com/watch?v=JIQETrFC_SQ))
    as the aggregation points for different AZs in the region. To be fair, we do not
    know if the transit center still exists and functions the same way after all these
    years. However, it is fair to make an educated guess about the placement of the
    transit center and its correlation about the **AWS Direct Connect** service that
    we will look at later in this chapter.'
  prefs: []
  type: TYPE_NORMAL
- en: James Hamilton, a VP and distinguished engineer from AWS, is one of the most
    influential technologists at AWS. If there is anybody who I would consider authoritative
    when it comes to AWS networking, it would be him. You can read more about his
    visions on his blog, Perspectives, at [https://perspectives.mvdirona.com/](https://perspectives.mvdirona.com/).
  prefs: []
  type: TYPE_NORMAL
- en: 'It is impossible to cover all of the services related to AWS in one chapter.
    There are some relevant services not directly related to networking that we do
    not have the space to cover, but we should be familiar with:'
  prefs: []
  type: TYPE_NORMAL
- en: The **Identify and Access Management** (**IAM**)service, [https://aws.amazon.com/iam/](https://aws.amazon.com/iam/), is
    the service that enables us to manage access to AWS services and resources securely.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Amazon Resource Names** (**ARNs**), [https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html),
    uniquely identify AWS resources across all of AWS. This resource name is important
    when we need to identify a service, such as DynamoDB and API Gateway, that needs
    access to our VPC resources.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Amazon Elastic Compute Cloud** (**EC2**), [https://aws.amazon.com/ec2/](https://aws.amazon.com/ec2/),
    is the service that enables us to obtain and provision compute capacities, such
    as Linux and Windows instances, via AWS interfaces. We will use EC2 instances
    throughout this chapter in our examples.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For the sake of learning, we will exclude AWS GovCloud (US) and China, neither
    of which uses the AWS global infrastructure and have their own limitations.
  prefs: []
  type: TYPE_NORMAL
- en: 'This was a relatively long introduction to the AWS network overview, but an
    important one. These concepts and terms will be referred to in the rest of the
    chapters in this book. In the upcoming section, we will take a look at the most
    import concept (in my opinion) for AWS networking: the virtual private cloud.'
  prefs: []
  type: TYPE_NORMAL
- en: Virtual private cloud
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Amazon Virtual Private Cloud (Amazon VPC)** enables customers to launch AWS
    resources into a virtual network dedicated to the customer''s account. It is truly
    a customizable network that allows you to define your own IP address range, add
    and delete subnets, create routes, add VPN gateways, associate security policies,
    connect EC2 instances to your own datacenter, and much more. In the early days
    when VPC was not available, all EC2 instances in the AZ were on a single, flat
    network that was shared among all customers. How comfortable would the customer
    be with putting their information in the cloud? Not very, I''d imagine. Between
    the launch of EC2 in 2007 until the launch of VPC in 2009, VPC functions was one
    of the most requested features of AWS.'
  prefs: []
  type: TYPE_NORMAL
- en: The packets leaving your EC2 host in a VPC are intercepted by the Hypervisor.
    The Hypervisor will check them with a mapping service which understands our VPC
    construct. The packets leaving your EC2 hosts are encapsulated with the AWS real
    servers' source and destination addresses. The encapsulation and mapping service
    allows for the flexibility of VPC, but also some of the limitations (multicast,
    sniffing) of VPC. This is, after all, a virtual network.
  prefs: []
  type: TYPE_NORMAL
- en: Since December 2013, all EC2 instances are VPC-only. If we use a launch wizard
    to create our EC2 instance, it will automatically be put into a default VPC with
    a virtual internet gateway for public access. In my opinion, all but the most
    basic use cases should use the default VPC. For most cases, we would need to define
    our non-default, customized VPC.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create the following VPC using the AWS console in `us-east-1`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/afa05231-3c87-47f3-a238-273e37860134.png)Our first VPC in US-East-1'
  prefs: []
  type: TYPE_NORMAL
- en: If you recall, VPC is AWS region-bound, and the subnets are Availability Zone-based.
    Our first VPC will be based in `us-east-1`; the three subnets will be allocated
    to three different availability zones in 1a, 1b, and 1c.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the AWS console to create the VPC and subnets is pretty straightforward,
    and AWS provides a number of good tutorials online. I have listed the steps with
    the associated links on the VPC dashboard:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/c1fe117d-9253-45cb-bb5a-934f48d39aef.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The first two steps are point and click processes that most network engineers
    can work through, even without prior experience. By default, the VPC only contains
    the local route, `10.0.0.0/16`. Now, we will create an internet gateway and associate
    it with the VPC:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/4d402e8e-89ff-4a1d-82f2-9ac736fffdca.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can then create a custom route table with a default route pointing to the
    internet gateway. We will associate this route table with our subnet in `us-east-1a`,
    `10.0.0.0/24`, thus allowing it to be public facing:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/04ccec30-9248-4b9d-8f58-ea68cbbcd6d8.png)Route table'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s use Boto3 Python SDK to see what we have created; I used the tag `mastering_python_networking_demo`
    as the tag for the VPC, which we can use as the filer:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'This script will allow us to programmatically query the region for the VPC
    we created:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The Boto3 VPC API documentation can be found at [https://boto3.readthedocs.io/en/latest/reference/services/ec2.html#vpc](https://boto3.readthedocs.io/en/latest/reference/services/ec2.html#vpc).
  prefs: []
  type: TYPE_NORMAL
- en: You may be wondering about how the subnets can reach one another within the
    VPC. In a physical network, the network needs to connect to a router to reach
    beyond its own local network. It is not so different in VPC, except it is an *implicit
    router* with a default routing table of the local network, which in our example
    is `10.0.0.0/16`. This implicit router was created when we created our VPC.
  prefs: []
  type: TYPE_NORMAL
- en: Route tables and route targets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Routing is one of the most important topics in network engineering. It is worth
    looking at it more closely. We already saw that we had an implicit router and
    the main routing table when we created the VPC. From the last example, we created
    an internet gateway, a custom routing table with a default route pointing to the
    internet gateway, and associated the custom routing table with a subnet.
  prefs: []
  type: TYPE_NORMAL
- en: 'The concept of the route target is where VPC is a bit different than traditional
    networking. In summary:'
  prefs: []
  type: TYPE_NORMAL
- en: Each VPC has an implicit router
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each VPC has the main routing table with the local route populated
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can create custom-routing tables
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each subnet can follow a custom-routing table or the default main routing table
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The route table route target can be an internet gateway, NAT gateway, VPC peers,
    and so on
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We can use Boto3 to look at the custom route tables and association with the
    subnets:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'We only have one custom route table:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Creating the subnets are straight forward by clicking on the left subnet section
    and follow the on-screen instruction. For our purpose, we will create three subnets,
    `10.0.0.0/24` public subnet, `10.0.1.0/24`, and `10.0.2.0/24` private subnets.
  prefs: []
  type: TYPE_NORMAL
- en: 'We now have a working VPC with three subnets: one public and two private. So
    far, we have used the AWS CLI and Boto3 library to interact with AWS VPC. Let''s
    take a look at another automation tool, **CloudFormation**.'
  prefs: []
  type: TYPE_NORMAL
- en: Automation with CloudFormation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'AWS CloudFomation ([https://aws.amazon.com/cloudformation/](https://aws.amazon.com/cloudformation/)),
    is one way in which we can use a text file to describe and launch the resource
    that we need. We can use CloudFormation to provision another VPC in the `us-west-1`
    region:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/d37b0edc-2d29-4752-a72b-62c4184507a2.png)VPC for US-West-1'
  prefs: []
  type: TYPE_NORMAL
- en: 'The CloudFormation template can be in YAML or JSON; we will use YAML for our
    first template for provisioning:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'We can execute the template via the AWS CLI. Notice that we specify a region
    of `us-west-1` in our execution:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'We can verify the status via AWS CLI:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'For demonstration purposes, the last CloudFormation template created a VPC
    without any subnet. Let''s delete that VPC and use the following template to create
    both the VPC as well as the subnet. Notice that we will not have the VPC-id before
    VPC creation, so we will use a special variable to reference the VPC-id in the
    subnet creation. This is the same technique we can use for other resources, such
    as the routing table and internet gateway:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'We can execute and verify the creation of the resources as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'We can also verify the VPC and subnet information from the AWS console. We
    will verify the VPC from the console first:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/c08d36c4-58bc-4669-8468-0e1e363b3f7b.png)VPC in us-west-1'
  prefs: []
  type: TYPE_NORMAL
- en: 'We can also take a look at the subnet:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/68f0b4e2-69b7-4e6c-a7ca-c5d6003ac4d3.png)Subnet in us-west-1'
  prefs: []
  type: TYPE_NORMAL
- en: We now have two VPCs in the two coasts of the United States. They are currently
    behaving like two islands, each by themselves. This may or may not be your desired
    state of operation. If you would like the to VPC to be able to connect them to
    each other, we can use VPC peering ([https://docs.aws.amazon.com/AmazonVPC/latest/PeeringGuide/vpc-peering-basics.html](https://docs.aws.amazon.com/AmazonVPC/latest/PeeringGuide/vpc-peering-basics.html))
    to allow direct communication.
  prefs: []
  type: TYPE_NORMAL
- en: VPC peering is not limited to the same account. You can connect VPCs across
    different accounts, as long as the request was accepted and the other aspects
    (security, routing, DNS name) are taken care of.
  prefs: []
  type: TYPE_NORMAL
- en: In the coming section, we will take a look at VPC security groups and the network
    access control list.
  prefs: []
  type: TYPE_NORMAL
- en: Security groups and the network ACL
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'AWS Security Groups and the Access Control list can be found under the Security
    section of your VPC:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/8ecdda0a-5132-499c-bd48-8b417eed3499.png)VPC security'
  prefs: []
  type: TYPE_NORMAL
- en: 'A security group is a stateful virtual firewall that controls inbound and outbound
    access for resources. Most of the time, we will use the security group as a way
    to limit public access to our EC2 instance. The current limitation is 500 security
    groups in each VPC. Each security group can contain up to 50 inbound and 50 outbound
    rules. You can use the following sample script to create a security group and
    two simple ingress rules:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'We can execute the script and receive confirmation on the creation of the security
    group that can be associated with other AWS resources:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Network **Access Control Lists** (**ACLs**) is an additional layer of security
    that is stateless. Each subnet in VPC is associated with a network ACL. Since
    ACL is stateless, you will need to specify both inbound and outbound rules.
  prefs: []
  type: TYPE_NORMAL
- en: 'The important differences between the security group and ACLs are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The security group operates at the network interface level where ACL operates
    at the subnet level
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For a security group, we can only specify allow rules but not deny rules, whereas
    ACL supports both allow and deny rules
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A security group is stateful; return traffic is automatically allowed. Return
    traffic needs to be specifically allowed in ACL
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's take a look at one of the coolest feature of AWS networking, Elastic IP.
    When I initially learned about Elastic IP, I was blown away by the ability of
    assigning and reassigning IP addresses dynamically.
  prefs: []
  type: TYPE_NORMAL
- en: Elastic IP
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Elastic IP** (**EIP**) is a way to use a public IPv4 address that''s reachable
    from the internet. It can be dynamically assigned to an EC2 instance, network
    interface, or other resources. A few characteristics of Elastic IP are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The Elastic IP is associated with the account and is region-specific. For example,
    the EIP in `us-east-1` can only be associated with resources in `us-east-1`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can disassociate an Elastic IP from a resource, and re-associate it with
    a different resource. This flexibility can sometimes be used to ensure high availability.
    For example, you can migrate from a smaller EC2 instance to a larger EC2 instance
    by reassigning the same IP address from the small EC2 instance to the larger one.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There is a small hourly charge associated with Elastic IP.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can request Elastic IP from the portal. After assignment, you can associate
    it with the desired resources:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/a40704c5-33fd-426b-b1be-f69f3075f380.png)Elastic IPUnfortunately,
    Elastic IP has a default limit of five per region, [https://docs.aws.amazon.com/vpc/latest/userguide/amazon-vpc-limits.html](https://docs.aws.amazon.com/vpc/latest/userguide/amazon-vpc-limits.html).'
  prefs: []
  type: TYPE_NORMAL
- en: In the coming section, we will look at how we can use the NAT Gateway to allow
    communication for the private subnets to the internet.
  prefs: []
  type: TYPE_NORMAL
- en: NAT Gateway
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To allow the hosts in our EC2 public subnet to be accessed from the internet,
    we can allocate an Elastic IP and associate it with the network interface of the
    EC2 host. However, at the time of writing this book, there is a limit of five
    Elastic IPs per EC2-VPC ([https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_Appendix_Limits.html#vpc-limits-eips](https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_Appendix_Limits.html#vpc-limits-eips)).
    Sometimes, it would be nice to allow the host in a private subnet outbound access
    when needed without creating a permanent one-to-one mapping between the Elastic
    IP and the EC2 host.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is where **NAT Gateway** can help, by allowing the hosts in the private
    subnet temporarily outbound access by performing a **Network Address Translation**
    (**NAT**). This operation is similar to the **Port Address Translation** (**PAT**)
    that we normally perform on the corporate firewall. To use a NAT Gateway, we can
    perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a NAT Gateway in a subnet with access to the internet gateway via the
    AWS CLI, Boto3 library, or AWS console. The NAT Gateway will need to be assigned
    with an Elastic IP.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Point the default route in the private subnet to the NAT Gateway.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The NAT Gateway will follow the default route to the internet gateway for external
    access.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This operation can be illustrated in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/ded1b88d-2dbe-4de3-b153-6899e345416c.png)NAT Gateway operations'
  prefs: []
  type: TYPE_NORMAL
- en: 'One of the most common questions for NAT Gateway typically surrounds which
    subnet the NAT Gateway should reside in. The rule of thumb is to remember that
    the NAT Gateway needs public access. Therefore, it should be created in the subnet
    with public internet access with an available Elastic IP to be assigned to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/b105eeed-7e66-4fe6-a4fc-739c5e684ae7.png)NAT Gateway creation'
  prefs: []
  type: TYPE_NORMAL
- en: In the coming section, we will take a look at how to connect our shiny virtual
    network in AWS to our physical network.
  prefs: []
  type: TYPE_NORMAL
- en: Direct Connect and VPN
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Up to this point, our VPC is a self-contained network that resides in the AWS
    network. It is flexible and functional, but to access the resources inside of
    the VPC, we will need to access them with their internet-facing services such
    as SSH and HTTPS.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this section, we will look at the two ways AWS allow us to connect to the
    VPC from our private network: IPSec VPN Gateway and Direct Connect.'
  prefs: []
  type: TYPE_NORMAL
- en: VPN Gateway
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first way to connect our on-premise network to VPC is with traditional IPSec
    VPN connections. We will need a publicly accessible device that can establish
    VPN connections to AWS's VPN device. The customer gateway needs to support route-based
    IPSec VPNs where the VPN connection is treated as a connection that a routing
    protocol can run over the virtual link. Currently, AWS recommends using BGP to
    exchange routes.
  prefs: []
  type: TYPE_NORMAL
- en: 'On the VPC side, we can follow a similar routing table where we can route a
    particular subnet toward the **Virtual Private Gateway** target:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/19a6440f-7df1-4c3c-90dc-b66f37a76114.png)VPC VPN connection (source: [https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_VPN.html](https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_VPN.html))'
  prefs: []
  type: TYPE_IMG
- en: Besides IPSec VPN, we can also use a dedicated circuit to connect.
  prefs: []
  type: TYPE_NORMAL
- en: Direct Connect
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The IPSec VPN connection we saw is an easy way to provide connectivity for
    on-premise equipment to the AWS cloud resources. However, it suffers the same
    faults that IPSec over the internet always does: it is unreliable, and we have
    very little control over it. There is very little performance monitoring and no
    **Service-Level Agreement** (**SLA**) until the connection reaches a part of the
    internet that we can control.'
  prefs: []
  type: TYPE_NORMAL
- en: For all of these reasons, any production-level, mission-critical traffic is
    more likely to traverse through the second option Amazon provides, that is, AWS
    Direct Connect. AWS Direct Connect allows customers to connect their data center
    and colocation to their AWS VPC with a dedicated virtual circuit. The somewhat
    difficult part of this operation is usually bringing our network to where we can
    connect with AWS physically, typically in a carrier hotel. You can find a list
    of the AWS Direct Connect locations here: [https://aws.amazon.com/directconnect/details/](https://aws.amazon.com/directconnect/details/).
    The Direct Connect link is just a fiber patch connection that you can order from
    the particular carrier hotel to patch the network to a network port and configure
    the dot1q trunk's connectivity.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are also increasingly more connectivity options for Direct Connect via
    a third-party carrier with MPLS circuits and aggregated links. One of the most
    affordable options that I found and use is the Equinix Cloud Exchange ([https://www.equinix.com/services/interconnection-connectivity/cloud-exchange/](https://www.equinix.com/services/interconnection-connectivity/cloud-exchange/)).
    By using the Equinix Cloud Exchange, we can leverage the same circuit and connect
    to different cloud providers at a fraction of the cost of dedicated circuits:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/966cabb6-fb23-4921-96f6-290e979d6c9f.png)Equinix Cloud Exchange
    (source: [https://www.equinix.com/services/interconnection-connectivity/cloud-exchange/](https://www.equinix.com/services/interconnection-connectivity/cloud-exchange/)[)](https://www.equinix.com/services/interconnection-connectivity/cloud-exchange/)'
  prefs: []
  type: TYPE_IMG
- en: In the upcoming section, we will take a look at some of the network scaling
    services AWS offers.
  prefs: []
  type: TYPE_NORMAL
- en: Network scaling services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will take a look at some of the network services AWS offers.
    Many of the services do not have a direct network implication, such as DNS and
    content distribution network. They are relevant in our discussion due to their
    close relationship with the network and application's performance.
  prefs: []
  type: TYPE_NORMAL
- en: Elastic Load Balancing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Elastic Load Balancing** (**ELB**) allows incoming traffic from the internet
    to be automatically distributed across multiple EC2 instances. Just like load
    balancers in the physical world, this allows us to have better redundancy and
    fault tolerance while reducing the per-server load. ELB comes in two flavors:
    application and network load balancing.'
  prefs: []
  type: TYPE_NORMAL
- en: The application load balancer handles web traffic via HTTP and HTTPS; the network
    load balancer operates on a TCP level. If your application runs on HTTP or HTTPS,
    it is generally a good idea to go with the application load balancer. Otherwise,
    using the network load balancer is a good bet.
  prefs: []
  type: TYPE_NORMAL
- en: 'A detailed comparison of the application and network load balancer can be found
    at [https://aws.amazon.com/elasticloadbalancing/details/](https://aws.amazon.com/elasticloadbalancing/details/):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/af58c911-8764-46d9-a3e3-71e90df6e39b.png)Elastic Load Balancer Comparison
    (Source: [https://aws.amazon.com/elasticloadbalancing/details/](https://aws.amazon.com/elasticloadbalancing/details/))'
  prefs: []
  type: TYPE_IMG
- en: Elastic Load Balancer offers a way to load balance traffic once it enters the
    resource in our region. The AWS Route53 DNS service allows geographic load balance
    between regions.
  prefs: []
  type: TYPE_NORMAL
- en: Route53 DNS service
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We all know what domain name services are; Route53 is AWS's DNS service. Route53
    is a full-service domain registrar where you can purchase and manage domains directly
    from AWS. Regarding network services, DNS allows a way to load balance between
    geographic regions by service domain names in a round-robin fashion between regions.
  prefs: []
  type: TYPE_NORMAL
- en: 'We need the following items before we can use DNS for load balancing:'
  prefs: []
  type: TYPE_NORMAL
- en: An Elastic Load Balancer in each of the intended load balance regions.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A registered domain name. We do not need Route53 as the domain registrar.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Route53 is the DNS service for the domain.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We can then use the Route 53 latency-based routing policy with health-check
    in an active-active environment between the two Elastic Load Balancers.
  prefs: []
  type: TYPE_NORMAL
- en: CloudFront CDN services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'CloudFront is Amazon''s **Content Delivery Network** (**CDN**) that reduces
    the latency for content delivery by physically serving the content closer to the
    customer. The content can be static web page content, videos, applications, APIs,
    or most recently, Lambda functions. CloudFront edge locations include the existing
    AWS regions, but are also in many other locations around the globe. The high-level
    operation of CloudFront is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Users access your website for one or more objects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DNS routes the request to the Amazon CloudFront edge location closest to the
    user's request
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The CloudFront edge location will either service the content via the cache or
    request the object from the origin
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AWS CloudFront and CDN services in general are typically handled by application
    developers or DevOps engineers. However, it is always good to be aware of their
    operations.
  prefs: []
  type: TYPE_NORMAL
- en: Other AWS network services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are lots of other AWS Network Services that we do not have the space
    to cover. Some of the more important ones are listed in this section:'
  prefs: []
  type: TYPE_NORMAL
- en: '**AWS Transit VPC** ([https://aws.amazon.com/blogs/aws/aws-solution-transit-vpc/](https://aws.amazon.com/blogs/aws/aws-solution-transit-vpc/)):
    This is a way to connect multiple virtual private clouds to a common VPC that
    serves as a transit center. This is a relatively new service, but it can minimize
    the connection that you need to set up and manage. This can also serve as a tool
    when you need to share resources between separate AWS accounts.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Amazon GuardDuty** ([https://aws.amazon.com/guardduty/](https://aws.amazon.com/guardduty/)):
    This is a managed threat detection service that continuously monitors for malicious
    or unauthorized behavior to help protect our AWS workloads. It monitors API calls
    or potentially unauthorized deployments.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**AWS WAF**([https://aws.amazon.com/waf/](https://aws.amazon.com/waf/)): This
    is a web application firewall that helps protect web applications from common
    exploits. We can define customized web security rules to allow or block web traffic.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**AWS Shield** ([https://aws.amazon.com/shield/](https://aws.amazon.com/shield/)):
    This is a managed **Distributed Denial of Service** (**DDoS**) protection service
    that safeguards applications running on AWS. The protection service is free for
    all customers at the basic level; the advanced version of AWS Shield is a fee-based
    service.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we looked at AWS Cloud Networking services. We went over the
    AWS network definitions of Region, Availability Zone, Edge Locations, and Transit
    Center. By understanding the overall AWS network, this gives us a good idea of
    some of the limitations and contains for the other AWS network services. Throughout
    this chapter, we used the AWS CLI, the Python Boto3 library, as well as CloudFormation
    to automate some of the tasks.
  prefs: []
  type: TYPE_NORMAL
- en: We covered the AWS virtual private cloud in depth with the configuration of
    the route table and route targets. The example on security groups and network
    ACL controls the security for our VPC. We also looked at Elastic IP and NAT Gateways
    regarding allowing external access.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two ways to connect AWS VPC to on-premise networks: Direct Connect
    and IPSec VPN. We briefly looked at each and the advantages of using them. Toward
    the end of this chapter, we looked at network scaling services offered by AWS,
    including Elastic Load Balancing, Route53 DNS, and CloudFront.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In [Chapter 11](85c09606-4a40-46f3-82b8-0b20550fd64d.xhtml), *Working with
    Git*, we will take a more in-depth look at the version control system we have
    been working with: Git.'
  prefs: []
  type: TYPE_NORMAL
