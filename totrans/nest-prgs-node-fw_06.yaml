- en: Chapter 6\. Sequelize
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Sequelize is a promise-based ORM working for Node.js v4 and later. This ORM
    supports many dialects, such as:'
  prefs: []
  type: TYPE_NORMAL
- en: '`PostgreSQL`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MySQL`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SQLite`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MSSQL`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This provides a solid support for transactions. With Sequelize you have the
    possibility of using `sequelize-typescript`, which provides decorators to put
    in your entity and manages all the fields of your model, with types and constraints.
  prefs: []
  type: TYPE_NORMAL
- en: Also, Sequelize comes from many hooks providing you with the significant advantage
    of being able to check and manipulate your data at any level of the transaction.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will see how to configure your database using `postgresql`
    and how to configure the connection to your database. After that we will see how
    to implement our first entity, which will be a simple `User` entity and then how
    to create a provider for this entity in order to inject the entity into a `UserService`.
    We will also see the migration system through `umzung`, and how to create our
    first migration file.
  prefs: []
  type: TYPE_NORMAL
- en: You can have a look on the on the `src/modules/database`, `src/modules/user`,
    `/src/shared/config`, and `/src/migrations` `/migrate.ts` of the repository.
  prefs: []
  type: TYPE_NORMAL
- en: Configure Sequelize
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to be able to use Sequelize, we have first to set up the connection
    between sequelize and our database. In order to do that, we will create the `DatabaseModule`,
    which will contain the provider of the sequelize instance.
  prefs: []
  type: TYPE_NORMAL
- en: In order to set up this connection, we will define a configuration file, which
    will have as properties all you need to be connected to your database. This configuration
    will have to implement the `IDatabaseConfig` interface in order to void to forget
    some parameters.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This configuration should be set up as the following example, and set the parameters
    through the environment variable or the default value.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: After the configuration, you have to create the appropriate provider, which
    will have the purpose to create the instance of sequelize using the right configuration.
    In our case we just set up the environment configuration, but you can set up all
    the configuration with the same pattern, you just need to change the values.
  prefs: []
  type: TYPE_NORMAL
- en: This instance is for you to be aware about the different model that should be
    provided. In order to tell sequelize which model we need, we use the `addModels`
    method on the instance and pass an array of model. Of course, in the following
    section we will see how to implement a new model.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This provider will return the instance of Sequelize. This instance will be useful
    to use the transaction provided by Sequelize. Also, in order to be able to inject
    it, we have provided in the `provide` parameter, the name of the token `SequelizeInstance`,
    which will be used to inject it.
  prefs: []
  type: TYPE_NORMAL
- en: Sequelize also provides a way to immediately synchronize your model and your
    database using `sequelize.sync()`. This synchronisation should not be used in
    production mode, because it recreates a new database and removes all of the data
    each time.
  prefs: []
  type: TYPE_NORMAL
- en: 'We have now set up our Sequelize configuration, and we need to set up the `DatabaseModule`
    as shown in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'We defined the `DatabaseModule` as a `Global` in order to be added into all
    the modules as a related module, letting you inject the provider `SequelizeInstance`
    into any module as following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: We now have a complete working module to access our data in the database.
  prefs: []
  type: TYPE_NORMAL
- en: Create a model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After having set up the sequelize connection, we have to implement our model.
    As seen in the previous section, we tell Sequelize that we will have the `User`
    model using this method `sequelize.addModels([User]);`.
  prefs: []
  type: TYPE_NORMAL
- en: You now see all of the required features to set up it.
  prefs: []
  type: TYPE_NORMAL
- en: '@Table'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This decorator will allow you to configure our representation of the data,
    and here are some parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The `timestamp` parameter will tell you that you want to have an `updatedAt`
    and `deletedAt` columns. The `paranoid` parameter allows you to soft delete data
    instead of removing it to lose your data. If you pass `true`, Sequelize will expected
    a `deletedAt` column in oder to set the date of the remove action.
  prefs: []
  type: TYPE_NORMAL
- en: The `underscored` parameter will automatically transform all of the camelcase
    columns into underscored columns.
  prefs: []
  type: TYPE_NORMAL
- en: The `freezTableName` will provide a way to avoid Sequelize to pluralize the
    name of the table.
  prefs: []
  type: TYPE_NORMAL
- en: The `tableName` allows you to set the name of the table.
  prefs: []
  type: TYPE_NORMAL
- en: 'In our case we only use `timestamp: true, tableName: ''users''` in order to
    get the `updatedAt` and `createdAt` column and name the table as `users`.'
  prefs: []
  type: TYPE_NORMAL
- en: '@column'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This decorator will help define our column. You can also not pass any parameter,
    so in this case Sequelize will try to infer the column type. The types that can
    be inferred are `string`, `boolean`, `number`, `Date` and `Blob`.
  prefs: []
  type: TYPE_NORMAL
- en: Some parameter allows us to define some constraints on the column. Let’s imagine
    the `email` column, where we would like this email as a string and that cannot
    be null, so the email has to be unique. Sequelize can recognize an email, but
    we have to tell it how to validate the email passing the `validate#isUnique` method.
  prefs: []
  type: TYPE_NORMAL
- en: Take a look at the following example.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'In the previous example, we passed some options, but we could also use some
    decorator as `@AllowNull(value: boolean)`, `@Unique` or even `@Default(value:
    any)`.'
  prefs: []
  type: TYPE_NORMAL
- en: To set an `id` column, the `@PrimaryKey` and `@AutoIncrement` decorators are
    an easy way to set up the constraint.
  prefs: []
  type: TYPE_NORMAL
- en: Create the User model
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that we have seen some useful decorator, let’s create our first model, the
    `User`. In order to do that, we will create the class that has to extend from
    the base class `Model<T>`, and this class takes a template value for the class
    itself.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: We now add the `@Table()` decorator in order to configure our model. This decorator
    takes options corresponding to the interface `DefineOptions` and as we described
    in the ***@Table section*** we will pass as options the timestamp as true and
    the name of the table.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Now we have to define some columns for our model. To do this, `sequelize-typescript`
    provides the `@Column()` decorator. This decorator allows us to provide some options
    to configure our field. You can pass the data type `DataType.Type` directly.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: You can also use the options shown in the ***@Column section*** in order to
    validate and ensure the data of the email.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: You now know how to set up a column, so let’s set up the rest of the model with
    the column that we need for a simple user.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: In all the added columns, you can see the password of type `TEXT`, but of course,
    you cannot store a password as a plain text, so we have to hash it in order to
    protect it. To do that, use the lifeCycle hooks provided by Sequelize.
  prefs: []
  type: TYPE_NORMAL
- en: LifeCycle hooks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Sequelize come with many lifeCycle hooks that allow you to manipulate and check
    the data along the process of creating, updating, or deleting a data.
  prefs: []
  type: TYPE_NORMAL
- en: Here are some interesting hooks from Sequelize.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: In this case, we need to use the `@BeforeCreate` decorator in order to hash
    the password and replace the original value before storing it in the database.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: The `BeforeCreate` previously written allows you to override the `password`
    property value of the user in order to override it before the insertion of the
    object into the database, and to ensure a minimum of security.
  prefs: []
  type: TYPE_NORMAL
- en: Injecting a model into a service
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Our first `User` model is now setup. Of course, we will have to inject it into
    a service or even a controller. To inject a model anywhere else, we must first
    create the appropriate provider in order to give it to the module.
  prefs: []
  type: TYPE_NORMAL
- en: This provider will define the key to use in order to inject it and take as a
    value the `User` model that we have implemented before.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: To inject it in into a service we will use the `@Inject()` decorator, which
    can take the string defined in the previous example `UserRepository`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: After injecting the model into the service, you will be able to use it to access
    and manipulate the data as you want. For example, you can execute `this.UserRepository.findAll()`
    to register the data in your database.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we have to set up the module to take as providers, the `userProvider`
    that provides access to the model and the `UserService`. The `UserService` can
    be exported to be used in another module by importing the `UserModule`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Usage of Sequelize transaction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You might remark this line, `if (!options.transaction) throw new Error('Missing
    transaction.');`, in the `hashPassword` method decorated with the `@BeforeCreate`.
    As said before, Sequelize provides a strong support of the transaction. So for
    each action or process of action, you can use a transaction. To use the Sequelize
    transaction, take a look at the following example of a `UserService`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: We have injected both the model and the Sequelize instance that we talked about
    earlier in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'To use a transaction to wrap some access to the database, you can do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: We use the `sequelizeInstance` to create a new transaction and pass it to the
    `create` method of the `UserRepository`.
  prefs: []
  type: TYPE_NORMAL
- en: Migration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With Sequelize you have a way to sync your model and your database. The thing
    is, this synchronization will remove all of your data in order to recreate all
    of the tables representing the model. So, this feature is useful in testing, but
    not in a production mode.
  prefs: []
  type: TYPE_NORMAL
- en: In order to manipulate your database, you have the possibility to use `umzung`,
    a framework agnostic library and migration tool for Nodejs. It is not related
    to any database, but provides an API in order to migrate or rollback the migration.
  prefs: []
  type: TYPE_NORMAL
- en: When you are using the command `npm run migrate up`, which executes `ts-node
    migrate.ts`, you can pass `up/down` as a parameter. In order to track all of the
    migration already applied, a new table will be created with the default name `SequelizeMeta`,
    and all of the applied migrations will be stored in this table.
  prefs: []
  type: TYPE_NORMAL
- en: Our migration file can be found in the repository as the root with the name
    `migrate.ts`. Also, all of the migrations files will be stored in the `migrations`
    folder of the repository example.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the migration script
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In order to configure the umzung instance, you will be able to set some options:'
  prefs: []
  type: TYPE_NORMAL
- en: '`storage`, which correspond to the `sequelize` string key for us'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`storageOptions`, which will take Sequelize, and it is in this option that
    you can change the default name of the table of the column used to store the name
    of the migrations applied throughout the `modelName`, `tableName` and `columnName`
    properties.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Some other configurations are able, in order to set the up method name and the
    down method name, to pass a logging function. The `migrations` property will allow
    you to provide some params to pass to the method up/down and the path of the migrations
    to apply with the appropriate pattern.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Create a migration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To execute the migration script, provide the migration that you want to apply.
    Imagine that you want to create the `users` table using migration. You must set
    an `up` and a `down` method.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: In each method, the parameter will be `sequelize`, which is the instance used
    in the configuration file. Throughout this instance you can use the que query
    method in order to write our SQL query. In the previous example, the function
    `up` will execute the query to create the `users` table. The `down` method has
    the purpose to drop this table in case of a rollback.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter you have seen how to set up the connection to the database by
    instanciating a Sequelize instance, using the factory in order to inject the instance
    directly in another place.
  prefs: []
  type: TYPE_NORMAL
- en: Also, you have seen decorators provided by sequelize-typescript in order to
    set up a new model. You have also seen how to add some constraints on the columns
    and how to use the lifeCycle hooks to hash a password before saving it. Of course,
    the hooks can be used to validate some data or check some information before doing
    anything else. But you also have seen how to use the `@BeforeCreate` hook. You
    are therefore ready to use a Sequelize transaction system.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, you have seen how to configure umzung to execute migrations, and how
    to create your first migration in order to create the users table.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter you will learn how to use Mongoose.
  prefs: []
  type: TYPE_NORMAL
