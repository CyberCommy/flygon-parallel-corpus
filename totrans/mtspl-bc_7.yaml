- en: Exploiting Real-World Challenges with Metasploit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Welcome! This chapter is the final and most complicated chapter of the book.
    I recommend you read through all the previous chapters and exercises before proceeding
    with this chapter. However, if you have completed all the tasks and done some
    research by yourself, let''s move on to facing real-world challenges and solving
    them with Metasploit. In this chapter, we will cover two scenarios based on real-world
    problems with regard to being a penetration tester and a state-sponsored hacker.
    Both challenges pose a different set of requirements; for example, evasion would
    typically be more relevant to a law enforcement cyber player than a corporate
    penetration tester and the case is the same for achieving persistence on systems.
    The agenda of this chapter is to familiarize you with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Pivoting to internal networks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using web application bugs for gaining access
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cracking password hashes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the target system as a proxy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Evading antivirus
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: And much more. We will be developing strategies to perform flawless attacks
    on the target and looking for every opportunity that can end up popping a shell
    to the target system. Therefore, let us get started.
  prefs: []
  type: TYPE_NORMAL
- en: 'Scenario 1: Mirror environment'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Consider yourself a penetration tester who is tasked to carry out a black box
    penetration test against a single IP in an on-site project. Your job is to make
    sure that no vulnerabilities are present in the server and on the application
    running on it.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Since we know we are going to perform on an on-site environment, we can summarize
    the test as shown in the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Number of IPs under scope** | 1 |'
  prefs: []
  type: TYPE_TB
- en: '| **Test policy** | Web applications and server |'
  prefs: []
  type: TYPE_TB
- en: '| **IP address** | `192.168.10.110` |'
  prefs: []
  type: TYPE_TB
- en: '| **Summary of tests to be performed** | Port ScanningTest for Web application
    vulnerabilitiesTest for server vulnerabilitiesCompromising any other network connected
    to the target host |'
  prefs: []
  type: TYPE_TB
- en: '| **Objectives** | Gain user level access to the serverEscalate privileges
    to the highest possible levelGain access to the credentials for web and server
    applications |'
  prefs: []
  type: TYPE_TB
- en: '| **Test type** | Black box test |'
  prefs: []
  type: TYPE_TB
- en: 'Additionally, let us also keep a diagrammatic view of the entire test to make
    things easier for us to remember and understand:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00198.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'We can see in the preceding diagram that, as of now, we have little detail,
    only the IP address of the target. Let us quickly fire Metasploit and create a
    new `workspace` and switch to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00063.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Fingerprinting the target with DB_NMAP
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As we discussed in the previous chapters, creating a new `workspace` and using
    it will ensure that the current results won''t merge with scan results already
    present in the database; hence, it is recommended to create a new `workspace`
    for all new projects. Let us quickly perform an Nmap scan over the target on some
    most general ports, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00193.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Welcome to the places where the sun doesn''t shine. You have no vulnerable
    services running on the target. However, the only good information we got is that
    the target is running a Windows operating system, which may be Windows Server
    2008 or Windows Server 2012\. So what do we do now? Let us try manually connecting
    to the server on port 80 and looking for web-application-specific vulnerabilities:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00066.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Connecting on port 80, we can see that the default page for XAMPP shows up,
    which says the version of XAMPP is 5.5.30, which is the latest one. Another disappointment:
    since the version is vulnerability-free, we can''t attack it. However, there might
    still be a chance if we figure out what applications are hosted on this XAMPP
    server. To do that, let us quickly use the `auxiliary/scanner/http/brute_dirs`
    module and try brute-forcing the directory structure to figure out what applications
    are running underneath XAMPP:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00067.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'We have already set `RHOSTS` to `192.168.10.110` and `THREADS` to `20` using
    the `setg` command. Let''s set `FORMAT` to `a,aa,aaa,aaa`. Setting the format
    to `a,aa,aaa,aaa` will mean that the auxiliary module will start trying from a
    single-character alphanumeric then a two-character, a three-letter, and finally
    a four-letter alphanumeric sequence to brute-force the directories. To make things
    simpler, suppose the target has a directory named `vm`; if we remove the `aa`
    from the `FORMAT`, it won''t be checked. Let''s quickly run the module to see
    whether we get something interesting:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00073.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'We found only one directory, that is the `/img/` directory, and it doesn''t
    look promising. Additionally, even with a large number of threads, this search
    will be breathtaking and non-exhaustive. Let us use a simpler module to figure
    out the directory structure, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00115.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'We are now using the `auxiliary/scanner/http/dir_scanner` module, which works
    on dictionary-based brute-forcing rather than the pure brute-force like with the
    `brute_dirs` module. A good approach is to have this module used first and, based
    on the detailing it provides, we can use the `brute_dirs` module if needed. Anyways,
    let''s run the module and analyze the output, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00133.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: We can see we have some directories listed here. However, the directories with
    a response code of 200 are the ones which are accessible.
  prefs: []
  type: TYPE_NORMAL
- en: The response code 200 is OK, 404 denotes a not found resource, and 403 means
    a forbidden status that indicates that we are not allowed to view the resource
    but it does exist. Hence, it's good keeping a note of 403 errors.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can see we have a directory named blog. Let us browse to it in the web browser
    and see what application it''s running:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00280.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Browsing to the `/blog/` URL, we can see we have a WordPress website running
    on the target system. We can always check the `readme.html` file from WordPress
    to check for the version number, and most admins usually forget to delete this
    file, making it easier for the attackers to target a WordPress website by fingerprinting
    the version number:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00180.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The WordPress website is running on Version 4.7, which does not have core known
    vulnerabilities.
  prefs: []
  type: TYPE_NORMAL
- en: Various WordPress plugins contain vulnerabilities which can lead to the compromise
    of the entire site. It is advisable to check a WordPress installation against
    various flaws using the `wpscan` tool.
  prefs: []
  type: TYPE_NORMAL
- en: Gaining access to vulnerable web applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We also saw another link with the response code of 200, which was `/php-utility-belt/`.
    Let''s try this in the browser and see whether we can get something:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00211.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The PHP Utility Belt is a set of handy tools for developers. However, it should
    never exist in the production environment. The GitHub page for the PHP Utility
    Belt says the following:'
  prefs: []
  type: TYPE_NORMAL
- en: This application allows you to run arbitrary PHP code and is intended to be
    hosted locally on a development machine. Therefore, it SHOULD NEVER EXIST IN A
    PRODUCTION ENVIRONMENT OR PUBLICALLY ACCESSIBLE ENVIRONMENT. You've been warned.
  prefs: []
  type: TYPE_NORMAL
- en: 'Hence, let''s try doing a search for the PHP Utility Belt in Metasploit and
    see if there exists a vulnerability which can affect this application. We will
    see that we have an exploit for the PHP Utility Belt application. Let''s use the
    module and try exploiting the application, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00080.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let us set the value of `RHOST` to `192.168.10.110` and run the module, as
    shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00081.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Yeah! We got meterpreter access to the target. Let us look at the directory
    structure and perform some post-exploitation functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00044.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'As we predicted with Nmap, the target is a **Windows Server 2012 R2 edition**.
    Having the right amount of information, let us update the diagrammatic view of
    the test as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00053.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'From the preceding image, we now have information related to the OS and the
    applications running on the target, and we have the ability to run any command
    or perform any post-exploitation task we want. Let''s try diving deep into the
    network and check whether we can find any other network connected to this machine.
    Let''s run the `arp` command, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00085.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: We can see we created a new channel for the shell but the `arp` command didn't
    work. The failure of the `arp` command is due to the usage of a PHP meterpreter,
    which is not known to handle networks well, and some standard API functions.
  prefs: []
  type: TYPE_NORMAL
- en: Migrating from a PHP meterpreter to a Windows meterpreter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To circumvent the problem of executing network commands, let us quickly generate
    a `windows/meterpreter/reverse_tcp` type backdoor and get it executed on the target
    system, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00072.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s also spawn another instance of Metasploit in a separate Terminal and
    quickly start a matching handler for the preceding `MicrosoftDs.exe` backdoor
    which will connect back to port `1337`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00141.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Since we will need to run the exploit handler multiple times, we created a
    resource script for the last five commands using the `makerc` command. Coming
    back to our first meterpreter shell, let''s use the upload command to upload the
    `MicrosoftDs.exe` backdoor file onto the target, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00169.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'We can see that we successfully uploaded our backdoor to the target. Let''s
    execute it using the `execute` command, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00092.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'As soon as we issue the preceding command, we can see we have Windows meterpreter
    shell access to the target in the handler tab, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00222.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Bang! We got windows meterpreter access to the target. Let us update the diagrammatic
    view as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00246.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: We can now drop the PHP meterpreter and continue on the windows meterpreter
    shell.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s issue the `ipconfig` command to see whether there is a different network
    card configured with the other network:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00119.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: We know that the host is set up with an additional IP address of `172.28.128.5`
    and there may be some systems present on this network. However, we cannot connect
    directly to the network since it is an internal network and is not accessible
    to us. We need a mechanism to use the compromised system as a proxy to us for
    the internal network.
  prefs: []
  type: TYPE_NORMAL
- en: Pivoting to internal networks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Metasploit offers features to connect to internal networks through existing
    meterpreter shells. To achieve this, we need to add a route for the internal network
    to Metasploit so that it can pivot data coming from our system to the intended
    hosts in the internal network range. Let us use the `post/windows/manage/autoroute`
    module to add internal network routes to Metasploit, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00099.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s set `SESSION` to `1`, as `1` is the session ID of our meterpreter session,
    and set `SUBNET` to our desired network range, that is, `172.28.128.0`. Let''s
    `run` the module and analyze the output as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00100.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: We can see that the route to the target subnet is now added to Metasploit. We
    can now further test the environment quickly.
  prefs: []
  type: TYPE_NORMAL
- en: Scanning internal networks through a meterpreter pivot
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s quickly `run` a port scan, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00098.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Running the port scan on the entire range, we can see we have a single host,
    that is, `172.8.128.3`, with open ports which are 3306 (a popular MySQL port)
    and port 80 (HTTP). Let''s quickly fingerprint the HTTP server running on port
    80 using `auxiliary/scanner/http/http_version`. We can see that we have the same
    version of the Apache software running on `192.168.10.110` here as well. The IP
    address `172.28.128.3` could be a mirror test environment. However, we did not
    find any MySQL port on that host. Let us quickly update the diagrammatic view
    and begin testing the MySQL service:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00132.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s run some quick tests on the MySQL server, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00147.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Running the `mysql_version` command, we can see the version of MySQL is 5.5.5-10.1.9-MariaDB.
    Let''s run the `mysql_login` module, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00173.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Since MySQL is on the internal network, most administrators do not configure
    the MySQL server passwords and keep the default installations with a blank password.
    Let''s try running a simple command such as `show databases` and analyze the output,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00190.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Quite interesting! We had `192.168.10.110` running the WordPress installation,
    but we did not find any MySQL or any other database port open in the port scan.
    Is this the database of the WordPress site running on `192.168.10.110`? It looks
    like it! Let''s try fetching some details from the database, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00108.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Sending the **show tables from wordpress** command brings the list of tables
    in the database, and clearly it''s a genuine WordPress database. Let''s try fetching
    the user details for the WordPress site with the query shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00109.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Amazing! We got the admin username with its password hash, which we can feed
    to a tool such as `hashcat` to retrieve the plain text password, as shown in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00266.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: We stored the retrieved hash in a file calledhash and provided a dictionary
    file `pass.txt` containing passwords. The switch `-m 400` denotes we are cracking
    a hash for WordPress.
  prefs: []
  type: TYPE_NORMAL
- en: We can now log in to the WordPress site to gain a better view of plugins, themes,
    and so on. However, you must report a weak password vulnerability as well since
    Admin@123 is quite easily guessable.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s now run the `dir_scanner` module on the internal host and see whether
    we can find something interesting on the web application front:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00135.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: We know that we only have a test directory, which is accessible. However, we
    cannot browse it since the network is not in our general subnet.
  prefs: []
  type: TYPE_NORMAL
- en: Using the socks server module in Metasploit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To connect from non-Metasploit applications on our system to the internal network,
    we can setup the `socks4a` module in Metasploit and can proxy data originating
    from any application through our meterpreter session. Let''s put our meterpreter
    on `192.168.10.111` in the background and run the `auxiliary/server/socks4a` module
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00162.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: We execute the module after setting the `SRVHOST` to `127.0.0.1` and keeping
    the `SRVPORT` default to `1080`.
  prefs: []
  type: TYPE_NORMAL
- en: Change the host to 127.0.0.1 and port to 1080 in the `/etc/proxychains.conf`
    file in Kali Linux before running the above module.
  prefs: []
  type: TYPE_NORMAL
- en: 'Setting up the socks server, we can now run any non-Metasploit tool on the
    target by adding `proxychains4` (on OS X)/proxychains (on Kali Linux) as a prefix.
    We can see this in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00060.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'We know we ran a Nmap scan on the target through `proxychains4` and it worked.
    Let''s use `wget` with `proxychains4` to fetch the index page in the `test` directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00062.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s view the contents of the `index.html` file and see the title of the
    application running:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00243.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Wow! It''s just another instance of `php_utility_belt` running on this host
    as well. We know what to do, right? Let''s fire the same module we used for the
    mirror server on `192.168.10.110`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00258.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s run the module after setting the values for `RHOST` to `172.28.128.3`
    and `TARGETURI` to `/test/ajax.php` since the directory name is test and not `/php-utility-belt/`,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00277.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The default module will run with the `reverse_tcp` payload. However, since we
    are attacking the host through a meterpreter session on `192.168.10.110`, it is
    advisable to exploit services with the `bind_tcp` payload as it works on a direct
    connection, which will happen through the meterpreter session, eliminating the
    target `172.28.128.3` reaching us back. We know our session is PHP meterpreter;
    let's switch to a Windows meterpreter session as we did previously by running
    a separate handler on any other port than the one already being used.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s quickly create, upload, and execute another backdoor file connecting
    back on, say, port `1338` as we are already using port `1337`. Additionally, let''s
    also set up a handler to receive communications on port `1338`, as shown in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00038.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Yippee! We got windows meterpreter access to the target. Let''s harvest some
    system information, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00088.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: We can see that the operating system is Windows Server 2008 and we have administrator
    privileges. Let's escalate to system-level privileges with the `get system` command,
    as shown in the preceding screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: Dumping passwords in clear text
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Having system-level privileges, let''s dump the password hashes using the `hashdump`
    command, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00070.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Eliminating the hassle of cracking passwords, let's load mimikatz using the
    `load mimikatz` command and dump passwords in clear text using the `kerberos`
    command, as shown in the preceding screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: Sniffing a network with Metasploit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Metasploit offers a sniffer plugin to carry out network sniffing at the target
    as well. Let''s load the `sniffer` module as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00142.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s now select an interface using the `sniffer_interfaces` command to start
    sniffing on the target system:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00074.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s choose the interface ID `2` to start sniffing on the `Intel PRO/100
    MT adapter`, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00185.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'We can see that we are capturing data on interface `2` which started using
    the `sniffer_start` command with the help of the `sniffer_stats` command followed
    by the ID of the interface. Let''s now dump the data and see whether we can find
    some interesting information:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00014.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'We dumped all the captured data from interface `2` to the `test.pcap` file.
    Let''s load it in Wireshark:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00247.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'We can see that we now have the ability to sniff successfully on the target.
    The sniffer module generally produces useful data, or as most intranet applications
    do not use HTTPS here. It would be worth while if you keep running the sniffer
    during business hours in a penetration test. Let''s finally update the diagrammatic
    view, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00262.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Summary of the attack
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Summarizing the entire test, we performed the following operations:'
  prefs: []
  type: TYPE_NORMAL
- en: Port scan on `192.168.10.110` (port 80 open).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Brute-forced directories on port 80 (WordPress and PHP Utility Belt found).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Exploited PHP Utility Belt to gain PHP meterpreter access.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Escalated to Windows meterpreter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Post-exploitation to figure out the presence of an internal network.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Added routes to the internal network (Metasploit only).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Port scan on the internal network `172.28.128.0`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Discovered 3306 (MySQL) and 80 (Apache) on `172.28.128.3`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Fingerprinted, gained access to MySQL, and harvested the credentials for the
    WordPress domain running on `192.168.10.110`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Cracked hashes for the WordPress website using `hashcat`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Brute-forced directories on port 80 (`test` directory discovered) .
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set up a socks server and used `wget` to pull the index page from `test` directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: PHP Utility Belt found in `test` directory; exploited it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Escalated to Windows meterpreter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Increased privileges using `getsystem`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Figured out clear text password using `mimikatz`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Performed sniffing on the target network.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Scenario 2: You can''t see my meterpreter'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Throughout the previous chapters, we saw how we can take control of a variety
    of systems using Metasploit. However, the one important thing which we did not
    take into account is the presence of antivirus solutions on most operating systems.
    Let us create a backdoor executable of type `windows/meterpreter/reverse_tcp`,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00082.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'We can now put this executable along with any exploit or office document, or
    we can bind it with any other executable and send it across to a target that is
    running windows and has an AVG AntiVirus solution running on his system. Let us
    see what happens when the target executes the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00051.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Our generated file caused sudden alarms by AVG AntiVirus and got detected.
    Let''s scan our `generic.exe` file on the majyx scanner to get an overview of
    the detection rate, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00101.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: We can see that 44/70 AVs detected our file as malicious. This is quite disheartening
    since as a law enforcement agent you might get only a single shot at getting the
    file executed at the target.
  prefs: []
  type: TYPE_NORMAL
- en: The majyx scanner can be accessed at [http://scan.majyx.net/](http://scan.majyx.net/).
  prefs: []
  type: TYPE_NORMAL
- en: The majyx scanner has 35 AVs, but sometimes it scans each AV twice, hence making
    it 70 AV entries. Consider the preceding scan result as 22/35 instead of 44/70.
  prefs: []
  type: TYPE_NORMAL
- en: Using shellcode for fun and profit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We saw how the detection rate of various AV solutions affected our tasks. We
    can circumvent AVs using the shellcode method for `meterpreter`. Instead of generating
    an executable file, we will generate C shellcode and code the rest of our backdoor
    ourselves. Let us generate the shellcode as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00086.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let us have a quick look at the shellcode, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00148.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Encrypting the shellcode
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can see we have the shellcode generated. We will quickly write a program
    that will encrypt the existing shellcode using `XOR`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'We can see that we have just XORed the shellcode with `0xAB`. This program
    will generate the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00091.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Creating a decoder executable
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let us use the newly generated shellcode to write a program that will produce
    an executable, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code will just decode the encoded shellcode with `0xAB` using
    the `XOR` decryption routine and will use the `memcpy` function to copy the shellcode
    to the executable area, and will execute it from there. Let us test it on the
    majyx scanner, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00103.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'LOL! Suddenly the AVs are no longer detecting our meterpreter backdoor as malicious.
    Let us try running the executable on the system which has the AVG solution, as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00094.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Oh, good! No detection here as well. Let us see whether we got meterpreter
    access to the target or not:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00096.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let us confirm whether `AVG` is running on the system or not:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00268.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Plenty of `AVG` processes running on the target. We have not only bypassed this
    antivirus but have also brought down the detection rate from 22/35 to 2/35, which
    is quite impressive. A little more modification in the source code will generate
    a complete FUD (fully undetectable). However, I'll leave that as an exercise for
    you to complete.
  prefs: []
  type: TYPE_NORMAL
- en: Further roadmap and summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Throughout this chapter, we looked at cutting-edge real-world scenarios, where
    it's not just about exploiting vulnerable software; instead, web applications
    made way for us to get control of the systems. We saw how we could use external
    interfaces to scan and exploit the targets from the internal network. We also
    saw how we could use our non-Metasploit tools with the help of meterpreter sessions
    to scan internal networks. By the end, we saw how we could evade AV solutions
    with our existing meterpreter shellcode, which made it easy to avoid the eyes
    of our victim. For further reading on hardcore exploitation, you can refer to
    my mastering series book on Metasploit called *Mastering Metasploit*.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can perform the following exercises to make yourself comfortable with the
    content covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Try to generate a FUD meterpreter backdoor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use socks in the browser to browse content in internal networks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Try building shellcode without bad characters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Figure out the difference between using a reverse TCP and a bind TCP payload
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Get yourself familiar with various hash types
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For now, keep practicing and honing your skills on Metasploit because it is
    not the end, IT'S JUST THE BEGINNING.
  prefs: []
  type: TYPE_NORMAL
- en: This book was downloaded from AvaxHome!
  prefs: []
  type: TYPE_NORMAL
- en: 'Visit my blog with more new books:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://avxhm.se/blogs/AlenMiler](https://tr.im/avaxhome)'
  prefs: []
  type: TYPE_NORMAL
