- en: Adding UI Frameworks
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will guide you through the process of installing a selection
    of frontend UI frameworks in your Nuxt project that will style your app templates.
    The frameworks we have selected in this book are Foundation for designing your
    layouts, Motion UI for creating animations, Less as the style sheet language,
    jQuery UI for adding animations to your DOM, AOS for animating your contents on
    scrolling, and Swiper for creating carousel images. These frameworks can speed
    up frontend development in your Nuxt project, making it fun and easy.
  prefs: []
  type: TYPE_NORMAL
- en: 'The topics we will be covering in this chapter are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Adding Foundation and Motion UI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding Less (Leaner Style Sheets)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding jQuery UI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding AOS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding Swiper
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding Foundation and Motion UI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Foundation is a frontend framework for creating responsive sites. It is shipped
    with HTML and CSS templates for grid layouts, typography, buttons, tables, navigation, forms,
    and much more, as well as optional JavaScript plugins. It works with any device,
    mobile or desktop, and is an alternative to Bootstrap ([https://getbootstrap.com/](https://getbootstrap.com/)),
    another popular frontend framework. We focus on Foundation in this book. So, just
    as in the previous chapter, we have a list of suggested UI frameworks that you
    can choose from for your app when using the `create-nuxt-app` scaffolding to install
    the skeleton of your Nuxt project. We should choose `None` so that we can add Foundation
    as the UI framework:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Once you have answered the questions in the installation process, navigate
    to your project directory, and then you can install and integrate Foundation into
    your Nuxt app. The easiest way is to use **content delivery networks** (**CDNs**),
    but is not encouraged. The simplest reason is that the CDN link won''t work if
    you are developing offline. Also, you will lose control of the source files because
    they are handled by large web companies, such as Google, Microsoft, and Amazon. However,
    if you want to use a CDN in your Nuxt project for a quick start, simply add the
    CDN source to the `head` option in the Nuxt config file as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: You can find the latest CDN links from the official Foundation site at [https://get.foundation/sites/docs/installation.html#cdn-links](https://get.foundation/sites/docs/installation.html#cdn-links).
  prefs: []
  type: TYPE_NORMAL
- en: 'That''s easy, isn''t it? But it is not ideal if you want to host the source
    files locally. Let''s find out the proper way of integrating with Nuxt in the
    following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install Foundation and its dependencies (jQuery and what-input) via npm on
    your terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the Foundation CSS source from the `/node_modules/` folder to the `css`
    option in the Nuxt config file as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a `foundation.client.js`  file in the `/plugins/` directory with this
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: This plugin will make sure that Foundation runs on the client side only. We
    will cover plugins in more detail in [Chapter 6](2102475f-1a6b-42c0-abaa-ec018f8fa25a.xhtml),
    *Writing Plugins and Modules*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Register the preceding Foundation plugin in the `plugins` option in the Nuxt
    config file as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Then you can use the JavaScript plugins from Foundationin any page where you
    need them, for example:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: That's it. You have installed and integrated it successfully in your Nuxt project.
    Now, let's explore how you can create a grid-structure layout and website navigation
    with Foundation to accelerate frontend web development in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Creating grid layouts and website navigations with Foundation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The very first thing we should look at is the grid system from Foundation,
    which is called XY Grid. In web development, a grid system is a system that structures
    our HTML elements into a grid-based layout. Foundation comes with CSS classes
    that we can use to structure our HTML elements easily and effortlessly, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'This will responsively structure our elements into two columns on large screens
    (for example, iPad, Windows Surface), but a single column on small screens (for
    example, iPhone). Let''s create a responsive layout in the default `index.vue` page
    and website navigation in the `default.vue` layout generated by the `create-nuxt-app` scaffolding
    tool in the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Delete the `Logo.vue` component in the `/components/` directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Remove the `<style>` and `<script>` blocks in the `index.vue` page in the `/pages/` directory,
    but replace the `<template>` block with the following elements and grid classes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: In this template, the images are structured side by side when the page is loaded
    on a large screen. But they will responsively stack upon each other when the page
    is resized to, or loaded on, a small screen.
  prefs: []
  type: TYPE_NORMAL
- en: 'Remove the `<style>` and `<script>` blocks in the `default.vue` layout in the
    `/layouts/` directory, but replace the `<template>` block with the following navigation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: In this new layout, we have just created a basic website horizontal menu with
    a `<ul>` element filled with three `<li>` elements and `<nuxt-link>` components
    by adding a `.menu` class to the `<ul>` element. We also have aligned the menu
    items to center by just adding `.align-center` right after the `.menu` class.
  prefs: []
  type: TYPE_NORMAL
- en: That's it. You now have a responsive layout with navigation that works beautifully
    on any device. You can see how quickly you can get it done without writing any
    CSS styles yourself. It's sweet, isn't it? But what about JavaScript? Foundation
    comes with some JavaScript utilities and plugins that we can make use of too.
    Let's find out in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: For more information about the XY gridand navigation in Foundation, please visit
    [https://get.foundation/sites/docs/xy-grid.html](https://get.foundation/sites/docs/xy-grid.html).
    and [https://get.foundation/sites/docs/menu.html](https://get.foundation/sites/docs/menu.html).
  prefs: []
  type: TYPE_NORMAL
- en: Using JavaScript utilities and plugins from Foundation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Foundation comes with many useful JavaScript utilities, such as MediaQuery.
    This MediaQuery utility can be used to get the screen size breakpoints (small,
    medium, large, extra-large) for creating responsive layouts in your app. Let''s
    find out how you can make use of it in the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a `utils.js` file for keeping your custom global utilities in the `/plugins/` directory
    and add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: In this code, we have created a global plugin (which is a JavaScript function)
    that will get the current screen size from the `current` property in the MediaQuery
    utility and log the output whenever the browser's screen size is changed. A resize
    event listener is added to the window object by using the JavaScript `EventTarget`
    method, `addEventListener`. This plugin is then injected into the Vue instance
    by naming it `$getCurrentScreenSize`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Call this `$getCurrentScreenSize` function in the default layout as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'So, if you open the console tab on your Chrome browser, you should see the
    log of the current screen size when you are resizing your screen, such as `Current
    screen size: medium`.'
  prefs: []
  type: TYPE_NORMAL
- en: For more information about Foundation MediaQuery and other utilities, please
    visit [https://get.foundation/sites/docs/javascript-utilities.html#mediaquery](https://get.foundation/sites/docs/javascript-utilities.html#mediaquery)
    and [https://get.foundation/sites/docs/javascript-utilities.html](https://get.foundation/sites/docs/javascript-utilities.html).
  prefs: []
  type: TYPE_NORMAL
- en: For more information about the JavaScript EventTarget and addEventListener,
    please visit [https://developer.mozilla.org/en-US/docs/Web/API/EventTarget](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget) and [https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener).
  prefs: []
  type: TYPE_NORMAL
- en: 'Apart from the JavaScript utilities, there are many JavaScript plugins that
    come with Foundation, such as Dropdown Menu for creating dropdown navigation,
    Abide for form validation, and Tooltip for displaying extended information on
    an element in your HTML page. These plugins can be activated by simply adding
    their class names to your elements. Furthermore, you can modify and interact with
    them by writing JavaScript just like we have shown you in this section. Let''s
    take a look at the Abide plugin in the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a `form.vue` page in the `/pages/` directory with the following HTML
    elements to create a form containing two blocks of `.grid-container` elements:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: In this form, the first grid container contains the general error message while
    the second container will contain the form input fields. We activated the Abide
    plugin just by adding `data-abide` to the form element. We also added a `novalidate`
    attribute to the form element to prevent the native validation from the browser
    so that we can pass the job to the Abide plugin.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a `<div>` block with the `.cell` and `.small-12` classes containing
    an email `<input>` element and two default error messages in `<span>` elements
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'In this cell block, there are three custom attributes that come from Foundation:
    the `pattern` attribute is used to validate the email string, the `data-form-error-on`
    attribute is used to display the input error responding to the `required` and
    `pattern` attributes, and the `placeholder` attribute is used to display an input
    hint in the input field. Note that the `required` attribute is an HTML5 default
    attribute.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create two `<div>` blocks containing two `<input>` elements for collecting passwords
    in which the second password is used to match the first password by adding a `data-equalto`
    attribute from Foundation to the second password `<input>` element as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Create the last `<div>` block containing a submit button and reset button as
    follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Initiate the Foundation JavaScript plugin in the `<script>` block when the
    Vue component is mounted:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: That's it. Without writing any JavaScript, you have created a beautiful frontend
    form validation by just adding HTML elements with classes and attributes. That
    is extremely useful!
  prefs: []
  type: TYPE_NORMAL
- en: For more information about the Abide plugin in Foundation, please visit [https://get.foundation/sites/docs/abide.html](https://get.foundation/sites/docs/abide.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'Besides JavaScript utilities and plugins, there are a few useful libraries
    from Zurb Foundation that we can benefit from: Motion UI for creating Sass/CSS
    animations, Panini for creating pages and layouts with reusable partials, and Style
    Sherpa for creating style guides for your code base. We will explore how we can
    use Motion UI to create CSS animations and transitions in the next section. Let''s
    find out!'
  prefs: []
  type: TYPE_NORMAL
- en: Creating CSS animations and transitions with Motion UI
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Motion UI is a handy Sass library from Zurb Foundation for creating CSS transitions
    and animations quickly. You can download the Starter Kit from the Motion UI site
    and fiddle around with it, but that lacks the control of your own because it comes
    with many built-in defaults and effects that you have to stick with. So, if you
    want to have more control and take full advantage of Motion UI, you must know
    how to customize and compile the Sass code yourself. Let''s find out how you can
    write your Sass animations in the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install Motion UI and its dependencies (Sass and Sass loader) via npm on your
    terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a `main.scss` file in a `/css/` folder in the `/assets/` directory and
    import Motion UI as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Followed by the custom CSS animation as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Register the custom Motion UI CSS resource in the `css` option in the Nuxt
    config file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Apply the animation to any element by using its class name, for example:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Then you should see that the preceding image is taking 2 seconds to fade in
    gradually whenever the page is loaded.
  prefs: []
  type: TYPE_NORMAL
- en: 'Motion UI also provides two public functions that we can interact with to trigger
    its built-in animations and transitions: `animationIn` and `animateOut`. Let''s
    find out how you can use them in the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a `motion-ui.client.js` file in the `/plugins/` directory with this
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: This plugin will make sure that Motion UI runs on the client side only. We will
    cover plugins in more detail in [Chapter 6](2102475f-1a6b-42c0-abaa-ec018f8fa25a.xhtml),
    *Writing Plugins and Modules*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Register the preceding Motion UI plugin in the `plugins` option in the Nuxt
    config file as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Use the Motion UI functions in the template anywhere you like, for example:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: In this page, we store the transition name `spin-in` in the `data` attribute
    in the element and then pass it to the Motion UI `animateIn` function to apply
    the animation when the element is clicked. Note that we use jQuery to get the
    data from the `data` attribute.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to find out the rest of the built-in transition names, please visit
    [https://get.foundation/sites/docs/motion-ui.html#built-in-transitions](https://get.foundation/sites/docs/motion-ui.html#built-in-transitions).
  prefs: []
  type: TYPE_NORMAL
- en: It is cool, isn't it? It can be handy if you need CSS animations or transitions
    on your elements and you don't need to write tons of CSS lines yourself. This
    can keep your CSS styles small and focus on the main and custom presentation of
    your template. Talking of saving and not having to write genetic code yourself,
    it is worth mentioning the common icon font that's offered by Zurb Foundation
    as well – Foundation Icon Font 3\. Let's find out how you can benefit from it
    in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: For more information about Motion UI, please visit [https://get.foundation/sites/docs/motion-ui.html](https://get.foundation/sites/docs/motion-ui.html). As
    for Panini and Style Sherpa, please visit [https://get.foundation/sites/docs/panini.html](https://get.foundation/sites/docs/panini.html)
    and [https://get.foundation/sites/docs/style-sherpa.html](https://get.foundation/sites/docs/style-sherpa.html).
  prefs: []
  type: TYPE_NORMAL
- en: Adding icons with Foundation Icon Fonts 3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Foundation Icon Fonts 3 is one of the useful icon font sets that we can use
    with CSS on projects for frontend development. It can save you from creating common
    icons yourself such as social media icons (Facebook, Twitter, YouTube), arrow
    icons (arrow up, arrow down, and so on), accessibility icons (wheelchair, elevator,
    and so on), e-commerce icons (shopping cart, credit card, and so on), and text
    editor icons (bold, italic, and so on). Let''s find out how you can install it
    for your Nuxt project in the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install Foundation Icon Fonts 3 via npm:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the path of Foundation Icon Fonts globally in the Nuxt config file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Apply the icon to any `<i>` element using the icon name prefixed with `fi`,
    for example:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: You can find out the rest of the icon names at [https://zurb.com/playground/foundation-icon-fonts-3](https://zurb.com/playground/foundation-icon-fonts-3).
  prefs: []
  type: TYPE_NORMAL
- en: Well done! In this section and in the previous sections on adding Foundation
    to your Nuxt project, you have managed to use the grid system to structure your
    layouts and Sass to create CSS animations with Motion UI.  But adding a grid system
    and writing CSS animations is not enough for a building an app; we would need
    specific CSS to describe the presentation of HTML documents and Vue pages in our
    Nuxt app. We can just use Sass throughout our project to create custom styles
    that cannot be done by just using Foundation alone, but let's try another popular
    styling preprocessor and add it to your Nuxt project – **Less**. Let's find out
    in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: You can find all the example code that you have learned so far on Foundation
    in `/chapter-3/nuxt-universal/adding-foundation/` in our GitHub repository.
  prefs: []
  type: TYPE_NORMAL
- en: Adding Less (**Leaner Style Sheets)**
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Less, standing for Leaner Style Sheets, is a language extension for CSS. It
    looks just like CSS, so it is extremely easy to pick it up in "less" time. Less
    only makes a few convenient additions to the CSS language, which is one of the
    reasons it can be learned so quickly. You can have variables, mixins, nesting,
    nested at-rules and bubbling, operations, functions, and so on in writing CSS
    with Less; for example, the following is what the variables look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'These variables can be used just like those in other programming languages;
    for example, you can use the preceding variables in the following way in your
    ordinary CSS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code will be converted to the following CSS, which our browsers
    will understand:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'It is very easy and neat, isn''t it? In Nuxt, you can use Less as your CSS
    preprocessor by using the `lang` attribute in the `<style>` block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'This way is good and manageable if you want to apply local styles to specific
    pages or layouts. And you should add a `scoped` attribute before the `lang` attribute
    so that the local style is applied locally to the specific page and does not interfere
    with the styles in other pages. However, if you have multiple pages and layouts
    sharing a common style, then you should create the style globally in the `/assets/`
    directory in your project. So, let''s find out how you can create global styles
    with Less in the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install Less and its webpack loader via npm on your terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a `main.less` file in the `/assets/` directory and add the following
    styles:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Install the preceding global styles in the Nuxt config file as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Apply the preceding styles anywhere in your project, for example:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: You should see the borders that you just added to the CSS classes when you launch
    your app on the browser. These borders can be useful as guidelines when developing
    layouts because the grid lines underneath the grid system are "invisible" and
    it can be difficult to visualize them without any visible lines.
  prefs: []
  type: TYPE_NORMAL
- en: You can find the preceding code in `/chapter-3/nuxt-universal/adding-less/`
    in our GitHub repository.
  prefs: []
  type: TYPE_NORMAL
- en: 'Since we are covering the CSS preprocessor in this section, it is worth mentioning
    that we can use any preprocessor, whether in the `<style>` block, `<template>`
    block, or `<script>` block, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to write JavaScript with CoffeeScript, you can do that as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: For more information about CoffeeScript, please visit [https://coffeescript.org/](https://coffeescript.org/).
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to write HTML tags using Pug in Nuxt, you can do it as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: For more information about Pug, please visit [https://coffeescript.org/](https://pugjs.org/).
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to write CSS styles using Sass (Syntactically Awesome Style Sheets)
    or Scss (Sassy Cascaded Style Sheets) instead of Less, you can do that as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: For more information about Sassand Scss, please visit [https://coffeescript.org/](https://sass-lang.com/).
  prefs: []
  type: TYPE_NORMAL
- en: In this book, we use Less, vanilla HTML, and JavaScript (mostly ECMAScript 6
    or ECMAScript 2015) throughout the chapters. But you are free to venture with
    any preprocessor we have mentioned. Now let's take a look at another way of adding
    effects and animations to the HTML elements in your Nuxt project – jQuery UI.
  prefs: []
  type: TYPE_NORMAL
- en: Adding jQuery UI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'jQuery UI is a set of user interface (UI) interactions, effects, widgets, and
    utilities that are built on top of jQuery. It is a useful tool for designers and
    developers alike. Just like Motion UI and Foundation, jQuery UI helps you write
    less code and do more with the elements in your project. It can be added to a
    plain HTML page easily by using its CDN resources and jQuery as its dependency,
    for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Again, it is the same as Foundation. It is a bit complicated when you want
    to integrate jQuery UI with Nuxt. We can use the preceding CDN resources and add
    them to the `head` option in the Nuxt config file as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'But still, just like integrating with Foundation, it is not encouraged to do
    it this way. Here is the proper way of doing it:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install jQuery UI via npm on your terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the CSS source of jQuery UI from the `/node_modules/` folder to the `css`
    option in the Nuxt config file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a file called `jquery-ui-bundle.js` in the `/plugins/` directory and
    import jQuery UI as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: Again, this plugin will make sure that jQuery UI runs on the client side onlyand
    we will cover plugins in more detail in [Chapter 6](2102475f-1a6b-42c0-abaa-ec018f8fa25a.xhtml), *Writing
    Plugins and Modules*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Register the preceding jQuery UI plugin in the `plugins` option in the Nuxt
    config file as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'Now you can use jQuery UI anywhere you like, for example:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: In this example, we use one of the widgets from jQuery UI, Accordion, for displaying
    collapsible content panels. You can find the details of the HTML code at [https://jqueryui.com/accordion/](https://jqueryui.com/accordion/).
  prefs: []
  type: TYPE_NORMAL
- en: 'Besides widgets, jQuery UI comes with effects such as animation easing effects. Let''s
    find out how you can create animations with the easing effects in the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new page, `animate.vue`, in the `/pages/` directory with the following
    element in the `<template>` block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'Create the animation using the jQuery `animate` function with the jQuery UI easing
    effect,as follows, in the `<template>` block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: In this code, we use the `easeInQuint` easing effect when the element is clicked
    and the `easeOutExpo` easing effect when it is clicked again. The font size of
    the element is animated from `2em` to `10em` upon clicking and from `10em` to
    `2em` when it is clicked again. It is the same for the text color, which is animated
    between `red` and `black` when the element is clicked.
  prefs: []
  type: TYPE_NORMAL
- en: Refresh your browser and you should see that we have applied the animation and
    the easing effects to `H1`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For more easing effects, please visit [https://api.jqueryui.com/easings/](https://api.jqueryui.com/easings/),
    while for more information about the jQuery animate function, please visit [https://api.jquery.com/animate/](https://api.jquery.com/animate/).
  prefs: []
  type: TYPE_NORMAL
- en: If you want to find out the rest of the effects, widgets, and utilities from
    jQuery UI, please visit [https://jqueryui.com/](https://jqueryui.com/).
  prefs: []
  type: TYPE_NORMAL
- en: Even though you can create animations and transitions with Motion UI using CSS,
    jQuery UI is another option for applying animations to your HTML elements using
    JavaScript. Besides jQuery and jQuery UI, there are other JavaScript libraries
    that we can benefit from to present our content interactively and interestingly
    in specific ways, such as animating our content when scrolling the page up or
    down and swiping in the contents from left or right. These last two animation
    tools that we will look into are AOS and Swiper. So, let's do that in the next
    section.
  prefs: []
  type: TYPE_NORMAL
- en: You can find all the code we have used for this section in `/chapter-3/nuxt-universal/adding-jquery-ui/`
    in our GitHub repository.
  prefs: []
  type: TYPE_NORMAL
- en: Adding AOS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'AOS is a JavaScript animation library that animates your DOM elements beautifully
    into view as you scroll down (or up) the page. It is a small library and very
    easy to use for triggering animations as you scroll a page without having to code
    them yourself. To animate an element, simply use the `data-aos` attribute:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'Just as simple as this, the element will fade in gradually as you scroll the
    page. You can even set how long in seconds for the animation to complete. So,
    let''s find out how you can add this library to your Nuxt project in the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install AOS via npm on your terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following elements to `index.vue` as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: In this template, we use Foundation to add the grid structure to the elements
    and apply the AOS `fade-up` animation on each element by using the `data-aos`
    attribute.
  prefs: []
  type: TYPE_NORMAL
- en: 'Import the AOS JavaScript and CSS resources in the `<script>` block and initiate
    AOS when the Vue component is mounted:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: When you refresh your screen, you should see the elements are fading in upward,
    one after another, in order, as you are scrolling down the page. It is wonderful
    that it allows you to present your content beautifully so effortlessly, isn't
    it?
  prefs: []
  type: TYPE_NORMAL
- en: 'However, the way we have just applied AOS isn''t good if you have multiple
    pages that you want to animate as well. You''d have to duplicate the preceding
    script to every page where you need the AOS animations. So, if you have more than
    one page that you want to animate with AOS, then you should register and initiate
    it globally. Let''s find out how it can be done in the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create an `aos.client.js` plugin in the `/plugins/` directory, import the AOS
    resources, and initiate AOS as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: In this plugin, we instruct AOS to take 2 seconds to animate our elements –
    globally. You can find out the rest of the setting options at [https://github.com/michalsnik/aos#1-initialize-aos](https://github.com/michalsnik/aos#1-initialize-aos).
  prefs: []
  type: TYPE_NORMAL
- en: 'Register the preceding AOS plugin in the `plugins` option in the Nuxt config
    file as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: That's it. Now you can apply the AOS animations to multiple pages without duplicating
    the script.
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that we import the CSS resource directly in the AOS plugin instead of
    importing it globally through the `css` option in the Nuxt config file, as opposed
    to what we did for Foundation and Motion UI in the past sections. So, if you want
    to do the same for Foundation, you can import its CSS resource to the plugin file
    directly as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: Then, you don't have to use the global `css` option in the Nuxt config file.
    This way is preferred if you want to keep your config file "thin" and keep the
    CSS and JavaScript resources of your UI frameworks in their plugin files.
  prefs: []
  type: TYPE_NORMAL
- en: You can find the source code of this example Nuxt app in `/chapter-3/nuxt-universal/adding-aos/` from
    our GitHub repository.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to find out more information about AOS and the rest of its animation
    names, please visit [https://michalsnik.github.io/aos/](https://michalsnik.github.io/aos/).
  prefs: []
  type: TYPE_NORMAL
- en: Now let's explore the last JavaScript helper that can help accelerate your frontend
    development – **Swiper**.
  prefs: []
  type: TYPE_NORMAL
- en: Adding Swiper
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Swiperis a JavaScript touch slider that can be used in modern web apps (desktop
    or mobile) and mobile native or hybrid apps. It is part of Framework7 ([https://framework7.io/](https://framework7.io/))
    and Ionic Framework ([https://ionicframework.com/](https://ionicframework.com/))
    for building mobile hybrid apps. We can get Swiper set up for a web app easily
    using its CDN resources, just like we did with other frameworks and libraries
    in the past sections. But let''s find out how you can install and use it in a
    proper way with Nuxt in the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install Swiper in your Nuxt project via npm through your terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following HTML elements to create an image slider in the `<template>`
    block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: From these elements, we want to create an image slider with three images that
    can be slid into the view from left or right and two buttons – a next button and
    a previous button.
  prefs: []
  type: TYPE_NORMAL
- en: 'Import Swiper resources in the `<script>` block and create a new Swiper instance when
    the page is mounted:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: In this script, we provide the class name of our image slider to Swiper so that
    a new instance can be initiated. Also, we register our next and previous buttons
    to the new instance through Swiper's `pagination` option.
  prefs: []
  type: TYPE_NORMAL
- en: You can find the rest of the setting options for initializing Swiper and the
    API that you can use to interact with the instantiated instance at [https://swiperjs.com/api/](https://swiperjs.com/api/).
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following CSS styles to customize the image slider in the `<style>`
    block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: In this style, we just want to make the slide occupy the screen fully by using
    100% on the CSS `width` and `height` properties and to centralize the image in
    the slider container by using the CSS `flex` property.
  prefs: []
  type: TYPE_NORMAL
- en: Now you can run Nuxt and load the page on your browser and you should see an
    interactive image slider working nicely.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can find out about some great example slides from the Swiper official website
    at [https://swiperjs.com/demos/](https://swiperjs.com/demos/).
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that the way we just used Swiper is meant for a single page only. If you
    want to create sliders on multiple pages, then you can register Swiper globally
    through a plugin. So let''s find out how to do that in the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a `swiper.client.js` plugin in the `/plugins/` directory, import Swiper
    resources, and create a property called `$swiper`. Attach Swiper to this property
    and inject it into the Vue instance as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'Register this Swiper plugin in the `plugins` option in the Nuxt config file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'Now you can create the new instance of Swiper in multiple pages in your app
    by calling the `$swiper` property through the `this` keyword, for example:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: Again, we have organized the CSS resource in the plugin file instead of registering
    it globally through the `css` option in the Nuxt config file. However, if you
    want to override some styles in any of these UI frameworks and libraries globally,
    then it is easier to override them by registering their CSS resources globally
    in the `css` option followed by your custom styles in a CSS file that's stored
    in the `/assets/` directory.
  prefs: []
  type: TYPE_NORMAL
- en: You can download the source code of this chapter in `/chapter-3/nuxt-universal/adding-swiper/` from
    our GitHub repository. If you want to find out more information about Swiper,
    please visit [https://swiperjs.com/](https://swiperjs.com/).
  prefs: []
  type: TYPE_NORMAL
- en: Well done! You have managed to pick up some of the popular UI frameworks and
    libraries that we selected for you to accelerate your frontend development. We
    hope that they will be useful in the Nuxt projects you create in the future. We
    will use some of these frameworks and libraries occasionally in the coming chapters,
    especially in the final chapter – [Chapter 18](a2720301-9e1c-4c28-8af8-39bd5c093fb9.xhtml), *Creating
    a Nuxt App with CMS and GraphQL*. Right now, let's summarize what you have learned
    in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you have installed Foundation as the main UI framework in your
    Nuxt project and used Foundation's grid system, JavaScript utilities, and plugins
    to create a simple grid layout, form, and navigation. You have used Motion UI
    from Foundation to create Sass animations and transitions and Foundation Icon
    Fonts 3, also from Foundation, for adding common and useful icons to your HTML
    page. You have installed Less as the styling preprocessor and created some variables
    in the Less style sheet.
  prefs: []
  type: TYPE_NORMAL
- en: You have installed jQuery UI, adding its Accordion widget to your app, and created
    an animation using its easing effects. You have installed AOS and used it to animate
    your elements into the viewport when scrolling the page down or up. Lastly, you
    have installed Swiper for creating a simple image slide. Last but not least, you
    have learned how to install these frameworks and libraries globally through the
    Nuxt config file or just using them locally on specific pages individually.
  prefs: []
  type: TYPE_NORMAL
- en: In the coming chapter, we will cover the view, routing, and transition in Nuxt.
    You will create custom pages, routes, and CSS transitions and learn how to use
    the `/assets/` directory to serve assets like images and fonts. Also, you will
    learn how to customize the default layout and add new ones in the `/layouts/` directory.
    You will be given a simple website example that uses all these Nuxt features so
    that you can grab a sense of concrete use of what you have learned from this book.
    So, let's explore Nuxt further in the next chapter!
  prefs: []
  type: TYPE_NORMAL
