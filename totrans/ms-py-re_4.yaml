- en: Chapter 4. Look Around
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Until this point, we have learned different mechanisms of matching characters
    while discarding them. A character that is already matched cannot be compared
    again, and the only way to match any upcoming character is by discarding it.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: The exceptions to this are a number of metacharacters we have studied, the so-called
    **zero-width** **assertions**. These characters indicate positions rather than
    actual content. For instance, the caret symbol (`^`) is a representation of the
    beginning of a line or the dollar sign (`$`) for the end of a line. They just
    ensure that the position in the input is correct without actually consuming or
    matching any character.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: A more powerful kind of zero-width assertion is **look around**, a mechanism
    with which it is possible to match a certain previous (**look behind**) or ulterior
    (**look ahead**) value to the current position. They effectively do assertion
    without consuming characters; they just return a positive or negative result of
    the match.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: The look around mechanism is probably the most unknown and at the same time
    the most powerful technique in regular expressions. This mechanism allows us to
    create powerful regular expressions that cannot be written otherwise, either because
    of the complexity it would represent or just because of technical limitations
    of regular expressions without look around.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we are going to learn how to leverage the look around mechanism
    using Python regular expressions. We will understand how to apply them, how these
    work behind the scenes, and the few limitations the Python regular expression
    module will impose on us.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: 'Both look ahead and look behind could be subdivided into another two types
    each: positive and negative:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: '**Positive look ahead**: This mechanism is represented as an expression preceded
    by a question mark and an equals sign, `?=`, inside a parenthesis block. For example,
    `(?=regex)` will match if the passed regex *do* match against the forthcoming
    input.'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Negative look ahead**: This mechanism is specified as an expression preceded
    by a question mark and an exclamation mark, `?!`, inside a parenthesis block.
    For example, `(?!regex)` will match if the passed regex *do not* match against
    the forthcoming input.'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Positive look behind**: This mechanism is represented as an expression preceded
    by a question mark, a less-than sign, and an equals sign, `?<=`, inside a parenthesis
    block. For example, `(?<=regex)` will match if the passed regex *do* match against
    the previous input.'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Negative look behind**: This mechanism is represented as an expression preceded
    by a question mark, a less-than sign, and an exclamation mark, `?<!`, inside a
    parenthesis block. For example, `(?<!regex)` will match if the passed regex *do
    not* match against the previous input.'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's start looking forward to the next section.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: Look ahead
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first type of look around mechanism that we are going to study is the look
    ahead mechanism. It tries to match ahead the subexpression passed as an argument.
    The zero-width nature of the two look around operations render them complex and
    difficult to understand.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: 'As we know from the previous section, it is represented as an expression preceded
    by a question mark and an equals sign, `?=`, inside a parenthesis block: `(?=regex)`.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start tackling this by comparing the result of the two similar regular
    expressions. We can recall that in [Chapter 1](ch01.html "Chapter 1. Introducing
    Regular Expressions"), *Introducing Regular Expressions*, we matched the expression
    `/fox/` to the phrase `The quick brown fox jumps over the lazy dog`. Let''s also
    apply the expression `/(?=fox)/` to the same input:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'We just searched the literal `fox` in the input string, and just as expected
    we have found it between the index `16` and `19`. Let''s see the following example
    of the look ahead mechanism:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This time we have applied the expression `/(?=fox)/` instead. The result has
    been just a position at the index `16` (both the start and end point to the same
    index). This is because look around does not consume characters, and therefore,
    it can be used to filter where the expression should match. However, it will not
    define the contents of the result. We can visually compare these two expressions
    in the following figure:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: '![Look ahead](graphics/3156OS_04_01.jpg)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
- en: Comparison of normal and look ahead matches
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s use this feature again to try and match any word that is followed by
    a comma character (`,`) using the following regular expression `/\w+(?=,)/` and
    the text `They were three: Felix, Victor, and Carlos`:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: We created a regular expression that accepts any repetition of alphanumeric
    characters followed by a comma character that is not going to be used as a part
    of the result. Therefore, only `Felix` and `Victor` were part of the result as
    `Carlos` didn't have a comma after the name.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: 'How different was this compared to the use of the regular expressions we have
    up to this chapter? Let''s compare the results by applying `/\w+,/` to the same
    text:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: With the preceding regular expressions, we asked the regular expression engine
    to accept any repetition of alphanumeric characters followed by a comma character.
    Therefore, the alphanumeric characters *and the comma character* will be returned,
    as we can see in the listing.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: 'It''s noteworthy that the look ahead mechanism is another subexpression that
    can be leveraged with all the power of regular expressions (it''s not the same
    case for the look behind mechanism as we will discover later). Therefore, we can
    use all the constructions we learned so far as the alternation:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In the preceding example, we used alternation (even though we could have used
    other simpler techniques as a character set) to accept any repetition of alphanumeric
    characters followed by a comma or dot character that is not going to be used as
    a part of the result.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: Negative look ahead
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The negative look ahead mechanism presents the same nature of the look ahead
    but with a notable distinction: the result will be valid only if the subexpression
    doesn''t match.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: 'It is represented as an expression preceded by a question mark and an exclamation
    mark, `?!`, inside a parenthesis block: `(?!regex)`.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: 'This is useful when we want to express what should not happen. For instance,
    to find any name `John` that is not `John Smith`, we could do the following:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In the preceding example, we looked for `John` by consuming these five characters
    and then looked ahead for a whitespace character followed by the word `Smith`.
    In case of a match, the match will contain only the starting and end position
    of `John`. In this case, the positions are `27`-`31` for `John McLane` and `63`-`67`
    for `John Bon Jovi`.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we are able to leverage the more basic forms of look around: the positive
    and negative look ahead. Let''s learn how to get the most of it in substitutions
    and groups.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: Look around and substitutions
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The zero-width nature of the look around operation is especially useful in substitutions.
    Thanks to them, we are able to perform transformations that would otherwise be
    extremely complex to read and write.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: One typical example of look ahead and substitutions would be the conversion
    of a number composed of just numeric characters, such as 1234567890, into a comma
    separated number, that is, 1,234,567,890.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: In order to write this regular expression, we will need a strategy to follow.
    What we want to do is group the numbers in blocks of three that will then be substituted
    by the same group plus a comma character.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: 'We can easily start with an almost naive approach with the following highlighted
    regular expression:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: We have failed in this attempt. We are effectively grouping in blocks of three
    numbers, but they should be taken from the right to the left. We need a different
    approach. Let's try to find one, two, or three digits that have to be followed
    by any number of blocks of three digits until we find something that is not a
    digit.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: This will have the following effect on our number. When trying to find one,
    two, or three digits, the regular expression will start taking just one, and this
    will be the number `1`. Then, it will try to catch blocks of exactly three numbers,
    for example, 234, 567, 890, until it finds a non-digit. This is the end of the
    input.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: 'If we express in a regular expression what we have just explained in plain
    English, we will obtain the following:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '| Element | Description |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
- en: '|'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '| This matches a decimal character |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
- en: '|'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '| This indicates that the match is repeated between one and three times |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
- en: '|'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '| This indicates that the character is followed by (but not consuming) this
    expression |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
- en: '|'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '| This indicates a group |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
- en: '|'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '| This indicates that there is a group of decimal characters |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
- en: '|'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '| This indicates that the match is repeated three times |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
- en: '|'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '|   |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
- en: '|'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '| This indicates that the decimal character should appear one or more times
    |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
- en: '|'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '| This indicates that the match is not followed by (but not consuming) what
    the following expression defines |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
- en: '|'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '| This indicates a decimal character |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
- en: '|'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '|   |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
- en: 'Let''s try again with this new regular expression in Python''s console:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'This time, we can see that we are using the right approach as we have just
    identified the correct blocks: `1`, `234`, `567`, and `890`.'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we just need to use a substitution to substitute each of the matches we
    have found for the same match result plus a comma character. We already know how
    to use substitutions as we learned it in [Chapter 2](ch02.html "Chapter 2. Regular
    Expressions with Python"), *Regular Expressions with Python*, so let''s just put
    it into practice:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Et voila! We have just transformed an unformatted number into a beautiful number
    with a thousand separators.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: We have just learned the two techniques to look ahead and foresee what is coming.
    We have also studied their usage in substitutions. Now, let's turn our head back
    to see what we have left behind **look behind**.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: Look behind
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We could safely define look behind as the opposite operation to look ahead.
    It tries to match behind the subexpression passed as an argument. It has a zero-width
    nature as well, and therefore, it won't be part of the result.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: 'It is represented as an expression preceded by a question mark, a less-than
    sign, and an equals sign, `?<=`, inside a parenthesis block: `(?<=regex)`.'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: 'We could, for instance, use it in an example similar to the one we used in
    negative look ahead to find just the surname of someone named `John McLane`. To
    accomplish this, we could write a look behind like the following:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: With the preceding look behind, we requested the regex engine to match only
    positions that are preceded with `John` and a whitespace to then consume `McLane`
    as a result.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: In Python's `re` module, there is, however, a fundamental difference between
    how look ahead and look behind are implemented. Due to a number of deeply rooted
    technical reasons, the look behind mechanism is only able to match fixed-width
    patterns. If variable-width patterns in look behind are required, the regex module
    at [https://pypi.python.org/pypi/regex](https://pypi.python.org/pypi/regex) can
    be leveraged instead of the standard Python `re` module.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: Fixed-width patterns don't contain variable-length matchers such as the quantifiers
    we studied in [Chapter 1](ch01.html "Chapter 1. Introducing Regular Expressions"),
    *Introducing Regular Expressions*. Other variable-length constructions such as
    back references aren't allowed either. Alternation is allowed but only if the
    alternatives have the same length. Again, these limitations are not present in
    the aforementioned regex module.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s see what''ll happen if we use an alternation with different length alternatives
    in a back reference:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: We've got an exception as look behind requires a fixed-width pattern. We will
    get a similar result if we try to apply quantifiers or other variable-length constructions.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have learned different techniques to match ahead or behind without
    consuming characters and the different limitations we might have, we can try to
    write another example that embraces a few of the mechanisms that we have studied
    to solve a real-world problem.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s assume that we want to extract any Twitter username that is present
    in a tweet in order to create an automatic mood detection system. To write a regular
    expression in order to extract them, we should start by identifying how a Twitter
    username is represented. If we browse the Twitter''s site [https://support.twitter.com/articles/101299-why-can-t-i-register-certain-usernames](https://support.twitter.com/articles/101299-why-can-t-i-register-certain-usernames),
    we might find the following description:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: '*"A username can only contain alphanumeric characters (letters A-Z, numbers
    0-9) with the exception of underscores, as noted above. Check to make sure your
    desired username doesn''t contain any symbols, dashes, or spaces."*'
  id: totrans-103
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'For our development tests, we are going to use this Packt Publishing tweet:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: '![Look behind](graphics/3156OS_04_02.jpg)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
- en: 'The first thing we should be able to construct is a character set with all
    the characters that could potentially be used in a Twitter username. This could
    be any alphanumeric character followed by the underscore character as we just
    found in the previous Twitter support article. Therefore, we could construct a
    character set similar to the following:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'This will represent all the parts that we want to extract from the username.
    Then, we will need to prepend a word boundary and the at symbol (`@`) that will
    be used to locate the usernames:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The reason behind using the word boundary is that we don''t want to get confused
    with e-mails and so on. We are looking only for text that follows the start of
    the line or a word boundary, then followed by an @ symbol, and then just a number
    of alphanumeric or underscore characters. The examples are as follows:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: '`@vromer0` is a valid user name'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`iam@vromer0` is not a valid user name as it should start with the @ symbol'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@vromero.org` is not a valid username as it contains an invalid character'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If we use the regular expression we have at the moment, we will obtain the
    following result:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'We do want to match just the username without including the preceding @ symbol.
    At this point, a look behind mechanism becomes useful. We can include the word
    boundary and the @ symbol in a look behind subexpression so that they don''t become
    a part of the matched result:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: And now we have accomplished our goals.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: Negative look behind
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The negative look behind mechanism presents the very same nature of the main
    look behind mechanism, but we will only have a valid result if the passed subexpression
    doesn't match.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: 'It is represented as an expression preceded by a question mark, a less-than
    sign, and an exclamation mark, `?<!`, inside a parenthesis block: `(?<!regex)`.'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: It is worth remembering that negative look behind not only shares most of the
    characteristics of the look behind mechanism, but it also shares the limitations.
    The negative look behind mechanism is only able to match fixed-width patterns.
    These have the same cause and implications as we have studied in the previous
    section.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: 'We could put this into practice by trying to match any person surnamed `Doe`
    who is not named `John` with a regular expression like this: `/(?<!John\s)Doe/`.
    If we use it in Python''s console, we will obtain the following result:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Look around and groups
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Another beneficial use of look around constructions is inside groups. Typically,
    when groups are used, a very specific result has to be matched and returned inside
    the group. As we don't want to pollute the groups with information that is not
    required, among other potential options we can leverage look around as a favorable
    solution.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在组内使用环视结构的另一个有益的用途。通常，当使用组时，必须在组内匹配并返回非常具体的结果。由于我们不希望在组内添加不必要的信息，因此在其他潜在选项中，我们可以利用环视作为一个有利的解决方案。
- en: 'Let''s say that we need to get a comma-separated value, the first part of the
    value is a name, while the second is a value. The format would be similar to this:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们需要获取一个逗号分隔的值，值的第一部分是一个名称，而第二部分是一个值。格式类似于这样：
- en: '[PRE28]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'As we learned in [Chapter 3](ch03.html "Chapter 3. Grouping"), *Grouping*,
    we can easily write an expression that will get these two values like the following:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在[第3章](ch03.html "第3章。分组")中学到的*分组*，我们可以轻松地编写一个表达式，以获取以下两个值：
- en: '[PRE29]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'However, we only want to match when the failure is not an authentication failure.
    We can accomplish this with the addition of a negative look behind. It will look
    like this:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我们只想在失败不是认证失败时进行匹配。我们可以通过添加负向后行来实现这一点。它看起来像这样：
- en: '[PRE30]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Once we put this in Python''s console, we will get the following output:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们将其放入Python的控制台，我们将得到以下输出：
- en: '[PRE31]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Summary
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned the concept of zero-with assertions and how it can
    be useful to find the exact thing in a text without interfering in the result
    content.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了零宽断言的概念，以及它如何在不干扰结果内容的情况下在文本中找到确切的内容。
- en: 'We have also learned how to leverage the four types of look around mechanisms:
    positive look ahead, negative look ahead, positive look behind, and negative look
    behind.'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还学习了如何利用四种类型的环视机制：正向先行断言，负向先行断言，正向后行断言和负向后行断言。
- en: We also reviewed, with special interest, the limitation of the two types of
    look behind with the variable assertions.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还特别关注了两种具有可变断言的后行环视的限制。
- en: With this, we conclude the travel through the basic and advanced techniques
    around regular expressions. Now, we are ready to focus on performance tuning in
    the next chapter.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这样，我们结束了对正则表达式基本和高级技术的探讨。现在，我们准备在下一章节中专注于性能调优。
