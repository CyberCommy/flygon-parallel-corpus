- en: Chapter 7. Going Mobile (and Tablet, Too)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: WebSockets, as their name implies, is something that uses the web. The web is
    usually interwoven with browser pages because that's the primary means of displaying
    data online. However, non-browser programs too use online data transmission. The
    release of the iPhone (initially) and the iPad (later) introduced a brand new
    world of web interconnectivity without necessarily using a web browser. Instead,
    the new smartphone and tablet devices utilized the power of native apps to offer
    a unique user experience.
  prefs: []
  type: TYPE_NORMAL
- en: Why mobile matters
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Currently, there are one billion active smartphones out there. That is, millions
    of potential customers for your applications. Those people use their mobile phone
    to accomplish daily tasks, surf the Internet, communicate, or shop.
  prefs: []
  type: TYPE_NORMAL
- en: Smartphones have become synonymous to apps, and nowadays, there is an app for
    any usage you can think of. Most of the apps connect to the Internet in order
    to retrieve data, make transactions, gather news, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Wouldn't it be great if you were able to use your existing WebSocket knowledge
    and develop a WebSocket client running natively on a smartphone or tablet device?
  prefs: []
  type: TYPE_NORMAL
- en: Native mobile app versus mobile website
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Well, this is a common conflict and as usual, the answer depends on your needs
    and your target audience. If you are familiar with the modern design trends, designing
    a website that is responsive and mobile friendly, is now a must. However, you
    should be sure that the content, which is what really matters, is equally accessible
    via a smartphone, as it is via a classic desktop browser.
  prefs: []
  type: TYPE_NORMAL
- en: Definitely, a WebSocket web app will run on any HTML5-compliant browser, including
    mobile browsers such as Safari for iOS and Chrome for mobile. So, no need to worry
    about compatibility issues on modern smartphones.
  prefs: []
  type: TYPE_NORMAL
- en: What happens though if your app utilizes device-specific information such as
    offline storage, GPS, notifications, or accelerometers, along with WebSockets?
    You need a more native implementation in a language other than HTML and JavaScript.
    W3C is defining some specifications that will let the client access hardware such
    as camera, GPS, and accelerometer. However, only a minority of modern web browsers
    currently support such specifications. At the time of writing, a native approach
    is the way to go, though the client-side future seems way more interesting! iOS
    uses Objective-C, Android uses Java, and Windows Phone uses C#. If you think that
    your mobile use-case scenario does not utilize any of the smartphone goodies,
    feel free to go with the browser-based app. If native functionality is required,
    then a native solution is necessary. That's exactly what are we going to build
    in this chapter!
  prefs: []
  type: TYPE_NORMAL
- en: Prerequisites
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In order to develop a smartphone app, you need to install the development tools
    and SDKs of your preferred target. The philosophy behind the examples we'll demonstrate
    is fundamentally the same in the three major mobile operating systems, that is,
    iOS, Android, and Windows.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you do not already have a mobile SDK installed, here is where you can pick
    one (they are all free):'
  prefs: []
  type: TYPE_NORMAL
- en: '| Platform | Targets | SDK URL |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| iOS | iPhone, iPad | [https://developer.apple.com/devcenter/ios/](https://developer.apple.com/devcenter/ios/)
    |'
  prefs: []
  type: TYPE_TB
- en: '| Android | Android phones & tablets | [http://developer.android.com/sdk/](http://developer.android.com/sdk/)
    |'
  prefs: []
  type: TYPE_TB
- en: '| Windows | Windows Phone, Windows 8 | [http://developer.windowsphone.com/
    develop](http://developer.windowsphone.com/ develop)&[http://msdn.microsoft.com/
    windows/apps](http://msdn.microsoft.com/ windows/apps) |'
  prefs: []
  type: TYPE_TB
- en: We suppose that you are familiar with at least one of the above SDKs and technologies.
    If not, you can navigate to the corresponding developer portal, and follow the
    online resources and tutorials, which provide a great starting point.
  prefs: []
  type: TYPE_NORMAL
- en: Throughout this chapter, we have decided to provide code samples for iOS, but
    feel free to use the platform you are most familiar with.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the SDK
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'After downloading the desired SDK, you follow an automated wizard that installs
    it in your system. Note that the iOS SDK can only run on a Mac operating system,
    the Windows SDK runs on a Windows operating system, and the Android SDK runs on
    Mac, Windows, or Linux. Along with the SDK, there are a couple of automatically
    installed goodies:'
  prefs: []
  type: TYPE_NORMAL
- en: Smartphone/tablet simulators
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An integrated development environment where you write and debug your code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Although you should always test your code on real devices (phones and tablets),
    the simulator is a really solid solution for constant debugging.
  prefs: []
  type: TYPE_NORMAL
- en: Considering iOS, here are the iPhone and iPad simulators, running iOS 6.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following figure shows an iPhone simulator:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing the SDK](img/6962OS_07_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The following figure shows an iPad simulator:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing the SDK](img/6962OS_07_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Testing our existing code in the mobile browser
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Remember the HTML and JavaScript code we wrote back in [Chapter 2](ch02.html
    "Chapter 2. The WebSocket API"), *The WebSocket API*? Having the SDK and simulators
    installed, we can access the web using the mobile browser included in the simulator.
    We can also access our local HTML, CSS, and JavaScript files without uploading
    them to a web server. Here is the chat client running pretty well on an iPad.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following image shows WebSocket web app on Safari for iOS (no modifications
    in code):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Testing our existing code in the mobile browser](img/6962OS_07_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Going native
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So, what if your application supports device-specific or offline features, and
    you still want to use WebSockets when the web is available?
  prefs: []
  type: TYPE_NORMAL
- en: You go native.
  prefs: []
  type: TYPE_NORMAL
- en: Fortunately, all of the major mobile platforms support WebSockets, so you need
    to make absolutely no changes in your server code! After all, HTML5 is a front-end
    client just like iPhone or iPad. Using the same techniques as the JavaScript samples,
    you are going to build the same application in Objective-C. The process is similar
    to any other mobile platform, so do not worry if you are not familiar with the
    Objective-C concept.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To begin with, open **XCode**, the development environment provided by Apple
    for building iOS apps. Eclipse and Visual Studio are the Android and Windows equivalents.
  prefs: []
  type: TYPE_NORMAL
- en: Follow the given steps for creating the project
  prefs: []
  type: TYPE_NORMAL
- en: Launch XCode and click on **Create a new XCode project**. The following screenshot
    shows XCode launch screen:![Creating the project](img/6962OS_07_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a single view application. Provide a name, along with company and organization
    identifiers if you want to. For example, name the app `WebSocketsMobile`. Then,
    select a local folder to place it into, as shown in the following screenshot:![Creating
    the project](img/6962OS_07_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Creating the WebSocket iPhone app
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you need to deploy your app for production, you need to additionally specify
    some icons for the target platforms. We'll skip such stuff for now, but feel free
    to add any resources your app might require. XCode automatically creates some
    files for us. The storyboard files (one for iPhone and one for iPad) will let
    us create the user interface of our app and the `ViewController` file will handle
    all the programming logic.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the initial UI of our iPhone app:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the WebSocket iPhone app](img/6962OS_07_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Add some controls to the user interface builder. For learning purposes, we'll
    try to keep it simple and only add `UITextField` for writing a message, a button
    for sending the message, and `UILabel` for displaying the chat messages. Remember
    to set the number of lines of the label to 0 (that is, infinite). Do not forget
    to connect the outlets with **View Controller,** using the assistant editor ([http://www.techotopia.com/index.php/Establishing_Outlets_and_Actions_using_the_Xcode_Assistant_Editor).](http://www.techotopia.com/index.php/Establishing_Outlets_and_Actions_using_the_Xcode_Assistant_Editor).)The
    following screenshot shows the iPhone app user interface:![Creating the WebSocket
    iPhone app](img/6962OS_07_07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Download the `UnittWebSocketClient` library and include it in your project.
    This library handles most of the WebSocket functionality. You can pick another
    one or implement your own. Follow the directions specified at [https://code.google.com/p/unitt/wiki/UnittWebSocketClient](https://code.google.com/p/unitt/wiki/UnittWebSocketClient).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Include the header files of the library in your project and specify your View
    Controller as a `WebSocketDelegate`. Then subscribe for the corresponding events,
    which are identical to the JavaScript ones:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'It is now time to populate the methods, as we did in the JavaScript samples.
    Here''s what you need to do in order to set the app up and running:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The following figure shows the native iOS WebSocket client up-and-running!
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the WebSocket iPhone app](img/6962OS_07_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: What about the iPad?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Although the app you created would run pretty fine on iPad devices, it is always
    better to provide a different interface for tablets. Simply navigate to the `MainStoryboard_iPad.storyboard`
    file, rearrange the UI elements, and provide tablet-specific functionality. Then,
    select the project targets and, while in the Summary tab, expand the `iPad Deployment
    Info` option and ensure that `MainStoryboard_iPad` is selected. You can select
    the iPhone storyboard if your app is not too complex or specify that the app target
    is iPhone only. This way, when someone runs your app on an iPad device, he/she
    will see a smaller screen centered in the iPad device.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we found out how WebSockets can act as a universal hub for
    transmitting messages between connected mobile and tablet clients. We implemented
    a native iOS application, which communicates with a WebSocket server just like
    the HTML5 JavaScript client.
  prefs: []
  type: TYPE_NORMAL
