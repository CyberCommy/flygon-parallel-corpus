- en: Other Common Security Flaws in Web Applications
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far in this book, we have covered most of the issues surrounding web application
    security and penetration testing, albeit briefly. However, due to the nature of
    web applications—which represent such a mixture of diverse technologies and methodologies
    that do not always work well together—the number of specific vulnerabilities and
    different types of attacks targeting these applications is so large and rapidly
    changing that no single book could possibly cover everything; hence, some things
    must be left out.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover a diverse set of vulnerabilities commonly present
    in web applications that sometimes escape the focus of developers and security
    testers, not because they are unknown (in fact, some are in *OWASP Top 10*), but
    because their impact is sometimes underestimated in real-world applications, or
    because vulnerabilities such as SQL injection and XSS are much more relevant because
    of their direct impact on users'' information. The vulnerabilities covered in
    this chapter are as follows:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: Insecure direct object references
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: File inclusion vulnerabilities
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: HTTP parameter pollution
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Information disclosure
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Insecure direct object references
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An **insecure direct object reference** vulnerability happens when an application
    requests a resource from the server (it can be a file, function, directory, or
    database record), by its name or other identifier, and allows the user to tamper
    directly with that identifier in order to request other resources.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s consider an example of this using Mutillidae II (navigate to OWASP Top
    10 2013 | A4 - Insecure Direct Object References | Source Viewer). This exercise
    involves a source code viewer that picks a filename from the drop box and displays
    its contents in the viewer:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00260.jpeg)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
- en: 'If you check the request in Burp Suite or any proxy, you can see that it has
    a `phpfile` parameter, which contains the name of the file to view:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00261.jpeg)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
- en: 'You can try and intercept that request to change the filename to one that is
    not in the list, but you know that it exists on the server, such as `passwords/accounts.txt` (you
    can use the internet to search for default configuration files or relevant code
    installed on web servers and certain applications):'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00262.jpeg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
- en: As the application references files directly by their names, you can change
    the parameter to make the application show a file that wasn't intended to be seen.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: Direct object references in web services
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Web services, especially REST services, often reference database elements using
    their identifiers in the URL. If these identifiers are sequential and authorization
    checks are not properly done, it may be possible to enumerate all of the elements
    just by increasing or decreasing the identifier.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, let''s say that we log in to a banking application and then call
    to the API to request our personal profile. This request looks something like
    the following:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The information is returned in JSON format, which is formatted and displayed
    on the client''s browser:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: If we increment the client ID in the request and the authorization privileges
    are not properly checked on the server, we may get the information of another
    client of the bank. This can be a major issue in an application that handles such
    sensitive data. Web services should only allow access after proper authentication
    and always perform authorization checks on the server side; otherwise, there is
    the risk of someone accessing sensitive data using a direct object reference.
    Insecure direct object references are a major cause of concern in web services,
    and they should be at the top of your to-do list when penetration testing a RESTful
    web service.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: Path traversal
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If an application uses client-given parameters to build the path to a file,
    and proper input validation and access permissions checks are done, an attacker
    can change the name of the file and/or prepend a path to the filename in order
    to retrieve a different file. This is called **path traversal** or *directory
    traversal*. Most web servers have been locked down to prevent this type of attack,
    but applications still need to validate inputs when directly referencing files.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: Users should be restricted to navigate only the web root directory and should
    not be able to access anything above the web root. A malicious user will look
    for direct links to files out of the web root—the most attractive being the operating
    system root directory.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: The basic path traversal attack uses the `../` sequence to modify the resource
    request through the URL. The `../` expression is used in operating systems to
    move up one directory. The attacker has to guess the number of directories necessary
    to move up and outside the web root, which can be done easily using trial and
    error. If the attacker wants to move up three directories, then they must use
    `../../../`.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s use DVWA to consider an example: we will use the *File Inclusion* exercise
    to demonstrate a path traversal. When the page loads, you will notice that the
    URL has a `page` parameter with the `include.php` value, which clearly looks as
    if it is loading a file by its name:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00263.jpeg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
- en: 'If you visit the URL, you can see that the page that is loading the `include.php`
    file is two levels below the application''s root directory (`/vulnerabilities/fi/`)
    and three levels below the server''s root (`dvwa/vulnerabilities/fi/`). If you
    replace the filename with `../../index.php`, you will be going up two levels and
    then showing the DVWA''s home page:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00264.jpeg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
- en: 'You can try to escape the web server root to reach files in the operating system.
    By default, Apache web server''s root on GNU/Linux is at `/var/www/html`. If you
    add three more levels to the previous input, you will be making a reference to
    the operating system''s root. By setting the `page` parameter to `../../../../../etc/passwd`,
    you will be able to read the file containing the user''s information on the underlying
    operating system:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00265.jpeg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
- en: 'The `/etc/passwd` path is a sure bet when testing for path traversal in Unix-based
    systems, as it is always there and is readable by everyone. If you are testing
    a Windows server, you may want to try the following:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: File inclusion vulnerabilities
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In a web application, the developer may include code stored on a remote server
    or code from a file stored locally on a server. Referencing files other than the
    ones in the web root is mainly used for combining common code into files that
    can be later referenced by the main application.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: An application is vulnerable to **file inclusion** when it takes input parameters
    to determine the name of the file to include; hence, a user can set the name of
    a malicious file previously uploaded to the server (Local File Inclusion) or the
    name of a file in another server (Remote File Inclusion).
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: Local File Inclusion
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In a **Local File Inclusion** (**LFI**) vulnerability, files local to the server
    are accessed by the `include` function without proper validation; that is, files
    containing server code are included in a page and their code is executed. This
    is a very practical feature for developers, as they can reuse code and optimize
    their resources. The problem arises when user-provided parameters are used to
    select the files to be included and when insufficient or no validation is made.
    Many people confuse an LFI flaw with the path traversal flaw. Although the LFI
    flaw often exhibits the same traits as the path traversal flaw, the application
    treats both the flaws differently. With the path traversal flaw, the application
    will only read and display the contents of the file. With the LFI flaw, instead
    of displaying the contents, the application will include the file as part of the
    interpreted code (the web pages making up the application) and execute it.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: In the path traversal vulnerability explained earlier, we used the *File Inclusion*
    exercise from DVWA and actually did an LFI when we used `../../index.php` as the
    parameter and the `index.php` page was interpreted as code. Nonetheless, including
    files that are already on the server and that serve a legitimate purpose for the
    application sometimes doesn't pose a security risk, unless an unprivileged user
    is able to include an administrative page. In the case where all pages on the
    server are innocuous, how can you as a penetration tester demonstrate that there
    is a security issue by allowing the inclusion of local files? You need to upload
    a malicious file and use it to exploit the LFI further.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: The malicious file that we will upload is a webshell, which is a script that
    will run on the server that will let us execute operating system commands remotely.
    Kali Linux includes a collection of webshells in the `/usr/share/webshells` directory.
    For this exercise, we will use `simple-backdoor.php` (`/usr/share/webshells/php/simple-backdoor.php`).
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to the *File Upload* exercise of DVWA, and upload the file. Note the relative
    path shown when the file is uploaded:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00266.jpeg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
- en: 'If the upload script is in `/dvwa/vulnerabilities/upload/`, relative to the
    web server root, according to the relative path shown, the file should be uploaded
    in `/dvwa/hackable/uploads/simple-backdoor.php`. Now go back to the *File Inclusion*
    exercise, and change the `page` parameter to `../../hackable/uploads/simple-backdoor.php`:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00267.jpeg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
- en: 'OK, admittedly we do not get a spectacular result. Let''s check the webshell''s
    code:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00268.jpeg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
- en: 'You need to pass a parameter to the webshell with the command that you want
    to execute, but in file inclusion, the code of the included file is integrated
    with the file including it, so you can''t just add `?cmd=command` as the usage
    instructions say. Instead, you need to add a `cmd` parameter as if you were sending
    it to the including page:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '![](img/00269.jpeg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
- en: 'You can also chain multiple commands in a single call using `;` (the semicolon) as
    a separator:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '![](img/00270.jpeg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
- en: Remote File Inclusion
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Remote File Inclusion** (**RFI**) is an attack technique that exploits the
    file inclusion mechanism when the application permits the inclusion of files from
    other servers. This can result in the application being tricked into running a
    script from a remote server under the control of the attacker.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: 'RFI works in the exact same way as LFI, with the exception that instead of
    the relative path of the file, a full URL is used as follows:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Modern web servers have the functionality to include files, especially external
    ones, disabled by default. However, sometimes the requirements of the application
    or business make developers enable this functionality. As time passes, this occurs
    less frequently, however.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: HTTP parameter pollution
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: HTTP allows multiple parameters with the same name, both in the `GET` and `POST`
    methods. The HTTP standards neither explain nor have rules set on how to interpret
    multiple input parameters with the same name—whether to accept the last occurrence
    of the variable or the first occurrence, or to use the variable as an array.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, the following `POST` request is per the standard, even when the
    `item_id` variable has `num1` and `num2` as values:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Although it is acceptable per HTTP protocol standard, the way that different
    web servers and development frameworks handle multiple parameters varies. The
    unknown process of handling multiple parameters often leads to security issues.
    This unexpected behavior is known as **HTTP parameter pollution**. The following
    table shows HTTP duplicated parameter behavior in major web servers:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: '| **Framework/Web server** | **Resulting action** | **Example** |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
- en: '| ASP.NET/IIS | All occurrences concatenated with a comma | `item_id=num1,num2`
    |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
- en: '| PHP/Apache | Last occurrence | `item_id=num2` |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
- en: '| JSP/Tomcat | First occurrence | `item_id=num1` |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
- en: '| IBM HTTP server | First occurrence | `item_id=num1` |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
- en: '| Python | All occurrences combined in a list (array) | `item_id=[''num1'',''num2'']`
    |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
- en: '| Perl /Apache | First occurrence | `item_id=num1` |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
- en: 'Imagine a scenario where a Tomcat server is behind **Web Application Firewall**
    (**WAF**) whose code is based on Apache and PHP, and an attacker sends the following
    parameter list in a request:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: WAF will take the last occurrence of the parameter and determine that it is
    a legitimate value, while the web server will take the first one, and, if the
    application is vulnerable to SQL injection, the attack will succeed, bypassing
    the protection provided by WAF.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: Information disclosure
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The purpose of using web applications is to allow users access to information
    and to perform tasks. However, not every user should be able to access all data,
    and there are pieces of information about the application, operating system, and
    users, of which an attacker can take advantage to gain knowledge and eventually
    access the authenticated functions of the application.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: In an effort to make the interaction between user and application friendlier,
    developers may sometimes release too much information. Also, in their default
    installations, web development frameworks are preconfigured to display and highlight
    their features, not to be secure. This is why many times some of these default
    configuration options are kept active right up to the framework's production release,
    exposing the information and functionality that may be a security risk.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s review some examples of information disclosure that pose a security
    risk. In the following screenshot, you can see a `phpinfo.php` page. This is sometimes
    installed by default in Apache/PHP servers, and it provides detailed information
    about the underlying operating system, the web server''s active modules and configuration,
    and much more:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00271.jpeg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
- en: 'Another thing that you''ll find is the use of descriptive comments in the client-side
    source code. The following is an extreme example. In real-world applications,
    you may be able to find details about the logic and functionality of the application that
    has merely been commented out:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00272.jpeg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
- en: 'In the next screenshot, you can see a fairly common issue in web applications.
    This issue is often underestimated by developers, security staff, and risk analysts.
    It involves an error message that is too verbose, displaying a debug trace, the
    filename and line number of the error, and more. This may be enough for an attacker
    to identify the operating system, web server version, development framework, database
    version, and file structure, and get much more information:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00273.jpeg)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
- en: 'In this last example, an authentication token is stored in the HTML5 session
    storage. Remember, this object can be accessed via JavaScript, which means that
    if an XSS vulnerability is present, an attacker will be able to hijack the user''s
    session:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00274.jpeg)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
- en: Mitigation
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will now discuss how to prevent or mitigate the vulnerabilities explained
    in the preceding sections. In short, we''ll do the following:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: Follow the principle of least privilege
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Validate all inputs
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Check/harden server configuration
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Insecure direct object references
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Always favor the use of indirect references. Use nonconsecutive numeric identifiers
    to reference a table of allowed objects instead of allowing the user to use the
    object's name directly.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: Proper input validation and sanitization of data received from the browser will
    prevent a path traversal attack. The developer of the application should be careful
    about taking user input when making filesystem calls. If possible, this should
    be avoided. A **chroot jail** involves isolating the application's root directory
    from the rest of the operating system, and it is a good mitigation technique,
    but it may be difficult to implement.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: For other types of direct object references, the principle of least privilege
    must be followed. Users should have access only to that information which is required
    for them to operate properly, and authorization must be validated for every request
    a user makes. They should receive an error message or *unauthorized* response
    when requesting any information that their profile or role is not supposed to
    see or access.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: WAFs can also stop such attacks, but they should be used along with other mitigation
    techniques.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: File inclusion attacks
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At the design level, the application should minimize the user input that would
    affect the flow of the application. If the application relies on user input for
    file inclusion, choose indirect references rather than direct ones. For example,
    the client submits an object ID that is then searched for in a server-side catalog
    that contains the list of valid files to include. Code reviews should be done
    to watch out for functions that are including files, and checks should be performed
    to analyze whether proper input validation is done to sanitize the data received
    from the user.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: HTTP parameter pollution
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With this vulnerability, the application fails to perform proper input validation,
    which makes it overwrite hardcoded values. Whitelisting expected parameters and
    their values should be included in the application logic, and the input from the
    user should be sanitized against it. WAFs that can track multiple occurrences
    of the variable and that have been tuned to understand the flaw should be used
    to handle filtering.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: Information disclosure
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Server configuration must be thoroughly reviewed before releasing it into production.
    Any extraneous file or files that are not strictly necessary for the application''s
    functionality should be removed, as well as all server response headers that may
    leak relevant information such as the following:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: '`Server`'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`X-Powered-By`'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`X-AspNet-Version`'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Version`'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we reviewed some of the vulnerabilities in web applications
    that may escape the spotlight of XSS, SQL injection, and other common flaws. As
    a penetration tester, you need to know how to identify, exploit, and mitigate
    vulnerabilities so that you can seek them out and provide proper advice to your
    clients.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: We began this chapter by covering the broad concept of insecure direct object
    references and some of its variants. Then we moved on to file inclusion vulnerabilities,
    which are a special type of insecure direct object reference, but represent a
    classification category by itself. We did an exercise on LFI and explained the
    remote version.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: After that, we reviewed how different servers process duplicated parameters
    in requests and how this can be abused by an attacker through HTTP parameter pollution.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: Next, we looked at information disclosure, and we reviewed examples presented
    to illustrate how applications can present too much information to users and how
    that information can be used by a malicious agent in order to gather information
    or to further prepare for an attack.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们研究了信息披露，并回顾了提供的示例，说明应用程序如何向用户呈现过多的信息，以及恶意代理如何利用这些信息来收集信息或进一步为攻击做准备。
- en: Finally, we looked at some mitigation recommendations for the preceding vulnerabilities.
    Most of these mitigation techniques rely on the proper configuration of the server
    and strict input validation in the application's code.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们还介绍了一些对前面漏洞的缓解建议。大部分缓解技术依赖于服务器的正确配置和应用程序代码的严格输入验证。
- en: So far we have been doing all testing and exploitation manually, which is the
    best way to do and learn security testing. However, there are situations where
    we need to cover a large scope in a short amount of time or that the client requires
    the use of some scanning tool or we simply don't want to miss any low hanging
    fruit; in the next chapter we will learn about the automated vulnerability scanners
    and fuzzers included in Kali Linux that will help us in these scenarios.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们一直在手动进行所有的测试和利用，这是进行安全测试和学习的最佳方式。然而，有些情况下我们需要在短时间内覆盖大范围，或者客户要求使用一些扫描工具，或者我们只是不想错过任何低风险的漏洞；在下一章中，我们将学习Kali
    Linux中包含的自动化漏洞扫描器和模糊测试工具，这些工具将帮助我们应对这些情况。
