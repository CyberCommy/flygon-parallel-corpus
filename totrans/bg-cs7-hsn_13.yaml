- en: Using LINQ to Summarize Tuples
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you will learn about tuples. These are basically collections
    of several values.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a show tuple summary values button to the HTML
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Bring up a project and put in a button below the line beginning with `<form
    id=....`. Replace the button text with `Show Tuple Summary Values`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, switch to the Design view and double-click on the Show Tuple Summary Values
    button. This takes us into `Default.aspx.cs`. Delete the `Page_Load` block. The
    relevant portion of the starting code for this project should look like *Figure
    13.8.1*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6581fa35-4585-454e-987f-74c68a0b8fab.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13.8.1: The starting code section for this project'
  prefs: []
  type: TYPE_NORMAL
- en: Introducing tuples
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, first we will make a function that returns tuple values. So, what is a
    tuple? Let''s define them. As I said earlier, it''s basically a collection of
    several values. Now, in C#, this means that you''ll enter the following below
    the closed curly brace under the line that begins with `public partial class...`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding line, `Tuple` is a class. Then, to define the number of values
    that the tuple stores, remember our work with vectors. We did two or three values
    to a vector. This is a similar concept. If you hover your mouse over `Tuple`,
    it says that *Tuple represents n-tuple* where *n* is eight or greater, so T1,
    T2, T3, up to TRest. Wow, so you can make eight or more tuples!
  prefs: []
  type: TYPE_NORMAL
- en: Adding namespaces
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In our case, we put `<double, double, double, double>`. So, this is a tuple
    that can hold four values. Notice that as you type, `List<double>` is not showing,
    so you need to add some namespaces. Under `using System` at the top of the file,
    enter the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Here, we use generic collections and LINQ, and now `List<double>` shows up highlighted
    as it should be and we'll call it `listDoubles`.
  prefs: []
  type: TYPE_NORMAL
- en: Making a list with a tuple
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the next stage in the process, you''ll make this list. So, enter the following
    between a set of curly braces below this line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: To form the tuple, you say `Tuple.Create(listDoubles.Sum()`. `Tuple` is the
    name of the class, and one of the members inside this class is the `Create` function,
    so select it. Now, we can create a tuple with four entries. Next, we say `listDoubles.Sum()`.
    Notice that, when you type `Sum`, it's an extension method. If you remove `Sum`,
    you'll notice that `Linq` becomes grayed out. This again confirms why `Linq` is
    needed—for the `Sum` function.
  prefs: []
  type: TYPE_NORMAL
- en: The first entry in this tuple is the Sum of the list. Remember, we're calling
    `summary`. So, it would be like a statistical summary, so to speak, of the entries
    in the list. Beyond `listDoubles.Sum()` you can, of course, also have some other
    ones. You can have an average, `listDoubles.Average()`, and you can also add `listDoubles.Max()`
    and `listDoubles.Min()`.
  prefs: []
  type: TYPE_NORMAL
- en: Returning the tuples
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'At the end, you can return the tuples. To do this, enter the following below
    this line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: In the first line you wrote earlier, remember `private` means accessible only
    there, `static` indicates that it runs on the class level, which means that you
    can call `SummarizeList` directly with a name—you don't need an object to put
    it on.
  prefs: []
  type: TYPE_NORMAL
- en: Now, in this particular case, it will return this construct, `Tuple<double,
    double, double, double>`, known as a tuple, which here is just a way of storing
    four double values. Then, to create a tuple for the first entry, you use LINQ.
    Then you use LINQ for the second entry, LINQ for the third entry, and finally,
    LINQ for the fourth entry. So, `Sum`, `Min`, `Max`, and `Average` are extension
    methods and then you `return` it.
  prefs: []
  type: TYPE_NORMAL
- en: Making a list of doubles
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, for the next stage, take a look at the Button click event. This code here
    is quite straightforward. Start by entering the following within the set of curly
    braces under the line that begins with `protected void Button1_Click...`. You
    will make a list of doubles, called `lst`, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: After the `new List of double` values, you specify the initializer between curly
    braces by throwing in some numbers—it doesn't matter what they are, right? Put
    in some negatives, some decimals, some integers, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Summarizing the list
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Next, we will call `SummarizeList`. So, enter the following below this line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: In this case, to be honest, `var` is easy, right? If you don't use that, you'll
    have to type `Tuple<double, double, double, double>`, which would be the data
    type. That's really long-winded, in other words, and it takes a lot of space.
    So, remember, `var` signifies implicit data typing but it is smart enough to know
    what the data type is.
  prefs: []
  type: TYPE_NORMAL
- en: Displaying the results
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Then once you return it, you can go to the item store there. So, you can enter
    the following next:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'In the next stage, copy this line and paste it in directly below it. Edit the
    text for the `Average` function to read as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Make sure that the way you call these lines correspond to the functions; so,
    `Sum`, `Average`, `Max`, and `Min`. Again, copy the preceding line and paste it
    directly below, so you don''t have to append. Since the next one is for `Max`,
    edit the text to read as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: This will be `Item3` and the tuple that you can extract.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, let''s do one more. So again, copy the preceding line and paste it
    directly below. Since the last one is for `Min`, edit the text to read as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: This, of course, is `Item4` and the tuple that you can extract.
  prefs: []
  type: TYPE_NORMAL
- en: Running the program
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, let''s crank it up in your browser. Click on the Show Tuple Summary Values
    button. The results are shown in *Figure 13.8.2*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f410621e-d778-4afc-8ae5-8fef0f74b4e0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13.8.2: The results of running our program for this chapter'
  prefs: []
  type: TYPE_NORMAL
- en: You see Sum, Average, Max, and Min, so it's working as expected.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, as a more realistic extension of this, imagine a list of tuples. You can
    definitely do that, so you can add something like this below the last line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'You can have a list of Tuples. Each Tuple represents, for example, information
    about a person, and then you would have a list of people. This is something for
    you to think about: how to construct it and make a project out of it for yourself.
    However, these are the fundamentals here.'
  prefs: []
  type: TYPE_NORMAL
- en: Chapter review
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For review, the complete version of the `Default.aspx.cs` for this chapter,
    including comments, is shown in the following code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned about tuples, which are basically collections of
    several values. You made a list with a tuple, returned tuples, and summarized
    a list.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will talk about using LINQ to group related results.
    Grouping is a fundamental thing that you do in databases to categorize results.
  prefs: []
  type: TYPE_NORMAL
