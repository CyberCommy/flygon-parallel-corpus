- en: Assessments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Chapter 1, Docker Overview
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Docker Store: [https://store.docker.com/](https://store.docker.com/)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`$ docker image pull nginx`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Moby Project
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Seven months
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`$ docker container help`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Chapter 2, Building Container Images
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: False; it is used to add metadata to the image
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can append `CMD` to an `ENTRYPOINT`, but not the overlay around
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'True'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Snapshotting a failing container so that you can review it away from your Docker
    host
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `EXPOSE` instruction exposes the port on the container, but does not map
    a port on the host machine
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Chapter 3, Storing and Distributing Images
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: False; there is also the Docker Store
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This allows you to automatically update your Docker images whenever the upstream
    Docker image is updated
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Yes, they are (as seen in the example in the chapter)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: True; you are logged in to Docker for Mac and Docker for Windows if you use
    the command line to log in
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You would remove them by name, rather than using the Image ID
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Port `5000`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Chapter 4, Managing Containers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`-a` or `--all`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: False; it is the other way around
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When you press *Ctrl + C* you are taken back to your Terminal; however, the
    process that is keeping the container active remains running, as we have detached
    from the process, rather than terminating it
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: False; it spawns a new process within the specified container
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You would use the `--network-alias [alias name]` flag
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Running `docker volume inspect [volume name]` would give you information on
    the volume
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Chapter 5, Docker Compose
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: YAML, or YAML Ain't Markup Language
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `restart` flag is the same as the `--restart` flag
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: False; you can use Docker Compose to build images at runtime
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: By default, Docker Compose uses the name of the folder that the Docker Compose
    file is stored in
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You use the `-d` flag to start the container's detached mode
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using the `docker-compose config` command will expose any syntax errors within
    your Docker Compose file
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Docker App bundles your Docker Compose file into a small Docker image, which
    can be shared via the Docker Hub or other registries, the Docker App command-line
    tool when can render working Docker Compose files from the data contained within
    the image
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Chapter 6, Windows Containers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can use Hyper-V isolation to run your container within a minimal hypervisor
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The command is `docker inspect -f "{{ .NetworkSettings.Networks.nat.IPAddress
    }}” [CONTAINER NAME]`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: False; there are no differences in the Docker commands that you need to run
    to manage your Windows containers
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Chapter 7, Docker Machine
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `--driver` flag is used
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: False; it will give you commands; instead, you need to run `eval $(docker-machine
    env my-host)`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Docker Machine is a command-line tool that can be used to launch Docker hosts
    on a number of platforms and technologies, in a simple and consistent way
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Chapter 8, Docker Swarm
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: False; the standalone Docker Swarm is no longer supported or considered a best
    practice
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You need the IP address of your Docker Swarm manager, and also the token that
    is used to authenticate your workers against your manager
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You would use `docker node ls`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You would add the `--pretty` flag
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You would use `docker node promote [node name]`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You would run `docker service scale cluster=[x] [service name]`, where `[x]`
    is the number of containers that you want to scale by
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Chapter 9, Docker and Kubernetes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: False; you can always see the images used by Kubernetes
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `docker` and `kube-system` namespaces
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You would use `kubectl describe --namespace [NAMESPACE] [POD NAME]`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You would run `kubectl create -f [FILENAME OR URL]`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Port `8001`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It was called Borg
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Chapter 10, Running Docker in Public Clouds
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: False; they launch Docker Swarm clusters
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When using Amazon Fargate, you do not have to launch Amazon EC2 instances to
    run your Amazon ECS cluster on
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The container options are listed under the Azure Web Application service
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using the command `kubectl create namespace sock-shop`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: By running `kubectl -n sock-shop describe services front-end-lb`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Chapter 11, Portainer - A GUI for Docker
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The path is `/var/run/docker.sock`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The port is `9000`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: False; applications have their own definitions. You can use Docker Compose when
    running Docker Swarm, and launch a stack
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: True; all of the stats are shown in real time
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Chapter 12, Docker Security
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You would add the `--read-only` flag; or, if you want to make a volume read-only,
    you would add `:ro`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In an ideal world, you would only be running a single process per container
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: By running the Docker Bench Security application
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The socket file for Docker, which can be found at `/var/run/docker.sock`; and
    also, if your host system is running Systemd, `/usr/lib/systemd`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: False; Quay scans both public and private images
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Chapter 13, Docker Workflows
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The nginx (`web`) container serves the website; the WordPress (`WordPress`)
    container runs the code that is passed to the nginx container
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `wp` container runs a single process, which exists once it runs
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`cAdvisor` keeps metrics for only five minutes'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You would use `docker-compose down --volumes --rmi all`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
