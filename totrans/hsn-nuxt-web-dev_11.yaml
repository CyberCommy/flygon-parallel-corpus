- en: Adding a Server-Side Framework
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: 添加服务器端框架
- en: In this chapter, you will learn how to configure Nuxt with a server-side framework,
    and how to use the `asyncData` method to fetch the data from the server-side framework,
    such as Koa or Express. Setting up a server-side framework with Nuxt is fairly
    easy. We only need to pick a framework as the first-class citizen and use Nuxt
    as the middleware. We can use `npx create-nuxt-app <project-name>` to set that
    up for us, but we will walk you through how to do that manually so that you have
    a better understanding of how these two apps work together. Additionally, in this
    chapter, we will use **Backpack** as the build system for our app.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习如何配置Nuxt与服务器端框架，以及如何使用`asyncData`方法从服务器端框架（如Koa或Express）获取数据。使用Nuxt设置服务器端框架相当容易。我们只需要选择一个框架作为一等公民，并将Nuxt用作中间件。我们可以使用`npx
    create-nuxt-app <project-name>`来为我们设置，但我们将手把手地教您如何手动操作，以便更好地理解这两个应用是如何协同工作的。此外，在本章中，我们将使用**Backpack**作为我们应用的构建系统。
- en: 'The topics we will cover in this chapter are as follows:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们将涵盖以下主题：
- en: Introducing Backpack
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍背包
- en: Introducing Koa
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍Koa
- en: Integrating Koa with Nuxt
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将Koa与Nuxt集成
- en: Understanding async data
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解异步数据
- en: Accessing context in asyncData
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在asyncData中访问上下文
- en: Fetching async data with Axios
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Axios获取异步数据
- en: Introducing Backpack
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍背包
- en: Backpack is a build system for building modern Node.js apps with zero or minimal
    configuration. It supports the latest JavaScript and handles the file watching,
    live reloading, transpiling, and bundling that we have been doing with webpack
    in the previous chapters. We can think of it as a **wrapper** of webpack, a simplified
    version of the webpack configuration that we have been using in this book so far.
    You can find out more info about Backpack at [https://github.com/jaredpalmer/backpack](https://github.com/jaredpalmer/backpack).
    Now, let's find out how we can use it to speed up our app development in the coming
    sections.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Backpack是一个用于构建现代Node.js应用的构建系统，零配置或最小配置。它支持最新的JavaScript，并处理文件监视、实时重新加载、转译和打包，这些都是我们在前几章中使用webpack进行的操作。我们可以将其视为webpack的**包装器**，是我们在本书中迄今为止一直在使用的webpack配置的简化版本。您可以在[https://github.com/jaredpalmer/backpack](https://github.com/jaredpalmer/backpack)找到有关Backpack的更多信息。现在，让我们看看如何在接下来的章节中使用它来加快我们的应用开发。
- en: Installing and configuring Backpack
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装和配置Backpack
- en: 'Creating a modern Node.js app with Backpack can be as easy as implementing
    the following steps:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Backpack创建现代Node.js应用可以像实现以下步骤一样简单：
- en: 'Install Backpack via npm:'
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过npm安装Backpack：
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Create a `/src/` directory and a `package.json` file in the project root with
    `backpack` in the `dev` script as follows:'
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目根目录中创建一个`/src/`目录和一个`package.json`文件，并在`dev`脚本中添加`backpack`，如下所示：
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Note that you must provide the `/src/` as the **default entry directory** of
    your app.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，您必须将`/src/`作为应用的**默认入口目录**。
- en: 'Create a Backpack config file in your project root with a function to configure
    webpack as follows:'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目根目录创建一个Backpack配置文件，并配置webpack的函数如下：
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This step is optional, but it is useful if you want to change the default entry
    directory (which is the `/src/` directory that you created in *step 2*) of your
    app to a different one, for example, a `/server/` directory, this can be done
    as follows:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这一步是可选的，但如果您想要将应用的默认入口目录（即您在*步骤2*中创建的`/src/`目录）更改为其他目录，例如`/server/`目录，可以按以下方式进行：
- en: '[PRE3]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Start your app in development mode with the following command:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令以开发模式启动您的应用：
- en: '[PRE4]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Then you can develop the source code of your app in the `/server/` directory
    and browse to the app on the browser at whatever port you have set it to. Let's
    create a simple Express app with Backpack in the next section.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: Creating a simple app using Backpack
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Creating an Express app with Backpack can be as easy as implementing the following
    steps:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: 'Install Express via npm:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Add `build` and `start` scripts after the `dev` script in the `package.json`
    file:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Create the Backpack config file and use `/server/` as the entry folder of your
    app, just as we have walked you through in the previous section:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Create a simple route with a `''Hello World''` message:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Run your app in development mode:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: You can now browse to your app on a browser at `127.0.0.1:3000`. You should
    see Hello World on the screen. You can find this example in `/chapter-8/backpack/`
    in our GitHub repository. Next, let's use Koa as the server-side framework that
    allows us to write ES2015 code and async functions in fewer lines than Express
    in the next section.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: Introducing Koa
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Koa is a Node.js web framework designed by the same team that brought you Express.
    The main goal of this framework is to be a smaller and more expressive foundation
    for web apps and APIs. If you have ever worked on Express and have gotten tired
    of callback hell when the app gets larger, Koa allows you to ditch the callbacks
    and greatly increase error handling by leveraging async functions. Another cool
    thing in Koa is **cascading** – the middleware you add will be running "downstream,"
    and then flowing back "upstream," which gives you more predictable controls. We
    will demonstrate this later in this chapter.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: If you want to find out more info about Koa, please visit [https://koajs.com/](https://koajs.com/).
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: Installing and configuring Koa
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now, let''s create a Koa app with the Backpack default configuration (without
    creating the Backpack config file) as follows:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: 'Install Koa via npm:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Use `/src/` as the Backpack default entry directory and create an entry file
    in this directory with minimal code in Koa style as follows:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Run the Koa app in development mode:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: You should see Hello World on the screen when browsing the app on a browser
    at `127.0.0.1:3000`. If you have been using Express to create your Node.js apps,
    you can see that Koa is an alternative that can be used to do the same thing with
    neater code. Next, let's learn what a Koa context is and how cascading works in
    Koa in the following sections.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: What is ctx?
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You may have wondered what that `ctx` is in the minimal code we created in
    the previous section and where the `req` and `res` objects are, because they are
    there in the Express app. They are not gone in Koa. They are just encapsulated
    in a single object in Koa, which is the Koa context, referred to as `ctx`. We
    can access the `request` and `response` objects as follows:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: So, you can see that we can easily use `ctx.request` to access the Node.js `request`
    object and `ctx.response` for the Node.js `response` object. These two important
    HTTP objects are not gone in Koa! They are just tucked away in the Koa context
    – `ctx`. Next, let's find out how cascading works in Koa in the next section.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: Understanding how Koa cascading works
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In a nutshell, the cascading in Koa works by invoking middleware downstream sequentially and
    then controlling them to flow back upstream sequentially. It is best to create
    a simple Koa app to demonstrate this great feature in Koa:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: 'Create an `index.js` file in the `/src/` directory, just like we did in the
    previous section:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Create three pieces of middleware just before the `Hello World` middleware
    as follows, so that we can run them first:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Run the app in development mode and you should get the following output on
    the terminal:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'In this demonstration, the request flows through `Time started at:` to `I am
    the first`, `I am the second`, and reaching `Hello World`. When there is no more
    middleware to be executed downward (downstream), each middleware will be unwound
    and resumed upward (upstream) in the following sequence: `I am the third`, `I
    am the last`.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: You can find this example in `/chapter-8/koa/cascading/` in our GitHub repository.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will walk you through some dependencies that you should install for
    developing a full stack Koa app so that it works just like Express apps.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: Installing dependencies for Koa apps
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Koa is minimalistic. It is barebones by nature. Hence, it does not have any
    middleware within its core. Express comes with a router, which, by default, Koa does
    not have. This can be a challenge when writing an app in Koa as you need to choose
    a third-party package or pick one of the packages listed on their GitHub main
    page at [https://github.com/koajs](https://github.com/koajs). You may test out
    a few and find out they don''t work as you want. There are a few Koa packages
    that can be used for routing; `koa-router` is mostly used in this book, alongside
    other essential dependencies for developing our API with Koa. Let''s discover
    what they are and what they do by installing them and creating a skeleton app, as
    follows:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: 'Install the `koa-router` module and use it as follows:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Import `koa-router` in the entry file with a home route, `/`, as follows:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: You can find more information about this middleware at [https://github.com/koajs/koa-router](https://github.com/koajs/koa-router)
    from Koa's GitHub repository. This module is forked from `ZijianHe/koa-router`
    ([https://github.com/ZijianHe/koa-router](https://github.com/ZijianHe/koa-router)).
    It is the most widely used router module in the Koa community. It provides Express-style
    routing using `app.get`, `app.put`, `app.post`, and so on. It also supports other
    important features, such as multiple route middleware and multiple and nestable
    routers.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: 'Install the `koa-bodyparser` module and use it as follows:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Import `koa-bodyparser` in the entry file, register it, and create a home route, `/post`,
    as follows:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'You can find more information about this middleware at [https://github.com/koajs/bodyparser](https://github.com/koajs/bodyparser)
    from Koa''s GitHub repository. You may wonder: what is a body parse anyway? When
    we are dealing with HTML forms, we use `application/x-www-form-urlencoding` or
    `multipart/form-data` to transact data between the client and server sides, for
    example:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The default type for HTML forms is `application/x-www-urlencoded`, and if we
    want to read the data of HTTP `POST`, `PATCH`, and `PUT`, we use a body parser,
    which is a middleware that parses the incoming request, assembles the **chunks**
    containing the form data, and then creates a body object filled with the form
    data so that we can access them from the request object in the `ctx` object as
    follows:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Install the `koa-favicon` module and use it as follows:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Import `koa-favicon` in the entry file and register it with a path to `favicon`
    as follows:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: You can find more information about this middleware at [https://github.com/koajs/favicon](https://github.com/koajs/favicon)
    from Koa's GitHub repository. It is a middleware that serves a `favicon`, so let's
    create a `favicon.ico` file and keep it in the `/public` folder in the project
    root. You should see the `favicon` on your browser tab when you refresh the home
    page.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: 'Install the `koa-static` module and use it as follows:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Import `koa-static` in the entry file and register it with the following paths
    as follows:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'You can find more information about this middleware at [https://github.com/koajs/static](https://github.com/koajs/static)
    from Koa''s GitHub repository. Koa, by default, doesn''t allow you to serve static
    files. So this middleware will allow you to serve static files from your API.
    For example, the paths we just set will let us access the following files from
    the `/static` folder in the project root:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: GET `/package.json` at `127.0.0.1:3000/package.json`.
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: GET `/hello.txt` at `127.0.0.1:3000/hello.txt`.
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will use this skeleton in future chapters when creating APIs with Koa. Now,
    let's discover how we can integrate Koa with Nuxt in the next section.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: You can find this skeleton app at `/chapter-8/koa/skeleton/` in our GitHub repository.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: Integrating Koa with Nuxt
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Integrating Koa and Nuxt can be done on a single port for single-domain apps,
    or on separate ports for cross-domain apps. In this chapter, we will do the single-domain
    integration and then we will guide you through the cross-domain integration in
    [Chapter 12](8e574c51-68dc-45e2-8a1d-4c04d9c38df5.xhtml), *Creating User Logins
    and API Authentication*. We will use the Koa skeleton that we have developed in
    the previous section for these two types of integration. The single-domain integration
    requires some configurations in the following steps. Let''s get started:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a `/server/` directory in the Nuxt project''s root and structure the
    server-side directory as follows after creating the project with the `create-nuxt-app` scaffolding
    tool:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Modify the default scripts to use Backpack in the default `package.json` file
    that comes with the scaffolding tool as follows:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Create a Backpack config file in the root directory (where we have the Nuxt
    config file) for changing the Backpack default entry directory to the `/server/`
    directory we just created:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Create an `index.js` file in the `/server/` directory to import Koa (make sure
    you have Koa installed already) as the main app and Nuxt as middleware in Koa
    as follows:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Notice that we create an async function to use Nuxt as middleware so that we
    can use the `await` statement in the next step for running the Nuxt build process.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: Note that Consola is a console logger and you must install it via npm before
    using it. For more information about this package, please visit [https://github.com/nuxt-contrib/consola](https://github.com/nuxt-contrib/consola).
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: 'Before registering Nuxt as the middleware, import the Nuxt configuration for
    the build process in development mode:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Run the app by listening to its port and host and log the server status with
    Consola as follows:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Launch the app in development mode:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Our Nuxt and Koa apps are now running as a single app. You probably have realized
    that Nuxt is now running under Koa as a middleware. All our Nuxt pages are still
    running the same as before at `localhost:3000`, but we will configure `localhost:3000/api`
    as the API main endpoint in the coming section.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: Adding routes and other essential middleware
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We established the integration and structured the server-side directory in
    the previous section. Now let''s refine some API routes and other middleware on
    our API in the following steps:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: 'Install the Koa Router and Koa Static packages via npm:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Create a server-side config file:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Create a `routes.js` file in the `/server/` directory for defining routes that
    we will expose to the public with some dummy user data:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Import other middleware in a separate `middlewares.js` file and import the
    routes and config files from *steps 1* and *2*:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: We will not use `koa-favicon` in the API because we are exporting our data in
    JSON format and the image of `favicon.ico` will not be shown on the browser tab.
    Besides, Nuxt has already handled `favicon.ico` for us in the Nuxt config file,
    so we can remove the `koa-favicon` middleware from our skeleton. Instead, we will
    create a middleware to decorate our JSON data into these two final JSON outputs
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: 'The format for 200 output:'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE38]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'The format for all error outputs (for example, 400, 500):'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE39]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Add the following code just before the `app.use(serve(config.static_dir.root))`
    line to create the preceding formats:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'So now, with this middleware, instead of getting an output such as `{"message":"Hello
    World!"}`, we will get the decorated output as follows:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Import this `middlewares.js` file in the main `index.js` file before registering
    Nuxt:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Rerun the app in development mode:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Then, if you visit the app at `localhost:3000/api`, you will get the following
    output on the screen:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'If you visit the user index page at `localhost:3000/api/users`, you will get
    the following output on the screen:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'You also can use `localhost:3000/api/users/<id>` to get a specific user. For
    example, if you use `/api/users/1`, you will get the following output on the screen:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: You can find this integrated example app in `/chapter-8/nuxt-universal/skeletons/koa/`
    in our GitHub repository.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will look at how we can request the preceding API data with the `asyncData`
    method on the client side from the Nuxt pages in the coming section.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
- en: Understanding async data
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `asyncData` method allows us to fetch data asynchronously and render it
    on the server side before the component is initiated. It is an additional method
    that''s only available in Nuxt. That means you can''t use it in Vue because Vue
    does not have this default method. Nuxt always executes this method before rendering
    the page component. It is executed once on the server side on the page that uses
    this method and then will be executed on the client side when revisiting that
    page through the routes generated with the `<nuxt-link>` component. Nuxt will
    merge the returned data from the `asyncData` method with the component data from
    the `data` method or the `data` property. This method receives the `context` object
    as the first argument, as follows:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Bear in mind that this method is always executed before the page component is
    initiated, so we have no access to the component instance through the `this` keyword
    inside this method. There are two different ways of using it; let's explore them
    in the upcoming sections.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
- en: Returning a promise
  id: totrans-148
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can use the `Promise` object in the `asyncData` method by returning `Promise`,
    for example:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: In the preceding code, Nuxt will wait for 1 second for the promise to be resolved
    before rendering the page component with `'Hello World by returning a Promise'`.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
- en: Using async/await
  id: totrans-152
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We also can use an `async`/`await` statement with the `asyncData` method, for
    example:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: In the preceding code, Nuxt will wait for 2 seconds for the promise to be resolved
    before rendering the page component with the `'Hello World by using async/await'` message.
    Using the `async`/`await` statement is a new way of writing asynchronous JavaScript code.
    It is built on top of the `Promise` object and makes our asynchronous code more
    readable. We will use this statement often throughout the book.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
- en: Merging the data
  id: totrans-156
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As we mentioned before, the asynchronous data from the `asyncData` method will
    be merged with the component data from the `data` method or the `data` property.
    That means that if you have set some default data in your component data with
    the same object keys in the `asyncData` method, they will be overwritten by the
    `asyncData` method as a result. Here''s an example:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'In the preceding code, Nuxt will merge the two sets of data and you will get
    the following result on your screen:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: You can find the examples in `/chapter-8/nuxt-universal/koa-nuxt/understanding-asyncdata/`
    in our GitHub repository.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will look at how we can make use of the `context` object that we can
    access from the `asyncData` method in the coming section.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: Accessing context in asyncData
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can access a bunch of useful stuff from the Nuxt context for fetching data.
    They stored inside the context object as the following keys:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
- en: app
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: route
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: store
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: params
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: query
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
- en: req
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: res
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: redirect
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: error
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: env
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
- en: isDev
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: isHMR
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: beforeNuxtRender(fn)
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: from
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: nuxtState
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
- en: They are provided additionally and especially in Nuxt only, so we won't find
    them in Vue. We can access them either with `context.<key>` or `{ <key> }`. So
    let's explore some of these keys and see how we can leverage them in the following
    sections.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
- en: For more information about the Nuxt context, please visit [https://nuxtjs.org/api/context](https://nuxtjs.org/api/context).
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
- en: Accessing the req/res objects
  id: totrans-186
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can access the `req` and `res` objects when the `asyncData` method is executed
    on the server side. They contain useful information of the HTTP request sent from
    the user. But we should always check with an `if` condition before accessing them:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: In the preceding code, we use the `if` condition to make sure that the `asyncData`
    method is called on the server side before obtaining the information of the request
    headers. These two objects are unavailable on the client side, so you will get
    `undefined` when accessing them on the client side. So the result we will get
    from the preceding code is `localhost:3000` when the page is loaded on the browser
    for the first time, but you will not see that piece of information again when
    revisiting this page by the route generated from the `<nuxt-link>` component unless
    you refresh that page.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
- en: Accessing the dynamic route data
  id: totrans-190
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can access the dynamic route data through the `params` key when we have
    dynamic routes in our app. For example, if we have an `_id.vue` file in the `/pages/`
    directory, then we can access the value of the route parameter via `context.params.id`
    as follows:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: In the preceding code, you will get `1` for the `id` when calling `users/1`
    on the browser.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
- en: Listening to the query changes
  id: totrans-194
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'By default, the `asyncData` method is not executed over changes on the query
    string. For example, if you are using queries such as `/users?id=<id>` on your
    route with the `<nuxt-link>` component, `asyncData` will not be called when changing
    from one query to another through the `<nuxt-link>` component routes. This is
    because watching the query changes is disabled by default in Nuxt to improve performance.
    If you want to override this default behavior, you can use the `watchQuery` property
    to listen to the specific parameters:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: In the preceding code, we are listening to the `id` parameter, so you will get
    `1` for navigating to `/users?id=1` and `2` for `/users?id=2`. If you want to
    set up a watcher for all query strings, just simply set `watchQuery` to `true`.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
- en: Handling errors
  id: totrans-198
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can use the `error` method from the `context` object to call the Nuxt default
    error page and display the error. You can pass the error code and message through
    the default `params.statusCode` and `params.message` properties:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'If you want to change the default properties that you pass to the `error` method,
    you can create a custom error page, which you learned about in [Chapter 4](aa55a711-4ba3-45e1-bad6-96067701bba7.xhtml),
    *Adding Views, Routes, and Transitions*. Let''s create these custom error properties
    and layout in the following steps:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a page that you want to throw the custom properties to:'
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'Create a custom error page in the `/layouts/` directory:'
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'Create a custom layout page for this error page:'
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: You should see the custom properties and layout when visiting `/users/error-custom`.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
- en: You can see all the examples in `/chapter-8/nuxt-universal/koa-nuxt/accessing-context/`
    in our GitHub repository.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will look at how we can use Axios, an HTTP client, with the `asyncData`
    method for requesting API data in the coming section.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
- en: Fetching async data with Axios
  id: totrans-211
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have created a simple API with Koa and exposed some public routes for its
    data being accessed, such as `/api/users` and `/api/users/1`. We also have integrated
    this API with Nuxt into a single app in which Nuxt performs as middleware. You
    have also learned how the `asyncData` method works and how we can make use of the
    Nuxt context. Now, let's bring all these three parts together in the final step
    by using Axios with the `asyncData` method for requesting the API data.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
- en: Installing and configuring Axios
  id: totrans-213
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Axios is a promised-based HTTP client for Node.js apps. We worked with vanilla
    promises with the `asyncData` method in the previous section. We can simplify
    our code further and save some lines with Axios, which is powered by asynchronous
    JavaScript and XML (AJAX) to make asynchronous HTTP requests. Let''s get it started
    in the following steps:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
- en: 'Install Axios via npm:'
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'We should always use a full path when making HTTP requests with Axios:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'But it can be repetitive to include `https://jsonplaceholder.typicode.com/`
    in the path for every request. Besides, this base URL can change over time. So
    we should abstract it and simplify the request:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'Create an Axios instance in the `/plugins/` directory:'
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'Import this plugin whenever we need it on the component:'
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: After this installation and configuration, we are ready to fetch the async data
    in the next section.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
- en: Fetching data with Axios and asyncData
  id: totrans-226
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s create the pages that need to have the data rendered in the following
    steps:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
- en: 'Create an index user page to list all users:'
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'On this page, we use the `get` method from Axios to call the API endpoint of
    `/api/users`, which will be transformed to `localhost:3000/api/users`, where the
    list of users can be output as follows:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: We then unpack the `data` key in the output by using JavaScript's destructuring
    assignment with `{ data }`. It is a good practice to wrap your code in `try`/`catch` blocks
    when using the `async`/`await` statements. Next, we will need to request a single
    user's data.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a single user page for rendering individual user data:'
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'On this page, again, we use the `get` method from Axios to call the API endpoint
    of `/api/users/<id>`, which will be transformed to `localhost:3000/api/users/<id>`,
    to fetch the data of a single user:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: And again, we unpack the `data` key in the output by using JavaScript's destructuring
    assignment with `{ data }` and wrap the `async`/`await` code in `try`/`catch` blocks.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we want to achieve the same result as in this section,
    that is, to fetch a list of users and the data of a specific user. But we will
    do it on a single page with the `watchQuery` property, which you learned about
    in the previous section.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
- en: Listening on the query change
  id: totrans-239
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this section, we will create a page for listening to the change in the query
    string and fetching the single-user data. To do this, we only require a `.vue`
    page to list all users and watch the query, and if there is any change in the
    query, we will get the `id` from the query and fetch the user with that `id` using
    Axios in the `asyncData` method. Let''s get started:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a `users-query.vue` page in the `/pages/` directory and add the following
    template to the `<template>` block:'
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: In this template, we use the `v-for` directive to loop through each `user in
    users` and add the query of each user to the `<nuxt-link>` component. The data
    of an individual user will be rendered inside the `<p>` tag after the `<ul>` tag.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following code to the `<script>` block:'
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE69]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'This piece of code is the same as `/pages/users/index.vue`; we only add a `query` object
    to `asyncData` and fetch the user data based on the information in the query.
    And, of course, we add `watchQuery: true` or `watchQuery: [''id'']` to watch the
    change in the query. So, in the browser, when you click a user from the list,
    such as `users-query?id=1`, the data of that user will be rendered inside the
    `<p>` tag as follows:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'Well done! You have reached the end of this chapter. We hope that it was a
    simple and easy chapter for you to follow. Besides using Axios to make HTTP requests
    to the API backend, we can use one of these Nuxt modules: Axios and HTTP. We focus
    on vanilla Axios and the Axios module in this book. Do you remember that we covered
    the Axios module in [Chapter 6](2102475f-1a6b-42c0-abaa-ec018f8fa25a.xhtml), *Writing
    Plugins and Modules*? We will use this module often in the coming chapters. Now,
    let''s summarize what you have learned in this chapter.'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
- en: You can find the preceding code in `/chapter-8/nuxt-universal/koa-nuxt/using-axios/axios-vanilla/`
    in our GitHub repository. If you want to find out more about the Nuxt HTTP module,
    please visit [https://http.nuxtjs.org/](https://http.nuxtjs.org/).
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-250
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you have learned how to configure Nuxt with a server-side framework,
    which is Koa in this book. You have installed Koa with the dependencies that we
    need to create an API. And then you used `asyncData` and Axios to query and fetch
    the data from the API. Also, you learned about the properties in the Nuxt context
    that you can destructure and access from the `asyncData` method, such as `params`,
    `query`, `req`, `res`, and `error`. Last but not least, you started using Backpack
    as a minimalist build tool in your apps.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will learn how to set up MongoDB and write some basic
    MongoDB queries, how to add data to a MongoDB database, how to integrate it with
    the server-side framework, Koa, which you have just learned about in this chapter,
    and then, finally, how to integrate it with Nuxt pages. We will guide you through
    everything that you will have to learn in order to make a more complete API. So,
    stayed tuned.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
