- en: Chapter 5. WebSockets for Mobile and Tablet
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: WebSockets work great on the Web and have a good performance. We have seen how
    easy and powerful WebSockets are to implement on the web. With the growth of mobile
    phones, the need for applications to shift from desktop to mobile has become very
    important. In this chapter, we will focus on how WebSocket behaves and its implementation
    on mobile and tablets.
  prefs: []
  type: TYPE_NORMAL
- en: Mobile devices and the WebSocket
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The whole world is moving to mobile devices; then why shouldn''t we? Mobiles
    have become very powerful and they can do what a computer can do. Similarly, browsers
    have become very powerful and they have also started adopting HTML5\. Not only
    browsers, even application support has increased. Lots of applications are available
    with lots of features. And here, WebSockets plays an important role: whenever
    there is a need for real-time data transfer, WebSockets are there to help us out.
    Let''s see a few instances where WebSockets can be helpful:'
  prefs: []
  type: TYPE_NORMAL
- en: Chatting applications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Video conferencing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Gaming
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dashboard with real-time data update
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Stock application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sports score applications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Real-time data updates
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now all these applications can be made on the Web and the same is compatible
    with browsers, thanks to modern browsers that support HTML5.
  prefs: []
  type: TYPE_NORMAL
- en: 'To implement WebSockets on mobile, there are some libraries available that
    can be used. The need is to provide a consistent way of implementing WebSockets
    in different backend technologies. There are some libraries which provide these:'
  prefs: []
  type: TYPE_NORMAL
- en: Pusher
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Socket.IO
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pusher
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Pusher is a famous library which helps you to make real-time applications. You
    can find it at [http://www.pusher.com](http://www.pusher.com). It is a set of
    libraries built to be integrated with different applications which are built on
    different servers, such as Ruby on Rails, Python, PHP, and Node. Not only on the
    server side, they also provide support for JavaScript-based applications along
    with iOS and Android devices as well.
  prefs: []
  type: TYPE_NORMAL
- en: Pusher is an event-based API and implements a publisher/subscriber mechanism.
    Here, subscriber is the server and publisher is the client. Subscriber subscribes
    to the events and publisher triggers those events which the subscriber listens
    to. To achieve this functionality, publisher and subscriber implement WebSockets
    internally, which basically provides a real-time experience.
  prefs: []
  type: TYPE_NORMAL
- en: Another big advantage of the Pusher API is that it has a fallback mechanism
    where when WebSockets is not available, for instance, in some older browser versions,
    then it uses other technologies such as Flash internally to send the data across.
    This gives an upper hand to this library so that we don't need to have a different
    implementation for different browsers and devices.
  prefs: []
  type: TYPE_NORMAL
- en: Socket.IO
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Socket.IO is another library completely based on JavaScript. Not only the client
    side, it completely supports the Node.js server as well. This library provides
    high performance real-time data transfer and it uses WebSockets under the hood.
    You can make all kinds of real-time collaborative applications using this API.
  prefs: []
  type: TYPE_NORMAL
- en: Running server on mobile
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Till now we were working on a local server and application, but to run the
    application on a mobile, we need to shift our client application code to a server
    in such a way that it will cater to the application from a server URL. For this
    we will take a simple example: basically, we are going to change an application
    we have already created. In [Chapter 2](ch02.html "Chapter 2. Getting Started
    with WebSockets"), *Getting Started with WebSockets*, we developed an application
    for Echo test, which basically returns whatever we send to the server. Now let''s
    see how it will work on a mobile phone.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Firstly, we will change the server code so that it caters to the client code.
    Here are the changes we will make on the server side:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Here we have not done anything specific to the mobile; we have just created
    another server which provides us with the main client files. We have used an `Express.js`
    server here, which is helpful in delivering the content through the server. You
    can read more about an Express.js server and how it works on the Internet. Here,
    our main focus is just to create a server that will listen on a particular port.
    So when anyone hits that particular URL, we will get the client application running
    on the browser.
  prefs: []
  type: TYPE_NORMAL
- en: 'To install Express.js server, we just need to run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This package needs to be installed in the same directory as of the our `server.js`
    file. This is important because our server will run and use this package and if
    not found then server may not work the way we want and throw an error.
  prefs: []
  type: TYPE_NORMAL
- en: Here, we are listening on the `3000` port, so whenever we open `http://localhost:3000`,
    it will open the specified file. We have defined the file under the `public` folder,
    `index.html`. So, the first file that will be opened for us is the `index.html`
    file and we will see its contents. Just like we have done in the earlier chapters,
    we are doing the same coding for the client side code as well and there is literally
    no change in it. Only the location of the file has changed and nothing else.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Make sure that the all the client code and its related libraries will go in
    the `public` folder because we are picking it from public folder, if not properly
    placed error may occur.
  prefs: []
  type: TYPE_NORMAL
- en: Once the changes are made you can start the server and check it in the browser
    to see whether it is working or not. As you listen on the `3000` port, just run
    `http://localhost:3000` in your browser and make sure the application is running
    fine.
  prefs: []
  type: TYPE_NORMAL
- en: Local server on mobile
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once the changes are done, we need to run the local server on our mobile phone.
    This seems difficult but actually it is not. Google Chrome provides us with a
    great feature through which we can use our local server on mobile browsers as
    well. Here are the steps we need to implement to run a local server on mobile:'
  prefs: []
  type: TYPE_NORMAL
- en: Start USB debugging in your mobile/tablet device.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect your device using USB to your computer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the Chrome browser and go to `chrome://inspect`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This will inspect the connected devices.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now the main setting we need to consider is **Port forwarding**. We are using
    two different ports: `3000` for the client and `9001` for the WebSocket server.
    Just make sure you add both of them in the **Port forwarding settings**.![Local
    server on mobile](img/B03854_05_01.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you are still facing problems in setting up your mobile device, then visit
    [https://developer.chrome.com/devtools/docs/remote-debugging](https://developer.chrome.com/devtools/docs/remote-debugging).
    You will get all the details on how to set up your mobile device.
  prefs: []
  type: TYPE_NORMAL
- en: Once these settings are done, you are good to go. Just open the Chrome browser
    in your mobile device and open the server URL `http://localhost:3000` and see
    the magic. You will see the same output as we seen on the desktop.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We are able to achieve this output behavior in a very simple fashion just because
    of HTML5, as HTML5 shows consistent behavior in almost all browsers and it is
    being adopted by most browsers. This gives us the benefit of making our application
    using HTML5 WebSockets and having it run almost everywhere. The one thing we need
    to make sure while building an application is that it has responsive design, as
    mobile devices have different resolutions and different screen sizes. This is
    a major problem that needs to be taken care of while creating an application.
    But thanks to HTML5, we have media queries which give us a feature to handle such
    scenarios easily.
  prefs: []
  type: TYPE_NORMAL
- en: Mobile output
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As you can see, there is no change in the output of the application. It is exactly
    the same as we have seen on desktop.
  prefs: []
  type: TYPE_NORMAL
- en: '![Mobile output](img/B03854_05_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Browser support
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: HTML5 is being adopted by almost all browsers even in mobile and tablet devices.
    This gives us an upper hand while using a WebSocket application in almost all
    modern browsers. To check which mobile browsers are supported, visit [http://caniuse.com/#feat=websockets](http://caniuse.com/#feat=websockets),
    which gives us a list of all the browsers that support WebSockets.
  prefs: []
  type: TYPE_NORMAL
- en: Do it yourself
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'It''s time to do it yourself: creating an application for a mobile device is
    as easy as it is for the desktop. Now let''s transform some of our applications
    for mobile.'
  prefs: []
  type: TYPE_NORMAL
- en: Scenario 1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As we have developed a presentation sharing and drawing application, we will
    now make them available for mobile as well.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This is a very easy task: as we know, we just have to change the server so
    that it provides the client application and we are good. The reason that we don''t
    have to change anything else is that the libraries we have used for the application
    are so well-written that they can adapt to the mobile view as well. Just try it
    out.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is how it will look when you open the presentation sharing application
    on mobile:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Scenario 1](img/B03854_05_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Scenario 2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The server is going to be the same, but you can play around with the client
    application interface to make it responsive as per the device screen size, which
    can be achieved using **Bootstrap**-like libraries. And for real-time data transfer,
    you can use the Socket.IO API which is really easy to use and implement.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Create a chat application for desktop and mobile**'
  prefs: []
  type: TYPE_NORMAL
- en: For this, you need to create a server which just takes a message and broadcasts
    it to all. And the client will be simple so that it just sends a message to the
    server. It is pretty simple and straightforward, but the catch is that you need
    to make it for desktop as well as mobile.
  prefs: []
  type: TYPE_NORMAL
- en: 'Please see the following image for reference:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Scenario 2](img/B03854_05_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Scenario 3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Make a question game in which you can ask a question, just by entering the question
    and its options using a user interface. The other person will get the question
    and answer it. As soon as it is answered, you will receive it right away.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Just like a chat application, you can use the same Socket.IO API to send the
    data. The rest is all easy—as soon as user answers the question, you can send
    it using the API.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have seen in this chapter how easy it is to code in HTML5 utilizing its features
    to provide a device-independent application. WebSockets support is available in
    almost all modern browsers, and this has made our life easy in terms of developing
    consistent applications—we don't have to write different code for different devices.
    We have also seen how Node.js provides flexibility and great support for different
    devices. In this chapter, we have explored different mobile applications and some
    APIs which help us in implementing WebSockets, along with how to set up a local
    server to run applications.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will see how to enhance the HTML5 web application development
    using modern tools.
  prefs: []
  type: TYPE_NORMAL
