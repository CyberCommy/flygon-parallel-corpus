- en: Chapter 7. Spring Security with Wicket
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Spring Security with Wicket – basic database authentication
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring Security with Wicket – Spring form-based database authentication
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring Security with Wicket – customized JSP form-based database authentication
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring authentication with Wicket authorization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Multitenancy using Wicket and Spring Security
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before starting up Wicket, we were checking the available versions. The latest
    one is 6.9\. It is clearly mentioned in the Apache Wicket site that the latest
    projects should use Version 6.9 as the base. We have NetBeans 7.1 after downloading
    the Wicket plugin for net beans. We found that the net beans Wicket plugin supports
    Version 1.5 of Wicket.
  prefs: []
  type: TYPE_NORMAL
- en: We prefer using the latest stable version; it will have many bug fixes and upgrades
    and will make it easier to develop.
  prefs: []
  type: TYPE_NORMAL
- en: Wicket also uses the *Wicket filter* to dispatch requests and responses. Just
    as with GWT and Vaadin applications, which had servlet, which expected some parameters
    such as UI class to get initialized, we need to provide a class name of the class
    that extends the `Web Application` class as a parameter to the filter. Then there
    are classes, which extend the `WebPage` class. It's a good convention and practice
    to create an HTML page with the same name as the class that extends the `WebPage`
    class.
  prefs: []
  type: TYPE_NORMAL
- en: Wicket uses the multilevel inheritance approach. We have to extend the `Wicket`
    class to achieve various scenarios. It also has a built-in authentication and
    authorization API.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a database
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following code will set up a database:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Setting up the Wicket application
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following statement is the Maven command that needs to be executed. You
    should have Maven installed on your machine and should have a local repository.
    By default, it is in `.m2\repository`. After running the command, you should get
    build success that gives us a green signal to start with Wicket implementation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The following output is visible on the command prompt:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The following commands will finish the complete set up of Wicket. They will
    also download the Wicket framework source files into the repository.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Access the following URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '`http://localhost:8080/spring-security-wicket/`'
  prefs: []
  type: TYPE_NORMAL
- en: The URL will display the welcome page of the Wicket application. Wicket application
    setup is ready.
  prefs: []
  type: TYPE_NORMAL
- en: Wicket also comes with its own authentication and authorization API. Let's see
    how we can use it.
  prefs: []
  type: TYPE_NORMAL
- en: Spring Security with Wicket – basic database authentication
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Our aim is to do a simple basic authentication on the Wicket application. I
    want a login dialog to pop-up when we access the URL of the Wicket application.
    On success it should get redirected to the home page. We need to add Spring Security
    dependencies to the `pom.xml` file and rebuild the Wicket application. The next
    step will be configuring the spring listener in the `web.xml` file. We also need
    to add the `applicationContext.xml` file.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Update the `pom.xml` file with Spring dependency.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create an `applicationContext.xml` file. It's mandatory to name it as `applicationContext`
    or else we will get error messages in the console.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Edit the `web.xml` with Spring listeners.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a `database-details.xml` file and add the database details.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add the `db-details.xml` file as `context-param` to the spring listener.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following are the steps for implementing Spring Security with Wicket to
    demonstrate basic authentication where credentials are stored in the database:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add dependency to the `POM.xml` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Update the `Web.xml` file with Spring listener and the Spring filter with Wicket
    filter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Edit the `applicationContext.xml` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: This is a simple configuration for basic authentication. With this configuration
    we expect a login dialog box before showing the Wicket application. I have created
    a new role, seller.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now access the following URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '`http://localhost:8080/spring-security-wicket/`'
  prefs: []
  type: TYPE_NORMAL
- en: This is the initial setup example of integrating Spring Security with Wicket.
    We have demonstrated the basic authentication mechanism. Access to the Wicket
    application is interrupted with Spring Security by the Login form. On successful
    authentication, the user gains access to the wicket application.
  prefs: []
  type: TYPE_NORMAL
- en: 'The page displayed is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/7525OS_07_01.jpg)![How it works...](img/7525OS_07_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Spring Security with Wicket – spring form-based authentication* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Spring Security with Wicket – customized JSP form-based authentication*
    recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Spring authentication with Wicket authorization* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Multitenancy using Wicket and Spring Security* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring Security with Wicket – Spring form-based database authentication
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In our previous recipe we found the Wicket 6.9 is very much compatible with
    Spring Security and it was very easy to integrate. All we did was to add spring
    dependency and we configured the `applicationContext.xml` file.
  prefs: []
  type: TYPE_NORMAL
- en: In this section we shall use the Spring form to do authentication. We expect
    the Spring form to show up in place of the dialog box and do the authentication
    for us.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create a Maven Wicket project: `spring-security-wicket_springform`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Update the `pom.xml` file with Spring dependency.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create an `applicationContext.xml` file. It's mandatory to name it as `applicationContext`
    or else we will get error messages in the console.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Edit the `web.xml` with Spring listeners.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a database `details.xml` file and add the database details.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add the file as a context parameter to the Spring listener.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Edit the `applicationContext.xml` file using the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: This is a simple configuration for form authentication. With this configuration
    we expect a **Login Page** before showing the Wicket application. The only change
    is that we have removed the `<http-basic>` tag for the previous application. Also
    observe the URL, which will have a session ID.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now access the following URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '`http://localhost:8080/spring-security-wicket_springform/`'
  prefs: []
  type: TYPE_NORMAL
- en: In this example we are showing how to invoke Spring's internal login form in
    a Wicket application. When we access the Wicket application, we will be redirected
    to Spring's own login page. The user enters their username and password which
    will be authenticated and authorized by the Spring's authentication provider.
    On success, the user gains access to the Wicket application.
  prefs: []
  type: TYPE_NORMAL
- en: 'You should see the following screen when you access the above URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/7525OS_07_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Spring Security with Wicket – customized JSP form-based authentication*
    recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Spring authentication with Wicket authorization* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Multitenancy using Wicket and Spring Security* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring Security with Wicket – customized JSP form-based database authentication
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The previous two recipes were to test the compatibility of Wicket with Spring
    Security. It also demonstrates how easy it is to integrate spring with Wicket.
    We learned from our two Wicket recipes that we can easily use Spring-basic and
    Spring-form-based authentication with a database and the same can be extended
    to LDAP as well.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe we are going to add a customized JSP form. We expect the Wicket
    application to call our JSP form for login. If the developer doesn't want to create
    a Wicket form, they can use this approach. This approach also holds good for GWT
    and Vaadin.
  prefs: []
  type: TYPE_NORMAL
- en: You also need to give anonymous access to the login page.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create a Maven Wicket project: `spring-security-wicket_customized_jsp`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Update the `pom.xml` file with Spring dependency.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create an `applicationContext.xml` file. It's mandatory to name it as `applicationContext`
    or else we will get error messages in the console.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Edit the `web.xml` with Spring listeners.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Also add the `login.js`p configuration as a servlet to `web.xml`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a database, `details.xml` file, and add the database details.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add the file as a context parameter to the Spring listener.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Also, you need to add a `login.jsp`; you can use the `login.jsp` file used in
    the previous chapter.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following steps are for integrating Spring Security with the Wicket framework
    to demonstrate form-based authentication with a customized JSP:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the `applicationContext.xml` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The customized `login.jsp` has been configured as an anonymous user in the `applicationContext.xml`
    file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the `web.xml` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The `login.jsp` has been configured as a servlet.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now access the following URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '`http://localhost:8080/spring-security-wicket_springform/`'
  prefs: []
  type: TYPE_NORMAL
- en: In this example we are integrating the Wicket application with our own `login.jsp`
    file to do the authentication and authorization. When the user tries to access
    the Wicket application, Spring Security interrupts the user from accessing the
    application that provides the jsp page created and configured in the `applicationContext.xml`.
    On submit, the Spring Security authentication action is triggered, which does
    the authentication and authorization. On success, the user gains access to the
    Wicket application.
  prefs: []
  type: TYPE_NORMAL
- en: 'You should see the following screenshot when you access this URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/7525OS_07_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Spring authentication with Wicket authorization* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Multitenancy using Wicket and Spring Security* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring authentication with Wicket authorization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far we have seen various options to use Spring Security outside the Wicket
    application. We shall now see how we can create a security form in the wicket
    framework and use it with the Spring framework with two different roles. The recipe
    also demonstrates how we can use Spring beans in the Wicket application.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create a Maven Wicket project: `spring-security-wicket`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Update the `pom.xml` file with Spring dependency.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create an `applicationContext.xml` file. It's mandatory to name it as `applicationContext`
    or else we will get error messages in the console.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add a `spring-wicket-security` dependency.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Edit the `web.xml` with Spring listeners.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create `EditorPage.html` and `AuthorPage.html` and corresponding `EditorPage.java`
    and `AuthorPage.java` respectively. The author page and the editor page are similar
    pages but invoked based on roles.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a `HomePage.java` and `HomePage.html`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create `SignInPage.html` and `SignInPage.java`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Subclass the `AuthenticatedWebSession` class and override the methods in the
    super class. By default it uses Wicket authentication, so override it to use Spring
    authentication.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following step is for implementing authentication with Spring security and
    authorization with spring Wicket editing the `application-Context.xml`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Edit the `spring-wicket-security.xml` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Edit the `AuthorPage.java` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Edit the `SigInPage.java` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Edit the `HomePage.java` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Editing the `MyWebSession.java` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The implementation is very simple; all that we need to do is to have a Wicket
    sign-in form. After clicking on **submit** we need to get an authenticated session,
    and this approach will give us an option to integrate Spring security with the
    Wicket application where we have created a login form using the Wicket application.
    Spring authenticates the user credentials on success and communicates with the
    Wicket framework to show the respective authorized pages.
  prefs: []
  type: TYPE_NORMAL
- en: The work flow of the Wicket application with Spring security integration is
    explained as follows.
  prefs: []
  type: TYPE_NORMAL
- en: 'When the user clicks on the URL: `http://localhost:8080/spring-security-wicket/`
    , the user is allowed to access the home page. The home page shows two links,
    which indicates two different roles and users. After successful authentication
    the user will be authorized to use respective pages based on the roles. These
    pages are shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/7525OS_07_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The home page on application startup
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/7525OS_07_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Signin Page
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/7525OS_07_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Author page
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/7525OS_07_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Multitenancy using Wicket and Spring Security* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Multitenancy using Wicket and Spring Security
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Multitenancy has become a popular word with cloud. In a multitenancy setup,
    each tenant will have a separate datasource. We need to create two different data
    sources and look ups for the datasource. Let's use a simple Wicket application
    with a customized JSP, which will have a tenant drop down menu. The user selects
    a tenant from the drop down menu and a datasource corresponding to the tenant
    will be set.
  prefs: []
  type: TYPE_NORMAL
- en: I am using NetBeans IDE, which will recognize the Maven projects easily. NetBeans
    also comes with a glassfish application server and derby database.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Update the `login.jsp` file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Update the `pom.xml` file with derby database dependency
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Edit the `applicationContext.xml`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Edit the `spring-security.xml`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Edit the `web.xml` file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a filter to capture the tenant ID
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Also create two databases in derby
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create two tables `USERS` and `USER_ROLES` in both databases
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add columns in `USERS` (`USER_ID`, `USERNAME`, and `PASSWORD`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add columns in `USER_ROLES` (`USER_ID`, `USER_ROLE_ID`, and `AUTHORITY`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following steps are for implementing multitenancy in a Wicket application
    with Spring Security API:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the `application-Context.xml` file with two data sources:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Edit the `spring-wicket-security.xml` file and also add `ExceptionMappingAuthenticationFailureHandler`
    bean to capture SQL exceptions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Edit the `login.jsp` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Edit the `TenantRoutingDataSource.java` file to route the tenant to a different
    datasource. The class is a subclass of spring's `AbstractRoutingDataSource`. It
    is used to set the datasource.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The URL: [http://docs.spring.io/spring/docs/3.1.x/javadoc-api/org/springframework/jdbc/datasource/lookup/AbstractRoutingDataSource.html](http://docs.spring.io/spring/docs/3.1.x/javadoc-api/org/springframework/jdbc/datasource/lookup/AbstractRoutingDataSource.html).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Edit `MultitenantFilter` to capture the tenant type and to set the datasource:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When the user tries to access the application, they will be redirected to the
    login form in which the user enters their user name and password and selects the
    tenant. This can also be a company name or location based on business needs. Based
    on the tenant selected, Spring sets the authentication provider. The `MultitenantFilter`
    with `TenantRoutingDataSource` class sets the tenant information in the `threadLocalUtil.`
    The user is authenticated with the tenant data source and is taken to the home
    page.
  prefs: []
  type: TYPE_NORMAL
- en: 'Login page on application start up will look as shown in the following screenshots:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/7525OS_07_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Login.page
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/7525OS_07_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Exception if tenant not
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/7525OS_07_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Selected bad credential exception displayed
  prefs: []
  type: TYPE_NORMAL
