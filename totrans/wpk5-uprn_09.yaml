- en: Assessment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Answers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section comprises the answers to the questions given to the reader at the
    end of each chapter. The reader should refer to this section when testing themselves
    or others.
  prefs: []
  type: TYPE_NORMAL
- en: It is recommended to first read each chapter carefully or as many times as you
    feel you will need to fully digest the information.
  prefs: []
  type: TYPE_NORMAL
- en: After this, you may want to get a piece of scrap paper and jot down your answers
    to each set of questions before turning to this *Assessment* section and checking
    to see if you are right. You may want to award yourself a mark for each correct
    answer and see if you can improve on that score later.
  prefs: []
  type: TYPE_NORMAL
- en: Good luck!
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 1: Introduction to Webpack 5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Webpack is a module bundler for JavaScript applications.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The bundle is the output file generated by Webpack. It contains all of the modules
    which are used in the application. The bundle generation process is regulated
    by Webpack config file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 4.29.6 or 4.0 is acceptable.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Node.js
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Any time one file depends on another, Webpack treats this as a dependency.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`install`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: NPM
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With the entry of a minus sign in front of the `lodash` call.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The "distribution" code is the minimized and optimized output
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: of our build process that will eventually be loaded in the browser.
  prefs: []
  type: TYPE_NORMAL
- en: To ensure we keep our package as private, also removing the main entry. By doing
    this we can prevent accidentally publishing your code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Chapter 2: Working with Modules and Code Splitting'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Code splitting is the process of automatically organizing your programming ins
    a modular format. Modular programming is the wider concept.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A Chunk refers to a group of modules.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Dynamic imports are essentially on-demand imports into Webpack. An entry point
    is a fixed and configured Entry Pint where the build begins processing code from.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Module Chunks** using the preload directive loads in parallel to its parent
    ''chunk'', whereas a prefetched chunk starts after the parent chunk finishes loading. **Chunks** must
    be instantly requested by the parent chunk when preloaded, whereas a prefetched
    can be used at any time. **Chunks** using the preload directive are instantly
    downloaded when called. A prefetched chunk is downloaded while the browser is
    idle.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Code linting is the process of removing the unwanted or surplus code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A promise refers to information returned form a loader.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `**SplitChunksPlugin**` allows the extraction of common dependencies into
    entry chunks.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This tool will analyze your bundle and give suggestions to reduce your bundle
    size.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This offers an Interactive pie chart used for Webpack stats.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It is a method for displaying hierarchical data using nested figures, usually
    rectangles.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Chapter 3: Using Configurations and Options'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The configuration is done via a set of Configuration Files and Options are set
    using Command-Line.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A command-line technique which informs the bundler, what configuration file
    to use.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The file-loader.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: JSON files.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Each file that Webpack generates.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This will force Webpack to exit its bundling process.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This option will limit the number of parallel processed modules.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It will specify the file from which the last set of records is read
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It will disable **AMD** support.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Compiling is the process by which Webpack 5 assembles the information including
    assets
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Chapter 4: APIs Loaders and Plugins'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Internationalization *(*i18n) is the process of preparing software so that it
    supports local languages and cultural settings
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Babel
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To convert **ECMAScript** to an earlier version for compatibility purposes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Loader-builder
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The loader allows you to write mixed HTML, CSS and JavaScript Polymer element
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The ability to make mixed-use HTML, CSS and JavaScript files and process them
    in the Webpack environment.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The compiler.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Chapter 5: Libraries and Frameworks'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Vue's template compiler.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Main.ts` and `Vendor.ts`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Node v6.9.0** installed and **Webpack v4.0.0.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To inspect them for the command-line interface.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A Single-page application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Webpack's configuration file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `@` symbol: `import '@angular/http';`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A JavaScript tag in the HTML file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: An open-source package manager that is similar to NPM, that comes part of Node.JS.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Runtime only **ECMAScript** module compilation
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Chapter 6: Deployment and Installation'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When using languages that are considered verbose, the programmer must write
    a lot of code to accomplish only minor functionality. Such code is called boilerplate.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tree shaking is a term for dead-code elimination.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Essentially to polyfill or patch code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To deliver a native application experience online.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Handle the automation of code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Gulp, Mocha and Karma.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: ECMAScript 2015, CommonJS and AMD.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Chapter 7: Debugging and Migration'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Hot Module Replacement.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It tweaks React components in real-time.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Command Line
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inspection flag.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The module type.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: By preventing the unintentional dropping of code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The configuration file, `webpack.config.js`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Chapter 8: Authoring Tutorials and Live Coding'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Yes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: One by one or by using a regular expression.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As a variable, an object, through a window or using **UMD**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It can cause a hashing break when the root for the project is moved
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As it will execute it every single time the module is updated
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Because this information is used to invalidate cacheable loaders and recompile
    in watch mode.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In reverse order, either right to left or bottom to top depending on array format.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
