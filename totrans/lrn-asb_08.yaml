- en: Moving to the Cloud
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will move from using our local virtual machine to using
    Ansible to launch instances in a public cloud provider. For this chapter, we will
    be using DigitalOcean, and we are targeting this provider as it allows us to simply
    launch virtual machines and interact with them, without having too much configuration
    overhead.
  prefs: []
  type: TYPE_NORMAL
- en: We will then look at adapting our WordPress playbook so that it interacts with
    the newly launched instance.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: A quick introduction to DigitalOcean
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Launching instances in DigitalOcean
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to switch between running Ansible locally and remotely so we can deploy
    WordPress
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we are going to be launching instances in a public cloud, so
    if you are following along you will need an account with DigitalOcean. As with
    other chapters, complete versions of the playbooks can be found in the repository
    in the `Chapter08` folder at [https://github.com/PacktPublishing/Learn-Ansible/tree/master/Chapter08](https://github.com/PacktPublishing/Learn-Ansible/tree/master/Chapter08).
  prefs: []
  type: TYPE_NORMAL
- en: Interacting with DigitalOcean
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: DigitalOcean was founded in 2011 and has grown from a typical virtual private
    server host with a single data center to a developer-friendly cloud service provider
    with data centers around the world. Netcraft noted that in December 2012, DigitalOcean
    hosted around 100 web-facing servers; in March 2018 that number exceeds 400,000,
    making DigitalOcean the third largest host of web-facing instances.
  prefs: []
  type: TYPE_NORMAL
- en: What makes DigitalOcean popular among developers, apart from its prices, is
    its performance; DigitalOcean was one of the first hosting companies to offer
    all **solid-state drives** (**SSD**) for its instance storage. It is simple-to-use
    web-based control panel, alongside the ability to launch instances from its command-line
    interface, and also a powerful API, which allows you to launch instances (which
    DigitalOcean calls Droplets) from within your applications, and also tools such
    as Ansible.
  prefs: []
  type: TYPE_NORMAL
- en: You can sign up for an account at [https://www.digitalocean.com/](https://www.digitalocean.com/).
    Once you have signed up, the first thing that I recommend you do before proceeding
    with anything else is to configure two-factor authentication on your account.
  prefs: []
  type: TYPE_NORMAL
- en: '**Two-factor a****uthentication** (**2FA**) or **m****ulti-factor authentication**
    (**MFA**) adds an additional level of authentication to your account. Typically,
    this is achieved by sending a code via SMS to a device that has been associated
    with your account or by linking the account to a third-party authentication application
    such as Google or Microsoft Authenticator, which is running on your smartphone.
    Accounts that are tied to one of these services require you to typically enter
    a six-digit number, which is rotated every 30 seconds.'
  prefs: []
  type: TYPE_NORMAL
- en: You can configure 2FA by going to your settings in the DigitalOcean control
    panel and then clicking on Security, which can be found in the left-hand-side
    menu; once there, follow the onscreen instructions to enable 2FA on your account.
  prefs: []
  type: TYPE_NORMAL
- en: Generating a personal access token
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For our playbook to be able to be able to launch a Droplet in our DigitalOcean
    account, we will need to generate a personal access token to interact with the
    DigitalOcean API. To do this, click on the API link, which can be found in the
    menu at the top of the DigitalOcean web-based control panel.
  prefs: []
  type: TYPE_NORMAL
- en: 'Clicking on the Generate New Token button will open the following dialog box:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/0f0b015c-341f-4a89-ab40-c643a369d2f1.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, I have named my token `Ansible` so it can be easily identified.
    Clicking the Generate Token button will create a token; it will only be displayed
    once so please make sure you make a note of it.
  prefs: []
  type: TYPE_NORMAL
- en: Anyone who has a copy of your personal access token will be able to launch resources
    in your DigitalOcean account; please ensure that you keep it safe and do not publish
    your token anywhere.
  prefs: []
  type: TYPE_NORMAL
- en: 'I have blurred out my token in the following screenshot, but it should give
    you an idea of what you will see after generating your personal access token:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/d2666137-b386-49fe-aa7a-cbd70a521bdb.png)'
  prefs: []
  type: TYPE_IMG
- en: While we now have our token, there is one more thing we need to configure before
    we start our playbook.
  prefs: []
  type: TYPE_NORMAL
- en: Installing dopy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'One of the modules we will be using requires a Python module called `dopy`;
    it acts a wrapper for the DigitalOcean API and can be installed using the following
    `pip` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Once `dopy` is installed, we can make a start writing the playbook.
  prefs: []
  type: TYPE_NORMAL
- en: Launching a Droplet
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As per previous playbooks we have written, you can create the skeleton structure
    by running the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: There are two tasks we need to complete to launch our Droplet; the first is
    that we need to make sure that a copy of our public SSH key is uploaded to DigitalOcean
    so that we can inject it into our Droplet launched during the second task.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we proceed with looking at the role which launches the Droplet we should
    figure what we are going to do with the personal access token required by the
    playbook to access the DigitalOcean API. For this we are going to use Ansible
    Vault to encode just the token; run the following command, making sure you replace
    the contents of `encrypt_string` with your own token:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The tokens used throughout these chapters are randomly generated; please make
    sure you replace them with your own.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the output for the preceding commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/41bf40bd-a56d-498d-9271-392ab015a599.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As you can see, this returns the encrypted token, so place the encrypted token
    in the `group_vars/common.yml` file. While we are populating variables, let''s
    take a look at what the content of `roles/droplet/defaults/main.yml` should look
    like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: There are two collections of key values; the first deals with the SSH key, which
    the playbook will be uploading, and the second contains the information for launching
    the Droplet. The defaults for our initial playbook run will launch a 1-CPU core,
    2 GB RAM, 50-GB HDD CentOS 7 Droplet in the DigitalOcean London data center.
  prefs: []
  type: TYPE_NORMAL
- en: 'The tasks for the launching the Droplet, which should be in `roles/droplet/tasks/main.yml`,
    contain two separate parts; the first part deals with uploading the SSH key, which
    needs to be there so we can launch the Droplet using it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, this task uses the token we encrypted with Ansible Vault; we
    are also using the `with_file` directive to copy the contents of the key file,
    which is at `~/.ssh/id_rsa.pub`. This task will do one of three things depending
    on what you already have in your DigitalOcean account:'
  prefs: []
  type: TYPE_NORMAL
- en: If the key does not exist, it will upload it
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If a key matches the fingerprint of `~/.ssh/id_rsa.pub` but has a different
    name, then it will rename that key
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the key and name match, nothing will be uploaded or changed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now that we know that we have our key uploaded, we need to know its unique
    ID. To find this out, we should gather facts on all of the keys that are configured
    in our DigitalOcean account by running the following task:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: This will return a JSON array named `ssh_keys` which contains the name of the
    key, the fingerprint of the key, the contents of the key itself, and also the
    key's unique ID; this information is returned for each of the keys that are configured
    in our DigitalOcean account. As we need to know the ID of just one of those keys,
    we need to manipulate the results to filter the list down to just the single key
    we uploaded, and then set the ID as a variable.
  prefs: []
  type: TYPE_NORMAL
- en: 'As we know, we have a JSON array of potential keys stored in the `ssh_keys`value;
    for me, this looked like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'You may have noticed I have already executed the playbook and uploaded my key
    so that I can walk through this task with you. We now need to find the key called
    `key.name`, which in our case is `Ansible`, and then return just the ID. To do
    this, we are going to add the following task:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, we are using the `set_fact` module to create a key-value pair
    called `pubkey`; we are using the ID of an item, and to make sure we return just
    one item, we are applying a JSON query to our array. This query makes sure that
    only the JSON that contains the `key.name` is returned in the `with_items` list;
    from here we can take the `id` of the single item, which allows us to move on
    to the second part, which is launching the Droplet.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we know the ID of the SSH key we want to launch our Droplet with,
    we can move on to the second part of the role. The following task launches the
    Droplet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: This uses the `digital_ocean` module to launch the Droplet. Most of the items
    are self-explanatory; however, there is one important option we have to set a
    value for and that is `unique_name`. By default, `unique_name` is set to `no`,
    and what this means is that if we were to run our playbook a second time, a new
    Droplet with exactly the same details as the first Droplet we launched would be
    created; run it a third time and a third Droplet will be created. Setting `unique_name`
    to `yes` will mean that only a single Droplet with whatever the value of `droplet.name`
    is active at one time.
  prefs: []
  type: TYPE_NORMAL
- en: 'As you can see, we are registering the output of the task as a value. Some
    details about the Droplet are returned as part of the task execution; the IP address
    of the Droplet is one of them, so we can use this to set a fact and then print
    a message with the IP address:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'That completes the basic playbook and once we have updated the `site.yml` file,
    we can run it. This should contain the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, we are just using localhost so there is no need to call the
    host inventory file.
  prefs: []
  type: TYPE_NORMAL
- en: Running the playbook
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As we have a value that is encrypted using the Vault, we need to run the following
    command to run the playbook:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'This will prompt for the passphrase you set to encrypt the Vault. Once you
    have entered the passphrase, the play will run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, this uploaded my key and launched a Droplet that has an IP
    address of `159.65.27.87` (this IP is no longer in use by this Droplet). This
    is reflected in the DigitalOcean control panel, where we can see the key that
    has been added:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/182babfc-1dc7-49fc-81d6-2cf586983380.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You can also see the Droplet on the Droplets page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/b49cc2b2-be4a-4ef1-9d4d-43b6cea742c6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Also, you can SSH into the Droplet using the  `root` username:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/c75163c1-61f0-49bf-8398-f2923e1ddb4d.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, launching and interacting with DigitalOcean is relatively simple.
    Before we progress to the next section, destroy your instance from within the
    DigitalOcean control panel.
  prefs: []
  type: TYPE_NORMAL
- en: WordPress on DigitalOcean
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now we have a playbook that launches a Droplet, we are going to make a slight
    adaptation and install WordPress on the Droplet we launch. To do this, make a
    copy of the folder that holds the playbook we just ran and call it `digitalocean-wordpress`.
    Copy the three roles, `stack-install`, `stack-config`, and `wordpress`, from the
    `Chapter06/lemp-multi/roles` folder.
  prefs: []
  type: TYPE_NORMAL
- en: The host inventory
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The first file we are going to change is the host inventory file called production;
    this needs to be updated to be the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: What we have here is an empty host group called `droplets`, and then we set
    some global variables for the Droplet we are launching. Don't worry about adding
    the actual host just yet; we will be adding it during the playbook run.
  prefs: []
  type: TYPE_NORMAL
- en: Variables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We are going to be overriding a few of the default variables. To do this, update
    the `group_vars/common.yml` file to read like this, making sure you update the
    `do_token` value to reflect your own:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, the majority of the values are their default values; the four
    values we are changing are:'
  prefs: []
  type: TYPE_NORMAL
- en: '`droplet.name`: This is a simple update to the name so we can easily spot our
    instance in the DigitalOcean control panel.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`wordpress.domain`: This is the important change here. As you can see, we are
    using the `droplet_ip` variable we set on our Ansible controller. To make the
    variable available to our WordPress host, we are telling Ansible to use the variable
    from localhost. If we hadn''t done this, then the variable would not have been
    set; we will look at why in the next section.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`wordpress.title`: A slight tweak to the title our WordPress site is configured
    to reflect where it is hosted.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`wordpress.password`: Changing the password so it is more complex, as we are
    launching on a publicly available IP address.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The playbook
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The next file we are going to change is the `site.yml` one. This file needs
    to be updated to run the roles both locally and also against the Droplet we have
    launched:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Our updated `site.yml` file contains two different plays: the first one runs
    on our Ansible controller and interacts with the DigitalOcean API to launch a
    Droplet, the second play then connects to the hosts in the `digitalocean` group
    to install WordPress. So how does Ansible know the IP address of the host to connect
    to?'
  prefs: []
  type: TYPE_NORMAL
- en: The droplet role
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We need to make one change, the `droplet` role, which can be found at `roles/droplet/tasks/main.yml`;
    this change takes the dynamically assigned IP address and adds it to our `droplets`
    group of hosts. To do this, replace the following task:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Replace it with the following task:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, this takes the `droplet_ip` variable and adds a host using the
    `add_host` module to the group.
  prefs: []
  type: TYPE_NORMAL
- en: Running the playbook
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we have all of the pieces of the playbook together, we can launch
    a Droplet and install WordPress by running:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'It will take a little while to launch the Droplet and perform the installation;
    at the end of it you should have the IP address listed in the play overview as
    the IP address is used as the name of our Droplet host. Here is the end of my
    playbook run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Going to the IP address in your browser should present you with something like
    the following page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/2d73f5a8-dbd7-4817-967e-66706e827aa8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You should be able to log in using the new password we set in the `common.yml`
    file. Have a play with the WordPress installation; when you are ready, destroy
    the Droplet from within the DigitalOcean control panel. But remember: leaving
    the Droplet running will incur a cost.'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we launched our first instances in a public cloud using one
    of the Ansible cloud modules; as you have seen, the process was relatively straightforward
    and we managed to launch compute resource in the cloud and then install WordPress
    on it, without making any changes to the roles we covered in [Chapter 5](159d7be3-6d13-4a66-8766-e4cf3b982b0f.xhtml),
    *Deploying WordPress*.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we are going to expand on some of the techniques we have
    covered in this chapter and return to networking, but unlike the last chapter,
    where we covered networking devices, we will be looking at networking in public
    clouds.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What is the name of the Python module we need to install to support the `digital_ocean`
    module?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'True or false: You should always encrypt sensitive values such as the DigitalOcean
    personal access token.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which filter are we using to find the ID of the SSH key we need to launch our
    Droplet with?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: State and explain why we used the `unique_name` option in the `digital_ocean`
    task.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the correct syntax for accessing variables from another Ansible host?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'True or false: The `add_server` module is used to add our Droplet to the host
    group.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Try launching an Ubuntu Droplet and install WordPress on it; the image ID to
    use is `ubuntu-16-04-x64` and don't forget to change the `ansible_python_interpreter`
    value.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can read more details on the Netcraft statistics on DigitalOcean at [http://trends.netcraft.com/www.digitalocean.com/](http://trends.netcraft.com/www.digitalocean.com/).
  prefs: []
  type: TYPE_NORMAL
