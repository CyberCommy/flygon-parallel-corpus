- en: '*Chapter 10*: Pentesting Best Practices'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Pentesting is not a one-size-fits-all type of assessment. What applies to one
    pentest may differ from another. It's essential to stay on top of trends and skillsets,
    and have an understanding of what it means to pentest. It's also important to
    understand that AWS pentesting may differ from traditional pentesting, as we have
    seen throughout this book and will see further in this chapter. It's vital that
    we understand both the technical and non-technical parts of AWS pentesting – which
    is exactly what this chapter is all about. We will begin with an overview of the
    steps to be carried out during a pentest. We will then look at the unknowns of
    AWS pentesting. We will learn about prepping your environment before conducting
    a pentest, and finally, we will discuss some practical steps that need to be carried
    out after the pentest.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we''ll cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Pentesting methodology for AWS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Knowing your pentest and the unknowns of AWS pentesting
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pre-conditioning for the pentest
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Avoiding communication breakdown
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Achieving security and not obscurity
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Post-pentest – after the pentest
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To follow along with the instructions in this chapter, you will need the following:'
  prefs: []
  type: TYPE_NORMAL
- en: AWS CLI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Metasploit
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pentesting methodology for AWS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section will deviate from the traditional pentesting methodology used for
    a non-cloud pentesting environment. We don't follow the conventional pentesting
    methods primarily due to our target's scope – in this case, our target would be
    an AWS environment. Additionally, we will be performing functional testing with
    valid credentials provided by the client that is being pentested.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: '**Functional testing** is a means and method of scanning and checking for vulnerabilities
    and misconfigured services that have been implemented by users.'
  prefs: []
  type: TYPE_NORMAL
- en: This whole chapter will discuss the dos and don'ts of pentesting and discuss
    details that need to be understood before and after performing a pentest. However,
    before we get into any of that, we need to understand the steps on how we deliver
    a pentest against AWS.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s break down the four different steps in performing a pentest on an AWS
    target:'
  prefs: []
  type: TYPE_NORMAL
- en: Reconnaissance
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Exploitation
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Post-exploitation
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Reporting
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's look at each of them in detail.
  prefs: []
  type: TYPE_NORMAL
- en: Reconnaissance
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Reconnaissance**, also commonly known as **recon**, is where we gather information
    about the target using various tools. We used some of these tools back in [*Chapter
    2*](B15630_02_Final_ASB_ePub.xhtml#_idTextAnchor056), *Pentesting and Ethical
    Hacking*, and learned how we can collect public information about a target.'
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, we use the recon stage to gather information about services and
    users. Services such as Lambda, S3, and EC2 are services that you would use to
    discover and enumerate information from the target environment – discovering full
    URL paths to S3 buckets, finding public DNS addresses as entry points to internal
    networks via EC2, and identifying weak Lambda functions and policies. All of these
    are part of the recon phase during the AWS pentest.
  prefs: []
  type: TYPE_NORMAL
- en: Once we have all the information about our target environment, it's time to
    move on to the exploitation phase, where we will begin to create an **attack path**,
    as well as **weaponize** and **exploit** our vulnerable services and targets.
  prefs: []
  type: TYPE_NORMAL
- en: Exploitation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is by far one of the more fun portions of the AWS pentesting methodology.
    We take all our gathered information during the exploitation phase and create
    an attack path that we believe can work on the target environment – this is, of
    course, with our discovered information. An attack path is a theoretical step-by-step
    process that you build out that highlights the steps taken to launch an attack
    based on the information discovered during the recon phase. Let's take a look
    at a couple of different attack paths we could create based on information that
    we may discover during the recon phase of pentesting AWS. We will describe an
    attack path that attacks services from both an **external** and an **internal**
    threat.
  prefs: []
  type: TYPE_NORMAL
- en: Attack paths
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Here is an attack path that illustrates what an insider threat could do. Remember
    that an insider threat is someone who works for the company and already has access
    to the environment with valid credentials:'
  prefs: []
  type: TYPE_NORMAL
- en: Discovering an **S3 bucket** with a weak policy and possibly sensitive information.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Modifying a **weak policy** to allow an insider to **retrieve confidential information**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Insider exfiltrates sensitive data and creates a new policy that blocks legitimate
    users from accessing the S3 bucket.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Here is an example of a potential attack path for AWS without knowledge of
    any credentials:'
  prefs: []
  type: TYPE_NORMAL
- en: Identifying credentials in a public GitHub repository.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using those credentials to authenticate to the AWS environment.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: An EC2 instance with a public DNS hosts a vulnerable web application such as
    WordPress that allows pentesters to attack and access the host operating system.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Install backdoors for persistent access.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Scan the internal VPC network and discover additional vulnerable targets.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Weaponize
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: These attack paths illustrate what potential harm **could** be done; however,
    an attack path is only a theory based on what is discovered in the environment.
    In order to exploit, the attack path needs to have methods applied to it in order
    to weaponize the attack path.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: Methods are tools and tactics used to execute the attack.
  prefs: []
  type: TYPE_NORMAL
- en: As a pentester, you'll have tools to help you achieve the results from your
    specific attack paths. Tools such as **Kali Linux**, **Metasploit**, **and AWS
    CLI** work very well to execute the attack paths we have illustrated in this section.
    You can also write your own tools with Bash or Python, as we did back in [*Chapter
    4*](B15630_04_Final_ASB_ePub.xhtml#_idTextAnchor171), *Exploiting S3 Buckets*.
    Once you have all your tools ready and your creative attack paths are good to
    go, it's time to exploit the AWS services.
  prefs: []
  type: TYPE_NORMAL
- en: Exploitation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Exploitation involves combing our attack path and our methods by going through
    each step of the attack path and exploiting where possible. Of course, because
    the attack path is theoretical and not practical, there may be times where you
    may not be able to execute the entire attack path fully. If this occurs, ensure
    that you document and report what you were able to do and illustrate the impact
    that has on the organization. We will learn more about reporting throughout this
    chapter, so let's stick to discussing exploitation for now.
  prefs: []
  type: TYPE_NORMAL
- en: Something important to note about exploitation is **denial of service attacks**,
    commonly known as **DoS**, as mentioned in [*Chapter 6*](B15630_06_Final_ASB_ePub.xhtml#_idTextAnchor281),
    *Setting Up and Pentesting AWS Aurora RDS*. If an attack path has a DoS attack
    as part of the attack path, then you and the pentesting team need to discuss with
    the client whether DoS is something that they **permit to occur during the pentest**.
    Typically, you will have a service-level agreement that describes whether DoS
    is permitted or not; however, it is always best to inform or ask whether DoS is
    allowed because it is so intrusive and can shut a system down, making it useless
    for users. Additionally, DoS should never occur on a production system because
    production systems have a direct correlation with driving the business model of
    your client – this means production systems typically relate to helping generate
    some type of revenue. If you suspect that a production system is vulnerable to
    DoS, request a test system that replicates the target system be produced to test
    the **DoS attack** against. This way, you can test your theory and also not impact
    the target organization.
  prefs: []
  type: TYPE_NORMAL
- en: Once you have run your attack paths and fully executed everything, we need to
    see whether there are any ways we can make pivots within the exploited environment
    and check and see whether we can gain access to additional networks.
  prefs: []
  type: TYPE_NORMAL
- en: Post-exploitation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this phase, our major concern is attempting to discover any other resources
    that we may be able to use to further our attack path. In regards to AWS pentesting,
    we can use the post-exploitation phase to find other services that may be exploitable
    – commonly, we would find other vulnerable services hosted on EC2 instances as
    we did in [*Chapter 9*](B15630_09_Final_ASB_ePub.xhtml#_idTextAnchor381), *Real-Life
    Pentesting with Metasploit and More!*.
  prefs: []
  type: TYPE_NORMAL
- en: Another essential point about post-exploitation is checking to see whether we
    can see any other networks that may be visible within the VPC. In the pentesting
    world, recall the term **segmentation** – a term concerned with different networks
    not communicating with each other insecurely. For example, we would want to check
    and ensure that a media network was not able to communicate directly with a financial
    network because the financial network would host **personal identifiable information**
    (**PII**).
  prefs: []
  type: TYPE_NORMAL
- en: Being able to pivot through networks or discover other vulnerable services allows
    our AWS pentesting methodology to fully detail the worst of the worst possibilities
    by illustrating a full attack on vulnerabilities within the client system. This
    full attack highlights proof that the vulnerabilities are real and exploitable
    – meaning an attacker could do it too!
  prefs: []
  type: TYPE_NORMAL
- en: Once we finish with pivoting in the network, it's time to retrace our steps
    and look for anything else we might have missed. This means going back through
    the AWS pentest mythology in its entirety. Once finished with retracing steps
    and going back over any potential missed items, it's time to start writing the
    report!
  prefs: []
  type: TYPE_NORMAL
- en: Next, let's start discussing the report writing process.
  prefs: []
  type: TYPE_NORMAL
- en: Reporting
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A later section, *Post-pentest – after the pentest*, will discuss and break
    down the reporting process in quite a bit more detail; however, it is good to
    discuss how we use reporting in regards to AWS. When gathering the information
    from your pentest, you want to ensure that you detail out the functional portions
    and the more traditional pentesting portions. This means what parts were used
    with credentials and what parts could be exploited with no credentials. Highlighting
    these issues in such a manner allows the target business to understand how an
    attacker or an insider could exploit your system, while also looking at some areas
    for functional improvement within the environment.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's expand on this idea and start discussing reporting further and what
    we should be doing after the technical portion of the AWS pentest is complete.
  prefs: []
  type: TYPE_NORMAL
- en: Knowing your pentest and the unknowns of AWS pentesting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: No rock should ever be left unturned – at least that is how the saying goes.
    The same thing can be said about pentesting AWS, or even pentesting in general.
    A pentest is only as good as those all involved with the pentest. This means that
    the target organization will need to ensure that they have allowed all information
    to be shared, and if the pentest team suspects that any additional information
    is needed, this should be given to the team. This is what we mean by *knowing
    the unknown*.
  prefs: []
  type: TYPE_NORMAL
- en: The best way to know what to look for in a pentest is by pentesting constantly
    and always being open to new ideas. While this sounds a little cliché, it does
    hold some merit. Experience plays a huge role in guiding a pentest to success,
    and the only way to get that experience is by ethically hacking as much as possible
    – in different environments, I might add. That's why throughout this book we have
    looked at a lot of different scenarios based on various services and applications.
    Each one of those exercises helps build the **database** within your head, and
    you can use that knowledge stored in your database to help guide you into the
    future.
  prefs: []
  type: TYPE_NORMAL
- en: Knowing what to expect will be completely based on past experiences. For example,
    if you have a functional test that you would like to execute, you know that you
    should have credentials to your AWS environment way before the pentest even starts.
    You should also know that you should have a full scope of all the instances and
    resources that are being tested. Someone who is a junior cloud pentester may not
    be as aware and will likely not know what to ask. However, after reading this
    text and using your experience, you know that you should be asking more questions
    about what the pentest should entail and know what resources to ask for – thus
    *knowing the unknown*.
  prefs: []
  type: TYPE_NORMAL
- en: Let's discuss a few points that you'll want to ensure you know before jumping
    into an AWS-based pentest, or a pentest that has AWS assets that are within scope.
  prefs: []
  type: TYPE_NORMAL
- en: Obtaining AWS credentials
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Gathering credentials is **critical** to being able to effectively perform a
    **functional test** on your target. Without those credentials, you won't have
    access to any resources and won't be able to check for misconfigurations such
    as policies, detection processes, and vulnerable functions. We have seen throughout
    most of this book that most resources are not available externally, and those
    that are available to the public should have some type of business case as to
    why they are out in the open on the internet. Typically, businesses will have
    a justifiable reason, such as an instance running a web server that needs to be
    accessible to the internet, a file server that shares public resources, or S3
    public buckets that allow users to share information.
  prefs: []
  type: TYPE_NORMAL
- en: While these are good reasons, they still need to be justified and policies need
    to be put in place that ensure that sensitive information is not placed within
    the public resources, as well as security put in place.
  prefs: []
  type: TYPE_NORMAL
- en: Owners of resources
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It's extremely important to know who owns the resources you are testing. We
    don't mean the overall client, but the department that owns the AWS resources.
    Since AWS is easy to scale and extremely easy to have poor instance management,
    it is important that you have a direct line of communication with whoever operates
    and owns the resources in which you are testing. This will allow you to discuss
    issues before, during, and after the pentest. You will also be able to direct
    any pentest findings to that owner.
  prefs: []
  type: TYPE_NORMAL
- en: Credentials to applications
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When we are pentesting something for the functionality, it's important to have
    credentials for that application. Without having credentials, we won't be able
    to access the applications and see exactly how it works, and more importantly,
    how it works for the target environment. Being able to see how the application
    is used in the environment allows you to have a real sense of how things work
    for the organization and whether they are practicing security.
  prefs: []
  type: TYPE_NORMAL
- en: For example, a web application may have security in place such as strong passwords
    and using encrypted traffic over HTTPS, but the users on the web application may
    have overly permissive controls that allow them to manipulate the web server and
    potentially allow attackers to exploit if a user account were to be exploited.
    Without having credentials to the application, we would never be able to properly
    assess this portion of the application.
  prefs: []
  type: TYPE_NORMAL
- en: Revealing private and public networks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Another significant thing to know is what networks you will be operating in
    and assessing. This helps keep you out of trouble and also know what subnets to
    scan and only assess targets within those subnets. We also need to know whether
    any target hosts within a private **VPC** have a public **DNS** name that is associated
    with them. This lets us know the potential low-hanging fruit areas and targets
    that are more likely to get attacked because they are open to the web.
  prefs: []
  type: TYPE_NORMAL
- en: We now know how to avoid the unknown portions of the pentest, so now let's start
    moving forward and discuss how we condition our team before the pentest even starts.
  prefs: []
  type: TYPE_NORMAL
- en: Pre-conditioning for the pentest
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Prepping for your environment is essential to completing a successful pentest.
    Just like knowing the unknown, it's essential that you have everything in order
    with you and your team and everyone is on the same page with how the pentest is
    supposed to be executed. It's always good to have a checklist on hand before the
    pentest and ensure that all the questions have been answered. Having all your
    questions answered ensures that nothing is left undone or unanswered before a
    pentest starts.
  prefs: []
  type: TYPE_NORMAL
- en: Let's discuss some good things to have in place with your team and your environment
    before starting a pentest.
  prefs: []
  type: TYPE_NORMAL
- en: Team member assignments
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: While this may seem obvious, it is important that each individual on the pentest
    team knows their specific job duties for a pentest. Often, you will want to have
    a pentester performing a portion network or cloud portion of the pentest, while
    another pentester does a web application pentest. It's also important that each
    pentester knows what is within the scope and what is not. **Specific APIs may
    be off-limits**, highly valuable production systems are typically off-limits,
    and certain cloud environments may not be eligible.
  prefs: []
  type: TYPE_NORMAL
- en: No matter the pentest, each tester should understand their duties and the times
    they should be pentesting.
  prefs: []
  type: TYPE_NORMAL
- en: Documentation preparation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Another good thing to have set up is a central way for the pentesters to store
    and share notes during a pentest. Note-sharing ensures that pentesters don't overlap
    and also may help each other while pentesting various environments. Another very
    important aspect of documentation is ensuring that the pentesters take screenshots
    during the pentest. Screenshots help pentesters illustrate in the report what
    they did during the pentest.
  prefs: []
  type: TYPE_NORMAL
- en: Contact list
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Having a contact list of individuals to communicate with during the pentest
    is extremely important as it lets you know who to contact about certain questions
    you may have during the pentest. You should have a detailed list of who to contact
    for various issues, whether it be accessing the cloud environment, not being able
    to access the network, or needing a temporary account created. A detailed list
    of personnel will ensure you can solve these types of issues quickly.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we understand more about what needs to occur before we start pentesting,
    let's discuss some things we should understand while we are pentesting. One of
    the largest issues is a lack of communication, which is exactly what we are going
    to break down in this next section.
  prefs: []
  type: TYPE_NORMAL
- en: Avoiding communication breakdown
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When pentesting, it's easy to get lost in the weeds and forget that there are
    people on the other side of the assessment that rely on you to discuss with them
    what is going on during the pentest. Too many times have I seen communication
    completely cutting out when a pentest begins, and there is no communication until
    the pentest stops. However, this shouldn't be the case – ever.
  prefs: []
  type: TYPE_NORMAL
- en: When pentesting, your client is typically a little curious as to what you are
    doing and it is actually beneficial to keep them in the loop with what is going
    on. Why is it important? For more ways than one. Let's look at a couple of ways
    of how we can keep our engagement free-flowing with communication that allows
    everyone to be part of it and helps avoid any talking roadblocks that may come
    up.
  prefs: []
  type: TYPE_NORMAL
- en: Daily start and stop emails
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Sending an email every time you start and stop a pentest allows your client
    to know when you're starting and gives them a real sense of "the pentesters are
    in the wires, so let's not overreact if we see an alert pop up." It also gives
    a sense to the client that they are getting what they paid for – not saying they
    aren't – and that gives a sense of credibility to their decision to bring you
    on for pentesting. Also, you can use the start-of-the-day email to ask any questions
    you may need answered for the pentest that day, or get an answer for a roadblock
    you may have come across. A roadblock could be not having access to a resource,
    or being locked out of something that is in scope.
  prefs: []
  type: TYPE_NORMAL
- en: Sending stop emails is just as vitally important. Sending stop emails allows
    your client to know you are done and is typically a time where they can send you
    questions if they have any. Also, sending stop emails allows the client to be
    able to talk to their own teams to see whether they saw anything unusual and gives
    them some insight into whether their staff is catching anything. One last thing
    – sending a stop email provides a little insurance for you. By sending a stop
    email, you're notifying them that anything found unusual on the network after
    the pentesting hours was not done by you or your team.
  prefs: []
  type: TYPE_NORMAL
- en: Making use of meetings
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Meetings can tend to be a drag and be a bit redundant, so it is important that
    you do not waste a client's time with needless communication outside the scope
    of pentesting, or you don't say the same things in a meeting every single day.
    Additionally, too many long meetings waste valuable pentesting time. So, what's
    the best way to make an impact in your client meetings while also not wasting
    time? By scheduling a short meeting on the first day of the week and the last
    day of the week.
  prefs: []
  type: TYPE_NORMAL
- en: The meeting on the first day of the week should be used to state any comments,
    worries, concerns, or questions and should take no longer than 30 minutes. If
    a meeting takes longer than 30 minutes, then typically, that means that information
    was missing before the pentest even started. Of course, there are exceptions to
    this rule, such as having to stop a pentest because sensitive information was
    disclosed or perhaps your pentest team accidentally brought something down.
  prefs: []
  type: TYPE_NORMAL
- en: Having a quick recap meeting at the end of the week allows you and your team
    to ask questions that may have not been answered in your daily start and stop
    emails, as well as allows the client to ask any questions they may have for you.
    It's also a great way to end the week and have more a personal, friendly conversation
    before taking a break over the weekend. Remember, your job as a pentester is to
    come off friendly, not arrogant, so making sure the client gets a consistently
    friendly and welcoming tone from you and your team is one of the many keys to
    success.
  prefs: []
  type: TYPE_NORMAL
- en: Answering questions short and simple
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One of the biggest issues in IT is that technical talk often gets too technical
    for many of those involved in the conversation. Using too many technical terms
    can muddy the conversation and often leaves clients feeling confused. That's why
    it is important to use a simple and short discussion to answer technical questions
    without all the technical mess. Let's look at a quick example of how a question
    about attacking S3 buckets can be answered too technically, and then show a simple
    way of how it can be answered.
  prefs: []
  type: TYPE_NORMAL
- en: '**This answer is too technical**:'
  prefs: []
  type: TYPE_NORMAL
- en: '*During the pentest, we found S3 buckets hosting PII data by bypassing weak
    policies that allowed pentesters direct access to the S3 buckets. Pentesters were
    able to query and exfiltrate data via the full URL of the S3 bucket.*'
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, this example uses some pretty heavy technical terms that a non-IT
    employee may not fully understand. If someone doesn't understand the terms you
    are using, they will either ask questions, which may take up more time and take
    away time from pentesting. The other side of things is that the confused person
    may not even ask questions and then leave feeling uncertain. Again, this is why
    it's important to use simple terms. Let's answer the same question, but with more
    simple terminology.
  prefs: []
  type: TYPE_NORMAL
- en: '**This answer is more user-friendly**:'
  prefs: []
  type: TYPE_NORMAL
- en: '*During the pentest, we found S3 resources that had sensitive information that
    could be linked directly to users and customers. Pentesters were able to break
    the policies on the S3 resources and copy data to their own attacking machines.*'
  prefs: []
  type: TYPE_NORMAL
- en: This example strayed away from using really heavy technical terms and used terms
    such as **resources** instead of **buckets**. **Buckets** is a technical term
    that relates to AWS and many users may not understand it; however, using the word
    **resources** helps bridge that gap. We also said the word **break** instead of
    **bypass** because **break** is a fairly common word associated with ethical hacking
    and known by the public.
  prefs: []
  type: TYPE_NORMAL
- en: We've looked at quite a few different areas of how to accurately and effectively
    pentest AWS. Now, let's take a look at how we don't misguide our clients and ourselves
    when illustrating pentesting results and remediations during and after a pentest.
  prefs: []
  type: TYPE_NORMAL
- en: Achieving security and not obscurity
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section will discuss how we stay away from obscurity and actually help
    ourselves, our clients, and our business on how to maintain some sense of actual
    security implementation after pentesting an organization. It's critical that we
    use best practices and let our clients know and understand how to better their
    security posture without hindering the ability of those clients to do daily operations.
    However, this doesn't mean placing a security control that really does nothing
    but patch a **Band-Aid**.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: A Band-Aid is a temporary fix that isn't exactly the best fix. Additionally,
    a Band-Aid could easily be bypassed with some general knowledge of the network
    or system.
  prefs: []
  type: TYPE_NORMAL
- en: Security through obscurity
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's discuss some content on what **security through obscurity** really means
    to us and to our pentesting engagements, especially when it comes to discussing
    how we implement that type of **pseudo-security** within our AWS systems. As mentioned,
    we need to ensure that we are using best practices to help our target businesses
    achieve the highest-rated security posture possible.
  prefs: []
  type: TYPE_NORMAL
- en: Security through obscurity is a term that applies techniques that may secure
    an organization, but often overlook other issues that could lead to other problems.
    Often, it is thought of as implementing security so that only the internal organization
    can access the insecure resource; however, as we have seen, *internal* does not
    mean *secure*. The majority of AWS pentesting is part of functional testing and
    is used to help companies better secure their system. This type of testing uses
    legitimate credentials to access the **internal** systems and look at what an
    **insider** could do with the environment.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's look at a relative exercise that will allow us to look at S3 buckets
    and how we can avoid security through obscurity.
  prefs: []
  type: TYPE_NORMAL
- en: Avoiding obscurity with S3 buckets
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s discuss how we would secure an AWS S3 bucket with security through obscurity.
    Let''s imagine that we have finished a pentest on a client''s S3 environment and
    we discovered a **public S3 bucket** that also has **no access control** implemented
    into it. Let''s take a look at our discovered resource:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we discovered the `packtawspentesting` bucket. We discovered this bucket
    back in [*Chapter 4*](B15630_04_Final_ASB_ePub.xhtml#_idTextAnchor171), *Exploiting
    S3 Buckets*. Let''s pull the public access block information from the bucket:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'You will see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.1 – Public bucket policy block'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_10.01_B15630.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.1 – Public bucket policy block
  prefs: []
  type: TYPE_NORMAL
- en: All the public features are set to false, meaning this bucket is open!
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: 'To find more detailed information about public bucket policies, visit the AWS
    resource on reading the output from public buckets: [https://docs.aws.amazon.com/cli/latest/reference/s3api/get-public-access-block.html](https://docs.aws.amazon.com/cli/latest/reference/s3api/get-public-access-block.html).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we see our bucket is public, let''s move forward and check the permissions
    on our target bucket:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Since we are going to be reporting this issue, we would need to find an easy
    way to find out who owns the bucket. In our case, we will use Metasploit. Start
    Metasploit by typing the `msfdb run` command within your Kali Terminal. Once Metasploit
    is started, we will be using the `auxiliary/cloud/aws/enum_s3` module. Set the
    **access id** and **secret key** to those of the account, then hit **run**. If
    you need a refresher on this, please go back to [*Chapter 9*](B15630_09_Final_ASB_ePub.xhtml#_idTextAnchor381),
    *Real-Life Pentesting with Metasploit and More!*, for a review:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.3 – Bucket policy retrieved from Metasploit'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_10.03_B15630.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.3 – Bucket policy retrieved from Metasploit
  prefs: []
  type: TYPE_NORMAL
- en: We can see the user who owns the bucket and what region it belongs in. This
    will allow us to report the issue and link it directly to the owner so that they
    are aware and can fix this issue. By reporting it directly to the user via the
    pentest report, we can open up a direct line of communication in case the user
    has any issues trying to fix it. This is **step 1** of driving away from **security
    through obscurity**.
  prefs: []
  type: TYPE_NORMAL
- en: '**Step 1** involves ensuring that we keep communication directly with everyone
    involved with engagement and that nobody involved is excluded. Pentesting is a
    large engagement that can be a fun and a learning experience for everyone – however
    it can only be a learning experience if we involve those within the scope of the
    pentest. Traditionally, affected users won''t be notified until post-pentest by
    their own team. This means that the client may only allow what they deem relative
    to fixing the issue.'
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: It is important to note that some clients may not want you to work directly
    with their employees. If this is the case, please understand that this is at the
    request of the client and should not be ignored. Breaking the scope and understanding
    of your client means breaking the trust of your client, and thus the business
    relationship.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's look at **step 2** of how we can help secure our client's S3 resource
    with best judgment and practices. For this, we will need to sign in to the AWS
    console and access our S3 bucket repositories through the AWS GUI. We will be
    taking this approach as if we were the administrator because we need to know the
    exact details of how to fix the issue and illustrating that to our target audience.
  prefs: []
  type: TYPE_NORMAL
- en: Let's start by going to our S3 buckets, which are located at [https://s3.console.aws.amazon.com/s3/home?region=us-west-2#](https://s3.console.aws.amazon.com/s3/home?region=us-west-2#).
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you are at your S3 buckets'' location, let us move forward by making the
    public bucket private. Removing public access will ensure that nobody outside
    the organization can access the S3 bucket:'
  prefs: []
  type: TYPE_NORMAL
- en: Start by clicking on the bucket named `packtawspentesting`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, click on the **Permissions** tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, click **Edit**:![Figure 10.4 – Editing the bucket policy from the AWS
    console
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_10.04_B15630.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.4 – Editing the bucket policy from the AWS console
  prefs: []
  type: TYPE_NORMAL
- en: Check **Block all public access**:![Figure 10.5 – Blocking off public access
    via the AWS console
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_10.05_B15630.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.5 – Blocking off public access via the AWS console
  prefs: []
  type: TYPE_NORMAL
- en: Finish off by clicking **Save**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, the target bucket shouldn't be accessible by the public, meaning only internal
    hosts can access it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we need to move on to **step 3**. In this last and final we step, are going
    to make the bucket be denied by all, and then the administrators will need to
    configure the bucket based on their company''s policies. So, we are going to insist
    that they make a policy that **denies** all and then allows administrators to
    create new rules based on need-to-know access:'
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: Need-to-know access involves allowing access to only those who need it based
    on their job function.
  prefs: []
  type: TYPE_NORMAL
- en: Let's start our final step by going to the `packtawspentesting` S3 bucket.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After clicking the tab, we need to change `Effect:Allow` to `Effect:Deny`:![Figure
    10.6 – Manually altering the bucket policy via the AWS console
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_10.06_B15630.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.6 – Manually altering the bucket policy via the AWS console
  prefs: []
  type: TYPE_NORMAL
- en: Once you're finished, you'll need to click **Save**. You'll be done after that.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Great job, we have now successfully secured our bucket and have advised our
    target to change their bucket policy to fit their company policy. By ensuring
    that we implemented strong security in layers, we took a security-in-depth approach,
    rather than a security-through-obscurity approach.
  prefs: []
  type: TYPE_NORMAL
- en: Using simple terms that make you and clients relate to each other is one of
    the many keys to success in adding value to your pentesting methodology. Also
    remember that not everything about a pentest is technical!
  prefs: []
  type: TYPE_NORMAL
- en: Now that we know what needs to take place before and during the pentest, let's
    take a look at what should occur after the pentest is complete.
  prefs: []
  type: TYPE_NORMAL
- en: Post-pentest – after the pentest
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An essential part of a pentest is going over everything that occurred during
    the pentest – and also being able to illustrate this at a level that is comprehendible
    to everyone. Besides ensuring that the information is represented legibly, it
    is also key to ensure that the proper steps have been taken post-pentest.
  prefs: []
  type: TYPE_NORMAL
- en: Let's move forward and discuss some simple yet practical steps that you can
    expect to take after completing a pentest.
  prefs: []
  type: TYPE_NORMAL
- en: Post-pentest meeting
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Once finishing the pentest, the pentesting team will need to gather and discuss
    what occurred during the pentest. This means any issues, victories, and anything
    that may be valuable information to review and document. Doing so allows the team
    to learn from their mistakes and use those mistakes and learning experiences to
    apply to future pentests. On the other hand, discussing what went well allows
    the team to scale off their better techniques and implement better solutions for
    future pentests.
  prefs: []
  type: TYPE_NORMAL
- en: 'This meeting should also discuss what the team gathered during the test and
    discuss what findings can become recommendations will be put in the report. The
    findings and recommendations tell the client the severe issues that need to be
    fixed to help secure the client''s system posture. The results will be based on
    a matrix that looks something like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.7 – Risk matrix for pentest reporting'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_10.07_B15630.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.7 – Risk matrix for pentest reporting
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, it discusses the likelihood and impact – this allows us to adjust
    the **impact** based on the impact it would have on the client, as well as the
    **likelihood** that this issue would be exploited. Let's take a moment and look
    at this with an example.
  prefs: []
  type: TYPE_NORMAL
- en: Suppose a pentester discovers an easy-to-exploit vulnerability on a production
    system. The impact needs to be placed at **high** for the production system. It
    needs to be placed at **high** because the production system is something the
    company relies on to generate revenue – *so having the system go down would create
    issues that impact customers and could cause monetary loss*. Also, because the
    exploit is easy to exploit (think using Metasploit), it is **very likely**. This
    would make the overall score of the issue on the production system be placed at
    **high**.
  prefs: []
  type: TYPE_NORMAL
- en: Now let's keep moving forward with this and discuss reporting and how we can
    apply what we just learned to reporting!
  prefs: []
  type: TYPE_NORMAL
- en: Reporting
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Reporting is often looked at as one of the most critical steps in pentesting;
    after all, the recommendations will be presented to the client. When creating
    the report, it is essential that you and the entire pentest team work through
    the document and make multiple reviews and edits before sending it to the client.
    Doing numerous reviews will ensure that the grammar is accurate and presents a
    different understanding of how to demonstrate the findings and recommendations.
  prefs: []
  type: TYPE_NORMAL
- en: The findings in the report should show the risk and severity they present to
    the company. The risk is the likelihood that the vulnerability could be exploited,
    while the severity alerts the company to the impact that the vulnerability would
    have on the organization if the vulnerability were to be exploited.
  prefs: []
  type: TYPE_NORMAL
- en: The report will provide a roadmap of how the recommendations can help remediate
    the findings, while ensuring that those findings do not come back up.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, if the public S3 buckets were discovered during a pentest, the
    pentest team could present a 3-month roadmap that helps alleviate the identified
    issue and prevent future occurrences of vulnerable public buckets coming back
    in the AWS environment:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.8 – Roadmap for remediation'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_10.08_B15630.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.8 – Roadmap for remediation
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, this details fairly well what needs to occur for the S3 bucket
    issues to be remediated in a timely manner. Now, let's discuss how we follow up
    with our client.
  prefs: []
  type: TYPE_NORMAL
- en: Six-month follow-up
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Following up 6 months after a pentest engagement allows you to check in on the
    client and see whether they have corrected the issue that you discovered during
    the first pentest. During the 6-month follow-up test, it is best practice to use
    a black-box approach because it allows you to only focus on what you found during
    the last pentest and see whether it potentially opened up any new issues.
  prefs: []
  type: TYPE_NORMAL
- en: If new issues are discovered during the 6-month follow-up, those need to be
    logged and reported just the same as during the initial pentest. If another issue
    is discovered, then your team will also need to do another check-up 6 months later
    based on those findings.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: It should be stated in the pentesting contract that additional pentesting services
    will be required if new issues are discovered during the 6-month follow-up.
  prefs: []
  type: TYPE_NORMAL
- en: We've learned a lot about how we pentest AWS before, during, and after the pentest.
    Now, let's start to wrap things up and move forward to the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This chapter had us look at more conventional and unconventional ways of how
    we can pentest AWS, while also having us take some deeper looks at one of the
    most crucial points of pentesting: **reporting**. We also learned a valuable lesson
    on how to make our pentesting both efficient and effective for both us and our
    teams, while also making an impact on our clients and their organizations.'
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will start learning more about things to avoid during
    pentesting and how we can stay within scope and stay out of trouble!
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Art of Pentesting: [https://blog.rapid7.com/2020/02/13/ask-a-pen-tester-q-a-part-2-everything-you-need-to-know-about-the-art-of-penetration-testing/](https://blog.rapid7.com/2020/02/13/ask-a-pen-tester-q-a-part-2-everything-you-need-to-know-about-the-art-of-penetration-testing/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'More discussion on security through obscurity: [https://www.techopedia.com/definition/21985/security-through-obscurity-sto](https://www.techopedia.com/definition/21985/security-through-obscurity-sto)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
